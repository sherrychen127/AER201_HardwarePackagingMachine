

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 19 15:41:43 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	idataCOMRAM
    74  001A2E                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _max
    78  001A2E  0004               	dw	4
    79                           
    80                           	psect	smallconst
    81  001000                     __psmallconst:
    82                           	opt stack 0
    83  001000  00                 	db	0
    84  001001                     _keys:
    85                           	opt stack 0
    86  001001  31                 	db	49
    87  001002  32                 	db	50
    88  001003  33                 	db	51
    89  001004  41                 	db	65
    90  001005  34                 	db	52
    91  001006  35                 	db	53
    92  001007  36                 	db	54
    93  001008  42                 	db	66
    94  001009  37                 	db	55
    95  00100A  38                 	db	56
    96  00100B  39                 	db	57
    97  00100C  43                 	db	67
    98  00100D  2A                 	db	42
    99  00100E  30                 	db	48
   100  00100F  23                 	db	35
   101  001010  44                 	db	68
   102  001011  00                 	db	0
   103  001012                     __end_of_keys:
   104                           	opt stack 0
   105  001012                     _dpowers:
   106                           	opt stack 0
   107  001012  0001               	dw	1
   108  001014  000A               	dw	10
   109  001016  0064               	dw	100
   110  001018  03E8               	dw	1000
   111  00101A  2710               	dw	10000
   112  00101C                     __end_of_dpowers:
   113                           	opt stack 0
   114  00101C                     _array:
   115                           	opt stack 0
   116  00101C  31                 	db	49
   117  00101D  30                 	db	48
   118  00101E  00                 	db	0
   119  00101F                     __end_of_array:
   120                           	opt stack 0
   121  00101F                     _LCD_LEFT:
   122                           	opt stack 0
   123  00101F  00                 	db	0
   124  001020                     __end_of_LCD_LEFT:
   125                           	opt stack 0
   126  001020                     _LCD_RIGHT:
   127                           	opt stack 0
   128  001020  01                 	db	1
   129  001021                     __end_of_LCD_RIGHT:
   130                           	opt stack 0
   131  001021                     _LCD_SIZE_VERT:
   132                           	opt stack 0
   133  001021  02                 	db	2
   134  001022                     __end_of_LCD_SIZE_VERT:
   135                           	opt stack 0
   136  001022                     _LCD_SIZE_HORZ:
   137                           	opt stack 0
   138  001022  10                 	db	16
   139  001023                     __end_of_LCD_SIZE_HORZ:
   140                           	opt stack 0
   141  001023                     _LCD_VERT_LIMIT:
   142                           	opt stack 0
   143  001023  02                 	db	2
   144  001024                     __end_of_LCD_VERT_LIMIT:
   145                           	opt stack 0
   146  001024                     _LCD_HORZ_LIMIT:
   147                           	opt stack 0
   148  001024  28                 	db	40
   149  001025                     __end_of_LCD_HORZ_LIMIT:
   150                           	opt stack 0
   151  0000                     _SSPBUF	set	4041
   152  0000                     _SSPCON2bits	set	4037
   153  0000                     _SSPADD	set	4040
   154  0000                     _SSPCON2	set	4037
   155  0000                     _SSPCON1	set	4038
   156  0000                     _SSPSTAT	set	4039
   157  0000                     _SSPCON1bits	set	4038
   158  0000                     _TRISDbits	set	3989
   159  0000                     _LATDbits	set	3980
   160  0000                     _TRISCbits	set	3988
   161  0000                     _LATCbits	set	3979
   162  0000                     _ADRESH	set	4036
   163  0000                     _ADRESL	set	4035
   164  0000                     _ADCON0bits	set	4034
   165  0000                     _INTCONbits	set	4082
   166  0000                     _ADCON1	set	4033
   167  0000                     _ADCON0	set	4034
   168  0000                     _TRISE	set	3990
   169  0000                     _TRISD	set	3989
   170  0000                     _TRISC	set	3988
   171  0000                     _TRISB	set	3987
   172  0000                     _TRISA	set	3986
   173  0000                     _LATE	set	3981
   174  0000                     _LATD	set	3980
   175  0000                     _LATC	set	3979
   176  0000                     _LATB	set	3978
   177  0000                     _LATA	set	3977
   178  0000                     _ADON	set	32272
   179  0000                     _INT1IE	set	32643
   180  001025                     STR_17:
   181  001025  57                 	db	87	;'W'
   182  001026  61                 	db	97	;'a'
   183  001027  73                 	db	115	;'s'
   184  001028  68                 	db	104	;'h'
   185  001029  65                 	db	101	;'e'
   186  00102A  72                 	db	114	;'r'
   187  00102B  73                 	db	115	;'s'
   188  00102C  3A                 	db	58	;':'
   189  00102D  25                 	db	37
   190  00102E  64                 	db	100	;'d'
   191  00102F  00                 	db	0
   192  001030                     STR_16:
   193  001030  53                 	db	83	;'S'
   194  001031  70                 	db	112	;'p'
   195  001032  61                 	db	97	;'a'
   196  001033  63                 	db	99	;'c'
   197  001034  65                 	db	101	;'e'
   198  001035  72                 	db	114	;'r'
   199  001036  3A                 	db	58	;':'
   200  001037  25                 	db	37
   201  001038  64                 	db	100	;'d'
   202  001039  00                 	db	0
   203  00103A                     STR_14:
   204  00103A  42                 	db	66	;'B'
   205  00103B  6F                 	db	111	;'o'
   206  00103C  6C                 	db	108	;'l'
   207  00103D  74                 	db	116	;'t'
   208  00103E  73                 	db	115	;'s'
   209  00103F  3A                 	db	58	;':'
   210  001040  25                 	db	37
   211  001041  64                 	db	100	;'d'
   212  001042  00                 	db	0
   213  001043                     STR_15:
   214  001043  4E                 	db	78	;'N'
   215  001044  75                 	db	117	;'u'
   216  001045  74                 	db	116	;'t'
   217  001046  73                 	db	115	;'s'
   218  001047  3A                 	db	58	;':'
   219  001048  25                 	db	37
   220  001049  64                 	db	100	;'d'
   221  00104A  00                 	db	0
   222  00104B                     STR_3:
   223  00104B  64                 	db	100	;'d'
   224  00104C  6F                 	db	111	;'o'
   225  00104D  6E                 	db	110	;'n'
   226  00104E  65                 	db	101	;'e'
   227  00104F  00                 	db	0
   228  0000                     
   229                           ; #config settings
   230  001050  00                 	db	0	; dummy byte at the end
   231  0000                     
   232                           	psect	cinit
   233  0018CA                     __pcinit:
   234                           	opt stack 0
   235  0018CA                     start_initialization:
   236                           	opt stack 0
   237  0018CA                     __initialization:
   238                           	opt stack 0
   239                           
   240                           ; Initialize objects allocated to COMRAM (2 bytes)
   241                           ; load TBLPTR registers with __pidataCOMRAM
   242  0018CA  0E2E               	movlw	low __pidataCOMRAM
   243  0018CC  6EF6               	movwf	tblptrl,c
   244  0018CE  0E1A               	movlw	high __pidataCOMRAM
   245  0018D0  6EF7               	movwf	tblptrh,c
   246  0018D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   247  0018D4  6EF8               	movwf	tblptru,c
   248  0018D6  0009               	tblrd		*+	;fetch initializer
   249  0018D8  CFF5 F02E          	movff	tablat,__pdataCOMRAM
   250  0018DC  0009               	tblrd		*+	;fetch initializer
   251  0018DE  CFF5 F02F          	movff	tablat,__pdataCOMRAM+1
   252                           
   253                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   254  0018E2  6A30               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   255                           
   256                           ; Clear objects allocated to COMRAM (18 bytes)
   257  0018E4  EE00  F01C         	lfsr	0,__pbssCOMRAM
   258  0018E8  0E12               	movlw	18
   259  0018EA                     clear_0:
   260  0018EA  6AEE               	clrf	postinc0,c
   261  0018EC  06E8               	decf	wreg,f,c
   262  0018EE  E1FD               	bnz	clear_0
   263  0018F0                     end_of_initialization:
   264                           	opt stack 0
   265  0018F0                     __end_of__initialization:
   266                           	opt stack 0
   267  0018F0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   268  0018F2  6EF8               	movwf	tblptru,c
   269  0018F4  0100               	movlb	0
   270  0018F6  EF29  F008         	goto	_main	;jump to C main() function
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278                           	psect	bitbssCOMRAM
   279  000180                     __pbitbssCOMRAM:
   280                           	opt stack 0
   281  000180                     main@SEND:
   282                           	opt stack 0
   283  000180                     	ds	1
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	bssCOMRAM
   292  00001C                     __pbssCOMRAM:
   293                           	opt stack 0
   294  00001C                     _i:
   295                           	opt stack 0
   296  00001C                     	ds	2
   297  00001E                     _analog_result:
   298                           	opt stack 0
   299  00001E                     	ds	2
   300  000020                     _B_remain:
   301                           	opt stack 0
   302  000020                     	ds	2
   303  000022                     _W_counter:
   304                           	opt stack 0
   305  000022                     	ds	2
   306  000024                     _S_counter:
   307                           	opt stack 0
   308  000024                     	ds	2
   309  000026                     _N_counter:
   310                           	opt stack 0
   311  000026                     	ds	2
   312  000028                     _B_counter:
   313                           	opt stack 0
   314  000028                     	ds	2
   315  00002A                     _state:
   316                           	opt stack 0
   317  00002A                     	ds	2
   318  00002C                     lcd@LCDinterruptState:
   319                           	opt stack 0
   320  00002C                     	ds	1
   321  00002D                     	ds	1
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	dataCOMRAM
   330  00002E                     __pdataCOMRAM:
   331                           	opt stack 0
   332  00002E                     _max:
   333                           	opt stack 0
   334  00002E                     	ds	2
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           
   342                           	psect	cstackCOMRAM
   343  000001                     __pcstackCOMRAM:
   344                           	opt stack 0
   345  000001                     ??_motorStart_0:
   346  000001                     ??_motorStop_0:
   347  000001                     ??_motorStart_1:
   348  000001                     ??_motorStop_1:
   349  000001                     ??_motorStart_2:
   350  000001                     ??_motorStop_2:
   351  000001                     ??_motorStart_3:
   352  000001                     ??_motorStop_3:
   353  000001                     ??_I2C_Master_Wait:
   354  000001                     ?_readADC:
   355                           	opt stack 0
   356  000001                     ?___lwdiv:
   357                           	opt stack 0
   358  000001                     ?___lldiv:
   359                           	opt stack 0
   360  000001                     lcdNibble@temp:
   361                           	opt stack 0
   362  000001                     ___lwdiv@dividend:
   363                           	opt stack 0
   364  000001                     ___lldiv@dividend:
   365                           	opt stack 0
   366                           
   367                           ; 4 bytes @ 0x0
   368  000001                     	ds	1
   369  000002                     lcdNibble@data:
   370                           	opt stack 0
   371  000002                     I2C_Master_Write@byteToWrite:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x1
   375  000002                     	ds	1
   376  000003                     ??_readADC:
   377  000003                     lcdInst@data:
   378                           	opt stack 0
   379  000003                     putch@data:
   380                           	opt stack 0
   381  000003                     ___lwdiv@divisor:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x2
   385  000003                     	ds	1
   386  000004                     ??_initLCD:
   387  000004                     
   388                           ; 1 bytes @ 0x3
   389  000004                     	ds	1
   390  000005                     readADC@channel:
   391                           	opt stack 0
   392  000005                     ___lwdiv@quotient:
   393                           	opt stack 0
   394  000005                     ___lldiv@divisor:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x4
   398  000005                     	ds	2
   399  000007                     ___lwdiv@counter:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x6
   403  000007                     	ds	1
   404  000008                     ?___lwmod:
   405                           	opt stack 0
   406  000008                     ___lwmod@dividend:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x7
   410  000008                     	ds	1
   411  000009                     ___lldiv@quotient:
   412                           	opt stack 0
   413                           
   414                           ; 4 bytes @ 0x8
   415  000009                     	ds	1
   416  00000A                     ___lwmod@divisor:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x9
   420  00000A                     	ds	2
   421  00000C                     ___lwmod@counter:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0xB
   425  00000C                     	ds	1
   426  00000D                     ?_printf:
   427                           	opt stack 0
   428  00000D                     ___lldiv@counter:
   429                           	opt stack 0
   430  00000D                     printf@f:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0xC
   434  00000D                     	ds	1
   435  00000E                     I2C_Master_Init@clockFreq:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0xD
   439  00000E                     	ds	3
   440  000011                     ??_printf:
   441                           
   442                           ; 1 bytes @ 0x10
   443  000011                     	ds	1
   444  000012                     ??_I2C_Master_Init:
   445  000012                     printf@ap:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x11
   449  000012                     	ds	2
   450  000014                     printf@flag:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x13
   454  000014                     	ds	1
   455  000015                     printf@prec:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x14
   459  000015                     	ds	1
   460  000016                     printf@val:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x15
   464  000016                     	ds	2
   465  000018                     printf@c:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x17
   469  000018                     	ds	1
   470  000019                     ??_main:
   471                           
   472                           ; 1 bytes @ 0x18
   473  000019                     	ds	2
   474  00001B                     main@counter:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x1A
   478  00001B                     	ds	1
   479                           tblptru	equ	0xFF8
   480                           tblptrh	equ	0xFF7
   481                           tblptrl	equ	0xFF6
   482                           tablat	equ	0xFF5
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           
   486 ;;
   487 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   488 ;;
   489 ;; *************** function _main *****************
   490 ;; Defined at:
   491 ;;		line 94 in file "main.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;		None
   494 ;; Auto vars:     Size  Location     Type
   495 ;;  mem             3    0        unsigned char [3]
   496 ;;  counter         1   26[COMRAM] unsigned char 
   497 ;;  data            1    0        unsigned char 
   498 ;;  keypress        1    0        unsigned char 
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;Total ram usage:        3 bytes
   513 ;; Hardware stack levels required when called:    3
   514 ;; This function calls:
   515 ;;		_I2C_Master_Init
   516 ;;		_I2C_Master_Start
   517 ;;		_I2C_Master_Stop
   518 ;;		_I2C_Master_Write
   519 ;;		_initLCD
   520 ;;		_lcdInst
   521 ;;		_motorStart_0
   522 ;;		_motorStart_1
   523 ;;		_motorStart_2
   524 ;;		_motorStart_3
   525 ;;		_motorStop_0
   526 ;;		_motorStop_1
   527 ;;		_motorStop_2
   528 ;;		_motorStop_3
   529 ;;		_printf
   530 ;;		_readADC
   531 ;; This function is called by:
   532 ;;		Startup code after reset
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text0
   537  001052                     __ptext0:
   538                           	opt stack 0
   539  001052                     _main:
   540                           	opt stack 28
   541                           
   542                           ;main.c: 100: LATA = 0x00;
   543                           
   544                           ;incstack = 0
   545  001052  0E00               	movlw	0
   546  001054  6E89               	movwf	3977,c	;volatile
   547                           
   548                           ;main.c: 101: LATB = 0x00;
   549  001056  0E00               	movlw	0
   550  001058  6E8A               	movwf	3978,c	;volatile
   551                           
   552                           ;main.c: 102: LATC = 0x00;
   553  00105A  0E00               	movlw	0
   554  00105C  6E8B               	movwf	3979,c	;volatile
   555                           
   556                           ;main.c: 103: LATD = 0x00;
   557  00105E  0E00               	movlw	0
   558  001060  6E8C               	movwf	3980,c	;volatile
   559                           
   560                           ;main.c: 104: LATE = 0x00;
   561  001062  0E00               	movlw	0
   562  001064  6E8D               	movwf	3981,c	;volatile
   563                           
   564                           ;main.c: 108: TRISA = 0xFF;
   565  001066  6892               	setf	3986,c	;volatile
   566                           
   567                           ;main.c: 109: TRISB = 0xFF;
   568  001068  6893               	setf	3987,c	;volatile
   569                           
   570                           ;main.c: 110: TRISC = 0b10000000;
   571  00106A  0E80               	movlw	128
   572  00106C  6E94               	movwf	3988,c	;volatile
   573                           
   574                           ;main.c: 114: TRISD = 0x00;
   575  00106E  0E00               	movlw	0
   576  001070  6E95               	movwf	3989,c	;volatile
   577                           
   578                           ;main.c: 115: TRISE = 0x00;
   579  001072  0E00               	movlw	0
   580  001074  6E96               	movwf	3990,c	;volatile
   581                           
   582                           ;main.c: 118: ADCON0 = 0x00;
   583  001076  0E00               	movlw	0
   584  001078  6EC2               	movwf	4034,c	;volatile
   585                           
   586                           ;main.c: 119: ADCON1 = 0b00001111;
   587  00107A  0E0F               	movlw	15
   588  00107C  6EC1               	movwf	4033,c	;volatile
   589                           
   590                           ;main.c: 123: initLCD();
   591  00107E  EC02  F00C         	call	_initLCD	;wreg free
   592                           
   593                           ;main.c: 126: I2C_Master_Init(100000);
   594  001082  0EA0               	movlw	160
   595  001084  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   596  001086  0E86               	movlw	134
   597  001088  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   598  00108A  0E01               	movlw	1
   599  00108C  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   600  00108E  0E00               	movlw	0
   601  001090  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   602  001092  ECAB  F00B         	call	_I2C_Master_Init	;wreg free
   603                           
   604                           ;main.c: 127: I2C_Master_Start();
   605  001096  EC13  F00D         	call	_I2C_Master_Start	;wreg free
   606                           
   607                           ;main.c: 134: I2C_Master_Write(0b00010000);
   608  00109A  0E00               	movlw	0
   609  00109C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   610  00109E  0E10               	movlw	16
   611  0010A0  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   612  0010A2  EC0A  F00D         	call	_I2C_Master_Write	;wreg free
   613                           
   614                           ;main.c: 135: I2C_Master_Stop();
   615  0010A6  EC0F  F00D         	call	_I2C_Master_Stop	;wreg free
   616                           
   617                           ;main.c: 138: unsigned char mem[3];
   618                           ;main.c: 139: unsigned char counter = 0;
   619  0010AA  0E00               	movlw	0
   620  0010AC  6E1B               	movwf	main@counter,c
   621                           
   622                           ;main.c: 140: unsigned char keypress;
   623                           ;main.c: 141: unsigned char data;
   624                           ;main.c: 142: static bit SEND;
   625                           ;main.c: 143: SEND = 1;
   626  0010AE  8030               	bsf	main@SEND/(0+8),main@SEND& (0+7),c
   627                           
   628                           ;main.c: 153: I2C_Master_Start();
   629  0010B0  EC13  F00D         	call	_I2C_Master_Start	;wreg free
   630                           
   631                           ;main.c: 154: I2C_Master_Write(0b00010000);
   632  0010B4  0E00               	movlw	0
   633  0010B6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   634  0010B8  0E10               	movlw	16
   635  0010BA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   636  0010BC  EC0A  F00D         	call	_I2C_Master_Write	;wreg free
   637                           
   638                           ;main.c: 155: I2C_Master_Write('1');
   639  0010C0  0E00               	movlw	0
   640  0010C2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   641  0010C4  0E31               	movlw	49
   642  0010C6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   643  0010C8  EC0A  F00D         	call	_I2C_Master_Write	;wreg free
   644                           
   645                           ;main.c: 156: I2C_Master_Stop();
   646  0010CC  EC0F  F00D         	call	_I2C_Master_Stop	;wreg free
   647                           
   648                           ;main.c: 181: INT1IE = 1;
   649  0010D0  86F0               	bsf	intcon3,3,c	;volatile
   650                           
   651                           ;main.c: 182: (INTCONbits.GIE = 1);
   652  0010D2  8EF2               	bsf	intcon,7,c	;volatile
   653                           
   654                           ;main.c: 185: initLCD();
   655  0010D4  EC02  F00C         	call	_initLCD	;wreg free
   656                           
   657                           ;main.c: 242: initLCD();
   658  0010D8  EC02  F00C         	call	_initLCD	;wreg free
   659                           
   660                           ;main.c: 243: printf("%d",B_counter);
   661  0010DC  0E37               	movlw	low (STR_16+7)
   662  0010DE  6E0D               	movwf	printf@f,c
   663  0010E0  0E10               	movlw	high (STR_16+7)
   664  0010E2  6E0E               	movwf	printf@f+1,c
   665  0010E4  C028  F00F         	movff	_B_counter,?_printf+2
   666  0010E8  C029  F010         	movff	_B_counter+1,?_printf+3
   667  0010EC  EC9C  F00A         	call	_printf	;wreg free
   668                           
   669                           ;main.c: 244: _delay((unsigned long)((100)*(40000000/4000.0)));
   670  0010F0  0E06               	movlw	6
   671  0010F2  6E1A               	movwf	(??_main+1)& (0+255),c
   672  0010F4  0E13               	movlw	19
   673  0010F6  6E19               	movwf	??_main& (0+255),c
   674  0010F8  0EAE               	movlw	174
   675  0010FA                     u807:
   676  0010FA  2EE8               	decfsz	wreg,f,c
   677  0010FC  D7FE               	bra	u807
   678  0010FE  2E19               	decfsz	??_main& (0+255),f,c
   679  001100  D7FC               	bra	u807
   680  001102  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   681  001104  D7FA               	bra	u807
   682                           
   683                           ;main.c: 245: motorStart_0();
   684  001106  ECDF  F00C         	call	_motorStart_0	;wreg free
   685  00110A                     
   686                           ;main.c: 250: if (B_counter == max){
   687  00110A  502E               	movf	_max,w,c
   688  00110C  1828               	xorwf	_B_counter,w,c
   689  00110E  E107               	bnz	l1640
   690  001110  502F               	movf	_max+1,w,c
   691  001112  1829               	xorwf	_B_counter+1,w,c
   692  001114  A4D8               	btfss	status,2,c
   693  001116  D003               	goto	l122
   694                           
   695                           ;main.c: 251: motorStop_0();
   696  001118  ECA7  F00C         	call	_motorStop_0	;wreg free
   697                           
   698                           ;main.c: 252: break;
   699  00111C  D02E               	goto	l123
   700  00111E                     l122:
   701  00111E                     l1640:
   702                           
   703                           ;main.c: 253: }
   704                           ;main.c: 254: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   705  00111E  0E80               	movlw	128
   706  001120  ECF7  F00C         	call	_lcdInst
   707  001124  0E41               	movlw	65
   708  001126  6E19               	movwf	??_main& (0+255),c
   709  001128  0EEE               	movlw	238
   710  00112A                     u817:
   711  00112A  2EE8               	decfsz	wreg,f,c
   712  00112C  D7FE               	bra	u817
   713  00112E  2E19               	decfsz	??_main& (0+255),f,c
   714  001130  D7FC               	bra	u817
   715  001132  D000               	nop2	
   716                           
   717                           ;main.c: 257: if (readADC(0)<=32800 ){
   718  001134  0E00               	movlw	0
   719  001136  EC49  F00C         	call	_readADC
   720  00113A  0E21               	movlw	33
   721  00113C  5C01               	subwf	?_readADC,w,c
   722  00113E  0E80               	movlw	128
   723  001140  5802               	subwfb	?_readADC+1,w,c
   724  001142  B0D8               	btfsc	status,0,c
   725  001144  D7E2               	goto	l121
   726                           
   727                           ;main.c: 259: B_counter ++;
   728  001146  4A28               	infsnz	_B_counter,f,c
   729  001148  2A29               	incf	_B_counter+1,f,c
   730                           
   731                           ;main.c: 260: initLCD();
   732  00114A  EC02  F00C         	call	_initLCD	;wreg free
   733                           
   734                           ;main.c: 261: printf("%d", B_counter);
   735  00114E  0E37               	movlw	low (STR_16+7)
   736  001150  6E0D               	movwf	printf@f,c
   737  001152  0E10               	movlw	high (STR_16+7)
   738  001154  6E0E               	movwf	printf@f+1,c
   739  001156  C028  F00F         	movff	_B_counter,?_printf+2
   740  00115A  C029  F010         	movff	_B_counter+1,?_printf+3
   741  00115E  EC9C  F00A         	call	_printf	;wreg free
   742                           
   743                           ;main.c: 262: _delay((unsigned long)((50)*(40000000/4000.0)));
   744  001162  0E03               	movlw	3
   745  001164  6E1A               	movwf	(??_main+1)& (0+255),c
   746  001166  0E8A               	movlw	138
   747  001168  6E19               	movwf	??_main& (0+255),c
   748  00116A  0E56               	movlw	86
   749  00116C                     u827:
   750  00116C  2EE8               	decfsz	wreg,f,c
   751  00116E  D7FE               	bra	u827
   752  001170  2E19               	decfsz	??_main& (0+255),f,c
   753  001172  D7FC               	bra	u827
   754  001174  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   755  001176  D7FA               	bra	u827
   756  001178  D7C8               	goto	l121
   757  00117A                     l123:
   758                           
   759                           ;main.c: 263: }
   760                           ;main.c: 268: }
   761                           ;main.c: 269: initLCD();
   762  00117A  EC02  F00C         	call	_initLCD	;wreg free
   763                           
   764                           ;main.c: 270: printf("done");
   765  00117E  0E4B               	movlw	low STR_3
   766  001180  6E0D               	movwf	printf@f,c
   767  001182  0E10               	movlw	high STR_3
   768  001184  6E0E               	movwf	printf@f+1,c
   769  001186  EC9C  F00A         	call	_printf	;wreg free
   770                           
   771                           ;main.c: 271: _delay((unsigned long)((1000)*(40000000/4000.0)));
   772  00118A  0E33               	movlw	51
   773  00118C  6E1A               	movwf	(??_main+1)& (0+255),c
   774  00118E  0EBB               	movlw	187
   775  001190  6E19               	movwf	??_main& (0+255),c
   776  001192  0EE0               	movlw	224
   777  001194                     u837:
   778  001194  2EE8               	decfsz	wreg,f,c
   779  001196  D7FE               	bra	u837
   780  001198  2E19               	decfsz	??_main& (0+255),f,c
   781  00119A  D7FC               	bra	u837
   782  00119C  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   783  00119E  D7FA               	bra	u837
   784                           
   785                           ;main.c: 285: initLCD();
   786  0011A0  EC02  F00C         	call	_initLCD	;wreg free
   787                           
   788                           ;main.c: 286: printf("%d",N_counter);
   789  0011A4  0E37               	movlw	low (STR_16+7)
   790  0011A6  6E0D               	movwf	printf@f,c
   791  0011A8  0E10               	movlw	high (STR_16+7)
   792  0011AA  6E0E               	movwf	printf@f+1,c
   793  0011AC  C026  F00F         	movff	_N_counter,?_printf+2
   794  0011B0  C027  F010         	movff	_N_counter+1,?_printf+3
   795  0011B4  EC9C  F00A         	call	_printf	;wreg free
   796                           
   797                           ;main.c: 287: _delay((unsigned long)((100)*(40000000/4000.0)));
   798  0011B8  0E06               	movlw	6
   799  0011BA  6E1A               	movwf	(??_main+1)& (0+255),c
   800  0011BC  0E13               	movlw	19
   801  0011BE  6E19               	movwf	??_main& (0+255),c
   802  0011C0  0EAE               	movlw	174
   803  0011C2                     u847:
   804  0011C2  2EE8               	decfsz	wreg,f,c
   805  0011C4  D7FE               	bra	u847
   806  0011C6  2E19               	decfsz	??_main& (0+255),f,c
   807  0011C8  D7FC               	bra	u847
   808  0011CA  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   809  0011CC  D7FA               	bra	u847
   810                           
   811                           ;main.c: 288: motorStart_1();
   812  0011CE  ECD1  F00C         	call	_motorStart_1	;wreg free
   813  0011D2                     
   814                           ;main.c: 292: if (N_counter == max){
   815  0011D2  502E               	movf	_max,w,c
   816  0011D4  1826               	xorwf	_N_counter,w,c
   817  0011D6  E107               	bnz	l1670
   818  0011D8  502F               	movf	_max+1,w,c
   819  0011DA  1827               	xorwf	_N_counter+1,w,c
   820  0011DC  A4D8               	btfss	status,2,c
   821  0011DE  D003               	goto	l127
   822                           
   823                           ;main.c: 293: motorStop_1();
   824  0011E0  EC99  F00C         	call	_motorStop_1	;wreg free
   825                           
   826                           ;main.c: 294: break;
   827  0011E4  D023               	goto	l128
   828  0011E6                     l127:
   829  0011E6                     l1670:
   830                           
   831                           ;main.c: 295: }
   832                           ;main.c: 296: if (readADC(1)<=32800 ){
   833  0011E6  0E01               	movlw	1
   834  0011E8  EC49  F00C         	call	_readADC
   835  0011EC  0E21               	movlw	33
   836  0011EE  5C01               	subwf	?_readADC,w,c
   837  0011F0  0E80               	movlw	128
   838  0011F2  5802               	subwfb	?_readADC+1,w,c
   839  0011F4  B0D8               	btfsc	status,0,c
   840  0011F6  D7ED               	goto	l126
   841                           
   842                           ;main.c: 298: N_counter ++;
   843  0011F8  4A26               	infsnz	_N_counter,f,c
   844  0011FA  2A27               	incf	_N_counter+1,f,c
   845                           
   846                           ;main.c: 299: initLCD();
   847  0011FC  EC02  F00C         	call	_initLCD	;wreg free
   848                           
   849                           ;main.c: 300: printf("%d", N_counter);
   850  001200  0E37               	movlw	low (STR_16+7)
   851  001202  6E0D               	movwf	printf@f,c
   852  001204  0E10               	movlw	high (STR_16+7)
   853  001206  6E0E               	movwf	printf@f+1,c
   854  001208  C026  F00F         	movff	_N_counter,?_printf+2
   855  00120C  C027  F010         	movff	_N_counter+1,?_printf+3
   856  001210  EC9C  F00A         	call	_printf	;wreg free
   857                           
   858                           ;main.c: 301: _delay((unsigned long)((50)*(40000000/4000.0)));
   859  001214  0E03               	movlw	3
   860  001216  6E1A               	movwf	(??_main+1)& (0+255),c
   861  001218  0E8A               	movlw	138
   862  00121A  6E19               	movwf	??_main& (0+255),c
   863  00121C  0E56               	movlw	86
   864  00121E                     u857:
   865  00121E  2EE8               	decfsz	wreg,f,c
   866  001220  D7FE               	bra	u857
   867  001222  2E19               	decfsz	??_main& (0+255),f,c
   868  001224  D7FC               	bra	u857
   869  001226  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   870  001228  D7FA               	bra	u857
   871  00122A  D7D3               	goto	l126
   872  00122C                     l128:
   873                           
   874                           ;main.c: 302: }
   875                           ;main.c: 304: }
   876                           ;main.c: 306: initLCD();
   877  00122C  EC02  F00C         	call	_initLCD	;wreg free
   878                           
   879                           ;main.c: 307: printf("done");
   880  001230  0E4B               	movlw	low STR_3
   881  001232  6E0D               	movwf	printf@f,c
   882  001234  0E10               	movlw	high STR_3
   883  001236  6E0E               	movwf	printf@f+1,c
   884  001238  EC9C  F00A         	call	_printf	;wreg free
   885                           
   886                           ;main.c: 308: _delay((unsigned long)((1000)*(40000000/4000.0)));
   887  00123C  0E33               	movlw	51
   888  00123E  6E1A               	movwf	(??_main+1)& (0+255),c
   889  001240  0EBB               	movlw	187
   890  001242  6E19               	movwf	??_main& (0+255),c
   891  001244  0EE0               	movlw	224
   892  001246                     u867:
   893  001246  2EE8               	decfsz	wreg,f,c
   894  001248  D7FE               	bra	u867
   895  00124A  2E19               	decfsz	??_main& (0+255),f,c
   896  00124C  D7FC               	bra	u867
   897  00124E  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   898  001250  D7FA               	bra	u867
   899                           
   900                           ;main.c: 325: initLCD();
   901  001252  EC02  F00C         	call	_initLCD	;wreg free
   902                           
   903                           ;main.c: 326: printf("%d",S_counter);
   904  001256  0E37               	movlw	low (STR_16+7)
   905  001258  6E0D               	movwf	printf@f,c
   906  00125A  0E10               	movlw	high (STR_16+7)
   907  00125C  6E0E               	movwf	printf@f+1,c
   908  00125E  C024  F00F         	movff	_S_counter,?_printf+2
   909  001262  C025  F010         	movff	_S_counter+1,?_printf+3
   910  001266  EC9C  F00A         	call	_printf	;wreg free
   911                           
   912                           ;main.c: 327: _delay((unsigned long)((100)*(40000000/4000.0)));
   913  00126A  0E06               	movlw	6
   914  00126C  6E1A               	movwf	(??_main+1)& (0+255),c
   915  00126E  0E13               	movlw	19
   916  001270  6E19               	movwf	??_main& (0+255),c
   917  001272  0EAE               	movlw	174
   918  001274                     u877:
   919  001274  2EE8               	decfsz	wreg,f,c
   920  001276  D7FE               	bra	u877
   921  001278  2E19               	decfsz	??_main& (0+255),f,c
   922  00127A  D7FC               	bra	u877
   923  00127C  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   924  00127E  D7FA               	bra	u877
   925                           
   926                           ;main.c: 328: motorStart_2();
   927  001280  ECC3  F00C         	call	_motorStart_2	;wreg free
   928  001284                     l1692:
   929                           
   930                           ;main.c: 332: if (S_counter == max){
   931  001284  502E               	movf	_max,w,c
   932  001286  1824               	xorwf	_S_counter,w,c
   933  001288  E107               	bnz	l1696
   934  00128A  502F               	movf	_max+1,w,c
   935  00128C  1825               	xorwf	_S_counter+1,w,c
   936  00128E  A4D8               	btfss	status,2,c
   937  001290  D003               	goto	l132
   938                           
   939                           ;main.c: 333: motorStop_2();
   940  001292  EC8B  F00C         	call	_motorStop_2	;wreg free
   941                           
   942                           ;main.c: 334: break;
   943  001296  D023               	goto	l133
   944  001298                     l132:
   945  001298                     l1696:
   946                           
   947                           ;main.c: 335: }
   948                           ;main.c: 336: if (readADC(5)<=250 ){
   949  001298  0E05               	movlw	5
   950  00129A  EC49  F00C         	call	_readADC
   951  00129E  5002               	movf	?_readADC+1,w,c
   952  0012A0  E1F1               	bnz	l1692
   953  0012A2  0EFB               	movlw	251
   954  0012A4  5C01               	subwf	?_readADC,w,c
   955  0012A6  B0D8               	btfsc	status,0,c
   956  0012A8  D7ED               	goto	l131
   957                           
   958                           ;main.c: 338: S_counter ++;
   959  0012AA  4A24               	infsnz	_S_counter,f,c
   960  0012AC  2A25               	incf	_S_counter+1,f,c
   961                           
   962                           ;main.c: 339: initLCD();
   963  0012AE  EC02  F00C         	call	_initLCD	;wreg free
   964                           
   965                           ;main.c: 340: printf("%d", S_counter);
   966  0012B2  0E37               	movlw	low (STR_16+7)
   967  0012B4  6E0D               	movwf	printf@f,c
   968  0012B6  0E10               	movlw	high (STR_16+7)
   969  0012B8  6E0E               	movwf	printf@f+1,c
   970  0012BA  C024  F00F         	movff	_S_counter,?_printf+2
   971  0012BE  C025  F010         	movff	_S_counter+1,?_printf+3
   972  0012C2  EC9C  F00A         	call	_printf	;wreg free
   973                           
   974                           ;main.c: 341: _delay((unsigned long)((50)*(40000000/4000.0)));
   975  0012C6  0E03               	movlw	3
   976  0012C8  6E1A               	movwf	(??_main+1)& (0+255),c
   977  0012CA  0E8A               	movlw	138
   978  0012CC  6E19               	movwf	??_main& (0+255),c
   979  0012CE  0E56               	movlw	86
   980  0012D0                     u887:
   981  0012D0  2EE8               	decfsz	wreg,f,c
   982  0012D2  D7FE               	bra	u887
   983  0012D4  2E19               	decfsz	??_main& (0+255),f,c
   984  0012D6  D7FC               	bra	u887
   985  0012D8  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   986  0012DA  D7FA               	bra	u887
   987  0012DC  D7D3               	goto	l131
   988  0012DE                     l133:
   989                           
   990                           ;main.c: 342: }
   991                           ;main.c: 344: }
   992                           ;main.c: 346: initLCD();
   993  0012DE  EC02  F00C         	call	_initLCD	;wreg free
   994                           
   995                           ;main.c: 347: printf("done");
   996  0012E2  0E4B               	movlw	low STR_3
   997  0012E4  6E0D               	movwf	printf@f,c
   998  0012E6  0E10               	movlw	high STR_3
   999  0012E8  6E0E               	movwf	printf@f+1,c
  1000  0012EA  EC9C  F00A         	call	_printf	;wreg free
  1001                           
  1002                           ;main.c: 348: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1003  0012EE  0E33               	movlw	51
  1004  0012F0  6E1A               	movwf	(??_main+1)& (0+255),c
  1005  0012F2  0EBB               	movlw	187
  1006  0012F4  6E19               	movwf	??_main& (0+255),c
  1007  0012F6  0EE0               	movlw	224
  1008  0012F8                     u897:
  1009  0012F8  2EE8               	decfsz	wreg,f,c
  1010  0012FA  D7FE               	bra	u897
  1011  0012FC  2E19               	decfsz	??_main& (0+255),f,c
  1012  0012FE  D7FC               	bra	u897
  1013  001300  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1014  001302  D7FA               	bra	u897
  1015                           
  1016                           ;main.c: 363: initLCD();
  1017  001304  EC02  F00C         	call	_initLCD	;wreg free
  1018                           
  1019                           ;main.c: 364: printf("%d",W_counter);
  1020  001308  0E37               	movlw	low (STR_16+7)
  1021  00130A  6E0D               	movwf	printf@f,c
  1022  00130C  0E10               	movlw	high (STR_16+7)
  1023  00130E  6E0E               	movwf	printf@f+1,c
  1024  001310  C022  F00F         	movff	_W_counter,?_printf+2
  1025  001314  C023  F010         	movff	_W_counter+1,?_printf+3
  1026  001318  EC9C  F00A         	call	_printf	;wreg free
  1027                           
  1028                           ;main.c: 365: _delay((unsigned long)((100)*(40000000/4000.0)));
  1029  00131C  0E06               	movlw	6
  1030  00131E  6E1A               	movwf	(??_main+1)& (0+255),c
  1031  001320  0E13               	movlw	19
  1032  001322  6E19               	movwf	??_main& (0+255),c
  1033  001324  0EAE               	movlw	174
  1034  001326                     u907:
  1035  001326  2EE8               	decfsz	wreg,f,c
  1036  001328  D7FE               	bra	u907
  1037  00132A  2E19               	decfsz	??_main& (0+255),f,c
  1038  00132C  D7FC               	bra	u907
  1039  00132E  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1040  001330  D7FA               	bra	u907
  1041                           
  1042                           ;main.c: 366: motorStart_3();
  1043  001332  ECB5  F00C         	call	_motorStart_3	;wreg free
  1044  001336                     l1718:
  1045                           
  1046                           ;main.c: 370: if (W_counter == max){
  1047  001336  502E               	movf	_max,w,c
  1048  001338  1822               	xorwf	_W_counter,w,c
  1049  00133A  E107               	bnz	l1722
  1050  00133C  502F               	movf	_max+1,w,c
  1051  00133E  1823               	xorwf	_W_counter+1,w,c
  1052  001340  A4D8               	btfss	status,2,c
  1053  001342  D003               	goto	l137
  1054                           
  1055                           ;main.c: 371: motorStop_3();
  1056  001344  EC7D  F00C         	call	_motorStop_3	;wreg free
  1057                           
  1058                           ;main.c: 372: break;
  1059  001348  D023               	goto	l138
  1060  00134A                     l137:
  1061  00134A                     l1722:
  1062                           
  1063                           ;main.c: 373: }
  1064                           ;main.c: 374: if (readADC(4)<=250 ){
  1065  00134A  0E04               	movlw	4
  1066  00134C  EC49  F00C         	call	_readADC
  1067  001350  5002               	movf	?_readADC+1,w,c
  1068  001352  E1F1               	bnz	l1718
  1069  001354  0EFB               	movlw	251
  1070  001356  5C01               	subwf	?_readADC,w,c
  1071  001358  B0D8               	btfsc	status,0,c
  1072  00135A  D7ED               	goto	l136
  1073                           
  1074                           ;main.c: 376: W_counter ++;
  1075  00135C  4A22               	infsnz	_W_counter,f,c
  1076  00135E  2A23               	incf	_W_counter+1,f,c
  1077                           
  1078                           ;main.c: 377: initLCD();
  1079  001360  EC02  F00C         	call	_initLCD	;wreg free
  1080                           
  1081                           ;main.c: 378: printf("%d", W_counter);
  1082  001364  0E37               	movlw	low (STR_16+7)
  1083  001366  6E0D               	movwf	printf@f,c
  1084  001368  0E10               	movlw	high (STR_16+7)
  1085  00136A  6E0E               	movwf	printf@f+1,c
  1086  00136C  C022  F00F         	movff	_W_counter,?_printf+2
  1087  001370  C023  F010         	movff	_W_counter+1,?_printf+3
  1088  001374  EC9C  F00A         	call	_printf	;wreg free
  1089                           
  1090                           ;main.c: 379: _delay((unsigned long)((50)*(40000000/4000.0)));
  1091  001378  0E03               	movlw	3
  1092  00137A  6E1A               	movwf	(??_main+1)& (0+255),c
  1093  00137C  0E8A               	movlw	138
  1094  00137E  6E19               	movwf	??_main& (0+255),c
  1095  001380  0E56               	movlw	86
  1096  001382                     u917:
  1097  001382  2EE8               	decfsz	wreg,f,c
  1098  001384  D7FE               	bra	u917
  1099  001386  2E19               	decfsz	??_main& (0+255),f,c
  1100  001388  D7FC               	bra	u917
  1101  00138A  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1102  00138C  D7FA               	bra	u917
  1103  00138E  D7D3               	goto	l136
  1104  001390                     l138:
  1105                           
  1106                           ;main.c: 380: }
  1107                           ;main.c: 382: }
  1108                           ;main.c: 384: initLCD();
  1109  001390  EC02  F00C         	call	_initLCD	;wreg free
  1110                           
  1111                           ;main.c: 385: printf("done");
  1112  001394  0E4B               	movlw	low STR_3
  1113  001396  6E0D               	movwf	printf@f,c
  1114  001398  0E10               	movlw	high STR_3
  1115  00139A  6E0E               	movwf	printf@f+1,c
  1116  00139C  EC9C  F00A         	call	_printf	;wreg free
  1117                           
  1118                           ;main.c: 386: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1119  0013A0  0E33               	movlw	51
  1120  0013A2  6E1A               	movwf	(??_main+1)& (0+255),c
  1121  0013A4  0EBB               	movlw	187
  1122  0013A6  6E19               	movwf	??_main& (0+255),c
  1123  0013A8  0EE0               	movlw	224
  1124  0013AA                     u927:
  1125  0013AA  2EE8               	decfsz	wreg,f,c
  1126  0013AC  D7FE               	bra	u927
  1127  0013AE  2E19               	decfsz	??_main& (0+255),f,c
  1128  0013B0  D7FC               	bra	u927
  1129  0013B2  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1130  0013B4  D7FA               	bra	u927
  1131                           
  1132                           ;main.c: 393: for (i = 0; i< 30; i ++){
  1133  0013B6  0E00               	movlw	0
  1134  0013B8  6E1D               	movwf	_i+1,c
  1135  0013BA  0E00               	movlw	0
  1136  0013BC  6E1C               	movwf	_i,c
  1137  0013BE                     l1740:
  1138  0013BE  BE1D               	btfsc	_i+1,7,c
  1139  0013C0  D006               	goto	l141
  1140  0013C2  501D               	movf	_i+1,w,c
  1141  0013C4  E107               	bnz	l1748
  1142  0013C6  0E1E               	movlw	30
  1143  0013C8  5C1C               	subwf	_i,w,c
  1144  0013CA  B0D8               	btfsc	status,0,c
  1145  0013CC  D003               	goto	u770
  1146  0013CE                     l141:
  1147  0013CE  4A1C               	infsnz	_i,f,c
  1148  0013D0  2A1D               	incf	_i+1,f,c
  1149  0013D2  D7F5               	goto	l1740
  1150  0013D4                     u770:
  1151  0013D4                     l1748:
  1152                           
  1153                           ;main.c: 394: void servoRotate_counter();
  1154                           ;main.c: 395: }
  1155                           ;main.c: 404: I2C_Master_Init(100000);
  1156  0013D4  0EA0               	movlw	160
  1157  0013D6  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1158  0013D8  0E86               	movlw	134
  1159  0013DA  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1160  0013DC  0E01               	movlw	1
  1161  0013DE  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1162  0013E0  0E00               	movlw	0
  1163  0013E2  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1164  0013E4  ECAB  F00B         	call	_I2C_Master_Init	;wreg free
  1165                           
  1166                           ;main.c: 405: I2C_Master_Start();
  1167  0013E8  EC13  F00D         	call	_I2C_Master_Start	;wreg free
  1168                           
  1169                           ;main.c: 412: I2C_Master_Write(0b00010000);
  1170  0013EC  0E00               	movlw	0
  1171  0013EE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1172  0013F0  0E10               	movlw	16
  1173  0013F2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1174  0013F4  EC0A  F00D         	call	_I2C_Master_Write	;wreg free
  1175                           
  1176                           ;main.c: 413: I2C_Master_Stop();
  1177  0013F8  EC0F  F00D         	call	_I2C_Master_Stop	;wreg free
  1178                           
  1179                           ;main.c: 416: unsigned char mem[3];
  1180                           ;main.c: 417: unsigned char counter = 0;
  1181  0013FC  0E00               	movlw	0
  1182  0013FE  6E1B               	movwf	main@counter,c
  1183                           
  1184                           ;main.c: 418: unsigned char keypress;
  1185                           ;main.c: 419: unsigned char data;
  1186                           ;main.c: 420: static bit SEND;
  1187                           ;main.c: 421: SEND = 1;
  1188  001400  8030               	bsf	main@SEND/(0+8),main@SEND& (0+7),c
  1189                           
  1190                           ;main.c: 431: I2C_Master_Start();
  1191  001402  EC13  F00D         	call	_I2C_Master_Start	;wreg free
  1192                           
  1193                           ;main.c: 432: I2C_Master_Write(0b00010000);
  1194  001406  0E00               	movlw	0
  1195  001408  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1196  00140A  0E10               	movlw	16
  1197  00140C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1198  00140E  EC0A  F00D         	call	_I2C_Master_Write	;wreg free
  1199                           
  1200                           ;main.c: 433: I2C_Master_Write('2');
  1201  001412  0E00               	movlw	0
  1202  001414  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1203  001416  0E32               	movlw	50
  1204  001418  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1205  00141A  EC0A  F00D         	call	_I2C_Master_Write	;wreg free
  1206                           
  1207                           ;main.c: 434: I2C_Master_Stop();
  1208  00141E  EC0F  F00D         	call	_I2C_Master_Stop	;wreg free
  1209                           
  1210                           ;main.c: 440: motorStart_0();
  1211  001422  ECDF  F00C         	call	_motorStart_0	;wreg free
  1212  001426                     l1764:
  1213                           
  1214                           ;main.c: 443: if (B_remain == 2){
  1215  001426  0E02               	movlw	2
  1216  001428  1820               	xorwf	_B_remain,w,c
  1217  00142A  1021               	iorwf	_B_remain+1,w,c
  1218  00142C  A4D8               	btfss	status,2,c
  1219  00142E  D003               	goto	l146
  1220                           
  1221                           ;main.c: 444: motorStop_0();
  1222  001430  ECA7  F00C         	call	_motorStop_0	;wreg free
  1223                           
  1224                           ;main.c: 445: break;
  1225  001434  D023               	goto	l147
  1226  001436                     l146:
  1227                           
  1228                           ;main.c: 446: }
  1229                           ;main.c: 447: if (readADC(0)<=250 ){
  1230  001436  0E00               	movlw	0
  1231  001438  EC49  F00C         	call	_readADC
  1232  00143C  5002               	movf	?_readADC+1,w,c
  1233  00143E  E1F3               	bnz	l1764
  1234  001440  0EFB               	movlw	251
  1235  001442  5C01               	subwf	?_readADC,w,c
  1236  001444  B0D8               	btfsc	status,0,c
  1237  001446  D7EF               	goto	l145
  1238                           
  1239                           ;main.c: 449: B_remain ++;
  1240  001448  4A20               	infsnz	_B_remain,f,c
  1241  00144A  2A21               	incf	_B_remain+1,f,c
  1242                           
  1243                           ;main.c: 450: initLCD();
  1244  00144C  EC02  F00C         	call	_initLCD	;wreg free
  1245                           
  1246                           ;main.c: 451: printf("%d", B_remain);
  1247  001450  0E37               	movlw	low (STR_16+7)
  1248  001452  6E0D               	movwf	printf@f,c
  1249  001454  0E10               	movlw	high (STR_16+7)
  1250  001456  6E0E               	movwf	printf@f+1,c
  1251  001458  C020  F00F         	movff	_B_remain,?_printf+2
  1252  00145C  C021  F010         	movff	_B_remain+1,?_printf+3
  1253  001460  EC9C  F00A         	call	_printf	;wreg free
  1254                           
  1255                           ;main.c: 452: _delay((unsigned long)((50)*(40000000/4000.0)));
  1256  001464  0E03               	movlw	3
  1257  001466  6E1A               	movwf	(??_main+1)& (0+255),c
  1258  001468  0E8A               	movlw	138
  1259  00146A  6E19               	movwf	??_main& (0+255),c
  1260  00146C  0E56               	movlw	86
  1261  00146E                     u937:
  1262  00146E  2EE8               	decfsz	wreg,f,c
  1263  001470  D7FE               	bra	u937
  1264  001472  2E19               	decfsz	??_main& (0+255),f,c
  1265  001474  D7FC               	bra	u937
  1266  001476  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1267  001478  D7FA               	bra	u937
  1268  00147A  D7D5               	goto	l145
  1269  00147C                     l147:
  1270                           
  1271                           ;main.c: 453: }
  1272                           ;main.c: 460: }
  1273                           ;main.c: 464: initLCD();
  1274  00147C  EC02  F00C         	call	_initLCD	;wreg free
  1275                           
  1276                           ;main.c: 465: printf("Bolts:%d",B_counter);
  1277  001480  0E3A               	movlw	low STR_14
  1278  001482  6E0D               	movwf	printf@f,c
  1279  001484  0E10               	movlw	high STR_14
  1280  001486  6E0E               	movwf	printf@f+1,c
  1281  001488  C028  F00F         	movff	_B_counter,?_printf+2
  1282  00148C  C029  F010         	movff	_B_counter+1,?_printf+3
  1283  001490  EC9C  F00A         	call	_printf	;wreg free
  1284                           
  1285                           ;main.c: 466: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1286  001494  0E33               	movlw	51
  1287  001496  6E1A               	movwf	(??_main+1)& (0+255),c
  1288  001498  0EBB               	movlw	187
  1289  00149A  6E19               	movwf	??_main& (0+255),c
  1290  00149C  0EE0               	movlw	224
  1291  00149E                     u947:
  1292  00149E  2EE8               	decfsz	wreg,f,c
  1293  0014A0  D7FE               	bra	u947
  1294  0014A2  2E19               	decfsz	??_main& (0+255),f,c
  1295  0014A4  D7FC               	bra	u947
  1296  0014A6  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1297  0014A8  D7FA               	bra	u947
  1298                           
  1299                           ;main.c: 468: initLCD();
  1300  0014AA  EC02  F00C         	call	_initLCD	;wreg free
  1301                           
  1302                           ;main.c: 469: printf("Nuts:%d",N_counter);
  1303  0014AE  0E43               	movlw	low STR_15
  1304  0014B0  6E0D               	movwf	printf@f,c
  1305  0014B2  0E10               	movlw	high STR_15
  1306  0014B4  6E0E               	movwf	printf@f+1,c
  1307  0014B6  C026  F00F         	movff	_N_counter,?_printf+2
  1308  0014BA  C027  F010         	movff	_N_counter+1,?_printf+3
  1309  0014BE  EC9C  F00A         	call	_printf	;wreg free
  1310                           
  1311                           ;main.c: 470: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1312  0014C2  0E33               	movlw	51
  1313  0014C4  6E1A               	movwf	(??_main+1)& (0+255),c
  1314  0014C6  0EBB               	movlw	187
  1315  0014C8  6E19               	movwf	??_main& (0+255),c
  1316  0014CA  0EE0               	movlw	224
  1317  0014CC                     u957:
  1318  0014CC  2EE8               	decfsz	wreg,f,c
  1319  0014CE  D7FE               	bra	u957
  1320  0014D0  2E19               	decfsz	??_main& (0+255),f,c
  1321  0014D2  D7FC               	bra	u957
  1322  0014D4  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1323  0014D6  D7FA               	bra	u957
  1324                           
  1325                           ;main.c: 472: initLCD();
  1326  0014D8  EC02  F00C         	call	_initLCD	;wreg free
  1327                           
  1328                           ;main.c: 473: printf("Spacer:%d",S_counter);
  1329  0014DC  0E30               	movlw	low STR_16
  1330  0014DE  6E0D               	movwf	printf@f,c
  1331  0014E0  0E10               	movlw	high STR_16
  1332  0014E2  6E0E               	movwf	printf@f+1,c
  1333  0014E4  C024  F00F         	movff	_S_counter,?_printf+2
  1334  0014E8  C025  F010         	movff	_S_counter+1,?_printf+3
  1335  0014EC  EC9C  F00A         	call	_printf	;wreg free
  1336                           
  1337                           ;main.c: 474: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1338  0014F0  0E33               	movlw	51
  1339  0014F2  6E1A               	movwf	(??_main+1)& (0+255),c
  1340  0014F4  0EBB               	movlw	187
  1341  0014F6  6E19               	movwf	??_main& (0+255),c
  1342  0014F8  0EE0               	movlw	224
  1343  0014FA                     u967:
  1344  0014FA  2EE8               	decfsz	wreg,f,c
  1345  0014FC  D7FE               	bra	u967
  1346  0014FE  2E19               	decfsz	??_main& (0+255),f,c
  1347  001500  D7FC               	bra	u967
  1348  001502  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1349  001504  D7FA               	bra	u967
  1350                           
  1351                           ;main.c: 476: initLCD();
  1352  001506  EC02  F00C         	call	_initLCD	;wreg free
  1353                           
  1354                           ;main.c: 477: printf("Washers:%d",W_counter);
  1355  00150A  0E25               	movlw	low STR_17
  1356  00150C  6E0D               	movwf	printf@f,c
  1357  00150E  0E10               	movlw	high STR_17
  1358  001510  6E0E               	movwf	printf@f+1,c
  1359  001512  C022  F00F         	movff	_W_counter,?_printf+2
  1360  001516  C023  F010         	movff	_W_counter+1,?_printf+3
  1361  00151A  EC9C  F00A         	call	_printf	;wreg free
  1362                           
  1363                           ;main.c: 478: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1364  00151E  0E33               	movlw	51
  1365  001520  6E1A               	movwf	(??_main+1)& (0+255),c
  1366  001522  0EBB               	movlw	187
  1367  001524  6E19               	movwf	??_main& (0+255),c
  1368  001526  0EE0               	movlw	224
  1369  001528                     u977:
  1370  001528  2EE8               	decfsz	wreg,f,c
  1371  00152A  D7FE               	bra	u977
  1372  00152C  2E19               	decfsz	??_main& (0+255),f,c
  1373  00152E  D7FC               	bra	u977
  1374  001530  2E1A               	decfsz	(??_main+1)& (0+255),f,c
  1375  001532  D7FA               	bra	u977
  1376  001534  EF00  F000         	goto	start
  1377  001538                     __end_of_main:
  1378                           	opt stack 0
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           intcon	equ	0xFF2
  1384                           intcon3	equ	0xFF0
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           status	equ	0xFD8
  1388                           
  1389 ;; *************** function _readADC *****************
  1390 ;; Defined at:
  1391 ;;		line 484 in file "main.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  channel         1    wreg     unsigned char 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  channel         1    4[COMRAM] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2    0[COMRAM] unsigned short 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;Total ram usage:        5 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           	psect	text1
  1419  001892                     __ptext1:
  1420                           	opt stack 0
  1421  001892                     _readADC:
  1422                           	opt stack 30
  1423                           
  1424                           ;incstack = 0
  1425                           ;readADC@channel stored from wreg
  1426  001892  6E05               	movwf	readADC@channel,c
  1427                           
  1428                           ;main.c: 493: ADCON0 = (channel & 0x0F) << 2;
  1429  001894  C005  F003         	movff	readADC@channel,??_readADC
  1430  001898  0E0F               	movlw	15
  1431  00189A  1603               	andwf	??_readADC,f,c
  1432  00189C  90D8               	bcf	status,0,c
  1433  00189E  3603               	rlcf	??_readADC,f,c
  1434  0018A0  90D8               	bcf	status,0,c
  1435  0018A2  3403               	rlcf	??_readADC,w,c
  1436  0018A4  6EC2               	movwf	4034,c	;volatile
  1437                           
  1438                           ;main.c: 494: ADON = 1;
  1439  0018A6  80C2               	bsf	4034,0,c	;volatile
  1440                           
  1441                           ;main.c: 495: ADCON0bits.GO = 1;
  1442  0018A8  82C2               	bsf	4034,1,c	;volatile
  1443  0018AA  B2C2               	btfsc	4034,1,c	;volatile
  1444  0018AC  D7FE               	goto	l154
  1445                           
  1446                           ;main.c: 497: analog_result = ADRESL + (ADRESH*256);
  1447  0018AE  50C4               	movf	4036,w,c	;volatile
  1448  0018B0  6E04               	movwf	(??_readADC+1)& (0+255),c
  1449  0018B2  6A03               	clrf	??_readADC& (0+255),c
  1450  0018B4  50C3               	movf	4035,w,c	;volatile
  1451  0018B6  2403               	addwf	??_readADC,w,c
  1452  0018B8  6E1E               	movwf	_analog_result,c
  1453  0018BA  0E00               	movlw	0
  1454  0018BC  2004               	addwfc	??_readADC+1,w,c
  1455  0018BE  6E1F               	movwf	_analog_result+1,c
  1456                           
  1457                           ;main.c: 498: return analog_result;
  1458  0018C0  C01E  F001         	movff	_analog_result,?_readADC
  1459  0018C4  C01F  F002         	movff	_analog_result+1,?_readADC+1
  1460  0018C8  0012               	return	
  1461  0018CA                     __end_of_readADC:
  1462                           	opt stack 0
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           intcon	equ	0xFF2
  1468                           intcon3	equ	0xFF0
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           status	equ	0xFD8
  1472                           
  1473 ;; *************** function _printf *****************
  1474 ;; Defined at:
  1475 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1478 ;;		 -> STR_17(11), STR_16(10), STR_15(8), STR_14(9), 
  1479 ;;		 -> STR_13(3), STR_12(5), STR_11(3), STR_10(3), 
  1480 ;;		 -> STR_9(5), STR_8(3), STR_7(3), STR_6(5), 
  1481 ;;		 -> STR_5(3), STR_4(3), STR_3(5), STR_2(3), 
  1482 ;;		 -> STR_1(3), 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;  tmpval          4    0        struct .
  1485 ;;  cp              3    0        PTR const unsigned char 
  1486 ;;  val             2   21[COMRAM] unsigned int 
  1487 ;;  ap              2   17[COMRAM] PTR void [1]
  1488 ;;		 -> ?_printf(2), 
  1489 ;;  len             2    0        unsigned int 
  1490 ;;  c               1   23[COMRAM] char 
  1491 ;;  prec            1   20[COMRAM] char 
  1492 ;;  flag            1   19[COMRAM] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  2   12[COMRAM] int 
  1495 ;; Registers used:
  1496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;Total ram usage:       12 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    2
  1509 ;; This function calls:
  1510 ;;		___lwdiv
  1511 ;;		___lwmod
  1512 ;;		_putch
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text2
  1519  001538                     __ptext2:
  1520                           	opt stack 0
  1521  001538                     _printf:
  1522                           	opt stack 28
  1523                           
  1524                           ;doprnt.c: 466: va_list ap;
  1525                           ;doprnt.c: 499: signed char c;
  1526                           ;doprnt.c: 506: signed char prec;
  1527                           ;doprnt.c: 508: unsigned char flag;
  1528                           ;doprnt.c: 523: union {
  1529                           ;doprnt.c: 524: unsigned long vd;
  1530                           ;doprnt.c: 525: double integ;
  1531                           ;doprnt.c: 526: } tmpval;
  1532                           ;doprnt.c: 528: unsigned int val;
  1533                           ;doprnt.c: 529: unsigned len;
  1534                           ;doprnt.c: 530: const char * cp;
  1535                           ;doprnt.c: 533: *ap = __va_start();
  1536                           
  1537                           ;incstack = 0
  1538  001538  0E0F               	movlw	low (?_printf+2)
  1539  00153A  6E12               	movwf	printf@ap,c
  1540  00153C  0E00               	movlw	high (?_printf+2)
  1541  00153E  6E13               	movwf	printf@ap+1,c
  1542                           
  1543                           ;doprnt.c: 536: while(c = *f++) {
  1544  001540  D07D               	goto	u650
  1545  001542                     
  1546                           ;doprnt.c: 538: if(c != '%')
  1547  001542  0E25               	movlw	37
  1548  001544  1818               	xorwf	printf@c,w,c
  1549  001546  B4D8               	btfsc	status,2,c
  1550  001548  D004               	goto	l303
  1551                           
  1552                           ;doprnt.c: 540: {
  1553                           ;doprnt.c: 541: (putch(c) );
  1554  00154A  5018               	movf	printf@c,w,c
  1555  00154C  ECED  F00C         	call	_putch
  1556                           
  1557                           ;doprnt.c: 542: continue;
  1558  001550  D075               	goto	u650
  1559  001552                     l303:
  1560                           
  1561                           ;doprnt.c: 543: }
  1562                           ;doprnt.c: 548: flag = 0;
  1563  001552  0E00               	movlw	0
  1564  001554  6E14               	movwf	printf@flag,c
  1565                           
  1566                           ;doprnt.c: 822: }
  1567                           
  1568                           ;doprnt.c: 813: continue;
  1569                           
  1570                           ;doprnt.c: 802: default:
  1571                           
  1572                           ;doprnt.c: 698: case 'i':
  1573                           ;doprnt.c: 699: break;
  1574                           
  1575                           ;doprnt.c: 697: case 'd':
  1576                           
  1577                           ;doprnt.c: 638: goto alldone;
  1578                           
  1579                           ;doprnt.c: 637: case 0:
  1580                           
  1581                           ;doprnt.c: 635: switch(c = *f++) {
  1582  001556  C00D  FFF6         	movff	printf@f,tblptrl
  1583  00155A  C00E  FFF7         	movff	printf@f+1,tblptrh
  1584  00155E  4A0D               	infsnz	printf@f,f,c
  1585  001560  2A0E               	incf	printf@f+1,f,c
  1586  001562                     	if	0	;tblptru may be non-zero
  1587  001562                     	endif
  1588  001562                     	if	0	;tblptru may be non-zero
  1589  001562                     	endif
  1590  001562  0008               	tblrd		*
  1591  001564  CFF5 F018          	movff	tablat,printf@c
  1592  001568  5018               	movf	printf@c,w,c
  1593                           
  1594                           ; Switch size 1, requested type "space"
  1595                           ; Number of cases is 3, Range of values is 0 to 105
  1596                           ; switch strategies available:
  1597                           ; Name         Instructions Cycles
  1598                           ; simple_byte           10     6 (average)
  1599                           ;	Chosen strategy is simple_byte
  1600  00156A  0A00               	xorlw	0	; case 0
  1601  00156C  B4D8               	btfsc	status,2,c
  1602  00156E  0012               	return	
  1603  001570  0A64               	xorlw	100	; case 100
  1604  001572  B4D8               	btfsc	status,2,c
  1605  001574  D003               	goto	l309
  1606  001576  0A0D               	xorlw	13	; case 105
  1607  001578  A4D8               	btfss	status,2,c
  1608  00157A  D060               	goto	u650
  1609  00157C                     l309:
  1610                           
  1611                           ;doprnt.c: 1253: {
  1612                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1613  00157C  C012  FFD9         	movff	printf@ap,fsr2l
  1614  001580  C013  FFDA         	movff	printf@ap+1,fsr2h
  1615  001584  CFDE F016          	movff	postinc2,printf@val
  1616  001588  CFDD F017          	movff	postdec2,printf@val+1
  1617  00158C  0E02               	movlw	2
  1618  00158E  2612               	addwf	printf@ap,f,c
  1619  001590  0E00               	movlw	0
  1620  001592  2213               	addwfc	printf@ap+1,f,c
  1621                           
  1622                           ;doprnt.c: 1261: if((int)val < 0) {
  1623  001594  AE17               	btfss	printf@val+1,7,c
  1624  001596  D006               	goto	l311
  1625                           
  1626                           ;doprnt.c: 1262: flag |= 0x03;
  1627  001598  0E03               	movlw	3
  1628  00159A  1214               	iorwf	printf@flag,f,c
  1629                           
  1630                           ;doprnt.c: 1263: val = -val;
  1631  00159C  6C16               	negf	printf@val,c
  1632  00159E  1E17               	comf	printf@val+1,f,c
  1633  0015A0  B0D8               	btfsc	status,0,c
  1634  0015A2  2A17               	incf	printf@val+1,f,c
  1635  0015A4                     l311:
  1636                           
  1637                           ;doprnt.c: 1264: }
  1638                           ;doprnt.c: 1266: }
  1639                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1640  0015A4  0E01               	movlw	1
  1641  0015A6  6E18               	movwf	printf@c,c
  1642  0015A8                     l1568:
  1643  0015A8  0E05               	movlw	5
  1644  0015AA  1818               	xorwf	printf@c,w,c
  1645  0015AC  B4D8               	btfsc	status,2,c
  1646  0015AE  D012               	goto	u630
  1647                           
  1648                           ;doprnt.c: 1306: if(val < dpowers[c])
  1649  0015B0  5018               	movf	printf@c,w,c
  1650  0015B2  0D02               	mullw	2
  1651  0015B4  0E12               	movlw	low _dpowers
  1652  0015B6  24F3               	addwf	prodl,w,c
  1653  0015B8  6EF6               	movwf	tblptrl,c
  1654  0015BA  0E10               	movlw	high _dpowers
  1655  0015BC  20F4               	addwfc	prodh,w,c
  1656  0015BE  6EF7               	movwf	tblptrh,c
  1657  0015C0                     	if	0	;There are less than 3 active tblptr bytes
  1658  0015C0                     	endif
  1659  0015C0  0009               	tblrd		*+
  1660  0015C2  50F5               	movf	tablat,w,c
  1661  0015C4  5C16               	subwf	printf@val,w,c
  1662  0015C6  0009               	tblrd		*+
  1663  0015C8  50F5               	movf	tablat,w,c
  1664  0015CA  5817               	subwfb	printf@val+1,w,c
  1665  0015CC  A0D8               	btfss	status,0,c
  1666  0015CE  D002               	goto	u630
  1667                           
  1668                           ;doprnt.c: 1307: break;
  1669  0015D0  2A18               	incf	printf@c,f,c
  1670  0015D2  D7EA               	goto	l1568
  1671  0015D4                     u630:
  1672                           
  1673                           ;doprnt.c: 1422: {
  1674                           ;doprnt.c: 1438: if(flag & 0x03)
  1675  0015D4  C014  F011         	movff	printf@flag,??_printf
  1676  0015D8  0E03               	movlw	3
  1677  0015DA  1611               	andwf	??_printf,f,c
  1678  0015DC  B4D8               	btfsc	status,2,c
  1679  0015DE  D003               	goto	l315
  1680                           
  1681                           ;doprnt.c: 1439: (putch('-') );
  1682  0015E0  0E2D               	movlw	45
  1683  0015E2  ECED  F00C         	call	_putch
  1684  0015E6                     l315:
  1685                           
  1686                           ;doprnt.c: 1469: }
  1687                           ;doprnt.c: 1472: prec = c;
  1688  0015E6  C018  F015         	movff	printf@c,printf@prec
  1689                           
  1690                           ;doprnt.c: 1474: while(prec--) {
  1691  0015EA  D024               	goto	l316
  1692  0015EC                     
  1693                           ;doprnt.c: 1478: {
  1694                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1695  0015EC  5015               	movf	printf@prec,w,c
  1696  0015EE  0D02               	mullw	2
  1697  0015F0  0E12               	movlw	low _dpowers
  1698  0015F2  24F3               	addwf	prodl,w,c
  1699  0015F4  6EF6               	movwf	tblptrl,c
  1700  0015F6  0E10               	movlw	high _dpowers
  1701  0015F8  20F4               	addwfc	prodh,w,c
  1702  0015FA  6EF7               	movwf	tblptrh,c
  1703  0015FC                     	if	0	;There are less than 3 active tblptr bytes
  1704  0015FC                     	endif
  1705  0015FC  0009               	tblrd		*+
  1706  0015FE  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1707  001602  000A               	tblrd		*-
  1708  001604  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1709  001608  C016  F001         	movff	printf@val,___lwdiv@dividend
  1710  00160C  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1711  001610  ECD9  F00B         	call	___lwdiv	;wreg free
  1712  001614  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1713  001618  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1714  00161C  0E00               	movlw	0
  1715  00161E  6E0B               	movwf	___lwmod@divisor+1,c
  1716  001620  0E0A               	movlw	10
  1717  001622  6E0A               	movwf	___lwmod@divisor,c
  1718  001624  EC28  F00C         	call	___lwmod	;wreg free
  1719  001628  5008               	movf	?___lwmod,w,c
  1720  00162A  0F30               	addlw	48
  1721  00162C  6E18               	movwf	printf@c,c
  1722                           
  1723                           ;doprnt.c: 1523: }
  1724                           ;doprnt.c: 1524: (putch(c) );
  1725  00162E  5018               	movf	printf@c,w,c
  1726  001630  ECED  F00C         	call	_putch
  1727  001634                     l316:
  1728  001634  0615               	decf	printf@prec,f,c
  1729  001636  2815               	incf	printf@prec,w,c
  1730  001638  A4D8               	btfss	status,2,c
  1731  00163A  D7D8               	goto	l317
  1732  00163C                     u650:
  1733  00163C  C00D  FFF6         	movff	printf@f,tblptrl
  1734  001640  C00E  FFF7         	movff	printf@f+1,tblptrh
  1735  001644  4A0D               	infsnz	printf@f,f,c
  1736  001646  2A0E               	incf	printf@f+1,f,c
  1737  001648                     	if	0	;tblptru may be non-zero
  1738  001648                     	endif
  1739  001648                     	if	0	;tblptru may be non-zero
  1740  001648                     	endif
  1741  001648  0008               	tblrd		*
  1742  00164A  CFF5 F018          	movff	tablat,printf@c
  1743  00164E  5018               	movf	printf@c,w,c
  1744  001650  B4D8               	btfsc	status,2,c
  1745  001652  0012               	return	
  1746  001654  D776               	goto	l302
  1747  001656                     __end_of_printf:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           prodh	equ	0xFF4
  1754                           prodl	equ	0xFF3
  1755                           intcon	equ	0xFF2
  1756                           intcon3	equ	0xFF0
  1757                           postinc0	equ	0xFEE
  1758                           wreg	equ	0xFE8
  1759                           postinc2	equ	0xFDE
  1760                           postdec2	equ	0xFDD
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _putch *****************
  1766 ;; Defined at:
  1767 ;;		line 24 in file "lcd.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  data            1    wreg     unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  data            1    2[COMRAM] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    1
  1788 ;; This function calls:
  1789 ;;		_lcdNibble
  1790 ;; This function is called by:
  1791 ;;		_printf
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text3
  1796  0019DA                     __ptext3:
  1797                           	opt stack 0
  1798  0019DA                     _putch:
  1799                           	opt stack 28
  1800                           
  1801                           ;incstack = 0
  1802                           ;putch@data stored from wreg
  1803  0019DA  6E03               	movwf	putch@data,c
  1804                           
  1805                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1806  0019DC  848C               	bsf	3980,2,c	;volatile
  1807                           
  1808                           ;lcd.c: 33: lcdNibble(data);
  1809  0019DE  5003               	movf	putch@data,w,c
  1810  0019E0  EC6C  F00B         	call	_lcdNibble
  1811                           
  1812                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1813  0019E4  0EC8               	movlw	200
  1814  0019E6                     u987:
  1815  0019E6  D000               	nop2	
  1816  0019E8  2EE8               	decfsz	wreg,f,c
  1817  0019EA  D7FD               	bra	u987
  1818  0019EC  0012               	return		;funcret
  1819  0019EE                     __end_of_putch:
  1820                           	opt stack 0
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           intcon3	equ	0xFF0
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postinc2	equ	0xFDE
  1832                           postdec2	equ	0xFDD
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function ___lwmod *****************
  1838 ;; Defined at:
  1839 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  dividend        2    7[COMRAM] unsigned int 
  1842 ;;  divisor         2    9[COMRAM] unsigned int 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  counter         1   11[COMRAM] unsigned char 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  2    7[COMRAM] unsigned int 
  1847 ;; Registers used:
  1848 ;;		wreg, status,2, status,0
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1854 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;Total ram usage:        5 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		_printf
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text4
  1868  001850                     __ptext4:
  1869                           	opt stack 0
  1870  001850                     ___lwmod:
  1871                           	opt stack 29
  1872                           
  1873                           ;incstack = 0
  1874  001850  500A               	movf	___lwmod@divisor,w,c
  1875  001852  100B               	iorwf	___lwmod@divisor+1,w,c
  1876  001854  B4D8               	btfsc	status,2,c
  1877  001856  D018               	goto	l739
  1878  001858  0E01               	movlw	1
  1879  00185A  6E0C               	movwf	___lwmod@counter,c
  1880  00185C  D004               	goto	l734
  1881  00185E  90D8               	bcf	status,0,c
  1882  001860  360A               	rlcf	___lwmod@divisor,f,c
  1883  001862  360B               	rlcf	___lwmod@divisor+1,f,c
  1884  001864  2A0C               	incf	___lwmod@counter,f,c
  1885  001866                     l734:
  1886  001866  AE0B               	btfss	___lwmod@divisor+1,7,c
  1887  001868  D7FA               	goto	l735
  1888  00186A                     u560:
  1889  00186A  500A               	movf	___lwmod@divisor,w,c
  1890  00186C  5C08               	subwf	___lwmod@dividend,w,c
  1891  00186E  500B               	movf	___lwmod@divisor+1,w,c
  1892  001870  5809               	subwfb	___lwmod@dividend+1,w,c
  1893  001872  A0D8               	btfss	status,0,c
  1894  001874  D004               	goto	l738
  1895  001876  500A               	movf	___lwmod@divisor,w,c
  1896  001878  5E08               	subwf	___lwmod@dividend,f,c
  1897  00187A  500B               	movf	___lwmod@divisor+1,w,c
  1898  00187C  5A09               	subwfb	___lwmod@dividend+1,f,c
  1899  00187E                     l738:
  1900  00187E  90D8               	bcf	status,0,c
  1901  001880  320B               	rrcf	___lwmod@divisor+1,f,c
  1902  001882  320A               	rrcf	___lwmod@divisor,f,c
  1903  001884  2E0C               	decfsz	___lwmod@counter,f,c
  1904  001886  D7F1               	goto	u560
  1905  001888                     l739:
  1906  001888  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1907  00188C  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1908  001890  0012               	return		;funcret
  1909  001892                     __end_of___lwmod:
  1910                           	opt stack 0
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           prodh	equ	0xFF4
  1916                           prodl	equ	0xFF3
  1917                           intcon	equ	0xFF2
  1918                           intcon3	equ	0xFF0
  1919                           postinc0	equ	0xFEE
  1920                           wreg	equ	0xFE8
  1921                           postinc2	equ	0xFDE
  1922                           postdec2	equ	0xFDD
  1923                           fsr2h	equ	0xFDA
  1924                           fsr2l	equ	0xFD9
  1925                           status	equ	0xFD8
  1926                           
  1927 ;; *************** function ___lwdiv *****************
  1928 ;; Defined at:
  1929 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  dividend        2    0[COMRAM] unsigned int 
  1932 ;;  divisor         2    2[COMRAM] unsigned int 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;  quotient        2    4[COMRAM] unsigned int 
  1935 ;;  counter         1    6[COMRAM] unsigned char 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  2    0[COMRAM] unsigned int 
  1938 ;; Registers used:
  1939 ;;		wreg, status,2, status,0
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;Total ram usage:        7 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_printf
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text5
  1959  0017B2                     __ptext5:
  1960                           	opt stack 0
  1961  0017B2                     ___lwdiv:
  1962                           	opt stack 29
  1963                           
  1964                           ;incstack = 0
  1965  0017B2  0E00               	movlw	0
  1966  0017B4  6E06               	movwf	___lwdiv@quotient+1,c
  1967  0017B6  0E00               	movlw	0
  1968  0017B8  6E05               	movwf	___lwdiv@quotient,c
  1969  0017BA  5003               	movf	___lwdiv@divisor,w,c
  1970  0017BC  1004               	iorwf	___lwdiv@divisor+1,w,c
  1971  0017BE  B4D8               	btfsc	status,2,c
  1972  0017C0  D01C               	goto	l729
  1973  0017C2  0E01               	movlw	1
  1974  0017C4  6E07               	movwf	___lwdiv@counter,c
  1975  0017C6  D004               	goto	l724
  1976  0017C8  90D8               	bcf	status,0,c
  1977  0017CA  3603               	rlcf	___lwdiv@divisor,f,c
  1978  0017CC  3604               	rlcf	___lwdiv@divisor+1,f,c
  1979  0017CE  2A07               	incf	___lwdiv@counter,f,c
  1980  0017D0                     l724:
  1981  0017D0  AE04               	btfss	___lwdiv@divisor+1,7,c
  1982  0017D2  D7FA               	goto	l725
  1983  0017D4                     u530:
  1984  0017D4  90D8               	bcf	status,0,c
  1985  0017D6  3605               	rlcf	___lwdiv@quotient,f,c
  1986  0017D8  3606               	rlcf	___lwdiv@quotient+1,f,c
  1987  0017DA  5003               	movf	___lwdiv@divisor,w,c
  1988  0017DC  5C01               	subwf	___lwdiv@dividend,w,c
  1989  0017DE  5004               	movf	___lwdiv@divisor+1,w,c
  1990  0017E0  5802               	subwfb	___lwdiv@dividend+1,w,c
  1991  0017E2  A0D8               	btfss	status,0,c
  1992  0017E4  D005               	goto	l728
  1993  0017E6  5003               	movf	___lwdiv@divisor,w,c
  1994  0017E8  5E01               	subwf	___lwdiv@dividend,f,c
  1995  0017EA  5004               	movf	___lwdiv@divisor+1,w,c
  1996  0017EC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1997  0017EE  8005               	bsf	___lwdiv@quotient,0,c
  1998  0017F0                     l728:
  1999  0017F0  90D8               	bcf	status,0,c
  2000  0017F2  3204               	rrcf	___lwdiv@divisor+1,f,c
  2001  0017F4  3203               	rrcf	___lwdiv@divisor,f,c
  2002  0017F6  2E07               	decfsz	___lwdiv@counter,f,c
  2003  0017F8  D7ED               	goto	u530
  2004  0017FA                     l729:
  2005  0017FA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2006  0017FE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2007  001802  0012               	return		;funcret
  2008  001804                     __end_of___lwdiv:
  2009                           	opt stack 0
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           prodh	equ	0xFF4
  2015                           prodl	equ	0xFF3
  2016                           intcon	equ	0xFF2
  2017                           intcon3	equ	0xFF0
  2018                           postinc0	equ	0xFEE
  2019                           wreg	equ	0xFE8
  2020                           postinc2	equ	0xFDE
  2021                           postdec2	equ	0xFDD
  2022                           fsr2h	equ	0xFDA
  2023                           fsr2l	equ	0xFD9
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _motorStop_3 *****************
  2027 ;; Defined at:
  2028 ;;		line 566 in file "main.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;Total ram usage:        2 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; This function calls:
  2049 ;;		Nothing
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text6
  2056  0018FA                     __ptext6:
  2057                           	opt stack 0
  2058  0018FA                     _motorStop_3:
  2059                           	opt stack 30
  2060                           
  2061                           ;main.c: 567: LATCbits.LATC5 = 0;
  2062                           
  2063                           ;incstack = 0
  2064  0018FA  9A8B               	bcf	3979,5,c	;volatile
  2065                           
  2066                           ;main.c: 568: TRISCbits.RC5 = 0;
  2067  0018FC  9A94               	bcf	3988,5,c	;volatile
  2068                           
  2069                           ;main.c: 570: _delay((unsigned long)((200)*(40000000/4000.0)));
  2070  0018FE  0E0B               	movlw	11
  2071  001900  6E02               	movwf	(??_motorStop_3+1)& (0+255),c
  2072  001902  0E26               	movlw	38
  2073  001904  6E01               	movwf	??_motorStop_3& (0+255),c
  2074  001906  0E5E               	movlw	94
  2075  001908                     u997:
  2076  001908  2EE8               	decfsz	wreg,f,c
  2077  00190A  D7FE               	bra	u997
  2078  00190C  2E01               	decfsz	??_motorStop_3& (0+255),f,c
  2079  00190E  D7FC               	bra	u997
  2080  001910  2E02               	decfsz	(??_motorStop_3+1)& (0+255),f,c
  2081  001912  D7FA               	bra	u997
  2082  001914  0012               	return		;funcret
  2083  001916                     __end_of_motorStop_3:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           prodh	equ	0xFF4
  2090                           prodl	equ	0xFF3
  2091                           intcon	equ	0xFF2
  2092                           intcon3	equ	0xFF0
  2093                           postinc0	equ	0xFEE
  2094                           wreg	equ	0xFE8
  2095                           postinc2	equ	0xFDE
  2096                           postdec2	equ	0xFDD
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _motorStop_2 *****************
  2102 ;; Defined at:
  2103 ;;		line 548 in file "main.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;		None
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;		None
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;Total ram usage:        2 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text7
  2131  001916                     __ptext7:
  2132                           	opt stack 0
  2133  001916                     _motorStop_2:
  2134                           	opt stack 30
  2135                           
  2136                           ;main.c: 549: LATCbits.LATC2 = 0;
  2137                           
  2138                           ;incstack = 0
  2139  001916  948B               	bcf	3979,2,c	;volatile
  2140                           
  2141                           ;main.c: 550: TRISCbits.RC2 = 0;
  2142  001918  9494               	bcf	3988,2,c	;volatile
  2143                           
  2144                           ;main.c: 552: _delay((unsigned long)((200)*(40000000/4000.0)));
  2145  00191A  0E0B               	movlw	11
  2146  00191C  6E02               	movwf	(??_motorStop_2+1)& (0+255),c
  2147  00191E  0E26               	movlw	38
  2148  001920  6E01               	movwf	??_motorStop_2& (0+255),c
  2149  001922  0E5E               	movlw	94
  2150  001924                     u1007:
  2151  001924  2EE8               	decfsz	wreg,f,c
  2152  001926  D7FE               	bra	u1007
  2153  001928  2E01               	decfsz	??_motorStop_2& (0+255),f,c
  2154  00192A  D7FC               	bra	u1007
  2155  00192C  2E02               	decfsz	(??_motorStop_2+1)& (0+255),f,c
  2156  00192E  D7FA               	bra	u1007
  2157  001930  0012               	return		;funcret
  2158  001932                     __end_of_motorStop_2:
  2159                           	opt stack 0
  2160                           tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           intcon	equ	0xFF2
  2167                           intcon3	equ	0xFF0
  2168                           postinc0	equ	0xFEE
  2169                           wreg	equ	0xFE8
  2170                           postinc2	equ	0xFDE
  2171                           postdec2	equ	0xFDD
  2172                           fsr2h	equ	0xFDA
  2173                           fsr2l	equ	0xFD9
  2174                           status	equ	0xFD8
  2175                           
  2176 ;; *************** function _motorStop_1 *****************
  2177 ;; Defined at:
  2178 ;;		line 531 in file "main.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;		None
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;		None
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      void 
  2185 ;; Registers used:
  2186 ;;		wreg
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;Total ram usage:        2 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; This function calls:
  2199 ;;		Nothing
  2200 ;; This function is called by:
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text8
  2206  001932                     __ptext8:
  2207                           	opt stack 0
  2208  001932                     _motorStop_1:
  2209                           	opt stack 30
  2210                           
  2211                           ;main.c: 532: LATCbits.LATC1 = 0;
  2212                           
  2213                           ;incstack = 0
  2214  001932  928B               	bcf	3979,1,c	;volatile
  2215                           
  2216                           ;main.c: 533: TRISCbits.RC1 = 0;
  2217  001934  9294               	bcf	3988,1,c	;volatile
  2218                           
  2219                           ;main.c: 535: _delay((unsigned long)((200)*(40000000/4000.0)));
  2220  001936  0E0B               	movlw	11
  2221  001938  6E02               	movwf	(??_motorStop_1+1)& (0+255),c
  2222  00193A  0E26               	movlw	38
  2223  00193C  6E01               	movwf	??_motorStop_1& (0+255),c
  2224  00193E  0E5E               	movlw	94
  2225  001940                     u1017:
  2226  001940  2EE8               	decfsz	wreg,f,c
  2227  001942  D7FE               	bra	u1017
  2228  001944  2E01               	decfsz	??_motorStop_1& (0+255),f,c
  2229  001946  D7FC               	bra	u1017
  2230  001948  2E02               	decfsz	(??_motorStop_1+1)& (0+255),f,c
  2231  00194A  D7FA               	bra	u1017
  2232  00194C  0012               	return		;funcret
  2233  00194E                     __end_of_motorStop_1:
  2234                           	opt stack 0
  2235                           tblptru	equ	0xFF8
  2236                           tblptrh	equ	0xFF7
  2237                           tblptrl	equ	0xFF6
  2238                           tablat	equ	0xFF5
  2239                           prodh	equ	0xFF4
  2240                           prodl	equ	0xFF3
  2241                           intcon	equ	0xFF2
  2242                           intcon3	equ	0xFF0
  2243                           postinc0	equ	0xFEE
  2244                           wreg	equ	0xFE8
  2245                           postinc2	equ	0xFDE
  2246                           postdec2	equ	0xFDD
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _motorStop_0 *****************
  2252 ;; Defined at:
  2253 ;;		line 514 in file "main.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;Total ram usage:        2 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_main
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text9
  2281  00194E                     __ptext9:
  2282                           	opt stack 0
  2283  00194E                     _motorStop_0:
  2284                           	opt stack 30
  2285                           
  2286                           ;main.c: 515: LATCbits.LATC0 = 0;
  2287                           
  2288                           ;incstack = 0
  2289  00194E  908B               	bcf	3979,0,c	;volatile
  2290                           
  2291                           ;main.c: 516: TRISCbits.RC0 = 0;
  2292  001950  9094               	bcf	3988,0,c	;volatile
  2293                           
  2294                           ;main.c: 518: _delay((unsigned long)((200)*(40000000/4000.0)));
  2295  001952  0E0B               	movlw	11
  2296  001954  6E02               	movwf	(??_motorStop_0+1)& (0+255),c
  2297  001956  0E26               	movlw	38
  2298  001958  6E01               	movwf	??_motorStop_0& (0+255),c
  2299  00195A  0E5E               	movlw	94
  2300  00195C                     u1027:
  2301  00195C  2EE8               	decfsz	wreg,f,c
  2302  00195E  D7FE               	bra	u1027
  2303  001960  2E01               	decfsz	??_motorStop_0& (0+255),f,c
  2304  001962  D7FC               	bra	u1027
  2305  001964  2E02               	decfsz	(??_motorStop_0+1)& (0+255),f,c
  2306  001966  D7FA               	bra	u1027
  2307  001968  0012               	return		;funcret
  2308  00196A                     __end_of_motorStop_0:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           intcon	equ	0xFF2
  2317                           intcon3	equ	0xFF0
  2318                           postinc0	equ	0xFEE
  2319                           wreg	equ	0xFE8
  2320                           postinc2	equ	0xFDE
  2321                           postdec2	equ	0xFDD
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _motorStart_3 *****************
  2327 ;; Defined at:
  2328 ;;		line 557 in file "main.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;		None
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; This function calls:
  2349 ;;		Nothing
  2350 ;; This function is called by:
  2351 ;;		_main
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           	psect	text10
  2356  00196A                     __ptext10:
  2357                           	opt stack 0
  2358  00196A                     _motorStart_3:
  2359                           	opt stack 30
  2360                           
  2361                           ;main.c: 559: LATCbits.LATC5 = 1;
  2362                           
  2363                           ;incstack = 0
  2364  00196A  8A8B               	bsf	3979,5,c	;volatile
  2365                           
  2366                           ;main.c: 560: TRISCbits.RC5 = 0;
  2367  00196C  9A94               	bcf	3988,5,c	;volatile
  2368                           
  2369                           ;main.c: 562: _delay((unsigned long)((200)*(40000000/4000.0)));
  2370  00196E  0E0B               	movlw	11
  2371  001970  6E02               	movwf	(??_motorStart_3+1)& (0+255),c
  2372  001972  0E26               	movlw	38
  2373  001974  6E01               	movwf	??_motorStart_3& (0+255),c
  2374  001976  0E5E               	movlw	94
  2375  001978                     u1037:
  2376  001978  2EE8               	decfsz	wreg,f,c
  2377  00197A  D7FE               	bra	u1037
  2378  00197C  2E01               	decfsz	??_motorStart_3& (0+255),f,c
  2379  00197E  D7FC               	bra	u1037
  2380  001980  2E02               	decfsz	(??_motorStart_3+1)& (0+255),f,c
  2381  001982  D7FA               	bra	u1037
  2382  001984  0012               	return		;funcret
  2383  001986                     __end_of_motorStart_3:
  2384                           	opt stack 0
  2385                           tblptru	equ	0xFF8
  2386                           tblptrh	equ	0xFF7
  2387                           tblptrl	equ	0xFF6
  2388                           tablat	equ	0xFF5
  2389                           prodh	equ	0xFF4
  2390                           prodl	equ	0xFF3
  2391                           intcon	equ	0xFF2
  2392                           intcon3	equ	0xFF0
  2393                           postinc0	equ	0xFEE
  2394                           wreg	equ	0xFE8
  2395                           postinc2	equ	0xFDE
  2396                           postdec2	equ	0xFDD
  2397                           fsr2h	equ	0xFDA
  2398                           fsr2l	equ	0xFD9
  2399                           status	equ	0xFD8
  2400                           
  2401 ;; *************** function _motorStart_2 *****************
  2402 ;; Defined at:
  2403 ;;		line 539 in file "main.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;Total ram usage:        2 bytes
  2422 ;; Hardware stack levels used:    1
  2423 ;; This function calls:
  2424 ;;		Nothing
  2425 ;; This function is called by:
  2426 ;;		_main
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text11
  2431  001986                     __ptext11:
  2432                           	opt stack 0
  2433  001986                     _motorStart_2:
  2434                           	opt stack 30
  2435                           
  2436                           ;main.c: 541: LATCbits.LATC2 = 1;
  2437                           
  2438                           ;incstack = 0
  2439  001986  848B               	bsf	3979,2,c	;volatile
  2440                           
  2441                           ;main.c: 542: TRISCbits.RC2 = 0;
  2442  001988  9494               	bcf	3988,2,c	;volatile
  2443                           
  2444                           ;main.c: 544: _delay((unsigned long)((200)*(40000000/4000.0)));
  2445  00198A  0E0B               	movlw	11
  2446  00198C  6E02               	movwf	(??_motorStart_2+1)& (0+255),c
  2447  00198E  0E26               	movlw	38
  2448  001990  6E01               	movwf	??_motorStart_2& (0+255),c
  2449  001992  0E5E               	movlw	94
  2450  001994                     u1047:
  2451  001994  2EE8               	decfsz	wreg,f,c
  2452  001996  D7FE               	bra	u1047
  2453  001998  2E01               	decfsz	??_motorStart_2& (0+255),f,c
  2454  00199A  D7FC               	bra	u1047
  2455  00199C  2E02               	decfsz	(??_motorStart_2+1)& (0+255),f,c
  2456  00199E  D7FA               	bra	u1047
  2457  0019A0  0012               	return		;funcret
  2458  0019A2                     __end_of_motorStart_2:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           intcon	equ	0xFF2
  2467                           intcon3	equ	0xFF0
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           postinc2	equ	0xFDE
  2471                           postdec2	equ	0xFDD
  2472                           fsr2h	equ	0xFDA
  2473                           fsr2l	equ	0xFD9
  2474                           status	equ	0xFD8
  2475                           
  2476 ;; *************** function _motorStart_1 *****************
  2477 ;; Defined at:
  2478 ;;		line 522 in file "main.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;		None
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;		None
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  1    wreg      void 
  2485 ;; Registers used:
  2486 ;;		wreg
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;Total ram usage:        2 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; This function calls:
  2499 ;;		Nothing
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text12
  2506  0019A2                     __ptext12:
  2507                           	opt stack 0
  2508  0019A2                     _motorStart_1:
  2509                           	opt stack 30
  2510                           
  2511                           ;main.c: 524: LATCbits.LATC1 = 1;
  2512                           
  2513                           ;incstack = 0
  2514  0019A2  828B               	bsf	3979,1,c	;volatile
  2515                           
  2516                           ;main.c: 525: TRISCbits.RC1 = 0;
  2517  0019A4  9294               	bcf	3988,1,c	;volatile
  2518                           
  2519                           ;main.c: 527: _delay((unsigned long)((200)*(40000000/4000.0)));
  2520  0019A6  0E0B               	movlw	11
  2521  0019A8  6E02               	movwf	(??_motorStart_1+1)& (0+255),c
  2522  0019AA  0E26               	movlw	38
  2523  0019AC  6E01               	movwf	??_motorStart_1& (0+255),c
  2524  0019AE  0E5E               	movlw	94
  2525  0019B0                     u1057:
  2526  0019B0  2EE8               	decfsz	wreg,f,c
  2527  0019B2  D7FE               	bra	u1057
  2528  0019B4  2E01               	decfsz	??_motorStart_1& (0+255),f,c
  2529  0019B6  D7FC               	bra	u1057
  2530  0019B8  2E02               	decfsz	(??_motorStart_1+1)& (0+255),f,c
  2531  0019BA  D7FA               	bra	u1057
  2532  0019BC  0012               	return		;funcret
  2533  0019BE                     __end_of_motorStart_1:
  2534                           	opt stack 0
  2535                           tblptru	equ	0xFF8
  2536                           tblptrh	equ	0xFF7
  2537                           tblptrl	equ	0xFF6
  2538                           tablat	equ	0xFF5
  2539                           prodh	equ	0xFF4
  2540                           prodl	equ	0xFF3
  2541                           intcon	equ	0xFF2
  2542                           intcon3	equ	0xFF0
  2543                           postinc0	equ	0xFEE
  2544                           wreg	equ	0xFE8
  2545                           postinc2	equ	0xFDE
  2546                           postdec2	equ	0xFDD
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _motorStart_0 *****************
  2552 ;; Defined at:
  2553 ;;		line 505 in file "main.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;Total ram usage:        2 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; This function calls:
  2574 ;;		Nothing
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text13
  2581  0019BE                     __ptext13:
  2582                           	opt stack 0
  2583  0019BE                     _motorStart_0:
  2584                           	opt stack 30
  2585                           
  2586                           ;main.c: 507: LATCbits.LATC0 = 1;
  2587                           
  2588                           ;incstack = 0
  2589  0019BE  808B               	bsf	3979,0,c	;volatile
  2590                           
  2591                           ;main.c: 508: TRISCbits.RC0 = 0;
  2592  0019C0  9094               	bcf	3988,0,c	;volatile
  2593                           
  2594                           ;main.c: 510: _delay((unsigned long)((200)*(40000000/4000.0)));
  2595  0019C2  0E0B               	movlw	11
  2596  0019C4  6E02               	movwf	(??_motorStart_0+1)& (0+255),c
  2597  0019C6  0E26               	movlw	38
  2598  0019C8  6E01               	movwf	??_motorStart_0& (0+255),c
  2599  0019CA  0E5E               	movlw	94
  2600  0019CC                     u1067:
  2601  0019CC  2EE8               	decfsz	wreg,f,c
  2602  0019CE  D7FE               	bra	u1067
  2603  0019D0  2E01               	decfsz	??_motorStart_0& (0+255),f,c
  2604  0019D2  D7FC               	bra	u1067
  2605  0019D4  2E02               	decfsz	(??_motorStart_0+1)& (0+255),f,c
  2606  0019D6  D7FA               	bra	u1067
  2607  0019D8  0012               	return		;funcret
  2608  0019DA                     __end_of_motorStart_0:
  2609                           	opt stack 0
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon	equ	0xFF2
  2617                           intcon3	equ	0xFF0
  2618                           postinc0	equ	0xFEE
  2619                           wreg	equ	0xFE8
  2620                           postinc2	equ	0xFDE
  2621                           postdec2	equ	0xFDD
  2622                           fsr2h	equ	0xFDA
  2623                           fsr2l	equ	0xFD9
  2624                           status	equ	0xFD8
  2625                           
  2626 ;; *************** function _initLCD *****************
  2627 ;; Defined at:
  2628 ;;		line 60 in file "lcd.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;		None
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;		None
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  1    wreg      void 
  2635 ;; Registers used:
  2636 ;;		wreg, status,2, status,0, cstack
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;Total ram usage:        1 bytes
  2647 ;; Hardware stack levels used:    1
  2648 ;; Hardware stack levels required when called:    2
  2649 ;; This function calls:
  2650 ;;		_lcdInst
  2651 ;; This function is called by:
  2652 ;;		_main
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text14
  2657  001804                     __ptext14:
  2658                           	opt stack 0
  2659  001804                     _initLCD:
  2660                           	opt stack 28
  2661                           
  2662                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2663                           
  2664                           ;incstack = 0
  2665  001804  0EC3               	movlw	195
  2666  001806  6E04               	movwf	??_initLCD& (0+255),c
  2667  001808  0ECD               	movlw	205
  2668  00180A                     u1077:
  2669  00180A  2EE8               	decfsz	wreg,f,c
  2670  00180C  D7FE               	bra	u1077
  2671  00180E  2E04               	decfsz	??_initLCD& (0+255),f,c
  2672  001810  D7FC               	bra	u1077
  2673  001812  F000               	nop	
  2674                           
  2675                           ;lcd.c: 69: lcdInst(0b00110011);
  2676  001814  0E33               	movlw	51
  2677  001816  ECF7  F00C         	call	_lcdInst
  2678                           
  2679                           ;lcd.c: 70: lcdInst(0b00110010);
  2680  00181A  0E32               	movlw	50
  2681  00181C  ECF7  F00C         	call	_lcdInst
  2682                           
  2683                           ;lcd.c: 71: lcdInst(0b00101000);
  2684  001820  0E28               	movlw	40
  2685  001822  ECF7  F00C         	call	_lcdInst
  2686                           
  2687                           ;lcd.c: 72: lcdInst(0b00001111);
  2688  001826  0E0F               	movlw	15
  2689  001828  ECF7  F00C         	call	_lcdInst
  2690                           
  2691                           ;lcd.c: 73: lcdInst(0b00000110);
  2692  00182C  0E06               	movlw	6
  2693  00182E  ECF7  F00C         	call	_lcdInst
  2694                           
  2695                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2696  001832  0E01               	movlw	1
  2697  001834  ECF7  F00C         	call	_lcdInst
  2698  001838  0EC3               	movlw	195
  2699  00183A  6E04               	movwf	??_initLCD& (0+255),c
  2700  00183C  0ECD               	movlw	205
  2701  00183E                     u1087:
  2702  00183E  2EE8               	decfsz	wreg,f,c
  2703  001840  D7FE               	bra	u1087
  2704  001842  2E04               	decfsz	??_initLCD& (0+255),f,c
  2705  001844  D7FC               	bra	u1087
  2706  001846  F000               	nop	
  2707                           
  2708                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2709  001848  0E0F               	movlw	15
  2710  00184A  ECF7  F00C         	call	_lcdInst
  2711  00184E  0012               	return		;funcret
  2712  001850                     __end_of_initLCD:
  2713                           	opt stack 0
  2714                           tblptru	equ	0xFF8
  2715                           tblptrh	equ	0xFF7
  2716                           tblptrl	equ	0xFF6
  2717                           tablat	equ	0xFF5
  2718                           prodh	equ	0xFF4
  2719                           prodl	equ	0xFF3
  2720                           intcon	equ	0xFF2
  2721                           intcon3	equ	0xFF0
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           postinc2	equ	0xFDE
  2725                           postdec2	equ	0xFDD
  2726                           fsr2h	equ	0xFDA
  2727                           fsr2l	equ	0xFD9
  2728                           status	equ	0xFD8
  2729                           
  2730 ;; *************** function _lcdInst *****************
  2731 ;; Defined at:
  2732 ;;		line 11 in file "lcd.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;  data            1    wreg     unsigned char 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  data            1    2[COMRAM] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;Total ram usage:        1 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    1
  2753 ;; This function calls:
  2754 ;;		_lcdNibble
  2755 ;; This function is called by:
  2756 ;;		_main
  2757 ;;		_initLCD
  2758 ;;		_lcd_set_cursor
  2759 ;;		_lcd_shift_cursor
  2760 ;;		_lcd_shift_display
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text15
  2765  0019EE                     __ptext15:
  2766                           	opt stack 0
  2767  0019EE                     _lcdInst:
  2768                           	opt stack 29
  2769                           
  2770                           ;incstack = 0
  2771                           ;lcdInst@data stored from wreg
  2772  0019EE  6E03               	movwf	lcdInst@data,c
  2773                           
  2774                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2775  0019F0  948C               	bcf	3980,2,c	;volatile
  2776                           
  2777                           ;lcd.c: 20: lcdNibble(data);
  2778  0019F2  5003               	movf	lcdInst@data,w,c
  2779  0019F4  EC6C  F00B         	call	_lcdNibble
  2780                           
  2781                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2782  0019F8  0EC8               	movlw	200
  2783  0019FA                     u1097:
  2784  0019FA  D000               	nop2	
  2785  0019FC  2EE8               	decfsz	wreg,f,c
  2786  0019FE  D7FD               	bra	u1097
  2787  001A00  0012               	return		;funcret
  2788  001A02                     __end_of_lcdInst:
  2789                           	opt stack 0
  2790                           tblptru	equ	0xFF8
  2791                           tblptrh	equ	0xFF7
  2792                           tblptrl	equ	0xFF6
  2793                           tablat	equ	0xFF5
  2794                           prodh	equ	0xFF4
  2795                           prodl	equ	0xFF3
  2796                           intcon	equ	0xFF2
  2797                           intcon3	equ	0xFF0
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           postinc2	equ	0xFDE
  2801                           postdec2	equ	0xFDD
  2802                           fsr2h	equ	0xFDA
  2803                           fsr2l	equ	0xFD9
  2804                           status	equ	0xFD8
  2805                           
  2806 ;; *************** function _lcdNibble *****************
  2807 ;; Defined at:
  2808 ;;		line 37 in file "lcd.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  data            1    wreg     unsigned char 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  data            1    1[COMRAM] unsigned char 
  2813 ;;  temp            1    0[COMRAM] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;Total ram usage:        2 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_lcdInst
  2833 ;;		_putch
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text16
  2838  0016D8                     __ptext16:
  2839                           	opt stack 0
  2840  0016D8                     _lcdNibble:
  2841                           	opt stack 28
  2842                           
  2843                           ;incstack = 0
  2844                           ;lcdNibble@data stored from wreg
  2845  0016D8  6E02               	movwf	lcdNibble@data,c
  2846                           
  2847                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2848  0016DA  5002               	movf	lcdNibble@data,w,c
  2849  0016DC  0BF0               	andlw	240
  2850  0016DE  6E01               	movwf	lcdNibble@temp,c
  2851                           
  2852                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2853  0016E0  508C               	movf	3980,w,c	;volatile
  2854  0016E2  0B0F               	andlw	15
  2855  0016E4  6E8C               	movwf	3980,c	;volatile
  2856                           
  2857                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2858  0016E6  5001               	movf	lcdNibble@temp,w,c
  2859  0016E8  108C               	iorwf	3980,w,c	;volatile
  2860  0016EA  6E8C               	movwf	3980,c	;volatile
  2861                           
  2862                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2863  0016EC  0E00               	movlw	0
  2864  0016EE  BEF2               	btfsc	intcon,7,c	;volatile
  2865  0016F0  0E01               	movlw	1
  2866  0016F2  6E2C               	movwf	lcd@LCDinterruptState,c
  2867  0016F4  9EF2               	bcf	intcon,7,c	;volatile
  2868  0016F6  868C               	bsf	3980,3,c	;volatile
  2869  0016F8  0E53               	movlw	83
  2870  0016FA                     u1107:
  2871  0016FA  2EE8               	decfsz	wreg,f,c
  2872  0016FC  D7FE               	bra	u1107
  2873  0016FE  F000               	nop	
  2874  001700  968C               	bcf	3980,3,c	;volatile
  2875  001702  0EC8               	movlw	200
  2876  001704                     u1117:
  2877  001704  D000               	nop2	
  2878  001706  2EE8               	decfsz	wreg,f,c
  2879  001708  D7FD               	bra	u1117
  2880  00170A  B02C               	btfsc	lcd@LCDinterruptState,0,c
  2881  00170C  D002               	bra	u15
  2882  00170E  9EF2               	bcf	intcon,7,c	;volatile
  2883  001710  D001               	bra	u16
  2884  001712                     u15:
  2885  001712  8EF2               	bsf	intcon,7,c	;volatile
  2886  001714                     u16:
  2887                           
  2888                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2889  001714  3802               	swapf	lcdNibble@data,w,c
  2890  001716  0BF0               	andlw	240
  2891  001718  6E02               	movwf	lcdNibble@data,c
  2892                           
  2893                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2894  00171A  5002               	movf	lcdNibble@data,w,c
  2895  00171C  0BF0               	andlw	240
  2896  00171E  6E01               	movwf	lcdNibble@temp,c
  2897                           
  2898                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2899  001720  508C               	movf	3980,w,c	;volatile
  2900  001722  0B0F               	andlw	15
  2901  001724  6E8C               	movwf	3980,c	;volatile
  2902                           
  2903                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2904  001726  5001               	movf	lcdNibble@temp,w,c
  2905  001728  108C               	iorwf	3980,w,c	;volatile
  2906  00172A  6E8C               	movwf	3980,c	;volatile
  2907                           
  2908                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2909  00172C  0E00               	movlw	0
  2910  00172E  BEF2               	btfsc	intcon,7,c	;volatile
  2911  001730  0E01               	movlw	1
  2912  001732  6E2C               	movwf	lcd@LCDinterruptState,c
  2913  001734  9EF2               	bcf	intcon,7,c	;volatile
  2914  001736  868C               	bsf	3980,3,c	;volatile
  2915  001738  0E53               	movlw	83
  2916  00173A                     u1127:
  2917  00173A  2EE8               	decfsz	wreg,f,c
  2918  00173C  D7FE               	bra	u1127
  2919  00173E  F000               	nop	
  2920  001740  968C               	bcf	3980,3,c	;volatile
  2921  001742  0EC8               	movlw	200
  2922  001744                     u1137:
  2923  001744  D000               	nop2	
  2924  001746  2EE8               	decfsz	wreg,f,c
  2925  001748  D7FD               	bra	u1137
  2926  00174A  B02C               	btfsc	lcd@LCDinterruptState,0,c
  2927  00174C  D002               	bra	u25
  2928  00174E  9EF2               	bcf	intcon,7,c	;volatile
  2929  001750  D001               	bra	u26
  2930  001752                     u25:
  2931  001752  8EF2               	bsf	intcon,7,c	;volatile
  2932  001754                     u26:
  2933  001754  0012               	return		;funcret
  2934  001756                     __end_of_lcdNibble:
  2935                           	opt stack 0
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           intcon	equ	0xFF2
  2943                           intcon3	equ	0xFF0
  2944                           postinc0	equ	0xFEE
  2945                           wreg	equ	0xFE8
  2946                           postinc2	equ	0xFDE
  2947                           postdec2	equ	0xFDD
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _I2C_Master_Write *****************
  2953 ;; Defined at:
  2954 ;;		line 108 in file "I2C.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;Total ram usage:        2 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    1
  2975 ;; This function calls:
  2976 ;;		_I2C_Master_Wait
  2977 ;; This function is called by:
  2978 ;;		_main
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text17
  2983  001A14                     __ptext17:
  2984                           	opt stack 0
  2985  001A14                     _I2C_Master_Write:
  2986                           	opt stack 29
  2987                           
  2988                           ;I2C.c: 116: I2C_Master_Wait();
  2989                           
  2990                           ;incstack = 0
  2991  001A14  EC01  F00D         	call	_I2C_Master_Wait	;wreg free
  2992                           
  2993                           ;I2C.c: 117: SSPBUF = byteToWrite;
  2994  001A18  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2995  001A1C  0012               	return		;funcret
  2996  001A1E                     __end_of_I2C_Master_Write:
  2997                           	opt stack 0
  2998                           tblptru	equ	0xFF8
  2999                           tblptrh	equ	0xFF7
  3000                           tblptrl	equ	0xFF6
  3001                           tablat	equ	0xFF5
  3002                           prodh	equ	0xFF4
  3003                           prodl	equ	0xFF3
  3004                           intcon	equ	0xFF2
  3005                           intcon3	equ	0xFF0
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _I2C_Master_Stop *****************
  3015 ;; Defined at:
  3016 ;;		line 95 in file "I2C.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;Total ram usage:        0 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    1
  3037 ;; This function calls:
  3038 ;;		_I2C_Master_Wait
  3039 ;; This function is called by:
  3040 ;;		_main
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text18
  3045  001A1E                     __ptext18:
  3046                           	opt stack 0
  3047  001A1E                     _I2C_Master_Stop:
  3048                           	opt stack 29
  3049                           
  3050                           ;I2C.c: 104: I2C_Master_Wait();
  3051                           
  3052                           ;incstack = 0
  3053  001A1E  EC01  F00D         	call	_I2C_Master_Wait	;wreg free
  3054                           
  3055                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  3056  001A22  84C5               	bsf	4037,2,c	;volatile
  3057  001A24  0012               	return		;funcret
  3058  001A26                     __end_of_I2C_Master_Stop:
  3059                           	opt stack 0
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           prodh	equ	0xFF4
  3065                           prodl	equ	0xFF3
  3066                           intcon	equ	0xFF2
  3067                           intcon3	equ	0xFF0
  3068                           postinc0	equ	0xFEE
  3069                           wreg	equ	0xFE8
  3070                           postinc2	equ	0xFDE
  3071                           postdec2	equ	0xFDD
  3072                           fsr2h	equ	0xFDA
  3073                           fsr2l	equ	0xFD9
  3074                           status	equ	0xFD8
  3075                           
  3076 ;; *************** function _I2C_Master_Start *****************
  3077 ;; Defined at:
  3078 ;;		line 69 in file "I2C.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;		None
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;		None
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      void 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0, cstack
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;Total ram usage:        0 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    1
  3099 ;; This function calls:
  3100 ;;		_I2C_Master_Wait
  3101 ;; This function is called by:
  3102 ;;		_main
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text19
  3107  001A26                     __ptext19:
  3108                           	opt stack 0
  3109  001A26                     _I2C_Master_Start:
  3110                           	opt stack 29
  3111                           
  3112                           ;I2C.c: 78: I2C_Master_Wait();
  3113                           
  3114                           ;incstack = 0
  3115  001A26  EC01  F00D         	call	_I2C_Master_Wait	;wreg free
  3116                           
  3117                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  3118  001A2A  80C5               	bsf	4037,0,c	;volatile
  3119  001A2C  0012               	return		;funcret
  3120  001A2E                     __end_of_I2C_Master_Start:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           prodh	equ	0xFF4
  3127                           prodl	equ	0xFF3
  3128                           intcon	equ	0xFF2
  3129                           intcon3	equ	0xFF0
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postinc2	equ	0xFDE
  3133                           postdec2	equ	0xFDD
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function _I2C_Master_Wait *****************
  3139 ;; Defined at:
  3140 ;;		line 51 in file "I2C.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;		None
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;		None
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg, status,2, status,0
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;Total ram usage:        1 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_I2C_Master_Start
  3164 ;;		_I2C_Master_Stop
  3165 ;;		_I2C_Master_Write
  3166 ;;		_I2C_Master_RepeatedStart
  3167 ;;		_I2C_Master_Read
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text20
  3172  001A02                     __ptext20:
  3173                           	opt stack 0
  3174  001A02                     _I2C_Master_Wait:
  3175                           	opt stack 29
  3176                           
  3177                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3178                           
  3179                           ;incstack = 0
  3180  001A02  B4C7               	btfsc	4039,2,c	;volatile
  3181  001A04  D7FE               	goto	_I2C_Master_Wait
  3182  001A06  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  3183  001A0A  0E1F               	movlw	31
  3184  001A0C  1601               	andwf	??_I2C_Master_Wait,f,c
  3185  001A0E  B4D8               	btfsc	status,2,c
  3186  001A10  0012               	return	
  3187  001A12  D7F7               	goto	_I2C_Master_Wait
  3188  001A14                     __end_of_I2C_Master_Wait:
  3189                           	opt stack 0
  3190                           tblptru	equ	0xFF8
  3191                           tblptrh	equ	0xFF7
  3192                           tblptrl	equ	0xFF6
  3193                           tablat	equ	0xFF5
  3194                           prodh	equ	0xFF4
  3195                           prodl	equ	0xFF3
  3196                           intcon	equ	0xFF2
  3197                           intcon3	equ	0xFF0
  3198                           postinc0	equ	0xFEE
  3199                           wreg	equ	0xFE8
  3200                           postinc2	equ	0xFDE
  3201                           postdec2	equ	0xFDD
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function _I2C_Master_Init *****************
  3207 ;; Defined at:
  3208 ;;		line 14 in file "I2C.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2, status,0, cstack
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3222 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;Total ram usage:        8 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    1
  3229 ;; This function calls:
  3230 ;;		___lldiv
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text21
  3237  001756                     __ptext21:
  3238                           	opt stack 0
  3239  001756                     _I2C_Master_Init:
  3240                           	opt stack 29
  3241                           
  3242                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  3243                           
  3244                           ;incstack = 0
  3245  001756  9AC6               	bcf	4038,5,c	;volatile
  3246                           
  3247                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  3248  001758  8694               	bsf	3988,3,c	;volatile
  3249                           
  3250                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  3251  00175A  8894               	bsf	3988,4,c	;volatile
  3252                           
  3253                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  3254  00175C  0E80               	movlw	128
  3255  00175E  6EC7               	movwf	4039,c	;volatile
  3256                           
  3257                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  3258  001760  0E28               	movlw	40
  3259  001762  6EC6               	movwf	4038,c	;volatile
  3260                           
  3261                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  3262  001764  0E00               	movlw	0
  3263  001766  6EC5               	movwf	4037,c	;volatile
  3264                           
  3265                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  3266  001768  0E00               	movlw	0
  3267  00176A  6E01               	movwf	___lldiv@dividend,c
  3268  00176C  0E5A               	movlw	90
  3269  00176E  6E02               	movwf	___lldiv@dividend+1,c
  3270  001770  0E62               	movlw	98
  3271  001772  6E03               	movwf	___lldiv@dividend+2,c
  3272  001774  0E02               	movlw	2
  3273  001776  6E04               	movwf	___lldiv@dividend+3,c
  3274  001778  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  3275  00177C  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  3276  001780  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  3277  001784  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  3278  001788  0E02               	movlw	2
  3279  00178A                     u585:
  3280  00178A  90D8               	bcf	status,0,c
  3281  00178C  3612               	rlcf	??_I2C_Master_Init,f,c
  3282  00178E  3613               	rlcf	??_I2C_Master_Init+1,f,c
  3283  001790  3614               	rlcf	??_I2C_Master_Init+2,f,c
  3284  001792  3615               	rlcf	??_I2C_Master_Init+3,f,c
  3285  001794  2EE8               	decfsz	wreg,f,c
  3286  001796  D7F9               	goto	u585
  3287  001798  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  3288  00179C  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3289  0017A0  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3290  0017A4  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3291  0017A8  EC2B  F00B         	call	___lldiv	;wreg free
  3292  0017AC  0401               	decf	?___lldiv,w,c
  3293  0017AE  6EC8               	movwf	4040,c	;volatile
  3294  0017B0  0012               	return		;funcret
  3295  0017B2                     __end_of_I2C_Master_Init:
  3296                           	opt stack 0
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           intcon3	equ	0xFF0
  3305                           postinc0	equ	0xFEE
  3306                           wreg	equ	0xFE8
  3307                           postinc2	equ	0xFDE
  3308                           postdec2	equ	0xFDD
  3309                           fsr2h	equ	0xFDA
  3310                           fsr2l	equ	0xFD9
  3311                           status	equ	0xFD8
  3312                           
  3313 ;; *************** function ___lldiv *****************
  3314 ;; Defined at:
  3315 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  dividend        4    0[COMRAM] unsigned long 
  3318 ;;  divisor         4    4[COMRAM] unsigned long 
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  quotient        4    8[COMRAM] unsigned long 
  3321 ;;  counter         1   12[COMRAM] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  4    0[COMRAM] unsigned long 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3331 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;Total ram usage:       13 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; This function calls:
  3338 ;;		Nothing
  3339 ;; This function is called by:
  3340 ;;		_I2C_Master_Init
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           	psect	text22
  3345  001656                     __ptext22:
  3346                           	opt stack 0
  3347  001656                     ___lldiv:
  3348                           	opt stack 29
  3349                           
  3350                           ;incstack = 0
  3351  001656  0E00               	movlw	0
  3352  001658  6E09               	movwf	___lldiv@quotient,c
  3353  00165A  0E00               	movlw	0
  3354  00165C  6E0A               	movwf	___lldiv@quotient+1,c
  3355  00165E  0E00               	movlw	0
  3356  001660  6E0B               	movwf	___lldiv@quotient+2,c
  3357  001662  0E00               	movlw	0
  3358  001664  6E0C               	movwf	___lldiv@quotient+3,c
  3359  001666  5005               	movf	___lldiv@divisor,w,c
  3360  001668  1006               	iorwf	___lldiv@divisor+1,w,c
  3361  00166A  1007               	iorwf	___lldiv@divisor+2,w,c
  3362  00166C  1008               	iorwf	___lldiv@divisor+3,w,c
  3363  00166E  B4D8               	btfsc	status,2,c
  3364  001670  D02A               	goto	l676
  3365  001672  0E01               	movlw	1
  3366  001674  6E0D               	movwf	___lldiv@counter,c
  3367  001676  D006               	goto	l671
  3368  001678  90D8               	bcf	status,0,c
  3369  00167A  3605               	rlcf	___lldiv@divisor,f,c
  3370  00167C  3606               	rlcf	___lldiv@divisor+1,f,c
  3371  00167E  3607               	rlcf	___lldiv@divisor+2,f,c
  3372  001680  3608               	rlcf	___lldiv@divisor+3,f,c
  3373  001682  2A0D               	incf	___lldiv@counter,f,c
  3374  001684                     l671:
  3375  001684  AE08               	btfss	___lldiv@divisor+3,7,c
  3376  001686  D7F8               	goto	l672
  3377  001688                     u500:
  3378  001688  90D8               	bcf	status,0,c
  3379  00168A  3609               	rlcf	___lldiv@quotient,f,c
  3380  00168C  360A               	rlcf	___lldiv@quotient+1,f,c
  3381  00168E  360B               	rlcf	___lldiv@quotient+2,f,c
  3382  001690  360C               	rlcf	___lldiv@quotient+3,f,c
  3383  001692  5005               	movf	___lldiv@divisor,w,c
  3384  001694  5C01               	subwf	___lldiv@dividend,w,c
  3385  001696  5006               	movf	___lldiv@divisor+1,w,c
  3386  001698  5802               	subwfb	___lldiv@dividend+1,w,c
  3387  00169A  5007               	movf	___lldiv@divisor+2,w,c
  3388  00169C  5803               	subwfb	___lldiv@dividend+2,w,c
  3389  00169E  5008               	movf	___lldiv@divisor+3,w,c
  3390  0016A0  5804               	subwfb	___lldiv@dividend+3,w,c
  3391  0016A2  A0D8               	btfss	status,0,c
  3392  0016A4  D009               	goto	l675
  3393  0016A6  5005               	movf	___lldiv@divisor,w,c
  3394  0016A8  5E01               	subwf	___lldiv@dividend,f,c
  3395  0016AA  5006               	movf	___lldiv@divisor+1,w,c
  3396  0016AC  5A02               	subwfb	___lldiv@dividend+1,f,c
  3397  0016AE  5007               	movf	___lldiv@divisor+2,w,c
  3398  0016B0  5A03               	subwfb	___lldiv@dividend+2,f,c
  3399  0016B2  5008               	movf	___lldiv@divisor+3,w,c
  3400  0016B4  5A04               	subwfb	___lldiv@dividend+3,f,c
  3401  0016B6  8009               	bsf	___lldiv@quotient,0,c
  3402  0016B8                     l675:
  3403  0016B8  90D8               	bcf	status,0,c
  3404  0016BA  3208               	rrcf	___lldiv@divisor+3,f,c
  3405  0016BC  3207               	rrcf	___lldiv@divisor+2,f,c
  3406  0016BE  3206               	rrcf	___lldiv@divisor+1,f,c
  3407  0016C0  3205               	rrcf	___lldiv@divisor,f,c
  3408  0016C2  2E0D               	decfsz	___lldiv@counter,f,c
  3409  0016C4  D7E1               	goto	u500
  3410  0016C6                     l676:
  3411  0016C6  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3412  0016CA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3413  0016CE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3414  0016D2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3415  0016D6  0012               	return		;funcret
  3416  0016D8                     __end_of___lldiv:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           intcon	equ	0xFF2
  3425                           intcon3	equ	0xFF0
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           postinc2	equ	0xFDE
  3429                           postdec2	equ	0xFDD
  3430                           fsr2h	equ	0xFDA
  3431                           fsr2l	equ	0xFD9
  3432                           status	equ	0xFD8
  3433                           tblptru	equ	0xFF8
  3434                           tblptrh	equ	0xFF7
  3435                           tblptrl	equ	0xFF6
  3436                           tablat	equ	0xFF5
  3437                           prodh	equ	0xFF4
  3438                           prodl	equ	0xFF3
  3439                           intcon	equ	0xFF2
  3440                           intcon3	equ	0xFF0
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449                           	psect	rparam
  3450  0000                     tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodh	equ	0xFF4
  3455                           prodl	equ	0xFF3
  3456                           intcon	equ	0xFF2
  3457                           intcon3	equ	0xFF0
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           postinc2	equ	0xFDE
  3461                           postdec2	equ	0xFDD
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8


Data Sizes:
    Strings     43
    Constant    36
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      48
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[8]), STR_14(CODE[9]), 
		 -> STR_13(CODE[3]), STR_12(CODE[5]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[5]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[5]), 
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[5]), STR_2(CODE[3]), 
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    3563
                                             24 COMRAM     3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                       _motorStart_0
                       _motorStart_1
                       _motorStart_2
                       _motorStart_3
                        _motorStop_0
                        _motorStop_1
                        _motorStop_2
                        _motorStop_3
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    2393
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_3                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_2                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_3                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_2                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     478
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     488
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_0
   _motorStart_1
   _motorStart_2
   _motorStart_3
   _motorStop_0
   _motorStop_1
   _motorStop_2
   _motorStop_3
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       1       0        0.8%
COMRAM              7F     1B      30       1       37.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      30      34        0.0%
DATA                 0      0      30       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 19 15:41:43 2018

                          _i 001C                           u15 1712                           u16 1714  
                         u25 1752                           u26 1754                  __CFG_CPD$ON 000000  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l121 110A  
                        l122 111E                          l131 1284                          l123 117A  
                        l132 1298                          l141 13CE                          l133 12DE  
                        l302 1542                          l126 11D2                          l311 15A4  
                        l303 1552                          l127 11E6                          l136 1336  
                        l128 122C                          l145 1426                          l137 134A  
                        l154 18AA                          l146 1436                          l138 1390  
                        l315 15E6                          l147 147C                          l316 1634  
                        l317 15EC                          l309 157C                          l724 17D0  
                        l725 17C8                          l734 1866                          l671 1684  
                        l735 185E                          l672 1678                          l728 17F0  
                        l729 17FA                          l738 187E                          l675 16B8  
                        l739 1888                          l676 16C6                 __CFG_CPB$OFF 000000  
                        u500 1688                          u530 17D4                          u630 15D4  
                        u560 186A                          u650 163C                          u807 10FA  
                        u585 178A                          u817 112A                          u770 13D4  
                        u907 1326                          u827 116C                          u917 1382  
                        u837 1194                          u927 13AA                          u847 11C2  
                        u937 146E                          u857 121E                          u947 149E  
                        u867 1246                          u957 14CC                          u877 1274  
                        u967 14FA                          u887 12D0                          u977 1528  
                        u897 12F8                          u987 19E6                          u997 1908  
                        _max 002E                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1640 111E                         l1722 134A  
                       l1740 13BE                         l1718 1336                         l1670 11E6  
                       l1568 15A8                         l1764 1426                         l1748 13D4  
                       l1692 1284                         l1696 1298                         _ADON 007E10  
                       STR_1 1037                         STR_2 1037                         STR_3 104B  
                       STR_4 1037                         STR_5 1037                         STR_6 104B  
                       STR_7 1037                         STR_8 1037                         STR_9 104B  
                       u1007 1924                         u1017 1940                         u1107 16FA  
                       u1027 195C                         u1117 1704                         u1037 1978  
                       u1127 173A                         u1047 1994                         u1137 1744  
                       u1057 19B0                         u1067 19CC                         u1077 180A  
                       _LATA 000F89                         _LATB 000F8A                         u1087 183E  
                       _LATC 000F8B                         _LATD 000F8C                         u1097 19FA  
                       _LATE 000F8D                  main@counter 001B                         _main 1052  
                       _keys 1001                         fsr2h 000FDA                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT 1020             ?_I2C_Master_Init 000E             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001                        STR_10 1037  
                      STR_11 1037                        STR_12 104B                        STR_13 1037  
                      STR_14 103A                        STR_15 1043                        STR_16 1030  
                      STR_17 1025              __end_of___lldiv 16D8              __end_of___lwdiv 1804  
            __end_of___lwmod 1892                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              __end_of_lcdInst 1A02  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_readADC 18CA  
            __end_of_initLCD 1850               __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C  
                      _array 101C                        _state 002A                        _putch 19DA  
             __pbitbssCOMRAM 0180                        tablat 000FF5            _LCDinterruptState 002D  
                      status 000FD8               __CFG_PBADEN$ON 000000              __initialization 18CA  
               __end_of_main 1538                 __end_of_keys 1012               __CFG_OSC$HSPLL 000000  
          __end_of_LCD_RIGHT 1021                       ??_main 0019                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0004  
                     _ADRESH 000FC4                       _ADRESL 000FC3                       ?_putch 0001  
                     _INT1IE 007F83                       _SSPADD 000FC8                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000                    ??___lldiv 0009  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 18EA  
               ?_motorStop_0 0001                 ?_motorStop_1 0001                 ?_motorStop_2 0001  
               ?_motorStop_3 0001                    ??_lcdInst 0003                       _printf 1538  
                  ??_readADC 0003                    ??_initLCD 0004                 __pdataCOMRAM 002E  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                   __accesstop 0080      __end_of__initialization 18F0  
              ___rparam_used 000001               __pcstackCOMRAM 0001                __end_of_array 101F  
              __end_of_putch 19EE           __size_of_lcdNibble 007E                      ??_putch 0003  
                    ?_printf 000D         lcd@LCDinterruptState 002C                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 1756  
                    __Hparam 0000                      __Lparam 0000                      ___lldiv 1656  
                    ___lwdiv 17B2                      ___lwmod 1850                 __psmallconst 1000  
                    __pcinit 18CA                      __ramtop 1000                      _lcdInst 19EE  
                    __ptext0 1052                      __ptext1 1892                      __ptext2 1538  
                    __ptext3 19DA                      __ptext4 1850                      __ptext5 17B2  
                    __ptext6 18FA                      __ptext7 1916                      __ptext8 1932  
                    __ptext9 194E              __size_of_printf 011E                      _readADC 1892  
                    _initLCD 1804         __size_of_motorStop_0 001C         __size_of_motorStop_1 001C  
       __size_of_motorStop_2 001C         __size_of_motorStop_3 001C                      _dpowers 1012  
              ?_motorStart_0 0001                ?_motorStart_1 0001                ?_motorStart_2 0001  
              ?_motorStart_3 0001                    _LCD_RIGHT 1020     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008         end_of_initialization 18F0  
      __end_of_LCD_SIZE_HORZ 1023        __end_of_LCD_SIZE_VERT 1022                __Lmediumconst 0000  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                      printf@c 0018                      printf@f 000D  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
             ??_motorStart_0 0001               ??_motorStart_1 0001               ??_motorStart_2 0001  
             ??_motorStart_3 0001                    _TRISCbits 000F94                    _TRISDbits 000F95  
                  _B_counter 0028                __pidataCOMRAM 1A2E               __end_of_printf 1656  
                  _N_counter 0026          start_initialization 18CA                    _S_counter 0024  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002  
                  _W_counter 0022     I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 0011                _analog_result 001E                  __pbssCOMRAM 001C  
           _I2C_Master_Start 1A26             _I2C_Master_Write 1A14         __end_of_motorStart_0 19DA  
       __end_of_motorStart_1 19BE         __end_of_motorStart_2 19A2         __end_of_motorStart_3 1986  
           ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000                    _lcdNibble 16D8  
                   ?___lldiv 0001                     ?___lwdiv 0001                     ?___lwmod 0008  
                   ?_lcdInst 0001                     ?_readADC 0001                     ?_initLCD 0001  
                __smallconst 1000             ___lwdiv@quotient 0005               __size_of_putch 0014  
                   _LCD_LEFT 101F                     _LATCbits 000F8B                     _LATDbits 000F8C  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001                ??_motorStop_0 0001  
              ??_motorStop_1 0001                ??_motorStop_2 0001                ??_motorStop_3 0001  
                 _ADCON0bits 000FC2                lcdNibble@data 0002                     _B_remain 0020  
                 printf@flag 0014                lcdNibble@temp 0001                   printf@prec 0015  
             _LCD_HORZ_LIMIT 1024                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082             __size_of___lwdiv 0052  
           __size_of___lwmod 0042               readADC@channel 0005             __size_of_lcdInst 0014  
            _I2C_Master_Init 1756             __size_of_readADC 0038             __size_of_initLCD 004C  
            _I2C_Master_Wait 1A02              _I2C_Master_Stop 1A1E       __end_of_LCD_HORZ_LIMIT 1025  
        __end_of_motorStop_0 196A          __end_of_motorStop_1 194E          __end_of_motorStop_2 1932  
        __end_of_motorStop_3 1916              ___lwdiv@divisor 0003              ___lwdiv@counter 0007  
                   __ptext10 196A                     __ptext11 1986                     __ptext20 1A02  
                   __ptext12 19A2                     __ptext21 1756                     __ptext13 19BE  
                   __ptext22 1656                     __ptext14 1804                     __ptext15 19EE  
                   __ptext16 16D8                     __ptext17 1A14                     __ptext18 1A1E  
                   __ptext19 1A26               _LCD_VERT_LIMIT 1023        __size_of_motorStart_0 001C  
      __size_of_motorStart_1 001C        __size_of_motorStart_2 001C        __size_of_motorStart_3 001C  
              __size_of_main 04E6                  ??_lcdNibble 0001                     main@SEND 0180  
                  printf@val 0016  I2C_Master_Write@byteToWrite 0002                    putch@data 0003  
   __end_of_I2C_Master_Start 1A2E     __end_of_I2C_Master_Write 1A1E                   _INTCONbits 000FF2  
               _motorStart_0 19BE                 _motorStart_1 19A2                 _motorStart_2 1986  
               _motorStart_3 196A       __end_of_LCD_VERT_LIMIT 1024                _LCD_SIZE_HORZ 1022  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 1021             ___lldiv@dividend 0001  
                   printf@ap 0012      __end_of_I2C_Master_Init 17B2      __end_of_I2C_Master_Wait 1A14  
    __end_of_I2C_Master_Stop 1A26                  lcdInst@data 0003                  _motorStop_0 194E  
                _motorStop_1 1932                  _motorStop_2 1916                  _motorStop_3 18FA  
           ___lldiv@quotient 0009              ___lwmod@divisor 000A              ___lwmod@counter 000C  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
