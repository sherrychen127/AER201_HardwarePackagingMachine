

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 20:33:46 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  001776                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _max
    71  001776  0004               	dw	4
    72                           
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _keys:
    78                           	opt stack 0
    79  001001  31                 	db	49
    80  001002  32                 	db	50
    81  001003  33                 	db	51
    82  001004  41                 	db	65
    83  001005  34                 	db	52
    84  001006  35                 	db	53
    85  001007  36                 	db	54
    86  001008  42                 	db	66
    87  001009  37                 	db	55
    88  00100A  38                 	db	56
    89  00100B  39                 	db	57
    90  00100C  43                 	db	67
    91  00100D  2A                 	db	42
    92  00100E  30                 	db	48
    93  00100F  23                 	db	35
    94  001010  44                 	db	68
    95  001011  00                 	db	0
    96  001012                     __end_of_keys:
    97                           	opt stack 0
    98  001012                     _dpowers:
    99                           	opt stack 0
   100  001012  0001               	dw	1
   101  001014  000A               	dw	10
   102  001016  0064               	dw	100
   103  001018  03E8               	dw	1000
   104  00101A  2710               	dw	10000
   105  00101C                     __end_of_dpowers:
   106                           	opt stack 0
   107  00101C                     _array:
   108                           	opt stack 0
   109  00101C  31                 	db	49
   110  00101D  30                 	db	48
   111  00101E  00                 	db	0
   112  00101F                     __end_of_array:
   113                           	opt stack 0
   114  00101F                     _LCD_LEFT:
   115                           	opt stack 0
   116  00101F  00                 	db	0
   117  001020                     __end_of_LCD_LEFT:
   118                           	opt stack 0
   119  001020                     _LCD_RIGHT:
   120                           	opt stack 0
   121  001020  01                 	db	1
   122  001021                     __end_of_LCD_RIGHT:
   123                           	opt stack 0
   124  001021                     _LCD_SIZE_VERT:
   125                           	opt stack 0
   126  001021  02                 	db	2
   127  001022                     __end_of_LCD_SIZE_VERT:
   128                           	opt stack 0
   129  001022                     _LCD_SIZE_HORZ:
   130                           	opt stack 0
   131  001022  10                 	db	16
   132  001023                     __end_of_LCD_SIZE_HORZ:
   133                           	opt stack 0
   134  001023                     _LCD_VERT_LIMIT:
   135                           	opt stack 0
   136  001023  02                 	db	2
   137  001024                     __end_of_LCD_VERT_LIMIT:
   138                           	opt stack 0
   139  001024                     _LCD_HORZ_LIMIT:
   140                           	opt stack 0
   141  001024  28                 	db	40
   142  001025                     __end_of_LCD_HORZ_LIMIT:
   143                           	opt stack 0
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON2bits	set	4037
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _TRISCbits	set	3988
   151  0000                     _SSPCON1bits	set	4038
   152  0000                     _INTCONbits	set	4082
   153  0000                     _TRISDbits	set	3989
   154  0000                     _LATDbits	set	3980
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADRESL	set	4035
   157  0000                     _ADCON0bits	set	4034
   158  0000                     _ADCON2bits	set	4032
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON0	set	4034
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _LATE	set	3981
   167  0000                     _LATD	set	3980
   168  0000                     _LATC	set	3979
   169  0000                     _LATB	set	3978
   170  0000                     _LATA	set	3977
   171  0000                     _OSCCON	set	4051
   172  0000                     _ADON	set	32272
   173  001025                     STR_8:
   174  001025  72                 	db	114	;'r'
   175  001026  65                 	db	101	;'e'
   176  001027  6D                 	db	109	;'m'
   177  001028  61                 	db	97	;'a'
   178  001029  69                 	db	105	;'i'
   179  00102A  6E                 	db	110	;'n'
   180  00102B  20                 	db	32
   181  00102C  57                 	db	87	;'W'
   182  00102D  61                 	db	97	;'a'
   183  00102E  73                 	db	115	;'s'
   184  00102F  68                 	db	104	;'h'
   185  001030  65                 	db	101	;'e'
   186  001031  72                 	db	114	;'r'
   187  001032  73                 	db	115	;'s'
   188  001033  3A                 	db	58	;':'
   189  001034  25                 	db	37
   190  001035  64                 	db	100	;'d'
   191  001036  00                 	db	0
   192  001037                     STR_4:
   193  001037  64                 	db	100	;'d'
   194  001038  6F                 	db	111	;'o'
   195  001039  6E                 	db	110	;'n'
   196  00103A  65                 	db	101	;'e'
   197  00103B  00                 	db	0
   198  0000                     
   199                           ; #config settings
   200  00103C  00                 	db	0	; dummy byte at the end
   201  0000                     
   202                           	psect	cinit
   203  0016D0                     __pcinit:
   204                           	opt stack 0
   205  0016D0                     start_initialization:
   206                           	opt stack 0
   207  0016D0                     __initialization:
   208                           	opt stack 0
   209                           
   210                           ; Initialize objects allocated to COMRAM (2 bytes)
   211                           ; load TBLPTR registers with __pidataCOMRAM
   212  0016D0  0E76               	movlw	low __pidataCOMRAM
   213  0016D2  6EF6               	movwf	tblptrl,c
   214  0016D4  0E17               	movlw	high __pidataCOMRAM
   215  0016D6  6EF7               	movwf	tblptrh,c
   216  0016D8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   217  0016DA  6EF8               	movwf	tblptru,c
   218  0016DC  0009               	tblrd		*+	;fetch initializer
   219  0016DE  CFF5 F02A          	movff	tablat,__pdataCOMRAM
   220  0016E2  0009               	tblrd		*+	;fetch initializer
   221  0016E4  CFF5 F02B          	movff	tablat,__pdataCOMRAM+1
   222                           
   223                           ; Clear objects allocated to COMRAM (15 bytes)
   224  0016E8  EE00  F01B         	lfsr	0,__pbssCOMRAM
   225  0016EC  0E0F               	movlw	15
   226  0016EE                     clear_0:
   227  0016EE  6AEE               	clrf	postinc0,c
   228  0016F0  06E8               	decf	wreg,f,c
   229  0016F2  E1FD               	bnz	clear_0
   230  0016F4                     end_of_initialization:
   231                           	opt stack 0
   232  0016F4                     __end_of__initialization:
   233                           	opt stack 0
   234  0016F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   235  0016F6  6EF8               	movwf	tblptru,c
   236  0016F8  0100               	movlb	0
   237  0016FA  EF1F  F008         	goto	_main	;jump to C main() function
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           tblptrl	equ	0xFF6
   241                           tablat	equ	0xFF5
   242                           postinc0	equ	0xFEE
   243                           wreg	equ	0xFE8
   244                           
   245                           	psect	bssCOMRAM
   246  00001B                     __pbssCOMRAM:
   247                           	opt stack 0
   248  00001B                     _i:
   249                           	opt stack 0
   250  00001B                     	ds	2
   251  00001D                     _analog_result:
   252                           	opt stack 0
   253  00001D                     	ds	2
   254  00001F                     _W_spacingTime:
   255                           	opt stack 0
   256  00001F                     	ds	2
   257  000021                     _W_remain:
   258                           	opt stack 0
   259  000021                     	ds	2
   260  000023                     _W_counter:
   261                           	opt stack 0
   262  000023                     	ds	2
   263  000025                     _state:
   264                           	opt stack 0
   265  000025                     	ds	2
   266  000027                     lcd@LCDinterruptState:
   267                           	opt stack 0
   268  000027                     	ds	1
   269  000028                     _I2Cdata:
   270                           	opt stack 0
   271  000028                     	ds	1
   272  000029                     	ds	1
   273                           tblptru	equ	0xFF8
   274                           tblptrh	equ	0xFF7
   275                           tblptrl	equ	0xFF6
   276                           tablat	equ	0xFF5
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           
   280                           	psect	dataCOMRAM
   281  00002A                     __pdataCOMRAM:
   282                           	opt stack 0
   283  00002A                     _max:
   284                           	opt stack 0
   285  00002A                     	ds	2
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	cstackCOMRAM
   294  000001                     __pcstackCOMRAM:
   295                           	opt stack 0
   296  000001                     ??_I2C_Master_Wait:
   297  000001                     ?___lwdiv:
   298                           	opt stack 0
   299  000001                     ?___lldiv:
   300                           	opt stack 0
   301  000001                     lcdNibble@temp:
   302                           	opt stack 0
   303  000001                     ___lwdiv@dividend:
   304                           	opt stack 0
   305  000001                     ___lldiv@dividend:
   306                           	opt stack 0
   307                           
   308                           ; 4 bytes @ 0x0
   309  000001                     	ds	1
   310  000002                     lcdNibble@data:
   311                           	opt stack 0
   312  000002                     I2C_Master_Read@ackBit:
   313                           	opt stack 0
   314  000002                     I2C_Master_Write@byteToWrite:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x1
   318  000002                     	ds	1
   319  000003                     lcdInst@data:
   320                           	opt stack 0
   321  000003                     putch@data:
   322                           	opt stack 0
   323  000003                     I2C_Master_Read@receivedByte:
   324                           	opt stack 0
   325  000003                     ___lwdiv@divisor:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329  000003                     	ds	1
   330  000004                     ??_initLCD:
   331  000004                     
   332                           ; 1 bytes @ 0x3
   333  000004                     	ds	1
   334  000005                     ___lwdiv@quotient:
   335                           	opt stack 0
   336  000005                     ___lldiv@divisor:
   337                           	opt stack 0
   338                           
   339                           ; 4 bytes @ 0x4
   340  000005                     	ds	2
   341  000007                     ___lwdiv@counter:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x6
   345  000007                     	ds	1
   346  000008                     ?___lwmod:
   347                           	opt stack 0
   348  000008                     ___lwmod@dividend:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x7
   352  000008                     	ds	1
   353  000009                     ___lldiv@quotient:
   354                           	opt stack 0
   355                           
   356                           ; 4 bytes @ 0x8
   357  000009                     	ds	1
   358  00000A                     ___lwmod@divisor:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x9
   362  00000A                     	ds	2
   363  00000C                     ___lwmod@counter:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0xB
   367  00000C                     	ds	1
   368  00000D                     ?_printf:
   369                           	opt stack 0
   370  00000D                     ___lldiv@counter:
   371                           	opt stack 0
   372  00000D                     printf@f:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xC
   376  00000D                     	ds	1
   377  00000E                     I2C_Master_Init@clockFreq:
   378                           	opt stack 0
   379                           
   380                           ; 4 bytes @ 0xD
   381  00000E                     	ds	3
   382  000011                     ??_printf:
   383                           
   384                           ; 1 bytes @ 0x10
   385  000011                     	ds	1
   386  000012                     ??_I2C_Master_Init:
   387  000012                     printf@ap:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x11
   391  000012                     	ds	2
   392  000014                     printf@flag:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x13
   396  000014                     	ds	1
   397  000015                     printf@prec:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x14
   401  000015                     	ds	1
   402  000016                     printf@val:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x15
   406  000016                     	ds	2
   407  000018                     printf@c:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x17
   411  000018                     	ds	1
   412  000019                     ??_main:
   413                           
   414                           ; 1 bytes @ 0x18
   415  000019                     	ds	2
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           
   423 ;;
   424 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   425 ;;
   426 ;; *************** function _main *****************
   427 ;; Defined at:
   428 ;;		line 67 in file "main.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;		None
   431 ;; Auto vars:     Size  Location     Type
   432 ;;		None
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;Total ram usage:        2 bytes
   447 ;; Hardware stack levels required when called:    3
   448 ;; This function calls:
   449 ;;		_I2C_Master_Init
   450 ;;		_I2C_Master_Read
   451 ;;		_I2C_Master_Start
   452 ;;		_I2C_Master_Stop
   453 ;;		_I2C_Master_Write
   454 ;;		_initLCD
   455 ;;		_lcdInst
   456 ;;		_motorStart_3
   457 ;;		_motorStop_3
   458 ;;		_printf
   459 ;; This function is called by:
   460 ;;		Startup code after reset
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464                           	psect	text0
   465  00103E                     __ptext0:
   466                           	opt stack 0
   467  00103E                     _main:
   468                           	opt stack 28
   469                           
   470                           ;main.c: 70: OSCCON = 0xF2;
   471                           
   472                           ;incstack = 0
   473  00103E  0EF2               	movlw	242
   474  001040  6ED3               	movwf	4051,c	;volatile
   475                           
   476                           ;main.c: 75: LATA = 0x00;
   477  001042  0E00               	movlw	0
   478  001044  6E89               	movwf	3977,c	;volatile
   479                           
   480                           ;main.c: 76: LATB = 0x00;
   481  001046  0E00               	movlw	0
   482  001048  6E8A               	movwf	3978,c	;volatile
   483                           
   484                           ;main.c: 77: LATC = 0x00;
   485  00104A  0E00               	movlw	0
   486  00104C  6E8B               	movwf	3979,c	;volatile
   487                           
   488                           ;main.c: 78: LATD = 0x00;
   489  00104E  0E00               	movlw	0
   490  001050  6E8C               	movwf	3980,c	;volatile
   491                           
   492                           ;main.c: 79: LATE = 0x00;
   493  001052  0E00               	movlw	0
   494  001054  6E8D               	movwf	3981,c	;volatile
   495                           
   496                           ;main.c: 83: TRISA = 0xFF;
   497  001056  6892               	setf	3986,c	;volatile
   498                           
   499                           ;main.c: 84: TRISB = 0xFF;
   500  001058  6893               	setf	3987,c	;volatile
   501                           
   502                           ;main.c: 85: TRISC = 0x00;
   503  00105A  0E00               	movlw	0
   504  00105C  6E94               	movwf	3988,c	;volatile
   505                           
   506                           ;main.c: 89: TRISD = 0x00;
   507  00105E  0E00               	movlw	0
   508  001060  6E95               	movwf	3989,c	;volatile
   509                           
   510                           ;main.c: 90: TRISE = 0x00;
   511  001062  0E00               	movlw	0
   512  001064  6E96               	movwf	3990,c	;volatile
   513                           
   514                           ;main.c: 93: ADCON0 = 0x00;
   515  001066  0E00               	movlw	0
   516  001068  6EC2               	movwf	4034,c	;volatile
   517                           
   518                           ;main.c: 94: ADCON1 = 0x0B;
   519  00106A  0E0B               	movlw	11
   520  00106C  6EC1               	movwf	4033,c	;volatile
   521                           
   522                           ;main.c: 95: ADCON2bits.ADFM = 1;
   523  00106E  8EC0               	bsf	4032,7,c	;volatile
   524                           
   525                           ;main.c: 99: initLCD();
   526  001070  ECD7  F00A         	call	_initLCD	;wreg free
   527                           
   528                           ;main.c: 103: I2C_Master_Init(100000);
   529  001074  0EA0               	movlw	160
   530  001076  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   531  001078  0E86               	movlw	134
   532  00107A  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   533  00107C  0E01               	movlw	1
   534  00107E  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   535  001080  0E00               	movlw	0
   536  001082  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   537  001084  EC80  F00A         	call	_I2C_Master_Init	;wreg free
   538                           
   539                           ;main.c: 104: I2C_Master_Start();
   540  001088  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
   541                           
   542                           ;main.c: 107: I2C_Master_Write(0b00010000);
   543  00108C  0E00               	movlw	0
   544  00108E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   545  001090  0E10               	movlw	16
   546  001092  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   547  001094  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
   548                           
   549                           ;main.c: 108: I2C_Master_Stop();
   550  001098  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
   551                           
   552                           ;main.c: 110: I2C_Master_Start();
   553  00109C  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
   554                           
   555                           ;main.c: 111: I2C_Master_Write(0b00010000);
   556  0010A0  0E00               	movlw	0
   557  0010A2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   558  0010A4  0E10               	movlw	16
   559  0010A6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   560  0010A8  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
   561                           
   562                           ;main.c: 112: I2C_Master_Write('1');
   563  0010AC  0E00               	movlw	0
   564  0010AE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   565  0010B0  0E31               	movlw	49
   566  0010B2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   567  0010B4  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
   568                           
   569                           ;main.c: 113: I2C_Master_Stop();
   570  0010B8  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
   571                           
   572                           ;main.c: 123: initLCD();
   573  0010BC  ECD7  F00A         	call	_initLCD	;wreg free
   574                           
   575                           ;main.c: 124: printf("%d",W_counter);
   576  0010C0  0E34               	movlw	low (STR_8+15)
   577  0010C2  6E0D               	movwf	printf@f,c
   578  0010C4  0E10               	movlw	high (STR_8+15)
   579  0010C6  6E0E               	movwf	printf@f+1,c
   580  0010C8  C023  F00F         	movff	_W_counter,?_printf+2
   581  0010CC  C024  F010         	movff	_W_counter+1,?_printf+3
   582  0010D0  EC71  F009         	call	_printf	;wreg free
   583                           
   584                           ;main.c: 125: _delay((unsigned long)((100)*(40000000/4000.0)));
   585  0010D4  0E06               	movlw	6
   586  0010D6  6E1A               	movwf	(??_main+1)& (0+255),c
   587  0010D8  0E13               	movlw	19
   588  0010DA  6E19               	movwf	??_main& (0+255),c
   589  0010DC  0EAE               	movlw	174
   590  0010DE                     u637:
   591  0010DE  2EE8               	decfsz	wreg,f,c
   592  0010E0  D7FE               	bra	u637
   593  0010E2  2E19               	decfsz	??_main& (0+255),f,c
   594  0010E4  D7FC               	bra	u637
   595  0010E6  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   596  0010E8  D7FA               	bra	u637
   597                           
   598                           ;main.c: 126: motorStart_3();
   599  0010EA  EC22  F00B         	call	_motorStart_3	;wreg free
   600  0010EE                     
   601                           ;main.c: 136: if (W_counter >= max){
   602  0010EE  502A               	movf	_max,w,c
   603  0010F0  5C23               	subwf	_W_counter,w,c
   604  0010F2  5024               	movf	_W_counter+1,w,c
   605  0010F4  0A80               	xorlw	128
   606  0010F6  6E19               	movwf	??_main& (0+255),c
   607  0010F8  502B               	movf	_max+1,w,c
   608  0010FA  0A80               	xorlw	128
   609  0010FC  5819               	subwfb	??_main& (0+255),w,c
   610  0010FE  A0D8               	btfss	status,0,c
   611  001100  D006               	goto	l102
   612                           
   613                           ;main.c: 137: W_counter = 0;
   614  001102  0E00               	movlw	0
   615  001104  6E24               	movwf	_W_counter+1,c
   616  001106  0E00               	movlw	0
   617  001108  6E23               	movwf	_W_counter,c
   618                           
   619                           ;main.c: 138: motorStop_3();
   620  00110A  ECFD  F00A         	call	_motorStop_3	;wreg free
   621  00110E                     l102:
   622                           
   623                           ;main.c: 140: }
   624                           ;main.c: 142: I2C_Master_Start();
   625  00110E  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
   626                           
   627                           ;main.c: 143: I2C_Master_Write(0b00010001);
   628  001112  0E00               	movlw	0
   629  001114  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   630  001116  0E11               	movlw	17
   631  001118  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   632  00111A  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
   633                           
   634                           ;main.c: 144: I2Cdata = I2C_Master_Read(1);
   635  00111E  0E01               	movlw	1
   636  001120  EC7F  F00B         	call	_I2C_Master_Read
   637  001124  6E28               	movwf	_I2Cdata,c
   638                           
   639                           ;main.c: 145: I2C_Master_Stop();
   640  001126  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
   641                           
   642                           ;main.c: 146: initLCD();
   643  00112A  ECD7  F00A         	call	_initLCD	;wreg free
   644                           
   645                           ;main.c: 147: if (I2Cdata == 'a'){
   646  00112E  0E61               	movlw	97
   647  001130  1828               	xorwf	_I2Cdata,w,c
   648  001132  A4D8               	btfss	status,2,c
   649  001134  D01A               	goto	l103
   650                           
   651                           ;main.c: 148: W_counter ++;
   652  001136  4A23               	infsnz	_W_counter,f,c
   653  001138  2A24               	incf	_W_counter+1,f,c
   654                           
   655                           ;main.c: 149: I2Cdata = 'b';
   656  00113A  0E62               	movlw	98
   657  00113C  6E28               	movwf	_I2Cdata,c
   658                           
   659                           ;main.c: 150: printf("%d",W_counter);
   660  00113E  0E34               	movlw	low (STR_8+15)
   661  001140  6E0D               	movwf	printf@f,c
   662  001142  0E10               	movlw	high (STR_8+15)
   663  001144  6E0E               	movwf	printf@f+1,c
   664  001146  C023  F00F         	movff	_W_counter,?_printf+2
   665  00114A  C024  F010         	movff	_W_counter+1,?_printf+3
   666  00114E  EC71  F009         	call	_printf	;wreg free
   667                           
   668                           ;main.c: 151: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   669  001152  0E80               	movlw	128
   670  001154  EC9B  F00B         	call	_lcdInst
   671  001158  0E41               	movlw	65
   672  00115A  6E19               	movwf	??_main& (0+255),c
   673  00115C  0EEE               	movlw	238
   674  00115E                     u647:
   675  00115E  2EE8               	decfsz	wreg,f,c
   676  001160  D7FE               	bra	u647
   677  001162  2E19               	decfsz	??_main& (0+255),f,c
   678  001164  D7FC               	bra	u647
   679  001166  D000               	nop2	
   680                           
   681                           ;main.c: 153: }
   682  001168  D7C2               	goto	l101
   683  00116A                     l103:
   684                           
   685                           ;main.c: 154: else{
   686                           ;main.c: 155: printf("%d",W_counter);
   687  00116A  0E34               	movlw	low (STR_8+15)
   688  00116C  6E0D               	movwf	printf@f,c
   689  00116E  0E10               	movlw	high (STR_8+15)
   690  001170  6E0E               	movwf	printf@f+1,c
   691  001172  C023  F00F         	movff	_W_counter,?_printf+2
   692  001176  C024  F010         	movff	_W_counter+1,?_printf+3
   693  00117A  EC71  F009         	call	_printf	;wreg free
   694  00117E  D7B7               	goto	l101
   695                           
   696                           ;main.c: 166: _delay((unsigned long)((800)*(40000000/4000.0)));
   697                           
   698                           ;main.c: 165: printf("done");
   699                           
   700                           ;main.c: 156: }
   701                           ;main.c: 161: }
   702                           ;main.c: 164: initLCD();
   703  001180  0E29               	movlw	41
   704  001182  6E1A               	movwf	(??_main+1)& (0+255),c
   705  001184  0E96               	movlw	150
   706  001186  6E19               	movwf	??_main& (0+255),c
   707  001188  0E7F               	movlw	127
   708  00118A                     u657:
   709  00118A  2EE8               	decfsz	wreg,f,c
   710  00118C  D7FE               	bra	u657
   711  00118E  2E19               	decfsz	??_main& (0+255),f,c
   712  001190  D7FC               	bra	u657
   713  001192  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   714  001194  D7FA               	bra	u657
   715  001196  F000               	nop	
   716                           
   717                           ;main.c: 171: I2C_Master_Init(100000);
   718  001198  0EA0               	movlw	160
   719  00119A  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   720  00119C  0E86               	movlw	134
   721  00119E  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   722  0011A0  0E01               	movlw	1
   723  0011A2  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   724  0011A4  0E00               	movlw	0
   725  0011A6  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   726  0011A8  EC80  F00A         	call	_I2C_Master_Init	;wreg free
   727                           
   728                           ;main.c: 172: I2C_Master_Start();
   729  0011AC  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
   730                           
   731                           ;main.c: 173: I2C_Master_Write(0b00010000);
   732  0011B0  0E00               	movlw	0
   733  0011B2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   734  0011B4  0E10               	movlw	16
   735  0011B6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   736  0011B8  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
   737                           
   738                           ;main.c: 174: I2C_Master_Stop();
   739  0011BC  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
   740                           
   741                           ;main.c: 178: I2C_Master_Start();
   742  0011C0  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
   743                           
   744                           ;main.c: 179: I2C_Master_Write(0b00010000);
   745  0011C4  0E00               	movlw	0
   746  0011C6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   747  0011C8  0E10               	movlw	16
   748  0011CA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   749  0011CC  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
   750                           
   751                           ;main.c: 180: I2C_Master_Write('2');
   752  0011D0  0E00               	movlw	0
   753  0011D2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   754  0011D4  0E32               	movlw	50
   755  0011D6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   756  0011D8  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
   757                           
   758                           ;main.c: 181: I2C_Master_Stop();
   759  0011DC  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
   760                           
   761                           ;main.c: 184: initLCD();
   762  0011E0  ECD7  F00A         	call	_initLCD	;wreg free
   763                           
   764                           ;main.c: 185: motorStart_3();
   765  0011E4  EC22  F00B         	call	_motorStart_3	;wreg free
   766                           
   767                           ;main.c: 187: W_spacingTime = 0;
   768  0011E8  0E00               	movlw	0
   769  0011EA  6E20               	movwf	_W_spacingTime+1,c
   770  0011EC  0E00               	movlw	0
   771  0011EE  6E1F               	movwf	_W_spacingTime,c
   772                           
   773                           ;main.c: 188: initLCD();
   774  0011F0  ECD7  F00A         	call	_initLCD	;wreg free
   775                           
   776                           ;main.c: 189: printf("%d", W_remain);
   777  0011F4  0E34               	movlw	low (STR_8+15)
   778  0011F6  6E0D               	movwf	printf@f,c
   779  0011F8  0E10               	movlw	high (STR_8+15)
   780  0011FA  6E0E               	movwf	printf@f+1,c
   781  0011FC  C021  F00F         	movff	_W_remain,?_printf+2
   782  001200  C022  F010         	movff	_W_remain+1,?_printf+3
   783  001204  EC71  F009         	call	_printf	;wreg free
   784  001208                     
   785                           ;main.c: 192: if (W_spacingTime >= 30000){
   786  001208  BE20               	btfsc	_W_spacingTime+1,7,c
   787  00120A  D009               	goto	l108
   788  00120C  0E30               	movlw	48
   789  00120E  5C1F               	subwf	_W_spacingTime,w,c
   790  001210  0E75               	movlw	117
   791  001212  5820               	subwfb	_W_spacingTime+1,w,c
   792  001214  A0D8               	btfss	status,0,c
   793  001216  D003               	goto	l108
   794                           
   795                           ;main.c: 193: motorStop_3();
   796  001218  ECFD  F00A         	call	_motorStop_3	;wreg free
   797                           
   798                           ;main.c: 194: break;
   799  00121C  D04A               	goto	l109
   800  00121E                     l108:
   801                           
   802                           ;main.c: 195: }
   803                           ;main.c: 197: I2C_Master_Start();
   804  00121E  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
   805                           
   806                           ;main.c: 198: I2C_Master_Write(0b00010001);
   807  001222  0E00               	movlw	0
   808  001224  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   809  001226  0E11               	movlw	17
   810  001228  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   811  00122A  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
   812                           
   813                           ;main.c: 199: I2Cdata = I2C_Master_Read(1);
   814  00122E  0E01               	movlw	1
   815  001230  EC7F  F00B         	call	_I2C_Master_Read
   816  001234  6E28               	movwf	_I2Cdata,c
   817                           
   818                           ;main.c: 200: I2C_Master_Stop();
   819  001236  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
   820                           
   821                           ;main.c: 201: initLCD();
   822  00123A  ECD7  F00A         	call	_initLCD	;wreg free
   823                           
   824                           ;main.c: 202: if (I2Cdata == 'a'){
   825  00123E  0E61               	movlw	97
   826  001240  1828               	xorwf	_I2Cdata,w,c
   827  001242  A4D8               	btfss	status,2,c
   828  001244  D004               	goto	l110
   829                           
   830                           ;main.c: 203: W_remain ++;
   831  001246  4A21               	infsnz	_W_remain,f,c
   832  001248  2A22               	incf	_W_remain+1,f,c
   833                           
   834                           ;main.c: 204: I2Cdata = 'b';
   835  00124A  0E62               	movlw	98
   836  00124C  6E28               	movwf	_I2Cdata,c
   837  00124E                     l110:
   838                           
   839                           ;main.c: 210: }
   840                           ;main.c: 211: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   841                           
   842                           ;main.c: 208: else{
   843  00124E  0E80               	movlw	128
   844  001250  EC9B  F00B         	call	_lcdInst
   845  001254  0E41               	movlw	65
   846  001256  6E19               	movwf	??_main& (0+255),c
   847  001258  0EEE               	movlw	238
   848  00125A                     u667:
   849  00125A  2EE8               	decfsz	wreg,f,c
   850  00125C  D7FE               	bra	u667
   851  00125E  2E19               	decfsz	??_main& (0+255),f,c
   852  001260  D7FC               	bra	u667
   853  001262  D000               	nop2	
   854                           
   855                           ;main.c: 212: printf("%d",W_remain);
   856  001264  0E34               	movlw	low (STR_8+15)
   857  001266  6E0D               	movwf	printf@f,c
   858  001268  0E10               	movlw	high (STR_8+15)
   859  00126A  6E0E               	movwf	printf@f+1,c
   860  00126C  C021  F00F         	movff	_W_remain,?_printf+2
   861  001270  C022  F010         	movff	_W_remain+1,?_printf+3
   862  001274  EC71  F009         	call	_printf	;wreg free
   863                           
   864                           ;main.c: 216: lcdInst(0xC0);;
   865  001278  0EC0               	movlw	192
   866  00127A  EC9B  F00B         	call	_lcdInst
   867                           
   868                           ;main.c: 217: printf("%d",W_spacingTime);
   869  00127E  0E34               	movlw	low (STR_8+15)
   870  001280  6E0D               	movwf	printf@f,c
   871  001282  0E10               	movlw	high (STR_8+15)
   872  001284  6E0E               	movwf	printf@f+1,c
   873  001286  C01F  F00F         	movff	_W_spacingTime,?_printf+2
   874  00128A  C020  F010         	movff	_W_spacingTime+1,?_printf+3
   875  00128E  EC71  F009         	call	_printf	;wreg free
   876                           
   877                           ;main.c: 219: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   878  001292  0E80               	movlw	128
   879  001294  EC9B  F00B         	call	_lcdInst
   880  001298  0E41               	movlw	65
   881  00129A  6E19               	movwf	??_main& (0+255),c
   882  00129C  0EEE               	movlw	238
   883  00129E                     u677:
   884  00129E  2EE8               	decfsz	wreg,f,c
   885  0012A0  D7FE               	bra	u677
   886  0012A2  2E19               	decfsz	??_main& (0+255),f,c
   887  0012A4  D7FC               	bra	u677
   888  0012A6  D000               	nop2	
   889                           
   890                           ;main.c: 221: W_spacingTime +=200;
   891  0012A8  0EC8               	movlw	200
   892  0012AA  261F               	addwf	_W_spacingTime,f,c
   893  0012AC  0E00               	movlw	0
   894  0012AE  2220               	addwfc	_W_spacingTime+1,f,c
   895  0012B0  D7AB               	goto	l107
   896  0012B2                     l109:
   897                           
   898                           ;main.c: 229: initLCD();
   899                           
   900                           ;main.c: 224: }
   901                           ;main.c: 228: while(1){
   902  0012B2  ECD7  F00A         	call	_initLCD	;wreg free
   903                           
   904                           ;main.c: 230: printf("remain Washers:%d",W_remain);
   905  0012B6  0E25               	movlw	low STR_8
   906  0012B8  6E0D               	movwf	printf@f,c
   907  0012BA  0E10               	movlw	high STR_8
   908  0012BC  6E0E               	movwf	printf@f+1,c
   909  0012BE  C021  F00F         	movff	_W_remain,?_printf+2
   910  0012C2  C022  F010         	movff	_W_remain+1,?_printf+3
   911  0012C6  EC71  F009         	call	_printf	;wreg free
   912                           
   913                           ;main.c: 231: _delay((unsigned long)((1000)*(40000000/4000.0)));
   914  0012CA  0E33               	movlw	51
   915  0012CC  6E1A               	movwf	(??_main+1)& (0+255),c
   916  0012CE  0EBB               	movlw	187
   917  0012D0  6E19               	movwf	??_main& (0+255),c
   918  0012D2  0EE0               	movlw	224
   919  0012D4                     u687:
   920  0012D4  2EE8               	decfsz	wreg,f,c
   921  0012D6  D7FE               	bra	u687
   922  0012D8  2E19               	decfsz	??_main& (0+255),f,c
   923  0012DA  D7FC               	bra	u687
   924  0012DC  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   925  0012DE  D7FA               	bra	u687
   926  0012E0  D7E8               	goto	l109
   927  0012E2                     __end_of_main:
   928                           	opt stack 0
   929                           tblptru	equ	0xFF8
   930                           tblptrh	equ	0xFF7
   931                           tblptrl	equ	0xFF6
   932                           tablat	equ	0xFF5
   933                           postinc0	equ	0xFEE
   934                           wreg	equ	0xFE8
   935                           status	equ	0xFD8
   936                           
   937 ;; *************** function _printf *****************
   938 ;; Defined at:
   939 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  f               2   12[COMRAM] PTR const unsigned char 
   942 ;;		 -> STR_8(18), STR_7(3), STR_6(3), STR_5(3), 
   943 ;;		 -> STR_4(5), STR_3(3), STR_2(3), STR_1(3), 
   944 ;; Auto vars:     Size  Location     Type
   945 ;;  tmpval          4    0        struct .
   946 ;;  cp              3    0        PTR const unsigned char 
   947 ;;  val             2   21[COMRAM] unsigned int 
   948 ;;  ap              2   17[COMRAM] PTR void [1]
   949 ;;		 -> ?_printf(2), 
   950 ;;  len             2    0        unsigned int 
   951 ;;  c               1   23[COMRAM] char 
   952 ;;  prec            1   20[COMRAM] char 
   953 ;;  flag            1   19[COMRAM] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  2   12[COMRAM] int 
   956 ;; Registers used:
   957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;Total ram usage:       12 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    2
   970 ;; This function calls:
   971 ;;		___lwdiv
   972 ;;		___lwmod
   973 ;;		_putch
   974 ;; This function is called by:
   975 ;;		_main
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           	psect	text1
   980  0012E2                     __ptext1:
   981                           	opt stack 0
   982  0012E2                     _printf:
   983                           	opt stack 28
   984                           
   985                           ;doprnt.c: 466: va_list ap;
   986                           ;doprnt.c: 499: signed char c;
   987                           ;doprnt.c: 506: signed char prec;
   988                           ;doprnt.c: 508: unsigned char flag;
   989                           ;doprnt.c: 523: union {
   990                           ;doprnt.c: 524: unsigned long vd;
   991                           ;doprnt.c: 525: double integ;
   992                           ;doprnt.c: 526: } tmpval;
   993                           ;doprnt.c: 528: unsigned int val;
   994                           ;doprnt.c: 529: unsigned len;
   995                           ;doprnt.c: 530: const char * cp;
   996                           ;doprnt.c: 533: *ap = __va_start();
   997                           
   998                           ;incstack = 0
   999  0012E2  0E0F               	movlw	low (?_printf+2)
  1000  0012E4  6E12               	movwf	printf@ap,c
  1001  0012E6  0E00               	movlw	high (?_printf+2)
  1002  0012E8  6E13               	movwf	printf@ap+1,c
  1003                           
  1004                           ;doprnt.c: 536: while(c = *f++) {
  1005  0012EA  D07D               	goto	u570
  1006  0012EC                     
  1007                           ;doprnt.c: 538: if(c != '%')
  1008  0012EC  0E25               	movlw	37
  1009  0012EE  1818               	xorwf	printf@c,w,c
  1010  0012F0  B4D8               	btfsc	status,2,c
  1011  0012F2  D004               	goto	l269
  1012                           
  1013                           ;doprnt.c: 540: {
  1014                           ;doprnt.c: 541: (putch(c) );
  1015  0012F4  5018               	movf	printf@c,w,c
  1016  0012F6  EC91  F00B         	call	_putch
  1017                           
  1018                           ;doprnt.c: 542: continue;
  1019  0012FA  D075               	goto	u570
  1020  0012FC                     l269:
  1021                           
  1022                           ;doprnt.c: 543: }
  1023                           ;doprnt.c: 548: flag = 0;
  1024  0012FC  0E00               	movlw	0
  1025  0012FE  6E14               	movwf	printf@flag,c
  1026                           
  1027                           ;doprnt.c: 822: }
  1028                           
  1029                           ;doprnt.c: 813: continue;
  1030                           
  1031                           ;doprnt.c: 802: default:
  1032                           
  1033                           ;doprnt.c: 698: case 'i':
  1034                           ;doprnt.c: 699: break;
  1035                           
  1036                           ;doprnt.c: 697: case 'd':
  1037                           
  1038                           ;doprnt.c: 638: goto alldone;
  1039                           
  1040                           ;doprnt.c: 637: case 0:
  1041                           
  1042                           ;doprnt.c: 635: switch(c = *f++) {
  1043  001300  C00D  FFF6         	movff	printf@f,tblptrl
  1044  001304  C00E  FFF7         	movff	printf@f+1,tblptrh
  1045  001308  4A0D               	infsnz	printf@f,f,c
  1046  00130A  2A0E               	incf	printf@f+1,f,c
  1047  00130C                     	if	0	;tblptru may be non-zero
  1048  00130C                     	endif
  1049  00130C                     	if	0	;tblptru may be non-zero
  1050  00130C                     	endif
  1051  00130C  0008               	tblrd		*
  1052  00130E  CFF5 F018          	movff	tablat,printf@c
  1053  001312  5018               	movf	printf@c,w,c
  1054                           
  1055                           ; Switch size 1, requested type "space"
  1056                           ; Number of cases is 3, Range of values is 0 to 105
  1057                           ; switch strategies available:
  1058                           ; Name         Instructions Cycles
  1059                           ; simple_byte           10     6 (average)
  1060                           ;	Chosen strategy is simple_byte
  1061  001314  0A00               	xorlw	0	; case 0
  1062  001316  B4D8               	btfsc	status,2,c
  1063  001318  0012               	return	
  1064  00131A  0A64               	xorlw	100	; case 100
  1065  00131C  B4D8               	btfsc	status,2,c
  1066  00131E  D003               	goto	l275
  1067  001320  0A0D               	xorlw	13	; case 105
  1068  001322  A4D8               	btfss	status,2,c
  1069  001324  D060               	goto	u570
  1070  001326                     l275:
  1071                           
  1072                           ;doprnt.c: 1253: {
  1073                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1074  001326  C012  FFD9         	movff	printf@ap,fsr2l
  1075  00132A  C013  FFDA         	movff	printf@ap+1,fsr2h
  1076  00132E  CFDE F016          	movff	postinc2,printf@val
  1077  001332  CFDD F017          	movff	postdec2,printf@val+1
  1078  001336  0E02               	movlw	2
  1079  001338  2612               	addwf	printf@ap,f,c
  1080  00133A  0E00               	movlw	0
  1081  00133C  2213               	addwfc	printf@ap+1,f,c
  1082                           
  1083                           ;doprnt.c: 1261: if((int)val < 0) {
  1084  00133E  AE17               	btfss	printf@val+1,7,c
  1085  001340  D006               	goto	l277
  1086                           
  1087                           ;doprnt.c: 1262: flag |= 0x03;
  1088  001342  0E03               	movlw	3
  1089  001344  1214               	iorwf	printf@flag,f,c
  1090                           
  1091                           ;doprnt.c: 1263: val = -val;
  1092  001346  6C16               	negf	printf@val,c
  1093  001348  1E17               	comf	printf@val+1,f,c
  1094  00134A  B0D8               	btfsc	status,0,c
  1095  00134C  2A17               	incf	printf@val+1,f,c
  1096  00134E                     l277:
  1097                           
  1098                           ;doprnt.c: 1264: }
  1099                           ;doprnt.c: 1266: }
  1100                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1101  00134E  0E01               	movlw	1
  1102  001350  6E18               	movwf	printf@c,c
  1103  001352                     l1456:
  1104  001352  0E05               	movlw	5
  1105  001354  1818               	xorwf	printf@c,w,c
  1106  001356  B4D8               	btfsc	status,2,c
  1107  001358  D012               	goto	u550
  1108                           
  1109                           ;doprnt.c: 1306: if(val < dpowers[c])
  1110  00135A  5018               	movf	printf@c,w,c
  1111  00135C  0D02               	mullw	2
  1112  00135E  0E12               	movlw	low _dpowers
  1113  001360  24F3               	addwf	prodl,w,c
  1114  001362  6EF6               	movwf	tblptrl,c
  1115  001364  0E10               	movlw	high _dpowers
  1116  001366  20F4               	addwfc	prodh,w,c
  1117  001368  6EF7               	movwf	tblptrh,c
  1118  00136A                     	if	0	;There are less than 3 active tblptr bytes
  1119  00136A                     	endif
  1120  00136A  0009               	tblrd		*+
  1121  00136C  50F5               	movf	tablat,w,c
  1122  00136E  5C16               	subwf	printf@val,w,c
  1123  001370  0009               	tblrd		*+
  1124  001372  50F5               	movf	tablat,w,c
  1125  001374  5817               	subwfb	printf@val+1,w,c
  1126  001376  A0D8               	btfss	status,0,c
  1127  001378  D002               	goto	u550
  1128                           
  1129                           ;doprnt.c: 1307: break;
  1130  00137A  2A18               	incf	printf@c,f,c
  1131  00137C  D7EA               	goto	l1456
  1132  00137E                     u550:
  1133                           
  1134                           ;doprnt.c: 1422: {
  1135                           ;doprnt.c: 1438: if(flag & 0x03)
  1136  00137E  C014  F011         	movff	printf@flag,??_printf
  1137  001382  0E03               	movlw	3
  1138  001384  1611               	andwf	??_printf,f,c
  1139  001386  B4D8               	btfsc	status,2,c
  1140  001388  D003               	goto	l281
  1141                           
  1142                           ;doprnt.c: 1439: (putch('-') );
  1143  00138A  0E2D               	movlw	45
  1144  00138C  EC91  F00B         	call	_putch
  1145  001390                     l281:
  1146                           
  1147                           ;doprnt.c: 1469: }
  1148                           ;doprnt.c: 1472: prec = c;
  1149  001390  C018  F015         	movff	printf@c,printf@prec
  1150                           
  1151                           ;doprnt.c: 1474: while(prec--) {
  1152  001394  D024               	goto	l282
  1153  001396                     
  1154                           ;doprnt.c: 1478: {
  1155                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1156  001396  5015               	movf	printf@prec,w,c
  1157  001398  0D02               	mullw	2
  1158  00139A  0E12               	movlw	low _dpowers
  1159  00139C  24F3               	addwf	prodl,w,c
  1160  00139E  6EF6               	movwf	tblptrl,c
  1161  0013A0  0E10               	movlw	high _dpowers
  1162  0013A2  20F4               	addwfc	prodh,w,c
  1163  0013A4  6EF7               	movwf	tblptrh,c
  1164  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  1165  0013A6                     	endif
  1166  0013A6  0009               	tblrd		*+
  1167  0013A8  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1168  0013AC  000A               	tblrd		*-
  1169  0013AE  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1170  0013B2  C016  F001         	movff	printf@val,___lwdiv@dividend
  1171  0013B6  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1172  0013BA  ECAE  F00A         	call	___lwdiv	;wreg free
  1173  0013BE  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1174  0013C2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1175  0013C6  0E00               	movlw	0
  1176  0013C8  6E0B               	movwf	___lwmod@divisor+1,c
  1177  0013CA  0E0A               	movlw	10
  1178  0013CC  6E0A               	movwf	___lwmod@divisor,c
  1179  0013CE  EC47  F00B         	call	___lwmod	;wreg free
  1180  0013D2  5008               	movf	?___lwmod,w,c
  1181  0013D4  0F30               	addlw	48
  1182  0013D6  6E18               	movwf	printf@c,c
  1183                           
  1184                           ;doprnt.c: 1523: }
  1185                           ;doprnt.c: 1524: (putch(c) );
  1186  0013D8  5018               	movf	printf@c,w,c
  1187  0013DA  EC91  F00B         	call	_putch
  1188  0013DE                     l282:
  1189  0013DE  0615               	decf	printf@prec,f,c
  1190  0013E0  2815               	incf	printf@prec,w,c
  1191  0013E2  A4D8               	btfss	status,2,c
  1192  0013E4  D7D8               	goto	l283
  1193  0013E6                     u570:
  1194  0013E6  C00D  FFF6         	movff	printf@f,tblptrl
  1195  0013EA  C00E  FFF7         	movff	printf@f+1,tblptrh
  1196  0013EE  4A0D               	infsnz	printf@f,f,c
  1197  0013F0  2A0E               	incf	printf@f+1,f,c
  1198  0013F2                     	if	0	;tblptru may be non-zero
  1199  0013F2                     	endif
  1200  0013F2                     	if	0	;tblptru may be non-zero
  1201  0013F2                     	endif
  1202  0013F2  0008               	tblrd		*
  1203  0013F4  CFF5 F018          	movff	tablat,printf@c
  1204  0013F8  5018               	movf	printf@c,w,c
  1205  0013FA  B4D8               	btfsc	status,2,c
  1206  0013FC  0012               	return	
  1207  0013FE  D776               	goto	l268
  1208  001400                     __end_of_printf:
  1209                           	opt stack 0
  1210                           tblptru	equ	0xFF8
  1211                           tblptrh	equ	0xFF7
  1212                           tblptrl	equ	0xFF6
  1213                           tablat	equ	0xFF5
  1214                           prodh	equ	0xFF4
  1215                           prodl	equ	0xFF3
  1216                           postinc0	equ	0xFEE
  1217                           wreg	equ	0xFE8
  1218                           postinc2	equ	0xFDE
  1219                           postdec2	equ	0xFDD
  1220                           fsr2h	equ	0xFDA
  1221                           fsr2l	equ	0xFD9
  1222                           status	equ	0xFD8
  1223                           
  1224 ;; *************** function _putch *****************
  1225 ;; Defined at:
  1226 ;;		line 24 in file "lcd.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  data            1    wreg     unsigned char 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;  data            1    2[COMRAM] unsigned char 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2, status,0, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;Total ram usage:        1 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    1
  1247 ;; This function calls:
  1248 ;;		_lcdNibble
  1249 ;; This function is called by:
  1250 ;;		_printf
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text2
  1255  001722                     __ptext2:
  1256                           	opt stack 0
  1257  001722                     _putch:
  1258                           	opt stack 28
  1259                           
  1260                           ;incstack = 0
  1261                           ;putch@data stored from wreg
  1262  001722  6E03               	movwf	putch@data,c
  1263                           
  1264                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1265  001724  848C               	bsf	3980,2,c	;volatile
  1266                           
  1267                           ;lcd.c: 33: lcdNibble(data);
  1268  001726  5003               	movf	putch@data,w,c
  1269  001728  EC41  F00A         	call	_lcdNibble
  1270                           
  1271                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1272  00172C  0EC8               	movlw	200
  1273  00172E                     u697:
  1274  00172E  D000               	nop2	
  1275  001730  2EE8               	decfsz	wreg,f,c
  1276  001732  D7FD               	bra	u697
  1277  001734  0012               	return		;funcret
  1278  001736                     __end_of_putch:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           prodh	equ	0xFF4
  1285                           prodl	equ	0xFF3
  1286                           postinc0	equ	0xFEE
  1287                           wreg	equ	0xFE8
  1288                           postinc2	equ	0xFDE
  1289                           postdec2	equ	0xFDD
  1290                           fsr2h	equ	0xFDA
  1291                           fsr2l	equ	0xFD9
  1292                           status	equ	0xFD8
  1293                           
  1294 ;; *************** function ___lwmod *****************
  1295 ;; Defined at:
  1296 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  dividend        2    7[COMRAM] unsigned int 
  1299 ;;  divisor         2    9[COMRAM] unsigned int 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  counter         1   11[COMRAM] unsigned char 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  2    7[COMRAM] unsigned int 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;Total ram usage:        5 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; This function calls:
  1318 ;;		Nothing
  1319 ;; This function is called by:
  1320 ;;		_printf
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text3
  1325  00168E                     __ptext3:
  1326                           	opt stack 0
  1327  00168E                     ___lwmod:
  1328                           	opt stack 29
  1329                           
  1330                           ;incstack = 0
  1331  00168E  500A               	movf	___lwmod@divisor,w,c
  1332  001690  100B               	iorwf	___lwmod@divisor+1,w,c
  1333  001692  B4D8               	btfsc	status,2,c
  1334  001694  D018               	goto	l705
  1335  001696  0E01               	movlw	1
  1336  001698  6E0C               	movwf	___lwmod@counter,c
  1337  00169A  D004               	goto	l700
  1338  00169C  90D8               	bcf	status,0,c
  1339  00169E  360A               	rlcf	___lwmod@divisor,f,c
  1340  0016A0  360B               	rlcf	___lwmod@divisor+1,f,c
  1341  0016A2  2A0C               	incf	___lwmod@counter,f,c
  1342  0016A4                     l700:
  1343  0016A4  AE0B               	btfss	___lwmod@divisor+1,7,c
  1344  0016A6  D7FA               	goto	l701
  1345  0016A8                     u490:
  1346  0016A8  500A               	movf	___lwmod@divisor,w,c
  1347  0016AA  5C08               	subwf	___lwmod@dividend,w,c
  1348  0016AC  500B               	movf	___lwmod@divisor+1,w,c
  1349  0016AE  5809               	subwfb	___lwmod@dividend+1,w,c
  1350  0016B0  A0D8               	btfss	status,0,c
  1351  0016B2  D004               	goto	l704
  1352  0016B4  500A               	movf	___lwmod@divisor,w,c
  1353  0016B6  5E08               	subwf	___lwmod@dividend,f,c
  1354  0016B8  500B               	movf	___lwmod@divisor+1,w,c
  1355  0016BA  5A09               	subwfb	___lwmod@dividend+1,f,c
  1356  0016BC                     l704:
  1357  0016BC  90D8               	bcf	status,0,c
  1358  0016BE  320B               	rrcf	___lwmod@divisor+1,f,c
  1359  0016C0  320A               	rrcf	___lwmod@divisor,f,c
  1360  0016C2  2E0C               	decfsz	___lwmod@counter,f,c
  1361  0016C4  D7F1               	goto	u490
  1362  0016C6                     l705:
  1363  0016C6  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1364  0016CA  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1365  0016CE  0012               	return		;funcret
  1366  0016D0                     __end_of___lwmod:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           prodh	equ	0xFF4
  1373                           prodl	equ	0xFF3
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           postinc2	equ	0xFDE
  1377                           postdec2	equ	0xFDD
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function ___lwdiv *****************
  1383 ;; Defined at:
  1384 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  dividend        2    0[COMRAM] unsigned int 
  1387 ;;  divisor         2    2[COMRAM] unsigned int 
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;  quotient        2    4[COMRAM] unsigned int 
  1390 ;;  counter         1    6[COMRAM] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  2    0[COMRAM] unsigned int 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, status,0
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1400 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;Total ram usage:        7 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; This function calls:
  1407 ;;		Nothing
  1408 ;; This function is called by:
  1409 ;;		_printf
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text4
  1414  00155C                     __ptext4:
  1415                           	opt stack 0
  1416  00155C                     ___lwdiv:
  1417                           	opt stack 29
  1418                           
  1419                           ;incstack = 0
  1420  00155C  0E00               	movlw	0
  1421  00155E  6E06               	movwf	___lwdiv@quotient+1,c
  1422  001560  0E00               	movlw	0
  1423  001562  6E05               	movwf	___lwdiv@quotient,c
  1424  001564  5003               	movf	___lwdiv@divisor,w,c
  1425  001566  1004               	iorwf	___lwdiv@divisor+1,w,c
  1426  001568  B4D8               	btfsc	status,2,c
  1427  00156A  D01C               	goto	l695
  1428  00156C  0E01               	movlw	1
  1429  00156E  6E07               	movwf	___lwdiv@counter,c
  1430  001570  D004               	goto	l690
  1431  001572  90D8               	bcf	status,0,c
  1432  001574  3603               	rlcf	___lwdiv@divisor,f,c
  1433  001576  3604               	rlcf	___lwdiv@divisor+1,f,c
  1434  001578  2A07               	incf	___lwdiv@counter,f,c
  1435  00157A                     l690:
  1436  00157A  AE04               	btfss	___lwdiv@divisor+1,7,c
  1437  00157C  D7FA               	goto	l691
  1438  00157E                     u460:
  1439  00157E  90D8               	bcf	status,0,c
  1440  001580  3605               	rlcf	___lwdiv@quotient,f,c
  1441  001582  3606               	rlcf	___lwdiv@quotient+1,f,c
  1442  001584  5003               	movf	___lwdiv@divisor,w,c
  1443  001586  5C01               	subwf	___lwdiv@dividend,w,c
  1444  001588  5004               	movf	___lwdiv@divisor+1,w,c
  1445  00158A  5802               	subwfb	___lwdiv@dividend+1,w,c
  1446  00158C  A0D8               	btfss	status,0,c
  1447  00158E  D005               	goto	l694
  1448  001590  5003               	movf	___lwdiv@divisor,w,c
  1449  001592  5E01               	subwf	___lwdiv@dividend,f,c
  1450  001594  5004               	movf	___lwdiv@divisor+1,w,c
  1451  001596  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1452  001598  8005               	bsf	___lwdiv@quotient,0,c
  1453  00159A                     l694:
  1454  00159A  90D8               	bcf	status,0,c
  1455  00159C  3204               	rrcf	___lwdiv@divisor+1,f,c
  1456  00159E  3203               	rrcf	___lwdiv@divisor,f,c
  1457  0015A0  2E07               	decfsz	___lwdiv@counter,f,c
  1458  0015A2  D7ED               	goto	u460
  1459  0015A4                     l695:
  1460  0015A4  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1461  0015A8  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1462  0015AC  0012               	return		;funcret
  1463  0015AE                     __end_of___lwdiv:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           prodh	equ	0xFF4
  1470                           prodl	equ	0xFF3
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postinc2	equ	0xFDE
  1474                           postdec2	equ	0xFDD
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _motorStop_3 *****************
  1480 ;; Defined at:
  1481 ;;		line 362 in file "main.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;		None
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      void 
  1488 ;; Registers used:
  1489 ;;		wreg, status,2, status,0, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1499 ;;Total ram usage:        0 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    2
  1502 ;; This function calls:
  1503 ;;		_I2C_Master_Init
  1504 ;;		_I2C_Master_Start
  1505 ;;		_I2C_Master_Stop
  1506 ;;		_I2C_Master_Write
  1507 ;; This function is called by:
  1508 ;;		_main
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text5
  1513  0015FA                     __ptext5:
  1514                           	opt stack 0
  1515  0015FA                     _motorStop_3:
  1516                           	opt stack 28
  1517                           
  1518                           ;main.c: 363: I2C_Master_Init(100000);
  1519                           
  1520                           ;incstack = 0
  1521  0015FA  0EA0               	movlw	160
  1522  0015FC  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1523  0015FE  0E86               	movlw	134
  1524  001600  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1525  001602  0E01               	movlw	1
  1526  001604  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1527  001606  0E00               	movlw	0
  1528  001608  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1529  00160A  EC80  F00A         	call	_I2C_Master_Init	;wreg free
  1530                           
  1531                           ;main.c: 364: I2C_Master_Start();
  1532  00160E  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
  1533                           
  1534                           ;main.c: 366: I2C_Master_Write(0b00010000);
  1535  001612  0E00               	movlw	0
  1536  001614  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1537  001616  0E10               	movlw	16
  1538  001618  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1539  00161A  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
  1540                           
  1541                           ;main.c: 367: I2C_Master_Stop();
  1542  00161E  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
  1543                           
  1544                           ;main.c: 370: I2C_Master_Start();
  1545  001622  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
  1546                           
  1547                           ;main.c: 371: I2C_Master_Write(0b00010000);
  1548  001626  0E00               	movlw	0
  1549  001628  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1550  00162A  0E10               	movlw	16
  1551  00162C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1552  00162E  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
  1553                           
  1554                           ;main.c: 372: I2C_Master_Write('0');
  1555  001632  0E00               	movlw	0
  1556  001634  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1557  001636  0E30               	movlw	48
  1558  001638  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1559  00163A  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
  1560                           
  1561                           ;main.c: 373: I2C_Master_Stop();
  1562  00163E  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
  1563  001642  0012               	return		;funcret
  1564  001644                     __end_of_motorStop_3:
  1565                           	opt stack 0
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           prodh	equ	0xFF4
  1571                           prodl	equ	0xFF3
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postinc2	equ	0xFDE
  1575                           postdec2	equ	0xFDD
  1576                           fsr2h	equ	0xFDA
  1577                           fsr2l	equ	0xFD9
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _motorStart_3 *****************
  1581 ;; Defined at:
  1582 ;;		line 348 in file "main.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;		None
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, status,2, status,0, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;Total ram usage:        0 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    2
  1603 ;; This function calls:
  1604 ;;		_I2C_Master_Init
  1605 ;;		_I2C_Master_Start
  1606 ;;		_I2C_Master_Stop
  1607 ;;		_I2C_Master_Write
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text6
  1614  001644                     __ptext6:
  1615                           	opt stack 0
  1616  001644                     _motorStart_3:
  1617                           	opt stack 28
  1618                           
  1619                           ;main.c: 349: I2C_Master_Init(100000);
  1620                           
  1621                           ;incstack = 0
  1622  001644  0EA0               	movlw	160
  1623  001646  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1624  001648  0E86               	movlw	134
  1625  00164A  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1626  00164C  0E01               	movlw	1
  1627  00164E  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1628  001650  0E00               	movlw	0
  1629  001652  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1630  001654  EC80  F00A         	call	_I2C_Master_Init	;wreg free
  1631                           
  1632                           ;main.c: 350: I2C_Master_Start();
  1633  001658  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
  1634                           
  1635                           ;main.c: 352: I2C_Master_Write(0b00010000);
  1636  00165C  0E00               	movlw	0
  1637  00165E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1638  001660  0E10               	movlw	16
  1639  001662  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1640  001664  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
  1641                           
  1642                           ;main.c: 353: I2C_Master_Stop();
  1643  001668  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
  1644                           
  1645                           ;main.c: 356: I2C_Master_Start();
  1646  00166C  ECB7  F00B         	call	_I2C_Master_Start	;wreg free
  1647                           
  1648                           ;main.c: 357: I2C_Master_Write(0b00010000);
  1649  001670  0E00               	movlw	0
  1650  001672  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1651  001674  0E10               	movlw	16
  1652  001676  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1653  001678  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
  1654                           
  1655                           ;main.c: 358: I2C_Master_Write('9');
  1656  00167C  0E00               	movlw	0
  1657  00167E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1658  001680  0E39               	movlw	57
  1659  001682  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1660  001684  ECAE  F00B         	call	_I2C_Master_Write	;wreg free
  1661                           
  1662                           ;main.c: 359: I2C_Master_Stop();
  1663  001688  ECB3  F00B         	call	_I2C_Master_Stop	;wreg free
  1664  00168C  0012               	return		;funcret
  1665  00168E                     __end_of_motorStart_3:
  1666                           	opt stack 0
  1667                           tblptru	equ	0xFF8
  1668                           tblptrh	equ	0xFF7
  1669                           tblptrl	equ	0xFF6
  1670                           tablat	equ	0xFF5
  1671                           prodh	equ	0xFF4
  1672                           prodl	equ	0xFF3
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postinc2	equ	0xFDE
  1676                           postdec2	equ	0xFDD
  1677                           fsr2h	equ	0xFDA
  1678                           fsr2l	equ	0xFD9
  1679                           status	equ	0xFD8
  1680                           
  1681 ;; *************** function _I2C_Master_Write *****************
  1682 ;; Defined at:
  1683 ;;		line 108 in file "I2C.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, status,0, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1697 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1700 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1701 ;;Total ram usage:        2 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    1
  1704 ;; This function calls:
  1705 ;;		_I2C_Master_Wait
  1706 ;; This function is called by:
  1707 ;;		_main
  1708 ;;		_motorStart_3
  1709 ;;		_motorStop_3
  1710 ;;		_motorStart_0
  1711 ;;		_motorStop_0
  1712 ;;		_motorStart_1
  1713 ;;		_motorStop_1
  1714 ;;		_motorStart_2
  1715 ;;		_motorStop_2
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           	psect	text7
  1720  00175C                     __ptext7:
  1721                           	opt stack 0
  1722  00175C                     _I2C_Master_Write:
  1723                           	opt stack 28
  1724                           
  1725                           ;I2C.c: 116: I2C_Master_Wait();
  1726                           
  1727                           ;incstack = 0
  1728  00175C  ECA5  F00B         	call	_I2C_Master_Wait	;wreg free
  1729                           
  1730                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1731  001760  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1732  001764  0012               	return		;funcret
  1733  001766                     __end_of_I2C_Master_Write:
  1734                           	opt stack 0
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           prodh	equ	0xFF4
  1740                           prodl	equ	0xFF3
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           postinc2	equ	0xFDE
  1744                           postdec2	equ	0xFDD
  1745                           fsr2h	equ	0xFDA
  1746                           fsr2l	equ	0xFD9
  1747                           status	equ	0xFD8
  1748                           
  1749 ;; *************** function _I2C_Master_Stop *****************
  1750 ;; Defined at:
  1751 ;;		line 95 in file "I2C.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, status,2, status,0, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    1
  1772 ;; This function calls:
  1773 ;;		_I2C_Master_Wait
  1774 ;; This function is called by:
  1775 ;;		_main
  1776 ;;		_motorStart_3
  1777 ;;		_motorStop_3
  1778 ;;		_motorStart_0
  1779 ;;		_motorStop_0
  1780 ;;		_motorStart_1
  1781 ;;		_motorStop_1
  1782 ;;		_motorStart_2
  1783 ;;		_motorStop_2
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text8
  1788  001766                     __ptext8:
  1789                           	opt stack 0
  1790  001766                     _I2C_Master_Stop:
  1791                           	opt stack 28
  1792                           
  1793                           ;I2C.c: 104: I2C_Master_Wait();
  1794                           
  1795                           ;incstack = 0
  1796  001766  ECA5  F00B         	call	_I2C_Master_Wait	;wreg free
  1797                           
  1798                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1799  00176A  84C5               	bsf	4037,2,c	;volatile
  1800  00176C  0012               	return		;funcret
  1801  00176E                     __end_of_I2C_Master_Stop:
  1802                           	opt stack 0
  1803                           tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           prodh	equ	0xFF4
  1808                           prodl	equ	0xFF3
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postinc2	equ	0xFDE
  1812                           postdec2	equ	0xFDD
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _I2C_Master_Start *****************
  1818 ;; Defined at:
  1819 ;;		line 69 in file "I2C.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      void 
  1826 ;; Registers used:
  1827 ;;		wreg, status,2, status,0, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;Total ram usage:        0 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    1
  1840 ;; This function calls:
  1841 ;;		_I2C_Master_Wait
  1842 ;; This function is called by:
  1843 ;;		_main
  1844 ;;		_motorStart_3
  1845 ;;		_motorStop_3
  1846 ;;		_motorStart_0
  1847 ;;		_motorStop_0
  1848 ;;		_motorStart_1
  1849 ;;		_motorStop_1
  1850 ;;		_motorStart_2
  1851 ;;		_motorStop_2
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text9
  1856  00176E                     __ptext9:
  1857                           	opt stack 0
  1858  00176E                     _I2C_Master_Start:
  1859                           	opt stack 28
  1860                           
  1861                           ;I2C.c: 78: I2C_Master_Wait();
  1862                           
  1863                           ;incstack = 0
  1864  00176E  ECA5  F00B         	call	_I2C_Master_Wait	;wreg free
  1865                           
  1866                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1867  001772  80C5               	bsf	4037,0,c	;volatile
  1868  001774  0012               	return		;funcret
  1869  001776                     __end_of_I2C_Master_Start:
  1870                           	opt stack 0
  1871                           tblptru	equ	0xFF8
  1872                           tblptrh	equ	0xFF7
  1873                           tblptrl	equ	0xFF6
  1874                           tablat	equ	0xFF5
  1875                           prodh	equ	0xFF4
  1876                           prodl	equ	0xFF3
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postinc2	equ	0xFDE
  1880                           postdec2	equ	0xFDD
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _I2C_Master_Init *****************
  1886 ;; Defined at:
  1887 ;;		line 14 in file "I2C.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;Total ram usage:        8 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    1
  1908 ;; This function calls:
  1909 ;;		___lldiv
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;;		_motorStart_3
  1913 ;;		_motorStop_3
  1914 ;;		_motorStart_0
  1915 ;;		_motorStop_0
  1916 ;;		_motorStart_1
  1917 ;;		_motorStop_1
  1918 ;;		_motorStart_2
  1919 ;;		_motorStop_2
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text10
  1924  001500                     __ptext10:
  1925                           	opt stack 0
  1926  001500                     _I2C_Master_Init:
  1927                           	opt stack 28
  1928                           
  1929                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1930                           
  1931                           ;incstack = 0
  1932  001500  9AC6               	bcf	4038,5,c	;volatile
  1933                           
  1934                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1935  001502  8694               	bsf	3988,3,c	;volatile
  1936                           
  1937                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1938  001504  8894               	bsf	3988,4,c	;volatile
  1939                           
  1940                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1941  001506  0E80               	movlw	128
  1942  001508  6EC7               	movwf	4039,c	;volatile
  1943                           
  1944                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1945  00150A  0E28               	movlw	40
  1946  00150C  6EC6               	movwf	4038,c	;volatile
  1947                           
  1948                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1949  00150E  0E00               	movlw	0
  1950  001510  6EC5               	movwf	4037,c	;volatile
  1951                           
  1952                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  1953  001512  0E00               	movlw	0
  1954  001514  6E01               	movwf	___lldiv@dividend,c
  1955  001516  0E5A               	movlw	90
  1956  001518  6E02               	movwf	___lldiv@dividend+1,c
  1957  00151A  0E62               	movlw	98
  1958  00151C  6E03               	movwf	___lldiv@dividend+2,c
  1959  00151E  0E02               	movlw	2
  1960  001520  6E04               	movwf	___lldiv@dividend+3,c
  1961  001522  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  1962  001526  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  1963  00152A  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  1964  00152E  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  1965  001532  0E02               	movlw	2
  1966  001534                     u445:
  1967  001534  90D8               	bcf	status,0,c
  1968  001536  3612               	rlcf	??_I2C_Master_Init,f,c
  1969  001538  3613               	rlcf	??_I2C_Master_Init+1,f,c
  1970  00153A  3614               	rlcf	??_I2C_Master_Init+2,f,c
  1971  00153C  3615               	rlcf	??_I2C_Master_Init+3,f,c
  1972  00153E  2EE8               	decfsz	wreg,f,c
  1973  001540  D7F9               	goto	u445
  1974  001542  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  1975  001546  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  1976  00154A  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  1977  00154E  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  1978  001552  EC00  F00A         	call	___lldiv	;wreg free
  1979  001556  0401               	decf	?___lldiv,w,c
  1980  001558  6EC8               	movwf	4040,c	;volatile
  1981  00155A  0012               	return		;funcret
  1982  00155C                     __end_of_I2C_Master_Init:
  1983                           	opt stack 0
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           prodh	equ	0xFF4
  1989                           prodl	equ	0xFF3
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           postinc2	equ	0xFDE
  1993                           postdec2	equ	0xFDD
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function ___lldiv *****************
  1999 ;; Defined at:
  2000 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  dividend        4    0[COMRAM] unsigned long 
  2003 ;;  divisor         4    4[COMRAM] unsigned long 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  quotient        4    8[COMRAM] unsigned long 
  2006 ;;  counter         1   12[COMRAM] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  4    0[COMRAM] unsigned long 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2016 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;Total ram usage:       13 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; This function calls:
  2023 ;;		Nothing
  2024 ;; This function is called by:
  2025 ;;		_I2C_Master_Init
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text11
  2030  001400                     __ptext11:
  2031                           	opt stack 0
  2032  001400                     ___lldiv:
  2033                           	opt stack 28
  2034                           
  2035                           ;incstack = 0
  2036  001400  0E00               	movlw	0
  2037  001402  6E09               	movwf	___lldiv@quotient,c
  2038  001404  0E00               	movlw	0
  2039  001406  6E0A               	movwf	___lldiv@quotient+1,c
  2040  001408  0E00               	movlw	0
  2041  00140A  6E0B               	movwf	___lldiv@quotient+2,c
  2042  00140C  0E00               	movlw	0
  2043  00140E  6E0C               	movwf	___lldiv@quotient+3,c
  2044  001410  5005               	movf	___lldiv@divisor,w,c
  2045  001412  1006               	iorwf	___lldiv@divisor+1,w,c
  2046  001414  1007               	iorwf	___lldiv@divisor+2,w,c
  2047  001416  1008               	iorwf	___lldiv@divisor+3,w,c
  2048  001418  B4D8               	btfsc	status,2,c
  2049  00141A  D02A               	goto	l642
  2050  00141C  0E01               	movlw	1
  2051  00141E  6E0D               	movwf	___lldiv@counter,c
  2052  001420  D006               	goto	l637
  2053  001422  90D8               	bcf	status,0,c
  2054  001424  3605               	rlcf	___lldiv@divisor,f,c
  2055  001426  3606               	rlcf	___lldiv@divisor+1,f,c
  2056  001428  3607               	rlcf	___lldiv@divisor+2,f,c
  2057  00142A  3608               	rlcf	___lldiv@divisor+3,f,c
  2058  00142C  2A0D               	incf	___lldiv@counter,f,c
  2059  00142E                     l637:
  2060  00142E  AE08               	btfss	___lldiv@divisor+3,7,c
  2061  001430  D7F8               	goto	l638
  2062  001432                     u420:
  2063  001432  90D8               	bcf	status,0,c
  2064  001434  3609               	rlcf	___lldiv@quotient,f,c
  2065  001436  360A               	rlcf	___lldiv@quotient+1,f,c
  2066  001438  360B               	rlcf	___lldiv@quotient+2,f,c
  2067  00143A  360C               	rlcf	___lldiv@quotient+3,f,c
  2068  00143C  5005               	movf	___lldiv@divisor,w,c
  2069  00143E  5C01               	subwf	___lldiv@dividend,w,c
  2070  001440  5006               	movf	___lldiv@divisor+1,w,c
  2071  001442  5802               	subwfb	___lldiv@dividend+1,w,c
  2072  001444  5007               	movf	___lldiv@divisor+2,w,c
  2073  001446  5803               	subwfb	___lldiv@dividend+2,w,c
  2074  001448  5008               	movf	___lldiv@divisor+3,w,c
  2075  00144A  5804               	subwfb	___lldiv@dividend+3,w,c
  2076  00144C  A0D8               	btfss	status,0,c
  2077  00144E  D009               	goto	l641
  2078  001450  5005               	movf	___lldiv@divisor,w,c
  2079  001452  5E01               	subwf	___lldiv@dividend,f,c
  2080  001454  5006               	movf	___lldiv@divisor+1,w,c
  2081  001456  5A02               	subwfb	___lldiv@dividend+1,f,c
  2082  001458  5007               	movf	___lldiv@divisor+2,w,c
  2083  00145A  5A03               	subwfb	___lldiv@dividend+2,f,c
  2084  00145C  5008               	movf	___lldiv@divisor+3,w,c
  2085  00145E  5A04               	subwfb	___lldiv@dividend+3,f,c
  2086  001460  8009               	bsf	___lldiv@quotient,0,c
  2087  001462                     l641:
  2088  001462  90D8               	bcf	status,0,c
  2089  001464  3208               	rrcf	___lldiv@divisor+3,f,c
  2090  001466  3207               	rrcf	___lldiv@divisor+2,f,c
  2091  001468  3206               	rrcf	___lldiv@divisor+1,f,c
  2092  00146A  3205               	rrcf	___lldiv@divisor,f,c
  2093  00146C  2E0D               	decfsz	___lldiv@counter,f,c
  2094  00146E  D7E1               	goto	u420
  2095  001470                     l642:
  2096  001470  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2097  001474  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2098  001478  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2099  00147C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2100  001480  0012               	return		;funcret
  2101  001482                     __end_of___lldiv:
  2102                           	opt stack 0
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           prodh	equ	0xFF4
  2108                           prodl	equ	0xFF3
  2109                           postinc0	equ	0xFEE
  2110                           wreg	equ	0xFE8
  2111                           postinc2	equ	0xFDE
  2112                           postdec2	equ	0xFDD
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8
  2116                           
  2117 ;; *************** function _initLCD *****************
  2118 ;; Defined at:
  2119 ;;		line 60 in file "lcd.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;Total ram usage:        1 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    2
  2140 ;; This function calls:
  2141 ;;		_lcdInst
  2142 ;; This function is called by:
  2143 ;;		_main
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text12
  2148  0015AE                     __ptext12:
  2149                           	opt stack 0
  2150  0015AE                     _initLCD:
  2151                           	opt stack 28
  2152                           
  2153                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2154                           
  2155                           ;incstack = 0
  2156  0015AE  0EC3               	movlw	195
  2157  0015B0  6E04               	movwf	??_initLCD& (0+255),c
  2158  0015B2  0ECD               	movlw	205
  2159  0015B4                     u707:
  2160  0015B4  2EE8               	decfsz	wreg,f,c
  2161  0015B6  D7FE               	bra	u707
  2162  0015B8  2E04               	decfsz	??_initLCD& (0+255),f,c
  2163  0015BA  D7FC               	bra	u707
  2164  0015BC  F000               	nop	
  2165                           
  2166                           ;lcd.c: 69: lcdInst(0b00110011);
  2167  0015BE  0E33               	movlw	51
  2168  0015C0  EC9B  F00B         	call	_lcdInst
  2169                           
  2170                           ;lcd.c: 70: lcdInst(0b00110010);
  2171  0015C4  0E32               	movlw	50
  2172  0015C6  EC9B  F00B         	call	_lcdInst
  2173                           
  2174                           ;lcd.c: 71: lcdInst(0b00101000);
  2175  0015CA  0E28               	movlw	40
  2176  0015CC  EC9B  F00B         	call	_lcdInst
  2177                           
  2178                           ;lcd.c: 72: lcdInst(0b00001111);
  2179  0015D0  0E0F               	movlw	15
  2180  0015D2  EC9B  F00B         	call	_lcdInst
  2181                           
  2182                           ;lcd.c: 73: lcdInst(0b00000110);
  2183  0015D6  0E06               	movlw	6
  2184  0015D8  EC9B  F00B         	call	_lcdInst
  2185                           
  2186                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2187  0015DC  0E01               	movlw	1
  2188  0015DE  EC9B  F00B         	call	_lcdInst
  2189  0015E2  0EC3               	movlw	195
  2190  0015E4  6E04               	movwf	??_initLCD& (0+255),c
  2191  0015E6  0ECD               	movlw	205
  2192  0015E8                     u717:
  2193  0015E8  2EE8               	decfsz	wreg,f,c
  2194  0015EA  D7FE               	bra	u717
  2195  0015EC  2E04               	decfsz	??_initLCD& (0+255),f,c
  2196  0015EE  D7FC               	bra	u717
  2197  0015F0  F000               	nop	
  2198                           
  2199                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2200  0015F2  0E0F               	movlw	15
  2201  0015F4  EC9B  F00B         	call	_lcdInst
  2202  0015F8  0012               	return		;funcret
  2203  0015FA                     __end_of_initLCD:
  2204                           	opt stack 0
  2205                           tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           prodh	equ	0xFF4
  2210                           prodl	equ	0xFF3
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           postinc2	equ	0xFDE
  2214                           postdec2	equ	0xFDD
  2215                           fsr2h	equ	0xFDA
  2216                           fsr2l	equ	0xFD9
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _lcdInst *****************
  2220 ;; Defined at:
  2221 ;;		line 11 in file "lcd.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  data            1    wreg     unsigned char 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  data            1    2[COMRAM] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, status,0, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;Total ram usage:        1 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    1
  2242 ;; This function calls:
  2243 ;;		_lcdNibble
  2244 ;; This function is called by:
  2245 ;;		_main
  2246 ;;		_initLCD
  2247 ;;		_lcd_set_cursor
  2248 ;;		_lcd_shift_cursor
  2249 ;;		_lcd_shift_display
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           	psect	text13
  2254  001736                     __ptext13:
  2255                           	opt stack 0
  2256  001736                     _lcdInst:
  2257                           	opt stack 29
  2258                           
  2259                           ;incstack = 0
  2260                           ;lcdInst@data stored from wreg
  2261  001736  6E03               	movwf	lcdInst@data,c
  2262                           
  2263                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2264  001738  948C               	bcf	3980,2,c	;volatile
  2265                           
  2266                           ;lcd.c: 20: lcdNibble(data);
  2267  00173A  5003               	movf	lcdInst@data,w,c
  2268  00173C  EC41  F00A         	call	_lcdNibble
  2269                           
  2270                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2271  001740  0EC8               	movlw	200
  2272  001742                     u727:
  2273  001742  D000               	nop2	
  2274  001744  2EE8               	decfsz	wreg,f,c
  2275  001746  D7FD               	bra	u727
  2276  001748  0012               	return		;funcret
  2277  00174A                     __end_of_lcdInst:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           prodh	equ	0xFF4
  2284                           prodl	equ	0xFF3
  2285                           postinc0	equ	0xFEE
  2286                           wreg	equ	0xFE8
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _lcdNibble *****************
  2294 ;; Defined at:
  2295 ;;		line 37 in file "lcd.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  data            1    wreg     unsigned char 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  data            1    1[COMRAM] unsigned char 
  2300 ;;  temp            1    0[COMRAM] unsigned char 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, status,2, status,0
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;Total ram usage:        2 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_lcdInst
  2320 ;;		_putch
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text14
  2325  001482                     __ptext14:
  2326                           	opt stack 0
  2327  001482                     _lcdNibble:
  2328                           	opt stack 28
  2329                           
  2330                           ;incstack = 0
  2331                           ;lcdNibble@data stored from wreg
  2332  001482  6E02               	movwf	lcdNibble@data,c
  2333                           
  2334                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2335  001484  5002               	movf	lcdNibble@data,w,c
  2336  001486  0BF0               	andlw	240
  2337  001488  6E01               	movwf	lcdNibble@temp,c
  2338                           
  2339                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2340  00148A  508C               	movf	3980,w,c	;volatile
  2341  00148C  0B0F               	andlw	15
  2342  00148E  6E8C               	movwf	3980,c	;volatile
  2343                           
  2344                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2345  001490  5001               	movf	lcdNibble@temp,w,c
  2346  001492  108C               	iorwf	3980,w,c	;volatile
  2347  001494  6E8C               	movwf	3980,c	;volatile
  2348                           
  2349                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2350  001496  0E00               	movlw	0
  2351  001498  BEF2               	btfsc	intcon,7,c	;volatile
  2352  00149A  0E01               	movlw	1
  2353  00149C  6E27               	movwf	lcd@LCDinterruptState,c
  2354  00149E  9EF2               	bcf	intcon,7,c	;volatile
  2355  0014A0  868C               	bsf	3980,3,c	;volatile
  2356  0014A2  0E53               	movlw	83
  2357  0014A4                     u737:
  2358  0014A4  2EE8               	decfsz	wreg,f,c
  2359  0014A6  D7FE               	bra	u737
  2360  0014A8  F000               	nop	
  2361  0014AA  968C               	bcf	3980,3,c	;volatile
  2362  0014AC  0EC8               	movlw	200
  2363  0014AE                     u747:
  2364  0014AE  D000               	nop2	
  2365  0014B0  2EE8               	decfsz	wreg,f,c
  2366  0014B2  D7FD               	bra	u747
  2367  0014B4  B027               	btfsc	lcd@LCDinterruptState,0,c
  2368  0014B6  D002               	bra	u15
  2369  0014B8  9EF2               	bcf	intcon,7,c	;volatile
  2370  0014BA  D001               	bra	u16
  2371  0014BC                     u15:
  2372  0014BC  8EF2               	bsf	intcon,7,c	;volatile
  2373  0014BE                     u16:
  2374                           
  2375                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2376  0014BE  3802               	swapf	lcdNibble@data,w,c
  2377  0014C0  0BF0               	andlw	240
  2378  0014C2  6E02               	movwf	lcdNibble@data,c
  2379                           
  2380                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2381  0014C4  5002               	movf	lcdNibble@data,w,c
  2382  0014C6  0BF0               	andlw	240
  2383  0014C8  6E01               	movwf	lcdNibble@temp,c
  2384                           
  2385                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2386  0014CA  508C               	movf	3980,w,c	;volatile
  2387  0014CC  0B0F               	andlw	15
  2388  0014CE  6E8C               	movwf	3980,c	;volatile
  2389                           
  2390                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2391  0014D0  5001               	movf	lcdNibble@temp,w,c
  2392  0014D2  108C               	iorwf	3980,w,c	;volatile
  2393  0014D4  6E8C               	movwf	3980,c	;volatile
  2394                           
  2395                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2396  0014D6  0E00               	movlw	0
  2397  0014D8  BEF2               	btfsc	intcon,7,c	;volatile
  2398  0014DA  0E01               	movlw	1
  2399  0014DC  6E27               	movwf	lcd@LCDinterruptState,c
  2400  0014DE  9EF2               	bcf	intcon,7,c	;volatile
  2401  0014E0  868C               	bsf	3980,3,c	;volatile
  2402  0014E2  0E53               	movlw	83
  2403  0014E4                     u757:
  2404  0014E4  2EE8               	decfsz	wreg,f,c
  2405  0014E6  D7FE               	bra	u757
  2406  0014E8  F000               	nop	
  2407  0014EA  968C               	bcf	3980,3,c	;volatile
  2408  0014EC  0EC8               	movlw	200
  2409  0014EE                     u767:
  2410  0014EE  D000               	nop2	
  2411  0014F0  2EE8               	decfsz	wreg,f,c
  2412  0014F2  D7FD               	bra	u767
  2413  0014F4  B027               	btfsc	lcd@LCDinterruptState,0,c
  2414  0014F6  D002               	bra	u25
  2415  0014F8  9EF2               	bcf	intcon,7,c	;volatile
  2416  0014FA  D001               	bra	u26
  2417  0014FC                     u25:
  2418  0014FC  8EF2               	bsf	intcon,7,c	;volatile
  2419  0014FE                     u26:
  2420  0014FE  0012               	return		;funcret
  2421  001500                     __end_of_lcdNibble:
  2422                           	opt stack 0
  2423                           tblptru	equ	0xFF8
  2424                           tblptrh	equ	0xFF7
  2425                           tblptrl	equ	0xFF6
  2426                           tablat	equ	0xFF5
  2427                           prodh	equ	0xFF4
  2428                           prodl	equ	0xFF3
  2429                           intcon	equ	0xFF2
  2430                           postinc0	equ	0xFEE
  2431                           wreg	equ	0xFE8
  2432                           postinc2	equ	0xFDE
  2433                           postdec2	equ	0xFDD
  2434                           fsr2h	equ	0xFDA
  2435                           fsr2l	equ	0xFD9
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function _I2C_Master_Read *****************
  2439 ;; Defined at:
  2440 ;;		line 120 in file "I2C.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  ackBit          1    wreg     unsigned char 
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;  ackBit          1    1[COMRAM] unsigned char 
  2445 ;;  receivedByte    1    2[COMRAM] unsigned char 
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      unsigned char 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, status,0, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;Total ram usage:        2 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; Hardware stack levels required when called:    1
  2462 ;; This function calls:
  2463 ;;		_I2C_Master_Wait
  2464 ;; This function is called by:
  2465 ;;		_main
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text15
  2470  0016FE                     __ptext15:
  2471                           	opt stack 0
  2472  0016FE                     _I2C_Master_Read:
  2473                           	opt stack 29
  2474                           
  2475                           ;incstack = 0
  2476                           ;I2C_Master_Read@ackBit stored from wreg
  2477  0016FE  6E02               	movwf	I2C_Master_Read@ackBit,c
  2478                           
  2479                           ;I2C.c: 130: unsigned char receivedByte;
  2480                           ;I2C.c: 132: I2C_Master_Wait();
  2481  001700  ECA5  F00B         	call	_I2C_Master_Wait	;wreg free
  2482                           
  2483                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  2484  001704  86C5               	bsf	4037,3,c	;volatile
  2485                           
  2486                           ;I2C.c: 135: I2C_Master_Wait();
  2487  001706  ECA5  F00B         	call	_I2C_Master_Wait	;wreg free
  2488                           
  2489                           ;I2C.c: 136: receivedByte = SSPBUF;
  2490  00170A  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  2491                           
  2492                           ;I2C.c: 138: I2C_Master_Wait();
  2493  00170E  ECA5  F00B         	call	_I2C_Master_Wait	;wreg free
  2494                           
  2495                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  2496  001712  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  2497  001714  D002               	bra	u235
  2498  001716  9AC5               	bcf	4037,5,c	;volatile
  2499  001718  D001               	bra	u236
  2500  00171A                     u235:
  2501  00171A  8AC5               	bsf	4037,5,c	;volatile
  2502  00171C                     u236:
  2503                           
  2504                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  2505  00171C  88C5               	bsf	4037,4,c	;volatile
  2506                           
  2507                           ;I2C.c: 142: return receivedByte;
  2508  00171E  5003               	movf	I2C_Master_Read@receivedByte,w,c
  2509  001720  0012               	return	
  2510  001722                     __end_of_I2C_Master_Read:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           tblptrh	equ	0xFF7
  2514                           tblptrl	equ	0xFF6
  2515                           tablat	equ	0xFF5
  2516                           prodh	equ	0xFF4
  2517                           prodl	equ	0xFF3
  2518                           intcon	equ	0xFF2
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postinc2	equ	0xFDE
  2522                           postdec2	equ	0xFDD
  2523                           fsr2h	equ	0xFDA
  2524                           fsr2l	equ	0xFD9
  2525                           status	equ	0xFD8
  2526                           
  2527 ;; *************** function _I2C_Master_Wait *****************
  2528 ;; Defined at:
  2529 ;;		line 51 in file "I2C.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;		None
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  1    wreg      void 
  2536 ;; Registers used:
  2537 ;;		wreg, status,2, status,0
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;Total ram usage:        1 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; This function calls:
  2550 ;;		Nothing
  2551 ;; This function is called by:
  2552 ;;		_I2C_Master_Start
  2553 ;;		_I2C_Master_Stop
  2554 ;;		_I2C_Master_Write
  2555 ;;		_I2C_Master_Read
  2556 ;;		_I2C_Master_RepeatedStart
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text16
  2561  00174A                     __ptext16:
  2562                           	opt stack 0
  2563  00174A                     _I2C_Master_Wait:
  2564                           	opt stack 28
  2565                           
  2566                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2567                           
  2568                           ;incstack = 0
  2569  00174A  B4C7               	btfsc	4039,2,c	;volatile
  2570  00174C  D7FE               	goto	_I2C_Master_Wait
  2571  00174E  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  2572  001752  0E1F               	movlw	31
  2573  001754  1601               	andwf	??_I2C_Master_Wait,f,c
  2574  001756  B4D8               	btfsc	status,2,c
  2575  001758  0012               	return	
  2576  00175A  D7F7               	goto	_I2C_Master_Wait
  2577  00175C                     __end_of_I2C_Master_Wait:
  2578                           	opt stack 0
  2579                           tblptru	equ	0xFF8
  2580                           tblptrh	equ	0xFF7
  2581                           tblptrl	equ	0xFF6
  2582                           tablat	equ	0xFF5
  2583                           prodh	equ	0xFF4
  2584                           prodl	equ	0xFF3
  2585                           intcon	equ	0xFF2
  2586                           postinc0	equ	0xFEE
  2587                           wreg	equ	0xFE8
  2588                           postinc2	equ	0xFDE
  2589                           postdec2	equ	0xFDD
  2590                           fsr2h	equ	0xFDA
  2591                           fsr2l	equ	0xFD9
  2592                           status	equ	0xFD8
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           prodh	equ	0xFF4
  2598                           prodl	equ	0xFF3
  2599                           intcon	equ	0xFF2
  2600                           postinc0	equ	0xFEE
  2601                           wreg	equ	0xFE8
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608                           	psect	rparam
  2609  0000                     tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           prodh	equ	0xFF4
  2614                           prodl	equ	0xFF3
  2615                           intcon	equ	0xFF2
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           postinc2	equ	0xFDE
  2619                           postdec2	equ	0xFDD
  2620                           fsr2h	equ	0xFDA
  2621                           fsr2l	equ	0xFD9
  2622                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    36
    Data        2
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      43
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_8(CODE[18]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[5]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_3->_I2C_Master_Init
    _motorStart_3->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12569
                                             24 COMRAM     2     2      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                       _motorStart_3
                        _motorStop_3
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1709
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_3                                          0     0      0    3550
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_3                                         0     0      0    3550
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2454
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1096
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      2B       1       33.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      34        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 20:33:46 2018

                          _i 001B                           u15 14BC                           u16 14BE  
                         u25 14FC                           u26 14FE                  __CFG_CPD$ON 000000  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l101 10EE  
                        l110 124E                          l102 110E                          l103 116A  
                        l107 1208                          l108 121E                          l109 12B2  
                        l281 1390                          l282 13DE                          l283 1396  
                        l275 1326                          l700 16A4                          l268 12EC  
                        l701 169C                          l277 134E                          l269 12FC  
                        l704 16BC                          l641 1462                          l705 16C6  
                        l642 1470                          l637 142E                          l638 1422  
                        l690 157A                          l691 1572                          l694 159A  
                        l695 15A4                 __CFG_CPB$OFF 000000                          u235 171A  
                        u236 171C                          u420 1432                          u460 157E  
                        u445 1534                          u550 137E                          u490 16A8  
                        u570 13E6                          u707 15B4                          u717 15E8  
                        u637 10DE                          u727 1742                          u647 115E  
                        u737 14A4                          u657 118A                          u747 14AE  
                        u667 125A                          u757 14E4                          u677 129E  
                        u767 14EE                          u687 12D4                          u697 172E  
                        _max 002A                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1456 1352                         _ADON 007E10  
                       STR_1 1034                         STR_2 1034                         STR_3 1034  
                       STR_4 1037                         STR_5 1034                         STR_6 1034  
                       STR_7 1034                         STR_8 1025                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                         _main 103E                         _keys 1001  
                       fsr2h 000FDA                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_LEFT 1020  
      I2C_Master_Read@ackBit 0002             ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lldiv 1482              __end_of___lwdiv 15AE              __end_of___lwmod 16D0  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 174A               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 15FA               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 101C                        _array 101C                        _state 0025  
                      _putch 1722                        tablat 000FF5            _LCDinterruptState 0029  
                      status 000FD8  I2C_Master_Read@receivedByte 0003               __CFG_PBADEN$ON 000000  
            __initialization 16D0                 __end_of_main 12E2                 __end_of_keys 1012  
             __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 1021                       ??_main 0019  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002  
         ??_I2C_Master_Start 0002                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0004                       _ADRESH 000FC4                       _ADRESL 000FC3  
                     ?_putch 0001                       _OSCCON 000FD3                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000  
                  ??___lldiv 0009                    ??___lwdiv 0005                    ??___lwmod 000C  
                     clear_0 16EE                 ?_motorStop_3 0001                    ??_lcdInst 0003  
                     _printf 12E2                    ??_initLCD 0004                 __pdataCOMRAM 002A  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                   __accesstop 0080      __end_of__initialization 16F4  
              ___rparam_used 000001               __pcstackCOMRAM 0001                __end_of_array 101F  
              __end_of_putch 1736           __size_of_lcdNibble 007E                      ??_putch 0003  
                    _I2Cdata 0028                      ?_printf 000D         lcd@LCDinterruptState 0027  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
          __end_of_lcdNibble 1500                      __Hparam 0000                      __Lparam 0000  
                    ___lldiv 1400                      ___lwdiv 155C                      ___lwmod 168E  
               __psmallconst 1000                      __pcinit 16D0                      __ramtop 1000  
                    _lcdInst 1736                      __ptext0 103E                      __ptext1 12E2  
                    __ptext2 1722                      __ptext3 168E                      __ptext4 155C  
                    __ptext5 15FA                      __ptext6 1644                      __ptext7 175C  
                    __ptext8 1766                      __ptext9 176E              __size_of_printf 011E  
                    _initLCD 15AE         __size_of_motorStop_3 004A                      _dpowers 1012  
              ?_motorStart_3 0001                    _LCD_RIGHT 1020     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
       end_of_initialization 16F4        __end_of_LCD_SIZE_HORZ 1023        __end_of_LCD_SIZE_VERT 1022  
              __Lmediumconst 0000    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                      printf@c 0018  
                    printf@f 000D                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               ??_motorStart_3 0016                    _TRISCbits 000F94  
                  _TRISDbits 000F95                __pidataCOMRAM 1776               __end_of_printf 1400  
        start_initialization 16D0            ??_I2C_Master_Init 0012            ??_I2C_Master_Read 0002  
          ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002                    _W_counter 0023  
   I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000                     ??_printf 0011  
              _analog_result 001D                  __pbssCOMRAM 001B             _I2C_Master_Start 176E  
           _I2C_Master_Write 175C         __end_of_motorStart_3 168E             ___lwdiv@dividend 0001  
          __CFG_CCP2MX$PORTC 000000                    _lcdNibble 1482                     ?___lldiv 0001  
                   ?___lwdiv 0001                     ?___lwmod 0008                     ?_lcdInst 0001  
                   ?_initLCD 0001                  __smallconst 1000             ___lwdiv@quotient 0005  
              _W_spacingTime 001F               __size_of_putch 0014                     _LCD_LEFT 101F  
                   _LATDbits 000F8C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
              ??_motorStop_3 0016                   _ADCON0bits 000FC2                   _ADCON2bits 000FC0  
              lcdNibble@data 0002                   printf@flag 0014                lcdNibble@temp 0001  
                 printf@prec 0015               _LCD_HORZ_LIMIT 1024                     __Hrparam 0000  
                   __Lrparam 0000                     _W_remain 0021           __CFG_BOREN$SBORDIS 000000  
           __size_of___lldiv 0082             __size_of___lwdiv 0052             __size_of___lwmod 0042  
           __size_of_lcdInst 0014              _I2C_Master_Init 1500              _I2C_Master_Read 16FE  
           __size_of_initLCD 004C              _I2C_Master_Wait 174A              _I2C_Master_Stop 1766  
     __end_of_LCD_HORZ_LIMIT 1025          __end_of_motorStop_3 1644              ___lwdiv@divisor 0003  
            ___lwdiv@counter 0007                     __ptext10 1500                     __ptext11 1400  
                   __ptext12 15AE                     __ptext13 1736                     __ptext14 1482  
                   __ptext15 16FE                     __ptext16 174A               _LCD_VERT_LIMIT 1023  
      __size_of_motorStart_3 004A                __size_of_main 02A4                  ??_lcdNibble 0001  
                  printf@val 0016  I2C_Master_Write@byteToWrite 0002                    putch@data 0003  
   __end_of_I2C_Master_Start 1776     __end_of_I2C_Master_Write 1766                   _INTCONbits 000FF2  
               _motorStart_3 1644       __end_of_LCD_VERT_LIMIT 1024                _LCD_SIZE_HORZ 1022  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 1021             ___lldiv@dividend 0001  
                   printf@ap 0012      __end_of_I2C_Master_Init 155C      __end_of_I2C_Master_Read 1722  
    __end_of_I2C_Master_Wait 175C      __end_of_I2C_Master_Stop 176E                  lcdInst@data 0003  
                _motorStop_3 15FA             ___lldiv@quotient 0009              ___lwmod@divisor 000A  
            ___lwmod@counter 000C                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
