

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 16:22:13 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  00172A                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _max
    71  00172A  0004               	dw	4
    72                           
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _keys:
    78                           	opt stack 0
    79  001001  31                 	db	49
    80  001002  32                 	db	50
    81  001003  33                 	db	51
    82  001004  41                 	db	65
    83  001005  34                 	db	52
    84  001006  35                 	db	53
    85  001007  36                 	db	54
    86  001008  42                 	db	66
    87  001009  37                 	db	55
    88  00100A  38                 	db	56
    89  00100B  39                 	db	57
    90  00100C  43                 	db	67
    91  00100D  2A                 	db	42
    92  00100E  30                 	db	48
    93  00100F  23                 	db	35
    94  001010  44                 	db	68
    95  001011  00                 	db	0
    96  001012                     __end_of_keys:
    97                           	opt stack 0
    98  001012                     _dpowers:
    99                           	opt stack 0
   100  001012  0001               	dw	1
   101  001014  000A               	dw	10
   102  001016  0064               	dw	100
   103  001018  03E8               	dw	1000
   104  00101A  2710               	dw	10000
   105  00101C                     __end_of_dpowers:
   106                           	opt stack 0
   107  00101C                     _array:
   108                           	opt stack 0
   109  00101C  31                 	db	49
   110  00101D  30                 	db	48
   111  00101E  00                 	db	0
   112  00101F                     __end_of_array:
   113                           	opt stack 0
   114  00101F                     _LCD_LEFT:
   115                           	opt stack 0
   116  00101F  00                 	db	0
   117  001020                     __end_of_LCD_LEFT:
   118                           	opt stack 0
   119  001020                     _LCD_RIGHT:
   120                           	opt stack 0
   121  001020  01                 	db	1
   122  001021                     __end_of_LCD_RIGHT:
   123                           	opt stack 0
   124  001021                     _LCD_SIZE_VERT:
   125                           	opt stack 0
   126  001021  02                 	db	2
   127  001022                     __end_of_LCD_SIZE_VERT:
   128                           	opt stack 0
   129  001022                     _LCD_SIZE_HORZ:
   130                           	opt stack 0
   131  001022  10                 	db	16
   132  001023                     __end_of_LCD_SIZE_HORZ:
   133                           	opt stack 0
   134  001023                     _LCD_VERT_LIMIT:
   135                           	opt stack 0
   136  001023  02                 	db	2
   137  001024                     __end_of_LCD_VERT_LIMIT:
   138                           	opt stack 0
   139  001024                     _LCD_HORZ_LIMIT:
   140                           	opt stack 0
   141  001024  28                 	db	40
   142  001025                     __end_of_LCD_HORZ_LIMIT:
   143                           	opt stack 0
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON2bits	set	4037
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _TRISCbits	set	3988
   151  0000                     _SSPCON1bits	set	4038
   152  0000                     _INTCONbits	set	4082
   153  0000                     _TRISDbits	set	3989
   154  0000                     _LATDbits	set	3980
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADRESL	set	4035
   157  0000                     _ADCON0bits	set	4034
   158  0000                     _ADCON2bits	set	4032
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON0	set	4034
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _LATE	set	3981
   167  0000                     _LATD	set	3980
   168  0000                     _LATC	set	3979
   169  0000                     _LATB	set	3978
   170  0000                     _LATA	set	3977
   171  0000                     _OSCCON	set	4051
   172  0000                     _ADON	set	32272
   173  001025                     STR_7:
   174  001025  72                 	db	114	;'r'
   175  001026  65                 	db	101	;'e'
   176  001027  6D                 	db	109	;'m'
   177  001028  61                 	db	97	;'a'
   178  001029  69                 	db	105	;'i'
   179  00102A  6E                 	db	110	;'n'
   180  00102B  20                 	db	32
   181  00102C  4E                 	db	78	;'N'
   182  00102D  75                 	db	117	;'u'
   183  00102E  74                 	db	116	;'t'
   184  00102F  73                 	db	115	;'s'
   185  001030  3A                 	db	58	;':'
   186  001031  25                 	db	37
   187  001032  64                 	db	100	;'d'
   188  001033  00                 	db	0
   189  001034                     STR_3:
   190  001034  64                 	db	100	;'d'
   191  001035  6F                 	db	111	;'o'
   192  001036  6E                 	db	110	;'n'
   193  001037  65                 	db	101	;'e'
   194  001038  00                 	db	0
   195  0000                     
   196                           ; #config settings
   197  001039  00                 	db	0	; dummy byte at the end
   198  0000                     
   199                           	psect	cinit
   200  0016A8                     __pcinit:
   201                           	opt stack 0
   202  0016A8                     start_initialization:
   203                           	opt stack 0
   204  0016A8                     __initialization:
   205                           	opt stack 0
   206                           
   207                           ; Initialize objects allocated to COMRAM (2 bytes)
   208                           ; load TBLPTR registers with __pidataCOMRAM
   209  0016A8  0E2A               	movlw	low __pidataCOMRAM
   210  0016AA  6EF6               	movwf	tblptrl,c
   211  0016AC  0E17               	movlw	high __pidataCOMRAM
   212  0016AE  6EF7               	movwf	tblptrh,c
   213  0016B0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   214  0016B2  6EF8               	movwf	tblptru,c
   215  0016B4  0009               	tblrd		*+	;fetch initializer
   216  0016B6  CFF5 F029          	movff	tablat,__pdataCOMRAM
   217  0016BA  0009               	tblrd		*+	;fetch initializer
   218  0016BC  CFF5 F02A          	movff	tablat,__pdataCOMRAM+1
   219                           
   220                           ; Clear objects allocated to COMRAM (14 bytes)
   221  0016C0  EE00  F01B         	lfsr	0,__pbssCOMRAM
   222  0016C4  0E0E               	movlw	14
   223  0016C6                     clear_0:
   224  0016C6  6AEE               	clrf	postinc0,c
   225  0016C8  06E8               	decf	wreg,f,c
   226  0016CA  E1FD               	bnz	clear_0
   227  0016CC                     end_of_initialization:
   228                           	opt stack 0
   229  0016CC                     __end_of__initialization:
   230                           	opt stack 0
   231  0016CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   232  0016CE  6EF8               	movwf	tblptru,c
   233  0016D0  0100               	movlb	0
   234  0016D2  EF1D  F008         	goto	_main	;jump to C main() function
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	bssCOMRAM
   243  00001B                     __pbssCOMRAM:
   244                           	opt stack 0
   245  00001B                     _i:
   246                           	opt stack 0
   247  00001B                     	ds	2
   248  00001D                     _analog_result:
   249                           	opt stack 0
   250  00001D                     	ds	2
   251  00001F                     _N_spacingTime:
   252                           	opt stack 0
   253  00001F                     	ds	2
   254  000021                     _N_remain:
   255                           	opt stack 0
   256  000021                     	ds	2
   257  000023                     _N_counter:
   258                           	opt stack 0
   259  000023                     	ds	2
   260  000025                     _state:
   261                           	opt stack 0
   262  000025                     	ds	2
   263  000027                     lcd@LCDinterruptState:
   264                           	opt stack 0
   265  000027                     	ds	1
   266  000028                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	dataCOMRAM
   275  000029                     __pdataCOMRAM:
   276                           	opt stack 0
   277  000029                     _max:
   278                           	opt stack 0
   279  000029                     	ds	2
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	cstackCOMRAM
   288  000001                     __pcstackCOMRAM:
   289                           	opt stack 0
   290  000001                     ??_I2C_Master_Wait:
   291  000001                     ?_readADC:
   292                           	opt stack 0
   293  000001                     ?___lwdiv:
   294                           	opt stack 0
   295  000001                     ?___lldiv:
   296                           	opt stack 0
   297  000001                     lcdNibble@temp:
   298                           	opt stack 0
   299  000001                     ___lwdiv@dividend:
   300                           	opt stack 0
   301  000001                     ___lldiv@dividend:
   302                           	opt stack 0
   303                           
   304                           ; 4 bytes @ 0x0
   305  000001                     	ds	1
   306  000002                     lcdNibble@data:
   307                           	opt stack 0
   308  000002                     I2C_Master_Write@byteToWrite:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x1
   312  000002                     	ds	1
   313  000003                     ??_readADC:
   314  000003                     lcdInst@data:
   315                           	opt stack 0
   316  000003                     putch@data:
   317                           	opt stack 0
   318  000003                     ___lwdiv@divisor:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x2
   322  000003                     	ds	1
   323  000004                     ??_initLCD:
   324  000004                     
   325                           ; 1 bytes @ 0x3
   326  000004                     	ds	1
   327  000005                     readADC@channel:
   328                           	opt stack 0
   329  000005                     ___lwdiv@quotient:
   330                           	opt stack 0
   331  000005                     ___lldiv@divisor:
   332                           	opt stack 0
   333                           
   334                           ; 4 bytes @ 0x4
   335  000005                     	ds	2
   336  000007                     ___lwdiv@counter:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x6
   340  000007                     	ds	1
   341  000008                     ?___lwmod:
   342                           	opt stack 0
   343  000008                     ___lwmod@dividend:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x7
   347  000008                     	ds	1
   348  000009                     ___lldiv@quotient:
   349                           	opt stack 0
   350                           
   351                           ; 4 bytes @ 0x8
   352  000009                     	ds	1
   353  00000A                     ___lwmod@divisor:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x9
   357  00000A                     	ds	2
   358  00000C                     ___lwmod@counter:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0xB
   362  00000C                     	ds	1
   363  00000D                     ?_printf:
   364                           	opt stack 0
   365  00000D                     ___lldiv@counter:
   366                           	opt stack 0
   367  00000D                     printf@f:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0xC
   371  00000D                     	ds	1
   372  00000E                     I2C_Master_Init@clockFreq:
   373                           	opt stack 0
   374                           
   375                           ; 4 bytes @ 0xD
   376  00000E                     	ds	3
   377  000011                     ??_printf:
   378                           
   379                           ; 1 bytes @ 0x10
   380  000011                     	ds	1
   381  000012                     ??_I2C_Master_Init:
   382  000012                     printf@ap:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x11
   386  000012                     	ds	2
   387  000014                     printf@flag:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x13
   391  000014                     	ds	1
   392  000015                     printf@prec:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x14
   396  000015                     	ds	1
   397  000016                     printf@val:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x15
   401  000016                     	ds	2
   402  000018                     printf@c:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x17
   406  000018                     	ds	1
   407  000019                     ??_main:
   408                           
   409                           ; 1 bytes @ 0x18
   410  000019                     	ds	2
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 63 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;		None
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   441 ;;Total ram usage:        2 bytes
   442 ;; Hardware stack levels required when called:    3
   443 ;; This function calls:
   444 ;;		_I2C_Master_Init
   445 ;;		_I2C_Master_Start
   446 ;;		_I2C_Master_Stop
   447 ;;		_I2C_Master_Write
   448 ;;		_initLCD
   449 ;;		_lcdInst
   450 ;;		_motorStart_1
   451 ;;		_motorStop_1
   452 ;;		_printf
   453 ;;		_readADC
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text0
   460  00103A                     __ptext0:
   461                           	opt stack 0
   462  00103A                     _main:
   463                           	opt stack 28
   464                           
   465                           ;main.c: 66: OSCCON = 0xF2;
   466                           
   467                           ;incstack = 0
   468  00103A  0EF2               	movlw	242
   469  00103C  6ED3               	movwf	4051,c	;volatile
   470                           
   471                           ;main.c: 71: LATA = 0x00;
   472  00103E  0E00               	movlw	0
   473  001040  6E89               	movwf	3977,c	;volatile
   474                           
   475                           ;main.c: 72: LATB = 0x00;
   476  001042  0E00               	movlw	0
   477  001044  6E8A               	movwf	3978,c	;volatile
   478                           
   479                           ;main.c: 73: LATC = 0x00;
   480  001046  0E00               	movlw	0
   481  001048  6E8B               	movwf	3979,c	;volatile
   482                           
   483                           ;main.c: 74: LATD = 0x00;
   484  00104A  0E00               	movlw	0
   485  00104C  6E8C               	movwf	3980,c	;volatile
   486                           
   487                           ;main.c: 75: LATE = 0x00;
   488  00104E  0E00               	movlw	0
   489  001050  6E8D               	movwf	3981,c	;volatile
   490                           
   491                           ;main.c: 79: TRISA = 0xFF;
   492  001052  6892               	setf	3986,c	;volatile
   493                           
   494                           ;main.c: 80: TRISB = 0xFF;
   495  001054  6893               	setf	3987,c	;volatile
   496                           
   497                           ;main.c: 81: TRISC = 0x00;
   498  001056  0E00               	movlw	0
   499  001058  6E94               	movwf	3988,c	;volatile
   500                           
   501                           ;main.c: 85: TRISD = 0x00;
   502  00105A  0E00               	movlw	0
   503  00105C  6E95               	movwf	3989,c	;volatile
   504                           
   505                           ;main.c: 86: TRISE = 0x00;
   506  00105E  0E00               	movlw	0
   507  001060  6E96               	movwf	3990,c	;volatile
   508                           
   509                           ;main.c: 89: ADCON0 = 0x00;
   510  001062  0E00               	movlw	0
   511  001064  6EC2               	movwf	4034,c	;volatile
   512                           
   513                           ;main.c: 90: ADCON1 = 0x0B;
   514  001066  0E0B               	movlw	11
   515  001068  6EC1               	movwf	4033,c	;volatile
   516                           
   517                           ;main.c: 91: ADCON2bits.ADFM = 1;
   518  00106A  8EC0               	bsf	4032,7,c	;volatile
   519                           
   520                           ;main.c: 95: initLCD();
   521  00106C  ECA7  F00A         	call	_initLCD	;wreg free
   522                           
   523                           ;main.c: 99: I2C_Master_Init(100000);
   524  001070  0EA0               	movlw	160
   525  001072  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   526  001074  0E86               	movlw	134
   527  001076  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   528  001078  0E01               	movlw	1
   529  00107A  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   530  00107C  0E00               	movlw	0
   531  00107E  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   532  001080  EC50  F00A         	call	_I2C_Master_Init	;wreg free
   533                           
   534                           ;main.c: 100: I2C_Master_Start();
   535  001084  EC91  F00B         	call	_I2C_Master_Start	;wreg free
   536                           
   537                           ;main.c: 103: I2C_Master_Write(0b00010000);
   538  001088  0E00               	movlw	0
   539  00108A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   540  00108C  0E10               	movlw	16
   541  00108E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   542  001090  EC88  F00B         	call	_I2C_Master_Write	;wreg free
   543                           
   544                           ;main.c: 104: I2C_Master_Stop();
   545  001094  EC8D  F00B         	call	_I2C_Master_Stop	;wreg free
   546                           
   547                           ;main.c: 106: I2C_Master_Start();
   548  001098  EC91  F00B         	call	_I2C_Master_Start	;wreg free
   549                           
   550                           ;main.c: 107: I2C_Master_Write(0b00010000);
   551  00109C  0E00               	movlw	0
   552  00109E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   553  0010A0  0E10               	movlw	16
   554  0010A2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   555  0010A4  EC88  F00B         	call	_I2C_Master_Write	;wreg free
   556                           
   557                           ;main.c: 108: I2C_Master_Write('1');
   558  0010A8  0E00               	movlw	0
   559  0010AA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   560  0010AC  0E31               	movlw	49
   561  0010AE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   562  0010B0  EC88  F00B         	call	_I2C_Master_Write	;wreg free
   563                           
   564                           ;main.c: 109: I2C_Master_Stop();
   565  0010B4  EC8D  F00B         	call	_I2C_Master_Stop	;wreg free
   566                           
   567                           ;main.c: 119: initLCD();
   568  0010B8  ECA7  F00A         	call	_initLCD	;wreg free
   569                           
   570                           ;main.c: 120: printf("%d",N_counter);
   571  0010BC  0E31               	movlw	low (STR_7+12)
   572  0010BE  6E0D               	movwf	printf@f,c
   573  0010C0  0E10               	movlw	high (STR_7+12)
   574  0010C2  6E0E               	movwf	printf@f+1,c
   575  0010C4  C023  F00F         	movff	_N_counter,?_printf+2
   576  0010C8  C024  F010         	movff	_N_counter+1,?_printf+3
   577  0010CC  EC41  F009         	call	_printf	;wreg free
   578                           
   579                           ;main.c: 121: _delay((unsigned long)((100)*(40000000/4000.0)));
   580  0010D0  0E06               	movlw	6
   581  0010D2  6E1A               	movwf	(??_main+1)& (0+255),c
   582  0010D4  0E13               	movlw	19
   583  0010D6  6E19               	movwf	??_main& (0+255),c
   584  0010D8  0EAE               	movlw	174
   585  0010DA                     u647:
   586  0010DA  2EE8               	decfsz	wreg,f,c
   587  0010DC  D7FE               	bra	u647
   588  0010DE  2E19               	decfsz	??_main& (0+255),f,c
   589  0010E0  D7FC               	bra	u647
   590  0010E2  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   591  0010E4  D7FA               	bra	u647
   592                           
   593                           ;main.c: 122: motorStart_1();
   594  0010E6  ECF2  F00A         	call	_motorStart_1	;wreg free
   595  0010EA                     l1506:
   596                           
   597                           ;main.c: 130: if (N_counter >= max){
   598  0010EA  5029               	movf	_max,w,c
   599  0010EC  5C23               	subwf	_N_counter,w,c
   600  0010EE  5024               	movf	_N_counter+1,w,c
   601  0010F0  0A80               	xorlw	128
   602  0010F2  6E19               	movwf	??_main& (0+255),c
   603  0010F4  502A               	movf	_max+1,w,c
   604  0010F6  0A80               	xorlw	128
   605  0010F8  5819               	subwfb	??_main& (0+255),w,c
   606  0010FA  A0D8               	btfss	status,0,c
   607  0010FC  D003               	goto	l100
   608                           
   609                           ;main.c: 131: motorStop_1();
   610  0010FE  ECCD  F00A         	call	_motorStop_1	;wreg free
   611                           
   612                           ;main.c: 132: break;
   613  001102  D018               	goto	l101
   614  001104                     l100:
   615                           
   616                           ;main.c: 133: }
   617                           ;main.c: 134: if (readADC(1)<=250 ){
   618  001104  0E01               	movlw	1
   619  001106  EC38  F00B         	call	_readADC
   620  00110A  5002               	movf	?_readADC+1,w,c
   621  00110C  E1EE               	bnz	l1506
   622  00110E  0EFB               	movlw	251
   623  001110  5C01               	subwf	?_readADC,w,c
   624  001112  B0D8               	btfsc	status,0,c
   625  001114  D7EA               	goto	l99
   626                           
   627                           ;main.c: 136: N_counter ++;
   628  001116  4A23               	infsnz	_N_counter,f,c
   629  001118  2A24               	incf	_N_counter+1,f,c
   630                           
   631                           ;main.c: 137: initLCD();
   632  00111A  ECA7  F00A         	call	_initLCD	;wreg free
   633                           
   634                           ;main.c: 138: printf("%d", N_counter);
   635  00111E  0E31               	movlw	low (STR_7+12)
   636  001120  6E0D               	movwf	printf@f,c
   637  001122  0E10               	movlw	high (STR_7+12)
   638  001124  6E0E               	movwf	printf@f+1,c
   639  001126  C023  F00F         	movff	_N_counter,?_printf+2
   640  00112A  C024  F010         	movff	_N_counter+1,?_printf+3
   641  00112E  EC41  F009         	call	_printf	;wreg free
   642  001132  D7DB               	goto	l99
   643  001134                     l101:
   644                           
   645                           ;main.c: 140: }
   646                           ;main.c: 143: }
   647                           ;main.c: 146: initLCD();
   648  001134  ECA7  F00A         	call	_initLCD	;wreg free
   649                           
   650                           ;main.c: 147: printf("done");
   651  001138  0E34               	movlw	low STR_3
   652  00113A  6E0D               	movwf	printf@f,c
   653  00113C  0E10               	movlw	high STR_3
   654  00113E  6E0E               	movwf	printf@f+1,c
   655  001140  EC41  F009         	call	_printf	;wreg free
   656                           
   657                           ;main.c: 148: _delay((unsigned long)((800)*(40000000/4000.0)));
   658  001144  0E29               	movlw	41
   659  001146  6E1A               	movwf	(??_main+1)& (0+255),c
   660  001148  0E96               	movlw	150
   661  00114A  6E19               	movwf	??_main& (0+255),c
   662  00114C  0E7F               	movlw	127
   663  00114E                     u657:
   664  00114E  2EE8               	decfsz	wreg,f,c
   665  001150  D7FE               	bra	u657
   666  001152  2E19               	decfsz	??_main& (0+255),f,c
   667  001154  D7FC               	bra	u657
   668  001156  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   669  001158  D7FA               	bra	u657
   670  00115A  F000               	nop	
   671                           
   672                           ;main.c: 153: I2C_Master_Init(100000);
   673  00115C  0EA0               	movlw	160
   674  00115E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   675  001160  0E86               	movlw	134
   676  001162  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   677  001164  0E01               	movlw	1
   678  001166  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   679  001168  0E00               	movlw	0
   680  00116A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   681  00116C  EC50  F00A         	call	_I2C_Master_Init	;wreg free
   682                           
   683                           ;main.c: 154: I2C_Master_Start();
   684  001170  EC91  F00B         	call	_I2C_Master_Start	;wreg free
   685                           
   686                           ;main.c: 155: I2C_Master_Write(0b00010000);
   687  001174  0E00               	movlw	0
   688  001176  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   689  001178  0E10               	movlw	16
   690  00117A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   691  00117C  EC88  F00B         	call	_I2C_Master_Write	;wreg free
   692                           
   693                           ;main.c: 156: I2C_Master_Stop();
   694  001180  EC8D  F00B         	call	_I2C_Master_Stop	;wreg free
   695                           
   696                           ;main.c: 160: I2C_Master_Start();
   697  001184  EC91  F00B         	call	_I2C_Master_Start	;wreg free
   698                           
   699                           ;main.c: 161: I2C_Master_Write(0b00010000);
   700  001188  0E00               	movlw	0
   701  00118A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   702  00118C  0E10               	movlw	16
   703  00118E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   704  001190  EC88  F00B         	call	_I2C_Master_Write	;wreg free
   705                           
   706                           ;main.c: 162: I2C_Master_Write('2');
   707  001194  0E00               	movlw	0
   708  001196  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   709  001198  0E32               	movlw	50
   710  00119A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   711  00119C  EC88  F00B         	call	_I2C_Master_Write	;wreg free
   712                           
   713                           ;main.c: 163: I2C_Master_Stop();
   714  0011A0  EC8D  F00B         	call	_I2C_Master_Stop	;wreg free
   715                           
   716                           ;main.c: 166: initLCD();
   717  0011A4  ECA7  F00A         	call	_initLCD	;wreg free
   718                           
   719                           ;main.c: 167: motorStart_1();
   720  0011A8  ECF2  F00A         	call	_motorStart_1	;wreg free
   721                           
   722                           ;main.c: 169: N_spacingTime = 0;
   723  0011AC  0E00               	movlw	0
   724  0011AE  6E20               	movwf	_N_spacingTime+1,c
   725  0011B0  0E00               	movlw	0
   726  0011B2  6E1F               	movwf	_N_spacingTime,c
   727                           
   728                           ;main.c: 170: initLCD();
   729  0011B4  ECA7  F00A         	call	_initLCD	;wreg free
   730                           
   731                           ;main.c: 171: printf("%d", N_remain);
   732  0011B8  0E31               	movlw	low (STR_7+12)
   733  0011BA  6E0D               	movwf	printf@f,c
   734  0011BC  0E10               	movlw	high (STR_7+12)
   735  0011BE  6E0E               	movwf	printf@f+1,c
   736  0011C0  C021  F00F         	movff	_N_remain,?_printf+2
   737  0011C4  C022  F010         	movff	_N_remain+1,?_printf+3
   738  0011C8  EC41  F009         	call	_printf	;wreg free
   739  0011CC                     
   740                           ;main.c: 174: if (N_spacingTime >= 30000){
   741  0011CC  BE20               	btfsc	_N_spacingTime+1,7,c
   742  0011CE  D009               	goto	l105
   743  0011D0  0E30               	movlw	48
   744  0011D2  5C1F               	subwf	_N_spacingTime,w,c
   745  0011D4  0E75               	movlw	117
   746  0011D6  5820               	subwfb	_N_spacingTime+1,w,c
   747  0011D8  A0D8               	btfss	status,0,c
   748  0011DA  D003               	goto	l105
   749                           
   750                           ;main.c: 175: motorStop_1();
   751  0011DC  ECCD  F00A         	call	_motorStop_1	;wreg free
   752                           
   753                           ;main.c: 176: break;
   754  0011E0  D038               	goto	l106
   755  0011E2                     l105:
   756                           
   757                           ;main.c: 177: }
   758                           ;main.c: 179: if (readADC(1)<=250 ){
   759  0011E2  0E01               	movlw	1
   760  0011E4  EC38  F00B         	call	_readADC
   761  0011E8  5002               	movf	?_readADC+1,w,c
   762  0011EA  E116               	bnz	l1564
   763  0011EC  0EFB               	movlw	251
   764  0011EE  5C01               	subwf	?_readADC,w,c
   765  0011F0  B0D8               	btfsc	status,0,c
   766  0011F2  D012               	goto	l107
   767                           
   768                           ;main.c: 181: N_remain ++;
   769  0011F4  4A21               	infsnz	_N_remain,f,c
   770  0011F6  2A22               	incf	_N_remain+1,f,c
   771                           
   772                           ;main.c: 182: initLCD();
   773  0011F8  ECA7  F00A         	call	_initLCD	;wreg free
   774                           
   775                           ;main.c: 183: printf("%d", N_remain);
   776  0011FC  0E31               	movlw	low (STR_7+12)
   777  0011FE  6E0D               	movwf	printf@f,c
   778  001200  0E10               	movlw	high (STR_7+12)
   779  001202  6E0E               	movwf	printf@f+1,c
   780  001204  C021  F00F         	movff	_N_remain,?_printf+2
   781  001208  C022  F010         	movff	_N_remain+1,?_printf+3
   782  00120C  EC41  F009         	call	_printf	;wreg free
   783                           
   784                           ;main.c: 185: N_spacingTime = 0;
   785  001210  0E00               	movlw	0
   786  001212  6E20               	movwf	_N_spacingTime+1,c
   787  001214  0E00               	movlw	0
   788  001216  6E1F               	movwf	_N_spacingTime,c
   789  001218                     l107:
   790  001218                     l1564:
   791                           
   792                           ;main.c: 187: }
   793                           ;main.c: 194: lcdInst(0xC0);;
   794  001218  0EC0               	movlw	192
   795  00121A  EC75  F00B         	call	_lcdInst
   796                           
   797                           ;main.c: 195: printf("%d",N_spacingTime);
   798  00121E  0E31               	movlw	low (STR_7+12)
   799  001220  6E0D               	movwf	printf@f,c
   800  001222  0E10               	movlw	high (STR_7+12)
   801  001224  6E0E               	movwf	printf@f+1,c
   802  001226  C01F  F00F         	movff	_N_spacingTime,?_printf+2
   803  00122A  C020  F010         	movff	_N_spacingTime+1,?_printf+3
   804  00122E  EC41  F009         	call	_printf	;wreg free
   805                           
   806                           ;main.c: 197: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   807  001232  0E80               	movlw	128
   808  001234  EC75  F00B         	call	_lcdInst
   809  001238  0E41               	movlw	65
   810  00123A  6E19               	movwf	??_main& (0+255),c
   811  00123C  0EEE               	movlw	238
   812  00123E                     u667:
   813  00123E  2EE8               	decfsz	wreg,f,c
   814  001240  D7FE               	bra	u667
   815  001242  2E19               	decfsz	??_main& (0+255),f,c
   816  001244  D7FC               	bra	u667
   817  001246  D000               	nop2	
   818                           
   819                           ;main.c: 200: N_spacingTime +=200;
   820  001248  0EC8               	movlw	200
   821  00124A  261F               	addwf	_N_spacingTime,f,c
   822  00124C  0E00               	movlw	0
   823  00124E  2220               	addwfc	_N_spacingTime+1,f,c
   824  001250  D7BD               	goto	l104
   825  001252                     l106:
   826                           
   827                           ;main.c: 208: initLCD();
   828                           
   829                           ;main.c: 203: }
   830                           ;main.c: 207: while(1){
   831  001252  ECA7  F00A         	call	_initLCD	;wreg free
   832                           
   833                           ;main.c: 209: printf("remain Nuts:%d",N_remain);
   834  001256  0E25               	movlw	low STR_7
   835  001258  6E0D               	movwf	printf@f,c
   836  00125A  0E10               	movlw	high STR_7
   837  00125C  6E0E               	movwf	printf@f+1,c
   838  00125E  C021  F00F         	movff	_N_remain,?_printf+2
   839  001262  C022  F010         	movff	_N_remain+1,?_printf+3
   840  001266  EC41  F009         	call	_printf	;wreg free
   841                           
   842                           ;main.c: 210: _delay((unsigned long)((1000)*(40000000/4000.0)));
   843  00126A  0E33               	movlw	51
   844  00126C  6E1A               	movwf	(??_main+1)& (0+255),c
   845  00126E  0EBB               	movlw	187
   846  001270  6E19               	movwf	??_main& (0+255),c
   847  001272  0EE0               	movlw	224
   848  001274                     u677:
   849  001274  2EE8               	decfsz	wreg,f,c
   850  001276  D7FE               	bra	u677
   851  001278  2E19               	decfsz	??_main& (0+255),f,c
   852  00127A  D7FC               	bra	u677
   853  00127C  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   854  00127E  D7FA               	bra	u677
   855  001280  D7E8               	goto	l106
   856  001282                     __end_of_main:
   857                           	opt stack 0
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           status	equ	0xFD8
   865                           
   866 ;; *************** function _readADC *****************
   867 ;; Defined at:
   868 ;;		line 215 in file "main.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  channel         1    wreg     unsigned char 
   871 ;; Auto vars:     Size  Location     Type
   872 ;;  channel         1    4[COMRAM] unsigned char 
   873 ;; Return value:  Size  Location     Type
   874 ;;                  2    0[COMRAM] unsigned short 
   875 ;; Registers used:
   876 ;;		wreg, status,2, status,0
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;Total ram usage:        5 bytes
   887 ;; Hardware stack levels used:    1
   888 ;; This function calls:
   889 ;;		Nothing
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text1
   896  001670                     __ptext1:
   897                           	opt stack 0
   898  001670                     _readADC:
   899                           	opt stack 30
   900                           
   901                           ;incstack = 0
   902                           ;readADC@channel stored from wreg
   903  001670  6E05               	movwf	readADC@channel,c
   904                           
   905                           ;main.c: 224: ADCON0 = (channel & 0x0F) << 2;
   906  001672  C005  F003         	movff	readADC@channel,??_readADC
   907  001676  0E0F               	movlw	15
   908  001678  1603               	andwf	??_readADC,f,c
   909  00167A  90D8               	bcf	status,0,c
   910  00167C  3603               	rlcf	??_readADC,f,c
   911  00167E  90D8               	bcf	status,0,c
   912  001680  3403               	rlcf	??_readADC,w,c
   913  001682  6EC2               	movwf	4034,c	;volatile
   914                           
   915                           ;main.c: 225: ADON = 1;
   916  001684  80C2               	bsf	4034,0,c	;volatile
   917                           
   918                           ;main.c: 226: ADCON0bits.GO = 1;
   919  001686  82C2               	bsf	4034,1,c	;volatile
   920  001688  B2C2               	btfsc	4034,1,c	;volatile
   921  00168A  D7FE               	goto	l116
   922                           
   923                           ;main.c: 228: analog_result = ADRESL + (ADRESH*256);
   924  00168C  50C4               	movf	4036,w,c	;volatile
   925  00168E  6E04               	movwf	(??_readADC+1)& (0+255),c
   926  001690  6A03               	clrf	??_readADC& (0+255),c
   927  001692  50C3               	movf	4035,w,c	;volatile
   928  001694  2403               	addwf	??_readADC,w,c
   929  001696  6E1D               	movwf	_analog_result,c
   930  001698  0E00               	movlw	0
   931  00169A  2004               	addwfc	??_readADC+1,w,c
   932  00169C  6E1E               	movwf	_analog_result+1,c
   933                           
   934                           ;main.c: 229: return analog_result;
   935  00169E  C01D  F001         	movff	_analog_result,?_readADC
   936  0016A2  C01E  F002         	movff	_analog_result+1,?_readADC+1
   937  0016A6  0012               	return	
   938  0016A8                     __end_of_readADC:
   939                           	opt stack 0
   940                           tblptru	equ	0xFF8
   941                           tblptrh	equ	0xFF7
   942                           tblptrl	equ	0xFF6
   943                           tablat	equ	0xFF5
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           status	equ	0xFD8
   947                           
   948 ;; *************** function _printf *****************
   949 ;; Defined at:
   950 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;  f               2   12[COMRAM] PTR const unsigned char 
   953 ;;		 -> STR_7(15), STR_6(3), STR_5(3), STR_4(3), 
   954 ;;		 -> STR_3(5), STR_2(3), STR_1(3), 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  tmpval          4    0        struct .
   957 ;;  cp              3    0        PTR const unsigned char 
   958 ;;  val             2   21[COMRAM] unsigned int 
   959 ;;  ap              2   17[COMRAM] PTR void [1]
   960 ;;		 -> ?_printf(2), 
   961 ;;  len             2    0        unsigned int 
   962 ;;  c               1   23[COMRAM] char 
   963 ;;  prec            1   20[COMRAM] char 
   964 ;;  flag            1   19[COMRAM] unsigned char 
   965 ;; Return value:  Size  Location     Type
   966 ;;                  2   12[COMRAM] int 
   967 ;; Registers used:
   968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   974 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   975 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   977 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   978 ;;Total ram usage:       12 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; Hardware stack levels required when called:    2
   981 ;; This function calls:
   982 ;;		___lwdiv
   983 ;;		___lwmod
   984 ;;		_putch
   985 ;; This function is called by:
   986 ;;		_main
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text2
   991  001282                     __ptext2:
   992                           	opt stack 0
   993  001282                     _printf:
   994                           	opt stack 28
   995                           
   996                           ;doprnt.c: 466: va_list ap;
   997                           ;doprnt.c: 499: signed char c;
   998                           ;doprnt.c: 506: signed char prec;
   999                           ;doprnt.c: 508: unsigned char flag;
  1000                           ;doprnt.c: 523: union {
  1001                           ;doprnt.c: 524: unsigned long vd;
  1002                           ;doprnt.c: 525: double integ;
  1003                           ;doprnt.c: 526: } tmpval;
  1004                           ;doprnt.c: 528: unsigned int val;
  1005                           ;doprnt.c: 529: unsigned len;
  1006                           ;doprnt.c: 530: const char * cp;
  1007                           ;doprnt.c: 533: *ap = __va_start();
  1008                           
  1009                           ;incstack = 0
  1010  001282  0E0F               	movlw	low (?_printf+2)
  1011  001284  6E12               	movwf	printf@ap,c
  1012  001286  0E00               	movlw	high (?_printf+2)
  1013  001288  6E13               	movwf	printf@ap+1,c
  1014                           
  1015                           ;doprnt.c: 536: while(c = *f++) {
  1016  00128A  D07D               	goto	u570
  1017  00128C                     
  1018                           ;doprnt.c: 538: if(c != '%')
  1019  00128C  0E25               	movlw	37
  1020  00128E  1818               	xorwf	printf@c,w,c
  1021  001290  B4D8               	btfsc	status,2,c
  1022  001292  D004               	goto	l265
  1023                           
  1024                           ;doprnt.c: 540: {
  1025                           ;doprnt.c: 541: (putch(c) );
  1026  001294  5018               	movf	printf@c,w,c
  1027  001296  EC6B  F00B         	call	_putch
  1028                           
  1029                           ;doprnt.c: 542: continue;
  1030  00129A  D075               	goto	u570
  1031  00129C                     l265:
  1032                           
  1033                           ;doprnt.c: 543: }
  1034                           ;doprnt.c: 548: flag = 0;
  1035  00129C  0E00               	movlw	0
  1036  00129E  6E14               	movwf	printf@flag,c
  1037                           
  1038                           ;doprnt.c: 822: }
  1039                           
  1040                           ;doprnt.c: 813: continue;
  1041                           
  1042                           ;doprnt.c: 802: default:
  1043                           
  1044                           ;doprnt.c: 698: case 'i':
  1045                           ;doprnt.c: 699: break;
  1046                           
  1047                           ;doprnt.c: 697: case 'd':
  1048                           
  1049                           ;doprnt.c: 638: goto alldone;
  1050                           
  1051                           ;doprnt.c: 637: case 0:
  1052                           
  1053                           ;doprnt.c: 635: switch(c = *f++) {
  1054  0012A0  C00D  FFF6         	movff	printf@f,tblptrl
  1055  0012A4  C00E  FFF7         	movff	printf@f+1,tblptrh
  1056  0012A8  4A0D               	infsnz	printf@f,f,c
  1057  0012AA  2A0E               	incf	printf@f+1,f,c
  1058  0012AC                     	if	0	;tblptru may be non-zero
  1059  0012AC                     	endif
  1060  0012AC                     	if	0	;tblptru may be non-zero
  1061  0012AC                     	endif
  1062  0012AC  0008               	tblrd		*
  1063  0012AE  CFF5 F018          	movff	tablat,printf@c
  1064  0012B2  5018               	movf	printf@c,w,c
  1065                           
  1066                           ; Switch size 1, requested type "space"
  1067                           ; Number of cases is 3, Range of values is 0 to 105
  1068                           ; switch strategies available:
  1069                           ; Name         Instructions Cycles
  1070                           ; simple_byte           10     6 (average)
  1071                           ;	Chosen strategy is simple_byte
  1072  0012B4  0A00               	xorlw	0	; case 0
  1073  0012B6  B4D8               	btfsc	status,2,c
  1074  0012B8  0012               	return	
  1075  0012BA  0A64               	xorlw	100	; case 100
  1076  0012BC  B4D8               	btfsc	status,2,c
  1077  0012BE  D003               	goto	l271
  1078  0012C0  0A0D               	xorlw	13	; case 105
  1079  0012C2  A4D8               	btfss	status,2,c
  1080  0012C4  D060               	goto	u570
  1081  0012C6                     l271:
  1082                           
  1083                           ;doprnt.c: 1253: {
  1084                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1085  0012C6  C012  FFD9         	movff	printf@ap,fsr2l
  1086  0012CA  C013  FFDA         	movff	printf@ap+1,fsr2h
  1087  0012CE  CFDE F016          	movff	postinc2,printf@val
  1088  0012D2  CFDD F017          	movff	postdec2,printf@val+1
  1089  0012D6  0E02               	movlw	2
  1090  0012D8  2612               	addwf	printf@ap,f,c
  1091  0012DA  0E00               	movlw	0
  1092  0012DC  2213               	addwfc	printf@ap+1,f,c
  1093                           
  1094                           ;doprnt.c: 1261: if((int)val < 0) {
  1095  0012DE  AE17               	btfss	printf@val+1,7,c
  1096  0012E0  D006               	goto	l273
  1097                           
  1098                           ;doprnt.c: 1262: flag |= 0x03;
  1099  0012E2  0E03               	movlw	3
  1100  0012E4  1214               	iorwf	printf@flag,f,c
  1101                           
  1102                           ;doprnt.c: 1263: val = -val;
  1103  0012E6  6C16               	negf	printf@val,c
  1104  0012E8  1E17               	comf	printf@val+1,f,c
  1105  0012EA  B0D8               	btfsc	status,0,c
  1106  0012EC  2A17               	incf	printf@val+1,f,c
  1107  0012EE                     l273:
  1108                           
  1109                           ;doprnt.c: 1264: }
  1110                           ;doprnt.c: 1266: }
  1111                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1112  0012EE  0E01               	movlw	1
  1113  0012F0  6E18               	movwf	printf@c,c
  1114  0012F2                     l1430:
  1115  0012F2  0E05               	movlw	5
  1116  0012F4  1818               	xorwf	printf@c,w,c
  1117  0012F6  B4D8               	btfsc	status,2,c
  1118  0012F8  D012               	goto	u550
  1119                           
  1120                           ;doprnt.c: 1306: if(val < dpowers[c])
  1121  0012FA  5018               	movf	printf@c,w,c
  1122  0012FC  0D02               	mullw	2
  1123  0012FE  0E12               	movlw	low _dpowers
  1124  001300  24F3               	addwf	prodl,w,c
  1125  001302  6EF6               	movwf	tblptrl,c
  1126  001304  0E10               	movlw	high _dpowers
  1127  001306  20F4               	addwfc	prodh,w,c
  1128  001308  6EF7               	movwf	tblptrh,c
  1129  00130A                     	if	0	;There are less than 3 active tblptr bytes
  1130  00130A                     	endif
  1131  00130A  0009               	tblrd		*+
  1132  00130C  50F5               	movf	tablat,w,c
  1133  00130E  5C16               	subwf	printf@val,w,c
  1134  001310  0009               	tblrd		*+
  1135  001312  50F5               	movf	tablat,w,c
  1136  001314  5817               	subwfb	printf@val+1,w,c
  1137  001316  A0D8               	btfss	status,0,c
  1138  001318  D002               	goto	u550
  1139                           
  1140                           ;doprnt.c: 1307: break;
  1141  00131A  2A18               	incf	printf@c,f,c
  1142  00131C  D7EA               	goto	l1430
  1143  00131E                     u550:
  1144                           
  1145                           ;doprnt.c: 1422: {
  1146                           ;doprnt.c: 1438: if(flag & 0x03)
  1147  00131E  C014  F011         	movff	printf@flag,??_printf
  1148  001322  0E03               	movlw	3
  1149  001324  1611               	andwf	??_printf,f,c
  1150  001326  B4D8               	btfsc	status,2,c
  1151  001328  D003               	goto	l277
  1152                           
  1153                           ;doprnt.c: 1439: (putch('-') );
  1154  00132A  0E2D               	movlw	45
  1155  00132C  EC6B  F00B         	call	_putch
  1156  001330                     l277:
  1157                           
  1158                           ;doprnt.c: 1469: }
  1159                           ;doprnt.c: 1472: prec = c;
  1160  001330  C018  F015         	movff	printf@c,printf@prec
  1161                           
  1162                           ;doprnt.c: 1474: while(prec--) {
  1163  001334  D024               	goto	l278
  1164  001336                     
  1165                           ;doprnt.c: 1478: {
  1166                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1167  001336  5015               	movf	printf@prec,w,c
  1168  001338  0D02               	mullw	2
  1169  00133A  0E12               	movlw	low _dpowers
  1170  00133C  24F3               	addwf	prodl,w,c
  1171  00133E  6EF6               	movwf	tblptrl,c
  1172  001340  0E10               	movlw	high _dpowers
  1173  001342  20F4               	addwfc	prodh,w,c
  1174  001344  6EF7               	movwf	tblptrh,c
  1175  001346                     	if	0	;There are less than 3 active tblptr bytes
  1176  001346                     	endif
  1177  001346  0009               	tblrd		*+
  1178  001348  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1179  00134C  000A               	tblrd		*-
  1180  00134E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1181  001352  C016  F001         	movff	printf@val,___lwdiv@dividend
  1182  001356  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1183  00135A  EC7E  F00A         	call	___lwdiv	;wreg free
  1184  00135E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1185  001362  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1186  001366  0E00               	movlw	0
  1187  001368  6E0B               	movwf	___lwmod@divisor+1,c
  1188  00136A  0E0A               	movlw	10
  1189  00136C  6E0A               	movwf	___lwmod@divisor,c
  1190  00136E  EC17  F00B         	call	___lwmod	;wreg free
  1191  001372  5008               	movf	?___lwmod,w,c
  1192  001374  0F30               	addlw	48
  1193  001376  6E18               	movwf	printf@c,c
  1194                           
  1195                           ;doprnt.c: 1523: }
  1196                           ;doprnt.c: 1524: (putch(c) );
  1197  001378  5018               	movf	printf@c,w,c
  1198  00137A  EC6B  F00B         	call	_putch
  1199  00137E                     l278:
  1200  00137E  0615               	decf	printf@prec,f,c
  1201  001380  2815               	incf	printf@prec,w,c
  1202  001382  A4D8               	btfss	status,2,c
  1203  001384  D7D8               	goto	l279
  1204  001386                     u570:
  1205  001386  C00D  FFF6         	movff	printf@f,tblptrl
  1206  00138A  C00E  FFF7         	movff	printf@f+1,tblptrh
  1207  00138E  4A0D               	infsnz	printf@f,f,c
  1208  001390  2A0E               	incf	printf@f+1,f,c
  1209  001392                     	if	0	;tblptru may be non-zero
  1210  001392                     	endif
  1211  001392                     	if	0	;tblptru may be non-zero
  1212  001392                     	endif
  1213  001392  0008               	tblrd		*
  1214  001394  CFF5 F018          	movff	tablat,printf@c
  1215  001398  5018               	movf	printf@c,w,c
  1216  00139A  B4D8               	btfsc	status,2,c
  1217  00139C  0012               	return	
  1218  00139E  D776               	goto	l264
  1219  0013A0                     __end_of_printf:
  1220                           	opt stack 0
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           prodh	equ	0xFF4
  1226                           prodl	equ	0xFF3
  1227                           postinc0	equ	0xFEE
  1228                           wreg	equ	0xFE8
  1229                           postinc2	equ	0xFDE
  1230                           postdec2	equ	0xFDD
  1231                           fsr2h	equ	0xFDA
  1232                           fsr2l	equ	0xFD9
  1233                           status	equ	0xFD8
  1234                           
  1235 ;; *************** function _putch *****************
  1236 ;; Defined at:
  1237 ;;		line 24 in file "lcd.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;  data            1    wreg     unsigned char 
  1240 ;; Auto vars:     Size  Location     Type
  1241 ;;  data            1    2[COMRAM] unsigned char 
  1242 ;; Return value:  Size  Location     Type
  1243 ;;                  1    wreg      void 
  1244 ;; Registers used:
  1245 ;;		wreg, status,2, status,0, cstack
  1246 ;; Tracked objects:
  1247 ;;		On entry : 0/0
  1248 ;;		On exit  : 0/0
  1249 ;;		Unchanged: 0/0
  1250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;Total ram usage:        1 bytes
  1256 ;; Hardware stack levels used:    1
  1257 ;; Hardware stack levels required when called:    1
  1258 ;; This function calls:
  1259 ;;		_lcdNibble
  1260 ;; This function is called by:
  1261 ;;		_printf
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text3
  1266  0016D6                     __ptext3:
  1267                           	opt stack 0
  1268  0016D6                     _putch:
  1269                           	opt stack 28
  1270                           
  1271                           ;incstack = 0
  1272                           ;putch@data stored from wreg
  1273  0016D6  6E03               	movwf	putch@data,c
  1274                           
  1275                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1276  0016D8  848C               	bsf	3980,2,c	;volatile
  1277                           
  1278                           ;lcd.c: 33: lcdNibble(data);
  1279  0016DA  5003               	movf	putch@data,w,c
  1280  0016DC  EC11  F00A         	call	_lcdNibble
  1281                           
  1282                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1283  0016E0  0EC8               	movlw	200
  1284  0016E2                     u687:
  1285  0016E2  D000               	nop2	
  1286  0016E4  2EE8               	decfsz	wreg,f,c
  1287  0016E6  D7FD               	bra	u687
  1288  0016E8  0012               	return		;funcret
  1289  0016EA                     __end_of_putch:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           prodh	equ	0xFF4
  1296                           prodl	equ	0xFF3
  1297                           postinc0	equ	0xFEE
  1298                           wreg	equ	0xFE8
  1299                           postinc2	equ	0xFDE
  1300                           postdec2	equ	0xFDD
  1301                           fsr2h	equ	0xFDA
  1302                           fsr2l	equ	0xFD9
  1303                           status	equ	0xFD8
  1304                           
  1305 ;; *************** function ___lwmod *****************
  1306 ;; Defined at:
  1307 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  dividend        2    7[COMRAM] unsigned int 
  1310 ;;  divisor         2    9[COMRAM] unsigned int 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;  counter         1   11[COMRAM] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  2    7[COMRAM] unsigned int 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;Total ram usage:        5 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; This function calls:
  1329 ;;		Nothing
  1330 ;; This function is called by:
  1331 ;;		_printf
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text4
  1336  00162E                     __ptext4:
  1337                           	opt stack 0
  1338  00162E                     ___lwmod:
  1339                           	opt stack 29
  1340                           
  1341                           ;incstack = 0
  1342  00162E  500A               	movf	___lwmod@divisor,w,c
  1343  001630  100B               	iorwf	___lwmod@divisor+1,w,c
  1344  001632  B4D8               	btfsc	status,2,c
  1345  001634  D018               	goto	l701
  1346  001636  0E01               	movlw	1
  1347  001638  6E0C               	movwf	___lwmod@counter,c
  1348  00163A  D004               	goto	l696
  1349  00163C  90D8               	bcf	status,0,c
  1350  00163E  360A               	rlcf	___lwmod@divisor,f,c
  1351  001640  360B               	rlcf	___lwmod@divisor+1,f,c
  1352  001642  2A0C               	incf	___lwmod@counter,f,c
  1353  001644                     l696:
  1354  001644  AE0B               	btfss	___lwmod@divisor+1,7,c
  1355  001646  D7FA               	goto	l697
  1356  001648                     u490:
  1357  001648  500A               	movf	___lwmod@divisor,w,c
  1358  00164A  5C08               	subwf	___lwmod@dividend,w,c
  1359  00164C  500B               	movf	___lwmod@divisor+1,w,c
  1360  00164E  5809               	subwfb	___lwmod@dividend+1,w,c
  1361  001650  A0D8               	btfss	status,0,c
  1362  001652  D004               	goto	l700
  1363  001654  500A               	movf	___lwmod@divisor,w,c
  1364  001656  5E08               	subwf	___lwmod@dividend,f,c
  1365  001658  500B               	movf	___lwmod@divisor+1,w,c
  1366  00165A  5A09               	subwfb	___lwmod@dividend+1,f,c
  1367  00165C                     l700:
  1368  00165C  90D8               	bcf	status,0,c
  1369  00165E  320B               	rrcf	___lwmod@divisor+1,f,c
  1370  001660  320A               	rrcf	___lwmod@divisor,f,c
  1371  001662  2E0C               	decfsz	___lwmod@counter,f,c
  1372  001664  D7F1               	goto	u490
  1373  001666                     l701:
  1374  001666  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1375  00166A  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1376  00166E  0012               	return		;funcret
  1377  001670                     __end_of___lwmod:
  1378                           	opt stack 0
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           prodh	equ	0xFF4
  1384                           prodl	equ	0xFF3
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postinc2	equ	0xFDE
  1388                           postdec2	equ	0xFDD
  1389                           fsr2h	equ	0xFDA
  1390                           fsr2l	equ	0xFD9
  1391                           status	equ	0xFD8
  1392                           
  1393 ;; *************** function ___lwdiv *****************
  1394 ;; Defined at:
  1395 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  dividend        2    0[COMRAM] unsigned int 
  1398 ;;  divisor         2    2[COMRAM] unsigned int 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  quotient        2    4[COMRAM] unsigned int 
  1401 ;;  counter         1    6[COMRAM] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  2    0[COMRAM] unsigned int 
  1404 ;; Registers used:
  1405 ;;		wreg, status,2, status,0
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1411 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;Total ram usage:        7 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; This function calls:
  1418 ;;		Nothing
  1419 ;; This function is called by:
  1420 ;;		_printf
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text5
  1425  0014FC                     __ptext5:
  1426                           	opt stack 0
  1427  0014FC                     ___lwdiv:
  1428                           	opt stack 29
  1429                           
  1430                           ;incstack = 0
  1431  0014FC  0E00               	movlw	0
  1432  0014FE  6E06               	movwf	___lwdiv@quotient+1,c
  1433  001500  0E00               	movlw	0
  1434  001502  6E05               	movwf	___lwdiv@quotient,c
  1435  001504  5003               	movf	___lwdiv@divisor,w,c
  1436  001506  1004               	iorwf	___lwdiv@divisor+1,w,c
  1437  001508  B4D8               	btfsc	status,2,c
  1438  00150A  D01C               	goto	l691
  1439  00150C  0E01               	movlw	1
  1440  00150E  6E07               	movwf	___lwdiv@counter,c
  1441  001510  D004               	goto	l686
  1442  001512  90D8               	bcf	status,0,c
  1443  001514  3603               	rlcf	___lwdiv@divisor,f,c
  1444  001516  3604               	rlcf	___lwdiv@divisor+1,f,c
  1445  001518  2A07               	incf	___lwdiv@counter,f,c
  1446  00151A                     l686:
  1447  00151A  AE04               	btfss	___lwdiv@divisor+1,7,c
  1448  00151C  D7FA               	goto	l687
  1449  00151E                     u460:
  1450  00151E  90D8               	bcf	status,0,c
  1451  001520  3605               	rlcf	___lwdiv@quotient,f,c
  1452  001522  3606               	rlcf	___lwdiv@quotient+1,f,c
  1453  001524  5003               	movf	___lwdiv@divisor,w,c
  1454  001526  5C01               	subwf	___lwdiv@dividend,w,c
  1455  001528  5004               	movf	___lwdiv@divisor+1,w,c
  1456  00152A  5802               	subwfb	___lwdiv@dividend+1,w,c
  1457  00152C  A0D8               	btfss	status,0,c
  1458  00152E  D005               	goto	l690
  1459  001530  5003               	movf	___lwdiv@divisor,w,c
  1460  001532  5E01               	subwf	___lwdiv@dividend,f,c
  1461  001534  5004               	movf	___lwdiv@divisor+1,w,c
  1462  001536  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1463  001538  8005               	bsf	___lwdiv@quotient,0,c
  1464  00153A                     l690:
  1465  00153A  90D8               	bcf	status,0,c
  1466  00153C  3204               	rrcf	___lwdiv@divisor+1,f,c
  1467  00153E  3203               	rrcf	___lwdiv@divisor,f,c
  1468  001540  2E07               	decfsz	___lwdiv@counter,f,c
  1469  001542  D7ED               	goto	u460
  1470  001544                     l691:
  1471  001544  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1472  001548  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1473  00154C  0012               	return		;funcret
  1474  00154E                     __end_of___lwdiv:
  1475                           	opt stack 0
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           prodh	equ	0xFF4
  1481                           prodl	equ	0xFF3
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postinc2	equ	0xFDE
  1485                           postdec2	equ	0xFDD
  1486                           fsr2h	equ	0xFDA
  1487                           fsr2l	equ	0xFD9
  1488                           status	equ	0xFD8
  1489                           
  1490 ;; *************** function _motorStop_1 *****************
  1491 ;; Defined at:
  1492 ;;		line 282 in file "main.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;		None
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg, status,2, status,0, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;Total ram usage:        0 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    2
  1513 ;; This function calls:
  1514 ;;		_I2C_Master_Init
  1515 ;;		_I2C_Master_Start
  1516 ;;		_I2C_Master_Stop
  1517 ;;		_I2C_Master_Write
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text6
  1524  00159A                     __ptext6:
  1525                           	opt stack 0
  1526  00159A                     _motorStop_1:
  1527                           	opt stack 28
  1528                           
  1529                           ;main.c: 283: I2C_Master_Init(100000);
  1530                           
  1531                           ;incstack = 0
  1532  00159A  0EA0               	movlw	160
  1533  00159C  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1534  00159E  0E86               	movlw	134
  1535  0015A0  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1536  0015A2  0E01               	movlw	1
  1537  0015A4  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1538  0015A6  0E00               	movlw	0
  1539  0015A8  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1540  0015AA  EC50  F00A         	call	_I2C_Master_Init	;wreg free
  1541                           
  1542                           ;main.c: 284: I2C_Master_Start();
  1543  0015AE  EC91  F00B         	call	_I2C_Master_Start	;wreg free
  1544                           
  1545                           ;main.c: 286: I2C_Master_Write(0b00010000);
  1546  0015B2  0E00               	movlw	0
  1547  0015B4  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1548  0015B6  0E10               	movlw	16
  1549  0015B8  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1550  0015BA  EC88  F00B         	call	_I2C_Master_Write	;wreg free
  1551                           
  1552                           ;main.c: 287: I2C_Master_Stop();
  1553  0015BE  EC8D  F00B         	call	_I2C_Master_Stop	;wreg free
  1554                           
  1555                           ;main.c: 290: I2C_Master_Start();
  1556  0015C2  EC91  F00B         	call	_I2C_Master_Start	;wreg free
  1557                           
  1558                           ;main.c: 291: I2C_Master_Write(0b00010000);
  1559  0015C6  0E00               	movlw	0
  1560  0015C8  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1561  0015CA  0E10               	movlw	16
  1562  0015CC  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1563  0015CE  EC88  F00B         	call	_I2C_Master_Write	;wreg free
  1564                           
  1565                           ;main.c: 292: I2C_Master_Write('6');
  1566  0015D2  0E00               	movlw	0
  1567  0015D4  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1568  0015D6  0E36               	movlw	54
  1569  0015D8  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1570  0015DA  EC88  F00B         	call	_I2C_Master_Write	;wreg free
  1571                           
  1572                           ;main.c: 293: I2C_Master_Stop();
  1573  0015DE  EC8D  F00B         	call	_I2C_Master_Stop	;wreg free
  1574  0015E2  0012               	return		;funcret
  1575  0015E4                     __end_of_motorStop_1:
  1576                           	opt stack 0
  1577                           tblptru	equ	0xFF8
  1578                           tblptrh	equ	0xFF7
  1579                           tblptrl	equ	0xFF6
  1580                           tablat	equ	0xFF5
  1581                           prodh	equ	0xFF4
  1582                           prodl	equ	0xFF3
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postinc2	equ	0xFDE
  1586                           postdec2	equ	0xFDD
  1587                           fsr2h	equ	0xFDA
  1588                           fsr2l	equ	0xFD9
  1589                           status	equ	0xFD8
  1590                           
  1591 ;; *************** function _motorStart_1 *****************
  1592 ;; Defined at:
  1593 ;;		line 267 in file "main.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;		None
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		wreg, status,2, status,0, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;Total ram usage:        0 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    2
  1614 ;; This function calls:
  1615 ;;		_I2C_Master_Init
  1616 ;;		_I2C_Master_Start
  1617 ;;		_I2C_Master_Stop
  1618 ;;		_I2C_Master_Write
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text7
  1625  0015E4                     __ptext7:
  1626                           	opt stack 0
  1627  0015E4                     _motorStart_1:
  1628                           	opt stack 28
  1629                           
  1630                           ;main.c: 268: I2C_Master_Init(100000);
  1631                           
  1632                           ;incstack = 0
  1633  0015E4  0EA0               	movlw	160
  1634  0015E6  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1635  0015E8  0E86               	movlw	134
  1636  0015EA  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1637  0015EC  0E01               	movlw	1
  1638  0015EE  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1639  0015F0  0E00               	movlw	0
  1640  0015F2  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1641  0015F4  EC50  F00A         	call	_I2C_Master_Init	;wreg free
  1642                           
  1643                           ;main.c: 269: I2C_Master_Start();
  1644  0015F8  EC91  F00B         	call	_I2C_Master_Start	;wreg free
  1645                           
  1646                           ;main.c: 271: I2C_Master_Write(0b00010000);
  1647  0015FC  0E00               	movlw	0
  1648  0015FE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1649  001600  0E10               	movlw	16
  1650  001602  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1651  001604  EC88  F00B         	call	_I2C_Master_Write	;wreg free
  1652                           
  1653                           ;main.c: 272: I2C_Master_Stop();
  1654  001608  EC8D  F00B         	call	_I2C_Master_Stop	;wreg free
  1655                           
  1656                           ;main.c: 275: I2C_Master_Start();
  1657  00160C  EC91  F00B         	call	_I2C_Master_Start	;wreg free
  1658                           
  1659                           ;main.c: 276: I2C_Master_Write(0b00010000);
  1660  001610  0E00               	movlw	0
  1661  001612  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1662  001614  0E10               	movlw	16
  1663  001616  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1664  001618  EC88  F00B         	call	_I2C_Master_Write	;wreg free
  1665                           
  1666                           ;main.c: 277: I2C_Master_Write('5');
  1667  00161C  0E00               	movlw	0
  1668  00161E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1669  001620  0E35               	movlw	53
  1670  001622  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1671  001624  EC88  F00B         	call	_I2C_Master_Write	;wreg free
  1672                           
  1673                           ;main.c: 278: I2C_Master_Stop();
  1674  001628  EC8D  F00B         	call	_I2C_Master_Stop	;wreg free
  1675  00162C  0012               	return		;funcret
  1676  00162E                     __end_of_motorStart_1:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           postinc0	equ	0xFEE
  1685                           wreg	equ	0xFE8
  1686                           postinc2	equ	0xFDE
  1687                           postdec2	equ	0xFDD
  1688                           fsr2h	equ	0xFDA
  1689                           fsr2l	equ	0xFD9
  1690                           status	equ	0xFD8
  1691                           
  1692 ;; *************** function _I2C_Master_Write *****************
  1693 ;; Defined at:
  1694 ;;		line 108 in file "I2C.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;		None
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  1    wreg      void 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0, cstack
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1708 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;Total ram usage:        2 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    1
  1715 ;; This function calls:
  1716 ;;		_I2C_Master_Wait
  1717 ;; This function is called by:
  1718 ;;		_main
  1719 ;;		_motorStart_1
  1720 ;;		_motorStop_1
  1721 ;;		_motorStart_0
  1722 ;;		_motorStop_0
  1723 ;;		_motorStart_2
  1724 ;;		_motorStop_2
  1725 ;;		_motorStart_3
  1726 ;;		_motorStop_3
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text8
  1731  001710                     __ptext8:
  1732                           	opt stack 0
  1733  001710                     _I2C_Master_Write:
  1734                           	opt stack 28
  1735                           
  1736                           ;I2C.c: 116: I2C_Master_Wait();
  1737                           
  1738                           ;incstack = 0
  1739  001710  EC7F  F00B         	call	_I2C_Master_Wait	;wreg free
  1740                           
  1741                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1742  001714  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1743  001718  0012               	return		;funcret
  1744  00171A                     __end_of_I2C_Master_Write:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           prodh	equ	0xFF4
  1751                           prodl	equ	0xFF3
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           postinc2	equ	0xFDE
  1755                           postdec2	equ	0xFDD
  1756                           fsr2h	equ	0xFDA
  1757                           fsr2l	equ	0xFD9
  1758                           status	equ	0xFD8
  1759                           
  1760 ;; *************** function _I2C_Master_Stop *****************
  1761 ;; Defined at:
  1762 ;;		line 95 in file "I2C.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg, status,2, status,0, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1780 ;;Total ram usage:        0 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    1
  1783 ;; This function calls:
  1784 ;;		_I2C_Master_Wait
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;;		_motorStart_1
  1788 ;;		_motorStop_1
  1789 ;;		_motorStart_0
  1790 ;;		_motorStop_0
  1791 ;;		_motorStart_2
  1792 ;;		_motorStop_2
  1793 ;;		_motorStart_3
  1794 ;;		_motorStop_3
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text9
  1799  00171A                     __ptext9:
  1800                           	opt stack 0
  1801  00171A                     _I2C_Master_Stop:
  1802                           	opt stack 28
  1803                           
  1804                           ;I2C.c: 104: I2C_Master_Wait();
  1805                           
  1806                           ;incstack = 0
  1807  00171A  EC7F  F00B         	call	_I2C_Master_Wait	;wreg free
  1808                           
  1809                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1810  00171E  84C5               	bsf	4037,2,c	;volatile
  1811  001720  0012               	return		;funcret
  1812  001722                     __end_of_I2C_Master_Stop:
  1813                           	opt stack 0
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           prodh	equ	0xFF4
  1819                           prodl	equ	0xFF3
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postinc2	equ	0xFDE
  1823                           postdec2	equ	0xFDD
  1824                           fsr2h	equ	0xFDA
  1825                           fsr2l	equ	0xFD9
  1826                           status	equ	0xFD8
  1827                           
  1828 ;; *************** function _I2C_Master_Start *****************
  1829 ;; Defined at:
  1830 ;;		line 69 in file "I2C.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, status,0, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;Total ram usage:        0 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    1
  1851 ;; This function calls:
  1852 ;;		_I2C_Master_Wait
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;;		_motorStart_1
  1856 ;;		_motorStop_1
  1857 ;;		_motorStart_0
  1858 ;;		_motorStop_0
  1859 ;;		_motorStart_2
  1860 ;;		_motorStop_2
  1861 ;;		_motorStart_3
  1862 ;;		_motorStop_3
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text10
  1867  001722                     __ptext10:
  1868                           	opt stack 0
  1869  001722                     _I2C_Master_Start:
  1870                           	opt stack 28
  1871                           
  1872                           ;I2C.c: 78: I2C_Master_Wait();
  1873                           
  1874                           ;incstack = 0
  1875  001722  EC7F  F00B         	call	_I2C_Master_Wait	;wreg free
  1876                           
  1877                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1878  001726  80C5               	bsf	4037,0,c	;volatile
  1879  001728  0012               	return		;funcret
  1880  00172A                     __end_of_I2C_Master_Start:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           prodh	equ	0xFF4
  1887                           prodl	equ	0xFF3
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           postinc2	equ	0xFDE
  1891                           postdec2	equ	0xFDD
  1892                           fsr2h	equ	0xFDA
  1893                           fsr2l	equ	0xFD9
  1894                           status	equ	0xFD8
  1895                           
  1896 ;; *************** function _I2C_Master_Wait *****************
  1897 ;; Defined at:
  1898 ;;		line 51 in file "I2C.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;Total ram usage:        1 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_I2C_Master_Start
  1922 ;;		_I2C_Master_Stop
  1923 ;;		_I2C_Master_Write
  1924 ;;		_I2C_Master_RepeatedStart
  1925 ;;		_I2C_Master_Read
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text11
  1930  0016FE                     __ptext11:
  1931                           	opt stack 0
  1932  0016FE                     _I2C_Master_Wait:
  1933                           	opt stack 28
  1934                           
  1935                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1936                           
  1937                           ;incstack = 0
  1938  0016FE  B4C7               	btfsc	4039,2,c	;volatile
  1939  001700  D7FE               	goto	_I2C_Master_Wait
  1940  001702  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1941  001706  0E1F               	movlw	31
  1942  001708  1601               	andwf	??_I2C_Master_Wait,f,c
  1943  00170A  B4D8               	btfsc	status,2,c
  1944  00170C  0012               	return	
  1945  00170E  D7F7               	goto	_I2C_Master_Wait
  1946  001710                     __end_of_I2C_Master_Wait:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postinc2	equ	0xFDE
  1957                           postdec2	equ	0xFDD
  1958                           fsr2h	equ	0xFDA
  1959                           fsr2l	equ	0xFD9
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function _I2C_Master_Init *****************
  1963 ;; Defined at:
  1964 ;;		line 14 in file "I2C.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;		None
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, status,2, status,0, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1978 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;Total ram usage:        8 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    1
  1985 ;; This function calls:
  1986 ;;		___lldiv
  1987 ;; This function is called by:
  1988 ;;		_main
  1989 ;;		_motorStart_1
  1990 ;;		_motorStop_1
  1991 ;;		_motorStart_0
  1992 ;;		_motorStop_0
  1993 ;;		_motorStart_2
  1994 ;;		_motorStop_2
  1995 ;;		_motorStart_3
  1996 ;;		_motorStop_3
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text12
  2001  0014A0                     __ptext12:
  2002                           	opt stack 0
  2003  0014A0                     _I2C_Master_Init:
  2004                           	opt stack 28
  2005                           
  2006                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2007                           
  2008                           ;incstack = 0
  2009  0014A0  9AC6               	bcf	4038,5,c	;volatile
  2010                           
  2011                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2012  0014A2  8694               	bsf	3988,3,c	;volatile
  2013                           
  2014                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2015  0014A4  8894               	bsf	3988,4,c	;volatile
  2016                           
  2017                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2018  0014A6  0E80               	movlw	128
  2019  0014A8  6EC7               	movwf	4039,c	;volatile
  2020                           
  2021                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2022  0014AA  0E28               	movlw	40
  2023  0014AC  6EC6               	movwf	4038,c	;volatile
  2024                           
  2025                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2026  0014AE  0E00               	movlw	0
  2027  0014B0  6EC5               	movwf	4037,c	;volatile
  2028                           
  2029                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  2030  0014B2  0E00               	movlw	0
  2031  0014B4  6E01               	movwf	___lldiv@dividend,c
  2032  0014B6  0E5A               	movlw	90
  2033  0014B8  6E02               	movwf	___lldiv@dividend+1,c
  2034  0014BA  0E62               	movlw	98
  2035  0014BC  6E03               	movwf	___lldiv@dividend+2,c
  2036  0014BE  0E02               	movlw	2
  2037  0014C0  6E04               	movwf	___lldiv@dividend+3,c
  2038  0014C2  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  2039  0014C6  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  2040  0014CA  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  2041  0014CE  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  2042  0014D2  0E02               	movlw	2
  2043  0014D4                     u445:
  2044  0014D4  90D8               	bcf	status,0,c
  2045  0014D6  3612               	rlcf	??_I2C_Master_Init,f,c
  2046  0014D8  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2047  0014DA  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2048  0014DC  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2049  0014DE  2EE8               	decfsz	wreg,f,c
  2050  0014E0  D7F9               	goto	u445
  2051  0014E2  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2052  0014E6  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2053  0014EA  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2054  0014EE  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2055  0014F2  ECD0  F009         	call	___lldiv	;wreg free
  2056  0014F6  0401               	decf	?___lldiv,w,c
  2057  0014F8  6EC8               	movwf	4040,c	;volatile
  2058  0014FA  0012               	return		;funcret
  2059  0014FC                     __end_of_I2C_Master_Init:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           prodh	equ	0xFF4
  2066                           prodl	equ	0xFF3
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postinc2	equ	0xFDE
  2070                           postdec2	equ	0xFDD
  2071                           fsr2h	equ	0xFDA
  2072                           fsr2l	equ	0xFD9
  2073                           status	equ	0xFD8
  2074                           
  2075 ;; *************** function ___lldiv *****************
  2076 ;; Defined at:
  2077 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  dividend        4    0[COMRAM] unsigned long 
  2080 ;;  divisor         4    4[COMRAM] unsigned long 
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;  quotient        4    8[COMRAM] unsigned long 
  2083 ;;  counter         1   12[COMRAM] unsigned char 
  2084 ;; Return value:  Size  Location     Type
  2085 ;;                  4    0[COMRAM] unsigned long 
  2086 ;; Registers used:
  2087 ;;		wreg, status,2, status,0
  2088 ;; Tracked objects:
  2089 ;;		On entry : 0/0
  2090 ;;		On exit  : 0/0
  2091 ;;		Unchanged: 0/0
  2092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2093 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;Total ram usage:       13 bytes
  2098 ;; Hardware stack levels used:    1
  2099 ;; This function calls:
  2100 ;;		Nothing
  2101 ;; This function is called by:
  2102 ;;		_I2C_Master_Init
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text13
  2107  0013A0                     __ptext13:
  2108                           	opt stack 0
  2109  0013A0                     ___lldiv:
  2110                           	opt stack 28
  2111                           
  2112                           ;incstack = 0
  2113  0013A0  0E00               	movlw	0
  2114  0013A2  6E09               	movwf	___lldiv@quotient,c
  2115  0013A4  0E00               	movlw	0
  2116  0013A6  6E0A               	movwf	___lldiv@quotient+1,c
  2117  0013A8  0E00               	movlw	0
  2118  0013AA  6E0B               	movwf	___lldiv@quotient+2,c
  2119  0013AC  0E00               	movlw	0
  2120  0013AE  6E0C               	movwf	___lldiv@quotient+3,c
  2121  0013B0  5005               	movf	___lldiv@divisor,w,c
  2122  0013B2  1006               	iorwf	___lldiv@divisor+1,w,c
  2123  0013B4  1007               	iorwf	___lldiv@divisor+2,w,c
  2124  0013B6  1008               	iorwf	___lldiv@divisor+3,w,c
  2125  0013B8  B4D8               	btfsc	status,2,c
  2126  0013BA  D02A               	goto	l638
  2127  0013BC  0E01               	movlw	1
  2128  0013BE  6E0D               	movwf	___lldiv@counter,c
  2129  0013C0  D006               	goto	l633
  2130  0013C2  90D8               	bcf	status,0,c
  2131  0013C4  3605               	rlcf	___lldiv@divisor,f,c
  2132  0013C6  3606               	rlcf	___lldiv@divisor+1,f,c
  2133  0013C8  3607               	rlcf	___lldiv@divisor+2,f,c
  2134  0013CA  3608               	rlcf	___lldiv@divisor+3,f,c
  2135  0013CC  2A0D               	incf	___lldiv@counter,f,c
  2136  0013CE                     l633:
  2137  0013CE  AE08               	btfss	___lldiv@divisor+3,7,c
  2138  0013D0  D7F8               	goto	l634
  2139  0013D2                     u420:
  2140  0013D2  90D8               	bcf	status,0,c
  2141  0013D4  3609               	rlcf	___lldiv@quotient,f,c
  2142  0013D6  360A               	rlcf	___lldiv@quotient+1,f,c
  2143  0013D8  360B               	rlcf	___lldiv@quotient+2,f,c
  2144  0013DA  360C               	rlcf	___lldiv@quotient+3,f,c
  2145  0013DC  5005               	movf	___lldiv@divisor,w,c
  2146  0013DE  5C01               	subwf	___lldiv@dividend,w,c
  2147  0013E0  5006               	movf	___lldiv@divisor+1,w,c
  2148  0013E2  5802               	subwfb	___lldiv@dividend+1,w,c
  2149  0013E4  5007               	movf	___lldiv@divisor+2,w,c
  2150  0013E6  5803               	subwfb	___lldiv@dividend+2,w,c
  2151  0013E8  5008               	movf	___lldiv@divisor+3,w,c
  2152  0013EA  5804               	subwfb	___lldiv@dividend+3,w,c
  2153  0013EC  A0D8               	btfss	status,0,c
  2154  0013EE  D009               	goto	l637
  2155  0013F0  5005               	movf	___lldiv@divisor,w,c
  2156  0013F2  5E01               	subwf	___lldiv@dividend,f,c
  2157  0013F4  5006               	movf	___lldiv@divisor+1,w,c
  2158  0013F6  5A02               	subwfb	___lldiv@dividend+1,f,c
  2159  0013F8  5007               	movf	___lldiv@divisor+2,w,c
  2160  0013FA  5A03               	subwfb	___lldiv@dividend+2,f,c
  2161  0013FC  5008               	movf	___lldiv@divisor+3,w,c
  2162  0013FE  5A04               	subwfb	___lldiv@dividend+3,f,c
  2163  001400  8009               	bsf	___lldiv@quotient,0,c
  2164  001402                     l637:
  2165  001402  90D8               	bcf	status,0,c
  2166  001404  3208               	rrcf	___lldiv@divisor+3,f,c
  2167  001406  3207               	rrcf	___lldiv@divisor+2,f,c
  2168  001408  3206               	rrcf	___lldiv@divisor+1,f,c
  2169  00140A  3205               	rrcf	___lldiv@divisor,f,c
  2170  00140C  2E0D               	decfsz	___lldiv@counter,f,c
  2171  00140E  D7E1               	goto	u420
  2172  001410                     l638:
  2173  001410  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2174  001414  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2175  001418  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2176  00141C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2177  001420  0012               	return		;funcret
  2178  001422                     __end_of___lldiv:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           tblptrh	equ	0xFF7
  2182                           tblptrl	equ	0xFF6
  2183                           tablat	equ	0xFF5
  2184                           prodh	equ	0xFF4
  2185                           prodl	equ	0xFF3
  2186                           postinc0	equ	0xFEE
  2187                           wreg	equ	0xFE8
  2188                           postinc2	equ	0xFDE
  2189                           postdec2	equ	0xFDD
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function _initLCD *****************
  2195 ;; Defined at:
  2196 ;;		line 60 in file "lcd.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;Total ram usage:        1 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    2
  2217 ;; This function calls:
  2218 ;;		_lcdInst
  2219 ;; This function is called by:
  2220 ;;		_main
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text14
  2225  00154E                     __ptext14:
  2226                           	opt stack 0
  2227  00154E                     _initLCD:
  2228                           	opt stack 28
  2229                           
  2230                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2231                           
  2232                           ;incstack = 0
  2233  00154E  0EC3               	movlw	195
  2234  001550  6E04               	movwf	??_initLCD& (0+255),c
  2235  001552  0ECD               	movlw	205
  2236  001554                     u697:
  2237  001554  2EE8               	decfsz	wreg,f,c
  2238  001556  D7FE               	bra	u697
  2239  001558  2E04               	decfsz	??_initLCD& (0+255),f,c
  2240  00155A  D7FC               	bra	u697
  2241  00155C  F000               	nop	
  2242                           
  2243                           ;lcd.c: 69: lcdInst(0b00110011);
  2244  00155E  0E33               	movlw	51
  2245  001560  EC75  F00B         	call	_lcdInst
  2246                           
  2247                           ;lcd.c: 70: lcdInst(0b00110010);
  2248  001564  0E32               	movlw	50
  2249  001566  EC75  F00B         	call	_lcdInst
  2250                           
  2251                           ;lcd.c: 71: lcdInst(0b00101000);
  2252  00156A  0E28               	movlw	40
  2253  00156C  EC75  F00B         	call	_lcdInst
  2254                           
  2255                           ;lcd.c: 72: lcdInst(0b00001111);
  2256  001570  0E0F               	movlw	15
  2257  001572  EC75  F00B         	call	_lcdInst
  2258                           
  2259                           ;lcd.c: 73: lcdInst(0b00000110);
  2260  001576  0E06               	movlw	6
  2261  001578  EC75  F00B         	call	_lcdInst
  2262                           
  2263                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2264  00157C  0E01               	movlw	1
  2265  00157E  EC75  F00B         	call	_lcdInst
  2266  001582  0EC3               	movlw	195
  2267  001584  6E04               	movwf	??_initLCD& (0+255),c
  2268  001586  0ECD               	movlw	205
  2269  001588                     u707:
  2270  001588  2EE8               	decfsz	wreg,f,c
  2271  00158A  D7FE               	bra	u707
  2272  00158C  2E04               	decfsz	??_initLCD& (0+255),f,c
  2273  00158E  D7FC               	bra	u707
  2274  001590  F000               	nop	
  2275                           
  2276                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2277  001592  0E0F               	movlw	15
  2278  001594  EC75  F00B         	call	_lcdInst
  2279  001598  0012               	return		;funcret
  2280  00159A                     __end_of_initLCD:
  2281                           	opt stack 0
  2282                           tblptru	equ	0xFF8
  2283                           tblptrh	equ	0xFF7
  2284                           tblptrl	equ	0xFF6
  2285                           tablat	equ	0xFF5
  2286                           prodh	equ	0xFF4
  2287                           prodl	equ	0xFF3
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postinc2	equ	0xFDE
  2291                           postdec2	equ	0xFDD
  2292                           fsr2h	equ	0xFDA
  2293                           fsr2l	equ	0xFD9
  2294                           status	equ	0xFD8
  2295                           
  2296 ;; *************** function _lcdInst *****************
  2297 ;; Defined at:
  2298 ;;		line 11 in file "lcd.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  data            1    wreg     unsigned char 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  data            1    2[COMRAM] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;Total ram usage:        1 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    1
  2319 ;; This function calls:
  2320 ;;		_lcdNibble
  2321 ;; This function is called by:
  2322 ;;		_main
  2323 ;;		_initLCD
  2324 ;;		_lcd_set_cursor
  2325 ;;		_lcd_shift_cursor
  2326 ;;		_lcd_shift_display
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text15
  2331  0016EA                     __ptext15:
  2332                           	opt stack 0
  2333  0016EA                     _lcdInst:
  2334                           	opt stack 29
  2335                           
  2336                           ;incstack = 0
  2337                           ;lcdInst@data stored from wreg
  2338  0016EA  6E03               	movwf	lcdInst@data,c
  2339                           
  2340                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2341  0016EC  948C               	bcf	3980,2,c	;volatile
  2342                           
  2343                           ;lcd.c: 20: lcdNibble(data);
  2344  0016EE  5003               	movf	lcdInst@data,w,c
  2345  0016F0  EC11  F00A         	call	_lcdNibble
  2346                           
  2347                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2348  0016F4  0EC8               	movlw	200
  2349  0016F6                     u717:
  2350  0016F6  D000               	nop2	
  2351  0016F8  2EE8               	decfsz	wreg,f,c
  2352  0016FA  D7FD               	bra	u717
  2353  0016FC  0012               	return		;funcret
  2354  0016FE                     __end_of_lcdInst:
  2355                           	opt stack 0
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           postinc0	equ	0xFEE
  2363                           wreg	equ	0xFE8
  2364                           postinc2	equ	0xFDE
  2365                           postdec2	equ	0xFDD
  2366                           fsr2h	equ	0xFDA
  2367                           fsr2l	equ	0xFD9
  2368                           status	equ	0xFD8
  2369                           
  2370 ;; *************** function _lcdNibble *****************
  2371 ;; Defined at:
  2372 ;;		line 37 in file "lcd.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  data            1    wreg     unsigned char 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  data            1    1[COMRAM] unsigned char 
  2377 ;;  temp            1    0[COMRAM] unsigned char 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      void 
  2380 ;; Registers used:
  2381 ;;		wreg, status,2, status,0
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;Total ram usage:        2 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; This function calls:
  2394 ;;		Nothing
  2395 ;; This function is called by:
  2396 ;;		_lcdInst
  2397 ;;		_putch
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text16
  2402  001422                     __ptext16:
  2403                           	opt stack 0
  2404  001422                     _lcdNibble:
  2405                           	opt stack 28
  2406                           
  2407                           ;incstack = 0
  2408                           ;lcdNibble@data stored from wreg
  2409  001422  6E02               	movwf	lcdNibble@data,c
  2410                           
  2411                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2412  001424  5002               	movf	lcdNibble@data,w,c
  2413  001426  0BF0               	andlw	240
  2414  001428  6E01               	movwf	lcdNibble@temp,c
  2415                           
  2416                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2417  00142A  508C               	movf	3980,w,c	;volatile
  2418  00142C  0B0F               	andlw	15
  2419  00142E  6E8C               	movwf	3980,c	;volatile
  2420                           
  2421                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2422  001430  5001               	movf	lcdNibble@temp,w,c
  2423  001432  108C               	iorwf	3980,w,c	;volatile
  2424  001434  6E8C               	movwf	3980,c	;volatile
  2425                           
  2426                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2427  001436  0E00               	movlw	0
  2428  001438  BEF2               	btfsc	intcon,7,c	;volatile
  2429  00143A  0E01               	movlw	1
  2430  00143C  6E27               	movwf	lcd@LCDinterruptState,c
  2431  00143E  9EF2               	bcf	intcon,7,c	;volatile
  2432  001440  868C               	bsf	3980,3,c	;volatile
  2433  001442  0E53               	movlw	83
  2434  001444                     u727:
  2435  001444  2EE8               	decfsz	wreg,f,c
  2436  001446  D7FE               	bra	u727
  2437  001448  F000               	nop	
  2438  00144A  968C               	bcf	3980,3,c	;volatile
  2439  00144C  0EC8               	movlw	200
  2440  00144E                     u737:
  2441  00144E  D000               	nop2	
  2442  001450  2EE8               	decfsz	wreg,f,c
  2443  001452  D7FD               	bra	u737
  2444  001454  B027               	btfsc	lcd@LCDinterruptState,0,c
  2445  001456  D002               	bra	u15
  2446  001458  9EF2               	bcf	intcon,7,c	;volatile
  2447  00145A  D001               	bra	u16
  2448  00145C                     u15:
  2449  00145C  8EF2               	bsf	intcon,7,c	;volatile
  2450  00145E                     u16:
  2451                           
  2452                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2453  00145E  3802               	swapf	lcdNibble@data,w,c
  2454  001460  0BF0               	andlw	240
  2455  001462  6E02               	movwf	lcdNibble@data,c
  2456                           
  2457                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2458  001464  5002               	movf	lcdNibble@data,w,c
  2459  001466  0BF0               	andlw	240
  2460  001468  6E01               	movwf	lcdNibble@temp,c
  2461                           
  2462                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2463  00146A  508C               	movf	3980,w,c	;volatile
  2464  00146C  0B0F               	andlw	15
  2465  00146E  6E8C               	movwf	3980,c	;volatile
  2466                           
  2467                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2468  001470  5001               	movf	lcdNibble@temp,w,c
  2469  001472  108C               	iorwf	3980,w,c	;volatile
  2470  001474  6E8C               	movwf	3980,c	;volatile
  2471                           
  2472                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2473  001476  0E00               	movlw	0
  2474  001478  BEF2               	btfsc	intcon,7,c	;volatile
  2475  00147A  0E01               	movlw	1
  2476  00147C  6E27               	movwf	lcd@LCDinterruptState,c
  2477  00147E  9EF2               	bcf	intcon,7,c	;volatile
  2478  001480  868C               	bsf	3980,3,c	;volatile
  2479  001482  0E53               	movlw	83
  2480  001484                     u747:
  2481  001484  2EE8               	decfsz	wreg,f,c
  2482  001486  D7FE               	bra	u747
  2483  001488  F000               	nop	
  2484  00148A  968C               	bcf	3980,3,c	;volatile
  2485  00148C  0EC8               	movlw	200
  2486  00148E                     u757:
  2487  00148E  D000               	nop2	
  2488  001490  2EE8               	decfsz	wreg,f,c
  2489  001492  D7FD               	bra	u757
  2490  001494  B027               	btfsc	lcd@LCDinterruptState,0,c
  2491  001496  D002               	bra	u25
  2492  001498  9EF2               	bcf	intcon,7,c	;volatile
  2493  00149A  D001               	bra	u26
  2494  00149C                     u25:
  2495  00149C  8EF2               	bsf	intcon,7,c	;volatile
  2496  00149E                     u26:
  2497  00149E  0012               	return		;funcret
  2498  0014A0                     __end_of_lcdNibble:
  2499                           	opt stack 0
  2500                           tblptru	equ	0xFF8
  2501                           tblptrh	equ	0xFF7
  2502                           tblptrl	equ	0xFF6
  2503                           tablat	equ	0xFF5
  2504                           prodh	equ	0xFF4
  2505                           prodl	equ	0xFF3
  2506                           intcon	equ	0xFF2
  2507                           postinc0	equ	0xFEE
  2508                           wreg	equ	0xFE8
  2509                           postinc2	equ	0xFDE
  2510                           postdec2	equ	0xFDD
  2511                           fsr2h	equ	0xFDA
  2512                           fsr2l	equ	0xFD9
  2513                           status	equ	0xFD8
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           intcon	equ	0xFF2
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           postinc2	equ	0xFDE
  2524                           postdec2	equ	0xFDD
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529                           	psect	rparam
  2530  0000                     tblptru	equ	0xFF8
  2531                           tblptrh	equ	0xFF7
  2532                           tblptrl	equ	0xFF6
  2533                           tablat	equ	0xFF5
  2534                           prodh	equ	0xFF4
  2535                           prodl	equ	0xFF3
  2536                           intcon	equ	0xFF2
  2537                           postinc0	equ	0xFEE
  2538                           wreg	equ	0xFE8
  2539                           postinc2	equ	0xFDE
  2540                           postdec2	equ	0xFDD
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    36
    Data        2
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[15]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_1->_I2C_Master_Init
    _motorStart_1->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12029
                                             24 COMRAM     2     2      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                       _motorStart_1
                        _motorStop_1
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1633
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2302
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1096
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      34        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 16:22:13 2018

                          _i 001B                           l99 10EA                           u15 145C  
                         u16 145E                           u25 149C                           u26 149E  
                __CFG_CPD$ON 000000                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l100 1104                          l101 1134                          l104 11CC  
                        l105 11E2                          l106 1252                          l107 1218  
                        l116 1688                          l271 12C6                          l264 128C  
                        l273 12EE                          l265 129C                          l700 165C  
                        l701 1666                          l277 1330                          l278 137E  
                        l279 1336                          l633 13CE                          l634 13C2  
                        l637 1402                          l638 1410                          l690 153A  
                        l691 1544                          l686 151A                          l687 1512  
                        l696 1644                          l697 163C                 __CFG_CPB$OFF 000000  
                        u420 13D2                          u460 151E                          u445 14D4  
                        u550 131E                          u490 1648                          u570 1386  
                        u707 1588                          u717 16F6                          u727 1444  
                        u647 10DA                          u737 144E                          u657 114E  
                        u747 1484                          u667 123E                          u757 148E  
                        u677 1274                          u687 16E2                          u697 1554  
                        _max 0029                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1430 12F2                         l1506 10EA  
                       l1564 1218                         _ADON 007E10                         STR_1 1031  
                       STR_2 1031                         STR_3 1034                         STR_4 1031  
                       STR_5 1031                         STR_6 1031                         STR_7 1025  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         _main 103A  
                       _keys 1001                         fsr2h 000FDA                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT 1020             ?_I2C_Master_Init 000E             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lldiv 1422  
            __end_of___lwdiv 154E              __end_of___lwmod 1670                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 16FE                _N_spacingTime 001F               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_readADC 16A8              __end_of_initLCD 159A  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C                        _array 101C  
                      _state 0025                        _putch 16D6                        tablat 000FF5  
          _LCDinterruptState 0028                        status 000FD8               __CFG_PBADEN$ON 000000  
            __initialization 16A8                 __end_of_main 1282                 __end_of_keys 1012  
             __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 1021                       ??_main 0019  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002  
         ??_I2C_Master_Start 0002                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0004                       _ADRESH 000FC4                       _ADRESL 000FC3  
                     ?_putch 0001                       _OSCCON 000FD3                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000  
                  ??___lldiv 0009                    ??___lwdiv 0005                    ??___lwmod 000C  
                     clear_0 16C6                 ?_motorStop_1 0001                    ??_lcdInst 0003  
                     _printf 1282                    ??_readADC 0003                    ??_initLCD 0004  
               __pdataCOMRAM 0029                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 16CC                ___rparam_used 000001               __pcstackCOMRAM 0001  
              __end_of_array 101F                __end_of_putch 16EA           __size_of_lcdNibble 007E  
                    ??_putch 0003                      ?_printf 000D         lcd@LCDinterruptState 0027  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
          __end_of_lcdNibble 14A0                      __Hparam 0000                      __Lparam 0000  
                    ___lldiv 13A0                      ___lwdiv 14FC                      ___lwmod 162E  
               __psmallconst 1000                      __pcinit 16A8                      __ramtop 1000  
                    _lcdInst 16EA                      __ptext0 103A                      __ptext1 1670  
                    __ptext2 1282                      __ptext3 16D6                      __ptext4 162E  
                    __ptext5 14FC                      __ptext6 159A                      __ptext7 15E4  
                    __ptext8 1710                      __ptext9 171A              __size_of_printf 011E  
                    _readADC 1670                      _initLCD 154E         __size_of_motorStop_1 004A  
                    _dpowers 1012                ?_motorStart_1 0001                    _LCD_RIGHT 1020  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
       end_of_initialization 16CC        __end_of_LCD_SIZE_HORZ 1023        __end_of_LCD_SIZE_VERT 1022  
              __Lmediumconst 0000    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                      printf@c 0018  
                    printf@f 000D                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               ??_motorStart_1 0016                    _TRISCbits 000F94  
                  _TRISDbits 000F95                __pidataCOMRAM 172A               __end_of_printf 13A0  
                  _N_counter 0023          start_initialization 16A8            ??_I2C_Master_Init 0012  
          ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002     I2C_Master_Init@clockFreq 000E  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 0011                _analog_result 001D  
                __pbssCOMRAM 001B             _I2C_Master_Start 1722             _I2C_Master_Write 1710  
       __end_of_motorStart_1 162E             ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000  
                  _lcdNibble 1422                     ?___lldiv 0001                     ?___lwdiv 0001  
                   ?___lwmod 0008                     ?_lcdInst 0001                     ?_readADC 0001  
                   ?_initLCD 0001                  __smallconst 1000             ___lwdiv@quotient 0005  
             __size_of_putch 0014                     _LCD_LEFT 101F                     _LATDbits 000F8C  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001                ??_motorStop_1 0016  
                 _ADCON0bits 000FC2                   _ADCON2bits 000FC0                lcdNibble@data 0002  
                 printf@flag 0014                lcdNibble@temp 0001                   printf@prec 0015  
             _LCD_HORZ_LIMIT 1024                     _N_remain 0021                     __Hrparam 0000  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082  
           __size_of___lwdiv 0052             __size_of___lwmod 0042               readADC@channel 0005  
           __size_of_lcdInst 0014              _I2C_Master_Init 14A0             __size_of_readADC 0038  
           __size_of_initLCD 004C              _I2C_Master_Wait 16FE              _I2C_Master_Stop 171A  
     __end_of_LCD_HORZ_LIMIT 1025          __end_of_motorStop_1 15E4              ___lwdiv@divisor 0003  
            ___lwdiv@counter 0007                     __ptext10 1722                     __ptext11 16FE  
                   __ptext12 14A0                     __ptext13 13A0                     __ptext14 154E  
                   __ptext15 16EA                     __ptext16 1422               _LCD_VERT_LIMIT 1023  
      __size_of_motorStart_1 004A                __size_of_main 0248                  ??_lcdNibble 0001  
                  printf@val 0016  I2C_Master_Write@byteToWrite 0002                    putch@data 0003  
   __end_of_I2C_Master_Start 172A     __end_of_I2C_Master_Write 171A                   _INTCONbits 000FF2  
               _motorStart_1 15E4       __end_of_LCD_VERT_LIMIT 1024                _LCD_SIZE_HORZ 1022  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 1021             ___lldiv@dividend 0001  
                   printf@ap 0012      __end_of_I2C_Master_Init 14FC      __end_of_I2C_Master_Wait 1710  
    __end_of_I2C_Master_Stop 1722                  lcdInst@data 0003                  _motorStop_1 159A  
           ___lldiv@quotient 0009              ___lwmod@divisor 000A              ___lwmod@counter 000C  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
