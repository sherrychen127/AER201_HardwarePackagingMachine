

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 16:28:56 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  0015F2                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _max
    71  0015F2  0004               	dw	4
    72                           
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _keys:
    78                           	opt stack 0
    79  001001  31                 	db	49
    80  001002  32                 	db	50
    81  001003  33                 	db	51
    82  001004  41                 	db	65
    83  001005  34                 	db	52
    84  001006  35                 	db	53
    85  001007  36                 	db	54
    86  001008  42                 	db	66
    87  001009  37                 	db	55
    88  00100A  38                 	db	56
    89  00100B  39                 	db	57
    90  00100C  43                 	db	67
    91  00100D  2A                 	db	42
    92  00100E  30                 	db	48
    93  00100F  23                 	db	35
    94  001010  44                 	db	68
    95  001011  00                 	db	0
    96  001012                     __end_of_keys:
    97                           	opt stack 0
    98  001012                     _dpowers:
    99                           	opt stack 0
   100  001012  0001               	dw	1
   101  001014  000A               	dw	10
   102  001016  0064               	dw	100
   103  001018  03E8               	dw	1000
   104  00101A  2710               	dw	10000
   105  00101C                     __end_of_dpowers:
   106                           	opt stack 0
   107  00101C                     _array:
   108                           	opt stack 0
   109  00101C  31                 	db	49
   110  00101D  30                 	db	48
   111  00101E  00                 	db	0
   112  00101F                     __end_of_array:
   113                           	opt stack 0
   114  00101F                     _LCD_LEFT:
   115                           	opt stack 0
   116  00101F  00                 	db	0
   117  001020                     __end_of_LCD_LEFT:
   118                           	opt stack 0
   119  001020                     _LCD_RIGHT:
   120                           	opt stack 0
   121  001020  01                 	db	1
   122  001021                     __end_of_LCD_RIGHT:
   123                           	opt stack 0
   124  001021                     _LCD_SIZE_VERT:
   125                           	opt stack 0
   126  001021  02                 	db	2
   127  001022                     __end_of_LCD_SIZE_VERT:
   128                           	opt stack 0
   129  001022                     _LCD_SIZE_HORZ:
   130                           	opt stack 0
   131  001022  10                 	db	16
   132  001023                     __end_of_LCD_SIZE_HORZ:
   133                           	opt stack 0
   134  001023                     _LCD_VERT_LIMIT:
   135                           	opt stack 0
   136  001023  02                 	db	2
   137  001024                     __end_of_LCD_VERT_LIMIT:
   138                           	opt stack 0
   139  001024                     _LCD_HORZ_LIMIT:
   140                           	opt stack 0
   141  001024  28                 	db	40
   142  001025                     __end_of_LCD_HORZ_LIMIT:
   143                           	opt stack 0
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON2bits	set	4037
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _TRISCbits	set	3988
   151  0000                     _SSPCON1bits	set	4038
   152  0000                     _INTCONbits	set	4082
   153  0000                     _TRISDbits	set	3989
   154  0000                     _LATDbits	set	3980
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADRESL	set	4035
   157  0000                     _ADCON0bits	set	4034
   158  0000                     _ADCON2bits	set	4032
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON0	set	4034
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _LATE	set	3981
   167  0000                     _LATD	set	3980
   168  0000                     _LATC	set	3979
   169  0000                     _LATB	set	3978
   170  0000                     _LATA	set	3977
   171  0000                     _OSCCON	set	4051
   172  0000                     _ADON	set	32272
   173  001025                     STR_4:
   174  001025  72                 	db	114	;'r'
   175  001026  65                 	db	101	;'e'
   176  001027  6D                 	db	109	;'m'
   177  001028  61                 	db	97	;'a'
   178  001029  69                 	db	105	;'i'
   179  00102A  6E                 	db	110	;'n'
   180  00102B  20                 	db	32
   181  00102C  4E                 	db	78	;'N'
   182  00102D  75                 	db	117	;'u'
   183  00102E  74                 	db	116	;'t'
   184  00102F  73                 	db	115	;'s'
   185  001030  3A                 	db	58	;':'
   186  001031  25                 	db	37
   187  001032  64                 	db	100	;'d'
   188  001033  00                 	db	0
   189  0000                     
   190                           ; #config settings
   191  001034  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  001570                     __pcinit:
   195                           	opt stack 0
   196  001570                     start_initialization:
   197                           	opt stack 0
   198  001570                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Initialize objects allocated to COMRAM (2 bytes)
   202                           ; load TBLPTR registers with __pidataCOMRAM
   203  001570  0EF2               	movlw	low __pidataCOMRAM
   204  001572  6EF6               	movwf	tblptrl,c
   205  001574  0E15               	movlw	high __pidataCOMRAM
   206  001576  6EF7               	movwf	tblptrh,c
   207  001578  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   208  00157A  6EF8               	movwf	tblptru,c
   209  00157C  0009               	tblrd		*+	;fetch initializer
   210  00157E  CFF5 F029          	movff	tablat,__pdataCOMRAM
   211  001582  0009               	tblrd		*+	;fetch initializer
   212  001584  CFF5 F02A          	movff	tablat,__pdataCOMRAM+1
   213                           
   214                           ; Clear objects allocated to COMRAM (14 bytes)
   215  001588  EE00  F01B         	lfsr	0,__pbssCOMRAM
   216  00158C  0E0E               	movlw	14
   217  00158E                     clear_0:
   218  00158E  6AEE               	clrf	postinc0,c
   219  001590  06E8               	decf	wreg,f,c
   220  001592  E1FD               	bnz	clear_0
   221  001594                     end_of_initialization:
   222                           	opt stack 0
   223  001594                     __end_of__initialization:
   224                           	opt stack 0
   225  001594  0E00               	movlw	low (__Lmediumconst shr (0+16))
   226  001596  6EF8               	movwf	tblptru,c
   227  001598  0100               	movlb	0
   228  00159A  EFAA  F008         	goto	_main	;jump to C main() function
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  00001B                     __pbssCOMRAM:
   238                           	opt stack 0
   239  00001B                     _i:
   240                           	opt stack 0
   241  00001B                     	ds	2
   242  00001D                     _analog_result:
   243                           	opt stack 0
   244  00001D                     	ds	2
   245  00001F                     _N_spacingTime:
   246                           	opt stack 0
   247  00001F                     	ds	2
   248  000021                     _N_remain:
   249                           	opt stack 0
   250  000021                     	ds	2
   251  000023                     _N_counter:
   252                           	opt stack 0
   253  000023                     	ds	2
   254  000025                     _state:
   255                           	opt stack 0
   256  000025                     	ds	2
   257  000027                     lcd@LCDinterruptState:
   258                           	opt stack 0
   259  000027                     	ds	1
   260  000028                     	ds	1
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	dataCOMRAM
   269  000029                     __pdataCOMRAM:
   270                           	opt stack 0
   271  000029                     _max:
   272                           	opt stack 0
   273  000029                     	ds	2
   274                           tblptru	equ	0xFF8
   275                           tblptrh	equ	0xFF7
   276                           tblptrl	equ	0xFF6
   277                           tablat	equ	0xFF5
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	cstackCOMRAM
   282  000001                     __pcstackCOMRAM:
   283                           	opt stack 0
   284  000001                     ??_I2C_Master_Wait:
   285  000001                     ?_readADC:
   286                           	opt stack 0
   287  000001                     ?___lwdiv:
   288                           	opt stack 0
   289  000001                     ?___lldiv:
   290                           	opt stack 0
   291  000001                     lcdNibble@temp:
   292                           	opt stack 0
   293  000001                     ___lwdiv@dividend:
   294                           	opt stack 0
   295  000001                     ___lldiv@dividend:
   296                           	opt stack 0
   297                           
   298                           ; 4 bytes @ 0x0
   299  000001                     	ds	1
   300  000002                     lcdNibble@data:
   301                           	opt stack 0
   302  000002                     I2C_Master_Write@byteToWrite:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x1
   306  000002                     	ds	1
   307  000003                     ??_readADC:
   308  000003                     lcdInst@data:
   309                           	opt stack 0
   310  000003                     putch@data:
   311                           	opt stack 0
   312  000003                     ___lwdiv@divisor:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x2
   316  000003                     	ds	1
   317  000004                     ??_initLCD:
   318  000004                     
   319                           ; 1 bytes @ 0x3
   320  000004                     	ds	1
   321  000005                     readADC@channel:
   322                           	opt stack 0
   323  000005                     ___lwdiv@quotient:
   324                           	opt stack 0
   325  000005                     ___lldiv@divisor:
   326                           	opt stack 0
   327                           
   328                           ; 4 bytes @ 0x4
   329  000005                     	ds	2
   330  000007                     ___lwdiv@counter:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x6
   334  000007                     	ds	1
   335  000008                     ?___lwmod:
   336                           	opt stack 0
   337  000008                     ___lwmod@dividend:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x7
   341  000008                     	ds	1
   342  000009                     ___lldiv@quotient:
   343                           	opt stack 0
   344                           
   345                           ; 4 bytes @ 0x8
   346  000009                     	ds	1
   347  00000A                     ___lwmod@divisor:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x9
   351  00000A                     	ds	2
   352  00000C                     ___lwmod@counter:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0xB
   356  00000C                     	ds	1
   357  00000D                     ?_printf:
   358                           	opt stack 0
   359  00000D                     ___lldiv@counter:
   360                           	opt stack 0
   361  00000D                     printf@f:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0xC
   365  00000D                     	ds	1
   366  00000E                     I2C_Master_Init@clockFreq:
   367                           	opt stack 0
   368                           
   369                           ; 4 bytes @ 0xD
   370  00000E                     	ds	3
   371  000011                     ??_printf:
   372                           
   373                           ; 1 bytes @ 0x10
   374  000011                     	ds	1
   375  000012                     ??_I2C_Master_Init:
   376  000012                     printf@ap:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x11
   380  000012                     	ds	2
   381  000014                     printf@flag:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x13
   385  000014                     	ds	1
   386  000015                     printf@prec:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x14
   390  000015                     	ds	1
   391  000016                     printf@val:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x15
   395  000016                     	ds	2
   396  000018                     printf@c:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x17
   400  000018                     	ds	1
   401  000019                     ??_main:
   402                           
   403                           ; 1 bytes @ 0x18
   404  000019                     	ds	2
   405                           tblptru	equ	0xFF8
   406                           tblptrh	equ	0xFF7
   407                           tblptrl	equ	0xFF6
   408                           tablat	equ	0xFF5
   409                           postinc0	equ	0xFEE
   410                           wreg	equ	0xFE8
   411                           
   412 ;;
   413 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   414 ;;
   415 ;; *************** function _main *****************
   416 ;; Defined at:
   417 ;;		line 63 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;Total ram usage:        2 bytes
   436 ;; Hardware stack levels required when called:    3
   437 ;; This function calls:
   438 ;;		_initLCD
   439 ;;		_lcdInst
   440 ;;		_motorStart_1
   441 ;;		_motorStop_1
   442 ;;		_printf
   443 ;;		_readADC
   444 ;; This function is called by:
   445 ;;		Startup code after reset
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text0
   450  001154                     __ptext0:
   451                           	opt stack 0
   452  001154                     _main:
   453                           	opt stack 28
   454                           
   455                           ;main.c: 66: OSCCON = 0xF2;
   456                           
   457                           ;incstack = 0
   458  001154  0EF2               	movlw	242
   459  001156  6ED3               	movwf	4051,c	;volatile
   460                           
   461                           ;main.c: 71: LATA = 0x00;
   462  001158  0E00               	movlw	0
   463  00115A  6E89               	movwf	3977,c	;volatile
   464                           
   465                           ;main.c: 72: LATB = 0x00;
   466  00115C  0E00               	movlw	0
   467  00115E  6E8A               	movwf	3978,c	;volatile
   468                           
   469                           ;main.c: 73: LATC = 0x00;
   470  001160  0E00               	movlw	0
   471  001162  6E8B               	movwf	3979,c	;volatile
   472                           
   473                           ;main.c: 74: LATD = 0x00;
   474  001164  0E00               	movlw	0
   475  001166  6E8C               	movwf	3980,c	;volatile
   476                           
   477                           ;main.c: 75: LATE = 0x00;
   478  001168  0E00               	movlw	0
   479  00116A  6E8D               	movwf	3981,c	;volatile
   480                           
   481                           ;main.c: 79: TRISA = 0xFF;
   482  00116C  6892               	setf	3986,c	;volatile
   483                           
   484                           ;main.c: 80: TRISB = 0xFF;
   485  00116E  6893               	setf	3987,c	;volatile
   486                           
   487                           ;main.c: 81: TRISC = 0x00;
   488  001170  0E00               	movlw	0
   489  001172  6E94               	movwf	3988,c	;volatile
   490                           
   491                           ;main.c: 85: TRISD = 0x00;
   492  001174  0E00               	movlw	0
   493  001176  6E95               	movwf	3989,c	;volatile
   494                           
   495                           ;main.c: 86: TRISE = 0x00;
   496  001178  0E00               	movlw	0
   497  00117A  6E96               	movwf	3990,c	;volatile
   498                           
   499                           ;main.c: 89: ADCON0 = 0x00;
   500  00117C  0E00               	movlw	0
   501  00117E  6EC2               	movwf	4034,c	;volatile
   502                           
   503                           ;main.c: 90: ADCON1 = 0x0B;
   504  001180  0E0B               	movlw	11
   505  001182  6EC1               	movwf	4033,c	;volatile
   506                           
   507                           ;main.c: 91: ADCON2bits.ADFM = 1;
   508  001184  8EC0               	bsf	4032,7,c	;volatile
   509                           
   510                           ;main.c: 95: initLCD();
   511  001186  EC0B  F00A         	call	_initLCD	;wreg free
   512                           
   513                           ;main.c: 166: motorStart_1();
   514  00118A  EC56  F00A         	call	_motorStart_1	;wreg free
   515                           
   516                           ;main.c: 169: initLCD();
   517  00118E  EC0B  F00A         	call	_initLCD	;wreg free
   518                           
   519                           ;main.c: 170: N_spacingTime = 0;
   520  001192  0E00               	movlw	0
   521  001194  6E20               	movwf	_N_spacingTime+1,c
   522  001196  0E00               	movlw	0
   523  001198  6E1F               	movwf	_N_spacingTime,c
   524                           
   525                           ;main.c: 171: initLCD();
   526  00119A  EC0B  F00A         	call	_initLCD	;wreg free
   527                           
   528                           ;main.c: 172: printf("%d", N_remain);
   529  00119E  0E31               	movlw	low (STR_4+12)
   530  0011A0  6E0D               	movwf	printf@f,c
   531  0011A2  0E10               	movlw	high (STR_4+12)
   532  0011A4  6E0E               	movwf	printf@f+1,c
   533  0011A6  C021  F00F         	movff	_N_remain,?_printf+2
   534  0011AA  C022  F010         	movff	_N_remain+1,?_printf+3
   535  0011AE  EC1B  F008         	call	_printf	;wreg free
   536  0011B2                     
   537                           ;main.c: 176: if (N_spacingTime >= 30000){
   538  0011B2  BE20               	btfsc	_N_spacingTime+1,7,c
   539  0011B4  D009               	goto	l100
   540  0011B6  0E30               	movlw	48
   541  0011B8  5C1F               	subwf	_N_spacingTime,w,c
   542  0011BA  0E75               	movlw	117
   543  0011BC  5820               	subwfb	_N_spacingTime+1,w,c
   544  0011BE  A0D8               	btfss	status,0,c
   545  0011C0  D003               	goto	l100
   546                           
   547                           ;main.c: 177: motorStop_1();
   548  0011C2  EC31  F00A         	call	_motorStop_1	;wreg free
   549                           
   550                           ;main.c: 178: break;
   551  0011C6  D038               	goto	l101
   552  0011C8                     l100:
   553                           
   554                           ;main.c: 179: }
   555                           ;main.c: 181: if (readADC(1)<=250 ){
   556  0011C8  0E01               	movlw	1
   557  0011CA  EC9C  F00A         	call	_readADC
   558  0011CE  5002               	movf	?_readADC+1,w,c
   559  0011D0  E116               	bnz	l1439
   560  0011D2  0EFB               	movlw	251
   561  0011D4  5C01               	subwf	?_readADC,w,c
   562  0011D6  B0D8               	btfsc	status,0,c
   563  0011D8  D012               	goto	l102
   564                           
   565                           ;main.c: 183: N_remain ++;
   566  0011DA  4A21               	infsnz	_N_remain,f,c
   567  0011DC  2A22               	incf	_N_remain+1,f,c
   568                           
   569                           ;main.c: 184: initLCD();
   570  0011DE  EC0B  F00A         	call	_initLCD	;wreg free
   571                           
   572                           ;main.c: 185: printf("%d", N_remain);
   573  0011E2  0E31               	movlw	low (STR_4+12)
   574  0011E4  6E0D               	movwf	printf@f,c
   575  0011E6  0E10               	movlw	high (STR_4+12)
   576  0011E8  6E0E               	movwf	printf@f+1,c
   577  0011EA  C021  F00F         	movff	_N_remain,?_printf+2
   578  0011EE  C022  F010         	movff	_N_remain+1,?_printf+3
   579  0011F2  EC1B  F008         	call	_printf	;wreg free
   580                           
   581                           ;main.c: 187: N_spacingTime = 0;
   582  0011F6  0E00               	movlw	0
   583  0011F8  6E20               	movwf	_N_spacingTime+1,c
   584  0011FA  0E00               	movlw	0
   585  0011FC  6E1F               	movwf	_N_spacingTime,c
   586  0011FE                     l102:
   587  0011FE                     l1439:
   588                           
   589                           ;main.c: 189: }
   590                           ;main.c: 196: lcdInst(0xC0);;
   591  0011FE  0EC0               	movlw	192
   592  001200  ECD9  F00A         	call	_lcdInst
   593                           
   594                           ;main.c: 197: printf("%d",N_spacingTime);
   595  001204  0E31               	movlw	low (STR_4+12)
   596  001206  6E0D               	movwf	printf@f,c
   597  001208  0E10               	movlw	high (STR_4+12)
   598  00120A  6E0E               	movwf	printf@f+1,c
   599  00120C  C01F  F00F         	movff	_N_spacingTime,?_printf+2
   600  001210  C020  F010         	movff	_N_spacingTime+1,?_printf+3
   601  001214  EC1B  F008         	call	_printf	;wreg free
   602                           
   603                           ;main.c: 199: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   604  001218  0E80               	movlw	128
   605  00121A  ECD9  F00A         	call	_lcdInst
   606  00121E  0E41               	movlw	65
   607  001220  6E19               	movwf	??_main& (0+255),c
   608  001222  0EEE               	movlw	238
   609  001224                     u607:
   610  001224  2EE8               	decfsz	wreg,f,c
   611  001226  D7FE               	bra	u607
   612  001228  2E19               	decfsz	??_main& (0+255),f,c
   613  00122A  D7FC               	bra	u607
   614  00122C  D000               	nop2	
   615                           
   616                           ;main.c: 202: N_spacingTime +=200;
   617  00122E  0EC8               	movlw	200
   618  001230  261F               	addwf	_N_spacingTime,f,c
   619  001232  0E00               	movlw	0
   620  001234  2220               	addwfc	_N_spacingTime+1,f,c
   621  001236  D7BD               	goto	l99
   622  001238                     l101:
   623                           
   624                           ;main.c: 210: initLCD();
   625                           
   626                           ;main.c: 205: }
   627                           ;main.c: 209: while(1){
   628  001238  EC0B  F00A         	call	_initLCD	;wreg free
   629                           
   630                           ;main.c: 211: printf("remain Nuts:%d",N_remain);
   631  00123C  0E25               	movlw	low STR_4
   632  00123E  6E0D               	movwf	printf@f,c
   633  001240  0E10               	movlw	high STR_4
   634  001242  6E0E               	movwf	printf@f+1,c
   635  001244  C021  F00F         	movff	_N_remain,?_printf+2
   636  001248  C022  F010         	movff	_N_remain+1,?_printf+3
   637  00124C  EC1B  F008         	call	_printf	;wreg free
   638                           
   639                           ;main.c: 212: _delay((unsigned long)((1000)*(40000000/4000.0)));
   640  001250  0E33               	movlw	51
   641  001252  6E1A               	movwf	(??_main+1)& (0+255),c
   642  001254  0EBB               	movlw	187
   643  001256  6E19               	movwf	??_main& (0+255),c
   644  001258  0EE0               	movlw	224
   645  00125A                     u617:
   646  00125A  2EE8               	decfsz	wreg,f,c
   647  00125C  D7FE               	bra	u617
   648  00125E  2E19               	decfsz	??_main& (0+255),f,c
   649  001260  D7FC               	bra	u617
   650  001262  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   651  001264  D7FA               	bra	u617
   652  001266  D7E8               	goto	l101
   653  001268                     __end_of_main:
   654                           	opt stack 0
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           status	equ	0xFD8
   662                           
   663 ;; *************** function _readADC *****************
   664 ;; Defined at:
   665 ;;		line 217 in file "main.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;  channel         1    wreg     unsigned char 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  channel         1    4[COMRAM] unsigned char 
   670 ;; Return value:  Size  Location     Type
   671 ;;                  2    0[COMRAM] unsigned short 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   679 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   682 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   683 ;;Total ram usage:        5 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; This function calls:
   686 ;;		Nothing
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text1
   693  001538                     __ptext1:
   694                           	opt stack 0
   695  001538                     _readADC:
   696                           	opt stack 30
   697                           
   698                           ;incstack = 0
   699                           ;readADC@channel stored from wreg
   700  001538  6E05               	movwf	readADC@channel,c
   701                           
   702                           ;main.c: 226: ADCON0 = (channel & 0x0F) << 2;
   703  00153A  C005  F003         	movff	readADC@channel,??_readADC
   704  00153E  0E0F               	movlw	15
   705  001540  1603               	andwf	??_readADC,f,c
   706  001542  90D8               	bcf	status,0,c
   707  001544  3603               	rlcf	??_readADC,f,c
   708  001546  90D8               	bcf	status,0,c
   709  001548  3403               	rlcf	??_readADC,w,c
   710  00154A  6EC2               	movwf	4034,c	;volatile
   711                           
   712                           ;main.c: 227: ADON = 1;
   713  00154C  80C2               	bsf	4034,0,c	;volatile
   714                           
   715                           ;main.c: 228: ADCON0bits.GO = 1;
   716  00154E  82C2               	bsf	4034,1,c	;volatile
   717  001550  B2C2               	btfsc	4034,1,c	;volatile
   718  001552  D7FE               	goto	l111
   719                           
   720                           ;main.c: 230: analog_result = ADRESL + (ADRESH*256);
   721  001554  50C4               	movf	4036,w,c	;volatile
   722  001556  6E04               	movwf	(??_readADC+1)& (0+255),c
   723  001558  6A03               	clrf	??_readADC& (0+255),c
   724  00155A  50C3               	movf	4035,w,c	;volatile
   725  00155C  2403               	addwf	??_readADC,w,c
   726  00155E  6E1D               	movwf	_analog_result,c
   727  001560  0E00               	movlw	0
   728  001562  2004               	addwfc	??_readADC+1,w,c
   729  001564  6E1E               	movwf	_analog_result+1,c
   730                           
   731                           ;main.c: 231: return analog_result;
   732  001566  C01D  F001         	movff	_analog_result,?_readADC
   733  00156A  C01E  F002         	movff	_analog_result+1,?_readADC+1
   734  00156E  0012               	return	
   735  001570                     __end_of_readADC:
   736                           	opt stack 0
   737                           tblptru	equ	0xFF8
   738                           tblptrh	equ	0xFF7
   739                           tblptrl	equ	0xFF6
   740                           tablat	equ	0xFF5
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           status	equ	0xFD8
   744                           
   745 ;; *************** function _printf *****************
   746 ;; Defined at:
   747 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  f               2   12[COMRAM] PTR const unsigned char 
   750 ;;		 -> STR_4(15), STR_3(3), STR_2(3), STR_1(3), 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  tmpval          4    0        struct .
   753 ;;  cp              3    0        PTR const unsigned char 
   754 ;;  val             2   21[COMRAM] unsigned int 
   755 ;;  ap              2   17[COMRAM] PTR void [1]
   756 ;;		 -> ?_printf(2), 
   757 ;;  len             2    0        unsigned int 
   758 ;;  c               1   23[COMRAM] char 
   759 ;;  prec            1   20[COMRAM] char 
   760 ;;  flag            1   19[COMRAM] unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  2   12[COMRAM] int 
   763 ;; Registers used:
   764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   770 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   771 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   773 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   774 ;;Total ram usage:       12 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; Hardware stack levels required when called:    2
   777 ;; This function calls:
   778 ;;		___lwdiv
   779 ;;		___lwmod
   780 ;;		_putch
   781 ;; This function is called by:
   782 ;;		_main
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text2
   787  001036                     __ptext2:
   788                           	opt stack 0
   789  001036                     _printf:
   790                           	opt stack 28
   791                           
   792                           ;doprnt.c: 466: va_list ap;
   793                           ;doprnt.c: 499: signed char c;
   794                           ;doprnt.c: 506: signed char prec;
   795                           ;doprnt.c: 508: unsigned char flag;
   796                           ;doprnt.c: 523: union {
   797                           ;doprnt.c: 524: unsigned long vd;
   798                           ;doprnt.c: 525: double integ;
   799                           ;doprnt.c: 526: } tmpval;
   800                           ;doprnt.c: 528: unsigned int val;
   801                           ;doprnt.c: 529: unsigned len;
   802                           ;doprnt.c: 530: const char * cp;
   803                           ;doprnt.c: 533: *ap = __va_start();
   804                           
   805                           ;incstack = 0
   806  001036  0E0F               	movlw	low (?_printf+2)
   807  001038  6E12               	movwf	printf@ap,c
   808  00103A  0E00               	movlw	high (?_printf+2)
   809  00103C  6E13               	movwf	printf@ap+1,c
   810                           
   811                           ;doprnt.c: 536: while(c = *f++) {
   812  00103E  D07D               	goto	u550
   813  001040                     
   814                           ;doprnt.c: 538: if(c != '%')
   815  001040  0E25               	movlw	37
   816  001042  1818               	xorwf	printf@c,w,c
   817  001044  B4D8               	btfsc	status,2,c
   818  001046  D004               	goto	l260
   819                           
   820                           ;doprnt.c: 540: {
   821                           ;doprnt.c: 541: (putch(c) );
   822  001048  5018               	movf	printf@c,w,c
   823  00104A  ECCF  F00A         	call	_putch
   824                           
   825                           ;doprnt.c: 542: continue;
   826  00104E  D075               	goto	u550
   827  001050                     l260:
   828                           
   829                           ;doprnt.c: 543: }
   830                           ;doprnt.c: 548: flag = 0;
   831  001050  0E00               	movlw	0
   832  001052  6E14               	movwf	printf@flag,c
   833                           
   834                           ;doprnt.c: 822: }
   835                           
   836                           ;doprnt.c: 813: continue;
   837                           
   838                           ;doprnt.c: 802: default:
   839                           
   840                           ;doprnt.c: 698: case 'i':
   841                           ;doprnt.c: 699: break;
   842                           
   843                           ;doprnt.c: 697: case 'd':
   844                           
   845                           ;doprnt.c: 638: goto alldone;
   846                           
   847                           ;doprnt.c: 637: case 0:
   848                           
   849                           ;doprnt.c: 635: switch(c = *f++) {
   850  001054  C00D  FFF6         	movff	printf@f,tblptrl
   851  001058  C00E  FFF7         	movff	printf@f+1,tblptrh
   852  00105C  4A0D               	infsnz	printf@f,f,c
   853  00105E  2A0E               	incf	printf@f+1,f,c
   854  001060                     	if	0	;tblptru may be non-zero
   855  001060                     	endif
   856  001060                     	if	0	;tblptru may be non-zero
   857  001060                     	endif
   858  001060  0008               	tblrd		*
   859  001062  CFF5 F018          	movff	tablat,printf@c
   860  001066  5018               	movf	printf@c,w,c
   861                           
   862                           ; Switch size 1, requested type "space"
   863                           ; Number of cases is 3, Range of values is 0 to 105
   864                           ; switch strategies available:
   865                           ; Name         Instructions Cycles
   866                           ; simple_byte           10     6 (average)
   867                           ;	Chosen strategy is simple_byte
   868  001068  0A00               	xorlw	0	; case 0
   869  00106A  B4D8               	btfsc	status,2,c
   870  00106C  0012               	return	
   871  00106E  0A64               	xorlw	100	; case 100
   872  001070  B4D8               	btfsc	status,2,c
   873  001072  D003               	goto	l266
   874  001074  0A0D               	xorlw	13	; case 105
   875  001076  A4D8               	btfss	status,2,c
   876  001078  D060               	goto	u550
   877  00107A                     l266:
   878                           
   879                           ;doprnt.c: 1253: {
   880                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   881  00107A  C012  FFD9         	movff	printf@ap,fsr2l
   882  00107E  C013  FFDA         	movff	printf@ap+1,fsr2h
   883  001082  CFDE F016          	movff	postinc2,printf@val
   884  001086  CFDD F017          	movff	postdec2,printf@val+1
   885  00108A  0E02               	movlw	2
   886  00108C  2612               	addwf	printf@ap,f,c
   887  00108E  0E00               	movlw	0
   888  001090  2213               	addwfc	printf@ap+1,f,c
   889                           
   890                           ;doprnt.c: 1261: if((int)val < 0) {
   891  001092  AE17               	btfss	printf@val+1,7,c
   892  001094  D006               	goto	l268
   893                           
   894                           ;doprnt.c: 1262: flag |= 0x03;
   895  001096  0E03               	movlw	3
   896  001098  1214               	iorwf	printf@flag,f,c
   897                           
   898                           ;doprnt.c: 1263: val = -val;
   899  00109A  6C16               	negf	printf@val,c
   900  00109C  1E17               	comf	printf@val+1,f,c
   901  00109E  B0D8               	btfsc	status,0,c
   902  0010A0  2A17               	incf	printf@val+1,f,c
   903  0010A2                     l268:
   904                           
   905                           ;doprnt.c: 1264: }
   906                           ;doprnt.c: 1266: }
   907                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   908  0010A2  0E01               	movlw	1
   909  0010A4  6E18               	movwf	printf@c,c
   910  0010A6                     l1367:
   911  0010A6  0E05               	movlw	5
   912  0010A8  1818               	xorwf	printf@c,w,c
   913  0010AA  B4D8               	btfsc	status,2,c
   914  0010AC  D012               	goto	u530
   915                           
   916                           ;doprnt.c: 1306: if(val < dpowers[c])
   917  0010AE  5018               	movf	printf@c,w,c
   918  0010B0  0D02               	mullw	2
   919  0010B2  0E12               	movlw	low _dpowers
   920  0010B4  24F3               	addwf	prodl,w,c
   921  0010B6  6EF6               	movwf	tblptrl,c
   922  0010B8  0E10               	movlw	high _dpowers
   923  0010BA  20F4               	addwfc	prodh,w,c
   924  0010BC  6EF7               	movwf	tblptrh,c
   925  0010BE                     	if	0	;There are less than 3 active tblptr bytes
   926  0010BE                     	endif
   927  0010BE  0009               	tblrd		*+
   928  0010C0  50F5               	movf	tablat,w,c
   929  0010C2  5C16               	subwf	printf@val,w,c
   930  0010C4  0009               	tblrd		*+
   931  0010C6  50F5               	movf	tablat,w,c
   932  0010C8  5817               	subwfb	printf@val+1,w,c
   933  0010CA  A0D8               	btfss	status,0,c
   934  0010CC  D002               	goto	u530
   935                           
   936                           ;doprnt.c: 1307: break;
   937  0010CE  2A18               	incf	printf@c,f,c
   938  0010D0  D7EA               	goto	l1367
   939  0010D2                     u530:
   940                           
   941                           ;doprnt.c: 1422: {
   942                           ;doprnt.c: 1438: if(flag & 0x03)
   943  0010D2  C014  F011         	movff	printf@flag,??_printf
   944  0010D6  0E03               	movlw	3
   945  0010D8  1611               	andwf	??_printf,f,c
   946  0010DA  B4D8               	btfsc	status,2,c
   947  0010DC  D003               	goto	l272
   948                           
   949                           ;doprnt.c: 1439: (putch('-') );
   950  0010DE  0E2D               	movlw	45
   951  0010E0  ECCF  F00A         	call	_putch
   952  0010E4                     l272:
   953                           
   954                           ;doprnt.c: 1469: }
   955                           ;doprnt.c: 1472: prec = c;
   956  0010E4  C018  F015         	movff	printf@c,printf@prec
   957                           
   958                           ;doprnt.c: 1474: while(prec--) {
   959  0010E8  D024               	goto	l273
   960  0010EA                     
   961                           ;doprnt.c: 1478: {
   962                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   963  0010EA  5015               	movf	printf@prec,w,c
   964  0010EC  0D02               	mullw	2
   965  0010EE  0E12               	movlw	low _dpowers
   966  0010F0  24F3               	addwf	prodl,w,c
   967  0010F2  6EF6               	movwf	tblptrl,c
   968  0010F4  0E10               	movlw	high _dpowers
   969  0010F6  20F4               	addwfc	prodh,w,c
   970  0010F8  6EF7               	movwf	tblptrh,c
   971  0010FA                     	if	0	;There are less than 3 active tblptr bytes
   972  0010FA                     	endif
   973  0010FA  0009               	tblrd		*+
   974  0010FC  CFF5 F003          	movff	tablat,___lwdiv@divisor
   975  001100  000A               	tblrd		*-
   976  001102  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   977  001106  C016  F001         	movff	printf@val,___lwdiv@dividend
   978  00110A  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   979  00110E  ECE2  F009         	call	___lwdiv	;wreg free
   980  001112  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   981  001116  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   982  00111A  0E00               	movlw	0
   983  00111C  6E0B               	movwf	___lwmod@divisor+1,c
   984  00111E  0E0A               	movlw	10
   985  001120  6E0A               	movwf	___lwmod@divisor,c
   986  001122  EC7B  F00A         	call	___lwmod	;wreg free
   987  001126  5008               	movf	?___lwmod,w,c
   988  001128  0F30               	addlw	48
   989  00112A  6E18               	movwf	printf@c,c
   990                           
   991                           ;doprnt.c: 1523: }
   992                           ;doprnt.c: 1524: (putch(c) );
   993  00112C  5018               	movf	printf@c,w,c
   994  00112E  ECCF  F00A         	call	_putch
   995  001132                     l273:
   996  001132  0615               	decf	printf@prec,f,c
   997  001134  2815               	incf	printf@prec,w,c
   998  001136  A4D8               	btfss	status,2,c
   999  001138  D7D8               	goto	l274
  1000  00113A                     u550:
  1001  00113A  C00D  FFF6         	movff	printf@f,tblptrl
  1002  00113E  C00E  FFF7         	movff	printf@f+1,tblptrh
  1003  001142  4A0D               	infsnz	printf@f,f,c
  1004  001144  2A0E               	incf	printf@f+1,f,c
  1005  001146                     	if	0	;tblptru may be non-zero
  1006  001146                     	endif
  1007  001146                     	if	0	;tblptru may be non-zero
  1008  001146                     	endif
  1009  001146  0008               	tblrd		*
  1010  001148  CFF5 F018          	movff	tablat,printf@c
  1011  00114C  5018               	movf	printf@c,w,c
  1012  00114E  B4D8               	btfsc	status,2,c
  1013  001150  0012               	return	
  1014  001152  D776               	goto	l259
  1015  001154                     __end_of_printf:
  1016                           	opt stack 0
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           prodh	equ	0xFF4
  1022                           prodl	equ	0xFF3
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           postinc2	equ	0xFDE
  1026                           postdec2	equ	0xFDD
  1027                           fsr2h	equ	0xFDA
  1028                           fsr2l	equ	0xFD9
  1029                           status	equ	0xFD8
  1030                           
  1031 ;; *************** function _putch *****************
  1032 ;; Defined at:
  1033 ;;		line 24 in file "lcd.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;  data            1    wreg     unsigned char 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  data            1    2[COMRAM] unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, status,2, status,0, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1050 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1051 ;;Total ram usage:        1 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    1
  1054 ;; This function calls:
  1055 ;;		_lcdNibble
  1056 ;; This function is called by:
  1057 ;;		_printf
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text3
  1062  00159E                     __ptext3:
  1063                           	opt stack 0
  1064  00159E                     _putch:
  1065                           	opt stack 28
  1066                           
  1067                           ;incstack = 0
  1068                           ;putch@data stored from wreg
  1069  00159E  6E03               	movwf	putch@data,c
  1070                           
  1071                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1072  0015A0  848C               	bsf	3980,2,c	;volatile
  1073                           
  1074                           ;lcd.c: 33: lcdNibble(data);
  1075  0015A2  5003               	movf	putch@data,w,c
  1076  0015A4  EC75  F009         	call	_lcdNibble
  1077                           
  1078                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1079  0015A8  0EC8               	movlw	200
  1080  0015AA                     u627:
  1081  0015AA  D000               	nop2	
  1082  0015AC  2EE8               	decfsz	wreg,f,c
  1083  0015AE  D7FD               	bra	u627
  1084  0015B0  0012               	return		;funcret
  1085  0015B2                     __end_of_putch:
  1086                           	opt stack 0
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           prodh	equ	0xFF4
  1092                           prodl	equ	0xFF3
  1093                           postinc0	equ	0xFEE
  1094                           wreg	equ	0xFE8
  1095                           postinc2	equ	0xFDE
  1096                           postdec2	equ	0xFDD
  1097                           fsr2h	equ	0xFDA
  1098                           fsr2l	equ	0xFD9
  1099                           status	equ	0xFD8
  1100                           
  1101 ;; *************** function ___lwmod *****************
  1102 ;; Defined at:
  1103 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;  dividend        2    7[COMRAM] unsigned int 
  1106 ;;  divisor         2    9[COMRAM] unsigned int 
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  counter         1   11[COMRAM] unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  2    7[COMRAM] unsigned int 
  1111 ;; Registers used:
  1112 ;;		wreg, status,2, status,0
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1118 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;Total ram usage:        5 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_printf
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text4
  1132  0014F6                     __ptext4:
  1133                           	opt stack 0
  1134  0014F6                     ___lwmod:
  1135                           	opt stack 29
  1136                           
  1137                           ;incstack = 0
  1138  0014F6  500A               	movf	___lwmod@divisor,w,c
  1139  0014F8  100B               	iorwf	___lwmod@divisor+1,w,c
  1140  0014FA  B4D8               	btfsc	status,2,c
  1141  0014FC  D018               	goto	l696
  1142  0014FE  0E01               	movlw	1
  1143  001500  6E0C               	movwf	___lwmod@counter,c
  1144  001502  D004               	goto	l691
  1145  001504  90D8               	bcf	status,0,c
  1146  001506  360A               	rlcf	___lwmod@divisor,f,c
  1147  001508  360B               	rlcf	___lwmod@divisor+1,f,c
  1148  00150A  2A0C               	incf	___lwmod@counter,f,c
  1149  00150C                     l691:
  1150  00150C  AE0B               	btfss	___lwmod@divisor+1,7,c
  1151  00150E  D7FA               	goto	l692
  1152  001510                     u470:
  1153  001510  500A               	movf	___lwmod@divisor,w,c
  1154  001512  5C08               	subwf	___lwmod@dividend,w,c
  1155  001514  500B               	movf	___lwmod@divisor+1,w,c
  1156  001516  5809               	subwfb	___lwmod@dividend+1,w,c
  1157  001518  A0D8               	btfss	status,0,c
  1158  00151A  D004               	goto	l695
  1159  00151C  500A               	movf	___lwmod@divisor,w,c
  1160  00151E  5E08               	subwf	___lwmod@dividend,f,c
  1161  001520  500B               	movf	___lwmod@divisor+1,w,c
  1162  001522  5A09               	subwfb	___lwmod@dividend+1,f,c
  1163  001524                     l695:
  1164  001524  90D8               	bcf	status,0,c
  1165  001526  320B               	rrcf	___lwmod@divisor+1,f,c
  1166  001528  320A               	rrcf	___lwmod@divisor,f,c
  1167  00152A  2E0C               	decfsz	___lwmod@counter,f,c
  1168  00152C  D7F1               	goto	u470
  1169  00152E                     l696:
  1170  00152E  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1171  001532  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1172  001536  0012               	return		;funcret
  1173  001538                     __end_of___lwmod:
  1174                           	opt stack 0
  1175                           tblptru	equ	0xFF8
  1176                           tblptrh	equ	0xFF7
  1177                           tblptrl	equ	0xFF6
  1178                           tablat	equ	0xFF5
  1179                           prodh	equ	0xFF4
  1180                           prodl	equ	0xFF3
  1181                           postinc0	equ	0xFEE
  1182                           wreg	equ	0xFE8
  1183                           postinc2	equ	0xFDE
  1184                           postdec2	equ	0xFDD
  1185                           fsr2h	equ	0xFDA
  1186                           fsr2l	equ	0xFD9
  1187                           status	equ	0xFD8
  1188                           
  1189 ;; *************** function ___lwdiv *****************
  1190 ;; Defined at:
  1191 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  dividend        2    0[COMRAM] unsigned int 
  1194 ;;  divisor         2    2[COMRAM] unsigned int 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  quotient        2    4[COMRAM] unsigned int 
  1197 ;;  counter         1    6[COMRAM] unsigned char 
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  2    0[COMRAM] unsigned int 
  1200 ;; Registers used:
  1201 ;;		wreg, status,2, status,0
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;Total ram usage:        7 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_printf
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text5
  1221  0013C4                     __ptext5:
  1222                           	opt stack 0
  1223  0013C4                     ___lwdiv:
  1224                           	opt stack 29
  1225                           
  1226                           ;incstack = 0
  1227  0013C4  0E00               	movlw	0
  1228  0013C6  6E06               	movwf	___lwdiv@quotient+1,c
  1229  0013C8  0E00               	movlw	0
  1230  0013CA  6E05               	movwf	___lwdiv@quotient,c
  1231  0013CC  5003               	movf	___lwdiv@divisor,w,c
  1232  0013CE  1004               	iorwf	___lwdiv@divisor+1,w,c
  1233  0013D0  B4D8               	btfsc	status,2,c
  1234  0013D2  D01C               	goto	l686
  1235  0013D4  0E01               	movlw	1
  1236  0013D6  6E07               	movwf	___lwdiv@counter,c
  1237  0013D8  D004               	goto	l681
  1238  0013DA  90D8               	bcf	status,0,c
  1239  0013DC  3603               	rlcf	___lwdiv@divisor,f,c
  1240  0013DE  3604               	rlcf	___lwdiv@divisor+1,f,c
  1241  0013E0  2A07               	incf	___lwdiv@counter,f,c
  1242  0013E2                     l681:
  1243  0013E2  AE04               	btfss	___lwdiv@divisor+1,7,c
  1244  0013E4  D7FA               	goto	l682
  1245  0013E6                     u440:
  1246  0013E6  90D8               	bcf	status,0,c
  1247  0013E8  3605               	rlcf	___lwdiv@quotient,f,c
  1248  0013EA  3606               	rlcf	___lwdiv@quotient+1,f,c
  1249  0013EC  5003               	movf	___lwdiv@divisor,w,c
  1250  0013EE  5C01               	subwf	___lwdiv@dividend,w,c
  1251  0013F0  5004               	movf	___lwdiv@divisor+1,w,c
  1252  0013F2  5802               	subwfb	___lwdiv@dividend+1,w,c
  1253  0013F4  A0D8               	btfss	status,0,c
  1254  0013F6  D005               	goto	l685
  1255  0013F8  5003               	movf	___lwdiv@divisor,w,c
  1256  0013FA  5E01               	subwf	___lwdiv@dividend,f,c
  1257  0013FC  5004               	movf	___lwdiv@divisor+1,w,c
  1258  0013FE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1259  001400  8005               	bsf	___lwdiv@quotient,0,c
  1260  001402                     l685:
  1261  001402  90D8               	bcf	status,0,c
  1262  001404  3204               	rrcf	___lwdiv@divisor+1,f,c
  1263  001406  3203               	rrcf	___lwdiv@divisor,f,c
  1264  001408  2E07               	decfsz	___lwdiv@counter,f,c
  1265  00140A  D7ED               	goto	u440
  1266  00140C                     l686:
  1267  00140C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1268  001410  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1269  001414  0012               	return		;funcret
  1270  001416                     __end_of___lwdiv:
  1271                           	opt stack 0
  1272                           tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           prodh	equ	0xFF4
  1277                           prodl	equ	0xFF3
  1278                           postinc0	equ	0xFEE
  1279                           wreg	equ	0xFE8
  1280                           postinc2	equ	0xFDE
  1281                           postdec2	equ	0xFDD
  1282                           fsr2h	equ	0xFDA
  1283                           fsr2l	equ	0xFD9
  1284                           status	equ	0xFD8
  1285                           
  1286 ;; *************** function _motorStop_1 *****************
  1287 ;; Defined at:
  1288 ;;		line 284 in file "main.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;		None
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;		None
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg, status,2, status,0, cstack
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;Total ram usage:        0 bytes
  1307 ;; Hardware stack levels used:    1
  1308 ;; Hardware stack levels required when called:    2
  1309 ;; This function calls:
  1310 ;;		_I2C_Master_Init
  1311 ;;		_I2C_Master_Start
  1312 ;;		_I2C_Master_Stop
  1313 ;;		_I2C_Master_Write
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text6
  1320  001462                     __ptext6:
  1321                           	opt stack 0
  1322  001462                     _motorStop_1:
  1323                           	opt stack 28
  1324                           
  1325                           ;main.c: 285: I2C_Master_Init(100000);
  1326                           
  1327                           ;incstack = 0
  1328  001462  0EA0               	movlw	160
  1329  001464  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1330  001466  0E86               	movlw	134
  1331  001468  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1332  00146A  0E01               	movlw	1
  1333  00146C  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1334  00146E  0E00               	movlw	0
  1335  001470  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1336  001472  ECB4  F009         	call	_I2C_Master_Init	;wreg free
  1337                           
  1338                           ;main.c: 286: I2C_Master_Start();
  1339  001476  ECF5  F00A         	call	_I2C_Master_Start	;wreg free
  1340                           
  1341                           ;main.c: 288: I2C_Master_Write(0b00010000);
  1342  00147A  0E00               	movlw	0
  1343  00147C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1344  00147E  0E10               	movlw	16
  1345  001480  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1346  001482  ECEC  F00A         	call	_I2C_Master_Write	;wreg free
  1347                           
  1348                           ;main.c: 289: I2C_Master_Stop();
  1349  001486  ECF1  F00A         	call	_I2C_Master_Stop	;wreg free
  1350                           
  1351                           ;main.c: 292: I2C_Master_Start();
  1352  00148A  ECF5  F00A         	call	_I2C_Master_Start	;wreg free
  1353                           
  1354                           ;main.c: 293: I2C_Master_Write(0b00010000);
  1355  00148E  0E00               	movlw	0
  1356  001490  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1357  001492  0E10               	movlw	16
  1358  001494  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1359  001496  ECEC  F00A         	call	_I2C_Master_Write	;wreg free
  1360                           
  1361                           ;main.c: 294: I2C_Master_Write('6');
  1362  00149A  0E00               	movlw	0
  1363  00149C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1364  00149E  0E36               	movlw	54
  1365  0014A0  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1366  0014A2  ECEC  F00A         	call	_I2C_Master_Write	;wreg free
  1367                           
  1368                           ;main.c: 295: I2C_Master_Stop();
  1369  0014A6  ECF1  F00A         	call	_I2C_Master_Stop	;wreg free
  1370  0014AA  0012               	return		;funcret
  1371  0014AC                     __end_of_motorStop_1:
  1372                           	opt stack 0
  1373                           tblptru	equ	0xFF8
  1374                           tblptrh	equ	0xFF7
  1375                           tblptrl	equ	0xFF6
  1376                           tablat	equ	0xFF5
  1377                           prodh	equ	0xFF4
  1378                           prodl	equ	0xFF3
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postinc2	equ	0xFDE
  1382                           postdec2	equ	0xFDD
  1383                           fsr2h	equ	0xFDA
  1384                           fsr2l	equ	0xFD9
  1385                           status	equ	0xFD8
  1386                           
  1387 ;; *************** function _motorStart_1 *****************
  1388 ;; Defined at:
  1389 ;;		line 269 in file "main.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, status,2, status,0, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;Total ram usage:        0 bytes
  1408 ;; Hardware stack levels used:    1
  1409 ;; Hardware stack levels required when called:    2
  1410 ;; This function calls:
  1411 ;;		_I2C_Master_Init
  1412 ;;		_I2C_Master_Start
  1413 ;;		_I2C_Master_Stop
  1414 ;;		_I2C_Master_Write
  1415 ;; This function is called by:
  1416 ;;		_main
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text7
  1421  0014AC                     __ptext7:
  1422                           	opt stack 0
  1423  0014AC                     _motorStart_1:
  1424                           	opt stack 28
  1425                           
  1426                           ;main.c: 270: I2C_Master_Init(100000);
  1427                           
  1428                           ;incstack = 0
  1429  0014AC  0EA0               	movlw	160
  1430  0014AE  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1431  0014B0  0E86               	movlw	134
  1432  0014B2  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1433  0014B4  0E01               	movlw	1
  1434  0014B6  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1435  0014B8  0E00               	movlw	0
  1436  0014BA  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1437  0014BC  ECB4  F009         	call	_I2C_Master_Init	;wreg free
  1438                           
  1439                           ;main.c: 271: I2C_Master_Start();
  1440  0014C0  ECF5  F00A         	call	_I2C_Master_Start	;wreg free
  1441                           
  1442                           ;main.c: 273: I2C_Master_Write(0b00010000);
  1443  0014C4  0E00               	movlw	0
  1444  0014C6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1445  0014C8  0E10               	movlw	16
  1446  0014CA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1447  0014CC  ECEC  F00A         	call	_I2C_Master_Write	;wreg free
  1448                           
  1449                           ;main.c: 274: I2C_Master_Stop();
  1450  0014D0  ECF1  F00A         	call	_I2C_Master_Stop	;wreg free
  1451                           
  1452                           ;main.c: 277: I2C_Master_Start();
  1453  0014D4  ECF5  F00A         	call	_I2C_Master_Start	;wreg free
  1454                           
  1455                           ;main.c: 278: I2C_Master_Write(0b00010000);
  1456  0014D8  0E00               	movlw	0
  1457  0014DA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1458  0014DC  0E10               	movlw	16
  1459  0014DE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1460  0014E0  ECEC  F00A         	call	_I2C_Master_Write	;wreg free
  1461                           
  1462                           ;main.c: 279: I2C_Master_Write('5');
  1463  0014E4  0E00               	movlw	0
  1464  0014E6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1465  0014E8  0E35               	movlw	53
  1466  0014EA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1467  0014EC  ECEC  F00A         	call	_I2C_Master_Write	;wreg free
  1468                           
  1469                           ;main.c: 280: I2C_Master_Stop();
  1470  0014F0  ECF1  F00A         	call	_I2C_Master_Stop	;wreg free
  1471  0014F4  0012               	return		;funcret
  1472  0014F6                     __end_of_motorStart_1:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           prodh	equ	0xFF4
  1479                           prodl	equ	0xFF3
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _I2C_Master_Write *****************
  1489 ;; Defined at:
  1490 ;;		line 108 in file "I2C.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        2 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		_I2C_Master_Wait
  1513 ;; This function is called by:
  1514 ;;		_motorStart_1
  1515 ;;		_motorStop_1
  1516 ;;		_motorStart_0
  1517 ;;		_motorStop_0
  1518 ;;		_motorStart_2
  1519 ;;		_motorStop_2
  1520 ;;		_motorStart_3
  1521 ;;		_motorStop_3
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text8
  1526  0015D8                     __ptext8:
  1527                           	opt stack 0
  1528  0015D8                     _I2C_Master_Write:
  1529                           	opt stack 28
  1530                           
  1531                           ;I2C.c: 116: I2C_Master_Wait();
  1532                           
  1533                           ;incstack = 0
  1534  0015D8  ECE3  F00A         	call	_I2C_Master_Wait	;wreg free
  1535                           
  1536                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1537  0015DC  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1538  0015E0  0012               	return		;funcret
  1539  0015E2                     __end_of_I2C_Master_Write:
  1540                           	opt stack 0
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           prodh	equ	0xFF4
  1546                           prodl	equ	0xFF3
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           postinc2	equ	0xFDE
  1550                           postdec2	equ	0xFDD
  1551                           fsr2h	equ	0xFDA
  1552                           fsr2l	equ	0xFD9
  1553                           status	equ	0xFD8
  1554                           
  1555 ;; *************** function _I2C_Master_Stop *****************
  1556 ;; Defined at:
  1557 ;;		line 95 in file "I2C.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1575 ;;Total ram usage:        0 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    1
  1578 ;; This function calls:
  1579 ;;		_I2C_Master_Wait
  1580 ;; This function is called by:
  1581 ;;		_motorStart_1
  1582 ;;		_motorStop_1
  1583 ;;		_motorStart_0
  1584 ;;		_motorStop_0
  1585 ;;		_motorStart_2
  1586 ;;		_motorStop_2
  1587 ;;		_motorStart_3
  1588 ;;		_motorStop_3
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           	psect	text9
  1593  0015E2                     __ptext9:
  1594                           	opt stack 0
  1595  0015E2                     _I2C_Master_Stop:
  1596                           	opt stack 28
  1597                           
  1598                           ;I2C.c: 104: I2C_Master_Wait();
  1599                           
  1600                           ;incstack = 0
  1601  0015E2  ECE3  F00A         	call	_I2C_Master_Wait	;wreg free
  1602                           
  1603                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1604  0015E6  84C5               	bsf	4037,2,c	;volatile
  1605  0015E8  0012               	return		;funcret
  1606  0015EA                     __end_of_I2C_Master_Stop:
  1607                           	opt stack 0
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           prodh	equ	0xFF4
  1613                           prodl	equ	0xFF3
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           postinc2	equ	0xFDE
  1617                           postdec2	equ	0xFDD
  1618                           fsr2h	equ	0xFDA
  1619                           fsr2l	equ	0xFD9
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _I2C_Master_Start *****************
  1623 ;; Defined at:
  1624 ;;		line 69 in file "I2C.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;		None
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;Total ram usage:        0 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    1
  1645 ;; This function calls:
  1646 ;;		_I2C_Master_Wait
  1647 ;; This function is called by:
  1648 ;;		_motorStart_1
  1649 ;;		_motorStop_1
  1650 ;;		_motorStart_0
  1651 ;;		_motorStop_0
  1652 ;;		_motorStart_2
  1653 ;;		_motorStop_2
  1654 ;;		_motorStart_3
  1655 ;;		_motorStop_3
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text10
  1660  0015EA                     __ptext10:
  1661                           	opt stack 0
  1662  0015EA                     _I2C_Master_Start:
  1663                           	opt stack 28
  1664                           
  1665                           ;I2C.c: 78: I2C_Master_Wait();
  1666                           
  1667                           ;incstack = 0
  1668  0015EA  ECE3  F00A         	call	_I2C_Master_Wait	;wreg free
  1669                           
  1670                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1671  0015EE  80C5               	bsf	4037,0,c	;volatile
  1672  0015F0  0012               	return		;funcret
  1673  0015F2                     __end_of_I2C_Master_Start:
  1674                           	opt stack 0
  1675                           tblptru	equ	0xFF8
  1676                           tblptrh	equ	0xFF7
  1677                           tblptrl	equ	0xFF6
  1678                           tablat	equ	0xFF5
  1679                           prodh	equ	0xFF4
  1680                           prodl	equ	0xFF3
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postinc2	equ	0xFDE
  1684                           postdec2	equ	0xFDD
  1685                           fsr2h	equ	0xFDA
  1686                           fsr2l	equ	0xFD9
  1687                           status	equ	0xFD8
  1688                           
  1689 ;; *************** function _I2C_Master_Wait *****************
  1690 ;; Defined at:
  1691 ;;		line 51 in file "I2C.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;		None
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;		None
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      void 
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;Total ram usage:        1 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		_I2C_Master_Start
  1715 ;;		_I2C_Master_Stop
  1716 ;;		_I2C_Master_Write
  1717 ;;		_I2C_Master_RepeatedStart
  1718 ;;		_I2C_Master_Read
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text11
  1723  0015C6                     __ptext11:
  1724                           	opt stack 0
  1725  0015C6                     _I2C_Master_Wait:
  1726                           	opt stack 28
  1727                           
  1728                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1729                           
  1730                           ;incstack = 0
  1731  0015C6  B4C7               	btfsc	4039,2,c	;volatile
  1732  0015C8  D7FE               	goto	_I2C_Master_Wait
  1733  0015CA  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1734  0015CE  0E1F               	movlw	31
  1735  0015D0  1601               	andwf	??_I2C_Master_Wait,f,c
  1736  0015D2  B4D8               	btfsc	status,2,c
  1737  0015D4  0012               	return	
  1738  0015D6  D7F7               	goto	_I2C_Master_Wait
  1739  0015D8                     __end_of_I2C_Master_Wait:
  1740                           	opt stack 0
  1741                           tblptru	equ	0xFF8
  1742                           tblptrh	equ	0xFF7
  1743                           tblptrl	equ	0xFF6
  1744                           tablat	equ	0xFF5
  1745                           prodh	equ	0xFF4
  1746                           prodl	equ	0xFF3
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postinc2	equ	0xFDE
  1750                           postdec2	equ	0xFDD
  1751                           fsr2h	equ	0xFDA
  1752                           fsr2l	equ	0xFD9
  1753                           status	equ	0xFD8
  1754                           
  1755 ;; *************** function _I2C_Master_Init *****************
  1756 ;; Defined at:
  1757 ;;		line 14 in file "I2C.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;Total ram usage:        8 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    1
  1778 ;; This function calls:
  1779 ;;		___lldiv
  1780 ;; This function is called by:
  1781 ;;		_motorStart_1
  1782 ;;		_motorStop_1
  1783 ;;		_motorStart_0
  1784 ;;		_motorStop_0
  1785 ;;		_motorStart_2
  1786 ;;		_motorStop_2
  1787 ;;		_motorStart_3
  1788 ;;		_motorStop_3
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text12
  1793  001368                     __ptext12:
  1794                           	opt stack 0
  1795  001368                     _I2C_Master_Init:
  1796                           	opt stack 28
  1797                           
  1798                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1799                           
  1800                           ;incstack = 0
  1801  001368  9AC6               	bcf	4038,5,c	;volatile
  1802                           
  1803                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1804  00136A  8694               	bsf	3988,3,c	;volatile
  1805                           
  1806                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1807  00136C  8894               	bsf	3988,4,c	;volatile
  1808                           
  1809                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1810  00136E  0E80               	movlw	128
  1811  001370  6EC7               	movwf	4039,c	;volatile
  1812                           
  1813                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1814  001372  0E28               	movlw	40
  1815  001374  6EC6               	movwf	4038,c	;volatile
  1816                           
  1817                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1818  001376  0E00               	movlw	0
  1819  001378  6EC5               	movwf	4037,c	;volatile
  1820                           
  1821                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  1822  00137A  0E00               	movlw	0
  1823  00137C  6E01               	movwf	___lldiv@dividend,c
  1824  00137E  0E5A               	movlw	90
  1825  001380  6E02               	movwf	___lldiv@dividend+1,c
  1826  001382  0E62               	movlw	98
  1827  001384  6E03               	movwf	___lldiv@dividend+2,c
  1828  001386  0E02               	movlw	2
  1829  001388  6E04               	movwf	___lldiv@dividend+3,c
  1830  00138A  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  1831  00138E  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  1832  001392  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  1833  001396  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  1834  00139A  0E02               	movlw	2
  1835  00139C                     u425:
  1836  00139C  90D8               	bcf	status,0,c
  1837  00139E  3612               	rlcf	??_I2C_Master_Init,f,c
  1838  0013A0  3613               	rlcf	??_I2C_Master_Init+1,f,c
  1839  0013A2  3614               	rlcf	??_I2C_Master_Init+2,f,c
  1840  0013A4  3615               	rlcf	??_I2C_Master_Init+3,f,c
  1841  0013A6  2EE8               	decfsz	wreg,f,c
  1842  0013A8  D7F9               	goto	u425
  1843  0013AA  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  1844  0013AE  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  1845  0013B2  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  1846  0013B6  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  1847  0013BA  EC34  F009         	call	___lldiv	;wreg free
  1848  0013BE  0401               	decf	?___lldiv,w,c
  1849  0013C0  6EC8               	movwf	4040,c	;volatile
  1850  0013C2  0012               	return		;funcret
  1851  0013C4                     __end_of_I2C_Master_Init:
  1852                           	opt stack 0
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           prodh	equ	0xFF4
  1858                           prodl	equ	0xFF3
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           postinc2	equ	0xFDE
  1862                           postdec2	equ	0xFDD
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function ___lldiv *****************
  1868 ;; Defined at:
  1869 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  dividend        4    0[COMRAM] unsigned long 
  1872 ;;  divisor         4    4[COMRAM] unsigned long 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  quotient        4    8[COMRAM] unsigned long 
  1875 ;;  counter         1   12[COMRAM] unsigned char 
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  4    0[COMRAM] unsigned long 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2, status,0
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1885 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;Total ram usage:       13 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; This function calls:
  1892 ;;		Nothing
  1893 ;; This function is called by:
  1894 ;;		_I2C_Master_Init
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text13
  1899  001268                     __ptext13:
  1900                           	opt stack 0
  1901  001268                     ___lldiv:
  1902                           	opt stack 28
  1903                           
  1904                           ;incstack = 0
  1905  001268  0E00               	movlw	0
  1906  00126A  6E09               	movwf	___lldiv@quotient,c
  1907  00126C  0E00               	movlw	0
  1908  00126E  6E0A               	movwf	___lldiv@quotient+1,c
  1909  001270  0E00               	movlw	0
  1910  001272  6E0B               	movwf	___lldiv@quotient+2,c
  1911  001274  0E00               	movlw	0
  1912  001276  6E0C               	movwf	___lldiv@quotient+3,c
  1913  001278  5005               	movf	___lldiv@divisor,w,c
  1914  00127A  1006               	iorwf	___lldiv@divisor+1,w,c
  1915  00127C  1007               	iorwf	___lldiv@divisor+2,w,c
  1916  00127E  1008               	iorwf	___lldiv@divisor+3,w,c
  1917  001280  B4D8               	btfsc	status,2,c
  1918  001282  D02A               	goto	l633
  1919  001284  0E01               	movlw	1
  1920  001286  6E0D               	movwf	___lldiv@counter,c
  1921  001288  D006               	goto	l628
  1922  00128A  90D8               	bcf	status,0,c
  1923  00128C  3605               	rlcf	___lldiv@divisor,f,c
  1924  00128E  3606               	rlcf	___lldiv@divisor+1,f,c
  1925  001290  3607               	rlcf	___lldiv@divisor+2,f,c
  1926  001292  3608               	rlcf	___lldiv@divisor+3,f,c
  1927  001294  2A0D               	incf	___lldiv@counter,f,c
  1928  001296                     l628:
  1929  001296  AE08               	btfss	___lldiv@divisor+3,7,c
  1930  001298  D7F8               	goto	l629
  1931  00129A                     u400:
  1932  00129A  90D8               	bcf	status,0,c
  1933  00129C  3609               	rlcf	___lldiv@quotient,f,c
  1934  00129E  360A               	rlcf	___lldiv@quotient+1,f,c
  1935  0012A0  360B               	rlcf	___lldiv@quotient+2,f,c
  1936  0012A2  360C               	rlcf	___lldiv@quotient+3,f,c
  1937  0012A4  5005               	movf	___lldiv@divisor,w,c
  1938  0012A6  5C01               	subwf	___lldiv@dividend,w,c
  1939  0012A8  5006               	movf	___lldiv@divisor+1,w,c
  1940  0012AA  5802               	subwfb	___lldiv@dividend+1,w,c
  1941  0012AC  5007               	movf	___lldiv@divisor+2,w,c
  1942  0012AE  5803               	subwfb	___lldiv@dividend+2,w,c
  1943  0012B0  5008               	movf	___lldiv@divisor+3,w,c
  1944  0012B2  5804               	subwfb	___lldiv@dividend+3,w,c
  1945  0012B4  A0D8               	btfss	status,0,c
  1946  0012B6  D009               	goto	l632
  1947  0012B8  5005               	movf	___lldiv@divisor,w,c
  1948  0012BA  5E01               	subwf	___lldiv@dividend,f,c
  1949  0012BC  5006               	movf	___lldiv@divisor+1,w,c
  1950  0012BE  5A02               	subwfb	___lldiv@dividend+1,f,c
  1951  0012C0  5007               	movf	___lldiv@divisor+2,w,c
  1952  0012C2  5A03               	subwfb	___lldiv@dividend+2,f,c
  1953  0012C4  5008               	movf	___lldiv@divisor+3,w,c
  1954  0012C6  5A04               	subwfb	___lldiv@dividend+3,f,c
  1955  0012C8  8009               	bsf	___lldiv@quotient,0,c
  1956  0012CA                     l632:
  1957  0012CA  90D8               	bcf	status,0,c
  1958  0012CC  3208               	rrcf	___lldiv@divisor+3,f,c
  1959  0012CE  3207               	rrcf	___lldiv@divisor+2,f,c
  1960  0012D0  3206               	rrcf	___lldiv@divisor+1,f,c
  1961  0012D2  3205               	rrcf	___lldiv@divisor,f,c
  1962  0012D4  2E0D               	decfsz	___lldiv@counter,f,c
  1963  0012D6  D7E1               	goto	u400
  1964  0012D8                     l633:
  1965  0012D8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1966  0012DC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1967  0012E0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1968  0012E4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1969  0012E8  0012               	return		;funcret
  1970  0012EA                     __end_of___lldiv:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           prodh	equ	0xFF4
  1977                           prodl	equ	0xFF3
  1978                           postinc0	equ	0xFEE
  1979                           wreg	equ	0xFE8
  1980                           postinc2	equ	0xFDE
  1981                           postdec2	equ	0xFDD
  1982                           fsr2h	equ	0xFDA
  1983                           fsr2l	equ	0xFD9
  1984                           status	equ	0xFD8
  1985                           
  1986 ;; *************** function _initLCD *****************
  1987 ;; Defined at:
  1988 ;;		line 60 in file "lcd.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;		None
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, status,2, status,0, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;Total ram usage:        1 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    2
  2009 ;; This function calls:
  2010 ;;		_lcdInst
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text14
  2017  001416                     __ptext14:
  2018                           	opt stack 0
  2019  001416                     _initLCD:
  2020                           	opt stack 28
  2021                           
  2022                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2023                           
  2024                           ;incstack = 0
  2025  001416  0EC3               	movlw	195
  2026  001418  6E04               	movwf	??_initLCD& (0+255),c
  2027  00141A  0ECD               	movlw	205
  2028  00141C                     u637:
  2029  00141C  2EE8               	decfsz	wreg,f,c
  2030  00141E  D7FE               	bra	u637
  2031  001420  2E04               	decfsz	??_initLCD& (0+255),f,c
  2032  001422  D7FC               	bra	u637
  2033  001424  F000               	nop	
  2034                           
  2035                           ;lcd.c: 69: lcdInst(0b00110011);
  2036  001426  0E33               	movlw	51
  2037  001428  ECD9  F00A         	call	_lcdInst
  2038                           
  2039                           ;lcd.c: 70: lcdInst(0b00110010);
  2040  00142C  0E32               	movlw	50
  2041  00142E  ECD9  F00A         	call	_lcdInst
  2042                           
  2043                           ;lcd.c: 71: lcdInst(0b00101000);
  2044  001432  0E28               	movlw	40
  2045  001434  ECD9  F00A         	call	_lcdInst
  2046                           
  2047                           ;lcd.c: 72: lcdInst(0b00001111);
  2048  001438  0E0F               	movlw	15
  2049  00143A  ECD9  F00A         	call	_lcdInst
  2050                           
  2051                           ;lcd.c: 73: lcdInst(0b00000110);
  2052  00143E  0E06               	movlw	6
  2053  001440  ECD9  F00A         	call	_lcdInst
  2054                           
  2055                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2056  001444  0E01               	movlw	1
  2057  001446  ECD9  F00A         	call	_lcdInst
  2058  00144A  0EC3               	movlw	195
  2059  00144C  6E04               	movwf	??_initLCD& (0+255),c
  2060  00144E  0ECD               	movlw	205
  2061  001450                     u647:
  2062  001450  2EE8               	decfsz	wreg,f,c
  2063  001452  D7FE               	bra	u647
  2064  001454  2E04               	decfsz	??_initLCD& (0+255),f,c
  2065  001456  D7FC               	bra	u647
  2066  001458  F000               	nop	
  2067                           
  2068                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2069  00145A  0E0F               	movlw	15
  2070  00145C  ECD9  F00A         	call	_lcdInst
  2071  001460  0012               	return		;funcret
  2072  001462                     __end_of_initLCD:
  2073                           	opt stack 0
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           prodh	equ	0xFF4
  2079                           prodl	equ	0xFF3
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           postinc2	equ	0xFDE
  2083                           postdec2	equ	0xFDD
  2084                           fsr2h	equ	0xFDA
  2085                           fsr2l	equ	0xFD9
  2086                           status	equ	0xFD8
  2087                           
  2088 ;; *************** function _lcdInst *****************
  2089 ;; Defined at:
  2090 ;;		line 11 in file "lcd.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  data            1    wreg     unsigned char 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  data            1    2[COMRAM] unsigned char 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;Total ram usage:        1 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    1
  2111 ;; This function calls:
  2112 ;;		_lcdNibble
  2113 ;; This function is called by:
  2114 ;;		_main
  2115 ;;		_initLCD
  2116 ;;		_lcd_set_cursor
  2117 ;;		_lcd_shift_cursor
  2118 ;;		_lcd_shift_display
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text15
  2123  0015B2                     __ptext15:
  2124                           	opt stack 0
  2125  0015B2                     _lcdInst:
  2126                           	opt stack 29
  2127                           
  2128                           ;incstack = 0
  2129                           ;lcdInst@data stored from wreg
  2130  0015B2  6E03               	movwf	lcdInst@data,c
  2131                           
  2132                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2133  0015B4  948C               	bcf	3980,2,c	;volatile
  2134                           
  2135                           ;lcd.c: 20: lcdNibble(data);
  2136  0015B6  5003               	movf	lcdInst@data,w,c
  2137  0015B8  EC75  F009         	call	_lcdNibble
  2138                           
  2139                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2140  0015BC  0EC8               	movlw	200
  2141  0015BE                     u657:
  2142  0015BE  D000               	nop2	
  2143  0015C0  2EE8               	decfsz	wreg,f,c
  2144  0015C2  D7FD               	bra	u657
  2145  0015C4  0012               	return		;funcret
  2146  0015C6                     __end_of_lcdInst:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           postinc2	equ	0xFDE
  2157                           postdec2	equ	0xFDD
  2158                           fsr2h	equ	0xFDA
  2159                           fsr2l	equ	0xFD9
  2160                           status	equ	0xFD8
  2161                           
  2162 ;; *************** function _lcdNibble *****************
  2163 ;; Defined at:
  2164 ;;		line 37 in file "lcd.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  data            1    wreg     unsigned char 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;  data            1    1[COMRAM] unsigned char 
  2169 ;;  temp            1    0[COMRAM] unsigned char 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2, status,0
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;Total ram usage:        2 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_lcdInst
  2189 ;;		_putch
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           	psect	text16
  2194  0012EA                     __ptext16:
  2195                           	opt stack 0
  2196  0012EA                     _lcdNibble:
  2197                           	opt stack 28
  2198                           
  2199                           ;incstack = 0
  2200                           ;lcdNibble@data stored from wreg
  2201  0012EA  6E02               	movwf	lcdNibble@data,c
  2202                           
  2203                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2204  0012EC  5002               	movf	lcdNibble@data,w,c
  2205  0012EE  0BF0               	andlw	240
  2206  0012F0  6E01               	movwf	lcdNibble@temp,c
  2207                           
  2208                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2209  0012F2  508C               	movf	3980,w,c	;volatile
  2210  0012F4  0B0F               	andlw	15
  2211  0012F6  6E8C               	movwf	3980,c	;volatile
  2212                           
  2213                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2214  0012F8  5001               	movf	lcdNibble@temp,w,c
  2215  0012FA  108C               	iorwf	3980,w,c	;volatile
  2216  0012FC  6E8C               	movwf	3980,c	;volatile
  2217                           
  2218                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2219  0012FE  0E00               	movlw	0
  2220  001300  BEF2               	btfsc	intcon,7,c	;volatile
  2221  001302  0E01               	movlw	1
  2222  001304  6E27               	movwf	lcd@LCDinterruptState,c
  2223  001306  9EF2               	bcf	intcon,7,c	;volatile
  2224  001308  868C               	bsf	3980,3,c	;volatile
  2225  00130A  0E53               	movlw	83
  2226  00130C                     u667:
  2227  00130C  2EE8               	decfsz	wreg,f,c
  2228  00130E  D7FE               	bra	u667
  2229  001310  F000               	nop	
  2230  001312  968C               	bcf	3980,3,c	;volatile
  2231  001314  0EC8               	movlw	200
  2232  001316                     u677:
  2233  001316  D000               	nop2	
  2234  001318  2EE8               	decfsz	wreg,f,c
  2235  00131A  D7FD               	bra	u677
  2236  00131C  B027               	btfsc	lcd@LCDinterruptState,0,c
  2237  00131E  D002               	bra	u15
  2238  001320  9EF2               	bcf	intcon,7,c	;volatile
  2239  001322  D001               	bra	u16
  2240  001324                     u15:
  2241  001324  8EF2               	bsf	intcon,7,c	;volatile
  2242  001326                     u16:
  2243                           
  2244                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2245  001326  3802               	swapf	lcdNibble@data,w,c
  2246  001328  0BF0               	andlw	240
  2247  00132A  6E02               	movwf	lcdNibble@data,c
  2248                           
  2249                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2250  00132C  5002               	movf	lcdNibble@data,w,c
  2251  00132E  0BF0               	andlw	240
  2252  001330  6E01               	movwf	lcdNibble@temp,c
  2253                           
  2254                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2255  001332  508C               	movf	3980,w,c	;volatile
  2256  001334  0B0F               	andlw	15
  2257  001336  6E8C               	movwf	3980,c	;volatile
  2258                           
  2259                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2260  001338  5001               	movf	lcdNibble@temp,w,c
  2261  00133A  108C               	iorwf	3980,w,c	;volatile
  2262  00133C  6E8C               	movwf	3980,c	;volatile
  2263                           
  2264                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2265  00133E  0E00               	movlw	0
  2266  001340  BEF2               	btfsc	intcon,7,c	;volatile
  2267  001342  0E01               	movlw	1
  2268  001344  6E27               	movwf	lcd@LCDinterruptState,c
  2269  001346  9EF2               	bcf	intcon,7,c	;volatile
  2270  001348  868C               	bsf	3980,3,c	;volatile
  2271  00134A  0E53               	movlw	83
  2272  00134C                     u687:
  2273  00134C  2EE8               	decfsz	wreg,f,c
  2274  00134E  D7FE               	bra	u687
  2275  001350  F000               	nop	
  2276  001352  968C               	bcf	3980,3,c	;volatile
  2277  001354  0EC8               	movlw	200
  2278  001356                     u697:
  2279  001356  D000               	nop2	
  2280  001358  2EE8               	decfsz	wreg,f,c
  2281  00135A  D7FD               	bra	u697
  2282  00135C  B027               	btfsc	lcd@LCDinterruptState,0,c
  2283  00135E  D002               	bra	u25
  2284  001360  9EF2               	bcf	intcon,7,c	;volatile
  2285  001362  D001               	bra	u26
  2286  001364                     u25:
  2287  001364  8EF2               	bsf	intcon,7,c	;volatile
  2288  001366                     u26:
  2289  001366  0012               	return		;funcret
  2290  001368                     __end_of_lcdNibble:
  2291                           	opt stack 0
  2292                           tblptru	equ	0xFF8
  2293                           tblptrh	equ	0xFF7
  2294                           tblptrl	equ	0xFF6
  2295                           tablat	equ	0xFF5
  2296                           prodh	equ	0xFF4
  2297                           prodl	equ	0xFF3
  2298                           intcon	equ	0xFF2
  2299                           postinc0	equ	0xFEE
  2300                           wreg	equ	0xFE8
  2301                           postinc2	equ	0xFDE
  2302                           postdec2	equ	0xFDD
  2303                           fsr2h	equ	0xFDA
  2304                           fsr2l	equ	0xFD9
  2305                           status	equ	0xFD8
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           prodh	equ	0xFF4
  2311                           prodl	equ	0xFF3
  2312                           intcon	equ	0xFF2
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           postinc2	equ	0xFDE
  2316                           postdec2	equ	0xFDD
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8
  2320                           
  2321                           	psect	rparam
  2322  0000                     tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           prodh	equ	0xFF4
  2327                           prodl	equ	0xFF3
  2328                           intcon	equ	0xFF2
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           postinc2	equ	0xFDE
  2332                           postdec2	equ	0xFDD
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    36
    Data        2
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[15]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_1->_I2C_Master_Init
    _motorStart_1->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7187
                                             24 COMRAM     2     2      0
                            _initLCD
                            _lcdInst
                       _motorStart_1
                        _motorStop_1
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1405
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          0     0      0    2790
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         0     0      0    2790
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1846
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     944
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      34        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 16:28:56 2018

                          _i 001B                           l99 11B2                           u15 1324  
                         u16 1326                           u25 1364                           u26 1366  
                __CFG_CPD$ON 000000                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l100 11C8                          l101 1238                          l102 11FE  
                        l111 1550                          l260 1050                          l272 10E4  
                        l273 1132                          l274 10EA                          l266 107A  
                        l259 1040                          l268 10A2                          l632 12CA  
                        l633 12D8                          l628 1296                          l629 128A  
                        l681 13E2                          l682 13DA                          l691 150C  
                        l692 1504                          l685 1402                          l686 140C  
                        l695 1524                          l696 152E                 __CFG_CPB$OFF 000000  
                        u400 129A                          u440 13E6                          u425 139C  
                        u530 10D2                          u470 1510                          u550 113A  
                        u607 1224                          u617 125A                          u627 15AA  
                        u637 141C                          u647 1450                          u657 15BE  
                        u667 130C                          u677 1316                          u687 134C  
                        u697 1356                          _max 0029                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1367 10A6  
                       l1439 11FE                         _ADON 007E10                         STR_1 1031  
                       STR_2 1031                         STR_3 1031                         STR_4 1025  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         _main 1154  
                       _keys 1001                         fsr2h 000FDA                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT 1020             ?_I2C_Master_Init 000E             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lldiv 12EA  
            __end_of___lwdiv 1416              __end_of___lwmod 1538                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 15C6                _N_spacingTime 001F               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_readADC 1570              __end_of_initLCD 1462  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C                        _array 101C  
                      _state 0025                        _putch 159E                        tablat 000FF5  
          _LCDinterruptState 0028                        status 000FD8               __CFG_PBADEN$ON 000000  
            __initialization 1570                 __end_of_main 1268                 __end_of_keys 1012  
             __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 1021                       ??_main 0019  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002  
         ??_I2C_Master_Start 0002                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0004                       _ADRESH 000FC4                       _ADRESL 000FC3  
                     ?_putch 0001                       _OSCCON 000FD3                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000  
                  ??___lldiv 0009                    ??___lwdiv 0005                    ??___lwmod 000C  
                     clear_0 158E                 ?_motorStop_1 0001                    ??_lcdInst 0003  
                     _printf 1036                    ??_readADC 0003                    ??_initLCD 0004  
               __pdataCOMRAM 0029                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 1594                ___rparam_used 000001               __pcstackCOMRAM 0001  
              __end_of_array 101F                __end_of_putch 15B2           __size_of_lcdNibble 007E  
                    ??_putch 0003                      ?_printf 000D         lcd@LCDinterruptState 0027  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
          __end_of_lcdNibble 1368                      __Hparam 0000                      __Lparam 0000  
                    ___lldiv 1268                      ___lwdiv 13C4                      ___lwmod 14F6  
               __psmallconst 1000                      __pcinit 1570                      __ramtop 1000  
                    _lcdInst 15B2                      __ptext0 1154                      __ptext1 1538  
                    __ptext2 1036                      __ptext3 159E                      __ptext4 14F6  
                    __ptext5 13C4                      __ptext6 1462                      __ptext7 14AC  
                    __ptext8 15D8                      __ptext9 15E2              __size_of_printf 011E  
                    _readADC 1538                      _initLCD 1416         __size_of_motorStop_1 004A  
                    _dpowers 1012                ?_motorStart_1 0001                    _LCD_RIGHT 1020  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
       end_of_initialization 1594        __end_of_LCD_SIZE_HORZ 1023        __end_of_LCD_SIZE_VERT 1022  
              __Lmediumconst 0000    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                      printf@c 0018  
                    printf@f 000D                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               ??_motorStart_1 0016                    _TRISCbits 000F94  
                  _TRISDbits 000F95                __pidataCOMRAM 15F2               __end_of_printf 1154  
                  _N_counter 0023          start_initialization 1570            ??_I2C_Master_Init 0012  
          ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002     I2C_Master_Init@clockFreq 000E  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 0011                _analog_result 001D  
                __pbssCOMRAM 001B             _I2C_Master_Start 15EA             _I2C_Master_Write 15D8  
       __end_of_motorStart_1 14F6             ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000  
                  _lcdNibble 12EA                     ?___lldiv 0001                     ?___lwdiv 0001  
                   ?___lwmod 0008                     ?_lcdInst 0001                     ?_readADC 0001  
                   ?_initLCD 0001                  __smallconst 1000             ___lwdiv@quotient 0005  
             __size_of_putch 0014                     _LCD_LEFT 101F                     _LATDbits 000F8C  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001                ??_motorStop_1 0016  
                 _ADCON0bits 000FC2                   _ADCON2bits 000FC0                lcdNibble@data 0002  
                 printf@flag 0014                lcdNibble@temp 0001                   printf@prec 0015  
             _LCD_HORZ_LIMIT 1024                     _N_remain 0021                     __Hrparam 0000  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082  
           __size_of___lwdiv 0052             __size_of___lwmod 0042               readADC@channel 0005  
           __size_of_lcdInst 0014              _I2C_Master_Init 1368             __size_of_readADC 0038  
           __size_of_initLCD 004C              _I2C_Master_Wait 15C6              _I2C_Master_Stop 15E2  
     __end_of_LCD_HORZ_LIMIT 1025          __end_of_motorStop_1 14AC              ___lwdiv@divisor 0003  
            ___lwdiv@counter 0007                     __ptext10 15EA                     __ptext11 15C6  
                   __ptext12 1368                     __ptext13 1268                     __ptext14 1416  
                   __ptext15 15B2                     __ptext16 12EA               _LCD_VERT_LIMIT 1023  
      __size_of_motorStart_1 004A                __size_of_main 0114                  ??_lcdNibble 0001  
                  printf@val 0016  I2C_Master_Write@byteToWrite 0002                    putch@data 0003  
   __end_of_I2C_Master_Start 15F2     __end_of_I2C_Master_Write 15E2                   _INTCONbits 000FF2  
               _motorStart_1 14AC       __end_of_LCD_VERT_LIMIT 1024                _LCD_SIZE_HORZ 1022  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 1021             ___lldiv@dividend 0001  
                   printf@ap 0012      __end_of_I2C_Master_Init 13C4      __end_of_I2C_Master_Wait 15D8  
    __end_of_I2C_Master_Stop 15EA                  lcdInst@data 0003                  _motorStop_1 1462  
           ___lldiv@quotient 0009              ___lwmod@divisor 000A              ___lwmod@counter 000C  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
