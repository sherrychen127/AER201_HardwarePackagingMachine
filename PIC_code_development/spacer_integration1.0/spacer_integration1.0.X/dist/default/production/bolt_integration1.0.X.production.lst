

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 17:01:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4620 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	idataCOMRAM
    70  00195E                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _max
    74  00195E  0004               	dw	4
    75                           
    76                           	psect	smallconst
    77  001000                     __psmallconst:
    78                           	opt stack 0
    79  001000  00                 	db	0
    80  001001                     _keys:
    81                           	opt stack 0
    82  001001  31                 	db	49
    83  001002  32                 	db	50
    84  001003  33                 	db	51
    85  001004  41                 	db	65
    86  001005  34                 	db	52
    87  001006  35                 	db	53
    88  001007  36                 	db	54
    89  001008  42                 	db	66
    90  001009  37                 	db	55
    91  00100A  38                 	db	56
    92  00100B  39                 	db	57
    93  00100C  43                 	db	67
    94  00100D  2A                 	db	42
    95  00100E  30                 	db	48
    96  00100F  23                 	db	35
    97  001010  44                 	db	68
    98  001011  00                 	db	0
    99  001012                     __end_of_keys:
   100                           	opt stack 0
   101  001012                     _dpowers:
   102                           	opt stack 0
   103  001012  0001               	dw	1
   104  001014  000A               	dw	10
   105  001016  0064               	dw	100
   106  001018  03E8               	dw	1000
   107  00101A  2710               	dw	10000
   108  00101C                     __end_of_dpowers:
   109                           	opt stack 0
   110  00101C                     _hexpowers:
   111                           	opt stack 0
   112  00101C  0001               	dw	1
   113  00101E  0010               	dw	16
   114  001020  0100               	dw	256
   115  001022  1000               	dw	4096
   116  001024                     __end_of_hexpowers:
   117                           	opt stack 0
   118  001024                     _array:
   119                           	opt stack 0
   120  001024  31                 	db	49
   121  001025  30                 	db	48
   122  001026  00                 	db	0
   123  001027                     __end_of_array:
   124                           	opt stack 0
   125  001027                     _LCD_LEFT:
   126                           	opt stack 0
   127  001027  00                 	db	0
   128  001028                     __end_of_LCD_LEFT:
   129                           	opt stack 0
   130  001028                     _LCD_RIGHT:
   131                           	opt stack 0
   132  001028  01                 	db	1
   133  001029                     __end_of_LCD_RIGHT:
   134                           	opt stack 0
   135  001029                     _LCD_SIZE_VERT:
   136                           	opt stack 0
   137  001029  02                 	db	2
   138  00102A                     __end_of_LCD_SIZE_VERT:
   139                           	opt stack 0
   140  00102A                     _LCD_SIZE_HORZ:
   141                           	opt stack 0
   142  00102A  10                 	db	16
   143  00102B                     __end_of_LCD_SIZE_HORZ:
   144                           	opt stack 0
   145  00102B                     _LCD_VERT_LIMIT:
   146                           	opt stack 0
   147  00102B  02                 	db	2
   148  00102C                     __end_of_LCD_VERT_LIMIT:
   149                           	opt stack 0
   150  00102C                     _LCD_HORZ_LIMIT:
   151                           	opt stack 0
   152  00102C  28                 	db	40
   153  00102D                     __end_of_LCD_HORZ_LIMIT:
   154                           	opt stack 0
   155  0000                     _SSPBUF	set	4041
   156  0000                     _SSPCON2bits	set	4037
   157  0000                     _SSPADD	set	4040
   158  0000                     _SSPCON2	set	4037
   159  0000                     _SSPCON1	set	4038
   160  0000                     _SSPSTAT	set	4039
   161  0000                     _TRISCbits	set	3988
   162  0000                     _SSPCON1bits	set	4038
   163  0000                     _INTCONbits	set	4082
   164  0000                     _TRISDbits	set	3989
   165  0000                     _LATDbits	set	3980
   166  0000                     _ADRESH	set	4036
   167  0000                     _ADRESL	set	4035
   168  0000                     _ADCON0bits	set	4034
   169  0000                     _ADCON2bits	set	4032
   170  0000                     _ADCON1	set	4033
   171  0000                     _ADCON0	set	4034
   172  0000                     _TRISE	set	3990
   173  0000                     _TRISD	set	3989
   174  0000                     _TRISC	set	3988
   175  0000                     _TRISB	set	3987
   176  0000                     _TRISA	set	3986
   177  0000                     _LATE	set	3981
   178  0000                     _LATD	set	3980
   179  0000                     _LATC	set	3979
   180  0000                     _LATB	set	3978
   181  0000                     _LATA	set	3977
   182  0000                     _ADON	set	32272
   183  00102D                     STR_8:
   184  00102D  30                 	db	48	;'0'
   185  00102E  31                 	db	49	;'1'
   186  00102F  32                 	db	50	;'2'
   187  001030  33                 	db	51	;'3'
   188  001031  34                 	db	52	;'4'
   189  001032  35                 	db	53	;'5'
   190  001033  36                 	db	54	;'6'
   191  001034  37                 	db	55	;'7'
   192  001035  38                 	db	56	;'8'
   193  001036  39                 	db	57	;'9'
   194  001037  61                 	db	97	;'a'
   195  001038  62                 	db	98	;'b'
   196  001039  63                 	db	99	;'c'
   197  00103A  64                 	db	100	;'d'
   198  00103B  65                 	db	101	;'e'
   199  00103C  66                 	db	102	;'f'
   200  00103D  00                 	db	0
   201  00103E                     STR_7:
   202  00103E  72                 	db	114	;'r'
   203  00103F  65                 	db	101	;'e'
   204  001040  6D                 	db	109	;'m'
   205  001041  61                 	db	97	;'a'
   206  001042  69                 	db	105	;'i'
   207  001043  6E                 	db	110	;'n'
   208  001044  20                 	db	32
   209  001045  4E                 	db	78	;'N'
   210  001046  75                 	db	117	;'u'
   211  001047  74                 	db	116	;'t'
   212  001048  73                 	db	115	;'s'
   213  001049  3A                 	db	58	;':'
   214  00104A  25                 	db	37
   215  00104B  64                 	db	100	;'d'
   216  00104C  00                 	db	0
   217  00104D                     STR_6:
   218  00104D  52                 	db	82	;'R'
   219  00104E  41                 	db	65	;'A'
   220  00104F  32                 	db	50	;'2'
   221  001050  3A                 	db	58	;':'
   222  001051  20                 	db	32
   223  001052  25                 	db	37
   224  001053  2E                 	db	46
   225  001054  33                 	db	51	;'3'
   226  001055  78                 	db	120	;'x'
   227  001056  00                 	db	0
   228  001057                     STR_3:
   229  001057  64                 	db	100	;'d'
   230  001058  6F                 	db	111	;'o'
   231  001059  6E                 	db	110	;'n'
   232  00105A  65                 	db	101	;'e'
   233  00105B  00                 	db	0
   234  0000                     
   235                           ; #config settings
   236  00105C  00                 	db	0	; dummy byte at the end
   237  0000                     
   238                           	psect	cinit
   239  0018BE                     __pcinit:
   240                           	opt stack 0
   241  0018BE                     start_initialization:
   242                           	opt stack 0
   243  0018BE                     __initialization:
   244                           	opt stack 0
   245                           
   246                           ; Initialize objects allocated to COMRAM (2 bytes)
   247                           ; load TBLPTR registers with __pidataCOMRAM
   248  0018BE  0E5E               	movlw	low __pidataCOMRAM
   249  0018C0  6EF6               	movwf	tblptrl,c
   250  0018C2  0E19               	movlw	high __pidataCOMRAM
   251  0018C4  6EF7               	movwf	tblptrh,c
   252  0018C6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   253  0018C8  6EF8               	movwf	tblptru,c
   254  0018CA  0009               	tblrd		*+	;fetch initializer
   255  0018CC  CFF5 F02A          	movff	tablat,__pdataCOMRAM
   256  0018D0  0009               	tblrd		*+	;fetch initializer
   257  0018D2  CFF5 F02B          	movff	tablat,__pdataCOMRAM+1
   258                           
   259                           ; Clear objects allocated to COMRAM (14 bytes)
   260  0018D6  EE00  F01C         	lfsr	0,__pbssCOMRAM
   261  0018DA  0E0E               	movlw	14
   262  0018DC                     clear_0:
   263  0018DC  6AEE               	clrf	postinc0,c
   264  0018DE  06E8               	decf	wreg,f,c
   265  0018E0  E1FD               	bnz	clear_0
   266  0018E2                     end_of_initialization:
   267                           	opt stack 0
   268  0018E2                     __end_of__initialization:
   269                           	opt stack 0
   270  0018E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   271  0018E4  6EF8               	movwf	tblptru,c
   272  0018E6  0100               	movlb	0
   273  0018E8  EF65  F009         	goto	_main	;jump to C main() function
   274                           tblptru	equ	0xFF8
   275                           tblptrh	equ	0xFF7
   276                           tblptrl	equ	0xFF6
   277                           tablat	equ	0xFF5
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	bssCOMRAM
   282  00001C                     __pbssCOMRAM:
   283                           	opt stack 0
   284  00001C                     _i:
   285                           	opt stack 0
   286  00001C                     	ds	2
   287  00001E                     _analog_result:
   288                           	opt stack 0
   289  00001E                     	ds	2
   290  000020                     _B_spacingTime:
   291                           	opt stack 0
   292  000020                     	ds	2
   293  000022                     _B_remain:
   294                           	opt stack 0
   295  000022                     	ds	2
   296  000024                     _B_counter:
   297                           	opt stack 0
   298  000024                     	ds	2
   299  000026                     _state:
   300                           	opt stack 0
   301  000026                     	ds	2
   302  000028                     lcd@LCDinterruptState:
   303                           	opt stack 0
   304  000028                     	ds	1
   305  000029                     	ds	1
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           
   313                           	psect	dataCOMRAM
   314  00002A                     __pdataCOMRAM:
   315                           	opt stack 0
   316  00002A                     _max:
   317                           	opt stack 0
   318  00002A                     	ds	2
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326                           	psect	cstackCOMRAM
   327  000001                     __pcstackCOMRAM:
   328                           	opt stack 0
   329  000001                     ??_isdigit:
   330  000001                     ??_I2C_Master_Wait:
   331  000001                     ?_readADC:
   332                           	opt stack 0
   333  000001                     ?___lwdiv:
   334                           	opt stack 0
   335  000001                     ?___lldiv:
   336                           	opt stack 0
   337  000001                     lcdNibble@temp:
   338                           	opt stack 0
   339  000001                     ___lwdiv@dividend:
   340                           	opt stack 0
   341  000001                     ___lldiv@dividend:
   342                           	opt stack 0
   343                           
   344                           ; 4 bytes @ 0x0
   345  000001                     	ds	1
   346  000002                     lcdNibble@data:
   347                           	opt stack 0
   348  000002                     _isdigit$833:
   349                           	opt stack 0
   350  000002                     I2C_Master_Write@byteToWrite:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x1
   354  000002                     	ds	1
   355  000003                     ??_readADC:
   356  000003                     lcdInst@data:
   357                           	opt stack 0
   358  000003                     putch@data:
   359                           	opt stack 0
   360  000003                     isdigit@c:
   361                           	opt stack 0
   362  000003                     ___lwdiv@divisor:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x2
   366  000003                     	ds	1
   367  000004                     ??_initLCD:
   368  000004                     
   369                           ; 1 bytes @ 0x3
   370  000004                     	ds	1
   371  000005                     readADC@channel:
   372                           	opt stack 0
   373  000005                     ___lwdiv@quotient:
   374                           	opt stack 0
   375  000005                     ___lldiv@divisor:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x4
   379  000005                     	ds	2
   380  000007                     ___lwdiv@counter:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x6
   384  000007                     	ds	1
   385  000008                     ?___lwmod:
   386                           	opt stack 0
   387  000008                     ___lwmod@dividend:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x7
   391  000008                     	ds	1
   392  000009                     ___lldiv@quotient:
   393                           	opt stack 0
   394                           
   395                           ; 4 bytes @ 0x8
   396  000009                     	ds	1
   397  00000A                     ___lwmod@divisor:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x9
   401  00000A                     	ds	2
   402  00000C                     ___lwmod@counter:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0xB
   406  00000C                     	ds	1
   407  00000D                     ?_printf:
   408                           	opt stack 0
   409  00000D                     ___lldiv@counter:
   410                           	opt stack 0
   411  00000D                     printf@f:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xC
   415  00000D                     	ds	1
   416  00000E                     I2C_Master_Init@clockFreq:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0xD
   420  00000E                     	ds	3
   421  000011                     ??_printf:
   422                           
   423                           ; 1 bytes @ 0x10
   424  000011                     	ds	1
   425  000012                     ??_I2C_Master_Init:
   426  000012                     printf@idx:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x11
   430  000012                     	ds	1
   431  000013                     printf@ap:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x12
   435  000013                     	ds	2
   436  000015                     printf@flag:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x14
   440  000015                     	ds	1
   441  000016                     printf@val:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x15
   445  000016                     	ds	2
   446  000018                     printf@prec:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x17
   450  000018                     	ds	1
   451  000019                     printf@c:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x18
   455  000019                     	ds	1
   456  00001A                     ??_main:
   457                           
   458                           ; 1 bytes @ 0x19
   459  00001A                     	ds	2
   460                           tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           
   467 ;;
   468 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   469 ;;
   470 ;; *************** function _main *****************
   471 ;; Defined at:
   472 ;;		line 63 in file "main.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   490 ;;Total ram usage:        2 bytes
   491 ;; Hardware stack levels required when called:    3
   492 ;; This function calls:
   493 ;;		_I2C_Master_Init
   494 ;;		_I2C_Master_Start
   495 ;;		_I2C_Master_Stop
   496 ;;		_I2C_Master_Write
   497 ;;		_initLCD
   498 ;;		_lcdInst
   499 ;;		_motorStart_0
   500 ;;		_motorStart_3
   501 ;;		_motorStop_0
   502 ;;		_motorStop_3
   503 ;;		_printf
   504 ;;		_readADC
   505 ;; This function is called by:
   506 ;;		Startup code after reset
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510                           	psect	text0
   511  0012CA                     __ptext0:
   512                           	opt stack 0
   513  0012CA                     _main:
   514                           	opt stack 28
   515                           
   516                           ;main.c: 71: LATA = 0x00;
   517                           
   518                           ;incstack = 0
   519  0012CA  0E00               	movlw	0
   520  0012CC  6E89               	movwf	3977,c	;volatile
   521                           
   522                           ;main.c: 72: LATB = 0x00;
   523  0012CE  0E00               	movlw	0
   524  0012D0  6E8A               	movwf	3978,c	;volatile
   525                           
   526                           ;main.c: 73: LATC = 0x00;
   527  0012D2  0E00               	movlw	0
   528  0012D4  6E8B               	movwf	3979,c	;volatile
   529                           
   530                           ;main.c: 74: LATD = 0x00;
   531  0012D6  0E00               	movlw	0
   532  0012D8  6E8C               	movwf	3980,c	;volatile
   533                           
   534                           ;main.c: 75: LATE = 0x00;
   535  0012DA  0E00               	movlw	0
   536  0012DC  6E8D               	movwf	3981,c	;volatile
   537                           
   538                           ;main.c: 79: TRISA = 0xFF;
   539  0012DE  6892               	setf	3986,c	;volatile
   540                           
   541                           ;main.c: 80: TRISB = 0xFF;
   542  0012E0  6893               	setf	3987,c	;volatile
   543                           
   544                           ;main.c: 81: TRISC = 0x00;
   545  0012E2  0E00               	movlw	0
   546  0012E4  6E94               	movwf	3988,c	;volatile
   547                           
   548                           ;main.c: 85: TRISD = 0x00;
   549  0012E6  0E00               	movlw	0
   550  0012E8  6E95               	movwf	3989,c	;volatile
   551                           
   552                           ;main.c: 86: TRISE = 0x00;
   553  0012EA  0E00               	movlw	0
   554  0012EC  6E96               	movwf	3990,c	;volatile
   555                           
   556                           ;main.c: 89: ADCON0 = 0x00;
   557  0012EE  0E00               	movlw	0
   558  0012F0  6EC2               	movwf	4034,c	;volatile
   559                           
   560                           ;main.c: 90: ADCON1 = 0x0B;
   561  0012F2  0E0B               	movlw	11
   562  0012F4  6EC1               	movwf	4033,c	;volatile
   563                           
   564                           ;main.c: 91: ADCON2bits.ADFM = 1;
   565  0012F6  8EC0               	bsf	4032,7,c	;volatile
   566                           
   567                           ;main.c: 95: initLCD();
   568  0012F8  EC68  F00B         	call	_initLCD	;wreg free
   569                           
   570                           ;main.c: 99: I2C_Master_Init(100000);
   571  0012FC  0EA0               	movlw	160
   572  0012FE  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   573  001300  0E86               	movlw	134
   574  001302  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   575  001304  0E01               	movlw	1
   576  001306  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   577  001308  0E00               	movlw	0
   578  00130A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   579  00130C  EC11  F00B         	call	_I2C_Master_Init	;wreg free
   580                           
   581                           ;main.c: 100: I2C_Master_Start();
   582  001310  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
   583                           
   584                           ;main.c: 103: I2C_Master_Write(0b00010000);
   585  001314  0E00               	movlw	0
   586  001316  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   587  001318  0E10               	movlw	16
   588  00131A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   589  00131C  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
   590                           
   591                           ;main.c: 104: I2C_Master_Stop();
   592  001320  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
   593                           
   594                           ;main.c: 106: I2C_Master_Start();
   595  001324  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
   596                           
   597                           ;main.c: 107: I2C_Master_Write(0b00010000);
   598  001328  0E00               	movlw	0
   599  00132A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   600  00132C  0E10               	movlw	16
   601  00132E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   602  001330  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
   603                           
   604                           ;main.c: 108: I2C_Master_Write('1');
   605  001334  0E00               	movlw	0
   606  001336  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   607  001338  0E31               	movlw	49
   608  00133A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   609  00133C  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
   610                           
   611                           ;main.c: 109: I2C_Master_Stop();
   612  001340  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
   613                           
   614                           ;main.c: 119: initLCD();
   615  001344  EC68  F00B         	call	_initLCD	;wreg free
   616                           
   617                           ;main.c: 120: printf("%d",B_counter);
   618  001348  0E4A               	movlw	low (STR_7+12)
   619  00134A  6E0D               	movwf	printf@f,c
   620  00134C  0E10               	movlw	high (STR_7+12)
   621  00134E  6E0E               	movwf	printf@f+1,c
   622  001350  C024  F00F         	movff	_B_counter,?_printf+2
   623  001354  C025  F010         	movff	_B_counter+1,?_printf+3
   624  001358  EC2F  F008         	call	_printf	;wreg free
   625                           
   626                           ;main.c: 121: _delay((unsigned long)((100)*(40000000/4000.0)));
   627  00135C  0E06               	movlw	6
   628  00135E  6E1B               	movwf	(??_main+1)& (0+255),c
   629  001360  0E13               	movlw	19
   630  001362  6E1A               	movwf	??_main& (0+255),c
   631  001364  0EAE               	movlw	174
   632  001366                     u887:
   633  001366  2EE8               	decfsz	wreg,f,c
   634  001368  D7FE               	bra	u887
   635  00136A  2E1A               	decfsz	??_main& (0+255),f,c
   636  00136C  D7FC               	bra	u887
   637  00136E  2E1B               	decfsz	(??_main+1)& (0+255),f,c
   638  001370  D7FA               	bra	u887
   639                           
   640                           ;main.c: 122: motorStart_0();
   641  001372  ECFD  F00B         	call	_motorStart_0	;wreg free
   642  001376                     
   643                           ;main.c: 125: if (B_counter >= max){
   644  001376  502A               	movf	_max,w,c
   645  001378  5C24               	subwf	_B_counter,w,c
   646  00137A  5025               	movf	_B_counter+1,w,c
   647  00137C  0A80               	xorlw	128
   648  00137E  6E1A               	movwf	??_main& (0+255),c
   649  001380  502B               	movf	_max+1,w,c
   650  001382  0A80               	xorlw	128
   651  001384  581A               	subwfb	??_main& (0+255),w,c
   652  001386  A0D8               	btfss	status,0,c
   653  001388  D003               	goto	l102
   654                           
   655                           ;main.c: 126: motorStop_0();
   656  00138A  ECB3  F00B         	call	_motorStop_0	;wreg free
   657                           
   658                           ;main.c: 127: break;
   659  00138E  D018               	goto	l103
   660  001390                     l102:
   661                           
   662                           ;main.c: 128: }
   663                           ;main.c: 129: if (readADC(0)<=250 ){
   664  001390  0E00               	movlw	0
   665  001392  EC43  F00C         	call	_readADC
   666  001396  5002               	movf	?_readADC+1,w,c
   667  001398  E106               	bnz	l1694
   668  00139A  0EFB               	movlw	251
   669  00139C  5C01               	subwf	?_readADC,w,c
   670  00139E  B0D8               	btfsc	status,0,c
   671  0013A0  D002               	goto	l104
   672                           
   673                           ;main.c: 131: B_counter ++;
   674  0013A2  4A24               	infsnz	_B_counter,f,c
   675  0013A4  2A25               	incf	_B_counter+1,f,c
   676  0013A6                     l104:
   677  0013A6                     l1694:
   678                           
   679                           ;main.c: 134: }
   680                           ;main.c: 136: initLCD();
   681  0013A6  EC68  F00B         	call	_initLCD	;wreg free
   682                           
   683                           ;main.c: 137: printf("%d", B_counter);
   684  0013AA  0E4A               	movlw	low (STR_7+12)
   685  0013AC  6E0D               	movwf	printf@f,c
   686  0013AE  0E10               	movlw	high (STR_7+12)
   687  0013B0  6E0E               	movwf	printf@f+1,c
   688  0013B2  C024  F00F         	movff	_B_counter,?_printf+2
   689  0013B6  C025  F010         	movff	_B_counter+1,?_printf+3
   690  0013BA  EC2F  F008         	call	_printf	;wreg free
   691  0013BE  D7DB               	goto	l101
   692  0013C0                     l103:
   693                           
   694                           ;main.c: 139: }
   695                           ;main.c: 142: initLCD();
   696  0013C0  EC68  F00B         	call	_initLCD	;wreg free
   697                           
   698                           ;main.c: 143: printf("done");
   699  0013C4  0E57               	movlw	low STR_3
   700  0013C6  6E0D               	movwf	printf@f,c
   701  0013C8  0E10               	movlw	high STR_3
   702  0013CA  6E0E               	movwf	printf@f+1,c
   703  0013CC  EC2F  F008         	call	_printf	;wreg free
   704                           
   705                           ;main.c: 144: _delay((unsigned long)((800)*(40000000/4000.0)));
   706  0013D0  0E29               	movlw	41
   707  0013D2  6E1B               	movwf	(??_main+1)& (0+255),c
   708  0013D4  0E96               	movlw	150
   709  0013D6  6E1A               	movwf	??_main& (0+255),c
   710  0013D8  0E7F               	movlw	127
   711  0013DA                     u897:
   712  0013DA  2EE8               	decfsz	wreg,f,c
   713  0013DC  D7FE               	bra	u897
   714  0013DE  2E1A               	decfsz	??_main& (0+255),f,c
   715  0013E0  D7FC               	bra	u897
   716  0013E2  2E1B               	decfsz	(??_main+1)& (0+255),f,c
   717  0013E4  D7FA               	bra	u897
   718  0013E6  F000               	nop	
   719                           
   720                           ;main.c: 149: I2C_Master_Init(100000);
   721  0013E8  0EA0               	movlw	160
   722  0013EA  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   723  0013EC  0E86               	movlw	134
   724  0013EE  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   725  0013F0  0E01               	movlw	1
   726  0013F2  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   727  0013F4  0E00               	movlw	0
   728  0013F6  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   729  0013F8  EC11  F00B         	call	_I2C_Master_Init	;wreg free
   730                           
   731                           ;main.c: 150: I2C_Master_Start();
   732  0013FC  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
   733                           
   734                           ;main.c: 151: I2C_Master_Write(0b00010000);
   735  001400  0E00               	movlw	0
   736  001402  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   737  001404  0E10               	movlw	16
   738  001406  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   739  001408  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
   740                           
   741                           ;main.c: 152: I2C_Master_Stop();
   742  00140C  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
   743                           
   744                           ;main.c: 156: I2C_Master_Start();
   745  001410  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
   746                           
   747                           ;main.c: 157: I2C_Master_Write(0b00010000);
   748  001414  0E00               	movlw	0
   749  001416  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   750  001418  0E10               	movlw	16
   751  00141A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   752  00141C  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
   753                           
   754                           ;main.c: 158: I2C_Master_Write('2');
   755  001420  0E00               	movlw	0
   756  001422  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   757  001424  0E32               	movlw	50
   758  001426  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   759  001428  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
   760                           
   761                           ;main.c: 159: I2C_Master_Stop();
   762  00142C  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
   763                           
   764                           ;main.c: 162: initLCD();
   765  001430  EC68  F00B         	call	_initLCD	;wreg free
   766                           
   767                           ;main.c: 163: motorStart_3();
   768  001434  ECD8  F00B         	call	_motorStart_3	;wreg free
   769                           
   770                           ;main.c: 165: B_spacingTime = 0;
   771  001438  0E00               	movlw	0
   772  00143A  6E21               	movwf	_B_spacingTime+1,c
   773  00143C  0E00               	movlw	0
   774  00143E  6E20               	movwf	_B_spacingTime,c
   775                           
   776                           ;main.c: 166: initLCD();
   777  001440  EC68  F00B         	call	_initLCD	;wreg free
   778                           
   779                           ;main.c: 167: printf("%d", B_remain);
   780  001444  0E4A               	movlw	low (STR_7+12)
   781  001446  6E0D               	movwf	printf@f,c
   782  001448  0E10               	movlw	high (STR_7+12)
   783  00144A  6E0E               	movwf	printf@f+1,c
   784  00144C  C022  F00F         	movff	_B_remain,?_printf+2
   785  001450  C023  F010         	movff	_B_remain+1,?_printf+3
   786  001454  EC2F  F008         	call	_printf	;wreg free
   787  001458                     
   788                           ;main.c: 170: if (B_spacingTime >= 30000){
   789  001458  BE21               	btfsc	_B_spacingTime+1,7,c
   790  00145A  D009               	goto	l107
   791  00145C  0E30               	movlw	48
   792  00145E  5C20               	subwf	_B_spacingTime,w,c
   793  001460  0E75               	movlw	117
   794  001462  5821               	subwfb	_B_spacingTime+1,w,c
   795  001464  A0D8               	btfss	status,0,c
   796  001466  D003               	goto	l107
   797                           
   798                           ;main.c: 171: motorStop_3();
   799  001468  EC8E  F00B         	call	_motorStop_3	;wreg free
   800                           
   801                           ;main.c: 172: break;
   802  00146C  D042               	goto	l108
   803  00146E                     l107:
   804                           
   805                           ;main.c: 173: }
   806                           ;main.c: 175: if (readADC(0)<=250 ){
   807  00146E  0E00               	movlw	0
   808  001470  EC43  F00C         	call	_readADC
   809  001474  5002               	movf	?_readADC+1,w,c
   810  001476  E11D               	bnz	l1746
   811  001478  0EFB               	movlw	251
   812  00147A  5C01               	subwf	?_readADC,w,c
   813  00147C  B0D8               	btfsc	status,0,c
   814  00147E  D019               	goto	l109
   815                           
   816                           ;main.c: 177: B_remain ++;
   817  001480  4A22               	infsnz	_B_remain,f,c
   818  001482  2A23               	incf	_B_remain+1,f,c
   819                           
   820                           ;main.c: 178: initLCD();
   821  001484  EC68  F00B         	call	_initLCD	;wreg free
   822                           
   823                           ;main.c: 179: printf("%d", B_remain);
   824  001488  0E4A               	movlw	low (STR_7+12)
   825  00148A  6E0D               	movwf	printf@f,c
   826  00148C  0E10               	movlw	high (STR_7+12)
   827  00148E  6E0E               	movwf	printf@f+1,c
   828  001490  C022  F00F         	movff	_B_remain,?_printf+2
   829  001494  C023  F010         	movff	_B_remain+1,?_printf+3
   830  001498  EC2F  F008         	call	_printf	;wreg free
   831                           
   832                           ;main.c: 180: _delay((unsigned long)((1)*(40000000/4000.0)));
   833  00149C  0E0D               	movlw	13
   834  00149E  6E1A               	movwf	??_main& (0+255),c
   835  0014A0  0EFC               	movlw	252
   836  0014A2                     u907:
   837  0014A2  2EE8               	decfsz	wreg,f,c
   838  0014A4  D7FE               	bra	u907
   839  0014A6  2E1A               	decfsz	??_main& (0+255),f,c
   840  0014A8  D7FC               	bra	u907
   841                           
   842                           ;main.c: 181: B_spacingTime = 0;
   843  0014AA  0E00               	movlw	0
   844  0014AC  6E21               	movwf	_B_spacingTime+1,c
   845  0014AE  0E00               	movlw	0
   846  0014B0  6E20               	movwf	_B_spacingTime,c
   847  0014B2                     l109:
   848  0014B2                     l1746:
   849                           
   850                           ;main.c: 183: }
   851                           ;main.c: 187: printf("RA2: %.3x", readADC(3));
   852  0014B2  0E4D               	movlw	low STR_6
   853  0014B4  6E0D               	movwf	printf@f,c
   854  0014B6  0E10               	movlw	high STR_6
   855  0014B8  6E0E               	movwf	printf@f+1,c
   856  0014BA  0E03               	movlw	3
   857  0014BC  EC43  F00C         	call	_readADC
   858  0014C0  C001  F00F         	movff	?_readADC,?_printf+2
   859  0014C4  C002  F010         	movff	?_readADC+1,?_printf+3
   860  0014C8  EC2F  F008         	call	_printf	;wreg free
   861                           
   862                           ;main.c: 188: lcdInst(0xC0);;
   863  0014CC  0EC0               	movlw	192
   864  0014CE  EC8F  F00C         	call	_lcdInst
   865                           
   866                           ;main.c: 193: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   867  0014D2  0E80               	movlw	128
   868  0014D4  EC8F  F00C         	call	_lcdInst
   869  0014D8  0E41               	movlw	65
   870  0014DA  6E1A               	movwf	??_main& (0+255),c
   871  0014DC  0EEE               	movlw	238
   872  0014DE                     u917:
   873  0014DE  2EE8               	decfsz	wreg,f,c
   874  0014E0  D7FE               	bra	u917
   875  0014E2  2E1A               	decfsz	??_main& (0+255),f,c
   876  0014E4  D7FC               	bra	u917
   877  0014E6  D000               	nop2	
   878                           
   879                           ;main.c: 196: B_spacingTime +=200;
   880  0014E8  0EC8               	movlw	200
   881  0014EA  2620               	addwf	_B_spacingTime,f,c
   882  0014EC  0E00               	movlw	0
   883  0014EE  2221               	addwfc	_B_spacingTime+1,f,c
   884  0014F0  D7B3               	goto	l106
   885  0014F2                     l108:
   886                           
   887                           ;main.c: 204: initLCD();
   888                           
   889                           ;main.c: 199: }
   890                           ;main.c: 203: while(1){
   891  0014F2  EC68  F00B         	call	_initLCD	;wreg free
   892                           
   893                           ;main.c: 205: printf("remain Nuts:%d",B_remain);
   894  0014F6  0E3E               	movlw	low STR_7
   895  0014F8  6E0D               	movwf	printf@f,c
   896  0014FA  0E10               	movlw	high STR_7
   897  0014FC  6E0E               	movwf	printf@f+1,c
   898  0014FE  C022  F00F         	movff	_B_remain,?_printf+2
   899  001502  C023  F010         	movff	_B_remain+1,?_printf+3
   900  001506  EC2F  F008         	call	_printf	;wreg free
   901                           
   902                           ;main.c: 206: _delay((unsigned long)((1000)*(40000000/4000.0)));
   903  00150A  0E33               	movlw	51
   904  00150C  6E1B               	movwf	(??_main+1)& (0+255),c
   905  00150E  0EBB               	movlw	187
   906  001510  6E1A               	movwf	??_main& (0+255),c
   907  001512  0EE0               	movlw	224
   908  001514                     u927:
   909  001514  2EE8               	decfsz	wreg,f,c
   910  001516  D7FE               	bra	u927
   911  001518  2E1A               	decfsz	??_main& (0+255),f,c
   912  00151A  D7FC               	bra	u927
   913  00151C  2E1B               	decfsz	(??_main+1)& (0+255),f,c
   914  00151E  D7FA               	bra	u927
   915  001520  D7E8               	goto	l108
   916  001522                     __end_of_main:
   917                           	opt stack 0
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           status	equ	0xFD8
   925                           
   926 ;; *************** function _readADC *****************
   927 ;; Defined at:
   928 ;;		line 211 in file "main.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;  channel         1    wreg     unsigned char 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  channel         1    4[COMRAM] unsigned char 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  2    0[COMRAM] unsigned short 
   935 ;; Registers used:
   936 ;;		wreg, status,2, status,0
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   942 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   946 ;;Total ram usage:        5 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text1
   956  001886                     __ptext1:
   957                           	opt stack 0
   958  001886                     _readADC:
   959                           	opt stack 30
   960                           
   961                           ;incstack = 0
   962                           ;readADC@channel stored from wreg
   963  001886  6E05               	movwf	readADC@channel,c
   964                           
   965                           ;main.c: 220: ADCON0 = (channel & 0x0F) << 2;
   966  001888  C005  F003         	movff	readADC@channel,??_readADC
   967  00188C  0E0F               	movlw	15
   968  00188E  1603               	andwf	??_readADC,f,c
   969  001890  90D8               	bcf	status,0,c
   970  001892  3603               	rlcf	??_readADC,f,c
   971  001894  90D8               	bcf	status,0,c
   972  001896  3403               	rlcf	??_readADC,w,c
   973  001898  6EC2               	movwf	4034,c	;volatile
   974                           
   975                           ;main.c: 221: ADON = 1;
   976  00189A  80C2               	bsf	4034,0,c	;volatile
   977                           
   978                           ;main.c: 222: ADCON0bits.GO = 1;
   979  00189C  82C2               	bsf	4034,1,c	;volatile
   980  00189E  B2C2               	btfsc	4034,1,c	;volatile
   981  0018A0  D7FE               	goto	l118
   982                           
   983                           ;main.c: 224: analog_result = ADRESL + (ADRESH*256);
   984  0018A2  50C4               	movf	4036,w,c	;volatile
   985  0018A4  6E04               	movwf	(??_readADC+1)& (0+255),c
   986  0018A6  6A03               	clrf	??_readADC& (0+255),c
   987  0018A8  50C3               	movf	4035,w,c	;volatile
   988  0018AA  2403               	addwf	??_readADC,w,c
   989  0018AC  6E1E               	movwf	_analog_result,c
   990  0018AE  0E00               	movlw	0
   991  0018B0  2004               	addwfc	??_readADC+1,w,c
   992  0018B2  6E1F               	movwf	_analog_result+1,c
   993                           
   994                           ;main.c: 225: return analog_result;
   995  0018B4  C01E  F001         	movff	_analog_result,?_readADC
   996  0018B8  C01F  F002         	movff	_analog_result+1,?_readADC+1
   997  0018BC  0012               	return	
   998  0018BE                     __end_of_readADC:
   999                           	opt stack 0
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           wreg	equ	0xFE8
  1006                           status	equ	0xFD8
  1007                           
  1008 ;; *************** function _printf *****************
  1009 ;; Defined at:
  1010 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1013 ;;		 -> STR_7(15), STR_6(10), STR_5(3), STR_4(3), 
  1014 ;;		 -> STR_3(5), STR_2(3), STR_1(3), 
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;  idx             1   17[COMRAM] unsigned char 
  1017 ;;  tmpval          4    0        struct .
  1018 ;;  cp              3    0        PTR const unsigned char 
  1019 ;;  val             2   21[COMRAM] unsigned int 
  1020 ;;  ap              2   18[COMRAM] PTR void [1]
  1021 ;;		 -> ?_printf(2), 
  1022 ;;  len             2    0        unsigned int 
  1023 ;;  c               1   24[COMRAM] char 
  1024 ;;  prec            1   23[COMRAM] char 
  1025 ;;  flag            1   20[COMRAM] unsigned char 
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  2   12[COMRAM] int 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1035 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1038 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1039 ;;Total ram usage:       13 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    2
  1042 ;; This function calls:
  1043 ;;		___lwdiv
  1044 ;;		___lwmod
  1045 ;;		_isdigit
  1046 ;;		_putch
  1047 ;; This function is called by:
  1048 ;;		_main
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text2
  1053  00105E                     __ptext2:
  1054                           	opt stack 0
  1055  00105E                     _printf:
  1056                           	opt stack 28
  1057                           
  1058                           ;doprnt.c: 466: va_list ap;
  1059                           ;doprnt.c: 499: signed char c;
  1060                           ;doprnt.c: 506: signed char prec;
  1061                           ;doprnt.c: 508: unsigned char flag;
  1062                           ;doprnt.c: 523: union {
  1063                           ;doprnt.c: 524: unsigned long vd;
  1064                           ;doprnt.c: 525: double integ;
  1065                           ;doprnt.c: 526: } tmpval;
  1066                           ;doprnt.c: 528: unsigned int val;
  1067                           ;doprnt.c: 529: unsigned len;
  1068                           ;doprnt.c: 530: const char * cp;
  1069                           ;doprnt.c: 533: *ap = __va_start();
  1070                           
  1071                           ;incstack = 0
  1072  00105E  0E0F               	movlw	low (?_printf+2)
  1073  001060  6E13               	movwf	printf@ap,c
  1074  001062  0E00               	movlw	high (?_printf+2)
  1075  001064  6E14               	movwf	printf@ap+1,c
  1076                           
  1077                           ;doprnt.c: 536: while(c = *f++) {
  1078  001066  D124               	goto	u810
  1079  001068                     
  1080                           ;doprnt.c: 538: if(c != '%')
  1081  001068  0E25               	movlw	37
  1082  00106A  1819               	xorwf	printf@c,w,c
  1083  00106C  B4D8               	btfsc	status,2,c
  1084  00106E  D004               	goto	l271
  1085                           
  1086                           ;doprnt.c: 540: {
  1087                           ;doprnt.c: 541: (putch(c) );
  1088  001070  5019               	movf	printf@c,w,c
  1089  001072  EC85  F00C         	call	_putch
  1090                           
  1091                           ;doprnt.c: 542: continue;
  1092  001076  D11C               	goto	u810
  1093  001078                     l271:
  1094                           
  1095                           ;doprnt.c: 543: }
  1096                           ;doprnt.c: 548: flag = 0;
  1097  001078  0E00               	movlw	0
  1098  00107A  6E15               	movwf	printf@flag,c
  1099                           
  1100                           ;doprnt.c: 611: if(*f == '.') {
  1101  00107C  C00D  FFF6         	movff	printf@f,tblptrl
  1102  001080  C00E  FFF7         	movff	printf@f+1,tblptrh
  1103  001084                     	if	0	;tblptru may be non-zero
  1104  001084                     	endif
  1105  001084                     	if	0	;tblptru may be non-zero
  1106  001084                     	endif
  1107  001084  0008               	tblrd		*
  1108  001086  50F5               	movf	tablat,w,c
  1109  001088  0A2E               	xorlw	46
  1110  00108A  A4D8               	btfss	status,2,c
  1111  00108C  D01F               	goto	l272
  1112                           
  1113                           ;doprnt.c: 613: f++;
  1114  00108E  4A0D               	infsnz	printf@f,f,c
  1115  001090  2A0E               	incf	printf@f+1,f,c
  1116                           
  1117                           ;doprnt.c: 620: {
  1118                           ;doprnt.c: 621: prec = 0;
  1119  001092  0E00               	movlw	0
  1120  001094  6E18               	movwf	printf@prec,c
  1121                           
  1122                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1123  001096  D00F               	goto	l273
  1124  001098                     
  1125                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1126  001098  C00D  FFF6         	movff	printf@f,tblptrl
  1127  00109C  C00E  FFF7         	movff	printf@f+1,tblptrh
  1128  0010A0                     	if	0	;tblptru may be non-zero
  1129  0010A0                     	endif
  1130  0010A0                     	if	0	;tblptru may be non-zero
  1131  0010A0                     	endif
  1132  0010A0  0008               	tblrd		*
  1133  0010A2  CFF5 F011          	movff	tablat,??_printf
  1134  0010A6  5018               	movf	printf@prec,w,c
  1135  0010A8  0D0A               	mullw	10
  1136  0010AA  50F3               	movf	prodl,w,c
  1137  0010AC  2411               	addwf	??_printf,w,c
  1138  0010AE  0FD0               	addlw	208
  1139  0010B0  6E18               	movwf	printf@prec,c
  1140  0010B2  4A0D               	infsnz	printf@f,f,c
  1141  0010B4  2A0E               	incf	printf@f+1,f,c
  1142  0010B6                     l273:
  1143  0010B6  C00D  FFF6         	movff	printf@f,tblptrl
  1144  0010BA  C00E  FFF7         	movff	printf@f+1,tblptrh
  1145  0010BE                     	if	0	;tblptru may be non-zero
  1146  0010BE                     	endif
  1147  0010BE                     	if	0	;tblptru may be non-zero
  1148  0010BE                     	endif
  1149  0010BE  0008               	tblrd		*
  1150  0010C0  50F5               	movf	tablat,w,c
  1151  0010C2  EC76  F00C         	call	_isdigit
  1152  0010C6  A0D8               	btfss	status,0,c
  1153  0010C8  D006               	goto	l277
  1154  0010CA  D7E6               	goto	l274
  1155  0010CC                     l272:
  1156                           
  1157                           ;doprnt.c: 626: prec = 0;
  1158  0010CC  0E00               	movlw	0
  1159  0010CE  6E18               	movwf	printf@prec,c
  1160                           
  1161                           ;doprnt.c: 630: }
  1162                           ;doprnt.c: 635: switch(c = *f++) {
  1163  0010D0  D002               	goto	l277
  1164  0010D2                     
  1165                           ;doprnt.c: 721: flag |= 0x80;
  1166  0010D2  8E15               	bsf	printf@flag,7,c
  1167                           
  1168                           ;doprnt.c: 723: break;
  1169  0010D4  D017               	goto	l282
  1170  0010D6                     l277:
  1171  0010D6  C00D  FFF6         	movff	printf@f,tblptrl
  1172  0010DA  C00E  FFF7         	movff	printf@f+1,tblptrh
  1173  0010DE  4A0D               	infsnz	printf@f,f,c
  1174  0010E0  2A0E               	incf	printf@f+1,f,c
  1175  0010E2                     	if	0	;tblptru may be non-zero
  1176  0010E2                     	endif
  1177  0010E2                     	if	0	;tblptru may be non-zero
  1178  0010E2                     	endif
  1179  0010E2  0008               	tblrd		*
  1180  0010E4  CFF5 F019          	movff	tablat,printf@c
  1181  0010E8  5019               	movf	printf@c,w,c
  1182                           
  1183                           ; Switch size 1, requested type "space"
  1184                           ; Number of cases is 4, Range of values is 0 to 120
  1185                           ; switch strategies available:
  1186                           ; Name         Instructions Cycles
  1187                           ; simple_byte           13     7 (average)
  1188                           ;	Chosen strategy is simple_byte
  1189  0010EA  0A00               	xorlw	0	; case 0
  1190  0010EC  B4D8               	btfsc	status,2,c
  1191  0010EE  0012               	return	
  1192  0010F0  0A64               	xorlw	100	; case 100
  1193  0010F2  B4D8               	btfsc	status,2,c
  1194  0010F4  D007               	goto	l282
  1195  0010F6  0A0D               	xorlw	13	; case 105
  1196  0010F8  B4D8               	btfsc	status,2,c
  1197  0010FA  D004               	goto	l282
  1198  0010FC  0A11               	xorlw	17	; case 120
  1199  0010FE  B4D8               	btfsc	status,2,c
  1200  001100  D7E8               	goto	l283
  1201  001102  D0D6               	goto	u810
  1202  001104                     l282:
  1203                           
  1204                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1205  001104  BE15               	btfsc	printf@flag,7,c
  1206  001106  D015               	goto	l285
  1207                           
  1208                           ;doprnt.c: 1253: {
  1209                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1210  001108  C013  FFD9         	movff	printf@ap,fsr2l
  1211  00110C  C014  FFDA         	movff	printf@ap+1,fsr2h
  1212  001110  CFDE F016          	movff	postinc2,printf@val
  1213  001114  CFDD F017          	movff	postdec2,printf@val+1
  1214  001118  0E02               	movlw	2
  1215  00111A  2613               	addwf	printf@ap,f,c
  1216  00111C  0E00               	movlw	0
  1217  00111E  2214               	addwfc	printf@ap+1,f,c
  1218                           
  1219                           ;doprnt.c: 1261: if((int)val < 0) {
  1220  001120  AE17               	btfss	printf@val+1,7,c
  1221  001122  D013               	goto	l287
  1222                           
  1223                           ;doprnt.c: 1262: flag |= 0x03;
  1224  001124  0E03               	movlw	3
  1225  001126  1215               	iorwf	printf@flag,f,c
  1226                           
  1227                           ;doprnt.c: 1263: val = -val;
  1228  001128  6C16               	negf	printf@val,c
  1229  00112A  1E17               	comf	printf@val+1,f,c
  1230  00112C  B0D8               	btfsc	status,0,c
  1231  00112E  2A17               	incf	printf@val+1,f,c
  1232                           
  1233                           ;doprnt.c: 1264: }
  1234                           ;doprnt.c: 1266: }
  1235  001130  D00C               	goto	l287
  1236  001132                     l285:
  1237                           
  1238                           ;doprnt.c: 1268: else
  1239                           ;doprnt.c: 1273: {
  1240                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1241  001132  C013  FFD9         	movff	printf@ap,fsr2l
  1242  001136  C014  FFDA         	movff	printf@ap+1,fsr2h
  1243  00113A  CFDE F016          	movff	postinc2,printf@val
  1244  00113E  CFDD F017          	movff	postdec2,printf@val+1
  1245  001142  0E02               	movlw	2
  1246  001144  2613               	addwf	printf@ap,f,c
  1247  001146  0E00               	movlw	0
  1248  001148  2214               	addwfc	printf@ap+1,f,c
  1249  00114A                     l287:
  1250                           
  1251                           ;doprnt.c: 1287: }
  1252                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1253  00114A  5018               	movf	printf@prec,w,c
  1254  00114C  A4D8               	btfss	status,2,c
  1255  00114E  D036               	goto	l289
  1256  001150  5016               	movf	printf@val,w,c
  1257  001152  1017               	iorwf	printf@val+1,w,c
  1258  001154  A4D8               	btfss	status,2,c
  1259  001156  D032               	goto	l289
  1260                           
  1261                           ;doprnt.c: 1291: prec++;
  1262  001158  2A18               	incf	printf@prec,f,c
  1263                           
  1264                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1265  00115A  D030               	goto	l289
  1266  00115C                     
  1267                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1268  00115C  0E01               	movlw	1
  1269  00115E  6E19               	movwf	printf@c,c
  1270  001160                     l1574:
  1271  001160  0E05               	movlw	5
  1272  001162  1819               	xorwf	printf@c,w,c
  1273  001164  B4D8               	btfsc	status,2,c
  1274  001166  D032               	goto	l294
  1275                           
  1276                           ;doprnt.c: 1306: if(val < dpowers[c])
  1277  001168  5019               	movf	printf@c,w,c
  1278  00116A  0D02               	mullw	2
  1279  00116C  0E12               	movlw	low _dpowers
  1280  00116E  24F3               	addwf	prodl,w,c
  1281  001170  6EF6               	movwf	tblptrl,c
  1282  001172  0E10               	movlw	high _dpowers
  1283  001174  20F4               	addwfc	prodh,w,c
  1284  001176  6EF7               	movwf	tblptrh,c
  1285  001178                     	if	0	;There are less than 3 active tblptr bytes
  1286  001178                     	endif
  1287  001178  0009               	tblrd		*+
  1288  00117A  50F5               	movf	tablat,w,c
  1289  00117C  5C16               	subwf	printf@val,w,c
  1290  00117E  0009               	tblrd		*+
  1291  001180  50F5               	movf	tablat,w,c
  1292  001182  5817               	subwfb	printf@val+1,w,c
  1293  001184  A0D8               	btfss	status,0,c
  1294  001186  D022               	goto	l294
  1295                           
  1296                           ;doprnt.c: 1307: break;
  1297  001188  2A19               	incf	printf@c,f,c
  1298  00118A  D7EA               	goto	l1574
  1299  00118C                     
  1300                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1301  00118C  0E01               	movlw	1
  1302  00118E  6E19               	movwf	printf@c,c
  1303  001190                     l1588:
  1304  001190  0E04               	movlw	4
  1305  001192  1819               	xorwf	printf@c,w,c
  1306  001194  B4D8               	btfsc	status,2,c
  1307  001196  D01A               	goto	l294
  1308                           
  1309                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1310  001198  5019               	movf	printf@c,w,c
  1311  00119A  0D02               	mullw	2
  1312  00119C  0E1C               	movlw	low _hexpowers
  1313  00119E  24F3               	addwf	prodl,w,c
  1314  0011A0  6EF6               	movwf	tblptrl,c
  1315  0011A2  0E10               	movlw	high _hexpowers
  1316  0011A4  20F4               	addwfc	prodh,w,c
  1317  0011A6  6EF7               	movwf	tblptrh,c
  1318  0011A8                     	if	0	;There are less than 3 active tblptr bytes
  1319  0011A8                     	endif
  1320  0011A8  0009               	tblrd		*+
  1321  0011AA  50F5               	movf	tablat,w,c
  1322  0011AC  5C16               	subwf	printf@val,w,c
  1323  0011AE  0009               	tblrd		*+
  1324  0011B0  50F5               	movf	tablat,w,c
  1325  0011B2  5817               	subwfb	printf@val+1,w,c
  1326  0011B4  A0D8               	btfss	status,0,c
  1327  0011B6  D00A               	goto	l294
  1328                           
  1329                           ;doprnt.c: 1318: break;
  1330  0011B8  2A19               	incf	printf@c,f,c
  1331  0011BA  D7EA               	goto	l1588
  1332  0011BC                     l289:
  1333  0011BC  5015               	movf	printf@flag,w,c
  1334  0011BE  0B80               	andlw	128
  1335                           
  1336                           ; Switch size 1, requested type "space"
  1337                           ; Number of cases is 2, Range of values is 0 to 128
  1338                           ; switch strategies available:
  1339                           ; Name         Instructions Cycles
  1340                           ; simple_byte            7     4 (average)
  1341                           ;	Chosen strategy is simple_byte
  1342  0011C0  0A00               	xorlw	0	; case 0
  1343  0011C2  B4D8               	btfsc	status,2,c
  1344  0011C4  D7CB               	goto	l290
  1345  0011C6  0A80               	xorlw	128	; case 128
  1346  0011C8  B4D8               	btfsc	status,2,c
  1347  0011CA  D7E0               	goto	l295
  1348  0011CC                     l294:
  1349                           
  1350                           ;doprnt.c: 1339: if(c < prec)
  1351  0011CC  5019               	movf	printf@c,w,c
  1352  0011CE  0A80               	xorlw	128
  1353  0011D0  6E11               	movwf	??_printf& (0+255),c
  1354  0011D2  5018               	movf	printf@prec,w,c
  1355  0011D4  0A80               	xorlw	128
  1356  0011D6  5C11               	subwf	??_printf& (0+255),w,c
  1357  0011D8  B0D8               	btfsc	status,0,c
  1358  0011DA  D003               	goto	l299
  1359                           
  1360                           ;doprnt.c: 1340: c = prec;
  1361  0011DC  C018  F019         	movff	printf@prec,printf@c
  1362  0011E0  D009               	goto	l301
  1363  0011E2                     l299:
  1364                           
  1365                           ;doprnt.c: 1341: else if(prec < c)
  1366  0011E2  5018               	movf	printf@prec,w,c
  1367  0011E4  0A80               	xorlw	128
  1368  0011E6  6E11               	movwf	??_printf& (0+255),c
  1369  0011E8  5019               	movf	printf@c,w,c
  1370  0011EA  0A80               	xorlw	128
  1371  0011EC  5C11               	subwf	??_printf& (0+255),w,c
  1372  0011EE  A0D8               	btfss	status,0,c
  1373                           
  1374                           ;doprnt.c: 1342: prec = c;
  1375  0011F0  C019  F018         	movff	printf@c,printf@prec
  1376  0011F4                     l301:
  1377                           
  1378                           ;doprnt.c: 1422: {
  1379                           ;doprnt.c: 1438: if(flag & 0x03)
  1380  0011F4  C015  F011         	movff	printf@flag,??_printf
  1381  0011F8  0E03               	movlw	3
  1382  0011FA  1611               	andwf	??_printf,f,c
  1383  0011FC  B4D8               	btfsc	status,2,c
  1384  0011FE  D054               	goto	l303
  1385                           
  1386                           ;doprnt.c: 1439: (putch('-') );
  1387  001200  0E2D               	movlw	45
  1388  001202  EC85  F00C         	call	_putch
  1389                           
  1390                           ;doprnt.c: 1469: }
  1391                           ;doprnt.c: 1474: while(prec--) {
  1392  001206  D050               	goto	l303
  1393  001208                     
  1394                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1395  001208  5018               	movf	printf@prec,w,c
  1396  00120A  0D02               	mullw	2
  1397  00120C  0E12               	movlw	low _dpowers
  1398  00120E  24F3               	addwf	prodl,w,c
  1399  001210  6EF6               	movwf	tblptrl,c
  1400  001212  0E10               	movlw	high _dpowers
  1401  001214  20F4               	addwfc	prodh,w,c
  1402  001216  6EF7               	movwf	tblptrh,c
  1403  001218                     	if	0	;There are less than 3 active tblptr bytes
  1404  001218                     	endif
  1405  001218  0009               	tblrd		*+
  1406  00121A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1407  00121E  000A               	tblrd		*-
  1408  001220  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1409  001224  C016  F001         	movff	printf@val,___lwdiv@dividend
  1410  001228  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1411  00122C  EC3F  F00B         	call	___lwdiv	;wreg free
  1412  001230  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1413  001234  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1414  001238  0E00               	movlw	0
  1415  00123A  6E0B               	movwf	___lwmod@divisor+1,c
  1416  00123C  0E0A               	movlw	10
  1417  00123E  6E0A               	movwf	___lwmod@divisor,c
  1418  001240  EC22  F00C         	call	___lwmod	;wreg free
  1419  001244  5008               	movf	?___lwmod,w,c
  1420  001246  0F30               	addlw	48
  1421  001248  6E19               	movwf	printf@c,c
  1422                           
  1423                           ;doprnt.c: 1491: break;
  1424  00124A  D02B               	goto	l307
  1425  00124C                     
  1426                           ;doprnt.c: 1499: {
  1427                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1428  00124C  C016  F001         	movff	printf@val,___lwdiv@dividend
  1429  001250  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1430  001254  5018               	movf	printf@prec,w,c
  1431  001256  0D02               	mullw	2
  1432  001258  0E1C               	movlw	low _hexpowers
  1433  00125A  24F3               	addwf	prodl,w,c
  1434  00125C  6EF6               	movwf	tblptrl,c
  1435  00125E  0E10               	movlw	high _hexpowers
  1436  001260  20F4               	addwfc	prodh,w,c
  1437  001262  6EF7               	movwf	tblptrh,c
  1438  001264                     	if	0	;There are less than 3 active tblptr bytes
  1439  001264                     	endif
  1440  001264  0009               	tblrd		*+
  1441  001266  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1442  00126A  000A               	tblrd		*-
  1443  00126C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1444  001270  EC3F  F00B         	call	___lwdiv	;wreg free
  1445  001274  5001               	movf	?___lwdiv,w,c
  1446  001276  0B0F               	andlw	15
  1447  001278  6E12               	movwf	printf@idx,c
  1448                           
  1449                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1450  00127A  5012               	movf	printf@idx,w,c
  1451  00127C  0D01               	mullw	1
  1452  00127E  0E2D               	movlw	low STR_8
  1453  001280  24F3               	addwf	prodl,w,c
  1454  001282  6EF6               	movwf	tblptrl,c
  1455  001284  0E10               	movlw	high STR_8
  1456  001286  20F4               	addwfc	prodh,w,c
  1457  001288  6EF7               	movwf	tblptrh,c
  1458  00128A                     	if	0	;There are less than 3 active tblptr bytes
  1459  00128A                     	endif
  1460  00128A  0008               	tblrd		*
  1461  00128C  CFF5 F019          	movff	tablat,printf@c
  1462                           
  1463                           ;doprnt.c: 1523: }
  1464                           
  1465                           ;doprnt.c: 1508: }
  1466                           ;doprnt.c: 1510: break;
  1467  001290  D008               	goto	l307
  1468  001292  5015               	movf	printf@flag,w,c
  1469  001294  0B80               	andlw	128
  1470                           
  1471                           ; Switch size 1, requested type "space"
  1472                           ; Number of cases is 2, Range of values is 0 to 128
  1473                           ; switch strategies available:
  1474                           ; Name         Instructions Cycles
  1475                           ; simple_byte            7     4 (average)
  1476                           ;	Chosen strategy is simple_byte
  1477  001296  0A00               	xorlw	0	; case 0
  1478  001298  B4D8               	btfsc	status,2,c
  1479  00129A  D7B6               	goto	l306
  1480  00129C  0A80               	xorlw	128	; case 128
  1481  00129E  B4D8               	btfsc	status,2,c
  1482  0012A0  D7D5               	goto	l308
  1483  0012A2                     l307:
  1484                           
  1485                           ;doprnt.c: 1524: (putch(c) );
  1486  0012A2  5019               	movf	printf@c,w,c
  1487  0012A4  EC85  F00C         	call	_putch
  1488  0012A8                     l303:
  1489  0012A8  0618               	decf	printf@prec,f,c
  1490  0012AA  2818               	incf	printf@prec,w,c
  1491  0012AC  A4D8               	btfss	status,2,c
  1492  0012AE  D7F1               	goto	l305
  1493  0012B0                     u810:
  1494  0012B0  C00D  FFF6         	movff	printf@f,tblptrl
  1495  0012B4  C00E  FFF7         	movff	printf@f+1,tblptrh
  1496  0012B8  4A0D               	infsnz	printf@f,f,c
  1497  0012BA  2A0E               	incf	printf@f+1,f,c
  1498  0012BC                     	if	0	;tblptru may be non-zero
  1499  0012BC                     	endif
  1500  0012BC                     	if	0	;tblptru may be non-zero
  1501  0012BC                     	endif
  1502  0012BC  0008               	tblrd		*
  1503  0012BE  CFF5 F019          	movff	tablat,printf@c
  1504  0012C2  5019               	movf	printf@c,w,c
  1505  0012C4  B4D8               	btfsc	status,2,c
  1506  0012C6  0012               	return	
  1507  0012C8  D6CF               	goto	l270
  1508  0012CA                     __end_of_printf:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           prodh	equ	0xFF4
  1515                           prodl	equ	0xFF3
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postinc2	equ	0xFDE
  1519                           postdec2	equ	0xFDD
  1520                           fsr2h	equ	0xFDA
  1521                           fsr2l	equ	0xFD9
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _putch *****************
  1525 ;; Defined at:
  1526 ;;		line 24 in file "lcd.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;  data            1    wreg     unsigned char 
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;  data            1    2[COMRAM] unsigned char 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  1    wreg      void 
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;Total ram usage:        1 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    1
  1547 ;; This function calls:
  1548 ;;		_lcdNibble
  1549 ;; This function is called by:
  1550 ;;		_printf
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           	psect	text3
  1555  00190A                     __ptext3:
  1556                           	opt stack 0
  1557  00190A                     _putch:
  1558                           	opt stack 28
  1559                           
  1560                           ;incstack = 0
  1561                           ;putch@data stored from wreg
  1562  00190A  6E03               	movwf	putch@data,c
  1563                           
  1564                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1565  00190C  848C               	bsf	3980,2,c	;volatile
  1566                           
  1567                           ;lcd.c: 33: lcdNibble(data);
  1568  00190E  5003               	movf	putch@data,w,c
  1569  001910  ECD2  F00A         	call	_lcdNibble
  1570                           
  1571                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1572  001914  0EC8               	movlw	200
  1573  001916                     u937:
  1574  001916  D000               	nop2	
  1575  001918  2EE8               	decfsz	wreg,f,c
  1576  00191A  D7FD               	bra	u937
  1577  00191C  0012               	return		;funcret
  1578  00191E                     __end_of_putch:
  1579                           	opt stack 0
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           prodh	equ	0xFF4
  1585                           prodl	equ	0xFF3
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           postinc2	equ	0xFDE
  1589                           postdec2	equ	0xFDD
  1590                           fsr2h	equ	0xFDA
  1591                           fsr2l	equ	0xFD9
  1592                           status	equ	0xFD8
  1593                           
  1594 ;; *************** function _isdigit *****************
  1595 ;; Defined at:
  1596 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  c               1    wreg     unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  c               1    2[COMRAM] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;		None               void
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;Total ram usage:        3 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_printf
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text4
  1624  0018EC                     __ptext4:
  1625                           	opt stack 0
  1626  0018EC                     _isdigit:
  1627                           	opt stack 29
  1628                           
  1629                           ;incstack = 0
  1630                           ;isdigit@c stored from wreg
  1631  0018EC  6E03               	movwf	isdigit@c,c
  1632  0018EE  0E00               	movlw	0
  1633  0018F0  6E02               	movwf	_isdigit$833,c
  1634  0018F2  0E3A               	movlw	58
  1635  0018F4  6003               	cpfslt	isdigit@c,c
  1636  0018F6  D005               	goto	l641
  1637  0018F8  0E2F               	movlw	47
  1638  0018FA  6403               	cpfsgt	isdigit@c,c
  1639  0018FC  D002               	goto	l641
  1640  0018FE  0E01               	movlw	1
  1641  001900  6E02               	movwf	_isdigit$833,c
  1642  001902                     l641:
  1643  001902  C002  F001         	movff	_isdigit$833,??_isdigit
  1644  001906  3001               	rrcf	??_isdigit,w,c
  1645  001908  0012               	return	
  1646  00190A                     __end_of_isdigit:
  1647                           	opt stack 0
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           prodh	equ	0xFF4
  1653                           prodl	equ	0xFF3
  1654                           postinc0	equ	0xFEE
  1655                           wreg	equ	0xFE8
  1656                           postinc2	equ	0xFDE
  1657                           postdec2	equ	0xFDD
  1658                           fsr2h	equ	0xFDA
  1659                           fsr2l	equ	0xFD9
  1660                           status	equ	0xFD8
  1661                           
  1662 ;; *************** function ___lwmod *****************
  1663 ;; Defined at:
  1664 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;  dividend        2    7[COMRAM] unsigned int 
  1667 ;;  divisor         2    9[COMRAM] unsigned int 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  counter         1   11[COMRAM] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  2    7[COMRAM] unsigned int 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1679 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;Total ram usage:        5 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_printf
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text5
  1693  001844                     __ptext5:
  1694                           	opt stack 0
  1695  001844                     ___lwmod:
  1696                           	opt stack 29
  1697                           
  1698                           ;incstack = 0
  1699  001844  500A               	movf	___lwmod@divisor,w,c
  1700  001846  100B               	iorwf	___lwmod@divisor+1,w,c
  1701  001848  B4D8               	btfsc	status,2,c
  1702  00184A  D018               	goto	l735
  1703  00184C  0E01               	movlw	1
  1704  00184E  6E0C               	movwf	___lwmod@counter,c
  1705  001850  D004               	goto	l730
  1706  001852  90D8               	bcf	status,0,c
  1707  001854  360A               	rlcf	___lwmod@divisor,f,c
  1708  001856  360B               	rlcf	___lwmod@divisor+1,f,c
  1709  001858  2A0C               	incf	___lwmod@counter,f,c
  1710  00185A                     l730:
  1711  00185A  AE0B               	btfss	___lwmod@divisor+1,7,c
  1712  00185C  D7FA               	goto	l731
  1713  00185E                     u630:
  1714  00185E  500A               	movf	___lwmod@divisor,w,c
  1715  001860  5C08               	subwf	___lwmod@dividend,w,c
  1716  001862  500B               	movf	___lwmod@divisor+1,w,c
  1717  001864  5809               	subwfb	___lwmod@dividend+1,w,c
  1718  001866  A0D8               	btfss	status,0,c
  1719  001868  D004               	goto	l734
  1720  00186A  500A               	movf	___lwmod@divisor,w,c
  1721  00186C  5E08               	subwf	___lwmod@dividend,f,c
  1722  00186E  500B               	movf	___lwmod@divisor+1,w,c
  1723  001870  5A09               	subwfb	___lwmod@dividend+1,f,c
  1724  001872                     l734:
  1725  001872  90D8               	bcf	status,0,c
  1726  001874  320B               	rrcf	___lwmod@divisor+1,f,c
  1727  001876  320A               	rrcf	___lwmod@divisor,f,c
  1728  001878  2E0C               	decfsz	___lwmod@counter,f,c
  1729  00187A  D7F1               	goto	u630
  1730  00187C                     l735:
  1731  00187C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1732  001880  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1733  001884  0012               	return		;funcret
  1734  001886                     __end_of___lwmod:
  1735                           	opt stack 0
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           prodh	equ	0xFF4
  1741                           prodl	equ	0xFF3
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           postinc2	equ	0xFDE
  1745                           postdec2	equ	0xFDD
  1746                           fsr2h	equ	0xFDA
  1747                           fsr2l	equ	0xFD9
  1748                           status	equ	0xFD8
  1749                           
  1750 ;; *************** function ___lwdiv *****************
  1751 ;; Defined at:
  1752 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;  dividend        2    0[COMRAM] unsigned int 
  1755 ;;  divisor         2    2[COMRAM] unsigned int 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  quotient        2    4[COMRAM] unsigned int 
  1758 ;;  counter         1    6[COMRAM] unsigned char 
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  2    0[COMRAM] unsigned int 
  1761 ;; Registers used:
  1762 ;;		wreg, status,2, status,0
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1768 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;Total ram usage:        7 bytes
  1773 ;; Hardware stack levels used:    1
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_printf
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           	psect	text6
  1782  00167E                     __ptext6:
  1783                           	opt stack 0
  1784  00167E                     ___lwdiv:
  1785                           	opt stack 29
  1786                           
  1787                           ;incstack = 0
  1788  00167E  0E00               	movlw	0
  1789  001680  6E06               	movwf	___lwdiv@quotient+1,c
  1790  001682  0E00               	movlw	0
  1791  001684  6E05               	movwf	___lwdiv@quotient,c
  1792  001686  5003               	movf	___lwdiv@divisor,w,c
  1793  001688  1004               	iorwf	___lwdiv@divisor+1,w,c
  1794  00168A  B4D8               	btfsc	status,2,c
  1795  00168C  D01C               	goto	l725
  1796  00168E  0E01               	movlw	1
  1797  001690  6E07               	movwf	___lwdiv@counter,c
  1798  001692  D004               	goto	l720
  1799  001694  90D8               	bcf	status,0,c
  1800  001696  3603               	rlcf	___lwdiv@divisor,f,c
  1801  001698  3604               	rlcf	___lwdiv@divisor+1,f,c
  1802  00169A  2A07               	incf	___lwdiv@counter,f,c
  1803  00169C                     l720:
  1804  00169C  AE04               	btfss	___lwdiv@divisor+1,7,c
  1805  00169E  D7FA               	goto	l721
  1806  0016A0                     u600:
  1807  0016A0  90D8               	bcf	status,0,c
  1808  0016A2  3605               	rlcf	___lwdiv@quotient,f,c
  1809  0016A4  3606               	rlcf	___lwdiv@quotient+1,f,c
  1810  0016A6  5003               	movf	___lwdiv@divisor,w,c
  1811  0016A8  5C01               	subwf	___lwdiv@dividend,w,c
  1812  0016AA  5004               	movf	___lwdiv@divisor+1,w,c
  1813  0016AC  5802               	subwfb	___lwdiv@dividend+1,w,c
  1814  0016AE  A0D8               	btfss	status,0,c
  1815  0016B0  D005               	goto	l724
  1816  0016B2  5003               	movf	___lwdiv@divisor,w,c
  1817  0016B4  5E01               	subwf	___lwdiv@dividend,f,c
  1818  0016B6  5004               	movf	___lwdiv@divisor+1,w,c
  1819  0016B8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1820  0016BA  8005               	bsf	___lwdiv@quotient,0,c
  1821  0016BC                     l724:
  1822  0016BC  90D8               	bcf	status,0,c
  1823  0016BE  3204               	rrcf	___lwdiv@divisor+1,f,c
  1824  0016C0  3203               	rrcf	___lwdiv@divisor,f,c
  1825  0016C2  2E07               	decfsz	___lwdiv@counter,f,c
  1826  0016C4  D7ED               	goto	u600
  1827  0016C6                     l725:
  1828  0016C6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1829  0016CA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1830  0016CE  0012               	return		;funcret
  1831  0016D0                     __end_of___lwdiv:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           prodh	equ	0xFF4
  1838                           prodl	equ	0xFF3
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           postinc2	equ	0xFDE
  1842                           postdec2	equ	0xFDD
  1843                           fsr2h	equ	0xFDA
  1844                           fsr2l	equ	0xFD9
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _motorStop_3 *****************
  1848 ;; Defined at:
  1849 ;;		line 337 in file "main.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      void 
  1856 ;; Registers used:
  1857 ;;		wreg, status,2, status,0, cstack
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;Total ram usage:        0 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    2
  1870 ;; This function calls:
  1871 ;;		_I2C_Master_Init
  1872 ;;		_I2C_Master_Start
  1873 ;;		_I2C_Master_Stop
  1874 ;;		_I2C_Master_Write
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text7
  1881  00171C                     __ptext7:
  1882                           	opt stack 0
  1883  00171C                     _motorStop_3:
  1884                           	opt stack 28
  1885                           
  1886                           ;main.c: 338: I2C_Master_Init(100000);
  1887                           
  1888                           ;incstack = 0
  1889  00171C  0EA0               	movlw	160
  1890  00171E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1891  001720  0E86               	movlw	134
  1892  001722  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1893  001724  0E01               	movlw	1
  1894  001726  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1895  001728  0E00               	movlw	0
  1896  00172A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1897  00172C  EC11  F00B         	call	_I2C_Master_Init	;wreg free
  1898                           
  1899                           ;main.c: 339: I2C_Master_Start();
  1900  001730  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
  1901                           
  1902                           ;main.c: 341: I2C_Master_Write(0b00010000);
  1903  001734  0E00               	movlw	0
  1904  001736  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1905  001738  0E10               	movlw	16
  1906  00173A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1907  00173C  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  1908                           
  1909                           ;main.c: 342: I2C_Master_Stop();
  1910  001740  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
  1911                           
  1912                           ;main.c: 345: I2C_Master_Start();
  1913  001744  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
  1914                           
  1915                           ;main.c: 346: I2C_Master_Write(0b00010000);
  1916  001748  0E00               	movlw	0
  1917  00174A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1918  00174C  0E10               	movlw	16
  1919  00174E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1920  001750  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  1921                           
  1922                           ;main.c: 347: I2C_Master_Write('0');
  1923  001754  0E00               	movlw	0
  1924  001756  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1925  001758  0E30               	movlw	48
  1926  00175A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1927  00175C  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  1928                           
  1929                           ;main.c: 348: I2C_Master_Stop();
  1930  001760  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
  1931  001764  0012               	return		;funcret
  1932  001766                     __end_of_motorStop_3:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           prodh	equ	0xFF4
  1939                           prodl	equ	0xFF3
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postinc2	equ	0xFDE
  1943                           postdec2	equ	0xFDD
  1944                           fsr2h	equ	0xFDA
  1945                           fsr2l	equ	0xFD9
  1946                           status	equ	0xFD8
  1947                           
  1948 ;; *************** function _motorStop_0 *****************
  1949 ;; Defined at:
  1950 ;;		line 247 in file "main.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, status,0, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;Total ram usage:        0 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    2
  1971 ;; This function calls:
  1972 ;;		_I2C_Master_Init
  1973 ;;		_I2C_Master_Start
  1974 ;;		_I2C_Master_Stop
  1975 ;;		_I2C_Master_Write
  1976 ;; This function is called by:
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text8
  1982  001766                     __ptext8:
  1983                           	opt stack 0
  1984  001766                     _motorStop_0:
  1985                           	opt stack 28
  1986                           
  1987                           ;main.c: 249: I2C_Master_Init(100000);
  1988                           
  1989                           ;incstack = 0
  1990  001766  0EA0               	movlw	160
  1991  001768  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1992  00176A  0E86               	movlw	134
  1993  00176C  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1994  00176E  0E01               	movlw	1
  1995  001770  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1996  001772  0E00               	movlw	0
  1997  001774  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1998  001776  EC11  F00B         	call	_I2C_Master_Init	;wreg free
  1999                           
  2000                           ;main.c: 250: I2C_Master_Start();
  2001  00177A  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
  2002                           
  2003                           ;main.c: 252: I2C_Master_Write(0b00010000);
  2004  00177E  0E00               	movlw	0
  2005  001780  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2006  001782  0E10               	movlw	16
  2007  001784  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2008  001786  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2009                           
  2010                           ;main.c: 253: I2C_Master_Stop();
  2011  00178A  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
  2012                           
  2013                           ;main.c: 256: I2C_Master_Start();
  2014  00178E  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
  2015                           
  2016                           ;main.c: 257: I2C_Master_Write(0b00010000);
  2017  001792  0E00               	movlw	0
  2018  001794  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2019  001796  0E10               	movlw	16
  2020  001798  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2021  00179A  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2022                           
  2023                           ;main.c: 258: I2C_Master_Write('4');
  2024  00179E  0E00               	movlw	0
  2025  0017A0  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2026  0017A2  0E34               	movlw	52
  2027  0017A4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2028  0017A6  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2029                           
  2030                           ;main.c: 259: I2C_Master_Stop();
  2031  0017AA  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
  2032  0017AE  0012               	return		;funcret
  2033  0017B0                     __end_of_motorStop_0:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           postinc0	equ	0xFEE
  2042                           wreg	equ	0xFE8
  2043                           postinc2	equ	0xFDE
  2044                           postdec2	equ	0xFDD
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _motorStart_3 *****************
  2050 ;; Defined at:
  2051 ;;		line 323 in file "main.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;		None
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:        0 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    2
  2072 ;; This function calls:
  2073 ;;		_I2C_Master_Init
  2074 ;;		_I2C_Master_Start
  2075 ;;		_I2C_Master_Stop
  2076 ;;		_I2C_Master_Write
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text9
  2083  0017B0                     __ptext9:
  2084                           	opt stack 0
  2085  0017B0                     _motorStart_3:
  2086                           	opt stack 28
  2087                           
  2088                           ;main.c: 324: I2C_Master_Init(100000);
  2089                           
  2090                           ;incstack = 0
  2091  0017B0  0EA0               	movlw	160
  2092  0017B2  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2093  0017B4  0E86               	movlw	134
  2094  0017B6  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2095  0017B8  0E01               	movlw	1
  2096  0017BA  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2097  0017BC  0E00               	movlw	0
  2098  0017BE  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2099  0017C0  EC11  F00B         	call	_I2C_Master_Init	;wreg free
  2100                           
  2101                           ;main.c: 325: I2C_Master_Start();
  2102  0017C4  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
  2103                           
  2104                           ;main.c: 327: I2C_Master_Write(0b00010000);
  2105  0017C8  0E00               	movlw	0
  2106  0017CA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2107  0017CC  0E10               	movlw	16
  2108  0017CE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2109  0017D0  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2110                           
  2111                           ;main.c: 328: I2C_Master_Stop();
  2112  0017D4  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
  2113                           
  2114                           ;main.c: 331: I2C_Master_Start();
  2115  0017D8  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
  2116                           
  2117                           ;main.c: 332: I2C_Master_Write(0b00010000);
  2118  0017DC  0E00               	movlw	0
  2119  0017DE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2120  0017E0  0E10               	movlw	16
  2121  0017E2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2122  0017E4  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2123                           
  2124                           ;main.c: 333: I2C_Master_Write('9');
  2125  0017E8  0E00               	movlw	0
  2126  0017EA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2127  0017EC  0E39               	movlw	57
  2128  0017EE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2129  0017F0  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2130                           
  2131                           ;main.c: 334: I2C_Master_Stop();
  2132  0017F4  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
  2133  0017F8  0012               	return		;funcret
  2134  0017FA                     __end_of_motorStart_3:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _motorStart_0 *****************
  2151 ;; Defined at:
  2152 ;;		line 231 in file "main.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;		None
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      void 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;Total ram usage:        0 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    2
  2173 ;; This function calls:
  2174 ;;		_I2C_Master_Init
  2175 ;;		_I2C_Master_Start
  2176 ;;		_I2C_Master_Stop
  2177 ;;		_I2C_Master_Write
  2178 ;; This function is called by:
  2179 ;;		_main
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text10
  2184  0017FA                     __ptext10:
  2185                           	opt stack 0
  2186  0017FA                     _motorStart_0:
  2187                           	opt stack 28
  2188                           
  2189                           ;main.c: 233: I2C_Master_Init(100000);
  2190                           
  2191                           ;incstack = 0
  2192  0017FA  0EA0               	movlw	160
  2193  0017FC  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2194  0017FE  0E86               	movlw	134
  2195  001800  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2196  001802  0E01               	movlw	1
  2197  001804  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2198  001806  0E00               	movlw	0
  2199  001808  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2200  00180A  EC11  F00B         	call	_I2C_Master_Init	;wreg free
  2201                           
  2202                           ;main.c: 234: I2C_Master_Start();
  2203  00180E  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
  2204                           
  2205                           ;main.c: 236: I2C_Master_Write(0b00010000);
  2206  001812  0E00               	movlw	0
  2207  001814  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2208  001816  0E10               	movlw	16
  2209  001818  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2210  00181A  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2211                           
  2212                           ;main.c: 237: I2C_Master_Stop();
  2213  00181E  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
  2214                           
  2215                           ;main.c: 240: I2C_Master_Start();
  2216  001822  ECAB  F00C         	call	_I2C_Master_Start	;wreg free
  2217                           
  2218                           ;main.c: 241: I2C_Master_Write(0b00010000);
  2219  001826  0E00               	movlw	0
  2220  001828  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2221  00182A  0E10               	movlw	16
  2222  00182C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2223  00182E  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2224                           
  2225                           ;main.c: 242: I2C_Master_Write('3');
  2226  001832  0E00               	movlw	0
  2227  001834  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2228  001836  0E33               	movlw	51
  2229  001838  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2230  00183A  ECA2  F00C         	call	_I2C_Master_Write	;wreg free
  2231                           
  2232                           ;main.c: 243: I2C_Master_Stop();
  2233  00183E  ECA7  F00C         	call	_I2C_Master_Stop	;wreg free
  2234  001842  0012               	return		;funcret
  2235  001844                     __end_of_motorStart_0:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           tblptrh	equ	0xFF7
  2239                           tblptrl	equ	0xFF6
  2240                           tablat	equ	0xFF5
  2241                           prodh	equ	0xFF4
  2242                           prodl	equ	0xFF3
  2243                           postinc0	equ	0xFEE
  2244                           wreg	equ	0xFE8
  2245                           postinc2	equ	0xFDE
  2246                           postdec2	equ	0xFDD
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _I2C_Master_Write *****************
  2252 ;; Defined at:
  2253 ;;		line 108 in file "I2C.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2267 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;Total ram usage:        2 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    1
  2274 ;; This function calls:
  2275 ;;		_I2C_Master_Wait
  2276 ;; This function is called by:
  2277 ;;		_main
  2278 ;;		_motorStart_0
  2279 ;;		_motorStop_0
  2280 ;;		_motorStart_3
  2281 ;;		_motorStop_3
  2282 ;;		_motorStart_1
  2283 ;;		_motorStop_1
  2284 ;;		_motorStart_2
  2285 ;;		_motorStop_2
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text11
  2290  001944                     __ptext11:
  2291                           	opt stack 0
  2292  001944                     _I2C_Master_Write:
  2293                           	opt stack 28
  2294                           
  2295                           ;I2C.c: 116: I2C_Master_Wait();
  2296                           
  2297                           ;incstack = 0
  2298  001944  EC99  F00C         	call	_I2C_Master_Wait	;wreg free
  2299                           
  2300                           ;I2C.c: 117: SSPBUF = byteToWrite;
  2301  001948  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2302  00194C  0012               	return		;funcret
  2303  00194E                     __end_of_I2C_Master_Write:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           postinc0	equ	0xFEE
  2312                           wreg	equ	0xFE8
  2313                           postinc2	equ	0xFDE
  2314                           postdec2	equ	0xFDD
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8
  2318                           
  2319 ;; *************** function _I2C_Master_Stop *****************
  2320 ;; Defined at:
  2321 ;;		line 95 in file "I2C.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;		None
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;		None
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  1    wreg      void 
  2328 ;; Registers used:
  2329 ;;		wreg, status,2, status,0, cstack
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;Total ram usage:        0 bytes
  2340 ;; Hardware stack levels used:    1
  2341 ;; Hardware stack levels required when called:    1
  2342 ;; This function calls:
  2343 ;;		_I2C_Master_Wait
  2344 ;; This function is called by:
  2345 ;;		_main
  2346 ;;		_motorStart_0
  2347 ;;		_motorStop_0
  2348 ;;		_motorStart_3
  2349 ;;		_motorStop_3
  2350 ;;		_motorStart_1
  2351 ;;		_motorStop_1
  2352 ;;		_motorStart_2
  2353 ;;		_motorStop_2
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text12
  2358  00194E                     __ptext12:
  2359                           	opt stack 0
  2360  00194E                     _I2C_Master_Stop:
  2361                           	opt stack 28
  2362                           
  2363                           ;I2C.c: 104: I2C_Master_Wait();
  2364                           
  2365                           ;incstack = 0
  2366  00194E  EC99  F00C         	call	_I2C_Master_Wait	;wreg free
  2367                           
  2368                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  2369  001952  84C5               	bsf	4037,2,c	;volatile
  2370  001954  0012               	return		;funcret
  2371  001956                     __end_of_I2C_Master_Stop:
  2372                           	opt stack 0
  2373                           tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           prodh	equ	0xFF4
  2378                           prodl	equ	0xFF3
  2379                           postinc0	equ	0xFEE
  2380                           wreg	equ	0xFE8
  2381                           postinc2	equ	0xFDE
  2382                           postdec2	equ	0xFDD
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _I2C_Master_Start *****************
  2388 ;; Defined at:
  2389 ;;		line 69 in file "I2C.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;Total ram usage:        0 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    1
  2410 ;; This function calls:
  2411 ;;		_I2C_Master_Wait
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;;		_motorStart_0
  2415 ;;		_motorStop_0
  2416 ;;		_motorStart_3
  2417 ;;		_motorStop_3
  2418 ;;		_motorStart_1
  2419 ;;		_motorStop_1
  2420 ;;		_motorStart_2
  2421 ;;		_motorStop_2
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text13
  2426  001956                     __ptext13:
  2427                           	opt stack 0
  2428  001956                     _I2C_Master_Start:
  2429                           	opt stack 28
  2430                           
  2431                           ;I2C.c: 78: I2C_Master_Wait();
  2432                           
  2433                           ;incstack = 0
  2434  001956  EC99  F00C         	call	_I2C_Master_Wait	;wreg free
  2435                           
  2436                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  2437  00195A  80C5               	bsf	4037,0,c	;volatile
  2438  00195C  0012               	return		;funcret
  2439  00195E                     __end_of_I2C_Master_Start:
  2440                           	opt stack 0
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodh	equ	0xFF4
  2446                           prodl	equ	0xFF3
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           postinc2	equ	0xFDE
  2450                           postdec2	equ	0xFDD
  2451                           fsr2h	equ	0xFDA
  2452                           fsr2l	equ	0xFD9
  2453                           status	equ	0xFD8
  2454                           
  2455 ;; *************** function _I2C_Master_Wait *****************
  2456 ;; Defined at:
  2457 ;;		line 51 in file "I2C.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, status,2, status,0
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;Total ram usage:        1 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_I2C_Master_Start
  2481 ;;		_I2C_Master_Stop
  2482 ;;		_I2C_Master_Write
  2483 ;;		_I2C_Master_RepeatedStart
  2484 ;;		_I2C_Master_Read
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text14
  2489  001932                     __ptext14:
  2490                           	opt stack 0
  2491  001932                     _I2C_Master_Wait:
  2492                           	opt stack 28
  2493                           
  2494                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2495                           
  2496                           ;incstack = 0
  2497  001932  B4C7               	btfsc	4039,2,c	;volatile
  2498  001934  D7FE               	goto	_I2C_Master_Wait
  2499  001936  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  2500  00193A  0E1F               	movlw	31
  2501  00193C  1601               	andwf	??_I2C_Master_Wait,f,c
  2502  00193E  B4D8               	btfsc	status,2,c
  2503  001940  0012               	return	
  2504  001942  D7F7               	goto	_I2C_Master_Wait
  2505  001944                     __end_of_I2C_Master_Wait:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           prodh	equ	0xFF4
  2512                           prodl	equ	0xFF3
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           postinc2	equ	0xFDE
  2516                           postdec2	equ	0xFDD
  2517                           fsr2h	equ	0xFDA
  2518                           fsr2l	equ	0xFD9
  2519                           status	equ	0xFD8
  2520                           
  2521 ;; *************** function _I2C_Master_Init *****************
  2522 ;; Defined at:
  2523 ;;		line 14 in file "I2C.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;		None
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2537 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;Total ram usage:        8 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    1
  2544 ;; This function calls:
  2545 ;;		___lldiv
  2546 ;; This function is called by:
  2547 ;;		_main
  2548 ;;		_motorStart_0
  2549 ;;		_motorStop_0
  2550 ;;		_motorStart_3
  2551 ;;		_motorStop_3
  2552 ;;		_motorStart_1
  2553 ;;		_motorStop_1
  2554 ;;		_motorStart_2
  2555 ;;		_motorStop_2
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text15
  2560  001622                     __ptext15:
  2561                           	opt stack 0
  2562  001622                     _I2C_Master_Init:
  2563                           	opt stack 28
  2564                           
  2565                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2566                           
  2567                           ;incstack = 0
  2568  001622  9AC6               	bcf	4038,5,c	;volatile
  2569                           
  2570                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2571  001624  8694               	bsf	3988,3,c	;volatile
  2572                           
  2573                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2574  001626  8894               	bsf	3988,4,c	;volatile
  2575                           
  2576                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2577  001628  0E80               	movlw	128
  2578  00162A  6EC7               	movwf	4039,c	;volatile
  2579                           
  2580                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2581  00162C  0E28               	movlw	40
  2582  00162E  6EC6               	movwf	4038,c	;volatile
  2583                           
  2584                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2585  001630  0E00               	movlw	0
  2586  001632  6EC5               	movwf	4037,c	;volatile
  2587                           
  2588                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  2589  001634  0E00               	movlw	0
  2590  001636  6E01               	movwf	___lldiv@dividend,c
  2591  001638  0E5A               	movlw	90
  2592  00163A  6E02               	movwf	___lldiv@dividend+1,c
  2593  00163C  0E62               	movlw	98
  2594  00163E  6E03               	movwf	___lldiv@dividend+2,c
  2595  001640  0E02               	movlw	2
  2596  001642  6E04               	movwf	___lldiv@dividend+3,c
  2597  001644  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  2598  001648  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  2599  00164C  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  2600  001650  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  2601  001654  0E02               	movlw	2
  2602  001656                     u565:
  2603  001656  90D8               	bcf	status,0,c
  2604  001658  3612               	rlcf	??_I2C_Master_Init,f,c
  2605  00165A  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2606  00165C  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2607  00165E  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2608  001660  2EE8               	decfsz	wreg,f,c
  2609  001662  D7F9               	goto	u565
  2610  001664  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2611  001668  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2612  00166C  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2613  001670  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2614  001674  EC91  F00A         	call	___lldiv	;wreg free
  2615  001678  0401               	decf	?___lldiv,w,c
  2616  00167A  6EC8               	movwf	4040,c	;volatile
  2617  00167C  0012               	return		;funcret
  2618  00167E                     __end_of_I2C_Master_Init:
  2619                           	opt stack 0
  2620                           tblptru	equ	0xFF8
  2621                           tblptrh	equ	0xFF7
  2622                           tblptrl	equ	0xFF6
  2623                           tablat	equ	0xFF5
  2624                           prodh	equ	0xFF4
  2625                           prodl	equ	0xFF3
  2626                           postinc0	equ	0xFEE
  2627                           wreg	equ	0xFE8
  2628                           postinc2	equ	0xFDE
  2629                           postdec2	equ	0xFDD
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function ___lldiv *****************
  2635 ;; Defined at:
  2636 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  dividend        4    0[COMRAM] unsigned long 
  2639 ;;  divisor         4    4[COMRAM] unsigned long 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  quotient        4    8[COMRAM] unsigned long 
  2642 ;;  counter         1   12[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  4    0[COMRAM] unsigned long 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:       13 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_I2C_Master_Init
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text16
  2666  001522                     __ptext16:
  2667                           	opt stack 0
  2668  001522                     ___lldiv:
  2669                           	opt stack 28
  2670                           
  2671                           ;incstack = 0
  2672  001522  0E00               	movlw	0
  2673  001524  6E09               	movwf	___lldiv@quotient,c
  2674  001526  0E00               	movlw	0
  2675  001528  6E0A               	movwf	___lldiv@quotient+1,c
  2676  00152A  0E00               	movlw	0
  2677  00152C  6E0B               	movwf	___lldiv@quotient+2,c
  2678  00152E  0E00               	movlw	0
  2679  001530  6E0C               	movwf	___lldiv@quotient+3,c
  2680  001532  5005               	movf	___lldiv@divisor,w,c
  2681  001534  1006               	iorwf	___lldiv@divisor+1,w,c
  2682  001536  1007               	iorwf	___lldiv@divisor+2,w,c
  2683  001538  1008               	iorwf	___lldiv@divisor+3,w,c
  2684  00153A  B4D8               	btfsc	status,2,c
  2685  00153C  D02A               	goto	l672
  2686  00153E  0E01               	movlw	1
  2687  001540  6E0D               	movwf	___lldiv@counter,c
  2688  001542  D006               	goto	l667
  2689  001544  90D8               	bcf	status,0,c
  2690  001546  3605               	rlcf	___lldiv@divisor,f,c
  2691  001548  3606               	rlcf	___lldiv@divisor+1,f,c
  2692  00154A  3607               	rlcf	___lldiv@divisor+2,f,c
  2693  00154C  3608               	rlcf	___lldiv@divisor+3,f,c
  2694  00154E  2A0D               	incf	___lldiv@counter,f,c
  2695  001550                     l667:
  2696  001550  AE08               	btfss	___lldiv@divisor+3,7,c
  2697  001552  D7F8               	goto	l668
  2698  001554                     u540:
  2699  001554  90D8               	bcf	status,0,c
  2700  001556  3609               	rlcf	___lldiv@quotient,f,c
  2701  001558  360A               	rlcf	___lldiv@quotient+1,f,c
  2702  00155A  360B               	rlcf	___lldiv@quotient+2,f,c
  2703  00155C  360C               	rlcf	___lldiv@quotient+3,f,c
  2704  00155E  5005               	movf	___lldiv@divisor,w,c
  2705  001560  5C01               	subwf	___lldiv@dividend,w,c
  2706  001562  5006               	movf	___lldiv@divisor+1,w,c
  2707  001564  5802               	subwfb	___lldiv@dividend+1,w,c
  2708  001566  5007               	movf	___lldiv@divisor+2,w,c
  2709  001568  5803               	subwfb	___lldiv@dividend+2,w,c
  2710  00156A  5008               	movf	___lldiv@divisor+3,w,c
  2711  00156C  5804               	subwfb	___lldiv@dividend+3,w,c
  2712  00156E  A0D8               	btfss	status,0,c
  2713  001570  D009               	goto	l671
  2714  001572  5005               	movf	___lldiv@divisor,w,c
  2715  001574  5E01               	subwf	___lldiv@dividend,f,c
  2716  001576  5006               	movf	___lldiv@divisor+1,w,c
  2717  001578  5A02               	subwfb	___lldiv@dividend+1,f,c
  2718  00157A  5007               	movf	___lldiv@divisor+2,w,c
  2719  00157C  5A03               	subwfb	___lldiv@dividend+2,f,c
  2720  00157E  5008               	movf	___lldiv@divisor+3,w,c
  2721  001580  5A04               	subwfb	___lldiv@dividend+3,f,c
  2722  001582  8009               	bsf	___lldiv@quotient,0,c
  2723  001584                     l671:
  2724  001584  90D8               	bcf	status,0,c
  2725  001586  3208               	rrcf	___lldiv@divisor+3,f,c
  2726  001588  3207               	rrcf	___lldiv@divisor+2,f,c
  2727  00158A  3206               	rrcf	___lldiv@divisor+1,f,c
  2728  00158C  3205               	rrcf	___lldiv@divisor,f,c
  2729  00158E  2E0D               	decfsz	___lldiv@counter,f,c
  2730  001590  D7E1               	goto	u540
  2731  001592                     l672:
  2732  001592  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2733  001596  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2734  00159A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2735  00159E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2736  0015A2  0012               	return		;funcret
  2737  0015A4                     __end_of___lldiv:
  2738                           	opt stack 0
  2739                           tblptru	equ	0xFF8
  2740                           tblptrh	equ	0xFF7
  2741                           tblptrl	equ	0xFF6
  2742                           tablat	equ	0xFF5
  2743                           prodh	equ	0xFF4
  2744                           prodl	equ	0xFF3
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postinc2	equ	0xFDE
  2748                           postdec2	equ	0xFDD
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _initLCD *****************
  2754 ;; Defined at:
  2755 ;;		line 60 in file "lcd.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, status,2, status,0, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;Total ram usage:        1 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    2
  2776 ;; This function calls:
  2777 ;;		_lcdInst
  2778 ;; This function is called by:
  2779 ;;		_main
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text17
  2784  0016D0                     __ptext17:
  2785                           	opt stack 0
  2786  0016D0                     _initLCD:
  2787                           	opt stack 28
  2788                           
  2789                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2790                           
  2791                           ;incstack = 0
  2792  0016D0  0EC3               	movlw	195
  2793  0016D2  6E04               	movwf	??_initLCD& (0+255),c
  2794  0016D4  0ECD               	movlw	205
  2795  0016D6                     u947:
  2796  0016D6  2EE8               	decfsz	wreg,f,c
  2797  0016D8  D7FE               	bra	u947
  2798  0016DA  2E04               	decfsz	??_initLCD& (0+255),f,c
  2799  0016DC  D7FC               	bra	u947
  2800  0016DE  F000               	nop	
  2801                           
  2802                           ;lcd.c: 69: lcdInst(0b00110011);
  2803  0016E0  0E33               	movlw	51
  2804  0016E2  EC8F  F00C         	call	_lcdInst
  2805                           
  2806                           ;lcd.c: 70: lcdInst(0b00110010);
  2807  0016E6  0E32               	movlw	50
  2808  0016E8  EC8F  F00C         	call	_lcdInst
  2809                           
  2810                           ;lcd.c: 71: lcdInst(0b00101000);
  2811  0016EC  0E28               	movlw	40
  2812  0016EE  EC8F  F00C         	call	_lcdInst
  2813                           
  2814                           ;lcd.c: 72: lcdInst(0b00001111);
  2815  0016F2  0E0F               	movlw	15
  2816  0016F4  EC8F  F00C         	call	_lcdInst
  2817                           
  2818                           ;lcd.c: 73: lcdInst(0b00000110);
  2819  0016F8  0E06               	movlw	6
  2820  0016FA  EC8F  F00C         	call	_lcdInst
  2821                           
  2822                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2823  0016FE  0E01               	movlw	1
  2824  001700  EC8F  F00C         	call	_lcdInst
  2825  001704  0EC3               	movlw	195
  2826  001706  6E04               	movwf	??_initLCD& (0+255),c
  2827  001708  0ECD               	movlw	205
  2828  00170A                     u957:
  2829  00170A  2EE8               	decfsz	wreg,f,c
  2830  00170C  D7FE               	bra	u957
  2831  00170E  2E04               	decfsz	??_initLCD& (0+255),f,c
  2832  001710  D7FC               	bra	u957
  2833  001712  F000               	nop	
  2834                           
  2835                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2836  001714  0E0F               	movlw	15
  2837  001716  EC8F  F00C         	call	_lcdInst
  2838  00171A  0012               	return		;funcret
  2839  00171C                     __end_of_initLCD:
  2840                           	opt stack 0
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           postinc0	equ	0xFEE
  2848                           wreg	equ	0xFE8
  2849                           postinc2	equ	0xFDE
  2850                           postdec2	equ	0xFDD
  2851                           fsr2h	equ	0xFDA
  2852                           fsr2l	equ	0xFD9
  2853                           status	equ	0xFD8
  2854                           
  2855 ;; *************** function _lcdInst *****************
  2856 ;; Defined at:
  2857 ;;		line 11 in file "lcd.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;  data            1    wreg     unsigned char 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  data            1    2[COMRAM] unsigned char 
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  1    wreg      void 
  2864 ;; Registers used:
  2865 ;;		wreg, status,2, status,0, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;Total ram usage:        1 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    1
  2878 ;; This function calls:
  2879 ;;		_lcdNibble
  2880 ;; This function is called by:
  2881 ;;		_main
  2882 ;;		_initLCD
  2883 ;;		_lcd_set_cursor
  2884 ;;		_lcd_shift_cursor
  2885 ;;		_lcd_shift_display
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text18
  2890  00191E                     __ptext18:
  2891                           	opt stack 0
  2892  00191E                     _lcdInst:
  2893                           	opt stack 29
  2894                           
  2895                           ;incstack = 0
  2896                           ;lcdInst@data stored from wreg
  2897  00191E  6E03               	movwf	lcdInst@data,c
  2898                           
  2899                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2900  001920  948C               	bcf	3980,2,c	;volatile
  2901                           
  2902                           ;lcd.c: 20: lcdNibble(data);
  2903  001922  5003               	movf	lcdInst@data,w,c
  2904  001924  ECD2  F00A         	call	_lcdNibble
  2905                           
  2906                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2907  001928  0EC8               	movlw	200
  2908  00192A                     u967:
  2909  00192A  D000               	nop2	
  2910  00192C  2EE8               	decfsz	wreg,f,c
  2911  00192E  D7FD               	bra	u967
  2912  001930  0012               	return		;funcret
  2913  001932                     __end_of_lcdInst:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           postinc2	equ	0xFDE
  2924                           postdec2	equ	0xFDD
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _lcdNibble *****************
  2930 ;; Defined at:
  2931 ;;		line 37 in file "lcd.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  data            1    wreg     unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  data            1    1[COMRAM] unsigned char 
  2936 ;;  temp            1    0[COMRAM] unsigned char 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;Total ram usage:        2 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		_lcdInst
  2956 ;;		_putch
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text19
  2961  0015A4                     __ptext19:
  2962                           	opt stack 0
  2963  0015A4                     _lcdNibble:
  2964                           	opt stack 28
  2965                           
  2966                           ;incstack = 0
  2967                           ;lcdNibble@data stored from wreg
  2968  0015A4  6E02               	movwf	lcdNibble@data,c
  2969                           
  2970                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2971  0015A6  5002               	movf	lcdNibble@data,w,c
  2972  0015A8  0BF0               	andlw	240
  2973  0015AA  6E01               	movwf	lcdNibble@temp,c
  2974                           
  2975                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2976  0015AC  508C               	movf	3980,w,c	;volatile
  2977  0015AE  0B0F               	andlw	15
  2978  0015B0  6E8C               	movwf	3980,c	;volatile
  2979                           
  2980                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2981  0015B2  5001               	movf	lcdNibble@temp,w,c
  2982  0015B4  108C               	iorwf	3980,w,c	;volatile
  2983  0015B6  6E8C               	movwf	3980,c	;volatile
  2984                           
  2985                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2986  0015B8  0E00               	movlw	0
  2987  0015BA  BEF2               	btfsc	intcon,7,c	;volatile
  2988  0015BC  0E01               	movlw	1
  2989  0015BE  6E28               	movwf	lcd@LCDinterruptState,c
  2990  0015C0  9EF2               	bcf	intcon,7,c	;volatile
  2991  0015C2  868C               	bsf	3980,3,c	;volatile
  2992  0015C4  0E53               	movlw	83
  2993  0015C6                     u977:
  2994  0015C6  2EE8               	decfsz	wreg,f,c
  2995  0015C8  D7FE               	bra	u977
  2996  0015CA  F000               	nop	
  2997  0015CC  968C               	bcf	3980,3,c	;volatile
  2998  0015CE  0EC8               	movlw	200
  2999  0015D0                     u987:
  3000  0015D0  D000               	nop2	
  3001  0015D2  2EE8               	decfsz	wreg,f,c
  3002  0015D4  D7FD               	bra	u987
  3003  0015D6  B028               	btfsc	lcd@LCDinterruptState,0,c
  3004  0015D8  D002               	bra	u15
  3005  0015DA  9EF2               	bcf	intcon,7,c	;volatile
  3006  0015DC  D001               	bra	u16
  3007  0015DE                     u15:
  3008  0015DE  8EF2               	bsf	intcon,7,c	;volatile
  3009  0015E0                     u16:
  3010                           
  3011                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3012  0015E0  3802               	swapf	lcdNibble@data,w,c
  3013  0015E2  0BF0               	andlw	240
  3014  0015E4  6E02               	movwf	lcdNibble@data,c
  3015                           
  3016                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3017  0015E6  5002               	movf	lcdNibble@data,w,c
  3018  0015E8  0BF0               	andlw	240
  3019  0015EA  6E01               	movwf	lcdNibble@temp,c
  3020                           
  3021                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3022  0015EC  508C               	movf	3980,w,c	;volatile
  3023  0015EE  0B0F               	andlw	15
  3024  0015F0  6E8C               	movwf	3980,c	;volatile
  3025                           
  3026                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3027  0015F2  5001               	movf	lcdNibble@temp,w,c
  3028  0015F4  108C               	iorwf	3980,w,c	;volatile
  3029  0015F6  6E8C               	movwf	3980,c	;volatile
  3030                           
  3031                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3032  0015F8  0E00               	movlw	0
  3033  0015FA  BEF2               	btfsc	intcon,7,c	;volatile
  3034  0015FC  0E01               	movlw	1
  3035  0015FE  6E28               	movwf	lcd@LCDinterruptState,c
  3036  001600  9EF2               	bcf	intcon,7,c	;volatile
  3037  001602  868C               	bsf	3980,3,c	;volatile
  3038  001604  0E53               	movlw	83
  3039  001606                     u997:
  3040  001606  2EE8               	decfsz	wreg,f,c
  3041  001608  D7FE               	bra	u997
  3042  00160A  F000               	nop	
  3043  00160C  968C               	bcf	3980,3,c	;volatile
  3044  00160E  0EC8               	movlw	200
  3045  001610                     u1007:
  3046  001610  D000               	nop2	
  3047  001612  2EE8               	decfsz	wreg,f,c
  3048  001614  D7FD               	bra	u1007
  3049  001616  B028               	btfsc	lcd@LCDinterruptState,0,c
  3050  001618  D002               	bra	u25
  3051  00161A  9EF2               	bcf	intcon,7,c	;volatile
  3052  00161C  D001               	bra	u26
  3053  00161E                     u25:
  3054  00161E  8EF2               	bsf	intcon,7,c	;volatile
  3055  001620                     u26:
  3056  001620  0012               	return		;funcret
  3057  001622                     __end_of_lcdNibble:
  3058                           	opt stack 0
  3059                           tblptru	equ	0xFF8
  3060                           tblptrh	equ	0xFF7
  3061                           tblptrl	equ	0xFF6
  3062                           tablat	equ	0xFF5
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           intcon	equ	0xFF2
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postinc2	equ	0xFDE
  3069                           postdec2	equ	0xFDD
  3070                           fsr2h	equ	0xFDA
  3071                           fsr2l	equ	0xFD9
  3072                           status	equ	0xFD8
  3073                           tblptru	equ	0xFF8
  3074                           tblptrh	equ	0xFF7
  3075                           tblptrl	equ	0xFF6
  3076                           tablat	equ	0xFF5
  3077                           prodh	equ	0xFF4
  3078                           prodl	equ	0xFF3
  3079                           intcon	equ	0xFF2
  3080                           postinc0	equ	0xFEE
  3081                           wreg	equ	0xFE8
  3082                           postinc2	equ	0xFDE
  3083                           postdec2	equ	0xFDD
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088                           	psect	rparam
  3089  0000                     tblptru	equ	0xFF8
  3090                           tblptrh	equ	0xFF7
  3091                           tblptrl	equ	0xFF6
  3092                           tablat	equ	0xFF5
  3093                           prodh	equ	0xFF4
  3094                           prodl	equ	0xFF3
  3095                           intcon	equ	0xFF2
  3096                           postinc0	equ	0xFEE
  3097                           wreg	equ	0xFE8
  3098                           postinc2	equ	0xFDE
  3099                           postdec2	equ	0xFDD
  3100                           fsr2h	equ	0xFDA
  3101                           fsr2l	equ	0xFD9
  3102                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    44
    Data        2
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      43
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[15]), STR_6(CODE[10]), STR_5(CODE[3]), STR_4(CODE[3]), 
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_3->_I2C_Master_Init
    _motorStop_0->_I2C_Master_Init
    _motorStart_3->_I2C_Master_Init
    _motorStart_0->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   19543
                                             25 COMRAM     2     2      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                       _motorStart_0
                       _motorStart_3
                        _motorStop_0
                        _motorStop_3
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    18      4    2351
                                             12 COMRAM    13     9      4
                            ___lwdiv
                            ___lwmod
                            _isdigit
                              _putch
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_3                                          0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_3                                         0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2302
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1096
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_0
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStart_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_0
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _isdigit
     _putch
       _lcdNibble
     _readADC (ARG)
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1B      2B       1       33.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      34        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 17:01:07 2018

                          _i 001C                           u15 15DE                           u16 15E0  
                         u25 161E                           u26 1620                  __CFG_CPD$ON 000000  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l101 1376  
                        l102 1390                          l103 13C0                          l104 13A6  
                        l106 1458                          l107 146E                          l108 14F2  
                        l301 11F4                          l109 14B2                          l118 189E  
                        l303 12A8                          l305 1292                          l306 1208  
                        l307 12A2                          l308 124C                          l270 1068  
                        l271 1078                          l272 10CC                          l273 10B6  
                        l290 115C                          l282 1104                          l274 1098  
                        l283 10D2                          l285 1132                          l277 10D6  
                        l294 11CC                          l295 118C                          l287 114A  
                        l720 169C                          l721 1694                          l641 1902  
                        l289 11BC                          l730 185A                          l731 1852  
                        l299 11E2                          l724 16BC                          l725 16C6  
                        l734 1872                          l671 1584                          l735 187C  
                        l672 1592                          l667 1550                          l668 1544  
               __CFG_CPB$OFF 000000                          u600 16A0                          u540 1554  
                        u630 185E                          u810 12B0                          u565 1656  
                        u907 14A2                          u917 14DE                          u927 1514  
                        u937 1916                          u947 16D6                          u957 170A  
                        u967 192A                          u887 1366                          u977 15C6  
                        u897 13DA                          u987 15D0                          u997 1606  
                        _max 002A                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1574 1160                         l1746 14B2  
                       l1588 1190                         l1694 13A6                         _ADON 007E10  
                       STR_1 104A                         STR_2 104A                         STR_3 1057  
                       STR_4 104A                         STR_5 104A                         STR_6 104D  
                       STR_7 103E                         STR_8 102D                         u1007 1610  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         _main 12CA  
                       _keys 1001                         fsr2h 000FDA                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT 1028             ?_I2C_Master_Init 000E             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lldiv 15A4  
            __end_of___lwdiv 16D0              __end_of___lwmod 1886                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 1932               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_readADC 18BE              __end_of_initLCD 171C               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 101C                        _array 1024              __end_of_isdigit 190A  
                      _state 0026                        _putch 190A                        tablat 000FF5  
          _LCDinterruptState 0029                        status 000FD8               __CFG_PBADEN$ON 000000  
            __initialization 18BE                 __end_of_main 1522                 __end_of_keys 1012  
             __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 1029                       ??_main 001A  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002  
         ??_I2C_Master_Start 0002                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0004                       _ADRESH 000FC4                       _ADRESL 000FC3  
                     ?_putch 0001                       _SSPADD 000FC8                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000                    ??___lldiv 0009  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 18DC  
               ?_motorStop_0 0001                 ?_motorStop_3 0001                    ??_lcdInst 0003  
                     _printf 105E                    ??_readADC 0003                    ??_initLCD 0004  
               __pdataCOMRAM 002A                    ??_isdigit 0001                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                 __accesstop 0080      __end_of__initialization 18E2                ___rparam_used 000001  
             __pcstackCOMRAM 0001                __end_of_array 1027                __end_of_putch 191E  
              _B_spacingTime 0020           __size_of_lcdNibble 007E                      ??_putch 0003  
                    ?_printf 000D         lcd@LCDinterruptState 0028                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 1622  
                    __Hparam 0000                      __Lparam 0000                      ___lldiv 1522  
                    ___lwdiv 167E                      ___lwmod 1844                 __psmallconst 1000  
                    __pcinit 18BE                      __ramtop 1000                      _lcdInst 191E  
                    __ptext0 12CA                      __ptext1 1886                      __ptext2 105E  
                    __ptext3 190A                      __ptext4 18EC                      __ptext5 1844  
                    __ptext6 167E                      __ptext7 171C                      __ptext8 1766  
                    __ptext9 17B0              __size_of_printf 026C                      _readADC 1886  
                    _initLCD 16D0            __end_of_hexpowers 1024         __size_of_motorStop_0 004A  
       __size_of_motorStop_3 004A                      _dpowers 1012                      _isdigit 18EC  
              ?_motorStart_0 0001                ?_motorStart_3 0001                    _LCD_RIGHT 1028  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
       end_of_initialization 18E2        __end_of_LCD_SIZE_HORZ 102B        __end_of_LCD_SIZE_VERT 102A  
              __Lmediumconst 0000    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                      printf@c 0019  
                    printf@f 000D                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               ??_motorStart_0 0016               ??_motorStart_3 0016  
                  _TRISCbits 000F94                    _TRISDbits 000F95                    _B_counter 0024  
              __pidataCOMRAM 195E               __end_of_printf 12CA          start_initialization 18BE  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002  
   I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000                     ??_printf 0011  
              _analog_result 001E                  __pbssCOMRAM 001C             _I2C_Master_Start 1956  
           _I2C_Master_Write 1944         __end_of_motorStart_0 1844         __end_of_motorStart_3 17FA  
           ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000                    _lcdNibble 15A4  
                   ?___lldiv 0001                     ?___lwdiv 0001                     ?___lwmod 0008  
                   ?_lcdInst 0001                     ?_readADC 0001                     ?_initLCD 0001  
                __smallconst 1000                     ?_isdigit 0001                    _hexpowers 101C  
           ___lwdiv@quotient 0005               __size_of_putch 0014                     _LCD_LEFT 1027  
                   _LATDbits 000F8C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
              ??_motorStop_0 0016                ??_motorStop_3 0016                   _ADCON0bits 000FC2  
                 _ADCON2bits 000FC0                lcdNibble@data 0002                     _B_remain 0022  
                 printf@flag 0015                lcdNibble@temp 0001                   printf@prec 0018  
             _LCD_HORZ_LIMIT 102C                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082             __size_of___lwdiv 0052  
           __size_of___lwmod 0042               readADC@channel 0005                  _isdigit$833 0002  
           __size_of_lcdInst 0014              _I2C_Master_Init 1622             __size_of_readADC 0038  
           __size_of_initLCD 004C              _I2C_Master_Wait 1932              _I2C_Master_Stop 194E  
     __end_of_LCD_HORZ_LIMIT 102D          __end_of_motorStop_0 17B0          __end_of_motorStop_3 1766  
           __size_of_isdigit 001E              ___lwdiv@divisor 0003              ___lwdiv@counter 0007  
                   __ptext10 17FA                     __ptext11 1944                     __ptext12 194E  
                   __ptext13 1956                     __ptext14 1932                     __ptext15 1622  
                   __ptext16 1522                     __ptext17 16D0                     __ptext18 191E  
                   __ptext19 15A4               _LCD_VERT_LIMIT 102B        __size_of_motorStart_0 004A  
      __size_of_motorStart_3 004A                __size_of_main 0258                  ??_lcdNibble 0001  
                  printf@idx 0012                    printf@val 0016  I2C_Master_Write@byteToWrite 0002  
                  putch@data 0003     __end_of_I2C_Master_Start 195E     __end_of_I2C_Master_Write 194E  
                 _INTCONbits 000FF2                 _motorStart_0 17FA                 _motorStart_3 17B0  
     __end_of_LCD_VERT_LIMIT 102C                     isdigit@c 0003                _LCD_SIZE_HORZ 102A  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 1029             ___lldiv@dividend 0001  
                   printf@ap 0013      __end_of_I2C_Master_Init 167E      __end_of_I2C_Master_Wait 1944  
    __end_of_I2C_Master_Stop 1956                  lcdInst@data 0003                  _motorStop_0 1766  
                _motorStop_3 171C             ___lldiv@quotient 0009              ___lwmod@divisor 000A  
            ___lwmod@counter 000C                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
