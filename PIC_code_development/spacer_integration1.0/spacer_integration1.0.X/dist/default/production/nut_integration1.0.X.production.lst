

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 16:10:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  001738                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _max
    71  001738  0004               	dw	4
    72                           
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _keys:
    78                           	opt stack 0
    79  001001  31                 	db	49
    80  001002  32                 	db	50
    81  001003  33                 	db	51
    82  001004  41                 	db	65
    83  001005  34                 	db	52
    84  001006  35                 	db	53
    85  001007  36                 	db	54
    86  001008  42                 	db	66
    87  001009  37                 	db	55
    88  00100A  38                 	db	56
    89  00100B  39                 	db	57
    90  00100C  43                 	db	67
    91  00100D  2A                 	db	42
    92  00100E  30                 	db	48
    93  00100F  23                 	db	35
    94  001010  44                 	db	68
    95  001011  00                 	db	0
    96  001012                     __end_of_keys:
    97                           	opt stack 0
    98  001012                     _dpowers:
    99                           	opt stack 0
   100  001012  0001               	dw	1
   101  001014  000A               	dw	10
   102  001016  0064               	dw	100
   103  001018  03E8               	dw	1000
   104  00101A  2710               	dw	10000
   105  00101C                     __end_of_dpowers:
   106                           	opt stack 0
   107  00101C                     _array:
   108                           	opt stack 0
   109  00101C  31                 	db	49
   110  00101D  30                 	db	48
   111  00101E  00                 	db	0
   112  00101F                     __end_of_array:
   113                           	opt stack 0
   114  00101F                     _LCD_LEFT:
   115                           	opt stack 0
   116  00101F  00                 	db	0
   117  001020                     __end_of_LCD_LEFT:
   118                           	opt stack 0
   119  001020                     _LCD_RIGHT:
   120                           	opt stack 0
   121  001020  01                 	db	1
   122  001021                     __end_of_LCD_RIGHT:
   123                           	opt stack 0
   124  001021                     _LCD_SIZE_VERT:
   125                           	opt stack 0
   126  001021  02                 	db	2
   127  001022                     __end_of_LCD_SIZE_VERT:
   128                           	opt stack 0
   129  001022                     _LCD_SIZE_HORZ:
   130                           	opt stack 0
   131  001022  10                 	db	16
   132  001023                     __end_of_LCD_SIZE_HORZ:
   133                           	opt stack 0
   134  001023                     _LCD_VERT_LIMIT:
   135                           	opt stack 0
   136  001023  02                 	db	2
   137  001024                     __end_of_LCD_VERT_LIMIT:
   138                           	opt stack 0
   139  001024                     _LCD_HORZ_LIMIT:
   140                           	opt stack 0
   141  001024  28                 	db	40
   142  001025                     __end_of_LCD_HORZ_LIMIT:
   143                           	opt stack 0
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON2bits	set	4037
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _TRISCbits	set	3988
   151  0000                     _SSPCON1bits	set	4038
   152  0000                     _INTCONbits	set	4082
   153  0000                     _TRISDbits	set	3989
   154  0000                     _LATDbits	set	3980
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADRESL	set	4035
   157  0000                     _ADCON0bits	set	4034
   158  0000                     _ADCON2bits	set	4032
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON0	set	4034
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _LATE	set	3981
   167  0000                     _LATD	set	3980
   168  0000                     _LATC	set	3979
   169  0000                     _LATB	set	3978
   170  0000                     _LATA	set	3977
   171  0000                     _OSCCON	set	4051
   172  0000                     _ADON	set	32272
   173  001025                     STR_7:
   174  001025  72                 	db	114	;'r'
   175  001026  65                 	db	101	;'e'
   176  001027  6D                 	db	109	;'m'
   177  001028  61                 	db	97	;'a'
   178  001029  69                 	db	105	;'i'
   179  00102A  6E                 	db	110	;'n'
   180  00102B  20                 	db	32
   181  00102C  4E                 	db	78	;'N'
   182  00102D  75                 	db	117	;'u'
   183  00102E  74                 	db	116	;'t'
   184  00102F  73                 	db	115	;'s'
   185  001030  3A                 	db	58	;':'
   186  001031  25                 	db	37
   187  001032  64                 	db	100	;'d'
   188  001033  00                 	db	0
   189  001034                     STR_3:
   190  001034  64                 	db	100	;'d'
   191  001035  6F                 	db	111	;'o'
   192  001036  6E                 	db	110	;'n'
   193  001037  65                 	db	101	;'e'
   194  001038  00                 	db	0
   195  0000                     
   196                           ; #config settings
   197  001039  00                 	db	0	; dummy byte at the end
   198  0000                     
   199                           	psect	cinit
   200  0016B6                     __pcinit:
   201                           	opt stack 0
   202  0016B6                     start_initialization:
   203                           	opt stack 0
   204  0016B6                     __initialization:
   205                           	opt stack 0
   206                           
   207                           ; Initialize objects allocated to COMRAM (2 bytes)
   208                           ; load TBLPTR registers with __pidataCOMRAM
   209  0016B6  0E38               	movlw	low __pidataCOMRAM
   210  0016B8  6EF6               	movwf	tblptrl,c
   211  0016BA  0E17               	movlw	high __pidataCOMRAM
   212  0016BC  6EF7               	movwf	tblptrh,c
   213  0016BE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   214  0016C0  6EF8               	movwf	tblptru,c
   215  0016C2  0009               	tblrd		*+	;fetch initializer
   216  0016C4  CFF5 F029          	movff	tablat,__pdataCOMRAM
   217  0016C8  0009               	tblrd		*+	;fetch initializer
   218  0016CA  CFF5 F02A          	movff	tablat,__pdataCOMRAM+1
   219                           
   220                           ; Clear objects allocated to COMRAM (14 bytes)
   221  0016CE  EE00  F01B         	lfsr	0,__pbssCOMRAM
   222  0016D2  0E0E               	movlw	14
   223  0016D4                     clear_0:
   224  0016D4  6AEE               	clrf	postinc0,c
   225  0016D6  06E8               	decf	wreg,f,c
   226  0016D8  E1FD               	bnz	clear_0
   227  0016DA                     end_of_initialization:
   228                           	opt stack 0
   229  0016DA                     __end_of__initialization:
   230                           	opt stack 0
   231  0016DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   232  0016DC  6EF8               	movwf	tblptru,c
   233  0016DE  0100               	movlb	0
   234  0016E0  EF1D  F008         	goto	_main	;jump to C main() function
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	bssCOMRAM
   243  00001B                     __pbssCOMRAM:
   244                           	opt stack 0
   245  00001B                     _i:
   246                           	opt stack 0
   247  00001B                     	ds	2
   248  00001D                     _analog_result:
   249                           	opt stack 0
   250  00001D                     	ds	2
   251  00001F                     _N_spacingTime:
   252                           	opt stack 0
   253  00001F                     	ds	2
   254  000021                     _N_remain:
   255                           	opt stack 0
   256  000021                     	ds	2
   257  000023                     _N_counter:
   258                           	opt stack 0
   259  000023                     	ds	2
   260  000025                     _state:
   261                           	opt stack 0
   262  000025                     	ds	2
   263  000027                     lcd@LCDinterruptState:
   264                           	opt stack 0
   265  000027                     	ds	1
   266  000028                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	dataCOMRAM
   275  000029                     __pdataCOMRAM:
   276                           	opt stack 0
   277  000029                     _max:
   278                           	opt stack 0
   279  000029                     	ds	2
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	cstackCOMRAM
   288  000001                     __pcstackCOMRAM:
   289                           	opt stack 0
   290  000001                     ??_I2C_Master_Wait:
   291  000001                     ?_readADC:
   292                           	opt stack 0
   293  000001                     ?___lwdiv:
   294                           	opt stack 0
   295  000001                     ?___lldiv:
   296                           	opt stack 0
   297  000001                     lcdNibble@temp:
   298                           	opt stack 0
   299  000001                     ___lwdiv@dividend:
   300                           	opt stack 0
   301  000001                     ___lldiv@dividend:
   302                           	opt stack 0
   303                           
   304                           ; 4 bytes @ 0x0
   305  000001                     	ds	1
   306  000002                     lcdNibble@data:
   307                           	opt stack 0
   308  000002                     I2C_Master_Write@byteToWrite:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x1
   312  000002                     	ds	1
   313  000003                     ??_readADC:
   314  000003                     lcdInst@data:
   315                           	opt stack 0
   316  000003                     putch@data:
   317                           	opt stack 0
   318  000003                     ___lwdiv@divisor:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x2
   322  000003                     	ds	1
   323  000004                     ??_initLCD:
   324  000004                     
   325                           ; 1 bytes @ 0x3
   326  000004                     	ds	1
   327  000005                     readADC@channel:
   328                           	opt stack 0
   329  000005                     ___lwdiv@quotient:
   330                           	opt stack 0
   331  000005                     ___lldiv@divisor:
   332                           	opt stack 0
   333                           
   334                           ; 4 bytes @ 0x4
   335  000005                     	ds	2
   336  000007                     ___lwdiv@counter:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x6
   340  000007                     	ds	1
   341  000008                     ?___lwmod:
   342                           	opt stack 0
   343  000008                     ___lwmod@dividend:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x7
   347  000008                     	ds	1
   348  000009                     ___lldiv@quotient:
   349                           	opt stack 0
   350                           
   351                           ; 4 bytes @ 0x8
   352  000009                     	ds	1
   353  00000A                     ___lwmod@divisor:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x9
   357  00000A                     	ds	2
   358  00000C                     ___lwmod@counter:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0xB
   362  00000C                     	ds	1
   363  00000D                     ?_printf:
   364                           	opt stack 0
   365  00000D                     ___lldiv@counter:
   366                           	opt stack 0
   367  00000D                     printf@f:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0xC
   371  00000D                     	ds	1
   372  00000E                     I2C_Master_Init@clockFreq:
   373                           	opt stack 0
   374                           
   375                           ; 4 bytes @ 0xD
   376  00000E                     	ds	3
   377  000011                     ??_printf:
   378                           
   379                           ; 1 bytes @ 0x10
   380  000011                     	ds	1
   381  000012                     ??_I2C_Master_Init:
   382  000012                     printf@ap:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x11
   386  000012                     	ds	2
   387  000014                     printf@flag:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x13
   391  000014                     	ds	1
   392  000015                     printf@prec:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x14
   396  000015                     	ds	1
   397  000016                     printf@val:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x15
   401  000016                     	ds	2
   402  000018                     printf@c:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x17
   406  000018                     	ds	1
   407  000019                     ??_main:
   408                           
   409                           ; 1 bytes @ 0x18
   410  000019                     	ds	2
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 63 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;		None
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   441 ;;Total ram usage:        2 bytes
   442 ;; Hardware stack levels required when called:    3
   443 ;; This function calls:
   444 ;;		_I2C_Master_Init
   445 ;;		_I2C_Master_Start
   446 ;;		_I2C_Master_Stop
   447 ;;		_I2C_Master_Write
   448 ;;		_initLCD
   449 ;;		_lcdInst
   450 ;;		_motorStart_3
   451 ;;		_motorStop_3
   452 ;;		_printf
   453 ;;		_readADC
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text0
   460  00103A                     __ptext0:
   461                           	opt stack 0
   462  00103A                     _main:
   463                           	opt stack 28
   464                           
   465                           ;main.c: 66: OSCCON = 0xF2;
   466                           
   467                           ;incstack = 0
   468  00103A  0EF2               	movlw	242
   469  00103C  6ED3               	movwf	4051,c	;volatile
   470                           
   471                           ;main.c: 71: LATA = 0x00;
   472  00103E  0E00               	movlw	0
   473  001040  6E89               	movwf	3977,c	;volatile
   474                           
   475                           ;main.c: 72: LATB = 0x00;
   476  001042  0E00               	movlw	0
   477  001044  6E8A               	movwf	3978,c	;volatile
   478                           
   479                           ;main.c: 73: LATC = 0x00;
   480  001046  0E00               	movlw	0
   481  001048  6E8B               	movwf	3979,c	;volatile
   482                           
   483                           ;main.c: 74: LATD = 0x00;
   484  00104A  0E00               	movlw	0
   485  00104C  6E8C               	movwf	3980,c	;volatile
   486                           
   487                           ;main.c: 75: LATE = 0x00;
   488  00104E  0E00               	movlw	0
   489  001050  6E8D               	movwf	3981,c	;volatile
   490                           
   491                           ;main.c: 79: TRISA = 0xFF;
   492  001052  6892               	setf	3986,c	;volatile
   493                           
   494                           ;main.c: 80: TRISB = 0xFF;
   495  001054  6893               	setf	3987,c	;volatile
   496                           
   497                           ;main.c: 81: TRISC = 0x00;
   498  001056  0E00               	movlw	0
   499  001058  6E94               	movwf	3988,c	;volatile
   500                           
   501                           ;main.c: 85: TRISD = 0x00;
   502  00105A  0E00               	movlw	0
   503  00105C  6E95               	movwf	3989,c	;volatile
   504                           
   505                           ;main.c: 86: TRISE = 0x00;
   506  00105E  0E00               	movlw	0
   507  001060  6E96               	movwf	3990,c	;volatile
   508                           
   509                           ;main.c: 89: ADCON0 = 0x00;
   510  001062  0E00               	movlw	0
   511  001064  6EC2               	movwf	4034,c	;volatile
   512                           
   513                           ;main.c: 90: ADCON1 = 0x0B;
   514  001066  0E0B               	movlw	11
   515  001068  6EC1               	movwf	4033,c	;volatile
   516                           
   517                           ;main.c: 91: ADCON2bits.ADFM = 1;
   518  00106A  8EC0               	bsf	4032,7,c	;volatile
   519                           
   520                           ;main.c: 95: initLCD();
   521  00106C  ECAE  F00A         	call	_initLCD	;wreg free
   522                           
   523                           ;main.c: 99: I2C_Master_Init(100000);
   524  001070  0EA0               	movlw	160
   525  001072  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   526  001074  0E86               	movlw	134
   527  001076  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   528  001078  0E01               	movlw	1
   529  00107A  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   530  00107C  0E00               	movlw	0
   531  00107E  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   532  001080  EC57  F00A         	call	_I2C_Master_Init	;wreg free
   533                           
   534                           ;main.c: 100: I2C_Master_Start();
   535  001084  EC98  F00B         	call	_I2C_Master_Start	;wreg free
   536                           
   537                           ;main.c: 103: I2C_Master_Write(0b00010000);
   538  001088  0E00               	movlw	0
   539  00108A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   540  00108C  0E10               	movlw	16
   541  00108E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   542  001090  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
   543                           
   544                           ;main.c: 104: I2C_Master_Stop();
   545  001094  EC94  F00B         	call	_I2C_Master_Stop	;wreg free
   546                           
   547                           ;main.c: 106: I2C_Master_Start();
   548  001098  EC98  F00B         	call	_I2C_Master_Start	;wreg free
   549                           
   550                           ;main.c: 107: I2C_Master_Write(0b00010000);
   551  00109C  0E00               	movlw	0
   552  00109E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   553  0010A0  0E10               	movlw	16
   554  0010A2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   555  0010A4  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
   556                           
   557                           ;main.c: 108: I2C_Master_Write('1');
   558  0010A8  0E00               	movlw	0
   559  0010AA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   560  0010AC  0E31               	movlw	49
   561  0010AE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   562  0010B0  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
   563                           
   564                           ;main.c: 109: I2C_Master_Stop();
   565  0010B4  EC94  F00B         	call	_I2C_Master_Stop	;wreg free
   566                           
   567                           ;main.c: 119: initLCD();
   568  0010B8  ECAE  F00A         	call	_initLCD	;wreg free
   569                           
   570                           ;main.c: 120: printf("%d",N_counter);
   571  0010BC  0E31               	movlw	low (STR_7+12)
   572  0010BE  6E0D               	movwf	printf@f,c
   573  0010C0  0E10               	movlw	high (STR_7+12)
   574  0010C2  6E0E               	movwf	printf@f+1,c
   575  0010C4  C023  F00F         	movff	_N_counter,?_printf+2
   576  0010C8  C024  F010         	movff	_N_counter+1,?_printf+3
   577  0010CC  EC48  F009         	call	_printf	;wreg free
   578                           
   579                           ;main.c: 121: _delay((unsigned long)((100)*(40000000/4000.0)));
   580  0010D0  0E06               	movlw	6
   581  0010D2  6E1A               	movwf	(??_main+1)& (0+255),c
   582  0010D4  0E13               	movlw	19
   583  0010D6  6E19               	movwf	??_main& (0+255),c
   584  0010D8  0EAE               	movlw	174
   585  0010DA                     u647:
   586  0010DA  2EE8               	decfsz	wreg,f,c
   587  0010DC  D7FE               	bra	u647
   588  0010DE  2E19               	decfsz	??_main& (0+255),f,c
   589  0010E0  D7FC               	bra	u647
   590  0010E2  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   591  0010E4  D7FA               	bra	u647
   592                           
   593                           ;main.c: 122: motorStart_3();
   594  0010E6  ECF9  F00A         	call	_motorStart_3	;wreg free
   595  0010EA                     l1508:
   596                           
   597                           ;main.c: 130: if (N_counter >= max){
   598  0010EA  5029               	movf	_max,w,c
   599  0010EC  5C23               	subwf	_N_counter,w,c
   600  0010EE  5024               	movf	_N_counter+1,w,c
   601  0010F0  0A80               	xorlw	128
   602  0010F2  6E19               	movwf	??_main& (0+255),c
   603  0010F4  502A               	movf	_max+1,w,c
   604  0010F6  0A80               	xorlw	128
   605  0010F8  5819               	subwfb	??_main& (0+255),w,c
   606  0010FA  A0D8               	btfss	status,0,c
   607  0010FC  D003               	goto	l100
   608                           
   609                           ;main.c: 131: motorStop_3();
   610  0010FE  ECD4  F00A         	call	_motorStop_3	;wreg free
   611                           
   612                           ;main.c: 132: break;
   613  001102  D018               	goto	l101
   614  001104                     l100:
   615                           
   616                           ;main.c: 133: }
   617                           ;main.c: 134: if (readADC(3)<=250 ){
   618  001104  0E03               	movlw	3
   619  001106  EC3F  F00B         	call	_readADC
   620  00110A  5002               	movf	?_readADC+1,w,c
   621  00110C  E1EE               	bnz	l1508
   622  00110E  0EFB               	movlw	251
   623  001110  5C01               	subwf	?_readADC,w,c
   624  001112  B0D8               	btfsc	status,0,c
   625  001114  D7EA               	goto	l99
   626                           
   627                           ;main.c: 136: N_counter ++;
   628  001116  4A23               	infsnz	_N_counter,f,c
   629  001118  2A24               	incf	_N_counter+1,f,c
   630                           
   631                           ;main.c: 137: initLCD();
   632  00111A  ECAE  F00A         	call	_initLCD	;wreg free
   633                           
   634                           ;main.c: 138: printf("%d", N_counter);
   635  00111E  0E31               	movlw	low (STR_7+12)
   636  001120  6E0D               	movwf	printf@f,c
   637  001122  0E10               	movlw	high (STR_7+12)
   638  001124  6E0E               	movwf	printf@f+1,c
   639  001126  C023  F00F         	movff	_N_counter,?_printf+2
   640  00112A  C024  F010         	movff	_N_counter+1,?_printf+3
   641  00112E  EC48  F009         	call	_printf	;wreg free
   642  001132  D7DB               	goto	l99
   643  001134                     l101:
   644                           
   645                           ;main.c: 140: }
   646                           ;main.c: 143: }
   647                           ;main.c: 146: initLCD();
   648  001134  ECAE  F00A         	call	_initLCD	;wreg free
   649                           
   650                           ;main.c: 147: printf("done");
   651  001138  0E34               	movlw	low STR_3
   652  00113A  6E0D               	movwf	printf@f,c
   653  00113C  0E10               	movlw	high STR_3
   654  00113E  6E0E               	movwf	printf@f+1,c
   655  001140  EC48  F009         	call	_printf	;wreg free
   656                           
   657                           ;main.c: 148: _delay((unsigned long)((800)*(40000000/4000.0)));
   658  001144  0E29               	movlw	41
   659  001146  6E1A               	movwf	(??_main+1)& (0+255),c
   660  001148  0E96               	movlw	150
   661  00114A  6E19               	movwf	??_main& (0+255),c
   662  00114C  0E7F               	movlw	127
   663  00114E                     u657:
   664  00114E  2EE8               	decfsz	wreg,f,c
   665  001150  D7FE               	bra	u657
   666  001152  2E19               	decfsz	??_main& (0+255),f,c
   667  001154  D7FC               	bra	u657
   668  001156  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   669  001158  D7FA               	bra	u657
   670  00115A  F000               	nop	
   671                           
   672                           ;main.c: 153: I2C_Master_Init(100000);
   673  00115C  0EA0               	movlw	160
   674  00115E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   675  001160  0E86               	movlw	134
   676  001162  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   677  001164  0E01               	movlw	1
   678  001166  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   679  001168  0E00               	movlw	0
   680  00116A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   681  00116C  EC57  F00A         	call	_I2C_Master_Init	;wreg free
   682                           
   683                           ;main.c: 154: I2C_Master_Start();
   684  001170  EC98  F00B         	call	_I2C_Master_Start	;wreg free
   685                           
   686                           ;main.c: 155: I2C_Master_Write(0b00010000);
   687  001174  0E00               	movlw	0
   688  001176  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   689  001178  0E10               	movlw	16
   690  00117A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   691  00117C  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
   692                           
   693                           ;main.c: 156: I2C_Master_Stop();
   694  001180  EC94  F00B         	call	_I2C_Master_Stop	;wreg free
   695                           
   696                           ;main.c: 160: I2C_Master_Start();
   697  001184  EC98  F00B         	call	_I2C_Master_Start	;wreg free
   698                           
   699                           ;main.c: 161: I2C_Master_Write(0b00010000);
   700  001188  0E00               	movlw	0
   701  00118A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   702  00118C  0E10               	movlw	16
   703  00118E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   704  001190  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
   705                           
   706                           ;main.c: 162: I2C_Master_Write('2');
   707  001194  0E00               	movlw	0
   708  001196  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   709  001198  0E32               	movlw	50
   710  00119A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   711  00119C  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
   712                           
   713                           ;main.c: 163: I2C_Master_Stop();
   714  0011A0  EC94  F00B         	call	_I2C_Master_Stop	;wreg free
   715                           
   716                           ;main.c: 166: initLCD();
   717  0011A4  ECAE  F00A         	call	_initLCD	;wreg free
   718                           
   719                           ;main.c: 167: motorStart_3();
   720  0011A8  ECF9  F00A         	call	_motorStart_3	;wreg free
   721                           
   722                           ;main.c: 169: N_spacingTime = 0;
   723  0011AC  0E00               	movlw	0
   724  0011AE  6E20               	movwf	_N_spacingTime+1,c
   725  0011B0  0E00               	movlw	0
   726  0011B2  6E1F               	movwf	_N_spacingTime,c
   727                           
   728                           ;main.c: 170: initLCD();
   729  0011B4  ECAE  F00A         	call	_initLCD	;wreg free
   730                           
   731                           ;main.c: 171: printf("%d", N_remain);
   732  0011B8  0E31               	movlw	low (STR_7+12)
   733  0011BA  6E0D               	movwf	printf@f,c
   734  0011BC  0E10               	movlw	high (STR_7+12)
   735  0011BE  6E0E               	movwf	printf@f+1,c
   736  0011C0  C021  F00F         	movff	_N_remain,?_printf+2
   737  0011C4  C022  F010         	movff	_N_remain+1,?_printf+3
   738  0011C8  EC48  F009         	call	_printf	;wreg free
   739  0011CC                     
   740                           ;main.c: 174: if (N_spacingTime >= 30000){
   741  0011CC  BE20               	btfsc	_N_spacingTime+1,7,c
   742  0011CE  D009               	goto	l105
   743  0011D0  0E30               	movlw	48
   744  0011D2  5C1F               	subwf	_N_spacingTime,w,c
   745  0011D4  0E75               	movlw	117
   746  0011D6  5820               	subwfb	_N_spacingTime+1,w,c
   747  0011D8  A0D8               	btfss	status,0,c
   748  0011DA  D003               	goto	l105
   749                           
   750                           ;main.c: 175: motorStop_3();
   751  0011DC  ECD4  F00A         	call	_motorStop_3	;wreg free
   752                           
   753                           ;main.c: 176: break;
   754  0011E0  D03F               	goto	l106
   755  0011E2                     l105:
   756                           
   757                           ;main.c: 177: }
   758                           ;main.c: 179: if (readADC(3)<=250 ){
   759  0011E2  0E03               	movlw	3
   760  0011E4  EC3F  F00B         	call	_readADC
   761  0011E8  5002               	movf	?_readADC+1,w,c
   762  0011EA  E11D               	bnz	l1568
   763  0011EC  0EFB               	movlw	251
   764  0011EE  5C01               	subwf	?_readADC,w,c
   765  0011F0  B0D8               	btfsc	status,0,c
   766  0011F2  D019               	goto	l107
   767                           
   768                           ;main.c: 181: N_remain ++;
   769  0011F4  4A21               	infsnz	_N_remain,f,c
   770  0011F6  2A22               	incf	_N_remain+1,f,c
   771                           
   772                           ;main.c: 182: initLCD();
   773  0011F8  ECAE  F00A         	call	_initLCD	;wreg free
   774                           
   775                           ;main.c: 183: printf("%d", N_remain);
   776  0011FC  0E31               	movlw	low (STR_7+12)
   777  0011FE  6E0D               	movwf	printf@f,c
   778  001200  0E10               	movlw	high (STR_7+12)
   779  001202  6E0E               	movwf	printf@f+1,c
   780  001204  C021  F00F         	movff	_N_remain,?_printf+2
   781  001208  C022  F010         	movff	_N_remain+1,?_printf+3
   782  00120C  EC48  F009         	call	_printf	;wreg free
   783                           
   784                           ;main.c: 184: _delay((unsigned long)((1)*(40000000/4000.0)));
   785  001210  0E0D               	movlw	13
   786  001212  6E19               	movwf	??_main& (0+255),c
   787  001214  0EFC               	movlw	252
   788  001216                     u667:
   789  001216  2EE8               	decfsz	wreg,f,c
   790  001218  D7FE               	bra	u667
   791  00121A  2E19               	decfsz	??_main& (0+255),f,c
   792  00121C  D7FC               	bra	u667
   793                           
   794                           ;main.c: 185: N_spacingTime = 0;
   795  00121E  0E00               	movlw	0
   796  001220  6E20               	movwf	_N_spacingTime+1,c
   797  001222  0E00               	movlw	0
   798  001224  6E1F               	movwf	_N_spacingTime,c
   799  001226                     l107:
   800  001226                     l1568:
   801                           
   802                           ;main.c: 187: }
   803                           ;main.c: 194: lcdInst(0xC0);;
   804  001226  0EC0               	movlw	192
   805  001228  EC7C  F00B         	call	_lcdInst
   806                           
   807                           ;main.c: 195: printf("%d",N_spacingTime);
   808  00122C  0E31               	movlw	low (STR_7+12)
   809  00122E  6E0D               	movwf	printf@f,c
   810  001230  0E10               	movlw	high (STR_7+12)
   811  001232  6E0E               	movwf	printf@f+1,c
   812  001234  C01F  F00F         	movff	_N_spacingTime,?_printf+2
   813  001238  C020  F010         	movff	_N_spacingTime+1,?_printf+3
   814  00123C  EC48  F009         	call	_printf	;wreg free
   815                           
   816                           ;main.c: 197: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   817  001240  0E80               	movlw	128
   818  001242  EC7C  F00B         	call	_lcdInst
   819  001246  0E41               	movlw	65
   820  001248  6E19               	movwf	??_main& (0+255),c
   821  00124A  0EEE               	movlw	238
   822  00124C                     u677:
   823  00124C  2EE8               	decfsz	wreg,f,c
   824  00124E  D7FE               	bra	u677
   825  001250  2E19               	decfsz	??_main& (0+255),f,c
   826  001252  D7FC               	bra	u677
   827  001254  D000               	nop2	
   828                           
   829                           ;main.c: 200: N_spacingTime +=200;
   830  001256  0EC8               	movlw	200
   831  001258  261F               	addwf	_N_spacingTime,f,c
   832  00125A  0E00               	movlw	0
   833  00125C  2220               	addwfc	_N_spacingTime+1,f,c
   834  00125E  D7B6               	goto	l104
   835  001260                     l106:
   836                           
   837                           ;main.c: 208: initLCD();
   838                           
   839                           ;main.c: 203: }
   840                           ;main.c: 207: while(1){
   841  001260  ECAE  F00A         	call	_initLCD	;wreg free
   842                           
   843                           ;main.c: 209: printf("remain Nuts:%d",N_remain);
   844  001264  0E25               	movlw	low STR_7
   845  001266  6E0D               	movwf	printf@f,c
   846  001268  0E10               	movlw	high STR_7
   847  00126A  6E0E               	movwf	printf@f+1,c
   848  00126C  C021  F00F         	movff	_N_remain,?_printf+2
   849  001270  C022  F010         	movff	_N_remain+1,?_printf+3
   850  001274  EC48  F009         	call	_printf	;wreg free
   851                           
   852                           ;main.c: 210: _delay((unsigned long)((1000)*(40000000/4000.0)));
   853  001278  0E33               	movlw	51
   854  00127A  6E1A               	movwf	(??_main+1)& (0+255),c
   855  00127C  0EBB               	movlw	187
   856  00127E  6E19               	movwf	??_main& (0+255),c
   857  001280  0EE0               	movlw	224
   858  001282                     u687:
   859  001282  2EE8               	decfsz	wreg,f,c
   860  001284  D7FE               	bra	u687
   861  001286  2E19               	decfsz	??_main& (0+255),f,c
   862  001288  D7FC               	bra	u687
   863  00128A  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   864  00128C  D7FA               	bra	u687
   865  00128E  D7E8               	goto	l106
   866  001290                     __end_of_main:
   867                           	opt stack 0
   868                           tblptru	equ	0xFF8
   869                           tblptrh	equ	0xFF7
   870                           tblptrl	equ	0xFF6
   871                           tablat	equ	0xFF5
   872                           postinc0	equ	0xFEE
   873                           wreg	equ	0xFE8
   874                           status	equ	0xFD8
   875                           
   876 ;; *************** function _readADC *****************
   877 ;; Defined at:
   878 ;;		line 215 in file "main.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  channel         1    wreg     unsigned char 
   881 ;; Auto vars:     Size  Location     Type
   882 ;;  channel         1    4[COMRAM] unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  2    0[COMRAM] unsigned short 
   885 ;; Registers used:
   886 ;;		wreg, status,2, status,0
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   892 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   893 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;Total ram usage:        5 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; This function calls:
   899 ;;		Nothing
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text1
   906  00167E                     __ptext1:
   907                           	opt stack 0
   908  00167E                     _readADC:
   909                           	opt stack 30
   910                           
   911                           ;incstack = 0
   912                           ;readADC@channel stored from wreg
   913  00167E  6E05               	movwf	readADC@channel,c
   914                           
   915                           ;main.c: 224: ADCON0 = (channel & 0x0F) << 2;
   916  001680  C005  F003         	movff	readADC@channel,??_readADC
   917  001684  0E0F               	movlw	15
   918  001686  1603               	andwf	??_readADC,f,c
   919  001688  90D8               	bcf	status,0,c
   920  00168A  3603               	rlcf	??_readADC,f,c
   921  00168C  90D8               	bcf	status,0,c
   922  00168E  3403               	rlcf	??_readADC,w,c
   923  001690  6EC2               	movwf	4034,c	;volatile
   924                           
   925                           ;main.c: 225: ADON = 1;
   926  001692  80C2               	bsf	4034,0,c	;volatile
   927                           
   928                           ;main.c: 226: ADCON0bits.GO = 1;
   929  001694  82C2               	bsf	4034,1,c	;volatile
   930  001696  B2C2               	btfsc	4034,1,c	;volatile
   931  001698  D7FE               	goto	l116
   932                           
   933                           ;main.c: 228: analog_result = ADRESL + (ADRESH*256);
   934  00169A  50C4               	movf	4036,w,c	;volatile
   935  00169C  6E04               	movwf	(??_readADC+1)& (0+255),c
   936  00169E  6A03               	clrf	??_readADC& (0+255),c
   937  0016A0  50C3               	movf	4035,w,c	;volatile
   938  0016A2  2403               	addwf	??_readADC,w,c
   939  0016A4  6E1D               	movwf	_analog_result,c
   940  0016A6  0E00               	movlw	0
   941  0016A8  2004               	addwfc	??_readADC+1,w,c
   942  0016AA  6E1E               	movwf	_analog_result+1,c
   943                           
   944                           ;main.c: 229: return analog_result;
   945  0016AC  C01D  F001         	movff	_analog_result,?_readADC
   946  0016B0  C01E  F002         	movff	_analog_result+1,?_readADC+1
   947  0016B4  0012               	return	
   948  0016B6                     __end_of_readADC:
   949                           	opt stack 0
   950                           tblptru	equ	0xFF8
   951                           tblptrh	equ	0xFF7
   952                           tblptrl	equ	0xFF6
   953                           tablat	equ	0xFF5
   954                           postinc0	equ	0xFEE
   955                           wreg	equ	0xFE8
   956                           status	equ	0xFD8
   957                           
   958 ;; *************** function _printf *****************
   959 ;; Defined at:
   960 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;  f               2   12[COMRAM] PTR const unsigned char 
   963 ;;		 -> STR_7(15), STR_6(3), STR_5(3), STR_4(3), 
   964 ;;		 -> STR_3(5), STR_2(3), STR_1(3), 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  tmpval          4    0        struct .
   967 ;;  cp              3    0        PTR const unsigned char 
   968 ;;  val             2   21[COMRAM] unsigned int 
   969 ;;  ap              2   17[COMRAM] PTR void [1]
   970 ;;		 -> ?_printf(2), 
   971 ;;  len             2    0        unsigned int 
   972 ;;  c               1   23[COMRAM] char 
   973 ;;  prec            1   20[COMRAM] char 
   974 ;;  flag            1   19[COMRAM] unsigned char 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  2   12[COMRAM] int 
   977 ;; Registers used:
   978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;Total ram usage:       12 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:    2
   991 ;; This function calls:
   992 ;;		___lwdiv
   993 ;;		___lwmod
   994 ;;		_putch
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text2
  1001  001290                     __ptext2:
  1002                           	opt stack 0
  1003  001290                     _printf:
  1004                           	opt stack 28
  1005                           
  1006                           ;doprnt.c: 466: va_list ap;
  1007                           ;doprnt.c: 499: signed char c;
  1008                           ;doprnt.c: 506: signed char prec;
  1009                           ;doprnt.c: 508: unsigned char flag;
  1010                           ;doprnt.c: 523: union {
  1011                           ;doprnt.c: 524: unsigned long vd;
  1012                           ;doprnt.c: 525: double integ;
  1013                           ;doprnt.c: 526: } tmpval;
  1014                           ;doprnt.c: 528: unsigned int val;
  1015                           ;doprnt.c: 529: unsigned len;
  1016                           ;doprnt.c: 530: const char * cp;
  1017                           ;doprnt.c: 533: *ap = __va_start();
  1018                           
  1019                           ;incstack = 0
  1020  001290  0E0F               	movlw	low (?_printf+2)
  1021  001292  6E12               	movwf	printf@ap,c
  1022  001294  0E00               	movlw	high (?_printf+2)
  1023  001296  6E13               	movwf	printf@ap+1,c
  1024                           
  1025                           ;doprnt.c: 536: while(c = *f++) {
  1026  001298  D07D               	goto	u570
  1027  00129A                     
  1028                           ;doprnt.c: 538: if(c != '%')
  1029  00129A  0E25               	movlw	37
  1030  00129C  1818               	xorwf	printf@c,w,c
  1031  00129E  B4D8               	btfsc	status,2,c
  1032  0012A0  D004               	goto	l265
  1033                           
  1034                           ;doprnt.c: 540: {
  1035                           ;doprnt.c: 541: (putch(c) );
  1036  0012A2  5018               	movf	printf@c,w,c
  1037  0012A4  EC72  F00B         	call	_putch
  1038                           
  1039                           ;doprnt.c: 542: continue;
  1040  0012A8  D075               	goto	u570
  1041  0012AA                     l265:
  1042                           
  1043                           ;doprnt.c: 543: }
  1044                           ;doprnt.c: 548: flag = 0;
  1045  0012AA  0E00               	movlw	0
  1046  0012AC  6E14               	movwf	printf@flag,c
  1047                           
  1048                           ;doprnt.c: 822: }
  1049                           
  1050                           ;doprnt.c: 813: continue;
  1051                           
  1052                           ;doprnt.c: 802: default:
  1053                           
  1054                           ;doprnt.c: 698: case 'i':
  1055                           ;doprnt.c: 699: break;
  1056                           
  1057                           ;doprnt.c: 697: case 'd':
  1058                           
  1059                           ;doprnt.c: 638: goto alldone;
  1060                           
  1061                           ;doprnt.c: 637: case 0:
  1062                           
  1063                           ;doprnt.c: 635: switch(c = *f++) {
  1064  0012AE  C00D  FFF6         	movff	printf@f,tblptrl
  1065  0012B2  C00E  FFF7         	movff	printf@f+1,tblptrh
  1066  0012B6  4A0D               	infsnz	printf@f,f,c
  1067  0012B8  2A0E               	incf	printf@f+1,f,c
  1068  0012BA                     	if	0	;tblptru may be non-zero
  1069  0012BA                     	endif
  1070  0012BA                     	if	0	;tblptru may be non-zero
  1071  0012BA                     	endif
  1072  0012BA  0008               	tblrd		*
  1073  0012BC  CFF5 F018          	movff	tablat,printf@c
  1074  0012C0  5018               	movf	printf@c,w,c
  1075                           
  1076                           ; Switch size 1, requested type "space"
  1077                           ; Number of cases is 3, Range of values is 0 to 105
  1078                           ; switch strategies available:
  1079                           ; Name         Instructions Cycles
  1080                           ; simple_byte           10     6 (average)
  1081                           ;	Chosen strategy is simple_byte
  1082  0012C2  0A00               	xorlw	0	; case 0
  1083  0012C4  B4D8               	btfsc	status,2,c
  1084  0012C6  0012               	return	
  1085  0012C8  0A64               	xorlw	100	; case 100
  1086  0012CA  B4D8               	btfsc	status,2,c
  1087  0012CC  D003               	goto	l271
  1088  0012CE  0A0D               	xorlw	13	; case 105
  1089  0012D0  A4D8               	btfss	status,2,c
  1090  0012D2  D060               	goto	u570
  1091  0012D4                     l271:
  1092                           
  1093                           ;doprnt.c: 1253: {
  1094                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1095  0012D4  C012  FFD9         	movff	printf@ap,fsr2l
  1096  0012D8  C013  FFDA         	movff	printf@ap+1,fsr2h
  1097  0012DC  CFDE F016          	movff	postinc2,printf@val
  1098  0012E0  CFDD F017          	movff	postdec2,printf@val+1
  1099  0012E4  0E02               	movlw	2
  1100  0012E6  2612               	addwf	printf@ap,f,c
  1101  0012E8  0E00               	movlw	0
  1102  0012EA  2213               	addwfc	printf@ap+1,f,c
  1103                           
  1104                           ;doprnt.c: 1261: if((int)val < 0) {
  1105  0012EC  AE17               	btfss	printf@val+1,7,c
  1106  0012EE  D006               	goto	l273
  1107                           
  1108                           ;doprnt.c: 1262: flag |= 0x03;
  1109  0012F0  0E03               	movlw	3
  1110  0012F2  1214               	iorwf	printf@flag,f,c
  1111                           
  1112                           ;doprnt.c: 1263: val = -val;
  1113  0012F4  6C16               	negf	printf@val,c
  1114  0012F6  1E17               	comf	printf@val+1,f,c
  1115  0012F8  B0D8               	btfsc	status,0,c
  1116  0012FA  2A17               	incf	printf@val+1,f,c
  1117  0012FC                     l273:
  1118                           
  1119                           ;doprnt.c: 1264: }
  1120                           ;doprnt.c: 1266: }
  1121                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1122  0012FC  0E01               	movlw	1
  1123  0012FE  6E18               	movwf	printf@c,c
  1124  001300                     l1432:
  1125  001300  0E05               	movlw	5
  1126  001302  1818               	xorwf	printf@c,w,c
  1127  001304  B4D8               	btfsc	status,2,c
  1128  001306  D012               	goto	u550
  1129                           
  1130                           ;doprnt.c: 1306: if(val < dpowers[c])
  1131  001308  5018               	movf	printf@c,w,c
  1132  00130A  0D02               	mullw	2
  1133  00130C  0E12               	movlw	low _dpowers
  1134  00130E  24F3               	addwf	prodl,w,c
  1135  001310  6EF6               	movwf	tblptrl,c
  1136  001312  0E10               	movlw	high _dpowers
  1137  001314  20F4               	addwfc	prodh,w,c
  1138  001316  6EF7               	movwf	tblptrh,c
  1139  001318                     	if	0	;There are less than 3 active tblptr bytes
  1140  001318                     	endif
  1141  001318  0009               	tblrd		*+
  1142  00131A  50F5               	movf	tablat,w,c
  1143  00131C  5C16               	subwf	printf@val,w,c
  1144  00131E  0009               	tblrd		*+
  1145  001320  50F5               	movf	tablat,w,c
  1146  001322  5817               	subwfb	printf@val+1,w,c
  1147  001324  A0D8               	btfss	status,0,c
  1148  001326  D002               	goto	u550
  1149                           
  1150                           ;doprnt.c: 1307: break;
  1151  001328  2A18               	incf	printf@c,f,c
  1152  00132A  D7EA               	goto	l1432
  1153  00132C                     u550:
  1154                           
  1155                           ;doprnt.c: 1422: {
  1156                           ;doprnt.c: 1438: if(flag & 0x03)
  1157  00132C  C014  F011         	movff	printf@flag,??_printf
  1158  001330  0E03               	movlw	3
  1159  001332  1611               	andwf	??_printf,f,c
  1160  001334  B4D8               	btfsc	status,2,c
  1161  001336  D003               	goto	l277
  1162                           
  1163                           ;doprnt.c: 1439: (putch('-') );
  1164  001338  0E2D               	movlw	45
  1165  00133A  EC72  F00B         	call	_putch
  1166  00133E                     l277:
  1167                           
  1168                           ;doprnt.c: 1469: }
  1169                           ;doprnt.c: 1472: prec = c;
  1170  00133E  C018  F015         	movff	printf@c,printf@prec
  1171                           
  1172                           ;doprnt.c: 1474: while(prec--) {
  1173  001342  D024               	goto	l278
  1174  001344                     
  1175                           ;doprnt.c: 1478: {
  1176                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1177  001344  5015               	movf	printf@prec,w,c
  1178  001346  0D02               	mullw	2
  1179  001348  0E12               	movlw	low _dpowers
  1180  00134A  24F3               	addwf	prodl,w,c
  1181  00134C  6EF6               	movwf	tblptrl,c
  1182  00134E  0E10               	movlw	high _dpowers
  1183  001350  20F4               	addwfc	prodh,w,c
  1184  001352  6EF7               	movwf	tblptrh,c
  1185  001354                     	if	0	;There are less than 3 active tblptr bytes
  1186  001354                     	endif
  1187  001354  0009               	tblrd		*+
  1188  001356  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1189  00135A  000A               	tblrd		*-
  1190  00135C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1191  001360  C016  F001         	movff	printf@val,___lwdiv@dividend
  1192  001364  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1193  001368  EC85  F00A         	call	___lwdiv	;wreg free
  1194  00136C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1195  001370  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1196  001374  0E00               	movlw	0
  1197  001376  6E0B               	movwf	___lwmod@divisor+1,c
  1198  001378  0E0A               	movlw	10
  1199  00137A  6E0A               	movwf	___lwmod@divisor,c
  1200  00137C  EC1E  F00B         	call	___lwmod	;wreg free
  1201  001380  5008               	movf	?___lwmod,w,c
  1202  001382  0F30               	addlw	48
  1203  001384  6E18               	movwf	printf@c,c
  1204                           
  1205                           ;doprnt.c: 1523: }
  1206                           ;doprnt.c: 1524: (putch(c) );
  1207  001386  5018               	movf	printf@c,w,c
  1208  001388  EC72  F00B         	call	_putch
  1209  00138C                     l278:
  1210  00138C  0615               	decf	printf@prec,f,c
  1211  00138E  2815               	incf	printf@prec,w,c
  1212  001390  A4D8               	btfss	status,2,c
  1213  001392  D7D8               	goto	l279
  1214  001394                     u570:
  1215  001394  C00D  FFF6         	movff	printf@f,tblptrl
  1216  001398  C00E  FFF7         	movff	printf@f+1,tblptrh
  1217  00139C  4A0D               	infsnz	printf@f,f,c
  1218  00139E  2A0E               	incf	printf@f+1,f,c
  1219  0013A0                     	if	0	;tblptru may be non-zero
  1220  0013A0                     	endif
  1221  0013A0                     	if	0	;tblptru may be non-zero
  1222  0013A0                     	endif
  1223  0013A0  0008               	tblrd		*
  1224  0013A2  CFF5 F018          	movff	tablat,printf@c
  1225  0013A6  5018               	movf	printf@c,w,c
  1226  0013A8  B4D8               	btfsc	status,2,c
  1227  0013AA  0012               	return	
  1228  0013AC  D776               	goto	l264
  1229  0013AE                     __end_of_printf:
  1230                           	opt stack 0
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           prodh	equ	0xFF4
  1236                           prodl	equ	0xFF3
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           postinc2	equ	0xFDE
  1240                           postdec2	equ	0xFDD
  1241                           fsr2h	equ	0xFDA
  1242                           fsr2l	equ	0xFD9
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _putch *****************
  1246 ;; Defined at:
  1247 ;;		line 24 in file "lcd.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  data            1    wreg     unsigned char 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  data            1    2[COMRAM] unsigned char 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;Total ram usage:        1 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    1
  1268 ;; This function calls:
  1269 ;;		_lcdNibble
  1270 ;; This function is called by:
  1271 ;;		_printf
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text3
  1276  0016E4                     __ptext3:
  1277                           	opt stack 0
  1278  0016E4                     _putch:
  1279                           	opt stack 28
  1280                           
  1281                           ;incstack = 0
  1282                           ;putch@data stored from wreg
  1283  0016E4  6E03               	movwf	putch@data,c
  1284                           
  1285                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1286  0016E6  848C               	bsf	3980,2,c	;volatile
  1287                           
  1288                           ;lcd.c: 33: lcdNibble(data);
  1289  0016E8  5003               	movf	putch@data,w,c
  1290  0016EA  EC18  F00A         	call	_lcdNibble
  1291                           
  1292                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1293  0016EE  0EC8               	movlw	200
  1294  0016F0                     u697:
  1295  0016F0  D000               	nop2	
  1296  0016F2  2EE8               	decfsz	wreg,f,c
  1297  0016F4  D7FD               	bra	u697
  1298  0016F6  0012               	return		;funcret
  1299  0016F8                     __end_of_putch:
  1300                           	opt stack 0
  1301                           tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           prodh	equ	0xFF4
  1306                           prodl	equ	0xFF3
  1307                           postinc0	equ	0xFEE
  1308                           wreg	equ	0xFE8
  1309                           postinc2	equ	0xFDE
  1310                           postdec2	equ	0xFDD
  1311                           fsr2h	equ	0xFDA
  1312                           fsr2l	equ	0xFD9
  1313                           status	equ	0xFD8
  1314                           
  1315 ;; *************** function ___lwmod *****************
  1316 ;; Defined at:
  1317 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  dividend        2    7[COMRAM] unsigned int 
  1320 ;;  divisor         2    9[COMRAM] unsigned int 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  counter         1   11[COMRAM] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  2    7[COMRAM] unsigned int 
  1325 ;; Registers used:
  1326 ;;		wreg, status,2, status,0
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1336 ;;Total ram usage:        5 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_printf
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text4
  1346  00163C                     __ptext4:
  1347                           	opt stack 0
  1348  00163C                     ___lwmod:
  1349                           	opt stack 29
  1350                           
  1351                           ;incstack = 0
  1352  00163C  500A               	movf	___lwmod@divisor,w,c
  1353  00163E  100B               	iorwf	___lwmod@divisor+1,w,c
  1354  001640  B4D8               	btfsc	status,2,c
  1355  001642  D018               	goto	l701
  1356  001644  0E01               	movlw	1
  1357  001646  6E0C               	movwf	___lwmod@counter,c
  1358  001648  D004               	goto	l696
  1359  00164A  90D8               	bcf	status,0,c
  1360  00164C  360A               	rlcf	___lwmod@divisor,f,c
  1361  00164E  360B               	rlcf	___lwmod@divisor+1,f,c
  1362  001650  2A0C               	incf	___lwmod@counter,f,c
  1363  001652                     l696:
  1364  001652  AE0B               	btfss	___lwmod@divisor+1,7,c
  1365  001654  D7FA               	goto	l697
  1366  001656                     u490:
  1367  001656  500A               	movf	___lwmod@divisor,w,c
  1368  001658  5C08               	subwf	___lwmod@dividend,w,c
  1369  00165A  500B               	movf	___lwmod@divisor+1,w,c
  1370  00165C  5809               	subwfb	___lwmod@dividend+1,w,c
  1371  00165E  A0D8               	btfss	status,0,c
  1372  001660  D004               	goto	l700
  1373  001662  500A               	movf	___lwmod@divisor,w,c
  1374  001664  5E08               	subwf	___lwmod@dividend,f,c
  1375  001666  500B               	movf	___lwmod@divisor+1,w,c
  1376  001668  5A09               	subwfb	___lwmod@dividend+1,f,c
  1377  00166A                     l700:
  1378  00166A  90D8               	bcf	status,0,c
  1379  00166C  320B               	rrcf	___lwmod@divisor+1,f,c
  1380  00166E  320A               	rrcf	___lwmod@divisor,f,c
  1381  001670  2E0C               	decfsz	___lwmod@counter,f,c
  1382  001672  D7F1               	goto	u490
  1383  001674                     l701:
  1384  001674  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1385  001678  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1386  00167C  0012               	return		;funcret
  1387  00167E                     __end_of___lwmod:
  1388                           	opt stack 0
  1389                           tblptru	equ	0xFF8
  1390                           tblptrh	equ	0xFF7
  1391                           tblptrl	equ	0xFF6
  1392                           tablat	equ	0xFF5
  1393                           prodh	equ	0xFF4
  1394                           prodl	equ	0xFF3
  1395                           postinc0	equ	0xFEE
  1396                           wreg	equ	0xFE8
  1397                           postinc2	equ	0xFDE
  1398                           postdec2	equ	0xFDD
  1399                           fsr2h	equ	0xFDA
  1400                           fsr2l	equ	0xFD9
  1401                           status	equ	0xFD8
  1402                           
  1403 ;; *************** function ___lwdiv *****************
  1404 ;; Defined at:
  1405 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  dividend        2    0[COMRAM] unsigned int 
  1408 ;;  divisor         2    2[COMRAM] unsigned int 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  quotient        2    4[COMRAM] unsigned int 
  1411 ;;  counter         1    6[COMRAM] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  2    0[COMRAM] unsigned int 
  1414 ;; Registers used:
  1415 ;;		wreg, status,2, status,0
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;Total ram usage:        7 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_printf
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text5
  1435  00150A                     __ptext5:
  1436                           	opt stack 0
  1437  00150A                     ___lwdiv:
  1438                           	opt stack 29
  1439                           
  1440                           ;incstack = 0
  1441  00150A  0E00               	movlw	0
  1442  00150C  6E06               	movwf	___lwdiv@quotient+1,c
  1443  00150E  0E00               	movlw	0
  1444  001510  6E05               	movwf	___lwdiv@quotient,c
  1445  001512  5003               	movf	___lwdiv@divisor,w,c
  1446  001514  1004               	iorwf	___lwdiv@divisor+1,w,c
  1447  001516  B4D8               	btfsc	status,2,c
  1448  001518  D01C               	goto	l691
  1449  00151A  0E01               	movlw	1
  1450  00151C  6E07               	movwf	___lwdiv@counter,c
  1451  00151E  D004               	goto	l686
  1452  001520  90D8               	bcf	status,0,c
  1453  001522  3603               	rlcf	___lwdiv@divisor,f,c
  1454  001524  3604               	rlcf	___lwdiv@divisor+1,f,c
  1455  001526  2A07               	incf	___lwdiv@counter,f,c
  1456  001528                     l686:
  1457  001528  AE04               	btfss	___lwdiv@divisor+1,7,c
  1458  00152A  D7FA               	goto	l687
  1459  00152C                     u460:
  1460  00152C  90D8               	bcf	status,0,c
  1461  00152E  3605               	rlcf	___lwdiv@quotient,f,c
  1462  001530  3606               	rlcf	___lwdiv@quotient+1,f,c
  1463  001532  5003               	movf	___lwdiv@divisor,w,c
  1464  001534  5C01               	subwf	___lwdiv@dividend,w,c
  1465  001536  5004               	movf	___lwdiv@divisor+1,w,c
  1466  001538  5802               	subwfb	___lwdiv@dividend+1,w,c
  1467  00153A  A0D8               	btfss	status,0,c
  1468  00153C  D005               	goto	l690
  1469  00153E  5003               	movf	___lwdiv@divisor,w,c
  1470  001540  5E01               	subwf	___lwdiv@dividend,f,c
  1471  001542  5004               	movf	___lwdiv@divisor+1,w,c
  1472  001544  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1473  001546  8005               	bsf	___lwdiv@quotient,0,c
  1474  001548                     l690:
  1475  001548  90D8               	bcf	status,0,c
  1476  00154A  3204               	rrcf	___lwdiv@divisor+1,f,c
  1477  00154C  3203               	rrcf	___lwdiv@divisor,f,c
  1478  00154E  2E07               	decfsz	___lwdiv@counter,f,c
  1479  001550  D7ED               	goto	u460
  1480  001552                     l691:
  1481  001552  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1482  001556  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1483  00155A  0012               	return		;funcret
  1484  00155C                     __end_of___lwdiv:
  1485                           	opt stack 0
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           prodh	equ	0xFF4
  1491                           prodl	equ	0xFF3
  1492                           postinc0	equ	0xFEE
  1493                           wreg	equ	0xFE8
  1494                           postinc2	equ	0xFDE
  1495                           postdec2	equ	0xFDD
  1496                           fsr2h	equ	0xFDA
  1497                           fsr2l	equ	0xFD9
  1498                           status	equ	0xFD8
  1499                           
  1500 ;; *************** function _motorStop_3 *****************
  1501 ;; Defined at:
  1502 ;;		line 341 in file "main.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;		None
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;		None
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      void 
  1509 ;; Registers used:
  1510 ;;		wreg, status,2, status,0, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;Total ram usage:        0 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    2
  1523 ;; This function calls:
  1524 ;;		_I2C_Master_Init
  1525 ;;		_I2C_Master_Start
  1526 ;;		_I2C_Master_Stop
  1527 ;;		_I2C_Master_Write
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text6
  1534  0015A8                     __ptext6:
  1535                           	opt stack 0
  1536  0015A8                     _motorStop_3:
  1537                           	opt stack 28
  1538                           
  1539                           ;main.c: 342: I2C_Master_Init(100000);
  1540                           
  1541                           ;incstack = 0
  1542  0015A8  0EA0               	movlw	160
  1543  0015AA  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1544  0015AC  0E86               	movlw	134
  1545  0015AE  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1546  0015B0  0E01               	movlw	1
  1547  0015B2  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1548  0015B4  0E00               	movlw	0
  1549  0015B6  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1550  0015B8  EC57  F00A         	call	_I2C_Master_Init	;wreg free
  1551                           
  1552                           ;main.c: 343: I2C_Master_Start();
  1553  0015BC  EC98  F00B         	call	_I2C_Master_Start	;wreg free
  1554                           
  1555                           ;main.c: 345: I2C_Master_Write(0b00010000);
  1556  0015C0  0E00               	movlw	0
  1557  0015C2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1558  0015C4  0E10               	movlw	16
  1559  0015C6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1560  0015C8  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
  1561                           
  1562                           ;main.c: 346: I2C_Master_Stop();
  1563  0015CC  EC94  F00B         	call	_I2C_Master_Stop	;wreg free
  1564                           
  1565                           ;main.c: 349: I2C_Master_Start();
  1566  0015D0  EC98  F00B         	call	_I2C_Master_Start	;wreg free
  1567                           
  1568                           ;main.c: 350: I2C_Master_Write(0b00010000);
  1569  0015D4  0E00               	movlw	0
  1570  0015D6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1571  0015D8  0E10               	movlw	16
  1572  0015DA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1573  0015DC  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
  1574                           
  1575                           ;main.c: 351: I2C_Master_Write('0');
  1576  0015E0  0E00               	movlw	0
  1577  0015E2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1578  0015E4  0E30               	movlw	48
  1579  0015E6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1580  0015E8  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
  1581                           
  1582                           ;main.c: 352: I2C_Master_Stop();
  1583  0015EC  EC94  F00B         	call	_I2C_Master_Stop	;wreg free
  1584  0015F0  0012               	return		;funcret
  1585  0015F2                     __end_of_motorStop_3:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           postinc2	equ	0xFDE
  1596                           postdec2	equ	0xFDD
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _motorStart_3 *****************
  1602 ;; Defined at:
  1603 ;;		line 327 in file "main.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2, status,0, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    2
  1624 ;; This function calls:
  1625 ;;		_I2C_Master_Init
  1626 ;;		_I2C_Master_Start
  1627 ;;		_I2C_Master_Stop
  1628 ;;		_I2C_Master_Write
  1629 ;; This function is called by:
  1630 ;;		_main
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text7
  1635  0015F2                     __ptext7:
  1636                           	opt stack 0
  1637  0015F2                     _motorStart_3:
  1638                           	opt stack 28
  1639                           
  1640                           ;main.c: 328: I2C_Master_Init(100000);
  1641                           
  1642                           ;incstack = 0
  1643  0015F2  0EA0               	movlw	160
  1644  0015F4  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1645  0015F6  0E86               	movlw	134
  1646  0015F8  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1647  0015FA  0E01               	movlw	1
  1648  0015FC  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1649  0015FE  0E00               	movlw	0
  1650  001600  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1651  001602  EC57  F00A         	call	_I2C_Master_Init	;wreg free
  1652                           
  1653                           ;main.c: 329: I2C_Master_Start();
  1654  001606  EC98  F00B         	call	_I2C_Master_Start	;wreg free
  1655                           
  1656                           ;main.c: 331: I2C_Master_Write(0b00010000);
  1657  00160A  0E00               	movlw	0
  1658  00160C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1659  00160E  0E10               	movlw	16
  1660  001610  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1661  001612  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
  1662                           
  1663                           ;main.c: 332: I2C_Master_Stop();
  1664  001616  EC94  F00B         	call	_I2C_Master_Stop	;wreg free
  1665                           
  1666                           ;main.c: 335: I2C_Master_Start();
  1667  00161A  EC98  F00B         	call	_I2C_Master_Start	;wreg free
  1668                           
  1669                           ;main.c: 336: I2C_Master_Write(0b00010000);
  1670  00161E  0E00               	movlw	0
  1671  001620  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1672  001622  0E10               	movlw	16
  1673  001624  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1674  001626  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
  1675                           
  1676                           ;main.c: 337: I2C_Master_Write('9');
  1677  00162A  0E00               	movlw	0
  1678  00162C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1679  00162E  0E39               	movlw	57
  1680  001630  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1681  001632  EC8F  F00B         	call	_I2C_Master_Write	;wreg free
  1682                           
  1683                           ;main.c: 338: I2C_Master_Stop();
  1684  001636  EC94  F00B         	call	_I2C_Master_Stop	;wreg free
  1685  00163A  0012               	return		;funcret
  1686  00163C                     __end_of_motorStart_3:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           prodh	equ	0xFF4
  1693                           prodl	equ	0xFF3
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postinc2	equ	0xFDE
  1697                           postdec2	equ	0xFDD
  1698                           fsr2h	equ	0xFDA
  1699                           fsr2l	equ	0xFD9
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function _I2C_Master_Write *****************
  1703 ;; Defined at:
  1704 ;;		line 108 in file "I2C.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;Total ram usage:        2 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    1
  1725 ;; This function calls:
  1726 ;;		_I2C_Master_Wait
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;;		_motorStart_3
  1730 ;;		_motorStop_3
  1731 ;;		_motorStart_0
  1732 ;;		_motorStop_0
  1733 ;;		_motorStart_1
  1734 ;;		_motorStop_1
  1735 ;;		_motorStart_2
  1736 ;;		_motorStop_2
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text8
  1741  00171E                     __ptext8:
  1742                           	opt stack 0
  1743  00171E                     _I2C_Master_Write:
  1744                           	opt stack 28
  1745                           
  1746                           ;I2C.c: 116: I2C_Master_Wait();
  1747                           
  1748                           ;incstack = 0
  1749  00171E  EC86  F00B         	call	_I2C_Master_Wait	;wreg free
  1750                           
  1751                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1752  001722  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1753  001726  0012               	return		;funcret
  1754  001728                     __end_of_I2C_Master_Write:
  1755                           	opt stack 0
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           prodh	equ	0xFF4
  1761                           prodl	equ	0xFF3
  1762                           postinc0	equ	0xFEE
  1763                           wreg	equ	0xFE8
  1764                           postinc2	equ	0xFDE
  1765                           postdec2	equ	0xFDD
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _I2C_Master_Stop *****************
  1771 ;; Defined at:
  1772 ;;		line 95 in file "I2C.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, status,2, status,0, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;Total ram usage:        0 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    1
  1793 ;; This function calls:
  1794 ;;		_I2C_Master_Wait
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;;		_motorStart_3
  1798 ;;		_motorStop_3
  1799 ;;		_motorStart_0
  1800 ;;		_motorStop_0
  1801 ;;		_motorStart_1
  1802 ;;		_motorStop_1
  1803 ;;		_motorStart_2
  1804 ;;		_motorStop_2
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text9
  1809  001728                     __ptext9:
  1810                           	opt stack 0
  1811  001728                     _I2C_Master_Stop:
  1812                           	opt stack 28
  1813                           
  1814                           ;I2C.c: 104: I2C_Master_Wait();
  1815                           
  1816                           ;incstack = 0
  1817  001728  EC86  F00B         	call	_I2C_Master_Wait	;wreg free
  1818                           
  1819                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1820  00172C  84C5               	bsf	4037,2,c	;volatile
  1821  00172E  0012               	return		;funcret
  1822  001730                     __end_of_I2C_Master_Stop:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           prodh	equ	0xFF4
  1829                           prodl	equ	0xFF3
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postinc2	equ	0xFDE
  1833                           postdec2	equ	0xFDD
  1834                           fsr2h	equ	0xFDA
  1835                           fsr2l	equ	0xFD9
  1836                           status	equ	0xFD8
  1837                           
  1838 ;; *************** function _I2C_Master_Start *****************
  1839 ;; Defined at:
  1840 ;;		line 69 in file "I2C.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;		None
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;		None
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  1    wreg      void 
  1847 ;; Registers used:
  1848 ;;		wreg, status,2, status,0, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;Total ram usage:        0 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    1
  1861 ;; This function calls:
  1862 ;;		_I2C_Master_Wait
  1863 ;; This function is called by:
  1864 ;;		_main
  1865 ;;		_motorStart_3
  1866 ;;		_motorStop_3
  1867 ;;		_motorStart_0
  1868 ;;		_motorStop_0
  1869 ;;		_motorStart_1
  1870 ;;		_motorStop_1
  1871 ;;		_motorStart_2
  1872 ;;		_motorStop_2
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text10
  1877  001730                     __ptext10:
  1878                           	opt stack 0
  1879  001730                     _I2C_Master_Start:
  1880                           	opt stack 28
  1881                           
  1882                           ;I2C.c: 78: I2C_Master_Wait();
  1883                           
  1884                           ;incstack = 0
  1885  001730  EC86  F00B         	call	_I2C_Master_Wait	;wreg free
  1886                           
  1887                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1888  001734  80C5               	bsf	4037,0,c	;volatile
  1889  001736  0012               	return		;funcret
  1890  001738                     __end_of_I2C_Master_Start:
  1891                           	opt stack 0
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           prodh	equ	0xFF4
  1897                           prodl	equ	0xFF3
  1898                           postinc0	equ	0xFEE
  1899                           wreg	equ	0xFE8
  1900                           postinc2	equ	0xFDE
  1901                           postdec2	equ	0xFDD
  1902                           fsr2h	equ	0xFDA
  1903                           fsr2l	equ	0xFD9
  1904                           status	equ	0xFD8
  1905                           
  1906 ;; *************** function _I2C_Master_Wait *****************
  1907 ;; Defined at:
  1908 ;;		line 51 in file "I2C.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2, status,0
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;Total ram usage:        1 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_I2C_Master_Start
  1932 ;;		_I2C_Master_Stop
  1933 ;;		_I2C_Master_Write
  1934 ;;		_I2C_Master_RepeatedStart
  1935 ;;		_I2C_Master_Read
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text11
  1940  00170C                     __ptext11:
  1941                           	opt stack 0
  1942  00170C                     _I2C_Master_Wait:
  1943                           	opt stack 28
  1944                           
  1945                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1946                           
  1947                           ;incstack = 0
  1948  00170C  B4C7               	btfsc	4039,2,c	;volatile
  1949  00170E  D7FE               	goto	_I2C_Master_Wait
  1950  001710  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1951  001714  0E1F               	movlw	31
  1952  001716  1601               	andwf	??_I2C_Master_Wait,f,c
  1953  001718  B4D8               	btfsc	status,2,c
  1954  00171A  0012               	return	
  1955  00171C  D7F7               	goto	_I2C_Master_Wait
  1956  00171E                     __end_of_I2C_Master_Wait:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           prodh	equ	0xFF4
  1963                           prodl	equ	0xFF3
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postinc2	equ	0xFDE
  1967                           postdec2	equ	0xFDD
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           status	equ	0xFD8
  1971                           
  1972 ;; *************** function _I2C_Master_Init *****************
  1973 ;; Defined at:
  1974 ;;		line 14 in file "I2C.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;		None
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg, status,2, status,0, cstack
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1988 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;Total ram usage:        8 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; Hardware stack levels required when called:    1
  1995 ;; This function calls:
  1996 ;;		___lldiv
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;;		_motorStart_3
  2000 ;;		_motorStop_3
  2001 ;;		_motorStart_0
  2002 ;;		_motorStop_0
  2003 ;;		_motorStart_1
  2004 ;;		_motorStop_1
  2005 ;;		_motorStart_2
  2006 ;;		_motorStop_2
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text12
  2011  0014AE                     __ptext12:
  2012                           	opt stack 0
  2013  0014AE                     _I2C_Master_Init:
  2014                           	opt stack 28
  2015                           
  2016                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2017                           
  2018                           ;incstack = 0
  2019  0014AE  9AC6               	bcf	4038,5,c	;volatile
  2020                           
  2021                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2022  0014B0  8694               	bsf	3988,3,c	;volatile
  2023                           
  2024                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2025  0014B2  8894               	bsf	3988,4,c	;volatile
  2026                           
  2027                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2028  0014B4  0E80               	movlw	128
  2029  0014B6  6EC7               	movwf	4039,c	;volatile
  2030                           
  2031                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2032  0014B8  0E28               	movlw	40
  2033  0014BA  6EC6               	movwf	4038,c	;volatile
  2034                           
  2035                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2036  0014BC  0E00               	movlw	0
  2037  0014BE  6EC5               	movwf	4037,c	;volatile
  2038                           
  2039                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  2040  0014C0  0E00               	movlw	0
  2041  0014C2  6E01               	movwf	___lldiv@dividend,c
  2042  0014C4  0E5A               	movlw	90
  2043  0014C6  6E02               	movwf	___lldiv@dividend+1,c
  2044  0014C8  0E62               	movlw	98
  2045  0014CA  6E03               	movwf	___lldiv@dividend+2,c
  2046  0014CC  0E02               	movlw	2
  2047  0014CE  6E04               	movwf	___lldiv@dividend+3,c
  2048  0014D0  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  2049  0014D4  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  2050  0014D8  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  2051  0014DC  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  2052  0014E0  0E02               	movlw	2
  2053  0014E2                     u445:
  2054  0014E2  90D8               	bcf	status,0,c
  2055  0014E4  3612               	rlcf	??_I2C_Master_Init,f,c
  2056  0014E6  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2057  0014E8  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2058  0014EA  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2059  0014EC  2EE8               	decfsz	wreg,f,c
  2060  0014EE  D7F9               	goto	u445
  2061  0014F0  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2062  0014F4  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2063  0014F8  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2064  0014FC  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2065  001500  ECD7  F009         	call	___lldiv	;wreg free
  2066  001504  0401               	decf	?___lldiv,w,c
  2067  001506  6EC8               	movwf	4040,c	;volatile
  2068  001508  0012               	return		;funcret
  2069  00150A                     __end_of_I2C_Master_Init:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           prodh	equ	0xFF4
  2076                           prodl	equ	0xFF3
  2077                           postinc0	equ	0xFEE
  2078                           wreg	equ	0xFE8
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085 ;; *************** function ___lldiv *****************
  2086 ;; Defined at:
  2087 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  dividend        4    0[COMRAM] unsigned long 
  2090 ;;  divisor         4    4[COMRAM] unsigned long 
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;  quotient        4    8[COMRAM] unsigned long 
  2093 ;;  counter         1   12[COMRAM] unsigned char 
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  4    0[COMRAM] unsigned long 
  2096 ;; Registers used:
  2097 ;;		wreg, status,2, status,0
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2103 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;Total ram usage:       13 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_I2C_Master_Init
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text13
  2117  0013AE                     __ptext13:
  2118                           	opt stack 0
  2119  0013AE                     ___lldiv:
  2120                           	opt stack 28
  2121                           
  2122                           ;incstack = 0
  2123  0013AE  0E00               	movlw	0
  2124  0013B0  6E09               	movwf	___lldiv@quotient,c
  2125  0013B2  0E00               	movlw	0
  2126  0013B4  6E0A               	movwf	___lldiv@quotient+1,c
  2127  0013B6  0E00               	movlw	0
  2128  0013B8  6E0B               	movwf	___lldiv@quotient+2,c
  2129  0013BA  0E00               	movlw	0
  2130  0013BC  6E0C               	movwf	___lldiv@quotient+3,c
  2131  0013BE  5005               	movf	___lldiv@divisor,w,c
  2132  0013C0  1006               	iorwf	___lldiv@divisor+1,w,c
  2133  0013C2  1007               	iorwf	___lldiv@divisor+2,w,c
  2134  0013C4  1008               	iorwf	___lldiv@divisor+3,w,c
  2135  0013C6  B4D8               	btfsc	status,2,c
  2136  0013C8  D02A               	goto	l638
  2137  0013CA  0E01               	movlw	1
  2138  0013CC  6E0D               	movwf	___lldiv@counter,c
  2139  0013CE  D006               	goto	l633
  2140  0013D0  90D8               	bcf	status,0,c
  2141  0013D2  3605               	rlcf	___lldiv@divisor,f,c
  2142  0013D4  3606               	rlcf	___lldiv@divisor+1,f,c
  2143  0013D6  3607               	rlcf	___lldiv@divisor+2,f,c
  2144  0013D8  3608               	rlcf	___lldiv@divisor+3,f,c
  2145  0013DA  2A0D               	incf	___lldiv@counter,f,c
  2146  0013DC                     l633:
  2147  0013DC  AE08               	btfss	___lldiv@divisor+3,7,c
  2148  0013DE  D7F8               	goto	l634
  2149  0013E0                     u420:
  2150  0013E0  90D8               	bcf	status,0,c
  2151  0013E2  3609               	rlcf	___lldiv@quotient,f,c
  2152  0013E4  360A               	rlcf	___lldiv@quotient+1,f,c
  2153  0013E6  360B               	rlcf	___lldiv@quotient+2,f,c
  2154  0013E8  360C               	rlcf	___lldiv@quotient+3,f,c
  2155  0013EA  5005               	movf	___lldiv@divisor,w,c
  2156  0013EC  5C01               	subwf	___lldiv@dividend,w,c
  2157  0013EE  5006               	movf	___lldiv@divisor+1,w,c
  2158  0013F0  5802               	subwfb	___lldiv@dividend+1,w,c
  2159  0013F2  5007               	movf	___lldiv@divisor+2,w,c
  2160  0013F4  5803               	subwfb	___lldiv@dividend+2,w,c
  2161  0013F6  5008               	movf	___lldiv@divisor+3,w,c
  2162  0013F8  5804               	subwfb	___lldiv@dividend+3,w,c
  2163  0013FA  A0D8               	btfss	status,0,c
  2164  0013FC  D009               	goto	l637
  2165  0013FE  5005               	movf	___lldiv@divisor,w,c
  2166  001400  5E01               	subwf	___lldiv@dividend,f,c
  2167  001402  5006               	movf	___lldiv@divisor+1,w,c
  2168  001404  5A02               	subwfb	___lldiv@dividend+1,f,c
  2169  001406  5007               	movf	___lldiv@divisor+2,w,c
  2170  001408  5A03               	subwfb	___lldiv@dividend+2,f,c
  2171  00140A  5008               	movf	___lldiv@divisor+3,w,c
  2172  00140C  5A04               	subwfb	___lldiv@dividend+3,f,c
  2173  00140E  8009               	bsf	___lldiv@quotient,0,c
  2174  001410                     l637:
  2175  001410  90D8               	bcf	status,0,c
  2176  001412  3208               	rrcf	___lldiv@divisor+3,f,c
  2177  001414  3207               	rrcf	___lldiv@divisor+2,f,c
  2178  001416  3206               	rrcf	___lldiv@divisor+1,f,c
  2179  001418  3205               	rrcf	___lldiv@divisor,f,c
  2180  00141A  2E0D               	decfsz	___lldiv@counter,f,c
  2181  00141C  D7E1               	goto	u420
  2182  00141E                     l638:
  2183  00141E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2184  001422  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2185  001426  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2186  00142A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2187  00142E  0012               	return		;funcret
  2188  001430                     __end_of___lldiv:
  2189                           	opt stack 0
  2190                           tblptru	equ	0xFF8
  2191                           tblptrh	equ	0xFF7
  2192                           tblptrl	equ	0xFF6
  2193                           tablat	equ	0xFF5
  2194                           prodh	equ	0xFF4
  2195                           prodl	equ	0xFF3
  2196                           postinc0	equ	0xFEE
  2197                           wreg	equ	0xFE8
  2198                           postinc2	equ	0xFDE
  2199                           postdec2	equ	0xFDD
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _initLCD *****************
  2205 ;; Defined at:
  2206 ;;		line 60 in file "lcd.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, status,2, status,0, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:        1 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    2
  2227 ;; This function calls:
  2228 ;;		_lcdInst
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text14
  2235  00155C                     __ptext14:
  2236                           	opt stack 0
  2237  00155C                     _initLCD:
  2238                           	opt stack 28
  2239                           
  2240                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2241                           
  2242                           ;incstack = 0
  2243  00155C  0EC3               	movlw	195
  2244  00155E  6E04               	movwf	??_initLCD& (0+255),c
  2245  001560  0ECD               	movlw	205
  2246  001562                     u707:
  2247  001562  2EE8               	decfsz	wreg,f,c
  2248  001564  D7FE               	bra	u707
  2249  001566  2E04               	decfsz	??_initLCD& (0+255),f,c
  2250  001568  D7FC               	bra	u707
  2251  00156A  F000               	nop	
  2252                           
  2253                           ;lcd.c: 69: lcdInst(0b00110011);
  2254  00156C  0E33               	movlw	51
  2255  00156E  EC7C  F00B         	call	_lcdInst
  2256                           
  2257                           ;lcd.c: 70: lcdInst(0b00110010);
  2258  001572  0E32               	movlw	50
  2259  001574  EC7C  F00B         	call	_lcdInst
  2260                           
  2261                           ;lcd.c: 71: lcdInst(0b00101000);
  2262  001578  0E28               	movlw	40
  2263  00157A  EC7C  F00B         	call	_lcdInst
  2264                           
  2265                           ;lcd.c: 72: lcdInst(0b00001111);
  2266  00157E  0E0F               	movlw	15
  2267  001580  EC7C  F00B         	call	_lcdInst
  2268                           
  2269                           ;lcd.c: 73: lcdInst(0b00000110);
  2270  001584  0E06               	movlw	6
  2271  001586  EC7C  F00B         	call	_lcdInst
  2272                           
  2273                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2274  00158A  0E01               	movlw	1
  2275  00158C  EC7C  F00B         	call	_lcdInst
  2276  001590  0EC3               	movlw	195
  2277  001592  6E04               	movwf	??_initLCD& (0+255),c
  2278  001594  0ECD               	movlw	205
  2279  001596                     u717:
  2280  001596  2EE8               	decfsz	wreg,f,c
  2281  001598  D7FE               	bra	u717
  2282  00159A  2E04               	decfsz	??_initLCD& (0+255),f,c
  2283  00159C  D7FC               	bra	u717
  2284  00159E  F000               	nop	
  2285                           
  2286                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2287  0015A0  0E0F               	movlw	15
  2288  0015A2  EC7C  F00B         	call	_lcdInst
  2289  0015A6  0012               	return		;funcret
  2290  0015A8                     __end_of_initLCD:
  2291                           	opt stack 0
  2292                           tblptru	equ	0xFF8
  2293                           tblptrh	equ	0xFF7
  2294                           tblptrl	equ	0xFF6
  2295                           tablat	equ	0xFF5
  2296                           prodh	equ	0xFF4
  2297                           prodl	equ	0xFF3
  2298                           postinc0	equ	0xFEE
  2299                           wreg	equ	0xFE8
  2300                           postinc2	equ	0xFDE
  2301                           postdec2	equ	0xFDD
  2302                           fsr2h	equ	0xFDA
  2303                           fsr2l	equ	0xFD9
  2304                           status	equ	0xFD8
  2305                           
  2306 ;; *************** function _lcdInst *****************
  2307 ;; Defined at:
  2308 ;;		line 11 in file "lcd.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  data            1    wreg     unsigned char 
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;  data            1    2[COMRAM] unsigned char 
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  1    wreg      void 
  2315 ;; Registers used:
  2316 ;;		wreg, status,2, status,0, cstack
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;Total ram usage:        1 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    1
  2329 ;; This function calls:
  2330 ;;		_lcdNibble
  2331 ;; This function is called by:
  2332 ;;		_main
  2333 ;;		_initLCD
  2334 ;;		_lcd_set_cursor
  2335 ;;		_lcd_shift_cursor
  2336 ;;		_lcd_shift_display
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text15
  2341  0016F8                     __ptext15:
  2342                           	opt stack 0
  2343  0016F8                     _lcdInst:
  2344                           	opt stack 29
  2345                           
  2346                           ;incstack = 0
  2347                           ;lcdInst@data stored from wreg
  2348  0016F8  6E03               	movwf	lcdInst@data,c
  2349                           
  2350                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2351  0016FA  948C               	bcf	3980,2,c	;volatile
  2352                           
  2353                           ;lcd.c: 20: lcdNibble(data);
  2354  0016FC  5003               	movf	lcdInst@data,w,c
  2355  0016FE  EC18  F00A         	call	_lcdNibble
  2356                           
  2357                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2358  001702  0EC8               	movlw	200
  2359  001704                     u727:
  2360  001704  D000               	nop2	
  2361  001706  2EE8               	decfsz	wreg,f,c
  2362  001708  D7FD               	bra	u727
  2363  00170A  0012               	return		;funcret
  2364  00170C                     __end_of_lcdInst:
  2365                           	opt stack 0
  2366                           tblptru	equ	0xFF8
  2367                           tblptrh	equ	0xFF7
  2368                           tblptrl	equ	0xFF6
  2369                           tablat	equ	0xFF5
  2370                           prodh	equ	0xFF4
  2371                           prodl	equ	0xFF3
  2372                           postinc0	equ	0xFEE
  2373                           wreg	equ	0xFE8
  2374                           postinc2	equ	0xFDE
  2375                           postdec2	equ	0xFDD
  2376                           fsr2h	equ	0xFDA
  2377                           fsr2l	equ	0xFD9
  2378                           status	equ	0xFD8
  2379                           
  2380 ;; *************** function _lcdNibble *****************
  2381 ;; Defined at:
  2382 ;;		line 37 in file "lcd.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  data            1    wreg     unsigned char 
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  data            1    1[COMRAM] unsigned char 
  2387 ;;  temp            1    0[COMRAM] unsigned char 
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      void 
  2390 ;; Registers used:
  2391 ;;		wreg, status,2, status,0
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;Total ram usage:        2 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_lcdInst
  2407 ;;		_putch
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text16
  2412  001430                     __ptext16:
  2413                           	opt stack 0
  2414  001430                     _lcdNibble:
  2415                           	opt stack 28
  2416                           
  2417                           ;incstack = 0
  2418                           ;lcdNibble@data stored from wreg
  2419  001430  6E02               	movwf	lcdNibble@data,c
  2420                           
  2421                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2422  001432  5002               	movf	lcdNibble@data,w,c
  2423  001434  0BF0               	andlw	240
  2424  001436  6E01               	movwf	lcdNibble@temp,c
  2425                           
  2426                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2427  001438  508C               	movf	3980,w,c	;volatile
  2428  00143A  0B0F               	andlw	15
  2429  00143C  6E8C               	movwf	3980,c	;volatile
  2430                           
  2431                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2432  00143E  5001               	movf	lcdNibble@temp,w,c
  2433  001440  108C               	iorwf	3980,w,c	;volatile
  2434  001442  6E8C               	movwf	3980,c	;volatile
  2435                           
  2436                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2437  001444  0E00               	movlw	0
  2438  001446  BEF2               	btfsc	intcon,7,c	;volatile
  2439  001448  0E01               	movlw	1
  2440  00144A  6E27               	movwf	lcd@LCDinterruptState,c
  2441  00144C  9EF2               	bcf	intcon,7,c	;volatile
  2442  00144E  868C               	bsf	3980,3,c	;volatile
  2443  001450  0E53               	movlw	83
  2444  001452                     u737:
  2445  001452  2EE8               	decfsz	wreg,f,c
  2446  001454  D7FE               	bra	u737
  2447  001456  F000               	nop	
  2448  001458  968C               	bcf	3980,3,c	;volatile
  2449  00145A  0EC8               	movlw	200
  2450  00145C                     u747:
  2451  00145C  D000               	nop2	
  2452  00145E  2EE8               	decfsz	wreg,f,c
  2453  001460  D7FD               	bra	u747
  2454  001462  B027               	btfsc	lcd@LCDinterruptState,0,c
  2455  001464  D002               	bra	u15
  2456  001466  9EF2               	bcf	intcon,7,c	;volatile
  2457  001468  D001               	bra	u16
  2458  00146A                     u15:
  2459  00146A  8EF2               	bsf	intcon,7,c	;volatile
  2460  00146C                     u16:
  2461                           
  2462                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2463  00146C  3802               	swapf	lcdNibble@data,w,c
  2464  00146E  0BF0               	andlw	240
  2465  001470  6E02               	movwf	lcdNibble@data,c
  2466                           
  2467                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2468  001472  5002               	movf	lcdNibble@data,w,c
  2469  001474  0BF0               	andlw	240
  2470  001476  6E01               	movwf	lcdNibble@temp,c
  2471                           
  2472                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2473  001478  508C               	movf	3980,w,c	;volatile
  2474  00147A  0B0F               	andlw	15
  2475  00147C  6E8C               	movwf	3980,c	;volatile
  2476                           
  2477                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2478  00147E  5001               	movf	lcdNibble@temp,w,c
  2479  001480  108C               	iorwf	3980,w,c	;volatile
  2480  001482  6E8C               	movwf	3980,c	;volatile
  2481                           
  2482                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2483  001484  0E00               	movlw	0
  2484  001486  BEF2               	btfsc	intcon,7,c	;volatile
  2485  001488  0E01               	movlw	1
  2486  00148A  6E27               	movwf	lcd@LCDinterruptState,c
  2487  00148C  9EF2               	bcf	intcon,7,c	;volatile
  2488  00148E  868C               	bsf	3980,3,c	;volatile
  2489  001490  0E53               	movlw	83
  2490  001492                     u757:
  2491  001492  2EE8               	decfsz	wreg,f,c
  2492  001494  D7FE               	bra	u757
  2493  001496  F000               	nop	
  2494  001498  968C               	bcf	3980,3,c	;volatile
  2495  00149A  0EC8               	movlw	200
  2496  00149C                     u767:
  2497  00149C  D000               	nop2	
  2498  00149E  2EE8               	decfsz	wreg,f,c
  2499  0014A0  D7FD               	bra	u767
  2500  0014A2  B027               	btfsc	lcd@LCDinterruptState,0,c
  2501  0014A4  D002               	bra	u25
  2502  0014A6  9EF2               	bcf	intcon,7,c	;volatile
  2503  0014A8  D001               	bra	u26
  2504  0014AA                     u25:
  2505  0014AA  8EF2               	bsf	intcon,7,c	;volatile
  2506  0014AC                     u26:
  2507  0014AC  0012               	return		;funcret
  2508  0014AE                     __end_of_lcdNibble:
  2509                           	opt stack 0
  2510                           tblptru	equ	0xFF8
  2511                           tblptrh	equ	0xFF7
  2512                           tblptrl	equ	0xFF6
  2513                           tablat	equ	0xFF5
  2514                           prodh	equ	0xFF4
  2515                           prodl	equ	0xFF3
  2516                           intcon	equ	0xFF2
  2517                           postinc0	equ	0xFEE
  2518                           wreg	equ	0xFE8
  2519                           postinc2	equ	0xFDE
  2520                           postdec2	equ	0xFDD
  2521                           fsr2h	equ	0xFDA
  2522                           fsr2l	equ	0xFD9
  2523                           status	equ	0xFD8
  2524                           tblptru	equ	0xFF8
  2525                           tblptrh	equ	0xFF7
  2526                           tblptrl	equ	0xFF6
  2527                           tablat	equ	0xFF5
  2528                           prodh	equ	0xFF4
  2529                           prodl	equ	0xFF3
  2530                           intcon	equ	0xFF2
  2531                           postinc0	equ	0xFEE
  2532                           wreg	equ	0xFE8
  2533                           postinc2	equ	0xFDE
  2534                           postdec2	equ	0xFDD
  2535                           fsr2h	equ	0xFDA
  2536                           fsr2l	equ	0xFD9
  2537                           status	equ	0xFD8
  2538                           
  2539                           	psect	rparam
  2540  0000                     tblptru	equ	0xFF8
  2541                           tblptrh	equ	0xFF7
  2542                           tblptrl	equ	0xFF6
  2543                           tablat	equ	0xFF5
  2544                           prodh	equ	0xFF4
  2545                           prodl	equ	0xFF3
  2546                           intcon	equ	0xFF2
  2547                           postinc0	equ	0xFEE
  2548                           wreg	equ	0xFE8
  2549                           postinc2	equ	0xFDE
  2550                           postdec2	equ	0xFDD
  2551                           fsr2h	equ	0xFDA
  2552                           fsr2l	equ	0xFD9
  2553                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    36
    Data        2
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[15]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_3->_I2C_Master_Init
    _motorStart_3->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12029
                                             24 COMRAM     2     2      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                       _motorStart_3
                        _motorStop_3
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1633
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_3                                          0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_3                                         0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2302
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1096
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      34        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 16:10:07 2018

                          _i 001B                           l99 10EA                           u15 146A  
                         u16 146C                           u25 14AA                           u26 14AC  
                __CFG_CPD$ON 000000                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l100 1104                          l101 1134                          l104 11CC  
                        l105 11E2                          l106 1260                          l107 1226  
                        l116 1696                          l271 12D4                          l264 129A  
                        l273 12FC                          l265 12AA                          l700 166A  
                        l701 1674                          l277 133E                          l278 138C  
                        l279 1344                          l633 13DC                          l634 13D0  
                        l637 1410                          l638 141E                          l690 1548  
                        l691 1552                          l686 1528                          l687 1520  
                        l696 1652                          l697 164A                 __CFG_CPB$OFF 000000  
                        u420 13E0                          u460 152C                          u445 14E2  
                        u550 132C                          u490 1656                          u570 1394  
                        u707 1562                          u717 1596                          u727 1704  
                        u647 10DA                          u737 1452                          u657 114E  
                        u747 145C                          u667 1216                          u757 1492  
                        u677 124C                          u767 149C                          u687 1282  
                        u697 16F0                          _max 0029                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1432 1300  
                       l1508 10EA                         l1568 1226                         _ADON 007E10  
                       STR_1 1031                         STR_2 1031                         STR_3 1034  
                       STR_4 1031                         STR_5 1031                         STR_6 1031  
                       STR_7 1025                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       _main 103A                         _keys 1001                         fsr2h 000FDA  
                       fsr2l 000FD9                         prodh 000FF4                         prodl 000FF3  
                       start 0000                __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000  
               ___param_bank 000000             __end_of_LCD_LEFT 1020             ?_I2C_Master_Init 000E  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lldiv 1430              __end_of___lwdiv 155C              __end_of___lwmod 167E  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 170C                _N_spacingTime 001F  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_readADC 16B6  
            __end_of_initLCD 15A8               __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C  
                      _array 101C                        _state 0025                        _putch 16E4  
                      tablat 000FF5            _LCDinterruptState 0028                        status 000FD8  
             __CFG_PBADEN$ON 000000              __initialization 16B6                 __end_of_main 1290  
               __end_of_keys 1012               __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 1021  
                     ??_main 0019                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0004                       _ADRESH 000FC4  
                     _ADRESL 000FC3                       ?_putch 0001                       _OSCCON 000FD3  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
             __CFG_STVREN$ON 000000                    ??___lldiv 0009                    ??___lwdiv 0005  
                  ??___lwmod 000C                       clear_0 16D4                 ?_motorStop_3 0001  
                  ??_lcdInst 0003                       _printf 1290                    ??_readADC 0003  
                  ??_initLCD 0004                 __pdataCOMRAM 0029                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                 __accesstop 0080      __end_of__initialization 16DA                ___rparam_used 000001  
             __pcstackCOMRAM 0001                __end_of_array 101F                __end_of_putch 16F8  
         __size_of_lcdNibble 007E                      ??_putch 0003                      ?_printf 000D  
       lcd@LCDinterruptState 0027                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7            __end_of_lcdNibble 14AE                      __Hparam 0000  
                    __Lparam 0000                      ___lldiv 13AE                      ___lwdiv 150A  
                    ___lwmod 163C                 __psmallconst 1000                      __pcinit 16B6  
                    __ramtop 1000                      _lcdInst 16F8                      __ptext0 103A  
                    __ptext1 167E                      __ptext2 1290                      __ptext3 16E4  
                    __ptext4 163C                      __ptext5 150A                      __ptext6 15A8  
                    __ptext7 15F2                      __ptext8 171E                      __ptext9 1728  
            __size_of_printf 011E                      _readADC 167E                      _initLCD 155C  
       __size_of_motorStop_3 004A                      _dpowers 1012                ?_motorStart_3 0001  
                  _LCD_RIGHT 1020     __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Wait 0012  
   __size_of_I2C_Master_Stop 0008         end_of_initialization 16DA        __end_of_LCD_SIZE_HORZ 1023  
      __end_of_LCD_SIZE_VERT 1022                __Lmediumconst 0000    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005              ___lldiv@counter 000D  
                    printf@c 0018                      printf@f 000D                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE               ??_motorStart_3 0016  
                  _TRISCbits 000F94                    _TRISDbits 000F95                __pidataCOMRAM 1738  
             __end_of_printf 13AE                    _N_counter 0023          start_initialization 16B6  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002  
   I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000                     ??_printf 0011  
              _analog_result 001D                  __pbssCOMRAM 001B             _I2C_Master_Start 1730  
           _I2C_Master_Write 171E         __end_of_motorStart_3 163C             ___lwdiv@dividend 0001  
          __CFG_CCP2MX$PORTC 000000                    _lcdNibble 1430                     ?___lldiv 0001  
                   ?___lwdiv 0001                     ?___lwmod 0008                     ?_lcdInst 0001  
                   ?_readADC 0001                     ?_initLCD 0001                  __smallconst 1000  
           ___lwdiv@quotient 0005               __size_of_putch 0014                     _LCD_LEFT 101F  
                   _LATDbits 000F8C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
              ??_motorStop_3 0016                   _ADCON0bits 000FC2                   _ADCON2bits 000FC0  
              lcdNibble@data 0002                   printf@flag 0014                lcdNibble@temp 0001  
                 printf@prec 0015               _LCD_HORZ_LIMIT 1024                     _N_remain 0021  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___lldiv 0082             __size_of___lwdiv 0052             __size_of___lwmod 0042  
             readADC@channel 0005             __size_of_lcdInst 0014              _I2C_Master_Init 14AE  
           __size_of_readADC 0038             __size_of_initLCD 004C              _I2C_Master_Wait 170C  
            _I2C_Master_Stop 1728       __end_of_LCD_HORZ_LIMIT 1025          __end_of_motorStop_3 15F2  
            ___lwdiv@divisor 0003              ___lwdiv@counter 0007                     __ptext10 1730  
                   __ptext11 170C                     __ptext12 14AE                     __ptext13 13AE  
                   __ptext14 155C                     __ptext15 16F8                     __ptext16 1430  
             _LCD_VERT_LIMIT 1023        __size_of_motorStart_3 004A                __size_of_main 0256  
                ??_lcdNibble 0001                    printf@val 0016  I2C_Master_Write@byteToWrite 0002  
                  putch@data 0003     __end_of_I2C_Master_Start 1738     __end_of_I2C_Master_Write 1728  
                 _INTCONbits 000FF2                 _motorStart_3 15F2       __end_of_LCD_VERT_LIMIT 1024  
              _LCD_SIZE_HORZ 1022             ___lwmod@dividend 0008                _LCD_SIZE_VERT 1021  
           ___lldiv@dividend 0001                     printf@ap 0012      __end_of_I2C_Master_Init 150A  
    __end_of_I2C_Master_Wait 171E      __end_of_I2C_Master_Stop 1730                  lcdInst@data 0003  
                _motorStop_3 15A8             ___lldiv@quotient 0009              ___lwmod@divisor 000A  
            ___lwmod@counter 000C                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
