

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 13 04:22:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  0013AA                     __pidataCOMRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _max
    63  0013AA  0005               	dw	5
    64                           
    65                           	psect	smallconst
    66  001000                     __psmallconst:
    67                           	opt stack 0
    68  001000  00                 	db	0
    69  001001                     _dpowers:
    70                           	opt stack 0
    71  001001  0001               	dw	1
    72  001003  000A               	dw	10
    73  001005  0064               	dw	100
    74  001007  03E8               	dw	1000
    75  001009  2710               	dw	10000
    76  00100B                     __end_of_dpowers:
    77                           	opt stack 0
    78  00100B                     _LCD_LEFT:
    79                           	opt stack 0
    80  00100B  00                 	db	0
    81  00100C                     __end_of_LCD_LEFT:
    82                           	opt stack 0
    83  00100C                     _LCD_RIGHT:
    84                           	opt stack 0
    85  00100C  01                 	db	1
    86  00100D                     __end_of_LCD_RIGHT:
    87                           	opt stack 0
    88  00100D                     _LCD_SIZE_VERT:
    89                           	opt stack 0
    90  00100D  02                 	db	2
    91  00100E                     __end_of_LCD_SIZE_VERT:
    92                           	opt stack 0
    93  00100E                     _LCD_SIZE_HORZ:
    94                           	opt stack 0
    95  00100E  10                 	db	16
    96  00100F                     __end_of_LCD_SIZE_HORZ:
    97                           	opt stack 0
    98  00100F                     _LCD_VERT_LIMIT:
    99                           	opt stack 0
   100  00100F  02                 	db	2
   101  001010                     __end_of_LCD_VERT_LIMIT:
   102                           	opt stack 0
   103  001010                     _LCD_HORZ_LIMIT:
   104                           	opt stack 0
   105  001010  28                 	db	40
   106  001011                     __end_of_LCD_HORZ_LIMIT:
   107                           	opt stack 0
   108  0000                     _INTCONbits	set	4082
   109  0000                     _LATDbits	set	3980
   110  0000                     _TRISCbits	set	3988
   111  0000                     _LATCbits	set	3979
   112  0000                     _ADRESH	set	4036
   113  0000                     _ADRESL	set	4035
   114  0000                     _ADCON0bits	set	4034
   115  0000                     _ADCON2bits	set	4032
   116  0000                     _ADCON1	set	4033
   117  0000                     _ADCON0	set	4034
   118  0000                     _TRISE	set	3990
   119  0000                     _TRISD	set	3989
   120  0000                     _TRISC	set	3988
   121  0000                     _TRISB	set	3987
   122  0000                     _TRISA	set	3986
   123  0000                     _LATE	set	3981
   124  0000                     _LATD	set	3980
   125  0000                     _LATC	set	3979
   126  0000                     _LATB	set	3978
   127  0000                     _LATA	set	3977
   128  0000                     _OSCCON	set	4051
   129  0000                     _ADON	set	32272
   130  001011                     STR_1:
   131  001011  25                 	db	37
   132  001012  64                 	db	100	;'d'
   133  001013  00                 	db	0
   134                           
   135                           ; #config settings
   136  001014  00                 	db	0	; dummy byte at the end
   137  0000                     
   138                           	psect	cinit
   139  001354                     __pcinit:
   140                           	opt stack 0
   141  001354                     start_initialization:
   142                           	opt stack 0
   143  001354                     __initialization:
   144                           	opt stack 0
   145                           
   146                           ; Initialize objects allocated to COMRAM (2 bytes)
   147                           ; load TBLPTR registers with __pidataCOMRAM
   148  001354  0EAA               	movlw	low __pidataCOMRAM
   149  001356  6EF6               	movwf	tblptrl,c
   150  001358  0E13               	movlw	high __pidataCOMRAM
   151  00135A  6EF7               	movwf	tblptrh,c
   152  00135C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   153  00135E  6EF8               	movwf	tblptru,c
   154  001360  0009               	tblrd		*+	;fetch initializer
   155  001362  CFF5 F020          	movff	tablat,__pdataCOMRAM
   156  001366  0009               	tblrd		*+	;fetch initializer
   157  001368  CFF5 F021          	movff	tablat,__pdataCOMRAM+1
   158                           
   159                           ; Clear objects allocated to COMRAM (6 bytes)
   160  00136C  6A1F               	clrf	(__pbssCOMRAM+5)& (0+255),c
   161  00136E  6A1E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   162  001370  6A1D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   163  001372  6A1C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   164  001374  6A1B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   165  001376  6A1A               	clrf	__pbssCOMRAM& (0+255),c
   166  001378                     end_of_initialization:
   167                           	opt stack 0
   168  001378                     __end_of__initialization:
   169                           	opt stack 0
   170  001378  0E00               	movlw	low (__Lmediumconst shr (0+16))
   171  00137A  6EF8               	movwf	tblptru,c
   172  00137C  0100               	movlb	0
   173  00137E  EF9A  F008         	goto	_main	;jump to C main() function
   174                           tblptru	equ	0xFF8
   175                           tblptrh	equ	0xFF7
   176                           tblptrl	equ	0xFF6
   177                           tablat	equ	0xFF5
   178                           
   179                           	psect	bssCOMRAM
   180  00001A                     __pbssCOMRAM:
   181                           	opt stack 0
   182  00001A                     _analog_result:
   183                           	opt stack 0
   184  00001A                     	ds	2
   185  00001C                     _counter:
   186                           	opt stack 0
   187  00001C                     	ds	2
   188  00001E                     lcd@LCDinterruptState:
   189                           	opt stack 0
   190  00001E                     	ds	1
   191  00001F                     	ds	1
   192                           tblptru	equ	0xFF8
   193                           tblptrh	equ	0xFF7
   194                           tblptrl	equ	0xFF6
   195                           tablat	equ	0xFF5
   196                           
   197                           	psect	dataCOMRAM
   198  000020                     __pdataCOMRAM:
   199                           	opt stack 0
   200  000020                     _max:
   201                           	opt stack 0
   202  000020                     	ds	2
   203                           tblptru	equ	0xFF8
   204                           tblptrh	equ	0xFF7
   205                           tblptrl	equ	0xFF6
   206                           tablat	equ	0xFF5
   207                           
   208                           	psect	cstackCOMRAM
   209  000001                     __pcstackCOMRAM:
   210                           	opt stack 0
   211  000001                     ?_readADC:
   212                           	opt stack 0
   213  000001                     ?___lwdiv:
   214                           	opt stack 0
   215  000001                     lcdNibble@temp:
   216                           	opt stack 0
   217  000001                     ___lwdiv@dividend:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221  000001                     	ds	1
   222  000002                     lcdNibble@data:
   223                           	opt stack 0
   224                           
   225                           ; 1 bytes @ 0x1
   226  000002                     	ds	1
   227  000003                     ??_readADC:
   228  000003                     lcdInst@data:
   229                           	opt stack 0
   230  000003                     putch@data:
   231                           	opt stack 0
   232  000003                     ___lwdiv@divisor:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x2
   236  000003                     	ds	1
   237  000004                     ??_initLCD:
   238                           
   239                           ; 1 bytes @ 0x3
   240  000004                     	ds	1
   241  000005                     readADC@channel:
   242                           	opt stack 0
   243  000005                     ___lwdiv@quotient:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x4
   247  000005                     	ds	2
   248  000007                     ___lwdiv@counter:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x6
   252  000007                     	ds	1
   253  000008                     ?___lwmod:
   254                           	opt stack 0
   255  000008                     ___lwmod@dividend:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x7
   259  000008                     	ds	2
   260  00000A                     ___lwmod@divisor:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x9
   264  00000A                     	ds	2
   265  00000C                     ___lwmod@counter:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0xB
   269  00000C                     	ds	1
   270  00000D                     ?_printf:
   271                           	opt stack 0
   272  00000D                     printf@f:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0xC
   276  00000D                     	ds	4
   277  000011                     ??_printf:
   278                           
   279                           ; 1 bytes @ 0x10
   280  000011                     	ds	1
   281  000012                     printf@ap:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x11
   285  000012                     	ds	2
   286  000014                     printf@flag:
   287                           	opt stack 0
   288                           
   289                           ; 1 bytes @ 0x13
   290  000014                     	ds	1
   291  000015                     printf@prec:
   292                           	opt stack 0
   293                           
   294                           ; 1 bytes @ 0x14
   295  000015                     	ds	1
   296  000016                     printf@val:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x15
   300  000016                     	ds	2
   301  000018                     printf@c:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x17
   305  000018                     	ds	1
   306  000019                     ??_main:
   307                           
   308                           ; 1 bytes @ 0x18
   309  000019                     	ds	1
   310                           tblptru	equ	0xFF8
   311                           tblptrh	equ	0xFF7
   312                           tblptrl	equ	0xFF6
   313                           tablat	equ	0xFF5
   314                           
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 33 in file "main.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;		None
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   338 ;;Total ram usage:        1 bytes
   339 ;; Hardware stack levels required when called:    3
   340 ;; This function calls:
   341 ;;		_initLCD
   342 ;;		_lcdInst
   343 ;;		_printf
   344 ;;		_readADC
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text0
   351  001134                     __ptext0:
   352                           	opt stack 0
   353  001134                     _main:
   354                           	opt stack 28
   355                           
   356                           ;main.c: 37: OSCCON = 0xF2;
   357                           
   358                           ;incstack = 0
   359  001134  0EF2               	movlw	242
   360  001136  6ED3               	movwf	4051,c	;volatile
   361                           
   362                           ;main.c: 42: LATA = 0x00;
   363  001138  0E00               	movlw	0
   364  00113A  6E89               	movwf	3977,c	;volatile
   365                           
   366                           ;main.c: 43: LATB = 0x00;
   367  00113C  0E00               	movlw	0
   368  00113E  6E8A               	movwf	3978,c	;volatile
   369                           
   370                           ;main.c: 44: LATC = 0x00;
   371  001140  0E00               	movlw	0
   372  001142  6E8B               	movwf	3979,c	;volatile
   373                           
   374                           ;main.c: 45: LATD = 0x00;
   375  001144  0E00               	movlw	0
   376  001146  6E8C               	movwf	3980,c	;volatile
   377                           
   378                           ;main.c: 46: LATE = 0x00;
   379  001148  0E00               	movlw	0
   380  00114A  6E8D               	movwf	3981,c	;volatile
   381                           
   382                           ;main.c: 50: TRISA = 0xFF;
   383  00114C  6892               	setf	3986,c	;volatile
   384                           
   385                           ;main.c: 51: TRISB = 0xFF;
   386  00114E  6893               	setf	3987,c	;volatile
   387                           
   388                           ;main.c: 52: TRISC = 0x00;
   389  001150  0E00               	movlw	0
   390  001152  6E94               	movwf	3988,c	;volatile
   391                           
   392                           ;main.c: 53: TRISD = 0x00;
   393  001154  0E00               	movlw	0
   394  001156  6E95               	movwf	3989,c	;volatile
   395                           
   396                           ;main.c: 54: TRISE = 0x00;
   397  001158  0E00               	movlw	0
   398  00115A  6E96               	movwf	3990,c	;volatile
   399                           
   400                           ;main.c: 57: ADCON0 = 0x00;
   401  00115C  0E00               	movlw	0
   402  00115E  6EC2               	movwf	4034,c	;volatile
   403                           
   404                           ;main.c: 58: ADCON1 = 0x0B;
   405  001160  0E0B               	movlw	11
   406  001162  6EC1               	movwf	4033,c	;volatile
   407                           
   408                           ;main.c: 59: ADCON2bits.ADFM = 1;
   409  001164  8EC0               	bsf	4032,7,c	;volatile
   410                           
   411                           ;main.c: 66: initLCD();
   412  001166  EC47  F009         	call	_initLCD	;wreg free
   413  00116A                     
   414                           ;main.c: 88: if (readADC(2)<270){
   415  00116A  0E02               	movlw	2
   416  00116C  EC8E  F009         	call	_readADC
   417  001170  0E0E               	movlw	14
   418  001172  5C01               	subwf	?_readADC,w,c
   419  001174  0E01               	movlw	1
   420  001176  5802               	subwfb	?_readADC+1,w,c
   421  001178  B0D8               	btfsc	status,0,c
   422  00117A  D7F7               	goto	l75
   423                           
   424                           ;main.c: 90: counter++;
   425  00117C  4A1C               	infsnz	_counter,f,c
   426  00117E  2A1D               	incf	_counter+1,f,c
   427                           
   428                           ;main.c: 91: initLCD();
   429  001180  EC47  F009         	call	_initLCD	;wreg free
   430                           
   431                           ;main.c: 92: printf("%d",counter);
   432  001184  0E11               	movlw	low STR_1
   433  001186  6E0D               	movwf	printf@f,c
   434  001188  0E10               	movlw	high STR_1
   435  00118A  6E0E               	movwf	printf@f+1,c
   436  00118C  C01C  F00F         	movff	_counter,?_printf+2
   437  001190  C01D  F010         	movff	_counter+1,?_printf+3
   438  001194  EC0B  F008         	call	_printf	;wreg free
   439                           
   440                           ;main.c: 93: _delay((unsigned long)((60)*(8000000/4000.0)));
   441  001198  0E9C               	movlw	156
   442  00119A  6E19               	movwf	??_main& (0+255),c
   443  00119C  0ED7               	movlw	215
   444  00119E                     u417:
   445  00119E  2EE8               	decfsz	wreg,f,c
   446  0011A0  D7FE               	bra	u417
   447  0011A2  2E19               	decfsz	??_main& (0+255),f,c
   448  0011A4  D7FC               	bra	u417
   449  0011A6  F000               	nop	
   450                           
   451                           ;main.c: 94: lcdInst(0x80);_delay((unsigned long)((5)*(8000000/4000.0)));;
   452  0011A8  0E80               	movlw	128
   453  0011AA  ECCB  F009         	call	_lcdInst
   454  0011AE  0E0D               	movlw	13
   455  0011B0  6E19               	movwf	??_main& (0+255),c
   456  0011B2  0EFC               	movlw	252
   457  0011B4                     u427:
   458  0011B4  2EE8               	decfsz	wreg,f,c
   459  0011B6  D7FE               	bra	u427
   460  0011B8  2E19               	decfsz	??_main& (0+255),f,c
   461  0011BA  D7FC               	bra	u427
   462  0011BC  D7D6               	goto	l75
   463  0011BE                     __end_of_main:
   464                           	opt stack 0
   465                           tblptru	equ	0xFF8
   466                           tblptrh	equ	0xFF7
   467                           tblptrl	equ	0xFF6
   468                           tablat	equ	0xFF5
   469                           wreg	equ	0xFE8
   470                           status	equ	0xFD8
   471                           
   472 ;; *************** function _readADC *****************
   473 ;; Defined at:
   474 ;;		line 106 in file "main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;  channel         1    wreg     unsigned char 
   477 ;; Auto vars:     Size  Location     Type
   478 ;;  channel         1    4[COMRAM] unsigned char 
   479 ;; Return value:  Size  Location     Type
   480 ;;                  2    0[COMRAM] unsigned short 
   481 ;; Registers used:
   482 ;;		wreg, status,2, status,0
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   491 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   492 ;;Total ram usage:        5 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; This function calls:
   495 ;;		Nothing
   496 ;; This function is called by:
   497 ;;		_main
   498 ;; This function uses a non-reentrant model
   499 ;;
   500                           
   501                           	psect	text1
   502  00131C                     __ptext1:
   503                           	opt stack 0
   504  00131C                     _readADC:
   505                           	opt stack 30
   506                           
   507                           ;incstack = 0
   508                           ;readADC@channel stored from wreg
   509  00131C  6E05               	movwf	readADC@channel,c
   510                           
   511                           ;main.c: 115: ADCON0 = (channel & 0x0F) << 2;
   512  00131E  C005  F003         	movff	readADC@channel,??_readADC
   513  001322  0E0F               	movlw	15
   514  001324  1603               	andwf	??_readADC,f,c
   515  001326  90D8               	bcf	status,0,c
   516  001328  3603               	rlcf	??_readADC,f,c
   517  00132A  90D8               	bcf	status,0,c
   518  00132C  3403               	rlcf	??_readADC,w,c
   519  00132E  6EC2               	movwf	4034,c	;volatile
   520                           
   521                           ;main.c: 116: ADON = 1;
   522  001330  80C2               	bsf	4034,0,c	;volatile
   523                           
   524                           ;main.c: 117: ADCON0bits.GO = 1;
   525  001332  82C2               	bsf	4034,1,c	;volatile
   526  001334  B2C2               	btfsc	4034,1,c	;volatile
   527  001336  D7FE               	goto	l83
   528                           
   529                           ;main.c: 119: analog_result = ADRESL + (ADRESH*256);
   530  001338  50C4               	movf	4036,w,c	;volatile
   531  00133A  6E04               	movwf	(??_readADC+1)& (0+255),c
   532  00133C  6A03               	clrf	??_readADC& (0+255),c
   533  00133E  50C3               	movf	4035,w,c	;volatile
   534  001340  2403               	addwf	??_readADC,w,c
   535  001342  6E1A               	movwf	_analog_result,c
   536  001344  0E00               	movlw	0
   537  001346  2004               	addwfc	??_readADC+1,w,c
   538  001348  6E1B               	movwf	_analog_result+1,c
   539                           
   540                           ;main.c: 120: return analog_result;
   541  00134A  C01A  F001         	movff	_analog_result,?_readADC
   542  00134E  C01B  F002         	movff	_analog_result+1,?_readADC+1
   543  001352  0012               	return	
   544  001354                     __end_of_readADC:
   545                           	opt stack 0
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           wreg	equ	0xFE8
   551                           status	equ	0xFD8
   552                           
   553 ;; *************** function _printf *****************
   554 ;; Defined at:
   555 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;  f               2   12[COMRAM] PTR const unsigned char 
   558 ;;		 -> STR_1(3), 
   559 ;; Auto vars:     Size  Location     Type
   560 ;;  tmpval          4    0        struct .
   561 ;;  cp              3    0        PTR const unsigned char 
   562 ;;  val             2   21[COMRAM] unsigned int 
   563 ;;  ap              2   17[COMRAM] PTR void [1]
   564 ;;		 -> ?_printf(2), 
   565 ;;  len             2    0        unsigned int 
   566 ;;  c               1   23[COMRAM] char 
   567 ;;  prec            1   20[COMRAM] char 
   568 ;;  flag            1   19[COMRAM] unsigned char 
   569 ;; Return value:  Size  Location     Type
   570 ;;                  2   12[COMRAM] int 
   571 ;; Registers used:
   572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   579 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   581 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   582 ;;Total ram usage:       12 bytes
   583 ;; Hardware stack levels used:    1
   584 ;; Hardware stack levels required when called:    2
   585 ;; This function calls:
   586 ;;		___lwdiv
   587 ;;		___lwmod
   588 ;;		_putch
   589 ;; This function is called by:
   590 ;;		_main
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           	psect	text2
   595  001016                     __ptext2:
   596                           	opt stack 0
   597  001016                     _printf:
   598                           	opt stack 28
   599                           
   600                           ;doprnt.c: 466: va_list ap;
   601                           ;doprnt.c: 499: signed char c;
   602                           ;doprnt.c: 506: signed char prec;
   603                           ;doprnt.c: 508: unsigned char flag;
   604                           ;doprnt.c: 523: union {
   605                           ;doprnt.c: 524: unsigned long vd;
   606                           ;doprnt.c: 525: double integ;
   607                           ;doprnt.c: 526: } tmpval;
   608                           ;doprnt.c: 528: unsigned int val;
   609                           ;doprnt.c: 529: unsigned len;
   610                           ;doprnt.c: 530: const char * cp;
   611                           ;doprnt.c: 533: *ap = __va_start();
   612                           
   613                           ;incstack = 0
   614  001016  0E0F               	movlw	low (?_printf+2)
   615  001018  6E12               	movwf	printf@ap,c
   616  00101A  0E00               	movlw	high (?_printf+2)
   617  00101C  6E13               	movwf	printf@ap+1,c
   618                           
   619                           ;doprnt.c: 536: while(c = *f++) {
   620  00101E  D07D               	goto	u380
   621  001020                     
   622                           ;doprnt.c: 538: if(c != '%')
   623  001020  0E25               	movlw	37
   624  001022  1818               	xorwf	printf@c,w,c
   625  001024  B4D8               	btfsc	status,2,c
   626  001026  D004               	goto	l159
   627                           
   628                           ;doprnt.c: 540: {
   629                           ;doprnt.c: 541: (putch(c) );
   630  001028  5018               	movf	printf@c,w,c
   631  00102A  ECC1  F009         	call	_putch
   632                           
   633                           ;doprnt.c: 542: continue;
   634  00102E  D075               	goto	u380
   635  001030                     l159:
   636                           
   637                           ;doprnt.c: 543: }
   638                           ;doprnt.c: 548: flag = 0;
   639  001030  0E00               	movlw	0
   640  001032  6E14               	movwf	printf@flag,c
   641                           
   642                           ;doprnt.c: 822: }
   643                           
   644                           ;doprnt.c: 813: continue;
   645                           
   646                           ;doprnt.c: 802: default:
   647                           
   648                           ;doprnt.c: 698: case 'i':
   649                           ;doprnt.c: 699: break;
   650                           
   651                           ;doprnt.c: 697: case 'd':
   652                           
   653                           ;doprnt.c: 638: goto alldone;
   654                           
   655                           ;doprnt.c: 637: case 0:
   656                           
   657                           ;doprnt.c: 635: switch(c = *f++) {
   658  001034  C00D  FFF6         	movff	printf@f,tblptrl
   659  001038  C00E  FFF7         	movff	printf@f+1,tblptrh
   660  00103C  4A0D               	infsnz	printf@f,f,c
   661  00103E  2A0E               	incf	printf@f+1,f,c
   662  001040                     	if	0	;tblptru may be non-zero
   663  001040                     	endif
   664  001040                     	if	0	;tblptru may be non-zero
   665  001040                     	endif
   666  001040  0008               	tblrd		*
   667  001042  CFF5 F018          	movff	tablat,printf@c
   668  001046  5018               	movf	printf@c,w,c
   669                           
   670                           ; Switch size 1, requested type "space"
   671                           ; Number of cases is 3, Range of values is 0 to 105
   672                           ; switch strategies available:
   673                           ; Name         Instructions Cycles
   674                           ; simple_byte           10     6 (average)
   675                           ;	Chosen strategy is simple_byte
   676  001048  0A00               	xorlw	0	; case 0
   677  00104A  B4D8               	btfsc	status,2,c
   678  00104C  0012               	return	
   679  00104E  0A64               	xorlw	100	; case 100
   680  001050  B4D8               	btfsc	status,2,c
   681  001052  D003               	goto	l165
   682  001054  0A0D               	xorlw	13	; case 105
   683  001056  A4D8               	btfss	status,2,c
   684  001058  D060               	goto	u380
   685  00105A                     l165:
   686                           
   687                           ;doprnt.c: 1253: {
   688                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   689  00105A  C012  FFD9         	movff	printf@ap,fsr2l
   690  00105E  C013  FFDA         	movff	printf@ap+1,fsr2h
   691  001062  CFDE F016          	movff	postinc2,printf@val
   692  001066  CFDD F017          	movff	postdec2,printf@val+1
   693  00106A  0E02               	movlw	2
   694  00106C  2612               	addwf	printf@ap,f,c
   695  00106E  0E00               	movlw	0
   696  001070  2213               	addwfc	printf@ap+1,f,c
   697                           
   698                           ;doprnt.c: 1261: if((int)val < 0) {
   699  001072  AE17               	btfss	printf@val+1,7,c
   700  001074  D006               	goto	l167
   701                           
   702                           ;doprnt.c: 1262: flag |= 0x03;
   703  001076  0E03               	movlw	3
   704  001078  1214               	iorwf	printf@flag,f,c
   705                           
   706                           ;doprnt.c: 1263: val = -val;
   707  00107A  6C16               	negf	printf@val,c
   708  00107C  1E17               	comf	printf@val+1,f,c
   709  00107E  B0D8               	btfsc	status,0,c
   710  001080  2A17               	incf	printf@val+1,f,c
   711  001082                     l167:
   712                           
   713                           ;doprnt.c: 1264: }
   714                           ;doprnt.c: 1266: }
   715                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   716  001082  0E01               	movlw	1
   717  001084  6E18               	movwf	printf@c,c
   718  001086                     l1110:
   719  001086  0E05               	movlw	5
   720  001088  1818               	xorwf	printf@c,w,c
   721  00108A  B4D8               	btfsc	status,2,c
   722  00108C  D012               	goto	u360
   723                           
   724                           ;doprnt.c: 1306: if(val < dpowers[c])
   725  00108E  5018               	movf	printf@c,w,c
   726  001090  0D02               	mullw	2
   727  001092  0E01               	movlw	low _dpowers
   728  001094  24F3               	addwf	prodl,w,c
   729  001096  6EF6               	movwf	tblptrl,c
   730  001098  0E10               	movlw	high _dpowers
   731  00109A  20F4               	addwfc	prodh,w,c
   732  00109C  6EF7               	movwf	tblptrh,c
   733  00109E                     	if	0	;There are less than 3 active tblptr bytes
   734  00109E                     	endif
   735  00109E  0009               	tblrd		*+
   736  0010A0  50F5               	movf	tablat,w,c
   737  0010A2  5C16               	subwf	printf@val,w,c
   738  0010A4  0009               	tblrd		*+
   739  0010A6  50F5               	movf	tablat,w,c
   740  0010A8  5817               	subwfb	printf@val+1,w,c
   741  0010AA  A0D8               	btfss	status,0,c
   742  0010AC  D002               	goto	u360
   743                           
   744                           ;doprnt.c: 1307: break;
   745  0010AE  2A18               	incf	printf@c,f,c
   746  0010B0  D7EA               	goto	l1110
   747  0010B2                     u360:
   748                           
   749                           ;doprnt.c: 1422: {
   750                           ;doprnt.c: 1438: if(flag & 0x03)
   751  0010B2  C014  F011         	movff	printf@flag,??_printf
   752  0010B6  0E03               	movlw	3
   753  0010B8  1611               	andwf	??_printf,f,c
   754  0010BA  B4D8               	btfsc	status,2,c
   755  0010BC  D003               	goto	l171
   756                           
   757                           ;doprnt.c: 1439: (putch('-') );
   758  0010BE  0E2D               	movlw	45
   759  0010C0  ECC1  F009         	call	_putch
   760  0010C4                     l171:
   761                           
   762                           ;doprnt.c: 1469: }
   763                           ;doprnt.c: 1472: prec = c;
   764  0010C4  C018  F015         	movff	printf@c,printf@prec
   765                           
   766                           ;doprnt.c: 1474: while(prec--) {
   767  0010C8  D024               	goto	l172
   768  0010CA                     
   769                           ;doprnt.c: 1478: {
   770                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   771  0010CA  5015               	movf	printf@prec,w,c
   772  0010CC  0D02               	mullw	2
   773  0010CE  0E01               	movlw	low _dpowers
   774  0010D0  24F3               	addwf	prodl,w,c
   775  0010D2  6EF6               	movwf	tblptrl,c
   776  0010D4  0E10               	movlw	high _dpowers
   777  0010D6  20F4               	addwfc	prodh,w,c
   778  0010D8  6EF7               	movwf	tblptrh,c
   779  0010DA                     	if	0	;There are less than 3 active tblptr bytes
   780  0010DA                     	endif
   781  0010DA  0009               	tblrd		*+
   782  0010DC  CFF5 F003          	movff	tablat,___lwdiv@divisor
   783  0010E0  000A               	tblrd		*-
   784  0010E2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   785  0010E6  C016  F001         	movff	printf@val,___lwdiv@dividend
   786  0010EA  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   787  0010EE  EC1E  F009         	call	___lwdiv	;wreg free
   788  0010F2  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   789  0010F6  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   790  0010FA  0E00               	movlw	0
   791  0010FC  6E0B               	movwf	___lwmod@divisor+1,c
   792  0010FE  0E0A               	movlw	10
   793  001100  6E0A               	movwf	___lwmod@divisor,c
   794  001102  EC6D  F009         	call	___lwmod	;wreg free
   795  001106  5008               	movf	?___lwmod,w,c
   796  001108  0F30               	addlw	48
   797  00110A  6E18               	movwf	printf@c,c
   798                           
   799                           ;doprnt.c: 1523: }
   800                           ;doprnt.c: 1524: (putch(c) );
   801  00110C  5018               	movf	printf@c,w,c
   802  00110E  ECC1  F009         	call	_putch
   803  001112                     l172:
   804  001112  0615               	decf	printf@prec,f,c
   805  001114  2815               	incf	printf@prec,w,c
   806  001116  A4D8               	btfss	status,2,c
   807  001118  D7D8               	goto	l173
   808  00111A                     u380:
   809  00111A  C00D  FFF6         	movff	printf@f,tblptrl
   810  00111E  C00E  FFF7         	movff	printf@f+1,tblptrh
   811  001122  4A0D               	infsnz	printf@f,f,c
   812  001124  2A0E               	incf	printf@f+1,f,c
   813  001126                     	if	0	;tblptru may be non-zero
   814  001126                     	endif
   815  001126                     	if	0	;tblptru may be non-zero
   816  001126                     	endif
   817  001126  0008               	tblrd		*
   818  001128  CFF5 F018          	movff	tablat,printf@c
   819  00112C  5018               	movf	printf@c,w,c
   820  00112E  B4D8               	btfsc	status,2,c
   821  001130  0012               	return	
   822  001132  D776               	goto	l158
   823  001134                     __end_of_printf:
   824                           	opt stack 0
   825                           tblptru	equ	0xFF8
   826                           tblptrh	equ	0xFF7
   827                           tblptrl	equ	0xFF6
   828                           tablat	equ	0xFF5
   829                           prodh	equ	0xFF4
   830                           prodl	equ	0xFF3
   831                           wreg	equ	0xFE8
   832                           postinc2	equ	0xFDE
   833                           postdec2	equ	0xFDD
   834                           fsr2h	equ	0xFDA
   835                           fsr2l	equ	0xFD9
   836                           status	equ	0xFD8
   837                           
   838 ;; *************** function _putch *****************
   839 ;; Defined at:
   840 ;;		line 24 in file "lcd.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;  data            1    wreg     unsigned char 
   843 ;; Auto vars:     Size  Location     Type
   844 ;;  data            1    2[COMRAM] unsigned char 
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		wreg, status,2, status,0, cstack
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   857 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   858 ;;Total ram usage:        1 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; Hardware stack levels required when called:    1
   861 ;; This function calls:
   862 ;;		_lcdNibble
   863 ;; This function is called by:
   864 ;;		_printf
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           	psect	text3
   869  001382                     __ptext3:
   870                           	opt stack 0
   871  001382                     _putch:
   872                           	opt stack 28
   873                           
   874                           ;incstack = 0
   875                           ;putch@data stored from wreg
   876  001382  6E03               	movwf	putch@data,c
   877                           
   878                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   879  001384  848C               	bsf	3980,2,c	;volatile
   880                           
   881                           ;lcd.c: 33: lcdNibble(data);
   882  001386  5003               	movf	putch@data,w,c
   883  001388  ECDF  F008         	call	_lcdNibble
   884                           
   885                           ;lcd.c: 34: _delay((unsigned long)((100)*(8000000/4000000.0)));
   886  00138C  0E42               	movlw	66
   887  00138E                     u437:
   888  00138E  2EE8               	decfsz	wreg,f,c
   889  001390  D7FE               	bra	u437
   890  001392  D000               	nop2	
   891  001394  0012               	return		;funcret
   892  001396                     __end_of_putch:
   893                           	opt stack 0
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           prodh	equ	0xFF4
   899                           prodl	equ	0xFF3
   900                           wreg	equ	0xFE8
   901                           postinc2	equ	0xFDE
   902                           postdec2	equ	0xFDD
   903                           fsr2h	equ	0xFDA
   904                           fsr2l	equ	0xFD9
   905                           status	equ	0xFD8
   906                           
   907 ;; *************** function ___lwmod *****************
   908 ;; Defined at:
   909 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;  dividend        2    7[COMRAM] unsigned int 
   912 ;;  divisor         2    9[COMRAM] unsigned int 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  counter         1   11[COMRAM] unsigned char 
   915 ;; Return value:  Size  Location     Type
   916 ;;                  2    7[COMRAM] unsigned int 
   917 ;; Registers used:
   918 ;;		wreg, status,2, status,0
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   924 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   928 ;;Total ram usage:        5 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; This function calls:
   931 ;;		Nothing
   932 ;; This function is called by:
   933 ;;		_printf
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text4
   938  0012DA                     __ptext4:
   939                           	opt stack 0
   940  0012DA                     ___lwmod:
   941                           	opt stack 29
   942                           
   943                           ;incstack = 0
   944  0012DA  500A               	movf	___lwmod@divisor,w,c
   945  0012DC  100B               	iorwf	___lwmod@divisor+1,w,c
   946  0012DE  B4D8               	btfsc	status,2,c
   947  0012E0  D018               	goto	l595
   948  0012E2  0E01               	movlw	1
   949  0012E4  6E0C               	movwf	___lwmod@counter,c
   950  0012E6  D004               	goto	l590
   951  0012E8  90D8               	bcf	status,0,c
   952  0012EA  360A               	rlcf	___lwmod@divisor,f,c
   953  0012EC  360B               	rlcf	___lwmod@divisor+1,f,c
   954  0012EE  2A0C               	incf	___lwmod@counter,f,c
   955  0012F0                     l590:
   956  0012F0  AE0B               	btfss	___lwmod@divisor+1,7,c
   957  0012F2  D7FA               	goto	l591
   958  0012F4                     u290:
   959  0012F4  500A               	movf	___lwmod@divisor,w,c
   960  0012F6  5C08               	subwf	___lwmod@dividend,w,c
   961  0012F8  500B               	movf	___lwmod@divisor+1,w,c
   962  0012FA  5809               	subwfb	___lwmod@dividend+1,w,c
   963  0012FC  A0D8               	btfss	status,0,c
   964  0012FE  D004               	goto	l594
   965  001300  500A               	movf	___lwmod@divisor,w,c
   966  001302  5E08               	subwf	___lwmod@dividend,f,c
   967  001304  500B               	movf	___lwmod@divisor+1,w,c
   968  001306  5A09               	subwfb	___lwmod@dividend+1,f,c
   969  001308                     l594:
   970  001308  90D8               	bcf	status,0,c
   971  00130A  320B               	rrcf	___lwmod@divisor+1,f,c
   972  00130C  320A               	rrcf	___lwmod@divisor,f,c
   973  00130E  2E0C               	decfsz	___lwmod@counter,f,c
   974  001310  D7F1               	goto	u290
   975  001312                     l595:
   976  001312  C008  F008         	movff	___lwmod@dividend,?___lwmod
   977  001316  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   978  00131A  0012               	return		;funcret
   979  00131C                     __end_of___lwmod:
   980                           	opt stack 0
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           prodh	equ	0xFF4
   986                           prodl	equ	0xFF3
   987                           wreg	equ	0xFE8
   988                           postinc2	equ	0xFDE
   989                           postdec2	equ	0xFDD
   990                           fsr2h	equ	0xFDA
   991                           fsr2l	equ	0xFD9
   992                           status	equ	0xFD8
   993                           
   994 ;; *************** function ___lwdiv *****************
   995 ;; Defined at:
   996 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;  dividend        2    0[COMRAM] unsigned int 
   999 ;;  divisor         2    2[COMRAM] unsigned int 
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;  quotient        2    4[COMRAM] unsigned int 
  1002 ;;  counter         1    6[COMRAM] unsigned char 
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  2    0[COMRAM] unsigned int 
  1005 ;; Registers used:
  1006 ;;		wreg, status,2, status,0
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1012 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1013 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1015 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1016 ;;Total ram usage:        7 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; This function calls:
  1019 ;;		Nothing
  1020 ;; This function is called by:
  1021 ;;		_printf
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text5
  1026  00123C                     __ptext5:
  1027                           	opt stack 0
  1028  00123C                     ___lwdiv:
  1029                           	opt stack 29
  1030                           
  1031                           ;incstack = 0
  1032  00123C  0E00               	movlw	0
  1033  00123E  6E06               	movwf	___lwdiv@quotient+1,c
  1034  001240  0E00               	movlw	0
  1035  001242  6E05               	movwf	___lwdiv@quotient,c
  1036  001244  5003               	movf	___lwdiv@divisor,w,c
  1037  001246  1004               	iorwf	___lwdiv@divisor+1,w,c
  1038  001248  B4D8               	btfsc	status,2,c
  1039  00124A  D01C               	goto	l585
  1040  00124C  0E01               	movlw	1
  1041  00124E  6E07               	movwf	___lwdiv@counter,c
  1042  001250  D004               	goto	l580
  1043  001252  90D8               	bcf	status,0,c
  1044  001254  3603               	rlcf	___lwdiv@divisor,f,c
  1045  001256  3604               	rlcf	___lwdiv@divisor+1,f,c
  1046  001258  2A07               	incf	___lwdiv@counter,f,c
  1047  00125A                     l580:
  1048  00125A  AE04               	btfss	___lwdiv@divisor+1,7,c
  1049  00125C  D7FA               	goto	l581
  1050  00125E                     u260:
  1051  00125E  90D8               	bcf	status,0,c
  1052  001260  3605               	rlcf	___lwdiv@quotient,f,c
  1053  001262  3606               	rlcf	___lwdiv@quotient+1,f,c
  1054  001264  5003               	movf	___lwdiv@divisor,w,c
  1055  001266  5C01               	subwf	___lwdiv@dividend,w,c
  1056  001268  5004               	movf	___lwdiv@divisor+1,w,c
  1057  00126A  5802               	subwfb	___lwdiv@dividend+1,w,c
  1058  00126C  A0D8               	btfss	status,0,c
  1059  00126E  D005               	goto	l584
  1060  001270  5003               	movf	___lwdiv@divisor,w,c
  1061  001272  5E01               	subwf	___lwdiv@dividend,f,c
  1062  001274  5004               	movf	___lwdiv@divisor+1,w,c
  1063  001276  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1064  001278  8005               	bsf	___lwdiv@quotient,0,c
  1065  00127A                     l584:
  1066  00127A  90D8               	bcf	status,0,c
  1067  00127C  3204               	rrcf	___lwdiv@divisor+1,f,c
  1068  00127E  3203               	rrcf	___lwdiv@divisor,f,c
  1069  001280  2E07               	decfsz	___lwdiv@counter,f,c
  1070  001282  D7ED               	goto	u260
  1071  001284                     l585:
  1072  001284  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1073  001288  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1074  00128C  0012               	return		;funcret
  1075  00128E                     __end_of___lwdiv:
  1076                           	opt stack 0
  1077                           tblptru	equ	0xFF8
  1078                           tblptrh	equ	0xFF7
  1079                           tblptrl	equ	0xFF6
  1080                           tablat	equ	0xFF5
  1081                           prodh	equ	0xFF4
  1082                           prodl	equ	0xFF3
  1083                           wreg	equ	0xFE8
  1084                           postinc2	equ	0xFDE
  1085                           postdec2	equ	0xFDD
  1086                           fsr2h	equ	0xFDA
  1087                           fsr2l	equ	0xFD9
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function _initLCD *****************
  1091 ;; Defined at:
  1092 ;;		line 60 in file "lcd.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;		None
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;		None
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg, status,2, status,0, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;Total ram usage:        1 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; Hardware stack levels required when called:    2
  1113 ;; This function calls:
  1114 ;;		_lcdInst
  1115 ;; This function is called by:
  1116 ;;		_main
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text6
  1121  00128E                     __ptext6:
  1122                           	opt stack 0
  1123  00128E                     _initLCD:
  1124                           	opt stack 28
  1125                           
  1126                           ;lcd.c: 68: _delay((unsigned long)((15)*(8000000/4000.0)));
  1127                           
  1128                           ;incstack = 0
  1129  00128E  0E27               	movlw	39
  1130  001290  6E04               	movwf	??_initLCD& (0+255),c
  1131  001292  0EF5               	movlw	245
  1132  001294                     u447:
  1133  001294  2EE8               	decfsz	wreg,f,c
  1134  001296  D7FE               	bra	u447
  1135  001298  2E04               	decfsz	??_initLCD& (0+255),f,c
  1136  00129A  D7FC               	bra	u447
  1137  00129C  F000               	nop	
  1138                           
  1139                           ;lcd.c: 69: lcdInst(0b00110011);
  1140  00129E  0E33               	movlw	51
  1141  0012A0  ECCB  F009         	call	_lcdInst
  1142                           
  1143                           ;lcd.c: 70: lcdInst(0b00110010);
  1144  0012A4  0E32               	movlw	50
  1145  0012A6  ECCB  F009         	call	_lcdInst
  1146                           
  1147                           ;lcd.c: 71: lcdInst(0b00101000);
  1148  0012AA  0E28               	movlw	40
  1149  0012AC  ECCB  F009         	call	_lcdInst
  1150                           
  1151                           ;lcd.c: 72: lcdInst(0b00001111);
  1152  0012B0  0E0F               	movlw	15
  1153  0012B2  ECCB  F009         	call	_lcdInst
  1154                           
  1155                           ;lcd.c: 73: lcdInst(0b00000110);
  1156  0012B6  0E06               	movlw	6
  1157  0012B8  ECCB  F009         	call	_lcdInst
  1158                           
  1159                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(8000000/4000.0)));;
  1160  0012BC  0E01               	movlw	1
  1161  0012BE  ECCB  F009         	call	_lcdInst
  1162  0012C2  0E27               	movlw	39
  1163  0012C4  6E04               	movwf	??_initLCD& (0+255),c
  1164  0012C6  0EF5               	movlw	245
  1165  0012C8                     u457:
  1166  0012C8  2EE8               	decfsz	wreg,f,c
  1167  0012CA  D7FE               	bra	u457
  1168  0012CC  2E04               	decfsz	??_initLCD& (0+255),f,c
  1169  0012CE  D7FC               	bra	u457
  1170  0012D0  F000               	nop	
  1171                           
  1172                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1173  0012D2  0E0F               	movlw	15
  1174  0012D4  ECCB  F009         	call	_lcdInst
  1175  0012D8  0012               	return		;funcret
  1176  0012DA                     __end_of_initLCD:
  1177                           	opt stack 0
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           prodh	equ	0xFF4
  1183                           prodl	equ	0xFF3
  1184                           wreg	equ	0xFE8
  1185                           postinc2	equ	0xFDE
  1186                           postdec2	equ	0xFDD
  1187                           fsr2h	equ	0xFDA
  1188                           fsr2l	equ	0xFD9
  1189                           status	equ	0xFD8
  1190                           
  1191 ;; *************** function _lcdInst *****************
  1192 ;; Defined at:
  1193 ;;		line 11 in file "lcd.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  data            1    wreg     unsigned char 
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  data            1    2[COMRAM] unsigned char 
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		wreg, status,2, status,0, cstack
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;Total ram usage:        1 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; Hardware stack levels required when called:    1
  1214 ;; This function calls:
  1215 ;;		_lcdNibble
  1216 ;; This function is called by:
  1217 ;;		_main
  1218 ;;		_initLCD
  1219 ;;		_lcd_set_cursor
  1220 ;;		_lcd_shift_cursor
  1221 ;;		_lcd_shift_display
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text7
  1226  001396                     __ptext7:
  1227                           	opt stack 0
  1228  001396                     _lcdInst:
  1229                           	opt stack 29
  1230                           
  1231                           ;incstack = 0
  1232                           ;lcdInst@data stored from wreg
  1233  001396  6E03               	movwf	lcdInst@data,c
  1234                           
  1235                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1236  001398  948C               	bcf	3980,2,c	;volatile
  1237                           
  1238                           ;lcd.c: 20: lcdNibble(data);
  1239  00139A  5003               	movf	lcdInst@data,w,c
  1240  00139C  ECDF  F008         	call	_lcdNibble
  1241                           
  1242                           ;lcd.c: 21: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1243  0013A0  0E42               	movlw	66
  1244  0013A2                     u467:
  1245  0013A2  2EE8               	decfsz	wreg,f,c
  1246  0013A4  D7FE               	bra	u467
  1247  0013A6  D000               	nop2	
  1248  0013A8  0012               	return		;funcret
  1249  0013AA                     __end_of_lcdInst:
  1250                           	opt stack 0
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           prodh	equ	0xFF4
  1256                           prodl	equ	0xFF3
  1257                           wreg	equ	0xFE8
  1258                           postinc2	equ	0xFDE
  1259                           postdec2	equ	0xFDD
  1260                           fsr2h	equ	0xFDA
  1261                           fsr2l	equ	0xFD9
  1262                           status	equ	0xFD8
  1263                           
  1264 ;; *************** function _lcdNibble *****************
  1265 ;; Defined at:
  1266 ;;		line 37 in file "lcd.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  data            1    wreg     unsigned char 
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  data            1    1[COMRAM] unsigned char 
  1271 ;;  temp            1    0[COMRAM] unsigned char 
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;Total ram usage:        2 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; This function calls:
  1288 ;;		Nothing
  1289 ;; This function is called by:
  1290 ;;		_lcdInst
  1291 ;;		_putch
  1292 ;; This function uses a non-reentrant model
  1293 ;;
  1294                           
  1295                           	psect	text8
  1296  0011BE                     __ptext8:
  1297                           	opt stack 0
  1298  0011BE                     _lcdNibble:
  1299                           	opt stack 28
  1300                           
  1301                           ;incstack = 0
  1302                           ;lcdNibble@data stored from wreg
  1303  0011BE  6E02               	movwf	lcdNibble@data,c
  1304                           
  1305                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1306  0011C0  5002               	movf	lcdNibble@data,w,c
  1307  0011C2  0BF0               	andlw	240
  1308  0011C4  6E01               	movwf	lcdNibble@temp,c
  1309                           
  1310                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1311  0011C6  508C               	movf	3980,w,c	;volatile
  1312  0011C8  0B0F               	andlw	15
  1313  0011CA  6E8C               	movwf	3980,c	;volatile
  1314                           
  1315                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1316  0011CC  5001               	movf	lcdNibble@temp,w,c
  1317  0011CE  108C               	iorwf	3980,w,c	;volatile
  1318  0011D0  6E8C               	movwf	3980,c	;volatile
  1319                           
  1320                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1321  0011D2  0E00               	movlw	0
  1322  0011D4  BEF2               	btfsc	intcon,7,c	;volatile
  1323  0011D6  0E01               	movlw	1
  1324  0011D8  6E1E               	movwf	lcd@LCDinterruptState,c
  1325  0011DA  9EF2               	bcf	intcon,7,c	;volatile
  1326  0011DC  868C               	bsf	3980,3,c	;volatile
  1327  0011DE  0E10               	movlw	16
  1328  0011E0                     u477:
  1329  0011E0  2EE8               	decfsz	wreg,f,c
  1330  0011E2  D7FE               	bra	u477
  1331  0011E4  D000               	nop2	
  1332  0011E6  968C               	bcf	3980,3,c	;volatile
  1333  0011E8  0E42               	movlw	66
  1334  0011EA                     u487:
  1335  0011EA  2EE8               	decfsz	wreg,f,c
  1336  0011EC  D7FE               	bra	u487
  1337  0011EE  D000               	nop2	
  1338  0011F0  B01E               	btfsc	lcd@LCDinterruptState,0,c
  1339  0011F2  D002               	bra	u15
  1340  0011F4  9EF2               	bcf	intcon,7,c	;volatile
  1341  0011F6  D001               	bra	u16
  1342  0011F8                     u15:
  1343  0011F8  8EF2               	bsf	intcon,7,c	;volatile
  1344  0011FA                     u16:
  1345                           
  1346                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1347  0011FA  3802               	swapf	lcdNibble@data,w,c
  1348  0011FC  0BF0               	andlw	240
  1349  0011FE  6E02               	movwf	lcdNibble@data,c
  1350                           
  1351                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1352  001200  5002               	movf	lcdNibble@data,w,c
  1353  001202  0BF0               	andlw	240
  1354  001204  6E01               	movwf	lcdNibble@temp,c
  1355                           
  1356                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1357  001206  508C               	movf	3980,w,c	;volatile
  1358  001208  0B0F               	andlw	15
  1359  00120A  6E8C               	movwf	3980,c	;volatile
  1360                           
  1361                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1362  00120C  5001               	movf	lcdNibble@temp,w,c
  1363  00120E  108C               	iorwf	3980,w,c	;volatile
  1364  001210  6E8C               	movwf	3980,c	;volatile
  1365                           
  1366                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(8000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsig
      +                          ned long)((100)*(8000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1367  001212  0E00               	movlw	0
  1368  001214  BEF2               	btfsc	intcon,7,c	;volatile
  1369  001216  0E01               	movlw	1
  1370  001218  6E1E               	movwf	lcd@LCDinterruptState,c
  1371  00121A  9EF2               	bcf	intcon,7,c	;volatile
  1372  00121C  868C               	bsf	3980,3,c	;volatile
  1373  00121E  0E10               	movlw	16
  1374  001220                     u497:
  1375  001220  2EE8               	decfsz	wreg,f,c
  1376  001222  D7FE               	bra	u497
  1377  001224  D000               	nop2	
  1378  001226  968C               	bcf	3980,3,c	;volatile
  1379  001228  0E42               	movlw	66
  1380  00122A                     u507:
  1381  00122A  2EE8               	decfsz	wreg,f,c
  1382  00122C  D7FE               	bra	u507
  1383  00122E  D000               	nop2	
  1384  001230  B01E               	btfsc	lcd@LCDinterruptState,0,c
  1385  001232  D002               	bra	u25
  1386  001234  9EF2               	bcf	intcon,7,c	;volatile
  1387  001236  D001               	bra	u26
  1388  001238                     u25:
  1389  001238  8EF2               	bsf	intcon,7,c	;volatile
  1390  00123A                     u26:
  1391  00123A  0012               	return		;funcret
  1392  00123C                     __end_of_lcdNibble:
  1393                           	opt stack 0
  1394                           tblptru	equ	0xFF8
  1395                           tblptrh	equ	0xFF7
  1396                           tblptrl	equ	0xFF6
  1397                           tablat	equ	0xFF5
  1398                           prodh	equ	0xFF4
  1399                           prodl	equ	0xFF3
  1400                           intcon	equ	0xFF2
  1401                           wreg	equ	0xFE8
  1402                           postinc2	equ	0xFDE
  1403                           postdec2	equ	0xFDD
  1404                           fsr2h	equ	0xFDA
  1405                           fsr2l	equ	0xFD9
  1406                           status	equ	0xFD8
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           prodh	equ	0xFF4
  1412                           prodl	equ	0xFF3
  1413                           intcon	equ	0xFF2
  1414                           wreg	equ	0xFE8
  1415                           postinc2	equ	0xFDE
  1416                           postdec2	equ	0xFDD
  1417                           fsr2h	equ	0xFDA
  1418                           fsr2l	equ	0xFD9
  1419                           status	equ	0xFD8
  1420                           
  1421                           	psect	rparam
  1422  0000                     tblptru	equ	0xFF8
  1423                           tblptrh	equ	0xFF7
  1424                           tblptrl	equ	0xFF6
  1425                           tablat	equ	0xFF5
  1426                           prodh	equ	0xFF4
  1427                           prodl	equ	0xFF3
  1428                           intcon	equ	0xFF2
  1429                           wreg	equ	0xFE8
  1430                           postinc2	equ	0xFDE
  1431                           postdec2	equ	0xFDD
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    16
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     25      33
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1379
                                             24 COMRAM     1     1      0
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1177
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     19      21       1       26.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      21      34        0.0%
DATA                 0      0      21       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 13 04:22:16 2018

                     l83 1334                       l75 116A                       u15 11F8  
                     u16 11FA                       u25 1238                       u26 123A  
            __CFG_CPD$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l171 10C4                      l172 1112                      l173 10CA  
                    l165 105A                      l158 1020                      l167 1082  
                    l159 1030                      l580 125A                      l581 1252  
                    l590 12F0                      l591 12E8                      l584 127A  
                    l585 1284                      l594 1308                      l595 1312  
           __CFG_CPB$OFF 000000                      u260 125E                      u360 10B2  
                    u417 119E                      u290 12F4                      u507 122A  
                    u427 11B4                      u380 111A                      u437 138E  
                    u447 1294                      u457 12C8                      u467 13A2  
                    u477 11E0                      u487 11EA                      u497 1220  
                    _max 0020                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1110 1086                     _ADON 007E10  
                   STR_1 1011                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _LATE 000F8D  
                   _main 1134                     fsr2h 000FDA                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
       __end_of_LCD_LEFT 100C                    ?_main 0001          __end_of___lwdiv 128E  
        __end_of___lwmod 131C                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 13AA  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_readADC 1354  
        __end_of_initLCD 12DA           __CFG_EBTRB$OFF 000000          __end_of_dpowers 100B  
                  _putch 1382                    tablat 000FF5        _LCDinterruptState 001F  
                  status 000FD8           __CFG_PBADEN$ON 000000          __initialization 1354  
           __end_of_main 11BE        __end_of_LCD_RIGHT 100D                   ??_main 0019  
          __activetblptr 000002                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_putch 0001  
                 _OSCCON 000FD3           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??___lwdiv 0005                ??___lwmod 000C                ??_lcdInst 0003  
                 _printf 1016                ??_readADC 0003                ??_initLCD 0004  
           __pdataCOMRAM 0020             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 1378            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_putch 1396       __size_of_lcdNibble 007E                  ??_putch 0003  
                ?_printf 000D     lcd@LCDinterruptState 001E        __end_of_lcdNibble 123C  
                __Hparam 0000                  __Lparam 0000                  ___lwdiv 123C  
                ___lwmod 12DA             __psmallconst 1000                  __pcinit 1354  
                __ramtop 1000                  _lcdInst 1396                  __ptext0 1134  
                __ptext1 131C                  __ptext2 1016                  __ptext3 1382  
                __ptext4 12DA                  __ptext5 123C                  __ptext6 128E  
                __ptext7 1396                  __ptext8 11BE          __size_of_printf 011E  
                _readADC 131C                  _initLCD 128E                  _counter 001C  
                _dpowers 1001                _LCD_RIGHT 100C     end_of_initialization 1378  
  __end_of_LCD_SIZE_HORZ 100F    __end_of_LCD_SIZE_VERT 100E            __Lmediumconst 0000  
                printf@c 0018                  printf@f 000D                  postdec2 000FDD  
                postinc2 000FDE                _TRISCbits 000F94            __pidataCOMRAM 13AA  
         __end_of_printf 1134      start_initialization 1354         __CFG_OSC$INTIO67 000000  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0011            _analog_result 001A  
            __pbssCOMRAM 001A         ___lwdiv@dividend 0001        __CFG_CCP2MX$PORTC 000000  
              _lcdNibble 11BE                 ?___lwdiv 0001                 ?___lwmod 0008  
               ?_lcdInst 0001                 ?_readADC 0001                 ?_initLCD 0001  
            __smallconst 1000         ___lwdiv@quotient 0005           __size_of_putch 0014  
               _LCD_LEFT 100B                 _LATCbits 000F8B                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001               _ADCON0bits 000FC2  
             _ADCON2bits 000FC0            lcdNibble@data 0002               printf@flag 0014  
          lcdNibble@temp 0001               printf@prec 0015           _LCD_HORZ_LIMIT 1010  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of___lwdiv 0052         __size_of___lwmod 0042           readADC@channel 0005  
       __size_of_lcdInst 0014         __size_of_readADC 0038         __size_of_initLCD 004C  
 __end_of_LCD_HORZ_LIMIT 1011          ___lwdiv@divisor 0003          ___lwdiv@counter 0007  
         _LCD_VERT_LIMIT 100F            __size_of_main 008A              ??_lcdNibble 0001  
              printf@val 0016                putch@data 0003               _INTCONbits 000FF2  
 __end_of_LCD_VERT_LIMIT 1010            _LCD_SIZE_HORZ 100E         ___lwmod@dividend 0008  
          _LCD_SIZE_VERT 100D                 printf@ap 0012              lcdInst@data 0003  
        ___lwmod@divisor 000A          ___lwmod@counter 000C  
