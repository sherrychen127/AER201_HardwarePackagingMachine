

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 27 13:47:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  002F68                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _white_tape
    94  002F68  0001               	dw	1
    95                           
    96                           	psect	mediumconst
    97  00FE5E                     __pmediumconst:
    98                           	opt stack 0
    99  00FE5E  00                 	db	0
   100  00FE5F                     _keys:
   101                           	opt stack 0
   102  00FE5F  31                 	db	49
   103  00FE60  32                 	db	50
   104  00FE61  33                 	db	51
   105  00FE62  41                 	db	65
   106  00FE63  34                 	db	52
   107  00FE64  35                 	db	53
   108  00FE65  36                 	db	54
   109  00FE66  42                 	db	66
   110  00FE67  37                 	db	55
   111  00FE68  38                 	db	56
   112  00FE69  39                 	db	57
   113  00FE6A  43                 	db	67
   114  00FE6B  2A                 	db	42
   115  00FE6C  30                 	db	48
   116  00FE6D  23                 	db	35
   117  00FE6E  44                 	db	68
   118  00FE6F  00                 	db	0
   119  00FE70                     __end_of_keys:
   120                           	opt stack 0
   121  00FE70                     _dpowers:
   122                           	opt stack 0
   123  00FE70  0001               	dw	1
   124  00FE72  000A               	dw	10
   125  00FE74  0064               	dw	100
   126  00FE76  03E8               	dw	1000
   127  00FE78  2710               	dw	10000
   128  00FE7A                     __end_of_dpowers:
   129                           	opt stack 0
   130  00FE7A                     _array:
   131                           	opt stack 0
   132  00FE7A  30                 	db	48
   133  00FE7B  31                 	db	49
   134  00FE7C  00                 	db	0
   135  00FE7D                     __end_of_array:
   136                           	opt stack 0
   137  00FE7D                     _LCD_LEFT:
   138                           	opt stack 0
   139  00FE7D  00                 	db	0
   140  00FE7E                     __end_of_LCD_LEFT:
   141                           	opt stack 0
   142  00FE7E                     _LCD_RIGHT:
   143                           	opt stack 0
   144  00FE7E  01                 	db	1
   145  00FE7F                     __end_of_LCD_RIGHT:
   146                           	opt stack 0
   147  00FE7F                     _LCD_SIZE_VERT:
   148                           	opt stack 0
   149  00FE7F  02                 	db	2
   150  00FE80                     __end_of_LCD_SIZE_VERT:
   151                           	opt stack 0
   152  00FE80                     _LCD_SIZE_HORZ:
   153                           	opt stack 0
   154  00FE80  10                 	db	16
   155  00FE81                     __end_of_LCD_SIZE_HORZ:
   156                           	opt stack 0
   157  00FE81                     _LCD_VERT_LIMIT:
   158                           	opt stack 0
   159  00FE81  02                 	db	2
   160  00FE82                     __end_of_LCD_VERT_LIMIT:
   161                           	opt stack 0
   162  00FE82                     _LCD_HORZ_LIMIT:
   163                           	opt stack 0
   164  00FE82  28                 	db	40
   165  00FE83                     __end_of_LCD_HORZ_LIMIT:
   166                           	opt stack 0
   167  00FE83                     _strs:
   168                           	opt stack 0
   169  00FE83  42                 	db	66
   170  00FE84  00                 	db	0
   171  00FE85  00                 	db	0
   172  00FE86  00                 	db	0
   173  00FE87  00                 	db	0
   174  00FE88  4E                 	db	78
   175  00FE89  00                 	db	0
   176  00FE8A  00                 	db	0
   177  00FE8B  00                 	db	0
   178  00FE8C  00                 	db	0
   179  00FE8D  53                 	db	83
   180  00FE8E  00                 	db	0
   181  00FE8F  00                 	db	0
   182  00FE90  00                 	db	0
   183  00FE91  00                 	db	0
   184  00FE92  57                 	db	87
   185  00FE93  00                 	db	0
   186  00FE94  00                 	db	0
   187  00FE95  00                 	db	0
   188  00FE96  00                 	db	0
   189  00FE97  42                 	db	66
   190  00FE98  4E                 	db	78
   191  00FE99  00                 	db	0
   192  00FE9A  00                 	db	0
   193  00FE9B  00                 	db	0
   194  00FE9C  42                 	db	66
   195  00FE9D  53                 	db	83
   196  00FE9E  00                 	db	0
   197  00FE9F  00                 	db	0
   198  00FEA0  00                 	db	0
   199  00FEA1  42                 	db	66
   200  00FEA2  57                 	db	87
   201  00FEA3  00                 	db	0
   202  00FEA4  00                 	db	0
   203  00FEA5  00                 	db	0
   204  00FEA6  42                 	db	66
   205  00FEA7  42                 	db	66
   206  00FEA8  4E                 	db	78
   207  00FEA9  00                 	db	0
   208  00FEAA  00                 	db	0
   209  00FEAB  42                 	db	66
   210  00FEAC  42                 	db	66
   211  00FEAD  53                 	db	83
   212  00FEAE  00                 	db	0
   213  00FEAF  00                 	db	0
   214  00FEB0  42                 	db	66
   215  00FEB1  42                 	db	66
   216  00FEB2  57                 	db	87
   217  00FEB3  00                 	db	0
   218  00FEB4  00                 	db	0
   219  00FEB5  42                 	db	66
   220  00FEB6  4E                 	db	78
   221  00FEB7  57                 	db	87
   222  00FEB8  00                 	db	0
   223  00FEB9  00                 	db	0
   224  00FEBA  42                 	db	66
   225  00FEBB  53                 	db	83
   226  00FEBC  57                 	db	87
   227  00FEBD  00                 	db	0
   228  00FEBE  00                 	db	0
   229  00FEBF  42                 	db	66
   230  00FEC0  57                 	db	87
   231  00FEC1  57                 	db	87
   232  00FEC2  00                 	db	0
   233  00FEC3  00                 	db	0
   234  00FEC4  42                 	db	66
   235  00FEC5  4E                 	db	78
   236  00FEC6  57                 	db	87
   237  00FEC7  57                 	db	87
   238  00FEC8  00                 	db	0
   239  00FEC9  42                 	db	66
   240  00FECA  53                 	db	83
   241  00FECB  57                 	db	87
   242  00FECC  57                 	db	87
   243  00FECD  00                 	db	0
   244  00FECE  42                 	db	66
   245  00FECF  42                 	db	66
   246  00FED0  53                 	db	83
   247  00FED1  57                 	db	87
   248  00FED2  00                 	db	0
   249  00FED3  42                 	db	66
   250  00FED4  42                 	db	66
   251  00FED5  4E                 	db	78
   252  00FED6  57                 	db	87
   253  00FED7  00                 	db	0
   254  00FED8  42                 	db	66
   255  00FED9  4E                 	db	78
   256  00FEDA  4E                 	db	78
   257  00FEDB  57                 	db	87
   258  00FEDC  00                 	db	0
   259  00FEDD  42                 	db	66
   260  00FEDE  4E                 	db	78
   261  00FEDF  4E                 	db	78
   262  00FEE0  4E                 	db	78
   263  00FEE1  00                 	db	0
   264  00FEE2  42                 	db	66
   265  00FEE3  57                 	db	87
   266  00FEE4  57                 	db	87
   267  00FEE5  57                 	db	87
   268  00FEE6  00                 	db	0
   269  00FEE7                     __end_of_strs:
   270                           	opt stack 0
   271  0000                     _PORTAbits	set	3968
   272  0000                     _TRISAbits	set	3986
   273  0000                     _TRISDbits	set	3989
   274  0000                     _TRISCbits	set	3988
   275  0000                     _LATCbits	set	3979
   276  0000                     _ADRESL	set	4035
   277  0000                     _ADRESH	set	4036
   278  0000                     _ADCON0bits	set	4034
   279  0000                     _PORTB	set	3969
   280  0000                     _ADCON1	set	4033
   281  0000                     _ADCON0	set	4034
   282  0000                     _TRISE	set	3990
   283  0000                     _TRISD	set	3989
   284  0000                     _TRISC	set	3988
   285  0000                     _TRISB	set	3987
   286  0000                     _TRISA	set	3986
   287  0000                     _LATE	set	3981
   288  0000                     _LATC	set	3979
   289  0000                     _LATB	set	3978
   290  0000                     _LATA	set	3977
   291  0000                     _INTCONbits	set	4082
   292  0000                     _LATD	set	3980
   293  0000                     _LATDbits	set	3980
   294  0000                     _ADON	set	32272
   295  0000                     _INT1IF	set	32640
   296  0000                     _INT1IE	set	32643
   297  00FEE7                     STR_26:
   298  00FEE7  42                 	db	66	;'B'
   299  00FEE8  3A                 	db	58	;':'
   300  00FEE9  25                 	db	37
   301  00FEEA  64                 	db	100	;'d'
   302  00FEEB  20                 	db	32
   303  00FEEC  53                 	db	83	;'S'
   304  00FEED  3A                 	db	58	;':'
   305  00FEEE  25                 	db	37
   306  00FEEF  64                 	db	100	;'d'
   307  00FEF0  20                 	db	32
   308  00FEF1  4E                 	db	78	;'N'
   309  00FEF2  3A                 	db	58	;':'
   310  00FEF3  25                 	db	37
   311  00FEF4  64                 	db	100	;'d'
   312  00FEF5  20                 	db	32
   313  00FEF6  57                 	db	87	;'W'
   314  00FEF7  3A                 	db	58	;':'
   315  00FEF8  25                 	db	37
   316  00FEF9  64                 	db	100	;'d'
   317  00FEFA  00                 	db	0
   318  00FEFB                     STR_41:
   319  00FEFB  31                 	db	49	;'1'
   320  00FEFC  3A                 	db	58	;':'
   321  00FEFD  20                 	db	32
   322  00FEFE  6F                 	db	111	;'o'
   323  00FEFF  70                 	db	112	;'p'
   324  00FF00  65                 	db	101	;'e'
   325  00FF01  72                 	db	114	;'r'
   326  00FF02  61                 	db	97	;'a'
   327  00FF03  74                 	db	116	;'t'
   328  00FF04  69                 	db	105	;'i'
   329  00FF05  6F                 	db	111	;'o'
   330  00FF06  6E                 	db	110	;'n'
   331  00FF07  20                 	db	32
   332  00FF08  74                 	db	116	;'t'
   333  00FF09  69                 	db	105	;'i'
   334  00FF0A  6D                 	db	109	;'m'
   335  00FF0B  65                 	db	101	;'e'
   336  00FF0C  00                 	db	0
   337  00FF0D                     STR_6:
   338  00FF0D  61                 	db	97	;'a'
   339  00FF0E  73                 	db	115	;'s'
   340  00FF0F  73                 	db	115	;'s'
   341  00FF10  65                 	db	101	;'e'
   342  00FF11  6D                 	db	109	;'m'
   343  00FF12  62                 	db	98	;'b'
   344  00FF13  6C                 	db	108	;'l'
   345  00FF14  79                 	db	121	;'y'
   346  00FF15  20                 	db	32
   347  00FF16  73                 	db	115	;'s'
   348  00FF17  74                 	db	116	;'t'
   349  00FF18  65                 	db	101	;'e'
   350  00FF19  70                 	db	112	;'p'
   351  00FF1A  3A                 	db	58	;':'
   352  00FF1B  25                 	db	37
   353  00FF1C  64                 	db	100	;'d'
   354  00FF1D  00                 	db	0
   355  00FF1E                     STR_42:
   356  00FF1E  57                 	db	87	;'W'
   357  00FF1F  72                 	db	114	;'r'
   358  00FF20  6F                 	db	111	;'o'
   359  00FF21  6E                 	db	110	;'n'
   360  00FF22  67                 	db	103	;'g'
   361  00FF23  20                 	db	32
   362  00FF24  6E                 	db	110	;'n'
   363  00FF25  75                 	db	117	;'u'
   364  00FF26  6D                 	db	109	;'m'
   365  00FF27  62                 	db	98	;'b'
   366  00FF28  65                 	db	101	;'e'
   367  00FF29  72                 	db	114	;'r'
   368  00FF2A  21                 	db	33
   369  00FF2B  20                 	db	32
   370  00FF2C  00                 	db	0
   371  00FF2D                     STR_1:
   372  00FF2D  61                 	db	97	;'a'
   373  00FF2E  73                 	db	115	;'s'
   374  00FF2F  73                 	db	115	;'s'
   375  00FF30  65                 	db	101	;'e'
   376  00FF31  6D                 	db	109	;'m'
   377  00FF32  62                 	db	98	;'b'
   378  00FF33  6C                 	db	108	;'l'
   379  00FF34  79                 	db	121	;'y'
   380  00FF35  20                 	db	32
   381  00FF36  73                 	db	115	;'s'
   382  00FF37  74                 	db	116	;'t'
   383  00FF38  65                 	db	101	;'e'
   384  00FF39  70                 	db	112	;'p'
   385  00FF3A  3A                 	db	58	;':'
   386  00FF3B  00                 	db	0
   387  00FF3C                     STR_2:
   388  00FF3C  66                 	db	102	;'f'
   389  00FF3D  61                 	db	97	;'a'
   390  00FF3E  73                 	db	115	;'s'
   391  00FF3F  74                 	db	116	;'t'
   392  00FF40  65                 	db	101	;'e'
   393  00FF41  6E                 	db	110	;'n'
   394  00FF42  65                 	db	101	;'e'
   395  00FF43  72                 	db	114	;'r'
   396  00FF44  20                 	db	32
   397  00FF45  73                 	db	115	;'s'
   398  00FF46  65                 	db	101	;'e'
   399  00FF47  74                 	db	116	;'t'
   400  00FF48  3A                 	db	58	;':'
   401  00FF49  00                 	db	0
   402  00FF4A                     STR_40:
   403  00FF4A  79                 	db	121	;'y'
   404  00FF4B  6F                 	db	111	;'o'
   405  00FF4C  75                 	db	117	;'u'
   406  00FF4D  27                 	db	39
   407  00FF4E  72                 	db	114	;'r'
   408  00FF4F  65                 	db	101	;'e'
   409  00FF50  20                 	db	32
   410  00FF51  64                 	db	100	;'d'
   411  00FF52  6F                 	db	111	;'o'
   412  00FF53  6E                 	db	110	;'n'
   413  00FF54  65                 	db	101	;'e'
   414  00FF55  00                 	db	0
   415  00FF56                     STR_55:
   416  00FF56  57                 	db	87	;'W'
   417  00FF57  72                 	db	114	;'r'
   418  00FF58  6F                 	db	111	;'o'
   419  00FF59  6E                 	db	110	;'n'
   420  00FF5A  67                 	db	103	;'g'
   421  00FF5B  20                 	db	32
   422  00FF5C  69                 	db	105	;'i'
   423  00FF5D  6E                 	db	110	;'n'
   424  00FF5E  70                 	db	112	;'p'
   425  00FF5F  75                 	db	117	;'u'
   426  00FF60  74                 	db	116	;'t'
   427  00FF61  00                 	db	0
   428  00FF62                     STR_50:
   429  00FF62  77                 	db	119	;'w'
   430  00FF63  72                 	db	114	;'r'
   431  00FF64  6F                 	db	111	;'o'
   432  00FF65  6E                 	db	110	;'n'
   433  00FF66  67                 	db	103	;'g'
   434  00FF67  20                 	db	32
   435  00FF68  73                 	db	115	;'s'
   436  00FF69  65                 	db	101	;'e'
   437  00FF6A  74                 	db	116	;'t'
   438  00FF6B  21                 	db	33
   439  00FF6C  00                 	db	0
   440  00FF6D                     STR_39:
   441  00FF6D  72                 	db	114	;'r'
   442  00FF6E  65                 	db	101	;'e'
   443  00FF6F  6D                 	db	109	;'m'
   444  00FF70  61                 	db	97	;'a'
   445  00FF71  69                 	db	105	;'i'
   446  00FF72  6E                 	db	110	;'n'
   447  00FF73  3A                 	db	58	;':'
   448  00FF74  25                 	db	37
   449  00FF75  64                 	db	100	;'d'
   450  00FF76  00                 	db	0
   451  00FF77                     STR_47:
   452  00FF77  63                 	db	99	;'c'
   453  00FF78  6F                 	db	111	;'o'
   454  00FF79  72                 	db	114	;'r'
   455  00FF7A  72                 	db	114	;'r'
   456  00FF7B  65                 	db	101	;'e'
   457  00FF7C  63                 	db	99	;'c'
   458  00FF7D  74                 	db	116	;'t'
   459  00FF7E  21                 	db	33
   460  00FF7F  00                 	db	0
   461  00FF80                     STR_56:
   462  00FF80  54                 	db	84	;'T'
   463  00FF81  4F                 	db	79	;'O'
   464  00FF82  4F                 	db	79	;'O'
   465  00FF83  20                 	db	32
   466  00FF84  4D                 	db	77	;'M'
   467  00FF85  41                 	db	65	;'A'
   468  00FF86  4E                 	db	78	;'N'
   469  00FF87  59                 	db	89	;'Y'
   470  00FF88  00                 	db	0
   471  00FF89                     STR_4:
   472  00FF89  6E                 	db	110	;'n'
   473  00FF8A  75                 	db	117	;'u'
   474  00FF8B  6D                 	db	109	;'m'
   475  00FF8C  62                 	db	98	;'b'
   476  00FF8D  65                 	db	101	;'e'
   477  00FF8E  72                 	db	114	;'r'
   478  00FF8F  3A                 	db	58	;':'
   479  00FF90  00                 	db	0
   480  00FF91                     STR_78:
   481  00FF91  28                 	db	40
   482  00FF92  6E                 	db	110	;'n'
   483  00FF93  75                 	db	117	;'u'
   484  00FF94  6C                 	db	108	;'l'
   485  00FF95  6C                 	db	108	;'l'
   486  00FF96  29                 	db	41
   487  00FF97  00                 	db	0
   488  00FF98                     STR_53:
   489  00FF98  77                 	db	119	;'w'
   490  00FF99  72                 	db	114	;'r'
   491  00FF9A  6F                 	db	111	;'o'
   492  00FF9B  6E                 	db	110	;'n'
   493  00FF9C  67                 	db	103	;'g'
   494  00FF9D  21                 	db	33
   495  00FF9E  00                 	db	0
   496  00FF9F                     STR_5:
   497  00FF9F  44                 	db	68	;'D'
   498  00FFA0  6F                 	db	111	;'o'
   499  00FFA1  6E                 	db	110	;'n'
   500  00FFA2  65                 	db	101	;'e'
   501  00FFA3  21                 	db	33
   502  00FFA4  00                 	db	0
   503  00FFA5                     STR_57:
   504  00FFA5  6F                 	db	111	;'o'
   505  00FFA6  6B                 	db	107	;'k'
   506  00FFA7  61                 	db	97	;'a'
   507  00FFA8  79                 	db	121	;'y'
   508  00FFA9  21                 	db	33
   509  00FFAA  00                 	db	0
   510  00FFAB                     STR_76:
   511  00FFAB  42                 	db	66	;'B'
   512  00FFAC  4E                 	db	78	;'N'
   513  00FFAD  4E                 	db	78	;'N'
   514  00FFAE  4E                 	db	78	;'N'
   515  00FFAF  00                 	db	0
   516  00FFB0                     STR_74:
   517  00FFB0  42                 	db	66	;'B'
   518  00FFB1  42                 	db	66	;'B'
   519  00FFB2  4E                 	db	78	;'N'
   520  00FFB3  57                 	db	87	;'W'
   521  00FFB4  00                 	db	0
   522  00FFB5                     STR_75:
   523  00FFB5  42                 	db	66	;'B'
   524  00FFB6  4E                 	db	78	;'N'
   525  00FFB7  4E                 	db	78	;'N'
   526  00FFB8  57                 	db	87	;'W'
   527  00FFB9  00                 	db	0
   528  00FFBA                     STR_73:
   529  00FFBA  42                 	db	66	;'B'
   530  00FFBB  42                 	db	66	;'B'
   531  00FFBC  53                 	db	83	;'S'
   532  00FFBD  57                 	db	87	;'W'
   533  00FFBE  00                 	db	0
   534  00FFBF                     STR_71:
   535  00FFBF  42                 	db	66	;'B'
   536  00FFC0  4E                 	db	78	;'N'
   537  00FFC1  57                 	db	87	;'W'
   538  00FFC2  57                 	db	87	;'W'
   539  00FFC3  00                 	db	0
   540  00FFC4                     STR_72:
   541  00FFC4  42                 	db	66	;'B'
   542  00FFC5  53                 	db	83	;'S'
   543  00FFC6  57                 	db	87	;'W'
   544  00FFC7  57                 	db	87	;'W'
   545  00FFC8  00                 	db	0
   546  00FFC9                     STR_77:
   547  00FFC9  42                 	db	66	;'B'
   548  00FFCA  57                 	db	87	;'W'
   549  00FFCB  57                 	db	87	;'W'
   550  00FFCC  57                 	db	87	;'W'
   551  00FFCD  00                 	db	0
   552  00FFCE                     STR_7:
   553  00FFCE  73                 	db	115	;'s'
   554  00FFCF  74                 	db	116	;'t'
   555  00FFD0  65                 	db	101	;'e'
   556  00FFD1  70                 	db	112	;'p'
   557  00FFD2  00                 	db	0
   558  00FFD3                     STR_65:
   559  00FFD3  42                 	db	66	;'B'
   560  00FFD4  42                 	db	66	;'B'
   561  00FFD5  4E                 	db	78	;'N'
   562  00FFD6  00                 	db	0
   563  00FFD7                     STR_66:
   564  00FFD7  42                 	db	66	;'B'
   565  00FFD8  42                 	db	66	;'B'
   566  00FFD9  53                 	db	83	;'S'
   567  00FFDA  00                 	db	0
   568  00FFDB                     STR_67:
   569  00FFDB  42                 	db	66	;'B'
   570  00FFDC  42                 	db	66	;'B'
   571  00FFDD  57                 	db	87	;'W'
   572  00FFDE  00                 	db	0
   573  00FFDF                     STR_70:
   574  00FFDF  42                 	db	66	;'B'
   575  00FFE0  57                 	db	87	;'W'
   576  00FFE1  57                 	db	87	;'W'
   577  00FFE2  00                 	db	0
   578  00FFE3                     STR_14:
   579  00FFE3  20                 	db	32
   580  00FFE4  42                 	db	66	;'B'
   581  00FFE5  3A                 	db	58	;':'
   582  00FFE6  00                 	db	0
   583  00FFE7                     STR_16:
   584  00FFE7  20                 	db	32
   585  00FFE8  4E                 	db	78	;'N'
   586  00FFE9  3A                 	db	58	;':'
   587  00FFEA  00                 	db	0
   588  00FFEB                     STR_20:
   589  00FFEB  20                 	db	32
   590  00FFEC  57                 	db	87	;'W'
   591  00FFED  3A                 	db	58	;':'
   592  00FFEE  00                 	db	0
   593  00FFEF                     STR_29:
   594  00FFEF  53                 	db	83	;'S'
   595  00FFF0  3A                 	db	58	;':'
   596  00FFF1  00                 	db	0
   597  00FFF2                     STR_18:
   598  00FFF2  20                 	db	32
   599  00FFF3  53                 	db	83	;'S'
   600  00FFF4  00                 	db	0
   601  00FFF5                     STR_3:
   602  00FFF5  25                 	db	37
   603  00FFF6  73                 	db	115	;'s'
   604  00FFF7  00                 	db	0
   605  00FFF8                     STR_11:
   606  00FFF8  2C                 	db	44
   607  00FFF9  00                 	db	0
   608  00FFFA                     STR_43:
   609  00FFFA  42                 	db	66	;'B'
   610  00FFFB  00                 	db	0
   611  00FFFC                     STR_23:
   612  00FFFC  43                 	db	67	;'C'
   613  00FFFD  00                 	db	0
   614  0000                     
   615                           ; #config settings
   616  00FFFE  00                 	db	0	; dummy byte at the end
   617  0000                     
   618                           	psect	cinit
   619  002B5C                     __pcinit:
   620                           	opt stack 0
   621  002B5C                     start_initialization:
   622                           	opt stack 0
   623  002B5C                     __initialization:
   624                           	opt stack 0
   625                           
   626                           ; Initialize objects allocated to COMRAM (2 bytes)
   627                           ; load TBLPTR registers with __pidataCOMRAM
   628  002B5C  0E68               	movlw	low __pidataCOMRAM
   629  002B5E  6EF6               	movwf	tblptrl,c
   630  002B60  0E2F               	movlw	high __pidataCOMRAM
   631  002B62  6EF7               	movwf	tblptrh,c
   632  002B64  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   633  002B66  6EF8               	movwf	tblptru,c
   634  002B68  0009               	tblrd		*+	;fetch initializer
   635  002B6A  CFF5 F06A          	movff	tablat,__pdataCOMRAM
   636  002B6E  0009               	tblrd		*+	;fetch initializer
   637  002B70  CFF5 F06B          	movff	tablat,__pdataCOMRAM+1
   638                           
   639                           ; Clear objects allocated to BANK2 (200 bytes)
   640  002B74  EE02  F000         	lfsr	0,__pbssBANK2
   641  002B78  0EC8               	movlw	200
   642  002B7A                     clear_0:
   643  002B7A  6AEE               	clrf	postinc0,c
   644  002B7C  06E8               	decf	wreg,f,c
   645  002B7E  E1FD               	bnz	clear_0
   646                           
   647                           ; Clear objects allocated to BANK1 (128 bytes)
   648  002B80  EE01  F000         	lfsr	0,__pbssBANK1
   649  002B84  0E80               	movlw	128
   650  002B86                     clear_1:
   651  002B86  6AEE               	clrf	postinc0,c
   652  002B88  06E8               	decf	wreg,f,c
   653  002B8A  E1FD               	bnz	clear_1
   654                           
   655                           ; Clear objects allocated to BANK0 (103 bytes)
   656  002B8C  EE00  F080         	lfsr	0,__pbssBANK0
   657  002B90  0E67               	movlw	103
   658  002B92                     clear_2:
   659  002B92  6AEE               	clrf	postinc0,c
   660  002B94  06E8               	decf	wreg,f,c
   661  002B96  E1FD               	bnz	clear_2
   662                           
   663                           ; Clear objects allocated to COMRAM (52 bytes)
   664  002B98  EE00  F036         	lfsr	0,__pbssCOMRAM
   665  002B9C  0E34               	movlw	52
   666  002B9E                     clear_3:
   667  002B9E  6AEE               	clrf	postinc0,c
   668  002BA0  06E8               	decf	wreg,f,c
   669  002BA2  E1FD               	bnz	clear_3
   670  002BA4                     end_of_initialization:
   671                           	opt stack 0
   672  002BA4                     __end_of__initialization:
   673                           	opt stack 0
   674  002BA4  906C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   675  002BA6  926C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   676  002BA8  0100               	movlb	0
   677  002BAA  EF34  F007         	goto	_main	;jump to C main() function
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           
   685                           	psect	bssCOMRAM
   686  000036                     __pbssCOMRAM:
   687                           	opt stack 0
   688  000036                     _compartment_number:
   689                           	opt stack 0
   690  000036                     	ds	16
   691  000046                     _mode:
   692                           	opt stack 0
   693  000046                     	ds	2
   694  000048                     _W_count:
   695                           	opt stack 0
   696  000048                     	ds	2
   697  00004A                     _N_count:
   698                           	opt stack 0
   699  00004A                     	ds	2
   700  00004C                     _S_count:
   701                           	opt stack 0
   702  00004C                     	ds	2
   703  00004E                     _B_count:
   704                           	opt stack 0
   705  00004E                     	ds	2
   706  000050                     _W:
   707                           	opt stack 0
   708  000050                     	ds	2
   709  000052                     _S:
   710                           	opt stack 0
   711  000052                     	ds	2
   712  000054                     _N:
   713                           	opt stack 0
   714  000054                     	ds	2
   715  000056                     _B:
   716                           	opt stack 0
   717  000056                     	ds	2
   718  000058                     _counter_step:
   719                           	opt stack 0
   720  000058                     	ds	2
   721  00005A                     _assembly_step:
   722                           	opt stack 0
   723  00005A                     	ds	2
   724  00005C                     _state:
   725                           	opt stack 0
   726  00005C                     	ds	2
   727  00005E                     _i:
   728                           	opt stack 0
   729  00005E                     	ds	2
   730  000060                     _temp:
   731                           	opt stack 0
   732  000060                     	ds	1
   733  000061                     	ds	1
   734  000062                     _LCDinterruptState:
   735                           	opt stack 0
   736  000062                     	ds	1
   737  000063                     _current_set2:
   738                           	opt stack 0
   739  000063                     	ds	5
   740  000068                     _number:
   741                           	opt stack 0
   742  000068                     	ds	2
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           
   750                           	psect	dataCOMRAM
   751  00006A                     __pdataCOMRAM:
   752                           	opt stack 0
   753  00006A                     _white_tape:
   754                           	opt stack 0
   755  00006A                     	ds	2
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           
   763                           	psect	bssBANK0
   764  000080                     __pbssBANK0:
   765                           	opt stack 0
   766  000080                     _W_array:
   767                           	opt stack 0
   768  000080                     	ds	16
   769  000090                     _N_array:
   770                           	opt stack 0
   771  000090                     	ds	16
   772  0000A0                     _B_array:
   773                           	opt stack 0
   774  0000A0                     	ds	16
   775  0000B0                     _compartment_array:
   776                           	opt stack 0
   777  0000B0                     	ds	16
   778  0000C0                     _time:
   779                           	opt stack 0
   780  0000C0                     	ds	7
   781  0000C7                     _counter_test:
   782                           	opt stack 0
   783  0000C7                     	ds	2
   784  0000C9                     _operation_time:
   785                           	opt stack 0
   786  0000C9                     	ds	2
   787  0000CB                     _operation:
   788                           	opt stack 0
   789  0000CB                     	ds	2
   790  0000CD                     _motor_counter:
   791                           	opt stack 0
   792  0000CD                     	ds	2
   793  0000CF                     _change_mode:
   794                           	opt stack 0
   795  0000CF                     	ds	2
   796  0000D1                     _prev_state:
   797                           	opt stack 0
   798  0000D1                     	ds	2
   799  0000D3                     _total_number:
   800                           	opt stack 0
   801  0000D3                     	ds	2
   802  0000D5                     _valid:
   803                           	opt stack 0
   804  0000D5                     	ds	2
   805  0000D7                     _error:
   806                           	opt stack 0
   807  0000D7                     	ds	2
   808  0000D9                     _counter:
   809                           	opt stack 0
   810  0000D9                     	ds	2
   811  0000DB                     _angle:
   812                           	opt stack 0
   813  0000DB                     	ds	2
   814  0000DD                     _temp_set:
   815                           	opt stack 0
   816  0000DD                     	ds	5
   817  0000E2                     _current_set:
   818                           	opt stack 0
   819  0000E2                     	ds	5
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           
   827                           	psect	bssBANK1
   828  000100                     __pbssBANK1:
   829                           	opt stack 0
   830  000100                     _S_array:
   831                           	opt stack 0
   832  000100                     	ds	16
   833  000110                     _prev_number:
   834                           	opt stack 0
   835  000110                     	ds	16
   836  000120                     _final_number:
   837                           	opt stack 0
   838  000120                     	ds	16
   839  000130                     _prev_set:
   840                           	opt stack 0
   841  000130                     	ds	40
   842  000158                     _final_set:
   843                           	opt stack 0
   844  000158                     	ds	40
   845                           tblptru	equ	0xFF8
   846                           tblptrh	equ	0xFF7
   847                           tblptrl	equ	0xFF6
   848                           tablat	equ	0xFF5
   849                           postinc0	equ	0xFEE
   850                           wreg	equ	0xFE8
   851                           
   852                           	psect	bssBANK2
   853  000200                     __pbssBANK2:
   854                           	opt stack 0
   855  000200                     _fastener:
   856                           	opt stack 0
   857  000200                     	ds	200
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           
   865                           	psect	cstackBANK1
   866  000180                     __pcstackBANK1:
   867                           	opt stack 0
   868  000180                     printf@flag:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x0
   872  000180                     	ds	1
   873  000181                     printf@prec:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x1
   877  000181                     	ds	1
   878  000182                     printf@ap:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x2
   882  000182                     	ds	2
   883  000184                     printf@cp:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x4
   887  000184                     	ds	2
   888  000186                     printf@val:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x6
   892  000186                     	ds	2
   893  000188                     printf@c:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x8
   897  000188                     	ds	1
   898  000189                     ??_main:
   899                           
   900                           ; 1 bytes @ 0x9
   901  000189                     	ds	3
   902                           tblptru	equ	0xFF8
   903                           tblptrh	equ	0xFF7
   904                           tblptrl	equ	0xFF6
   905                           tablat	equ	0xFF5
   906                           postinc0	equ	0xFEE
   907                           wreg	equ	0xFE8
   908                           
   909                           	psect	cstackBANK0
   910  0000E7                     __pcstackBANK0:
   911                           	opt stack 0
   912  0000E7                     ??_servoRotate0:
   913  0000E7                     ??_servoRotate180:
   914  0000E7                     ??_motorStart_0:
   915  0000E7                     ??_motorStop_0:
   916  0000E7                     ?___wmul:
   917                           	opt stack 0
   918  0000E7                     ?___lwdiv:
   919                           	opt stack 0
   920  0000E7                     lcdNibble@temp:
   921                           	opt stack 0
   922  0000E7                     ___wmul@multiplier:
   923                           	opt stack 0
   924  0000E7                     ___lwdiv@dividend:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x0
   928  0000E7                     	ds	1
   929  0000E8                     lcdNibble@data:
   930                           	opt stack 0
   931  0000E8                     servoRotate180@i:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x1
   935  0000E8                     	ds	1
   936  0000E9                     lcdInst@data:
   937                           	opt stack 0
   938  0000E9                     putch@data:
   939                           	opt stack 0
   940  0000E9                     ___wmul@multiplicand:
   941                           	opt stack 0
   942  0000E9                     ___lwdiv@divisor:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x2
   946  0000E9                     	ds	1
   947  0000EA                     ??_initLCD:
   948  0000EA                     ?_read_IR:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x3
   952  0000EA                     	ds	1
   953  0000EB                     ___lwdiv@counter:
   954                           	opt stack 0
   955  0000EB                     ___wmul@product:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x4
   959  0000EB                     	ds	1
   960  0000EC                     ??_read_IR:
   961  0000EC                     ___lwdiv@quotient:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x5
   965  0000EC                     	ds	1
   966  0000ED                     strncpy@to:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x6
   970  0000ED                     	ds	1
   971  0000EE                     ?___lwmod:
   972                           	opt stack 0
   973  0000EE                     read_IR@input:
   974                           	opt stack 0
   975  0000EE                     ___lwmod@dividend:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x7
   979  0000EE                     	ds	1
   980  0000EF                     strncpy@from:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x8
   984  0000EF                     	ds	1
   985  0000F0                     ___lwmod@divisor:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x9
   989  0000F0                     	ds	1
   990  0000F1                     strncpy@size:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0xA
   994  0000F1                     	ds	1
   995  0000F2                     ___lwmod@counter:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0xB
   999  0000F2                     	ds	1
  1000  0000F3                     ?_printf:
  1001                           	opt stack 0
  1002  0000F3                     printf@f:
  1003                           	opt stack 0
  1004  0000F3                     strncpy@cp:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0xC
  1008  0000F3                     	ds	2
  1009  0000F5                     store_prev@i:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0xE
  1013  0000F5                     	ds	8
  1014  0000FD                     ??_printf:
  1015                           
  1016                           ; 1 bytes @ 0x16
  1017  0000FD                     	ds	1
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           
  1025                           	psect	cstackCOMRAM
  1026  000001                     __pcstackCOMRAM:
  1027                           	opt stack 0
  1028  000001                     ?_check:
  1029                           	opt stack 0
  1030  000001                     ?_strcmp:
  1031                           	opt stack 0
  1032  000001                     ?i2___wmul:
  1033                           	opt stack 0
  1034  000001                     ?i2___lwdiv:
  1035                           	opt stack 0
  1036  000001                     i2lcdNibble@temp:
  1037                           	opt stack 0
  1038  000001                     generate_compartment_array@step:
  1039                           	opt stack 0
  1040  000001                     strcat@to:
  1041                           	opt stack 0
  1042  000001                     strcmp@s1:
  1043                           	opt stack 0
  1044  000001                     i2___wmul@multiplier:
  1045                           	opt stack 0
  1046  000001                     i2___lwdiv@dividend:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x0
  1050  000001                     	ds	1
  1051  000002                     i2lcdNibble@data:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x1
  1055  000002                     	ds	1
  1056  000003                     ??_generate_compartment_array:
  1057  000003                     i2lcdInst@data:
  1058                           	opt stack 0
  1059  000003                     i2putch@data:
  1060                           	opt stack 0
  1061  000003                     strcat@from:
  1062                           	opt stack 0
  1063  000003                     strcmp@s2:
  1064                           	opt stack 0
  1065  000003                     i2___wmul@multiplicand:
  1066                           	opt stack 0
  1067  000003                     i2___lwdiv@divisor:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x2
  1071  000003                     	ds	1
  1072  000004                     ??i2_initLCD:
  1073                           
  1074                           ; 1 bytes @ 0x3
  1075  000004                     	ds	1
  1076  000005                     ??_strcmp:
  1077  000005                     strcat@cp:
  1078                           	opt stack 0
  1079  000005                     i2___wmul@product:
  1080                           	opt stack 0
  1081  000005                     i2___lwdiv@quotient:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x4
  1085  000005                     	ds	1
  1086  000006                     strcmp@r:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x5
  1090  000006                     	ds	1
  1091  000007                     ??_is_valid:
  1092  000007                     ?_strncmp:
  1093                           	opt stack 0
  1094  000007                     i2___lwdiv@counter:
  1095                           	opt stack 0
  1096  000007                     strcpy@to:
  1097                           	opt stack 0
  1098  000007                     strncmp@s1:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x6
  1102  000007                     	ds	1
  1103  000008                     ?i2___lwmod:
  1104                           	opt stack 0
  1105  000008                     i2___lwmod@dividend:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x7
  1109  000008                     	ds	1
  1110  000009                     strcpy@from:
  1111                           	opt stack 0
  1112  000009                     strncmp@s2:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x8
  1116  000009                     	ds	1
  1117  00000A                     i2___lwmod@divisor:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x9
  1121  00000A                     	ds	1
  1122  00000B                     strcpy@cp:
  1123                           	opt stack 0
  1124  00000B                     strncmp@len:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0xA
  1128  00000B                     	ds	1
  1129  00000C                     i2___lwmod@counter:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0xB
  1133  00000C                     	ds	1
  1134  00000D                     ??_strncmp:
  1135  00000D                     ?i2_printf:
  1136                           	opt stack 0
  1137  00000D                     i2printf@f:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0xC
  1141  00000D                     	ds	4
  1142  000011                     ??i2_printf:
  1143                           
  1144                           ; 1 bytes @ 0x10
  1145  000011                     	ds	1
  1146  000012                     i2printf@flag:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x11
  1150  000012                     	ds	1
  1151  000013                     i2printf@prec:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x12
  1155  000013                     	ds	1
  1156  000014                     i2printf@ap:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x13
  1160  000014                     	ds	2
  1161  000016                     i2printf@cp:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x15
  1165  000016                     	ds	2
  1166  000018                     i2printf@val:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x17
  1170  000018                     	ds	2
  1171  00001A                     i2printf@c:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x19
  1175  00001A                     	ds	1
  1176  00001B                     ??_interruptHandler:
  1177                           
  1178                           ; 1 bytes @ 0x1A
  1179  00001B                     	ds	23
  1180  000032                     interruptHandler@i:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x31
  1184  000032                     	ds	2
  1185  000034                     interruptHandler@temp:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x33
  1189  000034                     	ds	1
  1190  000035                     interruptHandler@keypress:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x34
  1194  000035                     	ds	1
  1195                           tblptru	equ	0xFF8
  1196                           tblptrh	equ	0xFF7
  1197                           tblptrl	equ	0xFF6
  1198                           tablat	equ	0xFF5
  1199                           postinc0	equ	0xFEE
  1200                           wreg	equ	0xFE8
  1201                           
  1202 ;;
  1203 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1204 ;;
  1205 ;; *************** function _main *****************
  1206 ;; Defined at:
  1207 ;;		line 36 in file "main.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1223 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1224 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1225 ;;Total ram usage:        3 bytes
  1226 ;; Hardware stack levels required when called:    7
  1227 ;; This function calls:
  1228 ;;		___wmul
  1229 ;;		_initLCD
  1230 ;;		_initialize
  1231 ;;		_lcdInst
  1232 ;;		_motorStart_0
  1233 ;;		_motorStop_0
  1234 ;;		_printf
  1235 ;;		_putch
  1236 ;;		_read_IR
  1237 ;;		_servoRotate0
  1238 ;;		_servoRotate180
  1239 ;;		_store_prev
  1240 ;; This function is called by:
  1241 ;;		Startup code after reset
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text0
  1246  000E68                     __ptext0:
  1247                           	opt stack 0
  1248  000E68                     _main:
  1249                           	opt stack 24
  1250                           
  1251                           ;main.c: 42: LATA = 0x00;
  1252                           
  1253                           ;incstack = 0
  1254  000E68  0E00               	movlw	0
  1255  000E6A  6E89               	movwf	3977,c	;volatile
  1256                           
  1257                           ;main.c: 43: LATB = 0x00;
  1258  000E6C  0E00               	movlw	0
  1259  000E6E  6E8A               	movwf	3978,c	;volatile
  1260                           
  1261                           ;main.c: 44: LATC = 0x00;
  1262  000E70  0E00               	movlw	0
  1263  000E72  6E8B               	movwf	3979,c	;volatile
  1264                           
  1265                           ;main.c: 45: LATD = 0x00;
  1266  000E74  0E00               	movlw	0
  1267  000E76  6E8C               	movwf	3980,c	;volatile
  1268                           
  1269                           ;main.c: 46: LATE = 0x00;
  1270  000E78  0E00               	movlw	0
  1271  000E7A  6E8D               	movwf	3981,c	;volatile
  1272                           
  1273                           ;main.c: 50: TRISA = 0xFF;
  1274  000E7C  6892               	setf	3986,c	;volatile
  1275                           
  1276                           ;main.c: 51: TRISB = 0xFF;
  1277  000E7E  6893               	setf	3987,c	;volatile
  1278                           
  1279                           ;main.c: 52: TRISC = 0x00;
  1280  000E80  0E00               	movlw	0
  1281  000E82  6E94               	movwf	3988,c	;volatile
  1282                           
  1283                           ;main.c: 53: TRISD = 0x00;
  1284  000E84  0E00               	movlw	0
  1285  000E86  6E95               	movwf	3989,c	;volatile
  1286                           
  1287                           ;main.c: 54: TRISE = 0x00;
  1288  000E88  0E00               	movlw	0
  1289  000E8A  6E96               	movwf	3990,c	;volatile
  1290                           
  1291                           ;main.c: 57: ADCON0 = 0x00;
  1292  000E8C  0E00               	movlw	0
  1293  000E8E  6EC2               	movwf	4034,c	;volatile
  1294                           
  1295                           ;main.c: 58: ADCON1 = 0b00001111;
  1296  000E90  0E0F               	movlw	15
  1297  000E92  6EC1               	movwf	4033,c	;volatile
  1298                           
  1299                           ;main.c: 61: INT1IE = 1;
  1300  000E94  86F0               	bsf	intcon3,3,c	;volatile
  1301                           
  1302                           ;main.c: 62: (INTCONbits.GIE = 1);
  1303  000E96  8EF2               	bsf	intcon,7,c	;volatile
  1304                           
  1305                           ;main.c: 65: initLCD();
  1306  000E98  EC00  F016         	call	_initLCD	;wreg free
  1307  000E9C                     
  1308                           ;main.c: 108: if (mode == 0){
  1309  000E9C  5046               	movf	_mode,w,c
  1310  000E9E  1047               	iorwf	_mode+1,w,c
  1311  000EA0  A4D8               	btfss	status,2,c
  1312  000EA2  D1BF               	goto	l252
  1313                           
  1314                           ;main.c: 110: initLCD();
  1315  000EA4  EC00  F016         	call	_initLCD	;wreg free
  1316  000EA8                     
  1317                           ;main.c: 112: if (state == 0){
  1318  000EA8  505C               	movf	_state,w,c
  1319  000EAA  105D               	iorwf	_state+1,w,c
  1320  000EAC  A4D8               	btfss	status,2,c
  1321  000EAE  D023               	goto	l243
  1322                           
  1323                           ;main.c: 114: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1324  000EB0  0E80               	movlw	128
  1325  000EB2  EC94  F017         	call	_lcdInst
  1326  000EB6  0E41               	movlw	65
  1327  000EB8  0101               	movlb	1	; () banked
  1328  000EBA  6F89               	movwf	??_main& (0+255),b
  1329  000EBC  0EEE               	movlw	238
  1330  000EBE                     u3907:
  1331  000EBE  2EE8               	decfsz	wreg,f,c
  1332  000EC0  D7FE               	bra	u3907
  1333  000EC2  2F89               	decfsz	??_main& (0+255),f,b
  1334  000EC4  D7FC               	bra	u3907
  1335  000EC6  F000               	nop	
  1336                           
  1337                           ;main.c: 115: printf("assembly step:");
  1338  000EC8  0E2D               	movlw	low STR_1
  1339  000ECA  0100               	movlb	0	; () banked
  1340  000ECC  6FF3               	movwf	printf@f& (0+255),b
  1341  000ECE  0EFF               	movlw	high STR_1
  1342  000ED0  6FF4               	movwf	(printf@f+1)& (0+255),b
  1343  000ED2  EC6A  F011         	call	_printf	;wreg free
  1344                           
  1345                           ;main.c: 116: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1346  000ED6  0E33               	movlw	51
  1347  000ED8  0101               	movlb	1	; () banked
  1348  000EDA  6F8A               	movwf	(??_main+1)& (0+255),b
  1349  000EDC  0EBB               	movlw	187
  1350  000EDE  6F89               	movwf	??_main& (0+255),b
  1351  000EE0  0EDF               	movlw	223
  1352  000EE2                     u3917:
  1353  000EE2  2EE8               	decfsz	wreg,f,c
  1354  000EE4  D7FE               	bra	u3917
  1355  000EE6  2F89               	decfsz	??_main& (0+255),f,b
  1356  000EE8  D7FC               	bra	u3917
  1357  000EEA  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1358  000EEC  D7FA               	bra	u3917
  1359  000EEE  D000               	nop2	
  1360                           
  1361                           ;main.c: 117: lcdInst(0xC0);;
  1362  000EF0  0EC0               	movlw	192
  1363  000EF2  EC94  F017         	call	_lcdInst
  1364  000EF6                     l243:
  1365                           
  1366                           ;main.c: 118: }
  1367                           ;main.c: 119: if (state ==1){
  1368  000EF6  045C               	decf	_state,w,c
  1369  000EF8  105D               	iorwf	_state+1,w,c
  1370  000EFA  A4D8               	btfss	status,2,c
  1371  000EFC  D024               	goto	l244
  1372                           
  1373                           ;main.c: 120: initLCD();
  1374  000EFE  EC00  F016         	call	_initLCD	;wreg free
  1375                           
  1376                           ;main.c: 121: printf("fastener set:");
  1377  000F02  0E3C               	movlw	low STR_2
  1378  000F04  0100               	movlb	0	; () banked
  1379  000F06  6FF3               	movwf	printf@f& (0+255),b
  1380  000F08  0EFF               	movlw	high STR_2
  1381  000F0A  6FF4               	movwf	(printf@f+1)& (0+255),b
  1382  000F0C  EC6A  F011         	call	_printf	;wreg free
  1383                           
  1384                           ;main.c: 122: lcdInst(0xC0);;
  1385  000F10  0EC0               	movlw	192
  1386  000F12  EC94  F017         	call	_lcdInst
  1387                           
  1388                           ;main.c: 123: printf("%s",current_set);
  1389  000F16  0EF5               	movlw	low STR_3
  1390  000F18  0100               	movlb	0	; () banked
  1391  000F1A  6FF3               	movwf	printf@f& (0+255),b
  1392  000F1C  0EFF               	movlw	high STR_3
  1393  000F1E  6FF4               	movwf	(printf@f+1)& (0+255),b
  1394  000F20  0EE2               	movlw	low _current_set
  1395  000F22  6FF5               	movwf	(?_printf+2)& (0+255),b
  1396  000F24  0E00               	movlw	high _current_set
  1397  000F26  6FF6               	movwf	(?_printf+3)& (0+255),b
  1398  000F28  EC6A  F011         	call	_printf	;wreg free
  1399                           
  1400                           ;main.c: 124: _delay((unsigned long)((500)*(40000000/4000.0)));
  1401  000F2C  0E1A               	movlw	26
  1402  000F2E  0101               	movlb	1	; () banked
  1403  000F30  6F8A               	movwf	(??_main+1)& (0+255),b
  1404  000F32  0E5E               	movlw	94
  1405  000F34  6F89               	movwf	??_main& (0+255),b
  1406  000F36  0E6E               	movlw	110
  1407  000F38                     u3927:
  1408  000F38  2EE8               	decfsz	wreg,f,c
  1409  000F3A  D7FE               	bra	u3927
  1410  000F3C  2F89               	decfsz	??_main& (0+255),f,b
  1411  000F3E  D7FC               	bra	u3927
  1412  000F40  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1413  000F42  D7FA               	bra	u3927
  1414  000F44  F000               	nop	
  1415  000F46                     l244:
  1416                           
  1417                           ;main.c: 125: }
  1418                           ;main.c: 127: if (state == 2){
  1419  000F46  0E02               	movlw	2
  1420  000F48  185C               	xorwf	_state,w,c
  1421  000F4A  105D               	iorwf	_state+1,w,c
  1422  000F4C  A4D8               	btfss	status,2,c
  1423  000F4E  D016               	goto	l245
  1424                           
  1425                           ;main.c: 128: initLCD();
  1426  000F50  EC00  F016         	call	_initLCD	;wreg free
  1427                           
  1428                           ;main.c: 129: printf("number:");
  1429  000F54  0E89               	movlw	low STR_4
  1430  000F56  0100               	movlb	0	; () banked
  1431  000F58  6FF3               	movwf	printf@f& (0+255),b
  1432  000F5A  0EFF               	movlw	high STR_4
  1433  000F5C  6FF4               	movwf	(printf@f+1)& (0+255),b
  1434  000F5E  EC6A  F011         	call	_printf	;wreg free
  1435                           
  1436                           ;main.c: 130: _delay((unsigned long)((500)*(40000000/4000.0)));
  1437  000F62  0E1A               	movlw	26
  1438  000F64  0101               	movlb	1	; () banked
  1439  000F66  6F8A               	movwf	(??_main+1)& (0+255),b
  1440  000F68  0E5E               	movlw	94
  1441  000F6A  6F89               	movwf	??_main& (0+255),b
  1442  000F6C  0E6E               	movlw	110
  1443  000F6E                     u3937:
  1444  000F6E  2EE8               	decfsz	wreg,f,c
  1445  000F70  D7FE               	bra	u3937
  1446  000F72  2F89               	decfsz	??_main& (0+255),f,b
  1447  000F74  D7FC               	bra	u3937
  1448  000F76  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1449  000F78  D7FA               	bra	u3937
  1450  000F7A  F000               	nop	
  1451  000F7C                     l245:
  1452                           
  1453                           ;main.c: 131: }
  1454                           ;main.c: 133: if (state == 3){
  1455  000F7C  0E03               	movlw	3
  1456  000F7E  185C               	xorwf	_state,w,c
  1457  000F80  105D               	iorwf	_state+1,w,c
  1458  000F82  A4D8               	btfss	status,2,c
  1459  000F84  D791               	goto	l242
  1460                           
  1461                           ;main.c: 134: initLCD();
  1462  000F86  EC00  F016         	call	_initLCD	;wreg free
  1463                           
  1464                           ;main.c: 135: printf("Done!");
  1465  000F8A  0E9F               	movlw	low STR_5
  1466  000F8C  0100               	movlb	0	; () banked
  1467  000F8E  6FF3               	movwf	printf@f& (0+255),b
  1468  000F90  0EFF               	movlw	high STR_5
  1469  000F92  6FF4               	movwf	(printf@f+1)& (0+255),b
  1470  000F94  EC6A  F011         	call	_printf	;wreg free
  1471                           
  1472                           ;main.c: 136: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1473  000F98  0E66               	movlw	102
  1474  000F9A  0101               	movlb	1	; () banked
  1475  000F9C  6F8A               	movwf	(??_main+1)& (0+255),b
  1476  000F9E  0E76               	movlw	118
  1477  000FA0  6F89               	movwf	??_main& (0+255),b
  1478  000FA2  0EC1               	movlw	193
  1479  000FA4                     u3947:
  1480  000FA4  2EE8               	decfsz	wreg,f,c
  1481  000FA6  D7FE               	bra	u3947
  1482  000FA8  2F89               	decfsz	??_main& (0+255),f,b
  1483  000FAA  D7FC               	bra	u3947
  1484  000FAC  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1485  000FAE  D7FA               	bra	u3947
  1486                           
  1487                           ;main.c: 137: initLCD();
  1488  000FB0  EC00  F016         	call	_initLCD	;wreg free
  1489                           
  1490                           ;main.c: 138: printf("assembly step:%d",assembly_step);
  1491  000FB4  0E0D               	movlw	low STR_6
  1492  000FB6  0100               	movlb	0	; () banked
  1493  000FB8  6FF3               	movwf	printf@f& (0+255),b
  1494  000FBA  0EFF               	movlw	high STR_6
  1495  000FBC  6FF4               	movwf	(printf@f+1)& (0+255),b
  1496  000FBE  C05A  F0F5         	movff	_assembly_step,?_printf+2
  1497  000FC2  C05B  F0F6         	movff	_assembly_step+1,?_printf+3
  1498  000FC6  EC6A  F011         	call	_printf	;wreg free
  1499                           
  1500                           ;main.c: 139: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1501  000FCA  0E33               	movlw	51
  1502  000FCC  0101               	movlb	1	; () banked
  1503  000FCE  6F8A               	movwf	(??_main+1)& (0+255),b
  1504  000FD0  0EBB               	movlw	187
  1505  000FD2  6F89               	movwf	??_main& (0+255),b
  1506  000FD4  0EDF               	movlw	223
  1507  000FD6                     u3957:
  1508  000FD6  2EE8               	decfsz	wreg,f,c
  1509  000FD8  D7FE               	bra	u3957
  1510  000FDA  2F89               	decfsz	??_main& (0+255),f,b
  1511  000FDC  D7FC               	bra	u3957
  1512  000FDE  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1513  000FE0  D7FA               	bra	u3957
  1514  000FE2  D000               	nop2	
  1515                           
  1516                           ;main.c: 140: for ( i=0; i<assembly_step; i++){
  1517  000FE4  0E00               	movlw	0
  1518  000FE6  6E5F               	movwf	_i+1,c
  1519  000FE8  0E00               	movlw	0
  1520  000FEA  6E5E               	movwf	_i,c
  1521  000FEC  D06D               	goto	l247
  1522  000FEE                     
  1523                           ;main.c: 142: initLCD();
  1524  000FEE  EC00  F016         	call	_initLCD	;wreg free
  1525                           
  1526                           ;main.c: 144: printf("step");
  1527  000FF2  0ECE               	movlw	low STR_7
  1528  000FF4  0100               	movlb	0	; () banked
  1529  000FF6  6FF3               	movwf	printf@f& (0+255),b
  1530  000FF8  0EFF               	movlw	high STR_7
  1531  000FFA  6FF4               	movwf	(printf@f+1)& (0+255),b
  1532  000FFC  EC6A  F011         	call	_printf	;wreg free
  1533                           
  1534                           ;main.c: 145: printf("%d", i);
  1535  001000  0EF8               	movlw	low (STR_26+17)
  1536  001002  0100               	movlb	0	; () banked
  1537  001004  6FF3               	movwf	printf@f& (0+255),b
  1538  001006  0EFE               	movlw	high (STR_26+17)
  1539  001008  6FF4               	movwf	(printf@f+1)& (0+255),b
  1540  00100A  C05E  F0F5         	movff	_i,?_printf+2
  1541  00100E  C05F  F0F6         	movff	_i+1,?_printf+3
  1542  001012  EC6A  F011         	call	_printf	;wreg free
  1543                           
  1544                           ;main.c: 146: printf(":");
  1545  001016  0EE5               	movlw	low (STR_14+2)
  1546  001018  0100               	movlb	0	; () banked
  1547  00101A  6FF3               	movwf	printf@f& (0+255),b
  1548  00101C  0EFF               	movlw	high (STR_14+2)
  1549  00101E  6FF4               	movwf	(printf@f+1)& (0+255),b
  1550  001020  EC6A  F011         	call	_printf	;wreg free
  1551                           
  1552                           ;main.c: 147: printf("%s", final_set[i]);
  1553  001024  0EF5               	movlw	low STR_3
  1554  001026  0100               	movlb	0	; () banked
  1555  001028  6FF3               	movwf	printf@f& (0+255),b
  1556  00102A  0EFF               	movlw	high STR_3
  1557  00102C  6FF4               	movwf	(printf@f+1)& (0+255),b
  1558  00102E  C05E  F0E7         	movff	_i,___wmul@multiplier
  1559  001032  C05F  F0E8         	movff	_i+1,___wmul@multiplier+1
  1560  001036  0E00               	movlw	0
  1561  001038  6FEA               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1562  00103A  0E05               	movlw	5
  1563  00103C  6FE9               	movwf	___wmul@multiplicand& (0+255),b
  1564  00103E  EC41  F017         	call	___wmul	;wreg free
  1565  001042  0E58               	movlw	low _final_set
  1566  001044  0100               	movlb	0	; () banked
  1567  001046  25E7               	addwf	?___wmul& (0+255),w,b
  1568  001048  6FF5               	movwf	(?_printf+2)& (0+255),b
  1569  00104A  0E01               	movlw	high _final_set
  1570  00104C  21E8               	addwfc	(?___wmul+1)& (0+255),w,b
  1571  00104E  6FF6               	movwf	(?_printf+3)& (0+255),b
  1572  001050  EC6A  F011         	call	_printf	;wreg free
  1573                           
  1574                           ;main.c: 148: printf(",");
  1575  001054  0EF8               	movlw	low STR_11
  1576  001056  0100               	movlb	0	; () banked
  1577  001058  6FF3               	movwf	printf@f& (0+255),b
  1578  00105A  0EFF               	movlw	high STR_11
  1579  00105C  6FF4               	movwf	(printf@f+1)& (0+255),b
  1580  00105E  EC6A  F011         	call	_printf	;wreg free
  1581                           
  1582                           ;main.c: 149: printf("%d",final_number[i]);
  1583  001062  0EF8               	movlw	low (STR_26+17)
  1584  001064  0100               	movlb	0	; () banked
  1585  001066  6FF3               	movwf	printf@f& (0+255),b
  1586  001068  0EFE               	movlw	high (STR_26+17)
  1587  00106A  6FF4               	movwf	(printf@f+1)& (0+255),b
  1588  00106C  90D8               	bcf	status,0,c
  1589  00106E  345E               	rlcf	_i,w,c
  1590  001070  6ED9               	movwf	fsr2l,c
  1591  001072  345F               	rlcf	_i+1,w,c
  1592  001074  6EDA               	movwf	fsr2h,c
  1593  001076  0E20               	movlw	low _final_number
  1594  001078  26D9               	addwf	fsr2l,f,c
  1595  00107A  0E01               	movlw	high _final_number
  1596  00107C  22DA               	addwfc	fsr2h,f,c
  1597  00107E  CFDE F0F5          	movff	postinc2,?_printf+2
  1598  001082  CFDD F0F6          	movff	postdec2,?_printf+3
  1599  001086  EC6A  F011         	call	_printf	;wreg free
  1600                           
  1601                           ;main.c: 150: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1602  00108A  0E33               	movlw	51
  1603  00108C  0101               	movlb	1	; () banked
  1604  00108E  6F8A               	movwf	(??_main+1)& (0+255),b
  1605  001090  0EBB               	movlw	187
  1606  001092  6F89               	movwf	??_main& (0+255),b
  1607  001094  0EDF               	movlw	223
  1608  001096                     u3967:
  1609  001096  2EE8               	decfsz	wreg,f,c
  1610  001098  D7FE               	bra	u3967
  1611  00109A  2F89               	decfsz	??_main& (0+255),f,b
  1612  00109C  D7FC               	bra	u3967
  1613  00109E  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1614  0010A0  D7FA               	bra	u3967
  1615  0010A2  D000               	nop2	
  1616                           
  1617                           ;main.c: 151: lcdInst(0xC0);;
  1618  0010A4  0EC0               	movlw	192
  1619  0010A6  EC94  F017         	call	_lcdInst
  1620                           
  1621                           ;main.c: 155: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1622  0010AA  0E33               	movlw	51
  1623  0010AC  0101               	movlb	1	; () banked
  1624  0010AE  6F8A               	movwf	(??_main+1)& (0+255),b
  1625  0010B0  0EBB               	movlw	187
  1626  0010B2  6F89               	movwf	??_main& (0+255),b
  1627  0010B4  0EDF               	movlw	223
  1628  0010B6                     u3977:
  1629  0010B6  2EE8               	decfsz	wreg,f,c
  1630  0010B8  D7FE               	bra	u3977
  1631  0010BA  2F89               	decfsz	??_main& (0+255),f,b
  1632  0010BC  D7FC               	bra	u3977
  1633  0010BE  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1634  0010C0  D7FA               	bra	u3977
  1635  0010C2  D000               	nop2	
  1636  0010C4  4A5E               	infsnz	_i,f,c
  1637  0010C6  2A5F               	incf	_i+1,f,c
  1638  0010C8                     l247:
  1639  0010C8  505A               	movf	_assembly_step,w,c
  1640  0010CA  5C5E               	subwf	_i,w,c
  1641  0010CC  505B               	movf	_assembly_step+1,w,c
  1642  0010CE  585F               	subwfb	_i+1,w,c
  1643  0010D0  A0D8               	btfss	status,0,c
  1644  0010D2  D78D               	goto	l248
  1645                           
  1646                           ;main.c: 157: }
  1647                           ;main.c: 158: for (i = 0; i<8; i++){
  1648  0010D4  0E00               	movlw	0
  1649  0010D6  6E5F               	movwf	_i+1,c
  1650  0010D8  0E00               	movlw	0
  1651  0010DA  6E5E               	movwf	_i,c
  1652  0010DC  505F               	movf	_i+1,w,c
  1653  0010DE  E105               	bnz	u3700
  1654  0010E0  0E08               	movlw	8
  1655  0010E2  5C5E               	subwf	_i,w,c
  1656  0010E4  B0D8               	btfsc	status,0,c
  1657  0010E6  D099               	goto	u3710
  1658  0010E8  D001               	goto	l250
  1659  0010EA                     u3700:
  1660  0010EA  D097               	goto	u3710
  1661  0010EC                     l250:
  1662                           
  1663                           ;main.c: 159: initLCD();
  1664  0010EC  EC00  F016         	call	_initLCD	;wreg free
  1665                           
  1666                           ;main.c: 160: printf("%d",compartment_array[i]);
  1667  0010F0  0EF8               	movlw	low (STR_26+17)
  1668  0010F2  0100               	movlb	0	; () banked
  1669  0010F4  6FF3               	movwf	printf@f& (0+255),b
  1670  0010F6  0EFE               	movlw	high (STR_26+17)
  1671  0010F8  6FF4               	movwf	(printf@f+1)& (0+255),b
  1672  0010FA  90D8               	bcf	status,0,c
  1673  0010FC  345E               	rlcf	_i,w,c
  1674  0010FE  6ED9               	movwf	fsr2l,c
  1675  001100  345F               	rlcf	_i+1,w,c
  1676  001102  6EDA               	movwf	fsr2h,c
  1677  001104  0EB0               	movlw	low _compartment_array
  1678  001106  26D9               	addwf	fsr2l,f,c
  1679  001108  0E00               	movlw	high _compartment_array
  1680  00110A  22DA               	addwfc	fsr2h,f,c
  1681  00110C  CFDE F0F5          	movff	postinc2,?_printf+2
  1682  001110  CFDD F0F6          	movff	postdec2,?_printf+3
  1683  001114  EC6A  F011         	call	_printf	;wreg free
  1684                           
  1685                           ;main.c: 161: printf(" B:");
  1686  001118  0EE3               	movlw	low STR_14
  1687  00111A  0100               	movlb	0	; () banked
  1688  00111C  6FF3               	movwf	printf@f& (0+255),b
  1689  00111E  0EFF               	movlw	high STR_14
  1690  001120  6FF4               	movwf	(printf@f+1)& (0+255),b
  1691  001122  EC6A  F011         	call	_printf	;wreg free
  1692                           
  1693                           ;main.c: 162: printf("%d",B_array[i]);
  1694  001126  0EF8               	movlw	low (STR_26+17)
  1695  001128  0100               	movlb	0	; () banked
  1696  00112A  6FF3               	movwf	printf@f& (0+255),b
  1697  00112C  0EFE               	movlw	high (STR_26+17)
  1698  00112E  6FF4               	movwf	(printf@f+1)& (0+255),b
  1699  001130  90D8               	bcf	status,0,c
  1700  001132  345E               	rlcf	_i,w,c
  1701  001134  6ED9               	movwf	fsr2l,c
  1702  001136  345F               	rlcf	_i+1,w,c
  1703  001138  6EDA               	movwf	fsr2h,c
  1704  00113A  0EA0               	movlw	low _B_array
  1705  00113C  26D9               	addwf	fsr2l,f,c
  1706  00113E  0E00               	movlw	high _B_array
  1707  001140  22DA               	addwfc	fsr2h,f,c
  1708  001142  CFDE F0F5          	movff	postinc2,?_printf+2
  1709  001146  CFDD F0F6          	movff	postdec2,?_printf+3
  1710  00114A  EC6A  F011         	call	_printf	;wreg free
  1711                           
  1712                           ;main.c: 163: printf(" N:");
  1713  00114E  0EE7               	movlw	low STR_16
  1714  001150  0100               	movlb	0	; () banked
  1715  001152  6FF3               	movwf	printf@f& (0+255),b
  1716  001154  0EFF               	movlw	high STR_16
  1717  001156  6FF4               	movwf	(printf@f+1)& (0+255),b
  1718  001158  EC6A  F011         	call	_printf	;wreg free
  1719                           
  1720                           ;main.c: 164: printf("%d",N_array[i]);
  1721  00115C  0EF8               	movlw	low (STR_26+17)
  1722  00115E  0100               	movlb	0	; () banked
  1723  001160  6FF3               	movwf	printf@f& (0+255),b
  1724  001162  0EFE               	movlw	high (STR_26+17)
  1725  001164  6FF4               	movwf	(printf@f+1)& (0+255),b
  1726  001166  90D8               	bcf	status,0,c
  1727  001168  345E               	rlcf	_i,w,c
  1728  00116A  6ED9               	movwf	fsr2l,c
  1729  00116C  345F               	rlcf	_i+1,w,c
  1730  00116E  6EDA               	movwf	fsr2h,c
  1731  001170  0E90               	movlw	low _N_array
  1732  001172  26D9               	addwf	fsr2l,f,c
  1733  001174  0E00               	movlw	high _N_array
  1734  001176  22DA               	addwfc	fsr2h,f,c
  1735  001178  CFDE F0F5          	movff	postinc2,?_printf+2
  1736  00117C  CFDD F0F6          	movff	postdec2,?_printf+3
  1737  001180  EC6A  F011         	call	_printf	;wreg free
  1738                           
  1739                           ;main.c: 165: printf(" S");
  1740  001184  0EF2               	movlw	low STR_18
  1741  001186  0100               	movlb	0	; () banked
  1742  001188  6FF3               	movwf	printf@f& (0+255),b
  1743  00118A  0EFF               	movlw	high STR_18
  1744  00118C  6FF4               	movwf	(printf@f+1)& (0+255),b
  1745  00118E  EC6A  F011         	call	_printf	;wreg free
  1746                           
  1747                           ;main.c: 166: printf("%d",S_array[i]);
  1748  001192  0EF8               	movlw	low (STR_26+17)
  1749  001194  0100               	movlb	0	; () banked
  1750  001196  6FF3               	movwf	printf@f& (0+255),b
  1751  001198  0EFE               	movlw	high (STR_26+17)
  1752  00119A  6FF4               	movwf	(printf@f+1)& (0+255),b
  1753  00119C  90D8               	bcf	status,0,c
  1754  00119E  345E               	rlcf	_i,w,c
  1755  0011A0  6ED9               	movwf	fsr2l,c
  1756  0011A2  345F               	rlcf	_i+1,w,c
  1757  0011A4  6EDA               	movwf	fsr2h,c
  1758  0011A6  0E00               	movlw	low _S_array
  1759  0011A8  26D9               	addwf	fsr2l,f,c
  1760  0011AA  0E01               	movlw	high _S_array
  1761  0011AC  22DA               	addwfc	fsr2h,f,c
  1762  0011AE  CFDE F0F5          	movff	postinc2,?_printf+2
  1763  0011B2  CFDD F0F6          	movff	postdec2,?_printf+3
  1764  0011B6  EC6A  F011         	call	_printf	;wreg free
  1765                           
  1766                           ;main.c: 167: printf(" W:");
  1767  0011BA  0EEB               	movlw	low STR_20
  1768  0011BC  0100               	movlb	0	; () banked
  1769  0011BE  6FF3               	movwf	printf@f& (0+255),b
  1770  0011C0  0EFF               	movlw	high STR_20
  1771  0011C2  6FF4               	movwf	(printf@f+1)& (0+255),b
  1772  0011C4  EC6A  F011         	call	_printf	;wreg free
  1773                           
  1774                           ;main.c: 168: printf("%d",W_array[i]);
  1775  0011C8  0EF8               	movlw	low (STR_26+17)
  1776  0011CA  0100               	movlb	0	; () banked
  1777  0011CC  6FF3               	movwf	printf@f& (0+255),b
  1778  0011CE  0EFE               	movlw	high (STR_26+17)
  1779  0011D0  6FF4               	movwf	(printf@f+1)& (0+255),b
  1780  0011D2  90D8               	bcf	status,0,c
  1781  0011D4  345E               	rlcf	_i,w,c
  1782  0011D6  6ED9               	movwf	fsr2l,c
  1783  0011D8  345F               	rlcf	_i+1,w,c
  1784  0011DA  6EDA               	movwf	fsr2h,c
  1785  0011DC  0E80               	movlw	low _W_array
  1786  0011DE  26D9               	addwf	fsr2l,f,c
  1787  0011E0  0E00               	movlw	high _W_array
  1788  0011E2  22DA               	addwfc	fsr2h,f,c
  1789  0011E4  CFDE F0F5          	movff	postinc2,?_printf+2
  1790  0011E8  CFDD F0F6          	movff	postdec2,?_printf+3
  1791  0011EC  EC6A  F011         	call	_printf	;wreg free
  1792                           
  1793                           ;main.c: 169: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1794  0011F0  0E33               	movlw	51
  1795  0011F2  0101               	movlb	1	; () banked
  1796  0011F4  6F8A               	movwf	(??_main+1)& (0+255),b
  1797  0011F6  0EBB               	movlw	187
  1798  0011F8  6F89               	movwf	??_main& (0+255),b
  1799  0011FA  0EDF               	movlw	223
  1800  0011FC                     u3987:
  1801  0011FC  2EE8               	decfsz	wreg,f,c
  1802  0011FE  D7FE               	bra	u3987
  1803  001200  2F89               	decfsz	??_main& (0+255),f,b
  1804  001202  D7FC               	bra	u3987
  1805  001204  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1806  001206  D7FA               	bra	u3987
  1807  001208  D000               	nop2	
  1808                           
  1809                           ;main.c: 170: lcdInst(0xC0);;
  1810  00120A  0EC0               	movlw	192
  1811  00120C  EC94  F017         	call	_lcdInst
  1812  001210  4A5E               	infsnz	_i,f,c
  1813  001212  2A5F               	incf	_i+1,f,c
  1814  001214  505F               	movf	_i+1,w,c
  1815  001216  E101               	bnz	l4762
  1816  001218  D763               	goto	L1
  1817  00121A                     u3710:
  1818  00121A                     l4762:
  1819                           
  1820                           ;main.c: 172: }
  1821                           ;main.c: 173: mode = 2;
  1822  00121A  0E00               	movlw	0
  1823  00121C  6E47               	movwf	_mode+1,c
  1824  00121E  0E02               	movlw	2
  1825  001220  6E46               	movwf	_mode,c
  1826  001222                     l252:
  1827                           
  1828                           ;main.c: 176: }
  1829                           ;main.c: 178: }
  1830                           ;main.c: 179: }
  1831                           ;main.c: 192: if (mode == 1){
  1832  001222  0446               	decf	_mode,w,c
  1833  001224  1047               	iorwf	_mode+1,w,c
  1834  001226  A4D8               	btfss	status,2,c
  1835  001228  D23A               	goto	l254
  1836                           
  1837                           ;main.c: 194: initLCD();
  1838  00122A  EC00  F016         	call	_initLCD	;wreg free
  1839                           
  1840                           ;main.c: 196: if (white_tape == 0){
  1841  00122E  506A               	movf	_white_tape,w,c
  1842  001230  106B               	iorwf	_white_tape+1,w,c
  1843  001232  A4D8               	btfss	status,2,c
  1844  001234  D034               	goto	l255
  1845                           
  1846                           ;main.c: 197: initLCD();
  1847  001236  EC00  F016         	call	_initLCD	;wreg free
  1848  00123A                     
  1849                           ;main.c: 199: printf("%d",read_IR());
  1850  00123A  0EF8               	movlw	low (STR_26+17)
  1851  00123C  0100               	movlb	0	; () banked
  1852  00123E  6FF3               	movwf	printf@f& (0+255),b
  1853  001240  0EFE               	movlw	high (STR_26+17)
  1854  001242  6FF4               	movwf	(printf@f+1)& (0+255),b
  1855  001244  ECA0  F014         	call	_read_IR	;wreg free
  1856  001248  C0EA  F0F5         	movff	?_read_IR,?_printf+2
  1857  00124C  C0EB  F0F6         	movff	?_read_IR+1,?_printf+3
  1858  001250  EC6A  F011         	call	_printf	;wreg free
  1859                           
  1860                           ;main.c: 200: _delay((unsigned long)((100)*(40000000/4000.0)));
  1861  001254  0E06               	movlw	6
  1862  001256  0101               	movlb	1	; () banked
  1863  001258  6F8A               	movwf	(??_main+1)& (0+255),b
  1864  00125A  0E13               	movlw	19
  1865  00125C  6F89               	movwf	??_main& (0+255),b
  1866  00125E  0EAD               	movlw	173
  1867  001260                     u3997:
  1868  001260  2EE8               	decfsz	wreg,f,c
  1869  001262  D7FE               	bra	u3997
  1870  001264  2F89               	decfsz	??_main& (0+255),f,b
  1871  001266  D7FC               	bra	u3997
  1872  001268  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1873  00126A  D7FA               	bra	u3997
  1874  00126C  D000               	nop2	
  1875                           
  1876                           ;main.c: 201: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1877  00126E  0E80               	movlw	128
  1878  001270  EC94  F017         	call	_lcdInst
  1879  001274  0E41               	movlw	65
  1880  001276  0101               	movlb	1	; () banked
  1881  001278  6F89               	movwf	??_main& (0+255),b
  1882  00127A  0EEE               	movlw	238
  1883  00127C                     u4007:
  1884  00127C  2EE8               	decfsz	wreg,f,c
  1885  00127E  D7FE               	bra	u4007
  1886  001280  2F89               	decfsz	??_main& (0+255),f,b
  1887  001282  D7FC               	bra	u4007
  1888  001284  F000               	nop	
  1889                           
  1890                           ;main.c: 202: if (read_IR() == 1){
  1891  001286  ECA0  F014         	call	_read_IR	;wreg free
  1892  00128A  0100               	movlb	0	; () banked
  1893  00128C  05EA               	decf	?_read_IR& (0+255),w,b
  1894  00128E  11EB               	iorwf	(?_read_IR+1)& (0+255),w,b
  1895  001290  A4D8               	btfss	status,2,c
  1896  001292  D7D3               	goto	l256
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 203: white_tape = 1;
  1900  001294  0E00               	movlw	0
  1901  001296  6E6B               	movwf	_white_tape+1,c
  1902  001298  0E01               	movlw	1
  1903  00129A  6E6A               	movwf	_white_tape,c
  1904                           
  1905                           ;main.c: 204: break;
  1906  00129C  D1FA               	goto	u3860
  1907  00129E                     l255:
  1908                           
  1909                           ;main.c: 212: else if (white_tape == 1){
  1910                           
  1911                           ; BSR set to: 0
  1912  00129E  046A               	decf	_white_tape,w,c
  1913  0012A0  106B               	iorwf	_white_tape+1,w,c
  1914  0012A2  A4D8               	btfss	status,2,c
  1915  0012A4  D1F6               	goto	u3860
  1916                           
  1917                           ;main.c: 213: putch('1');
  1918  0012A6  0E31               	movlw	49
  1919  0012A8  EC88  F017         	call	_putch
  1920                           
  1921                           ;main.c: 214: _delay((unsigned long)((200)*(40000000/4000.0)));
  1922  0012AC  0E0B               	movlw	11
  1923  0012AE  0101               	movlb	1	; () banked
  1924  0012B0  6F8A               	movwf	(??_main+1)& (0+255),b
  1925  0012B2  0E26               	movlw	38
  1926  0012B4  6F89               	movwf	??_main& (0+255),b
  1927  0012B6  0E5D               	movlw	93
  1928  0012B8                     u4017:
  1929  0012B8  2EE8               	decfsz	wreg,f,c
  1930  0012BA  D7FE               	bra	u4017
  1931  0012BC  2F89               	decfsz	??_main& (0+255),f,b
  1932  0012BE  D7FC               	bra	u4017
  1933  0012C0  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1934  0012C2  D7FA               	bra	u4017
  1935  0012C4  D000               	nop2	
  1936                           
  1937                           ;main.c: 217: _delay((unsigned long)((200)*(40000000/4000.0)));
  1938  0012C6  0E0B               	movlw	11
  1939  0012C8  0101               	movlb	1	; () banked
  1940  0012CA  6F8A               	movwf	(??_main+1)& (0+255),b
  1941  0012CC  0E26               	movlw	38
  1942  0012CE  6F89               	movwf	??_main& (0+255),b
  1943  0012D0  0E5D               	movlw	93
  1944  0012D2                     u4027:
  1945  0012D2  2EE8               	decfsz	wreg,f,c
  1946  0012D4  D7FE               	bra	u4027
  1947  0012D6  2F89               	decfsz	??_main& (0+255),f,b
  1948  0012D8  D7FC               	bra	u4027
  1949  0012DA  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  1950  0012DC  D7FA               	bra	u4027
  1951  0012DE  D000               	nop2	
  1952                           
  1953                           ;main.c: 219: initLCD();
  1954  0012E0  EC00  F016         	call	_initLCD	;wreg free
  1955                           
  1956                           ;main.c: 222: for (i = 0; i<8; i++){
  1957  0012E4  0E00               	movlw	0
  1958  0012E6  6E5F               	movwf	_i+1,c
  1959  0012E8  0E00               	movlw	0
  1960  0012EA  6E5E               	movwf	_i,c
  1961  0012EC  505F               	movf	_i+1,w,c
  1962  0012EE  E105               	bnz	u3760
  1963  0012F0  0E08               	movlw	8
  1964  0012F2  5C5E               	subwf	_i,w,c
  1965  0012F4  B0D8               	btfsc	status,0,c
  1966  0012F6  D1CD               	goto	u3860
  1967  0012F8  D001               	goto	l262
  1968  0012FA                     u3760:
  1969  0012FA  D1CB               	goto	u3860
  1970  0012FC                     l262:
  1971                           
  1972                           ;main.c: 224: if (compartment_array[i]==1){
  1973  0012FC  90D8               	bcf	status,0,c
  1974  0012FE  345E               	rlcf	_i,w,c
  1975  001300  6ED9               	movwf	fsr2l,c
  1976  001302  345F               	rlcf	_i+1,w,c
  1977  001304  6EDA               	movwf	fsr2h,c
  1978  001306  0EB0               	movlw	low _compartment_array
  1979  001308  26D9               	addwf	fsr2l,f,c
  1980  00130A  0E00               	movlw	high _compartment_array
  1981  00130C  22DA               	addwfc	fsr2h,f,c
  1982  00130E  04DE               	decf	postinc2,w,c
  1983  001310  10DE               	iorwf	postinc2,w,c
  1984  001312  A4D8               	btfss	status,2,c
  1985  001314  D18A               	goto	l264
  1986                           
  1987                           ;main.c: 235: initLCD();
  1988  001316  EC00  F016         	call	_initLCD	;wreg free
  1989                           
  1990                           ;main.c: 238: initLCD();
  1991  00131A  EC00  F016         	call	_initLCD	;wreg free
  1992                           
  1993                           ;main.c: 239: printf("C");
  1994  00131E  0EFC               	movlw	low STR_23
  1995  001320  0100               	movlb	0	; () banked
  1996  001322  6FF3               	movwf	printf@f& (0+255),b
  1997  001324  0EFF               	movlw	high STR_23
  1998  001326  6FF4               	movwf	(printf@f+1)& (0+255),b
  1999  001328  EC6A  F011         	call	_printf	;wreg free
  2000                           
  2001                           ;main.c: 240: printf("%d",i);
  2002  00132C  0EF8               	movlw	low (STR_26+17)
  2003  00132E  0100               	movlb	0	; () banked
  2004  001330  6FF3               	movwf	printf@f& (0+255),b
  2005  001332  0EFE               	movlw	high (STR_26+17)
  2006  001334  6FF4               	movwf	(printf@f+1)& (0+255),b
  2007  001336  C05E  F0F5         	movff	_i,?_printf+2
  2008  00133A  C05F  F0F6         	movff	_i+1,?_printf+3
  2009  00133E  EC6A  F011         	call	_printf	;wreg free
  2010                           
  2011                           ;main.c: 241: printf(":");
  2012  001342  0EE5               	movlw	low (STR_14+2)
  2013  001344  0100               	movlb	0	; () banked
  2014  001346  6FF3               	movwf	printf@f& (0+255),b
  2015  001348  0EFF               	movlw	high (STR_14+2)
  2016  00134A  6FF4               	movwf	(printf@f+1)& (0+255),b
  2017  00134C  EC6A  F011         	call	_printf	;wreg free
  2018                           
  2019                           ;main.c: 242: _delay((unsigned long)((800)*(40000000/4000.0)));
  2020  001350  0E29               	movlw	41
  2021  001352  0101               	movlb	1	; () banked
  2022  001354  6F8A               	movwf	(??_main+1)& (0+255),b
  2023  001356  0E96               	movlw	150
  2024  001358  6F89               	movwf	??_main& (0+255),b
  2025  00135A  0E7F               	movlw	127
  2026  00135C                     u4037:
  2027  00135C  2EE8               	decfsz	wreg,f,c
  2028  00135E  D7FE               	bra	u4037
  2029  001360  2F89               	decfsz	??_main& (0+255),f,b
  2030  001362  D7FC               	bra	u4037
  2031  001364  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2032  001366  D7FA               	bra	u4037
  2033                           
  2034                           ;main.c: 243: initLCD();
  2035  001368  EC00  F016         	call	_initLCD	;wreg free
  2036  00136C                     
  2037                           ;main.c: 245: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2038  00136C  0E80               	movlw	128
  2039  00136E  EC94  F017         	call	_lcdInst
  2040  001372  0E41               	movlw	65
  2041  001374  0101               	movlb	1	; () banked
  2042  001376  6F89               	movwf	??_main& (0+255),b
  2043  001378  0EEE               	movlw	238
  2044  00137A                     u4047:
  2045  00137A  2EE8               	decfsz	wreg,f,c
  2046  00137C  D7FE               	bra	u4047
  2047  00137E  2F89               	decfsz	??_main& (0+255),f,b
  2048  001380  D7FC               	bra	u4047
  2049  001382  F000               	nop	
  2050                           
  2051                           ;main.c: 246: if (B_count>= B_array[i]&&S_count>= S_array[i]&&N_count>= N_array[i]&&W_co
      +                          unt>= W_array[i]){
  2052  001384  90D8               	bcf	status,0,c
  2053  001386  345E               	rlcf	_i,w,c
  2054  001388  6ED9               	movwf	fsr2l,c
  2055  00138A  345F               	rlcf	_i+1,w,c
  2056  00138C  6EDA               	movwf	fsr2h,c
  2057  00138E  0EA0               	movlw	low _B_array
  2058  001390  26D9               	addwf	fsr2l,f,c
  2059  001392  0E00               	movlw	high _B_array
  2060  001394  22DA               	addwfc	fsr2h,f,c
  2061  001396  50DE               	movf	postinc2,w,c
  2062  001398  5C4E               	subwf	_B_count,w,c
  2063  00139A  504F               	movf	_B_count+1,w,c
  2064  00139C  0A80               	xorlw	128
  2065  00139E  0101               	movlb	1	; () banked
  2066  0013A0  6F8B               	movwf	(??_main+2)& (0+255),b
  2067  0013A2  50DE               	movf	postinc2,w,c
  2068  0013A4  0A80               	xorlw	128
  2069  0013A6  598B               	subwfb	(??_main+2)& (0+255),w,b
  2070  0013A8  A0D8               	btfss	status,0,c
  2071  0013AA  D06E               	goto	l266
  2072                           
  2073                           ; BSR set to: 1
  2074  0013AC  90D8               	bcf	status,0,c
  2075  0013AE  345E               	rlcf	_i,w,c
  2076  0013B0  6ED9               	movwf	fsr2l,c
  2077  0013B2  345F               	rlcf	_i+1,w,c
  2078  0013B4  6EDA               	movwf	fsr2h,c
  2079  0013B6  0E00               	movlw	low _S_array
  2080  0013B8  26D9               	addwf	fsr2l,f,c
  2081  0013BA  0E01               	movlw	high _S_array
  2082  0013BC  22DA               	addwfc	fsr2h,f,c
  2083  0013BE  50DE               	movf	postinc2,w,c
  2084  0013C0  5C4C               	subwf	_S_count,w,c
  2085  0013C2  504D               	movf	_S_count+1,w,c
  2086  0013C4  0A80               	xorlw	128
  2087  0013C6  6F8B               	movwf	(??_main+2)& (0+255),b
  2088  0013C8  50DE               	movf	postinc2,w,c
  2089  0013CA  0A80               	xorlw	128
  2090  0013CC  598B               	subwfb	(??_main+2)& (0+255),w,b
  2091  0013CE  A0D8               	btfss	status,0,c
  2092  0013D0  D05B               	goto	l266
  2093                           
  2094                           ; BSR set to: 1
  2095  0013D2  90D8               	bcf	status,0,c
  2096  0013D4  345E               	rlcf	_i,w,c
  2097  0013D6  6ED9               	movwf	fsr2l,c
  2098  0013D8  345F               	rlcf	_i+1,w,c
  2099  0013DA  6EDA               	movwf	fsr2h,c
  2100  0013DC  0E90               	movlw	low _N_array
  2101  0013DE  26D9               	addwf	fsr2l,f,c
  2102  0013E0  0E00               	movlw	high _N_array
  2103  0013E2  22DA               	addwfc	fsr2h,f,c
  2104  0013E4  50DE               	movf	postinc2,w,c
  2105  0013E6  5C4A               	subwf	_N_count,w,c
  2106  0013E8  504B               	movf	_N_count+1,w,c
  2107  0013EA  0A80               	xorlw	128
  2108  0013EC  6F8B               	movwf	(??_main+2)& (0+255),b
  2109  0013EE  50DE               	movf	postinc2,w,c
  2110  0013F0  0A80               	xorlw	128
  2111  0013F2  598B               	subwfb	(??_main+2)& (0+255),w,b
  2112  0013F4  A0D8               	btfss	status,0,c
  2113  0013F6  D048               	goto	l266
  2114                           
  2115                           ; BSR set to: 1
  2116  0013F8  90D8               	bcf	status,0,c
  2117  0013FA  345E               	rlcf	_i,w,c
  2118  0013FC  6ED9               	movwf	fsr2l,c
  2119  0013FE  345F               	rlcf	_i+1,w,c
  2120  001400  6EDA               	movwf	fsr2h,c
  2121  001402  0E80               	movlw	low _W_array
  2122  001404  26D9               	addwf	fsr2l,f,c
  2123  001406  0E00               	movlw	high _W_array
  2124  001408  22DA               	addwfc	fsr2h,f,c
  2125  00140A  50DE               	movf	postinc2,w,c
  2126  00140C  5C48               	subwf	_W_count,w,c
  2127  00140E  5049               	movf	_W_count+1,w,c
  2128  001410  0A80               	xorlw	128
  2129  001412  6F8B               	movwf	(??_main+2)& (0+255),b
  2130  001414  50DE               	movf	postinc2,w,c
  2131  001416  0A80               	xorlw	128
  2132  001418  598B               	subwfb	(??_main+2)& (0+255),w,b
  2133  00141A  A0D8               	btfss	status,0,c
  2134  00141C  D035               	goto	l266
  2135                           
  2136                           ; BSR set to: 1
  2137                           ;main.c: 247: printf("B:%d S:%d N:%d W:%d",B_count,S_count,N_count,W_count);
  2138  00141E  0EE7               	movlw	low STR_26
  2139  001420  0100               	movlb	0	; () banked
  2140  001422  6FF3               	movwf	printf@f& (0+255),b
  2141  001424  0EFE               	movlw	high STR_26
  2142  001426  6FF4               	movwf	(printf@f+1)& (0+255),b
  2143  001428  C04E  F0F5         	movff	_B_count,?_printf+2
  2144  00142C  C04F  F0F6         	movff	_B_count+1,?_printf+3
  2145  001430  C04C  F0F7         	movff	_S_count,?_printf+4
  2146  001434  C04D  F0F8         	movff	_S_count+1,?_printf+5
  2147  001438  C04A  F0F9         	movff	_N_count,?_printf+6
  2148  00143C  C04B  F0FA         	movff	_N_count+1,?_printf+7
  2149  001440  C048  F0FB         	movff	_W_count,?_printf+8
  2150  001444  C049  F0FC         	movff	_W_count+1,?_printf+9
  2151  001448  EC6A  F011         	call	_printf	;wreg free
  2152                           
  2153                           ;main.c: 248: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2154  00144C  0E33               	movlw	51
  2155  00144E  0101               	movlb	1	; () banked
  2156  001450  6F8A               	movwf	(??_main+1)& (0+255),b
  2157  001452  0EBB               	movlw	187
  2158  001454  6F89               	movwf	??_main& (0+255),b
  2159  001456  0EDF               	movlw	223
  2160  001458                     u4057:
  2161  001458  2EE8               	decfsz	wreg,f,c
  2162  00145A  D7FE               	bra	u4057
  2163  00145C  2F89               	decfsz	??_main& (0+255),f,b
  2164  00145E  D7FC               	bra	u4057
  2165  001460  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2166  001462  D7FA               	bra	u4057
  2167  001464  D000               	nop2	
  2168                           
  2169                           ;main.c: 249: B_count = 0;
  2170  001466  0E00               	movlw	0
  2171  001468  6E4F               	movwf	_B_count+1,c
  2172  00146A  0E00               	movlw	0
  2173  00146C  6E4E               	movwf	_B_count,c
  2174                           
  2175                           ;main.c: 250: S_count = 0;
  2176  00146E  0E00               	movlw	0
  2177  001470  6E4D               	movwf	_S_count+1,c
  2178  001472  0E00               	movlw	0
  2179  001474  6E4C               	movwf	_S_count,c
  2180                           
  2181                           ;main.c: 251: N_count = 0;
  2182  001476  0E00               	movlw	0
  2183  001478  6E4B               	movwf	_N_count+1,c
  2184  00147A  0E00               	movlw	0
  2185  00147C  6E4A               	movwf	_N_count,c
  2186                           
  2187                           ;main.c: 252: W_count = 0;
  2188  00147E  0E00               	movlw	0
  2189  001480  6E49               	movwf	_W_count+1,c
  2190  001482  0E00               	movlw	0
  2191  001484  6E48               	movwf	_W_count,c
  2192                           
  2193                           ;main.c: 255: break;
  2194  001486  D100               	goto	l273
  2195  001488                     l266:
  2196                           
  2197                           ;main.c: 256: }
  2198                           ;main.c: 259: if (B_count< B_array[i]){
  2199  001488  90D8               	bcf	status,0,c
  2200  00148A  345E               	rlcf	_i,w,c
  2201  00148C  6ED9               	movwf	fsr2l,c
  2202  00148E  345F               	rlcf	_i+1,w,c
  2203  001490  6EDA               	movwf	fsr2h,c
  2204  001492  0EA0               	movlw	low _B_array
  2205  001494  26D9               	addwf	fsr2l,f,c
  2206  001496  0E00               	movlw	high _B_array
  2207  001498  22DA               	addwfc	fsr2h,f,c
  2208  00149A  50DE               	movf	postinc2,w,c
  2209  00149C  5C4E               	subwf	_B_count,w,c
  2210  00149E  504F               	movf	_B_count+1,w,c
  2211  0014A0  0A80               	xorlw	128
  2212  0014A2  0101               	movlb	1	; () banked
  2213  0014A4  6F8B               	movwf	(??_main+2)& (0+255),b
  2214  0014A6  50DE               	movf	postinc2,w,c
  2215  0014A8  0A80               	xorlw	128
  2216  0014AA  598B               	subwfb	(??_main+2)& (0+255),w,b
  2217  0014AC  B0D8               	btfsc	status,0,c
  2218  0014AE  D020               	goto	l268
  2219                           
  2220                           ; BSR set to: 1
  2221                           ;main.c: 261: printf("B:");
  2222  0014B0  0EE4               	movlw	low (STR_14+1)
  2223  0014B2  0100               	movlb	0	; () banked
  2224  0014B4  6FF3               	movwf	printf@f& (0+255),b
  2225  0014B6  0EFF               	movlw	high (STR_14+1)
  2226  0014B8  6FF4               	movwf	(printf@f+1)& (0+255),b
  2227  0014BA  EC6A  F011         	call	_printf	;wreg free
  2228                           
  2229                           ;main.c: 262: printf("%d", B_count);
  2230  0014BE  0EF8               	movlw	low (STR_26+17)
  2231  0014C0  0100               	movlb	0	; () banked
  2232  0014C2  6FF3               	movwf	printf@f& (0+255),b
  2233  0014C4  0EFE               	movlw	high (STR_26+17)
  2234  0014C6  6FF4               	movwf	(printf@f+1)& (0+255),b
  2235  0014C8  C04E  F0F5         	movff	_B_count,?_printf+2
  2236  0014CC  C04F  F0F6         	movff	_B_count+1,?_printf+3
  2237  0014D0  EC6A  F011         	call	_printf	;wreg free
  2238                           
  2239                           ;main.c: 263: _delay((unsigned long)((800)*(40000000/4000.0)));
  2240  0014D4  0E29               	movlw	41
  2241  0014D6  0101               	movlb	1	; () banked
  2242  0014D8  6F8A               	movwf	(??_main+1)& (0+255),b
  2243  0014DA  0E96               	movlw	150
  2244  0014DC  6F89               	movwf	??_main& (0+255),b
  2245  0014DE  0E7F               	movlw	127
  2246  0014E0                     u4067:
  2247  0014E0  2EE8               	decfsz	wreg,f,c
  2248  0014E2  D7FE               	bra	u4067
  2249  0014E4  2F89               	decfsz	??_main& (0+255),f,b
  2250  0014E6  D7FC               	bra	u4067
  2251  0014E8  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2252  0014EA  D7FA               	bra	u4067
  2253                           
  2254                           ;main.c: 266: B_count++;
  2255  0014EC  4A4E               	infsnz	_B_count,f,c
  2256  0014EE  2A4F               	incf	_B_count+1,f,c
  2257  0014F0                     l268:
  2258                           
  2259                           ;main.c: 267: }
  2260                           ;main.c: 268: if (S_count< S_array[i]){
  2261  0014F0  90D8               	bcf	status,0,c
  2262  0014F2  345E               	rlcf	_i,w,c
  2263  0014F4  6ED9               	movwf	fsr2l,c
  2264  0014F6  345F               	rlcf	_i+1,w,c
  2265  0014F8  6EDA               	movwf	fsr2h,c
  2266  0014FA  0E00               	movlw	low _S_array
  2267  0014FC  26D9               	addwf	fsr2l,f,c
  2268  0014FE  0E01               	movlw	high _S_array
  2269  001500  22DA               	addwfc	fsr2h,f,c
  2270  001502  50DE               	movf	postinc2,w,c
  2271  001504  5C4C               	subwf	_S_count,w,c
  2272  001506  504D               	movf	_S_count+1,w,c
  2273  001508  0A80               	xorlw	128
  2274  00150A  0101               	movlb	1	; () banked
  2275  00150C  6F8B               	movwf	(??_main+2)& (0+255),b
  2276  00150E  50DE               	movf	postinc2,w,c
  2277  001510  0A80               	xorlw	128
  2278  001512  598B               	subwfb	(??_main+2)& (0+255),w,b
  2279  001514  B0D8               	btfsc	status,0,c
  2280  001516  D020               	goto	l269
  2281                           
  2282                           ; BSR set to: 1
  2283                           ;main.c: 269: printf("S:");
  2284  001518  0EEF               	movlw	low STR_29
  2285  00151A  0100               	movlb	0	; () banked
  2286  00151C  6FF3               	movwf	printf@f& (0+255),b
  2287  00151E  0EFF               	movlw	high STR_29
  2288  001520  6FF4               	movwf	(printf@f+1)& (0+255),b
  2289  001522  EC6A  F011         	call	_printf	;wreg free
  2290                           
  2291                           ;main.c: 270: printf("%d", S_count);
  2292  001526  0EF8               	movlw	low (STR_26+17)
  2293  001528  0100               	movlb	0	; () banked
  2294  00152A  6FF3               	movwf	printf@f& (0+255),b
  2295  00152C  0EFE               	movlw	high (STR_26+17)
  2296  00152E  6FF4               	movwf	(printf@f+1)& (0+255),b
  2297  001530  C04C  F0F5         	movff	_S_count,?_printf+2
  2298  001534  C04D  F0F6         	movff	_S_count+1,?_printf+3
  2299  001538  EC6A  F011         	call	_printf	;wreg free
  2300                           
  2301                           ;main.c: 271: _delay((unsigned long)((800)*(40000000/4000.0)));
  2302  00153C  0E29               	movlw	41
  2303  00153E  0101               	movlb	1	; () banked
  2304  001540  6F8A               	movwf	(??_main+1)& (0+255),b
  2305  001542  0E96               	movlw	150
  2306  001544  6F89               	movwf	??_main& (0+255),b
  2307  001546  0E7F               	movlw	127
  2308  001548                     u4077:
  2309  001548  2EE8               	decfsz	wreg,f,c
  2310  00154A  D7FE               	bra	u4077
  2311  00154C  2F89               	decfsz	??_main& (0+255),f,b
  2312  00154E  D7FC               	bra	u4077
  2313  001550  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2314  001552  D7FA               	bra	u4077
  2315                           
  2316                           ;main.c: 272: S_count++;
  2317  001554  4A4C               	infsnz	_S_count,f,c
  2318  001556  2A4D               	incf	_S_count+1,f,c
  2319  001558                     l269:
  2320                           
  2321                           ;main.c: 273: }
  2322                           ;main.c: 275: if (N_count< N_array[i]){
  2323  001558  90D8               	bcf	status,0,c
  2324  00155A  345E               	rlcf	_i,w,c
  2325  00155C  6ED9               	movwf	fsr2l,c
  2326  00155E  345F               	rlcf	_i+1,w,c
  2327  001560  6EDA               	movwf	fsr2h,c
  2328  001562  0E90               	movlw	low _N_array
  2329  001564  26D9               	addwf	fsr2l,f,c
  2330  001566  0E00               	movlw	high _N_array
  2331  001568  22DA               	addwfc	fsr2h,f,c
  2332  00156A  50DE               	movf	postinc2,w,c
  2333  00156C  5C4A               	subwf	_N_count,w,c
  2334  00156E  504B               	movf	_N_count+1,w,c
  2335  001570  0A80               	xorlw	128
  2336  001572  0101               	movlb	1	; () banked
  2337  001574  6F8B               	movwf	(??_main+2)& (0+255),b
  2338  001576  50DE               	movf	postinc2,w,c
  2339  001578  0A80               	xorlw	128
  2340  00157A  598B               	subwfb	(??_main+2)& (0+255),w,b
  2341  00157C  B0D8               	btfsc	status,0,c
  2342  00157E  D020               	goto	l270
  2343                           
  2344                           ; BSR set to: 1
  2345                           ;main.c: 276: printf("N:");
  2346  001580  0EE8               	movlw	low (STR_16+1)
  2347  001582  0100               	movlb	0	; () banked
  2348  001584  6FF3               	movwf	printf@f& (0+255),b
  2349  001586  0EFF               	movlw	high (STR_16+1)
  2350  001588  6FF4               	movwf	(printf@f+1)& (0+255),b
  2351  00158A  EC6A  F011         	call	_printf	;wreg free
  2352                           
  2353                           ;main.c: 277: printf("%d", N_count);
  2354  00158E  0EF8               	movlw	low (STR_26+17)
  2355  001590  0100               	movlb	0	; () banked
  2356  001592  6FF3               	movwf	printf@f& (0+255),b
  2357  001594  0EFE               	movlw	high (STR_26+17)
  2358  001596  6FF4               	movwf	(printf@f+1)& (0+255),b
  2359  001598  C04A  F0F5         	movff	_N_count,?_printf+2
  2360  00159C  C04B  F0F6         	movff	_N_count+1,?_printf+3
  2361  0015A0  EC6A  F011         	call	_printf	;wreg free
  2362                           
  2363                           ;main.c: 278: _delay((unsigned long)((800)*(40000000/4000.0)));
  2364  0015A4  0E29               	movlw	41
  2365  0015A6  0101               	movlb	1	; () banked
  2366  0015A8  6F8A               	movwf	(??_main+1)& (0+255),b
  2367  0015AA  0E96               	movlw	150
  2368  0015AC  6F89               	movwf	??_main& (0+255),b
  2369  0015AE  0E7F               	movlw	127
  2370  0015B0                     u4087:
  2371  0015B0  2EE8               	decfsz	wreg,f,c
  2372  0015B2  D7FE               	bra	u4087
  2373  0015B4  2F89               	decfsz	??_main& (0+255),f,b
  2374  0015B6  D7FC               	bra	u4087
  2375  0015B8  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2376  0015BA  D7FA               	bra	u4087
  2377                           
  2378                           ;main.c: 279: N_count++;
  2379  0015BC  4A4A               	infsnz	_N_count,f,c
  2380  0015BE  2A4B               	incf	_N_count+1,f,c
  2381  0015C0                     l270:
  2382                           
  2383                           ;main.c: 280: }
  2384                           ;main.c: 282: if (W_count< W_array[i]){
  2385  0015C0  90D8               	bcf	status,0,c
  2386  0015C2  345E               	rlcf	_i,w,c
  2387  0015C4  6ED9               	movwf	fsr2l,c
  2388  0015C6  345F               	rlcf	_i+1,w,c
  2389  0015C8  6EDA               	movwf	fsr2h,c
  2390  0015CA  0E80               	movlw	low _W_array
  2391  0015CC  26D9               	addwf	fsr2l,f,c
  2392  0015CE  0E00               	movlw	high _W_array
  2393  0015D0  22DA               	addwfc	fsr2h,f,c
  2394  0015D2  50DE               	movf	postinc2,w,c
  2395  0015D4  5C48               	subwf	_W_count,w,c
  2396  0015D6  5049               	movf	_W_count+1,w,c
  2397  0015D8  0A80               	xorlw	128
  2398  0015DA  0101               	movlb	1	; () banked
  2399  0015DC  6F8B               	movwf	(??_main+2)& (0+255),b
  2400  0015DE  50DE               	movf	postinc2,w,c
  2401  0015E0  0A80               	xorlw	128
  2402  0015E2  598B               	subwfb	(??_main+2)& (0+255),w,b
  2403  0015E4  B0D8               	btfsc	status,0,c
  2404  0015E6  D6C2               	goto	l265
  2405                           
  2406                           ; BSR set to: 1
  2407                           ;main.c: 283: printf("W:");
  2408  0015E8  0EEC               	movlw	low (STR_20+1)
  2409  0015EA  0100               	movlb	0	; () banked
  2410  0015EC  6FF3               	movwf	printf@f& (0+255),b
  2411  0015EE  0EFF               	movlw	high (STR_20+1)
  2412  0015F0  6FF4               	movwf	(printf@f+1)& (0+255),b
  2413  0015F2  EC6A  F011         	call	_printf	;wreg free
  2414                           
  2415                           ;main.c: 284: printf("%d", W_count);
  2416  0015F6  0EF8               	movlw	low (STR_26+17)
  2417  0015F8  0100               	movlb	0	; () banked
  2418  0015FA  6FF3               	movwf	printf@f& (0+255),b
  2419  0015FC  0EFE               	movlw	high (STR_26+17)
  2420  0015FE  6FF4               	movwf	(printf@f+1)& (0+255),b
  2421  001600  C048  F0F5         	movff	_W_count,?_printf+2
  2422  001604  C049  F0F6         	movff	_W_count+1,?_printf+3
  2423  001608  EC6A  F011         	call	_printf	;wreg free
  2424                           
  2425                           ;main.c: 285: _delay((unsigned long)((800)*(40000000/4000.0)));
  2426  00160C  0E29               	movlw	41
  2427  00160E  0101               	movlb	1	; () banked
  2428  001610  6F8A               	movwf	(??_main+1)& (0+255),b
  2429  001612  0E96               	movlw	150
  2430  001614  6F89               	movwf	??_main& (0+255),b
  2431  001616  0E7F               	movlw	127
  2432  001618                     u4097:
  2433  001618  2EE8               	decfsz	wreg,f,c
  2434  00161A  D7FE               	bra	u4097
  2435  00161C  2F89               	decfsz	??_main& (0+255),f,b
  2436  00161E  D7FC               	bra	u4097
  2437  001620  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2438  001622  D7FA               	bra	u4097
  2439                           
  2440                           ;main.c: 286: W_count++;
  2441  001624  4A48               	infsnz	_W_count,f,c
  2442  001626  2A49               	incf	_W_count+1,f,c
  2443  001628  D6A1               	goto	l265
  2444  00162A                     l264:
  2445                           
  2446                           ;main.c: 352: else{
  2447                           ;main.c: 361: initLCD();
  2448  00162A  EC00  F016         	call	_initLCD	;wreg free
  2449                           
  2450                           ;main.c: 362: printf("C");
  2451  00162E  0EFC               	movlw	low STR_23
  2452  001630  0100               	movlb	0	; () banked
  2453  001632  6FF3               	movwf	printf@f& (0+255),b
  2454  001634  0EFF               	movlw	high STR_23
  2455  001636  6FF4               	movwf	(printf@f+1)& (0+255),b
  2456  001638  EC6A  F011         	call	_printf	;wreg free
  2457                           
  2458                           ;main.c: 363: printf("%d",i);
  2459  00163C  0EF8               	movlw	low (STR_26+17)
  2460  00163E  0100               	movlb	0	; () banked
  2461  001640  6FF3               	movwf	printf@f& (0+255),b
  2462  001642  0EFE               	movlw	high (STR_26+17)
  2463  001644  6FF4               	movwf	(printf@f+1)& (0+255),b
  2464  001646  C05E  F0F5         	movff	_i,?_printf+2
  2465  00164A  C05F  F0F6         	movff	_i+1,?_printf+3
  2466  00164E  EC6A  F011         	call	_printf	;wreg free
  2467                           
  2468                           ;main.c: 364: printf(":");
  2469  001652  0EE5               	movlw	low (STR_14+2)
  2470  001654  0100               	movlb	0	; () banked
  2471  001656  6FF3               	movwf	printf@f& (0+255),b
  2472  001658  0EFF               	movlw	high (STR_14+2)
  2473  00165A  6FF4               	movwf	(printf@f+1)& (0+255),b
  2474  00165C  EC6A  F011         	call	_printf	;wreg free
  2475                           
  2476                           ;main.c: 365: printf("done");
  2477  001660  0E51               	movlw	low (STR_40+7)
  2478  001662  0100               	movlb	0	; () banked
  2479  001664  6FF3               	movwf	printf@f& (0+255),b
  2480  001666  0EFF               	movlw	high (STR_40+7)
  2481  001668  6FF4               	movwf	(printf@f+1)& (0+255),b
  2482  00166A  EC6A  F011         	call	_printf	;wreg free
  2483                           
  2484                           ;main.c: 366: _delay((unsigned long)((3000)*(40000000/4000.0)));
  2485  00166E  0E99               	movlw	153
  2486  001670  0101               	movlb	1	; () banked
  2487  001672  6F8A               	movwf	(??_main+1)& (0+255),b
  2488  001674  0E31               	movlw	49
  2489  001676  6F89               	movwf	??_main& (0+255),b
  2490  001678  0EA2               	movlw	162
  2491  00167A                     u4107:
  2492  00167A  2EE8               	decfsz	wreg,f,c
  2493  00167C  D7FE               	bra	u4107
  2494  00167E  2F89               	decfsz	??_main& (0+255),f,b
  2495  001680  D7FC               	bra	u4107
  2496  001682  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2497  001684  D7FA               	bra	u4107
  2498  001686  F000               	nop	
  2499  001688                     l273:
  2500  001688  4A5E               	infsnz	_i,f,c
  2501  00168A  2A5F               	incf	_i+1,f,c
  2502  00168C  505F               	movf	_i+1,w,c
  2503  00168E  E101               	bnz	l4884
  2504  001690  D62F               	goto	L2
  2505  001692                     u3860:
  2506  001692                     l4884:
  2507                           
  2508                           ;main.c: 369: }
  2509                           ;main.c: 370: }
  2510                           ;main.c: 375: }
  2511                           ;main.c: 377: store_prev();
  2512  001692  ECCB  F013         	call	_store_prev	;wreg free
  2513                           
  2514                           ;main.c: 378: mode = 3;
  2515  001696  0E00               	movlw	0
  2516  001698  6E47               	movwf	_mode+1,c
  2517  00169A  0E03               	movlw	3
  2518  00169C  6E46               	movwf	_mode,c
  2519  00169E                     l254:
  2520                           
  2521                           ;main.c: 379: }
  2522                           ;main.c: 388: if (mode == 3){
  2523  00169E  0E03               	movlw	3
  2524  0016A0  1846               	xorwf	_mode,w,c
  2525  0016A2  1047               	iorwf	_mode+1,w,c
  2526  0016A4  A4D8               	btfss	status,2,c
  2527  0016A6  EF4E  F007         	goto	l240
  2528                           
  2529                           ;main.c: 389: initLCD();
  2530  0016AA  EC00  F016         	call	_initLCD	;wreg free
  2531                           
  2532                           ;main.c: 404: servoRotate0();
  2533  0016AE  EC96  F016         	call	_servoRotate0	;wreg free
  2534                           
  2535                           ;main.c: 405: _delay((unsigned long)((200)*(40000000/4000.0)));
  2536  0016B2  0E0B               	movlw	11
  2537  0016B4  0101               	movlb	1	; () banked
  2538  0016B6  6F8A               	movwf	(??_main+1)& (0+255),b
  2539  0016B8  0E26               	movlw	38
  2540  0016BA  6F89               	movwf	??_main& (0+255),b
  2541  0016BC  0E5D               	movlw	93
  2542  0016BE                     u4117:
  2543  0016BE  2EE8               	decfsz	wreg,f,c
  2544  0016C0  D7FE               	bra	u4117
  2545  0016C2  2F89               	decfsz	??_main& (0+255),f,b
  2546  0016C4  D7FC               	bra	u4117
  2547  0016C6  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2548  0016C8  D7FA               	bra	u4117
  2549  0016CA  D000               	nop2	
  2550                           
  2551                           ;main.c: 407: servoRotate180();
  2552  0016CC  EC4C  F016         	call	_servoRotate180	;wreg free
  2553                           
  2554                           ;main.c: 408: _delay((unsigned long)((300)*(40000000/4000.0)));
  2555  0016D0  0E10               	movlw	16
  2556  0016D2  0101               	movlb	1	; () banked
  2557  0016D4  6F8A               	movwf	(??_main+1)& (0+255),b
  2558  0016D6  0E39               	movlw	57
  2559  0016D8  6F89               	movwf	??_main& (0+255),b
  2560  0016DA  0E0D               	movlw	13
  2561  0016DC                     u4127:
  2562  0016DC  2EE8               	decfsz	wreg,f,c
  2563  0016DE  D7FE               	bra	u4127
  2564  0016E0  2F89               	decfsz	??_main& (0+255),f,b
  2565  0016E2  D7FC               	bra	u4127
  2566  0016E4  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2567  0016E6  D7FA               	bra	u4127
  2568  0016E8  D000               	nop2	
  2569                           
  2570                           ;main.c: 409: while(motor_counter<40){
  2571  0016EA  D007               	goto	l275
  2572  0016EC                     
  2573                           ;main.c: 410: motorStart_0();
  2574  0016EC  EC78  F017         	call	_motorStart_0	;wreg free
  2575                           
  2576                           ;main.c: 412: motor_counter++;
  2577  0016F0  0100               	movlb	0	; () banked
  2578  0016F2  4BCD               	infsnz	_motor_counter& (0+255),f,b
  2579  0016F4  2BCE               	incf	(_motor_counter+1)& (0+255),f,b
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 413: B_count ++;
  2583  0016F6  4A4E               	infsnz	_B_count,f,c
  2584  0016F8  2A4F               	incf	_B_count+1,f,c
  2585  0016FA                     l275:
  2586                           
  2587                           ; BSR set to: 0
  2588  0016FA  0100               	movlb	0	; () banked
  2589  0016FC  BFCE               	btfsc	(_motor_counter+1)& (0+255),7,b
  2590  0016FE  D7F6               	goto	l276
  2591  001700  51CE               	movf	(_motor_counter+1)& (0+255),w,b
  2592  001702  E104               	bnz	l4904
  2593  001704  0E28               	movlw	40
  2594  001706  5DCD               	subwf	_motor_counter& (0+255),w,b
  2595  001708  A0D8               	btfss	status,0,c
  2596  00170A  D7F0               	goto	l276
  2597  00170C                     l4904:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;main.c: 415: }
  2601                           ;main.c: 416: motorStop_0();
  2602  00170C  EC68  F017         	call	_motorStop_0	;wreg free
  2603                           
  2604                           ;main.c: 418: printf("remain:%d",B_count);
  2605  001710  0E6D               	movlw	low STR_39
  2606  001712  0100               	movlb	0	; () banked
  2607  001714  6FF3               	movwf	printf@f& (0+255),b
  2608  001716  0EFF               	movlw	high STR_39
  2609  001718  6FF4               	movwf	(printf@f+1)& (0+255),b
  2610  00171A  C04E  F0F5         	movff	_B_count,?_printf+2
  2611  00171E  C04F  F0F6         	movff	_B_count+1,?_printf+3
  2612  001722  EC6A  F011         	call	_printf	;wreg free
  2613                           
  2614                           ;main.c: 419: _delay((unsigned long)((3000)*(40000000/4000.0)));
  2615  001726  0E99               	movlw	153
  2616  001728  0101               	movlb	1	; () banked
  2617  00172A  6F8A               	movwf	(??_main+1)& (0+255),b
  2618  00172C  0E31               	movlw	49
  2619  00172E  6F89               	movwf	??_main& (0+255),b
  2620  001730  0EA2               	movlw	162
  2621  001732                     u4137:
  2622  001732  2EE8               	decfsz	wreg,f,c
  2623  001734  D7FE               	bra	u4137
  2624  001736  2F89               	decfsz	??_main& (0+255),f,b
  2625  001738  D7FC               	bra	u4137
  2626  00173A  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2627  00173C  D7FA               	bra	u4137
  2628  00173E  F000               	nop	
  2629                           
  2630                           ;main.c: 420: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2631  001740  0E80               	movlw	128
  2632  001742  EC94  F017         	call	_lcdInst
  2633  001746  0E41               	movlw	65
  2634  001748  0101               	movlb	1	; () banked
  2635  00174A  6F89               	movwf	??_main& (0+255),b
  2636  00174C  0EEE               	movlw	238
  2637  00174E                     u4147:
  2638  00174E  2EE8               	decfsz	wreg,f,c
  2639  001750  D7FE               	bra	u4147
  2640  001752  2F89               	decfsz	??_main& (0+255),f,b
  2641  001754  D7FC               	bra	u4147
  2642  001756  F000               	nop	
  2643                           
  2644                           ;main.c: 421: initLCD();
  2645  001758  EC00  F016         	call	_initLCD	;wreg free
  2646                           
  2647                           ;main.c: 422: printf("you're done");
  2648  00175C  0E4A               	movlw	low STR_40
  2649  00175E  0100               	movlb	0	; () banked
  2650  001760  6FF3               	movwf	printf@f& (0+255),b
  2651  001762  0EFF               	movlw	high STR_40
  2652  001764  6FF4               	movwf	(printf@f+1)& (0+255),b
  2653  001766  EC6A  F011         	call	_printf	;wreg free
  2654                           
  2655                           ;main.c: 423: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2656  00176A  0E33               	movlw	51
  2657  00176C  0101               	movlb	1	; () banked
  2658  00176E  6F8A               	movwf	(??_main+1)& (0+255),b
  2659  001770  0EBB               	movlw	187
  2660  001772  6F89               	movwf	??_main& (0+255),b
  2661  001774  0EDF               	movlw	223
  2662  001776                     u4157:
  2663  001776  2EE8               	decfsz	wreg,f,c
  2664  001778  D7FE               	bra	u4157
  2665  00177A  2F89               	decfsz	??_main& (0+255),f,b
  2666  00177C  D7FC               	bra	u4157
  2667  00177E  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2668  001780  D7FA               	bra	u4157
  2669  001782  D000               	nop2	
  2670                           
  2671                           ;main.c: 424: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2672  001784  0E80               	movlw	128
  2673  001786  EC94  F017         	call	_lcdInst
  2674  00178A  0E41               	movlw	65
  2675  00178C  0101               	movlb	1	; () banked
  2676  00178E  6F89               	movwf	??_main& (0+255),b
  2677  001790  0EEE               	movlw	238
  2678  001792                     u4167:
  2679  001792  2EE8               	decfsz	wreg,f,c
  2680  001794  D7FE               	bra	u4167
  2681  001796  2F89               	decfsz	??_main& (0+255),f,b
  2682  001798  D7FC               	bra	u4167
  2683  00179A  F000               	nop	
  2684  00179C                     
  2685                           ;main.c: 426: operation = 1;
  2686  00179C  0E00               	movlw	0
  2687  00179E  0100               	movlb	0	; () banked
  2688  0017A0  6FCC               	movwf	(_operation+1)& (0+255),b
  2689  0017A2  0E01               	movlw	1
  2690  0017A4  6FCB               	movwf	_operation& (0+255),b
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;main.c: 427: printf("1: operation time");
  2694  0017A6  0EFB               	movlw	low STR_41
  2695  0017A8  6FF3               	movwf	printf@f& (0+255),b
  2696  0017AA  0EFE               	movlw	high STR_41
  2697  0017AC  6FF4               	movwf	(printf@f+1)& (0+255),b
  2698  0017AE  EC6A  F011         	call	_printf	;wreg free
  2699                           
  2700                           ;main.c: 428: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2701  0017B2  0E33               	movlw	51
  2702  0017B4  0101               	movlb	1	; () banked
  2703  0017B6  6F8A               	movwf	(??_main+1)& (0+255),b
  2704  0017B8  0EBB               	movlw	187
  2705  0017BA  6F89               	movwf	??_main& (0+255),b
  2706  0017BC  0EDF               	movlw	223
  2707  0017BE                     u4177:
  2708  0017BE  2EE8               	decfsz	wreg,f,c
  2709  0017C0  D7FE               	bra	u4177
  2710  0017C2  2F89               	decfsz	??_main& (0+255),f,b
  2711  0017C4  D7FC               	bra	u4177
  2712  0017C6  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2713  0017C8  D7FA               	bra	u4177
  2714  0017CA  D000               	nop2	
  2715                           
  2716                           ;main.c: 429: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2717  0017CC  0E80               	movlw	128
  2718  0017CE  EC94  F017         	call	_lcdInst
  2719  0017D2  0E41               	movlw	65
  2720  0017D4  0101               	movlb	1	; () banked
  2721  0017D6  6F89               	movwf	??_main& (0+255),b
  2722  0017D8  0EEE               	movlw	238
  2723  0017DA                     u4187:
  2724  0017DA  2EE8               	decfsz	wreg,f,c
  2725  0017DC  D7FE               	bra	u4187
  2726  0017DE  2F89               	decfsz	??_main& (0+255),f,b
  2727  0017E0  D7FC               	bra	u4187
  2728  0017E2  F000               	nop	
  2729                           
  2730                           ;main.c: 431: if(operation_time == 1){
  2731  0017E4  0100               	movlb	0	; () banked
  2732  0017E6  05C9               	decf	_operation_time& (0+255),w,b
  2733  0017E8  11CA               	iorwf	(_operation_time+1)& (0+255),w,b
  2734  0017EA  A4D8               	btfss	status,2,c
  2735  0017EC  D7D7               	goto	l278
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;main.c: 433: }
  2739                           ;main.c: 434: }
  2740                           ;main.c: 435: initialize();
  2741                           
  2742                           ; BSR set to: 0
  2743                           
  2744                           ; BSR set to: 0
  2745                           
  2746                           ; BSR set to: 0
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 432: break;
  2750  0017EE  EC2E  F013         	call	_initialize	;wreg free
  2751                           
  2752                           ;main.c: 436: mode = 0;
  2753  0017F2  0E00               	movlw	0
  2754  0017F4  6E47               	movwf	_mode+1,c
  2755  0017F6  0E00               	movlw	0
  2756  0017F8  6E46               	movwf	_mode,c
  2757  0017FA  EF4E  F007         	goto	l240
  2758  0017FE                     __end_of_main:
  2759                           	opt stack 0
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           intcon	equ	0xFF2
  2765                           intcon3	equ	0xFF0
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postinc2	equ	0xFDE
  2769                           postdec2	equ	0xFDD
  2770                           fsr2h	equ	0xFDA
  2771                           fsr2l	equ	0xFD9
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _store_prev *****************
  2775 ;; Defined at:
  2776 ;;		line 324 in file "keypad.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;		None
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  i               2   14[BANK0 ] int 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;Total ram usage:        2 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    5
  2797 ;; This function calls:
  2798 ;;		___wmul
  2799 ;;		_strncpy
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text1
  2806  002796                     __ptext1:
  2807                           	opt stack 0
  2808  002796                     _store_prev:
  2809                           	opt stack 25
  2810                           
  2811                           ;keypad.c: 325: for (int i = 0; i<8; i++){
  2812                           
  2813                           ;incstack = 0
  2814  002796  0E00               	movlw	0
  2815  002798  0100               	movlb	0	; () banked
  2816  00279A  6FF6               	movwf	(store_prev@i+1)& (0+255),b
  2817  00279C  0E00               	movlw	0
  2818  00279E  6FF5               	movwf	store_prev@i& (0+255),b
  2819  0027A0                     l4576:
  2820                           
  2821                           ; BSR set to: 0
  2822  0027A0  BFF6               	btfsc	(store_prev@i+1)& (0+255),7,b
  2823  0027A2  D006               	goto	l615
  2824  0027A4  51F6               	movf	(store_prev@i+1)& (0+255),w,b
  2825  0027A6  E146               	bnz	l617
  2826  0027A8  0E08               	movlw	8
  2827  0027AA  5DF5               	subwf	store_prev@i& (0+255),w,b
  2828  0027AC  B0D8               	btfsc	status,0,c
  2829  0027AE  0012               	return	
  2830  0027B0                     l615:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;keypad.c: 326: strncpy(prev_set[i],final_set[i],5);
  2834                           
  2835                           ; BSR set to: 0
  2836  0027B0  C0F5  F0E7         	movff	store_prev@i,___wmul@multiplier
  2837  0027B4  C0F6  F0E8         	movff	store_prev@i+1,___wmul@multiplier+1
  2838  0027B8  0E00               	movlw	0
  2839  0027BA  6FEA               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2840  0027BC  0E05               	movlw	5
  2841  0027BE  6FE9               	movwf	___wmul@multiplicand& (0+255),b
  2842  0027C0  EC41  F017         	call	___wmul	;wreg free
  2843  0027C4  0E30               	movlw	low _prev_set
  2844  0027C6  0100               	movlb	0	; () banked
  2845  0027C8  25E7               	addwf	?___wmul& (0+255),w,b
  2846  0027CA  6FED               	movwf	strncpy@to& (0+255),b
  2847  0027CC  0E01               	movlw	high _prev_set
  2848  0027CE  21E8               	addwfc	(?___wmul+1)& (0+255),w,b
  2849  0027D0  6FEE               	movwf	(strncpy@to+1)& (0+255),b
  2850  0027D2  C0F5  F0E7         	movff	store_prev@i,___wmul@multiplier
  2851  0027D6  C0F6  F0E8         	movff	store_prev@i+1,___wmul@multiplier+1
  2852  0027DA  0E00               	movlw	0
  2853  0027DC  6FEA               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2854  0027DE  0E05               	movlw	5
  2855  0027E0  6FE9               	movwf	___wmul@multiplicand& (0+255),b
  2856  0027E2  EC41  F017         	call	___wmul	;wreg free
  2857  0027E6  0E58               	movlw	low _final_set
  2858  0027E8  0100               	movlb	0	; () banked
  2859  0027EA  25E7               	addwf	?___wmul& (0+255),w,b
  2860  0027EC  6FEF               	movwf	strncpy@from& (0+255),b
  2861  0027EE  0E01               	movlw	high _final_set
  2862  0027F0  21E8               	addwfc	(?___wmul+1)& (0+255),w,b
  2863  0027F2  6FF0               	movwf	(strncpy@from+1)& (0+255),b
  2864  0027F4  0E00               	movlw	0
  2865  0027F6  6FF2               	movwf	(strncpy@size+1)& (0+255),b
  2866  0027F8  0E05               	movlw	5
  2867  0027FA  6FF1               	movwf	strncpy@size& (0+255),b
  2868  0027FC  EC53  F015         	call	_strncpy	;wreg free
  2869                           
  2870                           ;keypad.c: 327: prev_number[i] = final_number[i];
  2871  002800  90D8               	bcf	status,0,c
  2872  002802  0100               	movlb	0	; () banked
  2873  002804  35F5               	rlcf	store_prev@i& (0+255),w,b
  2874  002806  6ED9               	movwf	fsr2l,c
  2875  002808  35F6               	rlcf	(store_prev@i+1)& (0+255),w,b
  2876  00280A  6EDA               	movwf	fsr2h,c
  2877  00280C  0E20               	movlw	low _final_number
  2878  00280E  26D9               	addwf	fsr2l,f,c
  2879  002810  0E01               	movlw	high _final_number
  2880  002812  22DA               	addwfc	fsr2h,f,c
  2881  002814  90D8               	bcf	status,0,c
  2882  002816  35F5               	rlcf	store_prev@i& (0+255),w,b
  2883  002818  6EE1               	movwf	fsr1l,c
  2884  00281A  35F6               	rlcf	(store_prev@i+1)& (0+255),w,b
  2885  00281C  6EE2               	movwf	fsr1h,c
  2886  00281E  0E10               	movlw	low _prev_number
  2887  002820  26E1               	addwf	fsr1l,f,c
  2888  002822  0E01               	movlw	high _prev_number
  2889  002824  22E2               	addwfc	fsr1h,f,c
  2890  002826  CFDE FFE6          	movff	postinc2,postinc1
  2891  00282A  CFDD FFE5          	movff	postdec2,postdec1
  2892                           
  2893                           ; BSR set to: 0
  2894  00282E  4BF5               	infsnz	store_prev@i& (0+255),f,b
  2895  002830  2BF6               	incf	(store_prev@i+1)& (0+255),f,b
  2896  002832  D7B6               	goto	l4576
  2897  002834                     l617:
  2898                           
  2899                           ; BSR set to: 0
  2900  002834  0012               	return		;funcret
  2901  002836                     __end_of_store_prev:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           intcon	equ	0xFF2
  2908                           intcon3	equ	0xFF0
  2909                           postinc0	equ	0xFEE
  2910                           wreg	equ	0xFE8
  2911                           postinc1	equ	0xFE6
  2912                           postdec1	equ	0xFE5
  2913                           fsr1h	equ	0xFE2
  2914                           fsr1l	equ	0xFE1
  2915                           postinc2	equ	0xFDE
  2916                           postdec2	equ	0xFDD
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function _strncpy *****************
  2922 ;; Defined at:
  2923 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strncpy.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  to              2    6[BANK0 ] PTR unsigned char 
  2926 ;;		 -> prev_set(40), 
  2927 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  2928 ;;		 -> final_set(40), 
  2929 ;;  size            2   10[BANK0 ] unsigned int 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  cp              2   12[BANK0 ] PTR unsigned char 
  2932 ;;		 -> prev_set(40), 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  2    6[BANK0 ] PTR unsigned char 
  2935 ;; Registers used:
  2936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2942 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;Total ram usage:        8 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    4
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_store_prev
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text2
  2957  002AA6                     __ptext2:
  2958                           	opt stack 0
  2959  002AA6                     _strncpy:
  2960                           	opt stack 25
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;incstack = 0
  2964  002AA6  C0ED  F0F3         	movff	strncpy@to,strncpy@cp
  2965  002AAA  C0EE  F0F4         	movff	strncpy@to+1,strncpy@cp+1
  2966  002AAE  D015               	goto	l1234
  2967  002AB0  0100               	movlb	0	; () banked
  2968  002AB2  07F1               	decf	strncpy@size& (0+255),f,b
  2969  002AB4  A0D8               	btfss	status,0,c
  2970  002AB6  07F2               	decf	(strncpy@size+1)& (0+255),f,b
  2971                           
  2972                           ; BSR set to: 0
  2973  002AB8  C0EF  FFD9         	movff	strncpy@from,fsr2l
  2974  002ABC  C0F0  FFDA         	movff	strncpy@from+1,fsr2h
  2975  002AC0  4BEF               	infsnz	strncpy@from& (0+255),f,b
  2976  002AC2  2BF0               	incf	(strncpy@from+1)& (0+255),f,b
  2977  002AC4  C0F3  FFE1         	movff	strncpy@cp,fsr1l
  2978  002AC8  C0F4  FFE2         	movff	strncpy@cp+1,fsr1h
  2979  002ACC  4BF3               	infsnz	strncpy@cp& (0+255),f,b
  2980  002ACE  2BF4               	incf	(strncpy@cp+1)& (0+255),f,b
  2981  002AD0  CFDF FFE7          	movff	indf2,indf1
  2982  002AD4  50E7               	movf	indf1,w,c
  2983  002AD6  B4D8               	btfsc	status,2,c
  2984  002AD8  D00E               	goto	l1236
  2985  002ADA                     l1234:
  2986                           
  2987                           ; BSR set to: 0
  2988                           
  2989                           ; BSR set to: 0
  2990  002ADA  0100               	movlb	0	; () banked
  2991  002ADC  51F1               	movf	strncpy@size& (0+255),w,b
  2992  002ADE  11F2               	iorwf	(strncpy@size+1)& (0+255),w,b
  2993  002AE0  B4D8               	btfsc	status,2,c
  2994  002AE2  D009               	goto	l1236
  2995  002AE4  D7E5               	goto	l1233
  2996  002AE6                     l4424:
  2997                           
  2998                           ; BSR set to: 0
  2999  002AE6  C0F3  FFD9         	movff	strncpy@cp,fsr2l
  3000  002AEA  C0F4  FFDA         	movff	strncpy@cp+1,fsr2h
  3001  002AEE  0E00               	movlw	0
  3002  002AF0  6EDF               	movwf	indf2,c
  3003                           
  3004                           ; BSR set to: 0
  3005  002AF2  4BF3               	infsnz	strncpy@cp& (0+255),f,b
  3006  002AF4  2BF4               	incf	(strncpy@cp+1)& (0+255),f,b
  3007  002AF6                     l1236:
  3008                           
  3009                           ; BSR set to: 0
  3010                           
  3011                           ; BSR set to: 0
  3012  002AF6  07F1               	decf	strncpy@size& (0+255),f,b
  3013  002AF8  A0D8               	btfss	status,0,c
  3014  002AFA  07F2               	decf	(strncpy@size+1)& (0+255),f,b
  3015  002AFC  29F1               	incf	strncpy@size& (0+255),w,b
  3016  002AFE  E1F3               	bnz	l4424
  3017  002B00  29F2               	incf	(strncpy@size+1)& (0+255),w,b
  3018  002B02  B4D8               	btfsc	status,2,c
  3019  002B04  0012               	return	
  3020  002B06  D7EF               	goto	l1237
  3021  002B08                     __end_of_strncpy:
  3022                           	opt stack 0
  3023                           tblptru	equ	0xFF8
  3024                           tblptrh	equ	0xFF7
  3025                           tblptrl	equ	0xFF6
  3026                           tablat	equ	0xFF5
  3027                           intcon	equ	0xFF2
  3028                           intcon3	equ	0xFF0
  3029                           postinc0	equ	0xFEE
  3030                           wreg	equ	0xFE8
  3031                           indf1	equ	0xFE7
  3032                           postinc1	equ	0xFE6
  3033                           postdec1	equ	0xFE5
  3034                           fsr1h	equ	0xFE2
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           postdec2	equ	0xFDD
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function ___wmul *****************
  3044 ;; Defined at:
  3045 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3048 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  product         2    4[BANK0 ] unsigned int 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  2    0[BANK0 ] unsigned int 
  3053 ;; Registers used:
  3054 ;;		wreg, status,2, status,0, prodl, prodh
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3060 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;Total ram usage:        6 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    4
  3067 ;; This function calls:
  3068 ;;		Nothing
  3069 ;; This function is called by:
  3070 ;;		_main
  3071 ;;		_store_prev
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text3
  3076  002E82                     __ptext3:
  3077                           	opt stack 0
  3078  002E82                     ___wmul:
  3079                           	opt stack 25
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;incstack = 0
  3083  002E82  0100               	movlb	0	; () banked
  3084  002E84  51E7               	movf	___wmul@multiplier& (0+255),w,b
  3085  002E86  03E9               	mulwf	___wmul@multiplicand& (0+255),b
  3086  002E88  CFF3 F0EB          	movff	prodl,___wmul@product
  3087  002E8C  CFF4 F0EC          	movff	prodh,___wmul@product+1
  3088  002E90  51E7               	movf	___wmul@multiplier& (0+255),w,b
  3089  002E92  03EA               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3090  002E94  50F3               	movf	prodl,w,c
  3091  002E96  27EC               	addwf	(___wmul@product+1)& (0+255),f,b
  3092  002E98  51E8               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3093  002E9A  03E9               	mulwf	___wmul@multiplicand& (0+255),b
  3094  002E9C  50F3               	movf	prodl,w,c
  3095  002E9E  27EC               	addwf	(___wmul@product+1)& (0+255),f,b
  3096                           
  3097                           ; BSR set to: 0
  3098  002EA0  C0EB  F0E7         	movff	___wmul@product,?___wmul
  3099  002EA4  C0EC  F0E8         	movff	___wmul@product+1,?___wmul+1
  3100  002EA8  0012               	return	
  3101  002EAA                     __end_of___wmul:
  3102                           	opt stack 0
  3103                           tblptru	equ	0xFF8
  3104                           tblptrh	equ	0xFF7
  3105                           tblptrl	equ	0xFF6
  3106                           tablat	equ	0xFF5
  3107                           prodh	equ	0xFF4
  3108                           prodl	equ	0xFF3
  3109                           intcon	equ	0xFF2
  3110                           intcon3	equ	0xFF0
  3111                           postinc0	equ	0xFEE
  3112                           wreg	equ	0xFE8
  3113                           indf1	equ	0xFE7
  3114                           postinc1	equ	0xFE6
  3115                           postdec1	equ	0xFE5
  3116                           fsr1h	equ	0xFE2
  3117                           fsr1l	equ	0xFE1
  3118                           indf2	equ	0xFDF
  3119                           postinc2	equ	0xFDE
  3120                           postdec2	equ	0xFDD
  3121                           fsr2h	equ	0xFDA
  3122                           fsr2l	equ	0xFD9
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function _read_IR *****************
  3126 ;; Defined at:
  3127 ;;		line 339 in file "DCmotor.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  input           1    7[BANK0 ] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  2    3[BANK0 ] int 
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3141 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;Total ram usage:        5 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    5
  3148 ;; This function calls:
  3149 ;;		_servoRotate0
  3150 ;;		_servoRotate180
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text4
  3157  002940                     __ptext4:
  3158                           	opt stack 0
  3159  002940                     _read_IR:
  3160                           	opt stack 25
  3161                           
  3162                           ;DCmotor.c: 342: servoRotate180();
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;incstack = 0
  3166                           ;DCmotor.c: 340: while(1){
  3167  002940  EC4C  F016         	call	_servoRotate180	;wreg free
  3168                           
  3169                           ;DCmotor.c: 343: _delay((unsigned long)((200)*(40000000/4000.0)));
  3170  002944  0E0B               	movlw	11
  3171  002946  0100               	movlb	0	; () banked
  3172  002948  6FED               	movwf	(??_read_IR+1)& (0+255),b
  3173  00294A  0E26               	movlw	38
  3174  00294C  6FEC               	movwf	??_read_IR& (0+255),b
  3175  00294E  0E5D               	movlw	93
  3176  002950                     u4197:
  3177  002950  2EE8               	decfsz	wreg,f,c
  3178  002952  D7FE               	bra	u4197
  3179  002954  2FEC               	decfsz	??_read_IR& (0+255),f,b
  3180  002956  D7FC               	bra	u4197
  3181  002958  2FED               	decfsz	(??_read_IR+1)& (0+255),f,b
  3182  00295A  D7FA               	bra	u4197
  3183  00295C  D000               	nop2	
  3184                           
  3185                           ;DCmotor.c: 344: servoRotate0();
  3186  00295E  EC96  F016         	call	_servoRotate0	;wreg free
  3187                           
  3188                           ;DCmotor.c: 345: _delay((unsigned long)((200)*(40000000/4000.0)));
  3189  002962  0E0B               	movlw	11
  3190  002964  0100               	movlb	0	; () banked
  3191  002966  6FED               	movwf	(??_read_IR+1)& (0+255),b
  3192  002968  0E26               	movlw	38
  3193  00296A  6FEC               	movwf	??_read_IR& (0+255),b
  3194  00296C  0E5D               	movlw	93
  3195  00296E                     u4207:
  3196  00296E  2EE8               	decfsz	wreg,f,c
  3197  002970  D7FE               	bra	u4207
  3198  002972  2FEC               	decfsz	??_read_IR& (0+255),f,b
  3199  002974  D7FC               	bra	u4207
  3200  002976  2FED               	decfsz	(??_read_IR+1)& (0+255),f,b
  3201  002978  D7FA               	bra	u4207
  3202  00297A  D000               	nop2	
  3203                           
  3204                           ;DCmotor.c: 346: TRISAbits.RA4 = 1;
  3205  00297C  8892               	bsf	3986,4,c	;volatile
  3206                           
  3207                           ;DCmotor.c: 347: unsigned char input = PORTAbits.RA4;
  3208  00297E  0E00               	movlw	0
  3209  002980  B880               	btfsc	3968,4,c	;volatile
  3210  002982  0E01               	movlw	1
  3211  002984  0100               	movlb	0	; () banked
  3212  002986  6FEE               	movwf	read_IR@input& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;DCmotor.c: 352: if (array[input] == '1'){
  3216  002988  51EE               	movf	read_IR@input& (0+255),w,b
  3217  00298A  0D01               	mullw	1
  3218  00298C  0E7A               	movlw	low _array
  3219  00298E  24F3               	addwf	prodl,w,c
  3220  002990  6EF6               	movwf	tblptrl,c
  3221  002992  0EFE               	movlw	high _array
  3222  002994  20F4               	addwfc	prodh,w,c
  3223  002996  6EF7               	movwf	tblptrh,c
  3224  002998                     	if	1	;There are 3 active tblptr bytes
  3225  002998  6AF8               	clrf	tblptru,c
  3226  00299A  0E00               	movlw	low (__mediumconst shr (0+16))
  3227  00299C  22F8               	addwfc	tblptru,f,c
  3228  00299E                     	endif
  3229  00299E  0008               	tblrd		*
  3230  0029A0  50F5               	movf	tablat,w,c
  3231  0029A2  0A31               	xorlw	49
  3232  0029A4  A4D8               	btfss	status,2,c
  3233  0029A6  D009               	goto	l477
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;DCmotor.c: 353: white_tape = 1;
  3237  0029A8  0E00               	movlw	0
  3238  0029AA  6E6B               	movwf	_white_tape+1,c
  3239  0029AC  0E01               	movlw	1
  3240  0029AE  6E6A               	movwf	_white_tape,c
  3241                           
  3242                           ;DCmotor.c: 354: return 1;
  3243  0029B0  0E00               	movlw	0
  3244  0029B2  6FEB               	movwf	(?_read_IR+1)& (0+255),b
  3245  0029B4  0E01               	movlw	1
  3246  0029B6  6FEA               	movwf	?_read_IR& (0+255),b
  3247                           
  3248                           ; BSR set to: 0
  3249  0029B8  0012               	return	
  3250  0029BA                     l477:
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;DCmotor.c: 356: else{
  3254                           ;DCmotor.c: 357: return 0;
  3255                           
  3256                           ; BSR set to: 0
  3257  0029BA  0E00               	movlw	0
  3258  0029BC  6FEB               	movwf	(?_read_IR+1)& (0+255),b
  3259  0029BE  0E00               	movlw	0
  3260  0029C0  D7FA               	goto	L3
  3261  0029C2                     __end_of_read_IR:
  3262                           	opt stack 0
  3263                           tblptru	equ	0xFF8
  3264                           tblptrh	equ	0xFF7
  3265                           tblptrl	equ	0xFF6
  3266                           tablat	equ	0xFF5
  3267                           prodh	equ	0xFF4
  3268                           prodl	equ	0xFF3
  3269                           intcon	equ	0xFF2
  3270                           intcon3	equ	0xFF0
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           indf1	equ	0xFE7
  3274                           postinc1	equ	0xFE6
  3275                           postdec1	equ	0xFE5
  3276                           fsr1h	equ	0xFE2
  3277                           fsr1l	equ	0xFE1
  3278                           indf2	equ	0xFDF
  3279                           postinc2	equ	0xFDE
  3280                           postdec2	equ	0xFDD
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _servoRotate180 *****************
  3286 ;; Defined at:
  3287 ;;		line 106 in file "DCmotor.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  i               2    1[BANK0 ] unsigned int 
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      void 
  3294 ;; Registers used:
  3295 ;;		wreg, status,2, status,0
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;Total ram usage:        3 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    4
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_main
  3312 ;;		_read_IR
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text5
  3317  002C98                     __ptext5:
  3318                           	opt stack 0
  3319  002C98                     _servoRotate180:
  3320                           	opt stack 26
  3321                           
  3322                           ;DCmotor.c: 108: unsigned int i;
  3323                           ;DCmotor.c: 109: for(i=0;i<50;i++)
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;incstack = 0
  3327  002C98  0E00               	movlw	0
  3328  002C9A  0100               	movlb	0	; () banked
  3329  002C9C  6FE9               	movwf	(servoRotate180@i+1)& (0+255),b
  3330  002C9E  0E00               	movlw	0
  3331  002CA0  6FE8               	movwf	servoRotate180@i& (0+255),b
  3332  002CA2                     l4402:
  3333                           
  3334                           ; BSR set to: 0
  3335  002CA2  51E9               	movf	(servoRotate180@i+1)& (0+255),w,b
  3336  002CA4  E11D               	bnz	l395
  3337  002CA6  0E32               	movlw	50
  3338  002CA8  5DE8               	subwf	servoRotate180@i& (0+255),w,b
  3339  002CAA  B0D8               	btfsc	status,0,c
  3340  002CAC  0012               	return	
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;DCmotor.c: 110: {
  3344                           ;DCmotor.c: 111: LATDbits.LATD1 = 1;
  3345                           
  3346                           ; BSR set to: 0
  3347  002CAE  828C               	bsf	3980,1,c	;volatile
  3348                           
  3349                           ;DCmotor.c: 112: TRISDbits.RD1 = 0;
  3350  002CB0  9295               	bcf	3989,1,c	;volatile
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;DCmotor.c: 113: _delay((unsigned long)((2200)*(40000000/4000000.0)));
  3354  002CB2  0E1D               	movlw	29
  3355  002CB4  0100               	movlb	0	; () banked
  3356  002CB6  6FE7               	movwf	??_servoRotate180& (0+255),b
  3357  002CB8  0E91               	movlw	145
  3358  002CBA                     u4217:
  3359  002CBA  2EE8               	decfsz	wreg,f,c
  3360  002CBC  D7FE               	bra	u4217
  3361  002CBE  2FE7               	decfsz	??_servoRotate180& (0+255),f,b
  3362  002CC0  D7FC               	bra	u4217
  3363                           
  3364                           ;DCmotor.c: 114: LATDbits.LATD1 = 0;
  3365  002CC2  928C               	bcf	3980,1,c	;volatile
  3366                           
  3367                           ;DCmotor.c: 115: TRISDbits.RD1 = 0;
  3368  002CC4  9295               	bcf	3989,1,c	;volatile
  3369                           
  3370                           ;DCmotor.c: 116: _delay((unsigned long)((17800)*(40000000/4000000.0)));
  3371  002CC6  0EE8               	movlw	232
  3372  002CC8  0100               	movlb	0	; () banked
  3373  002CCA  6FE7               	movwf	??_servoRotate180& (0+255),b
  3374  002CCC  0E29               	movlw	41
  3375  002CCE                     u4227:
  3376  002CCE  2EE8               	decfsz	wreg,f,c
  3377  002CD0  D7FE               	bra	u4227
  3378  002CD2  2FE7               	decfsz	??_servoRotate180& (0+255),f,b
  3379  002CD4  D7FC               	bra	u4227
  3380  002CD6  D000               	nop2	
  3381  002CD8  0100               	movlb	0	; () banked
  3382  002CDA  4BE8               	infsnz	servoRotate180@i& (0+255),f,b
  3383  002CDC  2BE9               	incf	(servoRotate180@i+1)& (0+255),f,b
  3384  002CDE  D7E1               	goto	l4402
  3385  002CE0                     l395:
  3386                           
  3387                           ; BSR set to: 0
  3388  002CE0  0012               	return		;funcret
  3389  002CE2                     __end_of_servoRotate180:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           intcon	equ	0xFF2
  3398                           intcon3	equ	0xFF0
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           indf1	equ	0xFE7
  3402                           postinc1	equ	0xFE6
  3403                           postdec1	equ	0xFE5
  3404                           fsr1h	equ	0xFE2
  3405                           fsr1l	equ	0xFE1
  3406                           indf2	equ	0xFDF
  3407                           postinc2	equ	0xFDE
  3408                           postdec2	equ	0xFDD
  3409                           fsr2h	equ	0xFDA
  3410                           fsr2l	equ	0xFD9
  3411                           status	equ	0xFD8
  3412                           
  3413 ;; *************** function _servoRotate0 *****************
  3414 ;; Defined at:
  3415 ;;		line 124 in file "DCmotor.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;		None
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;		None
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      void 
  3422 ;; Registers used:
  3423 ;;		wreg, status,2, status,0
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;Total ram usage:        1 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    4
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_main
  3440 ;;		_read_IR
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text6
  3445  002D2C                     __ptext6:
  3446                           	opt stack 0
  3447  002D2C                     _servoRotate0:
  3448                           	opt stack 26
  3449                           
  3450                           ;DCmotor.c: 126: for (i = 0; i<50; i++){
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;incstack = 0
  3454  002D2C  0E00               	movlw	0
  3455  002D2E  6E5F               	movwf	_i+1,c
  3456  002D30  0E00               	movlw	0
  3457  002D32  6E5E               	movwf	_i,c
  3458  002D34                     l4388:
  3459  002D34  505F               	movf	_i+1,w,c
  3460  002D36  E11D               	bnz	l400
  3461  002D38  0E32               	movlw	50
  3462  002D3A  5C5E               	subwf	_i,w,c
  3463  002D3C  B0D8               	btfsc	status,0,c
  3464  002D3E  0012               	return	
  3465                           
  3466                           ;DCmotor.c: 127: LATDbits.LATD1 = 1;
  3467  002D40  828C               	bsf	3980,1,c	;volatile
  3468                           
  3469                           ;DCmotor.c: 128: TRISDbits.RD1 = 0;
  3470  002D42  9295               	bcf	3989,1,c	;volatile
  3471                           
  3472                           ;DCmotor.c: 129: _delay((unsigned long)((800)*(40000000/4000000.0)));
  3473  002D44  0E0B               	movlw	11
  3474  002D46  0100               	movlb	0	; () banked
  3475  002D48  6FE7               	movwf	??_servoRotate0& (0+255),b
  3476  002D4A  0E62               	movlw	98
  3477  002D4C                     u4237:
  3478  002D4C  2EE8               	decfsz	wreg,f,c
  3479  002D4E  D7FE               	bra	u4237
  3480  002D50  2FE7               	decfsz	??_servoRotate0& (0+255),f,b
  3481  002D52  D7FC               	bra	u4237
  3482  002D54  F000               	nop	
  3483                           
  3484                           ;DCmotor.c: 130: LATDbits.LATD1 = 0;
  3485  002D56  928C               	bcf	3980,1,c	;volatile
  3486                           
  3487                           ;DCmotor.c: 131: TRISDbits.RD1 = 0;
  3488  002D58  9295               	bcf	3989,1,c	;volatile
  3489                           
  3490                           ;DCmotor.c: 132: _delay((unsigned long)((19200)*(40000000/4000000.0)));
  3491  002D5A  0EFA               	movlw	250
  3492  002D5C  0100               	movlb	0	; () banked
  3493  002D5E  6FE7               	movwf	??_servoRotate0& (0+255),b
  3494  002D60  0E58               	movlw	88
  3495  002D62                     u4247:
  3496  002D62  2EE8               	decfsz	wreg,f,c
  3497  002D64  D7FE               	bra	u4247
  3498  002D66  2FE7               	decfsz	??_servoRotate0& (0+255),f,b
  3499  002D68  D7FC               	bra	u4247
  3500  002D6A  F000               	nop	
  3501  002D6C  4A5E               	infsnz	_i,f,c
  3502  002D6E  2A5F               	incf	_i+1,f,c
  3503  002D70  D7E1               	goto	l4388
  3504  002D72                     l400:
  3505  002D72  0012               	return		;funcret
  3506  002D74                     __end_of_servoRotate0:
  3507                           	opt stack 0
  3508                           tblptru	equ	0xFF8
  3509                           tblptrh	equ	0xFF7
  3510                           tblptrl	equ	0xFF6
  3511                           tablat	equ	0xFF5
  3512                           prodh	equ	0xFF4
  3513                           prodl	equ	0xFF3
  3514                           intcon	equ	0xFF2
  3515                           intcon3	equ	0xFF0
  3516                           postinc0	equ	0xFEE
  3517                           wreg	equ	0xFE8
  3518                           indf1	equ	0xFE7
  3519                           postinc1	equ	0xFE6
  3520                           postdec1	equ	0xFE5
  3521                           fsr1h	equ	0xFE2
  3522                           fsr1l	equ	0xFE1
  3523                           indf2	equ	0xFDF
  3524                           postinc2	equ	0xFDE
  3525                           postdec2	equ	0xFDD
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _printf *****************
  3531 ;; Defined at:
  3532 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  3535 ;;		 -> STR_57(6), STR_56(9), STR_55(12), STR_53(7), 
  3536 ;;		 -> STR_51(3), STR_50(11), STR_48(3), STR_47(9), 
  3537 ;;		 -> STR_42(15), STR_41(18), STR_40(12), STR_39(10), 
  3538 ;;		 -> STR_38(5), STR_37(2), STR_36(3), STR_35(2), 
  3539 ;;		 -> STR_34(3), STR_33(3), STR_32(3), STR_31(3), 
  3540 ;;		 -> STR_30(3), STR_29(3), STR_28(3), STR_27(3), 
  3541 ;;		 -> STR_26(20), STR_25(2), STR_24(3), STR_23(2), 
  3542 ;;		 -> STR_22(3), STR_21(3), STR_20(4), STR_19(3), 
  3543 ;;		 -> STR_18(3), STR_17(3), STR_16(4), STR_15(3), 
  3544 ;;		 -> STR_14(4), STR_13(3), STR_12(3), STR_11(2), 
  3545 ;;		 -> STR_10(3), STR_9(2), STR_8(3), STR_7(5), 
  3546 ;;		 -> STR_6(17), STR_5(6), STR_4(8), STR_3(3), 
  3547 ;;		 -> STR_2(14), STR_1(15), 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;  tmpval          4    0        struct .
  3550 ;;  val             2    6[BANK1 ] unsigned int 
  3551 ;;  cp              2    4[BANK1 ] PTR const unsigned char 
  3552 ;;		 -> STR_78(7), number(2), final_set(40), current_set(5), 
  3553 ;;  ap              2    2[BANK1 ] PTR void [1]
  3554 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3555 ;;  len             2    0        unsigned int 
  3556 ;;  c               1    8[BANK1 ] char 
  3557 ;;  prec            1    1[BANK1 ] char 
  3558 ;;  flag            1    0[BANK1 ] unsigned char 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  2   12[BANK0 ] int 
  3561 ;; Registers used:
  3562 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3568 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Totals:         0      11       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;Total ram usage:       20 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    6
  3575 ;; This function calls:
  3576 ;;		___lwdiv
  3577 ;;		___lwmod
  3578 ;;		_putch
  3579 ;; This function is called by:
  3580 ;;		_main
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text7
  3585  0022D4                     __ptext7:
  3586                           	opt stack 0
  3587  0022D4                     _printf:
  3588                           	opt stack 24
  3589                           
  3590                           ;doprnt.c: 466: va_list ap;
  3591                           ;doprnt.c: 499: signed char c;
  3592                           ;doprnt.c: 506: signed char prec;
  3593                           ;doprnt.c: 508: unsigned char flag;
  3594                           ;doprnt.c: 523: union {
  3595                           ;doprnt.c: 524: unsigned long vd;
  3596                           ;doprnt.c: 525: double integ;
  3597                           ;doprnt.c: 526: } tmpval;
  3598                           ;doprnt.c: 528: unsigned int val;
  3599                           ;doprnt.c: 529: unsigned len;
  3600                           ;doprnt.c: 530: const char * cp;
  3601                           ;doprnt.c: 533: *ap = __va_start();
  3602                           
  3603                           ;incstack = 0
  3604  0022D4  0EF5               	movlw	low (?_printf+2)
  3605  0022D6  0101               	movlb	1	; () banked
  3606  0022D8  6F82               	movwf	printf@ap& (0+255),b
  3607  0022DA  0E00               	movlw	high (?_printf+2)
  3608  0022DC  6F83               	movwf	(printf@ap+1)& (0+255),b
  3609                           
  3610                           ;doprnt.c: 536: while(c = *f++) {
  3611  0022DE  D0D3               	goto	u3510
  3612  0022E0                     
  3613                           ; BSR set to: 1
  3614                           ;doprnt.c: 538: if(c != '%')
  3615                           
  3616                           ; BSR set to: 1
  3617  0022E0  0E25               	movlw	37
  3618  0022E2  1988               	xorwf	printf@c& (0+255),w,b
  3619  0022E4  B4D8               	btfsc	status,2,c
  3620  0022E6  D004               	goto	l630
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;doprnt.c: 540: {
  3624                           ;doprnt.c: 541: (putch(c) );
  3625  0022E8  5188               	movf	printf@c& (0+255),w,b
  3626  0022EA  EC88  F017         	call	_putch
  3627                           
  3628                           ;doprnt.c: 542: continue;
  3629  0022EE  D0CB               	goto	u3510
  3630  0022F0                     l630:
  3631                           
  3632                           ;doprnt.c: 543: }
  3633                           ;doprnt.c: 548: flag = 0;
  3634  0022F0  0E00               	movlw	0
  3635  0022F2  0101               	movlb	1	; () banked
  3636  0022F4  6F80               	movwf	printf@flag& (0+255),b
  3637                           
  3638                           ;doprnt.c: 635: switch(c = *f++) {
  3639  0022F6  D040               	goto	l631
  3640  0022F8                     
  3641                           ; BSR set to: 1
  3642                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3643                           
  3644                           ; BSR set to: 1
  3645  0022F8  C182  FFD9         	movff	printf@ap,fsr2l
  3646  0022FC  C183  FFDA         	movff	printf@ap+1,fsr2h
  3647  002300  CFDE F184          	movff	postinc2,printf@cp
  3648  002304  CFDD F185          	movff	postdec2,printf@cp+1
  3649                           
  3650                           ; BSR set to: 1
  3651  002308  0E02               	movlw	2
  3652  00230A  2782               	addwf	printf@ap& (0+255),f,b
  3653  00230C  0E00               	movlw	0
  3654  00230E  2383               	addwfc	(printf@ap+1)& (0+255),f,b
  3655                           
  3656                           ; BSR set to: 1
  3657                           ;doprnt.c: 740: if(!cp)
  3658  002310  5184               	movf	printf@cp& (0+255),w,b
  3659  002312  1185               	iorwf	(printf@cp+1)& (0+255),w,b
  3660  002314  A4D8               	btfss	status,2,c
  3661  002316  D01B               	goto	l639
  3662                           
  3663                           ; BSR set to: 1
  3664                           ;doprnt.c: 741: cp = "(null)";
  3665  002318  0E91               	movlw	low STR_78
  3666  00231A  6F84               	movwf	printf@cp& (0+255),b
  3667  00231C  0EFF               	movlw	high STR_78
  3668  00231E  6F85               	movwf	(printf@cp+1)& (0+255),b
  3669                           
  3670                           ; BSR set to: 1
  3671                           ;doprnt.c: 777: while(*cp)
  3672  002320  D016               	goto	l639
  3673  002322                     
  3674                           ;doprnt.c: 778: (putch(*cp++) );
  3675                           
  3676                           ; BSR set to: 1
  3677  002322  C184  FFF6         	movff	printf@cp,tblptrl
  3678  002326  C185  FFF7         	movff	printf@cp+1,tblptrh
  3679  00232A  0E00               	movlw	low (__mediumconst shr (0+16))
  3680  00232C  6EF8               	movwf	tblptru,c
  3681  00232E  0E0F               	movlw	(high __ramtop+-1)
  3682  002330  64F7               	cpfsgt	tblptrh,c
  3683  002332  D003               	bra	u3437
  3684  002334  0008               	tblrd		*
  3685  002336  50F5               	movf	tablat,w,c
  3686  002338  D005               	bra	u3430
  3687  00233A                     u3437:
  3688  00233A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3689  00233E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3690  002342  50EF               	movf	indf0,w,c
  3691  002344                     u3430:
  3692  002344  EC88  F017         	call	_putch
  3693  002348  0101               	movlb	1	; () banked
  3694  00234A  4B84               	infsnz	printf@cp& (0+255),f,b
  3695  00234C  2B85               	incf	(printf@cp+1)& (0+255),f,b
  3696  00234E                     l639:
  3697                           
  3698                           ; BSR set to: 1
  3699                           
  3700                           ; BSR set to: 1
  3701  00234E  C184  FFF6         	movff	printf@cp,tblptrl
  3702  002352  C185  FFF7         	movff	printf@cp+1,tblptrh
  3703  002356  0E00               	movlw	low (__mediumconst shr (0+16))
  3704  002358  6EF8               	movwf	tblptru,c
  3705  00235A  0E0F               	movlw	(high __ramtop+-1)
  3706  00235C  64F7               	cpfsgt	tblptrh,c
  3707  00235E  D003               	bra	u3447
  3708  002360  0008               	tblrd		*
  3709  002362  50F5               	movf	tablat,w,c
  3710  002364  D005               	bra	u3440
  3711  002366                     u3447:
  3712  002366  CFF6 FFE9          	movff	tblptrl,fsr0l
  3713  00236A  CFF7 FFEA          	movff	tblptrh,fsr0h
  3714  00236E  50EF               	movf	indf0,w,c
  3715  002370                     u3440:
  3716  002370  0900               	iorlw	0
  3717  002372  B4D8               	btfsc	status,2,c
  3718  002374  D088               	goto	u3510
  3719  002376  D7D5               	goto	l640
  3720  002378                     l631:
  3721  002378  C0F3  FFF6         	movff	printf@f,tblptrl
  3722  00237C  C0F4  FFF7         	movff	printf@f+1,tblptrh
  3723  002380  0100               	movlb	0	; () banked
  3724  002382  4BF3               	infsnz	printf@f& (0+255),f,b
  3725  002384  2BF4               	incf	(printf@f+1)& (0+255),f,b
  3726  002386                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3727  002386  6AF8               	clrf	tblptru,c
  3728  002388                     	endif
  3729  002388                     	if	0	;tblptru may be non-zero
  3730  002388                     	endif
  3731  002388  0008               	tblrd		*
  3732  00238A  CFF5 F188          	movff	tablat,printf@c
  3733  00238E  0101               	movlb	1	; () banked
  3734  002390  5188               	movf	printf@c& (0+255),w,b
  3735                           
  3736                           ; Switch size 1, requested type "space"
  3737                           ; Number of cases is 4, Range of values is 0 to 115
  3738                           ; switch strategies available:
  3739                           ; Name         Instructions Cycles
  3740                           ; simple_byte           13     7 (average)
  3741                           ;	Chosen strategy is simple_byte
  3742  002392  0A00               	xorlw	0	; case 0
  3743  002394  B4D8               	btfsc	status,2,c
  3744  002396  0012               	return	
  3745  002398  0A64               	xorlw	100	; case 100
  3746  00239A  B4D8               	btfsc	status,2,c
  3747  00239C  D007               	goto	l636
  3748  00239E  0A0D               	xorlw	13	; case 105
  3749  0023A0  B4D8               	btfsc	status,2,c
  3750  0023A2  D004               	goto	l636
  3751  0023A4  0A1A               	xorlw	26	; case 115
  3752  0023A6  B4D8               	btfsc	status,2,c
  3753  0023A8  D7A7               	goto	l637
  3754  0023AA  D06D               	goto	u3510
  3755  0023AC                     l636:
  3756                           
  3757                           ;doprnt.c: 1253: {
  3758                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3759                           
  3760                           ; BSR set to: 1
  3761  0023AC  C182  FFD9         	movff	printf@ap,fsr2l
  3762  0023B0  C183  FFDA         	movff	printf@ap+1,fsr2h
  3763  0023B4  CFDE F186          	movff	postinc2,printf@val
  3764  0023B8  CFDD F187          	movff	postdec2,printf@val+1
  3765  0023BC  0E02               	movlw	2
  3766  0023BE  0101               	movlb	1	; () banked
  3767  0023C0  2782               	addwf	printf@ap& (0+255),f,b
  3768  0023C2  0E00               	movlw	0
  3769  0023C4  2383               	addwfc	(printf@ap+1)& (0+255),f,b
  3770                           
  3771                           ; BSR set to: 1
  3772                           ;doprnt.c: 1261: if((int)val < 0) {
  3773  0023C6  AF87               	btfss	(printf@val+1)& (0+255),7,b
  3774  0023C8  D006               	goto	l643
  3775                           
  3776                           ; BSR set to: 1
  3777                           ;doprnt.c: 1262: flag |= 0x03;
  3778  0023CA  0E03               	movlw	3
  3779  0023CC  1380               	iorwf	printf@flag& (0+255),f,b
  3780                           
  3781                           ; BSR set to: 1
  3782                           ;doprnt.c: 1263: val = -val;
  3783  0023CE  6D86               	negf	printf@val& (0+255),b
  3784  0023D0  1F87               	comf	(printf@val+1)& (0+255),f,b
  3785  0023D2  B0D8               	btfsc	status,0,c
  3786  0023D4  2B87               	incf	(printf@val+1)& (0+255),f,b
  3787  0023D6                     l643:
  3788                           
  3789                           ; BSR set to: 1
  3790                           ;doprnt.c: 1264: }
  3791                           ;doprnt.c: 1266: }
  3792                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3793                           
  3794                           ; BSR set to: 1
  3795  0023D6  0E01               	movlw	1
  3796  0023D8  6F88               	movwf	printf@c& (0+255),b
  3797  0023DA                     l4528:
  3798                           
  3799                           ; BSR set to: 1
  3800  0023DA  0E05               	movlw	5
  3801  0023DC  1988               	xorwf	printf@c& (0+255),w,b
  3802  0023DE  B4D8               	btfsc	status,2,c
  3803  0023E0  D015               	goto	u3490
  3804                           
  3805                           ; BSR set to: 1
  3806                           ;doprnt.c: 1306: if(val < dpowers[c])
  3807                           
  3808                           ; BSR set to: 1
  3809                           
  3810                           ; BSR set to: 1
  3811  0023E2  5188               	movf	printf@c& (0+255),w,b
  3812  0023E4  0D02               	mullw	2
  3813  0023E6  0E70               	movlw	low _dpowers
  3814  0023E8  24F3               	addwf	prodl,w,c
  3815  0023EA  6EF6               	movwf	tblptrl,c
  3816  0023EC  0EFE               	movlw	high _dpowers
  3817  0023EE  20F4               	addwfc	prodh,w,c
  3818  0023F0  6EF7               	movwf	tblptrh,c
  3819  0023F2                     	if	1	;There are 3 active tblptr bytes
  3820  0023F2  6AF8               	clrf	tblptru,c
  3821  0023F4  0E00               	movlw	low (__mediumconst shr (0+16))
  3822  0023F6  22F8               	addwfc	tblptru,f,c
  3823  0023F8                     	endif
  3824  0023F8  0009               	tblrd		*+
  3825  0023FA  50F5               	movf	tablat,w,c
  3826  0023FC  5D86               	subwf	printf@val& (0+255),w,b
  3827  0023FE  0009               	tblrd		*+
  3828  002400  50F5               	movf	tablat,w,c
  3829  002402  5987               	subwfb	(printf@val+1)& (0+255),w,b
  3830  002404  A0D8               	btfss	status,0,c
  3831  002406  D002               	goto	u3490
  3832                           
  3833                           ; BSR set to: 1
  3834                           
  3835                           ; BSR set to: 1
  3836                           
  3837                           ; BSR set to: 1
  3838                           ;doprnt.c: 1307: break;
  3839  002408  2B88               	incf	printf@c& (0+255),f,b
  3840  00240A  D7E7               	goto	l4528
  3841  00240C                     u3490:
  3842                           
  3843                           ; BSR set to: 1
  3844                           ;doprnt.c: 1422: {
  3845                           ;doprnt.c: 1438: if(flag & 0x03)
  3846                           
  3847                           ; BSR set to: 1
  3848  00240C  C180  F0FD         	movff	printf@flag,??_printf
  3849  002410  0E03               	movlw	3
  3850  002412  0100               	movlb	0	; () banked
  3851  002414  17FD               	andwf	??_printf& (0+255),f,b
  3852  002416  B4D8               	btfsc	status,2,c
  3853  002418  D003               	goto	l647
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;doprnt.c: 1439: (putch('-') );
  3857  00241A  0E2D               	movlw	45
  3858  00241C  EC88  F017         	call	_putch
  3859  002420                     l647:
  3860                           
  3861                           ;doprnt.c: 1469: }
  3862                           ;doprnt.c: 1472: prec = c;
  3863  002420  C188  F181         	movff	printf@c,printf@prec
  3864                           
  3865                           ;doprnt.c: 1474: while(prec--) {
  3866  002424  D02B               	goto	l648
  3867  002426                     
  3868                           ;doprnt.c: 1478: {
  3869                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3870  002426  0101               	movlb	1	; () banked
  3871  002428  5181               	movf	printf@prec& (0+255),w,b
  3872  00242A  0D02               	mullw	2
  3873  00242C  0E70               	movlw	low _dpowers
  3874  00242E  24F3               	addwf	prodl,w,c
  3875  002430  6EF6               	movwf	tblptrl,c
  3876  002432  0EFE               	movlw	high _dpowers
  3877  002434  20F4               	addwfc	prodh,w,c
  3878  002436  6EF7               	movwf	tblptrh,c
  3879  002438                     	if	1	;There are 3 active tblptr bytes
  3880  002438  6AF8               	clrf	tblptru,c
  3881  00243A  0E00               	movlw	low (__mediumconst shr (0+16))
  3882  00243C  22F8               	addwfc	tblptru,f,c
  3883  00243E                     	endif
  3884  00243E  0009               	tblrd		*+
  3885  002440  CFF5 F0E9          	movff	tablat,___lwdiv@divisor
  3886  002444  000A               	tblrd		*-
  3887  002446  CFF5 F0EA          	movff	tablat,___lwdiv@divisor+1
  3888  00244A  C186  F0E7         	movff	printf@val,___lwdiv@dividend
  3889  00244E  C187  F0E8         	movff	printf@val+1,___lwdiv@dividend+1
  3890  002452  EC84  F015         	call	___lwdiv	;wreg free
  3891  002456  C0E7  F0EE         	movff	?___lwdiv,___lwmod@dividend
  3892  00245A  C0E8  F0EF         	movff	?___lwdiv+1,___lwmod@dividend+1
  3893  00245E  0E00               	movlw	0
  3894  002460  0100               	movlb	0	; () banked
  3895  002462  6FF1               	movwf	(___lwmod@divisor+1)& (0+255),b
  3896  002464  0E0A               	movlw	10
  3897  002466  6FF0               	movwf	___lwmod@divisor& (0+255),b
  3898  002468  ECDD  F016         	call	___lwmod	;wreg free
  3899  00246C  0100               	movlb	0	; () banked
  3900  00246E  51EE               	movf	?___lwmod& (0+255),w,b
  3901  002470  0F30               	addlw	48
  3902  002472  0101               	movlb	1	; () banked
  3903  002474  6F88               	movwf	printf@c& (0+255),b
  3904                           
  3905                           ; BSR set to: 1
  3906                           ;doprnt.c: 1523: }
  3907                           ;doprnt.c: 1524: (putch(c) );
  3908  002476  5188               	movf	printf@c& (0+255),w,b
  3909  002478  EC88  F017         	call	_putch
  3910  00247C                     l648:
  3911  00247C  0101               	movlb	1	; () banked
  3912  00247E  0781               	decf	printf@prec& (0+255),f,b
  3913  002480  2981               	incf	printf@prec& (0+255),w,b
  3914  002482  A4D8               	btfss	status,2,c
  3915  002484  D7D0               	goto	l649
  3916  002486                     u3510:
  3917                           
  3918                           ; BSR set to: 1
  3919                           
  3920                           ; BSR set to: 1
  3921  002486  C0F3  FFF6         	movff	printf@f,tblptrl
  3922  00248A  C0F4  FFF7         	movff	printf@f+1,tblptrh
  3923  00248E  0100               	movlb	0	; () banked
  3924  002490  4BF3               	infsnz	printf@f& (0+255),f,b
  3925  002492  2BF4               	incf	(printf@f+1)& (0+255),f,b
  3926  002494                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3927  002494  6AF8               	clrf	tblptru,c
  3928  002496                     	endif
  3929  002496                     	if	0	;tblptru may be non-zero
  3930  002496                     	endif
  3931  002496  0008               	tblrd		*
  3932  002498  CFF5 F188          	movff	tablat,printf@c
  3933  00249C  0101               	movlb	1	; () banked
  3934  00249E  5188               	movf	printf@c& (0+255),w,b
  3935  0024A0  B4D8               	btfsc	status,2,c
  3936  0024A2  0012               	return	
  3937  0024A4  D71D               	goto	l629
  3938  0024A6                     __end_of_printf:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           intcon3	equ	0xFF0
  3948                           indf0	equ	0xFEF
  3949                           postinc0	equ	0xFEE
  3950                           fsr0h	equ	0xFEA
  3951                           fsr0l	equ	0xFE9
  3952                           wreg	equ	0xFE8
  3953                           indf1	equ	0xFE7
  3954                           postinc1	equ	0xFE6
  3955                           postdec1	equ	0xFE5
  3956                           fsr1h	equ	0xFE2
  3957                           fsr1l	equ	0xFE1
  3958                           indf2	equ	0xFDF
  3959                           postinc2	equ	0xFDE
  3960                           postdec2	equ	0xFDD
  3961                           fsr2h	equ	0xFDA
  3962                           fsr2l	equ	0xFD9
  3963                           status	equ	0xFD8
  3964                           
  3965 ;; *************** function _putch *****************
  3966 ;; Defined at:
  3967 ;;		line 24 in file "lcd.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  data            1    wreg     unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  data            1    2[BANK0 ] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;Total ram usage:        1 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    5
  3988 ;; This function calls:
  3989 ;;		_lcdNibble
  3990 ;; This function is called by:
  3991 ;;		_main
  3992 ;;		_printf
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text8
  3997  002F10                     __ptext8:
  3998                           	opt stack 0
  3999  002F10                     _putch:
  4000                           	opt stack 25
  4001                           
  4002                           ; BSR set to: 1
  4003                           ;incstack = 0
  4004                           ;putch@data stored from wreg
  4005  002F10  0100               	movlb	0	; () banked
  4006  002F12  6FE9               	movwf	putch@data& (0+255),b
  4007                           
  4008                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4009  002F14  848C               	bsf	3980,2,c	;volatile
  4010                           
  4011                           ;lcd.c: 33: lcdNibble(data);
  4012  002F16  0100               	movlb	0	; () banked
  4013  002F18  51E9               	movf	putch@data& (0+255),w,b
  4014  002F1A  EC5E  F014         	call	_lcdNibble
  4015                           
  4016                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4017  002F1E  0EC8               	movlw	200
  4018  002F20                     u4257:
  4019  002F20  D000               	nop2	
  4020  002F22  2EE8               	decfsz	wreg,f,c
  4021  002F24  D7FD               	bra	u4257
  4022  002F26  0012               	return		;funcret
  4023  002F28                     __end_of_putch:
  4024                           	opt stack 0
  4025                           tblptru	equ	0xFF8
  4026                           tblptrh	equ	0xFF7
  4027                           tblptrl	equ	0xFF6
  4028                           tablat	equ	0xFF5
  4029                           prodh	equ	0xFF4
  4030                           prodl	equ	0xFF3
  4031                           intcon	equ	0xFF2
  4032                           intcon3	equ	0xFF0
  4033                           indf0	equ	0xFEF
  4034                           postinc0	equ	0xFEE
  4035                           fsr0h	equ	0xFEA
  4036                           fsr0l	equ	0xFE9
  4037                           wreg	equ	0xFE8
  4038                           indf1	equ	0xFE7
  4039                           postinc1	equ	0xFE6
  4040                           postdec1	equ	0xFE5
  4041                           fsr1h	equ	0xFE2
  4042                           fsr1l	equ	0xFE1
  4043                           indf2	equ	0xFDF
  4044                           postinc2	equ	0xFDE
  4045                           postdec2	equ	0xFDD
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function ___lwmod *****************
  4051 ;; Defined at:
  4052 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  dividend        2    7[BANK0 ] unsigned int 
  4055 ;;  divisor         2    9[BANK0 ] unsigned int 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  counter         1   11[BANK0 ] unsigned char 
  4058 ;; Return value:  Size  Location     Type
  4059 ;;                  2    7[BANK0 ] unsigned int 
  4060 ;; Registers used:
  4061 ;;		wreg, status,2, status,0
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4067 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;Total ram usage:        5 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; Hardware stack levels required when called:    4
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_printf
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text9
  4082  002DBA                     __ptext9:
  4083                           	opt stack 0
  4084  002DBA                     ___lwmod:
  4085                           	opt stack 25
  4086                           
  4087                           ;incstack = 0
  4088  002DBA  0100               	movlb	0	; () banked
  4089  002DBC  51F0               	movf	___lwmod@divisor& (0+255),w,b
  4090  002DBE  11F1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4091  002DC0  B4D8               	btfsc	status,2,c
  4092  002DC2  D018               	goto	l1071
  4093                           
  4094                           ; BSR set to: 0
  4095  002DC4  0E01               	movlw	1
  4096  002DC6  6FF2               	movwf	___lwmod@counter& (0+255),b
  4097  002DC8  D004               	goto	l1066
  4098  002DCA                     
  4099                           ; BSR set to: 0
  4100                           
  4101                           ; BSR set to: 0
  4102  002DCA  90D8               	bcf	status,0,c
  4103  002DCC  37F0               	rlcf	___lwmod@divisor& (0+255),f,b
  4104  002DCE  37F1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4105  002DD0  2BF2               	incf	___lwmod@counter& (0+255),f,b
  4106  002DD2                     l1066:
  4107                           
  4108                           ; BSR set to: 0
  4109                           
  4110                           ; BSR set to: 0
  4111  002DD2  AFF1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4112  002DD4  D7FA               	goto	l1067
  4113  002DD6                     u3390:
  4114                           
  4115                           ; BSR set to: 0
  4116                           
  4117                           ; BSR set to: 0
  4118                           
  4119                           ; BSR set to: 0
  4120  002DD6  51F0               	movf	___lwmod@divisor& (0+255),w,b
  4121  002DD8  5DEE               	subwf	___lwmod@dividend& (0+255),w,b
  4122  002DDA  51F1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4123  002DDC  59EF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4124  002DDE  A0D8               	btfss	status,0,c
  4125  002DE0  D004               	goto	l1070
  4126                           
  4127                           ; BSR set to: 0
  4128  002DE2  51F0               	movf	___lwmod@divisor& (0+255),w,b
  4129  002DE4  5FEE               	subwf	___lwmod@dividend& (0+255),f,b
  4130  002DE6  51F1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4131  002DE8  5BEF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4132  002DEA                     l1070:
  4133                           
  4134                           ; BSR set to: 0
  4135                           
  4136                           ; BSR set to: 0
  4137  002DEA  90D8               	bcf	status,0,c
  4138  002DEC  33F1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4139  002DEE  33F0               	rrcf	___lwmod@divisor& (0+255),f,b
  4140                           
  4141                           ; BSR set to: 0
  4142  002DF0  2FF2               	decfsz	___lwmod@counter& (0+255),f,b
  4143  002DF2  D7F1               	goto	u3390
  4144  002DF4                     l1071:
  4145                           
  4146                           ; BSR set to: 0
  4147                           
  4148                           ; BSR set to: 0
  4149  002DF4  C0EE  F0EE         	movff	___lwmod@dividend,?___lwmod
  4150  002DF8  C0EF  F0EF         	movff	___lwmod@dividend+1,?___lwmod+1
  4151                           
  4152                           ; BSR set to: 0
  4153  002DFC  0012               	return		;funcret
  4154  002DFE                     __end_of___lwmod:
  4155                           	opt stack 0
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           intcon	equ	0xFF2
  4163                           intcon3	equ	0xFF0
  4164                           indf0	equ	0xFEF
  4165                           postinc0	equ	0xFEE
  4166                           fsr0h	equ	0xFEA
  4167                           fsr0l	equ	0xFE9
  4168                           wreg	equ	0xFE8
  4169                           indf1	equ	0xFE7
  4170                           postinc1	equ	0xFE6
  4171                           postdec1	equ	0xFE5
  4172                           fsr1h	equ	0xFE2
  4173                           fsr1l	equ	0xFE1
  4174                           indf2	equ	0xFDF
  4175                           postinc2	equ	0xFDE
  4176                           postdec2	equ	0xFDD
  4177                           fsr2h	equ	0xFDA
  4178                           fsr2l	equ	0xFD9
  4179                           status	equ	0xFD8
  4180                           
  4181 ;; *************** function ___lwdiv *****************
  4182 ;; Defined at:
  4183 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  dividend        2    0[BANK0 ] unsigned int 
  4186 ;;  divisor         2    2[BANK0 ] unsigned int 
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  quotient        2    5[BANK0 ] unsigned int 
  4189 ;;  counter         1    4[BANK0 ] unsigned char 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  2    0[BANK0 ] unsigned int 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4199 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;Total ram usage:        7 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    4
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_printf
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text10
  4214  002B08                     __ptext10:
  4215                           	opt stack 0
  4216  002B08                     ___lwdiv:
  4217                           	opt stack 25
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;incstack = 0
  4221  002B08  0E00               	movlw	0
  4222  002B0A  0100               	movlb	0	; () banked
  4223  002B0C  6FED               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4224  002B0E  0E00               	movlw	0
  4225  002B10  6FEC               	movwf	___lwdiv@quotient& (0+255),b
  4226                           
  4227                           ; BSR set to: 0
  4228  002B12  51E9               	movf	___lwdiv@divisor& (0+255),w,b
  4229  002B14  11EA               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4230  002B16  B4D8               	btfsc	status,2,c
  4231  002B18  D01C               	goto	l1061
  4232                           
  4233                           ; BSR set to: 0
  4234  002B1A  0E01               	movlw	1
  4235  002B1C  6FEB               	movwf	___lwdiv@counter& (0+255),b
  4236  002B1E  D004               	goto	l1056
  4237  002B20                     
  4238                           ; BSR set to: 0
  4239                           
  4240                           ; BSR set to: 0
  4241  002B20  90D8               	bcf	status,0,c
  4242  002B22  37E9               	rlcf	___lwdiv@divisor& (0+255),f,b
  4243  002B24  37EA               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4244  002B26  2BEB               	incf	___lwdiv@counter& (0+255),f,b
  4245  002B28                     l1056:
  4246                           
  4247                           ; BSR set to: 0
  4248                           
  4249                           ; BSR set to: 0
  4250  002B28  AFEA               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4251  002B2A  D7FA               	goto	l1057
  4252  002B2C                     u3360:
  4253                           
  4254                           ; BSR set to: 0
  4255                           
  4256                           ; BSR set to: 0
  4257                           
  4258                           ; BSR set to: 0
  4259  002B2C  90D8               	bcf	status,0,c
  4260  002B2E  37EC               	rlcf	___lwdiv@quotient& (0+255),f,b
  4261  002B30  37ED               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4262                           
  4263                           ; BSR set to: 0
  4264  002B32  51E9               	movf	___lwdiv@divisor& (0+255),w,b
  4265  002B34  5DE7               	subwf	___lwdiv@dividend& (0+255),w,b
  4266  002B36  51EA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4267  002B38  59E8               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4268  002B3A  A0D8               	btfss	status,0,c
  4269  002B3C  D005               	goto	l1060
  4270                           
  4271                           ; BSR set to: 0
  4272  002B3E  51E9               	movf	___lwdiv@divisor& (0+255),w,b
  4273  002B40  5FE7               	subwf	___lwdiv@dividend& (0+255),f,b
  4274  002B42  51EA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4275  002B44  5BE8               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4276                           
  4277                           ; BSR set to: 0
  4278  002B46  81EC               	bsf	___lwdiv@quotient& (0+255),0,b
  4279  002B48                     l1060:
  4280                           
  4281                           ; BSR set to: 0
  4282                           
  4283                           ; BSR set to: 0
  4284  002B48  90D8               	bcf	status,0,c
  4285  002B4A  33EA               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4286  002B4C  33E9               	rrcf	___lwdiv@divisor& (0+255),f,b
  4287                           
  4288                           ; BSR set to: 0
  4289  002B4E  2FEB               	decfsz	___lwdiv@counter& (0+255),f,b
  4290  002B50  D7ED               	goto	u3360
  4291  002B52                     l1061:
  4292                           
  4293                           ; BSR set to: 0
  4294                           
  4295                           ; BSR set to: 0
  4296  002B52  C0EC  F0E7         	movff	___lwdiv@quotient,?___lwdiv
  4297  002B56  C0ED  F0E8         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4298                           
  4299                           ; BSR set to: 0
  4300  002B5A  0012               	return		;funcret
  4301  002B5C                     __end_of___lwdiv:
  4302                           	opt stack 0
  4303                           tblptru	equ	0xFF8
  4304                           tblptrh	equ	0xFF7
  4305                           tblptrl	equ	0xFF6
  4306                           tablat	equ	0xFF5
  4307                           prodh	equ	0xFF4
  4308                           prodl	equ	0xFF3
  4309                           intcon	equ	0xFF2
  4310                           intcon3	equ	0xFF0
  4311                           indf0	equ	0xFEF
  4312                           postinc0	equ	0xFEE
  4313                           fsr0h	equ	0xFEA
  4314                           fsr0l	equ	0xFE9
  4315                           wreg	equ	0xFE8
  4316                           indf1	equ	0xFE7
  4317                           postinc1	equ	0xFE6
  4318                           postdec1	equ	0xFE5
  4319                           fsr1h	equ	0xFE2
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _motorStop_0 *****************
  4329 ;; Defined at:
  4330 ;;		line 32 in file "DCmotor.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;		None
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      void 
  4337 ;; Registers used:
  4338 ;;		wreg
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;Total ram usage:        2 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    4
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_main
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text11
  4359  002ED0                     __ptext11:
  4360                           	opt stack 0
  4361  002ED0                     _motorStop_0:
  4362                           	opt stack 26
  4363                           
  4364                           ;DCmotor.c: 33: LATCbits.LATC0 = 0;
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;incstack = 0
  4368  002ED0  908B               	bcf	3979,0,c	;volatile
  4369                           
  4370                           ;DCmotor.c: 34: TRISCbits.RC0 = 0;
  4371  002ED2  9094               	bcf	3988,0,c	;volatile
  4372                           
  4373                           ;DCmotor.c: 36: _delay((unsigned long)((200)*(40000000/4000.0)));
  4374  002ED4  0E0B               	movlw	11
  4375  002ED6  0100               	movlb	0	; () banked
  4376  002ED8  6FE8               	movwf	(??_motorStop_0+1)& (0+255),b
  4377  002EDA  0E26               	movlw	38
  4378  002EDC  6FE7               	movwf	??_motorStop_0& (0+255),b
  4379  002EDE  0E5D               	movlw	93
  4380  002EE0                     u4267:
  4381  002EE0  2EE8               	decfsz	wreg,f,c
  4382  002EE2  D7FE               	bra	u4267
  4383  002EE4  2FE7               	decfsz	??_motorStop_0& (0+255),f,b
  4384  002EE6  D7FC               	bra	u4267
  4385  002EE8  2FE8               	decfsz	(??_motorStop_0+1)& (0+255),f,b
  4386  002EEA  D7FA               	bra	u4267
  4387  002EEC  D000               	nop2	
  4388  002EEE  0012               	return		;funcret
  4389  002EF0                     __end_of_motorStop_0:
  4390                           	opt stack 0
  4391                           tblptru	equ	0xFF8
  4392                           tblptrh	equ	0xFF7
  4393                           tblptrl	equ	0xFF6
  4394                           tablat	equ	0xFF5
  4395                           prodh	equ	0xFF4
  4396                           prodl	equ	0xFF3
  4397                           intcon	equ	0xFF2
  4398                           intcon3	equ	0xFF0
  4399                           indf0	equ	0xFEF
  4400                           postinc0	equ	0xFEE
  4401                           fsr0h	equ	0xFEA
  4402                           fsr0l	equ	0xFE9
  4403                           wreg	equ	0xFE8
  4404                           indf1	equ	0xFE7
  4405                           postinc1	equ	0xFE6
  4406                           postdec1	equ	0xFE5
  4407                           fsr1h	equ	0xFE2
  4408                           fsr1l	equ	0xFE1
  4409                           indf2	equ	0xFDF
  4410                           postinc2	equ	0xFDE
  4411                           postdec2	equ	0xFDD
  4412                           fsr2h	equ	0xFDA
  4413                           fsr2l	equ	0xFD9
  4414                           status	equ	0xFD8
  4415                           
  4416 ;; *************** function _motorStart_0 *****************
  4417 ;; Defined at:
  4418 ;;		line 23 in file "DCmotor.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;		None
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;Total ram usage:        2 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    4
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_main
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text12
  4447  002EF0                     __ptext12:
  4448                           	opt stack 0
  4449  002EF0                     _motorStart_0:
  4450                           	opt stack 26
  4451                           
  4452                           ;DCmotor.c: 25: LATCbits.LATC0 = 1;
  4453                           
  4454                           ;incstack = 0
  4455  002EF0  808B               	bsf	3979,0,c	;volatile
  4456                           
  4457                           ;DCmotor.c: 26: TRISCbits.RC0 = 0;
  4458  002EF2  9094               	bcf	3988,0,c	;volatile
  4459                           
  4460                           ;DCmotor.c: 28: _delay((unsigned long)((200)*(40000000/4000.0)));
  4461  002EF4  0E0B               	movlw	11
  4462  002EF6  0100               	movlb	0	; () banked
  4463  002EF8  6FE8               	movwf	(??_motorStart_0+1)& (0+255),b
  4464  002EFA  0E26               	movlw	38
  4465  002EFC  6FE7               	movwf	??_motorStart_0& (0+255),b
  4466  002EFE  0E5D               	movlw	93
  4467  002F00                     u4277:
  4468  002F00  2EE8               	decfsz	wreg,f,c
  4469  002F02  D7FE               	bra	u4277
  4470  002F04  2FE7               	decfsz	??_motorStart_0& (0+255),f,b
  4471  002F06  D7FC               	bra	u4277
  4472  002F08  2FE8               	decfsz	(??_motorStart_0+1)& (0+255),f,b
  4473  002F0A  D7FA               	bra	u4277
  4474  002F0C  D000               	nop2	
  4475  002F0E  0012               	return		;funcret
  4476  002F10                     __end_of_motorStart_0:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           prodh	equ	0xFF4
  4483                           prodl	equ	0xFF3
  4484                           intcon	equ	0xFF2
  4485                           intcon3	equ	0xFF0
  4486                           indf0	equ	0xFEF
  4487                           postinc0	equ	0xFEE
  4488                           fsr0h	equ	0xFEA
  4489                           fsr0l	equ	0xFE9
  4490                           wreg	equ	0xFE8
  4491                           indf1	equ	0xFE7
  4492                           postinc1	equ	0xFE6
  4493                           postdec1	equ	0xFE5
  4494                           fsr1h	equ	0xFE2
  4495                           fsr1l	equ	0xFE1
  4496                           indf2	equ	0xFDF
  4497                           postinc2	equ	0xFDE
  4498                           postdec2	equ	0xFDD
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _initialize *****************
  4504 ;; Defined at:
  4505 ;;		line 802 in file "main.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;		None
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;Total ram usage:        0 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    4
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_main
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text13
  4534  00265C                     __ptext13:
  4535                           	opt stack 0
  4536  00265C                     _initialize:
  4537                           	opt stack 26
  4538                           
  4539                           ;main.c: 803: white_tape = 0;
  4540                           
  4541                           ;incstack = 0
  4542  00265C  0E00               	movlw	0
  4543  00265E  6E6B               	movwf	_white_tape+1,c
  4544  002660  0E00               	movlw	0
  4545  002662  6E6A               	movwf	_white_tape,c
  4546                           
  4547                           ;main.c: 804: mode = 0;
  4548  002664  0E00               	movlw	0
  4549  002666  6E47               	movwf	_mode+1,c
  4550  002668  0E00               	movlw	0
  4551  00266A  6E46               	movwf	_mode,c
  4552                           
  4553                           ;main.c: 805: state = 0;
  4554  00266C  0E00               	movlw	0
  4555  00266E  6E5D               	movwf	_state+1,c
  4556  002670  0E00               	movlw	0
  4557  002672  6E5C               	movwf	_state,c
  4558                           
  4559                           ;main.c: 806: assembly_step = 0;
  4560  002674  0E00               	movlw	0
  4561  002676  6E5B               	movwf	_assembly_step+1,c
  4562  002678  0E00               	movlw	0
  4563  00267A  6E5A               	movwf	_assembly_step,c
  4564                           
  4565                           ;main.c: 807: counter_step = 0;
  4566  00267C  0E00               	movlw	0
  4567  00267E  6E59               	movwf	_counter_step+1,c
  4568  002680  0E00               	movlw	0
  4569  002682  6E58               	movwf	_counter_step,c
  4570                           
  4571                           ;main.c: 809: valid = 0;
  4572  002684  0E00               	movlw	0
  4573  002686  0100               	movlb	0	; () banked
  4574  002688  6FD6               	movwf	(_valid+1)& (0+255),b
  4575  00268A  0E00               	movlw	0
  4576  00268C  6FD5               	movwf	_valid& (0+255),b
  4577                           
  4578                           ;main.c: 810: number = 0;
  4579  00268E  0E00               	movlw	0
  4580  002690  6E69               	movwf	_number+1,c
  4581  002692  0E00               	movlw	0
  4582  002694  6E68               	movwf	_number,c
  4583                           
  4584                           ;main.c: 811: total_number=0;
  4585  002696  0E00               	movlw	0
  4586  002698  6FD4               	movwf	(_total_number+1)& (0+255),b
  4587  00269A  0E00               	movlw	0
  4588  00269C  6FD3               	movwf	_total_number& (0+255),b
  4589                           
  4590                           ;main.c: 813: B=0,N=0,S=0,W=0;
  4591  00269E  0E00               	movlw	0
  4592  0026A0  6E57               	movwf	_B+1,c
  4593  0026A2  0E00               	movlw	0
  4594  0026A4  6E56               	movwf	_B,c
  4595  0026A6  0E00               	movlw	0
  4596  0026A8  6E55               	movwf	_N+1,c
  4597  0026AA  0E00               	movlw	0
  4598  0026AC  6E54               	movwf	_N,c
  4599  0026AE  0E00               	movlw	0
  4600  0026B0  6E53               	movwf	_S+1,c
  4601  0026B2  0E00               	movlw	0
  4602  0026B4  6E52               	movwf	_S,c
  4603  0026B6  0E00               	movlw	0
  4604  0026B8  6E51               	movwf	_W+1,c
  4605  0026BA  0E00               	movlw	0
  4606  0026BC  6E50               	movwf	_W,c
  4607                           
  4608                           ;main.c: 815: B_count= 0;
  4609  0026BE  0E00               	movlw	0
  4610  0026C0  6E4F               	movwf	_B_count+1,c
  4611  0026C2  0E00               	movlw	0
  4612  0026C4  6E4E               	movwf	_B_count,c
  4613                           
  4614                           ;main.c: 816: S_count= 0;
  4615  0026C6  0E00               	movlw	0
  4616  0026C8  6E4D               	movwf	_S_count+1,c
  4617  0026CA  0E00               	movlw	0
  4618  0026CC  6E4C               	movwf	_S_count,c
  4619                           
  4620                           ;main.c: 817: N_count= 0;
  4621  0026CE  0E00               	movlw	0
  4622  0026D0  6E4B               	movwf	_N_count+1,c
  4623  0026D2  0E00               	movlw	0
  4624  0026D4  6E4A               	movwf	_N_count,c
  4625                           
  4626                           ;main.c: 818: W_count= 0;
  4627  0026D6  0E00               	movlw	0
  4628  0026D8  6E49               	movwf	_W_count+1,c
  4629  0026DA  0E00               	movlw	0
  4630  0026DC  6E48               	movwf	_W_count,c
  4631                           
  4632                           ;main.c: 820: for (i=0;i<8;i++){
  4633  0026DE  0E00               	movlw	0
  4634  0026E0  6E5F               	movwf	_i+1,c
  4635  0026E2  0E00               	movlw	0
  4636  0026E4  6E5E               	movwf	_i,c
  4637  0026E6                     l4598:
  4638                           
  4639                           ; BSR set to: 0
  4640  0026E6  505F               	movf	_i+1,w,c
  4641  0026E8  E155               	bnz	l338
  4642  0026EA  0E08               	movlw	8
  4643  0026EC  5C5E               	subwf	_i,w,c
  4644  0026EE  B0D8               	btfsc	status,0,c
  4645  0026F0  0012               	return	
  4646                           
  4647                           ;main.c: 821: compartment_array[i] = 0;
  4648                           
  4649                           ; BSR set to: 0
  4650                           
  4651                           ; BSR set to: 0
  4652  0026F2  90D8               	bcf	status,0,c
  4653  0026F4  345E               	rlcf	_i,w,c
  4654  0026F6  6ED9               	movwf	fsr2l,c
  4655  0026F8  345F               	rlcf	_i+1,w,c
  4656  0026FA  6EDA               	movwf	fsr2h,c
  4657  0026FC  0EB0               	movlw	low _compartment_array
  4658  0026FE  26D9               	addwf	fsr2l,f,c
  4659  002700  0E00               	movlw	high _compartment_array
  4660  002702  22DA               	addwfc	fsr2h,f,c
  4661  002704  0E00               	movlw	0
  4662  002706  6EDE               	movwf	postinc2,c
  4663  002708  0E00               	movlw	0
  4664  00270A  6EDD               	movwf	postdec2,c
  4665                           
  4666                           ;main.c: 822: compartment_number[i] = 0;
  4667  00270C  90D8               	bcf	status,0,c
  4668  00270E  345E               	rlcf	_i,w,c
  4669  002710  6ED9               	movwf	fsr2l,c
  4670  002712  345F               	rlcf	_i+1,w,c
  4671  002714  6EDA               	movwf	fsr2h,c
  4672  002716  0E36               	movlw	low _compartment_number
  4673  002718  26D9               	addwf	fsr2l,f,c
  4674  00271A  0E00               	movlw	high _compartment_number
  4675  00271C  22DA               	addwfc	fsr2h,f,c
  4676  00271E  0E00               	movlw	0
  4677  002720  6EDE               	movwf	postinc2,c
  4678  002722  0E00               	movlw	0
  4679  002724  6EDD               	movwf	postdec2,c
  4680                           
  4681                           ;main.c: 823: B_array[i] = 0;
  4682  002726  90D8               	bcf	status,0,c
  4683  002728  345E               	rlcf	_i,w,c
  4684  00272A  6ED9               	movwf	fsr2l,c
  4685  00272C  345F               	rlcf	_i+1,w,c
  4686  00272E  6EDA               	movwf	fsr2h,c
  4687  002730  0EA0               	movlw	low _B_array
  4688  002732  26D9               	addwf	fsr2l,f,c
  4689  002734  0E00               	movlw	high _B_array
  4690  002736  22DA               	addwfc	fsr2h,f,c
  4691  002738  0E00               	movlw	0
  4692  00273A  6EDE               	movwf	postinc2,c
  4693  00273C  0E00               	movlw	0
  4694  00273E  6EDD               	movwf	postdec2,c
  4695                           
  4696                           ;main.c: 824: N_array[i] = 0;
  4697  002740  90D8               	bcf	status,0,c
  4698  002742  345E               	rlcf	_i,w,c
  4699  002744  6ED9               	movwf	fsr2l,c
  4700  002746  345F               	rlcf	_i+1,w,c
  4701  002748  6EDA               	movwf	fsr2h,c
  4702  00274A  0E90               	movlw	low _N_array
  4703  00274C  26D9               	addwf	fsr2l,f,c
  4704  00274E  0E00               	movlw	high _N_array
  4705  002750  22DA               	addwfc	fsr2h,f,c
  4706  002752  0E00               	movlw	0
  4707  002754  6EDE               	movwf	postinc2,c
  4708  002756  0E00               	movlw	0
  4709  002758  6EDD               	movwf	postdec2,c
  4710                           
  4711                           ;main.c: 825: S_array[i] = 0;
  4712  00275A  90D8               	bcf	status,0,c
  4713  00275C  345E               	rlcf	_i,w,c
  4714  00275E  6ED9               	movwf	fsr2l,c
  4715  002760  345F               	rlcf	_i+1,w,c
  4716  002762  6EDA               	movwf	fsr2h,c
  4717  002764  0E00               	movlw	low _S_array
  4718  002766  26D9               	addwf	fsr2l,f,c
  4719  002768  0E01               	movlw	high _S_array
  4720  00276A  22DA               	addwfc	fsr2h,f,c
  4721  00276C  0E00               	movlw	0
  4722  00276E  6EDE               	movwf	postinc2,c
  4723  002770  0E00               	movlw	0
  4724  002772  6EDD               	movwf	postdec2,c
  4725                           
  4726                           ;main.c: 826: W_array[i] = 0;
  4727  002774  90D8               	bcf	status,0,c
  4728  002776  345E               	rlcf	_i,w,c
  4729  002778  6ED9               	movwf	fsr2l,c
  4730  00277A  345F               	rlcf	_i+1,w,c
  4731  00277C  6EDA               	movwf	fsr2h,c
  4732  00277E  0E80               	movlw	low _W_array
  4733  002780  26D9               	addwf	fsr2l,f,c
  4734  002782  0E00               	movlw	high _W_array
  4735  002784  22DA               	addwfc	fsr2h,f,c
  4736  002786  0E00               	movlw	0
  4737  002788  6EDE               	movwf	postinc2,c
  4738  00278A  0E00               	movlw	0
  4739  00278C  6EDD               	movwf	postdec2,c
  4740  00278E  4A5E               	infsnz	_i,f,c
  4741  002790  2A5F               	incf	_i+1,f,c
  4742  002792  D7A9               	goto	l4598
  4743  002794                     l338:
  4744  002794  0012               	return		;funcret
  4745  002796                     __end_of_initialize:
  4746                           	opt stack 0
  4747                           tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           intcon	equ	0xFF2
  4754                           intcon3	equ	0xFF0
  4755                           indf0	equ	0xFEF
  4756                           postinc0	equ	0xFEE
  4757                           fsr0h	equ	0xFEA
  4758                           fsr0l	equ	0xFE9
  4759                           wreg	equ	0xFE8
  4760                           indf1	equ	0xFE7
  4761                           postinc1	equ	0xFE6
  4762                           postdec1	equ	0xFE5
  4763                           fsr1h	equ	0xFE2
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function _initLCD *****************
  4773 ;; Defined at:
  4774 ;;		line 60 in file "lcd.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      void 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2, status,0, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;Total ram usage:        1 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    6
  4795 ;; This function calls:
  4796 ;;		_lcdInst
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           	psect	text14
  4803  002C00                     __ptext14:
  4804                           	opt stack 0
  4805  002C00                     _initLCD:
  4806                           	opt stack 24
  4807                           
  4808                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  4809                           
  4810                           ;incstack = 0
  4811  002C00  0EC3               	movlw	195
  4812  002C02  0100               	movlb	0	; () banked
  4813  002C04  6FEA               	movwf	??_initLCD& (0+255),b
  4814  002C06  0ECD               	movlw	205
  4815  002C08                     u4287:
  4816  002C08  2EE8               	decfsz	wreg,f,c
  4817  002C0A  D7FE               	bra	u4287
  4818  002C0C  2FEA               	decfsz	??_initLCD& (0+255),f,b
  4819  002C0E  D7FC               	bra	u4287
  4820                           
  4821                           ;lcd.c: 69: lcdInst(0b00110011);
  4822  002C10  0E33               	movlw	51
  4823  002C12  EC94  F017         	call	_lcdInst
  4824                           
  4825                           ;lcd.c: 70: lcdInst(0b00110010);
  4826  002C16  0E32               	movlw	50
  4827  002C18  EC94  F017         	call	_lcdInst
  4828                           
  4829                           ;lcd.c: 71: lcdInst(0b00101000);
  4830  002C1C  0E28               	movlw	40
  4831  002C1E  EC94  F017         	call	_lcdInst
  4832                           
  4833                           ;lcd.c: 72: lcdInst(0b00001111);
  4834  002C22  0E0F               	movlw	15
  4835  002C24  EC94  F017         	call	_lcdInst
  4836                           
  4837                           ;lcd.c: 73: lcdInst(0b00000110);
  4838  002C28  0E06               	movlw	6
  4839  002C2A  EC94  F017         	call	_lcdInst
  4840                           
  4841                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4842  002C2E  0E01               	movlw	1
  4843  002C30  EC94  F017         	call	_lcdInst
  4844  002C34  0EC3               	movlw	195
  4845  002C36  0100               	movlb	0	; () banked
  4846  002C38  6FEA               	movwf	??_initLCD& (0+255),b
  4847  002C3A  0ECD               	movlw	205
  4848  002C3C                     u4297:
  4849  002C3C  2EE8               	decfsz	wreg,f,c
  4850  002C3E  D7FE               	bra	u4297
  4851  002C40  2FEA               	decfsz	??_initLCD& (0+255),f,b
  4852  002C42  D7FC               	bra	u4297
  4853                           
  4854                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4855  002C44  0E0F               	movlw	15
  4856  002C46  EC94  F017         	call	_lcdInst
  4857  002C4A  0012               	return		;funcret
  4858  002C4C                     __end_of_initLCD:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           intcon	equ	0xFF2
  4867                           intcon3	equ	0xFF0
  4868                           indf0	equ	0xFEF
  4869                           postinc0	equ	0xFEE
  4870                           fsr0h	equ	0xFEA
  4871                           fsr0l	equ	0xFE9
  4872                           wreg	equ	0xFE8
  4873                           indf1	equ	0xFE7
  4874                           postinc1	equ	0xFE6
  4875                           postdec1	equ	0xFE5
  4876                           fsr1h	equ	0xFE2
  4877                           fsr1l	equ	0xFE1
  4878                           indf2	equ	0xFDF
  4879                           postinc2	equ	0xFDE
  4880                           postdec2	equ	0xFDD
  4881                           fsr2h	equ	0xFDA
  4882                           fsr2l	equ	0xFD9
  4883                           status	equ	0xFD8
  4884                           
  4885 ;; *************** function _lcdInst *****************
  4886 ;; Defined at:
  4887 ;;		line 11 in file "lcd.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  data            1    wreg     unsigned char 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  data            1    2[BANK0 ] unsigned char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      void 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;Total ram usage:        1 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    5
  4908 ;; This function calls:
  4909 ;;		_lcdNibble
  4910 ;; This function is called by:
  4911 ;;		_initLCD
  4912 ;;		_main
  4913 ;;		_lcd_set_cursor
  4914 ;;		_lcd_shift_cursor
  4915 ;;		_lcd_shift_display
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           	psect	text15
  4920  002F28                     __ptext15:
  4921                           	opt stack 0
  4922  002F28                     _lcdInst:
  4923                           	opt stack 25
  4924                           
  4925                           ;incstack = 0
  4926                           ;lcdInst@data stored from wreg
  4927  002F28  0100               	movlb	0	; () banked
  4928  002F2A  6FE9               	movwf	lcdInst@data& (0+255),b
  4929                           
  4930                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  4931  002F2C  948C               	bcf	3980,2,c	;volatile
  4932                           
  4933                           ;lcd.c: 20: lcdNibble(data);
  4934  002F2E  0100               	movlb	0	; () banked
  4935  002F30  51E9               	movf	lcdInst@data& (0+255),w,b
  4936  002F32  EC5E  F014         	call	_lcdNibble
  4937                           
  4938                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4939  002F36  0EC8               	movlw	200
  4940  002F38                     u4307:
  4941  002F38  D000               	nop2	
  4942  002F3A  2EE8               	decfsz	wreg,f,c
  4943  002F3C  D7FD               	bra	u4307
  4944  002F3E  0012               	return		;funcret
  4945  002F40                     __end_of_lcdInst:
  4946                           	opt stack 0
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           prodh	equ	0xFF4
  4952                           prodl	equ	0xFF3
  4953                           intcon	equ	0xFF2
  4954                           intcon3	equ	0xFF0
  4955                           indf0	equ	0xFEF
  4956                           postinc0	equ	0xFEE
  4957                           fsr0h	equ	0xFEA
  4958                           fsr0l	equ	0xFE9
  4959                           wreg	equ	0xFE8
  4960                           indf1	equ	0xFE7
  4961                           postinc1	equ	0xFE6
  4962                           postdec1	equ	0xFE5
  4963                           fsr1h	equ	0xFE2
  4964                           fsr1l	equ	0xFE1
  4965                           indf2	equ	0xFDF
  4966                           postinc2	equ	0xFDE
  4967                           postdec2	equ	0xFDD
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function _lcdNibble *****************
  4973 ;; Defined at:
  4974 ;;		line 37 in file "lcd.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  data            1    wreg     unsigned char 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  data            1    1[BANK0 ] unsigned char 
  4979 ;;  temp            1    0[BANK0 ] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      void 
  4982 ;; Registers used:
  4983 ;;		wreg, status,2, status,0
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;Total ram usage:        2 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    4
  4996 ;; This function calls:
  4997 ;;		Nothing
  4998 ;; This function is called by:
  4999 ;;		_lcdInst
  5000 ;;		_putch
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           	psect	text16
  5005  0028BC                     __ptext16:
  5006                           	opt stack 0
  5007  0028BC                     _lcdNibble:
  5008                           	opt stack 25
  5009                           
  5010                           ;incstack = 0
  5011                           ;lcdNibble@data stored from wreg
  5012  0028BC  0100               	movlb	0	; () banked
  5013  0028BE  6FE8               	movwf	lcdNibble@data& (0+255),b
  5014                           
  5015                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  5016  0028C0  0100               	movlb	0	; () banked
  5017  0028C2  51E8               	movf	lcdNibble@data& (0+255),w,b
  5018  0028C4  0BF0               	andlw	240
  5019  0028C6  6FE7               	movwf	lcdNibble@temp& (0+255),b
  5020                           
  5021                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  5022  0028C8  508C               	movf	3980,w,c	;volatile
  5023  0028CA  0B0F               	andlw	15
  5024  0028CC  6E8C               	movwf	3980,c	;volatile
  5025                           
  5026                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  5027  0028CE  51E7               	movf	lcdNibble@temp& (0+255),w,b
  5028  0028D0  108C               	iorwf	3980,w,c	;volatile
  5029  0028D2  6E8C               	movwf	3980,c	;volatile
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5033  0028D4  0E00               	movlw	0
  5034  0028D6  BEF2               	btfsc	intcon,7,c	;volatile
  5035  0028D8  0E01               	movlw	1
  5036  0028DA  6E62               	movwf	_LCDinterruptState,c
  5037                           
  5038                           ; BSR set to: 0
  5039  0028DC  9EF2               	bcf	intcon,7,c	;volatile
  5040                           
  5041                           ; BSR set to: 0
  5042  0028DE  868C               	bsf	3980,3,c	;volatile
  5043                           
  5044                           ; BSR set to: 0
  5045  0028E0  0E53               	movlw	83
  5046  0028E2                     u4317:
  5047  0028E2  2EE8               	decfsz	wreg,f,c
  5048  0028E4  D7FE               	bra	u4317
  5049  0028E6  F000               	nop	
  5050  0028E8  968C               	bcf	3980,3,c	;volatile
  5051  0028EA  0EC8               	movlw	200
  5052  0028EC                     u4327:
  5053  0028EC  D000               	nop2	
  5054  0028EE  2EE8               	decfsz	wreg,f,c
  5055  0028F0  D7FD               	bra	u4327
  5056  0028F2  B062               	btfsc	_LCDinterruptState,0,c
  5057  0028F4  D002               	bra	u3265
  5058  0028F6  9EF2               	bcf	intcon,7,c	;volatile
  5059  0028F8  D001               	bra	u3266
  5060  0028FA                     u3265:
  5061  0028FA  8EF2               	bsf	intcon,7,c	;volatile
  5062  0028FC                     u3266:
  5063                           
  5064                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  5065  0028FC  0100               	movlb	0	; () banked
  5066  0028FE  39E8               	swapf	lcdNibble@data& (0+255),w,b
  5067  002900  0BF0               	andlw	240
  5068  002902  6FE8               	movwf	lcdNibble@data& (0+255),b
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  5072  002904  51E8               	movf	lcdNibble@data& (0+255),w,b
  5073  002906  0BF0               	andlw	240
  5074  002908  6FE7               	movwf	lcdNibble@temp& (0+255),b
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  5078  00290A  508C               	movf	3980,w,c	;volatile
  5079  00290C  0B0F               	andlw	15
  5080  00290E  6E8C               	movwf	3980,c	;volatile
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  5084  002910  51E7               	movf	lcdNibble@temp& (0+255),w,b
  5085  002912  108C               	iorwf	3980,w,c	;volatile
  5086  002914  6E8C               	movwf	3980,c	;volatile
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5090  002916  0E00               	movlw	0
  5091  002918  BEF2               	btfsc	intcon,7,c	;volatile
  5092  00291A  0E01               	movlw	1
  5093  00291C  6E62               	movwf	_LCDinterruptState,c
  5094                           
  5095                           ; BSR set to: 0
  5096  00291E  9EF2               	bcf	intcon,7,c	;volatile
  5097                           
  5098                           ; BSR set to: 0
  5099  002920  868C               	bsf	3980,3,c	;volatile
  5100                           
  5101                           ; BSR set to: 0
  5102  002922  0E53               	movlw	83
  5103  002924                     u4337:
  5104  002924  2EE8               	decfsz	wreg,f,c
  5105  002926  D7FE               	bra	u4337
  5106  002928  F000               	nop	
  5107  00292A  968C               	bcf	3980,3,c	;volatile
  5108  00292C  0EC8               	movlw	200
  5109  00292E                     u4347:
  5110  00292E  D000               	nop2	
  5111  002930  2EE8               	decfsz	wreg,f,c
  5112  002932  D7FD               	bra	u4347
  5113  002934  B062               	btfsc	_LCDinterruptState,0,c
  5114  002936  D002               	bra	u3275
  5115  002938  9EF2               	bcf	intcon,7,c	;volatile
  5116  00293A  D001               	bra	u3276
  5117  00293C                     u3275:
  5118  00293C  8EF2               	bsf	intcon,7,c	;volatile
  5119  00293E                     u3276:
  5120  00293E  0012               	return		;funcret
  5121  002940                     __end_of_lcdNibble:
  5122                           	opt stack 0
  5123                           tblptru	equ	0xFF8
  5124                           tblptrh	equ	0xFF7
  5125                           tblptrl	equ	0xFF6
  5126                           tablat	equ	0xFF5
  5127                           prodh	equ	0xFF4
  5128                           prodl	equ	0xFF3
  5129                           intcon	equ	0xFF2
  5130                           intcon3	equ	0xFF0
  5131                           indf0	equ	0xFEF
  5132                           postinc0	equ	0xFEE
  5133                           fsr0h	equ	0xFEA
  5134                           fsr0l	equ	0xFE9
  5135                           wreg	equ	0xFE8
  5136                           indf1	equ	0xFE7
  5137                           postinc1	equ	0xFE6
  5138                           postdec1	equ	0xFE5
  5139                           fsr1h	equ	0xFE2
  5140                           fsr1l	equ	0xFE1
  5141                           indf2	equ	0xFDF
  5142                           postinc2	equ	0xFDE
  5143                           postdec2	equ	0xFDD
  5144                           fsr2h	equ	0xFDA
  5145                           fsr2l	equ	0xFD9
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function _interruptHandler *****************
  5149 ;; Defined at:
  5150 ;;		line 469 in file "main.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;		None
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  i               2   49[COMRAM] int 
  5155 ;;  keypress        1   52[COMRAM] unsigned char 
  5156 ;;  temp            1   51[COMRAM] unsigned char 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  1    wreg      void 
  5159 ;; Registers used:
  5160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;Total ram usage:       27 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    3
  5173 ;; This function calls:
  5174 ;;		_check
  5175 ;;		_generate_compartment_array
  5176 ;;		_is_valid
  5177 ;;		_strcat
  5178 ;;		_strcpy
  5179 ;;		_strncmp
  5180 ;;		i2___wmul
  5181 ;;		i2_initLCD
  5182 ;;		i2_lcdInst
  5183 ;;		i2_printf
  5184 ;;		i2_putch
  5185 ;; This function is called by:
  5186 ;;		Interrupt level 2
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	intcode
  5191  000008                     __pintcode:
  5192                           	opt stack 0
  5193  000008                     _interruptHandler:
  5194                           	opt stack 24
  5195                           
  5196                           ;incstack = 0
  5197  000008  826C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5198  00000A  EDFF  F00B         	call	int_func,f	;refresh shadow registers
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           intcon	equ	0xFF2
  5206                           intcon3	equ	0xFF0
  5207                           indf0	equ	0xFEF
  5208                           postinc0	equ	0xFEE
  5209                           fsr0h	equ	0xFEA
  5210                           fsr0l	equ	0xFE9
  5211                           wreg	equ	0xFE8
  5212                           indf1	equ	0xFE7
  5213                           postinc1	equ	0xFE6
  5214                           postdec1	equ	0xFE5
  5215                           fsr1h	equ	0xFE2
  5216                           fsr1l	equ	0xFE1
  5217                           indf2	equ	0xFDF
  5218                           postinc2	equ	0xFDE
  5219                           postdec2	equ	0xFDD
  5220                           fsr2h	equ	0xFDA
  5221                           fsr2l	equ	0xFD9
  5222                           status	equ	0xFD8
  5223                           
  5224                           	psect	intcode_body
  5225  0017FE                     __pintcode_body:
  5226                           	opt stack 24
  5227  0017FE                     int_func:
  5228                           	opt stack 24
  5229  0017FE  0006               	pop		; remove dummy address from shadow register refresh
  5230  001800  CFFA F020          	movff	pclath,??_interruptHandler+5
  5231  001804  CFFB F021          	movff	pclatu,??_interruptHandler+6
  5232  001808  CFE9 F022          	movff	fsr0l,??_interruptHandler+7
  5233  00180C  CFEA F023          	movff	fsr0h,??_interruptHandler+8
  5234  001810  CFE1 F024          	movff	fsr1l,??_interruptHandler+9
  5235  001814  CFE2 F025          	movff	fsr1h,??_interruptHandler+10
  5236  001818  CFD9 F026          	movff	fsr2l,??_interruptHandler+11
  5237  00181C  CFDA F027          	movff	fsr2h,??_interruptHandler+12
  5238  001820  CFF3 F028          	movff	prodl,??_interruptHandler+13
  5239  001824  CFF4 F029          	movff	prodh,??_interruptHandler+14
  5240  001828  CFF6 F02A          	movff	tblptrl,??_interruptHandler+15
  5241  00182C  CFF7 F02B          	movff	tblptrh,??_interruptHandler+16
  5242  001830  CFF8 F02C          	movff	tblptru,??_interruptHandler+17
  5243  001834  CFF5 F02D          	movff	tablat,??_interruptHandler+18
  5244  001838  C06C  F02E         	movff	btemp,??_interruptHandler+19
  5245  00183C  C06D  F02F         	movff	btemp+1,??_interruptHandler+20
  5246  001840  C06E  F030         	movff	btemp+2,??_interruptHandler+21
  5247  001844  C06F  F031         	movff	btemp+3,??_interruptHandler+22
  5248                           
  5249                           ;main.c: 480: if(INT1IF){
  5250  001848  A0F0               	btfss	intcon3,0,c	;volatile
  5251  00184A  D3E8               	goto	i2l4314
  5252                           
  5253                           ;main.c: 486: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5254  00184C  3881               	swapf	3969,w,c	;volatile
  5255  00184E  0B0F               	andlw	15
  5256  001850  0B0F               	andlw	15
  5257  001852  6E35               	movwf	interruptHandler@keypress,c
  5258                           
  5259                           ;main.c: 488: char temp = keys[keypress];
  5260  001854  5035               	movf	interruptHandler@keypress,w,c
  5261  001856  0D01               	mullw	1
  5262  001858  0E5F               	movlw	low _keys
  5263  00185A  24F3               	addwf	prodl,w,c
  5264  00185C  6EF6               	movwf	tblptrl,c
  5265  00185E  0EFE               	movlw	high _keys
  5266  001860  20F4               	addwfc	prodh,w,c
  5267  001862  6EF7               	movwf	tblptrh,c
  5268  001864                     	if	1	;There are 3 active tblptr bytes
  5269  001864  6AF8               	clrf	tblptru,c
  5270  001866  0E00               	movlw	low (__mediumconst shr (0+16))
  5271  001868  22F8               	addwfc	tblptru,f,c
  5272  00186A                     	endif
  5273  00186A  0008               	tblrd		*
  5274  00186C  CFF5 F034          	movff	tablat,interruptHandler@temp
  5275                           
  5276                           ;main.c: 491: if(temp == 'A'){
  5277  001870  0E41               	movlw	65
  5278  001872  1834               	xorwf	interruptHandler@temp,w,c
  5279  001874  A4D8               	btfss	status,2,c
  5280  001876  D005               	goto	i2l290
  5281                           
  5282                           ;main.c: 492: state = prev_state;
  5283  001878  C0D1  F05C         	movff	_prev_state,_state
  5284  00187C  C0D2  F05D         	movff	_prev_state+1,_state+1
  5285  001880  D3CC               	goto	i2l4312
  5286  001882                     i2l290:
  5287                           
  5288                           ;main.c: 495: }
  5289                           ;main.c: 499: if(operation == 1){
  5290  001882  0100               	movlb	0	; () banked
  5291  001884  05CB               	decf	_operation& (0+255),w,b
  5292  001886  11CC               	iorwf	(_operation+1)& (0+255),w,b
  5293  001888  A4D8               	btfss	status,2,c
  5294  00188A  D009               	goto	i2l293
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;main.c: 500: if (temp == '1'){
  5298  00188C  0E31               	movlw	49
  5299  00188E  1834               	xorwf	interruptHandler@temp,w,c
  5300  001890  A4D8               	btfss	status,2,c
  5301  001892  D005               	goto	i2l293
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;main.c: 504: operation_time = 1;
  5305  001894  0E00               	movlw	0
  5306  001896  6FCA               	movwf	(_operation_time+1)& (0+255),b
  5307  001898  0E01               	movlw	1
  5308  00189A  6FC9               	movwf	_operation_time& (0+255),b
  5309  00189C  D3BE               	goto	i2l4312
  5310  00189E                     i2l293:
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;main.c: 507: }
  5314                           ;main.c: 509: }
  5315                           ;main.c: 534: if (state == 0){
  5316                           
  5317                           ; BSR set to: 0
  5318                           
  5319                           ; BSR set to: 0
  5320  00189E  505C               	movf	_state,w,c
  5321  0018A0  105D               	iorwf	_state+1,w,c
  5322  0018A2  A4D8               	btfss	status,2,c
  5323  0018A4  D0C9               	goto	i2l294
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;main.c: 536: if(temp == '4'){
  5327  0018A6  0E34               	movlw	52
  5328  0018A8  1834               	xorwf	interruptHandler@temp,w,c
  5329  0018AA  A4D8               	btfss	status,2,c
  5330  0018AC  D01F               	goto	i2l295
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;main.c: 537: assembly_step = 4;
  5334  0018AE  0E00               	movlw	0
  5335  0018B0  6E5B               	movwf	_assembly_step+1,c
  5336  0018B2  0E04               	movlw	4
  5337  0018B4  6E5A               	movwf	_assembly_step,c
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;main.c: 538: prev_state = state;
  5341  0018B6  C05C  F0D1         	movff	_state,_prev_state
  5342  0018BA  C05D  F0D2         	movff	_state+1,_prev_state+1
  5343                           
  5344                           ;main.c: 539: state = 1;
  5345  0018BE  0E00               	movlw	0
  5346  0018C0  6E5D               	movwf	_state+1,c
  5347  0018C2  0E01               	movlw	1
  5348  0018C4  6E5C               	movwf	_state,c
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;main.c: 540: lcdInst(0xC0);;
  5352  0018C6  0EC0               	movlw	192
  5353  0018C8  ECAA  F017         	call	i2_lcdInst
  5354                           
  5355                           ;main.c: 541: putch(keys[keypress]);
  5356  0018CC  5035               	movf	interruptHandler@keypress,w,c
  5357  0018CE  0D01               	mullw	1
  5358  0018D0  0E5F               	movlw	low _keys
  5359  0018D2  24F3               	addwf	prodl,w,c
  5360  0018D4  6EF6               	movwf	tblptrl,c
  5361  0018D6  0EFE               	movlw	high _keys
  5362  0018D8  20F4               	addwfc	prodh,w,c
  5363  0018DA  6EF7               	movwf	tblptrh,c
  5364  0018DC                     	if	1	;There are 3 active tblptr bytes
  5365  0018DC  6AF8               	clrf	tblptru,c
  5366  0018DE  0E00               	movlw	low (__mediumconst shr (0+16))
  5367  0018E0  22F8               	addwfc	tblptru,f,c
  5368  0018E2                     	endif
  5369  0018E2  0008               	tblrd		*
  5370  0018E4  50F5               	movf	tablat,w,c
  5371  0018E6  ECA0  F017         	call	i2_putch
  5372                           
  5373                           ;main.c: 543: }
  5374  0018EA  D09F               	goto	i2l304
  5375  0018EC                     i2l295:
  5376                           
  5377                           ;main.c: 544: else if(temp == '5'){
  5378  0018EC  0E35               	movlw	53
  5379  0018EE  1834               	xorwf	interruptHandler@temp,w,c
  5380  0018F0  A4D8               	btfss	status,2,c
  5381  0018F2  D01F               	goto	i2l297
  5382                           
  5383                           ;main.c: 545: assembly_step = 5;
  5384  0018F4  0E00               	movlw	0
  5385  0018F6  6E5B               	movwf	_assembly_step+1,c
  5386  0018F8  0E05               	movlw	5
  5387  0018FA  6E5A               	movwf	_assembly_step,c
  5388                           
  5389                           ;main.c: 546: prev_state = state;
  5390  0018FC  C05C  F0D1         	movff	_state,_prev_state
  5391  001900  C05D  F0D2         	movff	_state+1,_prev_state+1
  5392                           
  5393                           ;main.c: 547: state = 1;
  5394  001904  0E00               	movlw	0
  5395  001906  6E5D               	movwf	_state+1,c
  5396  001908  0E01               	movlw	1
  5397  00190A  6E5C               	movwf	_state,c
  5398                           
  5399                           ;main.c: 548: lcdInst(0xC0);;
  5400  00190C  0EC0               	movlw	192
  5401  00190E  ECAA  F017         	call	i2_lcdInst
  5402                           
  5403                           ;main.c: 549: putch(keys[keypress]);
  5404  001912  5035               	movf	interruptHandler@keypress,w,c
  5405  001914  0D01               	mullw	1
  5406  001916  0E5F               	movlw	low _keys
  5407  001918  24F3               	addwf	prodl,w,c
  5408  00191A  6EF6               	movwf	tblptrl,c
  5409  00191C  0EFE               	movlw	high _keys
  5410  00191E  20F4               	addwfc	prodh,w,c
  5411  001920  6EF7               	movwf	tblptrh,c
  5412  001922                     	if	1	;There are 3 active tblptr bytes
  5413  001922  6AF8               	clrf	tblptru,c
  5414  001924  0E00               	movlw	low (__mediumconst shr (0+16))
  5415  001926  22F8               	addwfc	tblptru,f,c
  5416  001928                     	endif
  5417  001928  0008               	tblrd		*
  5418  00192A  50F5               	movf	tablat,w,c
  5419  00192C  ECA0  F017         	call	i2_putch
  5420                           
  5421                           ;main.c: 551: }
  5422  001930  D07C               	goto	i2l304
  5423  001932                     i2l297:
  5424                           
  5425                           ;main.c: 552: else if (temp == '6') {
  5426  001932  0E36               	movlw	54
  5427  001934  1834               	xorwf	interruptHandler@temp,w,c
  5428  001936  A4D8               	btfss	status,2,c
  5429  001938  D01F               	goto	i2l299
  5430                           
  5431                           ;main.c: 553: assembly_step = 6;
  5432  00193A  0E00               	movlw	0
  5433  00193C  6E5B               	movwf	_assembly_step+1,c
  5434  00193E  0E06               	movlw	6
  5435  001940  6E5A               	movwf	_assembly_step,c
  5436                           
  5437                           ;main.c: 554: prev_state = state;
  5438  001942  C05C  F0D1         	movff	_state,_prev_state
  5439  001946  C05D  F0D2         	movff	_state+1,_prev_state+1
  5440                           
  5441                           ;main.c: 555: state = 1;
  5442  00194A  0E00               	movlw	0
  5443  00194C  6E5D               	movwf	_state+1,c
  5444  00194E  0E01               	movlw	1
  5445  001950  6E5C               	movwf	_state,c
  5446                           
  5447                           ;main.c: 556: lcdInst(0xC0);;
  5448  001952  0EC0               	movlw	192
  5449  001954  ECAA  F017         	call	i2_lcdInst
  5450                           
  5451                           ;main.c: 557: putch(keys[keypress]);
  5452  001958  5035               	movf	interruptHandler@keypress,w,c
  5453  00195A  0D01               	mullw	1
  5454  00195C  0E5F               	movlw	low _keys
  5455  00195E  24F3               	addwf	prodl,w,c
  5456  001960  6EF6               	movwf	tblptrl,c
  5457  001962  0EFE               	movlw	high _keys
  5458  001964  20F4               	addwfc	prodh,w,c
  5459  001966  6EF7               	movwf	tblptrh,c
  5460  001968                     	if	1	;There are 3 active tblptr bytes
  5461  001968  6AF8               	clrf	tblptru,c
  5462  00196A  0E00               	movlw	low (__mediumconst shr (0+16))
  5463  00196C  22F8               	addwfc	tblptru,f,c
  5464  00196E                     	endif
  5465  00196E  0008               	tblrd		*
  5466  001970  50F5               	movf	tablat,w,c
  5467  001972  ECA0  F017         	call	i2_putch
  5468                           
  5469                           ;main.c: 558: }
  5470  001976  D059               	goto	i2l304
  5471  001978                     i2l299:
  5472                           
  5473                           ;main.c: 559: else if (temp == '7'){
  5474  001978  0E37               	movlw	55
  5475  00197A  1834               	xorwf	interruptHandler@temp,w,c
  5476  00197C  A4D8               	btfss	status,2,c
  5477  00197E  D01F               	goto	i2l301
  5478                           
  5479                           ;main.c: 560: assembly_step = 7;
  5480  001980  0E00               	movlw	0
  5481  001982  6E5B               	movwf	_assembly_step+1,c
  5482  001984  0E07               	movlw	7
  5483  001986  6E5A               	movwf	_assembly_step,c
  5484                           
  5485                           ;main.c: 561: prev_state = state;
  5486  001988  C05C  F0D1         	movff	_state,_prev_state
  5487  00198C  C05D  F0D2         	movff	_state+1,_prev_state+1
  5488                           
  5489                           ;main.c: 562: state = 1;
  5490  001990  0E00               	movlw	0
  5491  001992  6E5D               	movwf	_state+1,c
  5492  001994  0E01               	movlw	1
  5493  001996  6E5C               	movwf	_state,c
  5494                           
  5495                           ;main.c: 563: lcdInst(0xC0);;
  5496  001998  0EC0               	movlw	192
  5497  00199A  ECAA  F017         	call	i2_lcdInst
  5498                           
  5499                           ;main.c: 564: putch(keys[keypress]);
  5500  00199E  5035               	movf	interruptHandler@keypress,w,c
  5501  0019A0  0D01               	mullw	1
  5502  0019A2  0E5F               	movlw	low _keys
  5503  0019A4  24F3               	addwf	prodl,w,c
  5504  0019A6  6EF6               	movwf	tblptrl,c
  5505  0019A8  0EFE               	movlw	high _keys
  5506  0019AA  20F4               	addwfc	prodh,w,c
  5507  0019AC  6EF7               	movwf	tblptrh,c
  5508  0019AE                     	if	1	;There are 3 active tblptr bytes
  5509  0019AE  6AF8               	clrf	tblptru,c
  5510  0019B0  0E00               	movlw	low (__mediumconst shr (0+16))
  5511  0019B2  22F8               	addwfc	tblptru,f,c
  5512  0019B4                     	endif
  5513  0019B4  0008               	tblrd		*
  5514  0019B6  50F5               	movf	tablat,w,c
  5515  0019B8  ECA0  F017         	call	i2_putch
  5516                           
  5517                           ;main.c: 566: }
  5518  0019BC  D036               	goto	i2l304
  5519  0019BE                     i2l301:
  5520                           
  5521                           ;main.c: 567: else if (temp == '8'){
  5522  0019BE  0E38               	movlw	56
  5523  0019C0  1834               	xorwf	interruptHandler@temp,w,c
  5524  0019C2  A4D8               	btfss	status,2,c
  5525  0019C4  D01F               	goto	i2l303
  5526                           
  5527                           ;main.c: 568: assembly_step = 8;
  5528  0019C6  0E00               	movlw	0
  5529  0019C8  6E5B               	movwf	_assembly_step+1,c
  5530  0019CA  0E08               	movlw	8
  5531  0019CC  6E5A               	movwf	_assembly_step,c
  5532                           
  5533                           ;main.c: 569: prev_state = state;
  5534  0019CE  C05C  F0D1         	movff	_state,_prev_state
  5535  0019D2  C05D  F0D2         	movff	_state+1,_prev_state+1
  5536                           
  5537                           ;main.c: 570: state = 1;
  5538  0019D6  0E00               	movlw	0
  5539  0019D8  6E5D               	movwf	_state+1,c
  5540  0019DA  0E01               	movlw	1
  5541  0019DC  6E5C               	movwf	_state,c
  5542                           
  5543                           ;main.c: 571: lcdInst(0xC0);;
  5544  0019DE  0EC0               	movlw	192
  5545  0019E0  ECAA  F017         	call	i2_lcdInst
  5546                           
  5547                           ;main.c: 572: putch(keys[keypress]);
  5548  0019E4  5035               	movf	interruptHandler@keypress,w,c
  5549  0019E6  0D01               	mullw	1
  5550  0019E8  0E5F               	movlw	low _keys
  5551  0019EA  24F3               	addwf	prodl,w,c
  5552  0019EC  6EF6               	movwf	tblptrl,c
  5553  0019EE  0EFE               	movlw	high _keys
  5554  0019F0  20F4               	addwfc	prodh,w,c
  5555  0019F2  6EF7               	movwf	tblptrh,c
  5556  0019F4                     	if	1	;There are 3 active tblptr bytes
  5557  0019F4  6AF8               	clrf	tblptru,c
  5558  0019F6  0E00               	movlw	low (__mediumconst shr (0+16))
  5559  0019F8  22F8               	addwfc	tblptru,f,c
  5560  0019FA                     	endif
  5561  0019FA  0008               	tblrd		*
  5562  0019FC  50F5               	movf	tablat,w,c
  5563  0019FE  ECA0  F017         	call	i2_putch
  5564                           
  5565                           ;main.c: 574: }
  5566  001A02  D013               	goto	i2l304
  5567  001A04                     i2l303:
  5568                           
  5569                           ;main.c: 575: else{
  5570                           ;main.c: 581: initLCD();
  5571  001A04  EC26  F016         	call	i2_initLCD	;wreg free
  5572                           
  5573                           ;main.c: 582: printf("Wrong number! ");
  5574  001A08  0E1E               	movlw	low STR_42
  5575  001A0A  6E0D               	movwf	i2printf@f,c
  5576  001A0C  0EFF               	movlw	high STR_42
  5577  001A0E  6E0E               	movwf	i2printf@f+1,c
  5578  001A10  EC53  F012         	call	i2_printf	;wreg free
  5579                           
  5580                           ;main.c: 583: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5581  001A14  0E33               	movlw	51
  5582  001A16  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  5583  001A18  0EBB               	movlw	187
  5584  001A1A  6E1B               	movwf	??_interruptHandler& (0+255),c
  5585  001A1C  0EE0               	movlw	224
  5586  001A1E                     i2u435_47:
  5587  001A1E  2EE8               	decfsz	wreg,f,c
  5588  001A20  D7FE               	bra	i2u435_47
  5589  001A22  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  5590  001A24  D7FC               	bra	i2u435_47
  5591  001A26  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  5592  001A28  D7FA               	bra	i2u435_47
  5593  001A2A                     i2l304:
  5594                           
  5595                           ;main.c: 585: }
  5596                           ;main.c: 591: generate_compartment_array(assembly_step);
  5597  001A2A  C05A  F001         	movff	_assembly_step,generate_compartment_array@step
  5598  001A2E  C05B  F002         	movff	_assembly_step+1,generate_compartment_array@step+1
  5599  001A32  EC34  F010         	call	_generate_compartment_array	;wreg free
  5600  001A36  D2F1               	goto	i2l4312
  5601  001A38                     i2l294:
  5602                           
  5603                           ;main.c: 598: }
  5604                           ;main.c: 606: if(state == 1){
  5605  001A38  045C               	decf	_state,w,c
  5606  001A3A  105D               	iorwf	_state+1,w,c
  5607  001A3C  A4D8               	btfss	status,2,c
  5608  001A3E  D1A5               	goto	i2l305
  5609                           
  5610                           ;main.c: 613: if (temp == 'A'){
  5611  001A40  0E41               	movlw	65
  5612  001A42  1834               	xorwf	interruptHandler@temp,w,c
  5613  001A44  A4D8               	btfss	status,2,c
  5614  001A46  D004               	goto	i2l306
  5615                           
  5616                           ;main.c: 614: state = prev_state;
  5617  001A48  C0D1  F05C         	movff	_prev_state,_state
  5618  001A4C  C0D2  F05D         	movff	_prev_state+1,_state+1
  5619  001A50                     i2l306:
  5620                           
  5621                           ;main.c: 615: }
  5622                           ;main.c: 617: if (temp == '1'){
  5623  001A50  0E31               	movlw	49
  5624  001A52  1834               	xorwf	interruptHandler@temp,w,c
  5625  001A54  A4D8               	btfss	status,2,c
  5626  001A56  D01D               	goto	i2l307
  5627                           
  5628                           ;main.c: 618: lcdInst(0xC0);;
  5629  001A58  0EC0               	movlw	192
  5630  001A5A  ECAA  F017         	call	i2_lcdInst
  5631                           
  5632                           ;main.c: 619: putch('B');
  5633  001A5E  0E42               	movlw	66
  5634  001A60  ECA0  F017         	call	i2_putch
  5635                           
  5636                           ;main.c: 620: strcpy(temp_set,"B");
  5637  001A64  0EDD               	movlw	low _temp_set
  5638  001A66  6E07               	movwf	strcpy@to,c
  5639  001A68  0E00               	movlw	high _temp_set
  5640  001A6A  6E08               	movwf	strcpy@to+1,c
  5641  001A6C  0EFA               	movlw	low STR_43
  5642  001A6E  6E09               	movwf	strcpy@from,c
  5643  001A70  0EFF               	movlw	high STR_43
  5644  001A72  6E0A               	movwf	strcpy@from+1,c
  5645  001A74  ECBA  F016         	call	_strcpy	;wreg free
  5646                           
  5647                           ;main.c: 621: strcat(current_set,temp_set);
  5648  001A78  0EE2               	movlw	low _current_set
  5649  001A7A  6E01               	movwf	strcat@to,c
  5650  001A7C  0E00               	movlw	high _current_set
  5651  001A7E  6E02               	movwf	strcat@to+1,c
  5652  001A80  0EDD               	movlw	low _temp_set
  5653  001A82  6E03               	movwf	strcat@from,c
  5654  001A84  0E00               	movlw	high _temp_set
  5655  001A86  6E04               	movwf	strcat@from+1,c
  5656  001A88  EC20  F017         	call	_strcat	;wreg free
  5657                           
  5658                           ;main.c: 622: counter++;
  5659  001A8C  0100               	movlb	0	; () banked
  5660  001A8E  4BD9               	infsnz	_counter& (0+255),f,b
  5661  001A90  2BDA               	incf	(_counter+1)& (0+255),f,b
  5662  001A92                     i2l307:
  5663                           
  5664                           ;main.c: 623: }
  5665                           ;main.c: 625: if(temp == '2'){
  5666                           
  5667                           ; BSR set to: 0
  5668  001A92  0E32               	movlw	50
  5669  001A94  1834               	xorwf	interruptHandler@temp,w,c
  5670  001A96  A4D8               	btfss	status,2,c
  5671  001A98  D01D               	goto	i2l308
  5672                           
  5673                           ;main.c: 626: lcdInst(0xC0);;
  5674  001A9A  0EC0               	movlw	192
  5675  001A9C  ECAA  F017         	call	i2_lcdInst
  5676                           
  5677                           ;main.c: 627: putch('N');
  5678  001AA0  0E4E               	movlw	78
  5679  001AA2  ECA0  F017         	call	i2_putch
  5680                           
  5681                           ;main.c: 628: strcpy(temp_set,"N");
  5682  001AA6  0EDD               	movlw	low _temp_set
  5683  001AA8  6E07               	movwf	strcpy@to,c
  5684  001AAA  0E00               	movlw	high _temp_set
  5685  001AAC  6E08               	movwf	strcpy@to+1,c
  5686  001AAE  0ED5               	movlw	low (STR_65+2)
  5687  001AB0  6E09               	movwf	strcpy@from,c
  5688  001AB2  0EFF               	movlw	high (STR_65+2)
  5689  001AB4  6E0A               	movwf	strcpy@from+1,c
  5690  001AB6  ECBA  F016         	call	_strcpy	;wreg free
  5691                           
  5692                           ;main.c: 629: strcat(current_set,temp_set);
  5693  001ABA  0EE2               	movlw	low _current_set
  5694  001ABC  6E01               	movwf	strcat@to,c
  5695  001ABE  0E00               	movlw	high _current_set
  5696  001AC0  6E02               	movwf	strcat@to+1,c
  5697  001AC2  0EDD               	movlw	low _temp_set
  5698  001AC4  6E03               	movwf	strcat@from,c
  5699  001AC6  0E00               	movlw	high _temp_set
  5700  001AC8  6E04               	movwf	strcat@from+1,c
  5701  001ACA  EC20  F017         	call	_strcat	;wreg free
  5702                           
  5703                           ;main.c: 630: counter++;
  5704  001ACE  0100               	movlb	0	; () banked
  5705  001AD0  4BD9               	infsnz	_counter& (0+255),f,b
  5706  001AD2  2BDA               	incf	(_counter+1)& (0+255),f,b
  5707  001AD4                     i2l308:
  5708                           
  5709                           ;main.c: 631: }
  5710                           ;main.c: 633: if(temp == '3'){
  5711                           
  5712                           ; BSR set to: 0
  5713  001AD4  0E33               	movlw	51
  5714  001AD6  1834               	xorwf	interruptHandler@temp,w,c
  5715  001AD8  A4D8               	btfss	status,2,c
  5716  001ADA  D01D               	goto	i2l309
  5717                           
  5718                           ;main.c: 634: lcdInst(0xC0);;
  5719  001ADC  0EC0               	movlw	192
  5720  001ADE  ECAA  F017         	call	i2_lcdInst
  5721                           
  5722                           ;main.c: 635: putch('S');
  5723  001AE2  0E53               	movlw	83
  5724  001AE4  ECA0  F017         	call	i2_putch
  5725                           
  5726                           ;main.c: 637: strcpy(temp_set,"S");
  5727  001AE8  0EDD               	movlw	low _temp_set
  5728  001AEA  6E07               	movwf	strcpy@to,c
  5729  001AEC  0E00               	movlw	high _temp_set
  5730  001AEE  6E08               	movwf	strcpy@to+1,c
  5731  001AF0  0EF3               	movlw	low (STR_18+1)
  5732  001AF2  6E09               	movwf	strcpy@from,c
  5733  001AF4  0EFF               	movlw	high (STR_18+1)
  5734  001AF6  6E0A               	movwf	strcpy@from+1,c
  5735  001AF8  ECBA  F016         	call	_strcpy	;wreg free
  5736                           
  5737                           ;main.c: 638: strcat(current_set,temp_set);
  5738  001AFC  0EE2               	movlw	low _current_set
  5739  001AFE  6E01               	movwf	strcat@to,c
  5740  001B00  0E00               	movlw	high _current_set
  5741  001B02  6E02               	movwf	strcat@to+1,c
  5742  001B04  0EDD               	movlw	low _temp_set
  5743  001B06  6E03               	movwf	strcat@from,c
  5744  001B08  0E00               	movlw	high _temp_set
  5745  001B0A  6E04               	movwf	strcat@from+1,c
  5746  001B0C  EC20  F017         	call	_strcat	;wreg free
  5747                           
  5748                           ;main.c: 639: counter++;
  5749  001B10  0100               	movlb	0	; () banked
  5750  001B12  4BD9               	infsnz	_counter& (0+255),f,b
  5751  001B14  2BDA               	incf	(_counter+1)& (0+255),f,b
  5752  001B16                     i2l309:
  5753                           
  5754                           ;main.c: 640: }
  5755                           ;main.c: 641: if (temp == '4'){
  5756                           
  5757                           ; BSR set to: 0
  5758  001B16  0E34               	movlw	52
  5759  001B18  1834               	xorwf	interruptHandler@temp,w,c
  5760  001B1A  A4D8               	btfss	status,2,c
  5761  001B1C  D01D               	goto	i2l310
  5762                           
  5763                           ;main.c: 642: lcdInst(0xC0);;
  5764  001B1E  0EC0               	movlw	192
  5765  001B20  ECAA  F017         	call	i2_lcdInst
  5766                           
  5767                           ;main.c: 643: putch('W');
  5768  001B24  0E57               	movlw	87
  5769  001B26  ECA0  F017         	call	i2_putch
  5770                           
  5771                           ;main.c: 645: strcpy(temp_set,"W");
  5772  001B2A  0EDD               	movlw	low _temp_set
  5773  001B2C  6E07               	movwf	strcpy@to,c
  5774  001B2E  0E00               	movlw	high _temp_set
  5775  001B30  6E08               	movwf	strcpy@to+1,c
  5776  001B32  0EDD               	movlw	low (STR_67+2)
  5777  001B34  6E09               	movwf	strcpy@from,c
  5778  001B36  0EFF               	movlw	high (STR_67+2)
  5779  001B38  6E0A               	movwf	strcpy@from+1,c
  5780  001B3A  ECBA  F016         	call	_strcpy	;wreg free
  5781                           
  5782                           ;main.c: 646: strcat(current_set,temp_set);
  5783  001B3E  0EE2               	movlw	low _current_set
  5784  001B40  6E01               	movwf	strcat@to,c
  5785  001B42  0E00               	movlw	high _current_set
  5786  001B44  6E02               	movwf	strcat@to+1,c
  5787  001B46  0EDD               	movlw	low _temp_set
  5788  001B48  6E03               	movwf	strcat@from,c
  5789  001B4A  0E00               	movlw	high _temp_set
  5790  001B4C  6E04               	movwf	strcat@from+1,c
  5791  001B4E  EC20  F017         	call	_strcat	;wreg free
  5792                           
  5793                           ;main.c: 648: counter++;
  5794  001B52  0100               	movlb	0	; () banked
  5795  001B54  4BD9               	infsnz	_counter& (0+255),f,b
  5796  001B56  2BDA               	incf	(_counter+1)& (0+255),f,b
  5797  001B58                     i2l310:
  5798                           
  5799                           ;main.c: 649: }
  5800                           ;main.c: 651: if (keys[keypress] == '*'){
  5801                           
  5802                           ; BSR set to: 0
  5803  001B58  5035               	movf	interruptHandler@keypress,w,c
  5804  001B5A  0D01               	mullw	1
  5805  001B5C  0E5F               	movlw	low _keys
  5806  001B5E  24F3               	addwf	prodl,w,c
  5807  001B60  6EF6               	movwf	tblptrl,c
  5808  001B62  0EFE               	movlw	high _keys
  5809  001B64  20F4               	addwfc	prodh,w,c
  5810  001B66  6EF7               	movwf	tblptrh,c
  5811  001B68                     	if	1	;There are 3 active tblptr bytes
  5812  001B68  6AF8               	clrf	tblptru,c
  5813  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
  5814  001B6C  22F8               	addwfc	tblptru,f,c
  5815  001B6E                     	endif
  5816  001B6E  0008               	tblrd		*
  5817  001B70  50F5               	movf	tablat,w,c
  5818  001B72  0A2A               	xorlw	42
  5819  001B74  A4D8               	btfss	status,2,c
  5820  001B76  D0DC               	goto	i2l311
  5821                           
  5822                           ;main.c: 654: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5823  001B78  0E33               	movlw	51
  5824  001B7A  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  5825  001B7C  0EBB               	movlw	187
  5826  001B7E  6E1B               	movwf	??_interruptHandler& (0+255),c
  5827  001B80  0EE0               	movlw	224
  5828  001B82                     i2u436_47:
  5829  001B82  2EE8               	decfsz	wreg,f,c
  5830  001B84  D7FE               	bra	i2u436_47
  5831  001B86  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  5832  001B88  D7FC               	bra	i2u436_47
  5833  001B8A  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  5834  001B8C  D7FA               	bra	i2u436_47
  5835                           
  5836                           ;main.c: 655: counter ++;
  5837  001B8E  0100               	movlb	0	; () banked
  5838  001B90  4BD9               	infsnz	_counter& (0+255),f,b
  5839  001B92  2BDA               	incf	(_counter+1)& (0+255),f,b
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;main.c: 656: for (int i=0;i<20;i++){
  5843  001B94  0E00               	movlw	0
  5844  001B96  6E33               	movwf	interruptHandler@i+1,c
  5845  001B98  0E00               	movlw	0
  5846  001B9A  6E32               	movwf	interruptHandler@i,c
  5847                           
  5848                           ; BSR set to: 0
  5849  001B9C  BE33               	btfsc	interruptHandler@i+1,7,c
  5850  001B9E  D008               	goto	i2l312
  5851  001BA0  5033               	movf	interruptHandler@i+1,w,c
  5852  001BA2  E105               	bnz	i2u313_40
  5853  001BA4  0E14               	movlw	20
  5854  001BA6  5C32               	subwf	interruptHandler@i,w,c
  5855  001BA8  B0D8               	btfsc	status,0,c
  5856  001BAA  D089               	goto	i2u315_40
  5857  001BAC  D001               	goto	i2l312
  5858  001BAE                     i2u313_40:
  5859                           
  5860                           ; BSR set to: 0
  5861  001BAE  D087               	goto	i2u315_40
  5862  001BB0                     i2l312:
  5863                           
  5864                           ;main.c: 657: if (strncmp(current_set,strs[i],4) == 0){
  5865                           
  5866                           ; BSR set to: 0
  5867  001BB0  0EE2               	movlw	low _current_set
  5868  001BB2  6E07               	movwf	strncmp@s1,c
  5869  001BB4  0E00               	movlw	high _current_set
  5870  001BB6  6E08               	movwf	strncmp@s1+1,c
  5871  001BB8  C032  F001         	movff	interruptHandler@i,i2___wmul@multiplier
  5872  001BBC  C033  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
  5873  001BC0  0E00               	movlw	0
  5874  001BC2  6E04               	movwf	i2___wmul@multiplicand+1,c
  5875  001BC4  0E05               	movlw	5
  5876  001BC6  6E03               	movwf	i2___wmul@multiplicand,c
  5877  001BC8  EC55  F017         	call	i2___wmul	;wreg free
  5878  001BCC  0E83               	movlw	low _strs
  5879  001BCE  2401               	addwf	?i2___wmul,w,c
  5880  001BD0  6E09               	movwf	strncmp@s2,c
  5881  001BD2  0EFE               	movlw	high _strs
  5882  001BD4  2002               	addwfc	?i2___wmul+1,w,c
  5883  001BD6  6E0A               	movwf	strncmp@s2+1,c
  5884  001BD8  0E00               	movlw	0
  5885  001BDA  6E0C               	movwf	strncmp@len+1,c
  5886  001BDC  0E04               	movlw	4
  5887  001BDE  6E0B               	movwf	strncmp@len,c
  5888  001BE0  EC1B  F014         	call	_strncmp	;wreg free
  5889  001BE4  5007               	movf	?_strncmp,w,c
  5890  001BE6  1008               	iorwf	?_strncmp+1,w,c
  5891  001BE8  A4D8               	btfss	status,2,c
  5892  001BEA  D062               	goto	i2l314
  5893                           
  5894                           ;main.c: 658: strcpy(final_set[counter_step],current_set);
  5895  001BEC  C058  F001         	movff	_counter_step,i2___wmul@multiplier
  5896  001BF0  C059  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
  5897  001BF4  0E00               	movlw	0
  5898  001BF6  6E04               	movwf	i2___wmul@multiplicand+1,c
  5899  001BF8  0E05               	movlw	5
  5900  001BFA  6E03               	movwf	i2___wmul@multiplicand,c
  5901  001BFC  EC55  F017         	call	i2___wmul	;wreg free
  5902  001C00  0E58               	movlw	low _final_set
  5903  001C02  2401               	addwf	?i2___wmul,w,c
  5904  001C04  6E07               	movwf	strcpy@to,c
  5905  001C06  0E01               	movlw	high _final_set
  5906  001C08  2002               	addwfc	?i2___wmul+1,w,c
  5907  001C0A  6E08               	movwf	strcpy@to+1,c
  5908  001C0C  0EE2               	movlw	low _current_set
  5909  001C0E  6E09               	movwf	strcpy@from,c
  5910  001C10  0E00               	movlw	high _current_set
  5911  001C12  6E0A               	movwf	strcpy@from+1,c
  5912  001C14  ECBA  F016         	call	_strcpy	;wreg free
  5913                           
  5914                           ;main.c: 659: strcpy(current_set2,current_set);
  5915  001C18  0E63               	movlw	low _current_set2
  5916  001C1A  6E07               	movwf	strcpy@to,c
  5917  001C1C  0E00               	movlw	high _current_set2
  5918  001C1E  6E08               	movwf	strcpy@to+1,c
  5919  001C20  0EE2               	movlw	low _current_set
  5920  001C22  6E09               	movwf	strcpy@from,c
  5921  001C24  0E00               	movlw	high _current_set
  5922  001C26  6E0A               	movwf	strcpy@from+1,c
  5923  001C28  ECBA  F016         	call	_strcpy	;wreg free
  5924                           
  5925                           ;main.c: 662: valid = 1;
  5926  001C2C  0E00               	movlw	0
  5927  001C2E  0100               	movlb	0	; () banked
  5928  001C30  6FD6               	movwf	(_valid+1)& (0+255),b
  5929  001C32  0E01               	movlw	1
  5930  001C34  6FD5               	movwf	_valid& (0+255),b
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;main.c: 663: state = 2;
  5934  001C36  0E00               	movlw	0
  5935  001C38  6E5D               	movwf	_state+1,c
  5936  001C3A  0E02               	movlw	2
  5937  001C3C  6E5C               	movwf	_state,c
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;main.c: 665: initLCD();
  5941  001C3E  EC26  F016         	call	i2_initLCD	;wreg free
  5942                           
  5943                           ;main.c: 666: printf("correct!");
  5944  001C42  0E77               	movlw	low STR_47
  5945  001C44  6E0D               	movwf	i2printf@f,c
  5946  001C46  0EFF               	movlw	high STR_47
  5947  001C48  6E0E               	movwf	i2printf@f+1,c
  5948  001C4A  EC53  F012         	call	i2_printf	;wreg free
  5949                           
  5950                           ;main.c: 667: _delay((unsigned long)((500)*(40000000/4000.0)));
  5951  001C4E  0E1A               	movlw	26
  5952  001C50  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  5953  001C52  0E5E               	movlw	94
  5954  001C54  6E1B               	movwf	??_interruptHandler& (0+255),c
  5955  001C56  0E6E               	movlw	110
  5956  001C58                     i2u437_47:
  5957  001C58  2EE8               	decfsz	wreg,f,c
  5958  001C5A  D7FE               	bra	i2u437_47
  5959  001C5C  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  5960  001C5E  D7FC               	bra	i2u437_47
  5961  001C60  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  5962  001C62  D7FA               	bra	i2u437_47
  5963  001C64  D000               	nop2	
  5964                           
  5965                           ;main.c: 669: printf("%s",current_set);
  5966  001C66  0EF5               	movlw	low STR_3
  5967  001C68  6E0D               	movwf	i2printf@f,c
  5968  001C6A  0EFF               	movlw	high STR_3
  5969  001C6C  6E0E               	movwf	i2printf@f+1,c
  5970  001C6E  0EE2               	movlw	low _current_set
  5971  001C70  6E0F               	movwf	?i2_printf+2,c
  5972  001C72  0E00               	movlw	high _current_set
  5973  001C74  6E10               	movwf	?i2_printf+3,c
  5974  001C76  EC53  F012         	call	i2_printf	;wreg free
  5975                           
  5976                           ;main.c: 671: strcpy(current_set,"");
  5977  001C7A  0EE2               	movlw	low _current_set
  5978  001C7C  6E07               	movwf	strcpy@to,c
  5979  001C7E  0E00               	movlw	high _current_set
  5980  001C80  6E08               	movwf	strcpy@to+1,c
  5981  001C82  0E2C               	movlw	low (STR_42+14)
  5982  001C84  6E09               	movwf	strcpy@from,c
  5983  001C86  0EFF               	movlw	high (STR_42+14)
  5984  001C88  6E0A               	movwf	strcpy@from+1,c
  5985  001C8A  ECBA  F016         	call	_strcpy	;wreg free
  5986                           
  5987                           ;main.c: 672: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5988  001C8E  0E33               	movlw	51
  5989  001C90  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  5990  001C92  0EBB               	movlw	187
  5991  001C94  6E1B               	movwf	??_interruptHandler& (0+255),c
  5992  001C96  0EE0               	movlw	224
  5993  001C98                     i2u438_47:
  5994  001C98  2EE8               	decfsz	wreg,f,c
  5995  001C9A  D7FE               	bra	i2u438_47
  5996  001C9C  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  5997  001C9E  D7FC               	bra	i2u438_47
  5998  001CA0  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  5999  001CA2  D7FA               	bra	i2u438_47
  6000                           
  6001                           ;main.c: 673: counter = 0;
  6002  001CA4  0E00               	movlw	0
  6003  001CA6  0100               	movlb	0	; () banked
  6004  001CA8  6FDA               	movwf	(_counter+1)& (0+255),b
  6005  001CAA  0E00               	movlw	0
  6006  001CAC  6FD9               	movwf	_counter& (0+255),b
  6007                           
  6008                           ;main.c: 674: break;
  6009  001CAE  D007               	goto	i2u315_40
  6010  001CB0                     i2l314:
  6011                           
  6012                           ; BSR set to: 0
  6013  001CB0  4A32               	infsnz	interruptHandler@i,f,c
  6014  001CB2  2A33               	incf	interruptHandler@i+1,f,c
  6015  001CB4  BE33               	btfsc	interruptHandler@i+1,7,c
  6016  001CB6  D77C               	goto	i2l312
  6017  001CB8  5033               	movf	interruptHandler@i+1,w,c
  6018  001CBA  E101               	bnz	i2l4196
  6019  001CBC  D773               	goto	L4
  6020  001CBE                     i2u315_40:
  6021  001CBE                     i2l4196:
  6022                           
  6023                           ;main.c: 676: }
  6024                           ;main.c: 677: }
  6025                           ;main.c: 678: if (valid != 1){
  6026  001CBE  0100               	movlb	0	; () banked
  6027  001CC0  05D5               	decf	_valid& (0+255),w,b
  6028  001CC2  11D6               	iorwf	(_valid+1)& (0+255),w,b
  6029  001CC4  B4D8               	btfsc	status,2,c
  6030  001CC6  D030               	goto	i2l315
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;main.c: 680: initLCD();
  6034  001CC8  EC26  F016         	call	i2_initLCD	;wreg free
  6035                           
  6036                           ;main.c: 681: printf("wrong set!");
  6037  001CCC  0E62               	movlw	low STR_50
  6038  001CCE  6E0D               	movwf	i2printf@f,c
  6039  001CD0  0EFF               	movlw	high STR_50
  6040  001CD2  6E0E               	movwf	i2printf@f+1,c
  6041  001CD4  EC53  F012         	call	i2_printf	;wreg free
  6042                           
  6043                           ;main.c: 682: printf("%s",current_set);
  6044  001CD8  0EF5               	movlw	low STR_3
  6045  001CDA  6E0D               	movwf	i2printf@f,c
  6046  001CDC  0EFF               	movlw	high STR_3
  6047  001CDE  6E0E               	movwf	i2printf@f+1,c
  6048  001CE0  0EE2               	movlw	low _current_set
  6049  001CE2  6E0F               	movwf	?i2_printf+2,c
  6050  001CE4  0E00               	movlw	high _current_set
  6051  001CE6  6E10               	movwf	?i2_printf+3,c
  6052  001CE8  EC53  F012         	call	i2_printf	;wreg free
  6053                           
  6054                           ;main.c: 683: strcpy(current_set,"");
  6055  001CEC  0EE2               	movlw	low _current_set
  6056  001CEE  6E07               	movwf	strcpy@to,c
  6057  001CF0  0E00               	movlw	high _current_set
  6058  001CF2  6E08               	movwf	strcpy@to+1,c
  6059  001CF4  0E2C               	movlw	low (STR_42+14)
  6060  001CF6  6E09               	movwf	strcpy@from,c
  6061  001CF8  0EFF               	movlw	high (STR_42+14)
  6062  001CFA  6E0A               	movwf	strcpy@from+1,c
  6063  001CFC  ECBA  F016         	call	_strcpy	;wreg free
  6064                           
  6065                           ;main.c: 684: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6066  001D00  0E33               	movlw	51
  6067  001D02  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  6068  001D04  0EBB               	movlw	187
  6069  001D06  6E1B               	movwf	??_interruptHandler& (0+255),c
  6070  001D08  0EE0               	movlw	224
  6071  001D0A                     i2u439_47:
  6072  001D0A  2EE8               	decfsz	wreg,f,c
  6073  001D0C  D7FE               	bra	i2u439_47
  6074  001D0E  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  6075  001D10  D7FC               	bra	i2u439_47
  6076  001D12  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6077  001D14  D7FA               	bra	i2u439_47
  6078                           
  6079                           ;main.c: 685: counter = 0;
  6080  001D16  0E00               	movlw	0
  6081  001D18  0100               	movlb	0	; () banked
  6082  001D1A  6FDA               	movwf	(_counter+1)& (0+255),b
  6083  001D1C  0E00               	movlw	0
  6084  001D1E  6FD9               	movwf	_counter& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;main.c: 686: valid = 0;
  6088  001D20  0E00               	movlw	0
  6089  001D22  6FD6               	movwf	(_valid+1)& (0+255),b
  6090  001D24  0E00               	movlw	0
  6091  001D26  6FD5               	movwf	_valid& (0+255),b
  6092  001D28                     i2l315:
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;main.c: 687: }
  6096                           ;main.c: 688: valid = 0;
  6097                           
  6098                           ; BSR set to: 0
  6099  001D28  0E00               	movlw	0
  6100  001D2A  6FD6               	movwf	(_valid+1)& (0+255),b
  6101  001D2C  0E00               	movlw	0
  6102  001D2E  6FD5               	movwf	_valid& (0+255),b
  6103  001D30                     i2l311:
  6104                           
  6105                           ;main.c: 690: }
  6106                           ;main.c: 693: if (counter >= 5){
  6107                           
  6108                           ; BSR set to: 0
  6109  001D30  0100               	movlb	0	; () banked
  6110  001D32  BFDA               	btfsc	(_counter+1)& (0+255),7,b
  6111  001D34  D172               	goto	i2l4312
  6112  001D36  51DA               	movf	(_counter+1)& (0+255),w,b
  6113  001D38  E104               	bnz	i2u317_40
  6114  001D3A  0E05               	movlw	5
  6115  001D3C  5DD9               	subwf	_counter& (0+255),w,b
  6116  001D3E  A0D8               	btfss	status,0,c
  6117  001D40  D16C               	goto	i2l4312
  6118  001D42                     i2u317_40:
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;main.c: 695: initLCD();
  6122  001D42  EC26  F016         	call	i2_initLCD	;wreg free
  6123                           
  6124                           ;main.c: 696: printf("wrong!");
  6125  001D46  0E98               	movlw	low STR_53
  6126  001D48  6E0D               	movwf	i2printf@f,c
  6127  001D4A  0EFF               	movlw	high STR_53
  6128  001D4C  6E0E               	movwf	i2printf@f+1,c
  6129  001D4E  EC53  F012         	call	i2_printf	;wreg free
  6130                           
  6131                           ;main.c: 698: _delay((unsigned long)((500)*(40000000/4000.0)));
  6132  001D52  0E1A               	movlw	26
  6133  001D54  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  6134  001D56  0E5E               	movlw	94
  6135  001D58  6E1B               	movwf	??_interruptHandler& (0+255),c
  6136  001D5A  0E6E               	movlw	110
  6137  001D5C                     i2u440_47:
  6138  001D5C  2EE8               	decfsz	wreg,f,c
  6139  001D5E  D7FE               	bra	i2u440_47
  6140  001D60  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  6141  001D62  D7FC               	bra	i2u440_47
  6142  001D64  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6143  001D66  D7FA               	bra	i2u440_47
  6144  001D68  D000               	nop2	
  6145                           
  6146                           ;main.c: 700: strcpy(current_set,"");
  6147  001D6A  0EE2               	movlw	low _current_set
  6148  001D6C  6E07               	movwf	strcpy@to,c
  6149  001D6E  0E00               	movlw	high _current_set
  6150  001D70  6E08               	movwf	strcpy@to+1,c
  6151  001D72  0E2C               	movlw	low (STR_42+14)
  6152  001D74  6E09               	movwf	strcpy@from,c
  6153  001D76  0EFF               	movlw	high (STR_42+14)
  6154  001D78  6E0A               	movwf	strcpy@from+1,c
  6155  001D7A  ECBA  F016         	call	_strcpy	;wreg free
  6156                           
  6157                           ;main.c: 703: counter = 0;
  6158  001D7E  0E00               	movlw	0
  6159  001D80  0100               	movlb	0	; () banked
  6160  001D82  6FDA               	movwf	(_counter+1)& (0+255),b
  6161  001D84  0E00               	movlw	0
  6162  001D86  6FD9               	movwf	_counter& (0+255),b
  6163                           
  6164                           ; BSR set to: 0
  6165  001D88  D148               	goto	i2l4312
  6166  001D8A                     i2l305:
  6167                           
  6168                           ;main.c: 708: }
  6169                           ;main.c: 713: if (state ==2){
  6170                           
  6171                           ; BSR set to: 0
  6172  001D8A  0E02               	movlw	2
  6173  001D8C  185C               	xorwf	_state,w,c
  6174  001D8E  105D               	iorwf	_state+1,w,c
  6175  001D90  A4D8               	btfss	status,2,c
  6176  001D92  D12E               	goto	i2l333
  6177                           
  6178                           ;main.c: 714: counter = 0;
  6179  001D94  0E00               	movlw	0
  6180  001D96  0100               	movlb	0	; () banked
  6181  001D98  6FDA               	movwf	(_counter+1)& (0+255),b
  6182  001D9A  0E00               	movlw	0
  6183  001D9C  6FD9               	movwf	_counter& (0+255),b
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;main.c: 716: lcdInst(0xC0);;
  6187  001D9E  0EC0               	movlw	192
  6188  001DA0  ECAA  F017         	call	i2_lcdInst
  6189                           
  6190                           ;main.c: 717: putch(keys[keypress]);
  6191  001DA4  5035               	movf	interruptHandler@keypress,w,c
  6192  001DA6  0D01               	mullw	1
  6193  001DA8  0E5F               	movlw	low _keys
  6194  001DAA  24F3               	addwf	prodl,w,c
  6195  001DAC  6EF6               	movwf	tblptrl,c
  6196  001DAE  0EFE               	movlw	high _keys
  6197  001DB0  20F4               	addwfc	prodh,w,c
  6198  001DB2  6EF7               	movwf	tblptrh,c
  6199  001DB4                     	if	1	;There are 3 active tblptr bytes
  6200  001DB4  6AF8               	clrf	tblptru,c
  6201  001DB6  0E00               	movlw	low (__mediumconst shr (0+16))
  6202  001DB8  22F8               	addwfc	tblptru,f,c
  6203  001DBA                     	endif
  6204  001DBA  0008               	tblrd		*
  6205  001DBC  50F5               	movf	tablat,w,c
  6206  001DBE  ECA0  F017         	call	i2_putch
  6207                           
  6208                           ;main.c: 719: _delay((unsigned long)((500)*(40000000/4000.0)));
  6209  001DC2  0E1A               	movlw	26
  6210  001DC4  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  6211  001DC6  0E5E               	movlw	94
  6212  001DC8  6E1B               	movwf	??_interruptHandler& (0+255),c
  6213  001DCA  0E6E               	movlw	110
  6214  001DCC                     i2u441_47:
  6215  001DCC  2EE8               	decfsz	wreg,f,c
  6216  001DCE  D7FE               	bra	i2u441_47
  6217  001DD0  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  6218  001DD2  D7FC               	bra	i2u441_47
  6219  001DD4  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6220  001DD6  D7FA               	bra	i2u441_47
  6221  001DD8  D000               	nop2	
  6222                           
  6223                           ;main.c: 721: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
  6224  001DDA  5035               	movf	interruptHandler@keypress,w,c
  6225  001DDC  0D01               	mullw	1
  6226  001DDE  0E5F               	movlw	low _keys
  6227  001DE0  24F3               	addwf	prodl,w,c
  6228  001DE2  6EF6               	movwf	tblptrl,c
  6229  001DE4  0EFE               	movlw	high _keys
  6230  001DE6  20F4               	addwfc	prodh,w,c
  6231  001DE8  6EF7               	movwf	tblptrh,c
  6232  001DEA                     	if	1	;There are 3 active tblptr bytes
  6233  001DEA  6AF8               	clrf	tblptru,c
  6234  001DEC  0E00               	movlw	low (__mediumconst shr (0+16))
  6235  001DEE  22F8               	addwfc	tblptru,f,c
  6236  001DF0                     	endif
  6237  001DF0  0008               	tblrd		*
  6238  001DF2  50F5               	movf	tablat,w,c
  6239  001DF4  0A31               	xorlw	49
  6240  001DF6  B4D8               	btfsc	status,2,c
  6241  001DF8  D05A               	goto	i2l321
  6242  001DFA  5035               	movf	interruptHandler@keypress,w,c
  6243  001DFC  0D01               	mullw	1
  6244  001DFE  0E5F               	movlw	low _keys
  6245  001E00  24F3               	addwf	prodl,w,c
  6246  001E02  6EF6               	movwf	tblptrl,c
  6247  001E04  0EFE               	movlw	high _keys
  6248  001E06  20F4               	addwfc	prodh,w,c
  6249  001E08  6EF7               	movwf	tblptrh,c
  6250  001E0A                     	if	1	;There are 3 active tblptr bytes
  6251  001E0A  6AF8               	clrf	tblptru,c
  6252  001E0C  0E00               	movlw	low (__mediumconst shr (0+16))
  6253  001E0E  22F8               	addwfc	tblptru,f,c
  6254  001E10                     	endif
  6255  001E10  0008               	tblrd		*
  6256  001E12  50F5               	movf	tablat,w,c
  6257  001E14  0A32               	xorlw	50
  6258  001E16  B4D8               	btfsc	status,2,c
  6259  001E18  D04A               	goto	i2l321
  6260  001E1A  5035               	movf	interruptHandler@keypress,w,c
  6261  001E1C  0D01               	mullw	1
  6262  001E1E  0E5F               	movlw	low _keys
  6263  001E20  24F3               	addwf	prodl,w,c
  6264  001E22  6EF6               	movwf	tblptrl,c
  6265  001E24  0EFE               	movlw	high _keys
  6266  001E26  20F4               	addwfc	prodh,w,c
  6267  001E28  6EF7               	movwf	tblptrh,c
  6268  001E2A                     	if	1	;There are 3 active tblptr bytes
  6269  001E2A  6AF8               	clrf	tblptru,c
  6270  001E2C  0E00               	movlw	low (__mediumconst shr (0+16))
  6271  001E2E  22F8               	addwfc	tblptru,f,c
  6272  001E30                     	endif
  6273  001E30  0008               	tblrd		*
  6274  001E32  50F5               	movf	tablat,w,c
  6275  001E34  0A33               	xorlw	51
  6276  001E36  B4D8               	btfsc	status,2,c
  6277  001E38  D03A               	goto	i2l321
  6278  001E3A  5035               	movf	interruptHandler@keypress,w,c
  6279  001E3C  0D01               	mullw	1
  6280  001E3E  0E5F               	movlw	low _keys
  6281  001E40  24F3               	addwf	prodl,w,c
  6282  001E42  6EF6               	movwf	tblptrl,c
  6283  001E44  0EFE               	movlw	high _keys
  6284  001E46  20F4               	addwfc	prodh,w,c
  6285  001E48  6EF7               	movwf	tblptrh,c
  6286  001E4A                     	if	1	;There are 3 active tblptr bytes
  6287  001E4A  6AF8               	clrf	tblptru,c
  6288  001E4C  0E00               	movlw	low (__mediumconst shr (0+16))
  6289  001E4E  22F8               	addwfc	tblptru,f,c
  6290  001E50                     	endif
  6291  001E50  0008               	tblrd		*
  6292  001E52  50F5               	movf	tablat,w,c
  6293  001E54  0A34               	xorlw	52
  6294  001E56  B4D8               	btfsc	status,2,c
  6295  001E58  D02A               	goto	i2l321
  6296  001E5A  D0CA               	goto	i2l333
  6297  001E5C                     
  6298                           ;main.c: 725: number = 1;
  6299  001E5C  0E00               	movlw	0
  6300  001E5E  6E69               	movwf	_number+1,c
  6301  001E60  0E01               	movlw	1
  6302  001E62  D00F               	goto	L8
  6303  001E64                     
  6304                           ;main.c: 728: number = 2;
  6305  001E64  0E00               	movlw	0
  6306  001E66  6E69               	movwf	_number+1,c
  6307  001E68  0E02               	movlw	2
  6308  001E6A  D00B               	goto	L8
  6309  001E6C                     
  6310                           ;main.c: 731: number = 3;
  6311  001E6C  0E00               	movlw	0
  6312  001E6E  6E69               	movwf	_number+1,c
  6313  001E70  0E03               	movlw	3
  6314  001E72  D007               	goto	L8
  6315  001E74                     
  6316                           ;main.c: 734: number = 4;
  6317  001E74  0E00               	movlw	0
  6318  001E76  6E69               	movwf	_number+1,c
  6319  001E78  0E04               	movlw	4
  6320  001E7A  D003               	goto	L8
  6321  001E7C                     
  6322                           ;main.c: 737: number = 5;
  6323  001E7C  0E00               	movlw	0
  6324  001E7E  6E69               	movwf	_number+1,c
  6325  001E80  0E05               	movlw	5
  6326  001E82                     L8:
  6327  001E82  6E68               	movwf	_number,c
  6328                           
  6329                           ;main.c: 738: break;
  6330  001E84  D031               	goto	i2l323
  6331  001E86                     
  6332                           ;main.c: 740: initLCD();
  6333  001E86  EC26  F016         	call	i2_initLCD	;wreg free
  6334                           
  6335                           ;main.c: 741: printf("Wrong input");
  6336  001E8A  0E56               	movlw	low STR_55
  6337  001E8C  6E0D               	movwf	i2printf@f,c
  6338  001E8E  0EFF               	movlw	high STR_55
  6339  001E90  6E0E               	movwf	i2printf@f+1,c
  6340  001E92  EC53  F012         	call	i2_printf	;wreg free
  6341                           
  6342                           ;main.c: 742: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6343  001E96  0E33               	movlw	51
  6344  001E98  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  6345  001E9A  0EBB               	movlw	187
  6346  001E9C  6E1B               	movwf	??_interruptHandler& (0+255),c
  6347  001E9E  0EE0               	movlw	224
  6348  001EA0                     i2u442_47:
  6349  001EA0  2EE8               	decfsz	wreg,f,c
  6350  001EA2  D7FE               	bra	i2u442_47
  6351  001EA4  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  6352  001EA6  D7FC               	bra	i2u442_47
  6353  001EA8  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6354  001EAA  D7FA               	bra	i2u442_47
  6355                           
  6356                           ;main.c: 743: }
  6357  001EAC  D01D               	goto	i2l323
  6358  001EAE                     i2l321:
  6359  001EAE  5035               	movf	interruptHandler@keypress,w,c
  6360  001EB0  0D01               	mullw	1
  6361  001EB2  0E5F               	movlw	low _keys
  6362  001EB4  24F3               	addwf	prodl,w,c
  6363  001EB6  6EF6               	movwf	tblptrl,c
  6364  001EB8  0EFE               	movlw	high _keys
  6365  001EBA  20F4               	addwfc	prodh,w,c
  6366  001EBC  6EF7               	movwf	tblptrh,c
  6367  001EBE                     	if	1	;There are 3 active tblptr bytes
  6368  001EBE  6AF8               	clrf	tblptru,c
  6369  001EC0  0E00               	movlw	low (__mediumconst shr (0+16))
  6370  001EC2  22F8               	addwfc	tblptru,f,c
  6371  001EC4                     	endif
  6372  001EC4  0008               	tblrd		*
  6373  001EC6  50F5               	movf	tablat,w,c
  6374                           
  6375                           ; Switch size 1, requested type "space"
  6376                           ; Number of cases is 5, Range of values is 49 to 53
  6377                           ; switch strategies available:
  6378                           ; Name         Instructions Cycles
  6379                           ; simple_byte           16     9 (average)
  6380                           ;	Chosen strategy is simple_byte
  6381  001EC8  0A31               	xorlw	49	; case 49
  6382  001ECA  B4D8               	btfsc	status,2,c
  6383  001ECC  D7C7               	goto	i2l322
  6384  001ECE  0A03               	xorlw	3	; case 50
  6385  001ED0  B4D8               	btfsc	status,2,c
  6386  001ED2  D7C8               	goto	i2l324
  6387  001ED4  0A01               	xorlw	1	; case 51
  6388  001ED6  B4D8               	btfsc	status,2,c
  6389  001ED8  D7C9               	goto	i2l325
  6390  001EDA  0A07               	xorlw	7	; case 52
  6391  001EDC  B4D8               	btfsc	status,2,c
  6392  001EDE  D7CA               	goto	i2l326
  6393  001EE0  0A01               	xorlw	1	; case 53
  6394  001EE2  B4D8               	btfsc	status,2,c
  6395  001EE4  D7CB               	goto	i2l327
  6396  001EE6  D7CF               	goto	i2l328
  6397  001EE8                     i2l323:
  6398                           
  6399                           ;main.c: 746: is_valid();
  6400  001EE8  EC09  F000         	call	_is_valid	;wreg free
  6401                           
  6402                           ;main.c: 748: if ( check() == 0){
  6403  001EEC  EC20  F015         	call	_check	;wreg free
  6404  001EF0  5001               	movf	?_check,w,c
  6405  001EF2  1002               	iorwf	?_check+1,w,c
  6406  001EF4  A4D8               	btfss	status,2,c
  6407  001EF6  D028               	goto	i2l329
  6408                           
  6409                           ;main.c: 749: initLCD();
  6410  001EF8  EC26  F016         	call	i2_initLCD	;wreg free
  6411                           
  6412                           ;main.c: 750: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6413  001EFC  0E80               	movlw	128
  6414  001EFE  ECAA  F017         	call	i2_lcdInst
  6415  001F02  0E41               	movlw	65
  6416  001F04  6E1B               	movwf	??_interruptHandler& (0+255),c
  6417  001F06  0EEE               	movlw	238
  6418  001F08                     i2u443_47:
  6419  001F08  2EE8               	decfsz	wreg,f,c
  6420  001F0A  D7FE               	bra	i2u443_47
  6421  001F0C  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  6422  001F0E  D7FC               	bra	i2u443_47
  6423  001F10  D000               	nop2	
  6424                           
  6425                           ;main.c: 751: printf("TOO MANY");
  6426  001F12  0E80               	movlw	low STR_56
  6427  001F14  6E0D               	movwf	i2printf@f,c
  6428  001F16  0EFF               	movlw	high STR_56
  6429  001F18  6E0E               	movwf	i2printf@f+1,c
  6430  001F1A  EC53  F012         	call	i2_printf	;wreg free
  6431                           
  6432                           ;main.c: 753: _delay((unsigned long)((500)*(40000000/4000.0)));
  6433  001F1E  0E1A               	movlw	26
  6434  001F20  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  6435  001F22  0E5E               	movlw	94
  6436  001F24  6E1B               	movwf	??_interruptHandler& (0+255),c
  6437  001F26  0E6E               	movlw	110
  6438  001F28                     i2u444_47:
  6439  001F28  2EE8               	decfsz	wreg,f,c
  6440  001F2A  D7FE               	bra	i2u444_47
  6441  001F2C  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  6442  001F2E  D7FC               	bra	i2u444_47
  6443  001F30  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6444  001F32  D7FA               	bra	i2u444_47
  6445  001F34  D000               	nop2	
  6446                           
  6447                           ;main.c: 754: state = 2;
  6448  001F36  0E00               	movlw	0
  6449  001F38  6E5D               	movwf	_state+1,c
  6450  001F3A  0E02               	movlw	2
  6451  001F3C  6E5C               	movwf	_state,c
  6452                           
  6453                           ;main.c: 755: number = 0;
  6454  001F3E  0E00               	movlw	0
  6455  001F40  6E69               	movwf	_number+1,c
  6456  001F42  0E00               	movlw	0
  6457  001F44  6E68               	movwf	_number,c
  6458                           
  6459                           ;main.c: 756: }
  6460  001F46  D054               	goto	i2l333
  6461  001F48                     i2l329:
  6462                           
  6463                           ;main.c: 759: else if (counter_step >= assembly_step-1){
  6464  001F48  0EFF               	movlw	255
  6465  001F4A  6E1B               	movwf	??_interruptHandler& (0+255),c
  6466  001F4C  0EFF               	movlw	255
  6467  001F4E  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  6468  001F50  C05A  F01D         	movff	_assembly_step,??_interruptHandler+2
  6469  001F54  C05B  F01E         	movff	_assembly_step+1,??_interruptHandler+3
  6470  001F58  501B               	movf	??_interruptHandler,w,c
  6471  001F5A  261D               	addwf	??_interruptHandler+2,f,c
  6472  001F5C  501C               	movf	??_interruptHandler+1,w,c
  6473  001F5E  221E               	addwfc	??_interruptHandler+3,f,c
  6474  001F60  501D               	movf	??_interruptHandler+2,w,c
  6475  001F62  5C58               	subwf	_counter_step,w,c
  6476  001F64  5059               	movf	_counter_step+1,w,c
  6477  001F66  0A80               	xorlw	128
  6478  001F68  6E1F               	movwf	(??_interruptHandler+4)& (0+255),c
  6479  001F6A  501E               	movf	??_interruptHandler+3,w,c
  6480  001F6C  0A80               	xorlw	128
  6481  001F6E  581F               	subwfb	(??_interruptHandler+4)& (0+255),w,c
  6482  001F70  A0D8               	btfss	status,0,c
  6483  001F72  D012               	goto	i2l331
  6484                           
  6485                           ;main.c: 760: final_number[counter_step] = number;
  6486  001F74  90D8               	bcf	status,0,c
  6487  001F76  3458               	rlcf	_counter_step,w,c
  6488  001F78  6ED9               	movwf	fsr2l,c
  6489  001F7A  3459               	rlcf	_counter_step+1,w,c
  6490  001F7C  6EDA               	movwf	fsr2h,c
  6491  001F7E  0E20               	movlw	low _final_number
  6492  001F80  26D9               	addwf	fsr2l,f,c
  6493  001F82  0E01               	movlw	high _final_number
  6494  001F84  22DA               	addwfc	fsr2h,f,c
  6495  001F86  C068  FFDE         	movff	_number,postinc2
  6496  001F8A  C069  FFDD         	movff	_number+1,postdec2
  6497                           
  6498                           ;main.c: 761: state = 3;
  6499  001F8E  0E00               	movlw	0
  6500  001F90  6E5D               	movwf	_state+1,c
  6501  001F92  0E03               	movlw	3
  6502  001F94  6E5C               	movwf	_state,c
  6503                           
  6504                           ;main.c: 762: }
  6505  001F96  D02C               	goto	i2l333
  6506  001F98                     i2l331:
  6507                           
  6508                           ;main.c: 763: else if ( check() == 1){
  6509  001F98  EC20  F015         	call	_check	;wreg free
  6510  001F9C  0401               	decf	?_check,w,c
  6511  001F9E  1002               	iorwf	?_check+1,w,c
  6512  001FA0  A4D8               	btfss	status,2,c
  6513  001FA2  D026               	goto	i2l333
  6514                           
  6515                           ;main.c: 764: state = 1;
  6516  001FA4  0E00               	movlw	0
  6517  001FA6  6E5D               	movwf	_state+1,c
  6518  001FA8  0E01               	movlw	1
  6519  001FAA  6E5C               	movwf	_state,c
  6520                           
  6521                           ;main.c: 765: initLCD();
  6522  001FAC  EC26  F016         	call	i2_initLCD	;wreg free
  6523                           
  6524                           ;main.c: 766: printf("okay!");
  6525  001FB0  0EA5               	movlw	low STR_57
  6526  001FB2  6E0D               	movwf	i2printf@f,c
  6527  001FB4  0EFF               	movlw	high STR_57
  6528  001FB6  6E0E               	movwf	i2printf@f+1,c
  6529  001FB8  EC53  F012         	call	i2_printf	;wreg free
  6530                           
  6531                           ;main.c: 767: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6532  001FBC  0E33               	movlw	51
  6533  001FBE  6E1C               	movwf	(??_interruptHandler+1)& (0+255),c
  6534  001FC0  0EBB               	movlw	187
  6535  001FC2  6E1B               	movwf	??_interruptHandler& (0+255),c
  6536  001FC4  0EE0               	movlw	224
  6537  001FC6                     i2u445_47:
  6538  001FC6  2EE8               	decfsz	wreg,f,c
  6539  001FC8  D7FE               	bra	i2u445_47
  6540  001FCA  2E1B               	decfsz	??_interruptHandler& (0+255),f,c
  6541  001FCC  D7FC               	bra	i2u445_47
  6542  001FCE  2E1C               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6543  001FD0  D7FA               	bra	i2u445_47
  6544                           
  6545                           ;main.c: 768: final_number[counter_step] = number;
  6546  001FD2  90D8               	bcf	status,0,c
  6547  001FD4  3458               	rlcf	_counter_step,w,c
  6548  001FD6  6ED9               	movwf	fsr2l,c
  6549  001FD8  3459               	rlcf	_counter_step+1,w,c
  6550  001FDA  6EDA               	movwf	fsr2h,c
  6551  001FDC  0E20               	movlw	low _final_number
  6552  001FDE  26D9               	addwf	fsr2l,f,c
  6553  001FE0  0E01               	movlw	high _final_number
  6554  001FE2  22DA               	addwfc	fsr2h,f,c
  6555  001FE4  C068  FFDE         	movff	_number,postinc2
  6556  001FE8  C069  FFDD         	movff	_number+1,postdec2
  6557                           
  6558                           ;main.c: 769: counter_step++;
  6559  001FEC  4A58               	infsnz	_counter_step,f,c
  6560  001FEE  2A59               	incf	_counter_step+1,f,c
  6561  001FF0                     i2l333:
  6562                           
  6563                           ;main.c: 770: }
  6564                           ;main.c: 773: }
  6565                           ;main.c: 775: }
  6566                           ;main.c: 782: B=0;N=0;S=0;W=0;
  6567  001FF0  0E00               	movlw	0
  6568  001FF2  6E57               	movwf	_B+1,c
  6569  001FF4  0E00               	movlw	0
  6570  001FF6  6E56               	movwf	_B,c
  6571  001FF8  0E00               	movlw	0
  6572  001FFA  6E55               	movwf	_N+1,c
  6573  001FFC  0E00               	movlw	0
  6574  001FFE  6E54               	movwf	_N,c
  6575  002000  0E00               	movlw	0
  6576  002002  6E53               	movwf	_S+1,c
  6577  002004  0E00               	movlw	0
  6578  002006  6E52               	movwf	_S,c
  6579  002008  0E00               	movlw	0
  6580  00200A  6E51               	movwf	_W+1,c
  6581  00200C  0E00               	movlw	0
  6582  00200E  6E50               	movwf	_W,c
  6583                           
  6584                           ;main.c: 783: total_number = 0;
  6585  002010  0E00               	movlw	0
  6586  002012  0100               	movlb	0	; () banked
  6587  002014  6FD4               	movwf	(_total_number+1)& (0+255),b
  6588  002016  0E00               	movlw	0
  6589  002018  6FD3               	movwf	_total_number& (0+255),b
  6590  00201A                     i2l4312:
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;main.c: 785: INT1IF = 0;
  6594  00201A  90F0               	bcf	intcon3,0,c	;volatile
  6595  00201C                     i2l4314:
  6596                           
  6597                           ; BSR set to: 0
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;main.c: 786: return;
  6601  00201C  C031  F06F         	movff	??_interruptHandler+22,btemp+3
  6602  002020  C030  F06E         	movff	??_interruptHandler+21,btemp+2
  6603  002024  C02F  F06D         	movff	??_interruptHandler+20,btemp+1
  6604  002028  C02E  F06C         	movff	??_interruptHandler+19,btemp
  6605  00202C  C02D  FFF5         	movff	??_interruptHandler+18,tablat
  6606  002030  C02C  FFF8         	movff	??_interruptHandler+17,tblptru
  6607  002034  C02B  FFF7         	movff	??_interruptHandler+16,tblptrh
  6608  002038  C02A  FFF6         	movff	??_interruptHandler+15,tblptrl
  6609  00203C  C029  FFF4         	movff	??_interruptHandler+14,prodh
  6610  002040  C028  FFF3         	movff	??_interruptHandler+13,prodl
  6611  002044  C027  FFDA         	movff	??_interruptHandler+12,fsr2h
  6612  002048  C026  FFD9         	movff	??_interruptHandler+11,fsr2l
  6613  00204C  C025  FFE2         	movff	??_interruptHandler+10,fsr1h
  6614  002050  C024  FFE1         	movff	??_interruptHandler+9,fsr1l
  6615  002054  C023  FFEA         	movff	??_interruptHandler+8,fsr0h
  6616  002058  C022  FFE9         	movff	??_interruptHandler+7,fsr0l
  6617  00205C  C021  FFFB         	movff	??_interruptHandler+6,pclatu
  6618  002060  C020  FFFA         	movff	??_interruptHandler+5,pclath
  6619  002064  926C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6620  002066  0011               	retfie		f
  6621  002068                     __end_of_interruptHandler:
  6622                           	opt stack 0
  6623                           pclatu	equ	0xFFB
  6624                           pclath	equ	0xFFA
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           intcon	equ	0xFF2
  6632                           intcon3	equ	0xFF0
  6633                           indf0	equ	0xFEF
  6634                           postinc0	equ	0xFEE
  6635                           fsr0h	equ	0xFEA
  6636                           fsr0l	equ	0xFE9
  6637                           wreg	equ	0xFE8
  6638                           indf1	equ	0xFE7
  6639                           postinc1	equ	0xFE6
  6640                           postdec1	equ	0xFE5
  6641                           fsr1h	equ	0xFE2
  6642                           fsr1l	equ	0xFE1
  6643                           indf2	equ	0xFDF
  6644                           postinc2	equ	0xFDE
  6645                           postdec2	equ	0xFDD
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function i2_printf *****************
  6651 ;; Defined at:
  6652 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6655 ;;		 -> STR_57(6), STR_56(9), STR_55(12), STR_53(7), 
  6656 ;;		 -> STR_51(3), STR_50(11), STR_48(3), STR_47(9), 
  6657 ;;		 -> STR_42(15), STR_41(18), STR_40(12), STR_39(10), 
  6658 ;;		 -> STR_38(5), STR_37(2), STR_36(3), STR_35(2), 
  6659 ;;		 -> STR_34(3), STR_33(3), STR_32(3), STR_31(3), 
  6660 ;;		 -> STR_30(3), STR_29(3), STR_28(3), STR_27(3), 
  6661 ;;		 -> STR_26(20), STR_25(2), STR_24(3), STR_23(2), 
  6662 ;;		 -> STR_22(3), STR_21(3), STR_20(4), STR_19(3), 
  6663 ;;		 -> STR_18(3), STR_17(3), STR_16(4), STR_15(3), 
  6664 ;;		 -> STR_14(4), STR_13(3), STR_12(3), STR_11(2), 
  6665 ;;		 -> STR_10(3), STR_9(2), STR_8(3), STR_7(5), 
  6666 ;;		 -> STR_6(17), STR_5(6), STR_4(8), STR_3(3), 
  6667 ;;		 -> STR_2(14), STR_1(15), 
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;  printf          4    0        struct .
  6670 ;;  printf          2   23[COMRAM] unsigned int 
  6671 ;;  printf          2   21[COMRAM] PTR const unsigned char 
  6672 ;;		 -> STR_78(7), number(2), final_set(40), current_set(5), 
  6673 ;;  printf          2   19[COMRAM] PTR void [1]
  6674 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6675 ;;  printf          2    0        unsigned int 
  6676 ;;  printf          1   25[COMRAM] char 
  6677 ;;  printf          1   18[COMRAM] char 
  6678 ;;  printf          1   17[COMRAM] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  2   12[COMRAM] int 
  6681 ;; Registers used:
  6682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;Total ram usage:       14 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    2
  6695 ;; This function calls:
  6696 ;;		i2___lwdiv
  6697 ;;		i2___lwmod
  6698 ;;		i2_putch
  6699 ;; This function is called by:
  6700 ;;		_interruptHandler
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           	psect	text18
  6705  0024A6                     __ptext18:
  6706                           	opt stack 0
  6707  0024A6                     i2_printf:
  6708                           	opt stack 24
  6709                           
  6710                           ;doprnt.c: 466: va_list ap;
  6711                           ;doprnt.c: 499: signed char c;
  6712                           ;doprnt.c: 506: signed char prec;
  6713                           ;doprnt.c: 508: unsigned char flag;
  6714                           ;doprnt.c: 523: union {
  6715                           ;doprnt.c: 524: unsigned long vd;
  6716                           ;doprnt.c: 525: double integ;
  6717                           ;doprnt.c: 526: } tmpval;
  6718                           ;doprnt.c: 528: unsigned int val;
  6719                           ;doprnt.c: 529: unsigned len;
  6720                           ;doprnt.c: 530: const char * cp;
  6721                           ;doprnt.c: 533: *ap = __va_start();
  6722                           
  6723                           ;incstack = 0
  6724  0024A6  0E0F               	movlw	low (?i2_printf+2)
  6725  0024A8  6E14               	movwf	i2printf@ap,c
  6726  0024AA  0E00               	movlw	high (?i2_printf+2)
  6727  0024AC  6E15               	movwf	i2printf@ap+1,c
  6728                           
  6729                           ;doprnt.c: 536: while(c = *f++) {
  6730  0024AE  D0C8               	goto	i2u262_40
  6731  0024B0                     
  6732                           ;doprnt.c: 538: if(c != '%')
  6733  0024B0  0E25               	movlw	37
  6734  0024B2  181A               	xorwf	i2printf@c,w,c
  6735  0024B4  B4D8               	btfsc	status,2,c
  6736  0024B6  D004               	goto	i2l630
  6737                           
  6738                           ;doprnt.c: 540: {
  6739                           ;doprnt.c: 541: (putch(c) );
  6740  0024B8  501A               	movf	i2printf@c,w,c
  6741  0024BA  ECA0  F017         	call	i2_putch
  6742                           
  6743                           ;doprnt.c: 542: continue;
  6744  0024BE  D0C0               	goto	i2u262_40
  6745  0024C0                     i2l630:
  6746                           
  6747                           ;doprnt.c: 543: }
  6748                           ;doprnt.c: 548: flag = 0;
  6749  0024C0  0E00               	movlw	0
  6750  0024C2  6E12               	movwf	i2printf@flag,c
  6751                           
  6752                           ;doprnt.c: 635: switch(c = *f++) {
  6753  0024C4  D03F               	goto	i2l631
  6754  0024C6                     
  6755                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6756  0024C6  C014  FFD9         	movff	i2printf@ap,fsr2l
  6757  0024CA  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  6758  0024CE  CFDE F016          	movff	postinc2,i2printf@cp
  6759  0024D2  CFDD F017          	movff	postdec2,i2printf@cp+1
  6760  0024D6  0E02               	movlw	2
  6761  0024D8  2614               	addwf	i2printf@ap,f,c
  6762  0024DA  0E00               	movlw	0
  6763  0024DC  2215               	addwfc	i2printf@ap+1,f,c
  6764                           
  6765                           ;doprnt.c: 740: if(!cp)
  6766  0024DE  5016               	movf	i2printf@cp,w,c
  6767  0024E0  1017               	iorwf	i2printf@cp+1,w,c
  6768  0024E2  A4D8               	btfss	status,2,c
  6769  0024E4  D01A               	goto	i2l639
  6770                           
  6771                           ;doprnt.c: 741: cp = "(null)";
  6772  0024E6  0E91               	movlw	low STR_78
  6773  0024E8  6E16               	movwf	i2printf@cp,c
  6774  0024EA  0EFF               	movlw	high STR_78
  6775  0024EC  6E17               	movwf	i2printf@cp+1,c
  6776                           
  6777                           ;doprnt.c: 777: while(*cp)
  6778  0024EE  D015               	goto	i2l639
  6779  0024F0                     
  6780                           ;doprnt.c: 778: (putch(*cp++) );
  6781  0024F0  C016  FFF6         	movff	i2printf@cp,tblptrl
  6782  0024F4  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  6783  0024F8  0E00               	movlw	low (__mediumconst shr (0+16))
  6784  0024FA  6EF8               	movwf	tblptru,c
  6785  0024FC  0E0F               	movlw	(high __ramtop+-1)
  6786  0024FE  64F7               	cpfsgt	tblptrh,c
  6787  002500  D003               	bra	i2u254_47
  6788  002502  0008               	tblrd		*
  6789  002504  50F5               	movf	tablat,w,c
  6790  002506  D005               	bra	i2u254_40
  6791  002508                     i2u254_47:
  6792  002508  CFF6 FFE9          	movff	tblptrl,fsr0l
  6793  00250C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6794  002510  50EF               	movf	indf0,w,c
  6795  002512                     i2u254_40:
  6796  002512  ECA0  F017         	call	i2_putch
  6797  002516  4A16               	infsnz	i2printf@cp,f,c
  6798  002518  2A17               	incf	i2printf@cp+1,f,c
  6799  00251A                     i2l639:
  6800  00251A  C016  FFF6         	movff	i2printf@cp,tblptrl
  6801  00251E  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  6802  002522  0E00               	movlw	low (__mediumconst shr (0+16))
  6803  002524  6EF8               	movwf	tblptru,c
  6804  002526  0E0F               	movlw	(high __ramtop+-1)
  6805  002528  64F7               	cpfsgt	tblptrh,c
  6806  00252A  D003               	bra	i2u255_47
  6807  00252C  0008               	tblrd		*
  6808  00252E  50F5               	movf	tablat,w,c
  6809  002530  D005               	bra	i2u255_40
  6810  002532                     i2u255_47:
  6811  002532  CFF6 FFE9          	movff	tblptrl,fsr0l
  6812  002536  CFF7 FFEA          	movff	tblptrh,fsr0h
  6813  00253A  50EF               	movf	indf0,w,c
  6814  00253C                     i2u255_40:
  6815  00253C  0900               	iorlw	0
  6816  00253E  B4D8               	btfsc	status,2,c
  6817  002540  D07F               	goto	i2u262_40
  6818  002542  D7D6               	goto	i2l640
  6819  002544                     i2l631:
  6820  002544  C00D  FFF6         	movff	i2printf@f,tblptrl
  6821  002548  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6822  00254C  4A0D               	infsnz	i2printf@f,f,c
  6823  00254E  2A0E               	incf	i2printf@f+1,f,c
  6824  002550                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6825  002550  6AF8               	clrf	tblptru,c
  6826  002552                     	endif
  6827  002552                     	if	0	;tblptru may be non-zero
  6828  002552                     	endif
  6829  002552  0008               	tblrd		*
  6830  002554  CFF5 F01A          	movff	tablat,i2printf@c
  6831  002558  501A               	movf	i2printf@c,w,c
  6832                           
  6833                           ; Switch size 1, requested type "space"
  6834                           ; Number of cases is 4, Range of values is 0 to 115
  6835                           ; switch strategies available:
  6836                           ; Name         Instructions Cycles
  6837                           ; simple_byte           13     7 (average)
  6838                           ;	Chosen strategy is simple_byte
  6839  00255A  0A00               	xorlw	0	; case 0
  6840  00255C  B4D8               	btfsc	status,2,c
  6841  00255E  0012               	return	
  6842  002560  0A64               	xorlw	100	; case 100
  6843  002562  B4D8               	btfsc	status,2,c
  6844  002564  D007               	goto	i2l636
  6845  002566  0A0D               	xorlw	13	; case 105
  6846  002568  B4D8               	btfsc	status,2,c
  6847  00256A  D004               	goto	i2l636
  6848  00256C  0A1A               	xorlw	26	; case 115
  6849  00256E  B4D8               	btfsc	status,2,c
  6850  002570  D7AA               	goto	i2l637
  6851  002572  D066               	goto	i2u262_40
  6852  002574                     i2l636:
  6853                           
  6854                           ;doprnt.c: 1253: {
  6855                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6856  002574  C014  FFD9         	movff	i2printf@ap,fsr2l
  6857  002578  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  6858  00257C  CFDE F018          	movff	postinc2,i2printf@val
  6859  002580  CFDD F019          	movff	postdec2,i2printf@val+1
  6860  002584  0E02               	movlw	2
  6861  002586  2614               	addwf	i2printf@ap,f,c
  6862  002588  0E00               	movlw	0
  6863  00258A  2215               	addwfc	i2printf@ap+1,f,c
  6864                           
  6865                           ;doprnt.c: 1261: if((int)val < 0) {
  6866  00258C  AE19               	btfss	i2printf@val+1,7,c
  6867  00258E  D006               	goto	i2l643
  6868                           
  6869                           ;doprnt.c: 1262: flag |= 0x03;
  6870  002590  0E03               	movlw	3
  6871  002592  1212               	iorwf	i2printf@flag,f,c
  6872                           
  6873                           ;doprnt.c: 1263: val = -val;
  6874  002594  6C18               	negf	i2printf@val,c
  6875  002596  1E19               	comf	i2printf@val+1,f,c
  6876  002598  B0D8               	btfsc	status,0,c
  6877  00259A  2A19               	incf	i2printf@val+1,f,c
  6878  00259C                     i2l643:
  6879                           
  6880                           ;doprnt.c: 1264: }
  6881                           ;doprnt.c: 1266: }
  6882                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6883  00259C  0E01               	movlw	1
  6884  00259E  6E1A               	movwf	i2printf@c,c
  6885  0025A0                     i2l3666:
  6886  0025A0  0E05               	movlw	5
  6887  0025A2  181A               	xorwf	i2printf@c,w,c
  6888  0025A4  B4D8               	btfsc	status,2,c
  6889  0025A6  D015               	goto	i2u260_40
  6890                           
  6891                           ;doprnt.c: 1306: if(val < dpowers[c])
  6892  0025A8  501A               	movf	i2printf@c,w,c
  6893  0025AA  0D02               	mullw	2
  6894  0025AC  0E70               	movlw	low _dpowers
  6895  0025AE  24F3               	addwf	prodl,w,c
  6896  0025B0  6EF6               	movwf	tblptrl,c
  6897  0025B2  0EFE               	movlw	high _dpowers
  6898  0025B4  20F4               	addwfc	prodh,w,c
  6899  0025B6  6EF7               	movwf	tblptrh,c
  6900  0025B8                     	if	1	;There are 3 active tblptr bytes
  6901  0025B8  6AF8               	clrf	tblptru,c
  6902  0025BA  0E00               	movlw	low (__mediumconst shr (0+16))
  6903  0025BC  22F8               	addwfc	tblptru,f,c
  6904  0025BE                     	endif
  6905  0025BE  0009               	tblrd		*+
  6906  0025C0  50F5               	movf	tablat,w,c
  6907  0025C2  5C18               	subwf	i2printf@val,w,c
  6908  0025C4  0009               	tblrd		*+
  6909  0025C6  50F5               	movf	tablat,w,c
  6910  0025C8  5819               	subwfb	i2printf@val+1,w,c
  6911  0025CA  A0D8               	btfss	status,0,c
  6912  0025CC  D002               	goto	i2u260_40
  6913                           
  6914                           ;doprnt.c: 1307: break;
  6915  0025CE  2A1A               	incf	i2printf@c,f,c
  6916  0025D0  D7E7               	goto	i2l3666
  6917  0025D2                     i2u260_40:
  6918                           
  6919                           ;doprnt.c: 1422: {
  6920                           ;doprnt.c: 1438: if(flag & 0x03)
  6921  0025D2  C012  F011         	movff	i2printf@flag,??i2_printf
  6922  0025D6  0E03               	movlw	3
  6923  0025D8  1611               	andwf	??i2_printf,f,c
  6924  0025DA  B4D8               	btfsc	status,2,c
  6925  0025DC  D003               	goto	i2l647
  6926                           
  6927                           ;doprnt.c: 1439: (putch('-') );
  6928  0025DE  0E2D               	movlw	45
  6929  0025E0  ECA0  F017         	call	i2_putch
  6930  0025E4                     i2l647:
  6931                           
  6932                           ;doprnt.c: 1469: }
  6933                           ;doprnt.c: 1472: prec = c;
  6934  0025E4  C01A  F013         	movff	i2printf@c,i2printf@prec
  6935                           
  6936                           ;doprnt.c: 1474: while(prec--) {
  6937  0025E8  D027               	goto	i2l648
  6938  0025EA                     
  6939                           ;doprnt.c: 1478: {
  6940                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6941  0025EA  5013               	movf	i2printf@prec,w,c
  6942  0025EC  0D02               	mullw	2
  6943  0025EE  0E70               	movlw	low _dpowers
  6944  0025F0  24F3               	addwf	prodl,w,c
  6945  0025F2  6EF6               	movwf	tblptrl,c
  6946  0025F4  0EFE               	movlw	high _dpowers
  6947  0025F6  20F4               	addwfc	prodh,w,c
  6948  0025F8  6EF7               	movwf	tblptrh,c
  6949  0025FA                     	if	1	;There are 3 active tblptr bytes
  6950  0025FA  6AF8               	clrf	tblptru,c
  6951  0025FC  0E00               	movlw	low (__mediumconst shr (0+16))
  6952  0025FE  22F8               	addwfc	tblptru,f,c
  6953  002600                     	endif
  6954  002600  0009               	tblrd		*+
  6955  002602  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6956  002606  000A               	tblrd		*-
  6957  002608  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6958  00260C  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6959  002610  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6960  002614  ECD7  F015         	call	i2___lwdiv	;wreg free
  6961  002618  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6962  00261C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6963  002620  0E00               	movlw	0
  6964  002622  6E0B               	movwf	i2___lwmod@divisor+1,c
  6965  002624  0E0A               	movlw	10
  6966  002626  6E0A               	movwf	i2___lwmod@divisor,c
  6967  002628  ECFF  F016         	call	i2___lwmod	;wreg free
  6968  00262C  5008               	movf	?i2___lwmod,w,c
  6969  00262E  0F30               	addlw	48
  6970  002630  6E1A               	movwf	i2printf@c,c
  6971                           
  6972                           ;doprnt.c: 1523: }
  6973                           ;doprnt.c: 1524: (putch(c) );
  6974  002632  501A               	movf	i2printf@c,w,c
  6975  002634  ECA0  F017         	call	i2_putch
  6976  002638                     i2l648:
  6977  002638  0613               	decf	i2printf@prec,f,c
  6978  00263A  2813               	incf	i2printf@prec,w,c
  6979  00263C  A4D8               	btfss	status,2,c
  6980  00263E  D7D5               	goto	i2l649
  6981  002640                     i2u262_40:
  6982  002640  C00D  FFF6         	movff	i2printf@f,tblptrl
  6983  002644  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6984  002648  4A0D               	infsnz	i2printf@f,f,c
  6985  00264A  2A0E               	incf	i2printf@f+1,f,c
  6986  00264C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6987  00264C  6AF8               	clrf	tblptru,c
  6988  00264E                     	endif
  6989  00264E                     	if	0	;tblptru may be non-zero
  6990  00264E                     	endif
  6991  00264E  0008               	tblrd		*
  6992  002650  CFF5 F01A          	movff	tablat,i2printf@c
  6993  002654  501A               	movf	i2printf@c,w,c
  6994  002656  B4D8               	btfsc	status,2,c
  6995  002658  0012               	return	
  6996  00265A  D72A               	goto	i2l629
  6997  00265C                     __end_ofi2_printf:
  6998                           	opt stack 0
  6999                           pclatu	equ	0xFFB
  7000                           pclath	equ	0xFFA
  7001                           tblptru	equ	0xFF8
  7002                           tblptrh	equ	0xFF7
  7003                           tblptrl	equ	0xFF6
  7004                           tablat	equ	0xFF5
  7005                           prodh	equ	0xFF4
  7006                           prodl	equ	0xFF3
  7007                           intcon	equ	0xFF2
  7008                           intcon3	equ	0xFF0
  7009                           indf0	equ	0xFEF
  7010                           postinc0	equ	0xFEE
  7011                           fsr0h	equ	0xFEA
  7012                           fsr0l	equ	0xFE9
  7013                           wreg	equ	0xFE8
  7014                           indf1	equ	0xFE7
  7015                           postinc1	equ	0xFE6
  7016                           postdec1	equ	0xFE5
  7017                           fsr1h	equ	0xFE2
  7018                           fsr1l	equ	0xFE1
  7019                           indf2	equ	0xFDF
  7020                           postinc2	equ	0xFDE
  7021                           postdec2	equ	0xFDD
  7022                           fsr2h	equ	0xFDA
  7023                           fsr2l	equ	0xFD9
  7024                           status	equ	0xFD8
  7025                           
  7026 ;; *************** function i2_putch *****************
  7027 ;; Defined at:
  7028 ;;		line 24 in file "lcd.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;  data            1    wreg     unsigned char 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;  data            1    2[COMRAM] unsigned char 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      void 
  7035 ;; Registers used:
  7036 ;;		wreg, status,2, status,0, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7043 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7046 ;;Total ram usage:        1 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    1
  7049 ;; This function calls:
  7050 ;;		i2_lcdNibble
  7051 ;; This function is called by:
  7052 ;;		_interruptHandler
  7053 ;;		i2_printf
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           	psect	text19
  7058  002F40                     __ptext19:
  7059                           	opt stack 0
  7060  002F40                     i2_putch:
  7061                           	opt stack 25
  7062                           
  7063                           ;incstack = 0
  7064                           ;i2putch@data stored from wreg
  7065  002F40  6E03               	movwf	i2putch@data,c
  7066                           
  7067                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7068  002F42  848C               	bsf	3980,2,c	;volatile
  7069                           
  7070                           ;lcd.c: 33: lcdNibble(data);
  7071  002F44  5003               	movf	i2putch@data,w,c
  7072  002F46  ECE1  F014         	call	i2_lcdNibble
  7073                           
  7074                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7075  002F4A  0EC8               	movlw	200
  7076  002F4C                     i2u446_47:
  7077  002F4C  D000               	nop2	
  7078  002F4E  2EE8               	decfsz	wreg,f,c
  7079  002F50  D7FD               	bra	i2u446_47
  7080  002F52  0012               	return		;funcret
  7081  002F54                     __end_ofi2_putch:
  7082                           	opt stack 0
  7083                           pclatu	equ	0xFFB
  7084                           pclath	equ	0xFFA
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodh	equ	0xFF4
  7090                           prodl	equ	0xFF3
  7091                           intcon	equ	0xFF2
  7092                           intcon3	equ	0xFF0
  7093                           indf0	equ	0xFEF
  7094                           postinc0	equ	0xFEE
  7095                           fsr0h	equ	0xFEA
  7096                           fsr0l	equ	0xFE9
  7097                           wreg	equ	0xFE8
  7098                           indf1	equ	0xFE7
  7099                           postinc1	equ	0xFE6
  7100                           postdec1	equ	0xFE5
  7101                           fsr1h	equ	0xFE2
  7102                           fsr1l	equ	0xFE1
  7103                           indf2	equ	0xFDF
  7104                           postinc2	equ	0xFDE
  7105                           postdec2	equ	0xFDD
  7106                           fsr2h	equ	0xFDA
  7107                           fsr2l	equ	0xFD9
  7108                           status	equ	0xFD8
  7109                           
  7110 ;; *************** function i2___lwmod *****************
  7111 ;; Defined at:
  7112 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;  dividend        2    7[COMRAM] unsigned int 
  7115 ;;  divisor         2    9[COMRAM] unsigned int 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  2    7[COMRAM] unsigned int 
  7120 ;; Registers used:
  7121 ;;		wreg, status,2, status,0
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7127 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;Total ram usage:        5 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; This function calls:
  7134 ;;		Nothing
  7135 ;; This function is called by:
  7136 ;;		i2_printf
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text20
  7141  002DFE                     __ptext20:
  7142                           	opt stack 0
  7143  002DFE                     i2___lwmod:
  7144                           	opt stack 25
  7145                           
  7146                           ;incstack = 0
  7147  002DFE  500A               	movf	i2___lwmod@divisor,w,c
  7148  002E00  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7149  002E02  B4D8               	btfsc	status,2,c
  7150  002E04  D018               	goto	i2l1071
  7151  002E06  0E01               	movlw	1
  7152  002E08  6E0C               	movwf	i2___lwmod@counter,c
  7153  002E0A  D004               	goto	i2l1066
  7154  002E0C  90D8               	bcf	status,0,c
  7155  002E0E  360A               	rlcf	i2___lwmod@divisor,f,c
  7156  002E10  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7157  002E12  2A0C               	incf	i2___lwmod@counter,f,c
  7158  002E14                     i2l1066:
  7159  002E14  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7160  002E16  D7FA               	goto	i2l1067
  7161  002E18                     i2u201_40:
  7162  002E18  500A               	movf	i2___lwmod@divisor,w,c
  7163  002E1A  5C08               	subwf	i2___lwmod@dividend,w,c
  7164  002E1C  500B               	movf	i2___lwmod@divisor+1,w,c
  7165  002E1E  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7166  002E20  A0D8               	btfss	status,0,c
  7167  002E22  D004               	goto	i2l1070
  7168  002E24  500A               	movf	i2___lwmod@divisor,w,c
  7169  002E26  5E08               	subwf	i2___lwmod@dividend,f,c
  7170  002E28  500B               	movf	i2___lwmod@divisor+1,w,c
  7171  002E2A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7172  002E2C                     i2l1070:
  7173  002E2C  90D8               	bcf	status,0,c
  7174  002E2E  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7175  002E30  320A               	rrcf	i2___lwmod@divisor,f,c
  7176  002E32  2E0C               	decfsz	i2___lwmod@counter,f,c
  7177  002E34  D7F1               	goto	i2u201_40
  7178  002E36                     i2l1071:
  7179  002E36  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7180  002E3A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7181  002E3E  0012               	return		;funcret
  7182  002E40                     __end_ofi2___lwmod:
  7183                           	opt stack 0
  7184                           pclatu	equ	0xFFB
  7185                           pclath	equ	0xFFA
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           intcon	equ	0xFF2
  7193                           intcon3	equ	0xFF0
  7194                           indf0	equ	0xFEF
  7195                           postinc0	equ	0xFEE
  7196                           fsr0h	equ	0xFEA
  7197                           fsr0l	equ	0xFE9
  7198                           wreg	equ	0xFE8
  7199                           indf1	equ	0xFE7
  7200                           postinc1	equ	0xFE6
  7201                           postdec1	equ	0xFE5
  7202                           fsr1h	equ	0xFE2
  7203                           fsr1l	equ	0xFE1
  7204                           indf2	equ	0xFDF
  7205                           postinc2	equ	0xFDE
  7206                           postdec2	equ	0xFDD
  7207                           fsr2h	equ	0xFDA
  7208                           fsr2l	equ	0xFD9
  7209                           status	equ	0xFD8
  7210                           
  7211 ;; *************** function i2___lwdiv *****************
  7212 ;; Defined at:
  7213 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  dividend        2    0[COMRAM] unsigned int 
  7216 ;;  divisor         2    2[COMRAM] unsigned int 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7219 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  2    0[COMRAM] unsigned int 
  7222 ;; Registers used:
  7223 ;;		wreg, status,2, status,0
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7229 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;Total ram usage:        7 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; This function calls:
  7236 ;;		Nothing
  7237 ;; This function is called by:
  7238 ;;		i2_printf
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text21
  7243  002BAE                     __ptext21:
  7244                           	opt stack 0
  7245  002BAE                     i2___lwdiv:
  7246                           	opt stack 25
  7247                           
  7248                           ;incstack = 0
  7249  002BAE  0E00               	movlw	0
  7250  002BB0  6E06               	movwf	i2___lwdiv@quotient+1,c
  7251  002BB2  0E00               	movlw	0
  7252  002BB4  6E05               	movwf	i2___lwdiv@quotient,c
  7253  002BB6  5003               	movf	i2___lwdiv@divisor,w,c
  7254  002BB8  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7255  002BBA  B4D8               	btfsc	status,2,c
  7256  002BBC  D01C               	goto	i2l1061
  7257  002BBE  0E01               	movlw	1
  7258  002BC0  6E07               	movwf	i2___lwdiv@counter,c
  7259  002BC2  D004               	goto	i2l1056
  7260  002BC4  90D8               	bcf	status,0,c
  7261  002BC6  3603               	rlcf	i2___lwdiv@divisor,f,c
  7262  002BC8  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7263  002BCA  2A07               	incf	i2___lwdiv@counter,f,c
  7264  002BCC                     i2l1056:
  7265  002BCC  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7266  002BCE  D7FA               	goto	i2l1057
  7267  002BD0                     i2u198_40:
  7268  002BD0  90D8               	bcf	status,0,c
  7269  002BD2  3605               	rlcf	i2___lwdiv@quotient,f,c
  7270  002BD4  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7271  002BD6  5003               	movf	i2___lwdiv@divisor,w,c
  7272  002BD8  5C01               	subwf	i2___lwdiv@dividend,w,c
  7273  002BDA  5004               	movf	i2___lwdiv@divisor+1,w,c
  7274  002BDC  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7275  002BDE  A0D8               	btfss	status,0,c
  7276  002BE0  D005               	goto	i2l1060
  7277  002BE2  5003               	movf	i2___lwdiv@divisor,w,c
  7278  002BE4  5E01               	subwf	i2___lwdiv@dividend,f,c
  7279  002BE6  5004               	movf	i2___lwdiv@divisor+1,w,c
  7280  002BE8  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7281  002BEA  8005               	bsf	i2___lwdiv@quotient,0,c
  7282  002BEC                     i2l1060:
  7283  002BEC  90D8               	bcf	status,0,c
  7284  002BEE  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7285  002BF0  3203               	rrcf	i2___lwdiv@divisor,f,c
  7286  002BF2  2E07               	decfsz	i2___lwdiv@counter,f,c
  7287  002BF4  D7ED               	goto	i2u198_40
  7288  002BF6                     i2l1061:
  7289  002BF6  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7290  002BFA  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7291  002BFE  0012               	return		;funcret
  7292  002C00                     __end_ofi2___lwdiv:
  7293                           	opt stack 0
  7294                           pclatu	equ	0xFFB
  7295                           pclath	equ	0xFFA
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           intcon3	equ	0xFF0
  7304                           indf0	equ	0xFEF
  7305                           postinc0	equ	0xFEE
  7306                           fsr0h	equ	0xFEA
  7307                           fsr0l	equ	0xFE9
  7308                           wreg	equ	0xFE8
  7309                           indf1	equ	0xFE7
  7310                           postinc1	equ	0xFE6
  7311                           postdec1	equ	0xFE5
  7312                           fsr1h	equ	0xFE2
  7313                           fsr1l	equ	0xFE1
  7314                           indf2	equ	0xFDF
  7315                           postinc2	equ	0xFDE
  7316                           postdec2	equ	0xFDD
  7317                           fsr2h	equ	0xFDA
  7318                           fsr2l	equ	0xFD9
  7319                           status	equ	0xFD8
  7320                           
  7321 ;; *************** function i2_initLCD *****************
  7322 ;; Defined at:
  7323 ;;		line 60 in file "lcd.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;		None
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;		None
  7328 ;; Return value:  Size  Location     Type
  7329 ;;                  1    wreg      void 
  7330 ;; Registers used:
  7331 ;;		wreg, status,2, status,0, cstack
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;Total ram usage:        1 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:    2
  7344 ;; This function calls:
  7345 ;;		i2_lcdInst
  7346 ;; This function is called by:
  7347 ;;		_interruptHandler
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           	psect	text22
  7352  002C4C                     __ptext22:
  7353                           	opt stack 0
  7354  002C4C                     i2_initLCD:
  7355                           	opt stack 24
  7356                           
  7357                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  7358                           
  7359                           ;incstack = 0
  7360  002C4C  0EC3               	movlw	195
  7361  002C4E  6E04               	movwf	??i2_initLCD& (0+255),c
  7362  002C50  0ECD               	movlw	205
  7363  002C52                     i2u447_47:
  7364  002C52  2EE8               	decfsz	wreg,f,c
  7365  002C54  D7FE               	bra	i2u447_47
  7366  002C56  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  7367  002C58  D7FC               	bra	i2u447_47
  7368  002C5A  F000               	nop	
  7369                           
  7370                           ;lcd.c: 69: lcdInst(0b00110011);
  7371  002C5C  0E33               	movlw	51
  7372  002C5E  ECAA  F017         	call	i2_lcdInst
  7373                           
  7374                           ;lcd.c: 70: lcdInst(0b00110010);
  7375  002C62  0E32               	movlw	50
  7376  002C64  ECAA  F017         	call	i2_lcdInst
  7377                           
  7378                           ;lcd.c: 71: lcdInst(0b00101000);
  7379  002C68  0E28               	movlw	40
  7380  002C6A  ECAA  F017         	call	i2_lcdInst
  7381                           
  7382                           ;lcd.c: 72: lcdInst(0b00001111);
  7383  002C6E  0E0F               	movlw	15
  7384  002C70  ECAA  F017         	call	i2_lcdInst
  7385                           
  7386                           ;lcd.c: 73: lcdInst(0b00000110);
  7387  002C74  0E06               	movlw	6
  7388  002C76  ECAA  F017         	call	i2_lcdInst
  7389                           
  7390                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7391  002C7A  0E01               	movlw	1
  7392  002C7C  ECAA  F017         	call	i2_lcdInst
  7393  002C80  0EC3               	movlw	195
  7394  002C82  6E04               	movwf	??i2_initLCD& (0+255),c
  7395  002C84  0ECD               	movlw	205
  7396  002C86                     i2u448_47:
  7397  002C86  2EE8               	decfsz	wreg,f,c
  7398  002C88  D7FE               	bra	i2u448_47
  7399  002C8A  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  7400  002C8C  D7FC               	bra	i2u448_47
  7401  002C8E  F000               	nop	
  7402                           
  7403                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  7404  002C90  0E0F               	movlw	15
  7405  002C92  ECAA  F017         	call	i2_lcdInst
  7406  002C96  0012               	return		;funcret
  7407  002C98                     __end_ofi2_initLCD:
  7408                           	opt stack 0
  7409                           pclatu	equ	0xFFB
  7410                           pclath	equ	0xFFA
  7411                           tblptru	equ	0xFF8
  7412                           tblptrh	equ	0xFF7
  7413                           tblptrl	equ	0xFF6
  7414                           tablat	equ	0xFF5
  7415                           prodh	equ	0xFF4
  7416                           prodl	equ	0xFF3
  7417                           intcon	equ	0xFF2
  7418                           intcon3	equ	0xFF0
  7419                           indf0	equ	0xFEF
  7420                           postinc0	equ	0xFEE
  7421                           fsr0h	equ	0xFEA
  7422                           fsr0l	equ	0xFE9
  7423                           wreg	equ	0xFE8
  7424                           indf1	equ	0xFE7
  7425                           postinc1	equ	0xFE6
  7426                           postdec1	equ	0xFE5
  7427                           fsr1h	equ	0xFE2
  7428                           fsr1l	equ	0xFE1
  7429                           indf2	equ	0xFDF
  7430                           postinc2	equ	0xFDE
  7431                           postdec2	equ	0xFDD
  7432                           fsr2h	equ	0xFDA
  7433                           fsr2l	equ	0xFD9
  7434                           status	equ	0xFD8
  7435                           
  7436 ;; *************** function i2_lcdInst *****************
  7437 ;; Defined at:
  7438 ;;		line 11 in file "lcd.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;  data            1    wreg     unsigned char 
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;  data            1    2[COMRAM] unsigned char 
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  1    wreg      void 
  7445 ;; Registers used:
  7446 ;;		wreg, status,2, status,0, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7455 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;Total ram usage:        1 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    1
  7459 ;; This function calls:
  7460 ;;		i2_lcdNibble
  7461 ;; This function is called by:
  7462 ;;		_interruptHandler
  7463 ;;		i2_initLCD
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           	psect	text23
  7468  002F54                     __ptext23:
  7469                           	opt stack 0
  7470  002F54                     i2_lcdInst:
  7471                           	opt stack 25
  7472                           
  7473                           ;incstack = 0
  7474                           ;i2lcdInst@data stored from wreg
  7475  002F54  6E03               	movwf	i2lcdInst@data,c
  7476                           
  7477                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  7478  002F56  948C               	bcf	3980,2,c	;volatile
  7479                           
  7480                           ;lcd.c: 20: lcdNibble(data);
  7481  002F58  5003               	movf	i2lcdInst@data,w,c
  7482  002F5A  ECE1  F014         	call	i2_lcdNibble
  7483                           
  7484                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7485  002F5E  0EC8               	movlw	200
  7486  002F60                     i2u449_47:
  7487  002F60  D000               	nop2	
  7488  002F62  2EE8               	decfsz	wreg,f,c
  7489  002F64  D7FD               	bra	i2u449_47
  7490  002F66  0012               	return		;funcret
  7491  002F68                     __end_ofi2_lcdInst:
  7492                           	opt stack 0
  7493                           pclatu	equ	0xFFB
  7494                           pclath	equ	0xFFA
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodh	equ	0xFF4
  7500                           prodl	equ	0xFF3
  7501                           intcon	equ	0xFF2
  7502                           intcon3	equ	0xFF0
  7503                           indf0	equ	0xFEF
  7504                           postinc0	equ	0xFEE
  7505                           fsr0h	equ	0xFEA
  7506                           fsr0l	equ	0xFE9
  7507                           wreg	equ	0xFE8
  7508                           indf1	equ	0xFE7
  7509                           postinc1	equ	0xFE6
  7510                           postdec1	equ	0xFE5
  7511                           fsr1h	equ	0xFE2
  7512                           fsr1l	equ	0xFE1
  7513                           indf2	equ	0xFDF
  7514                           postinc2	equ	0xFDE
  7515                           postdec2	equ	0xFDD
  7516                           fsr2h	equ	0xFDA
  7517                           fsr2l	equ	0xFD9
  7518                           status	equ	0xFD8
  7519                           
  7520 ;; *************** function i2_lcdNibble *****************
  7521 ;; Defined at:
  7522 ;;		line 37 in file "lcd.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;  data            1    wreg     unsigned char 
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  data            1    1[COMRAM] unsigned char 
  7527 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  1    wreg      void 
  7530 ;; Registers used:
  7531 ;;		wreg, status,2, status,0
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;Total ram usage:        2 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; This function calls:
  7544 ;;		Nothing
  7545 ;; This function is called by:
  7546 ;;		i2_lcdInst
  7547 ;;		i2_putch
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text24
  7552  0029C2                     __ptext24:
  7553                           	opt stack 0
  7554  0029C2                     i2_lcdNibble:
  7555                           	opt stack 25
  7556                           
  7557                           ;incstack = 0
  7558                           ;i2lcdNibble@data stored from wreg
  7559  0029C2  6E02               	movwf	i2lcdNibble@data,c
  7560                           
  7561                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  7562  0029C4  5002               	movf	i2lcdNibble@data,w,c
  7563  0029C6  0BF0               	andlw	240
  7564  0029C8  6E01               	movwf	i2lcdNibble@temp,c
  7565                           
  7566                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  7567  0029CA  508C               	movf	3980,w,c	;volatile
  7568  0029CC  0B0F               	andlw	15
  7569  0029CE  6E8C               	movwf	3980,c	;volatile
  7570                           
  7571                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  7572  0029D0  5001               	movf	i2lcdNibble@temp,w,c
  7573  0029D2  108C               	iorwf	3980,w,c	;volatile
  7574  0029D4  6E8C               	movwf	3980,c	;volatile
  7575                           
  7576                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7577  0029D6  0E00               	movlw	0
  7578  0029D8  BEF2               	btfsc	intcon,7,c	;volatile
  7579  0029DA  0E01               	movlw	1
  7580  0029DC  6E62               	movwf	_LCDinterruptState,c
  7581  0029DE  9EF2               	bcf	intcon,7,c	;volatile
  7582  0029E0  868C               	bsf	3980,3,c	;volatile
  7583  0029E2  0E53               	movlw	83
  7584  0029E4                     i2u450_47:
  7585  0029E4  2EE8               	decfsz	wreg,f,c
  7586  0029E6  D7FE               	bra	i2u450_47
  7587  0029E8  F000               	nop	
  7588  0029EA  968C               	bcf	3980,3,c	;volatile
  7589  0029EC  0EC8               	movlw	200
  7590  0029EE                     i2u451_47:
  7591  0029EE  D000               	nop2	
  7592  0029F0  2EE8               	decfsz	wreg,f,c
  7593  0029F2  D7FD               	bra	i2u451_47
  7594  0029F4  B062               	btfsc	_LCDinterruptState,0,c
  7595  0029F6  D002               	bra	i2u180_45
  7596  0029F8  9EF2               	bcf	intcon,7,c	;volatile
  7597  0029FA  D001               	bra	i2u180_46
  7598  0029FC                     i2u180_45:
  7599  0029FC  8EF2               	bsf	intcon,7,c	;volatile
  7600  0029FE                     i2u180_46:
  7601                           
  7602                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  7603  0029FE  3802               	swapf	i2lcdNibble@data,w,c
  7604  002A00  0BF0               	andlw	240
  7605  002A02  6E02               	movwf	i2lcdNibble@data,c
  7606                           
  7607                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  7608  002A04  5002               	movf	i2lcdNibble@data,w,c
  7609  002A06  0BF0               	andlw	240
  7610  002A08  6E01               	movwf	i2lcdNibble@temp,c
  7611                           
  7612                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  7613  002A0A  508C               	movf	3980,w,c	;volatile
  7614  002A0C  0B0F               	andlw	15
  7615  002A0E  6E8C               	movwf	3980,c	;volatile
  7616                           
  7617                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  7618  002A10  5001               	movf	i2lcdNibble@temp,w,c
  7619  002A12  108C               	iorwf	3980,w,c	;volatile
  7620  002A14  6E8C               	movwf	3980,c	;volatile
  7621                           
  7622                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7623  002A16  0E00               	movlw	0
  7624  002A18  BEF2               	btfsc	intcon,7,c	;volatile
  7625  002A1A  0E01               	movlw	1
  7626  002A1C  6E62               	movwf	_LCDinterruptState,c
  7627  002A1E  9EF2               	bcf	intcon,7,c	;volatile
  7628  002A20  868C               	bsf	3980,3,c	;volatile
  7629  002A22  0E53               	movlw	83
  7630  002A24                     i2u452_47:
  7631  002A24  2EE8               	decfsz	wreg,f,c
  7632  002A26  D7FE               	bra	i2u452_47
  7633  002A28  F000               	nop	
  7634  002A2A  968C               	bcf	3980,3,c	;volatile
  7635  002A2C  0EC8               	movlw	200
  7636  002A2E                     i2u453_47:
  7637  002A2E  D000               	nop2	
  7638  002A30  2EE8               	decfsz	wreg,f,c
  7639  002A32  D7FD               	bra	i2u453_47
  7640  002A34  B062               	btfsc	_LCDinterruptState,0,c
  7641  002A36  D002               	bra	i2u181_45
  7642  002A38  9EF2               	bcf	intcon,7,c	;volatile
  7643  002A3A  D001               	bra	i2u181_46
  7644  002A3C                     i2u181_45:
  7645  002A3C  8EF2               	bsf	intcon,7,c	;volatile
  7646  002A3E                     i2u181_46:
  7647  002A3E  0012               	return		;funcret
  7648  002A40                     __end_ofi2_lcdNibble:
  7649                           	opt stack 0
  7650                           pclatu	equ	0xFFB
  7651                           pclath	equ	0xFFA
  7652                           tblptru	equ	0xFF8
  7653                           tblptrh	equ	0xFF7
  7654                           tblptrl	equ	0xFF6
  7655                           tablat	equ	0xFF5
  7656                           prodh	equ	0xFF4
  7657                           prodl	equ	0xFF3
  7658                           intcon	equ	0xFF2
  7659                           intcon3	equ	0xFF0
  7660                           indf0	equ	0xFEF
  7661                           postinc0	equ	0xFEE
  7662                           fsr0h	equ	0xFEA
  7663                           fsr0l	equ	0xFE9
  7664                           wreg	equ	0xFE8
  7665                           indf1	equ	0xFE7
  7666                           postinc1	equ	0xFE6
  7667                           postdec1	equ	0xFE5
  7668                           fsr1h	equ	0xFE2
  7669                           fsr1l	equ	0xFE1
  7670                           indf2	equ	0xFDF
  7671                           postinc2	equ	0xFDE
  7672                           postdec2	equ	0xFDD
  7673                           fsr2h	equ	0xFDA
  7674                           fsr2l	equ	0xFD9
  7675                           status	equ	0xFD8
  7676                           
  7677 ;; *************** function _strncmp *****************
  7678 ;; Defined at:
  7679 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  s1              2    6[COMRAM] PTR const unsigned char 
  7682 ;;		 -> current_set(5), 
  7683 ;;  s2              2    8[COMRAM] PTR const unsigned char 
  7684 ;;		 -> strs(100), 
  7685 ;;  len             2   10[COMRAM] unsigned int 
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;		None
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  2    6[COMRAM] int 
  7690 ;; Registers used:
  7691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7697 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;Total ram usage:        9 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; This function calls:
  7704 ;;		Nothing
  7705 ;; This function is called by:
  7706 ;;		_interruptHandler
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           	psect	text25
  7711  002836                     __ptext25:
  7712                           	opt stack 0
  7713  002836                     _strncmp:
  7714                           	opt stack 26
  7715                           
  7716                           ;incstack = 0
  7717  002836  D035               	goto	i2l1223
  7718  002838                     i2l3350:
  7719  002838  C007  FFD9         	movff	strncmp@s1,fsr2l
  7720  00283C  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7721  002840  50DF               	movf	indf2,w,c
  7722  002842  B4D8               	btfsc	status,2,c
  7723  002844  D010               	goto	i2u225_40
  7724  002846  C007  FFD9         	movff	strncmp@s1,fsr2l
  7725  00284A  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7726  00284E  50DF               	movf	indf2,w,c
  7727  002850  6E0D               	movwf	??_strncmp& (0+255),c
  7728  002852  C009  FFF6         	movff	strncmp@s2,tblptrl
  7729  002856  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  7730  00285A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7731  00285A  6AF8               	clrf	tblptru,c
  7732  00285C                     	endif
  7733  00285C                     	if	0	;tblptru may be non-zero
  7734  00285C                     	endif
  7735  00285C  0008               	tblrd		*
  7736  00285E  50F5               	movf	tablat,w,c
  7737  002860  180D               	xorwf	??_strncmp,w,c
  7738  002862  B4D8               	btfsc	status,2,c
  7739  002864  D01A               	goto	i2l1225
  7740  002866                     i2u225_40:
  7741  002866  C009  FFF6         	movff	strncmp@s2,tblptrl
  7742  00286A  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  7743  00286E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7744  00286E  6AF8               	clrf	tblptru,c
  7745  002870                     	endif
  7746  002870                     	if	0	;tblptru may be non-zero
  7747  002870                     	endif
  7748  002870  0008               	tblrd		*
  7749  002872  50F5               	movf	tablat,w,c
  7750  002874  6E0D               	movwf	??_strncmp& (0+255),c
  7751  002876  6A0E               	clrf	(??_strncmp+1)& (0+255),c
  7752  002878  1E0D               	comf	??_strncmp,f,c
  7753  00287A  1E0E               	comf	??_strncmp+1,f,c
  7754  00287C  4A0D               	infsnz	??_strncmp,f,c
  7755  00287E  2A0E               	incf	??_strncmp+1,f,c
  7756  002880  C007  FFD9         	movff	strncmp@s1,fsr2l
  7757  002884  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  7758  002888  50DF               	movf	indf2,w,c
  7759  00288A  6E0F               	movwf	(??_strncmp+2)& (0+255),c
  7760  00288C  500F               	movf	??_strncmp+2,w,c
  7761  00288E  240D               	addwf	??_strncmp,w,c
  7762  002890  6E07               	movwf	?_strncmp,c
  7763  002892  0E00               	movlw	0
  7764  002894  200E               	addwfc	??_strncmp+1,w,c
  7765  002896  6E08               	movwf	?_strncmp+1,c
  7766  002898  0012               	return	
  7767  00289A                     i2l1225:
  7768  00289A  4A07               	infsnz	strncmp@s1,f,c
  7769  00289C  2A08               	incf	strncmp@s1+1,f,c
  7770  00289E  4A09               	infsnz	strncmp@s2,f,c
  7771  0028A0  2A0A               	incf	strncmp@s2+1,f,c
  7772  0028A2                     i2l1223:
  7773  0028A2  060B               	decf	strncmp@len,f,c
  7774  0028A4  A0D8               	btfss	status,0,c
  7775  0028A6  060C               	decf	strncmp@len+1,f,c
  7776  0028A8  280B               	incf	strncmp@len,w,c
  7777  0028AA  E1C6               	bnz	i2l3350
  7778  0028AC  280C               	incf	strncmp@len+1,w,c
  7779  0028AE  A4D8               	btfss	status,2,c
  7780  0028B0  D7C3               	goto	i2l1224
  7781  0028B2  0E00               	movlw	0
  7782  0028B4  6E08               	movwf	?_strncmp+1,c
  7783  0028B6  0E00               	movlw	0
  7784  0028B8  6E07               	movwf	?_strncmp,c
  7785  0028BA  0012               	return	
  7786  0028BC                     __end_of_strncmp:
  7787                           	opt stack 0
  7788                           pclatu	equ	0xFFB
  7789                           pclath	equ	0xFFA
  7790                           tblptru	equ	0xFF8
  7791                           tblptrh	equ	0xFF7
  7792                           tblptrl	equ	0xFF6
  7793                           tablat	equ	0xFF5
  7794                           prodh	equ	0xFF4
  7795                           prodl	equ	0xFF3
  7796                           intcon	equ	0xFF2
  7797                           intcon3	equ	0xFF0
  7798                           indf0	equ	0xFEF
  7799                           postinc0	equ	0xFEE
  7800                           fsr0h	equ	0xFEA
  7801                           fsr0l	equ	0xFE9
  7802                           wreg	equ	0xFE8
  7803                           indf1	equ	0xFE7
  7804                           postinc1	equ	0xFE6
  7805                           postdec1	equ	0xFE5
  7806                           fsr1h	equ	0xFE2
  7807                           fsr1l	equ	0xFE1
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815 ;; *************** function _strcpy *****************
  7816 ;; Defined at:
  7817 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  to              2    6[COMRAM] PTR unsigned char 
  7820 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
  7821 ;;  from            2    8[COMRAM] PTR const unsigned char 
  7822 ;;		 -> STR_54(1), STR_52(1), STR_49(1), STR_46(2), 
  7823 ;;		 -> STR_45(2), STR_44(2), STR_43(2), current_set(5), 
  7824 ;; Auto vars:     Size  Location     Type
  7825 ;;  cp              2   10[COMRAM] PTR unsigned char 
  7826 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;                  2    6[COMRAM] PTR unsigned char 
  7829 ;; Registers used:
  7830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7831 ;; Tracked objects:
  7832 ;;		On entry : 0/0
  7833 ;;		On exit  : 0/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;Total ram usage:        6 bytes
  7841 ;; Hardware stack levels used:    1
  7842 ;; This function calls:
  7843 ;;		Nothing
  7844 ;; This function is called by:
  7845 ;;		_interruptHandler
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           	psect	text26
  7850  002D74                     __ptext26:
  7851                           	opt stack 0
  7852  002D74                     _strcpy:
  7853                           	opt stack 26
  7854                           
  7855                           ;incstack = 0
  7856  002D74  C007  F00B         	movff	strcpy@to,strcpy@cp
  7857  002D78  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
  7858  002D7C  D004               	goto	i2l1217
  7859  002D7E  4A0B               	infsnz	strcpy@cp,f,c
  7860  002D80  2A0C               	incf	strcpy@cp+1,f,c
  7861  002D82  4A09               	infsnz	strcpy@from,f,c
  7862  002D84  2A0A               	incf	strcpy@from+1,f,c
  7863  002D86                     i2l1217:
  7864  002D86  C009  FFF6         	movff	strcpy@from,tblptrl
  7865  002D8A  C00A  FFF7         	movff	strcpy@from+1,tblptrh
  7866  002D8E  0E00               	movlw	low (__mediumconst shr (0+16))
  7867  002D90  6EF8               	movwf	tblptru,c
  7868  002D92  C00B  FFD9         	movff	strcpy@cp,fsr2l
  7869  002D96  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
  7870  002D9A  0E0F               	movlw	(high __ramtop+-1)
  7871  002D9C  64F7               	cpfsgt	tblptrh,c
  7872  002D9E  D003               	bra	i2u220_47
  7873  002DA0  0008               	tblrd		*
  7874  002DA2  50F5               	movf	tablat,w,c
  7875  002DA4  D005               	bra	i2u220_40
  7876  002DA6                     i2u220_47:
  7877  002DA6  CFF6 FFE9          	movff	tblptrl,fsr0l
  7878  002DAA  CFF7 FFEA          	movff	tblptrh,fsr0h
  7879  002DAE  50EF               	movf	indf0,w,c
  7880  002DB0                     i2u220_40:
  7881  002DB0  6EDF               	movwf	indf2,c
  7882  002DB2  50DF               	movf	indf2,w,c
  7883  002DB4  B4D8               	btfsc	status,2,c
  7884  002DB6  0012               	return	
  7885  002DB8  D7E2               	goto	i2l1218
  7886  002DBA                     __end_of_strcpy:
  7887                           	opt stack 0
  7888                           pclatu	equ	0xFFB
  7889                           pclath	equ	0xFFA
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           intcon	equ	0xFF2
  7897                           intcon3	equ	0xFF0
  7898                           indf0	equ	0xFEF
  7899                           postinc0	equ	0xFEE
  7900                           fsr0h	equ	0xFEA
  7901                           fsr0l	equ	0xFE9
  7902                           wreg	equ	0xFE8
  7903                           indf1	equ	0xFE7
  7904                           postinc1	equ	0xFE6
  7905                           postdec1	equ	0xFE5
  7906                           fsr1h	equ	0xFE2
  7907                           fsr1l	equ	0xFE1
  7908                           indf2	equ	0xFDF
  7909                           postinc2	equ	0xFDE
  7910                           postdec2	equ	0xFDD
  7911                           fsr2h	equ	0xFDA
  7912                           fsr2l	equ	0xFD9
  7913                           status	equ	0xFD8
  7914                           
  7915 ;; *************** function _strcat *****************
  7916 ;; Defined at:
  7917 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;  to              2    0[COMRAM] PTR unsigned char 
  7920 ;;		 -> current_set(5), 
  7921 ;;  from            2    2[COMRAM] PTR const unsigned char 
  7922 ;;		 -> temp_set(5), 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  cp              2    4[COMRAM] PTR unsigned char 
  7925 ;;		 -> current_set(5), 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  2    0[COMRAM] PTR unsigned char 
  7928 ;; Registers used:
  7929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;Total ram usage:        6 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; This function calls:
  7942 ;;		Nothing
  7943 ;; This function is called by:
  7944 ;;		_interruptHandler
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           	psect	text27
  7949  002E40                     __ptext27:
  7950                           	opt stack 0
  7951  002E40                     _strcat:
  7952                           	opt stack 26
  7953                           
  7954                           ;incstack = 0
  7955  002E40  C001  F005         	movff	strcat@to,strcat@cp
  7956  002E44  C002  F006         	movff	strcat@to+1,strcat@cp+1
  7957  002E48  D002               	goto	i2l1200
  7958  002E4A  4A05               	infsnz	strcat@cp,f,c
  7959  002E4C  2A06               	incf	strcat@cp+1,f,c
  7960  002E4E                     i2l1200:
  7961  002E4E  C005  FFD9         	movff	strcat@cp,fsr2l
  7962  002E52  C006  FFDA         	movff	strcat@cp+1,fsr2h
  7963  002E56  50DF               	movf	indf2,w,c
  7964  002E58  B4D8               	btfsc	status,2,c
  7965  002E5A  D005               	goto	i2l1203
  7966  002E5C  D7F6               	goto	i2l1201
  7967  002E5E  4A05               	infsnz	strcat@cp,f,c
  7968  002E60  2A06               	incf	strcat@cp+1,f,c
  7969  002E62  4A03               	infsnz	strcat@from,f,c
  7970  002E64  2A04               	incf	strcat@from+1,f,c
  7971  002E66                     i2l1203:
  7972  002E66  C003  FFD9         	movff	strcat@from,fsr2l
  7973  002E6A  C004  FFDA         	movff	strcat@from+1,fsr2h
  7974  002E6E  C005  FFE1         	movff	strcat@cp,fsr1l
  7975  002E72  C006  FFE2         	movff	strcat@cp+1,fsr1h
  7976  002E76  CFDF FFE7          	movff	indf2,indf1
  7977  002E7A  50E7               	movf	indf1,w,c
  7978  002E7C  B4D8               	btfsc	status,2,c
  7979  002E7E  0012               	return	
  7980  002E80  D7EE               	goto	i2l1204
  7981  002E82                     __end_of_strcat:
  7982                           	opt stack 0
  7983                           pclatu	equ	0xFFB
  7984                           pclath	equ	0xFFA
  7985                           tblptru	equ	0xFF8
  7986                           tblptrh	equ	0xFF7
  7987                           tblptrl	equ	0xFF6
  7988                           tablat	equ	0xFF5
  7989                           prodh	equ	0xFF4
  7990                           prodl	equ	0xFF3
  7991                           intcon	equ	0xFF2
  7992                           intcon3	equ	0xFF0
  7993                           indf0	equ	0xFEF
  7994                           postinc0	equ	0xFEE
  7995                           fsr0h	equ	0xFEA
  7996                           fsr0l	equ	0xFE9
  7997                           wreg	equ	0xFE8
  7998                           indf1	equ	0xFE7
  7999                           postinc1	equ	0xFE6
  8000                           postdec1	equ	0xFE5
  8001                           fsr1h	equ	0xFE2
  8002                           fsr1l	equ	0xFE1
  8003                           indf2	equ	0xFDF
  8004                           postinc2	equ	0xFDE
  8005                           postdec2	equ	0xFDD
  8006                           fsr2h	equ	0xFDA
  8007                           fsr2l	equ	0xFD9
  8008                           status	equ	0xFD8
  8009                           
  8010 ;; *************** function _is_valid *****************
  8011 ;; Defined at:
  8012 ;;		line 12 in file "keypad.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;		None
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;		None
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  2  121[None  ] int 
  8019 ;; Registers used:
  8020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8028 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8029 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8030 ;;Total ram usage:        2 bytes
  8031 ;; Hardware stack levels used:    1
  8032 ;; Hardware stack levels required when called:    1
  8033 ;; This function calls:
  8034 ;;		_strcmp
  8035 ;;		i2___wmul
  8036 ;; This function is called by:
  8037 ;;		_interruptHandler
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text28
  8042  000012                     __ptext28:
  8043                           	opt stack 0
  8044  000012                     _is_valid:
  8045                           	opt stack 25
  8046                           
  8047                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
  8048                           
  8049                           ;incstack = 0
  8050  000012  0E63               	movlw	low _current_set2
  8051  000014  6E01               	movwf	strcmp@s1,c
  8052  000016  0E00               	movlw	high _current_set2
  8053  000018  6E02               	movwf	strcmp@s1+1,c
  8054  00001A  0EFA               	movlw	low STR_43
  8055  00001C  6E03               	movwf	strcmp@s2,c
  8056  00001E  0EFF               	movlw	high STR_43
  8057  000020  6E04               	movwf	strcmp@s2+1,c
  8058  000022  EC71  F016         	call	_strcmp	;wreg free
  8059  000026  5001               	movf	?_strcmp,w,c
  8060  000028  1002               	iorwf	?_strcmp+1,w,c
  8061  00002A  A4D8               	btfss	status,2,c
  8062  00002C  D023               	goto	i2l556
  8063                           
  8064                           ;keypad.c: 17: B=1*number;
  8065  00002E  C068  F056         	movff	_number,_B
  8066  000032  C069  F057         	movff	_number+1,_B+1
  8067                           
  8068                           ;keypad.c: 18: total_number = 1*number;
  8069  000036  C068  F0D3         	movff	_number,_total_number
  8070  00003A  C069  F0D4         	movff	_number+1,_total_number+1
  8071                           
  8072                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
  8073  00003E  90D8               	bcf	status,0,c
  8074  000040  3458               	rlcf	_counter_step,w,c
  8075  000042  6ED9               	movwf	fsr2l,c
  8076  000044  3459               	rlcf	_counter_step+1,w,c
  8077  000046  6EDA               	movwf	fsr2h,c
  8078  000048  0E36               	movlw	low _compartment_number
  8079  00004A  26D9               	addwf	fsr2l,f,c
  8080  00004C  0E00               	movlw	high _compartment_number
  8081  00004E  22DA               	addwfc	fsr2h,f,c
  8082  000050  CFDE F007          	movff	postinc2,??_is_valid
  8083  000054  CFDD F008          	movff	postdec2,??_is_valid+1
  8084  000058  90D8               	bcf	status,0,c
  8085  00005A  3607               	rlcf	??_is_valid,f,c
  8086  00005C  3608               	rlcf	??_is_valid+1,f,c
  8087  00005E  0EA0               	movlw	low _B_array
  8088  000060  2407               	addwf	??_is_valid,w,c
  8089  000062  6ED9               	movwf	fsr2l,c
  8090  000064  0E00               	movlw	high _B_array
  8091  000066  2008               	addwfc	??_is_valid+1,w,c
  8092  000068  6EDA               	movwf	fsr2h,c
  8093  00006A  C056  FFDE         	movff	_B,postinc2
  8094  00006E  C057  FFDD         	movff	_B+1,postdec2
  8095                           
  8096                           ;keypad.c: 22: }
  8097  000072  0012               	return	
  8098  000074                     i2l556:
  8099                           
  8100                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
  8101  000074  0E63               	movlw	low _current_set2
  8102  000076  6E01               	movwf	strcmp@s1,c
  8103  000078  0E00               	movlw	high _current_set2
  8104  00007A  6E02               	movwf	strcmp@s1+1,c
  8105  00007C  0ED5               	movlw	low (STR_65+2)
  8106  00007E  6E03               	movwf	strcmp@s2,c
  8107  000080  0EFF               	movlw	high (STR_65+2)
  8108  000082  6E04               	movwf	strcmp@s2+1,c
  8109  000084  EC71  F016         	call	_strcmp	;wreg free
  8110  000088  5001               	movf	?_strcmp,w,c
  8111  00008A  1002               	iorwf	?_strcmp+1,w,c
  8112  00008C  A4D8               	btfss	status,2,c
  8113  00008E  D023               	goto	i2l558
  8114                           
  8115                           ;keypad.c: 25: N=1*number;
  8116  000090  C068  F054         	movff	_number,_N
  8117  000094  C069  F055         	movff	_number+1,_N+1
  8118                           
  8119                           ;keypad.c: 26: total_number = 1*number;
  8120  000098  C068  F0D3         	movff	_number,_total_number
  8121  00009C  C069  F0D4         	movff	_number+1,_total_number+1
  8122                           
  8123                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
  8124  0000A0  90D8               	bcf	status,0,c
  8125  0000A2  3458               	rlcf	_counter_step,w,c
  8126  0000A4  6ED9               	movwf	fsr2l,c
  8127  0000A6  3459               	rlcf	_counter_step+1,w,c
  8128  0000A8  6EDA               	movwf	fsr2h,c
  8129  0000AA  0E36               	movlw	low _compartment_number
  8130  0000AC  26D9               	addwf	fsr2l,f,c
  8131  0000AE  0E00               	movlw	high _compartment_number
  8132  0000B0  22DA               	addwfc	fsr2h,f,c
  8133  0000B2  CFDE F007          	movff	postinc2,??_is_valid
  8134  0000B6  CFDD F008          	movff	postdec2,??_is_valid+1
  8135  0000BA  90D8               	bcf	status,0,c
  8136  0000BC  3607               	rlcf	??_is_valid,f,c
  8137  0000BE  3608               	rlcf	??_is_valid+1,f,c
  8138  0000C0  0E90               	movlw	low _N_array
  8139  0000C2  2407               	addwf	??_is_valid,w,c
  8140  0000C4  6ED9               	movwf	fsr2l,c
  8141  0000C6  0E00               	movlw	high _N_array
  8142  0000C8  2008               	addwfc	??_is_valid+1,w,c
  8143  0000CA  6EDA               	movwf	fsr2h,c
  8144  0000CC  C054  FFDE         	movff	_N,postinc2
  8145  0000D0  C055  FFDD         	movff	_N+1,postdec2
  8146                           
  8147                           ;keypad.c: 28: }
  8148  0000D4  0012               	return	
  8149  0000D6                     i2l558:
  8150                           
  8151                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
  8152  0000D6  0E63               	movlw	low _current_set2
  8153  0000D8  6E01               	movwf	strcmp@s1,c
  8154  0000DA  0E00               	movlw	high _current_set2
  8155  0000DC  6E02               	movwf	strcmp@s1+1,c
  8156  0000DE  0EF3               	movlw	low (STR_18+1)
  8157  0000E0  6E03               	movwf	strcmp@s2,c
  8158  0000E2  0EFF               	movlw	high (STR_18+1)
  8159  0000E4  6E04               	movwf	strcmp@s2+1,c
  8160  0000E6  EC71  F016         	call	_strcmp	;wreg free
  8161  0000EA  5001               	movf	?_strcmp,w,c
  8162  0000EC  1002               	iorwf	?_strcmp+1,w,c
  8163  0000EE  A4D8               	btfss	status,2,c
  8164  0000F0  D023               	goto	i2l560
  8165                           
  8166                           ;keypad.c: 30: S=1*number;
  8167  0000F2  C068  F052         	movff	_number,_S
  8168  0000F6  C069  F053         	movff	_number+1,_S+1
  8169                           
  8170                           ;keypad.c: 31: total_number = 1*number;
  8171  0000FA  C068  F0D3         	movff	_number,_total_number
  8172  0000FE  C069  F0D4         	movff	_number+1,_total_number+1
  8173                           
  8174                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
  8175  000102  90D8               	bcf	status,0,c
  8176  000104  3458               	rlcf	_counter_step,w,c
  8177  000106  6ED9               	movwf	fsr2l,c
  8178  000108  3459               	rlcf	_counter_step+1,w,c
  8179  00010A  6EDA               	movwf	fsr2h,c
  8180  00010C  0E36               	movlw	low _compartment_number
  8181  00010E  26D9               	addwf	fsr2l,f,c
  8182  000110  0E00               	movlw	high _compartment_number
  8183  000112  22DA               	addwfc	fsr2h,f,c
  8184  000114  CFDE F007          	movff	postinc2,??_is_valid
  8185  000118  CFDD F008          	movff	postdec2,??_is_valid+1
  8186  00011C  90D8               	bcf	status,0,c
  8187  00011E  3607               	rlcf	??_is_valid,f,c
  8188  000120  3608               	rlcf	??_is_valid+1,f,c
  8189  000122  0E00               	movlw	low _S_array
  8190  000124  2407               	addwf	??_is_valid,w,c
  8191  000126  6ED9               	movwf	fsr2l,c
  8192  000128  0E01               	movlw	high _S_array
  8193  00012A  2008               	addwfc	??_is_valid+1,w,c
  8194  00012C  6EDA               	movwf	fsr2h,c
  8195  00012E  C052  FFDE         	movff	_S,postinc2
  8196  000132  C053  FFDD         	movff	_S+1,postdec2
  8197                           
  8198                           ;keypad.c: 33: }
  8199  000136  0012               	return	
  8200  000138                     i2l560:
  8201                           
  8202                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
  8203  000138  0E63               	movlw	low _current_set2
  8204  00013A  6E01               	movwf	strcmp@s1,c
  8205  00013C  0E00               	movlw	high _current_set2
  8206  00013E  6E02               	movwf	strcmp@s1+1,c
  8207  000140  0EDD               	movlw	low (STR_67+2)
  8208  000142  6E03               	movwf	strcmp@s2,c
  8209  000144  0EFF               	movlw	high (STR_67+2)
  8210  000146  6E04               	movwf	strcmp@s2+1,c
  8211  000148  EC71  F016         	call	_strcmp	;wreg free
  8212  00014C  5001               	movf	?_strcmp,w,c
  8213  00014E  1002               	iorwf	?_strcmp+1,w,c
  8214  000150  A4D8               	btfss	status,2,c
  8215  000152  D023               	goto	i2l562
  8216                           
  8217                           ;keypad.c: 35: W=1*number;
  8218  000154  C068  F050         	movff	_number,_W
  8219  000158  C069  F051         	movff	_number+1,_W+1
  8220                           
  8221                           ;keypad.c: 36: total_number = 1*number;
  8222  00015C  C068  F0D3         	movff	_number,_total_number
  8223  000160  C069  F0D4         	movff	_number+1,_total_number+1
  8224                           
  8225                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
  8226  000164  90D8               	bcf	status,0,c
  8227  000166  3458               	rlcf	_counter_step,w,c
  8228  000168  6ED9               	movwf	fsr2l,c
  8229  00016A  3459               	rlcf	_counter_step+1,w,c
  8230  00016C  6EDA               	movwf	fsr2h,c
  8231  00016E  0E36               	movlw	low _compartment_number
  8232  000170  26D9               	addwf	fsr2l,f,c
  8233  000172  0E00               	movlw	high _compartment_number
  8234  000174  22DA               	addwfc	fsr2h,f,c
  8235  000176  CFDE F007          	movff	postinc2,??_is_valid
  8236  00017A  CFDD F008          	movff	postdec2,??_is_valid+1
  8237  00017E  90D8               	bcf	status,0,c
  8238  000180  3607               	rlcf	??_is_valid,f,c
  8239  000182  3608               	rlcf	??_is_valid+1,f,c
  8240  000184  0E80               	movlw	low _W_array
  8241  000186  2407               	addwf	??_is_valid,w,c
  8242  000188  6ED9               	movwf	fsr2l,c
  8243  00018A  0E00               	movlw	high _W_array
  8244  00018C  2008               	addwfc	??_is_valid+1,w,c
  8245  00018E  6EDA               	movwf	fsr2h,c
  8246  000190  C050  FFDE         	movff	_W,postinc2
  8247  000194  C051  FFDD         	movff	_W+1,postdec2
  8248                           
  8249                           ;keypad.c: 38: }
  8250  000198  0012               	return	
  8251  00019A                     i2l562:
  8252                           
  8253                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
  8254  00019A  0E63               	movlw	low _current_set2
  8255  00019C  6E01               	movwf	strcmp@s1,c
  8256  00019E  0E00               	movlw	high _current_set2
  8257  0001A0  6E02               	movwf	strcmp@s1+1,c
  8258  0001A2  0ED4               	movlw	low (STR_65+1)
  8259  0001A4  6E03               	movwf	strcmp@s2,c
  8260  0001A6  0EFF               	movlw	high (STR_65+1)
  8261  0001A8  6E04               	movwf	strcmp@s2+1,c
  8262  0001AA  EC71  F016         	call	_strcmp	;wreg free
  8263  0001AE  5001               	movf	?_strcmp,w,c
  8264  0001B0  1002               	iorwf	?_strcmp+1,w,c
  8265  0001B2  A4D8               	btfss	status,2,c
  8266  0001B4  D043               	goto	i2l564
  8267                           
  8268                           ;keypad.c: 40: B = 1*number;
  8269  0001B6  C068  F056         	movff	_number,_B
  8270  0001BA  C069  F057         	movff	_number+1,_B+1
  8271                           
  8272                           ;keypad.c: 42: N = 1*number;
  8273  0001BE  C068  F054         	movff	_number,_N
  8274  0001C2  C069  F055         	movff	_number+1,_N+1
  8275                           
  8276                           ;keypad.c: 43: total_number = 2*number;
  8277  0001C6  90D8               	bcf	status,0,c
  8278  0001C8  3468               	rlcf	_number,w,c
  8279  0001CA  0100               	movlb	0	; () banked
  8280  0001CC  6FD3               	movwf	_total_number& (0+255),b
  8281  0001CE  3469               	rlcf	_number+1,w,c
  8282  0001D0  6FD4               	movwf	(_total_number+1)& (0+255),b
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
  8286  0001D2  90D8               	bcf	status,0,c
  8287  0001D4  3458               	rlcf	_counter_step,w,c
  8288  0001D6  6ED9               	movwf	fsr2l,c
  8289  0001D8  3459               	rlcf	_counter_step+1,w,c
  8290  0001DA  6EDA               	movwf	fsr2h,c
  8291  0001DC  0E36               	movlw	low _compartment_number
  8292  0001DE  26D9               	addwf	fsr2l,f,c
  8293  0001E0  0E00               	movlw	high _compartment_number
  8294  0001E2  22DA               	addwfc	fsr2h,f,c
  8295  0001E4  CFDE F007          	movff	postinc2,??_is_valid
  8296  0001E8  CFDD F008          	movff	postdec2,??_is_valid+1
  8297  0001EC  90D8               	bcf	status,0,c
  8298  0001EE  3607               	rlcf	??_is_valid,f,c
  8299  0001F0  3608               	rlcf	??_is_valid+1,f,c
  8300  0001F2  0EA0               	movlw	low _B_array
  8301  0001F4  2407               	addwf	??_is_valid,w,c
  8302  0001F6  6ED9               	movwf	fsr2l,c
  8303  0001F8  0E00               	movlw	high _B_array
  8304  0001FA  2008               	addwfc	??_is_valid+1,w,c
  8305  0001FC  6EDA               	movwf	fsr2h,c
  8306  0001FE  C056  FFDE         	movff	_B,postinc2
  8307  000202  C057  FFDD         	movff	_B+1,postdec2
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
  8311  000206  90D8               	bcf	status,0,c
  8312  000208  3458               	rlcf	_counter_step,w,c
  8313  00020A  6ED9               	movwf	fsr2l,c
  8314  00020C  3459               	rlcf	_counter_step+1,w,c
  8315  00020E  6EDA               	movwf	fsr2h,c
  8316  000210  0E36               	movlw	low _compartment_number
  8317  000212  26D9               	addwf	fsr2l,f,c
  8318  000214  0E00               	movlw	high _compartment_number
  8319  000216  22DA               	addwfc	fsr2h,f,c
  8320  000218  CFDE F007          	movff	postinc2,??_is_valid
  8321  00021C  CFDD F008          	movff	postdec2,??_is_valid+1
  8322  000220  90D8               	bcf	status,0,c
  8323  000222  3607               	rlcf	??_is_valid,f,c
  8324  000224  3608               	rlcf	??_is_valid+1,f,c
  8325  000226  0E90               	movlw	low _N_array
  8326  000228  2407               	addwf	??_is_valid,w,c
  8327  00022A  6ED9               	movwf	fsr2l,c
  8328  00022C  0E00               	movlw	high _N_array
  8329  00022E  2008               	addwfc	??_is_valid+1,w,c
  8330  000230  6EDA               	movwf	fsr2h,c
  8331  000232  C054  FFDE         	movff	_N,postinc2
  8332  000236  C055  FFDD         	movff	_N+1,postdec2
  8333                           
  8334                           ;keypad.c: 47: }
  8335  00023A  0012               	return	
  8336  00023C                     i2l564:
  8337                           
  8338                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
  8339                           
  8340                           ; BSR set to: 0
  8341  00023C  0E63               	movlw	low _current_set2
  8342  00023E  6E01               	movwf	strcmp@s1,c
  8343  000240  0E00               	movlw	high _current_set2
  8344  000242  6E02               	movwf	strcmp@s1+1,c
  8345  000244  0ED8               	movlw	low (STR_66+1)
  8346  000246  6E03               	movwf	strcmp@s2,c
  8347  000248  0EFF               	movlw	high (STR_66+1)
  8348  00024A  6E04               	movwf	strcmp@s2+1,c
  8349  00024C  EC71  F016         	call	_strcmp	;wreg free
  8350  000250  5001               	movf	?_strcmp,w,c
  8351  000252  1002               	iorwf	?_strcmp+1,w,c
  8352  000254  A4D8               	btfss	status,2,c
  8353  000256  D043               	goto	i2l566
  8354                           
  8355                           ;keypad.c: 49: B = 1*number;
  8356  000258  C068  F056         	movff	_number,_B
  8357  00025C  C069  F057         	movff	_number+1,_B+1
  8358                           
  8359                           ;keypad.c: 51: S = 1*number;
  8360  000260  C068  F052         	movff	_number,_S
  8361  000264  C069  F053         	movff	_number+1,_S+1
  8362                           
  8363                           ;keypad.c: 52: total_number = 2*number;
  8364  000268  90D8               	bcf	status,0,c
  8365  00026A  3468               	rlcf	_number,w,c
  8366  00026C  0100               	movlb	0	; () banked
  8367  00026E  6FD3               	movwf	_total_number& (0+255),b
  8368  000270  3469               	rlcf	_number+1,w,c
  8369  000272  6FD4               	movwf	(_total_number+1)& (0+255),b
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
  8373  000274  90D8               	bcf	status,0,c
  8374  000276  3458               	rlcf	_counter_step,w,c
  8375  000278  6ED9               	movwf	fsr2l,c
  8376  00027A  3459               	rlcf	_counter_step+1,w,c
  8377  00027C  6EDA               	movwf	fsr2h,c
  8378  00027E  0E36               	movlw	low _compartment_number
  8379  000280  26D9               	addwf	fsr2l,f,c
  8380  000282  0E00               	movlw	high _compartment_number
  8381  000284  22DA               	addwfc	fsr2h,f,c
  8382  000286  CFDE F007          	movff	postinc2,??_is_valid
  8383  00028A  CFDD F008          	movff	postdec2,??_is_valid+1
  8384  00028E  90D8               	bcf	status,0,c
  8385  000290  3607               	rlcf	??_is_valid,f,c
  8386  000292  3608               	rlcf	??_is_valid+1,f,c
  8387  000294  0EA0               	movlw	low _B_array
  8388  000296  2407               	addwf	??_is_valid,w,c
  8389  000298  6ED9               	movwf	fsr2l,c
  8390  00029A  0E00               	movlw	high _B_array
  8391  00029C  2008               	addwfc	??_is_valid+1,w,c
  8392  00029E  6EDA               	movwf	fsr2h,c
  8393  0002A0  C056  FFDE         	movff	_B,postinc2
  8394  0002A4  C057  FFDD         	movff	_B+1,postdec2
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
  8398  0002A8  90D8               	bcf	status,0,c
  8399  0002AA  3458               	rlcf	_counter_step,w,c
  8400  0002AC  6ED9               	movwf	fsr2l,c
  8401  0002AE  3459               	rlcf	_counter_step+1,w,c
  8402  0002B0  6EDA               	movwf	fsr2h,c
  8403  0002B2  0E36               	movlw	low _compartment_number
  8404  0002B4  26D9               	addwf	fsr2l,f,c
  8405  0002B6  0E00               	movlw	high _compartment_number
  8406  0002B8  22DA               	addwfc	fsr2h,f,c
  8407  0002BA  CFDE F007          	movff	postinc2,??_is_valid
  8408  0002BE  CFDD F008          	movff	postdec2,??_is_valid+1
  8409  0002C2  90D8               	bcf	status,0,c
  8410  0002C4  3607               	rlcf	??_is_valid,f,c
  8411  0002C6  3608               	rlcf	??_is_valid+1,f,c
  8412  0002C8  0E00               	movlw	low _S_array
  8413  0002CA  2407               	addwf	??_is_valid,w,c
  8414  0002CC  6ED9               	movwf	fsr2l,c
  8415  0002CE  0E01               	movlw	high _S_array
  8416  0002D0  2008               	addwfc	??_is_valid+1,w,c
  8417  0002D2  6EDA               	movwf	fsr2h,c
  8418  0002D4  C052  FFDE         	movff	_S,postinc2
  8419  0002D8  C053  FFDD         	movff	_S+1,postdec2
  8420                           
  8421                           ;keypad.c: 57: }
  8422  0002DC  0012               	return	
  8423  0002DE                     i2l566:
  8424                           
  8425                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
  8426                           
  8427                           ; BSR set to: 0
  8428  0002DE  0E63               	movlw	low _current_set2
  8429  0002E0  6E01               	movwf	strcmp@s1,c
  8430  0002E2  0E00               	movlw	high _current_set2
  8431  0002E4  6E02               	movwf	strcmp@s1+1,c
  8432  0002E6  0EDC               	movlw	low (STR_67+1)
  8433  0002E8  6E03               	movwf	strcmp@s2,c
  8434  0002EA  0EFF               	movlw	high (STR_67+1)
  8435  0002EC  6E04               	movwf	strcmp@s2+1,c
  8436  0002EE  EC71  F016         	call	_strcmp	;wreg free
  8437  0002F2  5001               	movf	?_strcmp,w,c
  8438  0002F4  1002               	iorwf	?_strcmp+1,w,c
  8439  0002F6  A4D8               	btfss	status,2,c
  8440  0002F8  D043               	goto	i2l568
  8441                           
  8442                           ;keypad.c: 60: B = 1*number;
  8443  0002FA  C068  F056         	movff	_number,_B
  8444  0002FE  C069  F057         	movff	_number+1,_B+1
  8445                           
  8446                           ;keypad.c: 62: W = 1*number;
  8447  000302  C068  F050         	movff	_number,_W
  8448  000306  C069  F051         	movff	_number+1,_W+1
  8449                           
  8450                           ;keypad.c: 63: total_number = 2*number;
  8451  00030A  90D8               	bcf	status,0,c
  8452  00030C  3468               	rlcf	_number,w,c
  8453  00030E  0100               	movlb	0	; () banked
  8454  000310  6FD3               	movwf	_total_number& (0+255),b
  8455  000312  3469               	rlcf	_number+1,w,c
  8456  000314  6FD4               	movwf	(_total_number+1)& (0+255),b
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
  8460  000316  90D8               	bcf	status,0,c
  8461  000318  3458               	rlcf	_counter_step,w,c
  8462  00031A  6ED9               	movwf	fsr2l,c
  8463  00031C  3459               	rlcf	_counter_step+1,w,c
  8464  00031E  6EDA               	movwf	fsr2h,c
  8465  000320  0E36               	movlw	low _compartment_number
  8466  000322  26D9               	addwf	fsr2l,f,c
  8467  000324  0E00               	movlw	high _compartment_number
  8468  000326  22DA               	addwfc	fsr2h,f,c
  8469  000328  CFDE F007          	movff	postinc2,??_is_valid
  8470  00032C  CFDD F008          	movff	postdec2,??_is_valid+1
  8471  000330  90D8               	bcf	status,0,c
  8472  000332  3607               	rlcf	??_is_valid,f,c
  8473  000334  3608               	rlcf	??_is_valid+1,f,c
  8474  000336  0EA0               	movlw	low _B_array
  8475  000338  2407               	addwf	??_is_valid,w,c
  8476  00033A  6ED9               	movwf	fsr2l,c
  8477  00033C  0E00               	movlw	high _B_array
  8478  00033E  2008               	addwfc	??_is_valid+1,w,c
  8479  000340  6EDA               	movwf	fsr2h,c
  8480  000342  C056  FFDE         	movff	_B,postinc2
  8481  000346  C057  FFDD         	movff	_B+1,postdec2
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
  8485  00034A  90D8               	bcf	status,0,c
  8486  00034C  3458               	rlcf	_counter_step,w,c
  8487  00034E  6ED9               	movwf	fsr2l,c
  8488  000350  3459               	rlcf	_counter_step+1,w,c
  8489  000352  6EDA               	movwf	fsr2h,c
  8490  000354  0E36               	movlw	low _compartment_number
  8491  000356  26D9               	addwf	fsr2l,f,c
  8492  000358  0E00               	movlw	high _compartment_number
  8493  00035A  22DA               	addwfc	fsr2h,f,c
  8494  00035C  CFDE F007          	movff	postinc2,??_is_valid
  8495  000360  CFDD F008          	movff	postdec2,??_is_valid+1
  8496  000364  90D8               	bcf	status,0,c
  8497  000366  3607               	rlcf	??_is_valid,f,c
  8498  000368  3608               	rlcf	??_is_valid+1,f,c
  8499  00036A  0E80               	movlw	low _W_array
  8500  00036C  2407               	addwf	??_is_valid,w,c
  8501  00036E  6ED9               	movwf	fsr2l,c
  8502  000370  0E00               	movlw	high _W_array
  8503  000372  2008               	addwfc	??_is_valid+1,w,c
  8504  000374  6EDA               	movwf	fsr2h,c
  8505  000376  C050  FFDE         	movff	_W,postinc2
  8506  00037A  C051  FFDD         	movff	_W+1,postdec2
  8507                           
  8508                           ;keypad.c: 67: }
  8509  00037E  0012               	return	
  8510  000380                     i2l568:
  8511                           
  8512                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
  8513                           
  8514                           ; BSR set to: 0
  8515  000380  0E63               	movlw	low _current_set2
  8516  000382  6E01               	movwf	strcmp@s1,c
  8517  000384  0E00               	movlw	high _current_set2
  8518  000386  6E02               	movwf	strcmp@s1+1,c
  8519  000388  0ED3               	movlw	low STR_65
  8520  00038A  6E03               	movwf	strcmp@s2,c
  8521  00038C  0EFF               	movlw	high STR_65
  8522  00038E  6E04               	movwf	strcmp@s2+1,c
  8523  000390  EC71  F016         	call	_strcmp	;wreg free
  8524  000394  5001               	movf	?_strcmp,w,c
  8525  000396  1002               	iorwf	?_strcmp+1,w,c
  8526  000398  A4D8               	btfss	status,2,c
  8527  00039A  D04C               	goto	i2l570
  8528                           
  8529                           ;keypad.c: 69: B = 2*number;
  8530  00039C  90D8               	bcf	status,0,c
  8531  00039E  3468               	rlcf	_number,w,c
  8532  0003A0  6E56               	movwf	_B,c
  8533  0003A2  3469               	rlcf	_number+1,w,c
  8534  0003A4  6E57               	movwf	_B+1,c
  8535                           
  8536                           ;keypad.c: 71: N = 1*number;
  8537  0003A6  C068  F054         	movff	_number,_N
  8538  0003AA  C069  F055         	movff	_number+1,_N+1
  8539                           
  8540                           ;keypad.c: 72: total_number = 3*number;
  8541  0003AE  C068  F001         	movff	_number,i2___wmul@multiplier
  8542  0003B2  C069  F002         	movff	_number+1,i2___wmul@multiplier+1
  8543  0003B6  0E00               	movlw	0
  8544  0003B8  6E04               	movwf	i2___wmul@multiplicand+1,c
  8545  0003BA  0E03               	movlw	3
  8546  0003BC  6E03               	movwf	i2___wmul@multiplicand,c
  8547  0003BE  EC55  F017         	call	i2___wmul	;wreg free
  8548  0003C2  C001  F0D3         	movff	?i2___wmul,_total_number
  8549  0003C6  C002  F0D4         	movff	?i2___wmul+1,_total_number+1
  8550                           
  8551                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
  8552  0003CA  90D8               	bcf	status,0,c
  8553  0003CC  3458               	rlcf	_counter_step,w,c
  8554  0003CE  6ED9               	movwf	fsr2l,c
  8555  0003D0  3459               	rlcf	_counter_step+1,w,c
  8556  0003D2  6EDA               	movwf	fsr2h,c
  8557  0003D4  0E36               	movlw	low _compartment_number
  8558  0003D6  26D9               	addwf	fsr2l,f,c
  8559  0003D8  0E00               	movlw	high _compartment_number
  8560  0003DA  22DA               	addwfc	fsr2h,f,c
  8561  0003DC  CFDE F007          	movff	postinc2,??_is_valid
  8562  0003E0  CFDD F008          	movff	postdec2,??_is_valid+1
  8563  0003E4  90D8               	bcf	status,0,c
  8564  0003E6  3607               	rlcf	??_is_valid,f,c
  8565  0003E8  3608               	rlcf	??_is_valid+1,f,c
  8566  0003EA  0EA0               	movlw	low _B_array
  8567  0003EC  2407               	addwf	??_is_valid,w,c
  8568  0003EE  6ED9               	movwf	fsr2l,c
  8569  0003F0  0E00               	movlw	high _B_array
  8570  0003F2  2008               	addwfc	??_is_valid+1,w,c
  8571  0003F4  6EDA               	movwf	fsr2h,c
  8572  0003F6  C056  FFDE         	movff	_B,postinc2
  8573  0003FA  C057  FFDD         	movff	_B+1,postdec2
  8574                           
  8575                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
  8576  0003FE  90D8               	bcf	status,0,c
  8577  000400  3458               	rlcf	_counter_step,w,c
  8578  000402  6ED9               	movwf	fsr2l,c
  8579  000404  3459               	rlcf	_counter_step+1,w,c
  8580  000406  6EDA               	movwf	fsr2h,c
  8581  000408  0E36               	movlw	low _compartment_number
  8582  00040A  26D9               	addwf	fsr2l,f,c
  8583  00040C  0E00               	movlw	high _compartment_number
  8584  00040E  22DA               	addwfc	fsr2h,f,c
  8585  000410  CFDE F007          	movff	postinc2,??_is_valid
  8586  000414  CFDD F008          	movff	postdec2,??_is_valid+1
  8587  000418  90D8               	bcf	status,0,c
  8588  00041A  3607               	rlcf	??_is_valid,f,c
  8589  00041C  3608               	rlcf	??_is_valid+1,f,c
  8590  00041E  0E90               	movlw	low _N_array
  8591  000420  2407               	addwf	??_is_valid,w,c
  8592  000422  6ED9               	movwf	fsr2l,c
  8593  000424  0E00               	movlw	high _N_array
  8594  000426  2008               	addwfc	??_is_valid+1,w,c
  8595  000428  6EDA               	movwf	fsr2h,c
  8596  00042A  C054  FFDE         	movff	_N,postinc2
  8597  00042E  C055  FFDD         	movff	_N+1,postdec2
  8598                           
  8599                           ;keypad.c: 76: }
  8600  000432  0012               	return	
  8601  000434                     i2l570:
  8602                           
  8603                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
  8604  000434  0E63               	movlw	low _current_set2
  8605  000436  6E01               	movwf	strcmp@s1,c
  8606  000438  0E00               	movlw	high _current_set2
  8607  00043A  6E02               	movwf	strcmp@s1+1,c
  8608  00043C  0ED7               	movlw	low STR_66
  8609  00043E  6E03               	movwf	strcmp@s2,c
  8610  000440  0EFF               	movlw	high STR_66
  8611  000442  6E04               	movwf	strcmp@s2+1,c
  8612  000444  EC71  F016         	call	_strcmp	;wreg free
  8613  000448  5001               	movf	?_strcmp,w,c
  8614  00044A  1002               	iorwf	?_strcmp+1,w,c
  8615  00044C  A4D8               	btfss	status,2,c
  8616  00044E  D04C               	goto	i2l572
  8617                           
  8618                           ;keypad.c: 78: B = 2*number;
  8619  000450  90D8               	bcf	status,0,c
  8620  000452  3468               	rlcf	_number,w,c
  8621  000454  6E56               	movwf	_B,c
  8622  000456  3469               	rlcf	_number+1,w,c
  8623  000458  6E57               	movwf	_B+1,c
  8624                           
  8625                           ;keypad.c: 80: S = 1*number;
  8626  00045A  C068  F052         	movff	_number,_S
  8627  00045E  C069  F053         	movff	_number+1,_S+1
  8628                           
  8629                           ;keypad.c: 81: total_number = 3*number;
  8630  000462  C068  F001         	movff	_number,i2___wmul@multiplier
  8631  000466  C069  F002         	movff	_number+1,i2___wmul@multiplier+1
  8632  00046A  0E00               	movlw	0
  8633  00046C  6E04               	movwf	i2___wmul@multiplicand+1,c
  8634  00046E  0E03               	movlw	3
  8635  000470  6E03               	movwf	i2___wmul@multiplicand,c
  8636  000472  EC55  F017         	call	i2___wmul	;wreg free
  8637  000476  C001  F0D3         	movff	?i2___wmul,_total_number
  8638  00047A  C002  F0D4         	movff	?i2___wmul+1,_total_number+1
  8639                           
  8640                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
  8641  00047E  90D8               	bcf	status,0,c
  8642  000480  3458               	rlcf	_counter_step,w,c
  8643  000482  6ED9               	movwf	fsr2l,c
  8644  000484  3459               	rlcf	_counter_step+1,w,c
  8645  000486  6EDA               	movwf	fsr2h,c
  8646  000488  0E36               	movlw	low _compartment_number
  8647  00048A  26D9               	addwf	fsr2l,f,c
  8648  00048C  0E00               	movlw	high _compartment_number
  8649  00048E  22DA               	addwfc	fsr2h,f,c
  8650  000490  CFDE F007          	movff	postinc2,??_is_valid
  8651  000494  CFDD F008          	movff	postdec2,??_is_valid+1
  8652  000498  90D8               	bcf	status,0,c
  8653  00049A  3607               	rlcf	??_is_valid,f,c
  8654  00049C  3608               	rlcf	??_is_valid+1,f,c
  8655  00049E  0EA0               	movlw	low _B_array
  8656  0004A0  2407               	addwf	??_is_valid,w,c
  8657  0004A2  6ED9               	movwf	fsr2l,c
  8658  0004A4  0E00               	movlw	high _B_array
  8659  0004A6  2008               	addwfc	??_is_valid+1,w,c
  8660  0004A8  6EDA               	movwf	fsr2h,c
  8661  0004AA  C056  FFDE         	movff	_B,postinc2
  8662  0004AE  C057  FFDD         	movff	_B+1,postdec2
  8663                           
  8664                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
  8665  0004B2  90D8               	bcf	status,0,c
  8666  0004B4  3458               	rlcf	_counter_step,w,c
  8667  0004B6  6ED9               	movwf	fsr2l,c
  8668  0004B8  3459               	rlcf	_counter_step+1,w,c
  8669  0004BA  6EDA               	movwf	fsr2h,c
  8670  0004BC  0E36               	movlw	low _compartment_number
  8671  0004BE  26D9               	addwf	fsr2l,f,c
  8672  0004C0  0E00               	movlw	high _compartment_number
  8673  0004C2  22DA               	addwfc	fsr2h,f,c
  8674  0004C4  CFDE F007          	movff	postinc2,??_is_valid
  8675  0004C8  CFDD F008          	movff	postdec2,??_is_valid+1
  8676  0004CC  90D8               	bcf	status,0,c
  8677  0004CE  3607               	rlcf	??_is_valid,f,c
  8678  0004D0  3608               	rlcf	??_is_valid+1,f,c
  8679  0004D2  0E00               	movlw	low _S_array
  8680  0004D4  2407               	addwf	??_is_valid,w,c
  8681  0004D6  6ED9               	movwf	fsr2l,c
  8682  0004D8  0E01               	movlw	high _S_array
  8683  0004DA  2008               	addwfc	??_is_valid+1,w,c
  8684  0004DC  6EDA               	movwf	fsr2h,c
  8685  0004DE  C052  FFDE         	movff	_S,postinc2
  8686  0004E2  C053  FFDD         	movff	_S+1,postdec2
  8687                           
  8688                           ;keypad.c: 85: }
  8689  0004E6  0012               	return	
  8690  0004E8                     i2l572:
  8691                           
  8692                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
  8693  0004E8  0E63               	movlw	low _current_set2
  8694  0004EA  6E01               	movwf	strcmp@s1,c
  8695  0004EC  0E00               	movlw	high _current_set2
  8696  0004EE  6E02               	movwf	strcmp@s1+1,c
  8697  0004F0  0EDB               	movlw	low STR_67
  8698  0004F2  6E03               	movwf	strcmp@s2,c
  8699  0004F4  0EFF               	movlw	high STR_67
  8700  0004F6  6E04               	movwf	strcmp@s2+1,c
  8701  0004F8  EC71  F016         	call	_strcmp	;wreg free
  8702  0004FC  5001               	movf	?_strcmp,w,c
  8703  0004FE  1002               	iorwf	?_strcmp+1,w,c
  8704  000500  A4D8               	btfss	status,2,c
  8705  000502  D04C               	goto	i2l574
  8706                           
  8707                           ;keypad.c: 87: B = 2*number;
  8708  000504  90D8               	bcf	status,0,c
  8709  000506  3468               	rlcf	_number,w,c
  8710  000508  6E56               	movwf	_B,c
  8711  00050A  3469               	rlcf	_number+1,w,c
  8712  00050C  6E57               	movwf	_B+1,c
  8713                           
  8714                           ;keypad.c: 89: W = 1*number;
  8715  00050E  C068  F050         	movff	_number,_W
  8716  000512  C069  F051         	movff	_number+1,_W+1
  8717                           
  8718                           ;keypad.c: 90: total_number = 3*number;
  8719  000516  C068  F001         	movff	_number,i2___wmul@multiplier
  8720  00051A  C069  F002         	movff	_number+1,i2___wmul@multiplier+1
  8721  00051E  0E00               	movlw	0
  8722  000520  6E04               	movwf	i2___wmul@multiplicand+1,c
  8723  000522  0E03               	movlw	3
  8724  000524  6E03               	movwf	i2___wmul@multiplicand,c
  8725  000526  EC55  F017         	call	i2___wmul	;wreg free
  8726  00052A  C001  F0D3         	movff	?i2___wmul,_total_number
  8727  00052E  C002  F0D4         	movff	?i2___wmul+1,_total_number+1
  8728                           
  8729                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
  8730  000532  90D8               	bcf	status,0,c
  8731  000534  3458               	rlcf	_counter_step,w,c
  8732  000536  6ED9               	movwf	fsr2l,c
  8733  000538  3459               	rlcf	_counter_step+1,w,c
  8734  00053A  6EDA               	movwf	fsr2h,c
  8735  00053C  0E36               	movlw	low _compartment_number
  8736  00053E  26D9               	addwf	fsr2l,f,c
  8737  000540  0E00               	movlw	high _compartment_number
  8738  000542  22DA               	addwfc	fsr2h,f,c
  8739  000544  CFDE F007          	movff	postinc2,??_is_valid
  8740  000548  CFDD F008          	movff	postdec2,??_is_valid+1
  8741  00054C  90D8               	bcf	status,0,c
  8742  00054E  3607               	rlcf	??_is_valid,f,c
  8743  000550  3608               	rlcf	??_is_valid+1,f,c
  8744  000552  0EA0               	movlw	low _B_array
  8745  000554  2407               	addwf	??_is_valid,w,c
  8746  000556  6ED9               	movwf	fsr2l,c
  8747  000558  0E00               	movlw	high _B_array
  8748  00055A  2008               	addwfc	??_is_valid+1,w,c
  8749  00055C  6EDA               	movwf	fsr2h,c
  8750  00055E  C056  FFDE         	movff	_B,postinc2
  8751  000562  C057  FFDD         	movff	_B+1,postdec2
  8752                           
  8753                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
  8754  000566  90D8               	bcf	status,0,c
  8755  000568  3458               	rlcf	_counter_step,w,c
  8756  00056A  6ED9               	movwf	fsr2l,c
  8757  00056C  3459               	rlcf	_counter_step+1,w,c
  8758  00056E  6EDA               	movwf	fsr2h,c
  8759  000570  0E36               	movlw	low _compartment_number
  8760  000572  26D9               	addwf	fsr2l,f,c
  8761  000574  0E00               	movlw	high _compartment_number
  8762  000576  22DA               	addwfc	fsr2h,f,c
  8763  000578  CFDE F007          	movff	postinc2,??_is_valid
  8764  00057C  CFDD F008          	movff	postdec2,??_is_valid+1
  8765  000580  90D8               	bcf	status,0,c
  8766  000582  3607               	rlcf	??_is_valid,f,c
  8767  000584  3608               	rlcf	??_is_valid+1,f,c
  8768  000586  0E80               	movlw	low _W_array
  8769  000588  2407               	addwf	??_is_valid,w,c
  8770  00058A  6ED9               	movwf	fsr2l,c
  8771  00058C  0E00               	movlw	high _W_array
  8772  00058E  2008               	addwfc	??_is_valid+1,w,c
  8773  000590  6EDA               	movwf	fsr2h,c
  8774  000592  C050  FFDE         	movff	_W,postinc2
  8775  000596  C051  FFDD         	movff	_W+1,postdec2
  8776                           
  8777                           ;keypad.c: 94: }
  8778  00059A  0012               	return	
  8779  00059C                     i2l574:
  8780                           
  8781                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
  8782  00059C  0E63               	movlw	low _current_set2
  8783  00059E  6E01               	movwf	strcmp@s1,c
  8784  0005A0  0E00               	movlw	high _current_set2
  8785  0005A2  6E02               	movwf	strcmp@s1+1,c
  8786  0005A4  0EB1               	movlw	low (STR_74+1)
  8787  0005A6  6E03               	movwf	strcmp@s2,c
  8788  0005A8  0EFF               	movlw	high (STR_74+1)
  8789  0005AA  6E04               	movwf	strcmp@s2+1,c
  8790  0005AC  EC71  F016         	call	_strcmp	;wreg free
  8791  0005B0  5001               	movf	?_strcmp,w,c
  8792  0005B2  1002               	iorwf	?_strcmp+1,w,c
  8793  0005B4  A4D8               	btfss	status,2,c
  8794  0005B6  D069               	goto	i2l576
  8795                           
  8796                           ;keypad.c: 96: B = 1*number;
  8797  0005B8  C068  F056         	movff	_number,_B
  8798  0005BC  C069  F057         	movff	_number+1,_B+1
  8799                           
  8800                           ;keypad.c: 97: W = 1*number;
  8801  0005C0  C068  F050         	movff	_number,_W
  8802  0005C4  C069  F051         	movff	_number+1,_W+1
  8803                           
  8804                           ;keypad.c: 98: N = 1*number;
  8805  0005C8  C068  F054         	movff	_number,_N
  8806  0005CC  C069  F055         	movff	_number+1,_N+1
  8807                           
  8808                           ;keypad.c: 99: total_number = 3*number;
  8809  0005D0  C068  F001         	movff	_number,i2___wmul@multiplier
  8810  0005D4  C069  F002         	movff	_number+1,i2___wmul@multiplier+1
  8811  0005D8  0E00               	movlw	0
  8812  0005DA  6E04               	movwf	i2___wmul@multiplicand+1,c
  8813  0005DC  0E03               	movlw	3
  8814  0005DE  6E03               	movwf	i2___wmul@multiplicand,c
  8815  0005E0  EC55  F017         	call	i2___wmul	;wreg free
  8816  0005E4  C001  F0D3         	movff	?i2___wmul,_total_number
  8817  0005E8  C002  F0D4         	movff	?i2___wmul+1,_total_number+1
  8818                           
  8819                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
  8820  0005EC  90D8               	bcf	status,0,c
  8821  0005EE  3458               	rlcf	_counter_step,w,c
  8822  0005F0  6ED9               	movwf	fsr2l,c
  8823  0005F2  3459               	rlcf	_counter_step+1,w,c
  8824  0005F4  6EDA               	movwf	fsr2h,c
  8825  0005F6  0E36               	movlw	low _compartment_number
  8826  0005F8  26D9               	addwf	fsr2l,f,c
  8827  0005FA  0E00               	movlw	high _compartment_number
  8828  0005FC  22DA               	addwfc	fsr2h,f,c
  8829  0005FE  CFDE F007          	movff	postinc2,??_is_valid
  8830  000602  CFDD F008          	movff	postdec2,??_is_valid+1
  8831  000606  90D8               	bcf	status,0,c
  8832  000608  3607               	rlcf	??_is_valid,f,c
  8833  00060A  3608               	rlcf	??_is_valid+1,f,c
  8834  00060C  0EA0               	movlw	low _B_array
  8835  00060E  2407               	addwf	??_is_valid,w,c
  8836  000610  6ED9               	movwf	fsr2l,c
  8837  000612  0E00               	movlw	high _B_array
  8838  000614  2008               	addwfc	??_is_valid+1,w,c
  8839  000616  6EDA               	movwf	fsr2h,c
  8840  000618  C056  FFDE         	movff	_B,postinc2
  8841  00061C  C057  FFDD         	movff	_B+1,postdec2
  8842                           
  8843                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
  8844  000620  90D8               	bcf	status,0,c
  8845  000622  3458               	rlcf	_counter_step,w,c
  8846  000624  6ED9               	movwf	fsr2l,c
  8847  000626  3459               	rlcf	_counter_step+1,w,c
  8848  000628  6EDA               	movwf	fsr2h,c
  8849  00062A  0E36               	movlw	low _compartment_number
  8850  00062C  26D9               	addwf	fsr2l,f,c
  8851  00062E  0E00               	movlw	high _compartment_number
  8852  000630  22DA               	addwfc	fsr2h,f,c
  8853  000632  CFDE F007          	movff	postinc2,??_is_valid
  8854  000636  CFDD F008          	movff	postdec2,??_is_valid+1
  8855  00063A  90D8               	bcf	status,0,c
  8856  00063C  3607               	rlcf	??_is_valid,f,c
  8857  00063E  3608               	rlcf	??_is_valid+1,f,c
  8858  000640  0E80               	movlw	low _W_array
  8859  000642  2407               	addwf	??_is_valid,w,c
  8860  000644  6ED9               	movwf	fsr2l,c
  8861  000646  0E00               	movlw	high _W_array
  8862  000648  2008               	addwfc	??_is_valid+1,w,c
  8863  00064A  6EDA               	movwf	fsr2h,c
  8864  00064C  C050  FFDE         	movff	_W,postinc2
  8865  000650  C051  FFDD         	movff	_W+1,postdec2
  8866                           
  8867                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
  8868  000654  90D8               	bcf	status,0,c
  8869  000656  3458               	rlcf	_counter_step,w,c
  8870  000658  6ED9               	movwf	fsr2l,c
  8871  00065A  3459               	rlcf	_counter_step+1,w,c
  8872  00065C  6EDA               	movwf	fsr2h,c
  8873  00065E  0E36               	movlw	low _compartment_number
  8874  000660  26D9               	addwf	fsr2l,f,c
  8875  000662  0E00               	movlw	high _compartment_number
  8876  000664  22DA               	addwfc	fsr2h,f,c
  8877  000666  CFDE F007          	movff	postinc2,??_is_valid
  8878  00066A  CFDD F008          	movff	postdec2,??_is_valid+1
  8879  00066E  90D8               	bcf	status,0,c
  8880  000670  3607               	rlcf	??_is_valid,f,c
  8881  000672  3608               	rlcf	??_is_valid+1,f,c
  8882  000674  0E90               	movlw	low _N_array
  8883  000676  2407               	addwf	??_is_valid,w,c
  8884  000678  6ED9               	movwf	fsr2l,c
  8885  00067A  0E00               	movlw	high _N_array
  8886  00067C  2008               	addwfc	??_is_valid+1,w,c
  8887  00067E  6EDA               	movwf	fsr2h,c
  8888  000680  C054  FFDE         	movff	_N,postinc2
  8889  000684  C055  FFDD         	movff	_N+1,postdec2
  8890                           
  8891                           ;keypad.c: 105: }
  8892  000688  0012               	return	
  8893  00068A                     i2l576:
  8894                           
  8895                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
  8896  00068A  0E63               	movlw	low _current_set2
  8897  00068C  6E01               	movwf	strcmp@s1,c
  8898  00068E  0E00               	movlw	high _current_set2
  8899  000690  6E02               	movwf	strcmp@s1+1,c
  8900  000692  0EBB               	movlw	low (STR_73+1)
  8901  000694  6E03               	movwf	strcmp@s2,c
  8902  000696  0EFF               	movlw	high (STR_73+1)
  8903  000698  6E04               	movwf	strcmp@s2+1,c
  8904  00069A  EC71  F016         	call	_strcmp	;wreg free
  8905  00069E  5001               	movf	?_strcmp,w,c
  8906  0006A0  1002               	iorwf	?_strcmp+1,w,c
  8907  0006A2  A4D8               	btfss	status,2,c
  8908  0006A4  D069               	goto	i2l578
  8909                           
  8910                           ;keypad.c: 107: B = 1*number;
  8911  0006A6  C068  F056         	movff	_number,_B
  8912  0006AA  C069  F057         	movff	_number+1,_B+1
  8913                           
  8914                           ;keypad.c: 108: S = 1*number;
  8915  0006AE  C068  F052         	movff	_number,_S
  8916  0006B2  C069  F053         	movff	_number+1,_S+1
  8917                           
  8918                           ;keypad.c: 109: N = 1*number;
  8919  0006B6  C068  F054         	movff	_number,_N
  8920  0006BA  C069  F055         	movff	_number+1,_N+1
  8921                           
  8922                           ;keypad.c: 110: total_number = 3*number;
  8923  0006BE  C068  F001         	movff	_number,i2___wmul@multiplier
  8924  0006C2  C069  F002         	movff	_number+1,i2___wmul@multiplier+1
  8925  0006C6  0E00               	movlw	0
  8926  0006C8  6E04               	movwf	i2___wmul@multiplicand+1,c
  8927  0006CA  0E03               	movlw	3
  8928  0006CC  6E03               	movwf	i2___wmul@multiplicand,c
  8929  0006CE  EC55  F017         	call	i2___wmul	;wreg free
  8930  0006D2  C001  F0D3         	movff	?i2___wmul,_total_number
  8931  0006D6  C002  F0D4         	movff	?i2___wmul+1,_total_number+1
  8932                           
  8933                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
  8934  0006DA  90D8               	bcf	status,0,c
  8935  0006DC  3458               	rlcf	_counter_step,w,c
  8936  0006DE  6ED9               	movwf	fsr2l,c
  8937  0006E0  3459               	rlcf	_counter_step+1,w,c
  8938  0006E2  6EDA               	movwf	fsr2h,c
  8939  0006E4  0E36               	movlw	low _compartment_number
  8940  0006E6  26D9               	addwf	fsr2l,f,c
  8941  0006E8  0E00               	movlw	high _compartment_number
  8942  0006EA  22DA               	addwfc	fsr2h,f,c
  8943  0006EC  CFDE F007          	movff	postinc2,??_is_valid
  8944  0006F0  CFDD F008          	movff	postdec2,??_is_valid+1
  8945  0006F4  90D8               	bcf	status,0,c
  8946  0006F6  3607               	rlcf	??_is_valid,f,c
  8947  0006F8  3608               	rlcf	??_is_valid+1,f,c
  8948  0006FA  0EA0               	movlw	low _B_array
  8949  0006FC  2407               	addwf	??_is_valid,w,c
  8950  0006FE  6ED9               	movwf	fsr2l,c
  8951  000700  0E00               	movlw	high _B_array
  8952  000702  2008               	addwfc	??_is_valid+1,w,c
  8953  000704  6EDA               	movwf	fsr2h,c
  8954  000706  C056  FFDE         	movff	_B,postinc2
  8955  00070A  C057  FFDD         	movff	_B+1,postdec2
  8956                           
  8957                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
  8958  00070E  90D8               	bcf	status,0,c
  8959  000710  3458               	rlcf	_counter_step,w,c
  8960  000712  6ED9               	movwf	fsr2l,c
  8961  000714  3459               	rlcf	_counter_step+1,w,c
  8962  000716  6EDA               	movwf	fsr2h,c
  8963  000718  0E36               	movlw	low _compartment_number
  8964  00071A  26D9               	addwf	fsr2l,f,c
  8965  00071C  0E00               	movlw	high _compartment_number
  8966  00071E  22DA               	addwfc	fsr2h,f,c
  8967  000720  CFDE F007          	movff	postinc2,??_is_valid
  8968  000724  CFDD F008          	movff	postdec2,??_is_valid+1
  8969  000728  90D8               	bcf	status,0,c
  8970  00072A  3607               	rlcf	??_is_valid,f,c
  8971  00072C  3608               	rlcf	??_is_valid+1,f,c
  8972  00072E  0E00               	movlw	low _S_array
  8973  000730  2407               	addwf	??_is_valid,w,c
  8974  000732  6ED9               	movwf	fsr2l,c
  8975  000734  0E01               	movlw	high _S_array
  8976  000736  2008               	addwfc	??_is_valid+1,w,c
  8977  000738  6EDA               	movwf	fsr2h,c
  8978  00073A  C052  FFDE         	movff	_S,postinc2
  8979  00073E  C053  FFDD         	movff	_S+1,postdec2
  8980                           
  8981                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
  8982  000742  90D8               	bcf	status,0,c
  8983  000744  3458               	rlcf	_counter_step,w,c
  8984  000746  6ED9               	movwf	fsr2l,c
  8985  000748  3459               	rlcf	_counter_step+1,w,c
  8986  00074A  6EDA               	movwf	fsr2h,c
  8987  00074C  0E36               	movlw	low _compartment_number
  8988  00074E  26D9               	addwf	fsr2l,f,c
  8989  000750  0E00               	movlw	high _compartment_number
  8990  000752  22DA               	addwfc	fsr2h,f,c
  8991  000754  CFDE F007          	movff	postinc2,??_is_valid
  8992  000758  CFDD F008          	movff	postdec2,??_is_valid+1
  8993  00075C  90D8               	bcf	status,0,c
  8994  00075E  3607               	rlcf	??_is_valid,f,c
  8995  000760  3608               	rlcf	??_is_valid+1,f,c
  8996  000762  0E90               	movlw	low _N_array
  8997  000764  2407               	addwf	??_is_valid,w,c
  8998  000766  6ED9               	movwf	fsr2l,c
  8999  000768  0E00               	movlw	high _N_array
  9000  00076A  2008               	addwfc	??_is_valid+1,w,c
  9001  00076C  6EDA               	movwf	fsr2h,c
  9002  00076E  C054  FFDE         	movff	_N,postinc2
  9003  000772  C055  FFDD         	movff	_N+1,postdec2
  9004                           
  9005                           ;keypad.c: 116: }
  9006  000776  0012               	return	
  9007  000778                     i2l578:
  9008                           
  9009                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
  9010  000778  0E63               	movlw	low _current_set2
  9011  00077A  6E01               	movwf	strcmp@s1,c
  9012  00077C  0E00               	movlw	high _current_set2
  9013  00077E  6E02               	movwf	strcmp@s1+1,c
  9014  000780  0EDF               	movlw	low STR_70
  9015  000782  6E03               	movwf	strcmp@s2,c
  9016  000784  0EFF               	movlw	high STR_70
  9017  000786  6E04               	movwf	strcmp@s2+1,c
  9018  000788  EC71  F016         	call	_strcmp	;wreg free
  9019  00078C  5001               	movf	?_strcmp,w,c
  9020  00078E  1002               	iorwf	?_strcmp+1,w,c
  9021  000790  A4D8               	btfss	status,2,c
  9022  000792  D04C               	goto	i2l580
  9023                           
  9024                           ;keypad.c: 118: B = 1*number;
  9025  000794  C068  F056         	movff	_number,_B
  9026  000798  C069  F057         	movff	_number+1,_B+1
  9027                           
  9028                           ;keypad.c: 119: W = 2*number;
  9029  00079C  90D8               	bcf	status,0,c
  9030  00079E  3468               	rlcf	_number,w,c
  9031  0007A0  6E50               	movwf	_W,c
  9032  0007A2  3469               	rlcf	_number+1,w,c
  9033  0007A4  6E51               	movwf	_W+1,c
  9034                           
  9035                           ;keypad.c: 120: total_number = 3*number;
  9036  0007A6  C068  F001         	movff	_number,i2___wmul@multiplier
  9037  0007AA  C069  F002         	movff	_number+1,i2___wmul@multiplier+1
  9038  0007AE  0E00               	movlw	0
  9039  0007B0  6E04               	movwf	i2___wmul@multiplicand+1,c
  9040  0007B2  0E03               	movlw	3
  9041  0007B4  6E03               	movwf	i2___wmul@multiplicand,c
  9042  0007B6  EC55  F017         	call	i2___wmul	;wreg free
  9043  0007BA  C001  F0D3         	movff	?i2___wmul,_total_number
  9044  0007BE  C002  F0D4         	movff	?i2___wmul+1,_total_number+1
  9045                           
  9046                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
  9047  0007C2  90D8               	bcf	status,0,c
  9048  0007C4  3458               	rlcf	_counter_step,w,c
  9049  0007C6  6ED9               	movwf	fsr2l,c
  9050  0007C8  3459               	rlcf	_counter_step+1,w,c
  9051  0007CA  6EDA               	movwf	fsr2h,c
  9052  0007CC  0E36               	movlw	low _compartment_number
  9053  0007CE  26D9               	addwf	fsr2l,f,c
  9054  0007D0  0E00               	movlw	high _compartment_number
  9055  0007D2  22DA               	addwfc	fsr2h,f,c
  9056  0007D4  CFDE F007          	movff	postinc2,??_is_valid
  9057  0007D8  CFDD F008          	movff	postdec2,??_is_valid+1
  9058  0007DC  90D8               	bcf	status,0,c
  9059  0007DE  3607               	rlcf	??_is_valid,f,c
  9060  0007E0  3608               	rlcf	??_is_valid+1,f,c
  9061  0007E2  0EA0               	movlw	low _B_array
  9062  0007E4  2407               	addwf	??_is_valid,w,c
  9063  0007E6  6ED9               	movwf	fsr2l,c
  9064  0007E8  0E00               	movlw	high _B_array
  9065  0007EA  2008               	addwfc	??_is_valid+1,w,c
  9066  0007EC  6EDA               	movwf	fsr2h,c
  9067  0007EE  C056  FFDE         	movff	_B,postinc2
  9068  0007F2  C057  FFDD         	movff	_B+1,postdec2
  9069                           
  9070                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
  9071  0007F6  90D8               	bcf	status,0,c
  9072  0007F8  3458               	rlcf	_counter_step,w,c
  9073  0007FA  6ED9               	movwf	fsr2l,c
  9074  0007FC  3459               	rlcf	_counter_step+1,w,c
  9075  0007FE  6EDA               	movwf	fsr2h,c
  9076  000800  0E36               	movlw	low _compartment_number
  9077  000802  26D9               	addwf	fsr2l,f,c
  9078  000804  0E00               	movlw	high _compartment_number
  9079  000806  22DA               	addwfc	fsr2h,f,c
  9080  000808  CFDE F007          	movff	postinc2,??_is_valid
  9081  00080C  CFDD F008          	movff	postdec2,??_is_valid+1
  9082  000810  90D8               	bcf	status,0,c
  9083  000812  3607               	rlcf	??_is_valid,f,c
  9084  000814  3608               	rlcf	??_is_valid+1,f,c
  9085  000816  0E80               	movlw	low _W_array
  9086  000818  2407               	addwf	??_is_valid,w,c
  9087  00081A  6ED9               	movwf	fsr2l,c
  9088  00081C  0E00               	movlw	high _W_array
  9089  00081E  2008               	addwfc	??_is_valid+1,w,c
  9090  000820  6EDA               	movwf	fsr2h,c
  9091  000822  C050  FFDE         	movff	_W,postinc2
  9092  000826  C051  FFDD         	movff	_W+1,postdec2
  9093                           
  9094                           ;keypad.c: 124: }
  9095  00082A  0012               	return	
  9096  00082C                     i2l580:
  9097                           
  9098                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
  9099  00082C  0E63               	movlw	low _current_set2
  9100  00082E  6E01               	movwf	strcmp@s1,c
  9101  000830  0E00               	movlw	high _current_set2
  9102  000832  6E02               	movwf	strcmp@s1+1,c
  9103  000834  0EBF               	movlw	low STR_71
  9104  000836  6E03               	movwf	strcmp@s2,c
  9105  000838  0EFF               	movlw	high STR_71
  9106  00083A  6E04               	movwf	strcmp@s2+1,c
  9107  00083C  EC71  F016         	call	_strcmp	;wreg free
  9108  000840  5001               	movf	?_strcmp,w,c
  9109  000842  1002               	iorwf	?_strcmp+1,w,c
  9110  000844  A4D8               	btfss	status,2,c
  9111  000846  D06A               	goto	i2l582
  9112                           
  9113                           ;keypad.c: 126: B = 1*number;
  9114  000848  C068  F056         	movff	_number,_B
  9115  00084C  C069  F057         	movff	_number+1,_B+1
  9116                           
  9117                           ;keypad.c: 127: N = 1*number;
  9118  000850  C068  F054         	movff	_number,_N
  9119  000854  C069  F055         	movff	_number+1,_N+1
  9120                           
  9121                           ;keypad.c: 128: W = 2*number;
  9122  000858  90D8               	bcf	status,0,c
  9123  00085A  3468               	rlcf	_number,w,c
  9124  00085C  6E50               	movwf	_W,c
  9125  00085E  3469               	rlcf	_number+1,w,c
  9126  000860  6E51               	movwf	_W+1,c
  9127                           
  9128                           ;keypad.c: 129: total_number = 4*number;
  9129  000862  C068  F007         	movff	_number,??_is_valid
  9130  000866  C069  F008         	movff	_number+1,??_is_valid+1
  9131  00086A  90D8               	bcf	status,0,c
  9132  00086C  3607               	rlcf	??_is_valid,f,c
  9133  00086E  3608               	rlcf	??_is_valid+1,f,c
  9134  000870  90D8               	bcf	status,0,c
  9135  000872  3607               	rlcf	??_is_valid,f,c
  9136  000874  3608               	rlcf	??_is_valid+1,f,c
  9137  000876  C007  F0D3         	movff	??_is_valid,_total_number
  9138  00087A  C008  F0D4         	movff	??_is_valid+1,_total_number+1
  9139                           
  9140                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
  9141  00087E  90D8               	bcf	status,0,c
  9142  000880  3458               	rlcf	_counter_step,w,c
  9143  000882  6ED9               	movwf	fsr2l,c
  9144  000884  3459               	rlcf	_counter_step+1,w,c
  9145  000886  6EDA               	movwf	fsr2h,c
  9146  000888  0E36               	movlw	low _compartment_number
  9147  00088A  26D9               	addwf	fsr2l,f,c
  9148  00088C  0E00               	movlw	high _compartment_number
  9149  00088E  22DA               	addwfc	fsr2h,f,c
  9150  000890  CFDE F007          	movff	postinc2,??_is_valid
  9151  000894  CFDD F008          	movff	postdec2,??_is_valid+1
  9152  000898  90D8               	bcf	status,0,c
  9153  00089A  3607               	rlcf	??_is_valid,f,c
  9154  00089C  3608               	rlcf	??_is_valid+1,f,c
  9155  00089E  0EA0               	movlw	low _B_array
  9156  0008A0  2407               	addwf	??_is_valid,w,c
  9157  0008A2  6ED9               	movwf	fsr2l,c
  9158  0008A4  0E00               	movlw	high _B_array
  9159  0008A6  2008               	addwfc	??_is_valid+1,w,c
  9160  0008A8  6EDA               	movwf	fsr2h,c
  9161  0008AA  C056  FFDE         	movff	_B,postinc2
  9162  0008AE  C057  FFDD         	movff	_B+1,postdec2
  9163                           
  9164                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
  9165  0008B2  90D8               	bcf	status,0,c
  9166  0008B4  3458               	rlcf	_counter_step,w,c
  9167  0008B6  6ED9               	movwf	fsr2l,c
  9168  0008B8  3459               	rlcf	_counter_step+1,w,c
  9169  0008BA  6EDA               	movwf	fsr2h,c
  9170  0008BC  0E36               	movlw	low _compartment_number
  9171  0008BE  26D9               	addwf	fsr2l,f,c
  9172  0008C0  0E00               	movlw	high _compartment_number
  9173  0008C2  22DA               	addwfc	fsr2h,f,c
  9174  0008C4  CFDE F007          	movff	postinc2,??_is_valid
  9175  0008C8  CFDD F008          	movff	postdec2,??_is_valid+1
  9176  0008CC  90D8               	bcf	status,0,c
  9177  0008CE  3607               	rlcf	??_is_valid,f,c
  9178  0008D0  3608               	rlcf	??_is_valid+1,f,c
  9179  0008D2  0E90               	movlw	low _N_array
  9180  0008D4  2407               	addwf	??_is_valid,w,c
  9181  0008D6  6ED9               	movwf	fsr2l,c
  9182  0008D8  0E00               	movlw	high _N_array
  9183  0008DA  2008               	addwfc	??_is_valid+1,w,c
  9184  0008DC  6EDA               	movwf	fsr2h,c
  9185  0008DE  C054  FFDE         	movff	_N,postinc2
  9186  0008E2  C055  FFDD         	movff	_N+1,postdec2
  9187                           
  9188                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
  9189  0008E6  90D8               	bcf	status,0,c
  9190  0008E8  3458               	rlcf	_counter_step,w,c
  9191  0008EA  6ED9               	movwf	fsr2l,c
  9192  0008EC  3459               	rlcf	_counter_step+1,w,c
  9193  0008EE  6EDA               	movwf	fsr2h,c
  9194  0008F0  0E36               	movlw	low _compartment_number
  9195  0008F2  26D9               	addwf	fsr2l,f,c
  9196  0008F4  0E00               	movlw	high _compartment_number
  9197  0008F6  22DA               	addwfc	fsr2h,f,c
  9198  0008F8  CFDE F007          	movff	postinc2,??_is_valid
  9199  0008FC  CFDD F008          	movff	postdec2,??_is_valid+1
  9200  000900  90D8               	bcf	status,0,c
  9201  000902  3607               	rlcf	??_is_valid,f,c
  9202  000904  3608               	rlcf	??_is_valid+1,f,c
  9203  000906  0E80               	movlw	low _W_array
  9204  000908  2407               	addwf	??_is_valid,w,c
  9205  00090A  6ED9               	movwf	fsr2l,c
  9206  00090C  0E00               	movlw	high _W_array
  9207  00090E  2008               	addwfc	??_is_valid+1,w,c
  9208  000910  6EDA               	movwf	fsr2h,c
  9209  000912  C050  FFDE         	movff	_W,postinc2
  9210  000916  C051  FFDD         	movff	_W+1,postdec2
  9211                           
  9212                           ;keypad.c: 134: }
  9213  00091A  0012               	return	
  9214  00091C                     i2l582:
  9215                           
  9216                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
  9217  00091C  0E63               	movlw	low _current_set2
  9218  00091E  6E01               	movwf	strcmp@s1,c
  9219  000920  0E00               	movlw	high _current_set2
  9220  000922  6E02               	movwf	strcmp@s1+1,c
  9221  000924  0EC4               	movlw	low STR_72
  9222  000926  6E03               	movwf	strcmp@s2,c
  9223  000928  0EFF               	movlw	high STR_72
  9224  00092A  6E04               	movwf	strcmp@s2+1,c
  9225  00092C  EC71  F016         	call	_strcmp	;wreg free
  9226  000930  5001               	movf	?_strcmp,w,c
  9227  000932  1002               	iorwf	?_strcmp+1,w,c
  9228  000934  A4D8               	btfss	status,2,c
  9229  000936  D06A               	goto	i2l584
  9230                           
  9231                           ;keypad.c: 136: B = 1*number;
  9232  000938  C068  F056         	movff	_number,_B
  9233  00093C  C069  F057         	movff	_number+1,_B+1
  9234                           
  9235                           ;keypad.c: 137: S = 1*number;
  9236  000940  C068  F052         	movff	_number,_S
  9237  000944  C069  F053         	movff	_number+1,_S+1
  9238                           
  9239                           ;keypad.c: 138: W = 2*number;
  9240  000948  90D8               	bcf	status,0,c
  9241  00094A  3468               	rlcf	_number,w,c
  9242  00094C  6E50               	movwf	_W,c
  9243  00094E  3469               	rlcf	_number+1,w,c
  9244  000950  6E51               	movwf	_W+1,c
  9245                           
  9246                           ;keypad.c: 139: total_number = 4*number;
  9247  000952  C068  F007         	movff	_number,??_is_valid
  9248  000956  C069  F008         	movff	_number+1,??_is_valid+1
  9249  00095A  90D8               	bcf	status,0,c
  9250  00095C  3607               	rlcf	??_is_valid,f,c
  9251  00095E  3608               	rlcf	??_is_valid+1,f,c
  9252  000960  90D8               	bcf	status,0,c
  9253  000962  3607               	rlcf	??_is_valid,f,c
  9254  000964  3608               	rlcf	??_is_valid+1,f,c
  9255  000966  C007  F0D3         	movff	??_is_valid,_total_number
  9256  00096A  C008  F0D4         	movff	??_is_valid+1,_total_number+1
  9257                           
  9258                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
  9259  00096E  90D8               	bcf	status,0,c
  9260  000970  3458               	rlcf	_counter_step,w,c
  9261  000972  6ED9               	movwf	fsr2l,c
  9262  000974  3459               	rlcf	_counter_step+1,w,c
  9263  000976  6EDA               	movwf	fsr2h,c
  9264  000978  0E36               	movlw	low _compartment_number
  9265  00097A  26D9               	addwf	fsr2l,f,c
  9266  00097C  0E00               	movlw	high _compartment_number
  9267  00097E  22DA               	addwfc	fsr2h,f,c
  9268  000980  CFDE F007          	movff	postinc2,??_is_valid
  9269  000984  CFDD F008          	movff	postdec2,??_is_valid+1
  9270  000988  90D8               	bcf	status,0,c
  9271  00098A  3607               	rlcf	??_is_valid,f,c
  9272  00098C  3608               	rlcf	??_is_valid+1,f,c
  9273  00098E  0EA0               	movlw	low _B_array
  9274  000990  2407               	addwf	??_is_valid,w,c
  9275  000992  6ED9               	movwf	fsr2l,c
  9276  000994  0E00               	movlw	high _B_array
  9277  000996  2008               	addwfc	??_is_valid+1,w,c
  9278  000998  6EDA               	movwf	fsr2h,c
  9279  00099A  C056  FFDE         	movff	_B,postinc2
  9280  00099E  C057  FFDD         	movff	_B+1,postdec2
  9281                           
  9282                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
  9283  0009A2  90D8               	bcf	status,0,c
  9284  0009A4  3458               	rlcf	_counter_step,w,c
  9285  0009A6  6ED9               	movwf	fsr2l,c
  9286  0009A8  3459               	rlcf	_counter_step+1,w,c
  9287  0009AA  6EDA               	movwf	fsr2h,c
  9288  0009AC  0E36               	movlw	low _compartment_number
  9289  0009AE  26D9               	addwf	fsr2l,f,c
  9290  0009B0  0E00               	movlw	high _compartment_number
  9291  0009B2  22DA               	addwfc	fsr2h,f,c
  9292  0009B4  CFDE F007          	movff	postinc2,??_is_valid
  9293  0009B8  CFDD F008          	movff	postdec2,??_is_valid+1
  9294  0009BC  90D8               	bcf	status,0,c
  9295  0009BE  3607               	rlcf	??_is_valid,f,c
  9296  0009C0  3608               	rlcf	??_is_valid+1,f,c
  9297  0009C2  0E00               	movlw	low _S_array
  9298  0009C4  2407               	addwf	??_is_valid,w,c
  9299  0009C6  6ED9               	movwf	fsr2l,c
  9300  0009C8  0E01               	movlw	high _S_array
  9301  0009CA  2008               	addwfc	??_is_valid+1,w,c
  9302  0009CC  6EDA               	movwf	fsr2h,c
  9303  0009CE  C052  FFDE         	movff	_S,postinc2
  9304  0009D2  C053  FFDD         	movff	_S+1,postdec2
  9305                           
  9306                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
  9307  0009D6  90D8               	bcf	status,0,c
  9308  0009D8  3458               	rlcf	_counter_step,w,c
  9309  0009DA  6ED9               	movwf	fsr2l,c
  9310  0009DC  3459               	rlcf	_counter_step+1,w,c
  9311  0009DE  6EDA               	movwf	fsr2h,c
  9312  0009E0  0E36               	movlw	low _compartment_number
  9313  0009E2  26D9               	addwf	fsr2l,f,c
  9314  0009E4  0E00               	movlw	high _compartment_number
  9315  0009E6  22DA               	addwfc	fsr2h,f,c
  9316  0009E8  CFDE F007          	movff	postinc2,??_is_valid
  9317  0009EC  CFDD F008          	movff	postdec2,??_is_valid+1
  9318  0009F0  90D8               	bcf	status,0,c
  9319  0009F2  3607               	rlcf	??_is_valid,f,c
  9320  0009F4  3608               	rlcf	??_is_valid+1,f,c
  9321  0009F6  0E80               	movlw	low _W_array
  9322  0009F8  2407               	addwf	??_is_valid,w,c
  9323  0009FA  6ED9               	movwf	fsr2l,c
  9324  0009FC  0E00               	movlw	high _W_array
  9325  0009FE  2008               	addwfc	??_is_valid+1,w,c
  9326  000A00  6EDA               	movwf	fsr2h,c
  9327  000A02  C050  FFDE         	movff	_W,postinc2
  9328  000A06  C051  FFDD         	movff	_W+1,postdec2
  9329                           
  9330                           ;keypad.c: 145: }
  9331  000A0A  0012               	return	
  9332  000A0C                     i2l584:
  9333                           
  9334                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
  9335  000A0C  0E63               	movlw	low _current_set2
  9336  000A0E  6E01               	movwf	strcmp@s1,c
  9337  000A10  0E00               	movlw	high _current_set2
  9338  000A12  6E02               	movwf	strcmp@s1+1,c
  9339  000A14  0EBA               	movlw	low STR_73
  9340  000A16  6E03               	movwf	strcmp@s2,c
  9341  000A18  0EFF               	movlw	high STR_73
  9342  000A1A  6E04               	movwf	strcmp@s2+1,c
  9343  000A1C  EC71  F016         	call	_strcmp	;wreg free
  9344  000A20  5001               	movf	?_strcmp,w,c
  9345  000A22  1002               	iorwf	?_strcmp+1,w,c
  9346  000A24  A4D8               	btfss	status,2,c
  9347  000A26  D06A               	goto	i2l586
  9348                           
  9349                           ;keypad.c: 147: B = 2*number;
  9350  000A28  90D8               	bcf	status,0,c
  9351  000A2A  3468               	rlcf	_number,w,c
  9352  000A2C  6E56               	movwf	_B,c
  9353  000A2E  3469               	rlcf	_number+1,w,c
  9354  000A30  6E57               	movwf	_B+1,c
  9355                           
  9356                           ;keypad.c: 148: S = 1*number;
  9357  000A32  C068  F052         	movff	_number,_S
  9358  000A36  C069  F053         	movff	_number+1,_S+1
  9359                           
  9360                           ;keypad.c: 149: W = number;
  9361  000A3A  C068  F050         	movff	_number,_W
  9362  000A3E  C069  F051         	movff	_number+1,_W+1
  9363                           
  9364                           ;keypad.c: 150: total_number = 4*number;
  9365  000A42  C068  F007         	movff	_number,??_is_valid
  9366  000A46  C069  F008         	movff	_number+1,??_is_valid+1
  9367  000A4A  90D8               	bcf	status,0,c
  9368  000A4C  3607               	rlcf	??_is_valid,f,c
  9369  000A4E  3608               	rlcf	??_is_valid+1,f,c
  9370  000A50  90D8               	bcf	status,0,c
  9371  000A52  3607               	rlcf	??_is_valid,f,c
  9372  000A54  3608               	rlcf	??_is_valid+1,f,c
  9373  000A56  C007  F0D3         	movff	??_is_valid,_total_number
  9374  000A5A  C008  F0D4         	movff	??_is_valid+1,_total_number+1
  9375                           
  9376                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
  9377  000A5E  90D8               	bcf	status,0,c
  9378  000A60  3458               	rlcf	_counter_step,w,c
  9379  000A62  6ED9               	movwf	fsr2l,c
  9380  000A64  3459               	rlcf	_counter_step+1,w,c
  9381  000A66  6EDA               	movwf	fsr2h,c
  9382  000A68  0E36               	movlw	low _compartment_number
  9383  000A6A  26D9               	addwf	fsr2l,f,c
  9384  000A6C  0E00               	movlw	high _compartment_number
  9385  000A6E  22DA               	addwfc	fsr2h,f,c
  9386  000A70  CFDE F007          	movff	postinc2,??_is_valid
  9387  000A74  CFDD F008          	movff	postdec2,??_is_valid+1
  9388  000A78  90D8               	bcf	status,0,c
  9389  000A7A  3607               	rlcf	??_is_valid,f,c
  9390  000A7C  3608               	rlcf	??_is_valid+1,f,c
  9391  000A7E  0EA0               	movlw	low _B_array
  9392  000A80  2407               	addwf	??_is_valid,w,c
  9393  000A82  6ED9               	movwf	fsr2l,c
  9394  000A84  0E00               	movlw	high _B_array
  9395  000A86  2008               	addwfc	??_is_valid+1,w,c
  9396  000A88  6EDA               	movwf	fsr2h,c
  9397  000A8A  C056  FFDE         	movff	_B,postinc2
  9398  000A8E  C057  FFDD         	movff	_B+1,postdec2
  9399                           
  9400                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
  9401  000A92  90D8               	bcf	status,0,c
  9402  000A94  3458               	rlcf	_counter_step,w,c
  9403  000A96  6ED9               	movwf	fsr2l,c
  9404  000A98  3459               	rlcf	_counter_step+1,w,c
  9405  000A9A  6EDA               	movwf	fsr2h,c
  9406  000A9C  0E36               	movlw	low _compartment_number
  9407  000A9E  26D9               	addwf	fsr2l,f,c
  9408  000AA0  0E00               	movlw	high _compartment_number
  9409  000AA2  22DA               	addwfc	fsr2h,f,c
  9410  000AA4  CFDE F007          	movff	postinc2,??_is_valid
  9411  000AA8  CFDD F008          	movff	postdec2,??_is_valid+1
  9412  000AAC  90D8               	bcf	status,0,c
  9413  000AAE  3607               	rlcf	??_is_valid,f,c
  9414  000AB0  3608               	rlcf	??_is_valid+1,f,c
  9415  000AB2  0E00               	movlw	low _S_array
  9416  000AB4  2407               	addwf	??_is_valid,w,c
  9417  000AB6  6ED9               	movwf	fsr2l,c
  9418  000AB8  0E01               	movlw	high _S_array
  9419  000ABA  2008               	addwfc	??_is_valid+1,w,c
  9420  000ABC  6EDA               	movwf	fsr2h,c
  9421  000ABE  C052  FFDE         	movff	_S,postinc2
  9422  000AC2  C053  FFDD         	movff	_S+1,postdec2
  9423                           
  9424                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
  9425  000AC6  90D8               	bcf	status,0,c
  9426  000AC8  3458               	rlcf	_counter_step,w,c
  9427  000ACA  6ED9               	movwf	fsr2l,c
  9428  000ACC  3459               	rlcf	_counter_step+1,w,c
  9429  000ACE  6EDA               	movwf	fsr2h,c
  9430  000AD0  0E36               	movlw	low _compartment_number
  9431  000AD2  26D9               	addwf	fsr2l,f,c
  9432  000AD4  0E00               	movlw	high _compartment_number
  9433  000AD6  22DA               	addwfc	fsr2h,f,c
  9434  000AD8  CFDE F007          	movff	postinc2,??_is_valid
  9435  000ADC  CFDD F008          	movff	postdec2,??_is_valid+1
  9436  000AE0  90D8               	bcf	status,0,c
  9437  000AE2  3607               	rlcf	??_is_valid,f,c
  9438  000AE4  3608               	rlcf	??_is_valid+1,f,c
  9439  000AE6  0E80               	movlw	low _W_array
  9440  000AE8  2407               	addwf	??_is_valid,w,c
  9441  000AEA  6ED9               	movwf	fsr2l,c
  9442  000AEC  0E00               	movlw	high _W_array
  9443  000AEE  2008               	addwfc	??_is_valid+1,w,c
  9444  000AF0  6EDA               	movwf	fsr2h,c
  9445  000AF2  C050  FFDE         	movff	_W,postinc2
  9446  000AF6  C051  FFDD         	movff	_W+1,postdec2
  9447                           
  9448                           ;keypad.c: 155: }
  9449  000AFA  0012               	return	
  9450  000AFC                     i2l586:
  9451                           
  9452                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
  9453  000AFC  0E63               	movlw	low _current_set2
  9454  000AFE  6E01               	movwf	strcmp@s1,c
  9455  000B00  0E00               	movlw	high _current_set2
  9456  000B02  6E02               	movwf	strcmp@s1+1,c
  9457  000B04  0EB0               	movlw	low STR_74
  9458  000B06  6E03               	movwf	strcmp@s2,c
  9459  000B08  0EFF               	movlw	high STR_74
  9460  000B0A  6E04               	movwf	strcmp@s2+1,c
  9461  000B0C  EC71  F016         	call	_strcmp	;wreg free
  9462  000B10  5001               	movf	?_strcmp,w,c
  9463  000B12  1002               	iorwf	?_strcmp+1,w,c
  9464  000B14  A4D8               	btfss	status,2,c
  9465  000B16  D06A               	goto	i2l588
  9466                           
  9467                           ;keypad.c: 157: B = 2*number;
  9468  000B18  90D8               	bcf	status,0,c
  9469  000B1A  3468               	rlcf	_number,w,c
  9470  000B1C  6E56               	movwf	_B,c
  9471  000B1E  3469               	rlcf	_number+1,w,c
  9472  000B20  6E57               	movwf	_B+1,c
  9473                           
  9474                           ;keypad.c: 158: N = 1*number;
  9475  000B22  C068  F054         	movff	_number,_N
  9476  000B26  C069  F055         	movff	_number+1,_N+1
  9477                           
  9478                           ;keypad.c: 159: W = 1*number;
  9479  000B2A  C068  F050         	movff	_number,_W
  9480  000B2E  C069  F051         	movff	_number+1,_W+1
  9481                           
  9482                           ;keypad.c: 160: total_number = 4*number;
  9483  000B32  C068  F007         	movff	_number,??_is_valid
  9484  000B36  C069  F008         	movff	_number+1,??_is_valid+1
  9485  000B3A  90D8               	bcf	status,0,c
  9486  000B3C  3607               	rlcf	??_is_valid,f,c
  9487  000B3E  3608               	rlcf	??_is_valid+1,f,c
  9488  000B40  90D8               	bcf	status,0,c
  9489  000B42  3607               	rlcf	??_is_valid,f,c
  9490  000B44  3608               	rlcf	??_is_valid+1,f,c
  9491  000B46  C007  F0D3         	movff	??_is_valid,_total_number
  9492  000B4A  C008  F0D4         	movff	??_is_valid+1,_total_number+1
  9493                           
  9494                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
  9495  000B4E  90D8               	bcf	status,0,c
  9496  000B50  3458               	rlcf	_counter_step,w,c
  9497  000B52  6ED9               	movwf	fsr2l,c
  9498  000B54  3459               	rlcf	_counter_step+1,w,c
  9499  000B56  6EDA               	movwf	fsr2h,c
  9500  000B58  0E36               	movlw	low _compartment_number
  9501  000B5A  26D9               	addwf	fsr2l,f,c
  9502  000B5C  0E00               	movlw	high _compartment_number
  9503  000B5E  22DA               	addwfc	fsr2h,f,c
  9504  000B60  CFDE F007          	movff	postinc2,??_is_valid
  9505  000B64  CFDD F008          	movff	postdec2,??_is_valid+1
  9506  000B68  90D8               	bcf	status,0,c
  9507  000B6A  3607               	rlcf	??_is_valid,f,c
  9508  000B6C  3608               	rlcf	??_is_valid+1,f,c
  9509  000B6E  0EA0               	movlw	low _B_array
  9510  000B70  2407               	addwf	??_is_valid,w,c
  9511  000B72  6ED9               	movwf	fsr2l,c
  9512  000B74  0E00               	movlw	high _B_array
  9513  000B76  2008               	addwfc	??_is_valid+1,w,c
  9514  000B78  6EDA               	movwf	fsr2h,c
  9515  000B7A  C056  FFDE         	movff	_B,postinc2
  9516  000B7E  C057  FFDD         	movff	_B+1,postdec2
  9517                           
  9518                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
  9519  000B82  90D8               	bcf	status,0,c
  9520  000B84  3458               	rlcf	_counter_step,w,c
  9521  000B86  6ED9               	movwf	fsr2l,c
  9522  000B88  3459               	rlcf	_counter_step+1,w,c
  9523  000B8A  6EDA               	movwf	fsr2h,c
  9524  000B8C  0E36               	movlw	low _compartment_number
  9525  000B8E  26D9               	addwf	fsr2l,f,c
  9526  000B90  0E00               	movlw	high _compartment_number
  9527  000B92  22DA               	addwfc	fsr2h,f,c
  9528  000B94  CFDE F007          	movff	postinc2,??_is_valid
  9529  000B98  CFDD F008          	movff	postdec2,??_is_valid+1
  9530  000B9C  90D8               	bcf	status,0,c
  9531  000B9E  3607               	rlcf	??_is_valid,f,c
  9532  000BA0  3608               	rlcf	??_is_valid+1,f,c
  9533  000BA2  0E90               	movlw	low _N_array
  9534  000BA4  2407               	addwf	??_is_valid,w,c
  9535  000BA6  6ED9               	movwf	fsr2l,c
  9536  000BA8  0E00               	movlw	high _N_array
  9537  000BAA  2008               	addwfc	??_is_valid+1,w,c
  9538  000BAC  6EDA               	movwf	fsr2h,c
  9539  000BAE  C054  FFDE         	movff	_N,postinc2
  9540  000BB2  C055  FFDD         	movff	_N+1,postdec2
  9541                           
  9542                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
  9543  000BB6  90D8               	bcf	status,0,c
  9544  000BB8  3458               	rlcf	_counter_step,w,c
  9545  000BBA  6ED9               	movwf	fsr2l,c
  9546  000BBC  3459               	rlcf	_counter_step+1,w,c
  9547  000BBE  6EDA               	movwf	fsr2h,c
  9548  000BC0  0E36               	movlw	low _compartment_number
  9549  000BC2  26D9               	addwf	fsr2l,f,c
  9550  000BC4  0E00               	movlw	high _compartment_number
  9551  000BC6  22DA               	addwfc	fsr2h,f,c
  9552  000BC8  CFDE F007          	movff	postinc2,??_is_valid
  9553  000BCC  CFDD F008          	movff	postdec2,??_is_valid+1
  9554  000BD0  90D8               	bcf	status,0,c
  9555  000BD2  3607               	rlcf	??_is_valid,f,c
  9556  000BD4  3608               	rlcf	??_is_valid+1,f,c
  9557  000BD6  0E80               	movlw	low _W_array
  9558  000BD8  2407               	addwf	??_is_valid,w,c
  9559  000BDA  6ED9               	movwf	fsr2l,c
  9560  000BDC  0E00               	movlw	high _W_array
  9561  000BDE  2008               	addwfc	??_is_valid+1,w,c
  9562  000BE0  6EDA               	movwf	fsr2h,c
  9563  000BE2  C050  FFDE         	movff	_W,postinc2
  9564  000BE6  C051  FFDD         	movff	_W+1,postdec2
  9565                           
  9566                           ;keypad.c: 165: }
  9567  000BEA  0012               	return	
  9568  000BEC                     i2l588:
  9569                           
  9570                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
  9571  000BEC  0E63               	movlw	low _current_set2
  9572  000BEE  6E01               	movwf	strcmp@s1,c
  9573  000BF0  0E00               	movlw	high _current_set2
  9574  000BF2  6E02               	movwf	strcmp@s1+1,c
  9575  000BF4  0EB5               	movlw	low STR_75
  9576  000BF6  6E03               	movwf	strcmp@s2,c
  9577  000BF8  0EFF               	movlw	high STR_75
  9578  000BFA  6E04               	movwf	strcmp@s2+1,c
  9579  000BFC  EC71  F016         	call	_strcmp	;wreg free
  9580  000C00  5001               	movf	?_strcmp,w,c
  9581  000C02  1002               	iorwf	?_strcmp+1,w,c
  9582  000C04  A4D8               	btfss	status,2,c
  9583  000C06  D06A               	goto	i2l590
  9584                           
  9585                           ;keypad.c: 167: B = 1*number;
  9586  000C08  C068  F056         	movff	_number,_B
  9587  000C0C  C069  F057         	movff	_number+1,_B+1
  9588                           
  9589                           ;keypad.c: 168: N = 2*number;
  9590  000C10  90D8               	bcf	status,0,c
  9591  000C12  3468               	rlcf	_number,w,c
  9592  000C14  6E54               	movwf	_N,c
  9593  000C16  3469               	rlcf	_number+1,w,c
  9594  000C18  6E55               	movwf	_N+1,c
  9595                           
  9596                           ;keypad.c: 169: W = 1*number;
  9597  000C1A  C068  F050         	movff	_number,_W
  9598  000C1E  C069  F051         	movff	_number+1,_W+1
  9599                           
  9600                           ;keypad.c: 170: total_number = 4*number;
  9601  000C22  C068  F007         	movff	_number,??_is_valid
  9602  000C26  C069  F008         	movff	_number+1,??_is_valid+1
  9603  000C2A  90D8               	bcf	status,0,c
  9604  000C2C  3607               	rlcf	??_is_valid,f,c
  9605  000C2E  3608               	rlcf	??_is_valid+1,f,c
  9606  000C30  90D8               	bcf	status,0,c
  9607  000C32  3607               	rlcf	??_is_valid,f,c
  9608  000C34  3608               	rlcf	??_is_valid+1,f,c
  9609  000C36  C007  F0D3         	movff	??_is_valid,_total_number
  9610  000C3A  C008  F0D4         	movff	??_is_valid+1,_total_number+1
  9611                           
  9612                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
  9613  000C3E  90D8               	bcf	status,0,c
  9614  000C40  3458               	rlcf	_counter_step,w,c
  9615  000C42  6ED9               	movwf	fsr2l,c
  9616  000C44  3459               	rlcf	_counter_step+1,w,c
  9617  000C46  6EDA               	movwf	fsr2h,c
  9618  000C48  0E36               	movlw	low _compartment_number
  9619  000C4A  26D9               	addwf	fsr2l,f,c
  9620  000C4C  0E00               	movlw	high _compartment_number
  9621  000C4E  22DA               	addwfc	fsr2h,f,c
  9622  000C50  CFDE F007          	movff	postinc2,??_is_valid
  9623  000C54  CFDD F008          	movff	postdec2,??_is_valid+1
  9624  000C58  90D8               	bcf	status,0,c
  9625  000C5A  3607               	rlcf	??_is_valid,f,c
  9626  000C5C  3608               	rlcf	??_is_valid+1,f,c
  9627  000C5E  0EA0               	movlw	low _B_array
  9628  000C60  2407               	addwf	??_is_valid,w,c
  9629  000C62  6ED9               	movwf	fsr2l,c
  9630  000C64  0E00               	movlw	high _B_array
  9631  000C66  2008               	addwfc	??_is_valid+1,w,c
  9632  000C68  6EDA               	movwf	fsr2h,c
  9633  000C6A  C056  FFDE         	movff	_B,postinc2
  9634  000C6E  C057  FFDD         	movff	_B+1,postdec2
  9635                           
  9636                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
  9637  000C72  90D8               	bcf	status,0,c
  9638  000C74  3458               	rlcf	_counter_step,w,c
  9639  000C76  6ED9               	movwf	fsr2l,c
  9640  000C78  3459               	rlcf	_counter_step+1,w,c
  9641  000C7A  6EDA               	movwf	fsr2h,c
  9642  000C7C  0E36               	movlw	low _compartment_number
  9643  000C7E  26D9               	addwf	fsr2l,f,c
  9644  000C80  0E00               	movlw	high _compartment_number
  9645  000C82  22DA               	addwfc	fsr2h,f,c
  9646  000C84  CFDE F007          	movff	postinc2,??_is_valid
  9647  000C88  CFDD F008          	movff	postdec2,??_is_valid+1
  9648  000C8C  90D8               	bcf	status,0,c
  9649  000C8E  3607               	rlcf	??_is_valid,f,c
  9650  000C90  3608               	rlcf	??_is_valid+1,f,c
  9651  000C92  0E90               	movlw	low _N_array
  9652  000C94  2407               	addwf	??_is_valid,w,c
  9653  000C96  6ED9               	movwf	fsr2l,c
  9654  000C98  0E00               	movlw	high _N_array
  9655  000C9A  2008               	addwfc	??_is_valid+1,w,c
  9656  000C9C  6EDA               	movwf	fsr2h,c
  9657  000C9E  C054  FFDE         	movff	_N,postinc2
  9658  000CA2  C055  FFDD         	movff	_N+1,postdec2
  9659                           
  9660                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
  9661  000CA6  90D8               	bcf	status,0,c
  9662  000CA8  3458               	rlcf	_counter_step,w,c
  9663  000CAA  6ED9               	movwf	fsr2l,c
  9664  000CAC  3459               	rlcf	_counter_step+1,w,c
  9665  000CAE  6EDA               	movwf	fsr2h,c
  9666  000CB0  0E36               	movlw	low _compartment_number
  9667  000CB2  26D9               	addwf	fsr2l,f,c
  9668  000CB4  0E00               	movlw	high _compartment_number
  9669  000CB6  22DA               	addwfc	fsr2h,f,c
  9670  000CB8  CFDE F007          	movff	postinc2,??_is_valid
  9671  000CBC  CFDD F008          	movff	postdec2,??_is_valid+1
  9672  000CC0  90D8               	bcf	status,0,c
  9673  000CC2  3607               	rlcf	??_is_valid,f,c
  9674  000CC4  3608               	rlcf	??_is_valid+1,f,c
  9675  000CC6  0E80               	movlw	low _W_array
  9676  000CC8  2407               	addwf	??_is_valid,w,c
  9677  000CCA  6ED9               	movwf	fsr2l,c
  9678  000CCC  0E00               	movlw	high _W_array
  9679  000CCE  2008               	addwfc	??_is_valid+1,w,c
  9680  000CD0  6EDA               	movwf	fsr2h,c
  9681  000CD2  C050  FFDE         	movff	_W,postinc2
  9682  000CD6  C051  FFDD         	movff	_W+1,postdec2
  9683                           
  9684                           ;keypad.c: 175: }
  9685  000CDA  0012               	return	
  9686  000CDC                     i2l590:
  9687                           
  9688                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
  9689  000CDC  0E63               	movlw	low _current_set2
  9690  000CDE  6E01               	movwf	strcmp@s1,c
  9691  000CE0  0E00               	movlw	high _current_set2
  9692  000CE2  6E02               	movwf	strcmp@s1+1,c
  9693  000CE4  0EAB               	movlw	low STR_76
  9694  000CE6  6E03               	movwf	strcmp@s2,c
  9695  000CE8  0EFF               	movlw	high STR_76
  9696  000CEA  6E04               	movwf	strcmp@s2+1,c
  9697  000CEC  EC71  F016         	call	_strcmp	;wreg free
  9698  000CF0  5001               	movf	?_strcmp,w,c
  9699  000CF2  1002               	iorwf	?_strcmp+1,w,c
  9700  000CF4  A4D8               	btfss	status,2,c
  9701  000CF6  D055               	goto	i2l592
  9702                           
  9703                           ;keypad.c: 177: B = 1*number;
  9704  000CF8  C068  F056         	movff	_number,_B
  9705  000CFC  C069  F057         	movff	_number+1,_B+1
  9706                           
  9707                           ;keypad.c: 178: N = 3*number;
  9708  000D00  C068  F001         	movff	_number,i2___wmul@multiplier
  9709  000D04  C069  F002         	movff	_number+1,i2___wmul@multiplier+1
  9710  000D08  0E00               	movlw	0
  9711  000D0A  6E04               	movwf	i2___wmul@multiplicand+1,c
  9712  000D0C  0E03               	movlw	3
  9713  000D0E  6E03               	movwf	i2___wmul@multiplicand,c
  9714  000D10  EC55  F017         	call	i2___wmul	;wreg free
  9715  000D14  C001  F054         	movff	?i2___wmul,_N
  9716  000D18  C002  F055         	movff	?i2___wmul+1,_N+1
  9717                           
  9718                           ;keypad.c: 179: total_number = 4*number;
  9719  000D1C  C068  F007         	movff	_number,??_is_valid
  9720  000D20  C069  F008         	movff	_number+1,??_is_valid+1
  9721  000D24  90D8               	bcf	status,0,c
  9722  000D26  3607               	rlcf	??_is_valid,f,c
  9723  000D28  3608               	rlcf	??_is_valid+1,f,c
  9724  000D2A  90D8               	bcf	status,0,c
  9725  000D2C  3607               	rlcf	??_is_valid,f,c
  9726  000D2E  3608               	rlcf	??_is_valid+1,f,c
  9727  000D30  C007  F0D3         	movff	??_is_valid,_total_number
  9728  000D34  C008  F0D4         	movff	??_is_valid+1,_total_number+1
  9729                           
  9730                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
  9731  000D38  90D8               	bcf	status,0,c
  9732  000D3A  3458               	rlcf	_counter_step,w,c
  9733  000D3C  6ED9               	movwf	fsr2l,c
  9734  000D3E  3459               	rlcf	_counter_step+1,w,c
  9735  000D40  6EDA               	movwf	fsr2h,c
  9736  000D42  0E36               	movlw	low _compartment_number
  9737  000D44  26D9               	addwf	fsr2l,f,c
  9738  000D46  0E00               	movlw	high _compartment_number
  9739  000D48  22DA               	addwfc	fsr2h,f,c
  9740  000D4A  CFDE F007          	movff	postinc2,??_is_valid
  9741  000D4E  CFDD F008          	movff	postdec2,??_is_valid+1
  9742  000D52  90D8               	bcf	status,0,c
  9743  000D54  3607               	rlcf	??_is_valid,f,c
  9744  000D56  3608               	rlcf	??_is_valid+1,f,c
  9745  000D58  0EA0               	movlw	low _B_array
  9746  000D5A  2407               	addwf	??_is_valid,w,c
  9747  000D5C  6ED9               	movwf	fsr2l,c
  9748  000D5E  0E00               	movlw	high _B_array
  9749  000D60  2008               	addwfc	??_is_valid+1,w,c
  9750  000D62  6EDA               	movwf	fsr2h,c
  9751  000D64  C056  FFDE         	movff	_B,postinc2
  9752  000D68  C057  FFDD         	movff	_B+1,postdec2
  9753                           
  9754                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
  9755  000D6C  90D8               	bcf	status,0,c
  9756  000D6E  3458               	rlcf	_counter_step,w,c
  9757  000D70  6ED9               	movwf	fsr2l,c
  9758  000D72  3459               	rlcf	_counter_step+1,w,c
  9759  000D74  6EDA               	movwf	fsr2h,c
  9760  000D76  0E36               	movlw	low _compartment_number
  9761  000D78  26D9               	addwf	fsr2l,f,c
  9762  000D7A  0E00               	movlw	high _compartment_number
  9763  000D7C  22DA               	addwfc	fsr2h,f,c
  9764  000D7E  CFDE F007          	movff	postinc2,??_is_valid
  9765  000D82  CFDD F008          	movff	postdec2,??_is_valid+1
  9766  000D86  90D8               	bcf	status,0,c
  9767  000D88  3607               	rlcf	??_is_valid,f,c
  9768  000D8A  3608               	rlcf	??_is_valid+1,f,c
  9769  000D8C  0E90               	movlw	low _N_array
  9770  000D8E  2407               	addwf	??_is_valid,w,c
  9771  000D90  6ED9               	movwf	fsr2l,c
  9772  000D92  0E00               	movlw	high _N_array
  9773  000D94  2008               	addwfc	??_is_valid+1,w,c
  9774  000D96  6EDA               	movwf	fsr2h,c
  9775  000D98  C054  FFDE         	movff	_N,postinc2
  9776  000D9C  C055  FFDD         	movff	_N+1,postdec2
  9777                           
  9778                           ;keypad.c: 184: }
  9779  000DA0  0012               	return	
  9780  000DA2                     i2l592:
  9781                           
  9782                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
  9783  000DA2  0E63               	movlw	low _current_set2
  9784  000DA4  6E01               	movwf	strcmp@s1,c
  9785  000DA6  0E00               	movlw	high _current_set2
  9786  000DA8  6E02               	movwf	strcmp@s1+1,c
  9787  000DAA  0EC9               	movlw	low STR_77
  9788  000DAC  6E03               	movwf	strcmp@s2,c
  9789  000DAE  0EFF               	movlw	high STR_77
  9790  000DB0  6E04               	movwf	strcmp@s2+1,c
  9791  000DB2  EC71  F016         	call	_strcmp	;wreg free
  9792  000DB6  5001               	movf	?_strcmp,w,c
  9793  000DB8  1002               	iorwf	?_strcmp+1,w,c
  9794  000DBA  A4D8               	btfss	status,2,c
  9795  000DBC  0012               	return	
  9796                           
  9797                           ;keypad.c: 186: B = 1*number;
  9798  000DBE  C068  F056         	movff	_number,_B
  9799  000DC2  C069  F057         	movff	_number+1,_B+1
  9800                           
  9801                           ;keypad.c: 187: W = 3*number;
  9802  000DC6  C068  F001         	movff	_number,i2___wmul@multiplier
  9803  000DCA  C069  F002         	movff	_number+1,i2___wmul@multiplier+1
  9804  000DCE  0E00               	movlw	0
  9805  000DD0  6E04               	movwf	i2___wmul@multiplicand+1,c
  9806  000DD2  0E03               	movlw	3
  9807  000DD4  6E03               	movwf	i2___wmul@multiplicand,c
  9808  000DD6  EC55  F017         	call	i2___wmul	;wreg free
  9809  000DDA  C001  F050         	movff	?i2___wmul,_W
  9810  000DDE  C002  F051         	movff	?i2___wmul+1,_W+1
  9811                           
  9812                           ;keypad.c: 188: total_number = 4*number;
  9813  000DE2  C068  F007         	movff	_number,??_is_valid
  9814  000DE6  C069  F008         	movff	_number+1,??_is_valid+1
  9815  000DEA  90D8               	bcf	status,0,c
  9816  000DEC  3607               	rlcf	??_is_valid,f,c
  9817  000DEE  3608               	rlcf	??_is_valid+1,f,c
  9818  000DF0  90D8               	bcf	status,0,c
  9819  000DF2  3607               	rlcf	??_is_valid,f,c
  9820  000DF4  3608               	rlcf	??_is_valid+1,f,c
  9821  000DF6  C007  F0D3         	movff	??_is_valid,_total_number
  9822  000DFA  C008  F0D4         	movff	??_is_valid+1,_total_number+1
  9823                           
  9824                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
  9825  000DFE  90D8               	bcf	status,0,c
  9826  000E00  3458               	rlcf	_counter_step,w,c
  9827  000E02  6ED9               	movwf	fsr2l,c
  9828  000E04  3459               	rlcf	_counter_step+1,w,c
  9829  000E06  6EDA               	movwf	fsr2h,c
  9830  000E08  0E36               	movlw	low _compartment_number
  9831  000E0A  26D9               	addwf	fsr2l,f,c
  9832  000E0C  0E00               	movlw	high _compartment_number
  9833  000E0E  22DA               	addwfc	fsr2h,f,c
  9834  000E10  CFDE F007          	movff	postinc2,??_is_valid
  9835  000E14  CFDD F008          	movff	postdec2,??_is_valid+1
  9836  000E18  90D8               	bcf	status,0,c
  9837  000E1A  3607               	rlcf	??_is_valid,f,c
  9838  000E1C  3608               	rlcf	??_is_valid+1,f,c
  9839  000E1E  0EA0               	movlw	low _B_array
  9840  000E20  2407               	addwf	??_is_valid,w,c
  9841  000E22  6ED9               	movwf	fsr2l,c
  9842  000E24  0E00               	movlw	high _B_array
  9843  000E26  2008               	addwfc	??_is_valid+1,w,c
  9844  000E28  6EDA               	movwf	fsr2h,c
  9845  000E2A  C056  FFDE         	movff	_B,postinc2
  9846  000E2E  C057  FFDD         	movff	_B+1,postdec2
  9847                           
  9848                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
  9849  000E32  90D8               	bcf	status,0,c
  9850  000E34  3458               	rlcf	_counter_step,w,c
  9851  000E36  6ED9               	movwf	fsr2l,c
  9852  000E38  3459               	rlcf	_counter_step+1,w,c
  9853  000E3A  6EDA               	movwf	fsr2h,c
  9854  000E3C  0E36               	movlw	low _compartment_number
  9855  000E3E  26D9               	addwf	fsr2l,f,c
  9856  000E40  0E00               	movlw	high _compartment_number
  9857  000E42  22DA               	addwfc	fsr2h,f,c
  9858  000E44  CFDE F007          	movff	postinc2,??_is_valid
  9859  000E48  CFDD F008          	movff	postdec2,??_is_valid+1
  9860  000E4C  90D8               	bcf	status,0,c
  9861  000E4E  3607               	rlcf	??_is_valid,f,c
  9862  000E50  3608               	rlcf	??_is_valid+1,f,c
  9863  000E52  0E80               	movlw	low _W_array
  9864  000E54  2407               	addwf	??_is_valid,w,c
  9865  000E56  6ED9               	movwf	fsr2l,c
  9866  000E58  0E00               	movlw	high _W_array
  9867  000E5A  2008               	addwfc	??_is_valid+1,w,c
  9868  000E5C  6EDA               	movwf	fsr2h,c
  9869  000E5E  C050  FFDE         	movff	_W,postinc2
  9870  000E62  C051  FFDD         	movff	_W+1,postdec2
  9871  000E66  0012               	return	
  9872  000E68                     __end_of_is_valid:
  9873                           	opt stack 0
  9874                           pclatu	equ	0xFFB
  9875                           pclath	equ	0xFFA
  9876                           tblptru	equ	0xFF8
  9877                           tblptrh	equ	0xFF7
  9878                           tblptrl	equ	0xFF6
  9879                           tablat	equ	0xFF5
  9880                           prodh	equ	0xFF4
  9881                           prodl	equ	0xFF3
  9882                           intcon	equ	0xFF2
  9883                           intcon3	equ	0xFF0
  9884                           indf0	equ	0xFEF
  9885                           postinc0	equ	0xFEE
  9886                           fsr0h	equ	0xFEA
  9887                           fsr0l	equ	0xFE9
  9888                           wreg	equ	0xFE8
  9889                           indf1	equ	0xFE7
  9890                           postinc1	equ	0xFE6
  9891                           postdec1	equ	0xFE5
  9892                           fsr1h	equ	0xFE2
  9893                           fsr1l	equ	0xFE1
  9894                           indf2	equ	0xFDF
  9895                           postinc2	equ	0xFDE
  9896                           postdec2	equ	0xFDD
  9897                           fsr2h	equ	0xFDA
  9898                           fsr2l	equ	0xFD9
  9899                           status	equ	0xFD8
  9900                           
  9901 ;; *************** function i2___wmul *****************
  9902 ;; Defined at:
  9903 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;  multiplier      2    0[COMRAM] unsigned int 
  9906 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;  __wmul          2    4[COMRAM] unsigned int 
  9909 ;; Return value:  Size  Location     Type
  9910 ;;                  2    0[COMRAM] unsigned int 
  9911 ;; Registers used:
  9912 ;;		wreg, status,2, status,0, prodl, prodh
  9913 ;; Tracked objects:
  9914 ;;		On entry : 0/0
  9915 ;;		On exit  : 0/0
  9916 ;;		Unchanged: 0/0
  9917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9922 ;;Total ram usage:        6 bytes
  9923 ;; Hardware stack levels used:    1
  9924 ;; This function calls:
  9925 ;;		Nothing
  9926 ;; This function is called by:
  9927 ;;		_interruptHandler
  9928 ;;		_is_valid
  9929 ;; This function uses a non-reentrant model
  9930 ;;
  9931                           
  9932                           	psect	text29
  9933  002EAA                     __ptext29:
  9934                           	opt stack 0
  9935  002EAA                     i2___wmul:
  9936                           	opt stack 26
  9937                           
  9938                           ;incstack = 0
  9939  002EAA  5001               	movf	i2___wmul@multiplier,w,c
  9940  002EAC  0203               	mulwf	i2___wmul@multiplicand,c
  9941  002EAE  CFF3 F005          	movff	prodl,i2___wmul@product
  9942  002EB2  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9943  002EB6  5001               	movf	i2___wmul@multiplier,w,c
  9944  002EB8  0204               	mulwf	i2___wmul@multiplicand+1,c
  9945  002EBA  50F3               	movf	prodl,w,c
  9946  002EBC  2606               	addwf	i2___wmul@product+1,f,c
  9947  002EBE  5002               	movf	i2___wmul@multiplier+1,w,c
  9948  002EC0  0203               	mulwf	i2___wmul@multiplicand,c
  9949  002EC2  50F3               	movf	prodl,w,c
  9950  002EC4  2606               	addwf	i2___wmul@product+1,f,c
  9951  002EC6  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9952  002ECA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9953  002ECE  0012               	return	
  9954  002ED0                     __end_ofi2___wmul:
  9955                           	opt stack 0
  9956                           pclatu	equ	0xFFB
  9957                           pclath	equ	0xFFA
  9958                           tblptru	equ	0xFF8
  9959                           tblptrh	equ	0xFF7
  9960                           tblptrl	equ	0xFF6
  9961                           tablat	equ	0xFF5
  9962                           prodh	equ	0xFF4
  9963                           prodl	equ	0xFF3
  9964                           intcon	equ	0xFF2
  9965                           intcon3	equ	0xFF0
  9966                           indf0	equ	0xFEF
  9967                           postinc0	equ	0xFEE
  9968                           fsr0h	equ	0xFEA
  9969                           fsr0l	equ	0xFE9
  9970                           wreg	equ	0xFE8
  9971                           indf1	equ	0xFE7
  9972                           postinc1	equ	0xFE6
  9973                           postdec1	equ	0xFE5
  9974                           fsr1h	equ	0xFE2
  9975                           fsr1l	equ	0xFE1
  9976                           indf2	equ	0xFDF
  9977                           postinc2	equ	0xFDE
  9978                           postdec2	equ	0xFDD
  9979                           fsr2h	equ	0xFDA
  9980                           fsr2l	equ	0xFD9
  9981                           status	equ	0xFD8
  9982                           
  9983 ;; *************** function _strcmp *****************
  9984 ;; Defined at:
  9985 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  9988 ;;		 -> current_set2(5), 
  9989 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  9990 ;;		 -> STR_77(5), STR_76(5), STR_75(5), STR_74(5), 
  9991 ;;		 -> STR_73(5), STR_72(5), STR_71(5), STR_70(4), 
  9992 ;;		 -> STR_69(4), STR_68(4), STR_67(4), STR_66(4), 
  9993 ;;		 -> STR_65(4), STR_64(3), STR_63(3), STR_62(3), 
  9994 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_58(2), 
  9995 ;; Auto vars:     Size  Location     Type
  9996 ;;  r               1    5[COMRAM] char 
  9997 ;; Return value:  Size  Location     Type
  9998 ;;                  2    0[COMRAM] int 
  9999 ;; Registers used:
 10000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10001 ;; Tracked objects:
 10002 ;;		On entry : 0/0
 10003 ;;		On exit  : 0/0
 10004 ;;		Unchanged: 0/0
 10005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;Total ram usage:        6 bytes
 10011 ;; Hardware stack levels used:    1
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_is_valid
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           	psect	text30
 10020  002CE2                     __ptext30:
 10021                           	opt stack 0
 10022  002CE2                     _strcmp:
 10023                           	opt stack 25
 10024                           
 10025                           ;incstack = 0
 10026  002CE2  D004               	goto	i2l1209
 10027  002CE4  4A01               	infsnz	strcmp@s1,f,c
 10028  002CE6  2A02               	incf	strcmp@s1+1,f,c
 10029  002CE8  4A03               	infsnz	strcmp@s2,f,c
 10030  002CEA  2A04               	incf	strcmp@s2+1,f,c
 10031  002CEC                     i2l1209:
 10032  002CEC  C001  FFD9         	movff	strcmp@s1,fsr2l
 10033  002CF0  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 10034  002CF4  50DF               	movf	indf2,w,c
 10035  002CF6  6E05               	movwf	??_strcmp& (0+255),c
 10036  002CF8  C003  FFF6         	movff	strcmp@s2,tblptrl
 10037  002CFC  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 10038  002D00                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10039  002D00  6AF8               	clrf	tblptru,c
 10040  002D02                     	endif
 10041  002D02                     	if	0	;tblptru may be non-zero
 10042  002D02                     	endif
 10043  002D02  0008               	tblrd		*
 10044  002D04  50F5               	movf	tablat,w,c
 10045  002D06  0800               	sublw	0
 10046  002D08  2405               	addwf	??_strcmp,w,c
 10047  002D0A  6E06               	movwf	strcmp@r,c
 10048  002D0C  5006               	movf	strcmp@r,w,c
 10049  002D0E  A4D8               	btfss	status,2,c
 10050  002D10  D007               	goto	i2u187_40
 10051  002D12  C001  FFD9         	movff	strcmp@s1,fsr2l
 10052  002D16  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 10053  002D1A  50DF               	movf	indf2,w,c
 10054  002D1C  A4D8               	btfss	status,2,c
 10055  002D1E  D7E2               	goto	i2l1210
 10056  002D20                     i2u187_40:
 10057  002D20  5006               	movf	strcmp@r,w,c
 10058  002D22  6E01               	movwf	?_strcmp,c
 10059  002D24  6A02               	clrf	?_strcmp+1,c
 10060  002D26  BE01               	btfsc	?_strcmp,7,c
 10061  002D28  0602               	decf	?_strcmp+1,f,c
 10062  002D2A  0012               	return	
 10063  002D2C                     __end_of_strcmp:
 10064                           	opt stack 0
 10065                           pclatu	equ	0xFFB
 10066                           pclath	equ	0xFFA
 10067                           tblptru	equ	0xFF8
 10068                           tblptrh	equ	0xFF7
 10069                           tblptrl	equ	0xFF6
 10070                           tablat	equ	0xFF5
 10071                           prodh	equ	0xFF4
 10072                           prodl	equ	0xFF3
 10073                           intcon	equ	0xFF2
 10074                           intcon3	equ	0xFF0
 10075                           indf0	equ	0xFEF
 10076                           postinc0	equ	0xFEE
 10077                           fsr0h	equ	0xFEA
 10078                           fsr0l	equ	0xFE9
 10079                           wreg	equ	0xFE8
 10080                           indf1	equ	0xFE7
 10081                           postinc1	equ	0xFE6
 10082                           postdec1	equ	0xFE5
 10083                           fsr1h	equ	0xFE2
 10084                           fsr1l	equ	0xFE1
 10085                           indf2	equ	0xFDF
 10086                           postinc2	equ	0xFDE
 10087                           postdec2	equ	0xFDD
 10088                           fsr2h	equ	0xFDA
 10089                           fsr2l	equ	0xFD9
 10090                           status	equ	0xFD8
 10091                           
 10092 ;; *************** function _generate_compartment_array *****************
 10093 ;; Defined at:
 10094 ;;		line 220 in file "keypad.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;  step            2    0[COMRAM] int 
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;		None
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  1    wreg      void 
 10101 ;; Registers used:
 10102 ;;		wreg, status,2, status,0
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10110 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10111 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10112 ;;Total ram usage:        4 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; This function calls:
 10115 ;;		Nothing
 10116 ;; This function is called by:
 10117 ;;		_interruptHandler
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           	psect	text31
 10122  002068                     __ptext31:
 10123                           	opt stack 0
 10124  002068                     _generate_compartment_array:
 10125                           	opt stack 26
 10126                           
 10127                           ;keypad.c: 222: switch(step){
 10128                           
 10129                           ;incstack = 0
 10130  002068  D11C               	goto	i2l604
 10131  00206A                     
 10132                           ;keypad.c: 224: compartment_array[1] = 1;
 10133  00206A  0E00               	movlw	0
 10134  00206C  0100               	movlb	0	; () banked
 10135  00206E  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10136  002070  0E01               	movlw	1
 10137  002072  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10138                           
 10139                           ;keypad.c: 225: compartment_array[3] = 1;
 10140  002074  0E00               	movlw	0
 10141  002076  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10142  002078  0E01               	movlw	1
 10143  00207A  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10144                           
 10145                           ;keypad.c: 226: compartment_array[5] = 1;
 10146  00207C  0E00               	movlw	0
 10147  00207E  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10148  002080  0E01               	movlw	1
 10149  002082  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10150                           
 10151                           ;keypad.c: 227: compartment_array[7] = 1;
 10152  002084  0E00               	movlw	0
 10153  002086  6FBF               	movwf	(_compartment_array+15)& (0+255),b
 10154  002088  0E01               	movlw	1
 10155  00208A  6FBE               	movwf	(_compartment_array+14)& (0+255),b
 10156                           
 10157                           ;keypad.c: 230: compartment_number[0] = 1;
 10158  00208C  0E00               	movlw	0
 10159  00208E  6E37               	movwf	_compartment_number+1,c
 10160  002090  0E01               	movlw	1
 10161  002092  6E36               	movwf	_compartment_number,c
 10162                           
 10163                           ;keypad.c: 231: compartment_number[1] = 3;
 10164  002094  0E00               	movlw	0
 10165  002096  6E39               	movwf	_compartment_number+3,c
 10166  002098  0E03               	movlw	3
 10167  00209A  6E38               	movwf	_compartment_number+2,c
 10168                           
 10169                           ;keypad.c: 232: compartment_number[2] = 5;
 10170  00209C  0E00               	movlw	0
 10171  00209E  6E3B               	movwf	_compartment_number+5,c
 10172  0020A0  0E05               	movlw	5
 10173  0020A2  6E3A               	movwf	_compartment_number+4,c
 10174                           
 10175                           ;keypad.c: 233: compartment_number[3] = 7;
 10176  0020A4  0E00               	movlw	0
 10177  0020A6  6E3D               	movwf	_compartment_number+7,c
 10178  0020A8  0E07               	movlw	7
 10179  0020AA  6E3C               	movwf	_compartment_number+6,c
 10180                           
 10181                           ;keypad.c: 235: break;
 10182  0020AC  0012               	return	
 10183  0020AE                     
 10184                           ;keypad.c: 237: compartment_array[0] = 1;
 10185                           
 10186                           ; BSR set to: 0
 10187  0020AE  0E00               	movlw	0
 10188  0020B0  0100               	movlb	0	; () banked
 10189  0020B2  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10190  0020B4  0E01               	movlw	1
 10191  0020B6  6FB0               	movwf	_compartment_array& (0+255),b
 10192                           
 10193                           ;keypad.c: 238: compartment_array[1] = 1;
 10194  0020B8  0E00               	movlw	0
 10195  0020BA  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10196  0020BC  0E01               	movlw	1
 10197  0020BE  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10198                           
 10199                           ;keypad.c: 239: compartment_array[3] = 1;
 10200  0020C0  0E00               	movlw	0
 10201  0020C2  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10202  0020C4  0E01               	movlw	1
 10203  0020C6  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10204                           
 10205                           ;keypad.c: 240: compartment_array[4] = 1;
 10206  0020C8  0E00               	movlw	0
 10207  0020CA  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10208  0020CC  0E01               	movlw	1
 10209  0020CE  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10210                           
 10211                           ;keypad.c: 241: compartment_array[6] = 1;
 10212  0020D0  0E00               	movlw	0
 10213  0020D2  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10214  0020D4  0E01               	movlw	1
 10215  0020D6  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10216                           
 10217                           ;keypad.c: 245: compartment_number[0] = 0;
 10218  0020D8  0E00               	movlw	0
 10219  0020DA  6E37               	movwf	_compartment_number+1,c
 10220  0020DC  0E00               	movlw	0
 10221  0020DE  6E36               	movwf	_compartment_number,c
 10222                           
 10223                           ;keypad.c: 246: compartment_number[1] = 1;
 10224  0020E0  0E00               	movlw	0
 10225  0020E2  6E39               	movwf	_compartment_number+3,c
 10226  0020E4  0E01               	movlw	1
 10227  0020E6  6E38               	movwf	_compartment_number+2,c
 10228                           
 10229                           ;keypad.c: 247: compartment_number[2] = 3;
 10230  0020E8  0E00               	movlw	0
 10231  0020EA  6E3B               	movwf	_compartment_number+5,c
 10232  0020EC  0E03               	movlw	3
 10233  0020EE  6E3A               	movwf	_compartment_number+4,c
 10234                           
 10235                           ;keypad.c: 248: compartment_number[3] = 4;
 10236  0020F0  0E00               	movlw	0
 10237  0020F2  6E3D               	movwf	_compartment_number+7,c
 10238  0020F4  0E04               	movlw	4
 10239  0020F6  6E3C               	movwf	_compartment_number+6,c
 10240                           
 10241                           ;keypad.c: 249: compartment_number[4] = 6;
 10242  0020F8  0E00               	movlw	0
 10243  0020FA  6E3F               	movwf	_compartment_number+9,c
 10244  0020FC  0E06               	movlw	6
 10245  0020FE  6E3E               	movwf	_compartment_number+8,c
 10246                           
 10247                           ;keypad.c: 251: break;
 10248  002100  0012               	return	
 10249  002102                     
 10250                           ;keypad.c: 254: compartment_array[0] = 1;
 10251                           
 10252                           ; BSR set to: 0
 10253  002102  0E00               	movlw	0
 10254  002104  0100               	movlb	0	; () banked
 10255  002106  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10256  002108  0E01               	movlw	1
 10257  00210A  6FB0               	movwf	_compartment_array& (0+255),b
 10258                           
 10259                           ;keypad.c: 255: compartment_array[1] = 1;
 10260  00210C  0E00               	movlw	0
 10261  00210E  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10262  002110  0E01               	movlw	1
 10263  002112  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10264                           
 10265                           ;keypad.c: 256: compartment_array[2] = 1;
 10266  002114  0E00               	movlw	0
 10267  002116  6FB5               	movwf	(_compartment_array+5)& (0+255),b
 10268  002118  0E01               	movlw	1
 10269  00211A  6FB4               	movwf	(_compartment_array+4)& (0+255),b
 10270                           
 10271                           ;keypad.c: 257: compartment_array[4] = 1;
 10272  00211C  0E00               	movlw	0
 10273  00211E  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10274  002120  0E01               	movlw	1
 10275  002122  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10276                           
 10277                           ;keypad.c: 258: compartment_array[5] = 1;
 10278  002124  0E00               	movlw	0
 10279  002126  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10280  002128  0E01               	movlw	1
 10281  00212A  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10282                           
 10283                           ;keypad.c: 259: compartment_array[6] = 1;
 10284  00212C  0E00               	movlw	0
 10285  00212E  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10286  002130  0E01               	movlw	1
 10287  002132  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10288                           
 10289                           ;keypad.c: 262: compartment_number[0] = 0;
 10290  002134  0E00               	movlw	0
 10291  002136  6E37               	movwf	_compartment_number+1,c
 10292  002138  0E00               	movlw	0
 10293  00213A  6E36               	movwf	_compartment_number,c
 10294                           
 10295                           ;keypad.c: 263: compartment_number[1] = 1;
 10296  00213C  0E00               	movlw	0
 10297  00213E  6E39               	movwf	_compartment_number+3,c
 10298  002140  0E01               	movlw	1
 10299  002142  6E38               	movwf	_compartment_number+2,c
 10300                           
 10301                           ;keypad.c: 264: compartment_number[2] = 2;
 10302  002144  0E00               	movlw	0
 10303  002146  6E3B               	movwf	_compartment_number+5,c
 10304  002148  0E02               	movlw	2
 10305  00214A  6E3A               	movwf	_compartment_number+4,c
 10306                           
 10307                           ;keypad.c: 265: compartment_number[3] = 4;
 10308  00214C  0E00               	movlw	0
 10309  00214E  6E3D               	movwf	_compartment_number+7,c
 10310  002150  0E04               	movlw	4
 10311  002152  6E3C               	movwf	_compartment_number+6,c
 10312                           
 10313                           ;keypad.c: 266: compartment_number[4] = 5;
 10314  002154  0E00               	movlw	0
 10315  002156  6E3F               	movwf	_compartment_number+9,c
 10316  002158  0E05               	movlw	5
 10317  00215A  6E3E               	movwf	_compartment_number+8,c
 10318                           
 10319                           ;keypad.c: 267: compartment_number[5] = 6;
 10320  00215C  0E00               	movlw	0
 10321  00215E  6E41               	movwf	_compartment_number+11,c
 10322  002160  0E06               	movlw	6
 10323  002162  6E40               	movwf	_compartment_number+10,c
 10324                           
 10325                           ;keypad.c: 269: break;
 10326  002164  0012               	return	
 10327  002166                     
 10328                           ;keypad.c: 271: compartment_array[0] = 1;
 10329                           
 10330                           ; BSR set to: 0
 10331  002166  0E00               	movlw	0
 10332  002168  0100               	movlb	0	; () banked
 10333  00216A  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10334  00216C  0E01               	movlw	1
 10335  00216E  6FB0               	movwf	_compartment_array& (0+255),b
 10336                           
 10337                           ;keypad.c: 272: compartment_array[1] = 1;
 10338  002170  0E00               	movlw	0
 10339  002172  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10340  002174  0E01               	movlw	1
 10341  002176  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10342                           
 10343                           ;keypad.c: 273: compartment_array[2] = 1;
 10344  002178  0E00               	movlw	0
 10345  00217A  6FB5               	movwf	(_compartment_array+5)& (0+255),b
 10346  00217C  0E01               	movlw	1
 10347  00217E  6FB4               	movwf	(_compartment_array+4)& (0+255),b
 10348                           
 10349                           ;keypad.c: 274: compartment_array[3] = 1;
 10350  002180  0E00               	movlw	0
 10351  002182  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10352  002184  0E01               	movlw	1
 10353  002186  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10354                           
 10355                           ;keypad.c: 275: compartment_array[4] = 1;
 10356  002188  0E00               	movlw	0
 10357  00218A  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10358  00218C  0E01               	movlw	1
 10359  00218E  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10360                           
 10361                           ;keypad.c: 276: compartment_array[5] = 1;
 10362  002190  0E00               	movlw	0
 10363  002192  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10364  002194  0E01               	movlw	1
 10365  002196  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10366                           
 10367                           ;keypad.c: 277: compartment_array[6] = 1;
 10368  002198  0E00               	movlw	0
 10369  00219A  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10370  00219C  0E01               	movlw	1
 10371  00219E  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10372                           
 10373                           ;keypad.c: 280: compartment_number[0] = 0;
 10374  0021A0  0E00               	movlw	0
 10375  0021A2  6E37               	movwf	_compartment_number+1,c
 10376  0021A4  0E00               	movlw	0
 10377  0021A6  6E36               	movwf	_compartment_number,c
 10378                           
 10379                           ;keypad.c: 281: compartment_number[1] = 1;
 10380  0021A8  0E00               	movlw	0
 10381  0021AA  6E39               	movwf	_compartment_number+3,c
 10382  0021AC  0E01               	movlw	1
 10383  0021AE  6E38               	movwf	_compartment_number+2,c
 10384                           
 10385                           ;keypad.c: 282: compartment_number[2] = 2;
 10386  0021B0  0E00               	movlw	0
 10387  0021B2  6E3B               	movwf	_compartment_number+5,c
 10388  0021B4  0E02               	movlw	2
 10389  0021B6  6E3A               	movwf	_compartment_number+4,c
 10390                           
 10391                           ;keypad.c: 283: compartment_number[3] = 3;
 10392  0021B8  0E00               	movlw	0
 10393  0021BA  6E3D               	movwf	_compartment_number+7,c
 10394  0021BC  0E03               	movlw	3
 10395  0021BE  6E3C               	movwf	_compartment_number+6,c
 10396                           
 10397                           ;keypad.c: 284: compartment_number[4] = 4;
 10398  0021C0  0E00               	movlw	0
 10399  0021C2  6E3F               	movwf	_compartment_number+9,c
 10400  0021C4  0E04               	movlw	4
 10401  0021C6  6E3E               	movwf	_compartment_number+8,c
 10402                           
 10403                           ;keypad.c: 285: compartment_number[5] = 5;
 10404  0021C8  0E00               	movlw	0
 10405  0021CA  6E41               	movwf	_compartment_number+11,c
 10406  0021CC  0E05               	movlw	5
 10407  0021CE  6E40               	movwf	_compartment_number+10,c
 10408                           
 10409                           ;keypad.c: 286: compartment_number[6] = 6;
 10410  0021D0  0E00               	movlw	0
 10411  0021D2  6E43               	movwf	_compartment_number+13,c
 10412  0021D4  0E06               	movlw	6
 10413  0021D6  6E42               	movwf	_compartment_number+12,c
 10414                           
 10415                           ;keypad.c: 288: break;
 10416  0021D8  0012               	return	
 10417  0021DA                     
 10418                           ;keypad.c: 290: compartment_array[0] = 1;
 10419                           
 10420                           ; BSR set to: 0
 10421  0021DA  0E00               	movlw	0
 10422  0021DC  0100               	movlb	0	; () banked
 10423  0021DE  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10424  0021E0  0E01               	movlw	1
 10425  0021E2  6FB0               	movwf	_compartment_array& (0+255),b
 10426                           
 10427                           ;keypad.c: 291: compartment_array[1] = 1;
 10428  0021E4  0E00               	movlw	0
 10429  0021E6  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10430  0021E8  0E01               	movlw	1
 10431  0021EA  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10432                           
 10433                           ;keypad.c: 292: compartment_array[2] = 1;
 10434  0021EC  0E00               	movlw	0
 10435  0021EE  6FB5               	movwf	(_compartment_array+5)& (0+255),b
 10436  0021F0  0E01               	movlw	1
 10437  0021F2  6FB4               	movwf	(_compartment_array+4)& (0+255),b
 10438                           
 10439                           ;keypad.c: 293: compartment_array[3] = 1;
 10440  0021F4  0E00               	movlw	0
 10441  0021F6  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10442  0021F8  0E01               	movlw	1
 10443  0021FA  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10444                           
 10445                           ;keypad.c: 294: compartment_array[4] = 1;
 10446  0021FC  0E00               	movlw	0
 10447  0021FE  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10448  002200  0E01               	movlw	1
 10449  002202  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10450                           
 10451                           ;keypad.c: 295: compartment_array[5] = 1;
 10452  002204  0E00               	movlw	0
 10453  002206  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10454  002208  0E01               	movlw	1
 10455  00220A  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10456                           
 10457                           ;keypad.c: 296: compartment_array[6] = 1;
 10458  00220C  0E00               	movlw	0
 10459  00220E  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10460  002210  0E01               	movlw	1
 10461  002212  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10462                           
 10463                           ;keypad.c: 297: compartment_array[7] = 1;
 10464  002214  0E00               	movlw	0
 10465  002216  6FBF               	movwf	(_compartment_array+15)& (0+255),b
 10466  002218  0E01               	movlw	1
 10467  00221A  6FBE               	movwf	(_compartment_array+14)& (0+255),b
 10468                           
 10469                           ;keypad.c: 300: compartment_number[0] = 0;
 10470  00221C  0E00               	movlw	0
 10471  00221E  6E37               	movwf	_compartment_number+1,c
 10472  002220  0E00               	movlw	0
 10473  002222  6E36               	movwf	_compartment_number,c
 10474                           
 10475                           ;keypad.c: 301: compartment_number[1] = 1;
 10476  002224  0E00               	movlw	0
 10477  002226  6E39               	movwf	_compartment_number+3,c
 10478  002228  0E01               	movlw	1
 10479  00222A  6E38               	movwf	_compartment_number+2,c
 10480                           
 10481                           ;keypad.c: 302: compartment_number[2] = 2;
 10482  00222C  0E00               	movlw	0
 10483  00222E  6E3B               	movwf	_compartment_number+5,c
 10484  002230  0E02               	movlw	2
 10485  002232  6E3A               	movwf	_compartment_number+4,c
 10486                           
 10487                           ;keypad.c: 303: compartment_number[3] = 3;
 10488  002234  0E00               	movlw	0
 10489  002236  6E3D               	movwf	_compartment_number+7,c
 10490  002238  0E03               	movlw	3
 10491  00223A  6E3C               	movwf	_compartment_number+6,c
 10492                           
 10493                           ;keypad.c: 304: compartment_number[4] = 4;
 10494  00223C  0E00               	movlw	0
 10495  00223E  6E3F               	movwf	_compartment_number+9,c
 10496  002240  0E04               	movlw	4
 10497  002242  6E3E               	movwf	_compartment_number+8,c
 10498                           
 10499                           ;keypad.c: 305: compartment_number[5] = 5;
 10500  002244  0E00               	movlw	0
 10501  002246  6E41               	movwf	_compartment_number+11,c
 10502  002248  0E05               	movlw	5
 10503  00224A  6E40               	movwf	_compartment_number+10,c
 10504                           
 10505                           ;keypad.c: 306: compartment_number[6] = 6;
 10506  00224C  0E00               	movlw	0
 10507  00224E  6E43               	movwf	_compartment_number+13,c
 10508  002250  0E06               	movlw	6
 10509  002252  6E42               	movwf	_compartment_number+12,c
 10510                           
 10511                           ;keypad.c: 307: compartment_number[7] = 7;
 10512  002254  0E00               	movlw	0
 10513  002256  6E45               	movwf	_compartment_number+15,c
 10514  002258  0E07               	movlw	7
 10515  00225A  6E44               	movwf	_compartment_number+14,c
 10516                           
 10517                           ;keypad.c: 309: break;
 10518  00225C  0012               	return	
 10519  00225E                     
 10520                           ;keypad.c: 311: compartment_array[0] = 0;
 10521                           
 10522                           ; BSR set to: 0
 10523  00225E  0E00               	movlw	0
 10524  002260  0100               	movlb	0	; () banked
 10525  002262  6FB1               	movwf	(_compartment_array+1)& (0+255),b
 10526  002264  0E00               	movlw	0
 10527  002266  6FB0               	movwf	_compartment_array& (0+255),b
 10528                           
 10529                           ;keypad.c: 312: compartment_array[1] = 0;
 10530  002268  0E00               	movlw	0
 10531  00226A  6FB3               	movwf	(_compartment_array+3)& (0+255),b
 10532  00226C  0E00               	movlw	0
 10533  00226E  6FB2               	movwf	(_compartment_array+2)& (0+255),b
 10534                           
 10535                           ;keypad.c: 313: compartment_array[2] = 0;
 10536  002270  0E00               	movlw	0
 10537  002272  6FB5               	movwf	(_compartment_array+5)& (0+255),b
 10538  002274  0E00               	movlw	0
 10539  002276  6FB4               	movwf	(_compartment_array+4)& (0+255),b
 10540                           
 10541                           ;keypad.c: 314: compartment_array[3] = 0;
 10542  002278  0E00               	movlw	0
 10543  00227A  6FB7               	movwf	(_compartment_array+7)& (0+255),b
 10544  00227C  0E00               	movlw	0
 10545  00227E  6FB6               	movwf	(_compartment_array+6)& (0+255),b
 10546                           
 10547                           ;keypad.c: 315: compartment_array[4] = 0;
 10548  002280  0E00               	movlw	0
 10549  002282  6FB9               	movwf	(_compartment_array+9)& (0+255),b
 10550  002284  0E00               	movlw	0
 10551  002286  6FB8               	movwf	(_compartment_array+8)& (0+255),b
 10552                           
 10553                           ;keypad.c: 316: compartment_array[5] = 0;
 10554  002288  0E00               	movlw	0
 10555  00228A  6FBB               	movwf	(_compartment_array+11)& (0+255),b
 10556  00228C  0E00               	movlw	0
 10557  00228E  6FBA               	movwf	(_compartment_array+10)& (0+255),b
 10558                           
 10559                           ;keypad.c: 317: compartment_array[6] = 0;
 10560  002290  0E00               	movlw	0
 10561  002292  6FBD               	movwf	(_compartment_array+13)& (0+255),b
 10562  002294  0E00               	movlw	0
 10563  002296  6FBC               	movwf	(_compartment_array+12)& (0+255),b
 10564                           
 10565                           ;keypad.c: 318: compartment_array[7] = 0;
 10566  002298  0E00               	movlw	0
 10567  00229A  6FBF               	movwf	(_compartment_array+15)& (0+255),b
 10568  00229C  0E00               	movlw	0
 10569  00229E  6FBE               	movwf	(_compartment_array+14)& (0+255),b
 10570                           
 10571                           ;keypad.c: 320: }
 10572  0022A0  0012               	return	
 10573  0022A2                     i2l604:
 10574                           
 10575                           ; BSR set to: 0
 10576  0022A2  C001  F003         	movff	generate_compartment_array@step,??_generate_compartment_array
 10577  0022A6  C002  F004         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
 10578                           
 10579                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10580                           ; Switch size 1, requested type "space"
 10581                           ; Number of cases is 1, Range of values is 0 to 0
 10582                           ; switch strategies available:
 10583                           ; Name         Instructions Cycles
 10584                           ; simple_byte            4     3 (average)
 10585                           ;	Chosen strategy is simple_byte
 10586  0022AA  5004               	movf	??_generate_compartment_array+1,w,c
 10587  0022AC  0A00               	xorlw	0	; case 0
 10588  0022AE  A4D8               	btfss	status,2,c
 10589  0022B0  D7D6               	goto	i2l611
 10590                           
 10591                           ; Switch size 1, requested type "space"
 10592                           ; Number of cases is 5, Range of values is 4 to 8
 10593                           ; switch strategies available:
 10594                           ; Name         Instructions Cycles
 10595                           ; simple_byte           16     9 (average)
 10596                           ;	Chosen strategy is simple_byte
 10597  0022B2  5003               	movf	??_generate_compartment_array,w,c
 10598  0022B4  0A04               	xorlw	4	; case 4
 10599  0022B6  B4D8               	btfsc	status,2,c
 10600  0022B8  D6D8               	goto	i2l605
 10601  0022BA  0A01               	xorlw	1	; case 5
 10602  0022BC  B4D8               	btfsc	status,2,c
 10603  0022BE  D6F7               	goto	i2l607
 10604  0022C0  0A03               	xorlw	3	; case 6
 10605  0022C2  B4D8               	btfsc	status,2,c
 10606  0022C4  D71E               	goto	i2l608
 10607  0022C6  0A01               	xorlw	1	; case 7
 10608  0022C8  B4D8               	btfsc	status,2,c
 10609  0022CA  D74D               	goto	i2l609
 10610  0022CC  0A0F               	xorlw	15	; case 8
 10611  0022CE  B4D8               	btfsc	status,2,c
 10612  0022D0  D784               	goto	i2l610
 10613  0022D2  D7C5               	goto	i2l611
 10614  0022D4                     __end_of_generate_compartment_array:
 10615                           	opt stack 0
 10616                           pclatu	equ	0xFFB
 10617                           pclath	equ	0xFFA
 10618                           tblptru	equ	0xFF8
 10619                           tblptrh	equ	0xFF7
 10620                           tblptrl	equ	0xFF6
 10621                           tablat	equ	0xFF5
 10622                           prodh	equ	0xFF4
 10623                           prodl	equ	0xFF3
 10624                           intcon	equ	0xFF2
 10625                           intcon3	equ	0xFF0
 10626                           indf0	equ	0xFEF
 10627                           postinc0	equ	0xFEE
 10628                           fsr0h	equ	0xFEA
 10629                           fsr0l	equ	0xFE9
 10630                           wreg	equ	0xFE8
 10631                           indf1	equ	0xFE7
 10632                           postinc1	equ	0xFE6
 10633                           postdec1	equ	0xFE5
 10634                           fsr1h	equ	0xFE2
 10635                           fsr1l	equ	0xFE1
 10636                           indf2	equ	0xFDF
 10637                           postinc2	equ	0xFDE
 10638                           postdec2	equ	0xFDD
 10639                           fsr2h	equ	0xFDA
 10640                           fsr2l	equ	0xFD9
 10641                           status	equ	0xFD8
 10642                           
 10643 ;; *************** function _check *****************
 10644 ;; Defined at:
 10645 ;;		line 208 in file "keypad.c"
 10646 ;; Parameters:    Size  Location     Type
 10647 ;;		None
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;		None
 10650 ;; Return value:  Size  Location     Type
 10651 ;;                  2    0[COMRAM] int 
 10652 ;; Registers used:
 10653 ;;		wreg, status,2, status,0
 10654 ;; Tracked objects:
 10655 ;;		On entry : 0/0
 10656 ;;		On exit  : 0/0
 10657 ;;		Unchanged: 0/0
 10658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10659 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10662 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10663 ;;Total ram usage:        2 bytes
 10664 ;; Hardware stack levels used:    1
 10665 ;; This function calls:
 10666 ;;		Nothing
 10667 ;; This function is called by:
 10668 ;;		_interruptHandler
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text32
 10673  002A40                     __ptext32:
 10674                           	opt stack 0
 10675  002A40                     _check:
 10676                           	opt stack 26
 10677                           
 10678                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 10679                           
 10680                           ;incstack = 0
 10681  002A40  BE57               	btfsc	_B+1,7,c
 10682  002A42  D006               	goto	i2u247_40
 10683  002A44  5057               	movf	_B+1,w,c
 10684  002A46  E125               	bnz	i2l3604
 10685  002A48  0E03               	movlw	3
 10686  002A4A  5C56               	subwf	_B,w,c
 10687  002A4C  B0D8               	btfsc	status,0,c
 10688  002A4E  D021               	goto	i2u251_40
 10689  002A50                     i2u247_40:
 10690  002A50  BE55               	btfsc	_N+1,7,c
 10691  002A52  D006               	goto	i2u248_40
 10692  002A54  5055               	movf	_N+1,w,c
 10693  002A56  E11D               	bnz	i2l3604
 10694  002A58  0E04               	movlw	4
 10695  002A5A  5C54               	subwf	_N,w,c
 10696  002A5C  B0D8               	btfsc	status,0,c
 10697  002A5E  D019               	goto	i2u251_40
 10698  002A60                     i2u248_40:
 10699  002A60  BE53               	btfsc	_S+1,7,c
 10700  002A62  D006               	goto	i2u249_40
 10701  002A64  5053               	movf	_S+1,w,c
 10702  002A66  E115               	bnz	i2l3604
 10703  002A68  0E03               	movlw	3
 10704  002A6A  5C52               	subwf	_S,w,c
 10705  002A6C  B0D8               	btfsc	status,0,c
 10706  002A6E  D011               	goto	i2u251_40
 10707  002A70                     i2u249_40:
 10708  002A70  BE51               	btfsc	_W+1,7,c
 10709  002A72  D006               	goto	i2u250_40
 10710  002A74  5051               	movf	_W+1,w,c
 10711  002A76  E10D               	bnz	i2l3604
 10712  002A78  0E05               	movlw	5
 10713  002A7A  5C50               	subwf	_W,w,c
 10714  002A7C  B0D8               	btfsc	status,0,c
 10715  002A7E  D009               	goto	i2u251_40
 10716  002A80                     i2u250_40:
 10717  002A80  0100               	movlb	0	; () banked
 10718  002A82  BFD4               	btfsc	(_total_number+1)& (0+255),7,b
 10719  002A84  D00B               	goto	i2l598
 10720  002A86  51D4               	movf	(_total_number+1)& (0+255),w,b
 10721  002A88  E104               	bnz	i2l3604
 10722  002A8A  0E05               	movlw	5
 10723  002A8C  5DD3               	subwf	_total_number& (0+255),w,b
 10724  002A8E  A0D8               	btfss	status,0,c
 10725  002A90  D005               	goto	i2l598
 10726  002A92                     i2u251_40:
 10727  002A92                     i2l3604:
 10728                           
 10729                           ;keypad.c: 213: return 0;
 10730  002A92  0E00               	movlw	0
 10731  002A94  6E02               	movwf	?_check+1,c
 10732  002A96  0E00               	movlw	0
 10733  002A98  6E01               	movwf	?_check,c
 10734  002A9A  0012               	return	
 10735  002A9C                     i2l598:
 10736                           
 10737                           ;keypad.c: 214: }
 10738                           ;keypad.c: 215: return 1;
 10739  002A9C  0E00               	movlw	0
 10740  002A9E  6E02               	movwf	?_check+1,c
 10741  002AA0  0E01               	movlw	1
 10742  002AA2  6E01               	movwf	?_check,c
 10743  002AA4  0012               	return	
 10744  002AA6                     __end_of_check:
 10745                           	opt stack 0
 10746                           pclatu	equ	0xFFB
 10747                           pclath	equ	0xFFA
 10748                           tblptru	equ	0xFF8
 10749                           tblptrh	equ	0xFF7
 10750                           tblptrl	equ	0xFF6
 10751                           tablat	equ	0xFF5
 10752                           prodh	equ	0xFF4
 10753                           prodl	equ	0xFF3
 10754                           intcon	equ	0xFF2
 10755                           intcon3	equ	0xFF0
 10756                           indf0	equ	0xFEF
 10757                           postinc0	equ	0xFEE
 10758                           fsr0h	equ	0xFEA
 10759                           fsr0l	equ	0xFE9
 10760                           wreg	equ	0xFE8
 10761                           indf1	equ	0xFE7
 10762                           postinc1	equ	0xFE6
 10763                           postdec1	equ	0xFE5
 10764                           fsr1h	equ	0xFE2
 10765                           fsr1l	equ	0xFE1
 10766                           indf2	equ	0xFDF
 10767                           postinc2	equ	0xFDE
 10768                           postdec2	equ	0xFDD
 10769                           fsr2h	equ	0xFDA
 10770                           fsr2l	equ	0xFD9
 10771                           status	equ	0xFD8
 10772                           pclatu	equ	0xFFB
 10773                           pclath	equ	0xFFA
 10774                           tblptru	equ	0xFF8
 10775                           tblptrh	equ	0xFF7
 10776                           tblptrl	equ	0xFF6
 10777                           tablat	equ	0xFF5
 10778                           prodh	equ	0xFF4
 10779                           prodl	equ	0xFF3
 10780                           intcon	equ	0xFF2
 10781                           intcon3	equ	0xFF0
 10782                           indf0	equ	0xFEF
 10783                           postinc0	equ	0xFEE
 10784                           fsr0h	equ	0xFEA
 10785                           fsr0l	equ	0xFE9
 10786                           wreg	equ	0xFE8
 10787                           indf1	equ	0xFE7
 10788                           postinc1	equ	0xFE6
 10789                           postdec1	equ	0xFE5
 10790                           fsr1h	equ	0xFE2
 10791                           fsr1l	equ	0xFE1
 10792                           indf2	equ	0xFDF
 10793                           postinc2	equ	0xFDE
 10794                           postdec2	equ	0xFDD
 10795                           fsr2h	equ	0xFDA
 10796                           fsr2l	equ	0xFD9
 10797                           status	equ	0xFD8
 10798                           
 10799                           	psect	rparam
 10800  0000                     pclatu	equ	0xFFB
 10801                           pclath	equ	0xFFA
 10802                           tblptru	equ	0xFF8
 10803                           tblptrh	equ	0xFF7
 10804                           tblptrl	equ	0xFF6
 10805                           tablat	equ	0xFF5
 10806                           prodh	equ	0xFF4
 10807                           prodl	equ	0xFF3
 10808                           intcon	equ	0xFF2
 10809                           intcon3	equ	0xFF0
 10810                           indf0	equ	0xFEF
 10811                           postinc0	equ	0xFEE
 10812                           fsr0h	equ	0xFEA
 10813                           fsr0l	equ	0xFE9
 10814                           wreg	equ	0xFE8
 10815                           indf1	equ	0xFE7
 10816                           postinc1	equ	0xFE6
 10817                           postdec1	equ	0xFE5
 10818                           fsr1h	equ	0xFE2
 10819                           fsr1l	equ	0xFE1
 10820                           indf2	equ	0xFDF
 10821                           postinc2	equ	0xFDE
 10822                           postdec2	equ	0xFDD
 10823                           fsr2h	equ	0xFDA
 10824                           fsr2l	equ	0xFD9
 10825                           status	equ	0xFD8
 10826                           
 10827                           	psect	temp
 10828  00006C                     btemp:
 10829                           	opt stack 0
 10830  00006C                     	ds	1
 10831  0000                     int$flags	set	btemp
 10832  0000                     wtemp6	set	btemp+1
 10833                           pclatu	equ	0xFFB
 10834                           pclath	equ	0xFFA
 10835                           tblptru	equ	0xFF8
 10836                           tblptrh	equ	0xFF7
 10837                           tblptrl	equ	0xFF6
 10838                           tablat	equ	0xFF5
 10839                           prodh	equ	0xFF4
 10840                           prodl	equ	0xFF3
 10841                           intcon	equ	0xFF2
 10842                           intcon3	equ	0xFF0
 10843                           indf0	equ	0xFEF
 10844                           postinc0	equ	0xFEE
 10845                           fsr0h	equ	0xFEA
 10846                           fsr0l	equ	0xFE9
 10847                           wreg	equ	0xFE8
 10848                           indf1	equ	0xFE7
 10849                           postinc1	equ	0xFE6
 10850                           postdec1	equ	0xFE5
 10851                           fsr1h	equ	0xFE2
 10852                           fsr1l	equ	0xFE1
 10853                           indf2	equ	0xFDF
 10854                           postinc2	equ	0xFDE
 10855                           postdec2	equ	0xFDD
 10856                           fsr2h	equ	0xFDA
 10857                           fsr2l	equ	0xFD9
 10858                           status	equ	0xFD8


Data Sizes:
    Strings     279
    Constant    136
    Data        2
    BSS         483
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     53     107
    BANK0           128     23     126
    BANK1           256     12     140
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncpy@from	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    strncpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_54(CODE[1]), STR_52(CODE[1]), STR_49(CODE[1]), STR_46(CODE[2]), 
		 -> STR_45(CODE[2]), STR_44(CODE[2]), STR_43(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK0[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK0[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_77(CODE[5]), STR_76(CODE[5]), STR_75(CODE[5]), STR_74(CODE[5]), 
		 -> STR_73(CODE[5]), STR_72(CODE[5]), STR_71(CODE[5]), STR_70(CODE[4]), 
		 -> STR_69(CODE[4]), STR_68(CODE[4]), STR_67(CODE[4]), STR_66(CODE[4]), 
		 -> STR_65(CODE[4]), STR_64(CODE[3]), STR_63(CODE[3]), STR_62(CODE[3]), 
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_58(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK0[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_57(CODE[6]), STR_56(CODE[9]), STR_55(CODE[12]), STR_53(CODE[7]), 
		 -> STR_51(CODE[3]), STR_50(CODE[11]), STR_48(CODE[3]), STR_47(CODE[9]), 
		 -> STR_42(CODE[15]), STR_41(CODE[18]), STR_40(CODE[12]), STR_39(CODE[10]), 
		 -> STR_38(CODE[5]), STR_37(CODE[2]), STR_36(CODE[3]), STR_35(CODE[2]), 
		 -> STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[3]), STR_31(CODE[3]), 
		 -> STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[20]), STR_25(CODE[2]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[4]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[4]), STR_15(CODE[3]), 
		 -> STR_14(CODE[4]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[2]), 
		 -> STR_10(CODE[3]), STR_9(CODE[2]), STR_8(CODE[3]), STR_7(CODE[5]), 
		 -> STR_6(CODE[17]), STR_5(CODE[6]), STR_4(CODE[8]), STR_3(CODE[3]), 
		 -> STR_2(CODE[14]), STR_1(CODE[15]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_78(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK0[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _store_prev->_strncpy
    _strncpy->___wmul
    _read_IR->_servoRotate180
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   11087
                                              9 BANK1      3     3      0
                             ___wmul
                            _initLCD
                         _initialize
                            _lcdInst
                       _motorStart_0
                        _motorStop_0
                             _printf
                              _putch
                            _read_IR
                       _servoRotate0
                     _servoRotate180
                         _store_prev
 ---------------------------------------------------------------------------------
 (1) _store_prev                                           2     2      0    2542
                                             14 BANK0      2     2      0
                             ___wmul
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _strncpy                                              8     2      6     472
                                              6 BANK0      8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1878
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _read_IR                                              5     3      2     102
                                              3 BANK0      5     3      2
                       _servoRotate0
                     _servoRotate180
 ---------------------------------------------------------------------------------
 (1) _servoRotate180                                       3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate0                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    16     10    5912
                                             12 BANK0     11     1     10
                                              0 BANK1      9     9      0
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                              _putch
                            _read_IR (ARG)
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0    9391
                                             26 COMRAM    27    27      0
                              _check
         _generate_compartment_array
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                           i2___wmul
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            20    16      4    1272
                                             12 COMRAM    14    10      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    3808
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     677
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _generate_compartment_array                           4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _initLCD
     _lcdInst
       _lcdNibble
   _initialize
   _lcdInst
     _lcdNibble
   _motorStart_0
   _motorStop_0
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul (ARG)
     _putch (ARG)
       _lcdNibble
     _read_IR (ARG)
       _servoRotate0
       _servoRotate180
   _putch
     _lcdNibble
   _read_IR
     _servoRotate0
     _servoRotate180
   _servoRotate0
   _servoRotate180
   _store_prev
     ___wmul
     _strncpy
       ___wmul (ARG)

 _interruptHandler (ROOT)
   _check
   _generate_compartment_array
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2___wmul
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C      8C       7       54.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     17      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     35      6B       1       84.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     23D      34        0.0%
DATA                 0      0     23D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 27 13:47:21 2018

                                  _B 0056                                    _N 0054  
                                  _S 0052                                    _W 0050  
                                  _i 005E                          __CFG_CPD$ON 000000  
                ___wmul@multiplicand 00E9                   i2___lwdiv@dividend 0001  
                        __CFG_BORV$3 000000                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l400 2D72  
                                l240 0E9C                                  l250 10EC  
                                l242 0EA8                                  l243 0EF6  
                                l252 1222                                  l244 0F46  
                                l245 0F7C                                  l254 169E  
                                l270 15C0                                  l262 12FC  
                                l255 129E                                  l247 10C8  
                                l264 162A                                  l256 123A  
                                l248 0FEE                                  l273 1688  
                                l265 136C                                  l338 2794  
                                l266 1488                                  l275 16FA  
                                l276 16EC                                  l268 14F0  
                                l269 1558                                  l630 22F0  
                                l278 179C                                  l631 2378  
                                l615 27B0                                  l640 2322  
                                l617 2834                                  l643 23D6  
                                l395 2CE0                                  l636 23AC  
                                l637 22F8                                  l629 22E0  
                                l477 29BA                                  l647 2420  
                                l639 234E                                  l648 247C  
                                l649 2426                         __CFG_CPB$OFF 000000  
                      _assembly_step 005A                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                         __CFG_WDT$OFF 000000  
                               l1060 2B48                                 l1061 2B52  
                               l1070 2DEA                                 l1071 2DF4  
                               l1056 2B28                                 l1057 2B20  
                               l1233 2AB0                                 l1066 2DD2  
                               l1234 2ADA                                 l1067 2DCA  
                               l1236 2AF6                                 l1237 2AE6  
                               l4402 2CA2                                 l4424 2AE6  
                               l4528 23DA                                 l4388 2D34  
                               l4576 27A0                                 l4904 170C  
                               l4762 121A                                 l4598 26E6  
                               l4884 1692                                 _ADON 007E10  
                               STR_1 FF2D                                 STR_2 FF3C  
                               STR_3 FFF5                                 STR_4 FF89  
                               STR_5 FF9F                                 STR_6 FF0D  
                               STR_7 FFCE                                 STR_8 FEF8  
                               STR_9 FFE5                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u4007 127C                                 u4017 12B8  
                               u4107 167A                                 u4027 12D2  
                               u4117 16BE                                 u4037 135C  
                               u3510 2486                                 u3430 2344  
                               u4207 296E                                 u4127 16DC  
                               u4047 137A                                 u3360 2B2C  
                               u3440 2370                                 u3265 28FA  
                               u4217 2CBA                                 u4137 1732  
                               u4057 1458                                 u3266 28FC  
                               u3275 293C                                 u4307 2F38  
                               u4227 2CCE                                 u4147 174E  
                               u4067 14E0                                 u3276 293E  
                               u3700 10EA                                 u4317 28E2  
                               u3437 233A                                 u4237 2D4C  
                               u4157 1776                                 u4077 1548  
                               u3390 2DD6                                 u3710 121A  
                               u4327 28EC                                 u3447 2366  
                               u4247 2D62                                 u4167 1792  
                               u4087 15B0                                 u4337 2924  
                               u4257 2F20                                 u4177 17BE  
                               u4097 1618                                 u3490 240C  
                               u4347 292E                                 u4267 2EE0  
                               u4187 17DA                                 u4277 2F00  
                               u4197 2950                                 u4287 2C08  
                               u3760 12FA                                 u4297 2C3C  
                               u3907 0EBE                                 u3860 1692  
                               u3917 0EE2                                 u3927 0F38  
                               u3937 0F6E                                 u3947 0FA4  
                               u3957 0FD6                                 u3967 1096  
                               u3977 10B6                                 u3987 11FC  
                               u3997 1260                                 _main 0E68  
           __end_of_interruptHandler 2068                                 _mode 0046  
                               _keys FE5F                                 _temp 0060  
                               _time 00C0                                 fsr0h 000FEA  
                               fsr1h 000FE2                   i2___lwdiv@quotient 0005  
                               indf0 000FEF                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 006C  
                               _strs FE83                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                      servoRotate180@i 00E8  
                    __end_ofi2_putch 2F54                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000                          i2_lcdNibble 29C2  
                   __end_of_LCD_LEFT FE7E                         _total_number 00D3  
     generate_compartment_array@step 0001                                ?_main 0001  
                              STR_10 FFF5                                STR_11 FFF8  
                              STR_12 FEF8                                STR_20 FFEB  
                              STR_21 FEF8                                STR_13 FEF8  
                              STR_30 FEF8                                STR_22 FEF8  
                              STR_14 FFE3                                STR_31 FFE8  
                              STR_15 FEF8                                STR_23 FFFC  
                              STR_32 FEF8                                STR_24 FEF8  
                              STR_16 FFE7                                STR_40 FF4A  
                              STR_25 FFE5                                STR_33 FFEC  
                              STR_17 FEF8                                STR_41 FEFB  
                              STR_34 FEF8                                STR_18 FFF2  
                              STR_50 FF62                                STR_42 FF1E  
                              STR_26 FEE7                                STR_27 FFE4  
                              STR_35 FFFC                                STR_19 FEF8  
                              STR_51 FFF5                                STR_43 FFFA  
                              STR_52 FF2C                                STR_44 FFD5  
                              STR_60 FFF3                                STR_36 FEF8  
                              STR_28 FEF8                                STR_37 FFE5  
                              STR_45 FFF3                                STR_61 FFDD  
                              STR_29 FFEF                                STR_53 FF98  
                              STR_54 FF2C                                STR_62 FFD4  
                              STR_46 FFDD                                STR_38 FF51  
                              STR_70 FFDF                                STR_63 FFD8  
                              STR_71 FFBF                                STR_47 FF77  
                              STR_39 FF6D                                STR_55 FF56  
                              STR_64 FFDC                                STR_48 FFF5  
                              STR_72 FFC4                                STR_56 FF80  
                              STR_49 FF2C                                STR_65 FFD3  
                              STR_73 FFBA                                STR_57 FFA5  
                              STR_58 FFFA                                STR_66 FFD7  
                              STR_74 FFB0                                STR_59 FFD5  
                              STR_67 FFDB                                STR_75 FFB5  
                              STR_68 FFB1                                STR_76 FFAB  
                              STR_69 FFBB                                STR_77 FFC9  
                              STR_78 FF91                      __end_of___lwdiv 2B5C  
                    __end_of___lwmod 2DFE                                i2l301 19BE  
                              i2l310 1B58                                i2l311 1D30  
                              i2l303 1A04                                i2l312 1BB0  
                              i2l304 1A2A                                i2l321 1EAE  
                              i2l305 1D8A                                i2l322 1E5C  
                              i2l314 1CB0                                i2l306 1A50  
                              i2l331 1F98                                i2l323 1EE8  
                              i2l315 1D28                                i2l307 1A92  
                              i2l324 1E64                                i2l308 1AD4  
                              i2l333 1FF0                                i2l325 1E6C  
                              i2l309 1B16                                i2l326 1E74  
                              i2l327 1E7C                                i2l328 1E86  
                              i2l329 1F48                                i2l610 21DA  
                              i2l290 1882                                i2l611 225E  
                              i2l604 22A2                                i2l605 206A  
                              i2l293 189E                                i2l630 24C0  
                              i2l294 1A38                                i2l607 20AE  
                              i2l631 2544                                i2l295 18EC  
                              i2l608 2102                                i2l560 0138  
                              i2l640 24F0                                i2l609 2166  
                              i2l297 1932                                i2l570 0434  
                              i2l562 019A                                i2l643 259C  
                              i2l299 1978                                i2l580 082C  
                              i2l572 04E8                                i2l564 023C  
                              i2l556 0074                                i2l636 2574  
                              i2l637 24C6                                i2l629 24B0  
                              i2l590 0CDC                                i2l582 091C  
                              i2l574 059C                                i2l566 02DE  
                              i2l558 00D6                                i2l647 25E4  
                              i2l639 251A                                i2l592 0DA2  
                              i2l584 0A0C                                i2l576 068A  
                              i2l568 0380                                i2l648 2638  
                              i2l649 25EA                                i2l586 0AFC  
                              i2l578 0778                                i2l588 0BEC  
                              i2l598 2A9C                                _PORTB 000F81  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                    __end_of_lcdInst 2F40                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initLCD 2C4C  
                              _check 2A40                       __CFG_EBTRB$OFF 000000  
                              _angle 00DB                      __end_of_dpowers FE7A  
                              _array FE7A                      __end_of_read_IR 29C2  
                              _error 00D7                                _valid 00D5  
                              _state 005C                                _putch 2F10  
                  _compartment_array 00B0                                pclath 000FFA  
                              tablat 000FF5                    _LCDinterruptState 0062  
                   __end_ofi2___wmul 2ED0                                status 000FD8  
                              wtemp6 006D                      __end_of_strncmp 28BC  
                    __end_of_strncpy 2B08                     ??_servoRotate180 00E7  
                     __CFG_PBADEN$ON 000000                     __end_ofi2_printf 265C  
                 __size_ofi2___lwdiv 0052                   __size_ofi2___lwmod 0042  
                    __initialization 2B5C                   __size_ofi2_lcdInst 0014  
                       __end_of_main 17FE                         __end_of_keys FE70  
                         i2printf@ap 0014                           i2printf@cp 0016  
                       __end_of_strs FEE7                   __size_ofi2_initLCD 004C  
                     __CFG_OSC$HSPLL 000000                    __end_of_LCD_RIGHT FE7F  
                             ??_main 0189                        __activetblptr 000003  
                             ?_check 0001                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADRESH 000FC4  
                             _ADRESL 000FC3                      i2lcdNibble@data 0002  
                             ?_putch 0001                      i2lcdNibble@temp 0001  
                             _INT1IE 007F83                               _INT1IF 007F80  
                             i2l1200 2E4E                               i2l1201 2E4A  
                             i2l1210 2CE4                               i2l1203 2E66  
                             i2l1204 2E5E                               i2l1060 2BEC  
                             i2l1061 2BF6                               i2l1070 2E2C  
                             i2l1223 28A2                               i2l1071 2E36  
                             i2l1224 2838                               i2l1056 2BCC  
                             i2l1209 2CEC                               i2l1217 2D86  
                             i2l1225 289A                               i2l1057 2BC4  
                             i2l1218 2D7E                               i2l1066 2E14  
                             i2l1067 2E0C                               i2l3350 2838  
                             i2l4312 201A                               i2l4314 201C  
                             i2l3604 2A92                               i2l4196 1CBE  
                             i2l3666 25A0                            ??i2_putch 0003  
                     __CFG_XINST$OFF 000000                               ___wmul 2E82  
                     __CFG_STVREN$ON 000000                            ??___lwdiv 00EB  
                          ??___lwmod 00F2                     __end_of_is_valid 0E68  
                             clear_0 2B7A                               clear_1 2B86  
                             clear_2 2B92                               clear_3 2B9E  
                       ?_motorStop_0 0001                               _number 0068  
                          ??_lcdInst 00E9                               _printf 22D4  
                             _strcat 2E40                               _strcmp 2CE2  
                             _strcpy 2D74                            ??_initLCD 00EA  
                          ??_read_IR 00EC                   _compartment_number 0036  
                       __pdataCOMRAM 006A                    __end_ofi2___lwdiv 2C00  
                       __mediumconst FE5E                    __end_ofi2___lwmod 2E40  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                    __end_ofi2_lcdInst 2F68  
                          ??_strncmp 000D                            ??_strncpy 00F3  
                  __end_ofi2_initLCD 2C98                           __accesstop 0080  
            __end_of__initialization 2BA4                        ___rparam_used 000001  
                 i2___lwmod@dividend 0008                       __pcstackCOMRAM 0001  
                      __end_of_check 2AA6                        __end_of_array FE7D  
                      __end_of_putch 2F28                          i2printf@val 0018  
                          ?i2___wmul 0001                   __size_of_lcdNibble 0084  
                        i2putch@data 0003                            ?i2_printf 000D  
                            ??_check 0003                              ??_putch 00E9  
                         __pbssBANK0 0080                           __pbssBANK1 0100  
                         __pbssBANK2 0200                    ?_interruptHandler 0001  
                 ??_interruptHandler 001B                         ?i2_lcdNibble 0001  
                            ?___wmul 00E7                              ?_printf 00F3  
                            ?_strcat 0001                              ?_strcmp 0001  
                            ?_strcpy 0007                           ??i2___wmul 0005  
                       read_IR@input 00EE                           ??i2_printf 0011  
               lcd@LCDinterruptState 0061                              _B_array 00A0  
                            _B_count 004E                              i2_putch 2F40  
                          ?_is_valid 0001                              _N_array 0090  
                            _N_count 004A                    __end_of_lcdNibble 2940  
                            _S_array 0100                              _S_count 004C  
                            __Hparam 0000                              __Lparam 0000  
                            _W_array 0080                              _W_count 0048  
                    __size_of___wmul 0028                              ___lwdiv 2B08  
                            ___lwmod 2DBA             interruptHandler@keypress 0035  
                            __pcinit 2B5C                              __ramtop 1000  
                         _initialize 265C                              _lcdInst 2F28  
                            __ptext0 0E68                              __ptext1 2796  
                            __ptext2 2AA6                              __ptext3 2E82  
                            __ptext4 2940                              __ptext5 2C98  
                            __ptext6 2D2C                              __ptext7 22D4  
                            __ptext8 2F10                              __ptext9 2DBA  
                    __size_of_printf 01D2                      __size_of_strcat 0042  
                    __size_of_strcmp 004A                      __size_of_strcpy 0046  
                            _initLCD 2C00                              _counter 00D9  
               __size_of_motorStop_0 0020                              _dpowers FE70  
                            _read_IR 2940                        ?_motorStart_0 0001  
                          _LCD_RIGHT FE7E                              _strncmp 2836  
                     __pintcode_body 17FE                              _strncpy 2AA6  
               end_of_initialization 2BA4                __end_of_LCD_SIZE_HORZ FE81  
              __end_of_LCD_SIZE_VERT FE80         ??_generate_compartment_array 0003  
                       _final_number 0120                              int_func 17FE  
                i2___wmul@multiplier 0001                           ??_is_valid 0007  
                     _operation_time 00C9                        ?_servoRotate0 0001  
                            printf@c 0188                              printf@f 00F3  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                              strcmp@r 0006  
                          _PORTAbits 000F80                           _prev_state 00D1  
                     ??_motorStart_0 00E7  __size_of_generate_compartment_array 026C  
                          _TRISAbits 000F92                            _TRISCbits 000F94  
                          _TRISDbits 000F95                           _white_tape 006A  
                  i2___lwdiv@divisor 0003                            i2___lwdiv 2BAE  
                          i2___lwmod 2DFE                    i2___lwdiv@counter 0007  
                          i2_lcdInst 2F54                            i2_initLCD 2C4C  
                     ??_servoRotate0 00E7                           _store_prev 2796  
                     __end_of___wmul 2EAA                 __size_ofi2_lcdNibble 007E  
            __size_of_servoRotate180 004A                        __pidataCOMRAM 2F68  
                        ?_initialize 0001                        i2lcdInst@data 0003  
                   i2___wmul@product 0005                       __end_of_printf 24A6  
                     __end_of_strcat 2E82                       __end_of_strcmp 2D2C  
                       i2printf@flag 0012                       __end_of_strcpy 2DBA  
                       i2printf@prec 0013                  start_initialization 2B5C  
                  __size_ofi2___wmul 0026                            i2printf@c 001A  
                          i2printf@f 000D                           ?i2___lwdiv 0001  
                         ?i2___lwmod 0008                    __size_ofi2_printf 01B6  
                         ?i2_lcdInst 0001                         _counter_test 00C7  
                       _counter_step 0058                           ?i2_initLCD 0001  
                  interruptHandler@i 0032                             ??___wmul 00EB  
                   __CFG_LPT1OSC$OFF 000000                             ??_printf 00FD  
          __size_of_interruptHandler 2060                             ??_strcat 0005  
                           ??_strcmp 0005                             ??_strcpy 000B  
                        __pbssCOMRAM 0036                          _change_mode 00CF  
                      __pcstackBANK0 00E7                        __pcstackBANK1 0180  
                  i2___lwmod@divisor 000A                    i2___lwmod@counter 000C  
 __end_of_generate_compartment_array 22D4           _generate_compartment_array 2068  
                           ?i2_putch 0001                  __size_of_initialize 013A  
                       _current_set2 0063                 __end_of_motorStart_0 2F10  
                  __size_of_is_valid 0E56                     ___lwdiv@dividend 00E7  
                  __CFG_CCP2MX$PORTC 000000                          ?_store_prev 0001  
                          __pintcode 0008                        __pmediumconst FE5E  
                          _lcdNibble 28BC                             ?___lwdiv 00E7  
                           ?___lwmod 00EE                            _final_set 0158  
                           ?_lcdInst 0001                             ?_initLCD 0001  
                           ?_read_IR 00EA                 __end_of_servoRotate0 2D74  
                     __size_of_check 0066                     ___lwdiv@quotient 00EC  
                           ?_strncmp 0007                          store_prev@i 00F5  
                           ?_strncpy 00ED                          ??i2___lwdiv 0005  
                        ??i2___lwmod 000C                       __size_of_putch 0018  
                           _LCD_LEFT FE7D                          ??i2_lcdInst 0003  
                     ___wmul@product 00EB                             _LATCbits 000F8B  
                           _LATDbits 000F8C                          ??i2_initLCD 0004  
                        strncpy@from 00EF                          strncpy@size 00F1  
                           i2u201_40 2E18                             i2u220_40 2DB0  
                           i2u220_47 2DA6                             i2u225_40 2866  
                           i2u313_40 1BAE                             i2u250_40 2A80  
                           i2u251_40 2A92                             i2u315_40 1CBE  
                           i2u260_40 25D2                             i2u180_45 29FC  
                           i2u180_46 29FE                             i2u317_40 1D42  
                           i2u181_45 2A3C                             i2u181_46 2A3E  
                           i2u262_40 2640                             i2u254_40 2512  
                           i2u254_47 2508                             i2u247_40 2A50  
                           i2u255_40 253C                             i2u255_47 2532  
                           i2u248_40 2A60                             i2u440_47 1D5C  
                           i2u249_40 2A70                             i2u441_47 1DCC  
                           i2u450_47 29E4                             i2u442_47 1EA0  
                           i2u187_40 2D20                             i2u451_47 29EE  
                           i2u443_47 1F08                             i2u435_47 1A1E  
                           i2u452_47 2A24                             i2u444_47 1F28  
                           i2u436_47 1B82                             i2u453_47 2A2E  
                           i2u445_47 1FC6                             i2u437_47 1C58  
                           i2u198_40 2BD0                             i2u446_47 2F4C  
                           i2u438_47 1C98                             i2u447_47 2C52  
                           i2u439_47 1D0A                            _operation 00CB  
                           i2u448_47 2C86                             i2u449_47 2F60  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
                     _servoRotate180 2C98                        ??_motorStop_0 00E7  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 00E7  
                           i2___wmul 2EAA                        lcdNibble@data 00E8  
                         printf@flag 0180                        lcdNibble@temp 00E7  
                         printf@prec 0181                             i2_printf 24A6  
                     _LCD_HORZ_LIMIT FE82                  __size_of_store_prev 00A0  
               interruptHandler@temp 0034                     __size_ofi2_putch 0014  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000               __end_of_servoRotate180 2CE2  
              i2___wmul@multiplicand 0003                        _motor_counter 00CD  
                   __size_of___lwdiv 0054                     __size_of___lwmod 0044  
                       ??_initialize 00E7                     _interruptHandler 0008  
                   __size_of_lcdInst 0018                     __size_of_initLCD 004C  
                        _current_set 00E2                           strcat@from 0003  
             __end_of_LCD_HORZ_LIMIT FE83                     __size_of_read_IR 0082  
                __end_of_motorStop_0 2EF0                      ___lwdiv@divisor 00E9  
                    ___lwdiv@counter 00EB                             __ptext10 2B08  
                           __ptext11 2ED0                             __ptext20 2DFE  
                           __ptext12 2EF0                             __ptext21 2BAE  
                           __ptext13 265C                             __ptext30 2CE2  
                           __ptext22 2C4C                             __ptext14 2C00  
                           __ptext31 2068                             __ptext23 2F54  
                           __ptext15 2F28                             __ptext32 2A40  
                           __ptext24 29C2                             __ptext16 28BC  
                           __ptext25 2836                             __ptext26 2D74  
                           __ptext18 24A6                             __ptext27 2E40  
                           __ptext19 2F40                             __ptext28 0012  
                           __ptext29 2EAA                             _fastener 0200  
                     _LCD_VERT_LIMIT FE81                     __size_of_strncmp 0086  
                   __size_of_strncpy 0062                           strcpy@from 0009  
              __size_of_motorStart_0 0020                        __size_of_main 0996  
                           _is_valid 0012                           strncmp@len 000B  
                 __end_of_initialize 2796                             _temp_set 00DD  
                      ??i2_lcdNibble 0001                          ??_lcdNibble 00E7  
                           _prev_set 0130                      ?_servoRotate180 0001  
                           int$flags 006C                            printf@val 0186  
              __size_of_servoRotate0 0048                            putch@data 00E9  
                         _INTCONbits 000FF2                         _motorStart_0 2EF0  
             __end_of_LCD_VERT_LIMIT FE82                             intlevel2 0000  
        ?_generate_compartment_array 0001                        _LCD_SIZE_HORZ FE80  
                   ___lwmod@dividend 00EE                        _LCD_SIZE_VERT FE7F  
                          strncmp@s1 0007                            strncmp@s2 0009  
                          strncpy@cp 00F3                            strncpy@to 00ED  
                       ??_store_prev 00F5                         _servoRotate0 2D2C  
                           printf@ap 0182                             printf@cp 0184  
                        lcdInst@data 00E9                          _motorStop_0 2ED0  
                __end_ofi2_lcdNibble 2A40                             strcat@cp 0005  
                           strcat@to 0001                             strcmp@s1 0001  
                           strcmp@s2 0003                      ___lwmod@divisor 00F0  
                           strcpy@cp 000B                             strcpy@to 0007  
                    ___lwmod@counter 00F2                          _prev_number 0110  
                 __end_of_store_prev 2836  
