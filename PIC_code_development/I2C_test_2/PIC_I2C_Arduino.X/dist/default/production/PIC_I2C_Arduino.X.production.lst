

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 24 18:09:34 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4620 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt stack 0
    65  001000  00                 	db	0
    66  001001                     _keys:
    67                           	opt stack 0
    68  001001  31                 	db	49
    69  001002  32                 	db	50
    70  001003  33                 	db	51
    71  001004  41                 	db	65
    72  001005  34                 	db	52
    73  001006  35                 	db	53
    74  001007  36                 	db	54
    75  001008  42                 	db	66
    76  001009  37                 	db	55
    77  00100A  38                 	db	56
    78  00100B  39                 	db	57
    79  00100C  43                 	db	67
    80  00100D  2A                 	db	42
    81  00100E  30                 	db	48
    82  00100F  23                 	db	35
    83  001010  44                 	db	68
    84  001011  00                 	db	0
    85  001012                     __end_of_keys:
    86                           	opt stack 0
    87  001012                     _dpowers:
    88                           	opt stack 0
    89  001012  0001               	dw	1
    90  001014  000A               	dw	10
    91  001016  0064               	dw	100
    92  001018  03E8               	dw	1000
    93  00101A  2710               	dw	10000
    94  00101C                     __end_of_dpowers:
    95                           	opt stack 0
    96  00101C                     _LCD_LEFT:
    97                           	opt stack 0
    98  00101C  00                 	db	0
    99  00101D                     __end_of_LCD_LEFT:
   100                           	opt stack 0
   101  00101D                     _LCD_RIGHT:
   102                           	opt stack 0
   103  00101D  01                 	db	1
   104  00101E                     __end_of_LCD_RIGHT:
   105                           	opt stack 0
   106  00101E                     _LCD_SIZE_VERT:
   107                           	opt stack 0
   108  00101E  02                 	db	2
   109  00101F                     __end_of_LCD_SIZE_VERT:
   110                           	opt stack 0
   111  00101F                     _LCD_SIZE_HORZ:
   112                           	opt stack 0
   113  00101F  10                 	db	16
   114  001020                     __end_of_LCD_SIZE_HORZ:
   115                           	opt stack 0
   116  001020                     _LCD_VERT_LIMIT:
   117                           	opt stack 0
   118  001020  02                 	db	2
   119  001021                     __end_of_LCD_VERT_LIMIT:
   120                           	opt stack 0
   121  001021                     _LCD_HORZ_LIMIT:
   122                           	opt stack 0
   123  001021  28                 	db	40
   124  001022                     __end_of_LCD_HORZ_LIMIT:
   125                           	opt stack 0
   126  0000                     _SSPBUF	set	4041
   127  0000                     _SSPCON2bits	set	4037
   128  0000                     _SSPADD	set	4040
   129  0000                     _SSPCON2	set	4037
   130  0000                     _SSPCON1	set	4038
   131  0000                     _SSPSTAT	set	4039
   132  0000                     _TRISCbits	set	3988
   133  0000                     _SSPCON1bits	set	4038
   134  0000                     _INTCONbits	set	4082
   135  0000                     _LATDbits	set	3980
   136  0000                     _ADCON1	set	4033
   137  0000                     _ADCON0	set	4034
   138  0000                     _TRISE	set	3990
   139  0000                     _TRISD	set	3989
   140  0000                     _TRISC	set	3988
   141  0000                     _TRISB	set	3987
   142  0000                     _TRISA	set	3986
   143  0000                     _LATE	set	3981
   144  0000                     _LATD	set	3980
   145  0000                     _LATC	set	3979
   146  0000                     _LATB	set	3978
   147  0000                     _LATA	set	3977
   148  001022                     STR_1:
   149  001022  25                 	db	37
   150  001023  64                 	db	100	;'d'
   151  001024  00                 	db	0
   152  0000                     
   153                           ; #config settings
   154  001025  00                 	db	0	; dummy byte at the end
   155  0000                     
   156                           	psect	cinit
   157  00146A                     __pcinit:
   158                           	opt stack 0
   159  00146A                     start_initialization:
   160                           	opt stack 0
   161  00146A                     __initialization:
   162                           	opt stack 0
   163                           
   164                           ; Clear objects allocated to COMRAM (7 bytes)
   165  00146A  EE00  F01A         	lfsr	0,__pbssCOMRAM
   166  00146E  0E07               	movlw	7
   167  001470                     clear_0:
   168  001470  6AEE               	clrf	postinc0,c
   169  001472  06E8               	decf	wreg,f,c
   170  001474  E1FD               	bnz	clear_0
   171  001476                     end_of_initialization:
   172                           	opt stack 0
   173  001476                     __end_of__initialization:
   174                           	opt stack 0
   175  001476  0E00               	movlw	low (__Lmediumconst shr (0+16))
   176  001478  6EF8               	movwf	tblptru,c
   177  00147A  0100               	movlb	0
   178  00147C  EFA2  F008         	goto	_main	;jump to C main() function
   179                           tblptru	equ	0xFF8
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           
   183                           	psect	bssCOMRAM
   184  00001A                     __pbssCOMRAM:
   185                           	opt stack 0
   186  00001A                     _counter:
   187                           	opt stack 0
   188  00001A                     	ds	2
   189  00001C                     lcd@LCDinterruptState:
   190                           	opt stack 0
   191  00001C                     	ds	1
   192  00001D                     _data:
   193                           	opt stack 0
   194  00001D                     	ds	1
   195  00001E                     _result:
   196                           	opt stack 0
   197  00001E                     	ds	1
   198  00001F                     _ackBit:
   199                           	opt stack 0
   200  00001F                     	ds	1
   201  000020                     	ds	1
   202                           tblptru	equ	0xFF8
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt stack 0
   209  000001                     ??_I2C_Master_Wait:
   210  000001                     ?___lwdiv:
   211                           	opt stack 0
   212  000001                     ?___lldiv:
   213                           	opt stack 0
   214  000001                     lcdNibble@temp:
   215                           	opt stack 0
   216  000001                     ___lwdiv@dividend:
   217                           	opt stack 0
   218  000001                     ___lldiv@dividend:
   219                           	opt stack 0
   220                           
   221                           ; 4 bytes @ 0x0
   222  000001                     	ds	1
   223  000002                     lcdNibble@data:
   224                           	opt stack 0
   225  000002                     I2C_Master_Read@ackBit:
   226                           	opt stack 0
   227  000002                     I2C_Master_Write@byteToWrite:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x1
   231  000002                     	ds	1
   232  000003                     lcdInst@data:
   233                           	opt stack 0
   234  000003                     putch@data:
   235                           	opt stack 0
   236  000003                     I2C_Master_Read@receivedByte:
   237                           	opt stack 0
   238  000003                     ___lwdiv@divisor:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x2
   242  000003                     	ds	1
   243  000004                     ??_initLCD:
   244  000004                     
   245                           ; 1 bytes @ 0x3
   246  000004                     	ds	1
   247  000005                     ___lwdiv@quotient:
   248                           	opt stack 0
   249  000005                     ___lldiv@divisor:
   250                           	opt stack 0
   251                           
   252                           ; 4 bytes @ 0x4
   253  000005                     	ds	2
   254  000007                     ___lwdiv@counter:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x6
   258  000007                     	ds	1
   259  000008                     ?___lwmod:
   260                           	opt stack 0
   261  000008                     ___lwmod@dividend:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x7
   265  000008                     	ds	1
   266  000009                     ___lldiv@quotient:
   267                           	opt stack 0
   268                           
   269                           ; 4 bytes @ 0x8
   270  000009                     	ds	1
   271  00000A                     ___lwmod@divisor:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x9
   275  00000A                     	ds	2
   276  00000C                     ___lwmod@counter:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0xB
   280  00000C                     	ds	1
   281  00000D                     ?_printf:
   282                           	opt stack 0
   283  00000D                     ___lldiv@counter:
   284                           	opt stack 0
   285  00000D                     printf@f:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0xC
   289  00000D                     	ds	1
   290  00000E                     I2C_Master_Init@clockFreq:
   291                           	opt stack 0
   292                           
   293                           ; 4 bytes @ 0xD
   294  00000E                     	ds	3
   295  000011                     ??_printf:
   296                           
   297                           ; 1 bytes @ 0x10
   298  000011                     	ds	1
   299  000012                     ??_I2C_Master_Init:
   300  000012                     printf@ap:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x11
   304  000012                     	ds	2
   305  000014                     printf@flag:
   306                           	opt stack 0
   307                           
   308                           ; 1 bytes @ 0x13
   309  000014                     	ds	1
   310  000015                     printf@prec:
   311                           	opt stack 0
   312                           
   313                           ; 1 bytes @ 0x14
   314  000015                     	ds	1
   315  000016                     printf@val:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x15
   319  000016                     	ds	2
   320  000018                     printf@c:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x17
   324  000018                     	ds	1
   325  000019                     ??_main:
   326                           
   327                           ; 1 bytes @ 0x18
   328  000019                     	ds	1
   329                           tblptru	equ	0xFF8
   330                           postinc0	equ	0xFEE
   331                           wreg	equ	0xFE8
   332                           
   333 ;;
   334 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   335 ;;
   336 ;; *************** function _main *****************
   337 ;; Defined at:
   338 ;;		line 37 in file "main.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;		None
   343 ;; Return value:  Size  Location     Type
   344 ;;                  1    wreg      void 
   345 ;; Registers used:
   346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   354 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   355 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   356 ;;Total ram usage:        1 bytes
   357 ;; Hardware stack levels required when called:    3
   358 ;; This function calls:
   359 ;;		_I2C_Master_Init
   360 ;;		_I2C_Master_Read
   361 ;;		_I2C_Master_Start
   362 ;;		_I2C_Master_Stop
   363 ;;		_I2C_Master_Write
   364 ;;		_initLCD
   365 ;;		_lcdInst
   366 ;;		_printf
   367 ;; This function is called by:
   368 ;;		Startup code after reset
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           	psect	text0
   373  001144                     __ptext0:
   374                           	opt stack 0
   375  001144                     _main:
   376                           	opt stack 28
   377                           
   378                           ;main.c: 44: LATA = 0x00;
   379                           
   380                           ;incstack = 0
   381  001144  0E00               	movlw	0
   382  001146  6E89               	movwf	3977,c	;volatile
   383                           
   384                           ;main.c: 45: LATB = 0x00;
   385  001148  0E00               	movlw	0
   386  00114A  6E8A               	movwf	3978,c	;volatile
   387                           
   388                           ;main.c: 46: LATC = 0x00;
   389  00114C  0E00               	movlw	0
   390  00114E  6E8B               	movwf	3979,c	;volatile
   391                           
   392                           ;main.c: 47: LATD = 0x00;
   393  001150  0E00               	movlw	0
   394  001152  6E8C               	movwf	3980,c	;volatile
   395                           
   396                           ;main.c: 48: LATE = 0x00;
   397  001154  0E00               	movlw	0
   398  001156  6E8D               	movwf	3981,c	;volatile
   399                           
   400                           ;main.c: 52: TRISA = 0xFF;
   401  001158  6892               	setf	3986,c	;volatile
   402                           
   403                           ;main.c: 53: TRISB = 0xFF;
   404  00115A  6893               	setf	3987,c	;volatile
   405                           
   406                           ;main.c: 54: TRISC = 0b10000000;
   407  00115C  0E80               	movlw	128
   408  00115E  6E94               	movwf	3988,c	;volatile
   409                           
   410                           ;main.c: 58: TRISD = 0x00;
   411  001160  0E00               	movlw	0
   412  001162  6E95               	movwf	3989,c	;volatile
   413                           
   414                           ;main.c: 59: TRISE = 0x00;
   415  001164  0E00               	movlw	0
   416  001166  6E96               	movwf	3990,c	;volatile
   417                           
   418                           ;main.c: 62: ADCON0 = 0x00;
   419  001168  0E00               	movlw	0
   420  00116A  6EC2               	movwf	4034,c	;volatile
   421                           
   422                           ;main.c: 63: ADCON1 = 0b00001111;
   423  00116C  0E0F               	movlw	15
   424  00116E  6EC1               	movwf	4033,c	;volatile
   425                           
   426                           ;main.c: 67: initLCD();
   427  001170  ECDC  F009         	call	_initLCD	;wreg free
   428                           
   429                           ;main.c: 70: I2C_Master_Init(100000);
   430  001174  0EA0               	movlw	160
   431  001176  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   432  001178  0E86               	movlw	134
   433  00117A  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   434  00117C  0E01               	movlw	1
   435  00117E  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   436  001180  0E00               	movlw	0
   437  001182  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   438  001184  EC85  F009         	call	_I2C_Master_Init	;wreg free
   439                           
   440                           ;main.c: 71: I2C_Master_Start();
   441  001188  EC66  F00A         	call	_I2C_Master_Start	;wreg free
   442                           
   443                           ;main.c: 78: I2C_Master_Write(0b00001000);
   444  00118C  0E00               	movlw	0
   445  00118E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   446  001190  0E08               	movlw	8
   447  001192  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   448  001194  EC5D  F00A         	call	_I2C_Master_Write	;wreg free
   449                           
   450                           ;main.c: 79: I2C_Master_Stop();
   451  001198  EC62  F00A         	call	_I2C_Master_Stop	;wreg free
   452  00119C                     
   453                           ;main.c: 96: I2C_Master_Start();
   454  00119C  EC66  F00A         	call	_I2C_Master_Start	;wreg free
   455                           
   456                           ;main.c: 97: I2C_Master_Write(0b00010001);
   457  0011A0  0E00               	movlw	0
   458  0011A2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   459  0011A4  0E11               	movlw	17
   460  0011A6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   461  0011A8  EC5D  F00A         	call	_I2C_Master_Write	;wreg free
   462                           
   463                           ;main.c: 98: data = I2C_Master_Read(1);
   464  0011AC  0E01               	movlw	1
   465  0011AE  EC23  F00A         	call	_I2C_Master_Read
   466  0011B2  6E1D               	movwf	_data,c
   467                           
   468                           ;main.c: 99: I2C_Master_Stop();
   469  0011B4  EC62  F00A         	call	_I2C_Master_Stop	;wreg free
   470                           
   471                           ;main.c: 100: initLCD();
   472  0011B8  ECDC  F009         	call	_initLCD	;wreg free
   473                           
   474                           ;main.c: 101: if (data == 'a'){
   475  0011BC  0E61               	movlw	97
   476  0011BE  181D               	xorwf	_data,w,c
   477  0011C0  A4D8               	btfss	status,2,c
   478  0011C2  D018               	goto	l72
   479                           
   480                           ;main.c: 102: counter ++;
   481  0011C4  4A1A               	infsnz	_counter,f,c
   482  0011C6  2A1B               	incf	_counter+1,f,c
   483                           
   484                           ;main.c: 103: printf("%d",counter);
   485  0011C8  0E22               	movlw	low STR_1
   486  0011CA  6E0D               	movwf	printf@f,c
   487  0011CC  0E10               	movlw	high STR_1
   488  0011CE  6E0E               	movwf	printf@f+1,c
   489  0011D0  C01A  F00F         	movff	_counter,?_printf+2
   490  0011D4  C01B  F010         	movff	_counter+1,?_printf+3
   491  0011D8  EC13  F008         	call	_printf	;wreg free
   492                           
   493                           ;main.c: 104: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   494  0011DC  0E80               	movlw	128
   495  0011DE  EC4A  F00A         	call	_lcdInst
   496  0011E2  0E41               	movlw	65
   497  0011E4  6E19               	movwf	??_main& (0+255),c
   498  0011E6  0EEE               	movlw	238
   499  0011E8                     u507:
   500  0011E8  2EE8               	decfsz	wreg,f,c
   501  0011EA  D7FE               	bra	u507
   502  0011EC  2E19               	decfsz	??_main& (0+255),f,c
   503  0011EE  D7FC               	bra	u507
   504  0011F0  D000               	nop2	
   505                           
   506                           ;main.c: 105: }
   507  0011F2  D7D4               	goto	l71
   508  0011F4                     l72:
   509                           
   510                           ;main.c: 106: else{
   511                           ;main.c: 107: printf("%d",counter);
   512  0011F4  0E22               	movlw	low STR_1
   513  0011F6  6E0D               	movwf	printf@f,c
   514  0011F8  0E10               	movlw	high STR_1
   515  0011FA  6E0E               	movwf	printf@f+1,c
   516  0011FC  C01A  F00F         	movff	_counter,?_printf+2
   517  001200  C01B  F010         	movff	_counter+1,?_printf+3
   518  001204  EC13  F008         	call	_printf	;wreg free
   519  001208  D7C9               	goto	l71
   520  00120A                     __end_of_main:
   521                           	opt stack 0
   522                           tblptru	equ	0xFF8
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           status	equ	0xFD8
   526                           
   527 ;; *************** function _printf *****************
   528 ;; Defined at:
   529 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;  f               2   12[COMRAM] PTR const unsigned char 
   532 ;;		 -> STR_2(3), STR_1(3), 
   533 ;; Auto vars:     Size  Location     Type
   534 ;;  tmpval          4    0        struct .
   535 ;;  cp              3    0        PTR const unsigned char 
   536 ;;  val             2   21[COMRAM] unsigned int 
   537 ;;  ap              2   17[COMRAM] PTR void [1]
   538 ;;		 -> ?_printf(2), 
   539 ;;  len             2    0        unsigned int 
   540 ;;  c               1   23[COMRAM] char 
   541 ;;  prec            1   20[COMRAM] char 
   542 ;;  flag            1   19[COMRAM] unsigned char 
   543 ;; Return value:  Size  Location     Type
   544 ;;                  2   12[COMRAM] int 
   545 ;; Registers used:
   546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;Total ram usage:       12 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; Hardware stack levels required when called:    2
   559 ;; This function calls:
   560 ;;		___lwdiv
   561 ;;		___lwmod
   562 ;;		_putch
   563 ;; This function is called by:
   564 ;;		_main
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text1
   569  001026                     __ptext1:
   570                           	opt stack 0
   571  001026                     _printf:
   572                           	opt stack 28
   573                           
   574                           ;doprnt.c: 466: va_list ap;
   575                           ;doprnt.c: 499: signed char c;
   576                           ;doprnt.c: 506: signed char prec;
   577                           ;doprnt.c: 508: unsigned char flag;
   578                           ;doprnt.c: 523: union {
   579                           ;doprnt.c: 524: unsigned long vd;
   580                           ;doprnt.c: 525: double integ;
   581                           ;doprnt.c: 526: } tmpval;
   582                           ;doprnt.c: 528: unsigned int val;
   583                           ;doprnt.c: 529: unsigned len;
   584                           ;doprnt.c: 530: const char * cp;
   585                           ;doprnt.c: 533: *ap = __va_start();
   586                           
   587                           ;incstack = 0
   588  001026  0E0F               	movlw	low (?_printf+2)
   589  001028  6E12               	movwf	printf@ap,c
   590  00102A  0E00               	movlw	high (?_printf+2)
   591  00102C  6E13               	movwf	printf@ap+1,c
   592                           
   593                           ;doprnt.c: 536: while(c = *f++) {
   594  00102E  D07D               	goto	u470
   595  001030                     
   596                           ;doprnt.c: 538: if(c != '%')
   597  001030  0E25               	movlw	37
   598  001032  1818               	xorwf	printf@c,w,c
   599  001034  B4D8               	btfsc	status,2,c
   600  001036  D004               	goto	l184
   601                           
   602                           ;doprnt.c: 540: {
   603                           ;doprnt.c: 541: (putch(c) );
   604  001038  5018               	movf	printf@c,w,c
   605  00103A  EC40  F00A         	call	_putch
   606                           
   607                           ;doprnt.c: 542: continue;
   608  00103E  D075               	goto	u470
   609  001040                     l184:
   610                           
   611                           ;doprnt.c: 543: }
   612                           ;doprnt.c: 548: flag = 0;
   613  001040  0E00               	movlw	0
   614  001042  6E14               	movwf	printf@flag,c
   615                           
   616                           ;doprnt.c: 822: }
   617                           
   618                           ;doprnt.c: 813: continue;
   619                           
   620                           ;doprnt.c: 802: default:
   621                           
   622                           ;doprnt.c: 698: case 'i':
   623                           ;doprnt.c: 699: break;
   624                           
   625                           ;doprnt.c: 697: case 'd':
   626                           
   627                           ;doprnt.c: 638: goto alldone;
   628                           
   629                           ;doprnt.c: 637: case 0:
   630                           
   631                           ;doprnt.c: 635: switch(c = *f++) {
   632  001044  C00D  FFF6         	movff	printf@f,tblptrl
   633  001048  C00E  FFF7         	movff	printf@f+1,tblptrh
   634  00104C  4A0D               	infsnz	printf@f,f,c
   635  00104E  2A0E               	incf	printf@f+1,f,c
   636  001050                     	if	0	;tblptru may be non-zero
   637  001050                     	endif
   638  001050                     	if	0	;tblptru may be non-zero
   639  001050                     	endif
   640  001050  0008               	tblrd		*
   641  001052  CFF5 F018          	movff	tablat,printf@c
   642  001056  5018               	movf	printf@c,w,c
   643                           
   644                           ; Switch size 1, requested type "space"
   645                           ; Number of cases is 3, Range of values is 0 to 105
   646                           ; switch strategies available:
   647                           ; Name         Instructions Cycles
   648                           ; simple_byte           10     6 (average)
   649                           ;	Chosen strategy is simple_byte
   650  001058  0A00               	xorlw	0	; case 0
   651  00105A  B4D8               	btfsc	status,2,c
   652  00105C  0012               	return	
   653  00105E  0A64               	xorlw	100	; case 100
   654  001060  B4D8               	btfsc	status,2,c
   655  001062  D003               	goto	l190
   656  001064  0A0D               	xorlw	13	; case 105
   657  001066  A4D8               	btfss	status,2,c
   658  001068  D060               	goto	u470
   659  00106A                     l190:
   660                           
   661                           ;doprnt.c: 1253: {
   662                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   663  00106A  C012  FFD9         	movff	printf@ap,fsr2l
   664  00106E  C013  FFDA         	movff	printf@ap+1,fsr2h
   665  001072  CFDE F016          	movff	postinc2,printf@val
   666  001076  CFDD F017          	movff	postdec2,printf@val+1
   667  00107A  0E02               	movlw	2
   668  00107C  2612               	addwf	printf@ap,f,c
   669  00107E  0E00               	movlw	0
   670  001080  2213               	addwfc	printf@ap+1,f,c
   671                           
   672                           ;doprnt.c: 1261: if((int)val < 0) {
   673  001082  AE17               	btfss	printf@val+1,7,c
   674  001084  D006               	goto	l192
   675                           
   676                           ;doprnt.c: 1262: flag |= 0x03;
   677  001086  0E03               	movlw	3
   678  001088  1214               	iorwf	printf@flag,f,c
   679                           
   680                           ;doprnt.c: 1263: val = -val;
   681  00108A  6C16               	negf	printf@val,c
   682  00108C  1E17               	comf	printf@val+1,f,c
   683  00108E  B0D8               	btfsc	status,0,c
   684  001090  2A17               	incf	printf@val+1,f,c
   685  001092                     l192:
   686                           
   687                           ;doprnt.c: 1264: }
   688                           ;doprnt.c: 1266: }
   689                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   690  001092  0E01               	movlw	1
   691  001094  6E18               	movwf	printf@c,c
   692  001096                     l1211:
   693  001096  0E05               	movlw	5
   694  001098  1818               	xorwf	printf@c,w,c
   695  00109A  B4D8               	btfsc	status,2,c
   696  00109C  D012               	goto	u450
   697                           
   698                           ;doprnt.c: 1306: if(val < dpowers[c])
   699  00109E  5018               	movf	printf@c,w,c
   700  0010A0  0D02               	mullw	2
   701  0010A2  0E12               	movlw	low _dpowers
   702  0010A4  24F3               	addwf	prodl,w,c
   703  0010A6  6EF6               	movwf	tblptrl,c
   704  0010A8  0E10               	movlw	high _dpowers
   705  0010AA  20F4               	addwfc	prodh,w,c
   706  0010AC  6EF7               	movwf	tblptrh,c
   707  0010AE                     	if	0	;There are less than 3 active tblptr bytes
   708  0010AE                     	endif
   709  0010AE  0009               	tblrd		*+
   710  0010B0  50F5               	movf	tablat,w,c
   711  0010B2  5C16               	subwf	printf@val,w,c
   712  0010B4  0009               	tblrd		*+
   713  0010B6  50F5               	movf	tablat,w,c
   714  0010B8  5817               	subwfb	printf@val+1,w,c
   715  0010BA  A0D8               	btfss	status,0,c
   716  0010BC  D002               	goto	u450
   717                           
   718                           ;doprnt.c: 1307: break;
   719  0010BE  2A18               	incf	printf@c,f,c
   720  0010C0  D7EA               	goto	l1211
   721  0010C2                     u450:
   722                           
   723                           ;doprnt.c: 1422: {
   724                           ;doprnt.c: 1438: if(flag & 0x03)
   725  0010C2  C014  F011         	movff	printf@flag,??_printf
   726  0010C6  0E03               	movlw	3
   727  0010C8  1611               	andwf	??_printf,f,c
   728  0010CA  B4D8               	btfsc	status,2,c
   729  0010CC  D003               	goto	l196
   730                           
   731                           ;doprnt.c: 1439: (putch('-') );
   732  0010CE  0E2D               	movlw	45
   733  0010D0  EC40  F00A         	call	_putch
   734  0010D4                     l196:
   735                           
   736                           ;doprnt.c: 1469: }
   737                           ;doprnt.c: 1472: prec = c;
   738  0010D4  C018  F015         	movff	printf@c,printf@prec
   739                           
   740                           ;doprnt.c: 1474: while(prec--) {
   741  0010D8  D024               	goto	l197
   742  0010DA                     
   743                           ;doprnt.c: 1478: {
   744                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   745  0010DA  5015               	movf	printf@prec,w,c
   746  0010DC  0D02               	mullw	2
   747  0010DE  0E12               	movlw	low _dpowers
   748  0010E0  24F3               	addwf	prodl,w,c
   749  0010E2  6EF6               	movwf	tblptrl,c
   750  0010E4  0E10               	movlw	high _dpowers
   751  0010E6  20F4               	addwfc	prodh,w,c
   752  0010E8  6EF7               	movwf	tblptrh,c
   753  0010EA                     	if	0	;There are less than 3 active tblptr bytes
   754  0010EA                     	endif
   755  0010EA  0009               	tblrd		*+
   756  0010EC  CFF5 F003          	movff	tablat,___lwdiv@divisor
   757  0010F0  000A               	tblrd		*-
   758  0010F2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   759  0010F6  C016  F001         	movff	printf@val,___lwdiv@dividend
   760  0010FA  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   761  0010FE  ECB3  F009         	call	___lwdiv	;wreg free
   762  001102  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   763  001106  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   764  00110A  0E00               	movlw	0
   765  00110C  6E0B               	movwf	___lwmod@divisor+1,c
   766  00110E  0E0A               	movlw	10
   767  001110  6E0A               	movwf	___lwmod@divisor,c
   768  001112  EC02  F00A         	call	___lwmod	;wreg free
   769  001116  5008               	movf	?___lwmod,w,c
   770  001118  0F30               	addlw	48
   771  00111A  6E18               	movwf	printf@c,c
   772                           
   773                           ;doprnt.c: 1523: }
   774                           ;doprnt.c: 1524: (putch(c) );
   775  00111C  5018               	movf	printf@c,w,c
   776  00111E  EC40  F00A         	call	_putch
   777  001122                     l197:
   778  001122  0615               	decf	printf@prec,f,c
   779  001124  2815               	incf	printf@prec,w,c
   780  001126  A4D8               	btfss	status,2,c
   781  001128  D7D8               	goto	l198
   782  00112A                     u470:
   783  00112A  C00D  FFF6         	movff	printf@f,tblptrl
   784  00112E  C00E  FFF7         	movff	printf@f+1,tblptrh
   785  001132  4A0D               	infsnz	printf@f,f,c
   786  001134  2A0E               	incf	printf@f+1,f,c
   787  001136                     	if	0	;tblptru may be non-zero
   788  001136                     	endif
   789  001136                     	if	0	;tblptru may be non-zero
   790  001136                     	endif
   791  001136  0008               	tblrd		*
   792  001138  CFF5 F018          	movff	tablat,printf@c
   793  00113C  5018               	movf	printf@c,w,c
   794  00113E  B4D8               	btfsc	status,2,c
   795  001140  0012               	return	
   796  001142  D776               	goto	l183
   797  001144                     __end_of_printf:
   798                           	opt stack 0
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           prodh	equ	0xFF4
   804                           prodl	equ	0xFF3
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           postinc2	equ	0xFDE
   808                           postdec2	equ	0xFDD
   809                           fsr2h	equ	0xFDA
   810                           fsr2l	equ	0xFD9
   811                           status	equ	0xFD8
   812                           
   813 ;; *************** function _putch *****************
   814 ;; Defined at:
   815 ;;		line 24 in file "lcd.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  data            1    wreg     unsigned char 
   818 ;; Auto vars:     Size  Location     Type
   819 ;;  data            1    2[COMRAM] unsigned char 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, status,2, status,0, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;Total ram usage:        1 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; Hardware stack levels required when called:    1
   836 ;; This function calls:
   837 ;;		_lcdNibble
   838 ;; This function is called by:
   839 ;;		_printf
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text2
   844  001480                     __ptext2:
   845                           	opt stack 0
   846  001480                     _putch:
   847                           	opt stack 28
   848                           
   849                           ;incstack = 0
   850                           ;putch@data stored from wreg
   851  001480  6E03               	movwf	putch@data,c
   852                           
   853                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   854  001482  848C               	bsf	3980,2,c	;volatile
   855                           
   856                           ;lcd.c: 33: lcdNibble(data);
   857  001484  5003               	movf	putch@data,w,c
   858  001486  EC46  F009         	call	_lcdNibble
   859                           
   860                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   861  00148A  0EC8               	movlw	200
   862  00148C                     u517:
   863  00148C  D000               	nop2	
   864  00148E  2EE8               	decfsz	wreg,f,c
   865  001490  D7FD               	bra	u517
   866  001492  0012               	return		;funcret
   867  001494                     __end_of_putch:
   868                           	opt stack 0
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           prodh	equ	0xFF4
   874                           prodl	equ	0xFF3
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postinc2	equ	0xFDE
   878                           postdec2	equ	0xFDD
   879                           fsr2h	equ	0xFDA
   880                           fsr2l	equ	0xFD9
   881                           status	equ	0xFD8
   882                           
   883 ;; *************** function ___lwmod *****************
   884 ;; Defined at:
   885 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;  dividend        2    7[COMRAM] unsigned int 
   888 ;;  divisor         2    9[COMRAM] unsigned int 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  counter         1   11[COMRAM] unsigned char 
   891 ;; Return value:  Size  Location     Type
   892 ;;                  2    7[COMRAM] unsigned int 
   893 ;; Registers used:
   894 ;;		wreg, status,2, status,0
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   903 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   904 ;;Total ram usage:        5 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; This function calls:
   907 ;;		Nothing
   908 ;; This function is called by:
   909 ;;		_printf
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text3
   914  001404                     __ptext3:
   915                           	opt stack 0
   916  001404                     ___lwmod:
   917                           	opt stack 29
   918                           
   919                           ;incstack = 0
   920  001404  500A               	movf	___lwmod@divisor,w,c
   921  001406  100B               	iorwf	___lwmod@divisor+1,w,c
   922  001408  B4D8               	btfsc	status,2,c
   923  00140A  D018               	goto	l620
   924  00140C  0E01               	movlw	1
   925  00140E  6E0C               	movwf	___lwmod@counter,c
   926  001410  D004               	goto	l615
   927  001412  90D8               	bcf	status,0,c
   928  001414  360A               	rlcf	___lwmod@divisor,f,c
   929  001416  360B               	rlcf	___lwmod@divisor+1,f,c
   930  001418  2A0C               	incf	___lwmod@counter,f,c
   931  00141A                     l615:
   932  00141A  AE0B               	btfss	___lwmod@divisor+1,7,c
   933  00141C  D7FA               	goto	l616
   934  00141E                     u380:
   935  00141E  500A               	movf	___lwmod@divisor,w,c
   936  001420  5C08               	subwf	___lwmod@dividend,w,c
   937  001422  500B               	movf	___lwmod@divisor+1,w,c
   938  001424  5809               	subwfb	___lwmod@dividend+1,w,c
   939  001426  A0D8               	btfss	status,0,c
   940  001428  D004               	goto	l619
   941  00142A  500A               	movf	___lwmod@divisor,w,c
   942  00142C  5E08               	subwf	___lwmod@dividend,f,c
   943  00142E  500B               	movf	___lwmod@divisor+1,w,c
   944  001430  5A09               	subwfb	___lwmod@dividend+1,f,c
   945  001432                     l619:
   946  001432  90D8               	bcf	status,0,c
   947  001434  320B               	rrcf	___lwmod@divisor+1,f,c
   948  001436  320A               	rrcf	___lwmod@divisor,f,c
   949  001438  2E0C               	decfsz	___lwmod@counter,f,c
   950  00143A  D7F1               	goto	u380
   951  00143C                     l620:
   952  00143C  C008  F008         	movff	___lwmod@dividend,?___lwmod
   953  001440  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   954  001444  0012               	return		;funcret
   955  001446                     __end_of___lwmod:
   956                           	opt stack 0
   957                           tblptru	equ	0xFF8
   958                           tblptrh	equ	0xFF7
   959                           tblptrl	equ	0xFF6
   960                           tablat	equ	0xFF5
   961                           prodh	equ	0xFF4
   962                           prodl	equ	0xFF3
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           postinc2	equ	0xFDE
   966                           postdec2	equ	0xFDD
   967                           fsr2h	equ	0xFDA
   968                           fsr2l	equ	0xFD9
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function ___lwdiv *****************
   972 ;; Defined at:
   973 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  dividend        2    0[COMRAM] unsigned int 
   976 ;;  divisor         2    2[COMRAM] unsigned int 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  quotient        2    4[COMRAM] unsigned int 
   979 ;;  counter         1    6[COMRAM] unsigned char 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  2    0[COMRAM] unsigned int 
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   989 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;Total ram usage:        7 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_printf
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text4
  1003  001366                     __ptext4:
  1004                           	opt stack 0
  1005  001366                     ___lwdiv:
  1006                           	opt stack 29
  1007                           
  1008                           ;incstack = 0
  1009  001366  0E00               	movlw	0
  1010  001368  6E06               	movwf	___lwdiv@quotient+1,c
  1011  00136A  0E00               	movlw	0
  1012  00136C  6E05               	movwf	___lwdiv@quotient,c
  1013  00136E  5003               	movf	___lwdiv@divisor,w,c
  1014  001370  1004               	iorwf	___lwdiv@divisor+1,w,c
  1015  001372  B4D8               	btfsc	status,2,c
  1016  001374  D01C               	goto	l610
  1017  001376  0E01               	movlw	1
  1018  001378  6E07               	movwf	___lwdiv@counter,c
  1019  00137A  D004               	goto	l605
  1020  00137C  90D8               	bcf	status,0,c
  1021  00137E  3603               	rlcf	___lwdiv@divisor,f,c
  1022  001380  3604               	rlcf	___lwdiv@divisor+1,f,c
  1023  001382  2A07               	incf	___lwdiv@counter,f,c
  1024  001384                     l605:
  1025  001384  AE04               	btfss	___lwdiv@divisor+1,7,c
  1026  001386  D7FA               	goto	l606
  1027  001388                     u350:
  1028  001388  90D8               	bcf	status,0,c
  1029  00138A  3605               	rlcf	___lwdiv@quotient,f,c
  1030  00138C  3606               	rlcf	___lwdiv@quotient+1,f,c
  1031  00138E  5003               	movf	___lwdiv@divisor,w,c
  1032  001390  5C01               	subwf	___lwdiv@dividend,w,c
  1033  001392  5004               	movf	___lwdiv@divisor+1,w,c
  1034  001394  5802               	subwfb	___lwdiv@dividend+1,w,c
  1035  001396  A0D8               	btfss	status,0,c
  1036  001398  D005               	goto	l609
  1037  00139A  5003               	movf	___lwdiv@divisor,w,c
  1038  00139C  5E01               	subwf	___lwdiv@dividend,f,c
  1039  00139E  5004               	movf	___lwdiv@divisor+1,w,c
  1040  0013A0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1041  0013A2  8005               	bsf	___lwdiv@quotient,0,c
  1042  0013A4                     l609:
  1043  0013A4  90D8               	bcf	status,0,c
  1044  0013A6  3204               	rrcf	___lwdiv@divisor+1,f,c
  1045  0013A8  3203               	rrcf	___lwdiv@divisor,f,c
  1046  0013AA  2E07               	decfsz	___lwdiv@counter,f,c
  1047  0013AC  D7ED               	goto	u350
  1048  0013AE                     l610:
  1049  0013AE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1050  0013B2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1051  0013B6  0012               	return		;funcret
  1052  0013B8                     __end_of___lwdiv:
  1053                           	opt stack 0
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           prodh	equ	0xFF4
  1059                           prodl	equ	0xFF3
  1060                           postinc0	equ	0xFEE
  1061                           wreg	equ	0xFE8
  1062                           postinc2	equ	0xFDE
  1063                           postdec2	equ	0xFDD
  1064                           fsr2h	equ	0xFDA
  1065                           fsr2l	equ	0xFD9
  1066                           status	equ	0xFD8
  1067                           
  1068 ;; *************** function _initLCD *****************
  1069 ;; Defined at:
  1070 ;;		line 60 in file "lcd.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;		None
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;		None
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  1    wreg      void 
  1077 ;; Registers used:
  1078 ;;		wreg, status,2, status,0, cstack
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;Total ram usage:        1 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    2
  1091 ;; This function calls:
  1092 ;;		_lcdInst
  1093 ;; This function is called by:
  1094 ;;		_main
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text5
  1099  0013B8                     __ptext5:
  1100                           	opt stack 0
  1101  0013B8                     _initLCD:
  1102                           	opt stack 28
  1103                           
  1104                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1105                           
  1106                           ;incstack = 0
  1107  0013B8  0EC3               	movlw	195
  1108  0013BA  6E04               	movwf	??_initLCD& (0+255),c
  1109  0013BC  0ECD               	movlw	205
  1110  0013BE                     u527:
  1111  0013BE  2EE8               	decfsz	wreg,f,c
  1112  0013C0  D7FE               	bra	u527
  1113  0013C2  2E04               	decfsz	??_initLCD& (0+255),f,c
  1114  0013C4  D7FC               	bra	u527
  1115  0013C6  F000               	nop	
  1116                           
  1117                           ;lcd.c: 69: lcdInst(0b00110011);
  1118  0013C8  0E33               	movlw	51
  1119  0013CA  EC4A  F00A         	call	_lcdInst
  1120                           
  1121                           ;lcd.c: 70: lcdInst(0b00110010);
  1122  0013CE  0E32               	movlw	50
  1123  0013D0  EC4A  F00A         	call	_lcdInst
  1124                           
  1125                           ;lcd.c: 71: lcdInst(0b00101000);
  1126  0013D4  0E28               	movlw	40
  1127  0013D6  EC4A  F00A         	call	_lcdInst
  1128                           
  1129                           ;lcd.c: 72: lcdInst(0b00001111);
  1130  0013DA  0E0F               	movlw	15
  1131  0013DC  EC4A  F00A         	call	_lcdInst
  1132                           
  1133                           ;lcd.c: 73: lcdInst(0b00000110);
  1134  0013E0  0E06               	movlw	6
  1135  0013E2  EC4A  F00A         	call	_lcdInst
  1136                           
  1137                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1138  0013E6  0E01               	movlw	1
  1139  0013E8  EC4A  F00A         	call	_lcdInst
  1140  0013EC  0EC3               	movlw	195
  1141  0013EE  6E04               	movwf	??_initLCD& (0+255),c
  1142  0013F0  0ECD               	movlw	205
  1143  0013F2                     u537:
  1144  0013F2  2EE8               	decfsz	wreg,f,c
  1145  0013F4  D7FE               	bra	u537
  1146  0013F6  2E04               	decfsz	??_initLCD& (0+255),f,c
  1147  0013F8  D7FC               	bra	u537
  1148  0013FA  F000               	nop	
  1149                           
  1150                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1151  0013FC  0E0F               	movlw	15
  1152  0013FE  EC4A  F00A         	call	_lcdInst
  1153  001402  0012               	return		;funcret
  1154  001404                     __end_of_initLCD:
  1155                           	opt stack 0
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           prodh	equ	0xFF4
  1161                           prodl	equ	0xFF3
  1162                           postinc0	equ	0xFEE
  1163                           wreg	equ	0xFE8
  1164                           postinc2	equ	0xFDE
  1165                           postdec2	equ	0xFDD
  1166                           fsr2h	equ	0xFDA
  1167                           fsr2l	equ	0xFD9
  1168                           status	equ	0xFD8
  1169                           
  1170 ;; *************** function _lcdInst *****************
  1171 ;; Defined at:
  1172 ;;		line 11 in file "lcd.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;  data            1    wreg     unsigned char 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  data            1    2[COMRAM] unsigned char 
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, status,2, status,0, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1189 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1190 ;;Total ram usage:        1 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    1
  1193 ;; This function calls:
  1194 ;;		_lcdNibble
  1195 ;; This function is called by:
  1196 ;;		_main
  1197 ;;		_initLCD
  1198 ;;		_lcd_set_cursor
  1199 ;;		_lcd_shift_cursor
  1200 ;;		_lcd_shift_display
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text6
  1205  001494                     __ptext6:
  1206                           	opt stack 0
  1207  001494                     _lcdInst:
  1208                           	opt stack 29
  1209                           
  1210                           ;incstack = 0
  1211                           ;lcdInst@data stored from wreg
  1212  001494  6E03               	movwf	lcdInst@data,c
  1213                           
  1214                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1215  001496  948C               	bcf	3980,2,c	;volatile
  1216                           
  1217                           ;lcd.c: 20: lcdNibble(data);
  1218  001498  5003               	movf	lcdInst@data,w,c
  1219  00149A  EC46  F009         	call	_lcdNibble
  1220                           
  1221                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1222  00149E  0EC8               	movlw	200
  1223  0014A0                     u547:
  1224  0014A0  D000               	nop2	
  1225  0014A2  2EE8               	decfsz	wreg,f,c
  1226  0014A4  D7FD               	bra	u547
  1227  0014A6  0012               	return		;funcret
  1228  0014A8                     __end_of_lcdInst:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           prodh	equ	0xFF4
  1235                           prodl	equ	0xFF3
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           postinc2	equ	0xFDE
  1239                           postdec2	equ	0xFDD
  1240                           fsr2h	equ	0xFDA
  1241                           fsr2l	equ	0xFD9
  1242                           status	equ	0xFD8
  1243                           
  1244 ;; *************** function _lcdNibble *****************
  1245 ;; Defined at:
  1246 ;;		line 37 in file "lcd.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  data            1    wreg     unsigned char 
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  data            1    1[COMRAM] unsigned char 
  1251 ;;  temp            1    0[COMRAM] unsigned char 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;Total ram usage:        2 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; This function calls:
  1268 ;;		Nothing
  1269 ;; This function is called by:
  1270 ;;		_lcdInst
  1271 ;;		_putch
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text7
  1276  00128C                     __ptext7:
  1277                           	opt stack 0
  1278  00128C                     _lcdNibble:
  1279                           	opt stack 28
  1280                           
  1281                           ;incstack = 0
  1282                           ;lcdNibble@data stored from wreg
  1283  00128C  6E02               	movwf	lcdNibble@data,c
  1284                           
  1285                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1286  00128E  5002               	movf	lcdNibble@data,w,c
  1287  001290  0BF0               	andlw	240
  1288  001292  6E01               	movwf	lcdNibble@temp,c
  1289                           
  1290                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1291  001294  508C               	movf	3980,w,c	;volatile
  1292  001296  0B0F               	andlw	15
  1293  001298  6E8C               	movwf	3980,c	;volatile
  1294                           
  1295                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1296  00129A  5001               	movf	lcdNibble@temp,w,c
  1297  00129C  108C               	iorwf	3980,w,c	;volatile
  1298  00129E  6E8C               	movwf	3980,c	;volatile
  1299                           
  1300                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1301  0012A0  0E00               	movlw	0
  1302  0012A2  BEF2               	btfsc	intcon,7,c	;volatile
  1303  0012A4  0E01               	movlw	1
  1304  0012A6  6E1C               	movwf	lcd@LCDinterruptState,c
  1305  0012A8  9EF2               	bcf	intcon,7,c	;volatile
  1306  0012AA  868C               	bsf	3980,3,c	;volatile
  1307  0012AC  0E53               	movlw	83
  1308  0012AE                     u557:
  1309  0012AE  2EE8               	decfsz	wreg,f,c
  1310  0012B0  D7FE               	bra	u557
  1311  0012B2  F000               	nop	
  1312  0012B4  968C               	bcf	3980,3,c	;volatile
  1313  0012B6  0EC8               	movlw	200
  1314  0012B8                     u567:
  1315  0012B8  D000               	nop2	
  1316  0012BA  2EE8               	decfsz	wreg,f,c
  1317  0012BC  D7FD               	bra	u567
  1318  0012BE  B01C               	btfsc	lcd@LCDinterruptState,0,c
  1319  0012C0  D002               	bra	u15
  1320  0012C2  9EF2               	bcf	intcon,7,c	;volatile
  1321  0012C4  D001               	bra	u16
  1322  0012C6                     u15:
  1323  0012C6  8EF2               	bsf	intcon,7,c	;volatile
  1324  0012C8                     u16:
  1325                           
  1326                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1327  0012C8  3802               	swapf	lcdNibble@data,w,c
  1328  0012CA  0BF0               	andlw	240
  1329  0012CC  6E02               	movwf	lcdNibble@data,c
  1330                           
  1331                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1332  0012CE  5002               	movf	lcdNibble@data,w,c
  1333  0012D0  0BF0               	andlw	240
  1334  0012D2  6E01               	movwf	lcdNibble@temp,c
  1335                           
  1336                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1337  0012D4  508C               	movf	3980,w,c	;volatile
  1338  0012D6  0B0F               	andlw	15
  1339  0012D8  6E8C               	movwf	3980,c	;volatile
  1340                           
  1341                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1342  0012DA  5001               	movf	lcdNibble@temp,w,c
  1343  0012DC  108C               	iorwf	3980,w,c	;volatile
  1344  0012DE  6E8C               	movwf	3980,c	;volatile
  1345                           
  1346                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1347  0012E0  0E00               	movlw	0
  1348  0012E2  BEF2               	btfsc	intcon,7,c	;volatile
  1349  0012E4  0E01               	movlw	1
  1350  0012E6  6E1C               	movwf	lcd@LCDinterruptState,c
  1351  0012E8  9EF2               	bcf	intcon,7,c	;volatile
  1352  0012EA  868C               	bsf	3980,3,c	;volatile
  1353  0012EC  0E53               	movlw	83
  1354  0012EE                     u577:
  1355  0012EE  2EE8               	decfsz	wreg,f,c
  1356  0012F0  D7FE               	bra	u577
  1357  0012F2  F000               	nop	
  1358  0012F4  968C               	bcf	3980,3,c	;volatile
  1359  0012F6  0EC8               	movlw	200
  1360  0012F8                     u587:
  1361  0012F8  D000               	nop2	
  1362  0012FA  2EE8               	decfsz	wreg,f,c
  1363  0012FC  D7FD               	bra	u587
  1364  0012FE  B01C               	btfsc	lcd@LCDinterruptState,0,c
  1365  001300  D002               	bra	u25
  1366  001302  9EF2               	bcf	intcon,7,c	;volatile
  1367  001304  D001               	bra	u26
  1368  001306                     u25:
  1369  001306  8EF2               	bsf	intcon,7,c	;volatile
  1370  001308                     u26:
  1371  001308  0012               	return		;funcret
  1372  00130A                     __end_of_lcdNibble:
  1373                           	opt stack 0
  1374                           tblptru	equ	0xFF8
  1375                           tblptrh	equ	0xFF7
  1376                           tblptrl	equ	0xFF6
  1377                           tablat	equ	0xFF5
  1378                           prodh	equ	0xFF4
  1379                           prodl	equ	0xFF3
  1380                           intcon	equ	0xFF2
  1381                           postinc0	equ	0xFEE
  1382                           wreg	equ	0xFE8
  1383                           postinc2	equ	0xFDE
  1384                           postdec2	equ	0xFDD
  1385                           fsr2h	equ	0xFDA
  1386                           fsr2l	equ	0xFD9
  1387                           status	equ	0xFD8
  1388                           
  1389 ;; *************** function _I2C_Master_Write *****************
  1390 ;; Defined at:
  1391 ;;		line 108 in file "I2C.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;		None
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;Total ram usage:        2 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    1
  1412 ;; This function calls:
  1413 ;;		_I2C_Master_Wait
  1414 ;; This function is called by:
  1415 ;;		_main
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text8
  1420  0014BA                     __ptext8:
  1421                           	opt stack 0
  1422  0014BA                     _I2C_Master_Write:
  1423                           	opt stack 29
  1424                           
  1425                           ;I2C.c: 116: I2C_Master_Wait();
  1426                           
  1427                           ;incstack = 0
  1428  0014BA  EC54  F00A         	call	_I2C_Master_Wait	;wreg free
  1429                           
  1430                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1431  0014BE  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1432  0014C2  0012               	return		;funcret
  1433  0014C4                     __end_of_I2C_Master_Write:
  1434                           	opt stack 0
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           prodh	equ	0xFF4
  1440                           prodl	equ	0xFF3
  1441                           intcon	equ	0xFF2
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postinc2	equ	0xFDE
  1445                           postdec2	equ	0xFDD
  1446                           fsr2h	equ	0xFDA
  1447                           fsr2l	equ	0xFD9
  1448                           status	equ	0xFD8
  1449                           
  1450 ;; *************** function _I2C_Master_Stop *****************
  1451 ;; Defined at:
  1452 ;;		line 95 in file "I2C.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;		None
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;		None
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  1    wreg      void 
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, status,0, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;Total ram usage:        0 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    1
  1473 ;; This function calls:
  1474 ;;		_I2C_Master_Wait
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text9
  1481  0014C4                     __ptext9:
  1482                           	opt stack 0
  1483  0014C4                     _I2C_Master_Stop:
  1484                           	opt stack 29
  1485                           
  1486                           ;I2C.c: 104: I2C_Master_Wait();
  1487                           
  1488                           ;incstack = 0
  1489  0014C4  EC54  F00A         	call	_I2C_Master_Wait	;wreg free
  1490                           
  1491                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1492  0014C8  84C5               	bsf	4037,2,c	;volatile
  1493  0014CA  0012               	return		;funcret
  1494  0014CC                     __end_of_I2C_Master_Stop:
  1495                           	opt stack 0
  1496                           tblptru	equ	0xFF8
  1497                           tblptrh	equ	0xFF7
  1498                           tblptrl	equ	0xFF6
  1499                           tablat	equ	0xFF5
  1500                           prodh	equ	0xFF4
  1501                           prodl	equ	0xFF3
  1502                           intcon	equ	0xFF2
  1503                           postinc0	equ	0xFEE
  1504                           wreg	equ	0xFE8
  1505                           postinc2	equ	0xFDE
  1506                           postdec2	equ	0xFDD
  1507                           fsr2h	equ	0xFDA
  1508                           fsr2l	equ	0xFD9
  1509                           status	equ	0xFD8
  1510                           
  1511 ;; *************** function _I2C_Master_Start *****************
  1512 ;; Defined at:
  1513 ;;		line 69 in file "I2C.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;		None
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;		None
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;Total ram usage:        0 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    1
  1534 ;; This function calls:
  1535 ;;		_I2C_Master_Wait
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text10
  1542  0014CC                     __ptext10:
  1543                           	opt stack 0
  1544  0014CC                     _I2C_Master_Start:
  1545                           	opt stack 29
  1546                           
  1547                           ;I2C.c: 78: I2C_Master_Wait();
  1548                           
  1549                           ;incstack = 0
  1550  0014CC  EC54  F00A         	call	_I2C_Master_Wait	;wreg free
  1551                           
  1552                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1553  0014D0  80C5               	bsf	4037,0,c	;volatile
  1554  0014D2  0012               	return		;funcret
  1555  0014D4                     __end_of_I2C_Master_Start:
  1556                           	opt stack 0
  1557                           tblptru	equ	0xFF8
  1558                           tblptrh	equ	0xFF7
  1559                           tblptrl	equ	0xFF6
  1560                           tablat	equ	0xFF5
  1561                           prodh	equ	0xFF4
  1562                           prodl	equ	0xFF3
  1563                           intcon	equ	0xFF2
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           postinc2	equ	0xFDE
  1567                           postdec2	equ	0xFDD
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _I2C_Master_Read *****************
  1573 ;; Defined at:
  1574 ;;		line 120 in file "I2C.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  ackBit          1    wreg     unsigned char 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  ackBit          1    1[COMRAM] unsigned char 
  1579 ;;  receivedByte    1    2[COMRAM] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      unsigned char 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0, cstack
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;Total ram usage:        2 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:    1
  1596 ;; This function calls:
  1597 ;;		_I2C_Master_Wait
  1598 ;; This function is called by:
  1599 ;;		_main
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text11
  1604  001446                     __ptext11:
  1605                           	opt stack 0
  1606  001446                     _I2C_Master_Read:
  1607                           	opt stack 29
  1608                           
  1609                           ;incstack = 0
  1610                           ;I2C_Master_Read@ackBit stored from wreg
  1611  001446  6E02               	movwf	I2C_Master_Read@ackBit,c
  1612                           
  1613                           ;I2C.c: 130: unsigned char receivedByte;
  1614                           ;I2C.c: 132: I2C_Master_Wait();
  1615  001448  EC54  F00A         	call	_I2C_Master_Wait	;wreg free
  1616                           
  1617                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  1618  00144C  86C5               	bsf	4037,3,c	;volatile
  1619                           
  1620                           ;I2C.c: 135: I2C_Master_Wait();
  1621  00144E  EC54  F00A         	call	_I2C_Master_Wait	;wreg free
  1622                           
  1623                           ;I2C.c: 136: receivedByte = SSPBUF;
  1624  001452  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  1625                           
  1626                           ;I2C.c: 138: I2C_Master_Wait();
  1627  001456  EC54  F00A         	call	_I2C_Master_Wait	;wreg free
  1628                           
  1629                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  1630  00145A  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  1631  00145C  D002               	bra	u155
  1632  00145E  9AC5               	bcf	4037,5,c	;volatile
  1633  001460  D001               	bra	u156
  1634  001462                     u155:
  1635  001462  8AC5               	bsf	4037,5,c	;volatile
  1636  001464                     u156:
  1637                           
  1638                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  1639  001464  88C5               	bsf	4037,4,c	;volatile
  1640                           
  1641                           ;I2C.c: 142: return receivedByte;
  1642  001466  5003               	movf	I2C_Master_Read@receivedByte,w,c
  1643  001468  0012               	return	
  1644  00146A                     __end_of_I2C_Master_Read:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           intcon	equ	0xFF2
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           postinc2	equ	0xFDE
  1656                           postdec2	equ	0xFDD
  1657                           fsr2h	equ	0xFDA
  1658                           fsr2l	equ	0xFD9
  1659                           status	equ	0xFD8
  1660                           
  1661 ;; *************** function _I2C_Master_Wait *****************
  1662 ;; Defined at:
  1663 ;;		line 51 in file "I2C.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;		None
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  1    wreg      void 
  1670 ;; Registers used:
  1671 ;;		wreg, status,2, status,0
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;Total ram usage:        1 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_I2C_Master_Start
  1687 ;;		_I2C_Master_Stop
  1688 ;;		_I2C_Master_Write
  1689 ;;		_I2C_Master_Read
  1690 ;;		_I2C_Master_RepeatedStart
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text12
  1695  0014A8                     __ptext12:
  1696                           	opt stack 0
  1697  0014A8                     _I2C_Master_Wait:
  1698                           	opt stack 29
  1699                           
  1700                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1701                           
  1702                           ;incstack = 0
  1703  0014A8  B4C7               	btfsc	4039,2,c	;volatile
  1704  0014AA  D7FE               	goto	_I2C_Master_Wait
  1705  0014AC  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1706  0014B0  0E1F               	movlw	31
  1707  0014B2  1601               	andwf	??_I2C_Master_Wait,f,c
  1708  0014B4  B4D8               	btfsc	status,2,c
  1709  0014B6  0012               	return	
  1710  0014B8  D7F7               	goto	_I2C_Master_Wait
  1711  0014BA                     __end_of_I2C_Master_Wait:
  1712                           	opt stack 0
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           intcon	equ	0xFF2
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           postinc2	equ	0xFDE
  1723                           postdec2	equ	0xFDD
  1724                           fsr2h	equ	0xFDA
  1725                           fsr2l	equ	0xFD9
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function _I2C_Master_Init *****************
  1729 ;; Defined at:
  1730 ;;		line 14 in file "I2C.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;		None
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1744 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;Total ram usage:        8 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    1
  1751 ;; This function calls:
  1752 ;;		___lldiv
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text13
  1759  00130A                     __ptext13:
  1760                           	opt stack 0
  1761  00130A                     _I2C_Master_Init:
  1762                           	opt stack 29
  1763                           
  1764                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1765                           
  1766                           ;incstack = 0
  1767  00130A  9AC6               	bcf	4038,5,c	;volatile
  1768                           
  1769                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1770  00130C  8694               	bsf	3988,3,c	;volatile
  1771                           
  1772                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1773  00130E  8894               	bsf	3988,4,c	;volatile
  1774                           
  1775                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1776  001310  0E80               	movlw	128
  1777  001312  6EC7               	movwf	4039,c	;volatile
  1778                           
  1779                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1780  001314  0E28               	movlw	40
  1781  001316  6EC6               	movwf	4038,c	;volatile
  1782                           
  1783                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1784  001318  0E00               	movlw	0
  1785  00131A  6EC5               	movwf	4037,c	;volatile
  1786                           
  1787                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  1788  00131C  0E00               	movlw	0
  1789  00131E  6E01               	movwf	___lldiv@dividend,c
  1790  001320  0E5A               	movlw	90
  1791  001322  6E02               	movwf	___lldiv@dividend+1,c
  1792  001324  0E62               	movlw	98
  1793  001326  6E03               	movwf	___lldiv@dividend+2,c
  1794  001328  0E02               	movlw	2
  1795  00132A  6E04               	movwf	___lldiv@dividend+3,c
  1796  00132C  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  1797  001330  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  1798  001334  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  1799  001338  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  1800  00133C  0E02               	movlw	2
  1801  00133E                     u405:
  1802  00133E  90D8               	bcf	status,0,c
  1803  001340  3612               	rlcf	??_I2C_Master_Init,f,c
  1804  001342  3613               	rlcf	??_I2C_Master_Init+1,f,c
  1805  001344  3614               	rlcf	??_I2C_Master_Init+2,f,c
  1806  001346  3615               	rlcf	??_I2C_Master_Init+3,f,c
  1807  001348  2EE8               	decfsz	wreg,f,c
  1808  00134A  D7F9               	goto	u405
  1809  00134C  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  1810  001350  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  1811  001354  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  1812  001358  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  1813  00135C  EC05  F009         	call	___lldiv	;wreg free
  1814  001360  0401               	decf	?___lldiv,w,c
  1815  001362  6EC8               	movwf	4040,c	;volatile
  1816  001364  0012               	return		;funcret
  1817  001366                     __end_of_I2C_Master_Init:
  1818                           	opt stack 0
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           prodh	equ	0xFF4
  1824                           prodl	equ	0xFF3
  1825                           intcon	equ	0xFF2
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           postinc2	equ	0xFDE
  1829                           postdec2	equ	0xFDD
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834 ;; *************** function ___lldiv *****************
  1835 ;; Defined at:
  1836 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  dividend        4    0[COMRAM] unsigned long 
  1839 ;;  divisor         4    4[COMRAM] unsigned long 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  quotient        4    8[COMRAM] unsigned long 
  1842 ;;  counter         1   12[COMRAM] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  4    0[COMRAM] unsigned long 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2, status,0
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1852 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;Total ram usage:       13 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_I2C_Master_Init
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text14
  1866  00120A                     __ptext14:
  1867                           	opt stack 0
  1868  00120A                     ___lldiv:
  1869                           	opt stack 29
  1870                           
  1871                           ;incstack = 0
  1872  00120A  0E00               	movlw	0
  1873  00120C  6E09               	movwf	___lldiv@quotient,c
  1874  00120E  0E00               	movlw	0
  1875  001210  6E0A               	movwf	___lldiv@quotient+1,c
  1876  001212  0E00               	movlw	0
  1877  001214  6E0B               	movwf	___lldiv@quotient+2,c
  1878  001216  0E00               	movlw	0
  1879  001218  6E0C               	movwf	___lldiv@quotient+3,c
  1880  00121A  5005               	movf	___lldiv@divisor,w,c
  1881  00121C  1006               	iorwf	___lldiv@divisor+1,w,c
  1882  00121E  1007               	iorwf	___lldiv@divisor+2,w,c
  1883  001220  1008               	iorwf	___lldiv@divisor+3,w,c
  1884  001222  B4D8               	btfsc	status,2,c
  1885  001224  D02A               	goto	l557
  1886  001226  0E01               	movlw	1
  1887  001228  6E0D               	movwf	___lldiv@counter,c
  1888  00122A  D006               	goto	l552
  1889  00122C  90D8               	bcf	status,0,c
  1890  00122E  3605               	rlcf	___lldiv@divisor,f,c
  1891  001230  3606               	rlcf	___lldiv@divisor+1,f,c
  1892  001232  3607               	rlcf	___lldiv@divisor+2,f,c
  1893  001234  3608               	rlcf	___lldiv@divisor+3,f,c
  1894  001236  2A0D               	incf	___lldiv@counter,f,c
  1895  001238                     l552:
  1896  001238  AE08               	btfss	___lldiv@divisor+3,7,c
  1897  00123A  D7F8               	goto	l553
  1898  00123C                     u320:
  1899  00123C  90D8               	bcf	status,0,c
  1900  00123E  3609               	rlcf	___lldiv@quotient,f,c
  1901  001240  360A               	rlcf	___lldiv@quotient+1,f,c
  1902  001242  360B               	rlcf	___lldiv@quotient+2,f,c
  1903  001244  360C               	rlcf	___lldiv@quotient+3,f,c
  1904  001246  5005               	movf	___lldiv@divisor,w,c
  1905  001248  5C01               	subwf	___lldiv@dividend,w,c
  1906  00124A  5006               	movf	___lldiv@divisor+1,w,c
  1907  00124C  5802               	subwfb	___lldiv@dividend+1,w,c
  1908  00124E  5007               	movf	___lldiv@divisor+2,w,c
  1909  001250  5803               	subwfb	___lldiv@dividend+2,w,c
  1910  001252  5008               	movf	___lldiv@divisor+3,w,c
  1911  001254  5804               	subwfb	___lldiv@dividend+3,w,c
  1912  001256  A0D8               	btfss	status,0,c
  1913  001258  D009               	goto	l556
  1914  00125A  5005               	movf	___lldiv@divisor,w,c
  1915  00125C  5E01               	subwf	___lldiv@dividend,f,c
  1916  00125E  5006               	movf	___lldiv@divisor+1,w,c
  1917  001260  5A02               	subwfb	___lldiv@dividend+1,f,c
  1918  001262  5007               	movf	___lldiv@divisor+2,w,c
  1919  001264  5A03               	subwfb	___lldiv@dividend+2,f,c
  1920  001266  5008               	movf	___lldiv@divisor+3,w,c
  1921  001268  5A04               	subwfb	___lldiv@dividend+3,f,c
  1922  00126A  8009               	bsf	___lldiv@quotient,0,c
  1923  00126C                     l556:
  1924  00126C  90D8               	bcf	status,0,c
  1925  00126E  3208               	rrcf	___lldiv@divisor+3,f,c
  1926  001270  3207               	rrcf	___lldiv@divisor+2,f,c
  1927  001272  3206               	rrcf	___lldiv@divisor+1,f,c
  1928  001274  3205               	rrcf	___lldiv@divisor,f,c
  1929  001276  2E0D               	decfsz	___lldiv@counter,f,c
  1930  001278  D7E1               	goto	u320
  1931  00127A                     l557:
  1932  00127A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1933  00127E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1934  001282  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1935  001286  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1936  00128A  0012               	return		;funcret
  1937  00128C                     __end_of___lldiv:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           tblptrh	equ	0xFF7
  1941                           tblptrl	equ	0xFF6
  1942                           tablat	equ	0xFF5
  1943                           prodh	equ	0xFF4
  1944                           prodl	equ	0xFF3
  1945                           intcon	equ	0xFF2
  1946                           postinc0	equ	0xFEE
  1947                           wreg	equ	0xFE8
  1948                           postinc2	equ	0xFDE
  1949                           postdec2	equ	0xFDD
  1950                           fsr2h	equ	0xFDA
  1951                           fsr2l	equ	0xFD9
  1952                           status	equ	0xFD8
  1953                           tblptru	equ	0xFF8
  1954                           tblptrh	equ	0xFF7
  1955                           tblptrl	equ	0xFF6
  1956                           tablat	equ	0xFF5
  1957                           prodh	equ	0xFF4
  1958                           prodl	equ	0xFF3
  1959                           intcon	equ	0xFF2
  1960                           postinc0	equ	0xFEE
  1961                           wreg	equ	0xFE8
  1962                           postinc2	equ	0xFDE
  1963                           postdec2	equ	0xFDD
  1964                           fsr2h	equ	0xFDA
  1965                           fsr2l	equ	0xFD9
  1966                           status	equ	0xFD8
  1967                           
  1968                           	psect	rparam
  1969  0000                     tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           prodh	equ	0xFF4
  1974                           prodl	equ	0xFF3
  1975                           intcon	equ	0xFF2
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postinc2	equ	0xFDE
  1979                           postdec2	equ	0xFDD
  1980                           fsr2h	equ	0xFDA
  1981                           fsr2l	equ	0xFD9
  1982                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    33
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     25      32
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2049
                                             24 COMRAM     1     1      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1253
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     174
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     19      20       1       25.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20      34        0.0%
DATA                 0      0      20       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 24 18:09:34 2018

                         l71 119C                           l72 11F4                           u15 12C6  
                         u16 12C8                           u25 1306                           u26 1308  
                __CFG_CPD$ON 000000                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l190 106A                          l183 1030                          l192 1092  
                        l184 1040                          l610 13AE                          l620 143C  
                        l196 10D4                          l605 1384                          l197 1122  
                        l606 137C                          l198 10DA                          l615 141A  
                        l552 1238                          l616 1412                          l553 122C  
                        l609 13A4                          l619 1432                          l556 126C  
                        l557 127A                 __CFG_CPB$OFF 000000                          u320 123C  
                        u155 1462                          u156 1464                          u405 133E  
                        u350 1388                          u450 10C2                          u507 11E8  
                        u380 141E                          u517 148C                          u470 112A  
                        u527 13BE                          u537 13F2                          u547 14A0  
                        u557 12AE                          u567 12B8                          u577 12EE  
                        u587 12F8                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1211 1096                         STR_1 1022  
                       STR_2 1022                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       _data 001D                         _main 1144                         _keys 1001  
                       fsr2h 000FDA                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_LEFT 101D  
      I2C_Master_Read@ackBit 0002             ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lldiv 128C              __end_of___lwdiv 13B8              __end_of___lwmod 1446  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 14A8               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 1404               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 101C                        _putch 1480                        tablat 000FF5  
          _LCDinterruptState 0020                        status 000FD8  I2C_Master_Read@receivedByte 0003  
             __CFG_PBADEN$ON 000000              __initialization 146A                 __end_of_main 120A  
               __end_of_keys 1012               __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT 101E  
                     ??_main 0019                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0004                       ?_putch 0001  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
                     _ackBit 001F               __CFG_STVREN$ON 000000                    ??___lldiv 0009  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 1470  
                     _result 001E                    ??_lcdInst 0003                       _printf 1026  
                  ??_initLCD 0004                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 1476                ___rparam_used 000001               __pcstackCOMRAM 0001  
              __end_of_putch 1494           __size_of_lcdNibble 007E                      ??_putch 0003  
                    ?_printf 000D         lcd@LCDinterruptState 001C                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 130A  
                    __Hparam 0000                      __Lparam 0000                      ___lldiv 120A  
                    ___lwdiv 1366                      ___lwmod 1404                 __psmallconst 1000  
                    __pcinit 146A                      __ramtop 1000                      _lcdInst 1494  
                    __ptext0 1144                      __ptext1 1026                      __ptext2 1480  
                    __ptext3 1404                      __ptext4 1366                      __ptext5 13B8  
                    __ptext6 1494                      __ptext7 128C                      __ptext8 14BA  
                    __ptext9 14C4              __size_of_printf 011E                      _initLCD 13B8  
                    _counter 001A                      _dpowers 1012                    _LCD_RIGHT 101D  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012  
   __size_of_I2C_Master_Stop 0008         end_of_initialization 1476        __end_of_LCD_SIZE_HORZ 1020  
      __end_of_LCD_SIZE_VERT 101F                __Lmediumconst 0000    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005              ___lldiv@counter 000D  
                    printf@c 0018                      printf@f 000D                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                    _TRISCbits 000F94  
             __end_of_printf 1144          start_initialization 146A            ??_I2C_Master_Init 0012  
          ??_I2C_Master_Read 0002            ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002  
   I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000                     ??_printf 0011  
                __pbssCOMRAM 001A             _I2C_Master_Start 14CC             _I2C_Master_Write 14BA  
           ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000                    _lcdNibble 128C  
                   ?___lldiv 0001                     ?___lwdiv 0001                     ?___lwmod 0008  
                   ?_lcdInst 0001                     ?_initLCD 0001                  __smallconst 1000  
           ___lwdiv@quotient 0005               __size_of_putch 0014                     _LCD_LEFT 101C  
                   _LATDbits 000F8C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
              lcdNibble@data 0002                   printf@flag 0014                lcdNibble@temp 0001  
                 printf@prec 0015               _LCD_HORZ_LIMIT 1021                     __Hrparam 0000  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082  
           __size_of___lwdiv 0052             __size_of___lwmod 0042             __size_of_lcdInst 0014  
            _I2C_Master_Init 130A              _I2C_Master_Read 1446             __size_of_initLCD 004C  
            _I2C_Master_Wait 14A8              _I2C_Master_Stop 14C4       __end_of_LCD_HORZ_LIMIT 1022  
            ___lwdiv@divisor 0003              ___lwdiv@counter 0007                     __ptext10 14CC  
                   __ptext11 1446                     __ptext12 14A8                     __ptext13 130A  
                   __ptext14 120A               _LCD_VERT_LIMIT 1020                __size_of_main 00C6  
                ??_lcdNibble 0001                    printf@val 0016  I2C_Master_Write@byteToWrite 0002  
                  putch@data 0003     __end_of_I2C_Master_Start 14D4     __end_of_I2C_Master_Write 14C4  
                 _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1021                _LCD_SIZE_HORZ 101F  
           ___lwmod@dividend 0008                _LCD_SIZE_VERT 101E             ___lldiv@dividend 0001  
                   printf@ap 0012      __end_of_I2C_Master_Init 1366      __end_of_I2C_Master_Read 146A  
    __end_of_I2C_Master_Wait 14BA      __end_of_I2C_Master_Stop 14CC                  lcdInst@data 0003  
           ___lldiv@quotient 0009              ___lwmod@divisor 000A              ___lwmod@counter 000C  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
