

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr  9 23:20:52 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4620 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	smallconst
    58  001000                     __psmallconst:
    59                           	opt stack 0
    60  001000  00                 	db	0
    61  001001                     _VIOLET:
    62                           	opt stack 0
    63  001001  00D3               	dw	211
    64  001003  0094               	dw	148
    65  001005                     __end_of_VIOLET:
    66                           	opt stack 0
    67  001005                     _INDIGO:
    68                           	opt stack 0
    69  001005  0082               	dw	130
    70  001007  004B               	dw	75
    71  001009                     __end_of_INDIGO:
    72                           	opt stack 0
    73  001009                     _BLUE:
    74                           	opt stack 0
    75  001009  00FF               	dw	255
    76  00100B  0000               	dw	0
    77  00100D                     __end_of_BLUE:
    78                           	opt stack 0
    79  00100D                     _GREEN:
    80                           	opt stack 0
    81  00100D  FF00               	dw	65280
    82  00100F  0000               	dw	0
    83  001011                     __end_of_GREEN:
    84                           	opt stack 0
    85  001011                     _YELLOW:
    86                           	opt stack 0
    87  001011  FF00               	dw	65280
    88  001013  00FF               	dw	255
    89  001015                     __end_of_YELLOW:
    90                           	opt stack 0
    91  001015                     _ORANGE:
    92                           	opt stack 0
    93  001015  8C00               	dw	35840
    94  001017  00FF               	dw	255
    95  001019                     __end_of_ORANGE:
    96                           	opt stack 0
    97  001019                     _RED:
    98                           	opt stack 0
    99  001019  0000               	dw	0
   100  00101B  00FF               	dw	255
   101  00101D                     __end_of_RED:
   102                           	opt stack 0
   103  00101D                     _WHITE:
   104                           	opt stack 0
   105  00101D  FFFF               	dw	65535
   106  00101F  00FF               	dw	255
   107  001021                     __end_of_WHITE:
   108                           	opt stack 0
   109  001021                     _GREY:
   110                           	opt stack 0
   111  001021  8080               	dw	32896
   112  001023  0080               	dw	128
   113  001025                     __end_of_GREY:
   114                           	opt stack 0
   115  001025                     _BLACK:
   116                           	opt stack 0
   117  001025  0000               	dw	0
   118  001027  0000               	dw	0
   119  001029                     __end_of_BLACK:
   120                           	opt stack 0
   121  001029  C7                 	db	199
   122  00102A                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   123                           	opt stack 0
   124  00102A                     GLCD_PIC@INST_VMCTR1:
   125                           	opt stack 0
   126  00102A  C5                 	db	197
   127  00102B                     __end_ofGLCD_PIC@INST_VMCTR1:
   128                           	opt stack 0
   129  00102B                     GLCD_PIC@INST_PWCTR5:
   130                           	opt stack 0
   131  00102B  C4                 	db	196
   132  00102C                     __end_ofGLCD_PIC@INST_PWCTR5:
   133                           	opt stack 0
   134  00102C                     GLCD_PIC@INST_PWCTR4:
   135                           	opt stack 0
   136  00102C  C3                 	db	195
   137  00102D                     __end_ofGLCD_PIC@INST_PWCTR4:
   138                           	opt stack 0
   139  00102D                     GLCD_PIC@INST_PWCTR3:
   140                           	opt stack 0
   141  00102D  C2                 	db	194
   142  00102E                     __end_ofGLCD_PIC@INST_PWCTR3:
   143                           	opt stack 0
   144  00102E                     GLCD_PIC@INST_PWCTR2:
   145                           	opt stack 0
   146  00102E  C1                 	db	193
   147  00102F                     __end_ofGLCD_PIC@INST_PWCTR2:
   148                           	opt stack 0
   149  00102F                     GLCD_PIC@INST_PWCTR1:
   150                           	opt stack 0
   151  00102F  C0                 	db	192
   152  001030                     __end_ofGLCD_PIC@INST_PWCTR1:
   153                           	opt stack 0
   154  001030                     GLCD_PIC@INST_INVCTR:
   155                           	opt stack 0
   156  001030  B4                 	db	180
   157  001031                     __end_ofGLCD_PIC@INST_INVCTR:
   158                           	opt stack 0
   159  001031                     GLCD_PIC@INST_FRMCTR3:
   160                           	opt stack 0
   161  001031  B3                 	db	179
   162  001032                     __end_ofGLCD_PIC@INST_FRMCTR3:
   163                           	opt stack 0
   164  001032                     GLCD_PIC@INST_FRMCTR2:
   165                           	opt stack 0
   166  001032  B2                 	db	178
   167  001033                     __end_ofGLCD_PIC@INST_FRMCTR2:
   168                           	opt stack 0
   169  001033                     GLCD_PIC@INST_FRMCTR1:
   170                           	opt stack 0
   171  001033  B1                 	db	177
   172  001034                     __end_ofGLCD_PIC@INST_FRMCTR1:
   173                           	opt stack 0
   174  001034                     GLCD_PIC@INST_COLMOD:
   175                           	opt stack 0
   176  001034  3A                 	db	58
   177  001035                     __end_ofGLCD_PIC@INST_COLMOD:
   178                           	opt stack 0
   179  001035  39                 	db	57
   180  001036                     __end_ofGLCD_PIC@INST_IDMON:
   181                           	opt stack 0
   182  001036                     GLCD_PIC@INST_IDMOFF:
   183                           	opt stack 0
   184  001036  38                 	db	56
   185  001037                     __end_ofGLCD_PIC@INST_IDMOFF:
   186                           	opt stack 0
   187  001037                     GLCD_PIC@INST_MADCTL:
   188                           	opt stack 0
   189  001037  36                 	db	54
   190  001038                     __end_ofGLCD_PIC@INST_MADCTL:
   191                           	opt stack 0
   192  001038  35                 	db	53
   193  001039                     __end_ofGLCD_PIC@INST_TEON:
   194                           	opt stack 0
   195  001039  34                 	db	52
   196  00103A                     __end_ofGLCD_PIC@INST_TEOFF:
   197                           	opt stack 0
   198  00103A  30                 	db	48
   199  00103B                     __end_ofGLCD_PIC@INST_PTLAR:
   200                           	opt stack 0
   201  00103B                     GLCD_PIC@INST_RAMWR:
   202                           	opt stack 0
   203  00103B  2C                 	db	44
   204  00103C                     __end_ofGLCD_PIC@INST_RAMWR:
   205                           	opt stack 0
   206  00103C                     GLCD_PIC@INST_RASET:
   207                           	opt stack 0
   208  00103C  2B                 	db	43
   209  00103D                     __end_ofGLCD_PIC@INST_RASET:
   210                           	opt stack 0
   211  00103D                     GLCD_PIC@INST_CASET:
   212                           	opt stack 0
   213  00103D  2A                 	db	42
   214  00103E                     __end_ofGLCD_PIC@INST_CASET:
   215                           	opt stack 0
   216  00103E                     GLCD_PIC@INST_DISPON:
   217                           	opt stack 0
   218  00103E  29                 	db	41
   219  00103F                     __end_ofGLCD_PIC@INST_DISPON:
   220                           	opt stack 0
   221  00103F  28                 	db	40
   222  001040                     __end_ofGLCD_PIC@INST_DISPOFF:
   223                           	opt stack 0
   224  001040                     GLCD_PIC@INST_GAMSET:
   225                           	opt stack 0
   226  001040  26                 	db	38
   227  001041                     __end_ofGLCD_PIC@INST_GAMSET:
   228                           	opt stack 0
   229  001041  21                 	db	33
   230  001042                     __end_ofGLCD_PIC@INST_INVON:
   231                           	opt stack 0
   232  001042                     GLCD_PIC@INST_INVOFF:
   233                           	opt stack 0
   234  001042  20                 	db	32
   235  001043                     __end_ofGLCD_PIC@INST_INVOFF:
   236                           	opt stack 0
   237  001043                     GLCD_PIC@INST_NORON:
   238                           	opt stack 0
   239  001043  13                 	db	19
   240  001044                     __end_ofGLCD_PIC@INST_NORON:
   241                           	opt stack 0
   242  001044  12                 	db	18
   243  001045                     __end_ofGLCD_PIC@INST_PTLON:
   244                           	opt stack 0
   245  001045                     GLCD_PIC@INST_SLPOUT:
   246                           	opt stack 0
   247  001045  11                 	db	17
   248  001046                     __end_ofGLCD_PIC@INST_SLPOUT:
   249                           	opt stack 0
   250  001046  10                 	db	16
   251  001047                     __end_ofGLCD_PIC@INST_SLPIN:
   252                           	opt stack 0
   253  001047                     GLCD_PIC@INST_SWRESET:
   254                           	opt stack 0
   255  001047  01                 	db	1
   256  001048                     __end_ofGLCD_PIC@INST_SWRESET:
   257                           	opt stack 0
   258  001048  00                 	db	0
   259  001049                     __end_ofGLCD_PIC@INST_NOP:
   260                           	opt stack 0
   261  001049  C7                 	db	199
   262  00104A                     __end_of_INST_VMOFCTR2:
   263                           	opt stack 0
   264  00104A  C5                 	db	197
   265  00104B                     __end_of_INST_VMCTR1:
   266                           	opt stack 0
   267  00104B  C4                 	db	196
   268  00104C                     __end_of_INST_PWCTR5:
   269                           	opt stack 0
   270  00104C  C3                 	db	195
   271  00104D                     __end_of_INST_PWCTR4:
   272                           	opt stack 0
   273  00104D  C2                 	db	194
   274  00104E                     __end_of_INST_PWCTR3:
   275                           	opt stack 0
   276  00104E  C1                 	db	193
   277  00104F                     __end_of_INST_PWCTR2:
   278                           	opt stack 0
   279  00104F  C0                 	db	192
   280  001050                     __end_of_INST_PWCTR1:
   281                           	opt stack 0
   282  001050  B4                 	db	180
   283  001051                     __end_of_INST_INVCTR:
   284                           	opt stack 0
   285  001051  B3                 	db	179
   286  001052                     __end_of_INST_FRMCTR3:
   287                           	opt stack 0
   288  001052  B2                 	db	178
   289  001053                     __end_of_INST_FRMCTR2:
   290                           	opt stack 0
   291  001053  B1                 	db	177
   292  001054                     __end_of_INST_FRMCTR1:
   293                           	opt stack 0
   294  001054  3A                 	db	58
   295  001055                     __end_of_INST_COLMOD:
   296                           	opt stack 0
   297  001055  39                 	db	57
   298  001056                     __end_of_INST_IDMON:
   299                           	opt stack 0
   300  001056  38                 	db	56
   301  001057                     __end_of_INST_IDMOFF:
   302                           	opt stack 0
   303  001057  36                 	db	54
   304  001058                     __end_of_INST_MADCTL:
   305                           	opt stack 0
   306  001058  35                 	db	53
   307  001059                     __end_of_INST_TEON:
   308                           	opt stack 0
   309  001059  34                 	db	52
   310  00105A                     __end_of_INST_TEOFF:
   311                           	opt stack 0
   312  00105A  30                 	db	48
   313  00105B                     __end_of_INST_PTLAR:
   314                           	opt stack 0
   315  00105B  2C                 	db	44
   316  00105C                     __end_of_INST_RAMWR:
   317                           	opt stack 0
   318  00105C  2B                 	db	43
   319  00105D                     __end_of_INST_RASET:
   320                           	opt stack 0
   321  00105D  2A                 	db	42
   322  00105E                     __end_of_INST_CASET:
   323                           	opt stack 0
   324  00105E  29                 	db	41
   325  00105F                     __end_of_INST_DISPON:
   326                           	opt stack 0
   327  00105F  28                 	db	40
   328  001060                     __end_of_INST_DISPOFF:
   329                           	opt stack 0
   330  001060  26                 	db	38
   331  001061                     __end_of_INST_GAMSET:
   332                           	opt stack 0
   333  001061  21                 	db	33
   334  001062                     __end_of_INST_INVON:
   335                           	opt stack 0
   336  001062  20                 	db	32
   337  001063                     __end_of_INST_INVOFF:
   338                           	opt stack 0
   339  001063  13                 	db	19
   340  001064                     __end_of_INST_NORON:
   341                           	opt stack 0
   342  001064  12                 	db	18
   343  001065                     __end_of_INST_PTLON:
   344                           	opt stack 0
   345  001065  11                 	db	17
   346  001066                     __end_of_INST_SLPOUT:
   347                           	opt stack 0
   348  001066  10                 	db	16
   349  001067                     __end_of_INST_SLPIN:
   350                           	opt stack 0
   351  001067  01                 	db	1
   352  001068                     __end_of_INST_SWRESET:
   353                           	opt stack 0
   354  001068  00                 	db	0
   355  001069                     __end_of_INST_NOP:
   356                           	opt stack 0
   357  001069                     _GLCD_SIZE_VERT:
   358                           	opt stack 0
   359  001069  80                 	db	128
   360  00106A                     __end_of_GLCD_SIZE_VERT:
   361                           	opt stack 0
   362  00106A                     _GLCD_SIZE_HORZ:
   363                           	opt stack 0
   364  00106A  80                 	db	128
   365  00106B                     __end_of_GLCD_SIZE_HORZ:
   366                           	opt stack 0
   367  00106B                     _GLCD_ADDRESSABLE_SIZE_VERT:
   368                           	opt stack 0
   369  00106B  A0                 	db	160
   370  00106C                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   371                           	opt stack 0
   372  00106C                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   373                           	opt stack 0
   374  00106C  80                 	db	128
   375  00106D                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   376                           	opt stack 0
   377  0000                     _TRISDbits	set	3989
   378  0000                     _LATDbits	set	3980
   379  0000                     _TRISCbits	set	3988
   380  0000                     _SSPCON1	set	4038
   381  0000                     _SSPSTAT	set	4039
   382  0000                     _SSPCON1bits	set	4038
   383  0000                     _SSPSTATbits	set	4039
   384  0000                     _SSPBUF	set	4041
   385  0000                     _ADCON1	set	4033
   386  0000                     _ADCON0	set	4034
   387  0000                     _TRISE	set	3990
   388  0000                     _TRISD	set	3989
   389  0000                     _TRISC	set	3988
   390  0000                     _TRISB	set	3987
   391  0000                     _TRISA	set	3986
   392  0000                     _LATE	set	3981
   393  0000                     _LATD	set	3980
   394  0000                     _LATC	set	3979
   395  0000                     _LATB	set	3978
   396  0000                     _LATA	set	3977
   397  0000                     _OSCTUNEbits	set	3995
   398  0000                     _OSCCONbits	set	4051
   399  0000                     _SSPIF	set	31987
   400                           
   401                           ; #config settings
   402  00106D  00                 	db	0	; dummy byte at the end
   403  0000                     
   404                           	psect	cinit
   405  001954                     __pcinit:
   406                           	opt stack 0
   407  001954                     start_initialization:
   408                           	opt stack 0
   409  001954                     __initialization:
   410                           	opt stack 0
   411                           
   412                           ; Clear objects allocated to COMRAM (1 bytes)
   413  001954  6A21               	clrf	__pbssCOMRAM& (0+255),c
   414  001956                     end_of_initialization:
   415                           	opt stack 0
   416  001956                     __end_of__initialization:
   417                           	opt stack 0
   418  001956  0E00               	movlw	low (__Lmediumconst shr (0+16))
   419  001958  6EF8               	movwf	tblptru,c
   420  00195A  0100               	movlb	0
   421  00195C  EFD8  F00B         	goto	_main	;jump to C main() function
   422                           tblptru	equ	0xFF8
   423                           
   424                           	psect	bssCOMRAM
   425  000021                     __pbssCOMRAM:
   426                           	opt stack 0
   427  000021                     _MADCTLbits:
   428                           	opt stack 0
   429  000021                     	ds	1
   430                           tblptru	equ	0xFF8
   431                           
   432                           	psect	cstackCOMRAM
   433  000001                     __pcstackCOMRAM:
   434                           	opt stack 0
   435  000001                     ??_spiTransfer:
   436  000001                     ?___wmul:
   437                           	opt stack 0
   438  000001                     spiInit@divider:
   439                           	opt stack 0
   440  000001                     ___wmul@multiplier:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x0
   444  000001                     	ds	1
   445  000002                     spiTransfer@byteToTransfer:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x1
   449  000002                     	ds	1
   450  000003                     spiSend@val:
   451                           	opt stack 0
   452  000003                     ___wmul@multiplicand:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x2
   456  000003                     	ds	1
   457  000004                     glcdTransfer@cmd:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x3
   461  000004                     	ds	1
   462  000005                     ??_glcdTransfer:
   463  000005                     ___wmul@product:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x4
   467  000005                     	ds	1
   468  000006                     glcdTransfer@byte:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x5
   472  000006                     	ds	1
   473  000007                     glcdDrawRectangle@XE:
   474                           	opt stack 0
   475  000007                     glcdSetCOLMOD@numBitsPerPixel:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x6
   479  000007                     	ds	1
   480  000008                     glcdDrawRectangle@YS:
   481                           	opt stack 0
   482  000008                     glcdSetCOLMOD@rawData:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x7
   486  000008                     	ds	1
   487  000009                     glcdDrawRectangle@YE:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x8
   491  000009                     	ds	1
   492  00000A                     glcdDrawRectangle@color:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x9
   496  00000A                     	ds	4
   497  00000E                     ??_glcdDrawRectangle:
   498                           
   499                           ; 1 bytes @ 0xD
   500  00000E                     	ds	4
   501  000012                     glcdDrawRectangle@numLoops:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x11
   505  000012                     	ds	2
   506  000014                     glcdDrawRectangle@i:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x13
   510  000014                     	ds	2
   511  000016                     glcdDrawRectangle@colorData:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x15
   515  000016                     	ds	3
   516  000019                     glcdDrawRectangle@XS:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x18
   520  000019                     	ds	1
   521  00001A                     ??_initGLCD:
   522  00001A                     
   523                           ; 1 bytes @ 0x19
   524  00001A                     	ds	2
   525  00001C                     ??_main:
   526                           
   527                           ; 1 bytes @ 0x1B
   528  00001C                     	ds	2
   529  00001E                     main@rotation:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x1D
   533  00001E                     	ds	1
   534  00001F                     main@x:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x1E
   538  00001F                     	ds	1
   539  000020                     main@y:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x1F
   543  000020                     	ds	1
   544                           tblptru	equ	0xFF8
   545                           
   546 ;;
   547 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   548 ;;
   549 ;; *************** function _main *****************
   550 ;; Defined at:
   551 ;;		line 22 in file "main.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;		None
   554 ;; Auto vars:     Size  Location     Type
   555 ;;  y               1   31[COMRAM] unsigned char 
   556 ;;  x               1   30[COMRAM] unsigned char 
   557 ;;  rotation        1   29[COMRAM] unsigned char 
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   568 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   570 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   571 ;;Total ram usage:        5 bytes
   572 ;; Hardware stack levels required when called:    5
   573 ;; This function calls:
   574 ;;		_drawTeamName
   575 ;;		_glcdDrawRectangle
   576 ;;		_initGLCD
   577 ;; This function is called by:
   578 ;;		Startup code after reset
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text0
   583  0017B0                     __ptext0:
   584                           	opt stack 0
   585  0017B0                     _main:
   586                           	opt stack 26
   587                           
   588                           ;main.c: 28: OSCCONbits.IRCF2 = 1;
   589                           
   590                           ;incstack = 0
   591  0017B0  8CD3               	bsf	4051,6,c	;volatile
   592                           
   593                           ;main.c: 29: OSCCONbits.IRCF1 = 1;
   594  0017B2  8AD3               	bsf	4051,5,c	;volatile
   595                           
   596                           ;main.c: 30: OSCCONbits.IRCF0 = 1;
   597  0017B4  88D3               	bsf	4051,4,c	;volatile
   598                           
   599                           ;main.c: 31: OSCCONbits.SCS1 = 1;
   600  0017B6  82D3               	bsf	4051,1,c	;volatile
   601                           
   602                           ;main.c: 32: OSCTUNEbits.PLLEN = 1;
   603  0017B8  8C9B               	bsf	3995,6,c	;volatile
   604                           
   605                           ;main.c: 34: LATA = 0x00;
   606  0017BA  0E00               	movlw	0
   607  0017BC  6E89               	movwf	3977,c	;volatile
   608                           
   609                           ;main.c: 35: LATB = 0x00;
   610  0017BE  0E00               	movlw	0
   611  0017C0  6E8A               	movwf	3978,c	;volatile
   612                           
   613                           ;main.c: 36: LATC = 0x00;
   614  0017C2  0E00               	movlw	0
   615  0017C4  6E8B               	movwf	3979,c	;volatile
   616                           
   617                           ;main.c: 37: LATD = 0x00;
   618  0017C6  0E00               	movlw	0
   619  0017C8  6E8C               	movwf	3980,c	;volatile
   620                           
   621                           ;main.c: 38: LATE = 0x00;
   622  0017CA  0E00               	movlw	0
   623  0017CC  6E8D               	movwf	3981,c	;volatile
   624                           
   625                           ;main.c: 42: TRISA = 0xFF;
   626  0017CE  6892               	setf	3986,c	;volatile
   627                           
   628                           ;main.c: 43: TRISB = 0xFF;
   629  0017D0  6893               	setf	3987,c	;volatile
   630                           
   631                           ;main.c: 44: TRISC = 0b10000000;
   632  0017D2  0E80               	movlw	128
   633  0017D4  6E94               	movwf	3988,c	;volatile
   634                           
   635                           ;main.c: 48: TRISD = 0b00000001;
   636  0017D6  0E01               	movlw	1
   637  0017D8  6E95               	movwf	3989,c	;volatile
   638                           
   639                           ;main.c: 54: TRISE = 0b00000100;
   640  0017DA  0E04               	movlw	4
   641  0017DC  6E96               	movwf	3990,c	;volatile
   642                           
   643                           ;main.c: 61: ADCON0 = 0x00;
   644  0017DE  0E00               	movlw	0
   645  0017E0  6EC2               	movwf	4034,c	;volatile
   646                           
   647                           ;main.c: 62: ADCON1 = 0b00001111;
   648  0017E2  0E0F               	movlw	15
   649  0017E4  6EC1               	movwf	4033,c	;volatile
   650                           
   651                           ;main.c: 66: initGLCD();
   652  0017E6  EC37  F008         	call	_initGLCD	;wreg free
   653                           
   654                           ;main.c: 69: unsigned char rotation = 0, x = 0, y = 0;
   655  0017EA  0E00               	movlw	0
   656  0017EC  6E1E               	movwf	main@rotation,c
   657  0017EE  0E00               	movlw	0
   658  0017F0  6E1F               	movwf	main@x,c
   659  0017F2  0E00               	movlw	0
   660  0017F4  6E20               	movwf	main@y,c
   661                           
   662                           ;main.c: 70: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, WHITE);
   663  0017F6  0E6A               	movlw	low _GLCD_SIZE_HORZ
   664  0017F8  6EF6               	movwf	tblptrl,c
   665  0017FA                     	if	1	;There is more than 1 active tblptr byte
   666  0017FA  0E10               	movlw	high _GLCD_SIZE_HORZ
   667  0017FC  6EF7               	movwf	tblptrh,c
   668  0017FE                     	endif
   669  0017FE                     	if	0	;There are less than 3 active tblptr bytes
   670  0017FE                     	endif
   671  0017FE  0008               	tblrd		*
   672  001800  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   673  001804  0E00               	movlw	0
   674  001806  6E08               	movwf	glcdDrawRectangle@YS,c
   675  001808  0E69               	movlw	low _GLCD_SIZE_VERT
   676  00180A  6EF6               	movwf	tblptrl,c
   677  00180C                     	if	1	;There is more than 1 active tblptr byte
   678  00180C  0E10               	movlw	high _GLCD_SIZE_VERT
   679  00180E  6EF7               	movwf	tblptrh,c
   680  001810                     	endif
   681  001810                     	if	0	;There are less than 3 active tblptr bytes
   682  001810                     	endif
   683  001810  0008               	tblrd		*
   684  001812  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   685  001816  0E1D               	movlw	low _WHITE
   686  001818  6EF6               	movwf	tblptrl,c
   687  00181A                     	if	1	;There is more than 1 active tblptr byte
   688  00181A  0E10               	movlw	high _WHITE
   689  00181C  6EF7               	movwf	tblptrh,c
   690  00181E                     	endif
   691  00181E                     	if	0	;There are less than 3 active tblptr bytes
   692  00181E                     	endif
   693  00181E  0009               	tblrd		*+
   694  001820  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   695  001824  0009               	tblrd		*+
   696  001826  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   697  00182A  0009               	tblrd		*+
   698  00182C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   699  001830  000A               	tblrd		*-
   700  001832  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   701  001836  0E00               	movlw	0
   702  001838  EC18  F00B         	call	_glcdDrawRectangle
   703  00183C                     l133:
   704                           
   705                           ;main.c: 76: drawTeamName();
   706  00183C  ECB9  F009         	call	_drawTeamName	;wreg free
   707                           
   708                           ;main.c: 77: _delay((unsigned long)((1000)*(32000000/4000.0)));
   709  001840  0E29               	movlw	41
   710  001842  6E1D               	movwf	(??_main+1)& (0+255),c
   711  001844  0E96               	movlw	150
   712  001846  6E1C               	movwf	??_main& (0+255),c
   713  001848  0E7F               	movlw	127
   714  00184A                     u257:
   715  00184A  2EE8               	decfsz	wreg,f,c
   716  00184C  D7FE               	bra	u257
   717  00184E  2E1C               	decfsz	??_main& (0+255),f,c
   718  001850  D7FC               	bra	u257
   719  001852  2E1D               	decfsz	(??_main+1)& (0+255),f,c
   720  001854  D7FA               	bra	u257
   721  001856  F000               	nop	
   722  001858  D7F1               	goto	l133
   723  00185A                     __end_of_main:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           wreg	equ	0xFE8
   730                           
   731 ;; *************** function _initGLCD *****************
   732 ;; Defined at:
   733 ;;		line 238 in file "GLCD_PIC_V1.1.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;Total ram usage:        2 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:    4
   754 ;; This function calls:
   755 ;;		_glcdDrawRectangle
   756 ;;		_glcdSetCOLMOD
   757 ;;		_glcdTransfer
   758 ;;		_spiInit
   759 ;; This function is called by:
   760 ;;		_main
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text1
   765  00106E                     __ptext1:
   766                           	opt stack 0
   767  00106E                     _initGLCD:
   768                           	opt stack 26
   769                           
   770                           ;GLCD_PIC_V1.1.c: 262: LATDbits.LATD0 = 1;
   771                           
   772                           ;incstack = 0
   773  00106E  808C               	bsf	3980,0,c	;volatile
   774                           
   775                           ;GLCD_PIC_V1.1.c: 263: LATDbits.LATD1 = 1;
   776  001070  828C               	bsf	3980,1,c	;volatile
   777                           
   778                           ;GLCD_PIC_V1.1.c: 264: TRISDbits.TRISD0 = 0;
   779  001072  9095               	bcf	3989,0,c	;volatile
   780                           
   781                           ;GLCD_PIC_V1.1.c: 265: TRISDbits.TRISD1 = 0;
   782  001074  9295               	bcf	3989,1,c	;volatile
   783                           
   784                           ;GLCD_PIC_V1.1.c: 268: spiInit(4);
   785  001076  0E04               	movlw	4
   786  001078  EC55  F00C         	call	_spiInit
   787                           
   788                           ;GLCD_PIC_V1.1.c: 272: _delay((unsigned long)((20)*(32000000/4000.0)));
   789  00107C  0ED0               	movlw	208
   790  00107E  6E1A               	movwf	??_initGLCD& (0+255),c
   791  001080  0ECA               	movlw	202
   792  001082                     u267:
   793  001082  2EE8               	decfsz	wreg,f,c
   794  001084  D7FE               	bra	u267
   795  001086  2E1A               	decfsz	??_initGLCD& (0+255),f,c
   796  001088  D7FC               	bra	u267
   797                           
   798                           ;GLCD_PIC_V1.1.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(32
      +                          000000/4000.0))); };
   799  00108A  0E01               	movlw	1
   800  00108C  6E04               	movwf	glcdTransfer@cmd,c
   801  00108E  0E47               	movlw	low GLCD_PIC@INST_SWRESET
   802  001090  6EF6               	movwf	tblptrl,c
   803  001092                     	if	1	;There is more than 1 active tblptr byte
   804  001092  0E10               	movlw	high GLCD_PIC@INST_SWRESET
   805  001094  6EF7               	movwf	tblptrh,c
   806  001096                     	endif
   807  001096                     	if	0	;There are less than 3 active tblptr bytes
   808  001096                     	endif
   809  001096  0008               	tblrd		*
   810  001098  50F5               	movf	tablat,w,c
   811  00109A  EC71  F00C         	call	_glcdTransfer
   812  00109E  0E06               	movlw	6
   813  0010A0  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
   814  0010A2  0E47               	movlw	71
   815  0010A4  6E1A               	movwf	??_initGLCD& (0+255),c
   816  0010A6  0EA0               	movlw	160
   817  0010A8                     u277:
   818  0010A8  2EE8               	decfsz	wreg,f,c
   819  0010AA  D7FE               	bra	u277
   820  0010AC  2E1A               	decfsz	??_initGLCD& (0+255),f,c
   821  0010AE  D7FC               	bra	u277
   822  0010B0  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
   823  0010B2  D7FA               	bra	u277
   824  0010B4  D000               	nop2	
   825                           
   826                           ;GLCD_PIC_V1.1.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(320
      +                          00000/4000.0))); };
   827  0010B6  0E01               	movlw	1
   828  0010B8  6E04               	movwf	glcdTransfer@cmd,c
   829  0010BA  0E45               	movlw	low GLCD_PIC@INST_SLPOUT
   830  0010BC  6EF6               	movwf	tblptrl,c
   831  0010BE                     	if	1	;There is more than 1 active tblptr byte
   832  0010BE  0E10               	movlw	high GLCD_PIC@INST_SLPOUT
   833  0010C0  6EF7               	movwf	tblptrh,c
   834  0010C2                     	endif
   835  0010C2                     	if	0	;There are less than 3 active tblptr bytes
   836  0010C2                     	endif
   837  0010C2  0008               	tblrd		*
   838  0010C4  50F5               	movf	tablat,w,c
   839  0010C6  EC71  F00C         	call	_glcdTransfer
   840  0010CA  0E06               	movlw	6
   841  0010CC  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
   842  0010CE  0E47               	movlw	71
   843  0010D0  6E1A               	movwf	??_initGLCD& (0+255),c
   844  0010D2  0EA0               	movlw	160
   845  0010D4                     u287:
   846  0010D4  2EE8               	decfsz	wreg,f,c
   847  0010D6  D7FE               	bra	u287
   848  0010D8  2E1A               	decfsz	??_initGLCD& (0+255),f,c
   849  0010DA  D7FC               	bra	u287
   850  0010DC  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
   851  0010DE  D7FA               	bra	u287
   852  0010E0  D000               	nop2	
   853                           
   854                           ;GLCD_PIC_V1.1.c: 280: glcdTransfer(INST_FRMCTR1, 1);
   855  0010E2  0E01               	movlw	1
   856  0010E4  6E04               	movwf	glcdTransfer@cmd,c
   857  0010E6  0E33               	movlw	low GLCD_PIC@INST_FRMCTR1
   858  0010E8  6EF6               	movwf	tblptrl,c
   859  0010EA                     	if	1	;There is more than 1 active tblptr byte
   860  0010EA  0E10               	movlw	high GLCD_PIC@INST_FRMCTR1
   861  0010EC  6EF7               	movwf	tblptrh,c
   862  0010EE                     	endif
   863  0010EE                     	if	0	;There are less than 3 active tblptr bytes
   864  0010EE                     	endif
   865  0010EE  0008               	tblrd		*
   866  0010F0  50F5               	movf	tablat,w,c
   867  0010F2  EC71  F00C         	call	_glcdTransfer
   868                           
   869                           ;GLCD_PIC_V1.1.c: 281: glcdTransfer(0x00, 0);
   870  0010F6  0E00               	movlw	0
   871  0010F8  6E04               	movwf	glcdTransfer@cmd,c
   872  0010FA  0E00               	movlw	0
   873  0010FC  EC71  F00C         	call	_glcdTransfer
   874                           
   875                           ;GLCD_PIC_V1.1.c: 282: glcdTransfer(0x06, 0);
   876  001100  0E00               	movlw	0
   877  001102  6E04               	movwf	glcdTransfer@cmd,c
   878  001104  0E06               	movlw	6
   879  001106  EC71  F00C         	call	_glcdTransfer
   880                           
   881                           ;GLCD_PIC_V1.1.c: 283: glcdTransfer(0x03, 0);
   882  00110A  0E00               	movlw	0
   883  00110C  6E04               	movwf	glcdTransfer@cmd,c
   884  00110E  0E03               	movlw	3
   885  001110  EC71  F00C         	call	_glcdTransfer
   886                           
   887                           ;GLCD_PIC_V1.1.c: 285: glcdTransfer(INST_FRMCTR2, 1);
   888  001114  0E01               	movlw	1
   889  001116  6E04               	movwf	glcdTransfer@cmd,c
   890  001118  0E32               	movlw	low GLCD_PIC@INST_FRMCTR2
   891  00111A  6EF6               	movwf	tblptrl,c
   892  00111C                     	if	1	;There is more than 1 active tblptr byte
   893  00111C  0E10               	movlw	high GLCD_PIC@INST_FRMCTR2
   894  00111E  6EF7               	movwf	tblptrh,c
   895  001120                     	endif
   896  001120                     	if	0	;There are less than 3 active tblptr bytes
   897  001120                     	endif
   898  001120  0008               	tblrd		*
   899  001122  50F5               	movf	tablat,w,c
   900  001124  EC71  F00C         	call	_glcdTransfer
   901                           
   902                           ;GLCD_PIC_V1.1.c: 286: glcdTransfer(0x01, 0);
   903  001128  0E00               	movlw	0
   904  00112A  6E04               	movwf	glcdTransfer@cmd,c
   905  00112C  0E01               	movlw	1
   906  00112E  EC71  F00C         	call	_glcdTransfer
   907                           
   908                           ;GLCD_PIC_V1.1.c: 287: glcdTransfer(0x2C, 0);
   909  001132  0E00               	movlw	0
   910  001134  6E04               	movwf	glcdTransfer@cmd,c
   911  001136  0E2C               	movlw	44
   912  001138  EC71  F00C         	call	_glcdTransfer
   913                           
   914                           ;GLCD_PIC_V1.1.c: 288: glcdTransfer(0x2D, 0);
   915  00113C  0E00               	movlw	0
   916  00113E  6E04               	movwf	glcdTransfer@cmd,c
   917  001140  0E2D               	movlw	45
   918  001142  EC71  F00C         	call	_glcdTransfer
   919                           
   920                           ;GLCD_PIC_V1.1.c: 290: glcdTransfer(INST_FRMCTR3, 1);
   921  001146  0E01               	movlw	1
   922  001148  6E04               	movwf	glcdTransfer@cmd,c
   923  00114A  0E31               	movlw	low GLCD_PIC@INST_FRMCTR3
   924  00114C  6EF6               	movwf	tblptrl,c
   925  00114E                     	if	1	;There is more than 1 active tblptr byte
   926  00114E  0E10               	movlw	high GLCD_PIC@INST_FRMCTR3
   927  001150  6EF7               	movwf	tblptrh,c
   928  001152                     	endif
   929  001152                     	if	0	;There are less than 3 active tblptr bytes
   930  001152                     	endif
   931  001152  0008               	tblrd		*
   932  001154  50F5               	movf	tablat,w,c
   933  001156  EC71  F00C         	call	_glcdTransfer
   934                           
   935                           ;GLCD_PIC_V1.1.c: 291: glcdTransfer(0x01, 0);
   936  00115A  0E00               	movlw	0
   937  00115C  6E04               	movwf	glcdTransfer@cmd,c
   938  00115E  0E01               	movlw	1
   939  001160  EC71  F00C         	call	_glcdTransfer
   940                           
   941                           ;GLCD_PIC_V1.1.c: 292: glcdTransfer(0x2C, 0);
   942  001164  0E00               	movlw	0
   943  001166  6E04               	movwf	glcdTransfer@cmd,c
   944  001168  0E2C               	movlw	44
   945  00116A  EC71  F00C         	call	_glcdTransfer
   946                           
   947                           ;GLCD_PIC_V1.1.c: 293: glcdTransfer(0x2D, 0);
   948  00116E  0E00               	movlw	0
   949  001170  6E04               	movwf	glcdTransfer@cmd,c
   950  001172  0E2D               	movlw	45
   951  001174  EC71  F00C         	call	_glcdTransfer
   952                           
   953                           ;GLCD_PIC_V1.1.c: 295: glcdTransfer(INST_INVCTR, 1);
   954  001178  0E01               	movlw	1
   955  00117A  6E04               	movwf	glcdTransfer@cmd,c
   956  00117C  0E30               	movlw	low GLCD_PIC@INST_INVCTR
   957  00117E  6EF6               	movwf	tblptrl,c
   958  001180                     	if	1	;There is more than 1 active tblptr byte
   959  001180  0E10               	movlw	high GLCD_PIC@INST_INVCTR
   960  001182  6EF7               	movwf	tblptrh,c
   961  001184                     	endif
   962  001184                     	if	0	;There are less than 3 active tblptr bytes
   963  001184                     	endif
   964  001184  0008               	tblrd		*
   965  001186  50F5               	movf	tablat,w,c
   966  001188  EC71  F00C         	call	_glcdTransfer
   967                           
   968                           ;GLCD_PIC_V1.1.c: 296: glcdTransfer(0x00, 0);
   969  00118C  0E00               	movlw	0
   970  00118E  6E04               	movwf	glcdTransfer@cmd,c
   971  001190  0E00               	movlw	0
   972  001192  EC71  F00C         	call	_glcdTransfer
   973                           
   974                           ;GLCD_PIC_V1.1.c: 299: glcdTransfer(INST_PWCTR1, 1);
   975  001196  0E01               	movlw	1
   976  001198  6E04               	movwf	glcdTransfer@cmd,c
   977  00119A  0E2F               	movlw	low GLCD_PIC@INST_PWCTR1
   978  00119C  6EF6               	movwf	tblptrl,c
   979  00119E                     	if	1	;There is more than 1 active tblptr byte
   980  00119E  0E10               	movlw	high GLCD_PIC@INST_PWCTR1
   981  0011A0  6EF7               	movwf	tblptrh,c
   982  0011A2                     	endif
   983  0011A2                     	if	0	;There are less than 3 active tblptr bytes
   984  0011A2                     	endif
   985  0011A2  0008               	tblrd		*
   986  0011A4  50F5               	movf	tablat,w,c
   987  0011A6  EC71  F00C         	call	_glcdTransfer
   988                           
   989                           ;GLCD_PIC_V1.1.c: 300: glcdTransfer(0xA2, 0);
   990  0011AA  0E00               	movlw	0
   991  0011AC  6E04               	movwf	glcdTransfer@cmd,c
   992  0011AE  0EA2               	movlw	162
   993  0011B0  EC71  F00C         	call	_glcdTransfer
   994                           
   995                           ;GLCD_PIC_V1.1.c: 301: glcdTransfer(0x02, 0);
   996  0011B4  0E00               	movlw	0
   997  0011B6  6E04               	movwf	glcdTransfer@cmd,c
   998  0011B8  0E02               	movlw	2
   999  0011BA  EC71  F00C         	call	_glcdTransfer
  1000                           
  1001                           ;GLCD_PIC_V1.1.c: 302: glcdTransfer(0x84, 0);
  1002  0011BE  0E00               	movlw	0
  1003  0011C0  6E04               	movwf	glcdTransfer@cmd,c
  1004  0011C2  0E84               	movlw	132
  1005  0011C4  EC71  F00C         	call	_glcdTransfer
  1006                           
  1007                           ;GLCD_PIC_V1.1.c: 304: glcdTransfer(INST_PWCTR2, 1);
  1008  0011C8  0E01               	movlw	1
  1009  0011CA  6E04               	movwf	glcdTransfer@cmd,c
  1010  0011CC  0E2E               	movlw	low GLCD_PIC@INST_PWCTR2
  1011  0011CE  6EF6               	movwf	tblptrl,c
  1012  0011D0                     	if	1	;There is more than 1 active tblptr byte
  1013  0011D0  0E10               	movlw	high GLCD_PIC@INST_PWCTR2
  1014  0011D2  6EF7               	movwf	tblptrh,c
  1015  0011D4                     	endif
  1016  0011D4                     	if	0	;There are less than 3 active tblptr bytes
  1017  0011D4                     	endif
  1018  0011D4  0008               	tblrd		*
  1019  0011D6  50F5               	movf	tablat,w,c
  1020  0011D8  EC71  F00C         	call	_glcdTransfer
  1021                           
  1022                           ;GLCD_PIC_V1.1.c: 305: glcdTransfer(0xC5, 0);
  1023  0011DC  0E00               	movlw	0
  1024  0011DE  6E04               	movwf	glcdTransfer@cmd,c
  1025  0011E0  0EC5               	movlw	197
  1026  0011E2  EC71  F00C         	call	_glcdTransfer
  1027                           
  1028                           ;GLCD_PIC_V1.1.c: 307: glcdTransfer(INST_PWCTR3, 1);
  1029  0011E6  0E01               	movlw	1
  1030  0011E8  6E04               	movwf	glcdTransfer@cmd,c
  1031  0011EA  0E2D               	movlw	low GLCD_PIC@INST_PWCTR3
  1032  0011EC  6EF6               	movwf	tblptrl,c
  1033  0011EE                     	if	1	;There is more than 1 active tblptr byte
  1034  0011EE  0E10               	movlw	high GLCD_PIC@INST_PWCTR3
  1035  0011F0  6EF7               	movwf	tblptrh,c
  1036  0011F2                     	endif
  1037  0011F2                     	if	0	;There are less than 3 active tblptr bytes
  1038  0011F2                     	endif
  1039  0011F2  0008               	tblrd		*
  1040  0011F4  50F5               	movf	tablat,w,c
  1041  0011F6  EC71  F00C         	call	_glcdTransfer
  1042                           
  1043                           ;GLCD_PIC_V1.1.c: 308: glcdTransfer(0x0A, 0);
  1044  0011FA  0E00               	movlw	0
  1045  0011FC  6E04               	movwf	glcdTransfer@cmd,c
  1046  0011FE  0E0A               	movlw	10
  1047  001200  EC71  F00C         	call	_glcdTransfer
  1048                           
  1049                           ;GLCD_PIC_V1.1.c: 309: glcdTransfer(0x00, 0);
  1050  001204  0E00               	movlw	0
  1051  001206  6E04               	movwf	glcdTransfer@cmd,c
  1052  001208  0E00               	movlw	0
  1053  00120A  EC71  F00C         	call	_glcdTransfer
  1054                           
  1055                           ;GLCD_PIC_V1.1.c: 311: glcdTransfer(INST_PWCTR4, 1);
  1056  00120E  0E01               	movlw	1
  1057  001210  6E04               	movwf	glcdTransfer@cmd,c
  1058  001212  0E2C               	movlw	low GLCD_PIC@INST_PWCTR4
  1059  001214  6EF6               	movwf	tblptrl,c
  1060  001216                     	if	1	;There is more than 1 active tblptr byte
  1061  001216  0E10               	movlw	high GLCD_PIC@INST_PWCTR4
  1062  001218  6EF7               	movwf	tblptrh,c
  1063  00121A                     	endif
  1064  00121A                     	if	0	;There are less than 3 active tblptr bytes
  1065  00121A                     	endif
  1066  00121A  0008               	tblrd		*
  1067  00121C  50F5               	movf	tablat,w,c
  1068  00121E  EC71  F00C         	call	_glcdTransfer
  1069                           
  1070                           ;GLCD_PIC_V1.1.c: 312: glcdTransfer(0x8A, 0);
  1071  001222  0E00               	movlw	0
  1072  001224  6E04               	movwf	glcdTransfer@cmd,c
  1073  001226  0E8A               	movlw	138
  1074  001228  EC71  F00C         	call	_glcdTransfer
  1075                           
  1076                           ;GLCD_PIC_V1.1.c: 313: glcdTransfer(0x2A, 0);
  1077  00122C  0E00               	movlw	0
  1078  00122E  6E04               	movwf	glcdTransfer@cmd,c
  1079  001230  0E2A               	movlw	42
  1080  001232  EC71  F00C         	call	_glcdTransfer
  1081                           
  1082                           ;GLCD_PIC_V1.1.c: 315: glcdTransfer(INST_PWCTR5, 1);
  1083  001236  0E01               	movlw	1
  1084  001238  6E04               	movwf	glcdTransfer@cmd,c
  1085  00123A  0E2B               	movlw	low GLCD_PIC@INST_PWCTR5
  1086  00123C  6EF6               	movwf	tblptrl,c
  1087  00123E                     	if	1	;There is more than 1 active tblptr byte
  1088  00123E  0E10               	movlw	high GLCD_PIC@INST_PWCTR5
  1089  001240  6EF7               	movwf	tblptrh,c
  1090  001242                     	endif
  1091  001242                     	if	0	;There are less than 3 active tblptr bytes
  1092  001242                     	endif
  1093  001242  0008               	tblrd		*
  1094  001244  50F5               	movf	tablat,w,c
  1095  001246  EC71  F00C         	call	_glcdTransfer
  1096                           
  1097                           ;GLCD_PIC_V1.1.c: 316: glcdTransfer(0x8A, 0);
  1098  00124A  0E00               	movlw	0
  1099  00124C  6E04               	movwf	glcdTransfer@cmd,c
  1100  00124E  0E8A               	movlw	138
  1101  001250  EC71  F00C         	call	_glcdTransfer
  1102                           
  1103                           ;GLCD_PIC_V1.1.c: 317: glcdTransfer(0x2A, 0);
  1104  001254  0E00               	movlw	0
  1105  001256  6E04               	movwf	glcdTransfer@cmd,c
  1106  001258  0E2A               	movlw	42
  1107  00125A  EC71  F00C         	call	_glcdTransfer
  1108                           
  1109                           ;GLCD_PIC_V1.1.c: 320: glcdTransfer(INST_VMCTR1, 1);
  1110  00125E  0E01               	movlw	1
  1111  001260  6E04               	movwf	glcdTransfer@cmd,c
  1112  001262  0E2A               	movlw	low GLCD_PIC@INST_VMCTR1
  1113  001264  6EF6               	movwf	tblptrl,c
  1114  001266                     	if	1	;There is more than 1 active tblptr byte
  1115  001266  0E10               	movlw	high GLCD_PIC@INST_VMCTR1
  1116  001268  6EF7               	movwf	tblptrh,c
  1117  00126A                     	endif
  1118  00126A                     	if	0	;There are less than 3 active tblptr bytes
  1119  00126A                     	endif
  1120  00126A  0008               	tblrd		*
  1121  00126C  50F5               	movf	tablat,w,c
  1122  00126E  EC71  F00C         	call	_glcdTransfer
  1123                           
  1124                           ;GLCD_PIC_V1.1.c: 321: glcdTransfer(0x3C, 0);
  1125  001272  0E00               	movlw	0
  1126  001274  6E04               	movwf	glcdTransfer@cmd,c
  1127  001276  0E3C               	movlw	60
  1128  001278  EC71  F00C         	call	_glcdTransfer
  1129                           
  1130                           ;GLCD_PIC_V1.1.c: 323: glcdTransfer(INST_INVOFF, 1);
  1131  00127C  0E01               	movlw	1
  1132  00127E  6E04               	movwf	glcdTransfer@cmd,c
  1133  001280  0E42               	movlw	low GLCD_PIC@INST_INVOFF
  1134  001282  6EF6               	movwf	tblptrl,c
  1135  001284                     	if	1	;There is more than 1 active tblptr byte
  1136  001284  0E10               	movlw	high GLCD_PIC@INST_INVOFF
  1137  001286  6EF7               	movwf	tblptrh,c
  1138  001288                     	endif
  1139  001288                     	if	0	;There are less than 3 active tblptr bytes
  1140  001288                     	endif
  1141  001288  0008               	tblrd		*
  1142  00128A  50F5               	movf	tablat,w,c
  1143  00128C  EC71  F00C         	call	_glcdTransfer
  1144                           
  1145                           ;GLCD_PIC_V1.1.c: 331: glcdSetCOLMOD(18);
  1146  001290  0E12               	movlw	18
  1147  001292  EC2D  F00C         	call	_glcdSetCOLMOD
  1148                           
  1149                           ;GLCD_PIC_V1.1.c: 334: glcdTransfer(INST_GAMSET, 1);
  1150  001296  0E01               	movlw	1
  1151  001298  6E04               	movwf	glcdTransfer@cmd,c
  1152  00129A  0E40               	movlw	low GLCD_PIC@INST_GAMSET
  1153  00129C  6EF6               	movwf	tblptrl,c
  1154  00129E                     	if	1	;There is more than 1 active tblptr byte
  1155  00129E  0E10               	movlw	high GLCD_PIC@INST_GAMSET
  1156  0012A0  6EF7               	movwf	tblptrh,c
  1157  0012A2                     	endif
  1158  0012A2                     	if	0	;There are less than 3 active tblptr bytes
  1159  0012A2                     	endif
  1160  0012A2  0008               	tblrd		*
  1161  0012A4  50F5               	movf	tablat,w,c
  1162  0012A6  EC71  F00C         	call	_glcdTransfer
  1163                           
  1164                           ;GLCD_PIC_V1.1.c: 335: glcdTransfer(0x01, 0);
  1165  0012AA  0E00               	movlw	0
  1166  0012AC  6E04               	movwf	glcdTransfer@cmd,c
  1167  0012AE  0E01               	movlw	1
  1168  0012B0  EC71  F00C         	call	_glcdTransfer
  1169                           
  1170                           ;GLCD_PIC_V1.1.c: 337: glcdTransfer(INST_IDMOFF, 1);
  1171  0012B4  0E01               	movlw	1
  1172  0012B6  6E04               	movwf	glcdTransfer@cmd,c
  1173  0012B8  0E36               	movlw	low GLCD_PIC@INST_IDMOFF
  1174  0012BA  6EF6               	movwf	tblptrl,c
  1175  0012BC                     	if	1	;There is more than 1 active tblptr byte
  1176  0012BC  0E10               	movlw	high GLCD_PIC@INST_IDMOFF
  1177  0012BE  6EF7               	movwf	tblptrh,c
  1178  0012C0                     	endif
  1179  0012C0                     	if	0	;There are less than 3 active tblptr bytes
  1180  0012C0                     	endif
  1181  0012C0  0008               	tblrd		*
  1182  0012C2  50F5               	movf	tablat,w,c
  1183  0012C4  EC71  F00C         	call	_glcdTransfer
  1184                           
  1185                           ;GLCD_PIC_V1.1.c: 339: glcdTransfer(INST_NORON, 1);
  1186  0012C8  0E01               	movlw	1
  1187  0012CA  6E04               	movwf	glcdTransfer@cmd,c
  1188  0012CC  0E43               	movlw	low GLCD_PIC@INST_NORON
  1189  0012CE  6EF6               	movwf	tblptrl,c
  1190  0012D0                     	if	1	;There is more than 1 active tblptr byte
  1191  0012D0  0E10               	movlw	high GLCD_PIC@INST_NORON
  1192  0012D2  6EF7               	movwf	tblptrh,c
  1193  0012D4                     	endif
  1194  0012D4                     	if	0	;There are less than 3 active tblptr bytes
  1195  0012D4                     	endif
  1196  0012D4  0008               	tblrd		*
  1197  0012D6  50F5               	movf	tablat,w,c
  1198  0012D8  EC71  F00C         	call	_glcdTransfer
  1199                           
  1200                           ;GLCD_PIC_V1.1.c: 342: MADCTLbits.MX = 1;
  1201  0012DC  8C21               	bsf	_MADCTLbits,6,c
  1202                           
  1203                           ;GLCD_PIC_V1.1.c: 343: MADCTLbits.MY = 1;
  1204  0012DE  8E21               	bsf	_MADCTLbits,7,c
  1205                           
  1206                           ;GLCD_PIC_V1.1.c: 344: MADCTLbits.MV = 1;
  1207  0012E0  8A21               	bsf	_MADCTLbits,5,c
  1208                           
  1209                           ;GLCD_PIC_V1.1.c: 345: MADCTLbits.ML = 0;
  1210  0012E2  9821               	bcf	_MADCTLbits,4,c
  1211                           
  1212                           ;GLCD_PIC_V1.1.c: 346: MADCTLbits.RGB = 0;
  1213  0012E4  9621               	bcf	_MADCTLbits,3,c
  1214                           
  1215                           ;GLCD_PIC_V1.1.c: 347: MADCTLbits.MH = 0;
  1216  0012E6  9421               	bcf	_MADCTLbits,2,c
  1217                           
  1218                           ;GLCD_PIC_V1.1.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  1219  0012E8  0E01               	movlw	1
  1220  0012EA  6E04               	movwf	glcdTransfer@cmd,c
  1221  0012EC  0E37               	movlw	low GLCD_PIC@INST_MADCTL
  1222  0012EE  6EF6               	movwf	tblptrl,c
  1223  0012F0                     	if	1	;There is more than 1 active tblptr byte
  1224  0012F0  0E10               	movlw	high GLCD_PIC@INST_MADCTL
  1225  0012F2  6EF7               	movwf	tblptrh,c
  1226  0012F4                     	endif
  1227  0012F4                     	if	0	;There are less than 3 active tblptr bytes
  1228  0012F4                     	endif
  1229  0012F4  0008               	tblrd		*
  1230  0012F6  50F5               	movf	tablat,w,c
  1231  0012F8  EC71  F00C         	call	_glcdTransfer
  1232  0012FC  0E00               	movlw	0
  1233  0012FE  6E04               	movwf	glcdTransfer@cmd,c
  1234  001300  5021               	movf	_MADCTLbits,w,c
  1235  001302  EC71  F00C         	call	_glcdTransfer
  1236                           
  1237                           ;GLCD_PIC_V1.1.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  1238  001306  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1239  001308  6EF6               	movwf	tblptrl,c
  1240  00130A                     	if	1	;There is more than 1 active tblptr byte
  1241  00130A  0E10               	movlw	high _GLCD_SIZE_HORZ
  1242  00130C  6EF7               	movwf	tblptrh,c
  1243  00130E                     	endif
  1244  00130E                     	if	0	;There are less than 3 active tblptr bytes
  1245  00130E                     	endif
  1246  00130E  0008               	tblrd		*
  1247  001310  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  1248  001314  0E00               	movlw	0
  1249  001316  6E08               	movwf	glcdDrawRectangle@YS,c
  1250  001318  0E69               	movlw	low _GLCD_SIZE_VERT
  1251  00131A  6EF6               	movwf	tblptrl,c
  1252  00131C                     	if	1	;There is more than 1 active tblptr byte
  1253  00131C  0E10               	movlw	high _GLCD_SIZE_VERT
  1254  00131E  6EF7               	movwf	tblptrh,c
  1255  001320                     	endif
  1256  001320                     	if	0	;There are less than 3 active tblptr bytes
  1257  001320                     	endif
  1258  001320  0008               	tblrd		*
  1259  001322  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  1260  001326  0E25               	movlw	low _BLACK
  1261  001328  6EF6               	movwf	tblptrl,c
  1262  00132A                     	if	1	;There is more than 1 active tblptr byte
  1263  00132A  0E10               	movlw	high _BLACK
  1264  00132C  6EF7               	movwf	tblptrh,c
  1265  00132E                     	endif
  1266  00132E                     	if	0	;There are less than 3 active tblptr bytes
  1267  00132E                     	endif
  1268  00132E  0009               	tblrd		*+
  1269  001330  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1270  001334  0009               	tblrd		*+
  1271  001336  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1272  00133A  0009               	tblrd		*+
  1273  00133C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1274  001340  000A               	tblrd		*-
  1275  001342  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1276  001346  0E00               	movlw	0
  1277  001348  EC18  F00B         	call	_glcdDrawRectangle
  1278                           
  1279                           ;GLCD_PIC_V1.1.c: 354: glcdTransfer(INST_DISPON, 1);
  1280  00134C  0E01               	movlw	1
  1281  00134E  6E04               	movwf	glcdTransfer@cmd,c
  1282  001350  0E3E               	movlw	low GLCD_PIC@INST_DISPON
  1283  001352  6EF6               	movwf	tblptrl,c
  1284  001354                     	if	1	;There is more than 1 active tblptr byte
  1285  001354  0E10               	movlw	high GLCD_PIC@INST_DISPON
  1286  001356  6EF7               	movwf	tblptrh,c
  1287  001358                     	endif
  1288  001358                     	if	0	;There are less than 3 active tblptr bytes
  1289  001358                     	endif
  1290  001358  0008               	tblrd		*
  1291  00135A  50F5               	movf	tablat,w,c
  1292  00135C  EC71  F00C         	call	_glcdTransfer
  1293                           
  1294                           ;GLCD_PIC_V1.1.c: 355: _delay((unsigned long)((10)*(32000000/4000.0)));
  1295  001360  0E68               	movlw	104
  1296  001362  6E1A               	movwf	??_initGLCD& (0+255),c
  1297  001364  0EE4               	movlw	228
  1298  001366                     u297:
  1299  001366  2EE8               	decfsz	wreg,f,c
  1300  001368  D7FE               	bra	u297
  1301  00136A  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1302  00136C  D7FC               	bra	u297
  1303  00136E  D000               	nop2	
  1304  001370  0012               	return		;funcret
  1305  001372                     __end_of_initGLCD:
  1306                           	opt stack 0
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           wreg	equ	0xFE8
  1312                           
  1313 ;; *************** function _spiInit *****************
  1314 ;; Defined at:
  1315 ;;		line 54 in file "SPI_PIC.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  divider         1    wreg     unsigned char 
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;  divider         1    0[COMRAM] unsigned char 
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      void 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2, status,0
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;Total ram usage:        1 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_initGLCD
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text2
  1343  0018AA                     __ptext2:
  1344                           	opt stack 0
  1345  0018AA                     _spiInit:
  1346                           	opt stack 29
  1347                           
  1348                           ;incstack = 0
  1349                           ;spiInit@divider stored from wreg
  1350  0018AA  6E01               	movwf	spiInit@divider,c
  1351                           
  1352                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  1353  0018AC  9AC6               	bcf	4038,5,c	;volatile
  1354                           
  1355                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  1356  0018AE  0E00               	movlw	0
  1357  0018B0  6EC7               	movwf	4039,c	;volatile
  1358                           
  1359                           ;SPI_PIC.c: 71: switch(divider){
  1360  0018B2  D007               	goto	l174
  1361  0018B4                     
  1362                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  1363  0018B4  0E11               	movlw	17
  1364  0018B6  D003               	goto	L3
  1365  0018B8                     
  1366                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  1367  0018B8  0E12               	movlw	18
  1368  0018BA  D001               	goto	L3
  1369  0018BC                     
  1370                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  1371  0018BC  0E10               	movlw	16
  1372  0018BE                     L3:
  1373  0018BE  6EC6               	movwf	4038,c	;volatile
  1374                           
  1375                           ;SPI_PIC.c: 83: }
  1376  0018C0  D00B               	goto	l176
  1377  0018C2                     l174:
  1378  0018C2  5001               	movf	spiInit@divider,w,c
  1379                           
  1380                           ; Switch size 1, requested type "space"
  1381                           ; Number of cases is 3, Range of values is 4 to 64
  1382                           ; switch strategies available:
  1383                           ; Name         Instructions Cycles
  1384                           ; simple_byte           10     6 (average)
  1385                           ;	Chosen strategy is simple_byte
  1386  0018C4  0A04               	xorlw	4	; case 4
  1387  0018C6  B4D8               	btfsc	status,2,c
  1388  0018C8  D7F9               	goto	l179
  1389  0018CA  0A14               	xorlw	20	; case 16
  1390  0018CC  B4D8               	btfsc	status,2,c
  1391  0018CE  D7F2               	goto	l177
  1392  0018D0  0A50               	xorlw	80	; case 64
  1393  0018D2  B4D8               	btfsc	status,2,c
  1394  0018D4  D7F1               	goto	l178
  1395  0018D6  D7F2               	goto	l179
  1396  0018D8                     l176:
  1397                           
  1398                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  1399  0018D8  9A94               	bcf	3988,5,c	;volatile
  1400                           
  1401                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  1402  0018DA  8894               	bsf	3988,4,c	;volatile
  1403                           
  1404                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  1405  0018DC  9694               	bcf	3988,3,c	;volatile
  1406                           
  1407                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  1408  0018DE  8AC6               	bsf	4038,5,c	;volatile
  1409  0018E0  0012               	return		;funcret
  1410  0018E2                     __end_of_spiInit:
  1411                           	opt stack 0
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           wreg	equ	0xFE8
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _glcdSetCOLMOD *****************
  1420 ;; Defined at:
  1421 ;;		line 167 in file "GLCD_PIC_V1.1.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  numBitsPerPi    1    wreg     unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  1426 ;;  rawData         2    7[COMRAM] unsigned short 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  1    wreg      void 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1439 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1440 ;;Total ram usage:        3 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; Hardware stack levels required when called:    3
  1443 ;; This function calls:
  1444 ;;		_glcdTransfer
  1445 ;; This function is called by:
  1446 ;;		_initGLCD
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450                           	psect	text3
  1451  00185A                     __ptext3:
  1452                           	opt stack 0
  1453  00185A                     _glcdSetCOLMOD:
  1454                           	opt stack 26
  1455                           
  1456                           ;incstack = 0
  1457                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  1458  00185A  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  1459                           
  1460                           ;GLCD_PIC_V1.1.c: 176: unsigned short rawData;
  1461                           ;GLCD_PIC_V1.1.c: 177: switch(numBitsPerPixel){
  1462  00185C  D00D               	goto	l309
  1463  00185E                     
  1464                           ;GLCD_PIC_V1.1.c: 179: rawData = 0b00000011;
  1465  00185E  0E00               	movlw	0
  1466  001860  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  1467  001862  0E03               	movlw	3
  1468  001864  D003               	goto	L5
  1469  001866                     
  1470                           ;GLCD_PIC_V1.1.c: 182: rawData = 0b00000101;
  1471  001866  0E00               	movlw	0
  1472  001868  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  1473  00186A  0E05               	movlw	5
  1474  00186C                     L5:
  1475  00186C  6E08               	movwf	glcdSetCOLMOD@rawData,c
  1476                           
  1477                           ;GLCD_PIC_V1.1.c: 186: break;
  1478  00186E  D00D               	goto	l311
  1479  001870                     
  1480                           ;GLCD_PIC_V1.1.c: 188: rawData = 0b00000110;
  1481  001870  0E00               	movlw	0
  1482  001872  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  1483  001874  0E06               	movlw	6
  1484  001876  D7FA               	goto	L5
  1485  001878                     l309:
  1486  001878  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  1487                           
  1488                           ; Switch size 1, requested type "space"
  1489                           ; Number of cases is 3, Range of values is 12 to 18
  1490                           ; switch strategies available:
  1491                           ; Name         Instructions Cycles
  1492                           ; simple_byte           10     6 (average)
  1493                           ;	Chosen strategy is simple_byte
  1494  00187A  0A0C               	xorlw	12	; case 12
  1495  00187C  B4D8               	btfsc	status,2,c
  1496  00187E  D7EF               	goto	l310
  1497  001880  0A1C               	xorlw	28	; case 16
  1498  001882  B4D8               	btfsc	status,2,c
  1499  001884  D7F0               	goto	l312
  1500  001886  0A02               	xorlw	2	; case 18
  1501  001888  D7F3               	goto	l314
  1502  00188A                     l311:
  1503                           
  1504                           ;GLCD_PIC_V1.1.c: 191: glcdTransfer(INST_COLMOD, 1);
  1505  00188A  0E01               	movlw	1
  1506  00188C  6E04               	movwf	glcdTransfer@cmd,c
  1507  00188E  0E34               	movlw	low GLCD_PIC@INST_COLMOD
  1508  001890  6EF6               	movwf	tblptrl,c
  1509  001892                     	if	1	;There is more than 1 active tblptr byte
  1510  001892  0E10               	movlw	high GLCD_PIC@INST_COLMOD
  1511  001894  6EF7               	movwf	tblptrh,c
  1512  001896                     	endif
  1513  001896                     	if	0	;There are less than 3 active tblptr bytes
  1514  001896                     	endif
  1515  001896  0008               	tblrd		*
  1516  001898  50F5               	movf	tablat,w,c
  1517  00189A  EC71  F00C         	call	_glcdTransfer
  1518                           
  1519                           ;GLCD_PIC_V1.1.c: 192: glcdTransfer(rawData, 0);
  1520  00189E  0E00               	movlw	0
  1521  0018A0  6E04               	movwf	glcdTransfer@cmd,c
  1522  0018A2  5008               	movf	glcdSetCOLMOD@rawData,w,c
  1523  0018A4  EC71  F00C         	call	_glcdTransfer
  1524  0018A8  0012               	return		;funcret
  1525  0018AA                     __end_of_glcdSetCOLMOD:
  1526                           	opt stack 0
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           wreg	equ	0xFE8
  1532                           status	equ	0xFD8
  1533                           
  1534 ;; *************** function _drawTeamName *****************
  1535 ;; Defined at:
  1536 ;;		line 190 in file "main.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    4
  1557 ;; This function calls:
  1558 ;;		_glcdDrawRectangle
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text4
  1565  001372                     __ptext4:
  1566                           	opt stack 0
  1567  001372                     _drawTeamName:
  1568                           	opt stack 26
  1569                           
  1570                           ;main.c: 193: glcdDrawRectangle(5*4, 11*4, 9*4, 11*4, BLACK);
  1571                           
  1572                           ;incstack = 0
  1573  001372  0E2C               	movlw	44
  1574  001374  6E07               	movwf	glcdDrawRectangle@XE,c
  1575  001376  0E24               	movlw	36
  1576  001378  6E08               	movwf	glcdDrawRectangle@YS,c
  1577  00137A  0E2C               	movlw	44
  1578  00137C  6E09               	movwf	glcdDrawRectangle@YE,c
  1579  00137E  0E25               	movlw	low _BLACK
  1580  001380  6EF6               	movwf	tblptrl,c
  1581  001382                     	if	1	;There is more than 1 active tblptr byte
  1582  001382  0E10               	movlw	high _BLACK
  1583  001384  6EF7               	movwf	tblptrh,c
  1584  001386                     	endif
  1585  001386                     	if	0	;There are less than 3 active tblptr bytes
  1586  001386                     	endif
  1587  001386  0009               	tblrd		*+
  1588  001388  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1589  00138C  0009               	tblrd		*+
  1590  00138E  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1591  001392  0009               	tblrd		*+
  1592  001394  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1593  001398  000A               	tblrd		*-
  1594  00139A  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1595  00139E  0E14               	movlw	20
  1596  0013A0  EC18  F00B         	call	_glcdDrawRectangle
  1597                           
  1598                           ;main.c: 194: glcdDrawRectangle(8*4, 9*4, 11*4, 16*4, BLACK);
  1599  0013A4  0E24               	movlw	36
  1600  0013A6  6E07               	movwf	glcdDrawRectangle@XE,c
  1601  0013A8  0E2C               	movlw	44
  1602  0013AA  6E08               	movwf	glcdDrawRectangle@YS,c
  1603  0013AC  0E40               	movlw	64
  1604  0013AE  6E09               	movwf	glcdDrawRectangle@YE,c
  1605  0013B0  0E25               	movlw	low _BLACK
  1606  0013B2  6EF6               	movwf	tblptrl,c
  1607  0013B4                     	if	1	;There is more than 1 active tblptr byte
  1608  0013B4  0E10               	movlw	high _BLACK
  1609  0013B6  6EF7               	movwf	tblptrh,c
  1610  0013B8                     	endif
  1611  0013B8                     	if	0	;There are less than 3 active tblptr bytes
  1612  0013B8                     	endif
  1613  0013B8  0009               	tblrd		*+
  1614  0013BA  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1615  0013BE  0009               	tblrd		*+
  1616  0013C0  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1617  0013C4  0009               	tblrd		*+
  1618  0013C6  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1619  0013CA  000A               	tblrd		*-
  1620  0013CC  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1621  0013D0  0E20               	movlw	32
  1622  0013D2  EC18  F00B         	call	_glcdDrawRectangle
  1623                           
  1624                           ;main.c: 196: glcdDrawRectangle(12*4, 17*4, 9*4, 11*4, BLACK);
  1625  0013D6  0E44               	movlw	68
  1626  0013D8  6E07               	movwf	glcdDrawRectangle@XE,c
  1627  0013DA  0E24               	movlw	36
  1628  0013DC  6E08               	movwf	glcdDrawRectangle@YS,c
  1629  0013DE  0E2C               	movlw	44
  1630  0013E0  6E09               	movwf	glcdDrawRectangle@YE,c
  1631  0013E2  0E25               	movlw	low _BLACK
  1632  0013E4  6EF6               	movwf	tblptrl,c
  1633  0013E6                     	if	1	;There is more than 1 active tblptr byte
  1634  0013E6  0E10               	movlw	high _BLACK
  1635  0013E8  6EF7               	movwf	tblptrh,c
  1636  0013EA                     	endif
  1637  0013EA                     	if	0	;There are less than 3 active tblptr bytes
  1638  0013EA                     	endif
  1639  0013EA  0009               	tblrd		*+
  1640  0013EC  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1641  0013F0  0009               	tblrd		*+
  1642  0013F2  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1643  0013F6  0009               	tblrd		*+
  1644  0013F8  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1645  0013FC  000A               	tblrd		*-
  1646  0013FE  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1647  001402  0E30               	movlw	48
  1648  001404  EC18  F00B         	call	_glcdDrawRectangle
  1649                           
  1650                           ;main.c: 197: glcdDrawRectangle(16*4, 17*4, 11*4, 16*4, BLACK);
  1651  001408  0E44               	movlw	68
  1652  00140A  6E07               	movwf	glcdDrawRectangle@XE,c
  1653  00140C  0E2C               	movlw	44
  1654  00140E  6E08               	movwf	glcdDrawRectangle@YS,c
  1655  001410  0E40               	movlw	64
  1656  001412  6E09               	movwf	glcdDrawRectangle@YE,c
  1657  001414  0E25               	movlw	low _BLACK
  1658  001416  6EF6               	movwf	tblptrl,c
  1659  001418                     	if	1	;There is more than 1 active tblptr byte
  1660  001418  0E10               	movlw	high _BLACK
  1661  00141A  6EF7               	movwf	tblptrh,c
  1662  00141C                     	endif
  1663  00141C                     	if	0	;There are less than 3 active tblptr bytes
  1664  00141C                     	endif
  1665  00141C  0009               	tblrd		*+
  1666  00141E  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1667  001422  0009               	tblrd		*+
  1668  001424  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1669  001428  0009               	tblrd		*+
  1670  00142A  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1671  00142E  000A               	tblrd		*-
  1672  001430  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1673  001434  0E40               	movlw	64
  1674  001436  EC18  F00B         	call	_glcdDrawRectangle
  1675                           
  1676                           ;main.c: 198: glcdDrawRectangle(12*4, 16*4, 12*4, 13*4, BLACK);
  1677  00143A  0E40               	movlw	64
  1678  00143C  6E07               	movwf	glcdDrawRectangle@XE,c
  1679  00143E  0E30               	movlw	48
  1680  001440  6E08               	movwf	glcdDrawRectangle@YS,c
  1681  001442  0E34               	movlw	52
  1682  001444  6E09               	movwf	glcdDrawRectangle@YE,c
  1683  001446  0E25               	movlw	low _BLACK
  1684  001448  6EF6               	movwf	tblptrl,c
  1685  00144A                     	if	1	;There is more than 1 active tblptr byte
  1686  00144A  0E10               	movlw	high _BLACK
  1687  00144C  6EF7               	movwf	tblptrh,c
  1688  00144E                     	endif
  1689  00144E                     	if	0	;There are less than 3 active tblptr bytes
  1690  00144E                     	endif
  1691  00144E  0009               	tblrd		*+
  1692  001450  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1693  001454  0009               	tblrd		*+
  1694  001456  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1695  00145A  0009               	tblrd		*+
  1696  00145C  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1697  001460  000A               	tblrd		*-
  1698  001462  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1699  001466  0E30               	movlw	48
  1700  001468  EC18  F00B         	call	_glcdDrawRectangle
  1701                           
  1702                           ;main.c: 199: glcdDrawRectangle(12*4, 16*4, 14*4, 16*4, BLACK);
  1703  00146C  0E40               	movlw	64
  1704  00146E  6E07               	movwf	glcdDrawRectangle@XE,c
  1705  001470  0E38               	movlw	56
  1706  001472  6E08               	movwf	glcdDrawRectangle@YS,c
  1707  001474  0E40               	movlw	64
  1708  001476  6E09               	movwf	glcdDrawRectangle@YE,c
  1709  001478  0E25               	movlw	low _BLACK
  1710  00147A  6EF6               	movwf	tblptrl,c
  1711  00147C                     	if	1	;There is more than 1 active tblptr byte
  1712  00147C  0E10               	movlw	high _BLACK
  1713  00147E  6EF7               	movwf	tblptrh,c
  1714  001480                     	endif
  1715  001480                     	if	0	;There are less than 3 active tblptr bytes
  1716  001480                     	endif
  1717  001480  0009               	tblrd		*+
  1718  001482  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1719  001486  0009               	tblrd		*+
  1720  001488  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1721  00148C  0009               	tblrd		*+
  1722  00148E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1723  001492  000A               	tblrd		*-
  1724  001494  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1725  001498  0E30               	movlw	48
  1726  00149A  EC18  F00B         	call	_glcdDrawRectangle
  1727                           
  1728                           ;main.c: 201: glcdDrawRectangle(18*4, 19*4, 9*4, 14*4, BLACK);
  1729  00149E  0E4C               	movlw	76
  1730  0014A0  6E07               	movwf	glcdDrawRectangle@XE,c
  1731  0014A2  0E24               	movlw	36
  1732  0014A4  6E08               	movwf	glcdDrawRectangle@YS,c
  1733  0014A6  0E38               	movlw	56
  1734  0014A8  6E09               	movwf	glcdDrawRectangle@YE,c
  1735  0014AA  0E25               	movlw	low _BLACK
  1736  0014AC  6EF6               	movwf	tblptrl,c
  1737  0014AE                     	if	1	;There is more than 1 active tblptr byte
  1738  0014AE  0E10               	movlw	high _BLACK
  1739  0014B0  6EF7               	movwf	tblptrh,c
  1740  0014B2                     	endif
  1741  0014B2                     	if	0	;There are less than 3 active tblptr bytes
  1742  0014B2                     	endif
  1743  0014B2  0009               	tblrd		*+
  1744  0014B4  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1745  0014B8  0009               	tblrd		*+
  1746  0014BA  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1747  0014BE  0009               	tblrd		*+
  1748  0014C0  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1749  0014C4  000A               	tblrd		*-
  1750  0014C6  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1751  0014CA  0E48               	movlw	72
  1752  0014CC  EC18  F00B         	call	_glcdDrawRectangle
  1753                           
  1754                           ;main.c: 202: glcdDrawRectangle(19*4, 23*4, 12*4, 14*4, BLACK);
  1755  0014D0  0E5C               	movlw	92
  1756  0014D2  6E07               	movwf	glcdDrawRectangle@XE,c
  1757  0014D4  0E30               	movlw	48
  1758  0014D6  6E08               	movwf	glcdDrawRectangle@YS,c
  1759  0014D8  0E38               	movlw	56
  1760  0014DA  6E09               	movwf	glcdDrawRectangle@YE,c
  1761  0014DC  0E25               	movlw	low _BLACK
  1762  0014DE  6EF6               	movwf	tblptrl,c
  1763  0014E0                     	if	1	;There is more than 1 active tblptr byte
  1764  0014E0  0E10               	movlw	high _BLACK
  1765  0014E2  6EF7               	movwf	tblptrh,c
  1766  0014E4                     	endif
  1767  0014E4                     	if	0	;There are less than 3 active tblptr bytes
  1768  0014E4                     	endif
  1769  0014E4  0009               	tblrd		*+
  1770  0014E6  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1771  0014EA  0009               	tblrd		*+
  1772  0014EC  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1773  0014F0  0009               	tblrd		*+
  1774  0014F2  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1775  0014F6  000A               	tblrd		*-
  1776  0014F8  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1777  0014FC  0E4C               	movlw	76
  1778  0014FE  EC18  F00B         	call	_glcdDrawRectangle
  1779                           
  1780                           ;main.c: 203: glcdDrawRectangle(21*4, 22*4, 9*4, 16*4, BLACK);
  1781  001502  0E58               	movlw	88
  1782  001504  6E07               	movwf	glcdDrawRectangle@XE,c
  1783  001506  0E24               	movlw	36
  1784  001508  6E08               	movwf	glcdDrawRectangle@YS,c
  1785  00150A  0E40               	movlw	64
  1786  00150C  6E09               	movwf	glcdDrawRectangle@YE,c
  1787  00150E  0E25               	movlw	low _BLACK
  1788  001510  6EF6               	movwf	tblptrl,c
  1789  001512                     	if	1	;There is more than 1 active tblptr byte
  1790  001512  0E10               	movlw	high _BLACK
  1791  001514  6EF7               	movwf	tblptrh,c
  1792  001516                     	endif
  1793  001516                     	if	0	;There are less than 3 active tblptr bytes
  1794  001516                     	endif
  1795  001516  0009               	tblrd		*+
  1796  001518  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1797  00151C  0009               	tblrd		*+
  1798  00151E  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1799  001522  0009               	tblrd		*+
  1800  001524  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1801  001528  000A               	tblrd		*-
  1802  00152A  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1803  00152E  0E54               	movlw	84
  1804  001530  EC18  F00B         	call	_glcdDrawRectangle
  1805                           
  1806                           ;main.c: 206: glcdDrawRectangle(24*4, 25*4, 10*4, 13*4, RED);
  1807  001534  0E64               	movlw	100
  1808  001536  6E07               	movwf	glcdDrawRectangle@XE,c
  1809  001538  0E28               	movlw	40
  1810  00153A  6E08               	movwf	glcdDrawRectangle@YS,c
  1811  00153C  0E34               	movlw	52
  1812  00153E  6E09               	movwf	glcdDrawRectangle@YE,c
  1813  001540  0E19               	movlw	low _RED
  1814  001542  6EF6               	movwf	tblptrl,c
  1815  001544                     	if	1	;There is more than 1 active tblptr byte
  1816  001544  0E10               	movlw	high _RED
  1817  001546  6EF7               	movwf	tblptrh,c
  1818  001548                     	endif
  1819  001548                     	if	0	;There are less than 3 active tblptr bytes
  1820  001548                     	endif
  1821  001548  0009               	tblrd		*+
  1822  00154A  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1823  00154E  0009               	tblrd		*+
  1824  001550  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1825  001554  0009               	tblrd		*+
  1826  001556  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1827  00155A  000A               	tblrd		*-
  1828  00155C  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1829  001560  0E60               	movlw	96
  1830  001562  EC18  F00B         	call	_glcdDrawRectangle
  1831                           
  1832                           ;main.c: 207: glcdDrawRectangle(25*4, 27*4, 9*4, 14*4, RED);
  1833  001566  0E6C               	movlw	108
  1834  001568  6E07               	movwf	glcdDrawRectangle@XE,c
  1835  00156A  0E24               	movlw	36
  1836  00156C  6E08               	movwf	glcdDrawRectangle@YS,c
  1837  00156E  0E38               	movlw	56
  1838  001570  6E09               	movwf	glcdDrawRectangle@YE,c
  1839  001572  0E19               	movlw	low _RED
  1840  001574  6EF6               	movwf	tblptrl,c
  1841  001576                     	if	1	;There is more than 1 active tblptr byte
  1842  001576  0E10               	movlw	high _RED
  1843  001578  6EF7               	movwf	tblptrh,c
  1844  00157A                     	endif
  1845  00157A                     	if	0	;There are less than 3 active tblptr bytes
  1846  00157A                     	endif
  1847  00157A  0009               	tblrd		*+
  1848  00157C  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1849  001580  0009               	tblrd		*+
  1850  001582  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1851  001586  0009               	tblrd		*+
  1852  001588  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1853  00158C  000A               	tblrd		*-
  1854  00158E  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1855  001592  0E64               	movlw	100
  1856  001594  EC18  F00B         	call	_glcdDrawRectangle
  1857                           
  1858                           ;main.c: 208: glcdDrawRectangle(27*4, 28*4, 10*4, 15*4, RED);
  1859  001598  0E70               	movlw	112
  1860  00159A  6E07               	movwf	glcdDrawRectangle@XE,c
  1861  00159C  0E28               	movlw	40
  1862  00159E  6E08               	movwf	glcdDrawRectangle@YS,c
  1863  0015A0  0E3C               	movlw	60
  1864  0015A2  6E09               	movwf	glcdDrawRectangle@YE,c
  1865  0015A4  0E19               	movlw	low _RED
  1866  0015A6  6EF6               	movwf	tblptrl,c
  1867  0015A8                     	if	1	;There is more than 1 active tblptr byte
  1868  0015A8  0E10               	movlw	high _RED
  1869  0015AA  6EF7               	movwf	tblptrh,c
  1870  0015AC                     	endif
  1871  0015AC                     	if	0	;There are less than 3 active tblptr bytes
  1872  0015AC                     	endif
  1873  0015AC  0009               	tblrd		*+
  1874  0015AE  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1875  0015B2  0009               	tblrd		*+
  1876  0015B4  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1877  0015B8  0009               	tblrd		*+
  1878  0015BA  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1879  0015BE  000A               	tblrd		*-
  1880  0015C0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1881  0015C4  0E6C               	movlw	108
  1882  0015C6  EC18  F00B         	call	_glcdDrawRectangle
  1883                           
  1884                           ;main.c: 210: glcdDrawRectangle(28*4, 30*4, 9*4, 14*4, RED);
  1885  0015CA  0E78               	movlw	120
  1886  0015CC  6E07               	movwf	glcdDrawRectangle@XE,c
  1887  0015CE  0E24               	movlw	36
  1888  0015D0  6E08               	movwf	glcdDrawRectangle@YS,c
  1889  0015D2  0E38               	movlw	56
  1890  0015D4  6E09               	movwf	glcdDrawRectangle@YE,c
  1891  0015D6  0E19               	movlw	low _RED
  1892  0015D8  6EF6               	movwf	tblptrl,c
  1893  0015DA                     	if	1	;There is more than 1 active tblptr byte
  1894  0015DA  0E10               	movlw	high _RED
  1895  0015DC  6EF7               	movwf	tblptrh,c
  1896  0015DE                     	endif
  1897  0015DE                     	if	0	;There are less than 3 active tblptr bytes
  1898  0015DE                     	endif
  1899  0015DE  0009               	tblrd		*+
  1900  0015E0  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1901  0015E4  0009               	tblrd		*+
  1902  0015E6  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1903  0015EA  0009               	tblrd		*+
  1904  0015EC  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1905  0015F0  000A               	tblrd		*-
  1906  0015F2  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1907  0015F6  0E70               	movlw	112
  1908  0015F8  EC18  F00B         	call	_glcdDrawRectangle
  1909                           
  1910                           ;main.c: 211: glcdDrawRectangle(30*4, 31*4, 10*4, 13*4, RED);
  1911  0015FC  0E7C               	movlw	124
  1912  0015FE  6E07               	movwf	glcdDrawRectangle@XE,c
  1913  001600  0E28               	movlw	40
  1914  001602  6E08               	movwf	glcdDrawRectangle@YS,c
  1915  001604  0E34               	movlw	52
  1916  001606  6E09               	movwf	glcdDrawRectangle@YE,c
  1917  001608  0E19               	movlw	low _RED
  1918  00160A  6EF6               	movwf	tblptrl,c
  1919  00160C                     	if	1	;There is more than 1 active tblptr byte
  1920  00160C  0E10               	movlw	high _RED
  1921  00160E  6EF7               	movwf	tblptrh,c
  1922  001610                     	endif
  1923  001610                     	if	0	;There are less than 3 active tblptr bytes
  1924  001610                     	endif
  1925  001610  0009               	tblrd		*+
  1926  001612  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1927  001616  0009               	tblrd		*+
  1928  001618  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1929  00161C  0009               	tblrd		*+
  1930  00161E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1931  001622  000A               	tblrd		*-
  1932  001624  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1933  001628  0E78               	movlw	120
  1934  00162A  EC18  F00B         	call	_glcdDrawRectangle
  1935  00162E  0012               	return		;funcret
  1936  001630                     __end_of_drawTeamName:
  1937                           	opt stack 0
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           wreg	equ	0xFE8
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _glcdDrawRectangle *****************
  1946 ;; Defined at:
  1947 ;;		line 38 in file "GLCD_PIC_V1.1.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  XS              1    wreg     unsigned char 
  1950 ;;  XE              1    6[COMRAM] unsigned char 
  1951 ;;  YS              1    7[COMRAM] unsigned char 
  1952 ;;  YE              1    8[COMRAM] unsigned char 
  1953 ;;  color           4    9[COMRAM] unsigned long 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  XS              1   24[COMRAM] unsigned char 
  1956 ;;  i               2   19[COMRAM] unsigned short 
  1957 ;;  colorData       3   21[COMRAM] unsigned char [3]
  1958 ;;  numLoops        2   17[COMRAM] unsigned short 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1968 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;Total ram usage:       19 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:    3
  1975 ;; This function calls:
  1976 ;;		___wmul
  1977 ;;		_glcdTransfer
  1978 ;;		_spiSend
  1979 ;; This function is called by:
  1980 ;;		_main
  1981 ;;		_drawTeamName
  1982 ;;		_initGLCD
  1983 ;;		_drawWasher
  1984 ;;		_glcdDrawPixel
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text5
  1989  001630                     __ptext5:
  1990                           	opt stack 0
  1991  001630                     _glcdDrawRectangle:
  1992                           	opt stack 26
  1993                           
  1994                           ;incstack = 0
  1995                           ;glcdDrawRectangle@XS stored from wreg
  1996  001630  6E19               	movwf	glcdDrawRectangle@XS,c
  1997                           
  1998                           ;GLCD_PIC_V1.1.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  1999  001632  BC21               	btfsc	_MADCTLbits,6,c
  2000  001634  AA21               	btfss	_MADCTLbits,5,c
  2001  001636  D005               	goto	l290
  2002                           
  2003                           ;GLCD_PIC_V1.1.c: 60: YS += 3;
  2004  001638  0E03               	movlw	3
  2005  00163A  2608               	addwf	glcdDrawRectangle@YS,f,c
  2006                           
  2007                           ;GLCD_PIC_V1.1.c: 61: YE += 3;
  2008  00163C  0E03               	movlw	3
  2009  00163E  2609               	addwf	glcdDrawRectangle@YE,f,c
  2010  001640  D015               	goto	l1258
  2011  001642                     l290:
  2012                           
  2013                           ;GLCD_PIC_V1.1.c: 65: else if(MADCTLbits.MY == 1){
  2014  001642  AE21               	btfss	_MADCTLbits,7,c
  2015  001644  D008               	goto	l292
  2016                           
  2017                           ;GLCD_PIC_V1.1.c: 67: YS += 2;
  2018  001646  0E02               	movlw	2
  2019  001648  2608               	addwf	glcdDrawRectangle@YS,f,c
  2020                           
  2021                           ;GLCD_PIC_V1.1.c: 68: YE += 2;
  2022  00164A  0E02               	movlw	2
  2023  00164C  2609               	addwf	glcdDrawRectangle@YE,f,c
  2024                           
  2025                           ;GLCD_PIC_V1.1.c: 69: XS += 3;
  2026  00164E  0E03               	movlw	3
  2027  001650  2619               	addwf	glcdDrawRectangle@XS,f,c
  2028                           
  2029                           ;GLCD_PIC_V1.1.c: 70: XE += 3;
  2030  001652  0E03               	movlw	3
  2031  001654  D00E               	goto	L7
  2032  001656                     l292:
  2033                           
  2034                           ;GLCD_PIC_V1.1.c: 72: else if(MADCTLbits.MX == 1){
  2035  001656  AC21               	btfss	_MADCTLbits,6,c
  2036  001658  D007               	goto	l294
  2037                           
  2038                           ;GLCD_PIC_V1.1.c: 74: YS += 2;
  2039  00165A  0E02               	movlw	2
  2040  00165C  2608               	addwf	glcdDrawRectangle@YS,f,c
  2041                           
  2042                           ;GLCD_PIC_V1.1.c: 75: YE += 2;
  2043  00165E  0E02               	movlw	2
  2044  001660  2609               	addwf	glcdDrawRectangle@YE,f,c
  2045                           
  2046                           ;GLCD_PIC_V1.1.c: 76: XS += 1;
  2047  001662  2A19               	incf	glcdDrawRectangle@XS,f,c
  2048                           
  2049                           ;GLCD_PIC_V1.1.c: 77: XE += 1;
  2050  001664  2A07               	incf	glcdDrawRectangle@XE,f,c
  2051                           
  2052                           ;GLCD_PIC_V1.1.c: 78: }
  2053  001666  D006               	goto	l295
  2054  001668                     l294:
  2055                           
  2056                           ;GLCD_PIC_V1.1.c: 79: else{
  2057                           ;GLCD_PIC_V1.1.c: 81: YS += 1;
  2058  001668  2A08               	incf	glcdDrawRectangle@YS,f,c
  2059                           
  2060                           ;GLCD_PIC_V1.1.c: 82: YE += 1;
  2061  00166A  2A09               	incf	glcdDrawRectangle@YE,f,c
  2062  00166C                     l1258:
  2063                           
  2064                           ;GLCD_PIC_V1.1.c: 83: XS += 2;
  2065  00166C  0E02               	movlw	2
  2066  00166E  2619               	addwf	glcdDrawRectangle@XS,f,c
  2067                           
  2068                           ;GLCD_PIC_V1.1.c: 84: XE += 2;
  2069  001670  0E02               	movlw	2
  2070  001672                     L7:
  2071  001672  2607               	addwf	glcdDrawRectangle@XE,f,c
  2072  001674                     l295:
  2073                           
  2074                           ;GLCD_PIC_V1.1.c: 85: }
  2075                           ;GLCD_PIC_V1.1.c: 89: glcdTransfer(INST_RASET, 1);
  2076  001674  0E01               	movlw	1
  2077  001676  6E04               	movwf	glcdTransfer@cmd,c
  2078  001678  0E3C               	movlw	low GLCD_PIC@INST_RASET
  2079  00167A  6EF6               	movwf	tblptrl,c
  2080  00167C                     	if	1	;There is more than 1 active tblptr byte
  2081  00167C  0E10               	movlw	high GLCD_PIC@INST_RASET
  2082  00167E  6EF7               	movwf	tblptrh,c
  2083  001680                     	endif
  2084  001680                     	if	0	;There are less than 3 active tblptr bytes
  2085  001680                     	endif
  2086  001680  0008               	tblrd		*
  2087  001682  50F5               	movf	tablat,w,c
  2088  001684  EC71  F00C         	call	_glcdTransfer
  2089                           
  2090                           ;GLCD_PIC_V1.1.c: 90: glcdTransfer(0x00, 0);
  2091  001688  0E00               	movlw	0
  2092  00168A  6E04               	movwf	glcdTransfer@cmd,c
  2093  00168C  0E00               	movlw	0
  2094  00168E  EC71  F00C         	call	_glcdTransfer
  2095                           
  2096                           ;GLCD_PIC_V1.1.c: 91: glcdTransfer(XS, 0);
  2097  001692  0E00               	movlw	0
  2098  001694  6E04               	movwf	glcdTransfer@cmd,c
  2099  001696  5019               	movf	glcdDrawRectangle@XS,w,c
  2100  001698  EC71  F00C         	call	_glcdTransfer
  2101                           
  2102                           ;GLCD_PIC_V1.1.c: 92: glcdTransfer(0x00, 0);
  2103  00169C  0E00               	movlw	0
  2104  00169E  6E04               	movwf	glcdTransfer@cmd,c
  2105  0016A0  0E00               	movlw	0
  2106  0016A2  EC71  F00C         	call	_glcdTransfer
  2107                           
  2108                           ;GLCD_PIC_V1.1.c: 93: glcdTransfer(XE - 1, 0);
  2109  0016A6  0E00               	movlw	0
  2110  0016A8  6E04               	movwf	glcdTransfer@cmd,c
  2111  0016AA  0407               	decf	glcdDrawRectangle@XE,w,c
  2112  0016AC  EC71  F00C         	call	_glcdTransfer
  2113                           
  2114                           ;GLCD_PIC_V1.1.c: 97: glcdTransfer(INST_CASET, 1);
  2115  0016B0  0E01               	movlw	1
  2116  0016B2  6E04               	movwf	glcdTransfer@cmd,c
  2117  0016B4  0E3D               	movlw	low GLCD_PIC@INST_CASET
  2118  0016B6  6EF6               	movwf	tblptrl,c
  2119  0016B8                     	if	1	;There is more than 1 active tblptr byte
  2120  0016B8  0E10               	movlw	high GLCD_PIC@INST_CASET
  2121  0016BA  6EF7               	movwf	tblptrh,c
  2122  0016BC                     	endif
  2123  0016BC                     	if	0	;There are less than 3 active tblptr bytes
  2124  0016BC                     	endif
  2125  0016BC  0008               	tblrd		*
  2126  0016BE  50F5               	movf	tablat,w,c
  2127  0016C0  EC71  F00C         	call	_glcdTransfer
  2128                           
  2129                           ;GLCD_PIC_V1.1.c: 98: glcdTransfer(0x00, 0);
  2130  0016C4  0E00               	movlw	0
  2131  0016C6  6E04               	movwf	glcdTransfer@cmd,c
  2132  0016C8  0E00               	movlw	0
  2133  0016CA  EC71  F00C         	call	_glcdTransfer
  2134                           
  2135                           ;GLCD_PIC_V1.1.c: 99: glcdTransfer(YS, 0);
  2136  0016CE  0E00               	movlw	0
  2137  0016D0  6E04               	movwf	glcdTransfer@cmd,c
  2138  0016D2  5008               	movf	glcdDrawRectangle@YS,w,c
  2139  0016D4  EC71  F00C         	call	_glcdTransfer
  2140                           
  2141                           ;GLCD_PIC_V1.1.c: 100: glcdTransfer(0x00, 0);
  2142  0016D8  0E00               	movlw	0
  2143  0016DA  6E04               	movwf	glcdTransfer@cmd,c
  2144  0016DC  0E00               	movlw	0
  2145  0016DE  EC71  F00C         	call	_glcdTransfer
  2146                           
  2147                           ;GLCD_PIC_V1.1.c: 101: glcdTransfer(YE - 1, 0);
  2148  0016E2  0E00               	movlw	0
  2149  0016E4  6E04               	movwf	glcdTransfer@cmd,c
  2150  0016E6  0409               	decf	glcdDrawRectangle@YE,w,c
  2151  0016E8  EC71  F00C         	call	_glcdTransfer
  2152                           
  2153                           ;GLCD_PIC_V1.1.c: 103: glcdTransfer(INST_RAMWR, 1);
  2154  0016EC  0E01               	movlw	1
  2155  0016EE  6E04               	movwf	glcdTransfer@cmd,c
  2156  0016F0  0E3B               	movlw	low GLCD_PIC@INST_RAMWR
  2157  0016F2  6EF6               	movwf	tblptrl,c
  2158  0016F4                     	if	1	;There is more than 1 active tblptr byte
  2159  0016F4  0E10               	movlw	high GLCD_PIC@INST_RAMWR
  2160  0016F6  6EF7               	movwf	tblptrh,c
  2161  0016F8                     	endif
  2162  0016F8                     	if	0	;There are less than 3 active tblptr bytes
  2163  0016F8                     	endif
  2164  0016F8  0008               	tblrd		*
  2165  0016FA  50F5               	movf	tablat,w,c
  2166  0016FC  EC71  F00C         	call	_glcdTransfer
  2167                           
  2168                           ;GLCD_PIC_V1.1.c: 107: if((XE == XS) && (YE == YS)){
  2169  001700  5019               	movf	glcdDrawRectangle@XS,w,c
  2170  001702  1807               	xorwf	glcdDrawRectangle@XE,w,c
  2171  001704  A4D8               	btfss	status,2,c
  2172  001706  D014               	goto	l296
  2173  001708  5008               	movf	glcdDrawRectangle@YS,w,c
  2174  00170A  1809               	xorwf	glcdDrawRectangle@YE,w,c
  2175  00170C  A4D8               	btfss	status,2,c
  2176  00170E  D010               	goto	l296
  2177                           
  2178                           ;GLCD_PIC_V1.1.c: 114: glcdTransfer(color & 0xFF, 0);
  2179  001710  0E00               	movlw	0
  2180  001712  6E04               	movwf	glcdTransfer@cmd,c
  2181  001714  500A               	movf	glcdDrawRectangle@color,w,c
  2182  001716  EC71  F00C         	call	_glcdTransfer
  2183                           
  2184                           ;GLCD_PIC_V1.1.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
  2185  00171A  0E00               	movlw	0
  2186  00171C  6E04               	movwf	glcdTransfer@cmd,c
  2187  00171E  500B               	movf	glcdDrawRectangle@color+1,w,c
  2188  001720  EC71  F00C         	call	_glcdTransfer
  2189                           
  2190                           ;GLCD_PIC_V1.1.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
  2191  001724  0E00               	movlw	0
  2192  001726  6E04               	movwf	glcdTransfer@cmd,c
  2193  001728  500C               	movf	glcdDrawRectangle@color+2,w,c
  2194  00172A  EC71  F00C         	call	_glcdTransfer
  2195                           
  2196                           ;GLCD_PIC_V1.1.c: 117: }
  2197  00172E  0012               	return	
  2198  001730                     l296:
  2199                           
  2200                           ;GLCD_PIC_V1.1.c: 118: else{
  2201                           ;GLCD_PIC_V1.1.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
  2202  001730  5019               	movf	glcdDrawRectangle@XS,w,c
  2203  001732  6E0E               	movwf	??_glcdDrawRectangle& (0+255),c
  2204  001734  6A0F               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  2205  001736  1E0E               	comf	??_glcdDrawRectangle,f,c
  2206  001738  1E0F               	comf	??_glcdDrawRectangle+1,f,c
  2207  00173A  4A0E               	infsnz	??_glcdDrawRectangle,f,c
  2208  00173C  2A0F               	incf	??_glcdDrawRectangle+1,f,c
  2209  00173E  5007               	movf	glcdDrawRectangle@XE,w,c
  2210  001740  240E               	addwf	??_glcdDrawRectangle,w,c
  2211  001742  6E01               	movwf	___wmul@multiplier,c
  2212  001744  0E00               	movlw	0
  2213  001746  200F               	addwfc	??_glcdDrawRectangle+1,w,c
  2214  001748  6E02               	movwf	___wmul@multiplier+1,c
  2215  00174A  5008               	movf	glcdDrawRectangle@YS,w,c
  2216  00174C  6E10               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  2217  00174E  6A11               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  2218  001750  1E10               	comf	??_glcdDrawRectangle+2,f,c
  2219  001752  1E11               	comf	??_glcdDrawRectangle+3,f,c
  2220  001754  4A10               	infsnz	??_glcdDrawRectangle+2,f,c
  2221  001756  2A11               	incf	??_glcdDrawRectangle+3,f,c
  2222  001758  5009               	movf	glcdDrawRectangle@YE,w,c
  2223  00175A  2410               	addwf	??_glcdDrawRectangle+2,w,c
  2224  00175C  6E03               	movwf	___wmul@multiplicand,c
  2225  00175E  0E00               	movlw	0
  2226  001760  2011               	addwfc	??_glcdDrawRectangle+3,w,c
  2227  001762  6E04               	movwf	___wmul@multiplicand+1,c
  2228  001764  EC85  F00C         	call	___wmul	;wreg free
  2229  001768  C001  F012         	movff	?___wmul,glcdDrawRectangle@numLoops
  2230  00176C  C002  F013         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  2231                           
  2232                           ;GLCD_PIC_V1.1.c: 131: unsigned char colorData[3];
  2233                           ;GLCD_PIC_V1.1.c: 132: colorData[0] = color & 0xFF;
  2234  001770  C00A  F016         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  2235                           
  2236                           ;GLCD_PIC_V1.1.c: 133: colorData[1] = (color >> 8) & 0xFF;
  2237  001774  C00B  F017         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  2238                           
  2239                           ;GLCD_PIC_V1.1.c: 134: colorData[2] = (color >> 16) & 0xFF;
  2240  001778  C00C  F018         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  2241                           
  2242                           ;GLCD_PIC_V1.1.c: 136: LATDbits.LATD0 = 0;
  2243  00177C  908C               	bcf	3980,0,c	;volatile
  2244                           
  2245                           ;GLCD_PIC_V1.1.c: 137: LATDbits.LATD1 = 1;
  2246  00177E  828C               	bsf	3980,1,c	;volatile
  2247                           
  2248                           ;GLCD_PIC_V1.1.c: 138: for(unsigned short i = 0; i < numLoops; i++){
  2249  001780  0E00               	movlw	0
  2250  001782  6E15               	movwf	glcdDrawRectangle@i+1,c
  2251  001784  0E00               	movlw	0
  2252  001786  6E14               	movwf	glcdDrawRectangle@i,c
  2253  001788  D00B               	goto	l298
  2254  00178A                     
  2255                           ;GLCD_PIC_V1.1.c: 139: spiSend(colorData[0]);
  2256  00178A  5016               	movf	glcdDrawRectangle@colorData,w,c
  2257  00178C  ECB0  F00C         	call	_spiSend
  2258                           
  2259                           ;GLCD_PIC_V1.1.c: 140: spiSend(colorData[1]);
  2260  001790  5017               	movf	glcdDrawRectangle@colorData+1,w,c
  2261  001792  ECB0  F00C         	call	_spiSend
  2262                           
  2263                           ;GLCD_PIC_V1.1.c: 141: spiSend(colorData[2]);
  2264  001796  5018               	movf	glcdDrawRectangle@colorData+2,w,c
  2265  001798  ECB0  F00C         	call	_spiSend
  2266  00179C  4A14               	infsnz	glcdDrawRectangle@i,f,c
  2267  00179E  2A15               	incf	glcdDrawRectangle@i+1,f,c
  2268  0017A0                     l298:
  2269  0017A0  5012               	movf	glcdDrawRectangle@numLoops,w,c
  2270  0017A2  5C14               	subwf	glcdDrawRectangle@i,w,c
  2271  0017A4  5013               	movf	glcdDrawRectangle@numLoops+1,w,c
  2272  0017A6  5815               	subwfb	glcdDrawRectangle@i+1,w,c
  2273  0017A8  A0D8               	btfss	status,0,c
  2274  0017AA  D7EF               	goto	l299
  2275                           
  2276                           ;GLCD_PIC_V1.1.c: 142: }
  2277                           ;GLCD_PIC_V1.1.c: 143: LATDbits.LATD0 = 1;
  2278  0017AC  808C               	bsf	3980,0,c	;volatile
  2279  0017AE  0012               	return	
  2280  0017B0                     __end_of_glcdDrawRectangle:
  2281                           	opt stack 0
  2282                           tblptru	equ	0xFF8
  2283                           tblptrh	equ	0xFF7
  2284                           tblptrl	equ	0xFF6
  2285                           tablat	equ	0xFF5
  2286                           wreg	equ	0xFE8
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _glcdTransfer *****************
  2290 ;; Defined at:
  2291 ;;		line 18 in file "GLCD_PIC_V1.1.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  byte            1    wreg     unsigned char 
  2294 ;;  cmd             1    3[COMRAM] unsigned char 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  byte            1    5[COMRAM] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2, status,0, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2306 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;Total ram usage:        3 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    2
  2313 ;; This function calls:
  2314 ;;		_spiSend
  2315 ;; This function is called by:
  2316 ;;		_glcdDrawRectangle
  2317 ;;		_glcdSetCOLMOD
  2318 ;;		_initGLCD
  2319 ;;		_glcdSetOrigin
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text6
  2324  0018E2                     __ptext6:
  2325                           	opt stack 0
  2326  0018E2                     _glcdTransfer:
  2327                           	opt stack 27
  2328                           
  2329                           ;incstack = 0
  2330                           ;glcdTransfer@byte stored from wreg
  2331  0018E2  6E06               	movwf	glcdTransfer@byte,c
  2332                           
  2333                           ;GLCD_PIC_V1.1.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
  2334  0018E4  0404               	decf	glcdTransfer@cmd,w,c
  2335  0018E6  B4D8               	btfsc	status,2,c
  2336  0018E8  D003               	goto	u140
  2337  0018EA  6A05               	clrf	??_glcdTransfer& (0+255),c
  2338  0018EC  2A05               	incf	??_glcdTransfer& (0+255),f,c
  2339  0018EE  D001               	goto	u158
  2340  0018F0                     u140:
  2341  0018F0  6A05               	clrf	??_glcdTransfer& (0+255),c
  2342  0018F2                     u158:
  2343  0018F2  4605               	rlncf	??_glcdTransfer,f,c
  2344  0018F4  508C               	movf	3980,w,c	;volatile
  2345  0018F6  1805               	xorwf	??_glcdTransfer,w,c
  2346  0018F8  0BFD               	andlw	-3
  2347  0018FA  1805               	xorwf	??_glcdTransfer,w,c
  2348  0018FC  6E8C               	movwf	3980,c	;volatile
  2349                           
  2350                           ;GLCD_PIC_V1.1.c: 31: LATDbits.LATD0 = 0;
  2351  0018FE  908C               	bcf	3980,0,c	;volatile
  2352                           
  2353                           ;GLCD_PIC_V1.1.c: 33: spiSend(byte);
  2354  001900  5006               	movf	glcdTransfer@byte,w,c
  2355  001902  ECB0  F00C         	call	_spiSend
  2356                           
  2357                           ;GLCD_PIC_V1.1.c: 35: LATDbits.LATD0 = 1;
  2358  001906  808C               	bsf	3980,0,c	;volatile
  2359  001908  0012               	return		;funcret
  2360  00190A                     __end_of_glcdTransfer:
  2361                           	opt stack 0
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           wreg	equ	0xFE8
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _spiSend *****************
  2370 ;; Defined at:
  2371 ;;		line 33 in file "SPI_PIC.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  val             1    wreg     unsigned char 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  val             1    2[COMRAM] unsigned char 
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;Total ram usage:        1 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    1
  2392 ;; This function calls:
  2393 ;;		_spiTransfer
  2394 ;; This function is called by:
  2395 ;;		_glcdTransfer
  2396 ;;		_glcdDrawRectangle
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text7
  2401  001960                     __ptext7:
  2402                           	opt stack 0
  2403  001960                     _spiSend:
  2404                           	opt stack 27
  2405                           
  2406                           ;incstack = 0
  2407                           ;spiSend@val stored from wreg
  2408  001960  6E03               	movwf	spiSend@val,c
  2409                           
  2410                           ;SPI_PIC.c: 41: spiTransfer(val);
  2411  001962  5003               	movf	spiSend@val,w,c
  2412  001964  EC98  F00C         	call	_spiTransfer
  2413  001968  0012               	return		;funcret
  2414  00196A                     __end_of_spiSend:
  2415                           	opt stack 0
  2416                           tblptru	equ	0xFF8
  2417                           tblptrh	equ	0xFF7
  2418                           tblptrl	equ	0xFF6
  2419                           tablat	equ	0xFF5
  2420                           wreg	equ	0xFE8
  2421                           status	equ	0xFD8
  2422                           
  2423 ;; *************** function _spiTransfer *****************
  2424 ;; Defined at:
  2425 ;;		line 12 in file "SPI_PIC.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;  byteToTransf    1    wreg     unsigned char 
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      unsigned char 
  2432 ;; Registers used:
  2433 ;;		wreg, status,2
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;Total ram usage:        2 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_spiSend
  2449 ;;		_spiReceive
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text8
  2454  001930                     __ptext8:
  2455                           	opt stack 0
  2456  001930                     _spiTransfer:
  2457                           	opt stack 27
  2458                           
  2459                           ;incstack = 0
  2460                           ;spiTransfer@byteToTransfer stored from wreg
  2461  001930  6E02               	movwf	spiTransfer@byteToTransfer,c
  2462                           
  2463                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  2464  001932  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  2465  001936                     l952:
  2466  001936  B69E               	btfsc	3998,3,c	;volatile
  2467  001938  D002               	goto	u10
  2468  00193A  0E01               	movlw	1
  2469  00193C  D001               	goto	u12
  2470  00193E                     u10:
  2471  00193E  0E00               	movlw	0
  2472  001940                     u12:
  2473  001940  6E01               	movwf	??_spiTransfer& (0+255),c
  2474  001942  B0C7               	btfsc	4039,0,c	;volatile
  2475  001944  D002               	goto	u20
  2476  001946  0E01               	movlw	1
  2477  001948  D001               	goto	u22
  2478  00194A                     u20:
  2479  00194A  0E00               	movlw	0
  2480  00194C                     u22:
  2481  00194C  1001               	iorwf	??_spiTransfer,w,c
  2482  00194E  E1F3               	bnz	l952
  2483                           
  2484                           ;SPI_PIC.c: 30: return SSPBUF;
  2485  001950  50C9               	movf	4041,w,c	;volatile
  2486  001952  0012               	return	
  2487  001954                     __end_of_spiTransfer:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           wreg	equ	0xFE8
  2494                           status	equ	0xFD8
  2495                           
  2496 ;; *************** function ___wmul *****************
  2497 ;; Defined at:
  2498 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  multiplier      2    0[COMRAM] unsigned int 
  2501 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  product         2    4[COMRAM] unsigned int 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  2    0[COMRAM] unsigned int 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0, prodl, prodh
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2513 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;Total ram usage:        6 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; This function calls:
  2520 ;;		Nothing
  2521 ;; This function is called by:
  2522 ;;		_glcdDrawRectangle
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text9
  2527  00190A                     __ptext9:
  2528                           	opt stack 0
  2529  00190A                     ___wmul:
  2530                           	opt stack 28
  2531                           
  2532                           ;incstack = 0
  2533  00190A  5001               	movf	___wmul@multiplier,w,c
  2534  00190C  0203               	mulwf	___wmul@multiplicand,c
  2535  00190E  CFF3 F005          	movff	prodl,___wmul@product
  2536  001912  CFF4 F006          	movff	prodh,___wmul@product+1
  2537  001916  5001               	movf	___wmul@multiplier,w,c
  2538  001918  0204               	mulwf	___wmul@multiplicand+1,c
  2539  00191A  50F3               	movf	prodl,w,c
  2540  00191C  2606               	addwf	___wmul@product+1,f,c
  2541  00191E  5002               	movf	___wmul@multiplier+1,w,c
  2542  001920  0203               	mulwf	___wmul@multiplicand,c
  2543  001922  50F3               	movf	prodl,w,c
  2544  001924  2606               	addwf	___wmul@product+1,f,c
  2545  001926  C005  F001         	movff	___wmul@product,?___wmul
  2546  00192A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2547  00192E  0012               	return	
  2548  001930                     __end_of___wmul:
  2549                           	opt stack 0
  2550                           tblptru	equ	0xFF8
  2551                           tblptrh	equ	0xFF7
  2552                           tblptrl	equ	0xFF6
  2553                           tablat	equ	0xFF5
  2554                           prodh	equ	0xFF4
  2555                           prodl	equ	0xFF3
  2556                           wreg	equ	0xFE8
  2557                           status	equ	0xFD8
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodh	equ	0xFF4
  2563                           prodl	equ	0xFF3
  2564                           wreg	equ	0xFE8
  2565                           status	equ	0xFD8
  2566                           
  2567                           	psect	rparam
  2568  0000                     tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           wreg	equ	0xFE8
  2575                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     32      33
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_initGLCD
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _drawTeamName->_glcdDrawRectangle
    _glcdDrawRectangle->___wmul
    _glcdDrawRectangle->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   42023
                                             27 COMRAM     5     5      0
                       _drawTeamName
                  _glcdDrawRectangle
                           _initGLCD
 ---------------------------------------------------------------------------------
 (1) _initGLCD                                             2     2      0   20126
                                             25 COMRAM     2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _glcdSetCOLMOD                                        3     3      0    4606
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _drawTeamName                                         0     0      0   10947
                  _glcdDrawRectangle
 ---------------------------------------------------------------------------------
 (2) _glcdDrawRectangle                                   19    12      7   10947
                                              6 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _glcdTransfer                                         3     2      1    4558
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      30
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _drawTeamName
     _glcdDrawRectangle
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
   _glcdDrawRectangle
     ___wmul
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiSend
       _spiTransfer
   _initGLCD
     _glcdDrawRectangle
       ___wmul
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _glcdSetCOLMOD
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     20      21       1       26.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      21      34        0.0%
DATA                 0      0      21       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr  9 23:20:52 2018

                       _SSPSTATbits 000FC7                      ??_glcdTransfer 0005  
                                u10 193E                                  u20 194A  
                                u12 1940                                  u22 194C  
                       __CFG_CPD$ON 000000                 ___wmul@multiplicand 0003  
                       __CFG_BORV$3 000000                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                                 l133 183C  
                               l310 185E                                 l311 188A  
                               l312 1866                                 l314 1870  
                               l309 1878                                 l174 18C2  
                               l176 18D8                                 l177 18B4  
                               l290 1642                                 l178 18B8  
                               l179 18BC                                 l292 1656  
                               l294 1668                                 l295 1674  
                               l296 1730                                 l298 17A0  
                               l299 178A                                 l952 1936  
                      __CFG_CPB$OFF 000000                                 u140 18F0  
                               u158 18F2                                 _RED 1019  
                               u257 184A                                 u267 1082  
                               u277 10A8                                 u287 10D4  
                               u297 1366           __end_ofGLCD_PIC@INST_TEON 1039  
                               wreg 000FE8                        __CFG_LVP$OFF 000000  
                      __CFG_WDT$OFF 000000                                l1258 166C  
                              _BLUE 1009                                _LATA 000F89  
                              _LATB 000F8A                                _LATC 000F8B  
                              _LATD 000F8C                                _LATE 000F8D  
                              _GREY 1021                                _main 17B0  
                    ??_drawTeamName 001A                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                               ?_main 0001  
                             _BLACK 1025                    __end_of_INST_NOP 1069  
                             _GREEN 100D                               _WHITE 101D  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _SSPIF 007CF3  
                     __CFG_PWRT$OFF 000000                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000       __end_ofGLCD_PIC@INST_VMOFCTR2 102A  
                    __CFG_EBTRB$OFF 000000                               main@x 001F  
                             main@y 0020                     __end_of_spiInit 18E2  
                             tablat 000FF5                     __end_of_spiSend 196A  
                      main@rotation 001E                               status 000FD8  
                    __CFG_PBADEN$ON 000000                        __end_of_BLUE 100D  
                      __end_of_GREY 1025                     __initialization 1954  
                      __end_of_main 185A        glcdSetCOLMOD@numBitsPerPixel 0007  
                            ??_main 001C                       __activetblptr 000002  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                 _glcdDrawRectangle 1630                   __end_of_INST_TEON 1059  
                            _INDIGO 1005                __end_of_glcdTransfer 190A  
                            _ORANGE 1015                  ?_glcdDrawRectangle 0007  
                            _VIOLET 1001                              _YELLOW 1011  
                            _SSPBUF 000FC9                      __CFG_XINST$OFF 000000  
         glcdDrawRectangle@numLoops 0012                 ??_glcdDrawRectangle 000E  
                            ___wmul 190A                    __end_of_initGLCD 1372  
                    __CFG_STVREN$ON 000000            __end_ofGLCD_PIC@INST_NOP 1049  
              __end_of_drawTeamName 1630                        ?_spiTransfer 0001  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_spiInit 0001                           ??_spiSend 0003  
         __end_of_glcdDrawRectangle 17B0                          __accesstop 0080  
           __end_of__initialization 1956                       __end_of_BLACK 1029  
                     ___rparam_used 000001                       __end_of_GREEN 1011  
                     __end_of_WHITE 1021         __end_ofGLCD_PIC@INST_GAMSET 1041  
       __end_ofGLCD_PIC@INST_COLMOD 1035         __end_ofGLCD_PIC@INST_MADCTL 1038  
       __end_ofGLCD_PIC@INST_DISPON 103F         __end_ofGLCD_PIC@INST_IDMOFF 1037  
                    __pcstackCOMRAM 0001         __end_ofGLCD_PIC@INST_INVCTR 1031  
       __end_ofGLCD_PIC@INST_INVOFF 1043         __end_ofGLCD_PIC@INST_PWCTR1 1030  
       __end_ofGLCD_PIC@INST_PWCTR2 102F         __end_ofGLCD_PIC@INST_PWCTR3 102E  
       __end_ofGLCD_PIC@INST_PWCTR4 102D         __end_ofGLCD_PIC@INST_PWCTR5 102C  
       __end_ofGLCD_PIC@INST_VMCTR1 102B         __end_ofGLCD_PIC@INST_SLPOUT 1046  
                     _INST_VMOFCTR2 1049               __end_of_glcdSetCOLMOD 18AA  
                           ?___wmul 0001                  glcdDrawRectangle@i 0014  
                __end_of_INST_CASET 105E                  __end_of_INST_IDMON 1056  
                __end_of_INST_INVON 1062                  __end_of_INST_RASET 105D  
                __end_of_INST_RAMWR 105C                  __end_of_INST_TEOFF 105A  
                __end_of_INST_NORON 1064                  __end_of_INST_PTLAR 105B  
                __end_of_INST_SLPIN 1067                  __end_of_INST_PTLON 1065  
             __size_of_glcdTransfer 0028          __size_of_glcdDrawRectangle 0180  
         spiTransfer@byteToTransfer 0002                             _SSPCON1 000FC6  
                           _SSPSTAT 000FC7                           ?_initGLCD 0001  
                           __Hparam 0000                      _GLCD_SIZE_HORZ 106A  
                           __Lparam 0000                      _GLCD_SIZE_VERT 1069  
              __end_of_INST_DISPOFF 1060                __end_of_INST_FRMCTR1 1054  
              __end_of_INST_FRMCTR2 1053                __end_of_INST_FRMCTR3 1052  
                   __size_of___wmul 0026               __size_of_drawTeamName 02BE  
                      __psmallconst 1000                             __pcinit 1954  
                      _glcdTransfer 18E2                             __ramtop 1000  
                           __ptext0 17B0                             __ptext1 106E  
                           __ptext2 18AA                             __ptext3 185A  
                           __ptext4 1372                             __ptext5 1630  
                           __ptext6 18E2                             __ptext7 1960  
                           __ptext8 1930                             __ptext9 190A  
              __end_of_INST_SWRESET 1068                             _spiInit 18AA  
                           _spiSend 1960                __size_of_spiTransfer 0024  
              end_of_initialization 1956               GLCD_PIC@INST_VMOFCTR2 1029  
                        ??_initGLCD 001A                       __Lmediumconst 0000  
            __end_of_GLCD_SIZE_HORZ 106B                           _INST_TEON 1058  
            __end_of_GLCD_SIZE_VERT 106A                        _drawTeamName 1372  
                  glcdTransfer@byte 0006                      spiInit@divider 0001  
                         _TRISCbits 000F94                           _TRISDbits 000F95  
                    __end_of_INDIGO 1009                      __end_of_ORANGE 1019  
                    __end_of_VIOLET 1005                      __end_of_YELLOW 1015  
      __end_ofGLCD_PIC@INST_DISPOFF 1040        __end_ofGLCD_PIC@INST_FRMCTR1 1034  
      __end_ofGLCD_PIC@INST_FRMCTR2 1033        __end_ofGLCD_PIC@INST_FRMCTR3 1032  
                    __end_of___wmul 1930        __end_ofGLCD_PIC@INST_SWRESET 1048  
               start_initialization 1954                         __end_of_RED 101D  
            glcdDrawRectangle@color 000A                    __CFG_OSC$INTIO67 000000  
                          ??___wmul 0005                    __CFG_LPT1OSC$OFF 000000  
__end_of_GLCD_ADDRESSABLE_SIZE_HORZ 106D          _GLCD_ADDRESSABLE_SIZE_HORZ 106C  
__end_of_GLCD_ADDRESSABLE_SIZE_VERT 106C          _GLCD_ADDRESSABLE_SIZE_VERT 106B  
                       __pbssCOMRAM 0021          __end_ofGLCD_PIC@INST_CASET 103E  
        __end_ofGLCD_PIC@INST_IDMON 1036          __end_ofGLCD_PIC@INST_INVON 1042  
        __end_ofGLCD_PIC@INST_RASET 103D          __end_ofGLCD_PIC@INST_RAMWR 103C  
                      _INST_DISPOFF 105F          __end_ofGLCD_PIC@INST_TEOFF 103A  
        __end_ofGLCD_PIC@INST_NORON 1044          __end_ofGLCD_PIC@INST_PTLAR 103B  
        __end_ofGLCD_PIC@INST_SLPIN 1047          __end_ofGLCD_PIC@INST_PTLON 1045  
                      _INST_FRMCTR1 1053                        _INST_FRMCTR2 1052  
                      _INST_FRMCTR3 1051                   __size_of_initGLCD 0304  
                      _INST_SWRESET 1067                   __CFG_CCP2MX$PORTC 000000  
            __size_of_glcdSetCOLMOD 0050                         __smallconst 1000  
               glcdDrawRectangle@XE 0007                 glcdDrawRectangle@YE 0009  
               glcdDrawRectangle@XS 0019                 glcdDrawRectangle@YS 0008  
               __end_of_INST_GAMSET 1061                            ?_spiInit 0001  
               __end_of_INST_COLMOD 1055                            ?_spiSend 0001  
               __end_of_INST_MADCTL 1058                 __end_of_INST_DISPON 105F  
               __end_of_INST_IDMOFF 1057                GLCD_PIC@INST_DISPOFF 103F  
               __end_of_INST_INVCTR 1051                 __end_of_INST_INVOFF 1063  
              GLCD_PIC@INST_FRMCTR1 1033                GLCD_PIC@INST_FRMCTR2 1032  
              GLCD_PIC@INST_FRMCTR3 1031                 __end_of_INST_PWCTR1 1050  
               __end_of_INST_PWCTR2 104F                 __end_of_INST_PWCTR3 104E  
               __end_of_INST_PWCTR4 104D                 __end_of_INST_PWCTR5 104C  
               __end_of_INST_VMCTR1 104B                 __end_of_INST_SLPOUT 1066  
                    ___wmul@product 0005                            _LATDbits 000F8C  
              GLCD_PIC@INST_SWRESET 1047                            _INST_NOP 1068  
                        spiSend@val 0003                    __CFG_WDTPS$32768 000000  
                   glcdTransfer@cmd 0004                   ___wmul@multiplier 0001  
                     ??_spiTransfer 0001                glcdSetCOLMOD@rawData 0008  
                     _glcdSetCOLMOD 185A                            __Hrparam 0000  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
                       _INST_GAMSET 1060                         _INST_COLMOD 1054  
                       _INST_MADCTL 1057                         _INST_DISPON 105E  
                       _INST_IDMOFF 1056                         _INST_INVCTR 1050  
                       _INST_INVOFF 1062                         _INST_PWCTR1 104F  
                       _INST_PWCTR2 104E                         _INST_PWCTR3 104D  
                       _INST_PWCTR4 104C                         _INST_PWCTR5 104B  
                       _INST_VMCTR1 104A                         _INST_SLPOUT 1065  
                  __size_of_spiInit 0038                    __size_of_spiSend 000A  
             __end_of_INST_VMOFCTR2 104A                          _MADCTLbits 0021  
               __end_of_spiTransfer 1954                      ?_glcdSetCOLMOD 0001  
                          _initGLCD 106E                 GLCD_PIC@INST_GAMSET 1040  
               GLCD_PIC@INST_COLMOD 1034                 GLCD_PIC@INST_MADCTL 1037  
               GLCD_PIC@INST_DISPON 103E                 GLCD_PIC@INST_IDMOFF 1036  
                     __size_of_main 00AA                 GLCD_PIC@INST_INVCTR 1030  
               GLCD_PIC@INST_INVOFF 1042                 GLCD_PIC@INST_PWCTR1 102F  
               GLCD_PIC@INST_PWCTR2 102E                 GLCD_PIC@INST_PWCTR3 102D  
               GLCD_PIC@INST_PWCTR4 102C                 GLCD_PIC@INST_PWCTR5 102B  
               GLCD_PIC@INST_VMCTR1 102A                 GLCD_PIC@INST_SLPOUT 1045  
                       _OSCTUNEbits 000F9B                          _INST_CASET 105D  
                        _INST_IDMON 1055                          _INST_INVON 1061  
                        _INST_RASET 105C                          _INST_RAMWR 105B  
                        _INST_TEOFF 1059                          _INST_NORON 1063  
                        _INST_PTLAR 105A                          _INST_SLPIN 1066  
                        _INST_PTLON 1064                  GLCD_PIC@INST_CASET 103D  
                GLCD_PIC@INST_IDMON 1035                  GLCD_PIC@INST_INVON 1041  
                GLCD_PIC@INST_RASET 103C                  GLCD_PIC@INST_RAMWR 103B  
                GLCD_PIC@INST_TEOFF 1039                  GLCD_PIC@INST_NORON 1043  
                GLCD_PIC@INST_PTLAR 103A                          _OSCCONbits 000FD3  
                GLCD_PIC@INST_SLPIN 1046                  GLCD_PIC@INST_PTLON 1044  
        glcdDrawRectangle@colorData 0016                       ?_glcdTransfer 0004  
                       _spiTransfer 1930                   GLCD_PIC@INST_TEON 1038  
                       _SSPCON1bits 000FC6                     ??_glcdSetCOLMOD 0007  
                  GLCD_PIC@INST_NOP 1048                       ?_drawTeamName 0001  
