

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 15:12:41 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.45
    72                           ; Generated 16/11/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4620 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataCOMRAM
   107  0035F8                     __pidataCOMRAM:
   108                           	opt stack 0
   109                           
   110                           ;initializer for _close_handle
   111  0035F8  0E                 	db	14
   112                           
   113                           ;initializer for _servo_ramp
   114  0035F9  0D                 	db	13
   115                           
   116                           ;initializer for _motorStop_3
   117  0035FA  0C                 	db	12
   118                           
   119                           ;initializer for _motorStart_3
   120  0035FB  0B                 	db	11
   121                           
   122                           ;initializer for _motorStop_1
   123  0035FC  38                 	db	56
   124                           
   125                           ;initializer for _motorStart_1
   126  0035FD  37                 	db	55
   127                           
   128                           ;initializer for _motorStop_0
   129  0035FE  36                 	db	54
   130                           
   131                           ;initializer for _motorStart_0
   132  0035FF  35                 	db	53
   133                           
   134                           ;initializer for _N_dispense
   135  003600  33                 	db	51
   136                           
   137                           ;initializer for _B_dispense
   138  003601  32                 	db	50
   139                           
   140                           ;initializer for _rotate_1compartment
   141  003602  31                 	db	49
   142                           
   143                           ;initializer for _rotate_gear
   144  003603  30                 	db	48
   145                           
   146                           	psect	idataBANK0
   147  003592                     __pidataBANK0:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _compartment_array
   151  003592  0000               	dw	0
   152  003594  0001               	dw	1
   153  003596  0000               	dw	0
   154  003598  0001               	dw	1
   155  00359A  0000               	dw	0
   156  00359C  0001               	dw	1
   157  00359E  0000               	dw	0
   158  0035A0  0001               	dw	1
   159                           
   160                           ;initializer for _init_position
   161  0035A2  0005               	dw	5
   162                           
   163                           ;initializer for _mode
   164  0035A4  0002               	dw	2
   165                           
   166                           ;initializer for _motorStop_2
   167  0035A6  0A                 	db	10
   168                           
   169                           ;initializer for _motorStart_2
   170  0035A7  39                 	db	57
   171                           
   172                           ;initializer for _S_dispense
   173  0035A8  34                 	db	52
   174                           
   175                           	psect	idataBANK1
   176  003426                     __pidataBANK1:
   177                           	opt stack 0
   178                           
   179                           ;initializer for _N_array
   180  003426  0000               	dw	0
   181  003428  0002               	dw	2
   182  00342A  0000               	dw	0
   183  00342C  0001               	dw	1
   184  00342E  0000               	dw	0
   185  003430  0000               	dw	0
   186  003432  0000               	dw	0
   187  003434  0003               	dw	3
   188                           
   189                           ;initializer for _S_array
   190  003436  0000               	dw	0
   191  003438  0001               	dw	1
   192  00343A  0000               	dw	0
   193  00343C  0001               	dw	1
   194  00343E  0000               	dw	0
   195  003440  0001               	dw	1
   196  003442  0000               	dw	0
   197  003444  0000               	dw	0
   198                           
   199                           ;initializer for _B_array
   200  003446  0000               	dw	0
   201  003448  0001               	dw	1
   202  00344A  0000               	dw	0
   203  00344C  0001               	dw	1
   204  00344E  0000               	dw	0
   205  003450  0003               	dw	3
   206  003452  0000               	dw	0
   207  003454  0000               	dw	0
   208                           
   209                           ;initializer for _W_max
   210  003456  0004               	dw	4
   211                           
   212                           ;initializer for _S_max
   213  003458  0004               	dw	4
   214                           
   215                           ;initializer for _N_max
   216  00345A  0004               	dw	4
   217                           
   218                           ;initializer for _B_max
   219  00345C  0004               	dw	4
   220                           
   221                           	psect	mediumconst
   222  00FDF6                     __pmediumconst:
   223                           	opt stack 0
   224  00FDF6  00                 	db	0
   225  00FDF7                     _keys:
   226                           	opt stack 0
   227  00FDF7  31                 	db	49
   228  00FDF8  32                 	db	50
   229  00FDF9  33                 	db	51
   230  00FDFA  41                 	db	65
   231  00FDFB  34                 	db	52
   232  00FDFC  35                 	db	53
   233  00FDFD  36                 	db	54
   234  00FDFE  42                 	db	66
   235  00FDFF  37                 	db	55
   236  00FE00  38                 	db	56
   237  00FE01  39                 	db	57
   238  00FE02  43                 	db	67
   239  00FE03  2A                 	db	42
   240  00FE04  30                 	db	48
   241  00FE05  23                 	db	35
   242  00FE06  44                 	db	68
   243  00FE07  00                 	db	0
   244  00FE08                     __end_of_keys:
   245                           	opt stack 0
   246  00FE08                     _dpowers:
   247                           	opt stack 0
   248  00FE08  0001               	dw	1
   249  00FE0A  000A               	dw	10
   250  00FE0C  0064               	dw	100
   251  00FE0E  03E8               	dw	1000
   252  00FE10  2710               	dw	10000
   253  00FE12                     __end_of_dpowers:
   254                           	opt stack 0
   255  00FE12                     _hexpowers:
   256                           	opt stack 0
   257  00FE12  0001               	dw	1
   258  00FE14  0010               	dw	16
   259  00FE16  0100               	dw	256
   260  00FE18  1000               	dw	4096
   261  00FE1A                     __end_of_hexpowers:
   262                           	opt stack 0
   263  00FE1A                     _happynewyear:
   264                           	opt stack 0
   265  00FE1A  45                 	db	69
   266  00FE1B  14                 	db	20
   267  00FE1C  14                 	db	20
   268  00FE1D  00                 	db	0
   269  00FE1E  11                 	db	17
   270  00FE1F  03                 	db	3
   271  00FE20  18                 	db	24
   272  00FE21                     __end_of_happynewyear:
   273                           	opt stack 0
   274  00FE21                     _array:
   275                           	opt stack 0
   276  00FE21  30                 	db	48
   277  00FE22  31                 	db	49
   278  00FE23  00                 	db	0
   279  00FE24                     __end_of_array:
   280                           	opt stack 0
   281  00FE24                     _LCD_LEFT:
   282                           	opt stack 0
   283  00FE24  00                 	db	0
   284  00FE25                     __end_of_LCD_LEFT:
   285                           	opt stack 0
   286  00FE25                     _LCD_RIGHT:
   287                           	opt stack 0
   288  00FE25  01                 	db	1
   289  00FE26                     __end_of_LCD_RIGHT:
   290                           	opt stack 0
   291  00FE26                     _LCD_SIZE_VERT:
   292                           	opt stack 0
   293  00FE26  02                 	db	2
   294  00FE27                     __end_of_LCD_SIZE_VERT:
   295                           	opt stack 0
   296  00FE27                     _LCD_SIZE_HORZ:
   297                           	opt stack 0
   298  00FE27  10                 	db	16
   299  00FE28                     __end_of_LCD_SIZE_HORZ:
   300                           	opt stack 0
   301  00FE28                     _LCD_VERT_LIMIT:
   302                           	opt stack 0
   303  00FE28  02                 	db	2
   304  00FE29                     __end_of_LCD_VERT_LIMIT:
   305                           	opt stack 0
   306  00FE29                     _LCD_HORZ_LIMIT:
   307                           	opt stack 0
   308  00FE29  28                 	db	40
   309  00FE2A                     __end_of_LCD_HORZ_LIMIT:
   310                           	opt stack 0
   311  00FE2A                     _strs:
   312                           	opt stack 0
   313  00FE2A  42                 	db	66
   314  00FE2B  00                 	db	0
   315  00FE2C  00                 	db	0
   316  00FE2D  00                 	db	0
   317  00FE2E  00                 	db	0
   318  00FE2F  4E                 	db	78
   319  00FE30  00                 	db	0
   320  00FE31  00                 	db	0
   321  00FE32  00                 	db	0
   322  00FE33  00                 	db	0
   323  00FE34  53                 	db	83
   324  00FE35  00                 	db	0
   325  00FE36  00                 	db	0
   326  00FE37  00                 	db	0
   327  00FE38  00                 	db	0
   328  00FE39  57                 	db	87
   329  00FE3A  00                 	db	0
   330  00FE3B  00                 	db	0
   331  00FE3C  00                 	db	0
   332  00FE3D  00                 	db	0
   333  00FE3E  42                 	db	66
   334  00FE3F  4E                 	db	78
   335  00FE40  00                 	db	0
   336  00FE41  00                 	db	0
   337  00FE42  00                 	db	0
   338  00FE43  42                 	db	66
   339  00FE44  53                 	db	83
   340  00FE45  00                 	db	0
   341  00FE46  00                 	db	0
   342  00FE47  00                 	db	0
   343  00FE48  42                 	db	66
   344  00FE49  57                 	db	87
   345  00FE4A  00                 	db	0
   346  00FE4B  00                 	db	0
   347  00FE4C  00                 	db	0
   348  00FE4D  42                 	db	66
   349  00FE4E  42                 	db	66
   350  00FE4F  4E                 	db	78
   351  00FE50  00                 	db	0
   352  00FE51  00                 	db	0
   353  00FE52  42                 	db	66
   354  00FE53  42                 	db	66
   355  00FE54  53                 	db	83
   356  00FE55  00                 	db	0
   357  00FE56  00                 	db	0
   358  00FE57  42                 	db	66
   359  00FE58  42                 	db	66
   360  00FE59  57                 	db	87
   361  00FE5A  00                 	db	0
   362  00FE5B  00                 	db	0
   363  00FE5C  42                 	db	66
   364  00FE5D  4E                 	db	78
   365  00FE5E  57                 	db	87
   366  00FE5F  00                 	db	0
   367  00FE60  00                 	db	0
   368  00FE61  42                 	db	66
   369  00FE62  53                 	db	83
   370  00FE63  57                 	db	87
   371  00FE64  00                 	db	0
   372  00FE65  00                 	db	0
   373  00FE66  42                 	db	66
   374  00FE67  57                 	db	87
   375  00FE68  57                 	db	87
   376  00FE69  00                 	db	0
   377  00FE6A  00                 	db	0
   378  00FE6B  42                 	db	66
   379  00FE6C  4E                 	db	78
   380  00FE6D  57                 	db	87
   381  00FE6E  57                 	db	87
   382  00FE6F  00                 	db	0
   383  00FE70  42                 	db	66
   384  00FE71  53                 	db	83
   385  00FE72  57                 	db	87
   386  00FE73  57                 	db	87
   387  00FE74  00                 	db	0
   388  00FE75  42                 	db	66
   389  00FE76  42                 	db	66
   390  00FE77  53                 	db	83
   391  00FE78  57                 	db	87
   392  00FE79  00                 	db	0
   393  00FE7A  42                 	db	66
   394  00FE7B  42                 	db	66
   395  00FE7C  4E                 	db	78
   396  00FE7D  57                 	db	87
   397  00FE7E  00                 	db	0
   398  00FE7F  42                 	db	66
   399  00FE80  4E                 	db	78
   400  00FE81  4E                 	db	78
   401  00FE82  57                 	db	87
   402  00FE83  00                 	db	0
   403  00FE84  42                 	db	66
   404  00FE85  4E                 	db	78
   405  00FE86  4E                 	db	78
   406  00FE87  4E                 	db	78
   407  00FE88  00                 	db	0
   408  00FE89  42                 	db	66
   409  00FE8A  57                 	db	87
   410  00FE8B  57                 	db	87
   411  00FE8C  57                 	db	87
   412  00FE8D  00                 	db	0
   413  00FE8E                     __end_of_strs:
   414                           	opt stack 0
   415  0000                     _SSPBUF	set	4041
   416  0000                     _SSPCON2bits	set	4037
   417  0000                     _SSPADD	set	4040
   418  0000                     _SSPCON2	set	4037
   419  0000                     _SSPCON1	set	4038
   420  0000                     _SSPSTAT	set	4039
   421  0000                     _TRISCbits	set	3988
   422  0000                     _SSPCON1bits	set	4038
   423  0000                     _PORTAbits	set	3968
   424  0000                     _TRISAbits	set	3986
   425  0000                     _TRISDbits	set	3989
   426  0000                     _ADRESL	set	4035
   427  0000                     _ADRESH	set	4036
   428  0000                     _ADCON0bits	set	4034
   429  0000                     _PORTB	set	3969
   430  0000                     _ADCON1	set	4033
   431  0000                     _ADCON0	set	4034
   432  0000                     _TRISE	set	3990
   433  0000                     _TRISD	set	3989
   434  0000                     _TRISC	set	3988
   435  0000                     _TRISB	set	3987
   436  0000                     _TRISA	set	3986
   437  0000                     _LATE	set	3981
   438  0000                     _LATC	set	3979
   439  0000                     _LATB	set	3978
   440  0000                     _LATA	set	3977
   441  0000                     _INTCONbits	set	4082
   442  0000                     _LATD	set	3980
   443  0000                     _LATDbits	set	3980
   444  0000                     _ADON	set	32272
   445  0000                     _INT1IF	set	32640
   446  0000                     _INT1IE	set	32643
   447  00FE8E                     STR_3:
   448  00FE8E  73                 	db	115	;'s'
   449  00FE8F  70                 	db	112	;'p'
   450  00FE90  61                 	db	97	;'a'
   451  00FE91  63                 	db	99	;'c'
   452  00FE92  65                 	db	101	;'e'
   453  00FE93  72                 	db	114	;'r'
   454  00FE94  73                 	db	115	;'s'
   455  00FE95  20                 	db	32
   456  00FE96  64                 	db	100	;'d'
   457  00FE97  69                 	db	105	;'i'
   458  00FE98  73                 	db	115	;'s'
   459  00FE99  70                 	db	112	;'p'
   460  00FE9A  65                 	db	101	;'e'
   461  00FE9B  6E                 	db	110	;'n'
   462  00FE9C  73                 	db	115	;'s'
   463  00FE9D  65                 	db	101	;'e'
   464  00FE9E  64                 	db	100	;'d'
   465  00FE9F  3A                 	db	58	;':'
   466  00FEA0  25                 	db	37
   467  00FEA1  64                 	db	100	;'d'
   468  00FEA2  00                 	db	0
   469  00FEA3                     STR_10:
   470  00FEA3  20                 	db	32
   471  00FEA4  32                 	db	50	;'2'
   472  00FEA5  3A                 	db	58	;':'
   473  00FEA6  20                 	db	32
   474  00FEA7  4F                 	db	79	;'O'
   475  00FEA8  70                 	db	112	;'p'
   476  00FEA9  65                 	db	101	;'e'
   477  00FEAA  72                 	db	114	;'r'
   478  00FEAB  61                 	db	97	;'a'
   479  00FEAC  74                 	db	116	;'t'
   480  00FEAD  69                 	db	105	;'i'
   481  00FEAE  6F                 	db	111	;'o'
   482  00FEAF  6E                 	db	110	;'n'
   483  00FEB0  20                 	db	32
   484  00FEB1  54                 	db	84	;'T'
   485  00FEB2  69                 	db	105	;'i'
   486  00FEB3  6D                 	db	109	;'m'
   487  00FEB4  65                 	db	101	;'e'
   488  00FEB5  00                 	db	0
   489  00FEB6                     STR_55:
   490  00FEB6  30                 	db	48	;'0'
   491  00FEB7  31                 	db	49	;'1'
   492  00FEB8  32                 	db	50	;'2'
   493  00FEB9  33                 	db	51	;'3'
   494  00FEBA  34                 	db	52	;'4'
   495  00FEBB  35                 	db	53	;'5'
   496  00FEBC  36                 	db	54	;'6'
   497  00FEBD  37                 	db	55	;'7'
   498  00FEBE  38                 	db	56	;'8'
   499  00FEBF  39                 	db	57	;'9'
   500  00FEC0  61                 	db	97	;'a'
   501  00FEC1  62                 	db	98	;'b'
   502  00FEC2  63                 	db	99	;'c'
   503  00FEC3  64                 	db	100	;'d'
   504  00FEC4  65                 	db	101	;'e'
   505  00FEC5  66                 	db	102	;'f'
   506  00FEC6  00                 	db	0
   507  00FEC7                     STR_6:
   508  00FEC7  53                 	db	83	;'S'
   509  00FEC8  70                 	db	112	;'p'
   510  00FEC9  61                 	db	97	;'a'
   511  00FECA  63                 	db	99	;'c'
   512  00FECB  65                 	db	101	;'e'
   513  00FECC  72                 	db	114	;'r'
   514  00FECD  5F                 	db	95	;'_'
   515  00FECE  72                 	db	114	;'r'
   516  00FECF  65                 	db	101	;'e'
   517  00FED0  6D                 	db	109	;'m'
   518  00FED1  61                 	db	97	;'a'
   519  00FED2  69                 	db	105	;'i'
   520  00FED3  6E                 	db	110	;'n'
   521  00FED4  3A                 	db	58	;':'
   522  00FED5  25                 	db	37
   523  00FED6  64                 	db	100	;'d'
   524  00FED7  00                 	db	0
   525  00FED8                     STR_7:
   526  00FED8  57                 	db	87	;'W'
   527  00FED9  61                 	db	97	;'a'
   528  00FEDA  73                 	db	115	;'s'
   529  00FEDB  68                 	db	104	;'h'
   530  00FEDC  65                 	db	101	;'e'
   531  00FEDD  72                 	db	114	;'r'
   532  00FEDE  5F                 	db	95	;'_'
   533  00FEDF  72                 	db	114	;'r'
   534  00FEE0  65                 	db	101	;'e'
   535  00FEE1  6D                 	db	109	;'m'
   536  00FEE2  61                 	db	97	;'a'
   537  00FEE3  69                 	db	105	;'i'
   538  00FEE4  6E                 	db	110	;'n'
   539  00FEE5  3A                 	db	58	;':'
   540  00FEE6  25                 	db	37
   541  00FEE7  64                 	db	100	;'d'
   542  00FEE8  00                 	db	0
   543  00FEE9                     STR_9:
   544  00FEE9  31                 	db	49	;'1'
   545  00FEEA  3A                 	db	58	;':'
   546  00FEEB  20                 	db	32
   547  00FEEC  44                 	db	68	;'D'
   548  00FEED  61                 	db	97	;'a'
   549  00FEEE  74                 	db	116	;'t'
   550  00FEEF  65                 	db	101	;'e'
   551  00FEF0  20                 	db	32
   552  00FEF1  61                 	db	97	;'a'
   553  00FEF2  6E                 	db	110	;'n'
   554  00FEF3  64                 	db	100	;'d'
   555  00FEF4  20                 	db	32
   556  00FEF5  54                 	db	84	;'T'
   557  00FEF6  69                 	db	105	;'i'
   558  00FEF7  6D                 	db	109	;'m'
   559  00FEF8  65                 	db	101	;'e'
   560  00FEF9  00                 	db	0
   561  00FEFA                     STR_16:
   562  00FEFA  6F                 	db	111	;'o'
   563  00FEFB  70                 	db	112	;'p'
   564  00FEFC  65                 	db	101	;'e'
   565  00FEFD  72                 	db	114	;'r'
   566  00FEFE  61                 	db	97	;'a'
   567  00FEFF  74                 	db	116	;'t'
   568  00FF00  69                 	db	105	;'i'
   569  00FF01  6F                 	db	111	;'o'
   570  00FF02  6E                 	db	110	;'n'
   571  00FF03  20                 	db	32
   572  00FF04  74                 	db	116	;'t'
   573  00FF05  69                 	db	105	;'i'
   574  00FF06  6D                 	db	109	;'m'
   575  00FF07  65                 	db	101	;'e'
   576  00FF08  3A                 	db	58	;':'
   577  00FF09  00                 	db	0
   578  00FF0A                     STR_18:
   579  00FF0A  57                 	db	87	;'W'
   580  00FF0B  72                 	db	114	;'r'
   581  00FF0C  6F                 	db	111	;'o'
   582  00FF0D  6E                 	db	110	;'n'
   583  00FF0E  67                 	db	103	;'g'
   584  00FF0F  20                 	db	32
   585  00FF10  6E                 	db	110	;'n'
   586  00FF11  75                 	db	117	;'u'
   587  00FF12  6D                 	db	109	;'m'
   588  00FF13  62                 	db	98	;'b'
   589  00FF14  65                 	db	101	;'e'
   590  00FF15  72                 	db	114	;'r'
   591  00FF16  21                 	db	33
   592  00FF17  20                 	db	32
   593  00FF18  00                 	db	0
   594  00FF19                     STR_4:
   595  00FF19  42                 	db	66	;'B'
   596  00FF1A  6F                 	db	111	;'o'
   597  00FF1B  6C                 	db	108	;'l'
   598  00FF1C  74                 	db	116	;'t'
   599  00FF1D  5F                 	db	95	;'_'
   600  00FF1E  72                 	db	114	;'r'
   601  00FF1F  65                 	db	101	;'e'
   602  00FF20  6D                 	db	109	;'m'
   603  00FF21  61                 	db	97	;'a'
   604  00FF22  69                 	db	105	;'i'
   605  00FF23  6E                 	db	110	;'n'
   606  00FF24  3A                 	db	58	;':'
   607  00FF25  25                 	db	37
   608  00FF26  64                 	db	100	;'d'
   609  00FF27  00                 	db	0
   610  00FF28                     STR_12:
   611  00FF28  25                 	db	37
   612  00FF29  30                 	db	48	;'0'
   613  00FF2A  32                 	db	50	;'2'
   614  00FF2B  78                 	db	120	;'x'
   615  00FF2C  2F                 	db	47
   616  00FF2D  25                 	db	37
   617  00FF2E  30                 	db	48	;'0'
   618  00FF2F  32                 	db	50	;'2'
   619  00FF30  78                 	db	120	;'x'
   620  00FF31  2F                 	db	47
   621  00FF32  25                 	db	37
   622  00FF33  30                 	db	48	;'0'
   623  00FF34  32                 	db	50	;'2'
   624  00FF35  78                 	db	120	;'x'
   625  00FF36  00                 	db	0
   626  00FF37                     STR_13:
   627  00FF37  25                 	db	37
   628  00FF38  30                 	db	48	;'0'
   629  00FF39  32                 	db	50	;'2'
   630  00FF3A  78                 	db	120	;'x'
   631  00FF3B  3A                 	db	58	;':'
   632  00FF3C  25                 	db	37
   633  00FF3D  30                 	db	48	;'0'
   634  00FF3E  32                 	db	50	;'2'
   635  00FF3F  78                 	db	120	;'x'
   636  00FF40  3A                 	db	58	;':'
   637  00FF41  25                 	db	37
   638  00FF42  30                 	db	48	;'0'
   639  00FF43  32                 	db	50	;'2'
   640  00FF44  78                 	db	120	;'x'
   641  00FF45  00                 	db	0
   642  00FF46                     STR_5:
   643  00FF46  4E                 	db	78	;'N'
   644  00FF47  75                 	db	117	;'u'
   645  00FF48  74                 	db	116	;'t'
   646  00FF49  5F                 	db	95	;'_'
   647  00FF4A  72                 	db	114	;'r'
   648  00FF4B  65                 	db	101	;'e'
   649  00FF4C  6D                 	db	109	;'m'
   650  00FF4D  61                 	db	97	;'a'
   651  00FF4E  69                 	db	105	;'i'
   652  00FF4F  6E                 	db	110	;'n'
   653  00FF50  3A                 	db	58	;':'
   654  00FF51  25                 	db	37
   655  00FF52  64                 	db	100	;'d'
   656  00FF53  00                 	db	0
   657  00FF54                     STR_1:
   658  00FF54  53                 	db	83	;'S'
   659  00FF55  5F                 	db	95	;'_'
   660  00FF56  63                 	db	99	;'c'
   661  00FF57  6F                 	db	111	;'o'
   662  00FF58  75                 	db	117	;'u'
   663  00FF59  6E                 	db	110	;'n'
   664  00FF5A  74                 	db	116	;'t'
   665  00FF5B  65                 	db	101	;'e'
   666  00FF5C  72                 	db	114	;'r'
   667  00FF5D  3A                 	db	58	;':'
   668  00FF5E  25                 	db	37
   669  00FF5F  64                 	db	100	;'d'
   670  00FF60  00                 	db	0
   671  00FF61                     STR_17:
   672  00FF61  25                 	db	37
   673  00FF62  64                 	db	100	;'d'
   674  00FF63  6D                 	db	109	;'m'
   675  00FF64  69                 	db	105	;'i'
   676  00FF65  6E                 	db	110	;'n'
   677  00FF66  20                 	db	32
   678  00FF67  25                 	db	37
   679  00FF68  64                 	db	100	;'d'
   680  00FF69  73                 	db	115	;'s'
   681  00FF6A  65                 	db	101	;'e'
   682  00FF6B  63                 	db	99	;'c'
   683  00FF6C  73                 	db	115	;'s'
   684  00FF6D  00                 	db	0
   685  00FF6E                     STR_8:
   686  00FF6E  79                 	db	121	;'y'
   687  00FF6F  6F                 	db	111	;'o'
   688  00FF70  75                 	db	117	;'u'
   689  00FF71  27                 	db	39
   690  00FF72  72                 	db	114	;'r'
   691  00FF73  65                 	db	101	;'e'
   692  00FF74  20                 	db	32
   693  00FF75  64                 	db	100	;'d'
   694  00FF76  6F                 	db	111	;'o'
   695  00FF77  6E                 	db	110	;'n'
   696  00FF78  65                 	db	101	;'e'
   697  00FF79  00                 	db	0
   698  00FF7A                     STR_31:
   699  00FF7A  57                 	db	87	;'W'
   700  00FF7B  72                 	db	114	;'r'
   701  00FF7C  6F                 	db	111	;'o'
   702  00FF7D  6E                 	db	110	;'n'
   703  00FF7E  67                 	db	103	;'g'
   704  00FF7F  20                 	db	32
   705  00FF80  69                 	db	105	;'i'
   706  00FF81  6E                 	db	110	;'n'
   707  00FF82  70                 	db	112	;'p'
   708  00FF83  75                 	db	117	;'u'
   709  00FF84  74                 	db	116	;'t'
   710  00FF85  00                 	db	0
   711  00FF86                     STR_26:
   712  00FF86  77                 	db	119	;'w'
   713  00FF87  72                 	db	114	;'r'
   714  00FF88  6F                 	db	111	;'o'
   715  00FF89  6E                 	db	110	;'n'
   716  00FF8A  67                 	db	103	;'g'
   717  00FF8B  20                 	db	32
   718  00FF8C  73                 	db	115	;'s'
   719  00FF8D  65                 	db	101	;'e'
   720  00FF8E  74                 	db	116	;'t'
   721  00FF8F  21                 	db	33
   722  00FF90  00                 	db	0
   723  00FF91                     STR_2:
   724  00FF91  53                 	db	83	;'S'
   725  00FF92  5F                 	db	95	;'_'
   726  00FF93  63                 	db	99	;'c'
   727  00FF94  6F                 	db	111	;'o'
   728  00FF95  75                 	db	117	;'u'
   729  00FF96  6E                 	db	110	;'n'
   730  00FF97  74                 	db	116	;'t'
   731  00FF98  3A                 	db	58	;':'
   732  00FF99  25                 	db	37
   733  00FF9A  64                 	db	100	;'d'
   734  00FF9B  00                 	db	0
   735  00FF9C                     STR_11:
   736  00FF9C  33                 	db	51	;'3'
   737  00FF9D  3A                 	db	58	;':'
   738  00FF9E  73                 	db	115	;'s'
   739  00FF9F  75                 	db	117	;'u'
   740  00FFA0  6D                 	db	109	;'m'
   741  00FFA1  6D                 	db	109	;'m'
   742  00FFA2  61                 	db	97	;'a'
   743  00FFA3  72                 	db	114	;'r'
   744  00FFA4  79                 	db	121	;'y'
   745  00FFA5  00                 	db	0
   746  00FFA6                     STR_23:
   747  00FFA6  63                 	db	99	;'c'
   748  00FFA7  6F                 	db	111	;'o'
   749  00FFA8  72                 	db	114	;'r'
   750  00FFA9  72                 	db	114	;'r'
   751  00FFAA  65                 	db	101	;'e'
   752  00FFAB  63                 	db	99	;'c'
   753  00FFAC  74                 	db	116	;'t'
   754  00FFAD  21                 	db	33
   755  00FFAE  00                 	db	0
   756  00FFAF                     STR_32:
   757  00FFAF  54                 	db	84	;'T'
   758  00FFB0  4F                 	db	79	;'O'
   759  00FFB1  4F                 	db	79	;'O'
   760  00FFB2  20                 	db	32
   761  00FFB3  4D                 	db	77	;'M'
   762  00FFB4  41                 	db	65	;'A'
   763  00FFB5  4E                 	db	78	;'N'
   764  00FFB6  59                 	db	89	;'Y'
   765  00FFB7  00                 	db	0
   766  00FFB8                     STR_54:
   767  00FFB8  28                 	db	40
   768  00FFB9  6E                 	db	110	;'n'
   769  00FFBA  75                 	db	117	;'u'
   770  00FFBB  6C                 	db	108	;'l'
   771  00FFBC  6C                 	db	108	;'l'
   772  00FFBD  29                 	db	41
   773  00FFBE  00                 	db	0
   774  00FFBF                     STR_29:
   775  00FFBF  77                 	db	119	;'w'
   776  00FFC0  72                 	db	114	;'r'
   777  00FFC1  6F                 	db	111	;'o'
   778  00FFC2  6E                 	db	110	;'n'
   779  00FFC3  67                 	db	103	;'g'
   780  00FFC4  21                 	db	33
   781  00FFC5  00                 	db	0
   782  00FFC6                     STR_52:
   783  00FFC6  42                 	db	66	;'B'
   784  00FFC7  4E                 	db	78	;'N'
   785  00FFC8  4E                 	db	78	;'N'
   786  00FFC9  4E                 	db	78	;'N'
   787  00FFCA  00                 	db	0
   788  00FFCB                     STR_50:
   789  00FFCB  42                 	db	66	;'B'
   790  00FFCC  42                 	db	66	;'B'
   791  00FFCD  4E                 	db	78	;'N'
   792  00FFCE  57                 	db	87	;'W'
   793  00FFCF  00                 	db	0
   794  00FFD0                     STR_51:
   795  00FFD0  42                 	db	66	;'B'
   796  00FFD1  4E                 	db	78	;'N'
   797  00FFD2  4E                 	db	78	;'N'
   798  00FFD3  57                 	db	87	;'W'
   799  00FFD4  00                 	db	0
   800  00FFD5                     STR_49:
   801  00FFD5  42                 	db	66	;'B'
   802  00FFD6  42                 	db	66	;'B'
   803  00FFD7  53                 	db	83	;'S'
   804  00FFD8  57                 	db	87	;'W'
   805  00FFD9  00                 	db	0
   806  00FFDA                     STR_47:
   807  00FFDA  42                 	db	66	;'B'
   808  00FFDB  4E                 	db	78	;'N'
   809  00FFDC  57                 	db	87	;'W'
   810  00FFDD  57                 	db	87	;'W'
   811  00FFDE  00                 	db	0
   812  00FFDF                     STR_48:
   813  00FFDF  42                 	db	66	;'B'
   814  00FFE0  53                 	db	83	;'S'
   815  00FFE1  57                 	db	87	;'W'
   816  00FFE2  57                 	db	87	;'W'
   817  00FFE3  00                 	db	0
   818  00FFE4                     STR_53:
   819  00FFE4  42                 	db	66	;'B'
   820  00FFE5  57                 	db	87	;'W'
   821  00FFE6  57                 	db	87	;'W'
   822  00FFE7  57                 	db	87	;'W'
   823  00FFE8  00                 	db	0
   824  00FFE9                     STR_41:
   825  00FFE9  42                 	db	66	;'B'
   826  00FFEA  42                 	db	66	;'B'
   827  00FFEB  4E                 	db	78	;'N'
   828  00FFEC  00                 	db	0
   829  00FFED                     STR_42:
   830  00FFED  42                 	db	66	;'B'
   831  00FFEE  42                 	db	66	;'B'
   832  00FFEF  53                 	db	83	;'S'
   833  00FFF0  00                 	db	0
   834  00FFF1                     STR_43:
   835  00FFF1  42                 	db	66	;'B'
   836  00FFF2  42                 	db	66	;'B'
   837  00FFF3  57                 	db	87	;'W'
   838  00FFF4  00                 	db	0
   839  00FFF5                     STR_46:
   840  00FFF5  42                 	db	66	;'B'
   841  00FFF6  57                 	db	87	;'W'
   842  00FFF7  57                 	db	87	;'W'
   843  00FFF8  00                 	db	0
   844  00FFF9                     STR_24:
   845  00FFF9  25                 	db	37
   846  00FFFA  73                 	db	115	;'s'
   847  00FFFB  00                 	db	0
   848  00FFFC                     STR_19:
   849  00FFFC  42                 	db	66	;'B'
   850  00FFFD  00                 	db	0
   851  0000                     
   852                           ; #config settings
   853  00FFFE  00                 	db	0	; dummy byte at the end
   854  0000                     
   855                           	psect	cinit
   856  002BC0                     __pcinit:
   857                           	opt stack 0
   858  002BC0                     start_initialization:
   859                           	opt stack 0
   860  002BC0                     __initialization:
   861                           	opt stack 0
   862                           
   863                           ; Initialize objects allocated to BANK1 (56 bytes)
   864                           ; load TBLPTR registers with __pidataBANK1
   865  002BC0  0E26               	movlw	low __pidataBANK1
   866  002BC2  6EF6               	movwf	tblptrl,c
   867  002BC4  0E34               	movlw	high __pidataBANK1
   868  002BC6  6EF7               	movwf	tblptrh,c
   869  002BC8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   870  002BCA  6EF8               	movwf	tblptru,c
   871  002BCC  EE01  F098         	lfsr	0,__pdataBANK1
   872  002BD0  EE10 F038          	lfsr	1,56
   873  002BD4                     copy_data0:
   874  002BD4  0009               	tblrd		*+
   875  002BD6  CFF5 FFEE          	movff	tablat,postinc0
   876  002BDA  50E5               	movf	postdec1,w,c
   877  002BDC  50E1               	movf	fsr1l,w,c
   878  002BDE  E1FA               	bnz	copy_data0
   879                           
   880                           ; Initialize objects allocated to BANK0 (23 bytes)
   881                           ; load TBLPTR registers with __pidataBANK0
   882  002BE0  0E92               	movlw	low __pidataBANK0
   883  002BE2  6EF6               	movwf	tblptrl,c
   884  002BE4  0E35               	movlw	high __pidataBANK0
   885  002BE6  6EF7               	movwf	tblptrh,c
   886  002BE8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   887  002BEA  6EF8               	movwf	tblptru,c
   888  002BEC  EE00  F0E8         	lfsr	0,__pdataBANK0
   889  002BF0  EE10 F017          	lfsr	1,23
   890  002BF4                     copy_data1:
   891  002BF4  0009               	tblrd		*+
   892  002BF6  CFF5 FFEE          	movff	tablat,postinc0
   893  002BFA  50E5               	movf	postdec1,w,c
   894  002BFC  50E1               	movf	fsr1l,w,c
   895  002BFE  E1FA               	bnz	copy_data1
   896                           
   897                           ; Initialize objects allocated to COMRAM (12 bytes)
   898                           ; load TBLPTR registers with __pidataCOMRAM
   899  002C00  0EF8               	movlw	low __pidataCOMRAM
   900  002C02  6EF6               	movwf	tblptrl,c
   901  002C04  0E35               	movlw	high __pidataCOMRAM
   902  002C06  6EF7               	movwf	tblptrh,c
   903  002C08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   904  002C0A  6EF8               	movwf	tblptru,c
   905  002C0C  EE00  F072         	lfsr	0,__pdataCOMRAM
   906  002C10  EE10 F00C          	lfsr	1,12
   907  002C14                     copy_data2:
   908  002C14  0009               	tblrd		*+
   909  002C16  CFF5 FFEE          	movff	tablat,postinc0
   910  002C1A  50E5               	movf	postdec1,w,c
   911  002C1C  50E1               	movf	fsr1l,w,c
   912  002C1E  E1FA               	bnz	copy_data2
   913                           
   914                           ; Clear objects allocated to BANK2 (200 bytes)
   915  002C20  EE02  F000         	lfsr	0,__pbssBANK2
   916  002C24  0EC8               	movlw	200
   917  002C26                     clear_0:
   918  002C26  6AEE               	clrf	postinc0,c
   919  002C28  06E8               	decf	wreg,f,c
   920  002C2A  E1FD               	bnz	clear_0
   921                           
   922                           ; Clear objects allocated to BANK1 (152 bytes)
   923  002C2C  EE01  F000         	lfsr	0,__pbssBANK1
   924  002C30  0E98               	movlw	152
   925  002C32                     clear_1:
   926  002C32  6AEE               	clrf	postinc0,c
   927  002C34  06E8               	decf	wreg,f,c
   928  002C36  E1FD               	bnz	clear_1
   929                           
   930                           ; Clear objects allocated to BANK0 (66 bytes)
   931  002C38  EE00  F080         	lfsr	0,__pbssBANK0
   932  002C3C  0E42               	movlw	66
   933  002C3E                     clear_2:
   934  002C3E  6AEE               	clrf	postinc0,c
   935  002C40  06E8               	decf	wreg,f,c
   936  002C42  E1FD               	bnz	clear_2
   937                           
   938                           ; Clear objects allocated to COMRAM (48 bytes)
   939  002C44  EE00  F042         	lfsr	0,__pbssCOMRAM
   940  002C48  0E30               	movlw	48
   941  002C4A                     clear_3:
   942  002C4A  6AEE               	clrf	postinc0,c
   943  002C4C  06E8               	decf	wreg,f,c
   944  002C4E  E1FD               	bnz	clear_3
   945  002C50                     end_of_initialization:
   946                           	opt stack 0
   947  002C50                     __end_of__initialization:
   948                           	opt stack 0
   949  002C50  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   950  002C52  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   951  002C54  0100               	movlb	0
   952  002C56  EF66  F011         	goto	_main	;jump to C main() function
   953                           tblptru	equ	0xFF8
   954                           tblptrh	equ	0xFF7
   955                           tblptrl	equ	0xFF6
   956                           tablat	equ	0xFF5
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           postdec1	equ	0xFE5
   960                           fsr1l	equ	0xFE1
   961                           
   962                           	psect	bssCOMRAM
   963  000042                     __pbssCOMRAM:
   964                           	opt stack 0
   965  000042                     _compartment_number:
   966                           	opt stack 0
   967  000042                     	ds	16
   968  000052                     _time:
   969                           	opt stack 0
   970  000052                     	ds	7
   971  000059                     _W:
   972                           	opt stack 0
   973  000059                     	ds	2
   974  00005B                     _S:
   975                           	opt stack 0
   976  00005B                     	ds	2
   977  00005D                     _N:
   978                           	opt stack 0
   979  00005D                     	ds	2
   980  00005F                     _B:
   981                           	opt stack 0
   982  00005F                     	ds	2
   983  000061                     _counter_step:
   984                           	opt stack 0
   985  000061                     	ds	2
   986  000063                     _state:
   987                           	opt stack 0
   988  000063                     	ds	2
   989  000065                     _i:
   990                           	opt stack 0
   991  000065                     	ds	2
   992  000067                     _j:
   993                           	opt stack 0
   994  000067                     	ds	1
   995  000068                     _openHandle_data:
   996                           	opt stack 0
   997  000068                     	ds	1
   998  000069                     _temp:
   999                           	opt stack 0
  1000  000069                     	ds	1
  1001  00006A                     	ds	1
  1002  00006B                     _current_set2:
  1003                           	opt stack 0
  1004  00006B                     	ds	5
  1005  000070                     _number:
  1006                           	opt stack 0
  1007  000070                     	ds	2
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           postdec1	equ	0xFE5
  1015                           fsr1l	equ	0xFE1
  1016                           
  1017                           	psect	dataCOMRAM
  1018  000072                     __pdataCOMRAM:
  1019                           	opt stack 0
  1020  000072                     _close_handle:
  1021                           	opt stack 0
  1022  000072                     	ds	1
  1023  000073                     _servo_ramp:
  1024                           	opt stack 0
  1025  000073                     	ds	1
  1026  000074                     _motorStop_3:
  1027                           	opt stack 0
  1028  000074                     	ds	1
  1029  000075                     _motorStart_3:
  1030                           	opt stack 0
  1031  000075                     	ds	1
  1032  000076                     _motorStop_1:
  1033                           	opt stack 0
  1034  000076                     	ds	1
  1035  000077                     _motorStart_1:
  1036                           	opt stack 0
  1037  000077                     	ds	1
  1038  000078                     _motorStop_0:
  1039                           	opt stack 0
  1040  000078                     	ds	1
  1041  000079                     _motorStart_0:
  1042                           	opt stack 0
  1043  000079                     	ds	1
  1044  00007A                     _N_dispense:
  1045                           	opt stack 0
  1046  00007A                     	ds	1
  1047  00007B                     _B_dispense:
  1048                           	opt stack 0
  1049  00007B                     	ds	1
  1050  00007C                     _rotate_1compartment:
  1051                           	opt stack 0
  1052  00007C                     	ds	1
  1053  00007D                     _rotate_gear:
  1054                           	opt stack 0
  1055  00007D                     	ds	1
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           postinc0	equ	0xFEE
  1061                           wreg	equ	0xFE8
  1062                           postdec1	equ	0xFE5
  1063                           fsr1l	equ	0xFE1
  1064                           
  1065                           	psect	bssBANK0
  1066  000080                     __pbssBANK0:
  1067                           	opt stack 0
  1068  000080                     _final_time:
  1069                           	opt stack 0
  1070  000080                     	ds	2
  1071  000082                     _sec_final:
  1072                           	opt stack 0
  1073  000082                     	ds	2
  1074  000084                     _min_final:
  1075                           	opt stack 0
  1076  000084                     	ds	2
  1077  000086                     _hr_final:
  1078                           	opt stack 0
  1079  000086                     	ds	2
  1080  000088                     _initial_time:
  1081                           	opt stack 0
  1082  000088                     	ds	2
  1083  00008A                     _sec_initial:
  1084                           	opt stack 0
  1085  00008A                     	ds	2
  1086  00008C                     _min_initial:
  1087                           	opt stack 0
  1088  00008C                     	ds	2
  1089  00008E                     _hr_initial:
  1090                           	opt stack 0
  1091  00008E                     	ds	2
  1092  000090                     _W_remain:
  1093                           	opt stack 0
  1094  000090                     	ds	2
  1095  000092                     _S_remain:
  1096                           	opt stack 0
  1097  000092                     	ds	2
  1098  000094                     _N_remain:
  1099                           	opt stack 0
  1100  000094                     	ds	2
  1101  000096                     _B_remain:
  1102                           	opt stack 0
  1103  000096                     	ds	2
  1104  000098                     _S_counter:
  1105                           	opt stack 0
  1106  000098                     	ds	2
  1107  00009A                     _prev_state:
  1108                           	opt stack 0
  1109  00009A                     	ds	2
  1110  00009C                     _total_number:
  1111                           	opt stack 0
  1112  00009C                     	ds	2
  1113  00009E                     _valid:
  1114                           	opt stack 0
  1115  00009E                     	ds	2
  1116  0000A0                     _counter:
  1117                           	opt stack 0
  1118  0000A0                     	ds	2
  1119  0000A2                     _assembly_step:
  1120                           	opt stack 0
  1121  0000A2                     	ds	2
  1122  0000A4                     _operationTime:
  1123                           	opt stack 0
  1124  0000A4                     	ds	2
  1125  0000A6                     _compartment_pos:
  1126                           	opt stack 0
  1127  0000A6                     	ds	2
  1128  0000A8                     _prev:
  1129                           	opt stack 0
  1130  0000A8                     	ds	2
  1131  0000AA                     _gear_counter:
  1132                           	opt stack 0
  1133  0000AA                     	ds	2
  1134  0000AC                     _operation_done:
  1135                           	opt stack 0
  1136  0000AC                     	ds	2
  1137  0000AE                     _operation:
  1138                           	opt stack 0
  1139  0000AE                     	ds	2
  1140  0000B0                     _change_mode:
  1141                           	opt stack 0
  1142  0000B0                     	ds	2
  1143  0000B2                     _white_tape:
  1144                           	opt stack 0
  1145  0000B2                     	ds	2
  1146  0000B4                     _angle:
  1147                           	opt stack 0
  1148  0000B4                     	ds	2
  1149  0000B6                     _nuts_data:
  1150                           	opt stack 0
  1151  0000B6                     	ds	1
  1152  0000B7                     _LCDinterruptState:
  1153                           	opt stack 0
  1154  0000B7                     	ds	1
  1155  0000B8                     _temp_set:
  1156                           	opt stack 0
  1157  0000B8                     	ds	5
  1158  0000BD                     _current_set:
  1159                           	opt stack 0
  1160  0000BD                     	ds	5
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postdec1	equ	0xFE5
  1168                           fsr1l	equ	0xFE1
  1169                           
  1170                           	psect	dataBANK0
  1171  0000E8                     __pdataBANK0:
  1172                           	opt stack 0
  1173  0000E8                     _compartment_array:
  1174                           	opt stack 0
  1175  0000E8                     	ds	16
  1176  0000F8                     _init_position:
  1177                           	opt stack 0
  1178  0000F8                     	ds	2
  1179  0000FA                     _mode:
  1180                           	opt stack 0
  1181  0000FA                     	ds	2
  1182  0000FC                     _motorStop_2:
  1183                           	opt stack 0
  1184  0000FC                     	ds	1
  1185  0000FD                     _motorStart_2:
  1186                           	opt stack 0
  1187  0000FD                     	ds	1
  1188  0000FE                     _S_dispense:
  1189                           	opt stack 0
  1190  0000FE                     	ds	1
  1191                           tblptru	equ	0xFF8
  1192                           tblptrh	equ	0xFF7
  1193                           tblptrl	equ	0xFF6
  1194                           tablat	equ	0xFF5
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           postdec1	equ	0xFE5
  1198                           fsr1l	equ	0xFE1
  1199                           
  1200                           	psect	bssBANK1
  1201  000100                     __pbssBANK1:
  1202                           	opt stack 0
  1203  000100                     _W_array:
  1204                           	opt stack 0
  1205  000100                     	ds	16
  1206  000110                     _prev_number:
  1207                           	opt stack 0
  1208  000110                     	ds	16
  1209  000120                     _final_number:
  1210                           	opt stack 0
  1211  000120                     	ds	16
  1212  000130                     _W_done:
  1213                           	opt stack 0
  1214  000130                     	ds	2
  1215  000132                     _S_done:
  1216                           	opt stack 0
  1217  000132                     	ds	2
  1218  000134                     _N_done:
  1219                           	opt stack 0
  1220  000134                     	ds	2
  1221  000136                     _B_done:
  1222                           	opt stack 0
  1223  000136                     	ds	2
  1224  000138                     _W_spacingTime:
  1225                           	opt stack 0
  1226  000138                     	ds	2
  1227  00013A                     _S_spacingTime:
  1228                           	opt stack 0
  1229  00013A                     	ds	2
  1230  00013C                     _N_spacingTime:
  1231                           	opt stack 0
  1232  00013C                     	ds	2
  1233  00013E                     _B_spacingTime:
  1234                           	opt stack 0
  1235  00013E                     	ds	2
  1236  000140                     _W_counter:
  1237                           	opt stack 0
  1238  000140                     	ds	2
  1239  000142                     _N_counter:
  1240                           	opt stack 0
  1241  000142                     	ds	2
  1242  000144                     _B_counter:
  1243                           	opt stack 0
  1244  000144                     	ds	2
  1245  000146                     _error:
  1246                           	opt stack 0
  1247  000146                     	ds	2
  1248  000148                     _prev_set:
  1249                           	opt stack 0
  1250  000148                     	ds	40
  1251  000170                     _final_set:
  1252                           	opt stack 0
  1253  000170                     	ds	40
  1254                           tblptru	equ	0xFF8
  1255                           tblptrh	equ	0xFF7
  1256                           tblptrl	equ	0xFF6
  1257                           tablat	equ	0xFF5
  1258                           postinc0	equ	0xFEE
  1259                           wreg	equ	0xFE8
  1260                           postdec1	equ	0xFE5
  1261                           fsr1l	equ	0xFE1
  1262                           
  1263                           	psect	dataBANK1
  1264  000198                     __pdataBANK1:
  1265                           	opt stack 0
  1266  000198                     _N_array:
  1267                           	opt stack 0
  1268  000198                     	ds	16
  1269  0001A8                     _S_array:
  1270                           	opt stack 0
  1271  0001A8                     	ds	16
  1272  0001B8                     _B_array:
  1273                           	opt stack 0
  1274  0001B8                     	ds	16
  1275  0001C8                     _W_max:
  1276                           	opt stack 0
  1277  0001C8                     	ds	2
  1278  0001CA                     _S_max:
  1279                           	opt stack 0
  1280  0001CA                     	ds	2
  1281  0001CC                     _N_max:
  1282                           	opt stack 0
  1283  0001CC                     	ds	2
  1284  0001CE                     _B_max:
  1285                           	opt stack 0
  1286  0001CE                     	ds	2
  1287                           tblptru	equ	0xFF8
  1288                           tblptrh	equ	0xFF7
  1289                           tblptrl	equ	0xFF6
  1290                           tablat	equ	0xFF5
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1l	equ	0xFE1
  1295                           
  1296                           	psect	bssBANK2
  1297  000200                     __pbssBANK2:
  1298                           	opt stack 0
  1299  000200                     _fastener:
  1300                           	opt stack 0
  1301  000200                     	ds	200
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postdec1	equ	0xFE5
  1309                           fsr1l	equ	0xFE1
  1310                           
  1311                           	psect	cstackBANK0
  1312  0000C2                     __pcstackBANK0:
  1313                           	opt stack 0
  1314  0000C2                     ??_isdigit:
  1315  0000C2                     ??_I2C_Master_Wait:
  1316  0000C2                     ?___awdiv:
  1317                           	opt stack 0
  1318  0000C2                     ?___lwdiv:
  1319                           	opt stack 0
  1320  0000C2                     ?___lldiv:
  1321                           	opt stack 0
  1322  0000C2                     lcdNibble@temp:
  1323                           	opt stack 0
  1324  0000C2                     ___awdiv@dividend:
  1325                           	opt stack 0
  1326  0000C2                     ___lwdiv@dividend:
  1327                           	opt stack 0
  1328  0000C2                     ___lldiv@dividend:
  1329                           	opt stack 0
  1330                           
  1331                           ; 4 bytes @ 0x0
  1332  0000C2                     	ds	1
  1333  0000C3                     lcdNibble@data:
  1334                           	opt stack 0
  1335  0000C3                     I2C_Master_Read@ackBit:
  1336                           	opt stack 0
  1337  0000C3                     _isdigit$1238:
  1338                           	opt stack 0
  1339  0000C3                     I2C_Master_Write@byteToWrite:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x1
  1343  0000C3                     	ds	1
  1344  0000C4                     lcdInst@data:
  1345                           	opt stack 0
  1346  0000C4                     putch@data:
  1347                           	opt stack 0
  1348  0000C4                     I2C_Master_Read@receivedByte:
  1349                           	opt stack 0
  1350  0000C4                     isdigit@c:
  1351                           	opt stack 0
  1352  0000C4                     ___awdiv@divisor:
  1353                           	opt stack 0
  1354  0000C4                     ___lwdiv@divisor:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x2
  1358  0000C4                     	ds	1
  1359  0000C5                     ??_initLCD:
  1360  0000C5                     I2C_sendData@char_data:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x3
  1364  0000C5                     	ds	1
  1365  0000C6                     ___awdiv@counter:
  1366                           	opt stack 0
  1367  0000C6                     ___lwdiv@quotient:
  1368                           	opt stack 0
  1369  0000C6                     ___lldiv@divisor:
  1370                           	opt stack 0
  1371                           
  1372                           ; 4 bytes @ 0x4
  1373  0000C6                     	ds	1
  1374  0000C7                     ___awdiv@sign:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x5
  1378  0000C7                     	ds	1
  1379  0000C8                     ___lwdiv@counter:
  1380                           	opt stack 0
  1381  0000C8                     ___awdiv@quotient:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x6
  1385  0000C8                     	ds	1
  1386  0000C9                     ?___lwmod:
  1387                           	opt stack 0
  1388  0000C9                     ___lwmod@dividend:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x7
  1392  0000C9                     	ds	1
  1393  0000CA                     ?___wmul:
  1394                           	opt stack 0
  1395  0000CA                     ___wmul@multiplier:
  1396                           	opt stack 0
  1397  0000CA                     ___lldiv@quotient:
  1398                           	opt stack 0
  1399                           
  1400                           ; 4 bytes @ 0x8
  1401  0000CA                     	ds	1
  1402  0000CB                     ___lwmod@divisor:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x9
  1406  0000CB                     	ds	1
  1407  0000CC                     ___wmul@multiplicand:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0xA
  1411  0000CC                     	ds	1
  1412  0000CD                     ___lwmod@counter:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0xB
  1416  0000CD                     	ds	1
  1417  0000CE                     ___lldiv@counter:
  1418                           	opt stack 0
  1419  0000CE                     ___wmul@product:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0xC
  1423  0000CE                     	ds	1
  1424  0000CF                     I2C_Master_Init@clockFreq:
  1425                           	opt stack 0
  1426                           
  1427                           ; 4 bytes @ 0xD
  1428  0000CF                     	ds	1
  1429  0000D0                     ??_get_RTC_final:
  1430  0000D0                     ?_printf:
  1431                           	opt stack 0
  1432  0000D0                     printf@f:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0xE
  1436  0000D0                     	ds	3
  1437  0000D3                     ??_I2C_Master_Init:
  1438                           
  1439                           ; 1 bytes @ 0x11
  1440  0000D3                     	ds	1
  1441  0000D4                     ??_printf:
  1442                           
  1443                           ; 1 bytes @ 0x12
  1444  0000D4                     	ds	4
  1445  0000D8                     printf@idx:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x16
  1449  0000D8                     	ds	1
  1450  0000D9                     printf@prec:
  1451                           	opt stack 0
  1452                           
  1453                           ; 1 bytes @ 0x17
  1454  0000D9                     	ds	1
  1455  0000DA                     printf@cp:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x18
  1459  0000DA                     	ds	2
  1460  0000DC                     printf@ap:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x1A
  1464  0000DC                     	ds	2
  1465  0000DE                     printf@len:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x1C
  1469  0000DE                     	ds	2
  1470  0000E0                     printf@val:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x1E
  1474  0000E0                     	ds	2
  1475  0000E2                     printf@flag:
  1476                           	opt stack 0
  1477                           
  1478                           ; 1 bytes @ 0x20
  1479  0000E2                     	ds	1
  1480  0000E3                     printf@width:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x21
  1484  0000E3                     	ds	2
  1485  0000E5                     printf@c:
  1486                           	opt stack 0
  1487                           
  1488                           ; 1 bytes @ 0x23
  1489  0000E5                     	ds	1
  1490  0000E6                     ??_main:
  1491                           
  1492                           ; 1 bytes @ 0x24
  1493  0000E6                     	ds	2
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           postdec1	equ	0xFE5
  1501                           fsr1l	equ	0xFE1
  1502                           
  1503                           	psect	cstackCOMRAM
  1504  000001                     __pcstackCOMRAM:
  1505                           	opt stack 0
  1506  000001                     ??i2_I2C_Master_Wait:
  1507  000001                     ??i2_isdigit:
  1508  000001                     ?_check:
  1509                           	opt stack 0
  1510  000001                     ?_strcmp:
  1511                           	opt stack 0
  1512  000001                     ?___awmod:
  1513                           	opt stack 0
  1514  000001                     ?i2___wmul:
  1515                           	opt stack 0
  1516  000001                     ?i2___awdiv:
  1517                           	opt stack 0
  1518  000001                     ?i2___lwdiv:
  1519                           	opt stack 0
  1520  000001                     ?i2___lldiv:
  1521                           	opt stack 0
  1522  000001                     i2lcdNibble@temp:
  1523                           	opt stack 0
  1524  000001                     generate_compartment_array@step:
  1525                           	opt stack 0
  1526  000001                     ___awmod@dividend:
  1527                           	opt stack 0
  1528  000001                     strcat@to:
  1529                           	opt stack 0
  1530  000001                     strcmp@s1:
  1531                           	opt stack 0
  1532  000001                     i2___wmul@multiplier:
  1533                           	opt stack 0
  1534  000001                     i2___awdiv@dividend:
  1535                           	opt stack 0
  1536  000001                     i2___lwdiv@dividend:
  1537                           	opt stack 0
  1538  000001                     i2___lldiv@dividend:
  1539                           	opt stack 0
  1540                           
  1541                           ; 4 bytes @ 0x0
  1542  000001                     	ds	1
  1543  000002                     i2lcdNibble@data:
  1544                           	opt stack 0
  1545  000002                     i2I2C_Master_Read@ackBit:
  1546                           	opt stack 0
  1547  000002                     i2_isdigit$1238:
  1548                           	opt stack 0
  1549  000002                     i2I2C_Master_Write@byteToWrite:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x1
  1553  000002                     	ds	1
  1554  000003                     ??_generate_compartment_array:
  1555  000003                     i2lcdInst@data:
  1556                           	opt stack 0
  1557  000003                     i2putch@data:
  1558                           	opt stack 0
  1559  000003                     i2I2C_Master_Read@receivedByte:
  1560                           	opt stack 0
  1561  000003                     i2isdigit@c:
  1562                           	opt stack 0
  1563  000003                     ___awmod@divisor:
  1564                           	opt stack 0
  1565  000003                     strcat@from:
  1566                           	opt stack 0
  1567  000003                     strcmp@s2:
  1568                           	opt stack 0
  1569  000003                     i2___wmul@multiplicand:
  1570                           	opt stack 0
  1571  000003                     i2___awdiv@divisor:
  1572                           	opt stack 0
  1573  000003                     i2___lwdiv@divisor:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x2
  1577  000003                     	ds	1
  1578  000004                     ??i2_initLCD:
  1579  000004                     
  1580                           ; 1 bytes @ 0x3
  1581  000004                     	ds	1
  1582  000005                     ??_strcmp:
  1583  000005                     ___awmod@counter:
  1584                           	opt stack 0
  1585  000005                     i2___awdiv@counter:
  1586                           	opt stack 0
  1587  000005                     strcat@cp:
  1588                           	opt stack 0
  1589  000005                     i2___wmul@product:
  1590                           	opt stack 0
  1591  000005                     i2___lwdiv@quotient:
  1592                           	opt stack 0
  1593  000005                     i2___lldiv@divisor:
  1594                           	opt stack 0
  1595                           
  1596                           ; 4 bytes @ 0x4
  1597  000005                     	ds	1
  1598  000006                     ___awmod@sign:
  1599                           	opt stack 0
  1600  000006                     strcmp@r:
  1601                           	opt stack 0
  1602  000006                     i2___awdiv@sign:
  1603                           	opt stack 0
  1604                           
  1605                           ; 1 bytes @ 0x5
  1606  000006                     	ds	1
  1607  000007                     ??_is_valid:
  1608  000007                     ?_strncmp:
  1609                           	opt stack 0
  1610  000007                     i2___lwdiv@counter:
  1611                           	opt stack 0
  1612  000007                     strcpy@to:
  1613                           	opt stack 0
  1614  000007                     strncmp@s1:
  1615                           	opt stack 0
  1616  000007                     i2___awdiv@quotient:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x6
  1620  000007                     	ds	1
  1621  000008                     ?i2___lwmod:
  1622                           	opt stack 0
  1623  000008                     i2___lwmod@dividend:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x7
  1627  000008                     	ds	1
  1628  000009                     strcpy@from:
  1629                           	opt stack 0
  1630  000009                     strncmp@s2:
  1631                           	opt stack 0
  1632  000009                     i2___lldiv@quotient:
  1633                           	opt stack 0
  1634                           
  1635                           ; 4 bytes @ 0x8
  1636  000009                     	ds	1
  1637  00000A                     i2___lwmod@divisor:
  1638                           	opt stack 0
  1639                           
  1640                           ; 2 bytes @ 0x9
  1641  00000A                     	ds	1
  1642  00000B                     strcpy@cp:
  1643                           	opt stack 0
  1644  00000B                     strncmp@len:
  1645                           	opt stack 0
  1646                           
  1647                           ; 2 bytes @ 0xA
  1648  00000B                     	ds	1
  1649  00000C                     i2___lwmod@counter:
  1650                           	opt stack 0
  1651                           
  1652                           ; 1 bytes @ 0xB
  1653  00000C                     	ds	1
  1654  00000D                     ??_strncmp:
  1655  00000D                     ?i2_printf:
  1656                           	opt stack 0
  1657  00000D                     i2___lldiv@counter:
  1658                           	opt stack 0
  1659  00000D                     i2printf@f:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0xC
  1663  00000D                     	ds	1
  1664  00000E                     i2I2C_Master_Init@clockFreq:
  1665                           	opt stack 0
  1666                           
  1667                           ; 4 bytes @ 0xD
  1668  00000E                     	ds	4
  1669  000012                     ??i2_I2C_Master_Init:
  1670                           
  1671                           ; 1 bytes @ 0x11
  1672  000012                     	ds	3
  1673  000015                     ??i2_printf:
  1674                           
  1675                           ; 1 bytes @ 0x14
  1676  000015                     	ds	4
  1677  000019                     i2printf@idx:
  1678                           	opt stack 0
  1679                           
  1680                           ; 1 bytes @ 0x18
  1681  000019                     	ds	1
  1682  00001A                     i2printf@prec:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x19
  1686  00001A                     	ds	1
  1687  00001B                     i2printf@cp:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x1A
  1691  00001B                     	ds	2
  1692  00001D                     i2printf@ap:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x1C
  1696  00001D                     	ds	2
  1697  00001F                     i2printf@len:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x1E
  1701  00001F                     	ds	2
  1702  000021                     i2printf@val:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x20
  1706  000021                     	ds	2
  1707  000023                     i2printf@flag:
  1708                           	opt stack 0
  1709                           
  1710                           ; 1 bytes @ 0x22
  1711  000023                     	ds	1
  1712  000024                     i2printf@width:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x23
  1716  000024                     	ds	2
  1717  000026                     i2printf@c:
  1718                           	opt stack 0
  1719                           
  1720                           ; 1 bytes @ 0x25
  1721  000026                     	ds	1
  1722  000027                     ??_interruptHandler:
  1723                           
  1724                           ; 1 bytes @ 0x26
  1725  000027                     	ds	23
  1726  00003E                     interruptHandler@i:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x3D
  1730  00003E                     	ds	2
  1731  000040                     interruptHandler@keypress:
  1732                           	opt stack 0
  1733                           
  1734                           ; 1 bytes @ 0x3F
  1735  000040                     	ds	1
  1736  000041                     interruptHandler@temp:
  1737                           	opt stack 0
  1738                           
  1739                           ; 1 bytes @ 0x40
  1740  000041                     	ds	1
  1741                           tblptru	equ	0xFF8
  1742                           tblptrh	equ	0xFF7
  1743                           tblptrl	equ	0xFF6
  1744                           tablat	equ	0xFF5
  1745                           postinc0	equ	0xFEE
  1746                           wreg	equ	0xFE8
  1747                           postdec1	equ	0xFE5
  1748                           fsr1l	equ	0xFE1
  1749                           
  1750 ;;
  1751 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1752 ;;
  1753 ;; *************** function _main *****************
  1754 ;; Defined at:
  1755 ;;		line 65 in file "main.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;Total ram usage:        2 bytes
  1774 ;; Hardware stack levels required when called:    7
  1775 ;; This function calls:
  1776 ;;		_I2C_Master_Init
  1777 ;;		_I2C_Master_Read
  1778 ;;		_I2C_Master_Start
  1779 ;;		_I2C_Master_Stop
  1780 ;;		_I2C_Master_Write
  1781 ;;		_I2C_sendData
  1782 ;;		_get_RTC_final
  1783 ;;		_initLCD
  1784 ;;		_initialize
  1785 ;;		_lcdInst
  1786 ;;		_printf
  1787 ;; This function is called by:
  1788 ;;		Startup code after reset
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text0
  1793  0022CC                     __ptext0:
  1794                           	opt stack 0
  1795  0022CC                     _main:
  1796                           	opt stack 24
  1797                           
  1798                           ;main.c: 74: LATA = 0x00;
  1799                           
  1800                           ;incstack = 0
  1801  0022CC  0E00               	movlw	0
  1802  0022CE  6E89               	movwf	3977,c	;volatile
  1803                           
  1804                           ;main.c: 75: LATB = 0x00;
  1805  0022D0  0E00               	movlw	0
  1806  0022D2  6E8A               	movwf	3978,c	;volatile
  1807                           
  1808                           ;main.c: 76: LATC = 0x00;
  1809  0022D4  0E00               	movlw	0
  1810  0022D6  6E8B               	movwf	3979,c	;volatile
  1811                           
  1812                           ;main.c: 77: LATD = 0x00;
  1813  0022D8  0E00               	movlw	0
  1814  0022DA  6E8C               	movwf	3980,c	;volatile
  1815                           
  1816                           ;main.c: 78: LATE = 0x00;
  1817  0022DC  0E00               	movlw	0
  1818  0022DE  6E8D               	movwf	3981,c	;volatile
  1819                           
  1820                           ;main.c: 82: TRISA = 0xFF;
  1821  0022E0  6892               	setf	3986,c	;volatile
  1822                           
  1823                           ;main.c: 83: TRISB = 0xFF;
  1824  0022E2  6893               	setf	3987,c	;volatile
  1825                           
  1826                           ;main.c: 84: TRISC = 0x00;
  1827  0022E4  0E00               	movlw	0
  1828  0022E6  6E94               	movwf	3988,c	;volatile
  1829                           
  1830                           ;main.c: 85: TRISD = 0x00;
  1831  0022E8  0E00               	movlw	0
  1832  0022EA  6E95               	movwf	3989,c	;volatile
  1833                           
  1834                           ;main.c: 86: TRISE = 0x00;
  1835  0022EC  0E00               	movlw	0
  1836  0022EE  6E96               	movwf	3990,c	;volatile
  1837                           
  1838                           ;main.c: 89: ADCON0 = 0x00;
  1839  0022F0  0E00               	movlw	0
  1840  0022F2  6EC2               	movwf	4034,c	;volatile
  1841                           
  1842                           ;main.c: 90: ADCON1 = 0b00001111;
  1843  0022F4  0E0F               	movlw	15
  1844  0022F6  6EC1               	movwf	4033,c	;volatile
  1845                           
  1846                           ;main.c: 93: INT1IE = 1;
  1847  0022F8  86F0               	bsf	intcon3,3,c	;volatile
  1848                           
  1849                           ;main.c: 94: (INTCONbits.GIE = 1);
  1850  0022FA  8EF2               	bsf	intcon,7,c	;volatile
  1851                           
  1852                           ;main.c: 97: initLCD();
  1853  0022FC  EC1B  F019         	call	_initLCD	;wreg free
  1854  002300                     
  1855                           ;main.c: 221: if (mode == 2){
  1856  002300  0E02               	movlw	2
  1857  002302  0100               	movlb	0	; () banked
  1858  002304  19FA               	xorwf	_mode& (0+255),w,b
  1859  002306  11FB               	iorwf	(_mode+1)& (0+255),w,b
  1860  002308  A4D8               	btfss	status,2,c
  1861  00230A  D7FA               	goto	l334
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 222: (INTCONbits.GIE = 0);
  1865  00230C  9EF2               	bcf	intcon,7,c	;volatile
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 223: initLCD();
  1869  00230E  EC1B  F019         	call	_initLCD	;wreg free
  1870                           
  1871                           ;main.c: 225: I2C_Master_Init(100000);
  1872  002312  0EA0               	movlw	160
  1873  002314  0100               	movlb	0	; () banked
  1874  002316  6FCF               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  1875  002318  0E86               	movlw	134
  1876  00231A  6FD0               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  1877  00231C  0E01               	movlw	1
  1878  00231E  6FD1               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  1879  002320  0E00               	movlw	0
  1880  002322  6FD2               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  1881  002324  EC6A  F018         	call	_I2C_Master_Init	;wreg free
  1882                           
  1883                           ;main.c: 226: I2C_Master_Start();
  1884  002328  EC10  F01B         	call	_I2C_Master_Start	;wreg free
  1885                           
  1886                           ;main.c: 229: I2C_Master_Write(0b00010000);
  1887  00232C  0E00               	movlw	0
  1888  00232E  0100               	movlb	0	; () banked
  1889  002330  6FC4               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  1890  002332  0E10               	movlw	16
  1891  002334  6FC3               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  1892  002336  EC02  F01B         	call	_I2C_Master_Write	;wreg free
  1893                           
  1894                           ;main.c: 230: I2C_Master_Stop();
  1895  00233A  EC0C  F01B         	call	_I2C_Master_Stop	;wreg free
  1896                           
  1897                           ;main.c: 375: initLCD();
  1898  00233E  EC1B  F019         	call	_initLCD	;wreg free
  1899                           
  1900                           ;main.c: 377: printf("S_counter:%d",S_counter);
  1901  002342  0E54               	movlw	low STR_1
  1902  002344  0100               	movlb	0	; () banked
  1903  002346  6FD0               	movwf	printf@f& (0+255),b
  1904  002348  0EFF               	movlw	high STR_1
  1905  00234A  6FD1               	movwf	(printf@f+1)& (0+255),b
  1906  00234C  C098  F0D2         	movff	_S_counter,?_printf+2
  1907  002350  C099  F0D3         	movff	_S_counter+1,?_printf+3
  1908  002354  EC35  F00D         	call	_printf	;wreg free
  1909                           
  1910                           ;main.c: 378: S_counter = 4;
  1911  002358  0E00               	movlw	0
  1912  00235A  0100               	movlb	0	; () banked
  1913  00235C  6F99               	movwf	(_S_counter+1)& (0+255),b
  1914  00235E  0E04               	movlw	4
  1915  002360  6F98               	movwf	_S_counter& (0+255),b
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 379: if(S_counter != 0){
  1919  002362  5198               	movf	_S_counter& (0+255),w,b
  1920  002364  1199               	iorwf	(_S_counter+1)& (0+255),w,b
  1921  002366  B4D8               	btfsc	status,2,c
  1922  002368  D03A               	goto	l341
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;main.c: 380: I2C_sendData(motorStart_2);
  1926  00236A  51FD               	movf	_motorStart_2& (0+255),w,b
  1927  00236C  EC58  F01A         	call	_I2C_sendData
  1928                           
  1929                           ;main.c: 381: I2C_sendData(S_dispense);
  1930  002370  0100               	movlb	0	; () banked
  1931  002372  51FE               	movf	_S_dispense& (0+255),w,b
  1932  002374  EC58  F01A         	call	_I2C_sendData
  1933                           
  1934                           ;main.c: 382: }
  1935                           ;main.c: 384: while(S_counter > 0){
  1936  002378  D032               	goto	l341
  1937  00237A                     l4620:
  1938                           
  1939                           ;main.c: 387: I2C_Master_Start();
  1940  00237A  EC10  F01B         	call	_I2C_Master_Start	;wreg free
  1941                           
  1942                           ;main.c: 388: I2C_Master_Write(0b00010001);
  1943  00237E  0E00               	movlw	0
  1944  002380  0100               	movlb	0	; () banked
  1945  002382  6FC4               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  1946  002384  0E11               	movlw	17
  1947  002386  6FC3               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  1948  002388  EC02  F01B         	call	_I2C_Master_Write	;wreg free
  1949                           
  1950                           ;main.c: 389: nuts_data = I2C_Master_Read(1);
  1951  00238C  0E01               	movlw	1
  1952  00238E  EC2F  F01A         	call	_I2C_Master_Read
  1953  002392  0100               	movlb	0	; () banked
  1954  002394  6FB6               	movwf	_nuts_data& (0+255),b
  1955                           
  1956                           ;main.c: 390: I2C_Master_Stop();
  1957  002396  EC0C  F01B         	call	_I2C_Master_Stop	;wreg free
  1958                           
  1959                           ;main.c: 391: if (nuts_data == '4'){
  1960  00239A  0E34               	movlw	52
  1961  00239C  0100               	movlb	0	; () banked
  1962  00239E  19B6               	xorwf	_nuts_data& (0+255),w,b
  1963  0023A0  A4D8               	btfss	status,2,c
  1964  0023A2  D01D               	goto	l341
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;main.c: 392: S_counter --;
  1968  0023A4  0798               	decf	_S_counter& (0+255),f,b
  1969  0023A6  A0D8               	btfss	status,0,c
  1970  0023A8  0799               	decf	(_S_counter+1)& (0+255),f,b
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;main.c: 393: initLCD();
  1974  0023AA  EC1B  F019         	call	_initLCD	;wreg free
  1975                           
  1976                           ;main.c: 394: printf("S_count:%d", S_counter);
  1977  0023AE  0E91               	movlw	low STR_2
  1978  0023B0  0100               	movlb	0	; () banked
  1979  0023B2  6FD0               	movwf	printf@f& (0+255),b
  1980  0023B4  0EFF               	movlw	high STR_2
  1981  0023B6  6FD1               	movwf	(printf@f+1)& (0+255),b
  1982  0023B8  C098  F0D2         	movff	_S_counter,?_printf+2
  1983  0023BC  C099  F0D3         	movff	_S_counter+1,?_printf+3
  1984  0023C0  EC35  F00D         	call	_printf	;wreg free
  1985                           
  1986                           ;main.c: 396: if (S_counter ==0){
  1987  0023C4  0100               	movlb	0	; () banked
  1988  0023C6  5198               	movf	_S_counter& (0+255),w,b
  1989  0023C8  1199               	iorwf	(_S_counter+1)& (0+255),w,b
  1990  0023CA  A4D8               	btfss	status,2,c
  1991  0023CC  D004               	goto	l340
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;main.c: 397: I2C_sendData(motorStop_2);
  1995  0023CE  51FC               	movf	_motorStop_2& (0+255),w,b
  1996  0023D0  EC58  F01A         	call	_I2C_sendData
  1997                           
  1998                           ;main.c: 398: }
  1999  0023D4  D004               	goto	l341
  2000  0023D6                     l340:
  2001                           
  2002                           ;main.c: 399: else{
  2003                           ;main.c: 400: I2C_sendData(S_dispense);
  2004  0023D6  0100               	movlb	0	; () banked
  2005  0023D8  51FE               	movf	_S_dispense& (0+255),w,b
  2006  0023DA  EC58  F01A         	call	_I2C_sendData
  2007  0023DE                     l341:
  2008  0023DE  0100               	movlb	0	; () banked
  2009  0023E0  BF99               	btfsc	(_S_counter+1)& (0+255),7,b
  2010  0023E2  D005               	goto	u3850
  2011  0023E4  5199               	movf	(_S_counter+1)& (0+255),w,b
  2012  0023E6  E1C9               	bnz	l4620
  2013  0023E8  0598               	decf	_S_counter& (0+255),w,b
  2014  0023EA  B0D8               	btfsc	status,0,c
  2015  0023EC  D7C6               	goto	l338
  2016  0023EE                     u3850:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;main.c: 401: }
  2020                           ;main.c: 402: }
  2021                           ;main.c: 403: }
  2022                           ;main.c: 407: initLCD();
  2023                           
  2024                           ; BSR set to: 0
  2025  0023EE  EC1B  F019         	call	_initLCD	;wreg free
  2026                           
  2027                           ;main.c: 409: printf("spacers dispensed:%d",S_array[compartment_pos]);
  2028  0023F2  0E8E               	movlw	low STR_3
  2029  0023F4  0100               	movlb	0	; () banked
  2030  0023F6  6FD0               	movwf	printf@f& (0+255),b
  2031  0023F8  0EFE               	movlw	high STR_3
  2032  0023FA  6FD1               	movwf	(printf@f+1)& (0+255),b
  2033  0023FC  90D8               	bcf	status,0,c
  2034  0023FE  35A6               	rlcf	_compartment_pos& (0+255),w,b
  2035  002400  6ED9               	movwf	fsr2l,c
  2036  002402  35A7               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2037  002404  6EDA               	movwf	fsr2h,c
  2038  002406  0EA8               	movlw	low _S_array
  2039  002408  26D9               	addwf	fsr2l,f,c
  2040  00240A  0E01               	movlw	high _S_array
  2041  00240C  22DA               	addwfc	fsr2h,f,c
  2042  00240E  CFDE F0D2          	movff	postinc2,?_printf+2
  2043  002412  CFDD F0D3          	movff	postdec2,?_printf+3
  2044  002416  EC35  F00D         	call	_printf	;wreg free
  2045                           
  2046                           ;main.c: 410: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2047  00241A  0E33               	movlw	51
  2048  00241C  0100               	movlb	0	; () banked
  2049  00241E  6FE7               	movwf	(??_main+1)& (0+255),b
  2050  002420  0EBB               	movlw	187
  2051  002422  6FE6               	movwf	??_main& (0+255),b
  2052  002424  0EDF               	movlw	223
  2053  002426                     u4447:
  2054  002426  2EE8               	decfsz	wreg,f,c
  2055  002428  D7FE               	bra	u4447
  2056  00242A  2FE6               	decfsz	??_main& (0+255),f,b
  2057  00242C  D7FC               	bra	u4447
  2058  00242E  2FE7               	decfsz	(??_main+1)& (0+255),f,b
  2059  002430  D7FA               	bra	u4447
  2060  002432  D000               	nop2	
  2061                           
  2062                           ;main.c: 411: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2063  002434  0E80               	movlw	128
  2064  002436  ECBD  F01A         	call	_lcdInst
  2065  00243A  0E41               	movlw	65
  2066  00243C  0100               	movlb	0	; () banked
  2067  00243E  6FE6               	movwf	??_main& (0+255),b
  2068  002440  0EEE               	movlw	238
  2069  002442                     u4457:
  2070  002442  2EE8               	decfsz	wreg,f,c
  2071  002444  D7FE               	bra	u4457
  2072  002446  2FE6               	decfsz	??_main& (0+255),f,b
  2073  002448  D7FC               	bra	u4457
  2074  00244A  F000               	nop	
  2075                           
  2076                           ;main.c: 412: S_counter = 0;
  2077  00244C  0E00               	movlw	0
  2078  00244E  0100               	movlb	0	; () banked
  2079  002450  6F99               	movwf	(_S_counter+1)& (0+255),b
  2080  002452  0E00               	movlw	0
  2081  002454  6F98               	movwf	_S_counter& (0+255),b
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;main.c: 575: get_RTC_final();
  2085  002456  EC49  F015         	call	_get_RTC_final	;wreg free
  2086                           
  2087                           ;main.c: 577: printf("Bolt_remain:%d",B_remain);
  2088  00245A  0E19               	movlw	low STR_4
  2089  00245C  0100               	movlb	0	; () banked
  2090  00245E  6FD0               	movwf	printf@f& (0+255),b
  2091  002460  0EFF               	movlw	high STR_4
  2092  002462  6FD1               	movwf	(printf@f+1)& (0+255),b
  2093  002464  C096  F0D2         	movff	_B_remain,?_printf+2
  2094  002468  C097  F0D3         	movff	_B_remain+1,?_printf+3
  2095  00246C  EC35  F00D         	call	_printf	;wreg free
  2096                           
  2097                           ;main.c: 578: _delay((unsigned long)((300)*(40000000/4000.0)));
  2098  002470  0E10               	movlw	16
  2099  002472  0100               	movlb	0	; () banked
  2100  002474  6FE7               	movwf	(??_main+1)& (0+255),b
  2101  002476  0E39               	movlw	57
  2102  002478  6FE6               	movwf	??_main& (0+255),b
  2103  00247A  0E0D               	movlw	13
  2104  00247C                     u4467:
  2105  00247C  2EE8               	decfsz	wreg,f,c
  2106  00247E  D7FE               	bra	u4467
  2107  002480  2FE6               	decfsz	??_main& (0+255),f,b
  2108  002482  D7FC               	bra	u4467
  2109  002484  2FE7               	decfsz	(??_main+1)& (0+255),f,b
  2110  002486  D7FA               	bra	u4467
  2111  002488  D000               	nop2	
  2112                           
  2113                           ;main.c: 579: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2114  00248A  0E01               	movlw	1
  2115  00248C  ECBD  F01A         	call	_lcdInst
  2116  002490  0EC3               	movlw	195
  2117  002492  0100               	movlb	0	; () banked
  2118  002494  6FE6               	movwf	??_main& (0+255),b
  2119  002496  0ECD               	movlw	205
  2120  002498                     u4477:
  2121  002498  2EE8               	decfsz	wreg,f,c
  2122  00249A  D7FE               	bra	u4477
  2123  00249C  2FE6               	decfsz	??_main& (0+255),f,b
  2124  00249E  D7FC               	bra	u4477
  2125                           
  2126                           ;main.c: 580: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2127  0024A0  0E80               	movlw	128
  2128  0024A2  ECBD  F01A         	call	_lcdInst
  2129  0024A6  0E41               	movlw	65
  2130  0024A8  0100               	movlb	0	; () banked
  2131  0024AA  6FE6               	movwf	??_main& (0+255),b
  2132  0024AC  0EEE               	movlw	238
  2133  0024AE                     u4487:
  2134  0024AE  2EE8               	decfsz	wreg,f,c
  2135  0024B0  D7FE               	bra	u4487
  2136  0024B2  2FE6               	decfsz	??_main& (0+255),f,b
  2137  0024B4  D7FC               	bra	u4487
  2138  0024B6  F000               	nop	
  2139                           
  2140                           ;main.c: 581: printf("Nut_remain:%d",N_remain);
  2141  0024B8  0E46               	movlw	low STR_5
  2142  0024BA  0100               	movlb	0	; () banked
  2143  0024BC  6FD0               	movwf	printf@f& (0+255),b
  2144  0024BE  0EFF               	movlw	high STR_5
  2145  0024C0  6FD1               	movwf	(printf@f+1)& (0+255),b
  2146  0024C2  C094  F0D2         	movff	_N_remain,?_printf+2
  2147  0024C6  C095  F0D3         	movff	_N_remain+1,?_printf+3
  2148  0024CA  EC35  F00D         	call	_printf	;wreg free
  2149                           
  2150                           ;main.c: 582: _delay((unsigned long)((300)*(40000000/4000.0)));
  2151  0024CE  0E10               	movlw	16
  2152  0024D0  0100               	movlb	0	; () banked
  2153  0024D2  6FE7               	movwf	(??_main+1)& (0+255),b
  2154  0024D4  0E39               	movlw	57
  2155  0024D6  6FE6               	movwf	??_main& (0+255),b
  2156  0024D8  0E0D               	movlw	13
  2157  0024DA                     u4497:
  2158  0024DA  2EE8               	decfsz	wreg,f,c
  2159  0024DC  D7FE               	bra	u4497
  2160  0024DE  2FE6               	decfsz	??_main& (0+255),f,b
  2161  0024E0  D7FC               	bra	u4497
  2162  0024E2  2FE7               	decfsz	(??_main+1)& (0+255),f,b
  2163  0024E4  D7FA               	bra	u4497
  2164  0024E6  D000               	nop2	
  2165                           
  2166                           ;main.c: 583: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2167  0024E8  0E01               	movlw	1
  2168  0024EA  ECBD  F01A         	call	_lcdInst
  2169  0024EE  0EC3               	movlw	195
  2170  0024F0  0100               	movlb	0	; () banked
  2171  0024F2  6FE6               	movwf	??_main& (0+255),b
  2172  0024F4  0ECD               	movlw	205
  2173  0024F6                     u4507:
  2174  0024F6  2EE8               	decfsz	wreg,f,c
  2175  0024F8  D7FE               	bra	u4507
  2176  0024FA  2FE6               	decfsz	??_main& (0+255),f,b
  2177  0024FC  D7FC               	bra	u4507
  2178                           
  2179                           ;main.c: 584: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2180  0024FE  0E80               	movlw	128
  2181  002500  ECBD  F01A         	call	_lcdInst
  2182  002504  0E41               	movlw	65
  2183  002506  0100               	movlb	0	; () banked
  2184  002508  6FE6               	movwf	??_main& (0+255),b
  2185  00250A  0EEE               	movlw	238
  2186  00250C                     u4517:
  2187  00250C  2EE8               	decfsz	wreg,f,c
  2188  00250E  D7FE               	bra	u4517
  2189  002510  2FE6               	decfsz	??_main& (0+255),f,b
  2190  002512  D7FC               	bra	u4517
  2191  002514  F000               	nop	
  2192                           
  2193                           ;main.c: 585: printf("Spacer_remain:%d",S_remain);
  2194  002516  0EC7               	movlw	low STR_6
  2195  002518  0100               	movlb	0	; () banked
  2196  00251A  6FD0               	movwf	printf@f& (0+255),b
  2197  00251C  0EFE               	movlw	high STR_6
  2198  00251E  6FD1               	movwf	(printf@f+1)& (0+255),b
  2199  002520  C092  F0D2         	movff	_S_remain,?_printf+2
  2200  002524  C093  F0D3         	movff	_S_remain+1,?_printf+3
  2201  002528  EC35  F00D         	call	_printf	;wreg free
  2202                           
  2203                           ;main.c: 586: _delay((unsigned long)((300)*(40000000/4000.0)));
  2204  00252C  0E10               	movlw	16
  2205  00252E  0100               	movlb	0	; () banked
  2206  002530  6FE7               	movwf	(??_main+1)& (0+255),b
  2207  002532  0E39               	movlw	57
  2208  002534  6FE6               	movwf	??_main& (0+255),b
  2209  002536  0E0D               	movlw	13
  2210  002538                     u4527:
  2211  002538  2EE8               	decfsz	wreg,f,c
  2212  00253A  D7FE               	bra	u4527
  2213  00253C  2FE6               	decfsz	??_main& (0+255),f,b
  2214  00253E  D7FC               	bra	u4527
  2215  002540  2FE7               	decfsz	(??_main+1)& (0+255),f,b
  2216  002542  D7FA               	bra	u4527
  2217  002544  D000               	nop2	
  2218                           
  2219                           ;main.c: 587: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2220  002546  0E01               	movlw	1
  2221  002548  ECBD  F01A         	call	_lcdInst
  2222  00254C  0EC3               	movlw	195
  2223  00254E  0100               	movlb	0	; () banked
  2224  002550  6FE6               	movwf	??_main& (0+255),b
  2225  002552  0ECD               	movlw	205
  2226  002554                     u4537:
  2227  002554  2EE8               	decfsz	wreg,f,c
  2228  002556  D7FE               	bra	u4537
  2229  002558  2FE6               	decfsz	??_main& (0+255),f,b
  2230  00255A  D7FC               	bra	u4537
  2231                           
  2232                           ;main.c: 588: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2233  00255C  0E80               	movlw	128
  2234  00255E  ECBD  F01A         	call	_lcdInst
  2235  002562  0E41               	movlw	65
  2236  002564  0100               	movlb	0	; () banked
  2237  002566  6FE6               	movwf	??_main& (0+255),b
  2238  002568  0EEE               	movlw	238
  2239  00256A                     u4547:
  2240  00256A  2EE8               	decfsz	wreg,f,c
  2241  00256C  D7FE               	bra	u4547
  2242  00256E  2FE6               	decfsz	??_main& (0+255),f,b
  2243  002570  D7FC               	bra	u4547
  2244  002572  F000               	nop	
  2245                           
  2246                           ;main.c: 589: printf("Washer_remain:%d",W_remain);
  2247  002574  0ED8               	movlw	low STR_7
  2248  002576  0100               	movlb	0	; () banked
  2249  002578  6FD0               	movwf	printf@f& (0+255),b
  2250  00257A  0EFE               	movlw	high STR_7
  2251  00257C  6FD1               	movwf	(printf@f+1)& (0+255),b
  2252  00257E  C090  F0D2         	movff	_W_remain,?_printf+2
  2253  002582  C091  F0D3         	movff	_W_remain+1,?_printf+3
  2254  002586  EC35  F00D         	call	_printf	;wreg free
  2255                           
  2256                           ;main.c: 590: _delay((unsigned long)((300)*(40000000/4000.0)));
  2257  00258A  0E10               	movlw	16
  2258  00258C  0100               	movlb	0	; () banked
  2259  00258E  6FE7               	movwf	(??_main+1)& (0+255),b
  2260  002590  0E39               	movlw	57
  2261  002592  6FE6               	movwf	??_main& (0+255),b
  2262  002594  0E0D               	movlw	13
  2263  002596                     u4557:
  2264  002596  2EE8               	decfsz	wreg,f,c
  2265  002598  D7FE               	bra	u4557
  2266  00259A  2FE6               	decfsz	??_main& (0+255),f,b
  2267  00259C  D7FC               	bra	u4557
  2268  00259E  2FE7               	decfsz	(??_main+1)& (0+255),f,b
  2269  0025A0  D7FA               	bra	u4557
  2270  0025A2  D000               	nop2	
  2271                           
  2272                           ;main.c: 591: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2273  0025A4  0E01               	movlw	1
  2274  0025A6  ECBD  F01A         	call	_lcdInst
  2275  0025AA  0EC3               	movlw	195
  2276  0025AC  0100               	movlb	0	; () banked
  2277  0025AE  6FE6               	movwf	??_main& (0+255),b
  2278  0025B0  0ECD               	movlw	205
  2279  0025B2                     u4567:
  2280  0025B2  2EE8               	decfsz	wreg,f,c
  2281  0025B4  D7FE               	bra	u4567
  2282  0025B6  2FE6               	decfsz	??_main& (0+255),f,b
  2283  0025B8  D7FC               	bra	u4567
  2284                           
  2285                           ;main.c: 592: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2286  0025BA  0E80               	movlw	128
  2287  0025BC  ECBD  F01A         	call	_lcdInst
  2288  0025C0  0E41               	movlw	65
  2289  0025C2  0100               	movlb	0	; () banked
  2290  0025C4  6FE6               	movwf	??_main& (0+255),b
  2291  0025C6  0EEE               	movlw	238
  2292  0025C8                     u4577:
  2293  0025C8  2EE8               	decfsz	wreg,f,c
  2294  0025CA  D7FE               	bra	u4577
  2295  0025CC  2FE6               	decfsz	??_main& (0+255),f,b
  2296  0025CE  D7FC               	bra	u4577
  2297  0025D0  F000               	nop	
  2298                           
  2299                           ;main.c: 593: printf("you're done");
  2300  0025D2  0E6E               	movlw	low STR_8
  2301  0025D4  0100               	movlb	0	; () banked
  2302  0025D6  6FD0               	movwf	printf@f& (0+255),b
  2303  0025D8  0EFF               	movlw	high STR_8
  2304  0025DA  6FD1               	movwf	(printf@f+1)& (0+255),b
  2305  0025DC  EC35  F00D         	call	_printf	;wreg free
  2306                           
  2307                           ;main.c: 594: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2308  0025E0  0E33               	movlw	51
  2309  0025E2  0100               	movlb	0	; () banked
  2310  0025E4  6FE7               	movwf	(??_main+1)& (0+255),b
  2311  0025E6  0EBB               	movlw	187
  2312  0025E8  6FE6               	movwf	??_main& (0+255),b
  2313  0025EA  0EDF               	movlw	223
  2314  0025EC                     u4587:
  2315  0025EC  2EE8               	decfsz	wreg,f,c
  2316  0025EE  D7FE               	bra	u4587
  2317  0025F0  2FE6               	decfsz	??_main& (0+255),f,b
  2318  0025F2  D7FC               	bra	u4587
  2319  0025F4  2FE7               	decfsz	(??_main+1)& (0+255),f,b
  2320  0025F6  D7FA               	bra	u4587
  2321  0025F8  D000               	nop2	
  2322                           
  2323                           ;main.c: 595: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2324  0025FA  0E80               	movlw	128
  2325  0025FC  ECBD  F01A         	call	_lcdInst
  2326  002600  0E41               	movlw	65
  2327  002602  0100               	movlb	0	; () banked
  2328  002604  6FE6               	movwf	??_main& (0+255),b
  2329  002606  0EEE               	movlw	238
  2330  002608                     u4597:
  2331  002608  2EE8               	decfsz	wreg,f,c
  2332  00260A  D7FE               	bra	u4597
  2333  00260C  2FE6               	decfsz	??_main& (0+255),f,b
  2334  00260E  D7FC               	bra	u4597
  2335  002610  F000               	nop	
  2336  002612                     
  2337                           ;main.c: 619: (INTCONbits.GIE = 1);
  2338  002612  8EF2               	bsf	intcon,7,c	;volatile
  2339                           
  2340                           ;main.c: 620: operation = 1;
  2341  002614  0E00               	movlw	0
  2342  002616  0100               	movlb	0	; () banked
  2343  002618  6FAF               	movwf	(_operation+1)& (0+255),b
  2344  00261A  0E01               	movlw	1
  2345  00261C  6FAE               	movwf	_operation& (0+255),b
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 621: printf("1: Date and Time");
  2349  00261E  0EE9               	movlw	low STR_9
  2350  002620  6FD0               	movwf	printf@f& (0+255),b
  2351  002622  0EFE               	movlw	high STR_9
  2352  002624  6FD1               	movwf	(printf@f+1)& (0+255),b
  2353  002626  EC35  F00D         	call	_printf	;wreg free
  2354                           
  2355                           ;main.c: 622: lcdInst(0xC0);;
  2356  00262A  0EC0               	movlw	192
  2357  00262C  ECBD  F01A         	call	_lcdInst
  2358                           
  2359                           ;main.c: 623: printf(" 2: Operation Time");
  2360  002630  0EA3               	movlw	low STR_10
  2361  002632  0100               	movlb	0	; () banked
  2362  002634  6FD0               	movwf	printf@f& (0+255),b
  2363  002636  0EFE               	movlw	high STR_10
  2364  002638  6FD1               	movwf	(printf@f+1)& (0+255),b
  2365  00263A  EC35  F00D         	call	_printf	;wreg free
  2366                           
  2367                           ;main.c: 624: _delay((unsigned long)((600)*(40000000/4000.0)));
  2368  00263E  0E1F               	movlw	31
  2369  002640  0100               	movlb	0	; () banked
  2370  002642  6FE7               	movwf	(??_main+1)& (0+255),b
  2371  002644  0E71               	movlw	113
  2372  002646  6FE6               	movwf	??_main& (0+255),b
  2373  002648  0E1E               	movlw	30
  2374  00264A                     u4607:
  2375  00264A  2EE8               	decfsz	wreg,f,c
  2376  00264C  D7FE               	bra	u4607
  2377  00264E  2FE6               	decfsz	??_main& (0+255),f,b
  2378  002650  D7FC               	bra	u4607
  2379  002652  2FE7               	decfsz	(??_main+1)& (0+255),f,b
  2380  002654  D7FA               	bra	u4607
  2381  002656  F000               	nop	
  2382                           
  2383                           ;main.c: 625: initLCD();
  2384  002658  EC1B  F019         	call	_initLCD	;wreg free
  2385                           
  2386                           ;main.c: 626: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2387  00265C  0E80               	movlw	128
  2388  00265E  ECBD  F01A         	call	_lcdInst
  2389  002662  0E41               	movlw	65
  2390  002664  0100               	movlb	0	; () banked
  2391  002666  6FE6               	movwf	??_main& (0+255),b
  2392  002668  0EEE               	movlw	238
  2393  00266A                     u4617:
  2394  00266A  2EE8               	decfsz	wreg,f,c
  2395  00266C  D7FE               	bra	u4617
  2396  00266E  2FE6               	decfsz	??_main& (0+255),f,b
  2397  002670  D7FC               	bra	u4617
  2398  002672  F000               	nop	
  2399                           
  2400                           ;main.c: 627: printf("3:summary");
  2401  002674  0E9C               	movlw	low STR_11
  2402  002676  0100               	movlb	0	; () banked
  2403  002678  6FD0               	movwf	printf@f& (0+255),b
  2404  00267A  0EFF               	movlw	high STR_11
  2405  00267C  6FD1               	movwf	(printf@f+1)& (0+255),b
  2406  00267E  EC35  F00D         	call	_printf	;wreg free
  2407                           
  2408                           ;main.c: 628: lcdInst(0xC0);;
  2409  002682  0EC0               	movlw	192
  2410  002684  ECBD  F01A         	call	_lcdInst
  2411                           
  2412                           ;main.c: 630: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2413  002688  0E33               	movlw	51
  2414  00268A  0100               	movlb	0	; () banked
  2415  00268C  6FE7               	movwf	(??_main+1)& (0+255),b
  2416  00268E  0EBB               	movlw	187
  2417  002690  6FE6               	movwf	??_main& (0+255),b
  2418  002692  0EDF               	movlw	223
  2419  002694                     u4627:
  2420  002694  2EE8               	decfsz	wreg,f,c
  2421  002696  D7FE               	bra	u4627
  2422  002698  2FE6               	decfsz	??_main& (0+255),f,b
  2423  00269A  D7FC               	bra	u4627
  2424  00269C  2FE7               	decfsz	(??_main+1)& (0+255),f,b
  2425  00269E  D7FA               	bra	u4627
  2426  0026A0  D000               	nop2	
  2427                           
  2428                           ;main.c: 631: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2429  0026A2  0E80               	movlw	128
  2430  0026A4  ECBD  F01A         	call	_lcdInst
  2431  0026A8  0E41               	movlw	65
  2432  0026AA  0100               	movlb	0	; () banked
  2433  0026AC  6FE6               	movwf	??_main& (0+255),b
  2434  0026AE  0EEE               	movlw	238
  2435  0026B0                     u4637:
  2436  0026B0  2EE8               	decfsz	wreg,f,c
  2437  0026B2  D7FE               	bra	u4637
  2438  0026B4  2FE6               	decfsz	??_main& (0+255),f,b
  2439  0026B6  D7FC               	bra	u4637
  2440  0026B8  F000               	nop	
  2441                           
  2442                           ;main.c: 633: if(operation_done == 1){
  2443  0026BA  0100               	movlb	0	; () banked
  2444  0026BC  05AC               	decf	_operation_done& (0+255),w,b
  2445  0026BE  11AD               	iorwf	(_operation_done+1)& (0+255),w,b
  2446  0026C0  A4D8               	btfss	status,2,c
  2447  0026C2  D7A7               	goto	l343
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;main.c: 635: }
  2451                           ;main.c: 636: }
  2452                           ;main.c: 637: initialize();
  2453                           
  2454                           ; BSR set to: 0
  2455                           
  2456                           ; BSR set to: 0
  2457                           
  2458                           ; BSR set to: 0
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;main.c: 634: break;
  2462  0026C4  ECA0  F014         	call	_initialize	;wreg free
  2463                           
  2464                           ;main.c: 638: mode = 0;
  2465  0026C8  0E00               	movlw	0
  2466  0026CA  0100               	movlb	0	; () banked
  2467  0026CC  6FFB               	movwf	(_mode+1)& (0+255),b
  2468  0026CE  0E00               	movlw	0
  2469  0026D0  6FFA               	movwf	_mode& (0+255),b
  2470                           
  2471                           ; BSR set to: 0
  2472                           
  2473                           ; BSR set to: 0
  2474  0026D2  D616               	goto	l334
  2475  0026D4                     __end_of_main:
  2476                           	opt stack 0
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           intcon	equ	0xFF2
  2482                           intcon3	equ	0xFF0
  2483                           postinc0	equ	0xFEE
  2484                           wreg	equ	0xFE8
  2485                           postdec1	equ	0xFE5
  2486                           fsr1l	equ	0xFE1
  2487                           postinc2	equ	0xFDE
  2488                           postdec2	equ	0xFDD
  2489                           fsr2h	equ	0xFDA
  2490                           fsr2l	equ	0xFD9
  2491                           status	equ	0xFD8
  2492                           
  2493 ;; *************** function _printf *****************
  2494 ;; Defined at:
  2495 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  2498 ;;		 -> STR_33(3), STR_32(9), STR_31(12), STR_29(7), 
  2499 ;;		 -> STR_27(3), STR_26(11), STR_24(3), STR_23(9), 
  2500 ;;		 -> STR_18(15), STR_17(13), STR_16(16), STR_15(15), 
  2501 ;;		 -> STR_14(15), STR_13(15), STR_12(15), STR_11(10), 
  2502 ;;		 -> STR_10(19), STR_9(17), STR_8(12), STR_7(17), 
  2503 ;;		 -> STR_6(17), STR_5(14), STR_4(15), STR_3(21), 
  2504 ;;		 -> STR_2(11), STR_1(13), 
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  idx             1   22[BANK0 ] unsigned char 
  2507 ;;  tmpval          4    0        struct .
  2508 ;;  width           2   33[BANK0 ] int 
  2509 ;;  val             2   30[BANK0 ] unsigned int 
  2510 ;;  len             2   28[BANK0 ] unsigned int 
  2511 ;;  ap              2   26[BANK0 ] PTR void [1]
  2512 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2513 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  2514 ;;		 -> STR_54(7), number(2), current_set(5), 
  2515 ;;  c               1   35[BANK0 ] char 
  2516 ;;  flag            1   32[BANK0 ] unsigned char 
  2517 ;;  prec            1   23[BANK0 ] char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  2   14[BANK0 ] int 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2527 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;Total ram usage:       22 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    6
  2534 ;; This function calls:
  2535 ;;		___lwdiv
  2536 ;;		___lwmod
  2537 ;;		___wmul
  2538 ;;		_isdigit
  2539 ;;		_putch
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;;		_count_gear
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text1
  2547  001A6A                     __ptext1:
  2548                           	opt stack 0
  2549  001A6A                     _printf:
  2550                           	opt stack 24
  2551                           
  2552                           ;doprnt.c: 466: va_list ap;
  2553                           ;doprnt.c: 499: signed char c;
  2554                           ;doprnt.c: 501: int width;
  2555                           ;doprnt.c: 506: signed char prec;
  2556                           ;doprnt.c: 508: unsigned char flag;
  2557                           ;doprnt.c: 523: union {
  2558                           ;doprnt.c: 524: unsigned long vd;
  2559                           ;doprnt.c: 525: double integ;
  2560                           ;doprnt.c: 526: } tmpval;
  2561                           ;doprnt.c: 528: unsigned int val;
  2562                           ;doprnt.c: 529: unsigned len;
  2563                           ;doprnt.c: 530: const char * cp;
  2564                           ;doprnt.c: 533: *ap = __va_start();
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;incstack = 0
  2568  001A6A  0ED2               	movlw	low (?_printf+2)
  2569  001A6C  0100               	movlb	0	; () banked
  2570  001A6E  6FDC               	movwf	printf@ap& (0+255),b
  2571  001A70  0E00               	movlw	high (?_printf+2)
  2572  001A72  6FDD               	movwf	(printf@ap+1)& (0+255),b
  2573                           
  2574                           ;doprnt.c: 536: while(c = *f++) {
  2575  001A74  D20F               	goto	u2920
  2576  001A76                     
  2577                           ; BSR set to: 0
  2578                           ;doprnt.c: 538: if(c != '%')
  2579                           
  2580                           ; BSR set to: 0
  2581  001A76  0E25               	movlw	37
  2582  001A78  19E5               	xorwf	printf@c& (0+255),w,b
  2583  001A7A  B4D8               	btfsc	status,2,c
  2584  001A7C  D004               	goto	l772
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;doprnt.c: 540: {
  2588                           ;doprnt.c: 541: (putch(c) );
  2589  001A7E  51E5               	movf	printf@c& (0+255),w,b
  2590  001A80  ECB1  F01A         	call	_putch
  2591                           
  2592                           ;doprnt.c: 542: continue;
  2593  001A84  D207               	goto	u2920
  2594  001A86                     l772:
  2595                           
  2596                           ;doprnt.c: 543: }
  2597                           ;doprnt.c: 546: width = 0;
  2598  001A86  0E00               	movlw	0
  2599  001A88  0100               	movlb	0	; () banked
  2600  001A8A  6FE4               	movwf	(printf@width+1)& (0+255),b
  2601  001A8C  0E00               	movlw	0
  2602  001A8E  6FE3               	movwf	printf@width& (0+255),b
  2603                           
  2604                           ;doprnt.c: 548: flag = 0;
  2605  001A90  0E00               	movlw	0
  2606  001A92  6FE2               	movwf	printf@flag& (0+255),b
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;doprnt.c: 551: switch(*f) {
  2610                           
  2611                           ;doprnt.c: 550: for(;;) {
  2612  001A94  D004               	goto	l774
  2613  001A96                     
  2614                           ;doprnt.c: 580: flag |= 0x04;
  2615                           
  2616                           ; BSR set to: 0
  2617  001A96  0100               	movlb	0	; () banked
  2618  001A98  85E2               	bsf	printf@flag& (0+255),2,b
  2619                           
  2620                           ;doprnt.c: 581: f++;
  2621  001A9A  4BD0               	infsnz	printf@f& (0+255),f,b
  2622  001A9C  2BD1               	incf	(printf@f+1)& (0+255),f,b
  2623  001A9E                     l774:
  2624                           
  2625                           ; BSR set to: 0
  2626  001A9E  C0D0  FFF6         	movff	printf@f,tblptrl
  2627  001AA2  C0D1  FFF7         	movff	printf@f+1,tblptrh
  2628  001AA6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2629  001AA6  6AF8               	clrf	tblptru,c
  2630  001AA8                     	endif
  2631  001AA8                     	if	0	;tblptru may be non-zero
  2632  001AA8                     	endif
  2633  001AA8  0008               	tblrd		*
  2634  001AAA  50F5               	movf	tablat,w,c
  2635                           
  2636                           ; Switch size 1, requested type "space"
  2637                           ; Number of cases is 1, Range of values is 48 to 48
  2638                           ; switch strategies available:
  2639                           ; Name         Instructions Cycles
  2640                           ; simple_byte            4     3 (average)
  2641                           ;	Chosen strategy is simple_byte
  2642  001AAC  0A30               	xorlw	48	; case 48
  2643  001AAE  B4D8               	btfsc	status,2,c
  2644  001AB0  D7F2               	goto	l775
  2645                           
  2646                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2647                           
  2648                           ;doprnt.c: 586: }
  2649                           
  2650                           ;doprnt.c: 585: break;
  2651  001AB2  C0D0  FFF6         	movff	printf@f,tblptrl
  2652  001AB6  C0D1  FFF7         	movff	printf@f+1,tblptrh
  2653  001ABA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2654  001ABA  6AF8               	clrf	tblptru,c
  2655  001ABC                     	endif
  2656  001ABC                     	if	0	;tblptru may be non-zero
  2657  001ABC                     	endif
  2658  001ABC  0008               	tblrd		*
  2659  001ABE  50F5               	movf	tablat,w,c
  2660  001AC0  EC91  F01A         	call	_isdigit
  2661  001AC4  A0D8               	btfss	status,0,c
  2662  001AC6  D0AE               	goto	l782
  2663                           
  2664                           ;doprnt.c: 598: width = 0;
  2665  001AC8  0E00               	movlw	0
  2666  001ACA  0100               	movlb	0	; () banked
  2667  001ACC  6FE4               	movwf	(printf@width+1)& (0+255),b
  2668  001ACE  0E00               	movlw	0
  2669  001AD0  6FE3               	movwf	printf@width& (0+255),b
  2670  001AD2                     
  2671                           ;doprnt.c: 600: width *= 10;
  2672                           
  2673                           ; BSR set to: 0
  2674  001AD2  C0E3  F0CA         	movff	printf@width,___wmul@multiplier
  2675  001AD6  C0E4  F0CB         	movff	printf@width+1,___wmul@multiplier+1
  2676  001ADA  0E00               	movlw	0
  2677  001ADC  0100               	movlb	0	; () banked
  2678  001ADE  6FCD               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2679  001AE0  0E0A               	movlw	10
  2680  001AE2  6FCC               	movwf	___wmul@multiplicand& (0+255),b
  2681  001AE4  EC44  F01A         	call	___wmul	;wreg free
  2682  001AE8  C0CA  F0E3         	movff	?___wmul,printf@width
  2683  001AEC  C0CB  F0E4         	movff	?___wmul+1,printf@width+1
  2684                           
  2685                           ;doprnt.c: 601: width += *f++ - '0';
  2686  001AF0  0ED0               	movlw	208
  2687  001AF2  0100               	movlb	0	; () banked
  2688  001AF4  6FD4               	movwf	??_printf& (0+255),b
  2689  001AF6  0EFF               	movlw	255
  2690  001AF8  6FD5               	movwf	(??_printf+1)& (0+255),b
  2691  001AFA  C0D0  FFF6         	movff	printf@f,tblptrl
  2692  001AFE  C0D1  FFF7         	movff	printf@f+1,tblptrh
  2693  001B02                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2694  001B02  6AF8               	clrf	tblptru,c
  2695  001B04                     	endif
  2696  001B04                     	if	0	;tblptru may be non-zero
  2697  001B04                     	endif
  2698  001B04  0008               	tblrd		*
  2699  001B06  50F5               	movf	tablat,w,c
  2700  001B08  6FD6               	movwf	(??_printf+2)& (0+255),b
  2701  001B0A  6BD7               	clrf	(??_printf+3)& (0+255),b
  2702  001B0C  51D4               	movf	??_printf& (0+255),w,b
  2703  001B0E  27D6               	addwf	(??_printf+2)& (0+255),f,b
  2704  001B10  51D5               	movf	(??_printf+1)& (0+255),w,b
  2705  001B12  23D7               	addwfc	(??_printf+3)& (0+255),f,b
  2706  001B14  51D6               	movf	(??_printf+2)& (0+255),w,b
  2707  001B16  27E3               	addwf	printf@width& (0+255),f,b
  2708  001B18  51D7               	movf	(??_printf+3)& (0+255),w,b
  2709  001B1A  23E4               	addwfc	(printf@width+1)& (0+255),f,b
  2710                           
  2711                           ; BSR set to: 0
  2712  001B1C  4BD0               	infsnz	printf@f& (0+255),f,b
  2713  001B1E  2BD1               	incf	(printf@f+1)& (0+255),f,b
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2717  001B20  C0D0  FFF6         	movff	printf@f,tblptrl
  2718  001B24  C0D1  FFF7         	movff	printf@f+1,tblptrh
  2719  001B28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2720  001B28  6AF8               	clrf	tblptru,c
  2721  001B2A                     	endif
  2722  001B2A                     	if	0	;tblptru may be non-zero
  2723  001B2A                     	endif
  2724  001B2A  0008               	tblrd		*
  2725  001B2C  50F5               	movf	tablat,w,c
  2726  001B2E  EC91  F01A         	call	_isdigit
  2727  001B32  A0D8               	btfss	status,0,c
  2728  001B34  D077               	goto	l782
  2729  001B36  D7CD               	goto	l780
  2730  001B38                     
  2731                           ;doprnt.c: 721: flag |= 0x80;
  2732  001B38  0100               	movlb	0	; () banked
  2733  001B3A  8FE2               	bsf	printf@flag& (0+255),7,b
  2734                           
  2735                           ;doprnt.c: 723: break;
  2736  001B3C  D08F               	goto	l787
  2737  001B3E                     
  2738                           ; BSR set to: 0
  2739                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2740                           
  2741                           ; BSR set to: 0
  2742  001B3E  C0DC  FFD9         	movff	printf@ap,fsr2l
  2743  001B42  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  2744  001B46  CFDE F0DA          	movff	postinc2,printf@cp
  2745  001B4A  CFDD F0DB          	movff	postdec2,printf@cp+1
  2746                           
  2747                           ; BSR set to: 0
  2748  001B4E  0E02               	movlw	2
  2749  001B50  27DC               	addwf	printf@ap& (0+255),f,b
  2750  001B52  0E00               	movlw	0
  2751  001B54  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;doprnt.c: 740: if(!cp)
  2755  001B56  51DA               	movf	printf@cp& (0+255),w,b
  2756  001B58  11DB               	iorwf	(printf@cp+1)& (0+255),w,b
  2757  001B5A  A4D8               	btfss	status,2,c
  2758  001B5C  D004               	goto	l790
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;doprnt.c: 741: cp = "(null)";
  2762  001B5E  0EB8               	movlw	low STR_54
  2763  001B60  6FDA               	movwf	printf@cp& (0+255),b
  2764  001B62  0EFF               	movlw	high STR_54
  2765  001B64  6FDB               	movwf	(printf@cp+1)& (0+255),b
  2766  001B66                     l790:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;doprnt.c: 745: len = 0;
  2770                           
  2771                           ; BSR set to: 0
  2772  001B66  0E00               	movlw	0
  2773  001B68  6FDF               	movwf	(printf@len+1)& (0+255),b
  2774  001B6A  0E00               	movlw	0
  2775  001B6C  6FDE               	movwf	printf@len& (0+255),b
  2776                           
  2777                           ;doprnt.c: 746: while(cp[len])
  2778  001B6E  D003               	goto	l791
  2779  001B70                     
  2780                           ;doprnt.c: 747: len++;
  2781                           
  2782                           ; BSR set to: 0
  2783  001B70  0100               	movlb	0	; () banked
  2784  001B72  4BDE               	infsnz	printf@len& (0+255),f,b
  2785  001B74  2BDF               	incf	(printf@len+1)& (0+255),f,b
  2786  001B76                     l791:
  2787                           
  2788                           ; BSR set to: 0
  2789                           
  2790                           ; BSR set to: 0
  2791  001B76  51DE               	movf	printf@len& (0+255),w,b
  2792  001B78  25DA               	addwf	printf@cp& (0+255),w,b
  2793  001B7A  6FD4               	movwf	??_printf& (0+255),b
  2794  001B7C  51DF               	movf	(printf@len+1)& (0+255),w,b
  2795  001B7E  21DB               	addwfc	(printf@cp+1)& (0+255),w,b
  2796  001B80  6FD5               	movwf	(??_printf+1)& (0+255),b
  2797  001B82  C0D4  FFF6         	movff	??_printf,tblptrl
  2798  001B86  C0D5  FFF7         	movff	??_printf+1,tblptrh
  2799  001B8A  0E00               	movlw	low (__mediumconst shr (0+16))
  2800  001B8C  6EF8               	movwf	tblptru,c
  2801  001B8E  0E0F               	movlw	(high __ramtop+-1)
  2802  001B90  64F7               	cpfsgt	tblptrh,c
  2803  001B92  D003               	bra	u2687
  2804  001B94  0008               	tblrd		*
  2805  001B96  50F5               	movf	tablat,w,c
  2806  001B98  D005               	bra	u2680
  2807  001B9A                     u2687:
  2808  001B9A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2809  001B9E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2810  001BA2  50EF               	movf	indf0,w,c
  2811  001BA4                     u2680:
  2812  001BA4  0900               	iorlw	0
  2813  001BA6  A4D8               	btfss	status,2,c
  2814  001BA8  D7E3               	goto	l792
  2815                           
  2816                           ;doprnt.c: 757: if(width > len)
  2817  001BAA  0100               	movlb	0	; () banked
  2818  001BAC  51E3               	movf	printf@width& (0+255),w,b
  2819  001BAE  5DDE               	subwf	printf@len& (0+255),w,b
  2820  001BB0  51E4               	movf	(printf@width+1)& (0+255),w,b
  2821  001BB2  59DF               	subwfb	(printf@len+1)& (0+255),w,b
  2822  001BB4  B0D8               	btfsc	status,0,c
  2823  001BB6  D005               	goto	l794
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;doprnt.c: 758: width -= len;
  2827  001BB8  51DE               	movf	printf@len& (0+255),w,b
  2828  001BBA  5FE3               	subwf	printf@width& (0+255),f,b
  2829  001BBC  51DF               	movf	(printf@len+1)& (0+255),w,b
  2830  001BBE  5BE4               	subwfb	(printf@width+1)& (0+255),f,b
  2831  001BC0  D008               	goto	l796
  2832  001BC2                     l794:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;doprnt.c: 759: else
  2836                           ;doprnt.c: 760: width = 0;
  2837                           
  2838                           ; BSR set to: 0
  2839  001BC2  0E00               	movlw	0
  2840  001BC4  6FE4               	movwf	(printf@width+1)& (0+255),b
  2841  001BC6  0E00               	movlw	0
  2842  001BC8  6FE3               	movwf	printf@width& (0+255),b
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;doprnt.c: 764: while(width--)
  2846  001BCA  D003               	goto	l796
  2847  001BCC                     l3808:
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;doprnt.c: 765: (putch(' ') );
  2851  001BCC  0E20               	movlw	32
  2852  001BCE  ECB1  F01A         	call	_putch
  2853  001BD2                     l796:
  2854  001BD2  0100               	movlb	0	; () banked
  2855  001BD4  07E3               	decf	printf@width& (0+255),f,b
  2856  001BD6  A0D8               	btfss	status,0,c
  2857  001BD8  07E4               	decf	(printf@width+1)& (0+255),f,b
  2858  001BDA  29E3               	incf	printf@width& (0+255),w,b
  2859  001BDC  E1F7               	bnz	l3808
  2860  001BDE  29E4               	incf	(printf@width+1)& (0+255),w,b
  2861  001BE0  B4D8               	btfsc	status,2,c
  2862  001BE2  D017               	goto	l799
  2863  001BE4  D7F3               	goto	l797
  2864  001BE6                     l3812:
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;doprnt.c: 768: (putch(*cp++) );
  2868  001BE6  C0DA  FFF6         	movff	printf@cp,tblptrl
  2869  001BEA  C0DB  FFF7         	movff	printf@cp+1,tblptrh
  2870  001BEE  0E00               	movlw	low (__mediumconst shr (0+16))
  2871  001BF0  6EF8               	movwf	tblptru,c
  2872  001BF2  0E0F               	movlw	(high __ramtop+-1)
  2873  001BF4  64F7               	cpfsgt	tblptrh,c
  2874  001BF6  D003               	bra	u2727
  2875  001BF8  0008               	tblrd		*
  2876  001BFA  50F5               	movf	tablat,w,c
  2877  001BFC  D005               	bra	u2720
  2878  001BFE                     u2727:
  2879  001BFE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2880  001C02  CFF7 FFEA          	movff	tblptrh,fsr0h
  2881  001C06  50EF               	movf	indf0,w,c
  2882  001C08                     u2720:
  2883  001C08  ECB1  F01A         	call	_putch
  2884  001C0C  0100               	movlb	0	; () banked
  2885  001C0E  4BDA               	infsnz	printf@cp& (0+255),f,b
  2886  001C10  2BDB               	incf	(printf@cp+1)& (0+255),f,b
  2887  001C12                     l799:
  2888                           
  2889                           ; BSR set to: 0
  2890                           
  2891                           ; BSR set to: 0
  2892  001C12  07DE               	decf	printf@len& (0+255),f,b
  2893  001C14  A0D8               	btfss	status,0,c
  2894  001C16  07DF               	decf	(printf@len+1)& (0+255),f,b
  2895  001C18  29DE               	incf	printf@len& (0+255),w,b
  2896  001C1A  E1E5               	bnz	l3812
  2897  001C1C  29DF               	incf	(printf@len+1)& (0+255),w,b
  2898  001C1E  B4D8               	btfsc	status,2,c
  2899  001C20  D139               	goto	u2920
  2900  001C22  D7E1               	goto	l800
  2901  001C24                     l782:
  2902                           
  2903                           ; BSR set to: 0
  2904  001C24  C0D0  FFF6         	movff	printf@f,tblptrl
  2905  001C28  C0D1  FFF7         	movff	printf@f+1,tblptrh
  2906  001C2C  0100               	movlb	0	; () banked
  2907  001C2E  4BD0               	infsnz	printf@f& (0+255),f,b
  2908  001C30  2BD1               	incf	(printf@f+1)& (0+255),f,b
  2909  001C32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2910  001C32  6AF8               	clrf	tblptru,c
  2911  001C34                     	endif
  2912  001C34                     	if	0	;tblptru may be non-zero
  2913  001C34                     	endif
  2914  001C34  0008               	tblrd		*
  2915  001C36  CFF5 F0E5          	movff	tablat,printf@c
  2916  001C3A  51E5               	movf	printf@c& (0+255),w,b
  2917                           
  2918                           ; Switch size 1, requested type "space"
  2919                           ; Number of cases is 5, Range of values is 0 to 120
  2920                           ; switch strategies available:
  2921                           ; Name         Instructions Cycles
  2922                           ; simple_byte           16     9 (average)
  2923                           ;	Chosen strategy is simple_byte
  2924  001C3C  0A00               	xorlw	0	; case 0
  2925  001C3E  B4D8               	btfsc	status,2,c
  2926  001C40  0012               	return	
  2927  001C42  0A64               	xorlw	100	; case 100
  2928  001C44  B4D8               	btfsc	status,2,c
  2929  001C46  D00A               	goto	l787
  2930  001C48  0A0D               	xorlw	13	; case 105
  2931  001C4A  B4D8               	btfsc	status,2,c
  2932  001C4C  D007               	goto	l787
  2933  001C4E  0A1A               	xorlw	26	; case 115
  2934  001C50  B4D8               	btfsc	status,2,c
  2935  001C52  D775               	goto	l789
  2936  001C54  0A0B               	xorlw	11	; case 120
  2937  001C56  B4D8               	btfsc	status,2,c
  2938  001C58  D76F               	goto	l788
  2939  001C5A  D11C               	goto	u2920
  2940  001C5C                     l787:
  2941                           
  2942                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2943  001C5C  0100               	movlb	0	; () banked
  2944  001C5E  BFE2               	btfsc	printf@flag& (0+255),7,b
  2945  001C60  D015               	goto	l803
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;doprnt.c: 1253: {
  2949                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2950  001C62  C0DC  FFD9         	movff	printf@ap,fsr2l
  2951  001C66  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  2952  001C6A  CFDE F0E0          	movff	postinc2,printf@val
  2953  001C6E  CFDD F0E1          	movff	postdec2,printf@val+1
  2954                           
  2955                           ; BSR set to: 0
  2956  001C72  0E02               	movlw	2
  2957  001C74  27DC               	addwf	printf@ap& (0+255),f,b
  2958  001C76  0E00               	movlw	0
  2959  001C78  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;doprnt.c: 1261: if((int)val < 0) {
  2963  001C7A  AFE1               	btfss	(printf@val+1)& (0+255),7,b
  2964  001C7C  D04A               	goto	l806
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;doprnt.c: 1262: flag |= 0x03;
  2968  001C7E  0E03               	movlw	3
  2969  001C80  13E2               	iorwf	printf@flag& (0+255),f,b
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 1263: val = -val;
  2973  001C82  6DE0               	negf	printf@val& (0+255),b
  2974  001C84  1FE1               	comf	(printf@val+1)& (0+255),f,b
  2975  001C86  B0D8               	btfsc	status,0,c
  2976  001C88  2BE1               	incf	(printf@val+1)& (0+255),f,b
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;doprnt.c: 1264: }
  2980                           ;doprnt.c: 1266: }
  2981  001C8A  D043               	goto	l806
  2982  001C8C                     l803:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;doprnt.c: 1268: else
  2986                           ;doprnt.c: 1273: {
  2987                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2988                           
  2989                           ; BSR set to: 0
  2990  001C8C  C0DC  FFD9         	movff	printf@ap,fsr2l
  2991  001C90  C0DD  FFDA         	movff	printf@ap+1,fsr2h
  2992  001C94  CFDE F0E0          	movff	postinc2,printf@val
  2993  001C98  CFDD F0E1          	movff	postdec2,printf@val+1
  2994                           
  2995                           ; BSR set to: 0
  2996  001C9C  0E02               	movlw	2
  2997  001C9E  27DC               	addwf	printf@ap& (0+255),f,b
  2998  001CA0  0E00               	movlw	0
  2999  001CA2  23DD               	addwfc	(printf@ap+1)& (0+255),f,b
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;doprnt.c: 1287: }
  3003                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3004  001CA4  D036               	goto	l806
  3005  001CA6                     
  3006                           ; BSR set to: 0
  3007                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3008                           
  3009                           ; BSR set to: 0
  3010  001CA6  0E01               	movlw	1
  3011  001CA8  6FE5               	movwf	printf@c& (0+255),b
  3012  001CAA                     l3838:
  3013                           
  3014                           ; BSR set to: 0
  3015  001CAA  0E05               	movlw	5
  3016  001CAC  19E5               	xorwf	printf@c& (0+255),w,b
  3017  001CAE  B4D8               	btfsc	status,2,c
  3018  001CB0  D038               	goto	l811
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;doprnt.c: 1306: if(val < dpowers[c])
  3022                           
  3023                           ; BSR set to: 0
  3024                           
  3025                           ; BSR set to: 0
  3026  001CB2  51E5               	movf	printf@c& (0+255),w,b
  3027  001CB4  0D02               	mullw	2
  3028  001CB6  0E08               	movlw	low _dpowers
  3029  001CB8  24F3               	addwf	prodl,w,c
  3030  001CBA  6EF6               	movwf	tblptrl,c
  3031  001CBC  0EFE               	movlw	high _dpowers
  3032  001CBE  20F4               	addwfc	prodh,w,c
  3033  001CC0  6EF7               	movwf	tblptrh,c
  3034  001CC2                     	if	1	;There are 3 active tblptr bytes
  3035  001CC2  6AF8               	clrf	tblptru,c
  3036  001CC4  0E00               	movlw	low (__mediumconst shr (0+16))
  3037  001CC6  22F8               	addwfc	tblptru,f,c
  3038  001CC8                     	endif
  3039  001CC8  0009               	tblrd		*+
  3040  001CCA  50F5               	movf	tablat,w,c
  3041  001CCC  5DE0               	subwf	printf@val& (0+255),w,b
  3042  001CCE  0009               	tblrd		*+
  3043  001CD0  50F5               	movf	tablat,w,c
  3044  001CD2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  3045  001CD4  A0D8               	btfss	status,0,c
  3046  001CD6  D025               	goto	l811
  3047                           
  3048                           ; BSR set to: 0
  3049                           
  3050                           ; BSR set to: 0
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;doprnt.c: 1307: break;
  3054  001CD8  2BE5               	incf	printf@c& (0+255),f,b
  3055  001CDA  D7E7               	goto	l3838
  3056  001CDC                     
  3057                           ; BSR set to: 0
  3058                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3059                           
  3060                           ; BSR set to: 0
  3061  001CDC  0E01               	movlw	1
  3062  001CDE  6FE5               	movwf	printf@c& (0+255),b
  3063  001CE0                     l3852:
  3064                           
  3065                           ; BSR set to: 0
  3066  001CE0  0E04               	movlw	4
  3067  001CE2  19E5               	xorwf	printf@c& (0+255),w,b
  3068  001CE4  B4D8               	btfsc	status,2,c
  3069  001CE6  D01D               	goto	l811
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3073                           
  3074                           ; BSR set to: 0
  3075                           
  3076                           ; BSR set to: 0
  3077  001CE8  51E5               	movf	printf@c& (0+255),w,b
  3078  001CEA  0D02               	mullw	2
  3079  001CEC  0E12               	movlw	low _hexpowers
  3080  001CEE  24F3               	addwf	prodl,w,c
  3081  001CF0  6EF6               	movwf	tblptrl,c
  3082  001CF2  0EFE               	movlw	high _hexpowers
  3083  001CF4  20F4               	addwfc	prodh,w,c
  3084  001CF6  6EF7               	movwf	tblptrh,c
  3085  001CF8                     	if	1	;There are 3 active tblptr bytes
  3086  001CF8  6AF8               	clrf	tblptru,c
  3087  001CFA  0E00               	movlw	low (__mediumconst shr (0+16))
  3088  001CFC  22F8               	addwfc	tblptru,f,c
  3089  001CFE                     	endif
  3090  001CFE  0009               	tblrd		*+
  3091  001D00  50F5               	movf	tablat,w,c
  3092  001D02  5DE0               	subwf	printf@val& (0+255),w,b
  3093  001D04  0009               	tblrd		*+
  3094  001D06  50F5               	movf	tablat,w,c
  3095  001D08  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  3096  001D0A  A0D8               	btfss	status,0,c
  3097  001D0C  D00A               	goto	l811
  3098                           
  3099                           ; BSR set to: 0
  3100                           
  3101                           ; BSR set to: 0
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;doprnt.c: 1318: break;
  3105  001D0E  2BE5               	incf	printf@c& (0+255),f,b
  3106  001D10  D7E7               	goto	l3852
  3107  001D12                     l806:
  3108                           
  3109                           ; BSR set to: 0
  3110                           
  3111                           ; BSR set to: 0
  3112  001D12  51E2               	movf	printf@flag& (0+255),w,b
  3113  001D14  0B80               	andlw	128
  3114                           
  3115                           ; Switch size 1, requested type "space"
  3116                           ; Number of cases is 2, Range of values is 0 to 128
  3117                           ; switch strategies available:
  3118                           ; Name         Instructions Cycles
  3119                           ; simple_byte            7     4 (average)
  3120                           ;	Chosen strategy is simple_byte
  3121  001D16  0A00               	xorlw	0	; case 0
  3122  001D18  B4D8               	btfsc	status,2,c
  3123  001D1A  D7C5               	goto	l807
  3124  001D1C  0A80               	xorlw	128	; case 128
  3125  001D1E  B4D8               	btfsc	status,2,c
  3126  001D20  D7DD               	goto	l812
  3127  001D22                     l811:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3131                           
  3132                           ; BSR set to: 0
  3133  001D22  51E3               	movf	printf@width& (0+255),w,b
  3134  001D24  11E4               	iorwf	(printf@width+1)& (0+255),w,b
  3135  001D26  B4D8               	btfsc	status,2,c
  3136  001D28  D009               	goto	l816
  3137                           
  3138                           ; BSR set to: 0
  3139  001D2A  C0E2  F0D4         	movff	printf@flag,??_printf
  3140  001D2E  0E03               	movlw	3
  3141  001D30  17D4               	andwf	??_printf& (0+255),f,b
  3142  001D32  B4D8               	btfsc	status,2,c
  3143  001D34  D003               	goto	l816
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;doprnt.c: 1346: width--;
  3147  001D36  07E3               	decf	printf@width& (0+255),f,b
  3148  001D38  A0D8               	btfss	status,0,c
  3149  001D3A  07E4               	decf	(printf@width+1)& (0+255),f,b
  3150  001D3C                     l816:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;doprnt.c: 1381: if(width > c)
  3154                           
  3155                           ; BSR set to: 0
  3156  001D3C  0E80               	movlw	128
  3157  001D3E  BFE5               	btfsc	printf@c& (0+255),7,b
  3158  001D40  0E7F               	movlw	127
  3159  001D42  6FD4               	movwf	??_printf& (0+255),b
  3160  001D44  51E3               	movf	printf@width& (0+255),w,b
  3161  001D46  5DE5               	subwf	printf@c& (0+255),w,b
  3162  001D48  51E4               	movf	(printf@width+1)& (0+255),w,b
  3163  001D4A  0A80               	xorlw	128
  3164  001D4C  59D4               	subwfb	??_printf& (0+255),w,b
  3165  001D4E  B0D8               	btfsc	status,0,c
  3166  001D50  D007               	goto	l817
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;doprnt.c: 1382: width -= c;
  3170  001D52  51E5               	movf	printf@c& (0+255),w,b
  3171  001D54  5FE3               	subwf	printf@width& (0+255),f,b
  3172  001D56  0E00               	movlw	0
  3173  001D58  BFE5               	btfsc	printf@c& (0+255),7,b
  3174  001D5A  0EFF               	movlw	255
  3175  001D5C  5BE4               	subwfb	(printf@width+1)& (0+255),f,b
  3176  001D5E  D004               	goto	l818
  3177  001D60                     l817:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;doprnt.c: 1383: else
  3181                           ;doprnt.c: 1384: width = 0;
  3182                           
  3183                           ; BSR set to: 0
  3184  001D60  0E00               	movlw	0
  3185  001D62  6FE4               	movwf	(printf@width+1)& (0+255),b
  3186  001D64  0E00               	movlw	0
  3187  001D66  6FE3               	movwf	printf@width& (0+255),b
  3188  001D68                     l818:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;doprnt.c: 1387: if(flag & 0x04) {
  3192                           
  3193                           ; BSR set to: 0
  3194  001D68  A5E2               	btfss	printf@flag& (0+255),2,b
  3195  001D6A  D016               	goto	l819
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;doprnt.c: 1392: if(flag & 0x03)
  3199  001D6C  C0E2  F0D4         	movff	printf@flag,??_printf
  3200  001D70  0E03               	movlw	3
  3201  001D72  17D4               	andwf	??_printf& (0+255),f,b
  3202  001D74  B4D8               	btfsc	status,2,c
  3203  001D76  D003               	goto	l820
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;doprnt.c: 1393: (putch('-') );
  3207  001D78  0E2D               	movlw	45
  3208  001D7A  ECB1  F01A         	call	_putch
  3209  001D7E                     l820:
  3210                           
  3211                           ;doprnt.c: 1415: if(width)
  3212  001D7E  0100               	movlb	0	; () banked
  3213  001D80  51E3               	movf	printf@width& (0+255),w,b
  3214  001D82  11E4               	iorwf	(printf@width+1)& (0+255),w,b
  3215  001D84  B4D8               	btfsc	status,2,c
  3216  001D86  D020               	goto	l828
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;doprnt.c: 1417: (putch('0') );
  3220                           
  3221                           ; BSR set to: 0
  3222                           
  3223                           ;doprnt.c: 1416: do
  3224  001D88  0E30               	movlw	48
  3225  001D8A  ECB1  F01A         	call	_putch
  3226                           
  3227                           ;doprnt.c: 1418: while(--width);
  3228  001D8E  0100               	movlb	0	; () banked
  3229  001D90  07E3               	decf	printf@width& (0+255),f,b
  3230  001D92  A0D8               	btfss	status,0,c
  3231  001D94  07E4               	decf	(printf@width+1)& (0+255),f,b
  3232  001D96  D7F4               	goto	L9
  3233  001D98                     l819:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;doprnt.c: 1422: {
  3237                           ;doprnt.c: 1424: if(width
  3238                           ;doprnt.c: 1428: )
  3239                           
  3240                           ; BSR set to: 0
  3241  001D98  51E3               	movf	printf@width& (0+255),w,b
  3242  001D9A  11E4               	iorwf	(printf@width+1)& (0+255),w,b
  3243  001D9C  B4D8               	btfsc	status,2,c
  3244  001D9E  D00B               	goto	u2900
  3245  001DA0                     u2890:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;doprnt.c: 1430: (putch(' ') );
  3249                           
  3250                           ; BSR set to: 0
  3251                           
  3252                           ;doprnt.c: 1429: do
  3253  001DA0  0E20               	movlw	32
  3254  001DA2  ECB1  F01A         	call	_putch
  3255                           
  3256                           ;doprnt.c: 1431: while(--width);
  3257  001DA6  0100               	movlb	0	; () banked
  3258  001DA8  07E3               	decf	printf@width& (0+255),f,b
  3259  001DAA  A0D8               	btfss	status,0,c
  3260  001DAC  07E4               	decf	(printf@width+1)& (0+255),f,b
  3261  001DAE  51E3               	movf	printf@width& (0+255),w,b
  3262  001DB0  11E4               	iorwf	(printf@width+1)& (0+255),w,b
  3263  001DB2  A4D8               	btfss	status,2,c
  3264  001DB4  D7F5               	goto	u2890
  3265  001DB6                     u2900:
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;doprnt.c: 1438: if(flag & 0x03)
  3269                           
  3270                           ; BSR set to: 0
  3271                           
  3272                           ; BSR set to: 0
  3273  001DB6  C0E2  F0D4         	movff	printf@flag,??_printf
  3274  001DBA  0E03               	movlw	3
  3275  001DBC  17D4               	andwf	??_printf& (0+255),f,b
  3276  001DBE  B4D8               	btfsc	status,2,c
  3277  001DC0  D003               	goto	l828
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;doprnt.c: 1439: (putch('-') );
  3281  001DC2  0E2D               	movlw	45
  3282  001DC4  ECB1  F01A         	call	_putch
  3283  001DC8                     l828:
  3284                           
  3285                           ;doprnt.c: 1469: }
  3286                           ;doprnt.c: 1472: prec = c;
  3287  001DC8  C0E5  F0D9         	movff	printf@c,printf@prec
  3288                           
  3289                           ;doprnt.c: 1474: while(prec--) {
  3290  001DCC  D05E               	goto	l829
  3291  001DCE                     
  3292                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3293  001DCE  0100               	movlb	0	; () banked
  3294  001DD0  51D9               	movf	printf@prec& (0+255),w,b
  3295  001DD2  0D02               	mullw	2
  3296  001DD4  0E08               	movlw	low _dpowers
  3297  001DD6  24F3               	addwf	prodl,w,c
  3298  001DD8  6EF6               	movwf	tblptrl,c
  3299  001DDA  0EFE               	movlw	high _dpowers
  3300  001DDC  20F4               	addwfc	prodh,w,c
  3301  001DDE  6EF7               	movwf	tblptrh,c
  3302  001DE0                     	if	1	;There are 3 active tblptr bytes
  3303  001DE0  6AF8               	clrf	tblptru,c
  3304  001DE2  0E00               	movlw	low (__mediumconst shr (0+16))
  3305  001DE4  22F8               	addwfc	tblptru,f,c
  3306  001DE6                     	endif
  3307  001DE6  0009               	tblrd		*+
  3308  001DE8  CFF5 F0C4          	movff	tablat,___lwdiv@divisor
  3309  001DEC  000A               	tblrd		*-
  3310  001DEE  CFF5 F0C5          	movff	tablat,___lwdiv@divisor+1
  3311  001DF2  C0E0  F0C2         	movff	printf@val,___lwdiv@dividend
  3312  001DF6  C0E1  F0C3         	movff	printf@val+1,___lwdiv@dividend+1
  3313  001DFA  ECC8  F018         	call	___lwdiv	;wreg free
  3314  001DFE  C0C2  F0C9         	movff	?___lwdiv,___lwmod@dividend
  3315  001E02  C0C3  F0CA         	movff	?___lwdiv+1,___lwmod@dividend+1
  3316  001E06  0E00               	movlw	0
  3317  001E08  0100               	movlb	0	; () banked
  3318  001E0A  6FCC               	movwf	(___lwmod@divisor+1)& (0+255),b
  3319  001E0C  0E0A               	movlw	10
  3320  001E0E  6FCB               	movwf	___lwmod@divisor& (0+255),b
  3321  001E10  ECAF  F019         	call	___lwmod	;wreg free
  3322  001E14  0100               	movlb	0	; () banked
  3323  001E16  51C9               	movf	?___lwmod& (0+255),w,b
  3324  001E18  0F30               	addlw	48
  3325  001E1A  6FE5               	movwf	printf@c& (0+255),b
  3326                           
  3327                           ;doprnt.c: 1491: break;
  3328  001E1C  D033               	goto	l833
  3329  001E1E                     
  3330                           ; BSR set to: 0
  3331                           ;doprnt.c: 1499: {
  3332                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3333                           
  3334                           ; BSR set to: 0
  3335  001E1E  C0E0  F0C2         	movff	printf@val,___lwdiv@dividend
  3336  001E22  C0E1  F0C3         	movff	printf@val+1,___lwdiv@dividend+1
  3337  001E26  51D9               	movf	printf@prec& (0+255),w,b
  3338  001E28  0D02               	mullw	2
  3339  001E2A  0E12               	movlw	low _hexpowers
  3340  001E2C  24F3               	addwf	prodl,w,c
  3341  001E2E  6EF6               	movwf	tblptrl,c
  3342  001E30  0EFE               	movlw	high _hexpowers
  3343  001E32  20F4               	addwfc	prodh,w,c
  3344  001E34  6EF7               	movwf	tblptrh,c
  3345  001E36                     	if	1	;There are 3 active tblptr bytes
  3346  001E36  6AF8               	clrf	tblptru,c
  3347  001E38  0E00               	movlw	low (__mediumconst shr (0+16))
  3348  001E3A  22F8               	addwfc	tblptru,f,c
  3349  001E3C                     	endif
  3350  001E3C  0009               	tblrd		*+
  3351  001E3E  CFF5 F0C4          	movff	tablat,___lwdiv@divisor
  3352  001E42  000A               	tblrd		*-
  3353  001E44  CFF5 F0C5          	movff	tablat,___lwdiv@divisor+1
  3354  001E48  ECC8  F018         	call	___lwdiv	;wreg free
  3355  001E4C  0100               	movlb	0	; () banked
  3356  001E4E  51C2               	movf	?___lwdiv& (0+255),w,b
  3357  001E50  0B0F               	andlw	15
  3358  001E52  6FD8               	movwf	printf@idx& (0+255),b
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3362  001E54  51D8               	movf	printf@idx& (0+255),w,b
  3363  001E56  0D01               	mullw	1
  3364  001E58  0EB6               	movlw	low STR_55
  3365  001E5A  24F3               	addwf	prodl,w,c
  3366  001E5C  6EF6               	movwf	tblptrl,c
  3367  001E5E  0EFE               	movlw	high STR_55
  3368  001E60  20F4               	addwfc	prodh,w,c
  3369  001E62  6EF7               	movwf	tblptrh,c
  3370  001E64                     	if	1	;There are 3 active tblptr bytes
  3371  001E64  6AF8               	clrf	tblptru,c
  3372  001E66  0E00               	movlw	low (__mediumconst shr (0+16))
  3373  001E68  22F8               	addwfc	tblptru,f,c
  3374  001E6A                     	endif
  3375  001E6A  0008               	tblrd		*
  3376  001E6C  CFF5 F0E5          	movff	tablat,printf@c
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;doprnt.c: 1523: }
  3380                           
  3381                           ;doprnt.c: 1508: }
  3382                           ;doprnt.c: 1510: break;
  3383  001E70  D009               	goto	l833
  3384  001E72                     
  3385                           ; BSR set to: 0
  3386  001E72  0100               	movlb	0	; () banked
  3387  001E74  51E2               	movf	printf@flag& (0+255),w,b
  3388  001E76  0B80               	andlw	128
  3389                           
  3390                           ; Switch size 1, requested type "space"
  3391                           ; Number of cases is 2, Range of values is 0 to 128
  3392                           ; switch strategies available:
  3393                           ; Name         Instructions Cycles
  3394                           ; simple_byte            7     4 (average)
  3395                           ;	Chosen strategy is simple_byte
  3396  001E78  0A00               	xorlw	0	; case 0
  3397  001E7A  B4D8               	btfsc	status,2,c
  3398  001E7C  D7A8               	goto	l832
  3399  001E7E  0A80               	xorlw	128	; case 128
  3400  001E80  B4D8               	btfsc	status,2,c
  3401  001E82  D7CD               	goto	l834
  3402  001E84                     l833:
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;doprnt.c: 1524: (putch(c) );
  3406                           
  3407                           ; BSR set to: 0
  3408  001E84  51E5               	movf	printf@c& (0+255),w,b
  3409  001E86  ECB1  F01A         	call	_putch
  3410  001E8A                     l829:
  3411  001E8A  0100               	movlb	0	; () banked
  3412  001E8C  07D9               	decf	printf@prec& (0+255),f,b
  3413  001E8E  29D9               	incf	printf@prec& (0+255),w,b
  3414  001E90  A4D8               	btfss	status,2,c
  3415  001E92  D7EF               	goto	l831
  3416  001E94                     u2920:
  3417                           
  3418                           ; BSR set to: 0
  3419                           
  3420                           ; BSR set to: 0
  3421  001E94  C0D0  FFF6         	movff	printf@f,tblptrl
  3422  001E98  C0D1  FFF7         	movff	printf@f+1,tblptrh
  3423  001E9C  0100               	movlb	0	; () banked
  3424  001E9E  4BD0               	infsnz	printf@f& (0+255),f,b
  3425  001EA0  2BD1               	incf	(printf@f+1)& (0+255),f,b
  3426  001EA2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3427  001EA2  6AF8               	clrf	tblptru,c
  3428  001EA4                     	endif
  3429  001EA4                     	if	0	;tblptru may be non-zero
  3430  001EA4                     	endif
  3431  001EA4  0008               	tblrd		*
  3432  001EA6  CFF5 F0E5          	movff	tablat,printf@c
  3433  001EAA  51E5               	movf	printf@c& (0+255),w,b
  3434  001EAC  B4D8               	btfsc	status,2,c
  3435  001EAE  0012               	return	
  3436  001EB0  D5E2               	goto	l771
  3437  001EB2                     __end_of_printf:
  3438                           	opt stack 0
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           intcon3	equ	0xFF0
  3447                           indf0	equ	0xFEF
  3448                           postinc0	equ	0xFEE
  3449                           fsr0h	equ	0xFEA
  3450                           fsr0l	equ	0xFE9
  3451                           wreg	equ	0xFE8
  3452                           postdec1	equ	0xFE5
  3453                           fsr1l	equ	0xFE1
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _putch *****************
  3461 ;; Defined at:
  3462 ;;		line 24 in file "lcd.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  data            1    wreg     unsigned char 
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  data            1    2[BANK0 ] unsigned char 
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  1    wreg      void 
  3469 ;; Registers used:
  3470 ;;		wreg, status,2, status,0, cstack
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;Total ram usage:        1 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    5
  3483 ;; This function calls:
  3484 ;;		_lcdNibble
  3485 ;; This function is called by:
  3486 ;;		_printf
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text2
  3491  003562                     __ptext2:
  3492                           	opt stack 0
  3493  003562                     _putch:
  3494                           	opt stack 24
  3495                           
  3496                           ;incstack = 0
  3497                           ;putch@data stored from wreg
  3498  003562  0100               	movlb	0	; () banked
  3499  003564  6FC4               	movwf	putch@data& (0+255),b
  3500                           
  3501                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3502  003566  848C               	bsf	3980,2,c	;volatile
  3503                           
  3504                           ;lcd.c: 33: lcdNibble(data);
  3505  003568  0100               	movlb	0	; () banked
  3506  00356A  51C4               	movf	putch@data& (0+255),w,b
  3507  00356C  EC2D  F016         	call	_lcdNibble
  3508                           
  3509                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3510  003570  0EC8               	movlw	200
  3511  003572                     u4647:
  3512  003572  D000               	nop2	
  3513  003574  2EE8               	decfsz	wreg,f,c
  3514  003576  D7FD               	bra	u4647
  3515  003578  0012               	return		;funcret
  3516  00357A                     __end_of_putch:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           intcon3	equ	0xFF0
  3526                           indf0	equ	0xFEF
  3527                           postinc0	equ	0xFEE
  3528                           fsr0h	equ	0xFEA
  3529                           fsr0l	equ	0xFE9
  3530                           wreg	equ	0xFE8
  3531                           postdec1	equ	0xFE5
  3532                           fsr1l	equ	0xFE1
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _isdigit *****************
  3540 ;; Defined at:
  3541 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  c               1    wreg     unsigned char 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  c               1    2[BANK0 ] unsigned char 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;		None               void
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;Total ram usage:        3 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    4
  3562 ;; This function calls:
  3563 ;;		Nothing
  3564 ;; This function is called by:
  3565 ;;		_printf
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text3
  3570  003522                     __ptext3:
  3571                           	opt stack 0
  3572  003522                     _isdigit:
  3573                           	opt stack 25
  3574                           
  3575                           ;incstack = 0
  3576                           ;isdigit@c stored from wreg
  3577  003522  0100               	movlb	0	; () banked
  3578  003524  6FC4               	movwf	isdigit@c& (0+255),b
  3579  003526  0E00               	movlw	0
  3580  003528  0100               	movlb	0	; () banked
  3581  00352A  6FC3               	movwf	_isdigit$1238& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584  00352C  0E3A               	movlw	58
  3585  00352E  61C4               	cpfslt	isdigit@c& (0+255),b
  3586  003530  D005               	goto	l1167
  3587                           
  3588                           ; BSR set to: 0
  3589  003532  0E2F               	movlw	47
  3590  003534  65C4               	cpfsgt	isdigit@c& (0+255),b
  3591  003536  D002               	goto	l1167
  3592                           
  3593                           ; BSR set to: 0
  3594  003538  0E01               	movlw	1
  3595  00353A  6FC3               	movwf	_isdigit$1238& (0+255),b
  3596  00353C                     l1167:
  3597                           
  3598                           ; BSR set to: 0
  3599                           
  3600                           ; BSR set to: 0
  3601  00353C  C0C3  F0C2         	movff	_isdigit$1238,??_isdigit
  3602  003540  31C2               	rrcf	??_isdigit& (0+255),w,b
  3603  003542  0012               	return	
  3604  003544                     __end_of_isdigit:
  3605                           	opt stack 0
  3606                           tblptru	equ	0xFF8
  3607                           tblptrh	equ	0xFF7
  3608                           tblptrl	equ	0xFF6
  3609                           tablat	equ	0xFF5
  3610                           prodh	equ	0xFF4
  3611                           prodl	equ	0xFF3
  3612                           intcon	equ	0xFF2
  3613                           intcon3	equ	0xFF0
  3614                           indf0	equ	0xFEF
  3615                           postinc0	equ	0xFEE
  3616                           fsr0h	equ	0xFEA
  3617                           fsr0l	equ	0xFE9
  3618                           wreg	equ	0xFE8
  3619                           postdec1	equ	0xFE5
  3620                           fsr1l	equ	0xFE1
  3621                           postinc2	equ	0xFDE
  3622                           postdec2	equ	0xFDD
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function ___lwmod *****************
  3628 ;; Defined at:
  3629 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  dividend        2    7[BANK0 ] unsigned int 
  3632 ;;  divisor         2    9[BANK0 ] unsigned int 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  counter         1   11[BANK0 ] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  2    7[BANK0 ] unsigned int 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3644 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;Total ram usage:        5 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    4
  3651 ;; This function calls:
  3652 ;;		Nothing
  3653 ;; This function is called by:
  3654 ;;		_printf
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text4
  3659  00335E                     __ptext4:
  3660                           	opt stack 0
  3661  00335E                     ___lwmod:
  3662                           	opt stack 25
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;incstack = 0
  3666  00335E  0100               	movlb	0	; () banked
  3667  003360  51CB               	movf	___lwmod@divisor& (0+255),w,b
  3668  003362  11CC               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3669  003364  B4D8               	btfsc	status,2,c
  3670  003366  D018               	goto	l1261
  3671                           
  3672                           ; BSR set to: 0
  3673  003368  0E01               	movlw	1
  3674  00336A  6FCD               	movwf	___lwmod@counter& (0+255),b
  3675  00336C  D004               	goto	l1256
  3676  00336E                     
  3677                           ; BSR set to: 0
  3678                           
  3679                           ; BSR set to: 0
  3680  00336E  90D8               	bcf	status,0,c
  3681  003370  37CB               	rlcf	___lwmod@divisor& (0+255),f,b
  3682  003372  37CC               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3683  003374  2BCD               	incf	___lwmod@counter& (0+255),f,b
  3684  003376                     l1256:
  3685                           
  3686                           ; BSR set to: 0
  3687                           
  3688                           ; BSR set to: 0
  3689  003376  AFCC               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3690  003378  D7FA               	goto	l1257
  3691  00337A                     u2480:
  3692                           
  3693                           ; BSR set to: 0
  3694                           
  3695                           ; BSR set to: 0
  3696                           
  3697                           ; BSR set to: 0
  3698  00337A  51CB               	movf	___lwmod@divisor& (0+255),w,b
  3699  00337C  5DC9               	subwf	___lwmod@dividend& (0+255),w,b
  3700  00337E  51CC               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3701  003380  59CA               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3702  003382  A0D8               	btfss	status,0,c
  3703  003384  D004               	goto	l1260
  3704                           
  3705                           ; BSR set to: 0
  3706  003386  51CB               	movf	___lwmod@divisor& (0+255),w,b
  3707  003388  5FC9               	subwf	___lwmod@dividend& (0+255),f,b
  3708  00338A  51CC               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3709  00338C  5BCA               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3710  00338E                     l1260:
  3711                           
  3712                           ; BSR set to: 0
  3713                           
  3714                           ; BSR set to: 0
  3715  00338E  90D8               	bcf	status,0,c
  3716  003390  33CC               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3717  003392  33CB               	rrcf	___lwmod@divisor& (0+255),f,b
  3718                           
  3719                           ; BSR set to: 0
  3720  003394  2FCD               	decfsz	___lwmod@counter& (0+255),f,b
  3721  003396  D7F1               	goto	u2480
  3722  003398                     l1261:
  3723                           
  3724                           ; BSR set to: 0
  3725                           
  3726                           ; BSR set to: 0
  3727  003398  C0C9  F0C9         	movff	___lwmod@dividend,?___lwmod
  3728  00339C  C0CA  F0CA         	movff	___lwmod@dividend+1,?___lwmod+1
  3729                           
  3730                           ; BSR set to: 0
  3731  0033A0  0012               	return		;funcret
  3732  0033A2                     __end_of___lwmod:
  3733                           	opt stack 0
  3734                           tblptru	equ	0xFF8
  3735                           tblptrh	equ	0xFF7
  3736                           tblptrl	equ	0xFF6
  3737                           tablat	equ	0xFF5
  3738                           prodh	equ	0xFF4
  3739                           prodl	equ	0xFF3
  3740                           intcon	equ	0xFF2
  3741                           intcon3	equ	0xFF0
  3742                           indf0	equ	0xFEF
  3743                           postinc0	equ	0xFEE
  3744                           fsr0h	equ	0xFEA
  3745                           fsr0l	equ	0xFE9
  3746                           wreg	equ	0xFE8
  3747                           postdec1	equ	0xFE5
  3748                           fsr1l	equ	0xFE1
  3749                           postinc2	equ	0xFDE
  3750                           postdec2	equ	0xFDD
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function ___lwdiv *****************
  3756 ;; Defined at:
  3757 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  dividend        2    0[BANK0 ] unsigned int 
  3760 ;;  divisor         2    2[BANK0 ] unsigned int 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  quotient        2    4[BANK0 ] unsigned int 
  3763 ;;  counter         1    6[BANK0 ] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  2    0[BANK0 ] unsigned int 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3773 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;Total ram usage:        7 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    4
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_printf
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text5
  3788  003190                     __ptext5:
  3789                           	opt stack 0
  3790  003190                     ___lwdiv:
  3791                           	opt stack 25
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;incstack = 0
  3795  003190  0E00               	movlw	0
  3796  003192  0100               	movlb	0	; () banked
  3797  003194  6FC7               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3798  003196  0E00               	movlw	0
  3799  003198  6FC6               	movwf	___lwdiv@quotient& (0+255),b
  3800                           
  3801                           ; BSR set to: 0
  3802  00319A  51C4               	movf	___lwdiv@divisor& (0+255),w,b
  3803  00319C  11C5               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3804  00319E  B4D8               	btfsc	status,2,c
  3805  0031A0  D01C               	goto	l1251
  3806                           
  3807                           ; BSR set to: 0
  3808  0031A2  0E01               	movlw	1
  3809  0031A4  6FC8               	movwf	___lwdiv@counter& (0+255),b
  3810  0031A6  D004               	goto	l1246
  3811  0031A8                     
  3812                           ; BSR set to: 0
  3813                           
  3814                           ; BSR set to: 0
  3815  0031A8  90D8               	bcf	status,0,c
  3816  0031AA  37C4               	rlcf	___lwdiv@divisor& (0+255),f,b
  3817  0031AC  37C5               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3818  0031AE  2BC8               	incf	___lwdiv@counter& (0+255),f,b
  3819  0031B0                     l1246:
  3820                           
  3821                           ; BSR set to: 0
  3822                           
  3823                           ; BSR set to: 0
  3824  0031B0  AFC5               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3825  0031B2  D7FA               	goto	l1247
  3826  0031B4                     u2450:
  3827                           
  3828                           ; BSR set to: 0
  3829                           
  3830                           ; BSR set to: 0
  3831                           
  3832                           ; BSR set to: 0
  3833  0031B4  90D8               	bcf	status,0,c
  3834  0031B6  37C6               	rlcf	___lwdiv@quotient& (0+255),f,b
  3835  0031B8  37C7               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3836                           
  3837                           ; BSR set to: 0
  3838  0031BA  51C4               	movf	___lwdiv@divisor& (0+255),w,b
  3839  0031BC  5DC2               	subwf	___lwdiv@dividend& (0+255),w,b
  3840  0031BE  51C5               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3841  0031C0  59C3               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3842  0031C2  A0D8               	btfss	status,0,c
  3843  0031C4  D005               	goto	l1250
  3844                           
  3845                           ; BSR set to: 0
  3846  0031C6  51C4               	movf	___lwdiv@divisor& (0+255),w,b
  3847  0031C8  5FC2               	subwf	___lwdiv@dividend& (0+255),f,b
  3848  0031CA  51C5               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3849  0031CC  5BC3               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3850                           
  3851                           ; BSR set to: 0
  3852  0031CE  81C6               	bsf	___lwdiv@quotient& (0+255),0,b
  3853  0031D0                     l1250:
  3854                           
  3855                           ; BSR set to: 0
  3856                           
  3857                           ; BSR set to: 0
  3858  0031D0  90D8               	bcf	status,0,c
  3859  0031D2  33C5               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3860  0031D4  33C4               	rrcf	___lwdiv@divisor& (0+255),f,b
  3861                           
  3862                           ; BSR set to: 0
  3863  0031D6  2FC8               	decfsz	___lwdiv@counter& (0+255),f,b
  3864  0031D8  D7ED               	goto	u2450
  3865  0031DA                     l1251:
  3866                           
  3867                           ; BSR set to: 0
  3868                           
  3869                           ; BSR set to: 0
  3870  0031DA  C0C6  F0C2         	movff	___lwdiv@quotient,?___lwdiv
  3871  0031DE  C0C7  F0C3         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3872                           
  3873                           ; BSR set to: 0
  3874  0031E2  0012               	return		;funcret
  3875  0031E4                     __end_of___lwdiv:
  3876                           	opt stack 0
  3877                           tblptru	equ	0xFF8
  3878                           tblptrh	equ	0xFF7
  3879                           tblptrl	equ	0xFF6
  3880                           tablat	equ	0xFF5
  3881                           prodh	equ	0xFF4
  3882                           prodl	equ	0xFF3
  3883                           intcon	equ	0xFF2
  3884                           intcon3	equ	0xFF0
  3885                           indf0	equ	0xFEF
  3886                           postinc0	equ	0xFEE
  3887                           fsr0h	equ	0xFEA
  3888                           fsr0l	equ	0xFE9
  3889                           wreg	equ	0xFE8
  3890                           postdec1	equ	0xFE5
  3891                           fsr1l	equ	0xFE1
  3892                           postinc2	equ	0xFDE
  3893                           postdec2	equ	0xFDD
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _initialize *****************
  3899 ;; Defined at:
  3900 ;;		line 1089 in file "main.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;Total ram usage:        0 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    4
  3921 ;; This function calls:
  3922 ;;		Nothing
  3923 ;; This function is called by:
  3924 ;;		_main
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	text6
  3929  002940                     __ptext6:
  3930                           	opt stack 0
  3931  002940                     _initialize:
  3932                           	opt stack 26
  3933                           
  3934                           ;main.c: 1090: white_tape = 0;
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;incstack = 0
  3938  002940  0E00               	movlw	0
  3939  002942  0100               	movlb	0	; () banked
  3940  002944  6FB3               	movwf	(_white_tape+1)& (0+255),b
  3941  002946  0E00               	movlw	0
  3942  002948  6FB2               	movwf	_white_tape& (0+255),b
  3943                           
  3944                           ;main.c: 1091: mode = 0;
  3945  00294A  0E00               	movlw	0
  3946  00294C  6FFB               	movwf	(_mode+1)& (0+255),b
  3947  00294E  0E00               	movlw	0
  3948  002950  6FFA               	movwf	_mode& (0+255),b
  3949                           
  3950                           ;main.c: 1092: state = 0;
  3951  002952  0E00               	movlw	0
  3952  002954  6E64               	movwf	_state+1,c
  3953  002956  0E00               	movlw	0
  3954  002958  6E63               	movwf	_state,c
  3955                           
  3956                           ;main.c: 1093: assembly_step = 0;
  3957  00295A  0E00               	movlw	0
  3958  00295C  6FA3               	movwf	(_assembly_step+1)& (0+255),b
  3959  00295E  0E00               	movlw	0
  3960  002960  6FA2               	movwf	_assembly_step& (0+255),b
  3961                           
  3962                           ;main.c: 1094: counter_step = 0;
  3963  002962  0E00               	movlw	0
  3964  002964  6E62               	movwf	_counter_step+1,c
  3965  002966  0E00               	movlw	0
  3966  002968  6E61               	movwf	_counter_step,c
  3967                           
  3968                           ;main.c: 1096: valid = 0;
  3969  00296A  0E00               	movlw	0
  3970  00296C  6F9F               	movwf	(_valid+1)& (0+255),b
  3971  00296E  0E00               	movlw	0
  3972  002970  6F9E               	movwf	_valid& (0+255),b
  3973                           
  3974                           ;main.c: 1097: number = 0;
  3975  002972  0E00               	movlw	0
  3976  002974  6E71               	movwf	_number+1,c
  3977  002976  0E00               	movlw	0
  3978  002978  6E70               	movwf	_number,c
  3979                           
  3980                           ;main.c: 1098: total_number=0;
  3981  00297A  0E00               	movlw	0
  3982  00297C  6F9D               	movwf	(_total_number+1)& (0+255),b
  3983  00297E  0E00               	movlw	0
  3984  002980  6F9C               	movwf	_total_number& (0+255),b
  3985                           
  3986                           ;main.c: 1100: B=0,N=0,S=0,W=0;
  3987  002982  0E00               	movlw	0
  3988  002984  6E60               	movwf	_B+1,c
  3989  002986  0E00               	movlw	0
  3990  002988  6E5F               	movwf	_B,c
  3991  00298A  0E00               	movlw	0
  3992  00298C  6E5E               	movwf	_N+1,c
  3993  00298E  0E00               	movlw	0
  3994  002990  6E5D               	movwf	_N,c
  3995  002992  0E00               	movlw	0
  3996  002994  6E5C               	movwf	_S+1,c
  3997  002996  0E00               	movlw	0
  3998  002998  6E5B               	movwf	_S,c
  3999  00299A  0E00               	movlw	0
  4000  00299C  6E5A               	movwf	_W+1,c
  4001  00299E  0E00               	movlw	0
  4002  0029A0  6E59               	movwf	_W,c
  4003                           
  4004                           ;main.c: 1102: B_counter= 0;
  4005  0029A2  0E00               	movlw	0
  4006  0029A4  0101               	movlb	1	; () banked
  4007  0029A6  6F45               	movwf	(_B_counter+1)& (0+255),b
  4008  0029A8  0E00               	movlw	0
  4009  0029AA  6F44               	movwf	_B_counter& (0+255),b
  4010                           
  4011                           ;main.c: 1103: S_counter= 0;
  4012  0029AC  0E00               	movlw	0
  4013  0029AE  0100               	movlb	0	; () banked
  4014  0029B0  6F99               	movwf	(_S_counter+1)& (0+255),b
  4015  0029B2  0E00               	movlw	0
  4016  0029B4  6F98               	movwf	_S_counter& (0+255),b
  4017                           
  4018                           ;main.c: 1104: N_counter= 0;
  4019  0029B6  0E00               	movlw	0
  4020  0029B8  0101               	movlb	1	; () banked
  4021  0029BA  6F43               	movwf	(_N_counter+1)& (0+255),b
  4022  0029BC  0E00               	movlw	0
  4023  0029BE  6F42               	movwf	_N_counter& (0+255),b
  4024                           
  4025                           ;main.c: 1105: W_counter= 0;
  4026  0029C0  0E00               	movlw	0
  4027  0029C2  6F41               	movwf	(_W_counter+1)& (0+255),b
  4028  0029C4  0E00               	movlw	0
  4029  0029C6  6F40               	movwf	_W_counter& (0+255),b
  4030                           
  4031                           ;main.c: 1108: initial_time = 0;
  4032  0029C8  0E00               	movlw	0
  4033  0029CA  0100               	movlb	0	; () banked
  4034  0029CC  6F89               	movwf	(_initial_time+1)& (0+255),b
  4035  0029CE  0E00               	movlw	0
  4036  0029D0  6F88               	movwf	_initial_time& (0+255),b
  4037                           
  4038                           ;main.c: 1109: final_time = 0;
  4039  0029D2  0E00               	movlw	0
  4040  0029D4  6F81               	movwf	(_final_time+1)& (0+255),b
  4041  0029D6  0E00               	movlw	0
  4042  0029D8  6F80               	movwf	_final_time& (0+255),b
  4043                           
  4044                           ;main.c: 1111: for (i=0;i<8;i++){
  4045  0029DA  0E00               	movlw	0
  4046  0029DC  6E66               	movwf	_i+1,c
  4047  0029DE  0E00               	movlw	0
  4048  0029E0  6E65               	movwf	_i,c
  4049  0029E2                     l3946:
  4050                           
  4051                           ; BSR set to: 0
  4052  0029E2  5066               	movf	_i+1,w,c
  4053  0029E4  E155               	bnz	l417
  4054  0029E6  0E08               	movlw	8
  4055  0029E8  5C65               	subwf	_i,w,c
  4056  0029EA  B0D8               	btfsc	status,0,c
  4057  0029EC  0012               	return	
  4058                           
  4059                           ;main.c: 1112: compartment_array[i] = 0;
  4060                           
  4061                           ; BSR set to: 0
  4062                           
  4063                           ; BSR set to: 0
  4064  0029EE  90D8               	bcf	status,0,c
  4065  0029F0  3465               	rlcf	_i,w,c
  4066  0029F2  6ED9               	movwf	fsr2l,c
  4067  0029F4  3466               	rlcf	_i+1,w,c
  4068  0029F6  6EDA               	movwf	fsr2h,c
  4069  0029F8  0EE8               	movlw	low _compartment_array
  4070  0029FA  26D9               	addwf	fsr2l,f,c
  4071  0029FC  0E00               	movlw	high _compartment_array
  4072  0029FE  22DA               	addwfc	fsr2h,f,c
  4073  002A00  0E00               	movlw	0
  4074  002A02  6EDE               	movwf	postinc2,c
  4075  002A04  0E00               	movlw	0
  4076  002A06  6EDD               	movwf	postdec2,c
  4077                           
  4078                           ;main.c: 1113: compartment_number[i] = 0;
  4079  002A08  90D8               	bcf	status,0,c
  4080  002A0A  3465               	rlcf	_i,w,c
  4081  002A0C  6ED9               	movwf	fsr2l,c
  4082  002A0E  3466               	rlcf	_i+1,w,c
  4083  002A10  6EDA               	movwf	fsr2h,c
  4084  002A12  0E42               	movlw	low _compartment_number
  4085  002A14  26D9               	addwf	fsr2l,f,c
  4086  002A16  0E00               	movlw	high _compartment_number
  4087  002A18  22DA               	addwfc	fsr2h,f,c
  4088  002A1A  0E00               	movlw	0
  4089  002A1C  6EDE               	movwf	postinc2,c
  4090  002A1E  0E00               	movlw	0
  4091  002A20  6EDD               	movwf	postdec2,c
  4092                           
  4093                           ;main.c: 1114: B_array[i] = 0;
  4094  002A22  90D8               	bcf	status,0,c
  4095  002A24  3465               	rlcf	_i,w,c
  4096  002A26  6ED9               	movwf	fsr2l,c
  4097  002A28  3466               	rlcf	_i+1,w,c
  4098  002A2A  6EDA               	movwf	fsr2h,c
  4099  002A2C  0EB8               	movlw	low _B_array
  4100  002A2E  26D9               	addwf	fsr2l,f,c
  4101  002A30  0E01               	movlw	high _B_array
  4102  002A32  22DA               	addwfc	fsr2h,f,c
  4103  002A34  0E00               	movlw	0
  4104  002A36  6EDE               	movwf	postinc2,c
  4105  002A38  0E00               	movlw	0
  4106  002A3A  6EDD               	movwf	postdec2,c
  4107                           
  4108                           ;main.c: 1115: N_array[i] = 0;
  4109  002A3C  90D8               	bcf	status,0,c
  4110  002A3E  3465               	rlcf	_i,w,c
  4111  002A40  6ED9               	movwf	fsr2l,c
  4112  002A42  3466               	rlcf	_i+1,w,c
  4113  002A44  6EDA               	movwf	fsr2h,c
  4114  002A46  0E98               	movlw	low _N_array
  4115  002A48  26D9               	addwf	fsr2l,f,c
  4116  002A4A  0E01               	movlw	high _N_array
  4117  002A4C  22DA               	addwfc	fsr2h,f,c
  4118  002A4E  0E00               	movlw	0
  4119  002A50  6EDE               	movwf	postinc2,c
  4120  002A52  0E00               	movlw	0
  4121  002A54  6EDD               	movwf	postdec2,c
  4122                           
  4123                           ;main.c: 1116: S_array[i] = 0;
  4124  002A56  90D8               	bcf	status,0,c
  4125  002A58  3465               	rlcf	_i,w,c
  4126  002A5A  6ED9               	movwf	fsr2l,c
  4127  002A5C  3466               	rlcf	_i+1,w,c
  4128  002A5E  6EDA               	movwf	fsr2h,c
  4129  002A60  0EA8               	movlw	low _S_array
  4130  002A62  26D9               	addwf	fsr2l,f,c
  4131  002A64  0E01               	movlw	high _S_array
  4132  002A66  22DA               	addwfc	fsr2h,f,c
  4133  002A68  0E00               	movlw	0
  4134  002A6A  6EDE               	movwf	postinc2,c
  4135  002A6C  0E00               	movlw	0
  4136  002A6E  6EDD               	movwf	postdec2,c
  4137                           
  4138                           ;main.c: 1117: W_array[i] = 0;
  4139  002A70  90D8               	bcf	status,0,c
  4140  002A72  3465               	rlcf	_i,w,c
  4141  002A74  6ED9               	movwf	fsr2l,c
  4142  002A76  3466               	rlcf	_i+1,w,c
  4143  002A78  6EDA               	movwf	fsr2h,c
  4144  002A7A  0E00               	movlw	low _W_array
  4145  002A7C  26D9               	addwf	fsr2l,f,c
  4146  002A7E  0E01               	movlw	high _W_array
  4147  002A80  22DA               	addwfc	fsr2h,f,c
  4148  002A82  0E00               	movlw	0
  4149  002A84  6EDE               	movwf	postinc2,c
  4150  002A86  0E00               	movlw	0
  4151  002A88  6EDD               	movwf	postdec2,c
  4152  002A8A  4A65               	infsnz	_i,f,c
  4153  002A8C  2A66               	incf	_i+1,f,c
  4154  002A8E  D7A9               	goto	l3946
  4155  002A90                     l417:
  4156  002A90  0012               	return		;funcret
  4157  002A92                     __end_of_initialize:
  4158                           	opt stack 0
  4159                           tblptru	equ	0xFF8
  4160                           tblptrh	equ	0xFF7
  4161                           tblptrl	equ	0xFF6
  4162                           tablat	equ	0xFF5
  4163                           prodh	equ	0xFF4
  4164                           prodl	equ	0xFF3
  4165                           intcon	equ	0xFF2
  4166                           intcon3	equ	0xFF0
  4167                           indf0	equ	0xFEF
  4168                           postinc0	equ	0xFEE
  4169                           fsr0h	equ	0xFEA
  4170                           fsr0l	equ	0xFE9
  4171                           wreg	equ	0xFE8
  4172                           postdec1	equ	0xFE5
  4173                           fsr1l	equ	0xFE1
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           fsr2h	equ	0xFDA
  4177                           fsr2l	equ	0xFD9
  4178                           status	equ	0xFD8
  4179                           
  4180 ;; *************** function _initLCD *****************
  4181 ;; Defined at:
  4182 ;;		line 60 in file "lcd.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      void 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2, status,0, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;Total ram usage:        1 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    6
  4203 ;; This function calls:
  4204 ;;		_lcdInst
  4205 ;; This function is called by:
  4206 ;;		_main
  4207 ;;		_count_gear
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text7
  4212  003236                     __ptext7:
  4213                           	opt stack 0
  4214  003236                     _initLCD:
  4215                           	opt stack 24
  4216                           
  4217                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  4218                           
  4219                           ;incstack = 0
  4220  003236  0EC3               	movlw	195
  4221  003238  0100               	movlb	0	; () banked
  4222  00323A  6FC5               	movwf	??_initLCD& (0+255),b
  4223  00323C  0ECD               	movlw	205
  4224  00323E                     u4657:
  4225  00323E  2EE8               	decfsz	wreg,f,c
  4226  003240  D7FE               	bra	u4657
  4227  003242  2FC5               	decfsz	??_initLCD& (0+255),f,b
  4228  003244  D7FC               	bra	u4657
  4229                           
  4230                           ;lcd.c: 69: lcdInst(0b00110011);
  4231  003246  0E33               	movlw	51
  4232  003248  ECBD  F01A         	call	_lcdInst
  4233                           
  4234                           ;lcd.c: 70: lcdInst(0b00110010);
  4235  00324C  0E32               	movlw	50
  4236  00324E  ECBD  F01A         	call	_lcdInst
  4237                           
  4238                           ;lcd.c: 71: lcdInst(0b00101000);
  4239  003252  0E28               	movlw	40
  4240  003254  ECBD  F01A         	call	_lcdInst
  4241                           
  4242                           ;lcd.c: 72: lcdInst(0b00001111);
  4243  003258  0E0F               	movlw	15
  4244  00325A  ECBD  F01A         	call	_lcdInst
  4245                           
  4246                           ;lcd.c: 73: lcdInst(0b00000110);
  4247  00325E  0E06               	movlw	6
  4248  003260  ECBD  F01A         	call	_lcdInst
  4249                           
  4250                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4251  003264  0E01               	movlw	1
  4252  003266  ECBD  F01A         	call	_lcdInst
  4253  00326A  0EC3               	movlw	195
  4254  00326C  0100               	movlb	0	; () banked
  4255  00326E  6FC5               	movwf	??_initLCD& (0+255),b
  4256  003270  0ECD               	movlw	205
  4257  003272                     u4667:
  4258  003272  2EE8               	decfsz	wreg,f,c
  4259  003274  D7FE               	bra	u4667
  4260  003276  2FC5               	decfsz	??_initLCD& (0+255),f,b
  4261  003278  D7FC               	bra	u4667
  4262                           
  4263                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4264  00327A  0E0F               	movlw	15
  4265  00327C  ECBD  F01A         	call	_lcdInst
  4266  003280  0012               	return		;funcret
  4267  003282                     __end_of_initLCD:
  4268                           	opt stack 0
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon	equ	0xFF2
  4276                           intcon3	equ	0xFF0
  4277                           indf0	equ	0xFEF
  4278                           postinc0	equ	0xFEE
  4279                           fsr0h	equ	0xFEA
  4280                           fsr0l	equ	0xFE9
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           fsr1l	equ	0xFE1
  4284                           postinc2	equ	0xFDE
  4285                           postdec2	equ	0xFDD
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290 ;; *************** function _lcdInst *****************
  4291 ;; Defined at:
  4292 ;;		line 11 in file "lcd.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  data            1    wreg     unsigned char 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;  data            1    2[BANK0 ] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  1    wreg      void 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;Total ram usage:        1 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    5
  4313 ;; This function calls:
  4314 ;;		_lcdNibble
  4315 ;; This function is called by:
  4316 ;;		_initLCD
  4317 ;;		_main
  4318 ;;		_lcd_set_cursor
  4319 ;;		_lcd_shift_cursor
  4320 ;;		_lcd_shift_display
  4321 ;;		_count_gear
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text8
  4326  00357A                     __ptext8:
  4327                           	opt stack 0
  4328  00357A                     _lcdInst:
  4329                           	opt stack 25
  4330                           
  4331                           ;incstack = 0
  4332                           ;lcdInst@data stored from wreg
  4333  00357A  0100               	movlb	0	; () banked
  4334  00357C  6FC4               	movwf	lcdInst@data& (0+255),b
  4335                           
  4336                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  4337  00357E  948C               	bcf	3980,2,c	;volatile
  4338                           
  4339                           ;lcd.c: 20: lcdNibble(data);
  4340  003580  0100               	movlb	0	; () banked
  4341  003582  51C4               	movf	lcdInst@data& (0+255),w,b
  4342  003584  EC2D  F016         	call	_lcdNibble
  4343                           
  4344                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4345  003588  0EC8               	movlw	200
  4346  00358A                     u4677:
  4347  00358A  D000               	nop2	
  4348  00358C  2EE8               	decfsz	wreg,f,c
  4349  00358E  D7FD               	bra	u4677
  4350  003590  0012               	return		;funcret
  4351  003592                     __end_of_lcdInst:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           intcon3	equ	0xFF0
  4361                           indf0	equ	0xFEF
  4362                           postinc0	equ	0xFEE
  4363                           fsr0h	equ	0xFEA
  4364                           fsr0l	equ	0xFE9
  4365                           wreg	equ	0xFE8
  4366                           postdec1	equ	0xFE5
  4367                           fsr1l	equ	0xFE1
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _lcdNibble *****************
  4375 ;; Defined at:
  4376 ;;		line 37 in file "lcd.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  data            1    wreg     unsigned char 
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  data            1    1[BANK0 ] unsigned char 
  4381 ;;  temp            1    0[BANK0 ] unsigned char 
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      void 
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;Total ram usage:        2 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    4
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_lcdInst
  4402 ;;		_putch
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text9
  4407  002C5A                     __ptext9:
  4408                           	opt stack 0
  4409  002C5A                     _lcdNibble:
  4410                           	opt stack 24
  4411                           
  4412                           ;incstack = 0
  4413                           ;lcdNibble@data stored from wreg
  4414  002C5A  0100               	movlb	0	; () banked
  4415  002C5C  6FC3               	movwf	lcdNibble@data& (0+255),b
  4416                           
  4417                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  4418  002C5E  0100               	movlb	0	; () banked
  4419  002C60  51C3               	movf	lcdNibble@data& (0+255),w,b
  4420  002C62  0BF0               	andlw	240
  4421  002C64  6FC2               	movwf	lcdNibble@temp& (0+255),b
  4422                           
  4423                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  4424  002C66  508C               	movf	3980,w,c	;volatile
  4425  002C68  0B0F               	andlw	15
  4426  002C6A  6E8C               	movwf	3980,c	;volatile
  4427                           
  4428                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  4429  002C6C  51C2               	movf	lcdNibble@temp& (0+255),w,b
  4430  002C6E  108C               	iorwf	3980,w,c	;volatile
  4431  002C70  6E8C               	movwf	3980,c	;volatile
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4435  002C72  0E00               	movlw	0
  4436  002C74  BEF2               	btfsc	intcon,7,c	;volatile
  4437  002C76  0E01               	movlw	1
  4438  002C78  6FB7               	movwf	_LCDinterruptState& (0+255),b
  4439                           
  4440                           ; BSR set to: 0
  4441  002C7A  9EF2               	bcf	intcon,7,c	;volatile
  4442                           
  4443                           ; BSR set to: 0
  4444  002C7C  868C               	bsf	3980,3,c	;volatile
  4445                           
  4446                           ; BSR set to: 0
  4447  002C7E  0E53               	movlw	83
  4448  002C80                     u4687:
  4449  002C80  2EE8               	decfsz	wreg,f,c
  4450  002C82  D7FE               	bra	u4687
  4451  002C84  F000               	nop	
  4452  002C86  968C               	bcf	3980,3,c	;volatile
  4453  002C88  0EC8               	movlw	200
  4454  002C8A                     u4697:
  4455  002C8A  D000               	nop2	
  4456  002C8C  2EE8               	decfsz	wreg,f,c
  4457  002C8E  D7FD               	bra	u4697
  4458  002C90  0100               	movlb	0	; () banked
  4459  002C92  B1B7               	btfsc	_LCDinterruptState& (0+255),0,b
  4460  002C94  D002               	bra	u2245
  4461  002C96  9EF2               	bcf	intcon,7,c	;volatile
  4462  002C98  D001               	bra	u2246
  4463  002C9A                     u2245:
  4464  002C9A  8EF2               	bsf	intcon,7,c	;volatile
  4465  002C9C                     u2246:
  4466                           
  4467                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  4468  002C9C  0100               	movlb	0	; () banked
  4469  002C9E  39C3               	swapf	lcdNibble@data& (0+255),w,b
  4470  002CA0  0BF0               	andlw	240
  4471  002CA2  6FC3               	movwf	lcdNibble@data& (0+255),b
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  4475  002CA4  51C3               	movf	lcdNibble@data& (0+255),w,b
  4476  002CA6  0BF0               	andlw	240
  4477  002CA8  6FC2               	movwf	lcdNibble@temp& (0+255),b
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  4481  002CAA  508C               	movf	3980,w,c	;volatile
  4482  002CAC  0B0F               	andlw	15
  4483  002CAE  6E8C               	movwf	3980,c	;volatile
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  4487  002CB0  51C2               	movf	lcdNibble@temp& (0+255),w,b
  4488  002CB2  108C               	iorwf	3980,w,c	;volatile
  4489  002CB4  6E8C               	movwf	3980,c	;volatile
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4493  002CB6  0E00               	movlw	0
  4494  002CB8  BEF2               	btfsc	intcon,7,c	;volatile
  4495  002CBA  0E01               	movlw	1
  4496  002CBC  6FB7               	movwf	_LCDinterruptState& (0+255),b
  4497                           
  4498                           ; BSR set to: 0
  4499  002CBE  9EF2               	bcf	intcon,7,c	;volatile
  4500                           
  4501                           ; BSR set to: 0
  4502  002CC0  868C               	bsf	3980,3,c	;volatile
  4503                           
  4504                           ; BSR set to: 0
  4505  002CC2  0E53               	movlw	83
  4506  002CC4                     u4707:
  4507  002CC4  2EE8               	decfsz	wreg,f,c
  4508  002CC6  D7FE               	bra	u4707
  4509  002CC8  F000               	nop	
  4510  002CCA  968C               	bcf	3980,3,c	;volatile
  4511  002CCC  0EC8               	movlw	200
  4512  002CCE                     u4717:
  4513  002CCE  D000               	nop2	
  4514  002CD0  2EE8               	decfsz	wreg,f,c
  4515  002CD2  D7FD               	bra	u4717
  4516  002CD4  0100               	movlb	0	; () banked
  4517  002CD6  B1B7               	btfsc	_LCDinterruptState& (0+255),0,b
  4518  002CD8  D002               	bra	u2255
  4519  002CDA  9EF2               	bcf	intcon,7,c	;volatile
  4520  002CDC  D001               	bra	u2256
  4521  002CDE                     u2255:
  4522  002CDE  8EF2               	bsf	intcon,7,c	;volatile
  4523  002CE0                     u2256:
  4524  002CE0  0012               	return		;funcret
  4525  002CE2                     __end_of_lcdNibble:
  4526                           	opt stack 0
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           intcon3	equ	0xFF0
  4535                           indf0	equ	0xFEF
  4536                           postinc0	equ	0xFEE
  4537                           fsr0h	equ	0xFEA
  4538                           fsr0l	equ	0xFE9
  4539                           wreg	equ	0xFE8
  4540                           postdec1	equ	0xFE5
  4541                           fsr1l	equ	0xFE1
  4542                           postinc2	equ	0xFDE
  4543                           postdec2	equ	0xFDD
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8
  4547                           
  4548 ;; *************** function _get_RTC_final *****************
  4549 ;; Defined at:
  4550 ;;		line 1244 in file "main.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;		None
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;		None
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      void 
  4557 ;; Registers used:
  4558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;Total ram usage:        1 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    6
  4571 ;; This function calls:
  4572 ;;		_I2C_Master_Read
  4573 ;;		_I2C_Master_Start
  4574 ;;		_I2C_Master_Stop
  4575 ;;		_I2C_Master_Write
  4576 ;;		___awdiv
  4577 ;;		___wmul
  4578 ;; This function is called by:
  4579 ;;		_main
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text10
  4584  002A92                     __ptext10:
  4585                           	opt stack 0
  4586  002A92                     _get_RTC_final:
  4587                           	opt stack 24
  4588                           
  4589                           ;main.c: 1245: I2C_Master_Start();
  4590                           
  4591                           ;incstack = 0
  4592  002A92  EC10  F01B         	call	_I2C_Master_Start	;wreg free
  4593                           
  4594                           ;main.c: 1246: I2C_Master_Write(0b11010000);
  4595  002A96  0E00               	movlw	0
  4596  002A98  0100               	movlb	0	; () banked
  4597  002A9A  6FC4               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4598  002A9C  0ED0               	movlw	208
  4599  002A9E  6FC3               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4600  002AA0  EC02  F01B         	call	_I2C_Master_Write	;wreg free
  4601                           
  4602                           ;main.c: 1247: I2C_Master_Write(0x00);
  4603  002AA4  0E00               	movlw	0
  4604  002AA6  0100               	movlb	0	; () banked
  4605  002AA8  6FC4               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4606  002AAA  0E00               	movlw	0
  4607  002AAC  6FC3               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4608  002AAE  EC02  F01B         	call	_I2C_Master_Write	;wreg free
  4609                           
  4610                           ;main.c: 1248: I2C_Master_Stop();
  4611  002AB2  EC0C  F01B         	call	_I2C_Master_Stop	;wreg free
  4612                           
  4613                           ;main.c: 1251: I2C_Master_Start();
  4614  002AB6  EC10  F01B         	call	_I2C_Master_Start	;wreg free
  4615                           
  4616                           ;main.c: 1252: I2C_Master_Write(0b11010001);
  4617  002ABA  0E00               	movlw	0
  4618  002ABC  0100               	movlb	0	; () banked
  4619  002ABE  6FC4               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4620  002AC0  0ED1               	movlw	209
  4621  002AC2  6FC3               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4622  002AC4  EC02  F01B         	call	_I2C_Master_Write	;wreg free
  4623                           
  4624                           ;main.c: 1253: for(i = 0; i < 6; i++){
  4625  002AC8  0E00               	movlw	0
  4626  002ACA  6E66               	movwf	_i+1,c
  4627  002ACC  0E00               	movlw	0
  4628  002ACE  6E65               	movwf	_i,c
  4629  002AD0                     l3926:
  4630  002AD0  5066               	movf	_i+1,w,c
  4631  002AD2  E111               	bnz	l3936
  4632  002AD4  0E06               	movlw	6
  4633  002AD6  5C65               	subwf	_i,w,c
  4634  002AD8  B0D8               	btfsc	status,0,c
  4635  002ADA  D00D               	goto	u2950
  4636                           
  4637                           ;main.c: 1254: time[i] = I2C_Master_Read(0);
  4638  002ADC  0E52               	movlw	low _time
  4639  002ADE  2465               	addwf	_i,w,c
  4640  002AE0  6ED9               	movwf	fsr2l,c
  4641  002AE2  0E00               	movlw	high _time
  4642  002AE4  2066               	addwfc	_i+1,w,c
  4643  002AE6  6EDA               	movwf	fsr2h,c
  4644  002AE8  0E00               	movlw	0
  4645  002AEA  EC2F  F01A         	call	_I2C_Master_Read
  4646  002AEE  6EDF               	movwf	indf2,c
  4647  002AF0  4A65               	infsnz	_i,f,c
  4648  002AF2  2A66               	incf	_i+1,f,c
  4649  002AF4  D7ED               	goto	l3926
  4650  002AF6                     u2950:
  4651  002AF6                     l3936:
  4652                           
  4653                           ;main.c: 1255: }
  4654                           ;main.c: 1256: time[6] = I2C_Master_Read(1);
  4655  002AF6  0E01               	movlw	1
  4656  002AF8  EC2F  F01A         	call	_I2C_Master_Read
  4657  002AFC  6E58               	movwf	_time+6,c
  4658                           
  4659                           ;main.c: 1257: I2C_Master_Stop();
  4660  002AFE  EC0C  F01B         	call	_I2C_Master_Stop	;wreg free
  4661                           
  4662                           ;main.c: 1259: hr_final = time[2]/16*10+time[2]%16;
  4663  002B02  C054  F0D0         	movff	_time+2,??_get_RTC_final
  4664  002B06  0E0F               	movlw	15
  4665  002B08  0100               	movlb	0	; () banked
  4666  002B0A  17D0               	andwf	??_get_RTC_final& (0+255),f,b
  4667  002B0C  0E00               	movlw	0
  4668  002B0E  6FC5               	movwf	(___awdiv@divisor+1)& (0+255),b
  4669  002B10  0E10               	movlw	16
  4670  002B12  6FC4               	movwf	___awdiv@divisor& (0+255),b
  4671  002B14  C054  F0C2         	movff	_time+2,___awdiv@dividend
  4672  002B18  6BC3               	clrf	(___awdiv@dividend+1)& (0+255),b
  4673  002B1A  EC71  F016         	call	___awdiv	;wreg free
  4674  002B1E  C0C2  F0CA         	movff	?___awdiv,___wmul@multiplier
  4675  002B22  C0C3  F0CB         	movff	?___awdiv+1,___wmul@multiplier+1
  4676  002B26  0E00               	movlw	0
  4677  002B28  0100               	movlb	0	; () banked
  4678  002B2A  6FCD               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4679  002B2C  0E0A               	movlw	10
  4680  002B2E  6FCC               	movwf	___wmul@multiplicand& (0+255),b
  4681  002B30  EC44  F01A         	call	___wmul	;wreg free
  4682  002B34  0100               	movlb	0	; () banked
  4683  002B36  51D0               	movf	??_get_RTC_final& (0+255),w,b
  4684  002B38  25CA               	addwf	?___wmul& (0+255),w,b
  4685  002B3A  6F86               	movwf	_hr_final& (0+255),b
  4686  002B3C  0E00               	movlw	0
  4687  002B3E  21CB               	addwfc	(?___wmul+1)& (0+255),w,b
  4688  002B40  6F87               	movwf	(_hr_final+1)& (0+255),b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;main.c: 1260: min_final = time[1]/16*10 + time[1]%16;
  4692  002B42  C053  F0D0         	movff	_time+1,??_get_RTC_final
  4693  002B46  0E0F               	movlw	15
  4694  002B48  17D0               	andwf	??_get_RTC_final& (0+255),f,b
  4695  002B4A  0E00               	movlw	0
  4696  002B4C  6FC5               	movwf	(___awdiv@divisor+1)& (0+255),b
  4697  002B4E  0E10               	movlw	16
  4698  002B50  6FC4               	movwf	___awdiv@divisor& (0+255),b
  4699  002B52  C053  F0C2         	movff	_time+1,___awdiv@dividend
  4700  002B56  6BC3               	clrf	(___awdiv@dividend+1)& (0+255),b
  4701  002B58  EC71  F016         	call	___awdiv	;wreg free
  4702  002B5C  C0C2  F0CA         	movff	?___awdiv,___wmul@multiplier
  4703  002B60  C0C3  F0CB         	movff	?___awdiv+1,___wmul@multiplier+1
  4704  002B64  0E00               	movlw	0
  4705  002B66  0100               	movlb	0	; () banked
  4706  002B68  6FCD               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4707  002B6A  0E0A               	movlw	10
  4708  002B6C  6FCC               	movwf	___wmul@multiplicand& (0+255),b
  4709  002B6E  EC44  F01A         	call	___wmul	;wreg free
  4710  002B72  0100               	movlb	0	; () banked
  4711  002B74  51D0               	movf	??_get_RTC_final& (0+255),w,b
  4712  002B76  25CA               	addwf	?___wmul& (0+255),w,b
  4713  002B78  6F84               	movwf	_min_final& (0+255),b
  4714  002B7A  0E00               	movlw	0
  4715  002B7C  21CB               	addwfc	(?___wmul+1)& (0+255),w,b
  4716  002B7E  6F85               	movwf	(_min_final+1)& (0+255),b
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;main.c: 1261: sec_final = time[0]/16*10 + time[0]%16;
  4720  002B80  C052  F0D0         	movff	_time,??_get_RTC_final
  4721  002B84  0E0F               	movlw	15
  4722  002B86  17D0               	andwf	??_get_RTC_final& (0+255),f,b
  4723  002B88  0E00               	movlw	0
  4724  002B8A  6FC5               	movwf	(___awdiv@divisor+1)& (0+255),b
  4725  002B8C  0E10               	movlw	16
  4726  002B8E  6FC4               	movwf	___awdiv@divisor& (0+255),b
  4727  002B90  C052  F0C2         	movff	_time,___awdiv@dividend
  4728  002B94  6BC3               	clrf	(___awdiv@dividend+1)& (0+255),b
  4729  002B96  EC71  F016         	call	___awdiv	;wreg free
  4730  002B9A  C0C2  F0CA         	movff	?___awdiv,___wmul@multiplier
  4731  002B9E  C0C3  F0CB         	movff	?___awdiv+1,___wmul@multiplier+1
  4732  002BA2  0E00               	movlw	0
  4733  002BA4  0100               	movlb	0	; () banked
  4734  002BA6  6FCD               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4735  002BA8  0E0A               	movlw	10
  4736  002BAA  6FCC               	movwf	___wmul@multiplicand& (0+255),b
  4737  002BAC  EC44  F01A         	call	___wmul	;wreg free
  4738  002BB0  0100               	movlb	0	; () banked
  4739  002BB2  51D0               	movf	??_get_RTC_final& (0+255),w,b
  4740  002BB4  25CA               	addwf	?___wmul& (0+255),w,b
  4741  002BB6  6F82               	movwf	_sec_final& (0+255),b
  4742  002BB8  0E00               	movlw	0
  4743  002BBA  21CB               	addwfc	(?___wmul+1)& (0+255),w,b
  4744  002BBC  6F83               	movwf	(_sec_final+1)& (0+255),b
  4745                           
  4746                           ; BSR set to: 0
  4747  002BBE  0012               	return		;funcret
  4748  002BC0                     __end_of_get_RTC_final:
  4749                           	opt stack 0
  4750                           tblptru	equ	0xFF8
  4751                           tblptrh	equ	0xFF7
  4752                           tblptrl	equ	0xFF6
  4753                           tablat	equ	0xFF5
  4754                           prodh	equ	0xFF4
  4755                           prodl	equ	0xFF3
  4756                           intcon	equ	0xFF2
  4757                           intcon3	equ	0xFF0
  4758                           indf0	equ	0xFEF
  4759                           postinc0	equ	0xFEE
  4760                           fsr0h	equ	0xFEA
  4761                           fsr0l	equ	0xFE9
  4762                           wreg	equ	0xFE8
  4763                           postdec1	equ	0xFE5
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function ___wmul *****************
  4773 ;; Defined at:
  4774 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  multiplier      2    8[BANK0 ] unsigned int 
  4777 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  product         2   12[BANK0 ] unsigned int 
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  2    8[BANK0 ] unsigned int 
  4782 ;; Registers used:
  4783 ;;		wreg, status,2, status,0, prodl, prodh
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;Total ram usage:        6 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    4
  4796 ;; This function calls:
  4797 ;;		Nothing
  4798 ;; This function is called by:
  4799 ;;		_get_RTC_final
  4800 ;;		_printf
  4801 ;;		_get_RTC_initial
  4802 ;;		_store_prev
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text11
  4807  003488                     __ptext11:
  4808                           	opt stack 0
  4809  003488                     ___wmul:
  4810                           	opt stack 25
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;incstack = 0
  4814  003488  0100               	movlb	0	; () banked
  4815  00348A  51CA               	movf	___wmul@multiplier& (0+255),w,b
  4816  00348C  03CC               	mulwf	___wmul@multiplicand& (0+255),b
  4817  00348E  CFF3 F0CE          	movff	prodl,___wmul@product
  4818  003492  CFF4 F0CF          	movff	prodh,___wmul@product+1
  4819  003496  51CA               	movf	___wmul@multiplier& (0+255),w,b
  4820  003498  03CD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4821  00349A  50F3               	movf	prodl,w,c
  4822  00349C  27CF               	addwf	(___wmul@product+1)& (0+255),f,b
  4823  00349E  51CB               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4824  0034A0  03CC               	mulwf	___wmul@multiplicand& (0+255),b
  4825  0034A2  50F3               	movf	prodl,w,c
  4826  0034A4  27CF               	addwf	(___wmul@product+1)& (0+255),f,b
  4827                           
  4828                           ; BSR set to: 0
  4829  0034A6  C0CE  F0CA         	movff	___wmul@product,?___wmul
  4830  0034AA  C0CF  F0CB         	movff	___wmul@product+1,?___wmul+1
  4831  0034AE  0012               	return	
  4832  0034B0                     __end_of___wmul:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon3	equ	0xFF0
  4842                           indf0	equ	0xFEF
  4843                           postinc0	equ	0xFEE
  4844                           fsr0h	equ	0xFEA
  4845                           fsr0l	equ	0xFE9
  4846                           wreg	equ	0xFE8
  4847                           postdec1	equ	0xFE5
  4848                           fsr1l	equ	0xFE1
  4849                           indf2	equ	0xFDF
  4850                           postinc2	equ	0xFDE
  4851                           postdec2	equ	0xFDD
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function ___awdiv *****************
  4857 ;; Defined at:
  4858 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  dividend        2    0[BANK0 ] int 
  4861 ;;  divisor         2    2[BANK0 ] int 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  quotient        2    6[BANK0 ] int 
  4864 ;;  sign            1    5[BANK0 ] unsigned char 
  4865 ;;  counter         1    4[BANK0 ] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  2    0[BANK0 ] int 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4875 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;Total ram usage:        8 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    4
  4882 ;; This function calls:
  4883 ;;		Nothing
  4884 ;; This function is called by:
  4885 ;;		_get_RTC_final
  4886 ;;		_get_RTC_initial
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text12
  4891  002CE2                     __ptext12:
  4892                           	opt stack 0
  4893  002CE2                     ___awdiv:
  4894                           	opt stack 25
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;incstack = 0
  4898  002CE2  0E00               	movlw	0
  4899  002CE4  0100               	movlb	0	; () banked
  4900  002CE6  6FC7               	movwf	___awdiv@sign& (0+255),b
  4901                           
  4902                           ; BSR set to: 0
  4903  002CE8  AFC5               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4904  002CEA  D006               	goto	l1005
  4905                           
  4906                           ; BSR set to: 0
  4907  002CEC  6DC4               	negf	___awdiv@divisor& (0+255),b
  4908  002CEE  1FC5               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4909  002CF0  B0D8               	btfsc	status,0,c
  4910  002CF2  2BC5               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4911                           
  4912                           ; BSR set to: 0
  4913  002CF4  0E01               	movlw	1
  4914  002CF6  6FC7               	movwf	___awdiv@sign& (0+255),b
  4915  002CF8                     l1005:
  4916                           
  4917                           ; BSR set to: 0
  4918                           
  4919                           ; BSR set to: 0
  4920  002CF8  AFC3               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4921  002CFA  D006               	goto	l1006
  4922                           
  4923                           ; BSR set to: 0
  4924  002CFC  6DC2               	negf	___awdiv@dividend& (0+255),b
  4925  002CFE  1FC3               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4926  002D00  B0D8               	btfsc	status,0,c
  4927  002D02  2BC3               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4928                           
  4929                           ; BSR set to: 0
  4930  002D04  0E01               	movlw	1
  4931  002D06  1BC7               	xorwf	___awdiv@sign& (0+255),f,b
  4932  002D08                     l1006:
  4933                           
  4934                           ; BSR set to: 0
  4935                           
  4936                           ; BSR set to: 0
  4937  002D08  0E00               	movlw	0
  4938  002D0A  6FC9               	movwf	(___awdiv@quotient+1)& (0+255),b
  4939  002D0C  0E00               	movlw	0
  4940  002D0E  6FC8               	movwf	___awdiv@quotient& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943  002D10  51C4               	movf	___awdiv@divisor& (0+255),w,b
  4944  002D12  11C5               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4945  002D14  B4D8               	btfsc	status,2,c
  4946  002D16  D01C               	goto	l1013
  4947                           
  4948                           ; BSR set to: 0
  4949  002D18  0E01               	movlw	1
  4950  002D1A  6FC6               	movwf	___awdiv@counter& (0+255),b
  4951  002D1C  D004               	goto	l1008
  4952  002D1E                     
  4953                           ; BSR set to: 0
  4954                           
  4955                           ; BSR set to: 0
  4956  002D1E  90D8               	bcf	status,0,c
  4957  002D20  37C4               	rlcf	___awdiv@divisor& (0+255),f,b
  4958  002D22  37C5               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4959  002D24  2BC6               	incf	___awdiv@counter& (0+255),f,b
  4960  002D26                     l1008:
  4961                           
  4962                           ; BSR set to: 0
  4963                           
  4964                           ; BSR set to: 0
  4965  002D26  AFC5               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4966  002D28  D7FA               	goto	l1009
  4967  002D2A                     u2380:
  4968                           
  4969                           ; BSR set to: 0
  4970                           
  4971                           ; BSR set to: 0
  4972                           
  4973                           ; BSR set to: 0
  4974  002D2A  90D8               	bcf	status,0,c
  4975  002D2C  37C8               	rlcf	___awdiv@quotient& (0+255),f,b
  4976  002D2E  37C9               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4977                           
  4978                           ; BSR set to: 0
  4979  002D30  51C4               	movf	___awdiv@divisor& (0+255),w,b
  4980  002D32  5DC2               	subwf	___awdiv@dividend& (0+255),w,b
  4981  002D34  51C5               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4982  002D36  59C3               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4983  002D38  A0D8               	btfss	status,0,c
  4984  002D3A  D005               	goto	l1012
  4985                           
  4986                           ; BSR set to: 0
  4987  002D3C  51C4               	movf	___awdiv@divisor& (0+255),w,b
  4988  002D3E  5FC2               	subwf	___awdiv@dividend& (0+255),f,b
  4989  002D40  51C5               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4990  002D42  5BC3               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4991                           
  4992                           ; BSR set to: 0
  4993  002D44  81C8               	bsf	___awdiv@quotient& (0+255),0,b
  4994  002D46                     l1012:
  4995                           
  4996                           ; BSR set to: 0
  4997                           
  4998                           ; BSR set to: 0
  4999  002D46  90D8               	bcf	status,0,c
  5000  002D48  33C5               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5001  002D4A  33C4               	rrcf	___awdiv@divisor& (0+255),f,b
  5002                           
  5003                           ; BSR set to: 0
  5004  002D4C  2FC6               	decfsz	___awdiv@counter& (0+255),f,b
  5005  002D4E  D7ED               	goto	u2380
  5006  002D50                     l1013:
  5007                           
  5008                           ; BSR set to: 0
  5009                           
  5010                           ; BSR set to: 0
  5011                           
  5012                           ; BSR set to: 0
  5013  002D50  51C7               	movf	___awdiv@sign& (0+255),w,b
  5014  002D52  B4D8               	btfsc	status,2,c
  5015  002D54  D004               	goto	l1014
  5016                           
  5017                           ; BSR set to: 0
  5018  002D56  6DC8               	negf	___awdiv@quotient& (0+255),b
  5019  002D58  1FC9               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5020  002D5A  B0D8               	btfsc	status,0,c
  5021  002D5C  2BC9               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5022  002D5E                     l1014:
  5023                           
  5024                           ; BSR set to: 0
  5025                           
  5026                           ; BSR set to: 0
  5027  002D5E  C0C8  F0C2         	movff	___awdiv@quotient,?___awdiv
  5028  002D62  C0C9  F0C3         	movff	___awdiv@quotient+1,?___awdiv+1
  5029  002D66  0012               	return	
  5030  002D68                     __end_of___awdiv:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           intcon	equ	0xFF2
  5039                           intcon3	equ	0xFF0
  5040                           indf0	equ	0xFEF
  5041                           postinc0	equ	0xFEE
  5042                           fsr0h	equ	0xFEA
  5043                           fsr0l	equ	0xFE9
  5044                           wreg	equ	0xFE8
  5045                           postdec1	equ	0xFE5
  5046                           fsr1l	equ	0xFE1
  5047                           indf2	equ	0xFDF
  5048                           postinc2	equ	0xFDE
  5049                           postdec2	equ	0xFDD
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _I2C_Master_Read *****************
  5055 ;; Defined at:
  5056 ;;		line 120 in file "I2C.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  ackBit          1    wreg     unsigned char 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  ackBit          1    1[BANK0 ] unsigned char 
  5061 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  1    wreg      unsigned char 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2, status,0, cstack
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;Total ram usage:        2 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    5
  5078 ;; This function calls:
  5079 ;;		_I2C_Master_Wait
  5080 ;; This function is called by:
  5081 ;;		_main
  5082 ;;		_get_RTC_final
  5083 ;;		_get_RTC_initial
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text13
  5088  00345E                     __ptext13:
  5089                           	opt stack 0
  5090  00345E                     _I2C_Master_Read:
  5091                           	opt stack 24
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;incstack = 0
  5095                           ;I2C_Master_Read@ackBit stored from wreg
  5096  00345E  0100               	movlb	0	; () banked
  5097  003460  6FC3               	movwf	I2C_Master_Read@ackBit& (0+255),b
  5098                           
  5099                           ;I2C.c: 130: unsigned char receivedByte;
  5100                           ;I2C.c: 132: I2C_Master_Wait();
  5101  003462  ECD5  F01A         	call	_I2C_Master_Wait	;wreg free
  5102                           
  5103                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  5104  003466  86C5               	bsf	4037,3,c	;volatile
  5105                           
  5106                           ;I2C.c: 135: I2C_Master_Wait();
  5107  003468  ECD5  F01A         	call	_I2C_Master_Wait	;wreg free
  5108                           
  5109                           ;I2C.c: 136: receivedByte = SSPBUF;
  5110  00346C  CFC9 F0C4          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  5111                           
  5112                           ;I2C.c: 138: I2C_Master_Wait();
  5113  003470  ECD5  F01A         	call	_I2C_Master_Wait	;wreg free
  5114                           
  5115                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  5116  003474  0100               	movlb	0	; () banked
  5117  003476  B1C3               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  5118  003478  D002               	bra	u2305
  5119  00347A  9AC5               	bcf	4037,5,c	;volatile
  5120  00347C  D001               	bra	u2306
  5121  00347E                     u2305:
  5122  00347E  8AC5               	bsf	4037,5,c	;volatile
  5123  003480                     u2306:
  5124                           
  5125                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  5126  003480  88C5               	bsf	4037,4,c	;volatile
  5127                           
  5128                           ;I2C.c: 142: return receivedByte;
  5129  003482  0100               	movlb	0	; () banked
  5130  003484  51C4               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  5131  003486  0012               	return	
  5132  003488                     __end_of_I2C_Master_Read:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           intcon	equ	0xFF2
  5141                           intcon3	equ	0xFF0
  5142                           indf0	equ	0xFEF
  5143                           postinc0	equ	0xFEE
  5144                           fsr0h	equ	0xFEA
  5145                           fsr0l	equ	0xFE9
  5146                           wreg	equ	0xFE8
  5147                           postdec1	equ	0xFE5
  5148                           fsr1l	equ	0xFE1
  5149                           indf2	equ	0xFDF
  5150                           postinc2	equ	0xFDE
  5151                           postdec2	equ	0xFDD
  5152                           fsr2h	equ	0xFDA
  5153                           fsr2l	equ	0xFD9
  5154                           status	equ	0xFD8
  5155                           
  5156 ;; *************** function _I2C_sendData *****************
  5157 ;; Defined at:
  5158 ;;		line 1267 in file "main.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  char_data       1    wreg     unsigned char 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  char_data       1    3[BANK0 ] unsigned char 
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  1    wreg      void 
  5165 ;; Registers used:
  5166 ;;		wreg, status,2, status,0, cstack
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;Total ram usage:        1 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:    6
  5179 ;; This function calls:
  5180 ;;		_I2C_Master_Start
  5181 ;;		_I2C_Master_Stop
  5182 ;;		_I2C_Master_Write
  5183 ;; This function is called by:
  5184 ;;		_main
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text14
  5189  0034B0                     __ptext14:
  5190                           	opt stack 0
  5191  0034B0                     _I2C_sendData:
  5192                           	opt stack 24
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;incstack = 0
  5196                           ;I2C_sendData@char_data stored from wreg
  5197  0034B0  0100               	movlb	0	; () banked
  5198  0034B2  6FC5               	movwf	I2C_sendData@char_data& (0+255),b
  5199                           
  5200                           ;main.c: 1268: I2C_Master_Start();
  5201  0034B4  EC10  F01B         	call	_I2C_Master_Start	;wreg free
  5202                           
  5203                           ;main.c: 1269: I2C_Master_Write(0b00010000);
  5204  0034B8  0E00               	movlw	0
  5205  0034BA  0100               	movlb	0	; () banked
  5206  0034BC  6FC4               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  5207  0034BE  0E10               	movlw	16
  5208  0034C0  6FC3               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  5209  0034C2  EC02  F01B         	call	_I2C_Master_Write	;wreg free
  5210                           
  5211                           ;main.c: 1270: I2C_Master_Write(char_data);
  5212  0034C6  C0C5  F0C3         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  5213  0034CA  0100               	movlb	0	; () banked
  5214  0034CC  6BC4               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  5215  0034CE  EC02  F01B         	call	_I2C_Master_Write	;wreg free
  5216                           
  5217                           ;main.c: 1271: I2C_Master_Stop();
  5218  0034D2  EC0C  F01B         	call	_I2C_Master_Stop	;wreg free
  5219  0034D6  0012               	return		;funcret
  5220  0034D8                     __end_of_I2C_sendData:
  5221                           	opt stack 0
  5222                           tblptru	equ	0xFF8
  5223                           tblptrh	equ	0xFF7
  5224                           tblptrl	equ	0xFF6
  5225                           tablat	equ	0xFF5
  5226                           prodh	equ	0xFF4
  5227                           prodl	equ	0xFF3
  5228                           intcon	equ	0xFF2
  5229                           intcon3	equ	0xFF0
  5230                           indf0	equ	0xFEF
  5231                           postinc0	equ	0xFEE
  5232                           fsr0h	equ	0xFEA
  5233                           fsr0l	equ	0xFE9
  5234                           wreg	equ	0xFE8
  5235                           postdec1	equ	0xFE5
  5236                           fsr1l	equ	0xFE1
  5237                           indf2	equ	0xFDF
  5238                           postinc2	equ	0xFDE
  5239                           postdec2	equ	0xFDD
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _I2C_Master_Write *****************
  5245 ;; Defined at:
  5246 ;;		line 108 in file "I2C.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  1    wreg      void 
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5260 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;Total ram usage:        2 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    5
  5267 ;; This function calls:
  5268 ;;		_I2C_Master_Wait
  5269 ;; This function is called by:
  5270 ;;		_main
  5271 ;;		_get_RTC_final
  5272 ;;		_I2C_sendData
  5273 ;;		_initRamp
  5274 ;;		_ramp_Rotate
  5275 ;;		_RTC_setTime
  5276 ;;		_get_RTC_initial
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           	psect	text15
  5281  003604                     __ptext15:
  5282                           	opt stack 0
  5283  003604                     _I2C_Master_Write:
  5284                           	opt stack 24
  5285                           
  5286                           ;I2C.c: 116: I2C_Master_Wait();
  5287                           
  5288                           ;incstack = 0
  5289  003604  ECD5  F01A         	call	_I2C_Master_Wait	;wreg free
  5290                           
  5291                           ;I2C.c: 117: SSPBUF = byteToWrite;
  5292  003608  C0C3  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  5293  00360C  0012               	return		;funcret
  5294  00360E                     __end_of_I2C_Master_Write:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           intcon	equ	0xFF2
  5303                           intcon3	equ	0xFF0
  5304                           indf0	equ	0xFEF
  5305                           postinc0	equ	0xFEE
  5306                           fsr0h	equ	0xFEA
  5307                           fsr0l	equ	0xFE9
  5308                           wreg	equ	0xFE8
  5309                           postdec1	equ	0xFE5
  5310                           fsr1l	equ	0xFE1
  5311                           indf2	equ	0xFDF
  5312                           postinc2	equ	0xFDE
  5313                           postdec2	equ	0xFDD
  5314                           fsr2h	equ	0xFDA
  5315                           fsr2l	equ	0xFD9
  5316                           status	equ	0xFD8
  5317                           
  5318 ;; *************** function _I2C_Master_Stop *****************
  5319 ;; Defined at:
  5320 ;;		line 95 in file "I2C.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;Total ram usage:        0 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    5
  5341 ;; This function calls:
  5342 ;;		_I2C_Master_Wait
  5343 ;; This function is called by:
  5344 ;;		_main
  5345 ;;		_get_RTC_final
  5346 ;;		_I2C_sendData
  5347 ;;		_initRamp
  5348 ;;		_ramp_Rotate
  5349 ;;		_RTC_setTime
  5350 ;;		_get_RTC_initial
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text16
  5355  003618                     __ptext16:
  5356                           	opt stack 0
  5357  003618                     _I2C_Master_Stop:
  5358                           	opt stack 24
  5359                           
  5360                           ;I2C.c: 104: I2C_Master_Wait();
  5361                           
  5362                           ;incstack = 0
  5363  003618  ECD5  F01A         	call	_I2C_Master_Wait	;wreg free
  5364                           
  5365                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  5366  00361C  84C5               	bsf	4037,2,c	;volatile
  5367  00361E  0012               	return		;funcret
  5368  003620                     __end_of_I2C_Master_Stop:
  5369                           	opt stack 0
  5370                           tblptru	equ	0xFF8
  5371                           tblptrh	equ	0xFF7
  5372                           tblptrl	equ	0xFF6
  5373                           tablat	equ	0xFF5
  5374                           prodh	equ	0xFF4
  5375                           prodl	equ	0xFF3
  5376                           intcon	equ	0xFF2
  5377                           intcon3	equ	0xFF0
  5378                           indf0	equ	0xFEF
  5379                           postinc0	equ	0xFEE
  5380                           fsr0h	equ	0xFEA
  5381                           fsr0l	equ	0xFE9
  5382                           wreg	equ	0xFE8
  5383                           postdec1	equ	0xFE5
  5384                           fsr1l	equ	0xFE1
  5385                           indf2	equ	0xFDF
  5386                           postinc2	equ	0xFDE
  5387                           postdec2	equ	0xFDD
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function _I2C_Master_Start *****************
  5393 ;; Defined at:
  5394 ;;		line 69 in file "I2C.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;		None
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;		None
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  1    wreg      void 
  5401 ;; Registers used:
  5402 ;;		wreg, status,2, status,0, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;Total ram usage:        0 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    5
  5415 ;; This function calls:
  5416 ;;		_I2C_Master_Wait
  5417 ;; This function is called by:
  5418 ;;		_main
  5419 ;;		_get_RTC_final
  5420 ;;		_I2C_sendData
  5421 ;;		_initRamp
  5422 ;;		_ramp_Rotate
  5423 ;;		_RTC_setTime
  5424 ;;		_get_RTC_initial
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           	psect	text17
  5429  003620                     __ptext17:
  5430                           	opt stack 0
  5431  003620                     _I2C_Master_Start:
  5432                           	opt stack 24
  5433                           
  5434                           ;I2C.c: 78: I2C_Master_Wait();
  5435                           
  5436                           ;incstack = 0
  5437  003620  ECD5  F01A         	call	_I2C_Master_Wait	;wreg free
  5438                           
  5439                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  5440  003624  80C5               	bsf	4037,0,c	;volatile
  5441  003626  0012               	return		;funcret
  5442  003628                     __end_of_I2C_Master_Start:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           intcon3	equ	0xFF0
  5452                           indf0	equ	0xFEF
  5453                           postinc0	equ	0xFEE
  5454                           fsr0h	equ	0xFEA
  5455                           fsr0l	equ	0xFE9
  5456                           wreg	equ	0xFE8
  5457                           postdec1	equ	0xFE5
  5458                           fsr1l	equ	0xFE1
  5459                           indf2	equ	0xFDF
  5460                           postinc2	equ	0xFDE
  5461                           postdec2	equ	0xFDD
  5462                           fsr2h	equ	0xFDA
  5463                           fsr2l	equ	0xFD9
  5464                           status	equ	0xFD8
  5465                           
  5466 ;; *************** function _I2C_Master_Wait *****************
  5467 ;; Defined at:
  5468 ;;		line 51 in file "I2C.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;Total ram usage:        1 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    4
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_I2C_Master_Start
  5493 ;;		_I2C_Master_Stop
  5494 ;;		_I2C_Master_Write
  5495 ;;		_I2C_Master_Read
  5496 ;;		_I2C_Master_RepeatedStart
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text18
  5501  0035AA                     __ptext18:
  5502                           	opt stack 0
  5503  0035AA                     _I2C_Master_Wait:
  5504                           	opt stack 24
  5505                           
  5506                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5507                           
  5508                           ;incstack = 0
  5509  0035AA  B4C7               	btfsc	4039,2,c	;volatile
  5510  0035AC  D7FE               	goto	_I2C_Master_Wait
  5511  0035AE  CFC5 F0C2          	movff	4037,??_I2C_Master_Wait	;volatile
  5512  0035B2  0E1F               	movlw	31
  5513  0035B4  0100               	movlb	0	; () banked
  5514  0035B6  17C2               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5515  0035B8  B4D8               	btfsc	status,2,c
  5516  0035BA  0012               	return	
  5517  0035BC  D7F6               	goto	_I2C_Master_Wait
  5518  0035BE                     __end_of_I2C_Master_Wait:
  5519                           	opt stack 0
  5520                           tblptru	equ	0xFF8
  5521                           tblptrh	equ	0xFF7
  5522                           tblptrl	equ	0xFF6
  5523                           tablat	equ	0xFF5
  5524                           prodh	equ	0xFF4
  5525                           prodl	equ	0xFF3
  5526                           intcon	equ	0xFF2
  5527                           intcon3	equ	0xFF0
  5528                           indf0	equ	0xFEF
  5529                           postinc0	equ	0xFEE
  5530                           fsr0h	equ	0xFEA
  5531                           fsr0l	equ	0xFE9
  5532                           wreg	equ	0xFE8
  5533                           postdec1	equ	0xFE5
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function _I2C_Master_Init *****************
  5543 ;; Defined at:
  5544 ;;		line 14 in file "I2C.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;		None
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      void 
  5551 ;; Registers used:
  5552 ;;		wreg, status,2, status,0, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5558 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;Total ram usage:        8 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    5
  5565 ;; This function calls:
  5566 ;;		___lldiv
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;;		_initRamp
  5570 ;;		_ramp_Rotate
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           	psect	text19
  5575  0030D4                     __ptext19:
  5576                           	opt stack 0
  5577  0030D4                     _I2C_Master_Init:
  5578                           	opt stack 25
  5579                           
  5580                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;incstack = 0
  5584  0030D4  9AC6               	bcf	4038,5,c	;volatile
  5585                           
  5586                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  5587  0030D6  8694               	bsf	3988,3,c	;volatile
  5588                           
  5589                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  5590  0030D8  8894               	bsf	3988,4,c	;volatile
  5591                           
  5592                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  5593  0030DA  0E80               	movlw	128
  5594  0030DC  6EC7               	movwf	4039,c	;volatile
  5595                           
  5596                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  5597  0030DE  0E28               	movlw	40
  5598  0030E0  6EC6               	movwf	4038,c	;volatile
  5599                           
  5600                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  5601  0030E2  0E00               	movlw	0
  5602  0030E4  6EC5               	movwf	4037,c	;volatile
  5603                           
  5604                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  5605  0030E6  0E00               	movlw	0
  5606  0030E8  0100               	movlb	0	; () banked
  5607  0030EA  6FC2               	movwf	___lldiv@dividend& (0+255),b
  5608  0030EC  0E5A               	movlw	90
  5609  0030EE  6FC3               	movwf	(___lldiv@dividend+1)& (0+255),b
  5610  0030F0  0E62               	movlw	98
  5611  0030F2  6FC4               	movwf	(___lldiv@dividend+2)& (0+255),b
  5612  0030F4  0E02               	movlw	2
  5613  0030F6  6FC5               	movwf	(___lldiv@dividend+3)& (0+255),b
  5614  0030F8  C0CF  F0D3         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5615  0030FC  C0D0  F0D4         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5616  003100  C0D1  F0D5         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5617  003104  C0D2  F0D6         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5618  003108  0E02               	movlw	2
  5619  00310A                     u2635:
  5620  00310A  90D8               	bcf	status,0,c
  5621  00310C  37D3               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5622  00310E  37D4               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5623  003110  37D5               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5624  003112  37D6               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5625  003114  2EE8               	decfsz	wreg,f,c
  5626  003116  D7F9               	goto	u2635
  5627  003118  C0D3  F0C6         	movff	??_I2C_Master_Init,___lldiv@divisor
  5628  00311C  C0D4  F0C7         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5629  003120  C0D5  F0C8         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5630  003124  C0D6  F0C9         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5631  003128  EC3A  F017         	call	___lldiv	;wreg free
  5632  00312C  0100               	movlb	0	; () banked
  5633  00312E  05C2               	decf	?___lldiv& (0+255),w,b
  5634  003130  6EC8               	movwf	4040,c	;volatile
  5635                           
  5636                           ; BSR set to: 0
  5637  003132  0012               	return		;funcret
  5638  003134                     __end_of_I2C_Master_Init:
  5639                           	opt stack 0
  5640                           tblptru	equ	0xFF8
  5641                           tblptrh	equ	0xFF7
  5642                           tblptrl	equ	0xFF6
  5643                           tablat	equ	0xFF5
  5644                           prodh	equ	0xFF4
  5645                           prodl	equ	0xFF3
  5646                           intcon	equ	0xFF2
  5647                           intcon3	equ	0xFF0
  5648                           indf0	equ	0xFEF
  5649                           postinc0	equ	0xFEE
  5650                           fsr0h	equ	0xFEA
  5651                           fsr0l	equ	0xFE9
  5652                           wreg	equ	0xFE8
  5653                           postdec1	equ	0xFE5
  5654                           fsr1l	equ	0xFE1
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function ___lldiv *****************
  5663 ;; Defined at:
  5664 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  dividend        4    0[BANK0 ] unsigned long 
  5667 ;;  divisor         4    4[BANK0 ] unsigned long 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  quotient        4    8[BANK0 ] unsigned long 
  5670 ;;  counter         1   12[BANK0 ] unsigned char 
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  4    0[BANK0 ] unsigned long 
  5673 ;; Registers used:
  5674 ;;		wreg, status,2, status,0
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5680 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;Total ram usage:       13 bytes
  5685 ;; Hardware stack levels used:    1
  5686 ;; Hardware stack levels required when called:    4
  5687 ;; This function calls:
  5688 ;;		Nothing
  5689 ;; This function is called by:
  5690 ;;		_I2C_Master_Init
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text20
  5695  002E74                     __ptext20:
  5696                           	opt stack 0
  5697  002E74                     ___lldiv:
  5698                           	opt stack 25
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;incstack = 0
  5702  002E74  0E00               	movlw	0
  5703  002E76  0100               	movlb	0	; () banked
  5704  002E78  6FCA               	movwf	___lldiv@quotient& (0+255),b
  5705  002E7A  0E00               	movlw	0
  5706  002E7C  6FCB               	movwf	(___lldiv@quotient+1)& (0+255),b
  5707  002E7E  0E00               	movlw	0
  5708  002E80  6FCC               	movwf	(___lldiv@quotient+2)& (0+255),b
  5709  002E82  0E00               	movlw	0
  5710  002E84  6FCD               	movwf	(___lldiv@quotient+3)& (0+255),b
  5711                           
  5712                           ; BSR set to: 0
  5713  002E86  51C6               	movf	___lldiv@divisor& (0+255),w,b
  5714  002E88  11C7               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5715  002E8A  11C8               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5716  002E8C  11C9               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5717  002E8E  B4D8               	btfsc	status,2,c
  5718  002E90  D02A               	goto	l1198
  5719                           
  5720                           ; BSR set to: 0
  5721  002E92  0E01               	movlw	1
  5722  002E94  6FCE               	movwf	___lldiv@counter& (0+255),b
  5723  002E96  D006               	goto	l1193
  5724  002E98                     
  5725                           ; BSR set to: 0
  5726                           
  5727                           ; BSR set to: 0
  5728  002E98  90D8               	bcf	status,0,c
  5729  002E9A  37C6               	rlcf	___lldiv@divisor& (0+255),f,b
  5730  002E9C  37C7               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5731  002E9E  37C8               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5732  002EA0  37C9               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5733  002EA2  2BCE               	incf	___lldiv@counter& (0+255),f,b
  5734  002EA4                     l1193:
  5735                           
  5736                           ; BSR set to: 0
  5737                           
  5738                           ; BSR set to: 0
  5739  002EA4  AFC9               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5740  002EA6  D7F8               	goto	l1194
  5741  002EA8                     u2420:
  5742                           
  5743                           ; BSR set to: 0
  5744                           
  5745                           ; BSR set to: 0
  5746                           
  5747                           ; BSR set to: 0
  5748  002EA8  90D8               	bcf	status,0,c
  5749  002EAA  37CA               	rlcf	___lldiv@quotient& (0+255),f,b
  5750  002EAC  37CB               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5751  002EAE  37CC               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5752  002EB0  37CD               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5753                           
  5754                           ; BSR set to: 0
  5755  002EB2  51C6               	movf	___lldiv@divisor& (0+255),w,b
  5756  002EB4  5DC2               	subwf	___lldiv@dividend& (0+255),w,b
  5757  002EB6  51C7               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5758  002EB8  59C3               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5759  002EBA  51C8               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5760  002EBC  59C4               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5761  002EBE  51C9               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5762  002EC0  59C5               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5763  002EC2  A0D8               	btfss	status,0,c
  5764  002EC4  D009               	goto	l1197
  5765                           
  5766                           ; BSR set to: 0
  5767  002EC6  51C6               	movf	___lldiv@divisor& (0+255),w,b
  5768  002EC8  5FC2               	subwf	___lldiv@dividend& (0+255),f,b
  5769  002ECA  51C7               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5770  002ECC  5BC3               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5771  002ECE  51C8               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5772  002ED0  5BC4               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5773  002ED2  51C9               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5774  002ED4  5BC5               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5775                           
  5776                           ; BSR set to: 0
  5777  002ED6  81CA               	bsf	___lldiv@quotient& (0+255),0,b
  5778  002ED8                     l1197:
  5779                           
  5780                           ; BSR set to: 0
  5781                           
  5782                           ; BSR set to: 0
  5783  002ED8  90D8               	bcf	status,0,c
  5784  002EDA  33C9               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5785  002EDC  33C8               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5786  002EDE  33C7               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5787  002EE0  33C6               	rrcf	___lldiv@divisor& (0+255),f,b
  5788                           
  5789                           ; BSR set to: 0
  5790  002EE2  2FCE               	decfsz	___lldiv@counter& (0+255),f,b
  5791  002EE4  D7E1               	goto	u2420
  5792  002EE6                     l1198:
  5793                           
  5794                           ; BSR set to: 0
  5795                           
  5796                           ; BSR set to: 0
  5797  002EE6  C0CA  F0C2         	movff	___lldiv@quotient,?___lldiv
  5798  002EEA  C0CB  F0C3         	movff	___lldiv@quotient+1,?___lldiv+1
  5799  002EEE  C0CC  F0C4         	movff	___lldiv@quotient+2,?___lldiv+2
  5800  002EF2  C0CD  F0C5         	movff	___lldiv@quotient+3,?___lldiv+3
  5801                           
  5802                           ; BSR set to: 0
  5803  002EF6  0012               	return		;funcret
  5804  002EF8                     __end_of___lldiv:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           intcon3	equ	0xFF0
  5814                           indf0	equ	0xFEF
  5815                           postinc0	equ	0xFEE
  5816                           fsr0h	equ	0xFEA
  5817                           fsr0l	equ	0xFE9
  5818                           wreg	equ	0xFE8
  5819                           postdec1	equ	0xFE5
  5820                           fsr1l	equ	0xFE1
  5821                           indf2	equ	0xFDF
  5822                           postinc2	equ	0xFDE
  5823                           postdec2	equ	0xFDD
  5824                           fsr2h	equ	0xFDA
  5825                           fsr2l	equ	0xFD9
  5826                           status	equ	0xFD8
  5827                           
  5828 ;; *************** function _interruptHandler *****************
  5829 ;; Defined at:
  5830 ;;		line 651 in file "main.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;		None
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;  i               2   61[COMRAM] int 
  5835 ;;  temp            1   64[COMRAM] unsigned char 
  5836 ;;  keypress        1   63[COMRAM] unsigned char 
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  1    wreg      void 
  5839 ;; Registers used:
  5840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;Total ram usage:       27 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; Hardware stack levels required when called:    3
  5853 ;; This function calls:
  5854 ;;		___awmod
  5855 ;;		_check
  5856 ;;		_generate_compartment_array
  5857 ;;		_is_valid
  5858 ;;		_strcat
  5859 ;;		_strcpy
  5860 ;;		_strncmp
  5861 ;;		i2_I2C_Master_Init
  5862 ;;		i2_I2C_Master_Read
  5863 ;;		i2_I2C_Master_Start
  5864 ;;		i2_I2C_Master_Stop
  5865 ;;		i2_I2C_Master_Write
  5866 ;;		i2___awdiv
  5867 ;;		i2___wmul
  5868 ;;		i2_initLCD
  5869 ;;		i2_lcdInst
  5870 ;;		i2_printf
  5871 ;;		i2_putch
  5872 ;; This function is called by:
  5873 ;;		Interrupt level 2
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	intcode
  5878  000008                     __pintcode:
  5879                           	opt stack 0
  5880  000008                     _interruptHandler:
  5881                           	opt stack 24
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;incstack = 0
  5885  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5886  00000A  ED34  F007         	call	int_func,f	;refresh shadow registers
  5887                           tblptru	equ	0xFF8
  5888                           tblptrh	equ	0xFF7
  5889                           tblptrl	equ	0xFF6
  5890                           tablat	equ	0xFF5
  5891                           prodh	equ	0xFF4
  5892                           prodl	equ	0xFF3
  5893                           intcon	equ	0xFF2
  5894                           intcon3	equ	0xFF0
  5895                           indf0	equ	0xFEF
  5896                           postinc0	equ	0xFEE
  5897                           fsr0h	equ	0xFEA
  5898                           fsr0l	equ	0xFE9
  5899                           wreg	equ	0xFE8
  5900                           postdec1	equ	0xFE5
  5901                           fsr1l	equ	0xFE1
  5902                           indf2	equ	0xFDF
  5903                           postinc2	equ	0xFDE
  5904                           postdec2	equ	0xFDD
  5905                           fsr2h	equ	0xFDA
  5906                           fsr2l	equ	0xFD9
  5907                           status	equ	0xFD8
  5908                           
  5909                           	psect	intcode_body
  5910  000E68                     __pintcode_body:
  5911                           	opt stack 24
  5912  000E68                     int_func:
  5913                           	opt stack 24
  5914  000E68  0006               	pop		; remove dummy address from shadow register refresh
  5915  000E6A  CFFA F02C          	movff	pclath,??_interruptHandler+5
  5916  000E6E  CFFB F02D          	movff	pclatu,??_interruptHandler+6
  5917  000E72  CFE9 F02E          	movff	fsr0l,??_interruptHandler+7
  5918  000E76  CFEA F02F          	movff	fsr0h,??_interruptHandler+8
  5919  000E7A  CFE1 F030          	movff	fsr1l,??_interruptHandler+9
  5920  000E7E  CFE2 F031          	movff	fsr1h,??_interruptHandler+10
  5921  000E82  CFD9 F032          	movff	fsr2l,??_interruptHandler+11
  5922  000E86  CFDA F033          	movff	fsr2h,??_interruptHandler+12
  5923  000E8A  CFF3 F034          	movff	prodl,??_interruptHandler+13
  5924  000E8E  CFF4 F035          	movff	prodh,??_interruptHandler+14
  5925  000E92  CFF6 F036          	movff	tblptrl,??_interruptHandler+15
  5926  000E96  CFF7 F037          	movff	tblptrh,??_interruptHandler+16
  5927  000E9A  CFF8 F038          	movff	tblptru,??_interruptHandler+17
  5928  000E9E  CFF5 F039          	movff	tablat,??_interruptHandler+18
  5929  000EA2  C07E  F03A         	movff	btemp,??_interruptHandler+19
  5930  000EA6  C07F  F03B         	movff	btemp+1,??_interruptHandler+20
  5931  000EAA  C080  F03C         	movff	btemp+2,??_interruptHandler+21
  5932  000EAE  C081  F03D         	movff	btemp+3,??_interruptHandler+22
  5933                           
  5934                           ;main.c: 662: if(INT1IF){
  5935  000EB2  A0F0               	btfss	intcon3,0,c	;volatile
  5936  000EB4  EF0F  F00D         	goto	i2l5138
  5937                           
  5938                           ;main.c: 668: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5939  000EB8  3881               	swapf	3969,w,c	;volatile
  5940  000EBA  0B0F               	andlw	15
  5941  000EBC  0B0F               	andlw	15
  5942  000EBE  6E40               	movwf	interruptHandler@keypress,c
  5943                           
  5944                           ;main.c: 670: char temp = keys[keypress];
  5945  000EC0  5040               	movf	interruptHandler@keypress,w,c
  5946  000EC2  0D01               	mullw	1
  5947  000EC4  0EF7               	movlw	low _keys
  5948  000EC6  24F3               	addwf	prodl,w,c
  5949  000EC8  6EF6               	movwf	tblptrl,c
  5950  000ECA  0EFD               	movlw	high _keys
  5951  000ECC  20F4               	addwfc	prodh,w,c
  5952  000ECE  6EF7               	movwf	tblptrh,c
  5953  000ED0                     	if	1	;There are 3 active tblptr bytes
  5954  000ED0  6AF8               	clrf	tblptru,c
  5955  000ED2  0E00               	movlw	low (__mediumconst shr (0+16))
  5956  000ED4  22F8               	addwfc	tblptru,f,c
  5957  000ED6                     	endif
  5958  000ED6  0008               	tblrd		*
  5959  000ED8  CFF5 F041          	movff	tablat,interruptHandler@temp
  5960                           
  5961                           ;main.c: 673: if(temp == 'A'){
  5962  000EDC  0E41               	movlw	65
  5963  000EDE  1841               	xorwf	interruptHandler@temp,w,c
  5964  000EE0  A4D8               	btfss	status,2,c
  5965  000EE2  D006               	goto	i2l355
  5966                           
  5967                           ;main.c: 674: state = prev_state;
  5968  000EE4  C09A  F063         	movff	_prev_state,_state
  5969  000EE8  C09B  F064         	movff	_prev_state+1,_state+1
  5970  000EEC  EF0E  F00D         	goto	i2l5136
  5971  000EF0                     i2l355:
  5972                           
  5973                           ;main.c: 677: }
  5974                           ;main.c: 680: if (change_mode == 0){
  5975  000EF0  0100               	movlb	0	; () banked
  5976  000EF2  51B0               	movf	_change_mode& (0+255),w,b
  5977  000EF4  11B1               	iorwf	(_change_mode+1)& (0+255),w,b
  5978  000EF6  A4D8               	btfss	status,2,c
  5979  000EF8  D09C               	goto	i2l363
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;main.c: 684: if (temp == '1'){
  5983  000EFA  0E31               	movlw	49
  5984  000EFC  1841               	xorwf	interruptHandler@temp,w,c
  5985  000EFE  A4D8               	btfss	status,2,c
  5986  000F00  D089               	goto	i2l358
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;main.c: 686: initLCD();
  5990  000F02  EC41  F019         	call	i2_initLCD	;wreg free
  5991                           
  5992                           ;main.c: 687: for (i = 0; i <3; i++){
  5993  000F06  0E00               	movlw	0
  5994  000F08  6E66               	movwf	_i+1,c
  5995  000F0A  0E00               	movlw	0
  5996  000F0C  6E65               	movwf	_i,c
  5997  000F0E  5066               	movf	_i+1,w,c
  5998  000F10  E101               	bnz	i2u391_40
  5999  000F12  D07A               	goto	L1
  6000  000F14                     i2u391_40:
  6001  000F14  EF0E  F00D         	goto	i2l5136
  6002  000F18                     
  6003                           ;main.c: 688: I2C_Master_Init(100000);
  6004  000F18  0EA0               	movlw	160
  6005  000F1A  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  6006  000F1C  0E86               	movlw	134
  6007  000F1E  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  6008  000F20  0E01               	movlw	1
  6009  000F22  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  6010  000F24  0E00               	movlw	0
  6011  000F26  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  6012  000F28  EC9A  F018         	call	i2_I2C_Master_Init	;wreg free
  6013                           
  6014                           ;main.c: 689: I2C_Master_Start();
  6015  000F2C  EC18  F01B         	call	i2_I2C_Master_Start	;wreg free
  6016                           
  6017                           ;main.c: 690: I2C_Master_Write(0b11010000);
  6018  000F30  0E00               	movlw	0
  6019  000F32  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  6020  000F34  0ED0               	movlw	208
  6021  000F36  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  6022  000F38  EC07  F01B         	call	i2_I2C_Master_Write	;wreg free
  6023                           
  6024                           ;main.c: 691: I2C_Master_Write(0x00);
  6025  000F3C  0E00               	movlw	0
  6026  000F3E  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  6027  000F40  0E00               	movlw	0
  6028  000F42  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  6029  000F44  EC07  F01B         	call	i2_I2C_Master_Write	;wreg free
  6030                           
  6031                           ;main.c: 692: I2C_Master_Stop();
  6032  000F48  EC14  F01B         	call	i2_I2C_Master_Stop	;wreg free
  6033                           
  6034                           ;main.c: 695: I2C_Master_Start();
  6035  000F4C  EC18  F01B         	call	i2_I2C_Master_Start	;wreg free
  6036                           
  6037                           ;main.c: 696: I2C_Master_Write(0b11010001);
  6038  000F50  0E00               	movlw	0
  6039  000F52  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  6040  000F54  0ED1               	movlw	209
  6041  000F56  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  6042  000F58  EC07  F01B         	call	i2_I2C_Master_Write	;wreg free
  6043                           
  6044                           ;main.c: 697: for(j = 0; j < 6; j++){
  6045  000F5C  0E00               	movlw	0
  6046  000F5E  6E67               	movwf	_j,c
  6047  000F60                     i2l4770:
  6048  000F60  0E05               	movlw	5
  6049  000F62  6467               	cpfsgt	_j,c
  6050  000F64  D001               	goto	i2l361
  6051  000F66  D00E               	goto	i2u393_40
  6052  000F68                     i2l361:
  6053                           
  6054                           ;main.c: 698: time[j] = I2C_Master_Read(0);
  6055  000F68  5067               	movf	_j,w,c
  6056  000F6A  0D01               	mullw	1
  6057  000F6C  0E52               	movlw	low _time
  6058  000F6E  24F3               	addwf	prodl,w,c
  6059  000F70  6ED9               	movwf	fsr2l,c
  6060  000F72  0E00               	movlw	high _time
  6061  000F74  20F4               	addwfc	prodh,w,c
  6062  000F76  6EDA               	movwf	fsr2h,c
  6063  000F78  0E00               	movlw	0
  6064  000F7A  EC7F  F01A         	call	i2_I2C_Master_Read
  6065  000F7E  6EDF               	movwf	indf2,c
  6066  000F80  2A67               	incf	_j,f,c
  6067  000F82  D7EE               	goto	i2l4770
  6068  000F84                     i2u393_40:
  6069                           
  6070                           ;main.c: 699: }
  6071                           ;main.c: 700: time[6] = I2C_Master_Read(1);
  6072  000F84  0E01               	movlw	1
  6073  000F86  EC7F  F01A         	call	i2_I2C_Master_Read
  6074  000F8A  6E58               	movwf	_time+6,c
  6075                           
  6076                           ;main.c: 701: I2C_Master_Stop();
  6077  000F8C  EC14  F01B         	call	i2_I2C_Master_Stop	;wreg free
  6078                           
  6079                           ;main.c: 703: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6080  000F90  0E80               	movlw	128
  6081  000F92  ECE9  F01A         	call	i2_lcdInst
  6082  000F96  0E41               	movlw	65
  6083  000F98  6E27               	movwf	??_interruptHandler& (0+255),c
  6084  000F9A  0EEE               	movlw	238
  6085  000F9C                     i2u472_47:
  6086  000F9C  2EE8               	decfsz	wreg,f,c
  6087  000F9E  D7FE               	bra	i2u472_47
  6088  000FA0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  6089  000FA2  D7FC               	bra	i2u472_47
  6090  000FA4  D000               	nop2	
  6091                           
  6092                           ;main.c: 704: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  6093  000FA6  0E28               	movlw	low STR_12
  6094  000FA8  6E0D               	movwf	i2printf@f,c
  6095  000FAA  0EFF               	movlw	high STR_12
  6096  000FAC  6E0E               	movwf	i2printf@f+1,c
  6097  000FAE  C058  F00F         	movff	_time+6,?i2_printf+2
  6098  000FB2  6A10               	clrf	?i2_printf+3,c
  6099  000FB4  C057  F011         	movff	_time+5,?i2_printf+4
  6100  000FB8  6A12               	clrf	?i2_printf+5,c
  6101  000FBA  C056  F013         	movff	_time+4,?i2_printf+6
  6102  000FBE  6A14               	clrf	?i2_printf+7,c
  6103  000FC0  EC59  F00F         	call	i2_printf	;wreg free
  6104                           
  6105                           ;main.c: 705: lcdInst(0xC0);;
  6106  000FC4  0EC0               	movlw	192
  6107  000FC6  ECE9  F01A         	call	i2_lcdInst
  6108                           
  6109                           ;main.c: 706: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  6110  000FCA  0E37               	movlw	low STR_13
  6111  000FCC  6E0D               	movwf	i2printf@f,c
  6112  000FCE  0EFF               	movlw	high STR_13
  6113  000FD0  6E0E               	movwf	i2printf@f+1,c
  6114  000FD2  C054  F00F         	movff	_time+2,?i2_printf+2
  6115  000FD6  6A10               	clrf	?i2_printf+3,c
  6116  000FD8  C053  F011         	movff	_time+1,?i2_printf+4
  6117  000FDC  6A12               	clrf	?i2_printf+5,c
  6118  000FDE  C052  F013         	movff	_time,?i2_printf+6
  6119  000FE2  6A14               	clrf	?i2_printf+7,c
  6120  000FE4  EC59  F00F         	call	i2_printf	;wreg free
  6121                           
  6122                           ;main.c: 707: _delay((unsigned long)((600)*(40000000/4000.0)));
  6123  000FE8  0E1F               	movlw	31
  6124  000FEA  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  6125  000FEC  0E71               	movlw	113
  6126  000FEE  6E27               	movwf	??_interruptHandler& (0+255),c
  6127  000FF0  0E1E               	movlw	30
  6128  000FF2                     i2u473_47:
  6129  000FF2  2EE8               	decfsz	wreg,f,c
  6130  000FF4  D7FE               	bra	i2u473_47
  6131  000FF6  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  6132  000FF8  D7FC               	bra	i2u473_47
  6133  000FFA  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6134  000FFC  D7FA               	bra	i2u473_47
  6135  000FFE  D000               	nop2	
  6136  001000  4A65               	infsnz	_i,f,c
  6137  001002  2A66               	incf	_i+1,f,c
  6138  001004  5066               	movf	_i+1,w,c
  6139  001006  E113               	bnz	i2l4796
  6140  001008                     L1:
  6141  001008  0E03               	movlw	3
  6142  00100A  5C65               	subwf	_i,w,c
  6143  00100C  A0D8               	btfss	status,0,c
  6144  00100E  D784               	goto	i2l359
  6145  001010  EF0E  F00D         	goto	i2l5136
  6146  001014                     i2l358:
  6147                           
  6148                           ;main.c: 711: }
  6149                           ;main.c: 712: if (temp == '2'){
  6150  001014  0E32               	movlw	50
  6151  001016  1841               	xorwf	interruptHandler@temp,w,c
  6152  001018  A4D8               	btfss	status,2,c
  6153  00101A  D00B               	goto	i2l363
  6154                           
  6155                           ;main.c: 713: change_mode = 1;
  6156  00101C  0E00               	movlw	0
  6157  00101E  0100               	movlb	0	; () banked
  6158  001020  6FB1               	movwf	(_change_mode+1)& (0+255),b
  6159  001022  0E01               	movlw	1
  6160  001024  6FB0               	movwf	_change_mode& (0+255),b
  6161                           
  6162                           ;main.c: 714: mode = 1;
  6163  001026  0E00               	movlw	0
  6164  001028  6FFB               	movwf	(_mode+1)& (0+255),b
  6165  00102A  0E01               	movlw	1
  6166  00102C  D141               	goto	L8
  6167  00102E                     i2l4796:
  6168  00102E  EF0E  F00D         	goto	i2l5136
  6169  001032                     i2l363:
  6170                           
  6171                           ;main.c: 719: }
  6172                           ;main.c: 722: }
  6173                           ;main.c: 727: if(operation == 1){
  6174                           
  6175                           ; BSR set to: 0
  6176                           
  6177                           ; BSR set to: 0
  6178  001032  0100               	movlb	0	; () banked
  6179  001034  05AE               	decf	_operation& (0+255),w,b
  6180  001036  11AF               	iorwf	(_operation+1)& (0+255),w,b
  6181  001038  A4D8               	btfss	status,2,c
  6182  00103A  D13C               	goto	i2l372
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;main.c: 728: if (temp == '1'){
  6186  00103C  0E31               	movlw	49
  6187  00103E  1841               	xorwf	interruptHandler@temp,w,c
  6188  001040  A4D8               	btfss	status,2,c
  6189  001042  D089               	goto	i2l365
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;main.c: 729: initLCD();
  6193  001044  EC41  F019         	call	i2_initLCD	;wreg free
  6194                           
  6195                           ;main.c: 730: for (i = 0; i <3; i++){
  6196  001048  0E00               	movlw	0
  6197  00104A  6E66               	movwf	_i+1,c
  6198  00104C  0E00               	movlw	0
  6199  00104E  6E65               	movwf	_i,c
  6200  001050  5066               	movf	_i+1,w,c
  6201  001052  E101               	bnz	i2u398_40
  6202  001054  D07A               	goto	L2
  6203  001056                     i2u398_40:
  6204  001056  EF0E  F00D         	goto	i2l5136
  6205  00105A                     
  6206                           ;main.c: 731: I2C_Master_Init(100000);
  6207  00105A  0EA0               	movlw	160
  6208  00105C  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  6209  00105E  0E86               	movlw	134
  6210  001060  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  6211  001062  0E01               	movlw	1
  6212  001064  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  6213  001066  0E00               	movlw	0
  6214  001068  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  6215  00106A  EC9A  F018         	call	i2_I2C_Master_Init	;wreg free
  6216                           
  6217                           ;main.c: 732: I2C_Master_Start();
  6218  00106E  EC18  F01B         	call	i2_I2C_Master_Start	;wreg free
  6219                           
  6220                           ;main.c: 733: I2C_Master_Write(0b11010000);
  6221  001072  0E00               	movlw	0
  6222  001074  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  6223  001076  0ED0               	movlw	208
  6224  001078  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  6225  00107A  EC07  F01B         	call	i2_I2C_Master_Write	;wreg free
  6226                           
  6227                           ;main.c: 734: I2C_Master_Write(0x00);
  6228  00107E  0E00               	movlw	0
  6229  001080  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  6230  001082  0E00               	movlw	0
  6231  001084  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  6232  001086  EC07  F01B         	call	i2_I2C_Master_Write	;wreg free
  6233                           
  6234                           ;main.c: 735: I2C_Master_Stop();
  6235  00108A  EC14  F01B         	call	i2_I2C_Master_Stop	;wreg free
  6236                           
  6237                           ;main.c: 738: I2C_Master_Start();
  6238  00108E  EC18  F01B         	call	i2_I2C_Master_Start	;wreg free
  6239                           
  6240                           ;main.c: 739: I2C_Master_Write(0b11010001);
  6241  001092  0E00               	movlw	0
  6242  001094  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  6243  001096  0ED1               	movlw	209
  6244  001098  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  6245  00109A  EC07  F01B         	call	i2_I2C_Master_Write	;wreg free
  6246                           
  6247                           ;main.c: 740: for(j = 0; j < 6; j++){
  6248  00109E  0E00               	movlw	0
  6249  0010A0  6E67               	movwf	_j,c
  6250  0010A2                     i2l4816:
  6251  0010A2  0E05               	movlw	5
  6252  0010A4  6467               	cpfsgt	_j,c
  6253  0010A6  D001               	goto	i2l368
  6254  0010A8  D00E               	goto	i2u400_40
  6255  0010AA                     i2l368:
  6256                           
  6257                           ;main.c: 741: time[j] = I2C_Master_Read(0);
  6258  0010AA  5067               	movf	_j,w,c
  6259  0010AC  0D01               	mullw	1
  6260  0010AE  0E52               	movlw	low _time
  6261  0010B0  24F3               	addwf	prodl,w,c
  6262  0010B2  6ED9               	movwf	fsr2l,c
  6263  0010B4  0E00               	movlw	high _time
  6264  0010B6  20F4               	addwfc	prodh,w,c
  6265  0010B8  6EDA               	movwf	fsr2h,c
  6266  0010BA  0E00               	movlw	0
  6267  0010BC  EC7F  F01A         	call	i2_I2C_Master_Read
  6268  0010C0  6EDF               	movwf	indf2,c
  6269  0010C2  2A67               	incf	_j,f,c
  6270  0010C4  D7EE               	goto	i2l4816
  6271  0010C6                     i2u400_40:
  6272                           
  6273                           ;main.c: 742: }
  6274                           ;main.c: 743: time[6] = I2C_Master_Read(1);
  6275  0010C6  0E01               	movlw	1
  6276  0010C8  EC7F  F01A         	call	i2_I2C_Master_Read
  6277  0010CC  6E58               	movwf	_time+6,c
  6278                           
  6279                           ;main.c: 744: I2C_Master_Stop();
  6280  0010CE  EC14  F01B         	call	i2_I2C_Master_Stop	;wreg free
  6281                           
  6282                           ;main.c: 746: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6283  0010D2  0E80               	movlw	128
  6284  0010D4  ECE9  F01A         	call	i2_lcdInst
  6285  0010D8  0E41               	movlw	65
  6286  0010DA  6E27               	movwf	??_interruptHandler& (0+255),c
  6287  0010DC  0EEE               	movlw	238
  6288  0010DE                     i2u474_47:
  6289  0010DE  2EE8               	decfsz	wreg,f,c
  6290  0010E0  D7FE               	bra	i2u474_47
  6291  0010E2  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  6292  0010E4  D7FC               	bra	i2u474_47
  6293  0010E6  D000               	nop2	
  6294                           
  6295                           ;main.c: 747: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  6296  0010E8  0E28               	movlw	low STR_12
  6297  0010EA  6E0D               	movwf	i2printf@f,c
  6298  0010EC  0EFF               	movlw	high STR_12
  6299  0010EE  6E0E               	movwf	i2printf@f+1,c
  6300  0010F0  C058  F00F         	movff	_time+6,?i2_printf+2
  6301  0010F4  6A10               	clrf	?i2_printf+3,c
  6302  0010F6  C057  F011         	movff	_time+5,?i2_printf+4
  6303  0010FA  6A12               	clrf	?i2_printf+5,c
  6304  0010FC  C056  F013         	movff	_time+4,?i2_printf+6
  6305  001100  6A14               	clrf	?i2_printf+7,c
  6306  001102  EC59  F00F         	call	i2_printf	;wreg free
  6307                           
  6308                           ;main.c: 748: lcdInst(0xC0);;
  6309  001106  0EC0               	movlw	192
  6310  001108  ECE9  F01A         	call	i2_lcdInst
  6311                           
  6312                           ;main.c: 749: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  6313  00110C  0E37               	movlw	low STR_13
  6314  00110E  6E0D               	movwf	i2printf@f,c
  6315  001110  0EFF               	movlw	high STR_13
  6316  001112  6E0E               	movwf	i2printf@f+1,c
  6317  001114  C054  F00F         	movff	_time+2,?i2_printf+2
  6318  001118  6A10               	clrf	?i2_printf+3,c
  6319  00111A  C053  F011         	movff	_time+1,?i2_printf+4
  6320  00111E  6A12               	clrf	?i2_printf+5,c
  6321  001120  C052  F013         	movff	_time,?i2_printf+6
  6322  001124  6A14               	clrf	?i2_printf+7,c
  6323  001126  EC59  F00F         	call	i2_printf	;wreg free
  6324                           
  6325                           ;main.c: 750: _delay((unsigned long)((600)*(40000000/4000.0)));
  6326  00112A  0E1F               	movlw	31
  6327  00112C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  6328  00112E  0E71               	movlw	113
  6329  001130  6E27               	movwf	??_interruptHandler& (0+255),c
  6330  001132  0E1E               	movlw	30
  6331  001134                     i2u475_47:
  6332  001134  2EE8               	decfsz	wreg,f,c
  6333  001136  D7FE               	bra	i2u475_47
  6334  001138  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  6335  00113A  D7FC               	bra	i2u475_47
  6336  00113C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6337  00113E  D7FA               	bra	i2u475_47
  6338  001140  D000               	nop2	
  6339  001142  4A65               	infsnz	_i,f,c
  6340  001144  2A66               	incf	_i+1,f,c
  6341  001146  5066               	movf	_i+1,w,c
  6342  001148  E104               	bnz	i2u401_40
  6343  00114A                     L2:
  6344  00114A  0E03               	movlw	3
  6345  00114C  5C65               	subwf	_i,w,c
  6346  00114E  A0D8               	btfss	status,0,c
  6347  001150  D784               	goto	i2l366
  6348  001152                     i2u401_40:
  6349  001152  EF0E  F00D         	goto	i2l5136
  6350  001156                     i2l365:
  6351                           
  6352                           ;main.c: 756: }
  6353                           ;main.c: 757: if (temp == '2'){
  6354  001156  0E32               	movlw	50
  6355  001158  1841               	xorwf	interruptHandler@temp,w,c
  6356  00115A  A4D8               	btfss	status,2,c
  6357  00115C  D099               	goto	i2l370
  6358                           
  6359                           ;main.c: 766: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
  6360  00115E  C08E  F001         	movff	_hr_initial,i2___wmul@multiplier
  6361  001162  C08F  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
  6362  001166  0E0E               	movlw	14
  6363  001168  6E04               	movwf	i2___wmul@multiplicand+1,c
  6364  00116A  0E10               	movlw	16
  6365  00116C  6E03               	movwf	i2___wmul@multiplicand,c
  6366  00116E  EC6C  F01A         	call	i2___wmul	;wreg free
  6367  001172  C001  F027         	movff	?i2___wmul,??_interruptHandler
  6368  001176  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
  6369  00117A  C08C  F001         	movff	_min_initial,i2___wmul@multiplier
  6370  00117E  C08D  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
  6371  001182  0E00               	movlw	0
  6372  001184  6E04               	movwf	i2___wmul@multiplicand+1,c
  6373  001186  0E3C               	movlw	60
  6374  001188  6E03               	movwf	i2___wmul@multiplicand,c
  6375  00118A  EC6C  F01A         	call	i2___wmul	;wreg free
  6376  00118E  5001               	movf	?i2___wmul,w,c
  6377  001190  2627               	addwf	??_interruptHandler,f,c
  6378  001192  5002               	movf	?i2___wmul+1,w,c
  6379  001194  2228               	addwfc	??_interruptHandler+1,f,c
  6380  001196  0100               	movlb	0	; () banked
  6381  001198  518A               	movf	_sec_initial& (0+255),w,b
  6382  00119A  2427               	addwf	??_interruptHandler,w,c
  6383  00119C  6F88               	movwf	_initial_time& (0+255),b
  6384  00119E  518B               	movf	(_sec_initial+1)& (0+255),w,b
  6385  0011A0  2028               	addwfc	??_interruptHandler+1,w,c
  6386  0011A2  6F89               	movwf	(_initial_time+1)& (0+255),b
  6387                           
  6388                           ;main.c: 767: final_time = hr_final*3600 + min_final*60 + sec_final;
  6389  0011A4  C086  F001         	movff	_hr_final,i2___wmul@multiplier
  6390  0011A8  C087  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
  6391  0011AC  0E0E               	movlw	14
  6392  0011AE  6E04               	movwf	i2___wmul@multiplicand+1,c
  6393  0011B0  0E10               	movlw	16
  6394  0011B2  6E03               	movwf	i2___wmul@multiplicand,c
  6395  0011B4  EC6C  F01A         	call	i2___wmul	;wreg free
  6396  0011B8  C001  F027         	movff	?i2___wmul,??_interruptHandler
  6397  0011BC  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
  6398  0011C0  C084  F001         	movff	_min_final,i2___wmul@multiplier
  6399  0011C4  C085  F002         	movff	_min_final+1,i2___wmul@multiplier+1
  6400  0011C8  0E00               	movlw	0
  6401  0011CA  6E04               	movwf	i2___wmul@multiplicand+1,c
  6402  0011CC  0E3C               	movlw	60
  6403  0011CE  6E03               	movwf	i2___wmul@multiplicand,c
  6404  0011D0  EC6C  F01A         	call	i2___wmul	;wreg free
  6405  0011D4  5001               	movf	?i2___wmul,w,c
  6406  0011D6  2627               	addwf	??_interruptHandler,f,c
  6407  0011D8  5002               	movf	?i2___wmul+1,w,c
  6408  0011DA  2228               	addwfc	??_interruptHandler+1,f,c
  6409  0011DC  0100               	movlb	0	; () banked
  6410  0011DE  5182               	movf	_sec_final& (0+255),w,b
  6411  0011E0  2427               	addwf	??_interruptHandler,w,c
  6412  0011E2  6F80               	movwf	_final_time& (0+255),b
  6413  0011E4  5183               	movf	(_sec_final+1)& (0+255),w,b
  6414  0011E6  2028               	addwfc	??_interruptHandler+1,w,c
  6415  0011E8  6F81               	movwf	(_final_time+1)& (0+255),b
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;main.c: 768: operationTime = final_time - initial_time;
  6419  0011EA  C088  F027         	movff	_initial_time,??_interruptHandler
  6420  0011EE  C089  F028         	movff	_initial_time+1,??_interruptHandler+1
  6421  0011F2  1E27               	comf	??_interruptHandler,f,c
  6422  0011F4  1E28               	comf	??_interruptHandler+1,f,c
  6423  0011F6  4A27               	infsnz	??_interruptHandler,f,c
  6424  0011F8  2A28               	incf	??_interruptHandler+1,f,c
  6425  0011FA  5180               	movf	_final_time& (0+255),w,b
  6426  0011FC  2427               	addwf	??_interruptHandler,w,c
  6427  0011FE  6FA4               	movwf	_operationTime& (0+255),b
  6428  001200  5181               	movf	(_final_time+1)& (0+255),w,b
  6429  001202  2028               	addwfc	??_interruptHandler+1,w,c
  6430  001204  6FA5               	movwf	(_operationTime+1)& (0+255),b
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;main.c: 769: initLCD();
  6434  001206  EC41  F019         	call	i2_initLCD	;wreg free
  6435                           
  6436                           ;main.c: 772: printf("operation time:");
  6437  00120A  0EFA               	movlw	low STR_16
  6438  00120C  6E0D               	movwf	i2printf@f,c
  6439  00120E  0EFE               	movlw	high STR_16
  6440  001210  6E0E               	movwf	i2printf@f+1,c
  6441  001212  EC59  F00F         	call	i2_printf	;wreg free
  6442                           
  6443                           ;main.c: 773: lcdInst(0xC0);;
  6444  001216  0EC0               	movlw	192
  6445  001218  ECE9  F01A         	call	i2_lcdInst
  6446                           
  6447                           ;main.c: 774: printf("%dmin %dsecs",operationTime/60,operationTime%60);
  6448  00121C  0E61               	movlw	low STR_17
  6449  00121E  6E0D               	movwf	i2printf@f,c
  6450  001220  0EFF               	movlw	high STR_17
  6451  001222  6E0E               	movwf	i2printf@f+1,c
  6452  001224  C0A4  F001         	movff	_operationTime,i2___awdiv@dividend
  6453  001228  C0A5  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
  6454  00122C  0E00               	movlw	0
  6455  00122E  6E04               	movwf	i2___awdiv@divisor+1,c
  6456  001230  0E3C               	movlw	60
  6457  001232  6E03               	movwf	i2___awdiv@divisor,c
  6458  001234  EC7C  F017         	call	i2___awdiv	;wreg free
  6459  001238  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  6460  00123C  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  6461  001240  C0A4  F001         	movff	_operationTime,___awmod@dividend
  6462  001244  C0A5  F002         	movff	_operationTime+1,___awmod@dividend+1
  6463  001248  0E00               	movlw	0
  6464  00124A  6E04               	movwf	___awmod@divisor+1,c
  6465  00124C  0E3C               	movlw	60
  6466  00124E  6E03               	movwf	___awmod@divisor,c
  6467  001250  ECFF  F017         	call	___awmod	;wreg free
  6468  001254  C001  F011         	movff	?___awmod,?i2_printf+4
  6469  001258  C002  F012         	movff	?___awmod+1,?i2_printf+5
  6470  00125C  EC59  F00F         	call	i2_printf	;wreg free
  6471                           
  6472                           ;main.c: 775: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6473  001260  0E80               	movlw	128
  6474  001262  ECE9  F01A         	call	i2_lcdInst
  6475  001266  0E41               	movlw	65
  6476  001268  6E27               	movwf	??_interruptHandler& (0+255),c
  6477  00126A  0EEE               	movlw	238
  6478  00126C                     i2u476_47:
  6479  00126C  2EE8               	decfsz	wreg,f,c
  6480  00126E  D7FE               	bra	i2u476_47
  6481  001270  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  6482  001272  D7FC               	bra	i2u476_47
  6483  001274  D000               	nop2	
  6484                           
  6485                           ;main.c: 776: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6486  001276  0E66               	movlw	102
  6487  001278  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  6488  00127A  0E76               	movlw	118
  6489  00127C  6E27               	movwf	??_interruptHandler& (0+255),c
  6490  00127E  0EC1               	movlw	193
  6491  001280                     i2u477_47:
  6492  001280  2EE8               	decfsz	wreg,f,c
  6493  001282  D7FE               	bra	i2u477_47
  6494  001284  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  6495  001286  D7FC               	bra	i2u477_47
  6496  001288  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6497  00128A  D7FA               	bra	i2u477_47
  6498  00128C  F000               	nop	
  6499  00128E  D3C6               	goto	i2l5136
  6500  001290                     i2l370:
  6501                           
  6502                           ;main.c: 782: }
  6503                           ;main.c: 784: if (temp == '3'){
  6504  001290  0E33               	movlw	51
  6505  001292  1841               	xorwf	interruptHandler@temp,w,c
  6506  001294  B4D8               	btfsc	status,2,c
  6507  001296  D3C2               	goto	i2l5136
  6508                           
  6509                           ;main.c: 791: }
  6510                           ;main.c: 793: if (temp == '4'){
  6511                           
  6512                           ;main.c: 790: return;
  6513                           
  6514                           ;main.c: 789: INT1IF = 0;
  6515  001298  0E34               	movlw	52
  6516  00129A  1841               	xorwf	interruptHandler@temp,w,c
  6517  00129C  A4D8               	btfss	status,2,c
  6518  00129E  D00A               	goto	i2l372
  6519                           
  6520                           ;main.c: 794: operation_done = 1;
  6521  0012A0  0E00               	movlw	0
  6522  0012A2  0100               	movlb	0	; () banked
  6523  0012A4  6FAD               	movwf	(_operation_done+1)& (0+255),b
  6524  0012A6  0E01               	movlw	1
  6525  0012A8  6FAC               	movwf	_operation_done& (0+255),b
  6526                           
  6527                           ;main.c: 795: mode = 0;
  6528  0012AA  0E00               	movlw	0
  6529  0012AC  6FFB               	movwf	(_mode+1)& (0+255),b
  6530  0012AE  0E00               	movlw	0
  6531  0012B0                     L8:
  6532  0012B0  6FFA               	movwf	_mode& (0+255),b
  6533  0012B2  D3B4               	goto	i2l5136
  6534  0012B4                     i2l372:
  6535                           
  6536                           ;main.c: 798: }
  6537                           ;main.c: 800: }
  6538                           ;main.c: 825: if (state == 0){
  6539                           
  6540                           ; BSR set to: 0
  6541                           
  6542                           ; BSR set to: 0
  6543  0012B4  5063               	movf	_state,w,c
  6544  0012B6  1064               	iorwf	_state+1,w,c
  6545  0012B8  A4D8               	btfss	status,2,c
  6546  0012BA  D0CE               	goto	i2l373
  6547                           
  6548                           ;main.c: 827: if(temp == '4'){
  6549  0012BC  0E34               	movlw	52
  6550  0012BE  1841               	xorwf	interruptHandler@temp,w,c
  6551  0012C0  A4D8               	btfss	status,2,c
  6552  0012C2  D020               	goto	i2l374
  6553                           
  6554                           ;main.c: 828: assembly_step = 4;
  6555  0012C4  0E00               	movlw	0
  6556  0012C6  0100               	movlb	0	; () banked
  6557  0012C8  6FA3               	movwf	(_assembly_step+1)& (0+255),b
  6558  0012CA  0E04               	movlw	4
  6559  0012CC  6FA2               	movwf	_assembly_step& (0+255),b
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;main.c: 829: prev_state = state;
  6563  0012CE  C063  F09A         	movff	_state,_prev_state
  6564  0012D2  C064  F09B         	movff	_state+1,_prev_state+1
  6565                           
  6566                           ;main.c: 830: state = 1;
  6567  0012D6  0E00               	movlw	0
  6568  0012D8  6E64               	movwf	_state+1,c
  6569  0012DA  0E01               	movlw	1
  6570  0012DC  6E63               	movwf	_state,c
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;main.c: 831: lcdInst(0xC0);;
  6574  0012DE  0EC0               	movlw	192
  6575  0012E0  ECE9  F01A         	call	i2_lcdInst
  6576                           
  6577                           ;main.c: 832: putch(keys[keypress]);
  6578  0012E4  5040               	movf	interruptHandler@keypress,w,c
  6579  0012E6  0D01               	mullw	1
  6580  0012E8  0EF7               	movlw	low _keys
  6581  0012EA  24F3               	addwf	prodl,w,c
  6582  0012EC  6EF6               	movwf	tblptrl,c
  6583  0012EE  0EFD               	movlw	high _keys
  6584  0012F0  20F4               	addwfc	prodh,w,c
  6585  0012F2  6EF7               	movwf	tblptrh,c
  6586  0012F4                     	if	1	;There are 3 active tblptr bytes
  6587  0012F4  6AF8               	clrf	tblptru,c
  6588  0012F6  0E00               	movlw	low (__mediumconst shr (0+16))
  6589  0012F8  22F8               	addwfc	tblptru,f,c
  6590  0012FA                     	endif
  6591  0012FA  0008               	tblrd		*
  6592  0012FC  50F5               	movf	tablat,w,c
  6593  0012FE  ECDF  F01A         	call	i2_putch
  6594                           
  6595                           ;main.c: 834: }
  6596  001302  D0A3               	goto	i2l383
  6597  001304                     i2l374:
  6598                           
  6599                           ;main.c: 835: else if(temp == '5'){
  6600  001304  0E35               	movlw	53
  6601  001306  1841               	xorwf	interruptHandler@temp,w,c
  6602  001308  A4D8               	btfss	status,2,c
  6603  00130A  D020               	goto	i2l376
  6604                           
  6605                           ;main.c: 836: assembly_step = 5;
  6606  00130C  0E00               	movlw	0
  6607  00130E  0100               	movlb	0	; () banked
  6608  001310  6FA3               	movwf	(_assembly_step+1)& (0+255),b
  6609  001312  0E05               	movlw	5
  6610  001314  6FA2               	movwf	_assembly_step& (0+255),b
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;main.c: 837: prev_state = state;
  6614  001316  C063  F09A         	movff	_state,_prev_state
  6615  00131A  C064  F09B         	movff	_state+1,_prev_state+1
  6616                           
  6617                           ;main.c: 838: state = 1;
  6618  00131E  0E00               	movlw	0
  6619  001320  6E64               	movwf	_state+1,c
  6620  001322  0E01               	movlw	1
  6621  001324  6E63               	movwf	_state,c
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;main.c: 839: lcdInst(0xC0);;
  6625  001326  0EC0               	movlw	192
  6626  001328  ECE9  F01A         	call	i2_lcdInst
  6627                           
  6628                           ;main.c: 840: putch(keys[keypress]);
  6629  00132C  5040               	movf	interruptHandler@keypress,w,c
  6630  00132E  0D01               	mullw	1
  6631  001330  0EF7               	movlw	low _keys
  6632  001332  24F3               	addwf	prodl,w,c
  6633  001334  6EF6               	movwf	tblptrl,c
  6634  001336  0EFD               	movlw	high _keys
  6635  001338  20F4               	addwfc	prodh,w,c
  6636  00133A  6EF7               	movwf	tblptrh,c
  6637  00133C                     	if	1	;There are 3 active tblptr bytes
  6638  00133C  6AF8               	clrf	tblptru,c
  6639  00133E  0E00               	movlw	low (__mediumconst shr (0+16))
  6640  001340  22F8               	addwfc	tblptru,f,c
  6641  001342                     	endif
  6642  001342  0008               	tblrd		*
  6643  001344  50F5               	movf	tablat,w,c
  6644  001346  ECDF  F01A         	call	i2_putch
  6645                           
  6646                           ;main.c: 842: }
  6647  00134A  D07F               	goto	i2l383
  6648  00134C                     i2l376:
  6649                           
  6650                           ;main.c: 843: else if (temp == '6') {
  6651  00134C  0E36               	movlw	54
  6652  00134E  1841               	xorwf	interruptHandler@temp,w,c
  6653  001350  A4D8               	btfss	status,2,c
  6654  001352  D020               	goto	i2l378
  6655                           
  6656                           ;main.c: 844: assembly_step = 6;
  6657  001354  0E00               	movlw	0
  6658  001356  0100               	movlb	0	; () banked
  6659  001358  6FA3               	movwf	(_assembly_step+1)& (0+255),b
  6660  00135A  0E06               	movlw	6
  6661  00135C  6FA2               	movwf	_assembly_step& (0+255),b
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;main.c: 845: prev_state = state;
  6665  00135E  C063  F09A         	movff	_state,_prev_state
  6666  001362  C064  F09B         	movff	_state+1,_prev_state+1
  6667                           
  6668                           ;main.c: 846: state = 1;
  6669  001366  0E00               	movlw	0
  6670  001368  6E64               	movwf	_state+1,c
  6671  00136A  0E01               	movlw	1
  6672  00136C  6E63               	movwf	_state,c
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;main.c: 847: lcdInst(0xC0);;
  6676  00136E  0EC0               	movlw	192
  6677  001370  ECE9  F01A         	call	i2_lcdInst
  6678                           
  6679                           ;main.c: 848: putch(keys[keypress]);
  6680  001374  5040               	movf	interruptHandler@keypress,w,c
  6681  001376  0D01               	mullw	1
  6682  001378  0EF7               	movlw	low _keys
  6683  00137A  24F3               	addwf	prodl,w,c
  6684  00137C  6EF6               	movwf	tblptrl,c
  6685  00137E  0EFD               	movlw	high _keys
  6686  001380  20F4               	addwfc	prodh,w,c
  6687  001382  6EF7               	movwf	tblptrh,c
  6688  001384                     	if	1	;There are 3 active tblptr bytes
  6689  001384  6AF8               	clrf	tblptru,c
  6690  001386  0E00               	movlw	low (__mediumconst shr (0+16))
  6691  001388  22F8               	addwfc	tblptru,f,c
  6692  00138A                     	endif
  6693  00138A  0008               	tblrd		*
  6694  00138C  50F5               	movf	tablat,w,c
  6695  00138E  ECDF  F01A         	call	i2_putch
  6696                           
  6697                           ;main.c: 849: }
  6698  001392  D05B               	goto	i2l383
  6699  001394                     i2l378:
  6700                           
  6701                           ;main.c: 850: else if (temp == '7'){
  6702  001394  0E37               	movlw	55
  6703  001396  1841               	xorwf	interruptHandler@temp,w,c
  6704  001398  A4D8               	btfss	status,2,c
  6705  00139A  D020               	goto	i2l380
  6706                           
  6707                           ;main.c: 851: assembly_step = 7;
  6708  00139C  0E00               	movlw	0
  6709  00139E  0100               	movlb	0	; () banked
  6710  0013A0  6FA3               	movwf	(_assembly_step+1)& (0+255),b
  6711  0013A2  0E07               	movlw	7
  6712  0013A4  6FA2               	movwf	_assembly_step& (0+255),b
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;main.c: 852: prev_state = state;
  6716  0013A6  C063  F09A         	movff	_state,_prev_state
  6717  0013AA  C064  F09B         	movff	_state+1,_prev_state+1
  6718                           
  6719                           ;main.c: 853: state = 1;
  6720  0013AE  0E00               	movlw	0
  6721  0013B0  6E64               	movwf	_state+1,c
  6722  0013B2  0E01               	movlw	1
  6723  0013B4  6E63               	movwf	_state,c
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;main.c: 854: lcdInst(0xC0);;
  6727  0013B6  0EC0               	movlw	192
  6728  0013B8  ECE9  F01A         	call	i2_lcdInst
  6729                           
  6730                           ;main.c: 855: putch(keys[keypress]);
  6731  0013BC  5040               	movf	interruptHandler@keypress,w,c
  6732  0013BE  0D01               	mullw	1
  6733  0013C0  0EF7               	movlw	low _keys
  6734  0013C2  24F3               	addwf	prodl,w,c
  6735  0013C4  6EF6               	movwf	tblptrl,c
  6736  0013C6  0EFD               	movlw	high _keys
  6737  0013C8  20F4               	addwfc	prodh,w,c
  6738  0013CA  6EF7               	movwf	tblptrh,c
  6739  0013CC                     	if	1	;There are 3 active tblptr bytes
  6740  0013CC  6AF8               	clrf	tblptru,c
  6741  0013CE  0E00               	movlw	low (__mediumconst shr (0+16))
  6742  0013D0  22F8               	addwfc	tblptru,f,c
  6743  0013D2                     	endif
  6744  0013D2  0008               	tblrd		*
  6745  0013D4  50F5               	movf	tablat,w,c
  6746  0013D6  ECDF  F01A         	call	i2_putch
  6747                           
  6748                           ;main.c: 857: }
  6749  0013DA  D037               	goto	i2l383
  6750  0013DC                     i2l380:
  6751                           
  6752                           ;main.c: 858: else if (temp == '8'){
  6753  0013DC  0E38               	movlw	56
  6754  0013DE  1841               	xorwf	interruptHandler@temp,w,c
  6755  0013E0  A4D8               	btfss	status,2,c
  6756  0013E2  D020               	goto	i2l382
  6757                           
  6758                           ;main.c: 859: assembly_step = 8;
  6759  0013E4  0E00               	movlw	0
  6760  0013E6  0100               	movlb	0	; () banked
  6761  0013E8  6FA3               	movwf	(_assembly_step+1)& (0+255),b
  6762  0013EA  0E08               	movlw	8
  6763  0013EC  6FA2               	movwf	_assembly_step& (0+255),b
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;main.c: 860: prev_state = state;
  6767  0013EE  C063  F09A         	movff	_state,_prev_state
  6768  0013F2  C064  F09B         	movff	_state+1,_prev_state+1
  6769                           
  6770                           ;main.c: 861: state = 1;
  6771  0013F6  0E00               	movlw	0
  6772  0013F8  6E64               	movwf	_state+1,c
  6773  0013FA  0E01               	movlw	1
  6774  0013FC  6E63               	movwf	_state,c
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;main.c: 862: lcdInst(0xC0);;
  6778  0013FE  0EC0               	movlw	192
  6779  001400  ECE9  F01A         	call	i2_lcdInst
  6780                           
  6781                           ;main.c: 863: putch(keys[keypress]);
  6782  001404  5040               	movf	interruptHandler@keypress,w,c
  6783  001406  0D01               	mullw	1
  6784  001408  0EF7               	movlw	low _keys
  6785  00140A  24F3               	addwf	prodl,w,c
  6786  00140C  6EF6               	movwf	tblptrl,c
  6787  00140E  0EFD               	movlw	high _keys
  6788  001410  20F4               	addwfc	prodh,w,c
  6789  001412  6EF7               	movwf	tblptrh,c
  6790  001414                     	if	1	;There are 3 active tblptr bytes
  6791  001414  6AF8               	clrf	tblptru,c
  6792  001416  0E00               	movlw	low (__mediumconst shr (0+16))
  6793  001418  22F8               	addwfc	tblptru,f,c
  6794  00141A                     	endif
  6795  00141A  0008               	tblrd		*
  6796  00141C  50F5               	movf	tablat,w,c
  6797  00141E  ECDF  F01A         	call	i2_putch
  6798                           
  6799                           ;main.c: 865: }
  6800  001422  D013               	goto	i2l383
  6801  001424                     i2l382:
  6802                           
  6803                           ;main.c: 866: else{
  6804                           ;main.c: 872: initLCD();
  6805  001424  EC41  F019         	call	i2_initLCD	;wreg free
  6806                           
  6807                           ;main.c: 873: printf("Wrong number! ");
  6808  001428  0E0A               	movlw	low STR_18
  6809  00142A  6E0D               	movwf	i2printf@f,c
  6810  00142C  0EFF               	movlw	high STR_18
  6811  00142E  6E0E               	movwf	i2printf@f+1,c
  6812  001430  EC59  F00F         	call	i2_printf	;wreg free
  6813                           
  6814                           ;main.c: 874: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6815  001434  0E33               	movlw	51
  6816  001436  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  6817  001438  0EBB               	movlw	187
  6818  00143A  6E27               	movwf	??_interruptHandler& (0+255),c
  6819  00143C  0EE0               	movlw	224
  6820  00143E                     i2u478_47:
  6821  00143E  2EE8               	decfsz	wreg,f,c
  6822  001440  D7FE               	bra	i2u478_47
  6823  001442  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  6824  001444  D7FC               	bra	i2u478_47
  6825  001446  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  6826  001448  D7FA               	bra	i2u478_47
  6827  00144A                     i2l383:
  6828                           
  6829                           ;main.c: 876: }
  6830                           ;main.c: 882: generate_compartment_array(assembly_step);
  6831  00144A  C0A2  F001         	movff	_assembly_step,generate_compartment_array@step
  6832  00144E  C0A3  F002         	movff	_assembly_step+1,generate_compartment_array@step+1
  6833  001452  EC6A  F013         	call	_generate_compartment_array	;wreg free
  6834  001456  D2E2               	goto	i2l5136
  6835  001458                     i2l373:
  6836                           
  6837                           ;main.c: 889: }
  6838                           ;main.c: 897: if(state == 1){
  6839  001458  0463               	decf	_state,w,c
  6840  00145A  1064               	iorwf	_state+1,w,c
  6841  00145C  A4D8               	btfss	status,2,c
  6842  00145E  D1A7               	goto	i2l384
  6843                           
  6844                           ;main.c: 898: if (temp == 'A'){
  6845  001460  0E41               	movlw	65
  6846  001462  1841               	xorwf	interruptHandler@temp,w,c
  6847  001464  A4D8               	btfss	status,2,c
  6848  001466  D004               	goto	i2l385
  6849                           
  6850                           ;main.c: 899: state = prev_state;
  6851  001468  C09A  F063         	movff	_prev_state,_state
  6852  00146C  C09B  F064         	movff	_prev_state+1,_state+1
  6853  001470                     i2l385:
  6854                           
  6855                           ;main.c: 900: }
  6856                           ;main.c: 902: if (temp == '1'){
  6857  001470  0E31               	movlw	49
  6858  001472  1841               	xorwf	interruptHandler@temp,w,c
  6859  001474  A4D8               	btfss	status,2,c
  6860  001476  D01D               	goto	i2l386
  6861                           
  6862                           ;main.c: 903: lcdInst(0xC0);;
  6863  001478  0EC0               	movlw	192
  6864  00147A  ECE9  F01A         	call	i2_lcdInst
  6865                           
  6866                           ;main.c: 904: putch('B');
  6867  00147E  0E42               	movlw	66
  6868  001480  ECDF  F01A         	call	i2_putch
  6869                           
  6870                           ;main.c: 905: strcpy(temp_set,"B");
  6871  001484  0EB8               	movlw	low _temp_set
  6872  001486  6E07               	movwf	strcpy@to,c
  6873  001488  0E00               	movlw	high _temp_set
  6874  00148A  6E08               	movwf	strcpy@to+1,c
  6875  00148C  0EFC               	movlw	low STR_19
  6876  00148E  6E09               	movwf	strcpy@from,c
  6877  001490  0EFF               	movlw	high STR_19
  6878  001492  6E0A               	movwf	strcpy@from+1,c
  6879  001494  EC8C  F019         	call	_strcpy	;wreg free
  6880                           
  6881                           ;main.c: 906: strcat(current_set,temp_set);
  6882  001498  0EBD               	movlw	low _current_set
  6883  00149A  6E01               	movwf	strcat@to,c
  6884  00149C  0E00               	movlw	high _current_set
  6885  00149E  6E02               	movwf	strcat@to+1,c
  6886  0014A0  0EB8               	movlw	low _temp_set
  6887  0014A2  6E03               	movwf	strcat@from,c
  6888  0014A4  0E00               	movlw	high _temp_set
  6889  0014A6  6E04               	movwf	strcat@from+1,c
  6890  0014A8  ECF2  F019         	call	_strcat	;wreg free
  6891                           
  6892                           ;main.c: 907: counter++;
  6893  0014AC  0100               	movlb	0	; () banked
  6894  0014AE  4BA0               	infsnz	_counter& (0+255),f,b
  6895  0014B0  2BA1               	incf	(_counter+1)& (0+255),f,b
  6896  0014B2                     i2l386:
  6897                           
  6898                           ;main.c: 908: }
  6899                           ;main.c: 910: if(temp == '2'){
  6900                           
  6901                           ; BSR set to: 0
  6902  0014B2  0E32               	movlw	50
  6903  0014B4  1841               	xorwf	interruptHandler@temp,w,c
  6904  0014B6  A4D8               	btfss	status,2,c
  6905  0014B8  D01D               	goto	i2l387
  6906                           
  6907                           ;main.c: 911: lcdInst(0xC0);;
  6908  0014BA  0EC0               	movlw	192
  6909  0014BC  ECE9  F01A         	call	i2_lcdInst
  6910                           
  6911                           ;main.c: 912: putch('N');
  6912  0014C0  0E4E               	movlw	78
  6913  0014C2  ECDF  F01A         	call	i2_putch
  6914                           
  6915                           ;main.c: 913: strcpy(temp_set,"N");
  6916  0014C6  0EB8               	movlw	low _temp_set
  6917  0014C8  6E07               	movwf	strcpy@to,c
  6918  0014CA  0E00               	movlw	high _temp_set
  6919  0014CC  6E08               	movwf	strcpy@to+1,c
  6920  0014CE  0EEB               	movlw	low (STR_41+2)
  6921  0014D0  6E09               	movwf	strcpy@from,c
  6922  0014D2  0EFF               	movlw	high (STR_41+2)
  6923  0014D4  6E0A               	movwf	strcpy@from+1,c
  6924  0014D6  EC8C  F019         	call	_strcpy	;wreg free
  6925                           
  6926                           ;main.c: 914: strcat(current_set,temp_set);
  6927  0014DA  0EBD               	movlw	low _current_set
  6928  0014DC  6E01               	movwf	strcat@to,c
  6929  0014DE  0E00               	movlw	high _current_set
  6930  0014E0  6E02               	movwf	strcat@to+1,c
  6931  0014E2  0EB8               	movlw	low _temp_set
  6932  0014E4  6E03               	movwf	strcat@from,c
  6933  0014E6  0E00               	movlw	high _temp_set
  6934  0014E8  6E04               	movwf	strcat@from+1,c
  6935  0014EA  ECF2  F019         	call	_strcat	;wreg free
  6936                           
  6937                           ;main.c: 915: counter++;
  6938  0014EE  0100               	movlb	0	; () banked
  6939  0014F0  4BA0               	infsnz	_counter& (0+255),f,b
  6940  0014F2  2BA1               	incf	(_counter+1)& (0+255),f,b
  6941  0014F4                     i2l387:
  6942                           
  6943                           ;main.c: 916: }
  6944                           ;main.c: 918: if(temp == '3'){
  6945                           
  6946                           ; BSR set to: 0
  6947  0014F4  0E33               	movlw	51
  6948  0014F6  1841               	xorwf	interruptHandler@temp,w,c
  6949  0014F8  A4D8               	btfss	status,2,c
  6950  0014FA  D01D               	goto	i2l388
  6951                           
  6952                           ;main.c: 919: lcdInst(0xC0);;
  6953  0014FC  0EC0               	movlw	192
  6954  0014FE  ECE9  F01A         	call	i2_lcdInst
  6955                           
  6956                           ;main.c: 920: putch('S');
  6957  001502  0E53               	movlw	83
  6958  001504  ECDF  F01A         	call	i2_putch
  6959                           
  6960                           ;main.c: 922: strcpy(temp_set,"S");
  6961  001508  0EB8               	movlw	low _temp_set
  6962  00150A  6E07               	movwf	strcpy@to,c
  6963  00150C  0E00               	movlw	high _temp_set
  6964  00150E  6E08               	movwf	strcpy@to+1,c
  6965  001510  0EEF               	movlw	low (STR_42+2)
  6966  001512  6E09               	movwf	strcpy@from,c
  6967  001514  0EFF               	movlw	high (STR_42+2)
  6968  001516  6E0A               	movwf	strcpy@from+1,c
  6969  001518  EC8C  F019         	call	_strcpy	;wreg free
  6970                           
  6971                           ;main.c: 923: strcat(current_set,temp_set);
  6972  00151C  0EBD               	movlw	low _current_set
  6973  00151E  6E01               	movwf	strcat@to,c
  6974  001520  0E00               	movlw	high _current_set
  6975  001522  6E02               	movwf	strcat@to+1,c
  6976  001524  0EB8               	movlw	low _temp_set
  6977  001526  6E03               	movwf	strcat@from,c
  6978  001528  0E00               	movlw	high _temp_set
  6979  00152A  6E04               	movwf	strcat@from+1,c
  6980  00152C  ECF2  F019         	call	_strcat	;wreg free
  6981                           
  6982                           ;main.c: 924: counter++;
  6983  001530  0100               	movlb	0	; () banked
  6984  001532  4BA0               	infsnz	_counter& (0+255),f,b
  6985  001534  2BA1               	incf	(_counter+1)& (0+255),f,b
  6986  001536                     i2l388:
  6987                           
  6988                           ;main.c: 925: }
  6989                           ;main.c: 926: if (temp == '4'){
  6990                           
  6991                           ; BSR set to: 0
  6992  001536  0E34               	movlw	52
  6993  001538  1841               	xorwf	interruptHandler@temp,w,c
  6994  00153A  A4D8               	btfss	status,2,c
  6995  00153C  D01D               	goto	i2l389
  6996                           
  6997                           ;main.c: 927: lcdInst(0xC0);;
  6998  00153E  0EC0               	movlw	192
  6999  001540  ECE9  F01A         	call	i2_lcdInst
  7000                           
  7001                           ;main.c: 928: putch('W');
  7002  001544  0E57               	movlw	87
  7003  001546  ECDF  F01A         	call	i2_putch
  7004                           
  7005                           ;main.c: 930: strcpy(temp_set,"W");
  7006  00154A  0EB8               	movlw	low _temp_set
  7007  00154C  6E07               	movwf	strcpy@to,c
  7008  00154E  0E00               	movlw	high _temp_set
  7009  001550  6E08               	movwf	strcpy@to+1,c
  7010  001552  0EF3               	movlw	low (STR_43+2)
  7011  001554  6E09               	movwf	strcpy@from,c
  7012  001556  0EFF               	movlw	high (STR_43+2)
  7013  001558  6E0A               	movwf	strcpy@from+1,c
  7014  00155A  EC8C  F019         	call	_strcpy	;wreg free
  7015                           
  7016                           ;main.c: 931: strcat(current_set,temp_set);
  7017  00155E  0EBD               	movlw	low _current_set
  7018  001560  6E01               	movwf	strcat@to,c
  7019  001562  0E00               	movlw	high _current_set
  7020  001564  6E02               	movwf	strcat@to+1,c
  7021  001566  0EB8               	movlw	low _temp_set
  7022  001568  6E03               	movwf	strcat@from,c
  7023  00156A  0E00               	movlw	high _temp_set
  7024  00156C  6E04               	movwf	strcat@from+1,c
  7025  00156E  ECF2  F019         	call	_strcat	;wreg free
  7026                           
  7027                           ;main.c: 933: counter++;
  7028  001572  0100               	movlb	0	; () banked
  7029  001574  4BA0               	infsnz	_counter& (0+255),f,b
  7030  001576  2BA1               	incf	(_counter+1)& (0+255),f,b
  7031  001578                     i2l389:
  7032                           
  7033                           ;main.c: 934: }
  7034                           ;main.c: 936: if (keys[keypress] == '*'){
  7035                           
  7036                           ; BSR set to: 0
  7037  001578  5040               	movf	interruptHandler@keypress,w,c
  7038  00157A  0D01               	mullw	1
  7039  00157C  0EF7               	movlw	low _keys
  7040  00157E  24F3               	addwf	prodl,w,c
  7041  001580  6EF6               	movwf	tblptrl,c
  7042  001582  0EFD               	movlw	high _keys
  7043  001584  20F4               	addwfc	prodh,w,c
  7044  001586  6EF7               	movwf	tblptrh,c
  7045  001588                     	if	1	;There are 3 active tblptr bytes
  7046  001588  6AF8               	clrf	tblptru,c
  7047  00158A  0E00               	movlw	low (__mediumconst shr (0+16))
  7048  00158C  22F8               	addwfc	tblptru,f,c
  7049  00158E                     	endif
  7050  00158E  0008               	tblrd		*
  7051  001590  50F5               	movf	tablat,w,c
  7052  001592  0A2A               	xorlw	42
  7053  001594  A4D8               	btfss	status,2,c
  7054  001596  D0DE               	goto	i2l390
  7055                           
  7056                           ;main.c: 939: _delay((unsigned long)((500)*(40000000/4000.0)));
  7057  001598  0E1A               	movlw	26
  7058  00159A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7059  00159C  0E5E               	movlw	94
  7060  00159E  6E27               	movwf	??_interruptHandler& (0+255),c
  7061  0015A0  0E6E               	movlw	110
  7062  0015A2                     i2u479_47:
  7063  0015A2  2EE8               	decfsz	wreg,f,c
  7064  0015A4  D7FE               	bra	i2u479_47
  7065  0015A6  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7066  0015A8  D7FC               	bra	i2u479_47
  7067  0015AA  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7068  0015AC  D7FA               	bra	i2u479_47
  7069  0015AE  D000               	nop2	
  7070                           
  7071                           ;main.c: 940: counter ++;
  7072  0015B0  0100               	movlb	0	; () banked
  7073  0015B2  4BA0               	infsnz	_counter& (0+255),f,b
  7074  0015B4  2BA1               	incf	(_counter+1)& (0+255),f,b
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;main.c: 941: for (int i=0;i<20;i++){
  7078  0015B6  0E00               	movlw	0
  7079  0015B8  6E3F               	movwf	interruptHandler@i+1,c
  7080  0015BA  0E00               	movlw	0
  7081  0015BC  6E3E               	movwf	interruptHandler@i,c
  7082                           
  7083                           ; BSR set to: 0
  7084  0015BE  BE3F               	btfsc	interruptHandler@i+1,7,c
  7085  0015C0  D008               	goto	i2l391
  7086  0015C2  503F               	movf	interruptHandler@i+1,w,c
  7087  0015C4  E105               	bnz	i2u418_40
  7088  0015C6  0E14               	movlw	20
  7089  0015C8  5C3E               	subwf	interruptHandler@i,w,c
  7090  0015CA  B0D8               	btfsc	status,0,c
  7091  0015CC  D08A               	goto	i2u420_40
  7092  0015CE  D001               	goto	i2l391
  7093  0015D0                     i2u418_40:
  7094                           
  7095                           ; BSR set to: 0
  7096  0015D0  D088               	goto	i2u420_40
  7097  0015D2                     i2l391:
  7098                           
  7099                           ;main.c: 942: if (strncmp(current_set,strs[i],4) == 0){
  7100                           
  7101                           ; BSR set to: 0
  7102  0015D2  0EBD               	movlw	low _current_set
  7103  0015D4  6E07               	movwf	strncmp@s1,c
  7104  0015D6  0E00               	movlw	high _current_set
  7105  0015D8  6E08               	movwf	strncmp@s1+1,c
  7106  0015DA  C03E  F001         	movff	interruptHandler@i,i2___wmul@multiplier
  7107  0015DE  C03F  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
  7108  0015E2  0E00               	movlw	0
  7109  0015E4  6E04               	movwf	i2___wmul@multiplicand+1,c
  7110  0015E6  0E05               	movlw	5
  7111  0015E8  6E03               	movwf	i2___wmul@multiplicand,c
  7112  0015EA  EC6C  F01A         	call	i2___wmul	;wreg free
  7113  0015EE  0E2A               	movlw	low _strs
  7114  0015F0  2401               	addwf	?i2___wmul,w,c
  7115  0015F2  6E09               	movwf	strncmp@s2,c
  7116  0015F4  0EFE               	movlw	high _strs
  7117  0015F6  2002               	addwfc	?i2___wmul+1,w,c
  7118  0015F8  6E0A               	movwf	strncmp@s2+1,c
  7119  0015FA  0E00               	movlw	0
  7120  0015FC  6E0C               	movwf	strncmp@len+1,c
  7121  0015FE  0E04               	movlw	4
  7122  001600  6E0B               	movwf	strncmp@len,c
  7123  001602  ECF7  F016         	call	_strncmp	;wreg free
  7124  001606  5007               	movf	?_strncmp,w,c
  7125  001608  1008               	iorwf	?_strncmp+1,w,c
  7126  00160A  A4D8               	btfss	status,2,c
  7127  00160C  D063               	goto	i2l393
  7128                           
  7129                           ;main.c: 943: strcpy(final_set[counter_step],current_set);
  7130  00160E  C061  F001         	movff	_counter_step,i2___wmul@multiplier
  7131  001612  C062  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
  7132  001616  0E00               	movlw	0
  7133  001618  6E04               	movwf	i2___wmul@multiplicand+1,c
  7134  00161A  0E05               	movlw	5
  7135  00161C  6E03               	movwf	i2___wmul@multiplicand,c
  7136  00161E  EC6C  F01A         	call	i2___wmul	;wreg free
  7137  001622  0E70               	movlw	low _final_set
  7138  001624  2401               	addwf	?i2___wmul,w,c
  7139  001626  6E07               	movwf	strcpy@to,c
  7140  001628  0E01               	movlw	high _final_set
  7141  00162A  2002               	addwfc	?i2___wmul+1,w,c
  7142  00162C  6E08               	movwf	strcpy@to+1,c
  7143  00162E  0EBD               	movlw	low _current_set
  7144  001630  6E09               	movwf	strcpy@from,c
  7145  001632  0E00               	movlw	high _current_set
  7146  001634  6E0A               	movwf	strcpy@from+1,c
  7147  001636  EC8C  F019         	call	_strcpy	;wreg free
  7148                           
  7149                           ;main.c: 944: strcpy(current_set2,current_set);
  7150  00163A  0E6B               	movlw	low _current_set2
  7151  00163C  6E07               	movwf	strcpy@to,c
  7152  00163E  0E00               	movlw	high _current_set2
  7153  001640  6E08               	movwf	strcpy@to+1,c
  7154  001642  0EBD               	movlw	low _current_set
  7155  001644  6E09               	movwf	strcpy@from,c
  7156  001646  0E00               	movlw	high _current_set
  7157  001648  6E0A               	movwf	strcpy@from+1,c
  7158  00164A  EC8C  F019         	call	_strcpy	;wreg free
  7159                           
  7160                           ;main.c: 947: valid = 1;
  7161  00164E  0E00               	movlw	0
  7162  001650  0100               	movlb	0	; () banked
  7163  001652  6F9F               	movwf	(_valid+1)& (0+255),b
  7164  001654  0E01               	movlw	1
  7165  001656  6F9E               	movwf	_valid& (0+255),b
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;main.c: 948: state = 2;
  7169  001658  0E00               	movlw	0
  7170  00165A  6E64               	movwf	_state+1,c
  7171  00165C  0E02               	movlw	2
  7172  00165E  6E63               	movwf	_state,c
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;main.c: 950: initLCD();
  7176  001660  EC41  F019         	call	i2_initLCD	;wreg free
  7177                           
  7178                           ;main.c: 951: printf("correct!");
  7179  001664  0EA6               	movlw	low STR_23
  7180  001666  6E0D               	movwf	i2printf@f,c
  7181  001668  0EFF               	movlw	high STR_23
  7182  00166A  6E0E               	movwf	i2printf@f+1,c
  7183  00166C  EC59  F00F         	call	i2_printf	;wreg free
  7184                           
  7185                           ;main.c: 952: _delay((unsigned long)((500)*(40000000/4000.0)));
  7186  001670  0E1A               	movlw	26
  7187  001672  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7188  001674  0E5E               	movlw	94
  7189  001676  6E27               	movwf	??_interruptHandler& (0+255),c
  7190  001678  0E6E               	movlw	110
  7191  00167A                     i2u480_47:
  7192  00167A  2EE8               	decfsz	wreg,f,c
  7193  00167C  D7FE               	bra	i2u480_47
  7194  00167E  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7195  001680  D7FC               	bra	i2u480_47
  7196  001682  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7197  001684  D7FA               	bra	i2u480_47
  7198  001686  D000               	nop2	
  7199                           
  7200                           ;main.c: 954: printf("%s",current_set);
  7201  001688  0EF9               	movlw	low STR_24
  7202  00168A  6E0D               	movwf	i2printf@f,c
  7203  00168C  0EFF               	movlw	high STR_24
  7204  00168E  6E0E               	movwf	i2printf@f+1,c
  7205  001690  0EBD               	movlw	low _current_set
  7206  001692  6E0F               	movwf	?i2_printf+2,c
  7207  001694  0E00               	movlw	high _current_set
  7208  001696  6E10               	movwf	?i2_printf+3,c
  7209  001698  EC59  F00F         	call	i2_printf	;wreg free
  7210                           
  7211                           ;main.c: 956: strcpy(current_set,"");
  7212  00169C  0EBD               	movlw	low _current_set
  7213  00169E  6E07               	movwf	strcpy@to,c
  7214  0016A0  0E00               	movlw	high _current_set
  7215  0016A2  6E08               	movwf	strcpy@to+1,c
  7216  0016A4  0E18               	movlw	low (STR_18+14)
  7217  0016A6  6E09               	movwf	strcpy@from,c
  7218  0016A8  0EFF               	movlw	high (STR_18+14)
  7219  0016AA  6E0A               	movwf	strcpy@from+1,c
  7220  0016AC  EC8C  F019         	call	_strcpy	;wreg free
  7221                           
  7222                           ;main.c: 957: _delay((unsigned long)((500)*(40000000/4000.0)));
  7223  0016B0  0E1A               	movlw	26
  7224  0016B2  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7225  0016B4  0E5E               	movlw	94
  7226  0016B6  6E27               	movwf	??_interruptHandler& (0+255),c
  7227  0016B8  0E6E               	movlw	110
  7228  0016BA                     i2u481_47:
  7229  0016BA  2EE8               	decfsz	wreg,f,c
  7230  0016BC  D7FE               	bra	i2u481_47
  7231  0016BE  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7232  0016C0  D7FC               	bra	i2u481_47
  7233  0016C2  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7234  0016C4  D7FA               	bra	i2u481_47
  7235  0016C6  D000               	nop2	
  7236                           
  7237                           ;main.c: 958: counter = 0;
  7238  0016C8  0E00               	movlw	0
  7239  0016CA  0100               	movlb	0	; () banked
  7240  0016CC  6FA1               	movwf	(_counter+1)& (0+255),b
  7241  0016CE  0E00               	movlw	0
  7242  0016D0  6FA0               	movwf	_counter& (0+255),b
  7243                           
  7244                           ;main.c: 959: break;
  7245  0016D2  D007               	goto	i2u420_40
  7246  0016D4                     i2l393:
  7247                           
  7248                           ; BSR set to: 0
  7249  0016D4  4A3E               	infsnz	interruptHandler@i,f,c
  7250  0016D6  2A3F               	incf	interruptHandler@i+1,f,c
  7251  0016D8  BE3F               	btfsc	interruptHandler@i+1,7,c
  7252  0016DA  D77B               	goto	i2l391
  7253  0016DC  503F               	movf	interruptHandler@i+1,w,c
  7254  0016DE  E101               	bnz	i2l5024
  7255  0016E0  D772               	goto	L3
  7256  0016E2                     i2u420_40:
  7257  0016E2                     i2l5024:
  7258                           
  7259                           ;main.c: 961: }
  7260                           ;main.c: 962: }
  7261                           ;main.c: 963: if (valid != 1){
  7262  0016E2  0100               	movlb	0	; () banked
  7263  0016E4  059E               	decf	_valid& (0+255),w,b
  7264  0016E6  119F               	iorwf	(_valid+1)& (0+255),w,b
  7265  0016E8  B4D8               	btfsc	status,2,c
  7266  0016EA  D030               	goto	i2l394
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;main.c: 965: initLCD();
  7270  0016EC  EC41  F019         	call	i2_initLCD	;wreg free
  7271                           
  7272                           ;main.c: 966: printf("wrong set!");
  7273  0016F0  0E86               	movlw	low STR_26
  7274  0016F2  6E0D               	movwf	i2printf@f,c
  7275  0016F4  0EFF               	movlw	high STR_26
  7276  0016F6  6E0E               	movwf	i2printf@f+1,c
  7277  0016F8  EC59  F00F         	call	i2_printf	;wreg free
  7278                           
  7279                           ;main.c: 967: printf("%s",current_set);
  7280  0016FC  0EF9               	movlw	low STR_24
  7281  0016FE  6E0D               	movwf	i2printf@f,c
  7282  001700  0EFF               	movlw	high STR_24
  7283  001702  6E0E               	movwf	i2printf@f+1,c
  7284  001704  0EBD               	movlw	low _current_set
  7285  001706  6E0F               	movwf	?i2_printf+2,c
  7286  001708  0E00               	movlw	high _current_set
  7287  00170A  6E10               	movwf	?i2_printf+3,c
  7288  00170C  EC59  F00F         	call	i2_printf	;wreg free
  7289                           
  7290                           ;main.c: 968: strcpy(current_set,"");
  7291  001710  0EBD               	movlw	low _current_set
  7292  001712  6E07               	movwf	strcpy@to,c
  7293  001714  0E00               	movlw	high _current_set
  7294  001716  6E08               	movwf	strcpy@to+1,c
  7295  001718  0E18               	movlw	low (STR_18+14)
  7296  00171A  6E09               	movwf	strcpy@from,c
  7297  00171C  0EFF               	movlw	high (STR_18+14)
  7298  00171E  6E0A               	movwf	strcpy@from+1,c
  7299  001720  EC8C  F019         	call	_strcpy	;wreg free
  7300                           
  7301                           ;main.c: 969: _delay((unsigned long)((300)*(40000000/4000.0)));
  7302  001724  0E10               	movlw	16
  7303  001726  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7304  001728  0E39               	movlw	57
  7305  00172A  6E27               	movwf	??_interruptHandler& (0+255),c
  7306  00172C  0E0E               	movlw	14
  7307  00172E                     i2u482_47:
  7308  00172E  2EE8               	decfsz	wreg,f,c
  7309  001730  D7FE               	bra	i2u482_47
  7310  001732  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7311  001734  D7FC               	bra	i2u482_47
  7312  001736  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7313  001738  D7FA               	bra	i2u482_47
  7314                           
  7315                           ;main.c: 970: counter = 0;
  7316  00173A  0E00               	movlw	0
  7317  00173C  0100               	movlb	0	; () banked
  7318  00173E  6FA1               	movwf	(_counter+1)& (0+255),b
  7319  001740  0E00               	movlw	0
  7320  001742  6FA0               	movwf	_counter& (0+255),b
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;main.c: 971: valid = 0;
  7324  001744  0E00               	movlw	0
  7325  001746  6F9F               	movwf	(_valid+1)& (0+255),b
  7326  001748  0E00               	movlw	0
  7327  00174A  6F9E               	movwf	_valid& (0+255),b
  7328  00174C                     i2l394:
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;main.c: 972: }
  7332                           ;main.c: 973: valid = 0;
  7333                           
  7334                           ; BSR set to: 0
  7335  00174C  0E00               	movlw	0
  7336  00174E  6F9F               	movwf	(_valid+1)& (0+255),b
  7337  001750  0E00               	movlw	0
  7338  001752  6F9E               	movwf	_valid& (0+255),b
  7339  001754                     i2l390:
  7340                           
  7341                           ;main.c: 975: }
  7342                           ;main.c: 978: if (counter >= 5){
  7343                           
  7344                           ; BSR set to: 0
  7345  001754  0100               	movlb	0	; () banked
  7346  001756  BFA1               	btfsc	(_counter+1)& (0+255),7,b
  7347  001758  D161               	goto	i2l5136
  7348  00175A  51A1               	movf	(_counter+1)& (0+255),w,b
  7349  00175C  E104               	bnz	i2u422_40
  7350  00175E  0E05               	movlw	5
  7351  001760  5DA0               	subwf	_counter& (0+255),w,b
  7352  001762  A0D8               	btfss	status,0,c
  7353  001764  D15B               	goto	i2l5136
  7354  001766                     i2u422_40:
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;main.c: 980: initLCD();
  7358  001766  EC41  F019         	call	i2_initLCD	;wreg free
  7359                           
  7360                           ;main.c: 981: printf("wrong!");
  7361  00176A  0EBF               	movlw	low STR_29
  7362  00176C  6E0D               	movwf	i2printf@f,c
  7363  00176E  0EFF               	movlw	high STR_29
  7364  001770  6E0E               	movwf	i2printf@f+1,c
  7365  001772  EC59  F00F         	call	i2_printf	;wreg free
  7366                           
  7367                           ;main.c: 983: _delay((unsigned long)((500)*(40000000/4000.0)));
  7368  001776  0E1A               	movlw	26
  7369  001778  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7370  00177A  0E5E               	movlw	94
  7371  00177C  6E27               	movwf	??_interruptHandler& (0+255),c
  7372  00177E  0E6E               	movlw	110
  7373  001780                     i2u483_47:
  7374  001780  2EE8               	decfsz	wreg,f,c
  7375  001782  D7FE               	bra	i2u483_47
  7376  001784  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7377  001786  D7FC               	bra	i2u483_47
  7378  001788  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7379  00178A  D7FA               	bra	i2u483_47
  7380  00178C  D000               	nop2	
  7381                           
  7382                           ;main.c: 985: strcpy(current_set,"");
  7383  00178E  0EBD               	movlw	low _current_set
  7384  001790  6E07               	movwf	strcpy@to,c
  7385  001792  0E00               	movlw	high _current_set
  7386  001794  6E08               	movwf	strcpy@to+1,c
  7387  001796  0E18               	movlw	low (STR_18+14)
  7388  001798  6E09               	movwf	strcpy@from,c
  7389  00179A  0EFF               	movlw	high (STR_18+14)
  7390  00179C  6E0A               	movwf	strcpy@from+1,c
  7391  00179E  EC8C  F019         	call	_strcpy	;wreg free
  7392                           
  7393                           ;main.c: 988: counter = 0;
  7394  0017A2  0E00               	movlw	0
  7395  0017A4  0100               	movlb	0	; () banked
  7396  0017A6  6FA1               	movwf	(_counter+1)& (0+255),b
  7397  0017A8  0E00               	movlw	0
  7398  0017AA  6FA0               	movwf	_counter& (0+255),b
  7399                           
  7400                           ; BSR set to: 0
  7401  0017AC  D137               	goto	i2l5136
  7402  0017AE                     i2l384:
  7403                           
  7404                           ;main.c: 993: }
  7405                           ;main.c: 998: if (state ==2){
  7406                           
  7407                           ; BSR set to: 0
  7408  0017AE  0E02               	movlw	2
  7409  0017B0  1863               	xorwf	_state,w,c
  7410  0017B2  1064               	iorwf	_state+1,w,c
  7411  0017B4  A4D8               	btfss	status,2,c
  7412  0017B6  D11D               	goto	i2l412
  7413                           
  7414                           ;main.c: 999: counter = 0;
  7415  0017B8  0E00               	movlw	0
  7416  0017BA  0100               	movlb	0	; () banked
  7417  0017BC  6FA1               	movwf	(_counter+1)& (0+255),b
  7418  0017BE  0E00               	movlw	0
  7419  0017C0  6FA0               	movwf	_counter& (0+255),b
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;main.c: 1001: lcdInst(0xC0);;
  7423  0017C2  0EC0               	movlw	192
  7424  0017C4  ECE9  F01A         	call	i2_lcdInst
  7425                           
  7426                           ;main.c: 1002: putch(keys[keypress]);
  7427  0017C8  5040               	movf	interruptHandler@keypress,w,c
  7428  0017CA  0D01               	mullw	1
  7429  0017CC  0EF7               	movlw	low _keys
  7430  0017CE  24F3               	addwf	prodl,w,c
  7431  0017D0  6EF6               	movwf	tblptrl,c
  7432  0017D2  0EFD               	movlw	high _keys
  7433  0017D4  20F4               	addwfc	prodh,w,c
  7434  0017D6  6EF7               	movwf	tblptrh,c
  7435  0017D8                     	if	1	;There are 3 active tblptr bytes
  7436  0017D8  6AF8               	clrf	tblptru,c
  7437  0017DA  0E00               	movlw	low (__mediumconst shr (0+16))
  7438  0017DC  22F8               	addwfc	tblptru,f,c
  7439  0017DE                     	endif
  7440  0017DE  0008               	tblrd		*
  7441  0017E0  50F5               	movf	tablat,w,c
  7442  0017E2  ECDF  F01A         	call	i2_putch
  7443                           
  7444                           ;main.c: 1004: _delay((unsigned long)((500)*(40000000/4000.0)));
  7445  0017E6  0E1A               	movlw	26
  7446  0017E8  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7447  0017EA  0E5E               	movlw	94
  7448  0017EC  6E27               	movwf	??_interruptHandler& (0+255),c
  7449  0017EE  0E6E               	movlw	110
  7450  0017F0                     i2u484_47:
  7451  0017F0  2EE8               	decfsz	wreg,f,c
  7452  0017F2  D7FE               	bra	i2u484_47
  7453  0017F4  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7454  0017F6  D7FC               	bra	i2u484_47
  7455  0017F8  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7456  0017FA  D7FA               	bra	i2u484_47
  7457  0017FC  D000               	nop2	
  7458                           
  7459                           ;main.c: 1006: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' 
      +                          ||keys[keypress] == '4'){
  7460  0017FE  5040               	movf	interruptHandler@keypress,w,c
  7461  001800  0D01               	mullw	1
  7462  001802  0EF7               	movlw	low _keys
  7463  001804  24F3               	addwf	prodl,w,c
  7464  001806  6EF6               	movwf	tblptrl,c
  7465  001808  0EFD               	movlw	high _keys
  7466  00180A  20F4               	addwfc	prodh,w,c
  7467  00180C  6EF7               	movwf	tblptrh,c
  7468  00180E                     	if	1	;There are 3 active tblptr bytes
  7469  00180E  6AF8               	clrf	tblptru,c
  7470  001810  0E00               	movlw	low (__mediumconst shr (0+16))
  7471  001812  22F8               	addwfc	tblptru,f,c
  7472  001814                     	endif
  7473  001814  0008               	tblrd		*
  7474  001816  50F5               	movf	tablat,w,c
  7475  001818  0A31               	xorlw	49
  7476  00181A  B4D8               	btfsc	status,2,c
  7477  00181C  D05A               	goto	i2l400
  7478  00181E  5040               	movf	interruptHandler@keypress,w,c
  7479  001820  0D01               	mullw	1
  7480  001822  0EF7               	movlw	low _keys
  7481  001824  24F3               	addwf	prodl,w,c
  7482  001826  6EF6               	movwf	tblptrl,c
  7483  001828  0EFD               	movlw	high _keys
  7484  00182A  20F4               	addwfc	prodh,w,c
  7485  00182C  6EF7               	movwf	tblptrh,c
  7486  00182E                     	if	1	;There are 3 active tblptr bytes
  7487  00182E  6AF8               	clrf	tblptru,c
  7488  001830  0E00               	movlw	low (__mediumconst shr (0+16))
  7489  001832  22F8               	addwfc	tblptru,f,c
  7490  001834                     	endif
  7491  001834  0008               	tblrd		*
  7492  001836  50F5               	movf	tablat,w,c
  7493  001838  0A32               	xorlw	50
  7494  00183A  B4D8               	btfsc	status,2,c
  7495  00183C  D04A               	goto	i2l400
  7496  00183E  5040               	movf	interruptHandler@keypress,w,c
  7497  001840  0D01               	mullw	1
  7498  001842  0EF7               	movlw	low _keys
  7499  001844  24F3               	addwf	prodl,w,c
  7500  001846  6EF6               	movwf	tblptrl,c
  7501  001848  0EFD               	movlw	high _keys
  7502  00184A  20F4               	addwfc	prodh,w,c
  7503  00184C  6EF7               	movwf	tblptrh,c
  7504  00184E                     	if	1	;There are 3 active tblptr bytes
  7505  00184E  6AF8               	clrf	tblptru,c
  7506  001850  0E00               	movlw	low (__mediumconst shr (0+16))
  7507  001852  22F8               	addwfc	tblptru,f,c
  7508  001854                     	endif
  7509  001854  0008               	tblrd		*
  7510  001856  50F5               	movf	tablat,w,c
  7511  001858  0A33               	xorlw	51
  7512  00185A  B4D8               	btfsc	status,2,c
  7513  00185C  D03A               	goto	i2l400
  7514  00185E  5040               	movf	interruptHandler@keypress,w,c
  7515  001860  0D01               	mullw	1
  7516  001862  0EF7               	movlw	low _keys
  7517  001864  24F3               	addwf	prodl,w,c
  7518  001866  6EF6               	movwf	tblptrl,c
  7519  001868  0EFD               	movlw	high _keys
  7520  00186A  20F4               	addwfc	prodh,w,c
  7521  00186C  6EF7               	movwf	tblptrh,c
  7522  00186E                     	if	1	;There are 3 active tblptr bytes
  7523  00186E  6AF8               	clrf	tblptru,c
  7524  001870  0E00               	movlw	low (__mediumconst shr (0+16))
  7525  001872  22F8               	addwfc	tblptru,f,c
  7526  001874                     	endif
  7527  001874  0008               	tblrd		*
  7528  001876  50F5               	movf	tablat,w,c
  7529  001878  0A34               	xorlw	52
  7530  00187A  B4D8               	btfsc	status,2,c
  7531  00187C  D02A               	goto	i2l400
  7532  00187E  D0B9               	goto	i2l412
  7533  001880                     
  7534                           ;main.c: 1010: number = 1;
  7535  001880  0E00               	movlw	0
  7536  001882  6E71               	movwf	_number+1,c
  7537  001884  0E01               	movlw	1
  7538  001886  D00F               	goto	L7
  7539  001888                     
  7540                           ;main.c: 1013: number = 2;
  7541  001888  0E00               	movlw	0
  7542  00188A  6E71               	movwf	_number+1,c
  7543  00188C  0E02               	movlw	2
  7544  00188E  D00B               	goto	L7
  7545  001890                     
  7546                           ;main.c: 1016: number = 3;
  7547  001890  0E00               	movlw	0
  7548  001892  6E71               	movwf	_number+1,c
  7549  001894  0E03               	movlw	3
  7550  001896  D007               	goto	L7
  7551  001898                     
  7552                           ;main.c: 1019: number = 4;
  7553  001898  0E00               	movlw	0
  7554  00189A  6E71               	movwf	_number+1,c
  7555  00189C  0E04               	movlw	4
  7556  00189E  D003               	goto	L7
  7557  0018A0                     
  7558                           ;main.c: 1022: number = 5;
  7559  0018A0  0E00               	movlw	0
  7560  0018A2  6E71               	movwf	_number+1,c
  7561  0018A4  0E05               	movlw	5
  7562  0018A6                     L7:
  7563  0018A6  6E70               	movwf	_number,c
  7564                           
  7565                           ;main.c: 1023: break;
  7566  0018A8  D031               	goto	i2l402
  7567  0018AA                     
  7568                           ;main.c: 1025: initLCD();
  7569  0018AA  EC41  F019         	call	i2_initLCD	;wreg free
  7570                           
  7571                           ;main.c: 1026: printf("Wrong input");
  7572  0018AE  0E7A               	movlw	low STR_31
  7573  0018B0  6E0D               	movwf	i2printf@f,c
  7574  0018B2  0EFF               	movlw	high STR_31
  7575  0018B4  6E0E               	movwf	i2printf@f+1,c
  7576  0018B6  EC59  F00F         	call	i2_printf	;wreg free
  7577                           
  7578                           ;main.c: 1027: _delay((unsigned long)((1000)*(40000000/4000.0)));
  7579  0018BA  0E33               	movlw	51
  7580  0018BC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7581  0018BE  0EBB               	movlw	187
  7582  0018C0  6E27               	movwf	??_interruptHandler& (0+255),c
  7583  0018C2  0EE0               	movlw	224
  7584  0018C4                     i2u485_47:
  7585  0018C4  2EE8               	decfsz	wreg,f,c
  7586  0018C6  D7FE               	bra	i2u485_47
  7587  0018C8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7588  0018CA  D7FC               	bra	i2u485_47
  7589  0018CC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7590  0018CE  D7FA               	bra	i2u485_47
  7591                           
  7592                           ;main.c: 1028: }
  7593  0018D0  D01D               	goto	i2l402
  7594  0018D2                     i2l400:
  7595  0018D2  5040               	movf	interruptHandler@keypress,w,c
  7596  0018D4  0D01               	mullw	1
  7597  0018D6  0EF7               	movlw	low _keys
  7598  0018D8  24F3               	addwf	prodl,w,c
  7599  0018DA  6EF6               	movwf	tblptrl,c
  7600  0018DC  0EFD               	movlw	high _keys
  7601  0018DE  20F4               	addwfc	prodh,w,c
  7602  0018E0  6EF7               	movwf	tblptrh,c
  7603  0018E2                     	if	1	;There are 3 active tblptr bytes
  7604  0018E2  6AF8               	clrf	tblptru,c
  7605  0018E4  0E00               	movlw	low (__mediumconst shr (0+16))
  7606  0018E6  22F8               	addwfc	tblptru,f,c
  7607  0018E8                     	endif
  7608  0018E8  0008               	tblrd		*
  7609  0018EA  50F5               	movf	tablat,w,c
  7610                           
  7611                           ; Switch size 1, requested type "space"
  7612                           ; Number of cases is 5, Range of values is 49 to 53
  7613                           ; switch strategies available:
  7614                           ; Name         Instructions Cycles
  7615                           ; simple_byte           16     9 (average)
  7616                           ;	Chosen strategy is simple_byte
  7617  0018EC  0A31               	xorlw	49	; case 49
  7618  0018EE  B4D8               	btfsc	status,2,c
  7619  0018F0  D7C7               	goto	i2l401
  7620  0018F2  0A03               	xorlw	3	; case 50
  7621  0018F4  B4D8               	btfsc	status,2,c
  7622  0018F6  D7C8               	goto	i2l403
  7623  0018F8  0A01               	xorlw	1	; case 51
  7624  0018FA  B4D8               	btfsc	status,2,c
  7625  0018FC  D7C9               	goto	i2l404
  7626  0018FE  0A07               	xorlw	7	; case 52
  7627  001900  B4D8               	btfsc	status,2,c
  7628  001902  D7CA               	goto	i2l405
  7629  001904  0A01               	xorlw	1	; case 53
  7630  001906  B4D8               	btfsc	status,2,c
  7631  001908  D7CB               	goto	i2l406
  7632  00190A  D7CF               	goto	i2l407
  7633  00190C                     i2l402:
  7634                           
  7635                           ;main.c: 1031: is_valid();
  7636  00190C  EC09  F000         	call	_is_valid	;wreg free
  7637                           
  7638                           ;main.c: 1033: if ( check() == 0){
  7639  001910  EC37  F018         	call	_check	;wreg free
  7640  001914  5001               	movf	?_check,w,c
  7641  001916  1002               	iorwf	?_check+1,w,c
  7642  001918  A4D8               	btfss	status,2,c
  7643  00191A  D028               	goto	i2l408
  7644                           
  7645                           ;main.c: 1034: initLCD();
  7646  00191C  EC41  F019         	call	i2_initLCD	;wreg free
  7647                           
  7648                           ;main.c: 1035: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7649  001920  0E80               	movlw	128
  7650  001922  ECE9  F01A         	call	i2_lcdInst
  7651  001926  0E41               	movlw	65
  7652  001928  6E27               	movwf	??_interruptHandler& (0+255),c
  7653  00192A  0EEE               	movlw	238
  7654  00192C                     i2u486_47:
  7655  00192C  2EE8               	decfsz	wreg,f,c
  7656  00192E  D7FE               	bra	i2u486_47
  7657  001930  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7658  001932  D7FC               	bra	i2u486_47
  7659  001934  D000               	nop2	
  7660                           
  7661                           ;main.c: 1036: printf("TOO MANY");
  7662  001936  0EAF               	movlw	low STR_32
  7663  001938  6E0D               	movwf	i2printf@f,c
  7664  00193A  0EFF               	movlw	high STR_32
  7665  00193C  6E0E               	movwf	i2printf@f+1,c
  7666  00193E  EC59  F00F         	call	i2_printf	;wreg free
  7667                           
  7668                           ;main.c: 1038: _delay((unsigned long)((500)*(40000000/4000.0)));
  7669  001942  0E1A               	movlw	26
  7670  001944  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7671  001946  0E5E               	movlw	94
  7672  001948  6E27               	movwf	??_interruptHandler& (0+255),c
  7673  00194A  0E6E               	movlw	110
  7674  00194C                     i2u487_47:
  7675  00194C  2EE8               	decfsz	wreg,f,c
  7676  00194E  D7FE               	bra	i2u487_47
  7677  001950  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7678  001952  D7FC               	bra	i2u487_47
  7679  001954  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7680  001956  D7FA               	bra	i2u487_47
  7681  001958  D000               	nop2	
  7682                           
  7683                           ;main.c: 1039: state = 2;
  7684  00195A  0E00               	movlw	0
  7685  00195C  6E64               	movwf	_state+1,c
  7686  00195E  0E02               	movlw	2
  7687  001960  6E63               	movwf	_state,c
  7688                           
  7689                           ;main.c: 1040: number = 0;
  7690  001962  0E00               	movlw	0
  7691  001964  6E71               	movwf	_number+1,c
  7692  001966  0E00               	movlw	0
  7693  001968  6E70               	movwf	_number,c
  7694                           
  7695                           ;main.c: 1041: }
  7696  00196A  D043               	goto	i2l412
  7697  00196C                     i2l408:
  7698                           
  7699                           ;main.c: 1044: else if (counter_step >= assembly_step-1){
  7700  00196C  0EFF               	movlw	255
  7701  00196E  6E27               	movwf	??_interruptHandler& (0+255),c
  7702  001970  0EFF               	movlw	255
  7703  001972  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7704  001974  C0A2  F029         	movff	_assembly_step,??_interruptHandler+2
  7705  001978  C0A3  F02A         	movff	_assembly_step+1,??_interruptHandler+3
  7706  00197C  5027               	movf	??_interruptHandler,w,c
  7707  00197E  2629               	addwf	??_interruptHandler+2,f,c
  7708  001980  5028               	movf	??_interruptHandler+1,w,c
  7709  001982  222A               	addwfc	??_interruptHandler+3,f,c
  7710  001984  5029               	movf	??_interruptHandler+2,w,c
  7711  001986  5C61               	subwf	_counter_step,w,c
  7712  001988  5062               	movf	_counter_step+1,w,c
  7713  00198A  0A80               	xorlw	128
  7714  00198C  6E2B               	movwf	(??_interruptHandler+4)& (0+255),c
  7715  00198E  502A               	movf	??_interruptHandler+3,w,c
  7716  001990  0A80               	xorlw	128
  7717  001992  582B               	subwfb	(??_interruptHandler+4)& (0+255),w,c
  7718  001994  A0D8               	btfss	status,0,c
  7719  001996  D012               	goto	i2l410
  7720                           
  7721                           ;main.c: 1045: final_number[counter_step] = number;
  7722  001998  90D8               	bcf	status,0,c
  7723  00199A  3461               	rlcf	_counter_step,w,c
  7724  00199C  6ED9               	movwf	fsr2l,c
  7725  00199E  3462               	rlcf	_counter_step+1,w,c
  7726  0019A0  6EDA               	movwf	fsr2h,c
  7727  0019A2  0E20               	movlw	low _final_number
  7728  0019A4  26D9               	addwf	fsr2l,f,c
  7729  0019A6  0E01               	movlw	high _final_number
  7730  0019A8  22DA               	addwfc	fsr2h,f,c
  7731  0019AA  C070  FFDE         	movff	_number,postinc2
  7732  0019AE  C071  FFDD         	movff	_number+1,postdec2
  7733                           
  7734                           ;main.c: 1046: state = 3;
  7735  0019B2  0E00               	movlw	0
  7736  0019B4  6E64               	movwf	_state+1,c
  7737  0019B6  0E03               	movlw	3
  7738  0019B8  6E63               	movwf	_state,c
  7739                           
  7740                           ;main.c: 1047: }
  7741  0019BA  D01B               	goto	i2l412
  7742  0019BC                     i2l410:
  7743                           
  7744                           ;main.c: 1048: else if ( check() == 1){
  7745  0019BC  EC37  F018         	call	_check	;wreg free
  7746  0019C0  0401               	decf	?_check,w,c
  7747  0019C2  1002               	iorwf	?_check+1,w,c
  7748  0019C4  A4D8               	btfss	status,2,c
  7749  0019C6  D015               	goto	i2l412
  7750                           
  7751                           ;main.c: 1049: state = 1;
  7752  0019C8  0E00               	movlw	0
  7753  0019CA  6E64               	movwf	_state+1,c
  7754  0019CC  0E01               	movlw	1
  7755  0019CE  6E63               	movwf	_state,c
  7756                           
  7757                           ;main.c: 1050: initLCD();
  7758  0019D0  EC41  F019         	call	i2_initLCD	;wreg free
  7759                           
  7760                           ;main.c: 1053: final_number[counter_step] = number;
  7761  0019D4  90D8               	bcf	status,0,c
  7762  0019D6  3461               	rlcf	_counter_step,w,c
  7763  0019D8  6ED9               	movwf	fsr2l,c
  7764  0019DA  3462               	rlcf	_counter_step+1,w,c
  7765  0019DC  6EDA               	movwf	fsr2h,c
  7766  0019DE  0E20               	movlw	low _final_number
  7767  0019E0  26D9               	addwf	fsr2l,f,c
  7768  0019E2  0E01               	movlw	high _final_number
  7769  0019E4  22DA               	addwfc	fsr2h,f,c
  7770  0019E6  C070  FFDE         	movff	_number,postinc2
  7771  0019EA  C071  FFDD         	movff	_number+1,postdec2
  7772                           
  7773                           ;main.c: 1054: counter_step++;
  7774  0019EE  4A61               	infsnz	_counter_step,f,c
  7775  0019F0  2A62               	incf	_counter_step+1,f,c
  7776  0019F2                     i2l412:
  7777                           
  7778                           ;main.c: 1055: }
  7779                           ;main.c: 1058: }
  7780                           ;main.c: 1060: }
  7781                           ;main.c: 1067: B=0;N=0;S=0;W=0;
  7782  0019F2  0E00               	movlw	0
  7783  0019F4  6E60               	movwf	_B+1,c
  7784  0019F6  0E00               	movlw	0
  7785  0019F8  6E5F               	movwf	_B,c
  7786  0019FA  0E00               	movlw	0
  7787  0019FC  6E5E               	movwf	_N+1,c
  7788  0019FE  0E00               	movlw	0
  7789  001A00  6E5D               	movwf	_N,c
  7790  001A02  0E00               	movlw	0
  7791  001A04  6E5C               	movwf	_S+1,c
  7792  001A06  0E00               	movlw	0
  7793  001A08  6E5B               	movwf	_S,c
  7794  001A0A  0E00               	movlw	0
  7795  001A0C  6E5A               	movwf	_W+1,c
  7796  001A0E  0E00               	movlw	0
  7797  001A10  6E59               	movwf	_W,c
  7798                           
  7799                           ;main.c: 1068: total_number = 0;
  7800  001A12  0E00               	movlw	0
  7801  001A14  0100               	movlb	0	; () banked
  7802  001A16  6F9D               	movwf	(_total_number+1)& (0+255),b
  7803  001A18  0E00               	movlw	0
  7804  001A1A  6F9C               	movwf	_total_number& (0+255),b
  7805  001A1C                     i2l5136:
  7806                           
  7807                           ; BSR set to: 0
  7808                           ;main.c: 1070: INT1IF = 0;
  7809  001A1C  90F0               	bcf	intcon3,0,c	;volatile
  7810  001A1E                     i2l5138:
  7811                           
  7812                           ; BSR set to: 0
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;main.c: 1071: return;
  7816  001A1E  C03D  F081         	movff	??_interruptHandler+22,btemp+3
  7817  001A22  C03C  F080         	movff	??_interruptHandler+21,btemp+2
  7818  001A26  C03B  F07F         	movff	??_interruptHandler+20,btemp+1
  7819  001A2A  C03A  F07E         	movff	??_interruptHandler+19,btemp
  7820  001A2E  C039  FFF5         	movff	??_interruptHandler+18,tablat
  7821  001A32  C038  FFF8         	movff	??_interruptHandler+17,tblptru
  7822  001A36  C037  FFF7         	movff	??_interruptHandler+16,tblptrh
  7823  001A3A  C036  FFF6         	movff	??_interruptHandler+15,tblptrl
  7824  001A3E  C035  FFF4         	movff	??_interruptHandler+14,prodh
  7825  001A42  C034  FFF3         	movff	??_interruptHandler+13,prodl
  7826  001A46  C033  FFDA         	movff	??_interruptHandler+12,fsr2h
  7827  001A4A  C032  FFD9         	movff	??_interruptHandler+11,fsr2l
  7828  001A4E  C031  FFE2         	movff	??_interruptHandler+10,fsr1h
  7829  001A52  C030  FFE1         	movff	??_interruptHandler+9,fsr1l
  7830  001A56  C02F  FFEA         	movff	??_interruptHandler+8,fsr0h
  7831  001A5A  C02E  FFE9         	movff	??_interruptHandler+7,fsr0l
  7832  001A5E  C02D  FFFB         	movff	??_interruptHandler+6,pclatu
  7833  001A62  C02C  FFFA         	movff	??_interruptHandler+5,pclath
  7834  001A66  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7835  001A68  0011               	retfie		f
  7836  001A6A                     __end_of_interruptHandler:
  7837                           	opt stack 0
  7838                           pclatu	equ	0xFFB
  7839                           pclath	equ	0xFFA
  7840                           tblptru	equ	0xFF8
  7841                           tblptrh	equ	0xFF7
  7842                           tblptrl	equ	0xFF6
  7843                           tablat	equ	0xFF5
  7844                           prodh	equ	0xFF4
  7845                           prodl	equ	0xFF3
  7846                           intcon	equ	0xFF2
  7847                           intcon3	equ	0xFF0
  7848                           indf0	equ	0xFEF
  7849                           postinc0	equ	0xFEE
  7850                           fsr0h	equ	0xFEA
  7851                           fsr0l	equ	0xFE9
  7852                           wreg	equ	0xFE8
  7853                           postdec1	equ	0xFE5
  7854                           fsr1h	equ	0xFE2
  7855                           fsr1l	equ	0xFE1
  7856                           indf2	equ	0xFDF
  7857                           postinc2	equ	0xFDE
  7858                           postdec2	equ	0xFDD
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function i2_printf *****************
  7864 ;; Defined at:
  7865 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7868 ;;		 -> STR_33(3), STR_32(9), STR_31(12), STR_29(7), 
  7869 ;;		 -> STR_27(3), STR_26(11), STR_24(3), STR_23(9), 
  7870 ;;		 -> STR_18(15), STR_17(13), STR_16(16), STR_15(15), 
  7871 ;;		 -> STR_14(15), STR_13(15), STR_12(15), STR_11(10), 
  7872 ;;		 -> STR_10(19), STR_9(17), STR_8(12), STR_7(17), 
  7873 ;;		 -> STR_6(17), STR_5(14), STR_4(15), STR_3(21), 
  7874 ;;		 -> STR_2(11), STR_1(13), 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  printf          4    0        struct .
  7877 ;;  printf          2   35[COMRAM] int 
  7878 ;;  printf          2   32[COMRAM] unsigned int 
  7879 ;;  printf          2   30[COMRAM] unsigned int 
  7880 ;;  printf          2   28[COMRAM] PTR void [1]
  7881 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7882 ;;  printf          2   26[COMRAM] PTR const unsigned char 
  7883 ;;		 -> STR_54(7), number(2), current_set(5), 
  7884 ;;  printf          1   37[COMRAM] char 
  7885 ;;  printf          1   34[COMRAM] unsigned char 
  7886 ;;  printf          1   25[COMRAM] char 
  7887 ;;  printf          1   24[COMRAM] unsigned char 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  2   12[COMRAM] int 
  7890 ;; Registers used:
  7891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7897 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;Total ram usage:       26 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    2
  7904 ;; This function calls:
  7905 ;;		i2___lwdiv
  7906 ;;		i2___lwmod
  7907 ;;		i2___wmul
  7908 ;;		i2_isdigit
  7909 ;;		i2_putch
  7910 ;; This function is called by:
  7911 ;;		_interruptHandler
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           	psect	text22
  7916  001EB2                     __ptext22:
  7917                           	opt stack 0
  7918  001EB2                     i2_printf:
  7919                           	opt stack 24
  7920                           
  7921                           ;doprnt.c: 466: va_list ap;
  7922                           ;doprnt.c: 499: signed char c;
  7923                           ;doprnt.c: 501: int width;
  7924                           ;doprnt.c: 506: signed char prec;
  7925                           ;doprnt.c: 508: unsigned char flag;
  7926                           ;doprnt.c: 523: union {
  7927                           ;doprnt.c: 524: unsigned long vd;
  7928                           ;doprnt.c: 525: double integ;
  7929                           ;doprnt.c: 526: } tmpval;
  7930                           ;doprnt.c: 528: unsigned int val;
  7931                           ;doprnt.c: 529: unsigned len;
  7932                           ;doprnt.c: 530: const char * cp;
  7933                           ;doprnt.c: 533: *ap = __va_start();
  7934                           
  7935                           ;incstack = 0
  7936  001EB2  0E0F               	movlw	low (?i2_printf+2)
  7937  001EB4  6E1D               	movwf	i2printf@ap,c
  7938  001EB6  0E00               	movlw	high (?i2_printf+2)
  7939  001EB8  6E1E               	movwf	i2printf@ap+1,c
  7940                           
  7941                           ;doprnt.c: 536: while(c = *f++) {
  7942  001EBA  D1FA               	goto	i2u367_40
  7943  001EBC                     
  7944                           ;doprnt.c: 538: if(c != '%')
  7945  001EBC  0E25               	movlw	37
  7946  001EBE  1826               	xorwf	i2printf@c,w,c
  7947  001EC0  B4D8               	btfsc	status,2,c
  7948  001EC2  D004               	goto	i2l772
  7949                           
  7950                           ;doprnt.c: 540: {
  7951                           ;doprnt.c: 541: (putch(c) );
  7952  001EC4  5026               	movf	i2printf@c,w,c
  7953  001EC6  ECDF  F01A         	call	i2_putch
  7954                           
  7955                           ;doprnt.c: 542: continue;
  7956  001ECA  D1F2               	goto	i2u367_40
  7957  001ECC                     i2l772:
  7958                           
  7959                           ;doprnt.c: 543: }
  7960                           ;doprnt.c: 546: width = 0;
  7961  001ECC  0E00               	movlw	0
  7962  001ECE  6E25               	movwf	i2printf@width+1,c
  7963  001ED0  0E00               	movlw	0
  7964  001ED2  6E24               	movwf	i2printf@width,c
  7965                           
  7966                           ;doprnt.c: 548: flag = 0;
  7967  001ED4  0E00               	movlw	0
  7968  001ED6  6E23               	movwf	i2printf@flag,c
  7969                           
  7970                           ;doprnt.c: 551: switch(*f) {
  7971                           
  7972                           ;doprnt.c: 550: for(;;) {
  7973  001ED8  D003               	goto	i2l774
  7974  001EDA                     
  7975                           ;doprnt.c: 580: flag |= 0x04;
  7976  001EDA  8423               	bsf	i2printf@flag,2,c
  7977                           
  7978                           ;doprnt.c: 581: f++;
  7979  001EDC  4A0D               	infsnz	i2printf@f,f,c
  7980  001EDE  2A0E               	incf	i2printf@f+1,f,c
  7981  001EE0                     i2l774:
  7982  001EE0  C00D  FFF6         	movff	i2printf@f,tblptrl
  7983  001EE4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7984  001EE8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7985  001EE8  6AF8               	clrf	tblptru,c
  7986  001EEA                     	endif
  7987  001EEA                     	if	0	;tblptru may be non-zero
  7988  001EEA                     	endif
  7989  001EEA  0008               	tblrd		*
  7990  001EEC  50F5               	movf	tablat,w,c
  7991                           
  7992                           ; Switch size 1, requested type "space"
  7993                           ; Number of cases is 1, Range of values is 48 to 48
  7994                           ; switch strategies available:
  7995                           ; Name         Instructions Cycles
  7996                           ; simple_byte            4     3 (average)
  7997                           ;	Chosen strategy is simple_byte
  7998  001EEE  0A30               	xorlw	48	; case 48
  7999  001EF0  B4D8               	btfsc	status,2,c
  8000  001EF2  D7F3               	goto	i2l775
  8001                           
  8002                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8003                           
  8004                           ;doprnt.c: 586: }
  8005                           
  8006                           ;doprnt.c: 585: break;
  8007  001EF4  C00D  FFF6         	movff	i2printf@f,tblptrl
  8008  001EF8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8009  001EFC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8010  001EFC  6AF8               	clrf	tblptru,c
  8011  001EFE                     	endif
  8012  001EFE                     	if	0	;tblptru may be non-zero
  8013  001EFE                     	endif
  8014  001EFE  0008               	tblrd		*
  8015  001F00  50F5               	movf	tablat,w,c
  8016  001F02  ECA2  F01A         	call	i2_isdigit
  8017  001F06  A0D8               	btfss	status,0,c
  8018  001F08  D0A6               	goto	i2l782
  8019                           
  8020                           ;doprnt.c: 598: width = 0;
  8021  001F0A  0E00               	movlw	0
  8022  001F0C  6E25               	movwf	i2printf@width+1,c
  8023  001F0E  0E00               	movlw	0
  8024  001F10  6E24               	movwf	i2printf@width,c
  8025  001F12                     
  8026                           ;doprnt.c: 600: width *= 10;
  8027  001F12  C024  F001         	movff	i2printf@width,i2___wmul@multiplier
  8028  001F16  C025  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8029  001F1A  0E00               	movlw	0
  8030  001F1C  6E04               	movwf	i2___wmul@multiplicand+1,c
  8031  001F1E  0E0A               	movlw	10
  8032  001F20  6E03               	movwf	i2___wmul@multiplicand,c
  8033  001F22  EC6C  F01A         	call	i2___wmul	;wreg free
  8034  001F26  C001  F024         	movff	?i2___wmul,i2printf@width
  8035  001F2A  C002  F025         	movff	?i2___wmul+1,i2printf@width+1
  8036                           
  8037                           ;doprnt.c: 601: width += *f++ - '0';
  8038  001F2E  0ED0               	movlw	208
  8039  001F30  6E15               	movwf	??i2_printf& (0+255),c
  8040  001F32  0EFF               	movlw	255
  8041  001F34  6E16               	movwf	(??i2_printf+1)& (0+255),c
  8042  001F36  C00D  FFF6         	movff	i2printf@f,tblptrl
  8043  001F3A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8044  001F3E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8045  001F3E  6AF8               	clrf	tblptru,c
  8046  001F40                     	endif
  8047  001F40                     	if	0	;tblptru may be non-zero
  8048  001F40                     	endif
  8049  001F40  0008               	tblrd		*
  8050  001F42  50F5               	movf	tablat,w,c
  8051  001F44  6E17               	movwf	(??i2_printf+2)& (0+255),c
  8052  001F46  6A18               	clrf	(??i2_printf+3)& (0+255),c
  8053  001F48  5015               	movf	??i2_printf,w,c
  8054  001F4A  2617               	addwf	??i2_printf+2,f,c
  8055  001F4C  5016               	movf	??i2_printf+1,w,c
  8056  001F4E  2218               	addwfc	??i2_printf+3,f,c
  8057  001F50  5017               	movf	??i2_printf+2,w,c
  8058  001F52  2624               	addwf	i2printf@width,f,c
  8059  001F54  5018               	movf	??i2_printf+3,w,c
  8060  001F56  2225               	addwfc	i2printf@width+1,f,c
  8061  001F58  4A0D               	infsnz	i2printf@f,f,c
  8062  001F5A  2A0E               	incf	i2printf@f+1,f,c
  8063                           
  8064                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8065  001F5C  C00D  FFF6         	movff	i2printf@f,tblptrl
  8066  001F60  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8067  001F64                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8068  001F64  6AF8               	clrf	tblptru,c
  8069  001F66                     	endif
  8070  001F66                     	if	0	;tblptru may be non-zero
  8071  001F66                     	endif
  8072  001F66  0008               	tblrd		*
  8073  001F68  50F5               	movf	tablat,w,c
  8074  001F6A  ECA2  F01A         	call	i2_isdigit
  8075  001F6E  A0D8               	btfss	status,0,c
  8076  001F70  D072               	goto	i2l782
  8077  001F72  D7CF               	goto	i2l780
  8078  001F74                     
  8079                           ;doprnt.c: 721: flag |= 0x80;
  8080  001F74  8E23               	bsf	i2printf@flag,7,c
  8081                           
  8082                           ;doprnt.c: 723: break;
  8083  001F76  D08A               	goto	i2l787
  8084  001F78                     
  8085                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8086  001F78  C01D  FFD9         	movff	i2printf@ap,fsr2l
  8087  001F7C  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  8088  001F80  CFDE F01B          	movff	postinc2,i2printf@cp
  8089  001F84  CFDD F01C          	movff	postdec2,i2printf@cp+1
  8090  001F88  0E02               	movlw	2
  8091  001F8A  261D               	addwf	i2printf@ap,f,c
  8092  001F8C  0E00               	movlw	0
  8093  001F8E  221E               	addwfc	i2printf@ap+1,f,c
  8094                           
  8095                           ;doprnt.c: 740: if(!cp)
  8096  001F90  501B               	movf	i2printf@cp,w,c
  8097  001F92  101C               	iorwf	i2printf@cp+1,w,c
  8098  001F94  A4D8               	btfss	status,2,c
  8099  001F96  D004               	goto	i2l790
  8100                           
  8101                           ;doprnt.c: 741: cp = "(null)";
  8102  001F98  0EB8               	movlw	low STR_54
  8103  001F9A  6E1B               	movwf	i2printf@cp,c
  8104  001F9C  0EFF               	movlw	high STR_54
  8105  001F9E  6E1C               	movwf	i2printf@cp+1,c
  8106  001FA0                     i2l790:
  8107                           
  8108                           ;doprnt.c: 745: len = 0;
  8109  001FA0  0E00               	movlw	0
  8110  001FA2  6E20               	movwf	i2printf@len+1,c
  8111  001FA4  0E00               	movlw	0
  8112  001FA6  6E1F               	movwf	i2printf@len,c
  8113                           
  8114                           ;doprnt.c: 746: while(cp[len])
  8115  001FA8  D002               	goto	i2l791
  8116  001FAA                     
  8117                           ;doprnt.c: 747: len++;
  8118  001FAA  4A1F               	infsnz	i2printf@len,f,c
  8119  001FAC  2A20               	incf	i2printf@len+1,f,c
  8120  001FAE                     i2l791:
  8121  001FAE  501F               	movf	i2printf@len,w,c
  8122  001FB0  241B               	addwf	i2printf@cp,w,c
  8123  001FB2  6E15               	movwf	??i2_printf& (0+255),c
  8124  001FB4  5020               	movf	i2printf@len+1,w,c
  8125  001FB6  201C               	addwfc	i2printf@cp+1,w,c
  8126  001FB8  6E16               	movwf	(??i2_printf+1)& (0+255),c
  8127  001FBA  C015  FFF6         	movff	??i2_printf,tblptrl
  8128  001FBE  C016  FFF7         	movff	??i2_printf+1,tblptrh
  8129  001FC2  0E00               	movlw	low (__mediumconst shr (0+16))
  8130  001FC4  6EF8               	movwf	tblptru,c
  8131  001FC6  0E0F               	movlw	(high __ramtop+-1)
  8132  001FC8  64F7               	cpfsgt	tblptrh,c
  8133  001FCA  D003               	bra	i2u343_47
  8134  001FCC  0008               	tblrd		*
  8135  001FCE  50F5               	movf	tablat,w,c
  8136  001FD0  D005               	bra	i2u343_40
  8137  001FD2                     i2u343_47:
  8138  001FD2  CFF6 FFE9          	movff	tblptrl,fsr0l
  8139  001FD6  CFF7 FFEA          	movff	tblptrh,fsr0h
  8140  001FDA  50EF               	movf	indf0,w,c
  8141  001FDC                     i2u343_40:
  8142  001FDC  0900               	iorlw	0
  8143  001FDE  A4D8               	btfss	status,2,c
  8144  001FE0  D7E4               	goto	i2l792
  8145                           
  8146                           ;doprnt.c: 757: if(width > len)
  8147  001FE2  5024               	movf	i2printf@width,w,c
  8148  001FE4  5C1F               	subwf	i2printf@len,w,c
  8149  001FE6  5025               	movf	i2printf@width+1,w,c
  8150  001FE8  5820               	subwfb	i2printf@len+1,w,c
  8151  001FEA  B0D8               	btfsc	status,0,c
  8152  001FEC  D005               	goto	i2l794
  8153                           
  8154                           ;doprnt.c: 758: width -= len;
  8155  001FEE  501F               	movf	i2printf@len,w,c
  8156  001FF0  5E24               	subwf	i2printf@width,f,c
  8157  001FF2  5020               	movf	i2printf@len+1,w,c
  8158  001FF4  5A25               	subwfb	i2printf@width+1,f,c
  8159  001FF6  D008               	goto	i2l796
  8160  001FF8                     i2l794:
  8161                           
  8162                           ;doprnt.c: 759: else
  8163                           ;doprnt.c: 760: width = 0;
  8164  001FF8  0E00               	movlw	0
  8165  001FFA  6E25               	movwf	i2printf@width+1,c
  8166  001FFC  0E00               	movlw	0
  8167  001FFE  6E24               	movwf	i2printf@width,c
  8168                           
  8169                           ;doprnt.c: 764: while(width--)
  8170  002000  D003               	goto	i2l796
  8171  002002                     i2l4398:
  8172                           
  8173                           ;doprnt.c: 765: (putch(' ') );
  8174  002002  0E20               	movlw	32
  8175  002004  ECDF  F01A         	call	i2_putch
  8176  002008                     i2l796:
  8177  002008  0624               	decf	i2printf@width,f,c
  8178  00200A  A0D8               	btfss	status,0,c
  8179  00200C  0625               	decf	i2printf@width+1,f,c
  8180  00200E  2824               	incf	i2printf@width,w,c
  8181  002010  E1F8               	bnz	i2l4398
  8182  002012  2825               	incf	i2printf@width+1,w,c
  8183  002014  B4D8               	btfsc	status,2,c
  8184  002016  D016               	goto	i2l799
  8185  002018  D7F4               	goto	i2l797
  8186  00201A                     i2l4402:
  8187                           
  8188                           ;doprnt.c: 768: (putch(*cp++) );
  8189  00201A  C01B  FFF6         	movff	i2printf@cp,tblptrl
  8190  00201E  C01C  FFF7         	movff	i2printf@cp+1,tblptrh
  8191  002022  0E00               	movlw	low (__mediumconst shr (0+16))
  8192  002024  6EF8               	movwf	tblptru,c
  8193  002026  0E0F               	movlw	(high __ramtop+-1)
  8194  002028  64F7               	cpfsgt	tblptrh,c
  8195  00202A  D003               	bra	i2u347_47
  8196  00202C  0008               	tblrd		*
  8197  00202E  50F5               	movf	tablat,w,c
  8198  002030  D005               	bra	i2u347_40
  8199  002032                     i2u347_47:
  8200  002032  CFF6 FFE9          	movff	tblptrl,fsr0l
  8201  002036  CFF7 FFEA          	movff	tblptrh,fsr0h
  8202  00203A  50EF               	movf	indf0,w,c
  8203  00203C                     i2u347_40:
  8204  00203C  ECDF  F01A         	call	i2_putch
  8205  002040  4A1B               	infsnz	i2printf@cp,f,c
  8206  002042  2A1C               	incf	i2printf@cp+1,f,c
  8207  002044                     i2l799:
  8208  002044  061F               	decf	i2printf@len,f,c
  8209  002046  A0D8               	btfss	status,0,c
  8210  002048  0620               	decf	i2printf@len+1,f,c
  8211  00204A  281F               	incf	i2printf@len,w,c
  8212  00204C  E1E6               	bnz	i2l4402
  8213  00204E  2820               	incf	i2printf@len+1,w,c
  8214  002050  B4D8               	btfsc	status,2,c
  8215  002052  D12E               	goto	i2u367_40
  8216  002054  D7E2               	goto	i2l800
  8217  002056                     i2l782:
  8218  002056  C00D  FFF6         	movff	i2printf@f,tblptrl
  8219  00205A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8220  00205E  4A0D               	infsnz	i2printf@f,f,c
  8221  002060  2A0E               	incf	i2printf@f+1,f,c
  8222  002062                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8223  002062  6AF8               	clrf	tblptru,c
  8224  002064                     	endif
  8225  002064                     	if	0	;tblptru may be non-zero
  8226  002064                     	endif
  8227  002064  0008               	tblrd		*
  8228  002066  CFF5 F026          	movff	tablat,i2printf@c
  8229  00206A  5026               	movf	i2printf@c,w,c
  8230                           
  8231                           ; Switch size 1, requested type "space"
  8232                           ; Number of cases is 5, Range of values is 0 to 120
  8233                           ; switch strategies available:
  8234                           ; Name         Instructions Cycles
  8235                           ; simple_byte           16     9 (average)
  8236                           ;	Chosen strategy is simple_byte
  8237  00206C  0A00               	xorlw	0	; case 0
  8238  00206E  B4D8               	btfsc	status,2,c
  8239  002070  0012               	return	
  8240  002072  0A64               	xorlw	100	; case 100
  8241  002074  B4D8               	btfsc	status,2,c
  8242  002076  D00A               	goto	i2l787
  8243  002078  0A0D               	xorlw	13	; case 105
  8244  00207A  B4D8               	btfsc	status,2,c
  8245  00207C  D007               	goto	i2l787
  8246  00207E  0A1A               	xorlw	26	; case 115
  8247  002080  B4D8               	btfsc	status,2,c
  8248  002082  D77A               	goto	i2l789
  8249  002084  0A0B               	xorlw	11	; case 120
  8250  002086  B4D8               	btfsc	status,2,c
  8251  002088  D775               	goto	i2l788
  8252  00208A  D112               	goto	i2u367_40
  8253  00208C                     i2l787:
  8254                           
  8255                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8256  00208C  BE23               	btfsc	i2printf@flag,7,c
  8257  00208E  D015               	goto	i2l803
  8258                           
  8259                           ;doprnt.c: 1253: {
  8260                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8261  002090  C01D  FFD9         	movff	i2printf@ap,fsr2l
  8262  002094  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  8263  002098  CFDE F021          	movff	postinc2,i2printf@val
  8264  00209C  CFDD F022          	movff	postdec2,i2printf@val+1
  8265  0020A0  0E02               	movlw	2
  8266  0020A2  261D               	addwf	i2printf@ap,f,c
  8267  0020A4  0E00               	movlw	0
  8268  0020A6  221E               	addwfc	i2printf@ap+1,f,c
  8269                           
  8270                           ;doprnt.c: 1261: if((int)val < 0) {
  8271  0020A8  AE22               	btfss	i2printf@val+1,7,c
  8272  0020AA  D04A               	goto	i2l806
  8273                           
  8274                           ;doprnt.c: 1262: flag |= 0x03;
  8275  0020AC  0E03               	movlw	3
  8276  0020AE  1223               	iorwf	i2printf@flag,f,c
  8277                           
  8278                           ;doprnt.c: 1263: val = -val;
  8279  0020B0  6C21               	negf	i2printf@val,c
  8280  0020B2  1E22               	comf	i2printf@val+1,f,c
  8281  0020B4  B0D8               	btfsc	status,0,c
  8282  0020B6  2A22               	incf	i2printf@val+1,f,c
  8283                           
  8284                           ;doprnt.c: 1264: }
  8285                           ;doprnt.c: 1266: }
  8286  0020B8  D043               	goto	i2l806
  8287  0020BA                     i2l803:
  8288                           
  8289                           ;doprnt.c: 1268: else
  8290                           ;doprnt.c: 1273: {
  8291                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8292  0020BA  C01D  FFD9         	movff	i2printf@ap,fsr2l
  8293  0020BE  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  8294  0020C2  CFDE F021          	movff	postinc2,i2printf@val
  8295  0020C6  CFDD F022          	movff	postdec2,i2printf@val+1
  8296  0020CA  0E02               	movlw	2
  8297  0020CC  261D               	addwf	i2printf@ap,f,c
  8298  0020CE  0E00               	movlw	0
  8299  0020D0  221E               	addwfc	i2printf@ap+1,f,c
  8300                           
  8301                           ;doprnt.c: 1287: }
  8302                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8303  0020D2  D036               	goto	i2l806
  8304  0020D4                     
  8305                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8306  0020D4  0E01               	movlw	1
  8307  0020D6  6E26               	movwf	i2printf@c,c
  8308  0020D8                     i2l4428:
  8309  0020D8  0E05               	movlw	5
  8310  0020DA  1826               	xorwf	i2printf@c,w,c
  8311  0020DC  B4D8               	btfsc	status,2,c
  8312  0020DE  D038               	goto	i2l811
  8313                           
  8314                           ;doprnt.c: 1306: if(val < dpowers[c])
  8315  0020E0  5026               	movf	i2printf@c,w,c
  8316  0020E2  0D02               	mullw	2
  8317  0020E4  0E08               	movlw	low _dpowers
  8318  0020E6  24F3               	addwf	prodl,w,c
  8319  0020E8  6EF6               	movwf	tblptrl,c
  8320  0020EA  0EFE               	movlw	high _dpowers
  8321  0020EC  20F4               	addwfc	prodh,w,c
  8322  0020EE  6EF7               	movwf	tblptrh,c
  8323  0020F0                     	if	1	;There are 3 active tblptr bytes
  8324  0020F0  6AF8               	clrf	tblptru,c
  8325  0020F2  0E00               	movlw	low (__mediumconst shr (0+16))
  8326  0020F4  22F8               	addwfc	tblptru,f,c
  8327  0020F6                     	endif
  8328  0020F6  0009               	tblrd		*+
  8329  0020F8  50F5               	movf	tablat,w,c
  8330  0020FA  5C21               	subwf	i2printf@val,w,c
  8331  0020FC  0009               	tblrd		*+
  8332  0020FE  50F5               	movf	tablat,w,c
  8333  002100  5822               	subwfb	i2printf@val+1,w,c
  8334  002102  A0D8               	btfss	status,0,c
  8335  002104  D025               	goto	i2l811
  8336                           
  8337                           ;doprnt.c: 1307: break;
  8338  002106  2A26               	incf	i2printf@c,f,c
  8339  002108  D7E7               	goto	i2l4428
  8340  00210A                     
  8341                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8342  00210A  0E01               	movlw	1
  8343  00210C  6E26               	movwf	i2printf@c,c
  8344  00210E                     i2l4442:
  8345  00210E  0E04               	movlw	4
  8346  002110  1826               	xorwf	i2printf@c,w,c
  8347  002112  B4D8               	btfsc	status,2,c
  8348  002114  D01D               	goto	i2l811
  8349                           
  8350                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8351  002116  5026               	movf	i2printf@c,w,c
  8352  002118  0D02               	mullw	2
  8353  00211A  0E12               	movlw	low _hexpowers
  8354  00211C  24F3               	addwf	prodl,w,c
  8355  00211E  6EF6               	movwf	tblptrl,c
  8356  002120  0EFE               	movlw	high _hexpowers
  8357  002122  20F4               	addwfc	prodh,w,c
  8358  002124  6EF7               	movwf	tblptrh,c
  8359  002126                     	if	1	;There are 3 active tblptr bytes
  8360  002126  6AF8               	clrf	tblptru,c
  8361  002128  0E00               	movlw	low (__mediumconst shr (0+16))
  8362  00212A  22F8               	addwfc	tblptru,f,c
  8363  00212C                     	endif
  8364  00212C  0009               	tblrd		*+
  8365  00212E  50F5               	movf	tablat,w,c
  8366  002130  5C21               	subwf	i2printf@val,w,c
  8367  002132  0009               	tblrd		*+
  8368  002134  50F5               	movf	tablat,w,c
  8369  002136  5822               	subwfb	i2printf@val+1,w,c
  8370  002138  A0D8               	btfss	status,0,c
  8371  00213A  D00A               	goto	i2l811
  8372                           
  8373                           ;doprnt.c: 1318: break;
  8374  00213C  2A26               	incf	i2printf@c,f,c
  8375  00213E  D7E7               	goto	i2l4442
  8376  002140                     i2l806:
  8377  002140  5023               	movf	i2printf@flag,w,c
  8378  002142  0B80               	andlw	128
  8379                           
  8380                           ; Switch size 1, requested type "space"
  8381                           ; Number of cases is 2, Range of values is 0 to 128
  8382                           ; switch strategies available:
  8383                           ; Name         Instructions Cycles
  8384                           ; simple_byte            7     4 (average)
  8385                           ;	Chosen strategy is simple_byte
  8386  002144  0A00               	xorlw	0	; case 0
  8387  002146  B4D8               	btfsc	status,2,c
  8388  002148  D7C5               	goto	i2l807
  8389  00214A  0A80               	xorlw	128	; case 128
  8390  00214C  B4D8               	btfsc	status,2,c
  8391  00214E  D7DD               	goto	i2l812
  8392  002150                     i2l811:
  8393                           
  8394                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8395  002150  5024               	movf	i2printf@width,w,c
  8396  002152  1025               	iorwf	i2printf@width+1,w,c
  8397  002154  B4D8               	btfsc	status,2,c
  8398  002156  D009               	goto	i2l816
  8399  002158  C023  F015         	movff	i2printf@flag,??i2_printf
  8400  00215C  0E03               	movlw	3
  8401  00215E  1615               	andwf	??i2_printf,f,c
  8402  002160  B4D8               	btfsc	status,2,c
  8403  002162  D003               	goto	i2l816
  8404                           
  8405                           ;doprnt.c: 1346: width--;
  8406  002164  0624               	decf	i2printf@width,f,c
  8407  002166  A0D8               	btfss	status,0,c
  8408  002168  0625               	decf	i2printf@width+1,f,c
  8409  00216A                     i2l816:
  8410                           
  8411                           ;doprnt.c: 1381: if(width > c)
  8412  00216A  0E80               	movlw	128
  8413  00216C  BE26               	btfsc	i2printf@c,7,c
  8414  00216E  0E7F               	movlw	127
  8415  002170  6E15               	movwf	??i2_printf& (0+255),c
  8416  002172  5024               	movf	i2printf@width,w,c
  8417  002174  5C26               	subwf	i2printf@c,w,c
  8418  002176  5025               	movf	i2printf@width+1,w,c
  8419  002178  0A80               	xorlw	128
  8420  00217A  5815               	subwfb	??i2_printf& (0+255),w,c
  8421  00217C  B0D8               	btfsc	status,0,c
  8422  00217E  D007               	goto	i2l817
  8423                           
  8424                           ;doprnt.c: 1382: width -= c;
  8425  002180  5026               	movf	i2printf@c,w,c
  8426  002182  5E24               	subwf	i2printf@width,f,c
  8427  002184  0E00               	movlw	0
  8428  002186  BE26               	btfsc	i2printf@c,7,c
  8429  002188  0EFF               	movlw	255
  8430  00218A  5A25               	subwfb	i2printf@width+1,f,c
  8431  00218C  D004               	goto	i2l818
  8432  00218E                     i2l817:
  8433                           
  8434                           ;doprnt.c: 1383: else
  8435                           ;doprnt.c: 1384: width = 0;
  8436  00218E  0E00               	movlw	0
  8437  002190  6E25               	movwf	i2printf@width+1,c
  8438  002192  0E00               	movlw	0
  8439  002194  6E24               	movwf	i2printf@width,c
  8440  002196                     i2l818:
  8441                           
  8442                           ;doprnt.c: 1387: if(flag & 0x04) {
  8443  002196  A423               	btfss	i2printf@flag,2,c
  8444  002198  D014               	goto	i2l819
  8445                           
  8446                           ;doprnt.c: 1392: if(flag & 0x03)
  8447  00219A  C023  F015         	movff	i2printf@flag,??i2_printf
  8448  00219E  0E03               	movlw	3
  8449  0021A0  1615               	andwf	??i2_printf,f,c
  8450  0021A2  B4D8               	btfsc	status,2,c
  8451  0021A4  D003               	goto	i2l820
  8452                           
  8453                           ;doprnt.c: 1393: (putch('-') );
  8454  0021A6  0E2D               	movlw	45
  8455  0021A8  ECDF  F01A         	call	i2_putch
  8456  0021AC                     i2l820:
  8457                           
  8458                           ;doprnt.c: 1415: if(width)
  8459  0021AC  5024               	movf	i2printf@width,w,c
  8460  0021AE  1025               	iorwf	i2printf@width+1,w,c
  8461  0021B0  B4D8               	btfsc	status,2,c
  8462  0021B2  D01E               	goto	i2l828
  8463                           
  8464                           ;doprnt.c: 1417: (putch('0') );
  8465                           
  8466                           ;doprnt.c: 1416: do
  8467  0021B4  0E30               	movlw	48
  8468  0021B6  ECDF  F01A         	call	i2_putch
  8469                           
  8470                           ;doprnt.c: 1418: while(--width);
  8471  0021BA  0624               	decf	i2printf@width,f,c
  8472  0021BC  A0D8               	btfss	status,0,c
  8473  0021BE  0625               	decf	i2printf@width+1,f,c
  8474  0021C0  D7F5               	goto	i2l820
  8475  0021C2                     i2l819:
  8476                           
  8477                           ;doprnt.c: 1422: {
  8478                           ;doprnt.c: 1424: if(width
  8479                           ;doprnt.c: 1428: )
  8480  0021C2  5024               	movf	i2printf@width,w,c
  8481  0021C4  1025               	iorwf	i2printf@width+1,w,c
  8482  0021C6  B4D8               	btfsc	status,2,c
  8483  0021C8  D00A               	goto	i2u365_40
  8484  0021CA                     i2u364_40:
  8485                           
  8486                           ;doprnt.c: 1430: (putch(' ') );
  8487                           
  8488                           ;doprnt.c: 1429: do
  8489  0021CA  0E20               	movlw	32
  8490  0021CC  ECDF  F01A         	call	i2_putch
  8491                           
  8492                           ;doprnt.c: 1431: while(--width);
  8493  0021D0  0624               	decf	i2printf@width,f,c
  8494  0021D2  A0D8               	btfss	status,0,c
  8495  0021D4  0625               	decf	i2printf@width+1,f,c
  8496  0021D6  5024               	movf	i2printf@width,w,c
  8497  0021D8  1025               	iorwf	i2printf@width+1,w,c
  8498  0021DA  A4D8               	btfss	status,2,c
  8499  0021DC  D7F6               	goto	i2u364_40
  8500  0021DE                     i2u365_40:
  8501                           
  8502                           ;doprnt.c: 1438: if(flag & 0x03)
  8503  0021DE  C023  F015         	movff	i2printf@flag,??i2_printf
  8504  0021E2  0E03               	movlw	3
  8505  0021E4  1615               	andwf	??i2_printf,f,c
  8506  0021E6  B4D8               	btfsc	status,2,c
  8507  0021E8  D003               	goto	i2l828
  8508                           
  8509                           ;doprnt.c: 1439: (putch('-') );
  8510  0021EA  0E2D               	movlw	45
  8511  0021EC  ECDF  F01A         	call	i2_putch
  8512  0021F0                     i2l828:
  8513                           
  8514                           ;doprnt.c: 1469: }
  8515                           ;doprnt.c: 1472: prec = c;
  8516  0021F0  C026  F01A         	movff	i2printf@c,i2printf@prec
  8517                           
  8518                           ;doprnt.c: 1474: while(prec--) {
  8519  0021F4  D059               	goto	i2l829
  8520  0021F6                     
  8521                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8522  0021F6  501A               	movf	i2printf@prec,w,c
  8523  0021F8  0D02               	mullw	2
  8524  0021FA  0E08               	movlw	low _dpowers
  8525  0021FC  24F3               	addwf	prodl,w,c
  8526  0021FE  6EF6               	movwf	tblptrl,c
  8527  002200  0EFE               	movlw	high _dpowers
  8528  002202  20F4               	addwfc	prodh,w,c
  8529  002204  6EF7               	movwf	tblptrh,c
  8530  002206                     	if	1	;There are 3 active tblptr bytes
  8531  002206  6AF8               	clrf	tblptru,c
  8532  002208  0E00               	movlw	low (__mediumconst shr (0+16))
  8533  00220A  22F8               	addwfc	tblptru,f,c
  8534  00220C                     	endif
  8535  00220C  0009               	tblrd		*+
  8536  00220E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8537  002212  000A               	tblrd		*-
  8538  002214  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8539  002218  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8540  00221C  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8541  002220  ECF2  F018         	call	i2___lwdiv	;wreg free
  8542  002224  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8543  002228  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8544  00222C  0E00               	movlw	0
  8545  00222E  6E0B               	movwf	i2___lwmod@divisor+1,c
  8546  002230  0E0A               	movlw	10
  8547  002232  6E0A               	movwf	i2___lwmod@divisor,c
  8548  002234  ECD1  F019         	call	i2___lwmod	;wreg free
  8549  002238  5008               	movf	?i2___lwmod,w,c
  8550  00223A  0F30               	addlw	48
  8551  00223C  6E26               	movwf	i2printf@c,c
  8552                           
  8553                           ;doprnt.c: 1491: break;
  8554  00223E  D031               	goto	i2l833
  8555  002240                     
  8556                           ;doprnt.c: 1499: {
  8557                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8558  002240  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8559  002244  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8560  002248  501A               	movf	i2printf@prec,w,c
  8561  00224A  0D02               	mullw	2
  8562  00224C  0E12               	movlw	low _hexpowers
  8563  00224E  24F3               	addwf	prodl,w,c
  8564  002250  6EF6               	movwf	tblptrl,c
  8565  002252  0EFE               	movlw	high _hexpowers
  8566  002254  20F4               	addwfc	prodh,w,c
  8567  002256  6EF7               	movwf	tblptrh,c
  8568  002258                     	if	1	;There are 3 active tblptr bytes
  8569  002258  6AF8               	clrf	tblptru,c
  8570  00225A  0E00               	movlw	low (__mediumconst shr (0+16))
  8571  00225C  22F8               	addwfc	tblptru,f,c
  8572  00225E                     	endif
  8573  00225E  0009               	tblrd		*+
  8574  002260  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8575  002264  000A               	tblrd		*-
  8576  002266  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8577  00226A  ECF2  F018         	call	i2___lwdiv	;wreg free
  8578  00226E  5001               	movf	?i2___lwdiv,w,c
  8579  002270  0B0F               	andlw	15
  8580  002272  6E19               	movwf	i2printf@idx,c
  8581                           
  8582                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8583  002274  5019               	movf	i2printf@idx,w,c
  8584  002276  0D01               	mullw	1
  8585  002278  0EB6               	movlw	low STR_55
  8586  00227A  24F3               	addwf	prodl,w,c
  8587  00227C  6EF6               	movwf	tblptrl,c
  8588  00227E  0EFE               	movlw	high STR_55
  8589  002280  20F4               	addwfc	prodh,w,c
  8590  002282  6EF7               	movwf	tblptrh,c
  8591  002284                     	if	1	;There are 3 active tblptr bytes
  8592  002284  6AF8               	clrf	tblptru,c
  8593  002286  0E00               	movlw	low (__mediumconst shr (0+16))
  8594  002288  22F8               	addwfc	tblptru,f,c
  8595  00228A                     	endif
  8596  00228A  0008               	tblrd		*
  8597  00228C  CFF5 F026          	movff	tablat,i2printf@c
  8598                           
  8599                           ;doprnt.c: 1523: }
  8600                           
  8601                           ;doprnt.c: 1508: }
  8602                           ;doprnt.c: 1510: break;
  8603  002290  D008               	goto	i2l833
  8604  002292  5023               	movf	i2printf@flag,w,c
  8605  002294  0B80               	andlw	128
  8606                           
  8607                           ; Switch size 1, requested type "space"
  8608                           ; Number of cases is 2, Range of values is 0 to 128
  8609                           ; switch strategies available:
  8610                           ; Name         Instructions Cycles
  8611                           ; simple_byte            7     4 (average)
  8612                           ;	Chosen strategy is simple_byte
  8613  002296  0A00               	xorlw	0	; case 0
  8614  002298  B4D8               	btfsc	status,2,c
  8615  00229A  D7AD               	goto	i2l832
  8616  00229C  0A80               	xorlw	128	; case 128
  8617  00229E  B4D8               	btfsc	status,2,c
  8618  0022A0  D7CF               	goto	i2l834
  8619  0022A2                     i2l833:
  8620                           
  8621                           ;doprnt.c: 1524: (putch(c) );
  8622  0022A2  5026               	movf	i2printf@c,w,c
  8623  0022A4  ECDF  F01A         	call	i2_putch
  8624  0022A8                     i2l829:
  8625  0022A8  061A               	decf	i2printf@prec,f,c
  8626  0022AA  281A               	incf	i2printf@prec,w,c
  8627  0022AC  A4D8               	btfss	status,2,c
  8628  0022AE  D7F1               	goto	i2l831
  8629  0022B0                     i2u367_40:
  8630  0022B0  C00D  FFF6         	movff	i2printf@f,tblptrl
  8631  0022B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8632  0022B8  4A0D               	infsnz	i2printf@f,f,c
  8633  0022BA  2A0E               	incf	i2printf@f+1,f,c
  8634  0022BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8635  0022BC  6AF8               	clrf	tblptru,c
  8636  0022BE                     	endif
  8637  0022BE                     	if	0	;tblptru may be non-zero
  8638  0022BE                     	endif
  8639  0022BE  0008               	tblrd		*
  8640  0022C0  CFF5 F026          	movff	tablat,i2printf@c
  8641  0022C4  5026               	movf	i2printf@c,w,c
  8642  0022C6  B4D8               	btfsc	status,2,c
  8643  0022C8  0012               	return	
  8644  0022CA  D5F8               	goto	i2l771
  8645  0022CC                     __end_ofi2_printf:
  8646                           	opt stack 0
  8647                           pclatu	equ	0xFFB
  8648                           pclath	equ	0xFFA
  8649                           tblptru	equ	0xFF8
  8650                           tblptrh	equ	0xFF7
  8651                           tblptrl	equ	0xFF6
  8652                           tablat	equ	0xFF5
  8653                           prodh	equ	0xFF4
  8654                           prodl	equ	0xFF3
  8655                           intcon	equ	0xFF2
  8656                           intcon3	equ	0xFF0
  8657                           indf0	equ	0xFEF
  8658                           postinc0	equ	0xFEE
  8659                           fsr0h	equ	0xFEA
  8660                           fsr0l	equ	0xFE9
  8661                           wreg	equ	0xFE8
  8662                           postdec1	equ	0xFE5
  8663                           fsr1h	equ	0xFE2
  8664                           fsr1l	equ	0xFE1
  8665                           indf2	equ	0xFDF
  8666                           postinc2	equ	0xFDE
  8667                           postdec2	equ	0xFDD
  8668                           fsr2h	equ	0xFDA
  8669                           fsr2l	equ	0xFD9
  8670                           status	equ	0xFD8
  8671                           
  8672 ;; *************** function i2_putch *****************
  8673 ;; Defined at:
  8674 ;;		line 24 in file "lcd.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;  data            1    wreg     unsigned char 
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;  data            1    2[COMRAM] unsigned char 
  8679 ;; Return value:  Size  Location     Type
  8680 ;;                  1    wreg      void 
  8681 ;; Registers used:
  8682 ;;		wreg, status,2, status,0, cstack
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;Total ram usage:        1 bytes
  8693 ;; Hardware stack levels used:    1
  8694 ;; Hardware stack levels required when called:    1
  8695 ;; This function calls:
  8696 ;;		i2_lcdNibble
  8697 ;; This function is called by:
  8698 ;;		_interruptHandler
  8699 ;;		i2_printf
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text23
  8704  0035BE                     __ptext23:
  8705                           	opt stack 0
  8706  0035BE                     i2_putch:
  8707                           	opt stack 25
  8708                           
  8709                           ;incstack = 0
  8710                           ;i2putch@data stored from wreg
  8711  0035BE  6E03               	movwf	i2putch@data,c
  8712                           
  8713                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  8714  0035C0  848C               	bsf	3980,2,c	;volatile
  8715                           
  8716                           ;lcd.c: 33: lcdNibble(data);
  8717  0035C2  5003               	movf	i2putch@data,w,c
  8718  0035C4  ECB4  F016         	call	i2_lcdNibble
  8719                           
  8720                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8721  0035C8  0EC8               	movlw	200
  8722  0035CA                     i2u488_47:
  8723  0035CA  D000               	nop2	
  8724  0035CC  2EE8               	decfsz	wreg,f,c
  8725  0035CE  D7FD               	bra	i2u488_47
  8726  0035D0  0012               	return		;funcret
  8727  0035D2                     __end_ofi2_putch:
  8728                           	opt stack 0
  8729                           pclatu	equ	0xFFB
  8730                           pclath	equ	0xFFA
  8731                           tblptru	equ	0xFF8
  8732                           tblptrh	equ	0xFF7
  8733                           tblptrl	equ	0xFF6
  8734                           tablat	equ	0xFF5
  8735                           prodh	equ	0xFF4
  8736                           prodl	equ	0xFF3
  8737                           intcon	equ	0xFF2
  8738                           intcon3	equ	0xFF0
  8739                           indf0	equ	0xFEF
  8740                           postinc0	equ	0xFEE
  8741                           fsr0h	equ	0xFEA
  8742                           fsr0l	equ	0xFE9
  8743                           wreg	equ	0xFE8
  8744                           postdec1	equ	0xFE5
  8745                           fsr1h	equ	0xFE2
  8746                           fsr1l	equ	0xFE1
  8747                           indf2	equ	0xFDF
  8748                           postinc2	equ	0xFDE
  8749                           postdec2	equ	0xFDD
  8750                           fsr2h	equ	0xFDA
  8751                           fsr2l	equ	0xFD9
  8752                           status	equ	0xFD8
  8753                           
  8754 ;; *************** function i2_isdigit *****************
  8755 ;; Defined at:
  8756 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;  c               1    wreg     unsigned char 
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;  c               1    2[COMRAM] unsigned char 
  8761 ;; Return value:  Size  Location     Type
  8762 ;;		None               void
  8763 ;; Registers used:
  8764 ;;		wreg, status,2, status,0
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;Total ram usage:        3 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; This function calls:
  8777 ;;		Nothing
  8778 ;; This function is called by:
  8779 ;;		i2_printf
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text24
  8784  003544                     __ptext24:
  8785                           	opt stack 0
  8786  003544                     i2_isdigit:
  8787                           	opt stack 25
  8788                           
  8789                           ;incstack = 0
  8790                           ;i2isdigit@c stored from wreg
  8791  003544  6E03               	movwf	i2isdigit@c,c
  8792  003546  0E00               	movlw	0
  8793  003548  6E02               	movwf	i2_isdigit$1238,c
  8794  00354A  0E3A               	movlw	58
  8795  00354C  6003               	cpfslt	i2isdigit@c,c
  8796  00354E  D005               	goto	i2l1167
  8797  003550  0E2F               	movlw	47
  8798  003552  6403               	cpfsgt	i2isdigit@c,c
  8799  003554  D002               	goto	i2l1167
  8800  003556  0E01               	movlw	1
  8801  003558  6E02               	movwf	i2_isdigit$1238,c
  8802  00355A                     i2l1167:
  8803  00355A  C002  F001         	movff	i2_isdigit$1238,??i2_isdigit
  8804  00355E  3001               	rrcf	??i2_isdigit,w,c
  8805  003560  0012               	return	
  8806  003562                     __end_ofi2_isdigit:
  8807                           	opt stack 0
  8808                           pclatu	equ	0xFFB
  8809                           pclath	equ	0xFFA
  8810                           tblptru	equ	0xFF8
  8811                           tblptrh	equ	0xFF7
  8812                           tblptrl	equ	0xFF6
  8813                           tablat	equ	0xFF5
  8814                           prodh	equ	0xFF4
  8815                           prodl	equ	0xFF3
  8816                           intcon	equ	0xFF2
  8817                           intcon3	equ	0xFF0
  8818                           indf0	equ	0xFEF
  8819                           postinc0	equ	0xFEE
  8820                           fsr0h	equ	0xFEA
  8821                           fsr0l	equ	0xFE9
  8822                           wreg	equ	0xFE8
  8823                           postdec1	equ	0xFE5
  8824                           fsr1h	equ	0xFE2
  8825                           fsr1l	equ	0xFE1
  8826                           indf2	equ	0xFDF
  8827                           postinc2	equ	0xFDE
  8828                           postdec2	equ	0xFDD
  8829                           fsr2h	equ	0xFDA
  8830                           fsr2l	equ	0xFD9
  8831                           status	equ	0xFD8
  8832                           
  8833 ;; *************** function i2___lwmod *****************
  8834 ;; Defined at:
  8835 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;  dividend        2    7[COMRAM] unsigned int 
  8838 ;;  divisor         2    9[COMRAM] unsigned int 
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  2    7[COMRAM] unsigned int 
  8843 ;; Registers used:
  8844 ;;		wreg, status,2, status,0
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8850 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;Total ram usage:        5 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; This function calls:
  8857 ;;		Nothing
  8858 ;; This function is called by:
  8859 ;;		i2_printf
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           	psect	text25
  8864  0033A2                     __ptext25:
  8865                           	opt stack 0
  8866  0033A2                     i2___lwmod:
  8867                           	opt stack 25
  8868                           
  8869                           ;incstack = 0
  8870  0033A2  500A               	movf	i2___lwmod@divisor,w,c
  8871  0033A4  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8872  0033A6  B4D8               	btfsc	status,2,c
  8873  0033A8  D018               	goto	i2l1261
  8874  0033AA  0E01               	movlw	1
  8875  0033AC  6E0C               	movwf	i2___lwmod@counter,c
  8876  0033AE  D004               	goto	i2l1256
  8877  0033B0  90D8               	bcf	status,0,c
  8878  0033B2  360A               	rlcf	i2___lwmod@divisor,f,c
  8879  0033B4  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8880  0033B6  2A0C               	incf	i2___lwmod@counter,f,c
  8881  0033B8                     i2l1256:
  8882  0033B8  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8883  0033BA  D7FA               	goto	i2l1257
  8884  0033BC                     i2u261_40:
  8885  0033BC  500A               	movf	i2___lwmod@divisor,w,c
  8886  0033BE  5C08               	subwf	i2___lwmod@dividend,w,c
  8887  0033C0  500B               	movf	i2___lwmod@divisor+1,w,c
  8888  0033C2  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8889  0033C4  A0D8               	btfss	status,0,c
  8890  0033C6  D004               	goto	i2l1260
  8891  0033C8  500A               	movf	i2___lwmod@divisor,w,c
  8892  0033CA  5E08               	subwf	i2___lwmod@dividend,f,c
  8893  0033CC  500B               	movf	i2___lwmod@divisor+1,w,c
  8894  0033CE  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8895  0033D0                     i2l1260:
  8896  0033D0  90D8               	bcf	status,0,c
  8897  0033D2  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8898  0033D4  320A               	rrcf	i2___lwmod@divisor,f,c
  8899  0033D6  2E0C               	decfsz	i2___lwmod@counter,f,c
  8900  0033D8  D7F1               	goto	i2u261_40
  8901  0033DA                     i2l1261:
  8902  0033DA  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8903  0033DE  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8904  0033E2  0012               	return		;funcret
  8905  0033E4                     __end_ofi2___lwmod:
  8906                           	opt stack 0
  8907                           pclatu	equ	0xFFB
  8908                           pclath	equ	0xFFA
  8909                           tblptru	equ	0xFF8
  8910                           tblptrh	equ	0xFF7
  8911                           tblptrl	equ	0xFF6
  8912                           tablat	equ	0xFF5
  8913                           prodh	equ	0xFF4
  8914                           prodl	equ	0xFF3
  8915                           intcon	equ	0xFF2
  8916                           intcon3	equ	0xFF0
  8917                           indf0	equ	0xFEF
  8918                           postinc0	equ	0xFEE
  8919                           fsr0h	equ	0xFEA
  8920                           fsr0l	equ	0xFE9
  8921                           wreg	equ	0xFE8
  8922                           postdec1	equ	0xFE5
  8923                           fsr1h	equ	0xFE2
  8924                           fsr1l	equ	0xFE1
  8925                           indf2	equ	0xFDF
  8926                           postinc2	equ	0xFDE
  8927                           postdec2	equ	0xFDD
  8928                           fsr2h	equ	0xFDA
  8929                           fsr2l	equ	0xFD9
  8930                           status	equ	0xFD8
  8931                           
  8932 ;; *************** function i2___lwdiv *****************
  8933 ;; Defined at:
  8934 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;  dividend        2    0[COMRAM] unsigned int 
  8937 ;;  divisor         2    2[COMRAM] unsigned int 
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8940 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  2    0[COMRAM] unsigned int 
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8950 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8953 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8954 ;;Total ram usage:        7 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; This function calls:
  8957 ;;		Nothing
  8958 ;; This function is called by:
  8959 ;;		i2_printf
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           	psect	text26
  8964  0031E4                     __ptext26:
  8965                           	opt stack 0
  8966  0031E4                     i2___lwdiv:
  8967                           	opt stack 25
  8968                           
  8969                           ;incstack = 0
  8970  0031E4  0E00               	movlw	0
  8971  0031E6  6E06               	movwf	i2___lwdiv@quotient+1,c
  8972  0031E8  0E00               	movlw	0
  8973  0031EA  6E05               	movwf	i2___lwdiv@quotient,c
  8974  0031EC  5003               	movf	i2___lwdiv@divisor,w,c
  8975  0031EE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8976  0031F0  B4D8               	btfsc	status,2,c
  8977  0031F2  D01C               	goto	i2l1251
  8978  0031F4  0E01               	movlw	1
  8979  0031F6  6E07               	movwf	i2___lwdiv@counter,c
  8980  0031F8  D004               	goto	i2l1246
  8981  0031FA  90D8               	bcf	status,0,c
  8982  0031FC  3603               	rlcf	i2___lwdiv@divisor,f,c
  8983  0031FE  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8984  003200  2A07               	incf	i2___lwdiv@counter,f,c
  8985  003202                     i2l1246:
  8986  003202  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8987  003204  D7FA               	goto	i2l1247
  8988  003206                     i2u258_40:
  8989  003206  90D8               	bcf	status,0,c
  8990  003208  3605               	rlcf	i2___lwdiv@quotient,f,c
  8991  00320A  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8992  00320C  5003               	movf	i2___lwdiv@divisor,w,c
  8993  00320E  5C01               	subwf	i2___lwdiv@dividend,w,c
  8994  003210  5004               	movf	i2___lwdiv@divisor+1,w,c
  8995  003212  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8996  003214  A0D8               	btfss	status,0,c
  8997  003216  D005               	goto	i2l1250
  8998  003218  5003               	movf	i2___lwdiv@divisor,w,c
  8999  00321A  5E01               	subwf	i2___lwdiv@dividend,f,c
  9000  00321C  5004               	movf	i2___lwdiv@divisor+1,w,c
  9001  00321E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9002  003220  8005               	bsf	i2___lwdiv@quotient,0,c
  9003  003222                     i2l1250:
  9004  003222  90D8               	bcf	status,0,c
  9005  003224  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9006  003226  3203               	rrcf	i2___lwdiv@divisor,f,c
  9007  003228  2E07               	decfsz	i2___lwdiv@counter,f,c
  9008  00322A  D7ED               	goto	i2u258_40
  9009  00322C                     i2l1251:
  9010  00322C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9011  003230  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9012  003234  0012               	return		;funcret
  9013  003236                     __end_ofi2___lwdiv:
  9014                           	opt stack 0
  9015                           pclatu	equ	0xFFB
  9016                           pclath	equ	0xFFA
  9017                           tblptru	equ	0xFF8
  9018                           tblptrh	equ	0xFF7
  9019                           tblptrl	equ	0xFF6
  9020                           tablat	equ	0xFF5
  9021                           prodh	equ	0xFF4
  9022                           prodl	equ	0xFF3
  9023                           intcon	equ	0xFF2
  9024                           intcon3	equ	0xFF0
  9025                           indf0	equ	0xFEF
  9026                           postinc0	equ	0xFEE
  9027                           fsr0h	equ	0xFEA
  9028                           fsr0l	equ	0xFE9
  9029                           wreg	equ	0xFE8
  9030                           postdec1	equ	0xFE5
  9031                           fsr1h	equ	0xFE2
  9032                           fsr1l	equ	0xFE1
  9033                           indf2	equ	0xFDF
  9034                           postinc2	equ	0xFDE
  9035                           postdec2	equ	0xFDD
  9036                           fsr2h	equ	0xFDA
  9037                           fsr2l	equ	0xFD9
  9038                           status	equ	0xFD8
  9039                           
  9040 ;; *************** function i2_initLCD *****************
  9041 ;; Defined at:
  9042 ;;		line 60 in file "lcd.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;		None
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;		None
  9047 ;; Return value:  Size  Location     Type
  9048 ;;                  1    wreg      void 
  9049 ;; Registers used:
  9050 ;;		wreg, status,2, status,0, cstack
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9060 ;;Total ram usage:        1 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; Hardware stack levels required when called:    2
  9063 ;; This function calls:
  9064 ;;		i2_lcdInst
  9065 ;; This function is called by:
  9066 ;;		_interruptHandler
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           	psect	text27
  9071  003282                     __ptext27:
  9072                           	opt stack 0
  9073  003282                     i2_initLCD:
  9074                           	opt stack 24
  9075                           
  9076                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  9077                           
  9078                           ;incstack = 0
  9079  003282  0EC3               	movlw	195
  9080  003284  6E04               	movwf	??i2_initLCD& (0+255),c
  9081  003286  0ECD               	movlw	205
  9082  003288                     i2u489_47:
  9083  003288  2EE8               	decfsz	wreg,f,c
  9084  00328A  D7FE               	bra	i2u489_47
  9085  00328C  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  9086  00328E  D7FC               	bra	i2u489_47
  9087  003290  F000               	nop	
  9088                           
  9089                           ;lcd.c: 69: lcdInst(0b00110011);
  9090  003292  0E33               	movlw	51
  9091  003294  ECE9  F01A         	call	i2_lcdInst
  9092                           
  9093                           ;lcd.c: 70: lcdInst(0b00110010);
  9094  003298  0E32               	movlw	50
  9095  00329A  ECE9  F01A         	call	i2_lcdInst
  9096                           
  9097                           ;lcd.c: 71: lcdInst(0b00101000);
  9098  00329E  0E28               	movlw	40
  9099  0032A0  ECE9  F01A         	call	i2_lcdInst
  9100                           
  9101                           ;lcd.c: 72: lcdInst(0b00001111);
  9102  0032A4  0E0F               	movlw	15
  9103  0032A6  ECE9  F01A         	call	i2_lcdInst
  9104                           
  9105                           ;lcd.c: 73: lcdInst(0b00000110);
  9106  0032AA  0E06               	movlw	6
  9107  0032AC  ECE9  F01A         	call	i2_lcdInst
  9108                           
  9109                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9110  0032B0  0E01               	movlw	1
  9111  0032B2  ECE9  F01A         	call	i2_lcdInst
  9112  0032B6  0EC3               	movlw	195
  9113  0032B8  6E04               	movwf	??i2_initLCD& (0+255),c
  9114  0032BA  0ECD               	movlw	205
  9115  0032BC                     i2u490_47:
  9116  0032BC  2EE8               	decfsz	wreg,f,c
  9117  0032BE  D7FE               	bra	i2u490_47
  9118  0032C0  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  9119  0032C2  D7FC               	bra	i2u490_47
  9120  0032C4  F000               	nop	
  9121                           
  9122                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  9123  0032C6  0E0F               	movlw	15
  9124  0032C8  ECE9  F01A         	call	i2_lcdInst
  9125  0032CC  0012               	return		;funcret
  9126  0032CE                     __end_ofi2_initLCD:
  9127                           	opt stack 0
  9128                           pclatu	equ	0xFFB
  9129                           pclath	equ	0xFFA
  9130                           tblptru	equ	0xFF8
  9131                           tblptrh	equ	0xFF7
  9132                           tblptrl	equ	0xFF6
  9133                           tablat	equ	0xFF5
  9134                           prodh	equ	0xFF4
  9135                           prodl	equ	0xFF3
  9136                           intcon	equ	0xFF2
  9137                           intcon3	equ	0xFF0
  9138                           indf0	equ	0xFEF
  9139                           postinc0	equ	0xFEE
  9140                           fsr0h	equ	0xFEA
  9141                           fsr0l	equ	0xFE9
  9142                           wreg	equ	0xFE8
  9143                           postdec1	equ	0xFE5
  9144                           fsr1h	equ	0xFE2
  9145                           fsr1l	equ	0xFE1
  9146                           indf2	equ	0xFDF
  9147                           postinc2	equ	0xFDE
  9148                           postdec2	equ	0xFDD
  9149                           fsr2h	equ	0xFDA
  9150                           fsr2l	equ	0xFD9
  9151                           status	equ	0xFD8
  9152                           
  9153 ;; *************** function i2_lcdInst *****************
  9154 ;; Defined at:
  9155 ;;		line 11 in file "lcd.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;  data            1    wreg     unsigned char 
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;  data            1    2[COMRAM] unsigned char 
  9160 ;; Return value:  Size  Location     Type
  9161 ;;                  1    wreg      void 
  9162 ;; Registers used:
  9163 ;;		wreg, status,2, status,0, cstack
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9172 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9173 ;;Total ram usage:        1 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; Hardware stack levels required when called:    1
  9176 ;; This function calls:
  9177 ;;		i2_lcdNibble
  9178 ;; This function is called by:
  9179 ;;		_interruptHandler
  9180 ;;		i2_initLCD
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           	psect	text28
  9185  0035D2                     __ptext28:
  9186                           	opt stack 0
  9187  0035D2                     i2_lcdInst:
  9188                           	opt stack 25
  9189                           
  9190                           ;incstack = 0
  9191                           ;i2lcdInst@data stored from wreg
  9192  0035D2  6E03               	movwf	i2lcdInst@data,c
  9193                           
  9194                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  9195  0035D4  948C               	bcf	3980,2,c	;volatile
  9196                           
  9197                           ;lcd.c: 20: lcdNibble(data);
  9198  0035D6  5003               	movf	i2lcdInst@data,w,c
  9199  0035D8  ECB4  F016         	call	i2_lcdNibble
  9200                           
  9201                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  9202  0035DC  0EC8               	movlw	200
  9203  0035DE                     i2u491_47:
  9204  0035DE  D000               	nop2	
  9205  0035E0  2EE8               	decfsz	wreg,f,c
  9206  0035E2  D7FD               	bra	i2u491_47
  9207  0035E4  0012               	return		;funcret
  9208  0035E6                     __end_ofi2_lcdInst:
  9209                           	opt stack 0
  9210                           pclatu	equ	0xFFB
  9211                           pclath	equ	0xFFA
  9212                           tblptru	equ	0xFF8
  9213                           tblptrh	equ	0xFF7
  9214                           tblptrl	equ	0xFF6
  9215                           tablat	equ	0xFF5
  9216                           prodh	equ	0xFF4
  9217                           prodl	equ	0xFF3
  9218                           intcon	equ	0xFF2
  9219                           intcon3	equ	0xFF0
  9220                           indf0	equ	0xFEF
  9221                           postinc0	equ	0xFEE
  9222                           fsr0h	equ	0xFEA
  9223                           fsr0l	equ	0xFE9
  9224                           wreg	equ	0xFE8
  9225                           postdec1	equ	0xFE5
  9226                           fsr1h	equ	0xFE2
  9227                           fsr1l	equ	0xFE1
  9228                           indf2	equ	0xFDF
  9229                           postinc2	equ	0xFDE
  9230                           postdec2	equ	0xFDD
  9231                           fsr2h	equ	0xFDA
  9232                           fsr2l	equ	0xFD9
  9233                           status	equ	0xFD8
  9234                           
  9235 ;; *************** function i2_lcdNibble *****************
  9236 ;; Defined at:
  9237 ;;		line 37 in file "lcd.c"
  9238 ;; Parameters:    Size  Location     Type
  9239 ;;  data            1    wreg     unsigned char 
  9240 ;; Auto vars:     Size  Location     Type
  9241 ;;  data            1    1[COMRAM] unsigned char 
  9242 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  1    wreg      void 
  9245 ;; Registers used:
  9246 ;;		wreg, status,2, status,0
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9255 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9256 ;;Total ram usage:        2 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; This function calls:
  9259 ;;		Nothing
  9260 ;; This function is called by:
  9261 ;;		i2_lcdInst
  9262 ;;		i2_putch
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           	psect	text29
  9267  002D68                     __ptext29:
  9268                           	opt stack 0
  9269  002D68                     i2_lcdNibble:
  9270                           	opt stack 25
  9271                           
  9272                           ;incstack = 0
  9273                           ;i2lcdNibble@data stored from wreg
  9274  002D68  6E02               	movwf	i2lcdNibble@data,c
  9275                           
  9276                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  9277  002D6A  5002               	movf	i2lcdNibble@data,w,c
  9278  002D6C  0BF0               	andlw	240
  9279  002D6E  6E01               	movwf	i2lcdNibble@temp,c
  9280                           
  9281                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  9282  002D70  508C               	movf	3980,w,c	;volatile
  9283  002D72  0B0F               	andlw	15
  9284  002D74  6E8C               	movwf	3980,c	;volatile
  9285                           
  9286                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  9287  002D76  5001               	movf	i2lcdNibble@temp,w,c
  9288  002D78  108C               	iorwf	3980,w,c	;volatile
  9289  002D7A  6E8C               	movwf	3980,c	;volatile
  9290                           
  9291                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9292  002D7C  0E00               	movlw	0
  9293  002D7E  BEF2               	btfsc	intcon,7,c	;volatile
  9294  002D80  0E01               	movlw	1
  9295  002D82  0100               	movlb	0	; () banked
  9296  002D84  6FB7               	movwf	_LCDinterruptState& (0+255),b
  9297                           
  9298                           ; BSR set to: 0
  9299  002D86  9EF2               	bcf	intcon,7,c	;volatile
  9300                           
  9301                           ; BSR set to: 0
  9302  002D88  868C               	bsf	3980,3,c	;volatile
  9303                           
  9304                           ; BSR set to: 0
  9305  002D8A  0E53               	movlw	83
  9306  002D8C                     i2u492_47:
  9307  002D8C  2EE8               	decfsz	wreg,f,c
  9308  002D8E  D7FE               	bra	i2u492_47
  9309  002D90  F000               	nop	
  9310  002D92  968C               	bcf	3980,3,c	;volatile
  9311  002D94  0EC8               	movlw	200
  9312  002D96                     i2u493_47:
  9313  002D96  D000               	nop2	
  9314  002D98  2EE8               	decfsz	wreg,f,c
  9315  002D9A  D7FD               	bra	i2u493_47
  9316  002D9C  0100               	movlb	0	; () banked
  9317  002D9E  B1B7               	btfsc	_LCDinterruptState& (0+255),0,b
  9318  002DA0  D002               	bra	i2u228_45
  9319  002DA2  9EF2               	bcf	intcon,7,c	;volatile
  9320  002DA4  D001               	bra	i2u228_46
  9321  002DA6                     i2u228_45:
  9322  002DA6  8EF2               	bsf	intcon,7,c	;volatile
  9323  002DA8                     i2u228_46:
  9324                           
  9325                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  9326  002DA8  3802               	swapf	i2lcdNibble@data,w,c
  9327  002DAA  0BF0               	andlw	240
  9328  002DAC  6E02               	movwf	i2lcdNibble@data,c
  9329                           
  9330                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  9331  002DAE  5002               	movf	i2lcdNibble@data,w,c
  9332  002DB0  0BF0               	andlw	240
  9333  002DB2  6E01               	movwf	i2lcdNibble@temp,c
  9334                           
  9335                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  9336  002DB4  508C               	movf	3980,w,c	;volatile
  9337  002DB6  0B0F               	andlw	15
  9338  002DB8  6E8C               	movwf	3980,c	;volatile
  9339                           
  9340                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  9341  002DBA  5001               	movf	i2lcdNibble@temp,w,c
  9342  002DBC  108C               	iorwf	3980,w,c	;volatile
  9343  002DBE  6E8C               	movwf	3980,c	;volatile
  9344                           
  9345                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9346  002DC0  0E00               	movlw	0
  9347  002DC2  BEF2               	btfsc	intcon,7,c	;volatile
  9348  002DC4  0E01               	movlw	1
  9349  002DC6  0100               	movlb	0	; () banked
  9350  002DC8  6FB7               	movwf	_LCDinterruptState& (0+255),b
  9351                           
  9352                           ; BSR set to: 0
  9353  002DCA  9EF2               	bcf	intcon,7,c	;volatile
  9354                           
  9355                           ; BSR set to: 0
  9356  002DCC  868C               	bsf	3980,3,c	;volatile
  9357                           
  9358                           ; BSR set to: 0
  9359  002DCE  0E53               	movlw	83
  9360  002DD0                     i2u494_47:
  9361  002DD0  2EE8               	decfsz	wreg,f,c
  9362  002DD2  D7FE               	bra	i2u494_47
  9363  002DD4  F000               	nop	
  9364  002DD6  968C               	bcf	3980,3,c	;volatile
  9365  002DD8  0EC8               	movlw	200
  9366  002DDA                     i2u495_47:
  9367  002DDA  D000               	nop2	
  9368  002DDC  2EE8               	decfsz	wreg,f,c
  9369  002DDE  D7FD               	bra	i2u495_47
  9370  002DE0  0100               	movlb	0	; () banked
  9371  002DE2  B1B7               	btfsc	_LCDinterruptState& (0+255),0,b
  9372  002DE4  D002               	bra	i2u229_45
  9373  002DE6  9EF2               	bcf	intcon,7,c	;volatile
  9374  002DE8  D001               	bra	i2u229_46
  9375  002DEA                     i2u229_45:
  9376  002DEA  8EF2               	bsf	intcon,7,c	;volatile
  9377  002DEC                     i2u229_46:
  9378  002DEC  0012               	return		;funcret
  9379  002DEE                     __end_ofi2_lcdNibble:
  9380                           	opt stack 0
  9381                           pclatu	equ	0xFFB
  9382                           pclath	equ	0xFFA
  9383                           tblptru	equ	0xFF8
  9384                           tblptrh	equ	0xFF7
  9385                           tblptrl	equ	0xFF6
  9386                           tablat	equ	0xFF5
  9387                           prodh	equ	0xFF4
  9388                           prodl	equ	0xFF3
  9389                           intcon	equ	0xFF2
  9390                           intcon3	equ	0xFF0
  9391                           indf0	equ	0xFEF
  9392                           postinc0	equ	0xFEE
  9393                           fsr0h	equ	0xFEA
  9394                           fsr0l	equ	0xFE9
  9395                           wreg	equ	0xFE8
  9396                           postdec1	equ	0xFE5
  9397                           fsr1h	equ	0xFE2
  9398                           fsr1l	equ	0xFE1
  9399                           indf2	equ	0xFDF
  9400                           postinc2	equ	0xFDE
  9401                           postdec2	equ	0xFDD
  9402                           fsr2h	equ	0xFDA
  9403                           fsr2l	equ	0xFD9
  9404                           status	equ	0xFD8
  9405                           
  9406 ;; *************** function i2___awdiv *****************
  9407 ;; Defined at:
  9408 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;  dividend        2    0[COMRAM] int 
  9411 ;;  divisor         2    2[COMRAM] int 
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;  __awdiv         2    6[COMRAM] int 
  9414 ;;  __awdiv         1    5[COMRAM] unsigned char 
  9415 ;;  __awdiv         1    4[COMRAM] unsigned char 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  2    0[COMRAM] int 
  9418 ;; Registers used:
  9419 ;;		wreg, status,2, status,0
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9429 ;;Total ram usage:        8 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; This function calls:
  9432 ;;		Nothing
  9433 ;; This function is called by:
  9434 ;;		_interruptHandler
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           	psect	text30
  9439  002EF8                     __ptext30:
  9440                           	opt stack 0
  9441  002EF8                     i2___awdiv:
  9442                           	opt stack 26
  9443                           
  9444                           ;incstack = 0
  9445  002EF8  0E00               	movlw	0
  9446  002EFA  6E06               	movwf	i2___awdiv@sign,c
  9447  002EFC  AE04               	btfss	i2___awdiv@divisor+1,7,c
  9448  002EFE  D006               	goto	i2l1005
  9449  002F00  6C03               	negf	i2___awdiv@divisor,c
  9450  002F02  1E04               	comf	i2___awdiv@divisor+1,f,c
  9451  002F04  B0D8               	btfsc	status,0,c
  9452  002F06  2A04               	incf	i2___awdiv@divisor+1,f,c
  9453  002F08  0E01               	movlw	1
  9454  002F0A  6E06               	movwf	i2___awdiv@sign,c
  9455  002F0C                     i2l1005:
  9456  002F0C  AE02               	btfss	i2___awdiv@dividend+1,7,c
  9457  002F0E  D006               	goto	i2l1006
  9458  002F10  6C01               	negf	i2___awdiv@dividend,c
  9459  002F12  1E02               	comf	i2___awdiv@dividend+1,f,c
  9460  002F14  B0D8               	btfsc	status,0,c
  9461  002F16  2A02               	incf	i2___awdiv@dividend+1,f,c
  9462  002F18  0E01               	movlw	1
  9463  002F1A  1A06               	xorwf	i2___awdiv@sign,f,c
  9464  002F1C                     i2l1006:
  9465  002F1C  0E00               	movlw	0
  9466  002F1E  6E08               	movwf	i2___awdiv@quotient+1,c
  9467  002F20  0E00               	movlw	0
  9468  002F22  6E07               	movwf	i2___awdiv@quotient,c
  9469  002F24  5003               	movf	i2___awdiv@divisor,w,c
  9470  002F26  1004               	iorwf	i2___awdiv@divisor+1,w,c
  9471  002F28  B4D8               	btfsc	status,2,c
  9472  002F2A  D01C               	goto	i2l1013
  9473  002F2C  0E01               	movlw	1
  9474  002F2E  6E05               	movwf	i2___awdiv@counter,c
  9475  002F30  D004               	goto	i2l1008
  9476  002F32  90D8               	bcf	status,0,c
  9477  002F34  3603               	rlcf	i2___awdiv@divisor,f,c
  9478  002F36  3604               	rlcf	i2___awdiv@divisor+1,f,c
  9479  002F38  2A05               	incf	i2___awdiv@counter,f,c
  9480  002F3A                     i2l1008:
  9481  002F3A  AE04               	btfss	i2___awdiv@divisor+1,7,c
  9482  002F3C  D7FA               	goto	i2l1009
  9483  002F3E                     i2u372_40:
  9484  002F3E  90D8               	bcf	status,0,c
  9485  002F40  3607               	rlcf	i2___awdiv@quotient,f,c
  9486  002F42  3608               	rlcf	i2___awdiv@quotient+1,f,c
  9487  002F44  5003               	movf	i2___awdiv@divisor,w,c
  9488  002F46  5C01               	subwf	i2___awdiv@dividend,w,c
  9489  002F48  5004               	movf	i2___awdiv@divisor+1,w,c
  9490  002F4A  5802               	subwfb	i2___awdiv@dividend+1,w,c
  9491  002F4C  A0D8               	btfss	status,0,c
  9492  002F4E  D005               	goto	i2l1012
  9493  002F50  5003               	movf	i2___awdiv@divisor,w,c
  9494  002F52  5E01               	subwf	i2___awdiv@dividend,f,c
  9495  002F54  5004               	movf	i2___awdiv@divisor+1,w,c
  9496  002F56  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  9497  002F58  8007               	bsf	i2___awdiv@quotient,0,c
  9498  002F5A                     i2l1012:
  9499  002F5A  90D8               	bcf	status,0,c
  9500  002F5C  3204               	rrcf	i2___awdiv@divisor+1,f,c
  9501  002F5E  3203               	rrcf	i2___awdiv@divisor,f,c
  9502  002F60  2E05               	decfsz	i2___awdiv@counter,f,c
  9503  002F62  D7ED               	goto	i2u372_40
  9504  002F64                     i2l1013:
  9505  002F64  5006               	movf	i2___awdiv@sign,w,c
  9506  002F66  B4D8               	btfsc	status,2,c
  9507  002F68  D004               	goto	i2l1014
  9508  002F6A  6C07               	negf	i2___awdiv@quotient,c
  9509  002F6C  1E08               	comf	i2___awdiv@quotient+1,f,c
  9510  002F6E  B0D8               	btfsc	status,0,c
  9511  002F70  2A08               	incf	i2___awdiv@quotient+1,f,c
  9512  002F72                     i2l1014:
  9513  002F72  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  9514  002F76  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  9515  002F7A  0012               	return	
  9516  002F7C                     __end_ofi2___awdiv:
  9517                           	opt stack 0
  9518                           pclatu	equ	0xFFB
  9519                           pclath	equ	0xFFA
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           intcon	equ	0xFF2
  9527                           intcon3	equ	0xFF0
  9528                           indf0	equ	0xFEF
  9529                           postinc0	equ	0xFEE
  9530                           fsr0h	equ	0xFEA
  9531                           fsr0l	equ	0xFE9
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1h	equ	0xFE2
  9535                           fsr1l	equ	0xFE1
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function i2_I2C_Master_Write *****************
  9544 ;; Defined at:
  9545 ;;		line 108 in file "I2C.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;		None
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  1    wreg      void 
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0, cstack
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;Total ram usage:        2 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    1
  9566 ;; This function calls:
  9567 ;;		i2_I2C_Master_Wait
  9568 ;; This function is called by:
  9569 ;;		_interruptHandler
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           	psect	text31
  9574  00360E                     __ptext31:
  9575                           	opt stack 0
  9576  00360E                     i2_I2C_Master_Write:
  9577                           	opt stack 25
  9578                           
  9579                           ;I2C.c: 116: I2C_Master_Wait();
  9580                           
  9581                           ;incstack = 0
  9582  00360E  ECF3  F01A         	call	i2_I2C_Master_Wait	;wreg free
  9583                           
  9584                           ;I2C.c: 117: SSPBUF = byteToWrite;
  9585  003612  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
  9586  003616  0012               	return		;funcret
  9587  003618                     __end_ofi2_I2C_Master_Write:
  9588                           	opt stack 0
  9589                           pclatu	equ	0xFFB
  9590                           pclath	equ	0xFFA
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           intcon3	equ	0xFF0
  9599                           indf0	equ	0xFEF
  9600                           postinc0	equ	0xFEE
  9601                           fsr0h	equ	0xFEA
  9602                           fsr0l	equ	0xFE9
  9603                           wreg	equ	0xFE8
  9604                           postdec1	equ	0xFE5
  9605                           fsr1h	equ	0xFE2
  9606                           fsr1l	equ	0xFE1
  9607                           indf2	equ	0xFDF
  9608                           postinc2	equ	0xFDE
  9609                           postdec2	equ	0xFDD
  9610                           fsr2h	equ	0xFDA
  9611                           fsr2l	equ	0xFD9
  9612                           status	equ	0xFD8
  9613                           
  9614 ;; *************** function i2_I2C_Master_Stop *****************
  9615 ;; Defined at:
  9616 ;;		line 95 in file "I2C.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		wreg, status,2, status,0, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;Total ram usage:        0 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    1
  9637 ;; This function calls:
  9638 ;;		i2_I2C_Master_Wait
  9639 ;; This function is called by:
  9640 ;;		_interruptHandler
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text32
  9645  003628                     __ptext32:
  9646                           	opt stack 0
  9647  003628                     i2_I2C_Master_Stop:
  9648                           	opt stack 25
  9649                           
  9650                           ;I2C.c: 104: I2C_Master_Wait();
  9651                           
  9652                           ;incstack = 0
  9653  003628  ECF3  F01A         	call	i2_I2C_Master_Wait	;wreg free
  9654                           
  9655                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  9656  00362C  84C5               	bsf	4037,2,c	;volatile
  9657  00362E  0012               	return		;funcret
  9658  003630                     __end_ofi2_I2C_Master_Stop:
  9659                           	opt stack 0
  9660                           pclatu	equ	0xFFB
  9661                           pclath	equ	0xFFA
  9662                           tblptru	equ	0xFF8
  9663                           tblptrh	equ	0xFF7
  9664                           tblptrl	equ	0xFF6
  9665                           tablat	equ	0xFF5
  9666                           prodh	equ	0xFF4
  9667                           prodl	equ	0xFF3
  9668                           intcon	equ	0xFF2
  9669                           intcon3	equ	0xFF0
  9670                           indf0	equ	0xFEF
  9671                           postinc0	equ	0xFEE
  9672                           fsr0h	equ	0xFEA
  9673                           fsr0l	equ	0xFE9
  9674                           wreg	equ	0xFE8
  9675                           postdec1	equ	0xFE5
  9676                           fsr1h	equ	0xFE2
  9677                           fsr1l	equ	0xFE1
  9678                           indf2	equ	0xFDF
  9679                           postinc2	equ	0xFDE
  9680                           postdec2	equ	0xFDD
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function i2_I2C_Master_Start *****************
  9686 ;; Defined at:
  9687 ;;		line 69 in file "I2C.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;		None
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;		None
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      void 
  9694 ;; Registers used:
  9695 ;;		wreg, status,2, status,0, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;Total ram usage:        0 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    1
  9708 ;; This function calls:
  9709 ;;		i2_I2C_Master_Wait
  9710 ;; This function is called by:
  9711 ;;		_interruptHandler
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           	psect	text33
  9716  003630                     __ptext33:
  9717                           	opt stack 0
  9718  003630                     i2_I2C_Master_Start:
  9719                           	opt stack 25
  9720                           
  9721                           ;I2C.c: 78: I2C_Master_Wait();
  9722                           
  9723                           ;incstack = 0
  9724  003630  ECF3  F01A         	call	i2_I2C_Master_Wait	;wreg free
  9725                           
  9726                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  9727  003634  80C5               	bsf	4037,0,c	;volatile
  9728  003636  0012               	return		;funcret
  9729  003638                     __end_ofi2_I2C_Master_Start:
  9730                           	opt stack 0
  9731                           pclatu	equ	0xFFB
  9732                           pclath	equ	0xFFA
  9733                           tblptru	equ	0xFF8
  9734                           tblptrh	equ	0xFF7
  9735                           tblptrl	equ	0xFF6
  9736                           tablat	equ	0xFF5
  9737                           prodh	equ	0xFF4
  9738                           prodl	equ	0xFF3
  9739                           intcon	equ	0xFF2
  9740                           intcon3	equ	0xFF0
  9741                           indf0	equ	0xFEF
  9742                           postinc0	equ	0xFEE
  9743                           fsr0h	equ	0xFEA
  9744                           fsr0l	equ	0xFE9
  9745                           wreg	equ	0xFE8
  9746                           postdec1	equ	0xFE5
  9747                           fsr1h	equ	0xFE2
  9748                           fsr1l	equ	0xFE1
  9749                           indf2	equ	0xFDF
  9750                           postinc2	equ	0xFDE
  9751                           postdec2	equ	0xFDD
  9752                           fsr2h	equ	0xFDA
  9753                           fsr2l	equ	0xFD9
  9754                           status	equ	0xFD8
  9755                           
  9756 ;; *************** function i2_I2C_Master_Read *****************
  9757 ;; Defined at:
  9758 ;;		line 120 in file "I2C.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;  ackBit          1    wreg     unsigned char 
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;  ackBit          1    1[COMRAM] unsigned char 
  9763 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9764 ;; Return value:  Size  Location     Type
  9765 ;;                  1    wreg      unsigned char 
  9766 ;; Registers used:
  9767 ;;		wreg, status,2, status,0, cstack
  9768 ;; Tracked objects:
  9769 ;;		On entry : 0/0
  9770 ;;		On exit  : 0/0
  9771 ;;		Unchanged: 0/0
  9772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;Total ram usage:        2 bytes
  9778 ;; Hardware stack levels used:    1
  9779 ;; Hardware stack levels required when called:    1
  9780 ;; This function calls:
  9781 ;;		i2_I2C_Master_Wait
  9782 ;; This function is called by:
  9783 ;;		_interruptHandler
  9784 ;; This function uses a non-reentrant model
  9785 ;;
  9786                           
  9787                           	psect	text34
  9788  0034FE                     __ptext34:
  9789                           	opt stack 0
  9790  0034FE                     i2_I2C_Master_Read:
  9791                           	opt stack 25
  9792                           
  9793                           ;incstack = 0
  9794                           ;i2I2C_Master_Read@ackBit stored from wreg
  9795  0034FE  6E02               	movwf	i2I2C_Master_Read@ackBit,c
  9796                           
  9797                           ;I2C.c: 130: unsigned char receivedByte;
  9798                           ;I2C.c: 132: I2C_Master_Wait();
  9799  003500  ECF3  F01A         	call	i2_I2C_Master_Wait	;wreg free
  9800                           
  9801                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  9802  003504  86C5               	bsf	4037,3,c	;volatile
  9803                           
  9804                           ;I2C.c: 135: I2C_Master_Wait();
  9805  003506  ECF3  F01A         	call	i2_I2C_Master_Wait	;wreg free
  9806                           
  9807                           ;I2C.c: 136: receivedByte = SSPBUF;
  9808  00350A  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
  9809                           
  9810                           ;I2C.c: 138: I2C_Master_Wait();
  9811  00350E  ECF3  F01A         	call	i2_I2C_Master_Wait	;wreg free
  9812                           
  9813                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  9814  003512  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
  9815  003514  D002               	bra	i2u338_45
  9816  003516  9AC5               	bcf	4037,5,c	;volatile
  9817  003518  D001               	bra	i2u338_46
  9818  00351A                     i2u338_45:
  9819  00351A  8AC5               	bsf	4037,5,c	;volatile
  9820  00351C                     i2u338_46:
  9821                           
  9822                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  9823  00351C  88C5               	bsf	4037,4,c	;volatile
  9824                           
  9825                           ;I2C.c: 142: return receivedByte;
  9826  00351E  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
  9827  003520  0012               	return	
  9828  003522                     __end_ofi2_I2C_Master_Read:
  9829                           	opt stack 0
  9830                           pclatu	equ	0xFFB
  9831                           pclath	equ	0xFFA
  9832                           tblptru	equ	0xFF8
  9833                           tblptrh	equ	0xFF7
  9834                           tblptrl	equ	0xFF6
  9835                           tablat	equ	0xFF5
  9836                           prodh	equ	0xFF4
  9837                           prodl	equ	0xFF3
  9838                           intcon	equ	0xFF2
  9839                           intcon3	equ	0xFF0
  9840                           indf0	equ	0xFEF
  9841                           postinc0	equ	0xFEE
  9842                           fsr0h	equ	0xFEA
  9843                           fsr0l	equ	0xFE9
  9844                           wreg	equ	0xFE8
  9845                           postdec1	equ	0xFE5
  9846                           fsr1h	equ	0xFE2
  9847                           fsr1l	equ	0xFE1
  9848                           indf2	equ	0xFDF
  9849                           postinc2	equ	0xFDE
  9850                           postdec2	equ	0xFDD
  9851                           fsr2h	equ	0xFDA
  9852                           fsr2l	equ	0xFD9
  9853                           status	equ	0xFD8
  9854                           
  9855 ;; *************** function i2_I2C_Master_Wait *****************
  9856 ;; Defined at:
  9857 ;;		line 51 in file "I2C.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;		None
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;		None
  9862 ;; Return value:  Size  Location     Type
  9863 ;;                  1    wreg      void 
  9864 ;; Registers used:
  9865 ;;		wreg, status,2, status,0
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9873 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9875 ;;Total ram usage:        1 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; This function calls:
  9878 ;;		Nothing
  9879 ;; This function is called by:
  9880 ;;		i2_I2C_Master_Start
  9881 ;;		i2_I2C_Master_Stop
  9882 ;;		i2_I2C_Master_Write
  9883 ;;		i2_I2C_Master_Read
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           	psect	text35
  9888  0035E6                     __ptext35:
  9889                           	opt stack 0
  9890  0035E6                     i2_I2C_Master_Wait:
  9891                           	opt stack 25
  9892                           
  9893                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  9894                           
  9895                           ;incstack = 0
  9896  0035E6  B4C7               	btfsc	4039,2,c	;volatile
  9897  0035E8  D7FE               	goto	i2_I2C_Master_Wait
  9898  0035EA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9899  0035EE  0E1F               	movlw	31
  9900  0035F0  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9901  0035F2  B4D8               	btfsc	status,2,c
  9902  0035F4  0012               	return	
  9903  0035F6  D7F7               	goto	i2_I2C_Master_Wait
  9904  0035F8                     __end_ofi2_I2C_Master_Wait:
  9905                           	opt stack 0
  9906                           pclatu	equ	0xFFB
  9907                           pclath	equ	0xFFA
  9908                           tblptru	equ	0xFF8
  9909                           tblptrh	equ	0xFF7
  9910                           tblptrl	equ	0xFF6
  9911                           tablat	equ	0xFF5
  9912                           prodh	equ	0xFF4
  9913                           prodl	equ	0xFF3
  9914                           intcon	equ	0xFF2
  9915                           intcon3	equ	0xFF0
  9916                           indf0	equ	0xFEF
  9917                           postinc0	equ	0xFEE
  9918                           fsr0h	equ	0xFEA
  9919                           fsr0l	equ	0xFE9
  9920                           wreg	equ	0xFE8
  9921                           postdec1	equ	0xFE5
  9922                           fsr1h	equ	0xFE2
  9923                           fsr1l	equ	0xFE1
  9924                           indf2	equ	0xFDF
  9925                           postinc2	equ	0xFDE
  9926                           postdec2	equ	0xFDD
  9927                           fsr2h	equ	0xFDA
  9928                           fsr2l	equ	0xFD9
  9929                           status	equ	0xFD8
  9930                           
  9931 ;; *************** function i2_I2C_Master_Init *****************
  9932 ;; Defined at:
  9933 ;;		line 14 in file "I2C.c"
  9934 ;; Parameters:    Size  Location     Type
  9935 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;		None
  9938 ;; Return value:  Size  Location     Type
  9939 ;;                  1    wreg      void 
  9940 ;; Registers used:
  9941 ;;		wreg, status,2, status,0, cstack
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9947 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9949 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9950 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9951 ;;Total ram usage:        8 bytes
  9952 ;; Hardware stack levels used:    1
  9953 ;; Hardware stack levels required when called:    1
  9954 ;; This function calls:
  9955 ;;		i2___lldiv
  9956 ;; This function is called by:
  9957 ;;		_interruptHandler
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           	psect	text36
  9962  003134                     __ptext36:
  9963                           	opt stack 0
  9964  003134                     i2_I2C_Master_Init:
  9965                           	opt stack 25
  9966                           
  9967                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  9968                           
  9969                           ;incstack = 0
  9970  003134  9AC6               	bcf	4038,5,c	;volatile
  9971                           
  9972                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  9973  003136  8694               	bsf	3988,3,c	;volatile
  9974                           
  9975                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  9976  003138  8894               	bsf	3988,4,c	;volatile
  9977                           
  9978                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  9979  00313A  0E80               	movlw	128
  9980  00313C  6EC7               	movwf	4039,c	;volatile
  9981                           
  9982                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  9983  00313E  0E28               	movlw	40
  9984  003140  6EC6               	movwf	4038,c	;volatile
  9985                           
  9986                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  9987  003142  0E00               	movlw	0
  9988  003144  6EC5               	movwf	4037,c	;volatile
  9989                           
  9990                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  9991  003146  0E00               	movlw	0
  9992  003148  6E01               	movwf	i2___lldiv@dividend,c
  9993  00314A  0E5A               	movlw	90
  9994  00314C  6E02               	movwf	i2___lldiv@dividend+1,c
  9995  00314E  0E62               	movlw	98
  9996  003150  6E03               	movwf	i2___lldiv@dividend+2,c
  9997  003152  0E02               	movlw	2
  9998  003154  6E04               	movwf	i2___lldiv@dividend+3,c
  9999  003156  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 10000  00315A  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 10001  00315E  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 10002  003162  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 10003  003166  0E02               	movlw	2
 10004  003168                     i2u337_45:
 10005  003168  90D8               	bcf	status,0,c
 10006  00316A  3612               	rlcf	??i2_I2C_Master_Init,f,c
 10007  00316C  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 10008  00316E  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 10009  003170  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 10010  003172  2EE8               	decfsz	wreg,f,c
 10011  003174  D7F9               	goto	i2u337_45
 10012  003176  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 10013  00317A  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 10014  00317E  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 10015  003182  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 10016  003186  ECBE  F017         	call	i2___lldiv	;wreg free
 10017  00318A  0401               	decf	?i2___lldiv,w,c
 10018  00318C  6EC8               	movwf	4040,c	;volatile
 10019  00318E  0012               	return		;funcret
 10020  003190                     __end_ofi2_I2C_Master_Init:
 10021                           	opt stack 0
 10022                           pclatu	equ	0xFFB
 10023                           pclath	equ	0xFFA
 10024                           tblptru	equ	0xFF8
 10025                           tblptrh	equ	0xFF7
 10026                           tblptrl	equ	0xFF6
 10027                           tablat	equ	0xFF5
 10028                           prodh	equ	0xFF4
 10029                           prodl	equ	0xFF3
 10030                           intcon	equ	0xFF2
 10031                           intcon3	equ	0xFF0
 10032                           indf0	equ	0xFEF
 10033                           postinc0	equ	0xFEE
 10034                           fsr0h	equ	0xFEA
 10035                           fsr0l	equ	0xFE9
 10036                           wreg	equ	0xFE8
 10037                           postdec1	equ	0xFE5
 10038                           fsr1h	equ	0xFE2
 10039                           fsr1l	equ	0xFE1
 10040                           indf2	equ	0xFDF
 10041                           postinc2	equ	0xFDE
 10042                           postdec2	equ	0xFDD
 10043                           fsr2h	equ	0xFDA
 10044                           fsr2l	equ	0xFD9
 10045                           status	equ	0xFD8
 10046                           
 10047 ;; *************** function i2___lldiv *****************
 10048 ;; Defined at:
 10049 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;  dividend        4    0[COMRAM] unsigned long 
 10052 ;;  divisor         4    4[COMRAM] unsigned long 
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;  __lldiv         4    8[COMRAM] unsigned long 
 10055 ;;  __lldiv         1   12[COMRAM] unsigned char 
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  4    0[COMRAM] unsigned long 
 10058 ;; Registers used:
 10059 ;;		wreg, status,2, status,0
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10065 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10066 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;Total ram usage:       13 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; This function calls:
 10072 ;;		Nothing
 10073 ;; This function is called by:
 10074 ;;		i2_I2C_Master_Init
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078                           	psect	text37
 10079  002F7C                     __ptext37:
 10080                           	opt stack 0
 10081  002F7C                     i2___lldiv:
 10082                           	opt stack 25
 10083                           
 10084                           ;incstack = 0
 10085  002F7C  0E00               	movlw	0
 10086  002F7E  6E09               	movwf	i2___lldiv@quotient,c
 10087  002F80  0E00               	movlw	0
 10088  002F82  6E0A               	movwf	i2___lldiv@quotient+1,c
 10089  002F84  0E00               	movlw	0
 10090  002F86  6E0B               	movwf	i2___lldiv@quotient+2,c
 10091  002F88  0E00               	movlw	0
 10092  002F8A  6E0C               	movwf	i2___lldiv@quotient+3,c
 10093  002F8C  5005               	movf	i2___lldiv@divisor,w,c
 10094  002F8E  1006               	iorwf	i2___lldiv@divisor+1,w,c
 10095  002F90  1007               	iorwf	i2___lldiv@divisor+2,w,c
 10096  002F92  1008               	iorwf	i2___lldiv@divisor+3,w,c
 10097  002F94  B4D8               	btfsc	status,2,c
 10098  002F96  D02A               	goto	i2l1198
 10099  002F98  0E01               	movlw	1
 10100  002F9A  6E0D               	movwf	i2___lldiv@counter,c
 10101  002F9C  D006               	goto	i2l1193
 10102  002F9E  90D8               	bcf	status,0,c
 10103  002FA0  3605               	rlcf	i2___lldiv@divisor,f,c
 10104  002FA2  3606               	rlcf	i2___lldiv@divisor+1,f,c
 10105  002FA4  3607               	rlcf	i2___lldiv@divisor+2,f,c
 10106  002FA6  3608               	rlcf	i2___lldiv@divisor+3,f,c
 10107  002FA8  2A0D               	incf	i2___lldiv@counter,f,c
 10108  002FAA                     i2l1193:
 10109  002FAA  AE08               	btfss	i2___lldiv@divisor+3,7,c
 10110  002FAC  D7F8               	goto	i2l1194
 10111  002FAE                     i2u255_40:
 10112  002FAE  90D8               	bcf	status,0,c
 10113  002FB0  3609               	rlcf	i2___lldiv@quotient,f,c
 10114  002FB2  360A               	rlcf	i2___lldiv@quotient+1,f,c
 10115  002FB4  360B               	rlcf	i2___lldiv@quotient+2,f,c
 10116  002FB6  360C               	rlcf	i2___lldiv@quotient+3,f,c
 10117  002FB8  5005               	movf	i2___lldiv@divisor,w,c
 10118  002FBA  5C01               	subwf	i2___lldiv@dividend,w,c
 10119  002FBC  5006               	movf	i2___lldiv@divisor+1,w,c
 10120  002FBE  5802               	subwfb	i2___lldiv@dividend+1,w,c
 10121  002FC0  5007               	movf	i2___lldiv@divisor+2,w,c
 10122  002FC2  5803               	subwfb	i2___lldiv@dividend+2,w,c
 10123  002FC4  5008               	movf	i2___lldiv@divisor+3,w,c
 10124  002FC6  5804               	subwfb	i2___lldiv@dividend+3,w,c
 10125  002FC8  A0D8               	btfss	status,0,c
 10126  002FCA  D009               	goto	i2l1197
 10127  002FCC  5005               	movf	i2___lldiv@divisor,w,c
 10128  002FCE  5E01               	subwf	i2___lldiv@dividend,f,c
 10129  002FD0  5006               	movf	i2___lldiv@divisor+1,w,c
 10130  002FD2  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 10131  002FD4  5007               	movf	i2___lldiv@divisor+2,w,c
 10132  002FD6  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 10133  002FD8  5008               	movf	i2___lldiv@divisor+3,w,c
 10134  002FDA  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 10135  002FDC  8009               	bsf	i2___lldiv@quotient,0,c
 10136  002FDE                     i2l1197:
 10137  002FDE  90D8               	bcf	status,0,c
 10138  002FE0  3208               	rrcf	i2___lldiv@divisor+3,f,c
 10139  002FE2  3207               	rrcf	i2___lldiv@divisor+2,f,c
 10140  002FE4  3206               	rrcf	i2___lldiv@divisor+1,f,c
 10141  002FE6  3205               	rrcf	i2___lldiv@divisor,f,c
 10142  002FE8  2E0D               	decfsz	i2___lldiv@counter,f,c
 10143  002FEA  D7E1               	goto	i2u255_40
 10144  002FEC                     i2l1198:
 10145  002FEC  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 10146  002FF0  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 10147  002FF4  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 10148  002FF8  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 10149  002FFC  0012               	return		;funcret
 10150  002FFE                     __end_ofi2___lldiv:
 10151                           	opt stack 0
 10152                           pclatu	equ	0xFFB
 10153                           pclath	equ	0xFFA
 10154                           tblptru	equ	0xFF8
 10155                           tblptrh	equ	0xFF7
 10156                           tblptrl	equ	0xFF6
 10157                           tablat	equ	0xFF5
 10158                           prodh	equ	0xFF4
 10159                           prodl	equ	0xFF3
 10160                           intcon	equ	0xFF2
 10161                           intcon3	equ	0xFF0
 10162                           indf0	equ	0xFEF
 10163                           postinc0	equ	0xFEE
 10164                           fsr0h	equ	0xFEA
 10165                           fsr0l	equ	0xFE9
 10166                           wreg	equ	0xFE8
 10167                           postdec1	equ	0xFE5
 10168                           fsr1h	equ	0xFE2
 10169                           fsr1l	equ	0xFE1
 10170                           indf2	equ	0xFDF
 10171                           postinc2	equ	0xFDE
 10172                           postdec2	equ	0xFDD
 10173                           fsr2h	equ	0xFDA
 10174                           fsr2l	equ	0xFD9
 10175                           status	equ	0xFD8
 10176                           
 10177 ;; *************** function _strncmp *****************
 10178 ;; Defined at:
 10179 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 10182 ;;		 -> current_set(5), 
 10183 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 10184 ;;		 -> strs(100), 
 10185 ;;  len             2   10[COMRAM] unsigned int 
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;		None
 10188 ;; Return value:  Size  Location     Type
 10189 ;;                  2    6[COMRAM] int 
 10190 ;; Registers used:
 10191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10192 ;; Tracked objects:
 10193 ;;		On entry : 0/0
 10194 ;;		On exit  : 0/0
 10195 ;;		Unchanged: 0/0
 10196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10197 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10199 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10200 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10201 ;;Total ram usage:        9 bytes
 10202 ;; Hardware stack levels used:    1
 10203 ;; This function calls:
 10204 ;;		Nothing
 10205 ;; This function is called by:
 10206 ;;		_interruptHandler
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           	psect	text38
 10211  002DEE                     __ptext38:
 10212                           	opt stack 0
 10213  002DEE                     _strncmp:
 10214                           	opt stack 26
 10215                           
 10216                           ;incstack = 0
 10217  002DEE  D035               	goto	i2l1413
 10218  002DF0                     i2l3994:
 10219  002DF0  C007  FFD9         	movff	strncmp@s1,fsr2l
 10220  002DF4  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 10221  002DF8  50DF               	movf	indf2,w,c
 10222  002DFA  B4D8               	btfsc	status,2,c
 10223  002DFC  D010               	goto	i2u303_40
 10224  002DFE  C007  FFD9         	movff	strncmp@s1,fsr2l
 10225  002E02  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 10226  002E06  50DF               	movf	indf2,w,c
 10227  002E08  6E0D               	movwf	??_strncmp& (0+255),c
 10228  002E0A  C009  FFF6         	movff	strncmp@s2,tblptrl
 10229  002E0E  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 10230  002E12                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10231  002E12  6AF8               	clrf	tblptru,c
 10232  002E14                     	endif
 10233  002E14                     	if	0	;tblptru may be non-zero
 10234  002E14                     	endif
 10235  002E14  0008               	tblrd		*
 10236  002E16  50F5               	movf	tablat,w,c
 10237  002E18  180D               	xorwf	??_strncmp,w,c
 10238  002E1A  B4D8               	btfsc	status,2,c
 10239  002E1C  D01A               	goto	i2l1415
 10240  002E1E                     i2u303_40:
 10241  002E1E  C009  FFF6         	movff	strncmp@s2,tblptrl
 10242  002E22  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 10243  002E26                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10244  002E26  6AF8               	clrf	tblptru,c
 10245  002E28                     	endif
 10246  002E28                     	if	0	;tblptru may be non-zero
 10247  002E28                     	endif
 10248  002E28  0008               	tblrd		*
 10249  002E2A  50F5               	movf	tablat,w,c
 10250  002E2C  6E0D               	movwf	??_strncmp& (0+255),c
 10251  002E2E  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 10252  002E30  1E0D               	comf	??_strncmp,f,c
 10253  002E32  1E0E               	comf	??_strncmp+1,f,c
 10254  002E34  4A0D               	infsnz	??_strncmp,f,c
 10255  002E36  2A0E               	incf	??_strncmp+1,f,c
 10256  002E38  C007  FFD9         	movff	strncmp@s1,fsr2l
 10257  002E3C  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 10258  002E40  50DF               	movf	indf2,w,c
 10259  002E42  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 10260  002E44  500F               	movf	??_strncmp+2,w,c
 10261  002E46  240D               	addwf	??_strncmp,w,c
 10262  002E48  6E07               	movwf	?_strncmp,c
 10263  002E4A  0E00               	movlw	0
 10264  002E4C  200E               	addwfc	??_strncmp+1,w,c
 10265  002E4E  6E08               	movwf	?_strncmp+1,c
 10266  002E50  0012               	return	
 10267  002E52                     i2l1415:
 10268  002E52  4A07               	infsnz	strncmp@s1,f,c
 10269  002E54  2A08               	incf	strncmp@s1+1,f,c
 10270  002E56  4A09               	infsnz	strncmp@s2,f,c
 10271  002E58  2A0A               	incf	strncmp@s2+1,f,c
 10272  002E5A                     i2l1413:
 10273  002E5A  060B               	decf	strncmp@len,f,c
 10274  002E5C  A0D8               	btfss	status,0,c
 10275  002E5E  060C               	decf	strncmp@len+1,f,c
 10276  002E60  280B               	incf	strncmp@len,w,c
 10277  002E62  E1C6               	bnz	i2l3994
 10278  002E64  280C               	incf	strncmp@len+1,w,c
 10279  002E66  A4D8               	btfss	status,2,c
 10280  002E68  D7C3               	goto	i2l1414
 10281  002E6A  0E00               	movlw	0
 10282  002E6C  6E08               	movwf	?_strncmp+1,c
 10283  002E6E  0E00               	movlw	0
 10284  002E70  6E07               	movwf	?_strncmp,c
 10285  002E72  0012               	return	
 10286  002E74                     __end_of_strncmp:
 10287                           	opt stack 0
 10288                           pclatu	equ	0xFFB
 10289                           pclath	equ	0xFFA
 10290                           tblptru	equ	0xFF8
 10291                           tblptrh	equ	0xFF7
 10292                           tblptrl	equ	0xFF6
 10293                           tablat	equ	0xFF5
 10294                           prodh	equ	0xFF4
 10295                           prodl	equ	0xFF3
 10296                           intcon	equ	0xFF2
 10297                           intcon3	equ	0xFF0
 10298                           indf0	equ	0xFEF
 10299                           postinc0	equ	0xFEE
 10300                           fsr0h	equ	0xFEA
 10301                           fsr0l	equ	0xFE9
 10302                           wreg	equ	0xFE8
 10303                           postdec1	equ	0xFE5
 10304                           fsr1h	equ	0xFE2
 10305                           fsr1l	equ	0xFE1
 10306                           indf2	equ	0xFDF
 10307                           postinc2	equ	0xFDE
 10308                           postdec2	equ	0xFDD
 10309                           fsr2h	equ	0xFDA
 10310                           fsr2l	equ	0xFD9
 10311                           status	equ	0xFD8
 10312                           
 10313 ;; *************** function _strcpy *****************
 10314 ;; Defined at:
 10315 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;  to              2    6[COMRAM] PTR unsigned char 
 10318 ;;		 -> current_set2(5), final_set(40), current_set(5), temp_set(5), 
 10319 ;;  from            2    8[COMRAM] PTR const unsigned char 
 10320 ;;		 -> STR_30(1), STR_28(1), STR_25(1), STR_22(2), 
 10321 ;;		 -> STR_21(2), STR_20(2), current_set(5), STR_19(2), 
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;  cp              2   10[COMRAM] PTR unsigned char 
 10324 ;;		 -> current_set2(5), final_set(40), current_set(5), temp_set(5), 
 10325 ;; Return value:  Size  Location     Type
 10326 ;;                  2    6[COMRAM] PTR unsigned char 
 10327 ;; Registers used:
 10328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10329 ;; Tracked objects:
 10330 ;;		On entry : 0/0
 10331 ;;		On exit  : 0/0
 10332 ;;		Unchanged: 0/0
 10333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10334 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10338 ;;Total ram usage:        6 bytes
 10339 ;; Hardware stack levels used:    1
 10340 ;; This function calls:
 10341 ;;		Nothing
 10342 ;; This function is called by:
 10343 ;;		_interruptHandler
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           	psect	text39
 10348  003318                     __ptext39:
 10349                           	opt stack 0
 10350  003318                     _strcpy:
 10351                           	opt stack 26
 10352                           
 10353                           ;incstack = 0
 10354  003318  C007  F00B         	movff	strcpy@to,strcpy@cp
 10355  00331C  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 10356  003320  D004               	goto	i2l1407
 10357  003322  4A0B               	infsnz	strcpy@cp,f,c
 10358  003324  2A0C               	incf	strcpy@cp+1,f,c
 10359  003326  4A09               	infsnz	strcpy@from,f,c
 10360  003328  2A0A               	incf	strcpy@from+1,f,c
 10361  00332A                     i2l1407:
 10362  00332A  C009  FFF6         	movff	strcpy@from,tblptrl
 10363  00332E  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 10364  003332  0E00               	movlw	low (__mediumconst shr (0+16))
 10365  003334  6EF8               	movwf	tblptru,c
 10366  003336  C00B  FFD9         	movff	strcpy@cp,fsr2l
 10367  00333A  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 10368  00333E  0E0F               	movlw	(high __ramtop+-1)
 10369  003340  64F7               	cpfsgt	tblptrh,c
 10370  003342  D003               	bra	i2u298_47
 10371  003344  0008               	tblrd		*
 10372  003346  50F5               	movf	tablat,w,c
 10373  003348  D005               	bra	i2u298_40
 10374  00334A                     i2u298_47:
 10375  00334A  CFF6 FFE9          	movff	tblptrl,fsr0l
 10376  00334E  CFF7 FFEA          	movff	tblptrh,fsr0h
 10377  003352  50EF               	movf	indf0,w,c
 10378  003354                     i2u298_40:
 10379  003354  6EDF               	movwf	indf2,c
 10380  003356  50DF               	movf	indf2,w,c
 10381  003358  B4D8               	btfsc	status,2,c
 10382  00335A  0012               	return	
 10383  00335C  D7E2               	goto	i2l1408
 10384  00335E                     __end_of_strcpy:
 10385                           	opt stack 0
 10386                           pclatu	equ	0xFFB
 10387                           pclath	equ	0xFFA
 10388                           tblptru	equ	0xFF8
 10389                           tblptrh	equ	0xFF7
 10390                           tblptrl	equ	0xFF6
 10391                           tablat	equ	0xFF5
 10392                           prodh	equ	0xFF4
 10393                           prodl	equ	0xFF3
 10394                           intcon	equ	0xFF2
 10395                           intcon3	equ	0xFF0
 10396                           indf0	equ	0xFEF
 10397                           postinc0	equ	0xFEE
 10398                           fsr0h	equ	0xFEA
 10399                           fsr0l	equ	0xFE9
 10400                           wreg	equ	0xFE8
 10401                           postdec1	equ	0xFE5
 10402                           fsr1h	equ	0xFE2
 10403                           fsr1l	equ	0xFE1
 10404                           indf2	equ	0xFDF
 10405                           postinc2	equ	0xFDE
 10406                           postdec2	equ	0xFDD
 10407                           fsr2h	equ	0xFDA
 10408                           fsr2l	equ	0xFD9
 10409                           status	equ	0xFD8
 10410                           
 10411 ;; *************** function _strcat *****************
 10412 ;; Defined at:
 10413 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;  to              2    0[COMRAM] PTR unsigned char 
 10416 ;;		 -> current_set(5), 
 10417 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10418 ;;		 -> temp_set(5), 
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;  cp              2    4[COMRAM] PTR unsigned char 
 10421 ;;		 -> current_set(5), 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  2    0[COMRAM] PTR unsigned char 
 10424 ;; Registers used:
 10425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10434 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10435 ;;Total ram usage:        6 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; This function calls:
 10438 ;;		Nothing
 10439 ;; This function is called by:
 10440 ;;		_interruptHandler
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           	psect	text40
 10445  0033E4                     __ptext40:
 10446                           	opt stack 0
 10447  0033E4                     _strcat:
 10448                           	opt stack 26
 10449                           
 10450                           ;incstack = 0
 10451  0033E4  C001  F005         	movff	strcat@to,strcat@cp
 10452  0033E8  C002  F006         	movff	strcat@to+1,strcat@cp+1
 10453  0033EC  D002               	goto	i2l1390
 10454  0033EE  4A05               	infsnz	strcat@cp,f,c
 10455  0033F0  2A06               	incf	strcat@cp+1,f,c
 10456  0033F2                     i2l1390:
 10457  0033F2  C005  FFD9         	movff	strcat@cp,fsr2l
 10458  0033F6  C006  FFDA         	movff	strcat@cp+1,fsr2h
 10459  0033FA  50DF               	movf	indf2,w,c
 10460  0033FC  B4D8               	btfsc	status,2,c
 10461  0033FE  D005               	goto	i2l1393
 10462  003400  D7F6               	goto	i2l1391
 10463  003402  4A05               	infsnz	strcat@cp,f,c
 10464  003404  2A06               	incf	strcat@cp+1,f,c
 10465  003406  4A03               	infsnz	strcat@from,f,c
 10466  003408  2A04               	incf	strcat@from+1,f,c
 10467  00340A                     i2l1393:
 10468  00340A  C003  FFD9         	movff	strcat@from,fsr2l
 10469  00340E  C004  FFDA         	movff	strcat@from+1,fsr2h
 10470  003412  C005  FFE1         	movff	strcat@cp,fsr1l
 10471  003416  C006  FFE2         	movff	strcat@cp+1,fsr1h
 10472  00341A  CFDF FFE7          	movff	indf2,indf1
 10473  00341E  50E7               	movf	indf1,w,c
 10474  003420  B4D8               	btfsc	status,2,c
 10475  003422  0012               	return	
 10476  003424  D7EE               	goto	i2l1394
 10477  003426                     __end_of_strcat:
 10478                           	opt stack 0
 10479                           pclatu	equ	0xFFB
 10480                           pclath	equ	0xFFA
 10481                           tblptru	equ	0xFF8
 10482                           tblptrh	equ	0xFF7
 10483                           tblptrl	equ	0xFF6
 10484                           tablat	equ	0xFF5
 10485                           prodh	equ	0xFF4
 10486                           prodl	equ	0xFF3
 10487                           intcon	equ	0xFF2
 10488                           intcon3	equ	0xFF0
 10489                           indf0	equ	0xFEF
 10490                           postinc0	equ	0xFEE
 10491                           fsr0h	equ	0xFEA
 10492                           fsr0l	equ	0xFE9
 10493                           wreg	equ	0xFE8
 10494                           indf1	equ	0xFE7
 10495                           postdec1	equ	0xFE5
 10496                           fsr1h	equ	0xFE2
 10497                           fsr1l	equ	0xFE1
 10498                           indf2	equ	0xFDF
 10499                           postinc2	equ	0xFDE
 10500                           postdec2	equ	0xFDD
 10501                           fsr2h	equ	0xFDA
 10502                           fsr2l	equ	0xFD9
 10503                           status	equ	0xFD8
 10504                           
 10505 ;; *************** function _is_valid *****************
 10506 ;; Defined at:
 10507 ;;		line 12 in file "keypad.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;		None
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;		None
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  2  123[None  ] int 
 10514 ;; Registers used:
 10515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10523 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;Total ram usage:        2 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    1
 10528 ;; This function calls:
 10529 ;;		_strcmp
 10530 ;;		i2___wmul
 10531 ;; This function is called by:
 10532 ;;		_interruptHandler
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536                           	psect	text41
 10537  000012                     __ptext41:
 10538                           	opt stack 0
 10539  000012                     _is_valid:
 10540                           	opt stack 25
 10541                           
 10542                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 10543                           
 10544                           ;incstack = 0
 10545  000012  0E6B               	movlw	low _current_set2
 10546  000014  6E01               	movwf	strcmp@s1,c
 10547  000016  0E00               	movlw	high _current_set2
 10548  000018  6E02               	movwf	strcmp@s1+1,c
 10549  00001A  0EFC               	movlw	low STR_19
 10550  00001C  6E03               	movwf	strcmp@s2,c
 10551  00001E  0EFF               	movlw	high STR_19
 10552  000020  6E04               	movwf	strcmp@s2+1,c
 10553  000022  EC67  F019         	call	_strcmp	;wreg free
 10554  000026  5001               	movf	?_strcmp,w,c
 10555  000028  1002               	iorwf	?_strcmp+1,w,c
 10556  00002A  A4D8               	btfss	status,2,c
 10557  00002C  D023               	goto	i2l654
 10558                           
 10559                           ;keypad.c: 17: B=1*number;
 10560  00002E  C070  F05F         	movff	_number,_B
 10561  000032  C071  F060         	movff	_number+1,_B+1
 10562                           
 10563                           ;keypad.c: 18: total_number = 1*number;
 10564  000036  C070  F09C         	movff	_number,_total_number
 10565  00003A  C071  F09D         	movff	_number+1,_total_number+1
 10566                           
 10567                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 10568  00003E  90D8               	bcf	status,0,c
 10569  000040  3461               	rlcf	_counter_step,w,c
 10570  000042  6ED9               	movwf	fsr2l,c
 10571  000044  3462               	rlcf	_counter_step+1,w,c
 10572  000046  6EDA               	movwf	fsr2h,c
 10573  000048  0E42               	movlw	low _compartment_number
 10574  00004A  26D9               	addwf	fsr2l,f,c
 10575  00004C  0E00               	movlw	high _compartment_number
 10576  00004E  22DA               	addwfc	fsr2h,f,c
 10577  000050  CFDE F007          	movff	postinc2,??_is_valid
 10578  000054  CFDD F008          	movff	postdec2,??_is_valid+1
 10579  000058  90D8               	bcf	status,0,c
 10580  00005A  3607               	rlcf	??_is_valid,f,c
 10581  00005C  3608               	rlcf	??_is_valid+1,f,c
 10582  00005E  0EB8               	movlw	low _B_array
 10583  000060  2407               	addwf	??_is_valid,w,c
 10584  000062  6ED9               	movwf	fsr2l,c
 10585  000064  0E01               	movlw	high _B_array
 10586  000066  2008               	addwfc	??_is_valid+1,w,c
 10587  000068  6EDA               	movwf	fsr2h,c
 10588  00006A  C05F  FFDE         	movff	_B,postinc2
 10589  00006E  C060  FFDD         	movff	_B+1,postdec2
 10590                           
 10591                           ;keypad.c: 22: }
 10592  000072  0012               	return	
 10593  000074                     i2l654:
 10594                           
 10595                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 10596  000074  0E6B               	movlw	low _current_set2
 10597  000076  6E01               	movwf	strcmp@s1,c
 10598  000078  0E00               	movlw	high _current_set2
 10599  00007A  6E02               	movwf	strcmp@s1+1,c
 10600  00007C  0EEB               	movlw	low (STR_41+2)
 10601  00007E  6E03               	movwf	strcmp@s2,c
 10602  000080  0EFF               	movlw	high (STR_41+2)
 10603  000082  6E04               	movwf	strcmp@s2+1,c
 10604  000084  EC67  F019         	call	_strcmp	;wreg free
 10605  000088  5001               	movf	?_strcmp,w,c
 10606  00008A  1002               	iorwf	?_strcmp+1,w,c
 10607  00008C  A4D8               	btfss	status,2,c
 10608  00008E  D023               	goto	i2l656
 10609                           
 10610                           ;keypad.c: 25: N=1*number;
 10611  000090  C070  F05D         	movff	_number,_N
 10612  000094  C071  F05E         	movff	_number+1,_N+1
 10613                           
 10614                           ;keypad.c: 26: total_number = 1*number;
 10615  000098  C070  F09C         	movff	_number,_total_number
 10616  00009C  C071  F09D         	movff	_number+1,_total_number+1
 10617                           
 10618                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 10619  0000A0  90D8               	bcf	status,0,c
 10620  0000A2  3461               	rlcf	_counter_step,w,c
 10621  0000A4  6ED9               	movwf	fsr2l,c
 10622  0000A6  3462               	rlcf	_counter_step+1,w,c
 10623  0000A8  6EDA               	movwf	fsr2h,c
 10624  0000AA  0E42               	movlw	low _compartment_number
 10625  0000AC  26D9               	addwf	fsr2l,f,c
 10626  0000AE  0E00               	movlw	high _compartment_number
 10627  0000B0  22DA               	addwfc	fsr2h,f,c
 10628  0000B2  CFDE F007          	movff	postinc2,??_is_valid
 10629  0000B6  CFDD F008          	movff	postdec2,??_is_valid+1
 10630  0000BA  90D8               	bcf	status,0,c
 10631  0000BC  3607               	rlcf	??_is_valid,f,c
 10632  0000BE  3608               	rlcf	??_is_valid+1,f,c
 10633  0000C0  0E98               	movlw	low _N_array
 10634  0000C2  2407               	addwf	??_is_valid,w,c
 10635  0000C4  6ED9               	movwf	fsr2l,c
 10636  0000C6  0E01               	movlw	high _N_array
 10637  0000C8  2008               	addwfc	??_is_valid+1,w,c
 10638  0000CA  6EDA               	movwf	fsr2h,c
 10639  0000CC  C05D  FFDE         	movff	_N,postinc2
 10640  0000D0  C05E  FFDD         	movff	_N+1,postdec2
 10641                           
 10642                           ;keypad.c: 28: }
 10643  0000D4  0012               	return	
 10644  0000D6                     i2l656:
 10645                           
 10646                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 10647  0000D6  0E6B               	movlw	low _current_set2
 10648  0000D8  6E01               	movwf	strcmp@s1,c
 10649  0000DA  0E00               	movlw	high _current_set2
 10650  0000DC  6E02               	movwf	strcmp@s1+1,c
 10651  0000DE  0EEF               	movlw	low (STR_42+2)
 10652  0000E0  6E03               	movwf	strcmp@s2,c
 10653  0000E2  0EFF               	movlw	high (STR_42+2)
 10654  0000E4  6E04               	movwf	strcmp@s2+1,c
 10655  0000E6  EC67  F019         	call	_strcmp	;wreg free
 10656  0000EA  5001               	movf	?_strcmp,w,c
 10657  0000EC  1002               	iorwf	?_strcmp+1,w,c
 10658  0000EE  A4D8               	btfss	status,2,c
 10659  0000F0  D023               	goto	i2l658
 10660                           
 10661                           ;keypad.c: 30: S=1*number;
 10662  0000F2  C070  F05B         	movff	_number,_S
 10663  0000F6  C071  F05C         	movff	_number+1,_S+1
 10664                           
 10665                           ;keypad.c: 31: total_number = 1*number;
 10666  0000FA  C070  F09C         	movff	_number,_total_number
 10667  0000FE  C071  F09D         	movff	_number+1,_total_number+1
 10668                           
 10669                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 10670  000102  90D8               	bcf	status,0,c
 10671  000104  3461               	rlcf	_counter_step,w,c
 10672  000106  6ED9               	movwf	fsr2l,c
 10673  000108  3462               	rlcf	_counter_step+1,w,c
 10674  00010A  6EDA               	movwf	fsr2h,c
 10675  00010C  0E42               	movlw	low _compartment_number
 10676  00010E  26D9               	addwf	fsr2l,f,c
 10677  000110  0E00               	movlw	high _compartment_number
 10678  000112  22DA               	addwfc	fsr2h,f,c
 10679  000114  CFDE F007          	movff	postinc2,??_is_valid
 10680  000118  CFDD F008          	movff	postdec2,??_is_valid+1
 10681  00011C  90D8               	bcf	status,0,c
 10682  00011E  3607               	rlcf	??_is_valid,f,c
 10683  000120  3608               	rlcf	??_is_valid+1,f,c
 10684  000122  0EA8               	movlw	low _S_array
 10685  000124  2407               	addwf	??_is_valid,w,c
 10686  000126  6ED9               	movwf	fsr2l,c
 10687  000128  0E01               	movlw	high _S_array
 10688  00012A  2008               	addwfc	??_is_valid+1,w,c
 10689  00012C  6EDA               	movwf	fsr2h,c
 10690  00012E  C05B  FFDE         	movff	_S,postinc2
 10691  000132  C05C  FFDD         	movff	_S+1,postdec2
 10692                           
 10693                           ;keypad.c: 33: }
 10694  000136  0012               	return	
 10695  000138                     i2l658:
 10696                           
 10697                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 10698  000138  0E6B               	movlw	low _current_set2
 10699  00013A  6E01               	movwf	strcmp@s1,c
 10700  00013C  0E00               	movlw	high _current_set2
 10701  00013E  6E02               	movwf	strcmp@s1+1,c
 10702  000140  0EF3               	movlw	low (STR_43+2)
 10703  000142  6E03               	movwf	strcmp@s2,c
 10704  000144  0EFF               	movlw	high (STR_43+2)
 10705  000146  6E04               	movwf	strcmp@s2+1,c
 10706  000148  EC67  F019         	call	_strcmp	;wreg free
 10707  00014C  5001               	movf	?_strcmp,w,c
 10708  00014E  1002               	iorwf	?_strcmp+1,w,c
 10709  000150  A4D8               	btfss	status,2,c
 10710  000152  D023               	goto	i2l660
 10711                           
 10712                           ;keypad.c: 35: W=1*number;
 10713  000154  C070  F059         	movff	_number,_W
 10714  000158  C071  F05A         	movff	_number+1,_W+1
 10715                           
 10716                           ;keypad.c: 36: total_number = 1*number;
 10717  00015C  C070  F09C         	movff	_number,_total_number
 10718  000160  C071  F09D         	movff	_number+1,_total_number+1
 10719                           
 10720                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 10721  000164  90D8               	bcf	status,0,c
 10722  000166  3461               	rlcf	_counter_step,w,c
 10723  000168  6ED9               	movwf	fsr2l,c
 10724  00016A  3462               	rlcf	_counter_step+1,w,c
 10725  00016C  6EDA               	movwf	fsr2h,c
 10726  00016E  0E42               	movlw	low _compartment_number
 10727  000170  26D9               	addwf	fsr2l,f,c
 10728  000172  0E00               	movlw	high _compartment_number
 10729  000174  22DA               	addwfc	fsr2h,f,c
 10730  000176  CFDE F007          	movff	postinc2,??_is_valid
 10731  00017A  CFDD F008          	movff	postdec2,??_is_valid+1
 10732  00017E  90D8               	bcf	status,0,c
 10733  000180  3607               	rlcf	??_is_valid,f,c
 10734  000182  3608               	rlcf	??_is_valid+1,f,c
 10735  000184  0E00               	movlw	low _W_array
 10736  000186  2407               	addwf	??_is_valid,w,c
 10737  000188  6ED9               	movwf	fsr2l,c
 10738  00018A  0E01               	movlw	high _W_array
 10739  00018C  2008               	addwfc	??_is_valid+1,w,c
 10740  00018E  6EDA               	movwf	fsr2h,c
 10741  000190  C059  FFDE         	movff	_W,postinc2
 10742  000194  C05A  FFDD         	movff	_W+1,postdec2
 10743                           
 10744                           ;keypad.c: 38: }
 10745  000198  0012               	return	
 10746  00019A                     i2l660:
 10747                           
 10748                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 10749  00019A  0E6B               	movlw	low _current_set2
 10750  00019C  6E01               	movwf	strcmp@s1,c
 10751  00019E  0E00               	movlw	high _current_set2
 10752  0001A0  6E02               	movwf	strcmp@s1+1,c
 10753  0001A2  0EEA               	movlw	low (STR_41+1)
 10754  0001A4  6E03               	movwf	strcmp@s2,c
 10755  0001A6  0EFF               	movlw	high (STR_41+1)
 10756  0001A8  6E04               	movwf	strcmp@s2+1,c
 10757  0001AA  EC67  F019         	call	_strcmp	;wreg free
 10758  0001AE  5001               	movf	?_strcmp,w,c
 10759  0001B0  1002               	iorwf	?_strcmp+1,w,c
 10760  0001B2  A4D8               	btfss	status,2,c
 10761  0001B4  D043               	goto	i2l662
 10762                           
 10763                           ;keypad.c: 40: B = 1*number;
 10764  0001B6  C070  F05F         	movff	_number,_B
 10765  0001BA  C071  F060         	movff	_number+1,_B+1
 10766                           
 10767                           ;keypad.c: 42: N = 1*number;
 10768  0001BE  C070  F05D         	movff	_number,_N
 10769  0001C2  C071  F05E         	movff	_number+1,_N+1
 10770                           
 10771                           ;keypad.c: 43: total_number = 2*number;
 10772  0001C6  90D8               	bcf	status,0,c
 10773  0001C8  3470               	rlcf	_number,w,c
 10774  0001CA  0100               	movlb	0	; () banked
 10775  0001CC  6F9C               	movwf	_total_number& (0+255),b
 10776  0001CE  3471               	rlcf	_number+1,w,c
 10777  0001D0  6F9D               	movwf	(_total_number+1)& (0+255),b
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 10781  0001D2  90D8               	bcf	status,0,c
 10782  0001D4  3461               	rlcf	_counter_step,w,c
 10783  0001D6  6ED9               	movwf	fsr2l,c
 10784  0001D8  3462               	rlcf	_counter_step+1,w,c
 10785  0001DA  6EDA               	movwf	fsr2h,c
 10786  0001DC  0E42               	movlw	low _compartment_number
 10787  0001DE  26D9               	addwf	fsr2l,f,c
 10788  0001E0  0E00               	movlw	high _compartment_number
 10789  0001E2  22DA               	addwfc	fsr2h,f,c
 10790  0001E4  CFDE F007          	movff	postinc2,??_is_valid
 10791  0001E8  CFDD F008          	movff	postdec2,??_is_valid+1
 10792  0001EC  90D8               	bcf	status,0,c
 10793  0001EE  3607               	rlcf	??_is_valid,f,c
 10794  0001F0  3608               	rlcf	??_is_valid+1,f,c
 10795  0001F2  0EB8               	movlw	low _B_array
 10796  0001F4  2407               	addwf	??_is_valid,w,c
 10797  0001F6  6ED9               	movwf	fsr2l,c
 10798  0001F8  0E01               	movlw	high _B_array
 10799  0001FA  2008               	addwfc	??_is_valid+1,w,c
 10800  0001FC  6EDA               	movwf	fsr2h,c
 10801  0001FE  C05F  FFDE         	movff	_B,postinc2
 10802  000202  C060  FFDD         	movff	_B+1,postdec2
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 10806  000206  90D8               	bcf	status,0,c
 10807  000208  3461               	rlcf	_counter_step,w,c
 10808  00020A  6ED9               	movwf	fsr2l,c
 10809  00020C  3462               	rlcf	_counter_step+1,w,c
 10810  00020E  6EDA               	movwf	fsr2h,c
 10811  000210  0E42               	movlw	low _compartment_number
 10812  000212  26D9               	addwf	fsr2l,f,c
 10813  000214  0E00               	movlw	high _compartment_number
 10814  000216  22DA               	addwfc	fsr2h,f,c
 10815  000218  CFDE F007          	movff	postinc2,??_is_valid
 10816  00021C  CFDD F008          	movff	postdec2,??_is_valid+1
 10817  000220  90D8               	bcf	status,0,c
 10818  000222  3607               	rlcf	??_is_valid,f,c
 10819  000224  3608               	rlcf	??_is_valid+1,f,c
 10820  000226  0E98               	movlw	low _N_array
 10821  000228  2407               	addwf	??_is_valid,w,c
 10822  00022A  6ED9               	movwf	fsr2l,c
 10823  00022C  0E01               	movlw	high _N_array
 10824  00022E  2008               	addwfc	??_is_valid+1,w,c
 10825  000230  6EDA               	movwf	fsr2h,c
 10826  000232  C05D  FFDE         	movff	_N,postinc2
 10827  000236  C05E  FFDD         	movff	_N+1,postdec2
 10828                           
 10829                           ;keypad.c: 47: }
 10830  00023A  0012               	return	
 10831  00023C                     i2l662:
 10832                           
 10833                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 10834                           
 10835                           ; BSR set to: 0
 10836  00023C  0E6B               	movlw	low _current_set2
 10837  00023E  6E01               	movwf	strcmp@s1,c
 10838  000240  0E00               	movlw	high _current_set2
 10839  000242  6E02               	movwf	strcmp@s1+1,c
 10840  000244  0EEE               	movlw	low (STR_42+1)
 10841  000246  6E03               	movwf	strcmp@s2,c
 10842  000248  0EFF               	movlw	high (STR_42+1)
 10843  00024A  6E04               	movwf	strcmp@s2+1,c
 10844  00024C  EC67  F019         	call	_strcmp	;wreg free
 10845  000250  5001               	movf	?_strcmp,w,c
 10846  000252  1002               	iorwf	?_strcmp+1,w,c
 10847  000254  A4D8               	btfss	status,2,c
 10848  000256  D043               	goto	i2l664
 10849                           
 10850                           ;keypad.c: 49: B = 1*number;
 10851  000258  C070  F05F         	movff	_number,_B
 10852  00025C  C071  F060         	movff	_number+1,_B+1
 10853                           
 10854                           ;keypad.c: 51: S = 1*number;
 10855  000260  C070  F05B         	movff	_number,_S
 10856  000264  C071  F05C         	movff	_number+1,_S+1
 10857                           
 10858                           ;keypad.c: 52: total_number = 2*number;
 10859  000268  90D8               	bcf	status,0,c
 10860  00026A  3470               	rlcf	_number,w,c
 10861  00026C  0100               	movlb	0	; () banked
 10862  00026E  6F9C               	movwf	_total_number& (0+255),b
 10863  000270  3471               	rlcf	_number+1,w,c
 10864  000272  6F9D               	movwf	(_total_number+1)& (0+255),b
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 10868  000274  90D8               	bcf	status,0,c
 10869  000276  3461               	rlcf	_counter_step,w,c
 10870  000278  6ED9               	movwf	fsr2l,c
 10871  00027A  3462               	rlcf	_counter_step+1,w,c
 10872  00027C  6EDA               	movwf	fsr2h,c
 10873  00027E  0E42               	movlw	low _compartment_number
 10874  000280  26D9               	addwf	fsr2l,f,c
 10875  000282  0E00               	movlw	high _compartment_number
 10876  000284  22DA               	addwfc	fsr2h,f,c
 10877  000286  CFDE F007          	movff	postinc2,??_is_valid
 10878  00028A  CFDD F008          	movff	postdec2,??_is_valid+1
 10879  00028E  90D8               	bcf	status,0,c
 10880  000290  3607               	rlcf	??_is_valid,f,c
 10881  000292  3608               	rlcf	??_is_valid+1,f,c
 10882  000294  0EB8               	movlw	low _B_array
 10883  000296  2407               	addwf	??_is_valid,w,c
 10884  000298  6ED9               	movwf	fsr2l,c
 10885  00029A  0E01               	movlw	high _B_array
 10886  00029C  2008               	addwfc	??_is_valid+1,w,c
 10887  00029E  6EDA               	movwf	fsr2h,c
 10888  0002A0  C05F  FFDE         	movff	_B,postinc2
 10889  0002A4  C060  FFDD         	movff	_B+1,postdec2
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 10893  0002A8  90D8               	bcf	status,0,c
 10894  0002AA  3461               	rlcf	_counter_step,w,c
 10895  0002AC  6ED9               	movwf	fsr2l,c
 10896  0002AE  3462               	rlcf	_counter_step+1,w,c
 10897  0002B0  6EDA               	movwf	fsr2h,c
 10898  0002B2  0E42               	movlw	low _compartment_number
 10899  0002B4  26D9               	addwf	fsr2l,f,c
 10900  0002B6  0E00               	movlw	high _compartment_number
 10901  0002B8  22DA               	addwfc	fsr2h,f,c
 10902  0002BA  CFDE F007          	movff	postinc2,??_is_valid
 10903  0002BE  CFDD F008          	movff	postdec2,??_is_valid+1
 10904  0002C2  90D8               	bcf	status,0,c
 10905  0002C4  3607               	rlcf	??_is_valid,f,c
 10906  0002C6  3608               	rlcf	??_is_valid+1,f,c
 10907  0002C8  0EA8               	movlw	low _S_array
 10908  0002CA  2407               	addwf	??_is_valid,w,c
 10909  0002CC  6ED9               	movwf	fsr2l,c
 10910  0002CE  0E01               	movlw	high _S_array
 10911  0002D0  2008               	addwfc	??_is_valid+1,w,c
 10912  0002D2  6EDA               	movwf	fsr2h,c
 10913  0002D4  C05B  FFDE         	movff	_S,postinc2
 10914  0002D8  C05C  FFDD         	movff	_S+1,postdec2
 10915                           
 10916                           ;keypad.c: 57: }
 10917  0002DC  0012               	return	
 10918  0002DE                     i2l664:
 10919                           
 10920                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 10921                           
 10922                           ; BSR set to: 0
 10923  0002DE  0E6B               	movlw	low _current_set2
 10924  0002E0  6E01               	movwf	strcmp@s1,c
 10925  0002E2  0E00               	movlw	high _current_set2
 10926  0002E4  6E02               	movwf	strcmp@s1+1,c
 10927  0002E6  0EF2               	movlw	low (STR_43+1)
 10928  0002E8  6E03               	movwf	strcmp@s2,c
 10929  0002EA  0EFF               	movlw	high (STR_43+1)
 10930  0002EC  6E04               	movwf	strcmp@s2+1,c
 10931  0002EE  EC67  F019         	call	_strcmp	;wreg free
 10932  0002F2  5001               	movf	?_strcmp,w,c
 10933  0002F4  1002               	iorwf	?_strcmp+1,w,c
 10934  0002F6  A4D8               	btfss	status,2,c
 10935  0002F8  D043               	goto	i2l666
 10936                           
 10937                           ;keypad.c: 60: B = 1*number;
 10938  0002FA  C070  F05F         	movff	_number,_B
 10939  0002FE  C071  F060         	movff	_number+1,_B+1
 10940                           
 10941                           ;keypad.c: 62: W = 1*number;
 10942  000302  C070  F059         	movff	_number,_W
 10943  000306  C071  F05A         	movff	_number+1,_W+1
 10944                           
 10945                           ;keypad.c: 63: total_number = 2*number;
 10946  00030A  90D8               	bcf	status,0,c
 10947  00030C  3470               	rlcf	_number,w,c
 10948  00030E  0100               	movlb	0	; () banked
 10949  000310  6F9C               	movwf	_total_number& (0+255),b
 10950  000312  3471               	rlcf	_number+1,w,c
 10951  000314  6F9D               	movwf	(_total_number+1)& (0+255),b
 10952                           
 10953                           ; BSR set to: 0
 10954                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 10955  000316  90D8               	bcf	status,0,c
 10956  000318  3461               	rlcf	_counter_step,w,c
 10957  00031A  6ED9               	movwf	fsr2l,c
 10958  00031C  3462               	rlcf	_counter_step+1,w,c
 10959  00031E  6EDA               	movwf	fsr2h,c
 10960  000320  0E42               	movlw	low _compartment_number
 10961  000322  26D9               	addwf	fsr2l,f,c
 10962  000324  0E00               	movlw	high _compartment_number
 10963  000326  22DA               	addwfc	fsr2h,f,c
 10964  000328  CFDE F007          	movff	postinc2,??_is_valid
 10965  00032C  CFDD F008          	movff	postdec2,??_is_valid+1
 10966  000330  90D8               	bcf	status,0,c
 10967  000332  3607               	rlcf	??_is_valid,f,c
 10968  000334  3608               	rlcf	??_is_valid+1,f,c
 10969  000336  0EB8               	movlw	low _B_array
 10970  000338  2407               	addwf	??_is_valid,w,c
 10971  00033A  6ED9               	movwf	fsr2l,c
 10972  00033C  0E01               	movlw	high _B_array
 10973  00033E  2008               	addwfc	??_is_valid+1,w,c
 10974  000340  6EDA               	movwf	fsr2h,c
 10975  000342  C05F  FFDE         	movff	_B,postinc2
 10976  000346  C060  FFDD         	movff	_B+1,postdec2
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 10980  00034A  90D8               	bcf	status,0,c
 10981  00034C  3461               	rlcf	_counter_step,w,c
 10982  00034E  6ED9               	movwf	fsr2l,c
 10983  000350  3462               	rlcf	_counter_step+1,w,c
 10984  000352  6EDA               	movwf	fsr2h,c
 10985  000354  0E42               	movlw	low _compartment_number
 10986  000356  26D9               	addwf	fsr2l,f,c
 10987  000358  0E00               	movlw	high _compartment_number
 10988  00035A  22DA               	addwfc	fsr2h,f,c
 10989  00035C  CFDE F007          	movff	postinc2,??_is_valid
 10990  000360  CFDD F008          	movff	postdec2,??_is_valid+1
 10991  000364  90D8               	bcf	status,0,c
 10992  000366  3607               	rlcf	??_is_valid,f,c
 10993  000368  3608               	rlcf	??_is_valid+1,f,c
 10994  00036A  0E00               	movlw	low _W_array
 10995  00036C  2407               	addwf	??_is_valid,w,c
 10996  00036E  6ED9               	movwf	fsr2l,c
 10997  000370  0E01               	movlw	high _W_array
 10998  000372  2008               	addwfc	??_is_valid+1,w,c
 10999  000374  6EDA               	movwf	fsr2h,c
 11000  000376  C059  FFDE         	movff	_W,postinc2
 11001  00037A  C05A  FFDD         	movff	_W+1,postdec2
 11002                           
 11003                           ;keypad.c: 67: }
 11004  00037E  0012               	return	
 11005  000380                     i2l666:
 11006                           
 11007                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 11008                           
 11009                           ; BSR set to: 0
 11010  000380  0E6B               	movlw	low _current_set2
 11011  000382  6E01               	movwf	strcmp@s1,c
 11012  000384  0E00               	movlw	high _current_set2
 11013  000386  6E02               	movwf	strcmp@s1+1,c
 11014  000388  0EE9               	movlw	low STR_41
 11015  00038A  6E03               	movwf	strcmp@s2,c
 11016  00038C  0EFF               	movlw	high STR_41
 11017  00038E  6E04               	movwf	strcmp@s2+1,c
 11018  000390  EC67  F019         	call	_strcmp	;wreg free
 11019  000394  5001               	movf	?_strcmp,w,c
 11020  000396  1002               	iorwf	?_strcmp+1,w,c
 11021  000398  A4D8               	btfss	status,2,c
 11022  00039A  D04C               	goto	i2l668
 11023                           
 11024                           ;keypad.c: 69: B = 2*number;
 11025  00039C  90D8               	bcf	status,0,c
 11026  00039E  3470               	rlcf	_number,w,c
 11027  0003A0  6E5F               	movwf	_B,c
 11028  0003A2  3471               	rlcf	_number+1,w,c
 11029  0003A4  6E60               	movwf	_B+1,c
 11030                           
 11031                           ;keypad.c: 71: N = 1*number;
 11032  0003A6  C070  F05D         	movff	_number,_N
 11033  0003AA  C071  F05E         	movff	_number+1,_N+1
 11034                           
 11035                           ;keypad.c: 72: total_number = 3*number;
 11036  0003AE  C070  F001         	movff	_number,i2___wmul@multiplier
 11037  0003B2  C071  F002         	movff	_number+1,i2___wmul@multiplier+1
 11038  0003B6  0E00               	movlw	0
 11039  0003B8  6E04               	movwf	i2___wmul@multiplicand+1,c
 11040  0003BA  0E03               	movlw	3
 11041  0003BC  6E03               	movwf	i2___wmul@multiplicand,c
 11042  0003BE  EC6C  F01A         	call	i2___wmul	;wreg free
 11043  0003C2  C001  F09C         	movff	?i2___wmul,_total_number
 11044  0003C6  C002  F09D         	movff	?i2___wmul+1,_total_number+1
 11045                           
 11046                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 11047  0003CA  90D8               	bcf	status,0,c
 11048  0003CC  3461               	rlcf	_counter_step,w,c
 11049  0003CE  6ED9               	movwf	fsr2l,c
 11050  0003D0  3462               	rlcf	_counter_step+1,w,c
 11051  0003D2  6EDA               	movwf	fsr2h,c
 11052  0003D4  0E42               	movlw	low _compartment_number
 11053  0003D6  26D9               	addwf	fsr2l,f,c
 11054  0003D8  0E00               	movlw	high _compartment_number
 11055  0003DA  22DA               	addwfc	fsr2h,f,c
 11056  0003DC  CFDE F007          	movff	postinc2,??_is_valid
 11057  0003E0  CFDD F008          	movff	postdec2,??_is_valid+1
 11058  0003E4  90D8               	bcf	status,0,c
 11059  0003E6  3607               	rlcf	??_is_valid,f,c
 11060  0003E8  3608               	rlcf	??_is_valid+1,f,c
 11061  0003EA  0EB8               	movlw	low _B_array
 11062  0003EC  2407               	addwf	??_is_valid,w,c
 11063  0003EE  6ED9               	movwf	fsr2l,c
 11064  0003F0  0E01               	movlw	high _B_array
 11065  0003F2  2008               	addwfc	??_is_valid+1,w,c
 11066  0003F4  6EDA               	movwf	fsr2h,c
 11067  0003F6  C05F  FFDE         	movff	_B,postinc2
 11068  0003FA  C060  FFDD         	movff	_B+1,postdec2
 11069                           
 11070                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 11071  0003FE  90D8               	bcf	status,0,c
 11072  000400  3461               	rlcf	_counter_step,w,c
 11073  000402  6ED9               	movwf	fsr2l,c
 11074  000404  3462               	rlcf	_counter_step+1,w,c
 11075  000406  6EDA               	movwf	fsr2h,c
 11076  000408  0E42               	movlw	low _compartment_number
 11077  00040A  26D9               	addwf	fsr2l,f,c
 11078  00040C  0E00               	movlw	high _compartment_number
 11079  00040E  22DA               	addwfc	fsr2h,f,c
 11080  000410  CFDE F007          	movff	postinc2,??_is_valid
 11081  000414  CFDD F008          	movff	postdec2,??_is_valid+1
 11082  000418  90D8               	bcf	status,0,c
 11083  00041A  3607               	rlcf	??_is_valid,f,c
 11084  00041C  3608               	rlcf	??_is_valid+1,f,c
 11085  00041E  0E98               	movlw	low _N_array
 11086  000420  2407               	addwf	??_is_valid,w,c
 11087  000422  6ED9               	movwf	fsr2l,c
 11088  000424  0E01               	movlw	high _N_array
 11089  000426  2008               	addwfc	??_is_valid+1,w,c
 11090  000428  6EDA               	movwf	fsr2h,c
 11091  00042A  C05D  FFDE         	movff	_N,postinc2
 11092  00042E  C05E  FFDD         	movff	_N+1,postdec2
 11093                           
 11094                           ;keypad.c: 76: }
 11095  000432  0012               	return	
 11096  000434                     i2l668:
 11097                           
 11098                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 11099  000434  0E6B               	movlw	low _current_set2
 11100  000436  6E01               	movwf	strcmp@s1,c
 11101  000438  0E00               	movlw	high _current_set2
 11102  00043A  6E02               	movwf	strcmp@s1+1,c
 11103  00043C  0EED               	movlw	low STR_42
 11104  00043E  6E03               	movwf	strcmp@s2,c
 11105  000440  0EFF               	movlw	high STR_42
 11106  000442  6E04               	movwf	strcmp@s2+1,c
 11107  000444  EC67  F019         	call	_strcmp	;wreg free
 11108  000448  5001               	movf	?_strcmp,w,c
 11109  00044A  1002               	iorwf	?_strcmp+1,w,c
 11110  00044C  A4D8               	btfss	status,2,c
 11111  00044E  D04C               	goto	i2l670
 11112                           
 11113                           ;keypad.c: 78: B = 2*number;
 11114  000450  90D8               	bcf	status,0,c
 11115  000452  3470               	rlcf	_number,w,c
 11116  000454  6E5F               	movwf	_B,c
 11117  000456  3471               	rlcf	_number+1,w,c
 11118  000458  6E60               	movwf	_B+1,c
 11119                           
 11120                           ;keypad.c: 80: S = 1*number;
 11121  00045A  C070  F05B         	movff	_number,_S
 11122  00045E  C071  F05C         	movff	_number+1,_S+1
 11123                           
 11124                           ;keypad.c: 81: total_number = 3*number;
 11125  000462  C070  F001         	movff	_number,i2___wmul@multiplier
 11126  000466  C071  F002         	movff	_number+1,i2___wmul@multiplier+1
 11127  00046A  0E00               	movlw	0
 11128  00046C  6E04               	movwf	i2___wmul@multiplicand+1,c
 11129  00046E  0E03               	movlw	3
 11130  000470  6E03               	movwf	i2___wmul@multiplicand,c
 11131  000472  EC6C  F01A         	call	i2___wmul	;wreg free
 11132  000476  C001  F09C         	movff	?i2___wmul,_total_number
 11133  00047A  C002  F09D         	movff	?i2___wmul+1,_total_number+1
 11134                           
 11135                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 11136  00047E  90D8               	bcf	status,0,c
 11137  000480  3461               	rlcf	_counter_step,w,c
 11138  000482  6ED9               	movwf	fsr2l,c
 11139  000484  3462               	rlcf	_counter_step+1,w,c
 11140  000486  6EDA               	movwf	fsr2h,c
 11141  000488  0E42               	movlw	low _compartment_number
 11142  00048A  26D9               	addwf	fsr2l,f,c
 11143  00048C  0E00               	movlw	high _compartment_number
 11144  00048E  22DA               	addwfc	fsr2h,f,c
 11145  000490  CFDE F007          	movff	postinc2,??_is_valid
 11146  000494  CFDD F008          	movff	postdec2,??_is_valid+1
 11147  000498  90D8               	bcf	status,0,c
 11148  00049A  3607               	rlcf	??_is_valid,f,c
 11149  00049C  3608               	rlcf	??_is_valid+1,f,c
 11150  00049E  0EB8               	movlw	low _B_array
 11151  0004A0  2407               	addwf	??_is_valid,w,c
 11152  0004A2  6ED9               	movwf	fsr2l,c
 11153  0004A4  0E01               	movlw	high _B_array
 11154  0004A6  2008               	addwfc	??_is_valid+1,w,c
 11155  0004A8  6EDA               	movwf	fsr2h,c
 11156  0004AA  C05F  FFDE         	movff	_B,postinc2
 11157  0004AE  C060  FFDD         	movff	_B+1,postdec2
 11158                           
 11159                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 11160  0004B2  90D8               	bcf	status,0,c
 11161  0004B4  3461               	rlcf	_counter_step,w,c
 11162  0004B6  6ED9               	movwf	fsr2l,c
 11163  0004B8  3462               	rlcf	_counter_step+1,w,c
 11164  0004BA  6EDA               	movwf	fsr2h,c
 11165  0004BC  0E42               	movlw	low _compartment_number
 11166  0004BE  26D9               	addwf	fsr2l,f,c
 11167  0004C0  0E00               	movlw	high _compartment_number
 11168  0004C2  22DA               	addwfc	fsr2h,f,c
 11169  0004C4  CFDE F007          	movff	postinc2,??_is_valid
 11170  0004C8  CFDD F008          	movff	postdec2,??_is_valid+1
 11171  0004CC  90D8               	bcf	status,0,c
 11172  0004CE  3607               	rlcf	??_is_valid,f,c
 11173  0004D0  3608               	rlcf	??_is_valid+1,f,c
 11174  0004D2  0EA8               	movlw	low _S_array
 11175  0004D4  2407               	addwf	??_is_valid,w,c
 11176  0004D6  6ED9               	movwf	fsr2l,c
 11177  0004D8  0E01               	movlw	high _S_array
 11178  0004DA  2008               	addwfc	??_is_valid+1,w,c
 11179  0004DC  6EDA               	movwf	fsr2h,c
 11180  0004DE  C05B  FFDE         	movff	_S,postinc2
 11181  0004E2  C05C  FFDD         	movff	_S+1,postdec2
 11182                           
 11183                           ;keypad.c: 85: }
 11184  0004E6  0012               	return	
 11185  0004E8                     i2l670:
 11186                           
 11187                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 11188  0004E8  0E6B               	movlw	low _current_set2
 11189  0004EA  6E01               	movwf	strcmp@s1,c
 11190  0004EC  0E00               	movlw	high _current_set2
 11191  0004EE  6E02               	movwf	strcmp@s1+1,c
 11192  0004F0  0EF1               	movlw	low STR_43
 11193  0004F2  6E03               	movwf	strcmp@s2,c
 11194  0004F4  0EFF               	movlw	high STR_43
 11195  0004F6  6E04               	movwf	strcmp@s2+1,c
 11196  0004F8  EC67  F019         	call	_strcmp	;wreg free
 11197  0004FC  5001               	movf	?_strcmp,w,c
 11198  0004FE  1002               	iorwf	?_strcmp+1,w,c
 11199  000500  A4D8               	btfss	status,2,c
 11200  000502  D04C               	goto	i2l672
 11201                           
 11202                           ;keypad.c: 87: B = 2*number;
 11203  000504  90D8               	bcf	status,0,c
 11204  000506  3470               	rlcf	_number,w,c
 11205  000508  6E5F               	movwf	_B,c
 11206  00050A  3471               	rlcf	_number+1,w,c
 11207  00050C  6E60               	movwf	_B+1,c
 11208                           
 11209                           ;keypad.c: 89: W = 1*number;
 11210  00050E  C070  F059         	movff	_number,_W
 11211  000512  C071  F05A         	movff	_number+1,_W+1
 11212                           
 11213                           ;keypad.c: 90: total_number = 3*number;
 11214  000516  C070  F001         	movff	_number,i2___wmul@multiplier
 11215  00051A  C071  F002         	movff	_number+1,i2___wmul@multiplier+1
 11216  00051E  0E00               	movlw	0
 11217  000520  6E04               	movwf	i2___wmul@multiplicand+1,c
 11218  000522  0E03               	movlw	3
 11219  000524  6E03               	movwf	i2___wmul@multiplicand,c
 11220  000526  EC6C  F01A         	call	i2___wmul	;wreg free
 11221  00052A  C001  F09C         	movff	?i2___wmul,_total_number
 11222  00052E  C002  F09D         	movff	?i2___wmul+1,_total_number+1
 11223                           
 11224                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 11225  000532  90D8               	bcf	status,0,c
 11226  000534  3461               	rlcf	_counter_step,w,c
 11227  000536  6ED9               	movwf	fsr2l,c
 11228  000538  3462               	rlcf	_counter_step+1,w,c
 11229  00053A  6EDA               	movwf	fsr2h,c
 11230  00053C  0E42               	movlw	low _compartment_number
 11231  00053E  26D9               	addwf	fsr2l,f,c
 11232  000540  0E00               	movlw	high _compartment_number
 11233  000542  22DA               	addwfc	fsr2h,f,c
 11234  000544  CFDE F007          	movff	postinc2,??_is_valid
 11235  000548  CFDD F008          	movff	postdec2,??_is_valid+1
 11236  00054C  90D8               	bcf	status,0,c
 11237  00054E  3607               	rlcf	??_is_valid,f,c
 11238  000550  3608               	rlcf	??_is_valid+1,f,c
 11239  000552  0EB8               	movlw	low _B_array
 11240  000554  2407               	addwf	??_is_valid,w,c
 11241  000556  6ED9               	movwf	fsr2l,c
 11242  000558  0E01               	movlw	high _B_array
 11243  00055A  2008               	addwfc	??_is_valid+1,w,c
 11244  00055C  6EDA               	movwf	fsr2h,c
 11245  00055E  C05F  FFDE         	movff	_B,postinc2
 11246  000562  C060  FFDD         	movff	_B+1,postdec2
 11247                           
 11248                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 11249  000566  90D8               	bcf	status,0,c
 11250  000568  3461               	rlcf	_counter_step,w,c
 11251  00056A  6ED9               	movwf	fsr2l,c
 11252  00056C  3462               	rlcf	_counter_step+1,w,c
 11253  00056E  6EDA               	movwf	fsr2h,c
 11254  000570  0E42               	movlw	low _compartment_number
 11255  000572  26D9               	addwf	fsr2l,f,c
 11256  000574  0E00               	movlw	high _compartment_number
 11257  000576  22DA               	addwfc	fsr2h,f,c
 11258  000578  CFDE F007          	movff	postinc2,??_is_valid
 11259  00057C  CFDD F008          	movff	postdec2,??_is_valid+1
 11260  000580  90D8               	bcf	status,0,c
 11261  000582  3607               	rlcf	??_is_valid,f,c
 11262  000584  3608               	rlcf	??_is_valid+1,f,c
 11263  000586  0E00               	movlw	low _W_array
 11264  000588  2407               	addwf	??_is_valid,w,c
 11265  00058A  6ED9               	movwf	fsr2l,c
 11266  00058C  0E01               	movlw	high _W_array
 11267  00058E  2008               	addwfc	??_is_valid+1,w,c
 11268  000590  6EDA               	movwf	fsr2h,c
 11269  000592  C059  FFDE         	movff	_W,postinc2
 11270  000596  C05A  FFDD         	movff	_W+1,postdec2
 11271                           
 11272                           ;keypad.c: 94: }
 11273  00059A  0012               	return	
 11274  00059C                     i2l672:
 11275                           
 11276                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 11277  00059C  0E6B               	movlw	low _current_set2
 11278  00059E  6E01               	movwf	strcmp@s1,c
 11279  0005A0  0E00               	movlw	high _current_set2
 11280  0005A2  6E02               	movwf	strcmp@s1+1,c
 11281  0005A4  0ECC               	movlw	low (STR_50+1)
 11282  0005A6  6E03               	movwf	strcmp@s2,c
 11283  0005A8  0EFF               	movlw	high (STR_50+1)
 11284  0005AA  6E04               	movwf	strcmp@s2+1,c
 11285  0005AC  EC67  F019         	call	_strcmp	;wreg free
 11286  0005B0  5001               	movf	?_strcmp,w,c
 11287  0005B2  1002               	iorwf	?_strcmp+1,w,c
 11288  0005B4  A4D8               	btfss	status,2,c
 11289  0005B6  D069               	goto	i2l674
 11290                           
 11291                           ;keypad.c: 96: B = 1*number;
 11292  0005B8  C070  F05F         	movff	_number,_B
 11293  0005BC  C071  F060         	movff	_number+1,_B+1
 11294                           
 11295                           ;keypad.c: 97: W = 1*number;
 11296  0005C0  C070  F059         	movff	_number,_W
 11297  0005C4  C071  F05A         	movff	_number+1,_W+1
 11298                           
 11299                           ;keypad.c: 98: N = 1*number;
 11300  0005C8  C070  F05D         	movff	_number,_N
 11301  0005CC  C071  F05E         	movff	_number+1,_N+1
 11302                           
 11303                           ;keypad.c: 99: total_number = 3*number;
 11304  0005D0  C070  F001         	movff	_number,i2___wmul@multiplier
 11305  0005D4  C071  F002         	movff	_number+1,i2___wmul@multiplier+1
 11306  0005D8  0E00               	movlw	0
 11307  0005DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 11308  0005DC  0E03               	movlw	3
 11309  0005DE  6E03               	movwf	i2___wmul@multiplicand,c
 11310  0005E0  EC6C  F01A         	call	i2___wmul	;wreg free
 11311  0005E4  C001  F09C         	movff	?i2___wmul,_total_number
 11312  0005E8  C002  F09D         	movff	?i2___wmul+1,_total_number+1
 11313                           
 11314                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 11315  0005EC  90D8               	bcf	status,0,c
 11316  0005EE  3461               	rlcf	_counter_step,w,c
 11317  0005F0  6ED9               	movwf	fsr2l,c
 11318  0005F2  3462               	rlcf	_counter_step+1,w,c
 11319  0005F4  6EDA               	movwf	fsr2h,c
 11320  0005F6  0E42               	movlw	low _compartment_number
 11321  0005F8  26D9               	addwf	fsr2l,f,c
 11322  0005FA  0E00               	movlw	high _compartment_number
 11323  0005FC  22DA               	addwfc	fsr2h,f,c
 11324  0005FE  CFDE F007          	movff	postinc2,??_is_valid
 11325  000602  CFDD F008          	movff	postdec2,??_is_valid+1
 11326  000606  90D8               	bcf	status,0,c
 11327  000608  3607               	rlcf	??_is_valid,f,c
 11328  00060A  3608               	rlcf	??_is_valid+1,f,c
 11329  00060C  0EB8               	movlw	low _B_array
 11330  00060E  2407               	addwf	??_is_valid,w,c
 11331  000610  6ED9               	movwf	fsr2l,c
 11332  000612  0E01               	movlw	high _B_array
 11333  000614  2008               	addwfc	??_is_valid+1,w,c
 11334  000616  6EDA               	movwf	fsr2h,c
 11335  000618  C05F  FFDE         	movff	_B,postinc2
 11336  00061C  C060  FFDD         	movff	_B+1,postdec2
 11337                           
 11338                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 11339  000620  90D8               	bcf	status,0,c
 11340  000622  3461               	rlcf	_counter_step,w,c
 11341  000624  6ED9               	movwf	fsr2l,c
 11342  000626  3462               	rlcf	_counter_step+1,w,c
 11343  000628  6EDA               	movwf	fsr2h,c
 11344  00062A  0E42               	movlw	low _compartment_number
 11345  00062C  26D9               	addwf	fsr2l,f,c
 11346  00062E  0E00               	movlw	high _compartment_number
 11347  000630  22DA               	addwfc	fsr2h,f,c
 11348  000632  CFDE F007          	movff	postinc2,??_is_valid
 11349  000636  CFDD F008          	movff	postdec2,??_is_valid+1
 11350  00063A  90D8               	bcf	status,0,c
 11351  00063C  3607               	rlcf	??_is_valid,f,c
 11352  00063E  3608               	rlcf	??_is_valid+1,f,c
 11353  000640  0E00               	movlw	low _W_array
 11354  000642  2407               	addwf	??_is_valid,w,c
 11355  000644  6ED9               	movwf	fsr2l,c
 11356  000646  0E01               	movlw	high _W_array
 11357  000648  2008               	addwfc	??_is_valid+1,w,c
 11358  00064A  6EDA               	movwf	fsr2h,c
 11359  00064C  C059  FFDE         	movff	_W,postinc2
 11360  000650  C05A  FFDD         	movff	_W+1,postdec2
 11361                           
 11362                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 11363  000654  90D8               	bcf	status,0,c
 11364  000656  3461               	rlcf	_counter_step,w,c
 11365  000658  6ED9               	movwf	fsr2l,c
 11366  00065A  3462               	rlcf	_counter_step+1,w,c
 11367  00065C  6EDA               	movwf	fsr2h,c
 11368  00065E  0E42               	movlw	low _compartment_number
 11369  000660  26D9               	addwf	fsr2l,f,c
 11370  000662  0E00               	movlw	high _compartment_number
 11371  000664  22DA               	addwfc	fsr2h,f,c
 11372  000666  CFDE F007          	movff	postinc2,??_is_valid
 11373  00066A  CFDD F008          	movff	postdec2,??_is_valid+1
 11374  00066E  90D8               	bcf	status,0,c
 11375  000670  3607               	rlcf	??_is_valid,f,c
 11376  000672  3608               	rlcf	??_is_valid+1,f,c
 11377  000674  0E98               	movlw	low _N_array
 11378  000676  2407               	addwf	??_is_valid,w,c
 11379  000678  6ED9               	movwf	fsr2l,c
 11380  00067A  0E01               	movlw	high _N_array
 11381  00067C  2008               	addwfc	??_is_valid+1,w,c
 11382  00067E  6EDA               	movwf	fsr2h,c
 11383  000680  C05D  FFDE         	movff	_N,postinc2
 11384  000684  C05E  FFDD         	movff	_N+1,postdec2
 11385                           
 11386                           ;keypad.c: 105: }
 11387  000688  0012               	return	
 11388  00068A                     i2l674:
 11389                           
 11390                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 11391  00068A  0E6B               	movlw	low _current_set2
 11392  00068C  6E01               	movwf	strcmp@s1,c
 11393  00068E  0E00               	movlw	high _current_set2
 11394  000690  6E02               	movwf	strcmp@s1+1,c
 11395  000692  0ED6               	movlw	low (STR_49+1)
 11396  000694  6E03               	movwf	strcmp@s2,c
 11397  000696  0EFF               	movlw	high (STR_49+1)
 11398  000698  6E04               	movwf	strcmp@s2+1,c
 11399  00069A  EC67  F019         	call	_strcmp	;wreg free
 11400  00069E  5001               	movf	?_strcmp,w,c
 11401  0006A0  1002               	iorwf	?_strcmp+1,w,c
 11402  0006A2  A4D8               	btfss	status,2,c
 11403  0006A4  D069               	goto	i2l676
 11404                           
 11405                           ;keypad.c: 107: B = 1*number;
 11406  0006A6  C070  F05F         	movff	_number,_B
 11407  0006AA  C071  F060         	movff	_number+1,_B+1
 11408                           
 11409                           ;keypad.c: 108: S = 1*number;
 11410  0006AE  C070  F05B         	movff	_number,_S
 11411  0006B2  C071  F05C         	movff	_number+1,_S+1
 11412                           
 11413                           ;keypad.c: 109: N = 1*number;
 11414  0006B6  C070  F05D         	movff	_number,_N
 11415  0006BA  C071  F05E         	movff	_number+1,_N+1
 11416                           
 11417                           ;keypad.c: 110: total_number = 3*number;
 11418  0006BE  C070  F001         	movff	_number,i2___wmul@multiplier
 11419  0006C2  C071  F002         	movff	_number+1,i2___wmul@multiplier+1
 11420  0006C6  0E00               	movlw	0
 11421  0006C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 11422  0006CA  0E03               	movlw	3
 11423  0006CC  6E03               	movwf	i2___wmul@multiplicand,c
 11424  0006CE  EC6C  F01A         	call	i2___wmul	;wreg free
 11425  0006D2  C001  F09C         	movff	?i2___wmul,_total_number
 11426  0006D6  C002  F09D         	movff	?i2___wmul+1,_total_number+1
 11427                           
 11428                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 11429  0006DA  90D8               	bcf	status,0,c
 11430  0006DC  3461               	rlcf	_counter_step,w,c
 11431  0006DE  6ED9               	movwf	fsr2l,c
 11432  0006E0  3462               	rlcf	_counter_step+1,w,c
 11433  0006E2  6EDA               	movwf	fsr2h,c
 11434  0006E4  0E42               	movlw	low _compartment_number
 11435  0006E6  26D9               	addwf	fsr2l,f,c
 11436  0006E8  0E00               	movlw	high _compartment_number
 11437  0006EA  22DA               	addwfc	fsr2h,f,c
 11438  0006EC  CFDE F007          	movff	postinc2,??_is_valid
 11439  0006F0  CFDD F008          	movff	postdec2,??_is_valid+1
 11440  0006F4  90D8               	bcf	status,0,c
 11441  0006F6  3607               	rlcf	??_is_valid,f,c
 11442  0006F8  3608               	rlcf	??_is_valid+1,f,c
 11443  0006FA  0EB8               	movlw	low _B_array
 11444  0006FC  2407               	addwf	??_is_valid,w,c
 11445  0006FE  6ED9               	movwf	fsr2l,c
 11446  000700  0E01               	movlw	high _B_array
 11447  000702  2008               	addwfc	??_is_valid+1,w,c
 11448  000704  6EDA               	movwf	fsr2h,c
 11449  000706  C05F  FFDE         	movff	_B,postinc2
 11450  00070A  C060  FFDD         	movff	_B+1,postdec2
 11451                           
 11452                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 11453  00070E  90D8               	bcf	status,0,c
 11454  000710  3461               	rlcf	_counter_step,w,c
 11455  000712  6ED9               	movwf	fsr2l,c
 11456  000714  3462               	rlcf	_counter_step+1,w,c
 11457  000716  6EDA               	movwf	fsr2h,c
 11458  000718  0E42               	movlw	low _compartment_number
 11459  00071A  26D9               	addwf	fsr2l,f,c
 11460  00071C  0E00               	movlw	high _compartment_number
 11461  00071E  22DA               	addwfc	fsr2h,f,c
 11462  000720  CFDE F007          	movff	postinc2,??_is_valid
 11463  000724  CFDD F008          	movff	postdec2,??_is_valid+1
 11464  000728  90D8               	bcf	status,0,c
 11465  00072A  3607               	rlcf	??_is_valid,f,c
 11466  00072C  3608               	rlcf	??_is_valid+1,f,c
 11467  00072E  0EA8               	movlw	low _S_array
 11468  000730  2407               	addwf	??_is_valid,w,c
 11469  000732  6ED9               	movwf	fsr2l,c
 11470  000734  0E01               	movlw	high _S_array
 11471  000736  2008               	addwfc	??_is_valid+1,w,c
 11472  000738  6EDA               	movwf	fsr2h,c
 11473  00073A  C05B  FFDE         	movff	_S,postinc2
 11474  00073E  C05C  FFDD         	movff	_S+1,postdec2
 11475                           
 11476                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
 11477  000742  90D8               	bcf	status,0,c
 11478  000744  3461               	rlcf	_counter_step,w,c
 11479  000746  6ED9               	movwf	fsr2l,c
 11480  000748  3462               	rlcf	_counter_step+1,w,c
 11481  00074A  6EDA               	movwf	fsr2h,c
 11482  00074C  0E42               	movlw	low _compartment_number
 11483  00074E  26D9               	addwf	fsr2l,f,c
 11484  000750  0E00               	movlw	high _compartment_number
 11485  000752  22DA               	addwfc	fsr2h,f,c
 11486  000754  CFDE F007          	movff	postinc2,??_is_valid
 11487  000758  CFDD F008          	movff	postdec2,??_is_valid+1
 11488  00075C  90D8               	bcf	status,0,c
 11489  00075E  3607               	rlcf	??_is_valid,f,c
 11490  000760  3608               	rlcf	??_is_valid+1,f,c
 11491  000762  0E98               	movlw	low _N_array
 11492  000764  2407               	addwf	??_is_valid,w,c
 11493  000766  6ED9               	movwf	fsr2l,c
 11494  000768  0E01               	movlw	high _N_array
 11495  00076A  2008               	addwfc	??_is_valid+1,w,c
 11496  00076C  6EDA               	movwf	fsr2h,c
 11497  00076E  C05D  FFDE         	movff	_N,postinc2
 11498  000772  C05E  FFDD         	movff	_N+1,postdec2
 11499                           
 11500                           ;keypad.c: 116: }
 11501  000776  0012               	return	
 11502  000778                     i2l676:
 11503                           
 11504                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 11505  000778  0E6B               	movlw	low _current_set2
 11506  00077A  6E01               	movwf	strcmp@s1,c
 11507  00077C  0E00               	movlw	high _current_set2
 11508  00077E  6E02               	movwf	strcmp@s1+1,c
 11509  000780  0EF5               	movlw	low STR_46
 11510  000782  6E03               	movwf	strcmp@s2,c
 11511  000784  0EFF               	movlw	high STR_46
 11512  000786  6E04               	movwf	strcmp@s2+1,c
 11513  000788  EC67  F019         	call	_strcmp	;wreg free
 11514  00078C  5001               	movf	?_strcmp,w,c
 11515  00078E  1002               	iorwf	?_strcmp+1,w,c
 11516  000790  A4D8               	btfss	status,2,c
 11517  000792  D04C               	goto	i2l678
 11518                           
 11519                           ;keypad.c: 118: B = 1*number;
 11520  000794  C070  F05F         	movff	_number,_B
 11521  000798  C071  F060         	movff	_number+1,_B+1
 11522                           
 11523                           ;keypad.c: 119: W = 2*number;
 11524  00079C  90D8               	bcf	status,0,c
 11525  00079E  3470               	rlcf	_number,w,c
 11526  0007A0  6E59               	movwf	_W,c
 11527  0007A2  3471               	rlcf	_number+1,w,c
 11528  0007A4  6E5A               	movwf	_W+1,c
 11529                           
 11530                           ;keypad.c: 120: total_number = 3*number;
 11531  0007A6  C070  F001         	movff	_number,i2___wmul@multiplier
 11532  0007AA  C071  F002         	movff	_number+1,i2___wmul@multiplier+1
 11533  0007AE  0E00               	movlw	0
 11534  0007B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 11535  0007B2  0E03               	movlw	3
 11536  0007B4  6E03               	movwf	i2___wmul@multiplicand,c
 11537  0007B6  EC6C  F01A         	call	i2___wmul	;wreg free
 11538  0007BA  C001  F09C         	movff	?i2___wmul,_total_number
 11539  0007BE  C002  F09D         	movff	?i2___wmul+1,_total_number+1
 11540                           
 11541                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 11542  0007C2  90D8               	bcf	status,0,c
 11543  0007C4  3461               	rlcf	_counter_step,w,c
 11544  0007C6  6ED9               	movwf	fsr2l,c
 11545  0007C8  3462               	rlcf	_counter_step+1,w,c
 11546  0007CA  6EDA               	movwf	fsr2h,c
 11547  0007CC  0E42               	movlw	low _compartment_number
 11548  0007CE  26D9               	addwf	fsr2l,f,c
 11549  0007D0  0E00               	movlw	high _compartment_number
 11550  0007D2  22DA               	addwfc	fsr2h,f,c
 11551  0007D4  CFDE F007          	movff	postinc2,??_is_valid
 11552  0007D8  CFDD F008          	movff	postdec2,??_is_valid+1
 11553  0007DC  90D8               	bcf	status,0,c
 11554  0007DE  3607               	rlcf	??_is_valid,f,c
 11555  0007E0  3608               	rlcf	??_is_valid+1,f,c
 11556  0007E2  0EB8               	movlw	low _B_array
 11557  0007E4  2407               	addwf	??_is_valid,w,c
 11558  0007E6  6ED9               	movwf	fsr2l,c
 11559  0007E8  0E01               	movlw	high _B_array
 11560  0007EA  2008               	addwfc	??_is_valid+1,w,c
 11561  0007EC  6EDA               	movwf	fsr2h,c
 11562  0007EE  C05F  FFDE         	movff	_B,postinc2
 11563  0007F2  C060  FFDD         	movff	_B+1,postdec2
 11564                           
 11565                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 11566  0007F6  90D8               	bcf	status,0,c
 11567  0007F8  3461               	rlcf	_counter_step,w,c
 11568  0007FA  6ED9               	movwf	fsr2l,c
 11569  0007FC  3462               	rlcf	_counter_step+1,w,c
 11570  0007FE  6EDA               	movwf	fsr2h,c
 11571  000800  0E42               	movlw	low _compartment_number
 11572  000802  26D9               	addwf	fsr2l,f,c
 11573  000804  0E00               	movlw	high _compartment_number
 11574  000806  22DA               	addwfc	fsr2h,f,c
 11575  000808  CFDE F007          	movff	postinc2,??_is_valid
 11576  00080C  CFDD F008          	movff	postdec2,??_is_valid+1
 11577  000810  90D8               	bcf	status,0,c
 11578  000812  3607               	rlcf	??_is_valid,f,c
 11579  000814  3608               	rlcf	??_is_valid+1,f,c
 11580  000816  0E00               	movlw	low _W_array
 11581  000818  2407               	addwf	??_is_valid,w,c
 11582  00081A  6ED9               	movwf	fsr2l,c
 11583  00081C  0E01               	movlw	high _W_array
 11584  00081E  2008               	addwfc	??_is_valid+1,w,c
 11585  000820  6EDA               	movwf	fsr2h,c
 11586  000822  C059  FFDE         	movff	_W,postinc2
 11587  000826  C05A  FFDD         	movff	_W+1,postdec2
 11588                           
 11589                           ;keypad.c: 124: }
 11590  00082A  0012               	return	
 11591  00082C                     i2l678:
 11592                           
 11593                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 11594  00082C  0E6B               	movlw	low _current_set2
 11595  00082E  6E01               	movwf	strcmp@s1,c
 11596  000830  0E00               	movlw	high _current_set2
 11597  000832  6E02               	movwf	strcmp@s1+1,c
 11598  000834  0EDA               	movlw	low STR_47
 11599  000836  6E03               	movwf	strcmp@s2,c
 11600  000838  0EFF               	movlw	high STR_47
 11601  00083A  6E04               	movwf	strcmp@s2+1,c
 11602  00083C  EC67  F019         	call	_strcmp	;wreg free
 11603  000840  5001               	movf	?_strcmp,w,c
 11604  000842  1002               	iorwf	?_strcmp+1,w,c
 11605  000844  A4D8               	btfss	status,2,c
 11606  000846  D06A               	goto	i2l680
 11607                           
 11608                           ;keypad.c: 126: B = 1*number;
 11609  000848  C070  F05F         	movff	_number,_B
 11610  00084C  C071  F060         	movff	_number+1,_B+1
 11611                           
 11612                           ;keypad.c: 127: N = 1*number;
 11613  000850  C070  F05D         	movff	_number,_N
 11614  000854  C071  F05E         	movff	_number+1,_N+1
 11615                           
 11616                           ;keypad.c: 128: W = 2*number;
 11617  000858  90D8               	bcf	status,0,c
 11618  00085A  3470               	rlcf	_number,w,c
 11619  00085C  6E59               	movwf	_W,c
 11620  00085E  3471               	rlcf	_number+1,w,c
 11621  000860  6E5A               	movwf	_W+1,c
 11622                           
 11623                           ;keypad.c: 129: total_number = 4*number;
 11624  000862  C070  F007         	movff	_number,??_is_valid
 11625  000866  C071  F008         	movff	_number+1,??_is_valid+1
 11626  00086A  90D8               	bcf	status,0,c
 11627  00086C  3607               	rlcf	??_is_valid,f,c
 11628  00086E  3608               	rlcf	??_is_valid+1,f,c
 11629  000870  90D8               	bcf	status,0,c
 11630  000872  3607               	rlcf	??_is_valid,f,c
 11631  000874  3608               	rlcf	??_is_valid+1,f,c
 11632  000876  C007  F09C         	movff	??_is_valid,_total_number
 11633  00087A  C008  F09D         	movff	??_is_valid+1,_total_number+1
 11634                           
 11635                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 11636  00087E  90D8               	bcf	status,0,c
 11637  000880  3461               	rlcf	_counter_step,w,c
 11638  000882  6ED9               	movwf	fsr2l,c
 11639  000884  3462               	rlcf	_counter_step+1,w,c
 11640  000886  6EDA               	movwf	fsr2h,c
 11641  000888  0E42               	movlw	low _compartment_number
 11642  00088A  26D9               	addwf	fsr2l,f,c
 11643  00088C  0E00               	movlw	high _compartment_number
 11644  00088E  22DA               	addwfc	fsr2h,f,c
 11645  000890  CFDE F007          	movff	postinc2,??_is_valid
 11646  000894  CFDD F008          	movff	postdec2,??_is_valid+1
 11647  000898  90D8               	bcf	status,0,c
 11648  00089A  3607               	rlcf	??_is_valid,f,c
 11649  00089C  3608               	rlcf	??_is_valid+1,f,c
 11650  00089E  0EB8               	movlw	low _B_array
 11651  0008A0  2407               	addwf	??_is_valid,w,c
 11652  0008A2  6ED9               	movwf	fsr2l,c
 11653  0008A4  0E01               	movlw	high _B_array
 11654  0008A6  2008               	addwfc	??_is_valid+1,w,c
 11655  0008A8  6EDA               	movwf	fsr2h,c
 11656  0008AA  C05F  FFDE         	movff	_B,postinc2
 11657  0008AE  C060  FFDD         	movff	_B+1,postdec2
 11658                           
 11659                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 11660  0008B2  90D8               	bcf	status,0,c
 11661  0008B4  3461               	rlcf	_counter_step,w,c
 11662  0008B6  6ED9               	movwf	fsr2l,c
 11663  0008B8  3462               	rlcf	_counter_step+1,w,c
 11664  0008BA  6EDA               	movwf	fsr2h,c
 11665  0008BC  0E42               	movlw	low _compartment_number
 11666  0008BE  26D9               	addwf	fsr2l,f,c
 11667  0008C0  0E00               	movlw	high _compartment_number
 11668  0008C2  22DA               	addwfc	fsr2h,f,c
 11669  0008C4  CFDE F007          	movff	postinc2,??_is_valid
 11670  0008C8  CFDD F008          	movff	postdec2,??_is_valid+1
 11671  0008CC  90D8               	bcf	status,0,c
 11672  0008CE  3607               	rlcf	??_is_valid,f,c
 11673  0008D0  3608               	rlcf	??_is_valid+1,f,c
 11674  0008D2  0E98               	movlw	low _N_array
 11675  0008D4  2407               	addwf	??_is_valid,w,c
 11676  0008D6  6ED9               	movwf	fsr2l,c
 11677  0008D8  0E01               	movlw	high _N_array
 11678  0008DA  2008               	addwfc	??_is_valid+1,w,c
 11679  0008DC  6EDA               	movwf	fsr2h,c
 11680  0008DE  C05D  FFDE         	movff	_N,postinc2
 11681  0008E2  C05E  FFDD         	movff	_N+1,postdec2
 11682                           
 11683                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 11684  0008E6  90D8               	bcf	status,0,c
 11685  0008E8  3461               	rlcf	_counter_step,w,c
 11686  0008EA  6ED9               	movwf	fsr2l,c
 11687  0008EC  3462               	rlcf	_counter_step+1,w,c
 11688  0008EE  6EDA               	movwf	fsr2h,c
 11689  0008F0  0E42               	movlw	low _compartment_number
 11690  0008F2  26D9               	addwf	fsr2l,f,c
 11691  0008F4  0E00               	movlw	high _compartment_number
 11692  0008F6  22DA               	addwfc	fsr2h,f,c
 11693  0008F8  CFDE F007          	movff	postinc2,??_is_valid
 11694  0008FC  CFDD F008          	movff	postdec2,??_is_valid+1
 11695  000900  90D8               	bcf	status,0,c
 11696  000902  3607               	rlcf	??_is_valid,f,c
 11697  000904  3608               	rlcf	??_is_valid+1,f,c
 11698  000906  0E00               	movlw	low _W_array
 11699  000908  2407               	addwf	??_is_valid,w,c
 11700  00090A  6ED9               	movwf	fsr2l,c
 11701  00090C  0E01               	movlw	high _W_array
 11702  00090E  2008               	addwfc	??_is_valid+1,w,c
 11703  000910  6EDA               	movwf	fsr2h,c
 11704  000912  C059  FFDE         	movff	_W,postinc2
 11705  000916  C05A  FFDD         	movff	_W+1,postdec2
 11706                           
 11707                           ;keypad.c: 134: }
 11708  00091A  0012               	return	
 11709  00091C                     i2l680:
 11710                           
 11711                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 11712  00091C  0E6B               	movlw	low _current_set2
 11713  00091E  6E01               	movwf	strcmp@s1,c
 11714  000920  0E00               	movlw	high _current_set2
 11715  000922  6E02               	movwf	strcmp@s1+1,c
 11716  000924  0EDF               	movlw	low STR_48
 11717  000926  6E03               	movwf	strcmp@s2,c
 11718  000928  0EFF               	movlw	high STR_48
 11719  00092A  6E04               	movwf	strcmp@s2+1,c
 11720  00092C  EC67  F019         	call	_strcmp	;wreg free
 11721  000930  5001               	movf	?_strcmp,w,c
 11722  000932  1002               	iorwf	?_strcmp+1,w,c
 11723  000934  A4D8               	btfss	status,2,c
 11724  000936  D06A               	goto	i2l682
 11725                           
 11726                           ;keypad.c: 136: B = 1*number;
 11727  000938  C070  F05F         	movff	_number,_B
 11728  00093C  C071  F060         	movff	_number+1,_B+1
 11729                           
 11730                           ;keypad.c: 137: S = 1*number;
 11731  000940  C070  F05B         	movff	_number,_S
 11732  000944  C071  F05C         	movff	_number+1,_S+1
 11733                           
 11734                           ;keypad.c: 138: W = 2*number;
 11735  000948  90D8               	bcf	status,0,c
 11736  00094A  3470               	rlcf	_number,w,c
 11737  00094C  6E59               	movwf	_W,c
 11738  00094E  3471               	rlcf	_number+1,w,c
 11739  000950  6E5A               	movwf	_W+1,c
 11740                           
 11741                           ;keypad.c: 139: total_number = 4*number;
 11742  000952  C070  F007         	movff	_number,??_is_valid
 11743  000956  C071  F008         	movff	_number+1,??_is_valid+1
 11744  00095A  90D8               	bcf	status,0,c
 11745  00095C  3607               	rlcf	??_is_valid,f,c
 11746  00095E  3608               	rlcf	??_is_valid+1,f,c
 11747  000960  90D8               	bcf	status,0,c
 11748  000962  3607               	rlcf	??_is_valid,f,c
 11749  000964  3608               	rlcf	??_is_valid+1,f,c
 11750  000966  C007  F09C         	movff	??_is_valid,_total_number
 11751  00096A  C008  F09D         	movff	??_is_valid+1,_total_number+1
 11752                           
 11753                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 11754  00096E  90D8               	bcf	status,0,c
 11755  000970  3461               	rlcf	_counter_step,w,c
 11756  000972  6ED9               	movwf	fsr2l,c
 11757  000974  3462               	rlcf	_counter_step+1,w,c
 11758  000976  6EDA               	movwf	fsr2h,c
 11759  000978  0E42               	movlw	low _compartment_number
 11760  00097A  26D9               	addwf	fsr2l,f,c
 11761  00097C  0E00               	movlw	high _compartment_number
 11762  00097E  22DA               	addwfc	fsr2h,f,c
 11763  000980  CFDE F007          	movff	postinc2,??_is_valid
 11764  000984  CFDD F008          	movff	postdec2,??_is_valid+1
 11765  000988  90D8               	bcf	status,0,c
 11766  00098A  3607               	rlcf	??_is_valid,f,c
 11767  00098C  3608               	rlcf	??_is_valid+1,f,c
 11768  00098E  0EB8               	movlw	low _B_array
 11769  000990  2407               	addwf	??_is_valid,w,c
 11770  000992  6ED9               	movwf	fsr2l,c
 11771  000994  0E01               	movlw	high _B_array
 11772  000996  2008               	addwfc	??_is_valid+1,w,c
 11773  000998  6EDA               	movwf	fsr2h,c
 11774  00099A  C05F  FFDE         	movff	_B,postinc2
 11775  00099E  C060  FFDD         	movff	_B+1,postdec2
 11776                           
 11777                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 11778  0009A2  90D8               	bcf	status,0,c
 11779  0009A4  3461               	rlcf	_counter_step,w,c
 11780  0009A6  6ED9               	movwf	fsr2l,c
 11781  0009A8  3462               	rlcf	_counter_step+1,w,c
 11782  0009AA  6EDA               	movwf	fsr2h,c
 11783  0009AC  0E42               	movlw	low _compartment_number
 11784  0009AE  26D9               	addwf	fsr2l,f,c
 11785  0009B0  0E00               	movlw	high _compartment_number
 11786  0009B2  22DA               	addwfc	fsr2h,f,c
 11787  0009B4  CFDE F007          	movff	postinc2,??_is_valid
 11788  0009B8  CFDD F008          	movff	postdec2,??_is_valid+1
 11789  0009BC  90D8               	bcf	status,0,c
 11790  0009BE  3607               	rlcf	??_is_valid,f,c
 11791  0009C0  3608               	rlcf	??_is_valid+1,f,c
 11792  0009C2  0EA8               	movlw	low _S_array
 11793  0009C4  2407               	addwf	??_is_valid,w,c
 11794  0009C6  6ED9               	movwf	fsr2l,c
 11795  0009C8  0E01               	movlw	high _S_array
 11796  0009CA  2008               	addwfc	??_is_valid+1,w,c
 11797  0009CC  6EDA               	movwf	fsr2h,c
 11798  0009CE  C05B  FFDE         	movff	_S,postinc2
 11799  0009D2  C05C  FFDD         	movff	_S+1,postdec2
 11800                           
 11801                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 11802  0009D6  90D8               	bcf	status,0,c
 11803  0009D8  3461               	rlcf	_counter_step,w,c
 11804  0009DA  6ED9               	movwf	fsr2l,c
 11805  0009DC  3462               	rlcf	_counter_step+1,w,c
 11806  0009DE  6EDA               	movwf	fsr2h,c
 11807  0009E0  0E42               	movlw	low _compartment_number
 11808  0009E2  26D9               	addwf	fsr2l,f,c
 11809  0009E4  0E00               	movlw	high _compartment_number
 11810  0009E6  22DA               	addwfc	fsr2h,f,c
 11811  0009E8  CFDE F007          	movff	postinc2,??_is_valid
 11812  0009EC  CFDD F008          	movff	postdec2,??_is_valid+1
 11813  0009F0  90D8               	bcf	status,0,c
 11814  0009F2  3607               	rlcf	??_is_valid,f,c
 11815  0009F4  3608               	rlcf	??_is_valid+1,f,c
 11816  0009F6  0E00               	movlw	low _W_array
 11817  0009F8  2407               	addwf	??_is_valid,w,c
 11818  0009FA  6ED9               	movwf	fsr2l,c
 11819  0009FC  0E01               	movlw	high _W_array
 11820  0009FE  2008               	addwfc	??_is_valid+1,w,c
 11821  000A00  6EDA               	movwf	fsr2h,c
 11822  000A02  C059  FFDE         	movff	_W,postinc2
 11823  000A06  C05A  FFDD         	movff	_W+1,postdec2
 11824                           
 11825                           ;keypad.c: 145: }
 11826  000A0A  0012               	return	
 11827  000A0C                     i2l682:
 11828                           
 11829                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 11830  000A0C  0E6B               	movlw	low _current_set2
 11831  000A0E  6E01               	movwf	strcmp@s1,c
 11832  000A10  0E00               	movlw	high _current_set2
 11833  000A12  6E02               	movwf	strcmp@s1+1,c
 11834  000A14  0ED5               	movlw	low STR_49
 11835  000A16  6E03               	movwf	strcmp@s2,c
 11836  000A18  0EFF               	movlw	high STR_49
 11837  000A1A  6E04               	movwf	strcmp@s2+1,c
 11838  000A1C  EC67  F019         	call	_strcmp	;wreg free
 11839  000A20  5001               	movf	?_strcmp,w,c
 11840  000A22  1002               	iorwf	?_strcmp+1,w,c
 11841  000A24  A4D8               	btfss	status,2,c
 11842  000A26  D06A               	goto	i2l684
 11843                           
 11844                           ;keypad.c: 147: B = 2*number;
 11845  000A28  90D8               	bcf	status,0,c
 11846  000A2A  3470               	rlcf	_number,w,c
 11847  000A2C  6E5F               	movwf	_B,c
 11848  000A2E  3471               	rlcf	_number+1,w,c
 11849  000A30  6E60               	movwf	_B+1,c
 11850                           
 11851                           ;keypad.c: 148: S = 1*number;
 11852  000A32  C070  F05B         	movff	_number,_S
 11853  000A36  C071  F05C         	movff	_number+1,_S+1
 11854                           
 11855                           ;keypad.c: 149: W = number;
 11856  000A3A  C070  F059         	movff	_number,_W
 11857  000A3E  C071  F05A         	movff	_number+1,_W+1
 11858                           
 11859                           ;keypad.c: 150: total_number = 4*number;
 11860  000A42  C070  F007         	movff	_number,??_is_valid
 11861  000A46  C071  F008         	movff	_number+1,??_is_valid+1
 11862  000A4A  90D8               	bcf	status,0,c
 11863  000A4C  3607               	rlcf	??_is_valid,f,c
 11864  000A4E  3608               	rlcf	??_is_valid+1,f,c
 11865  000A50  90D8               	bcf	status,0,c
 11866  000A52  3607               	rlcf	??_is_valid,f,c
 11867  000A54  3608               	rlcf	??_is_valid+1,f,c
 11868  000A56  C007  F09C         	movff	??_is_valid,_total_number
 11869  000A5A  C008  F09D         	movff	??_is_valid+1,_total_number+1
 11870                           
 11871                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 11872  000A5E  90D8               	bcf	status,0,c
 11873  000A60  3461               	rlcf	_counter_step,w,c
 11874  000A62  6ED9               	movwf	fsr2l,c
 11875  000A64  3462               	rlcf	_counter_step+1,w,c
 11876  000A66  6EDA               	movwf	fsr2h,c
 11877  000A68  0E42               	movlw	low _compartment_number
 11878  000A6A  26D9               	addwf	fsr2l,f,c
 11879  000A6C  0E00               	movlw	high _compartment_number
 11880  000A6E  22DA               	addwfc	fsr2h,f,c
 11881  000A70  CFDE F007          	movff	postinc2,??_is_valid
 11882  000A74  CFDD F008          	movff	postdec2,??_is_valid+1
 11883  000A78  90D8               	bcf	status,0,c
 11884  000A7A  3607               	rlcf	??_is_valid,f,c
 11885  000A7C  3608               	rlcf	??_is_valid+1,f,c
 11886  000A7E  0EB8               	movlw	low _B_array
 11887  000A80  2407               	addwf	??_is_valid,w,c
 11888  000A82  6ED9               	movwf	fsr2l,c
 11889  000A84  0E01               	movlw	high _B_array
 11890  000A86  2008               	addwfc	??_is_valid+1,w,c
 11891  000A88  6EDA               	movwf	fsr2h,c
 11892  000A8A  C05F  FFDE         	movff	_B,postinc2
 11893  000A8E  C060  FFDD         	movff	_B+1,postdec2
 11894                           
 11895                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 11896  000A92  90D8               	bcf	status,0,c
 11897  000A94  3461               	rlcf	_counter_step,w,c
 11898  000A96  6ED9               	movwf	fsr2l,c
 11899  000A98  3462               	rlcf	_counter_step+1,w,c
 11900  000A9A  6EDA               	movwf	fsr2h,c
 11901  000A9C  0E42               	movlw	low _compartment_number
 11902  000A9E  26D9               	addwf	fsr2l,f,c
 11903  000AA0  0E00               	movlw	high _compartment_number
 11904  000AA2  22DA               	addwfc	fsr2h,f,c
 11905  000AA4  CFDE F007          	movff	postinc2,??_is_valid
 11906  000AA8  CFDD F008          	movff	postdec2,??_is_valid+1
 11907  000AAC  90D8               	bcf	status,0,c
 11908  000AAE  3607               	rlcf	??_is_valid,f,c
 11909  000AB0  3608               	rlcf	??_is_valid+1,f,c
 11910  000AB2  0EA8               	movlw	low _S_array
 11911  000AB4  2407               	addwf	??_is_valid,w,c
 11912  000AB6  6ED9               	movwf	fsr2l,c
 11913  000AB8  0E01               	movlw	high _S_array
 11914  000ABA  2008               	addwfc	??_is_valid+1,w,c
 11915  000ABC  6EDA               	movwf	fsr2h,c
 11916  000ABE  C05B  FFDE         	movff	_S,postinc2
 11917  000AC2  C05C  FFDD         	movff	_S+1,postdec2
 11918                           
 11919                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 11920  000AC6  90D8               	bcf	status,0,c
 11921  000AC8  3461               	rlcf	_counter_step,w,c
 11922  000ACA  6ED9               	movwf	fsr2l,c
 11923  000ACC  3462               	rlcf	_counter_step+1,w,c
 11924  000ACE  6EDA               	movwf	fsr2h,c
 11925  000AD0  0E42               	movlw	low _compartment_number
 11926  000AD2  26D9               	addwf	fsr2l,f,c
 11927  000AD4  0E00               	movlw	high _compartment_number
 11928  000AD6  22DA               	addwfc	fsr2h,f,c
 11929  000AD8  CFDE F007          	movff	postinc2,??_is_valid
 11930  000ADC  CFDD F008          	movff	postdec2,??_is_valid+1
 11931  000AE0  90D8               	bcf	status,0,c
 11932  000AE2  3607               	rlcf	??_is_valid,f,c
 11933  000AE4  3608               	rlcf	??_is_valid+1,f,c
 11934  000AE6  0E00               	movlw	low _W_array
 11935  000AE8  2407               	addwf	??_is_valid,w,c
 11936  000AEA  6ED9               	movwf	fsr2l,c
 11937  000AEC  0E01               	movlw	high _W_array
 11938  000AEE  2008               	addwfc	??_is_valid+1,w,c
 11939  000AF0  6EDA               	movwf	fsr2h,c
 11940  000AF2  C059  FFDE         	movff	_W,postinc2
 11941  000AF6  C05A  FFDD         	movff	_W+1,postdec2
 11942                           
 11943                           ;keypad.c: 155: }
 11944  000AFA  0012               	return	
 11945  000AFC                     i2l684:
 11946                           
 11947                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 11948  000AFC  0E6B               	movlw	low _current_set2
 11949  000AFE  6E01               	movwf	strcmp@s1,c
 11950  000B00  0E00               	movlw	high _current_set2
 11951  000B02  6E02               	movwf	strcmp@s1+1,c
 11952  000B04  0ECB               	movlw	low STR_50
 11953  000B06  6E03               	movwf	strcmp@s2,c
 11954  000B08  0EFF               	movlw	high STR_50
 11955  000B0A  6E04               	movwf	strcmp@s2+1,c
 11956  000B0C  EC67  F019         	call	_strcmp	;wreg free
 11957  000B10  5001               	movf	?_strcmp,w,c
 11958  000B12  1002               	iorwf	?_strcmp+1,w,c
 11959  000B14  A4D8               	btfss	status,2,c
 11960  000B16  D06A               	goto	i2l686
 11961                           
 11962                           ;keypad.c: 157: B = 2*number;
 11963  000B18  90D8               	bcf	status,0,c
 11964  000B1A  3470               	rlcf	_number,w,c
 11965  000B1C  6E5F               	movwf	_B,c
 11966  000B1E  3471               	rlcf	_number+1,w,c
 11967  000B20  6E60               	movwf	_B+1,c
 11968                           
 11969                           ;keypad.c: 158: N = 1*number;
 11970  000B22  C070  F05D         	movff	_number,_N
 11971  000B26  C071  F05E         	movff	_number+1,_N+1
 11972                           
 11973                           ;keypad.c: 159: W = 1*number;
 11974  000B2A  C070  F059         	movff	_number,_W
 11975  000B2E  C071  F05A         	movff	_number+1,_W+1
 11976                           
 11977                           ;keypad.c: 160: total_number = 4*number;
 11978  000B32  C070  F007         	movff	_number,??_is_valid
 11979  000B36  C071  F008         	movff	_number+1,??_is_valid+1
 11980  000B3A  90D8               	bcf	status,0,c
 11981  000B3C  3607               	rlcf	??_is_valid,f,c
 11982  000B3E  3608               	rlcf	??_is_valid+1,f,c
 11983  000B40  90D8               	bcf	status,0,c
 11984  000B42  3607               	rlcf	??_is_valid,f,c
 11985  000B44  3608               	rlcf	??_is_valid+1,f,c
 11986  000B46  C007  F09C         	movff	??_is_valid,_total_number
 11987  000B4A  C008  F09D         	movff	??_is_valid+1,_total_number+1
 11988                           
 11989                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 11990  000B4E  90D8               	bcf	status,0,c
 11991  000B50  3461               	rlcf	_counter_step,w,c
 11992  000B52  6ED9               	movwf	fsr2l,c
 11993  000B54  3462               	rlcf	_counter_step+1,w,c
 11994  000B56  6EDA               	movwf	fsr2h,c
 11995  000B58  0E42               	movlw	low _compartment_number
 11996  000B5A  26D9               	addwf	fsr2l,f,c
 11997  000B5C  0E00               	movlw	high _compartment_number
 11998  000B5E  22DA               	addwfc	fsr2h,f,c
 11999  000B60  CFDE F007          	movff	postinc2,??_is_valid
 12000  000B64  CFDD F008          	movff	postdec2,??_is_valid+1
 12001  000B68  90D8               	bcf	status,0,c
 12002  000B6A  3607               	rlcf	??_is_valid,f,c
 12003  000B6C  3608               	rlcf	??_is_valid+1,f,c
 12004  000B6E  0EB8               	movlw	low _B_array
 12005  000B70  2407               	addwf	??_is_valid,w,c
 12006  000B72  6ED9               	movwf	fsr2l,c
 12007  000B74  0E01               	movlw	high _B_array
 12008  000B76  2008               	addwfc	??_is_valid+1,w,c
 12009  000B78  6EDA               	movwf	fsr2h,c
 12010  000B7A  C05F  FFDE         	movff	_B,postinc2
 12011  000B7E  C060  FFDD         	movff	_B+1,postdec2
 12012                           
 12013                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 12014  000B82  90D8               	bcf	status,0,c
 12015  000B84  3461               	rlcf	_counter_step,w,c
 12016  000B86  6ED9               	movwf	fsr2l,c
 12017  000B88  3462               	rlcf	_counter_step+1,w,c
 12018  000B8A  6EDA               	movwf	fsr2h,c
 12019  000B8C  0E42               	movlw	low _compartment_number
 12020  000B8E  26D9               	addwf	fsr2l,f,c
 12021  000B90  0E00               	movlw	high _compartment_number
 12022  000B92  22DA               	addwfc	fsr2h,f,c
 12023  000B94  CFDE F007          	movff	postinc2,??_is_valid
 12024  000B98  CFDD F008          	movff	postdec2,??_is_valid+1
 12025  000B9C  90D8               	bcf	status,0,c
 12026  000B9E  3607               	rlcf	??_is_valid,f,c
 12027  000BA0  3608               	rlcf	??_is_valid+1,f,c
 12028  000BA2  0E98               	movlw	low _N_array
 12029  000BA4  2407               	addwf	??_is_valid,w,c
 12030  000BA6  6ED9               	movwf	fsr2l,c
 12031  000BA8  0E01               	movlw	high _N_array
 12032  000BAA  2008               	addwfc	??_is_valid+1,w,c
 12033  000BAC  6EDA               	movwf	fsr2h,c
 12034  000BAE  C05D  FFDE         	movff	_N,postinc2
 12035  000BB2  C05E  FFDD         	movff	_N+1,postdec2
 12036                           
 12037                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 12038  000BB6  90D8               	bcf	status,0,c
 12039  000BB8  3461               	rlcf	_counter_step,w,c
 12040  000BBA  6ED9               	movwf	fsr2l,c
 12041  000BBC  3462               	rlcf	_counter_step+1,w,c
 12042  000BBE  6EDA               	movwf	fsr2h,c
 12043  000BC0  0E42               	movlw	low _compartment_number
 12044  000BC2  26D9               	addwf	fsr2l,f,c
 12045  000BC4  0E00               	movlw	high _compartment_number
 12046  000BC6  22DA               	addwfc	fsr2h,f,c
 12047  000BC8  CFDE F007          	movff	postinc2,??_is_valid
 12048  000BCC  CFDD F008          	movff	postdec2,??_is_valid+1
 12049  000BD0  90D8               	bcf	status,0,c
 12050  000BD2  3607               	rlcf	??_is_valid,f,c
 12051  000BD4  3608               	rlcf	??_is_valid+1,f,c
 12052  000BD6  0E00               	movlw	low _W_array
 12053  000BD8  2407               	addwf	??_is_valid,w,c
 12054  000BDA  6ED9               	movwf	fsr2l,c
 12055  000BDC  0E01               	movlw	high _W_array
 12056  000BDE  2008               	addwfc	??_is_valid+1,w,c
 12057  000BE0  6EDA               	movwf	fsr2h,c
 12058  000BE2  C059  FFDE         	movff	_W,postinc2
 12059  000BE6  C05A  FFDD         	movff	_W+1,postdec2
 12060                           
 12061                           ;keypad.c: 165: }
 12062  000BEA  0012               	return	
 12063  000BEC                     i2l686:
 12064                           
 12065                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 12066  000BEC  0E6B               	movlw	low _current_set2
 12067  000BEE  6E01               	movwf	strcmp@s1,c
 12068  000BF0  0E00               	movlw	high _current_set2
 12069  000BF2  6E02               	movwf	strcmp@s1+1,c
 12070  000BF4  0ED0               	movlw	low STR_51
 12071  000BF6  6E03               	movwf	strcmp@s2,c
 12072  000BF8  0EFF               	movlw	high STR_51
 12073  000BFA  6E04               	movwf	strcmp@s2+1,c
 12074  000BFC  EC67  F019         	call	_strcmp	;wreg free
 12075  000C00  5001               	movf	?_strcmp,w,c
 12076  000C02  1002               	iorwf	?_strcmp+1,w,c
 12077  000C04  A4D8               	btfss	status,2,c
 12078  000C06  D06A               	goto	i2l688
 12079                           
 12080                           ;keypad.c: 167: B = 1*number;
 12081  000C08  C070  F05F         	movff	_number,_B
 12082  000C0C  C071  F060         	movff	_number+1,_B+1
 12083                           
 12084                           ;keypad.c: 168: N = 2*number;
 12085  000C10  90D8               	bcf	status,0,c
 12086  000C12  3470               	rlcf	_number,w,c
 12087  000C14  6E5D               	movwf	_N,c
 12088  000C16  3471               	rlcf	_number+1,w,c
 12089  000C18  6E5E               	movwf	_N+1,c
 12090                           
 12091                           ;keypad.c: 169: W = 1*number;
 12092  000C1A  C070  F059         	movff	_number,_W
 12093  000C1E  C071  F05A         	movff	_number+1,_W+1
 12094                           
 12095                           ;keypad.c: 170: total_number = 4*number;
 12096  000C22  C070  F007         	movff	_number,??_is_valid
 12097  000C26  C071  F008         	movff	_number+1,??_is_valid+1
 12098  000C2A  90D8               	bcf	status,0,c
 12099  000C2C  3607               	rlcf	??_is_valid,f,c
 12100  000C2E  3608               	rlcf	??_is_valid+1,f,c
 12101  000C30  90D8               	bcf	status,0,c
 12102  000C32  3607               	rlcf	??_is_valid,f,c
 12103  000C34  3608               	rlcf	??_is_valid+1,f,c
 12104  000C36  C007  F09C         	movff	??_is_valid,_total_number
 12105  000C3A  C008  F09D         	movff	??_is_valid+1,_total_number+1
 12106                           
 12107                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 12108  000C3E  90D8               	bcf	status,0,c
 12109  000C40  3461               	rlcf	_counter_step,w,c
 12110  000C42  6ED9               	movwf	fsr2l,c
 12111  000C44  3462               	rlcf	_counter_step+1,w,c
 12112  000C46  6EDA               	movwf	fsr2h,c
 12113  000C48  0E42               	movlw	low _compartment_number
 12114  000C4A  26D9               	addwf	fsr2l,f,c
 12115  000C4C  0E00               	movlw	high _compartment_number
 12116  000C4E  22DA               	addwfc	fsr2h,f,c
 12117  000C50  CFDE F007          	movff	postinc2,??_is_valid
 12118  000C54  CFDD F008          	movff	postdec2,??_is_valid+1
 12119  000C58  90D8               	bcf	status,0,c
 12120  000C5A  3607               	rlcf	??_is_valid,f,c
 12121  000C5C  3608               	rlcf	??_is_valid+1,f,c
 12122  000C5E  0EB8               	movlw	low _B_array
 12123  000C60  2407               	addwf	??_is_valid,w,c
 12124  000C62  6ED9               	movwf	fsr2l,c
 12125  000C64  0E01               	movlw	high _B_array
 12126  000C66  2008               	addwfc	??_is_valid+1,w,c
 12127  000C68  6EDA               	movwf	fsr2h,c
 12128  000C6A  C05F  FFDE         	movff	_B,postinc2
 12129  000C6E  C060  FFDD         	movff	_B+1,postdec2
 12130                           
 12131                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 12132  000C72  90D8               	bcf	status,0,c
 12133  000C74  3461               	rlcf	_counter_step,w,c
 12134  000C76  6ED9               	movwf	fsr2l,c
 12135  000C78  3462               	rlcf	_counter_step+1,w,c
 12136  000C7A  6EDA               	movwf	fsr2h,c
 12137  000C7C  0E42               	movlw	low _compartment_number
 12138  000C7E  26D9               	addwf	fsr2l,f,c
 12139  000C80  0E00               	movlw	high _compartment_number
 12140  000C82  22DA               	addwfc	fsr2h,f,c
 12141  000C84  CFDE F007          	movff	postinc2,??_is_valid
 12142  000C88  CFDD F008          	movff	postdec2,??_is_valid+1
 12143  000C8C  90D8               	bcf	status,0,c
 12144  000C8E  3607               	rlcf	??_is_valid,f,c
 12145  000C90  3608               	rlcf	??_is_valid+1,f,c
 12146  000C92  0E98               	movlw	low _N_array
 12147  000C94  2407               	addwf	??_is_valid,w,c
 12148  000C96  6ED9               	movwf	fsr2l,c
 12149  000C98  0E01               	movlw	high _N_array
 12150  000C9A  2008               	addwfc	??_is_valid+1,w,c
 12151  000C9C  6EDA               	movwf	fsr2h,c
 12152  000C9E  C05D  FFDE         	movff	_N,postinc2
 12153  000CA2  C05E  FFDD         	movff	_N+1,postdec2
 12154                           
 12155                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 12156  000CA6  90D8               	bcf	status,0,c
 12157  000CA8  3461               	rlcf	_counter_step,w,c
 12158  000CAA  6ED9               	movwf	fsr2l,c
 12159  000CAC  3462               	rlcf	_counter_step+1,w,c
 12160  000CAE  6EDA               	movwf	fsr2h,c
 12161  000CB0  0E42               	movlw	low _compartment_number
 12162  000CB2  26D9               	addwf	fsr2l,f,c
 12163  000CB4  0E00               	movlw	high _compartment_number
 12164  000CB6  22DA               	addwfc	fsr2h,f,c
 12165  000CB8  CFDE F007          	movff	postinc2,??_is_valid
 12166  000CBC  CFDD F008          	movff	postdec2,??_is_valid+1
 12167  000CC0  90D8               	bcf	status,0,c
 12168  000CC2  3607               	rlcf	??_is_valid,f,c
 12169  000CC4  3608               	rlcf	??_is_valid+1,f,c
 12170  000CC6  0E00               	movlw	low _W_array
 12171  000CC8  2407               	addwf	??_is_valid,w,c
 12172  000CCA  6ED9               	movwf	fsr2l,c
 12173  000CCC  0E01               	movlw	high _W_array
 12174  000CCE  2008               	addwfc	??_is_valid+1,w,c
 12175  000CD0  6EDA               	movwf	fsr2h,c
 12176  000CD2  C059  FFDE         	movff	_W,postinc2
 12177  000CD6  C05A  FFDD         	movff	_W+1,postdec2
 12178                           
 12179                           ;keypad.c: 175: }
 12180  000CDA  0012               	return	
 12181  000CDC                     i2l688:
 12182                           
 12183                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 12184  000CDC  0E6B               	movlw	low _current_set2
 12185  000CDE  6E01               	movwf	strcmp@s1,c
 12186  000CE0  0E00               	movlw	high _current_set2
 12187  000CE2  6E02               	movwf	strcmp@s1+1,c
 12188  000CE4  0EC6               	movlw	low STR_52
 12189  000CE6  6E03               	movwf	strcmp@s2,c
 12190  000CE8  0EFF               	movlw	high STR_52
 12191  000CEA  6E04               	movwf	strcmp@s2+1,c
 12192  000CEC  EC67  F019         	call	_strcmp	;wreg free
 12193  000CF0  5001               	movf	?_strcmp,w,c
 12194  000CF2  1002               	iorwf	?_strcmp+1,w,c
 12195  000CF4  A4D8               	btfss	status,2,c
 12196  000CF6  D055               	goto	i2l690
 12197                           
 12198                           ;keypad.c: 177: B = 1*number;
 12199  000CF8  C070  F05F         	movff	_number,_B
 12200  000CFC  C071  F060         	movff	_number+1,_B+1
 12201                           
 12202                           ;keypad.c: 178: N = 3*number;
 12203  000D00  C070  F001         	movff	_number,i2___wmul@multiplier
 12204  000D04  C071  F002         	movff	_number+1,i2___wmul@multiplier+1
 12205  000D08  0E00               	movlw	0
 12206  000D0A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12207  000D0C  0E03               	movlw	3
 12208  000D0E  6E03               	movwf	i2___wmul@multiplicand,c
 12209  000D10  EC6C  F01A         	call	i2___wmul	;wreg free
 12210  000D14  C001  F05D         	movff	?i2___wmul,_N
 12211  000D18  C002  F05E         	movff	?i2___wmul+1,_N+1
 12212                           
 12213                           ;keypad.c: 179: total_number = 4*number;
 12214  000D1C  C070  F007         	movff	_number,??_is_valid
 12215  000D20  C071  F008         	movff	_number+1,??_is_valid+1
 12216  000D24  90D8               	bcf	status,0,c
 12217  000D26  3607               	rlcf	??_is_valid,f,c
 12218  000D28  3608               	rlcf	??_is_valid+1,f,c
 12219  000D2A  90D8               	bcf	status,0,c
 12220  000D2C  3607               	rlcf	??_is_valid,f,c
 12221  000D2E  3608               	rlcf	??_is_valid+1,f,c
 12222  000D30  C007  F09C         	movff	??_is_valid,_total_number
 12223  000D34  C008  F09D         	movff	??_is_valid+1,_total_number+1
 12224                           
 12225                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 12226  000D38  90D8               	bcf	status,0,c
 12227  000D3A  3461               	rlcf	_counter_step,w,c
 12228  000D3C  6ED9               	movwf	fsr2l,c
 12229  000D3E  3462               	rlcf	_counter_step+1,w,c
 12230  000D40  6EDA               	movwf	fsr2h,c
 12231  000D42  0E42               	movlw	low _compartment_number
 12232  000D44  26D9               	addwf	fsr2l,f,c
 12233  000D46  0E00               	movlw	high _compartment_number
 12234  000D48  22DA               	addwfc	fsr2h,f,c
 12235  000D4A  CFDE F007          	movff	postinc2,??_is_valid
 12236  000D4E  CFDD F008          	movff	postdec2,??_is_valid+1
 12237  000D52  90D8               	bcf	status,0,c
 12238  000D54  3607               	rlcf	??_is_valid,f,c
 12239  000D56  3608               	rlcf	??_is_valid+1,f,c
 12240  000D58  0EB8               	movlw	low _B_array
 12241  000D5A  2407               	addwf	??_is_valid,w,c
 12242  000D5C  6ED9               	movwf	fsr2l,c
 12243  000D5E  0E01               	movlw	high _B_array
 12244  000D60  2008               	addwfc	??_is_valid+1,w,c
 12245  000D62  6EDA               	movwf	fsr2h,c
 12246  000D64  C05F  FFDE         	movff	_B,postinc2
 12247  000D68  C060  FFDD         	movff	_B+1,postdec2
 12248                           
 12249                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 12250  000D6C  90D8               	bcf	status,0,c
 12251  000D6E  3461               	rlcf	_counter_step,w,c
 12252  000D70  6ED9               	movwf	fsr2l,c
 12253  000D72  3462               	rlcf	_counter_step+1,w,c
 12254  000D74  6EDA               	movwf	fsr2h,c
 12255  000D76  0E42               	movlw	low _compartment_number
 12256  000D78  26D9               	addwf	fsr2l,f,c
 12257  000D7A  0E00               	movlw	high _compartment_number
 12258  000D7C  22DA               	addwfc	fsr2h,f,c
 12259  000D7E  CFDE F007          	movff	postinc2,??_is_valid
 12260  000D82  CFDD F008          	movff	postdec2,??_is_valid+1
 12261  000D86  90D8               	bcf	status,0,c
 12262  000D88  3607               	rlcf	??_is_valid,f,c
 12263  000D8A  3608               	rlcf	??_is_valid+1,f,c
 12264  000D8C  0E98               	movlw	low _N_array
 12265  000D8E  2407               	addwf	??_is_valid,w,c
 12266  000D90  6ED9               	movwf	fsr2l,c
 12267  000D92  0E01               	movlw	high _N_array
 12268  000D94  2008               	addwfc	??_is_valid+1,w,c
 12269  000D96  6EDA               	movwf	fsr2h,c
 12270  000D98  C05D  FFDE         	movff	_N,postinc2
 12271  000D9C  C05E  FFDD         	movff	_N+1,postdec2
 12272                           
 12273                           ;keypad.c: 184: }
 12274  000DA0  0012               	return	
 12275  000DA2                     i2l690:
 12276                           
 12277                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 12278  000DA2  0E6B               	movlw	low _current_set2
 12279  000DA4  6E01               	movwf	strcmp@s1,c
 12280  000DA6  0E00               	movlw	high _current_set2
 12281  000DA8  6E02               	movwf	strcmp@s1+1,c
 12282  000DAA  0EE4               	movlw	low STR_53
 12283  000DAC  6E03               	movwf	strcmp@s2,c
 12284  000DAE  0EFF               	movlw	high STR_53
 12285  000DB0  6E04               	movwf	strcmp@s2+1,c
 12286  000DB2  EC67  F019         	call	_strcmp	;wreg free
 12287  000DB6  5001               	movf	?_strcmp,w,c
 12288  000DB8  1002               	iorwf	?_strcmp+1,w,c
 12289  000DBA  A4D8               	btfss	status,2,c
 12290  000DBC  0012               	return	
 12291                           
 12292                           ;keypad.c: 186: B = 1*number;
 12293  000DBE  C070  F05F         	movff	_number,_B
 12294  000DC2  C071  F060         	movff	_number+1,_B+1
 12295                           
 12296                           ;keypad.c: 187: W = 3*number;
 12297  000DC6  C070  F001         	movff	_number,i2___wmul@multiplier
 12298  000DCA  C071  F002         	movff	_number+1,i2___wmul@multiplier+1
 12299  000DCE  0E00               	movlw	0
 12300  000DD0  6E04               	movwf	i2___wmul@multiplicand+1,c
 12301  000DD2  0E03               	movlw	3
 12302  000DD4  6E03               	movwf	i2___wmul@multiplicand,c
 12303  000DD6  EC6C  F01A         	call	i2___wmul	;wreg free
 12304  000DDA  C001  F059         	movff	?i2___wmul,_W
 12305  000DDE  C002  F05A         	movff	?i2___wmul+1,_W+1
 12306                           
 12307                           ;keypad.c: 188: total_number = 4*number;
 12308  000DE2  C070  F007         	movff	_number,??_is_valid
 12309  000DE6  C071  F008         	movff	_number+1,??_is_valid+1
 12310  000DEA  90D8               	bcf	status,0,c
 12311  000DEC  3607               	rlcf	??_is_valid,f,c
 12312  000DEE  3608               	rlcf	??_is_valid+1,f,c
 12313  000DF0  90D8               	bcf	status,0,c
 12314  000DF2  3607               	rlcf	??_is_valid,f,c
 12315  000DF4  3608               	rlcf	??_is_valid+1,f,c
 12316  000DF6  C007  F09C         	movff	??_is_valid,_total_number
 12317  000DFA  C008  F09D         	movff	??_is_valid+1,_total_number+1
 12318                           
 12319                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 12320  000DFE  90D8               	bcf	status,0,c
 12321  000E00  3461               	rlcf	_counter_step,w,c
 12322  000E02  6ED9               	movwf	fsr2l,c
 12323  000E04  3462               	rlcf	_counter_step+1,w,c
 12324  000E06  6EDA               	movwf	fsr2h,c
 12325  000E08  0E42               	movlw	low _compartment_number
 12326  000E0A  26D9               	addwf	fsr2l,f,c
 12327  000E0C  0E00               	movlw	high _compartment_number
 12328  000E0E  22DA               	addwfc	fsr2h,f,c
 12329  000E10  CFDE F007          	movff	postinc2,??_is_valid
 12330  000E14  CFDD F008          	movff	postdec2,??_is_valid+1
 12331  000E18  90D8               	bcf	status,0,c
 12332  000E1A  3607               	rlcf	??_is_valid,f,c
 12333  000E1C  3608               	rlcf	??_is_valid+1,f,c
 12334  000E1E  0EB8               	movlw	low _B_array
 12335  000E20  2407               	addwf	??_is_valid,w,c
 12336  000E22  6ED9               	movwf	fsr2l,c
 12337  000E24  0E01               	movlw	high _B_array
 12338  000E26  2008               	addwfc	??_is_valid+1,w,c
 12339  000E28  6EDA               	movwf	fsr2h,c
 12340  000E2A  C05F  FFDE         	movff	_B,postinc2
 12341  000E2E  C060  FFDD         	movff	_B+1,postdec2
 12342                           
 12343                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 12344  000E32  90D8               	bcf	status,0,c
 12345  000E34  3461               	rlcf	_counter_step,w,c
 12346  000E36  6ED9               	movwf	fsr2l,c
 12347  000E38  3462               	rlcf	_counter_step+1,w,c
 12348  000E3A  6EDA               	movwf	fsr2h,c
 12349  000E3C  0E42               	movlw	low _compartment_number
 12350  000E3E  26D9               	addwf	fsr2l,f,c
 12351  000E40  0E00               	movlw	high _compartment_number
 12352  000E42  22DA               	addwfc	fsr2h,f,c
 12353  000E44  CFDE F007          	movff	postinc2,??_is_valid
 12354  000E48  CFDD F008          	movff	postdec2,??_is_valid+1
 12355  000E4C  90D8               	bcf	status,0,c
 12356  000E4E  3607               	rlcf	??_is_valid,f,c
 12357  000E50  3608               	rlcf	??_is_valid+1,f,c
 12358  000E52  0E00               	movlw	low _W_array
 12359  000E54  2407               	addwf	??_is_valid,w,c
 12360  000E56  6ED9               	movwf	fsr2l,c
 12361  000E58  0E01               	movlw	high _W_array
 12362  000E5A  2008               	addwfc	??_is_valid+1,w,c
 12363  000E5C  6EDA               	movwf	fsr2h,c
 12364  000E5E  C059  FFDE         	movff	_W,postinc2
 12365  000E62  C05A  FFDD         	movff	_W+1,postdec2
 12366  000E66  0012               	return	
 12367  000E68                     __end_of_is_valid:
 12368                           	opt stack 0
 12369                           pclatu	equ	0xFFB
 12370                           pclath	equ	0xFFA
 12371                           tblptru	equ	0xFF8
 12372                           tblptrh	equ	0xFF7
 12373                           tblptrl	equ	0xFF6
 12374                           tablat	equ	0xFF5
 12375                           prodh	equ	0xFF4
 12376                           prodl	equ	0xFF3
 12377                           intcon	equ	0xFF2
 12378                           intcon3	equ	0xFF0
 12379                           indf0	equ	0xFEF
 12380                           postinc0	equ	0xFEE
 12381                           fsr0h	equ	0xFEA
 12382                           fsr0l	equ	0xFE9
 12383                           wreg	equ	0xFE8
 12384                           indf1	equ	0xFE7
 12385                           postdec1	equ	0xFE5
 12386                           fsr1h	equ	0xFE2
 12387                           fsr1l	equ	0xFE1
 12388                           indf2	equ	0xFDF
 12389                           postinc2	equ	0xFDE
 12390                           postdec2	equ	0xFDD
 12391                           fsr2h	equ	0xFDA
 12392                           fsr2l	equ	0xFD9
 12393                           status	equ	0xFD8
 12394                           
 12395 ;; *************** function i2___wmul *****************
 12396 ;; Defined at:
 12397 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;  multiplier      2    0[COMRAM] unsigned int 
 12400 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12401 ;; Auto vars:     Size  Location     Type
 12402 ;;  __wmul          2    4[COMRAM] unsigned int 
 12403 ;; Return value:  Size  Location     Type
 12404 ;;                  2    0[COMRAM] unsigned int 
 12405 ;; Registers used:
 12406 ;;		wreg, status,2, status,0, prodl, prodh
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12415 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;Total ram usage:        6 bytes
 12417 ;; Hardware stack levels used:    1
 12418 ;; This function calls:
 12419 ;;		Nothing
 12420 ;; This function is called by:
 12421 ;;		_interruptHandler
 12422 ;;		_is_valid
 12423 ;;		i2_printf
 12424 ;; This function uses a non-reentrant model
 12425 ;;
 12426                           
 12427                           	psect	text42
 12428  0034D8                     __ptext42:
 12429                           	opt stack 0
 12430  0034D8                     i2___wmul:
 12431                           	opt stack 25
 12432                           
 12433                           ;incstack = 0
 12434  0034D8  5001               	movf	i2___wmul@multiplier,w,c
 12435  0034DA  0203               	mulwf	i2___wmul@multiplicand,c
 12436  0034DC  CFF3 F005          	movff	prodl,i2___wmul@product
 12437  0034E0  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12438  0034E4  5001               	movf	i2___wmul@multiplier,w,c
 12439  0034E6  0204               	mulwf	i2___wmul@multiplicand+1,c
 12440  0034E8  50F3               	movf	prodl,w,c
 12441  0034EA  2606               	addwf	i2___wmul@product+1,f,c
 12442  0034EC  5002               	movf	i2___wmul@multiplier+1,w,c
 12443  0034EE  0203               	mulwf	i2___wmul@multiplicand,c
 12444  0034F0  50F3               	movf	prodl,w,c
 12445  0034F2  2606               	addwf	i2___wmul@product+1,f,c
 12446  0034F4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12447  0034F8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12448  0034FC  0012               	return	
 12449  0034FE                     __end_ofi2___wmul:
 12450                           	opt stack 0
 12451                           pclatu	equ	0xFFB
 12452                           pclath	equ	0xFFA
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           intcon3	equ	0xFF0
 12461                           indf0	equ	0xFEF
 12462                           postinc0	equ	0xFEE
 12463                           fsr0h	equ	0xFEA
 12464                           fsr0l	equ	0xFE9
 12465                           wreg	equ	0xFE8
 12466                           indf1	equ	0xFE7
 12467                           postdec1	equ	0xFE5
 12468                           fsr1h	equ	0xFE2
 12469                           fsr1l	equ	0xFE1
 12470                           indf2	equ	0xFDF
 12471                           postinc2	equ	0xFDE
 12472                           postdec2	equ	0xFDD
 12473                           fsr2h	equ	0xFDA
 12474                           fsr2l	equ	0xFD9
 12475                           status	equ	0xFD8
 12476                           
 12477 ;; *************** function _strcmp *****************
 12478 ;; Defined at:
 12479 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 12482 ;;		 -> current_set2(5), 
 12483 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 12484 ;;		 -> STR_53(5), STR_52(5), STR_51(5), STR_50(5), 
 12485 ;;		 -> STR_49(5), STR_48(5), STR_47(5), STR_46(4), 
 12486 ;;		 -> STR_45(4), STR_44(4), STR_43(4), STR_42(4), 
 12487 ;;		 -> STR_41(4), STR_40(3), STR_39(3), STR_38(3), 
 12488 ;;		 -> STR_37(2), STR_36(2), STR_35(2), STR_34(2), 
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;  r               1    5[COMRAM] char 
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  2    0[COMRAM] int 
 12493 ;; Registers used:
 12494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12500 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12501 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12502 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12503 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12504 ;;Total ram usage:        6 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; This function calls:
 12507 ;;		Nothing
 12508 ;; This function is called by:
 12509 ;;		_is_valid
 12510 ;; This function uses a non-reentrant model
 12511 ;;
 12512                           
 12513                           	psect	text43
 12514  0032CE                     __ptext43:
 12515                           	opt stack 0
 12516  0032CE                     _strcmp:
 12517                           	opt stack 25
 12518                           
 12519                           ;incstack = 0
 12520  0032CE  D004               	goto	i2l1399
 12521  0032D0  4A01               	infsnz	strcmp@s1,f,c
 12522  0032D2  2A02               	incf	strcmp@s1+1,f,c
 12523  0032D4  4A03               	infsnz	strcmp@s2,f,c
 12524  0032D6  2A04               	incf	strcmp@s2+1,f,c
 12525  0032D8                     i2l1399:
 12526  0032D8  C001  FFD9         	movff	strcmp@s1,fsr2l
 12527  0032DC  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 12528  0032E0  50DF               	movf	indf2,w,c
 12529  0032E2  6E05               	movwf	??_strcmp& (0+255),c
 12530  0032E4  C003  FFF6         	movff	strcmp@s2,tblptrl
 12531  0032E8  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 12532  0032EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12533  0032EC  6AF8               	clrf	tblptru,c
 12534  0032EE                     	endif
 12535  0032EE                     	if	0	;tblptru may be non-zero
 12536  0032EE                     	endif
 12537  0032EE  0008               	tblrd		*
 12538  0032F0  50F5               	movf	tablat,w,c
 12539  0032F2  0800               	sublw	0
 12540  0032F4  2405               	addwf	??_strcmp,w,c
 12541  0032F6  6E06               	movwf	strcmp@r,c
 12542  0032F8  5006               	movf	strcmp@r,w,c
 12543  0032FA  A4D8               	btfss	status,2,c
 12544  0032FC  D007               	goto	i2u232_40
 12545  0032FE  C001  FFD9         	movff	strcmp@s1,fsr2l
 12546  003302  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 12547  003306  50DF               	movf	indf2,w,c
 12548  003308  A4D8               	btfss	status,2,c
 12549  00330A  D7E2               	goto	i2l1400
 12550  00330C                     i2u232_40:
 12551  00330C  5006               	movf	strcmp@r,w,c
 12552  00330E  6E01               	movwf	?_strcmp,c
 12553  003310  6A02               	clrf	?_strcmp+1,c
 12554  003312  BE01               	btfsc	?_strcmp,7,c
 12555  003314  0602               	decf	?_strcmp+1,f,c
 12556  003316  0012               	return	
 12557  003318                     __end_of_strcmp:
 12558                           	opt stack 0
 12559                           pclatu	equ	0xFFB
 12560                           pclath	equ	0xFFA
 12561                           tblptru	equ	0xFF8
 12562                           tblptrh	equ	0xFF7
 12563                           tblptrl	equ	0xFF6
 12564                           tablat	equ	0xFF5
 12565                           prodh	equ	0xFF4
 12566                           prodl	equ	0xFF3
 12567                           intcon	equ	0xFF2
 12568                           intcon3	equ	0xFF0
 12569                           indf0	equ	0xFEF
 12570                           postinc0	equ	0xFEE
 12571                           fsr0h	equ	0xFEA
 12572                           fsr0l	equ	0xFE9
 12573                           wreg	equ	0xFE8
 12574                           indf1	equ	0xFE7
 12575                           postdec1	equ	0xFE5
 12576                           fsr1h	equ	0xFE2
 12577                           fsr1l	equ	0xFE1
 12578                           indf2	equ	0xFDF
 12579                           postinc2	equ	0xFDE
 12580                           postdec2	equ	0xFDD
 12581                           fsr2h	equ	0xFDA
 12582                           fsr2l	equ	0xFD9
 12583                           status	equ	0xFD8
 12584                           
 12585 ;; *************** function _generate_compartment_array *****************
 12586 ;; Defined at:
 12587 ;;		line 220 in file "keypad.c"
 12588 ;; Parameters:    Size  Location     Type
 12589 ;;  step            2    0[COMRAM] int 
 12590 ;; Auto vars:     Size  Location     Type
 12591 ;;		None
 12592 ;; Return value:  Size  Location     Type
 12593 ;;                  1    wreg      void 
 12594 ;; Registers used:
 12595 ;;		wreg, status,2, status,0
 12596 ;; Tracked objects:
 12597 ;;		On entry : 0/0
 12598 ;;		On exit  : 0/0
 12599 ;;		Unchanged: 0/0
 12600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12601 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12603 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12604 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12605 ;;Total ram usage:        4 bytes
 12606 ;; Hardware stack levels used:    1
 12607 ;; This function calls:
 12608 ;;		Nothing
 12609 ;; This function is called by:
 12610 ;;		_interruptHandler
 12611 ;; This function uses a non-reentrant model
 12612 ;;
 12613                           
 12614                           	psect	text44
 12615  0026D4                     __ptext44:
 12616                           	opt stack 0
 12617  0026D4                     _generate_compartment_array:
 12618                           	opt stack 26
 12619                           
 12620                           ;keypad.c: 222: switch(step){
 12621                           
 12622                           ;incstack = 0
 12623  0026D4  D11C               	goto	i2l702
 12624  0026D6                     
 12625                           ;keypad.c: 224: compartment_array[1] = 1;
 12626  0026D6  0E00               	movlw	0
 12627  0026D8  0100               	movlb	0	; () banked
 12628  0026DA  6FEB               	movwf	(_compartment_array+3)& (0+255),b
 12629  0026DC  0E01               	movlw	1
 12630  0026DE  6FEA               	movwf	(_compartment_array+2)& (0+255),b
 12631                           
 12632                           ;keypad.c: 225: compartment_array[3] = 1;
 12633  0026E0  0E00               	movlw	0
 12634  0026E2  6FEF               	movwf	(_compartment_array+7)& (0+255),b
 12635  0026E4  0E01               	movlw	1
 12636  0026E6  6FEE               	movwf	(_compartment_array+6)& (0+255),b
 12637                           
 12638                           ;keypad.c: 226: compartment_array[5] = 1;
 12639  0026E8  0E00               	movlw	0
 12640  0026EA  6FF3               	movwf	(_compartment_array+11)& (0+255),b
 12641  0026EC  0E01               	movlw	1
 12642  0026EE  6FF2               	movwf	(_compartment_array+10)& (0+255),b
 12643                           
 12644                           ;keypad.c: 227: compartment_array[7] = 1;
 12645  0026F0  0E00               	movlw	0
 12646  0026F2  6FF7               	movwf	(_compartment_array+15)& (0+255),b
 12647  0026F4  0E01               	movlw	1
 12648  0026F6  6FF6               	movwf	(_compartment_array+14)& (0+255),b
 12649                           
 12650                           ;keypad.c: 230: compartment_number[0] = 1;
 12651  0026F8  0E00               	movlw	0
 12652  0026FA  6E43               	movwf	_compartment_number+1,c
 12653  0026FC  0E01               	movlw	1
 12654  0026FE  6E42               	movwf	_compartment_number,c
 12655                           
 12656                           ;keypad.c: 231: compartment_number[1] = 3;
 12657  002700  0E00               	movlw	0
 12658  002702  6E45               	movwf	_compartment_number+3,c
 12659  002704  0E03               	movlw	3
 12660  002706  6E44               	movwf	_compartment_number+2,c
 12661                           
 12662                           ;keypad.c: 232: compartment_number[2] = 5;
 12663  002708  0E00               	movlw	0
 12664  00270A  6E47               	movwf	_compartment_number+5,c
 12665  00270C  0E05               	movlw	5
 12666  00270E  6E46               	movwf	_compartment_number+4,c
 12667                           
 12668                           ;keypad.c: 233: compartment_number[3] = 7;
 12669  002710  0E00               	movlw	0
 12670  002712  6E49               	movwf	_compartment_number+7,c
 12671  002714  0E07               	movlw	7
 12672  002716  6E48               	movwf	_compartment_number+6,c
 12673                           
 12674                           ;keypad.c: 235: break;
 12675  002718  0012               	return	
 12676  00271A                     
 12677                           ;keypad.c: 237: compartment_array[0] = 1;
 12678                           
 12679                           ; BSR set to: 0
 12680  00271A  0E00               	movlw	0
 12681  00271C  0100               	movlb	0	; () banked
 12682  00271E  6FE9               	movwf	(_compartment_array+1)& (0+255),b
 12683  002720  0E01               	movlw	1
 12684  002722  6FE8               	movwf	_compartment_array& (0+255),b
 12685                           
 12686                           ;keypad.c: 238: compartment_array[1] = 1;
 12687  002724  0E00               	movlw	0
 12688  002726  6FEB               	movwf	(_compartment_array+3)& (0+255),b
 12689  002728  0E01               	movlw	1
 12690  00272A  6FEA               	movwf	(_compartment_array+2)& (0+255),b
 12691                           
 12692                           ;keypad.c: 239: compartment_array[3] = 1;
 12693  00272C  0E00               	movlw	0
 12694  00272E  6FEF               	movwf	(_compartment_array+7)& (0+255),b
 12695  002730  0E01               	movlw	1
 12696  002732  6FEE               	movwf	(_compartment_array+6)& (0+255),b
 12697                           
 12698                           ;keypad.c: 240: compartment_array[4] = 1;
 12699  002734  0E00               	movlw	0
 12700  002736  6FF1               	movwf	(_compartment_array+9)& (0+255),b
 12701  002738  0E01               	movlw	1
 12702  00273A  6FF0               	movwf	(_compartment_array+8)& (0+255),b
 12703                           
 12704                           ;keypad.c: 241: compartment_array[6] = 1;
 12705  00273C  0E00               	movlw	0
 12706  00273E  6FF5               	movwf	(_compartment_array+13)& (0+255),b
 12707  002740  0E01               	movlw	1
 12708  002742  6FF4               	movwf	(_compartment_array+12)& (0+255),b
 12709                           
 12710                           ;keypad.c: 245: compartment_number[0] = 0;
 12711  002744  0E00               	movlw	0
 12712  002746  6E43               	movwf	_compartment_number+1,c
 12713  002748  0E00               	movlw	0
 12714  00274A  6E42               	movwf	_compartment_number,c
 12715                           
 12716                           ;keypad.c: 246: compartment_number[1] = 1;
 12717  00274C  0E00               	movlw	0
 12718  00274E  6E45               	movwf	_compartment_number+3,c
 12719  002750  0E01               	movlw	1
 12720  002752  6E44               	movwf	_compartment_number+2,c
 12721                           
 12722                           ;keypad.c: 247: compartment_number[2] = 3;
 12723  002754  0E00               	movlw	0
 12724  002756  6E47               	movwf	_compartment_number+5,c
 12725  002758  0E03               	movlw	3
 12726  00275A  6E46               	movwf	_compartment_number+4,c
 12727                           
 12728                           ;keypad.c: 248: compartment_number[3] = 4;
 12729  00275C  0E00               	movlw	0
 12730  00275E  6E49               	movwf	_compartment_number+7,c
 12731  002760  0E04               	movlw	4
 12732  002762  6E48               	movwf	_compartment_number+6,c
 12733                           
 12734                           ;keypad.c: 249: compartment_number[4] = 6;
 12735  002764  0E00               	movlw	0
 12736  002766  6E4B               	movwf	_compartment_number+9,c
 12737  002768  0E06               	movlw	6
 12738  00276A  6E4A               	movwf	_compartment_number+8,c
 12739                           
 12740                           ;keypad.c: 251: break;
 12741  00276C  0012               	return	
 12742  00276E                     
 12743                           ;keypad.c: 254: compartment_array[0] = 1;
 12744                           
 12745                           ; BSR set to: 0
 12746  00276E  0E00               	movlw	0
 12747  002770  0100               	movlb	0	; () banked
 12748  002772  6FE9               	movwf	(_compartment_array+1)& (0+255),b
 12749  002774  0E01               	movlw	1
 12750  002776  6FE8               	movwf	_compartment_array& (0+255),b
 12751                           
 12752                           ;keypad.c: 255: compartment_array[1] = 1;
 12753  002778  0E00               	movlw	0
 12754  00277A  6FEB               	movwf	(_compartment_array+3)& (0+255),b
 12755  00277C  0E01               	movlw	1
 12756  00277E  6FEA               	movwf	(_compartment_array+2)& (0+255),b
 12757                           
 12758                           ;keypad.c: 256: compartment_array[2] = 1;
 12759  002780  0E00               	movlw	0
 12760  002782  6FED               	movwf	(_compartment_array+5)& (0+255),b
 12761  002784  0E01               	movlw	1
 12762  002786  6FEC               	movwf	(_compartment_array+4)& (0+255),b
 12763                           
 12764                           ;keypad.c: 257: compartment_array[4] = 1;
 12765  002788  0E00               	movlw	0
 12766  00278A  6FF1               	movwf	(_compartment_array+9)& (0+255),b
 12767  00278C  0E01               	movlw	1
 12768  00278E  6FF0               	movwf	(_compartment_array+8)& (0+255),b
 12769                           
 12770                           ;keypad.c: 258: compartment_array[5] = 1;
 12771  002790  0E00               	movlw	0
 12772  002792  6FF3               	movwf	(_compartment_array+11)& (0+255),b
 12773  002794  0E01               	movlw	1
 12774  002796  6FF2               	movwf	(_compartment_array+10)& (0+255),b
 12775                           
 12776                           ;keypad.c: 259: compartment_array[6] = 1;
 12777  002798  0E00               	movlw	0
 12778  00279A  6FF5               	movwf	(_compartment_array+13)& (0+255),b
 12779  00279C  0E01               	movlw	1
 12780  00279E  6FF4               	movwf	(_compartment_array+12)& (0+255),b
 12781                           
 12782                           ;keypad.c: 262: compartment_number[0] = 0;
 12783  0027A0  0E00               	movlw	0
 12784  0027A2  6E43               	movwf	_compartment_number+1,c
 12785  0027A4  0E00               	movlw	0
 12786  0027A6  6E42               	movwf	_compartment_number,c
 12787                           
 12788                           ;keypad.c: 263: compartment_number[1] = 1;
 12789  0027A8  0E00               	movlw	0
 12790  0027AA  6E45               	movwf	_compartment_number+3,c
 12791  0027AC  0E01               	movlw	1
 12792  0027AE  6E44               	movwf	_compartment_number+2,c
 12793                           
 12794                           ;keypad.c: 264: compartment_number[2] = 2;
 12795  0027B0  0E00               	movlw	0
 12796  0027B2  6E47               	movwf	_compartment_number+5,c
 12797  0027B4  0E02               	movlw	2
 12798  0027B6  6E46               	movwf	_compartment_number+4,c
 12799                           
 12800                           ;keypad.c: 265: compartment_number[3] = 4;
 12801  0027B8  0E00               	movlw	0
 12802  0027BA  6E49               	movwf	_compartment_number+7,c
 12803  0027BC  0E04               	movlw	4
 12804  0027BE  6E48               	movwf	_compartment_number+6,c
 12805                           
 12806                           ;keypad.c: 266: compartment_number[4] = 5;
 12807  0027C0  0E00               	movlw	0
 12808  0027C2  6E4B               	movwf	_compartment_number+9,c
 12809  0027C4  0E05               	movlw	5
 12810  0027C6  6E4A               	movwf	_compartment_number+8,c
 12811                           
 12812                           ;keypad.c: 267: compartment_number[5] = 6;
 12813  0027C8  0E00               	movlw	0
 12814  0027CA  6E4D               	movwf	_compartment_number+11,c
 12815  0027CC  0E06               	movlw	6
 12816  0027CE  6E4C               	movwf	_compartment_number+10,c
 12817                           
 12818                           ;keypad.c: 269: break;
 12819  0027D0  0012               	return	
 12820  0027D2                     
 12821                           ;keypad.c: 271: compartment_array[0] = 1;
 12822                           
 12823                           ; BSR set to: 0
 12824  0027D2  0E00               	movlw	0
 12825  0027D4  0100               	movlb	0	; () banked
 12826  0027D6  6FE9               	movwf	(_compartment_array+1)& (0+255),b
 12827  0027D8  0E01               	movlw	1
 12828  0027DA  6FE8               	movwf	_compartment_array& (0+255),b
 12829                           
 12830                           ;keypad.c: 272: compartment_array[1] = 1;
 12831  0027DC  0E00               	movlw	0
 12832  0027DE  6FEB               	movwf	(_compartment_array+3)& (0+255),b
 12833  0027E0  0E01               	movlw	1
 12834  0027E2  6FEA               	movwf	(_compartment_array+2)& (0+255),b
 12835                           
 12836                           ;keypad.c: 273: compartment_array[2] = 1;
 12837  0027E4  0E00               	movlw	0
 12838  0027E6  6FED               	movwf	(_compartment_array+5)& (0+255),b
 12839  0027E8  0E01               	movlw	1
 12840  0027EA  6FEC               	movwf	(_compartment_array+4)& (0+255),b
 12841                           
 12842                           ;keypad.c: 274: compartment_array[3] = 1;
 12843  0027EC  0E00               	movlw	0
 12844  0027EE  6FEF               	movwf	(_compartment_array+7)& (0+255),b
 12845  0027F0  0E01               	movlw	1
 12846  0027F2  6FEE               	movwf	(_compartment_array+6)& (0+255),b
 12847                           
 12848                           ;keypad.c: 275: compartment_array[4] = 1;
 12849  0027F4  0E00               	movlw	0
 12850  0027F6  6FF1               	movwf	(_compartment_array+9)& (0+255),b
 12851  0027F8  0E01               	movlw	1
 12852  0027FA  6FF0               	movwf	(_compartment_array+8)& (0+255),b
 12853                           
 12854                           ;keypad.c: 276: compartment_array[5] = 1;
 12855  0027FC  0E00               	movlw	0
 12856  0027FE  6FF3               	movwf	(_compartment_array+11)& (0+255),b
 12857  002800  0E01               	movlw	1
 12858  002802  6FF2               	movwf	(_compartment_array+10)& (0+255),b
 12859                           
 12860                           ;keypad.c: 277: compartment_array[6] = 1;
 12861  002804  0E00               	movlw	0
 12862  002806  6FF5               	movwf	(_compartment_array+13)& (0+255),b
 12863  002808  0E01               	movlw	1
 12864  00280A  6FF4               	movwf	(_compartment_array+12)& (0+255),b
 12865                           
 12866                           ;keypad.c: 280: compartment_number[0] = 0;
 12867  00280C  0E00               	movlw	0
 12868  00280E  6E43               	movwf	_compartment_number+1,c
 12869  002810  0E00               	movlw	0
 12870  002812  6E42               	movwf	_compartment_number,c
 12871                           
 12872                           ;keypad.c: 281: compartment_number[1] = 1;
 12873  002814  0E00               	movlw	0
 12874  002816  6E45               	movwf	_compartment_number+3,c
 12875  002818  0E01               	movlw	1
 12876  00281A  6E44               	movwf	_compartment_number+2,c
 12877                           
 12878                           ;keypad.c: 282: compartment_number[2] = 2;
 12879  00281C  0E00               	movlw	0
 12880  00281E  6E47               	movwf	_compartment_number+5,c
 12881  002820  0E02               	movlw	2
 12882  002822  6E46               	movwf	_compartment_number+4,c
 12883                           
 12884                           ;keypad.c: 283: compartment_number[3] = 3;
 12885  002824  0E00               	movlw	0
 12886  002826  6E49               	movwf	_compartment_number+7,c
 12887  002828  0E03               	movlw	3
 12888  00282A  6E48               	movwf	_compartment_number+6,c
 12889                           
 12890                           ;keypad.c: 284: compartment_number[4] = 4;
 12891  00282C  0E00               	movlw	0
 12892  00282E  6E4B               	movwf	_compartment_number+9,c
 12893  002830  0E04               	movlw	4
 12894  002832  6E4A               	movwf	_compartment_number+8,c
 12895                           
 12896                           ;keypad.c: 285: compartment_number[5] = 5;
 12897  002834  0E00               	movlw	0
 12898  002836  6E4D               	movwf	_compartment_number+11,c
 12899  002838  0E05               	movlw	5
 12900  00283A  6E4C               	movwf	_compartment_number+10,c
 12901                           
 12902                           ;keypad.c: 286: compartment_number[6] = 6;
 12903  00283C  0E00               	movlw	0
 12904  00283E  6E4F               	movwf	_compartment_number+13,c
 12905  002840  0E06               	movlw	6
 12906  002842  6E4E               	movwf	_compartment_number+12,c
 12907                           
 12908                           ;keypad.c: 288: break;
 12909  002844  0012               	return	
 12910  002846                     
 12911                           ;keypad.c: 290: compartment_array[0] = 1;
 12912                           
 12913                           ; BSR set to: 0
 12914  002846  0E00               	movlw	0
 12915  002848  0100               	movlb	0	; () banked
 12916  00284A  6FE9               	movwf	(_compartment_array+1)& (0+255),b
 12917  00284C  0E01               	movlw	1
 12918  00284E  6FE8               	movwf	_compartment_array& (0+255),b
 12919                           
 12920                           ;keypad.c: 291: compartment_array[1] = 1;
 12921  002850  0E00               	movlw	0
 12922  002852  6FEB               	movwf	(_compartment_array+3)& (0+255),b
 12923  002854  0E01               	movlw	1
 12924  002856  6FEA               	movwf	(_compartment_array+2)& (0+255),b
 12925                           
 12926                           ;keypad.c: 292: compartment_array[2] = 1;
 12927  002858  0E00               	movlw	0
 12928  00285A  6FED               	movwf	(_compartment_array+5)& (0+255),b
 12929  00285C  0E01               	movlw	1
 12930  00285E  6FEC               	movwf	(_compartment_array+4)& (0+255),b
 12931                           
 12932                           ;keypad.c: 293: compartment_array[3] = 1;
 12933  002860  0E00               	movlw	0
 12934  002862  6FEF               	movwf	(_compartment_array+7)& (0+255),b
 12935  002864  0E01               	movlw	1
 12936  002866  6FEE               	movwf	(_compartment_array+6)& (0+255),b
 12937                           
 12938                           ;keypad.c: 294: compartment_array[4] = 1;
 12939  002868  0E00               	movlw	0
 12940  00286A  6FF1               	movwf	(_compartment_array+9)& (0+255),b
 12941  00286C  0E01               	movlw	1
 12942  00286E  6FF0               	movwf	(_compartment_array+8)& (0+255),b
 12943                           
 12944                           ;keypad.c: 295: compartment_array[5] = 1;
 12945  002870  0E00               	movlw	0
 12946  002872  6FF3               	movwf	(_compartment_array+11)& (0+255),b
 12947  002874  0E01               	movlw	1
 12948  002876  6FF2               	movwf	(_compartment_array+10)& (0+255),b
 12949                           
 12950                           ;keypad.c: 296: compartment_array[6] = 1;
 12951  002878  0E00               	movlw	0
 12952  00287A  6FF5               	movwf	(_compartment_array+13)& (0+255),b
 12953  00287C  0E01               	movlw	1
 12954  00287E  6FF4               	movwf	(_compartment_array+12)& (0+255),b
 12955                           
 12956                           ;keypad.c: 297: compartment_array[7] = 1;
 12957  002880  0E00               	movlw	0
 12958  002882  6FF7               	movwf	(_compartment_array+15)& (0+255),b
 12959  002884  0E01               	movlw	1
 12960  002886  6FF6               	movwf	(_compartment_array+14)& (0+255),b
 12961                           
 12962                           ;keypad.c: 300: compartment_number[0] = 0;
 12963  002888  0E00               	movlw	0
 12964  00288A  6E43               	movwf	_compartment_number+1,c
 12965  00288C  0E00               	movlw	0
 12966  00288E  6E42               	movwf	_compartment_number,c
 12967                           
 12968                           ;keypad.c: 301: compartment_number[1] = 1;
 12969  002890  0E00               	movlw	0
 12970  002892  6E45               	movwf	_compartment_number+3,c
 12971  002894  0E01               	movlw	1
 12972  002896  6E44               	movwf	_compartment_number+2,c
 12973                           
 12974                           ;keypad.c: 302: compartment_number[2] = 2;
 12975  002898  0E00               	movlw	0
 12976  00289A  6E47               	movwf	_compartment_number+5,c
 12977  00289C  0E02               	movlw	2
 12978  00289E  6E46               	movwf	_compartment_number+4,c
 12979                           
 12980                           ;keypad.c: 303: compartment_number[3] = 3;
 12981  0028A0  0E00               	movlw	0
 12982  0028A2  6E49               	movwf	_compartment_number+7,c
 12983  0028A4  0E03               	movlw	3
 12984  0028A6  6E48               	movwf	_compartment_number+6,c
 12985                           
 12986                           ;keypad.c: 304: compartment_number[4] = 4;
 12987  0028A8  0E00               	movlw	0
 12988  0028AA  6E4B               	movwf	_compartment_number+9,c
 12989  0028AC  0E04               	movlw	4
 12990  0028AE  6E4A               	movwf	_compartment_number+8,c
 12991                           
 12992                           ;keypad.c: 305: compartment_number[5] = 5;
 12993  0028B0  0E00               	movlw	0
 12994  0028B2  6E4D               	movwf	_compartment_number+11,c
 12995  0028B4  0E05               	movlw	5
 12996  0028B6  6E4C               	movwf	_compartment_number+10,c
 12997                           
 12998                           ;keypad.c: 306: compartment_number[6] = 6;
 12999  0028B8  0E00               	movlw	0
 13000  0028BA  6E4F               	movwf	_compartment_number+13,c
 13001  0028BC  0E06               	movlw	6
 13002  0028BE  6E4E               	movwf	_compartment_number+12,c
 13003                           
 13004                           ;keypad.c: 307: compartment_number[7] = 7;
 13005  0028C0  0E00               	movlw	0
 13006  0028C2  6E51               	movwf	_compartment_number+15,c
 13007  0028C4  0E07               	movlw	7
 13008  0028C6  6E50               	movwf	_compartment_number+14,c
 13009                           
 13010                           ;keypad.c: 309: break;
 13011  0028C8  0012               	return	
 13012  0028CA                     
 13013                           ;keypad.c: 311: compartment_array[0] = 0;
 13014                           
 13015                           ; BSR set to: 0
 13016  0028CA  0E00               	movlw	0
 13017  0028CC  0100               	movlb	0	; () banked
 13018  0028CE  6FE9               	movwf	(_compartment_array+1)& (0+255),b
 13019  0028D0  0E00               	movlw	0
 13020  0028D2  6FE8               	movwf	_compartment_array& (0+255),b
 13021                           
 13022                           ;keypad.c: 312: compartment_array[1] = 0;
 13023  0028D4  0E00               	movlw	0
 13024  0028D6  6FEB               	movwf	(_compartment_array+3)& (0+255),b
 13025  0028D8  0E00               	movlw	0
 13026  0028DA  6FEA               	movwf	(_compartment_array+2)& (0+255),b
 13027                           
 13028                           ;keypad.c: 313: compartment_array[2] = 0;
 13029  0028DC  0E00               	movlw	0
 13030  0028DE  6FED               	movwf	(_compartment_array+5)& (0+255),b
 13031  0028E0  0E00               	movlw	0
 13032  0028E2  6FEC               	movwf	(_compartment_array+4)& (0+255),b
 13033                           
 13034                           ;keypad.c: 314: compartment_array[3] = 0;
 13035  0028E4  0E00               	movlw	0
 13036  0028E6  6FEF               	movwf	(_compartment_array+7)& (0+255),b
 13037  0028E8  0E00               	movlw	0
 13038  0028EA  6FEE               	movwf	(_compartment_array+6)& (0+255),b
 13039                           
 13040                           ;keypad.c: 315: compartment_array[4] = 0;
 13041  0028EC  0E00               	movlw	0
 13042  0028EE  6FF1               	movwf	(_compartment_array+9)& (0+255),b
 13043  0028F0  0E00               	movlw	0
 13044  0028F2  6FF0               	movwf	(_compartment_array+8)& (0+255),b
 13045                           
 13046                           ;keypad.c: 316: compartment_array[5] = 0;
 13047  0028F4  0E00               	movlw	0
 13048  0028F6  6FF3               	movwf	(_compartment_array+11)& (0+255),b
 13049  0028F8  0E00               	movlw	0
 13050  0028FA  6FF2               	movwf	(_compartment_array+10)& (0+255),b
 13051                           
 13052                           ;keypad.c: 317: compartment_array[6] = 0;
 13053  0028FC  0E00               	movlw	0
 13054  0028FE  6FF5               	movwf	(_compartment_array+13)& (0+255),b
 13055  002900  0E00               	movlw	0
 13056  002902  6FF4               	movwf	(_compartment_array+12)& (0+255),b
 13057                           
 13058                           ;keypad.c: 318: compartment_array[7] = 0;
 13059  002904  0E00               	movlw	0
 13060  002906  6FF7               	movwf	(_compartment_array+15)& (0+255),b
 13061  002908  0E00               	movlw	0
 13062  00290A  6FF6               	movwf	(_compartment_array+14)& (0+255),b
 13063                           
 13064                           ;keypad.c: 320: }
 13065  00290C  0012               	return	
 13066  00290E                     i2l702:
 13067                           
 13068                           ; BSR set to: 0
 13069  00290E  C001  F003         	movff	generate_compartment_array@step,??_generate_compartment_array
 13070  002912  C002  F004         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
 13071                           
 13072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13073                           ; Switch size 1, requested type "space"
 13074                           ; Number of cases is 1, Range of values is 0 to 0
 13075                           ; switch strategies available:
 13076                           ; Name         Instructions Cycles
 13077                           ; simple_byte            4     3 (average)
 13078                           ;	Chosen strategy is simple_byte
 13079  002916  5004               	movf	??_generate_compartment_array+1,w,c
 13080  002918  0A00               	xorlw	0	; case 0
 13081  00291A  A4D8               	btfss	status,2,c
 13082  00291C  D7D6               	goto	i2l709
 13083                           
 13084                           ; Switch size 1, requested type "space"
 13085                           ; Number of cases is 5, Range of values is 4 to 8
 13086                           ; switch strategies available:
 13087                           ; Name         Instructions Cycles
 13088                           ; simple_byte           16     9 (average)
 13089                           ;	Chosen strategy is simple_byte
 13090  00291E  5003               	movf	??_generate_compartment_array,w,c
 13091  002920  0A04               	xorlw	4	; case 4
 13092  002922  B4D8               	btfsc	status,2,c
 13093  002924  D6D8               	goto	i2l703
 13094  002926  0A01               	xorlw	1	; case 5
 13095  002928  B4D8               	btfsc	status,2,c
 13096  00292A  D6F7               	goto	i2l705
 13097  00292C  0A03               	xorlw	3	; case 6
 13098  00292E  B4D8               	btfsc	status,2,c
 13099  002930  D71E               	goto	i2l706
 13100  002932  0A01               	xorlw	1	; case 7
 13101  002934  B4D8               	btfsc	status,2,c
 13102  002936  D74D               	goto	i2l707
 13103  002938  0A0F               	xorlw	15	; case 8
 13104  00293A  B4D8               	btfsc	status,2,c
 13105  00293C  D784               	goto	i2l708
 13106  00293E  D7C5               	goto	i2l709
 13107  002940                     __end_of_generate_compartment_array:
 13108                           	opt stack 0
 13109                           pclatu	equ	0xFFB
 13110                           pclath	equ	0xFFA
 13111                           tblptru	equ	0xFF8
 13112                           tblptrh	equ	0xFF7
 13113                           tblptrl	equ	0xFF6
 13114                           tablat	equ	0xFF5
 13115                           prodh	equ	0xFF4
 13116                           prodl	equ	0xFF3
 13117                           intcon	equ	0xFF2
 13118                           intcon3	equ	0xFF0
 13119                           indf0	equ	0xFEF
 13120                           postinc0	equ	0xFEE
 13121                           fsr0h	equ	0xFEA
 13122                           fsr0l	equ	0xFE9
 13123                           wreg	equ	0xFE8
 13124                           indf1	equ	0xFE7
 13125                           postdec1	equ	0xFE5
 13126                           fsr1h	equ	0xFE2
 13127                           fsr1l	equ	0xFE1
 13128                           indf2	equ	0xFDF
 13129                           postinc2	equ	0xFDE
 13130                           postdec2	equ	0xFDD
 13131                           fsr2h	equ	0xFDA
 13132                           fsr2l	equ	0xFD9
 13133                           status	equ	0xFD8
 13134                           
 13135 ;; *************** function _check *****************
 13136 ;; Defined at:
 13137 ;;		line 208 in file "keypad.c"
 13138 ;; Parameters:    Size  Location     Type
 13139 ;;		None
 13140 ;; Auto vars:     Size  Location     Type
 13141 ;;		None
 13142 ;; Return value:  Size  Location     Type
 13143 ;;                  2    0[COMRAM] int 
 13144 ;; Registers used:
 13145 ;;		wreg, status,2, status,0
 13146 ;; Tracked objects:
 13147 ;;		On entry : 0/0
 13148 ;;		On exit  : 0/0
 13149 ;;		Unchanged: 0/0
 13150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13151 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13154 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13155 ;;Total ram usage:        2 bytes
 13156 ;; Hardware stack levels used:    1
 13157 ;; This function calls:
 13158 ;;		Nothing
 13159 ;; This function is called by:
 13160 ;;		_interruptHandler
 13161 ;; This function uses a non-reentrant model
 13162 ;;
 13163                           
 13164                           	psect	text45
 13165  00306E                     __ptext45:
 13166                           	opt stack 0
 13167  00306E                     _check:
 13168                           	opt stack 26
 13169                           
 13170                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 13171                           
 13172                           ;incstack = 0
 13173  00306E  BE60               	btfsc	_B+1,7,c
 13174  003070  D006               	goto	i2u325_40
 13175  003072  5060               	movf	_B+1,w,c
 13176  003074  E125               	bnz	i2l4248
 13177  003076  0E03               	movlw	3
 13178  003078  5C5F               	subwf	_B,w,c
 13179  00307A  B0D8               	btfsc	status,0,c
 13180  00307C  D021               	goto	i2u329_40
 13181  00307E                     i2u325_40:
 13182  00307E  BE5E               	btfsc	_N+1,7,c
 13183  003080  D006               	goto	i2u326_40
 13184  003082  505E               	movf	_N+1,w,c
 13185  003084  E11D               	bnz	i2l4248
 13186  003086  0E04               	movlw	4
 13187  003088  5C5D               	subwf	_N,w,c
 13188  00308A  B0D8               	btfsc	status,0,c
 13189  00308C  D019               	goto	i2u329_40
 13190  00308E                     i2u326_40:
 13191  00308E  BE5C               	btfsc	_S+1,7,c
 13192  003090  D006               	goto	i2u327_40
 13193  003092  505C               	movf	_S+1,w,c
 13194  003094  E115               	bnz	i2l4248
 13195  003096  0E03               	movlw	3
 13196  003098  5C5B               	subwf	_S,w,c
 13197  00309A  B0D8               	btfsc	status,0,c
 13198  00309C  D011               	goto	i2u329_40
 13199  00309E                     i2u327_40:
 13200  00309E  BE5A               	btfsc	_W+1,7,c
 13201  0030A0  D006               	goto	i2u328_40
 13202  0030A2  505A               	movf	_W+1,w,c
 13203  0030A4  E10D               	bnz	i2l4248
 13204  0030A6  0E05               	movlw	5
 13205  0030A8  5C59               	subwf	_W,w,c
 13206  0030AA  B0D8               	btfsc	status,0,c
 13207  0030AC  D009               	goto	i2u329_40
 13208  0030AE                     i2u328_40:
 13209  0030AE  0100               	movlb	0	; () banked
 13210  0030B0  BF9D               	btfsc	(_total_number+1)& (0+255),7,b
 13211  0030B2  D00B               	goto	i2l696
 13212  0030B4  519D               	movf	(_total_number+1)& (0+255),w,b
 13213  0030B6  E104               	bnz	i2l4248
 13214  0030B8  0E05               	movlw	5
 13215  0030BA  5D9C               	subwf	_total_number& (0+255),w,b
 13216  0030BC  A0D8               	btfss	status,0,c
 13217  0030BE  D005               	goto	i2l696
 13218  0030C0                     i2u329_40:
 13219  0030C0                     i2l4248:
 13220                           
 13221                           ;keypad.c: 213: return 0;
 13222  0030C0  0E00               	movlw	0
 13223  0030C2  6E02               	movwf	?_check+1,c
 13224  0030C4  0E00               	movlw	0
 13225  0030C6  6E01               	movwf	?_check,c
 13226  0030C8  0012               	return	
 13227  0030CA                     i2l696:
 13228                           
 13229                           ;keypad.c: 214: }
 13230                           ;keypad.c: 215: return 1;
 13231  0030CA  0E00               	movlw	0
 13232  0030CC  6E02               	movwf	?_check+1,c
 13233  0030CE  0E01               	movlw	1
 13234  0030D0  6E01               	movwf	?_check,c
 13235  0030D2  0012               	return	
 13236  0030D4                     __end_of_check:
 13237                           	opt stack 0
 13238                           pclatu	equ	0xFFB
 13239                           pclath	equ	0xFFA
 13240                           tblptru	equ	0xFF8
 13241                           tblptrh	equ	0xFF7
 13242                           tblptrl	equ	0xFF6
 13243                           tablat	equ	0xFF5
 13244                           prodh	equ	0xFF4
 13245                           prodl	equ	0xFF3
 13246                           intcon	equ	0xFF2
 13247                           intcon3	equ	0xFF0
 13248                           indf0	equ	0xFEF
 13249                           postinc0	equ	0xFEE
 13250                           fsr0h	equ	0xFEA
 13251                           fsr0l	equ	0xFE9
 13252                           wreg	equ	0xFE8
 13253                           indf1	equ	0xFE7
 13254                           postdec1	equ	0xFE5
 13255                           fsr1h	equ	0xFE2
 13256                           fsr1l	equ	0xFE1
 13257                           indf2	equ	0xFDF
 13258                           postinc2	equ	0xFDE
 13259                           postdec2	equ	0xFDD
 13260                           fsr2h	equ	0xFDA
 13261                           fsr2l	equ	0xFD9
 13262                           status	equ	0xFD8
 13263                           
 13264 ;; *************** function ___awmod *****************
 13265 ;; Defined at:
 13266 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 13267 ;; Parameters:    Size  Location     Type
 13268 ;;  dividend        2    0[COMRAM] int 
 13269 ;;  divisor         2    2[COMRAM] int 
 13270 ;; Auto vars:     Size  Location     Type
 13271 ;;  sign            1    5[COMRAM] unsigned char 
 13272 ;;  counter         1    4[COMRAM] unsigned char 
 13273 ;; Return value:  Size  Location     Type
 13274 ;;                  2    0[COMRAM] int 
 13275 ;; Registers used:
 13276 ;;		wreg, status,2, status,0
 13277 ;; Tracked objects:
 13278 ;;		On entry : 0/0
 13279 ;;		On exit  : 0/0
 13280 ;;		Unchanged: 0/0
 13281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;Total ram usage:        6 bytes
 13287 ;; Hardware stack levels used:    1
 13288 ;; This function calls:
 13289 ;;		Nothing
 13290 ;; This function is called by:
 13291 ;;		_interruptHandler
 13292 ;; This function uses a non-reentrant model
 13293 ;;
 13294                           
 13295                           	psect	text46
 13296  002FFE                     __ptext46:
 13297                           	opt stack 0
 13298  002FFE                     ___awmod:
 13299                           	opt stack 26
 13300                           
 13301                           ;incstack = 0
 13302  002FFE  0E00               	movlw	0
 13303  003000  6E06               	movwf	___awmod@sign,c
 13304  003002  AE02               	btfss	___awmod@dividend+1,7,c
 13305  003004  D006               	goto	i2l1018
 13306  003006  6C01               	negf	___awmod@dividend,c
 13307  003008  1E02               	comf	___awmod@dividend+1,f,c
 13308  00300A  B0D8               	btfsc	status,0,c
 13309  00300C  2A02               	incf	___awmod@dividend+1,f,c
 13310  00300E  0E01               	movlw	1
 13311  003010  6E06               	movwf	___awmod@sign,c
 13312  003012                     i2l1018:
 13313  003012  AE04               	btfss	___awmod@divisor+1,7,c
 13314  003014  D004               	goto	i2l1019
 13315  003016  6C03               	negf	___awmod@divisor,c
 13316  003018  1E04               	comf	___awmod@divisor+1,f,c
 13317  00301A  B0D8               	btfsc	status,0,c
 13318  00301C  2A04               	incf	___awmod@divisor+1,f,c
 13319  00301E                     i2l1019:
 13320  00301E  5003               	movf	___awmod@divisor,w,c
 13321  003020  1004               	iorwf	___awmod@divisor+1,w,c
 13322  003022  B4D8               	btfsc	status,2,c
 13323  003024  D018               	goto	i2l1026
 13324  003026  0E01               	movlw	1
 13325  003028  6E05               	movwf	___awmod@counter,c
 13326  00302A  D004               	goto	i2l1021
 13327  00302C  90D8               	bcf	status,0,c
 13328  00302E  3603               	rlcf	___awmod@divisor,f,c
 13329  003030  3604               	rlcf	___awmod@divisor+1,f,c
 13330  003032  2A05               	incf	___awmod@counter,f,c
 13331  003034                     i2l1021:
 13332  003034  AE04               	btfss	___awmod@divisor+1,7,c
 13333  003036  D7FA               	goto	i2l1022
 13334  003038                     i2u334_40:
 13335  003038  5003               	movf	___awmod@divisor,w,c
 13336  00303A  5C01               	subwf	___awmod@dividend,w,c
 13337  00303C  5004               	movf	___awmod@divisor+1,w,c
 13338  00303E  5802               	subwfb	___awmod@dividend+1,w,c
 13339  003040  A0D8               	btfss	status,0,c
 13340  003042  D004               	goto	i2l1025
 13341  003044  5003               	movf	___awmod@divisor,w,c
 13342  003046  5E01               	subwf	___awmod@dividend,f,c
 13343  003048  5004               	movf	___awmod@divisor+1,w,c
 13344  00304A  5A02               	subwfb	___awmod@dividend+1,f,c
 13345  00304C                     i2l1025:
 13346  00304C  90D8               	bcf	status,0,c
 13347  00304E  3204               	rrcf	___awmod@divisor+1,f,c
 13348  003050  3203               	rrcf	___awmod@divisor,f,c
 13349  003052  2E05               	decfsz	___awmod@counter,f,c
 13350  003054  D7F1               	goto	i2u334_40
 13351  003056                     i2l1026:
 13352  003056  5006               	movf	___awmod@sign,w,c
 13353  003058  B4D8               	btfsc	status,2,c
 13354  00305A  D004               	goto	i2l1027
 13355  00305C  6C01               	negf	___awmod@dividend,c
 13356  00305E  1E02               	comf	___awmod@dividend+1,f,c
 13357  003060  B0D8               	btfsc	status,0,c
 13358  003062  2A02               	incf	___awmod@dividend+1,f,c
 13359  003064                     i2l1027:
 13360  003064  C001  F001         	movff	___awmod@dividend,?___awmod
 13361  003068  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 13362  00306C  0012               	return	
 13363  00306E                     __end_of___awmod:
 13364                           	opt stack 0
 13365                           pclatu	equ	0xFFB
 13366                           pclath	equ	0xFFA
 13367                           tblptru	equ	0xFF8
 13368                           tblptrh	equ	0xFF7
 13369                           tblptrl	equ	0xFF6
 13370                           tablat	equ	0xFF5
 13371                           prodh	equ	0xFF4
 13372                           prodl	equ	0xFF3
 13373                           intcon	equ	0xFF2
 13374                           intcon3	equ	0xFF0
 13375                           indf0	equ	0xFEF
 13376                           postinc0	equ	0xFEE
 13377                           fsr0h	equ	0xFEA
 13378                           fsr0l	equ	0xFE9
 13379                           wreg	equ	0xFE8
 13380                           indf1	equ	0xFE7
 13381                           postdec1	equ	0xFE5
 13382                           fsr1h	equ	0xFE2
 13383                           fsr1l	equ	0xFE1
 13384                           indf2	equ	0xFDF
 13385                           postinc2	equ	0xFDE
 13386                           postdec2	equ	0xFDD
 13387                           fsr2h	equ	0xFDA
 13388                           fsr2l	equ	0xFD9
 13389                           status	equ	0xFD8
 13390                           pclatu	equ	0xFFB
 13391                           pclath	equ	0xFFA
 13392                           tblptru	equ	0xFF8
 13393                           tblptrh	equ	0xFF7
 13394                           tblptrl	equ	0xFF6
 13395                           tablat	equ	0xFF5
 13396                           prodh	equ	0xFF4
 13397                           prodl	equ	0xFF3
 13398                           intcon	equ	0xFF2
 13399                           intcon3	equ	0xFF0
 13400                           indf0	equ	0xFEF
 13401                           postinc0	equ	0xFEE
 13402                           fsr0h	equ	0xFEA
 13403                           fsr0l	equ	0xFE9
 13404                           wreg	equ	0xFE8
 13405                           indf1	equ	0xFE7
 13406                           postdec1	equ	0xFE5
 13407                           fsr1h	equ	0xFE2
 13408                           fsr1l	equ	0xFE1
 13409                           indf2	equ	0xFDF
 13410                           postinc2	equ	0xFDE
 13411                           postdec2	equ	0xFDD
 13412                           fsr2h	equ	0xFDA
 13413                           fsr2l	equ	0xFD9
 13414                           status	equ	0xFD8
 13415                           
 13416                           	psect	rparam
 13417  0000                     pclatu	equ	0xFFB
 13418                           pclath	equ	0xFFA
 13419                           tblptru	equ	0xFF8
 13420                           tblptrh	equ	0xFF7
 13421                           tblptrl	equ	0xFF6
 13422                           tablat	equ	0xFF5
 13423                           prodh	equ	0xFF4
 13424                           prodl	equ	0xFF3
 13425                           intcon	equ	0xFF2
 13426                           intcon3	equ	0xFF0
 13427                           indf0	equ	0xFEF
 13428                           postinc0	equ	0xFEE
 13429                           fsr0h	equ	0xFEA
 13430                           fsr0l	equ	0xFE9
 13431                           wreg	equ	0xFE8
 13432                           indf1	equ	0xFE7
 13433                           postdec1	equ	0xFE5
 13434                           fsr1h	equ	0xFE2
 13435                           fsr1l	equ	0xFE1
 13436                           indf2	equ	0xFDF
 13437                           postinc2	equ	0xFDE
 13438                           postdec2	equ	0xFDD
 13439                           fsr2h	equ	0xFDA
 13440                           fsr2l	equ	0xFD9
 13441                           status	equ	0xFD8
 13442                           
 13443                           	psect	temp
 13444  00007E                     btemp:
 13445                           	opt stack 0
 13446  00007E                     	ds	1
 13447  0000                     int$flags	set	btemp
 13448  0000                     wtemp6	set	btemp+1
 13449                           pclatu	equ	0xFFB
 13450                           pclath	equ	0xFFA
 13451                           tblptru	equ	0xFF8
 13452                           tblptrh	equ	0xFF7
 13453                           tblptrl	equ	0xFF6
 13454                           tablat	equ	0xFF5
 13455                           prodh	equ	0xFF4
 13456                           prodl	equ	0xFF3
 13457                           intcon	equ	0xFF2
 13458                           intcon3	equ	0xFF0
 13459                           indf0	equ	0xFEF
 13460                           postinc0	equ	0xFEE
 13461                           fsr0h	equ	0xFEA
 13462                           fsr0l	equ	0xFE9
 13463                           wreg	equ	0xFE8
 13464                           indf1	equ	0xFE7
 13465                           postdec1	equ	0xFE5
 13466                           fsr1h	equ	0xFE2
 13467                           fsr1l	equ	0xFE1
 13468                           indf2	equ	0xFDF
 13469                           postinc2	equ	0xFDE
 13470                           postdec2	equ	0xFDD
 13471                           fsr2h	equ	0xFDA
 13472                           fsr2l	equ	0xFD9
 13473                           status	equ	0xFD8


Data Sizes:
    Strings     368
    Constant    151
    Data        91
    BSS         466
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65     125
    BANK0           128     38     127
    BANK1           256      0     208
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_30(CODE[1]), STR_28(CODE[1]), STR_25(CODE[1]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[2]), current_set(BANK0[5]), STR_19(CODE[2]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), final_set(BANK1[40]), current_set(BANK0[5]), temp_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), final_set(BANK1[40]), current_set(BANK0[5]), temp_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), 
		 -> STR_49(CODE[5]), STR_48(CODE[5]), STR_47(CODE[5]), STR_46(CODE[4]), 
		 -> STR_45(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), 
		 -> STR_41(CODE[4]), STR_40(CODE[3]), STR_39(CODE[3]), STR_38(CODE[3]), 
		 -> STR_37(CODE[2]), STR_36(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK0[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_54(CODE[7]), number(COMRAM[2]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_33(CODE[3]), STR_32(CODE[9]), STR_31(CODE[12]), STR_29(CODE[7]), 
		 -> STR_27(CODE[3]), STR_26(CODE[11]), STR_24(CODE[3]), STR_23(CODE[9]), 
		 -> STR_18(CODE[15]), STR_17(CODE[13]), STR_16(CODE[16]), STR_15(CODE[15]), 
		 -> STR_14(CODE[15]), STR_13(CODE[15]), STR_12(CODE[15]), STR_11(CODE[10]), 
		 -> STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[12]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[14]), STR_4(CODE[15]), STR_3(CODE[21]), 
		 -> STR_2(CODE[11]), STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), final_set(BANK1[40]), current_set(BANK0[5]), temp_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _get_RTC_final->___wmul
    ___wmul->___awdiv
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   17331
                                             36 BANK0      2     2      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _I2C_sendData
                      _get_RTC_final
                            _initLCD
                         _initialize
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4    6746
                                             14 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_RTC_final                                        1     1      0    6052
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2929
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1312
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0    1788
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1766
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     664
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0   13266
                                             38 COMRAM    27    27      0
                            ___awmod
                              _check
         _generate_compartment_array
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            30    22      8    3206
                                             12 COMRAM    26    18      8
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (6) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _generate_compartment_array                           4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_RTC_final
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   ___awmod
   _check
   _generate_compartment_array
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     26      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     294      34        0.0%
DATA                 0      0     294       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 15:12:41 2018

                                  _B 005F                                    _N 005D  
                                  _S 005B                                    _W 0059  
                                  _i 0065                                    _j 0067  
                 i2_I2C_Master_Start 3630                           _B_dispense 007B  
                 i2_I2C_Master_Write 360E                          _rotate_gear 007D  
                        __CFG_CPD$ON 000000                         ___awdiv@sign 00C7  
                ___wmul@multiplicand 00CC                   i2___lwdiv@dividend 0001  
                        __CFG_BORV$3 000000                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l340 23D6  
                                l341 23DE                                  l334 2300  
                                l343 2612                                  l417 2A90  
                                l338 237A                                  l800 1BE6  
                                l811 1D22                                  l803 1C8C  
                                l820 1D7E                                  l812 1CDC  
                                l806 1D12                                  l831 1E72  
                                l807 1CA6                                  l832 1DCE  
                                l816 1D3C                                  l833 1E84  
                                l817 1D60                                  l834 1E1E  
                                l818 1D68                                  l819 1D98  
                                l771 1A76                                  l828 1DC8  
                                l780 1AD2                                  l772 1A86  
                                l829 1E8A                                  l782 1C24  
                                l790 1B66                                  l774 1A9E  
                                l791 1B76                                  l775 1A96  
                                l792 1B70                                  l794 1BC2  
                                l787 1C5C                                  l796 1BD2  
                                l788 1B38                                  l797 1BCC  
                                l789 1B3E                                  l799 1C12  
                       __CFG_CPB$OFF 000000                  ?i2_I2C_Master_Start 0001  
                ?i2_I2C_Master_Write 0002                      _compartment_pos 00A6  
                       ___awmod@sign 0006                                  prod 000FF3  
                      _assembly_step 00A2                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                         __CFG_WDT$OFF 000000  
                               l1012 2D46                                 l1013 2D50  
                               l1005 2CF8                                 l1014 2D5E  
                               l1006 2D08                                 l1008 2D26  
                               l1009 2D1E                                 l1250 31D0  
                               l1251 31DA                                 l1260 338E  
                               l1261 3398                                 l1246 31B0  
                               l1247 31A8                                 l1167 353C  
                               l1256 3376                                 l1193 2EA4  
                               l1257 336E                                 l1194 2E98  
                               l1197 2ED8                                 l1198 2EE6  
                               l3812 1BE6                                 l4620 237A  
                               l3808 1BCC                                 l3852 1CE0  
                               l3926 2AD0                                 l3838 1CAA  
                               l3936 2AF6                                 l3946 29E2  
                               _ADON 007E10                                 STR_1 FF54  
                               STR_2 FF91                                 STR_3 FE8E  
                               STR_4 FF19                                 STR_5 FF46  
                               STR_6 FEC7                                 STR_7 FED8  
                               STR_8 FF6E                                 STR_9 FEE9  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               u2305 347E                                 _LATE 000F8D  
                               u2306 3480                                 u2420 2EA8  
                               u2245 2C9A                                 u2246 2C9C  
                               u2255 2CDE                                 u2256 2CE0  
                               u2450 31B4                                 u2380 2D2A  
                               u2480 337A                                 u2720 1C08  
                               u2635 310A                                 u2900 1DB6  
                               u2727 1BFE                                 u2920 1E94  
                               u2680 1BA4                                 u4507 24F6  
                               u4517 250C                                 u2950 2AF6  
                               u2687 1B9A                                 u4607 264A  
                               u4527 2538                                 u4447 2426  
                               u4617 266A                                 u4537 2554  
                               u4457 2442                                 u2890 1DA0  
                               u3850 23EE                                 u4707 2CC4  
                               u4627 2694                                 u4547 256A  
                               u4467 247C                                 u4717 2CCE  
                               u4637 26B0                                 u4557 2596  
                               u4477 2498                                 u4647 3572  
                               u4567 25B2                                 u4487 24AE  
                               u4657 323E                                 u4577 25C8  
                               u4497 24DA                                 u4667 3272  
                               u4587 25EC                                 u4677 358A  
                               u4597 2608                                 u4687 2C80  
                               u4697 2C8A                                 _main 22CC  
           __end_of_interruptHandler 1A6A                                 _keys FDF7  
                               _mode 00FA                                 _temp 0069  
                               _time 0052                                 _prev 00A8  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                 i2___lwdiv@quotient 0005                                 indf0 000FEF  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 007E                                 _strs FE2A  
               ??i2_I2C_Master_Start 0002                 ??i2_I2C_Master_Write 0004  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                    __end_ofi2_putch 35D2                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000                          i2_lcdNibble 2D68  
                   __end_of_LCD_LEFT FE25                         _total_number 009C  
              I2C_Master_Read@ackBit 00C3                     ?_I2C_Master_Init 00CF  
                   ?_I2C_Master_Read 0001       generate_compartment_array@step 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
                              ?_main 0001                      __end_of___awdiv 2D68  
                              STR_10 FEA3                                STR_11 FF9C  
                              STR_20 FFEB                                STR_12 FF28  
                              STR_21 FFEF                                STR_13 FF37  
                              STR_30 FF18                                STR_22 FFF3  
                              STR_14 FF28                                STR_15 FF37  
                              STR_23 FFA6                                STR_31 FF7A  
                              STR_40 FFF2                                STR_24 FFF9  
                              STR_32 FFAF                                STR_16 FEFA  
                              STR_25 FF18                                STR_41 FFE9  
                              STR_17 FF61                                STR_34 FFFC  
                              STR_42 FFED                                STR_50 FFCB  
                              STR_26 FF86                                STR_18 FF0A  
                              STR_35 FFEB                                STR_27 FFF9  
                              STR_19 FFFC                                STR_43 FFF1  
                              STR_51 FFD0                                STR_28 FF18  
                              STR_36 FFEF                                STR_44 FFCC  
                              STR_52 FFC6                      __end_of___awmod 306E  
                              STR_37 FFF3                                STR_45 FFD6  
                              STR_53 FFE4                                STR_29 FFBF  
                              STR_38 FFEA                                STR_46 FFF5  
                              STR_54 FFB8                                STR_39 FFEE  
                              STR_47 FFDA                                STR_55 FEB6  
                              STR_48 FFDF                                STR_49 FFD5  
                    __end_of___lldiv 2EF8                      ___awdiv@divisor 00C4  
                    __end_of___lwdiv 31E4                      __end_of___lwmod 33A2  
                              i2l400 18D2                                i2l401 1880  
                              i2l410 19BC                                i2l402 190C  
                              i2l403 1888                                i2l412 19F2  
                              i2l404 1890                                i2l405 1898  
                              i2l406 18A0                                i2l407 18AA  
                              i2l408 196C                                i2l361 0F68  
                              i2l370 1290                                i2l363 1032  
                              i2l355 0EF0                                i2l380 13DC  
                              i2l372 12B4                                i2l373 1458  
                              i2l365 1156                                i2l702 290E  
                              i2l390 1754                                i2l382 1424  
                              i2l374 1304                                i2l366 105A  
                              i2l358 1014                                i2l703 26D6  
                              i2l391 15D2                                i2l383 144A  
                              i2l359 0F18                                i2l800 201A  
                              i2l384 17AE                                i2l376 134C  
                              i2l368 10AA                                i2l705 271A  
                              i2l393 16D4                                i2l385 1470  
                              i2l706 276E                                i2l394 174C  
                              i2l386 14B2                                i2l378 1394  
                              i2l707 27D2                                i2l811 2150  
                              i2l803 20BA                                i2l387 14F4  
                              i2l708 2846                                i2l660 019A  
                              i2l820 21AC                                i2l812 210A  
                              i2l388 1536                                i2l709 28CA  
                              i2l389 1578                                i2l670 04E8  
                              i2l662 023C                                i2l654 0074  
                              i2l806 2140                                i2l831 2292  
                              i2l807 20D4                                i2l680 091C  
                              i2l672 059C                                i2l664 02DE  
                              i2l656 00D6                                i2l832 21F6  
                              i2l816 216A                                i2l833 22A2  
                              i2l817 218E                                i2l690 0DA2  
                              i2l682 0A0C                                i2l674 068A  
                              i2l666 0380                                i2l658 0138  
                              i2l834 2240                                i2l818 2196  
                              i2l819 21C2                                i2l771 1EBC  
                              i2l684 0AFC                                i2l676 0778  
                              i2l668 0434                                i2l828 21F0  
                              i2l780 1F12                                i2l772 1ECC  
                              i2l829 22A8                                i2l686 0BEC  
                              i2l678 082C                                i2l782 2056  
                              i2l790 1FA0                                i2l774 1EE0  
                              i2l791 1FAE                                i2l775 1EDA  
                              i2l696 30CA                                i2l688 0CDC  
                              i2l792 1FAA                                i2l794 1FF8  
                              i2l787 208C                                i2l796 2008  
                              i2l788 1F74                      ___awdiv@counter 00C6  
                              i2l797 2002                                i2l789 1F78  
                              i2l799 2044                                _PORTB 000F81  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _B_max 01CE  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                              _N_max 01CC                        __CFG_WRT3$OFF 000000  
                    __end_of_lcdInst 3592                        _N_spacingTime 013C  
                              _S_max 01CA                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                              _W_max 01C8                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 3282                                _check 306E  
                     __CFG_EBTRB$OFF 000000                           i2isdigit@c 0003  
                              _angle 00B4                      __end_of_dpowers FE12  
                              _array FE21                                _error 0146  
                    __end_of_isdigit 3544                                _valid 009E  
                              _state 0063                                _putch 3562  
                  _compartment_array 00E8                           _N_dispense 007A  
                              pclath 000FFA                                tablat 000FF5  
                  _LCDinterruptState 00B7                     __end_ofi2___wmul 34FE  
                              status 000FD8          I2C_Master_Read@receivedByte 00C4  
                              wtemp6 007F                      __end_of_strncmp 2E74  
                 __size_ofi2___awdiv 0084                       __CFG_PBADEN$ON 000000  
                      i2printf@width 0024                __size_of_I2C_sendData 0028  
                 __size_ofi2___lldiv 0082                     __end_ofi2_printf 22CC  
                 __size_ofi2___lwdiv 0052                   __size_ofi2___lwmod 0042  
                    __initialization 2BC0                    i2___lldiv@divisor 0005  
                 __size_ofi2_lcdInst 0014                         __end_of_main 26D4  
                  i2___lldiv@counter 000D                         __end_of_keys FE08  
                         i2printf@ap 001D                           i2printf@cp 001B  
                       __end_of_strs FE8E                   __size_ofi2_initLCD 004C  
                 __size_ofi2_isdigit 001E                       __CFG_OSC$HSPLL 000000  
                  __end_of_LCD_RIGHT FE26                               ??_main 00E6  
                         _S_dispense 00FE                        __activetblptr 000003  
                  ?_I2C_Master_Start 0001                    ?_I2C_Master_Write 00C3  
                             ?_check 0001                   ??_I2C_Master_Start 00C3  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                 ??_I2C_Master_Write 00C5                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 00C2  
                    i2lcdNibble@data 0002                               ?_putch 0001  
                       _I2C_sendData 34B0                      i2lcdNibble@temp 0001  
                             _INT1IE 007F83                               _INT1IF 007F80  
                             i2l1012 2F5A                               i2l1021 3034  
                             i2l1013 2F64                               i2l1005 2F0C  
                             i2l1022 302C                               i2l1014 2F72  
                             i2l1006 2F1C                               i2l1008 2F3A  
                             i2l1025 304C                               i2l1009 2F32  
                             i2l1026 3056                               i2l1018 3012  
                             i2l1027 3064                               i2l1019 301E  
                             i2l1400 32D0                               i2l1250 3222  
                             i2l1251 322C                               i2l1260 33D0  
                             i2l1413 2E5A                               i2l1261 33DA  
                             i2l1414 2DF0                               i2l1246 3202  
                             i2l1407 332A                               i2l1415 2E52  
                             i2l1247 31FA                               i2l1167 355A  
                             i2l1408 3322                               i2l1256 33B8  
                             i2l1193 2FAA                               i2l1257 33B0  
                             i2l1194 2F9E                               i2l1197 2FDE  
                             i2l1390 33F2                               i2l1198 2FEC  
                             i2l1391 33EE                               i2l1393 340A  
                             i2l1394 3402                               i2l1399 32D8  
                             i2l5024 16E2                               i2l4402 201A  
                             i2l4248 30C0                               i2l5136 1A1C  
                             i2l4442 210E                               i2l5138 1A1E  
                             i2l4428 20D8                               i2l4398 2002  
                             i2l4816 10A2                               i2l4770 0F60  
                             i2l3994 2DF0                               i2l4796 102E  
                          ??i2_putch 0003                               _SSPADD 000FC8  
                             _SSPBUF 000FC9                               _B_done 0136  
                    _openHandle_data 0068                               _N_done 0134  
                             _S_done 0132                       __CFG_XINST$OFF 000000  
                             _W_done 0130                               ___wmul 3488  
                          ??___awdiv 00C6                       __CFG_STVREN$ON 000000  
                          ??___awmod 0005                            ??___lldiv 00CA  
                          ??___lwdiv 00C6                            ??___lwmod 00CD  
                   __end_of_is_valid 0E68                               clear_0 2C26  
                             clear_1 2C32                               clear_2 2C3E  
                             clear_3 2C4A                     ___awdiv@quotient 00C8  
                    ___awmod@divisor 0003                               _number 0070  
                    ___awmod@counter 0005                            ??_lcdInst 00C4  
                             _printf 1A6A                               _strcat 33E4  
                             _strcmp 32CE                               _strcpy 3318  
                     i2___awdiv@sign 0006                            ??_initLCD 00C5  
                 _compartment_number 0042                         __pdataCOMRAM 0072  
                          ??_isdigit 00C2                    __end_ofi2___awdiv 2F7C  
                  __end_ofi2___lldiv 2FFE                    __end_ofi2___lwdiv 3236  
                       __mediumconst FDF6                    __end_ofi2___lwmod 33E4  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                    __end_ofi2_lcdInst 35E6  
                          ??_strncmp 000D                    __end_ofi2_initLCD 32CE  
                  __end_ofi2_isdigit 3562                           __accesstop 0080  
            __end_of__initialization 2C50                __end_of_get_RTC_final 2BC0  
                      ___rparam_used 000001                   i2___lwmod@dividend 0008  
               __end_of_happynewyear FE21                       __pcstackCOMRAM 0001  
                 i2___lldiv@dividend 0001                         __pidataBANK0 3592  
                       __pidataBANK1 3426              i2I2C_Master_Read@ackBit 0002  
                      __end_of_check 30D4                        __end_of_array FE24  
                      __end_of_putch 357A                          i2printf@idx 0019  
                        i2printf@len 001F                          i2printf@val 0021  
                      _B_spacingTime 013E                            ?i2___wmul 0001  
                 __size_of_lcdNibble 0088                          i2putch@data 0003  
                          ?i2_printf 000D                              ??_check 0003  
                            ??_putch 00C4                   i2___lldiv@quotient 0009  
                         __pbssBANK0 0080                           __pbssBANK1 0100  
                         __pbssBANK2 0200                    ?_interruptHandler 0001  
                 ??_interruptHandler 0027                        _init_position 00F8  
                       ?i2_lcdNibble 0001                              ?___wmul 00CA  
         i2I2C_Master_Init@clockFreq 000E                              ?_printf 00D0  
                            ?_strcat 0001                              ?_strcmp 0001  
                            ?_strcpy 0007                           ??i2___wmul 0005  
                       _gear_counter 00AA                           _final_time 0080  
                         ??i2_printf 0015                 lcd@LCDinterruptState 006A  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                              _B_array 01B8  
                            i2_putch 35BE                            ?_is_valid 0001  
                            _N_array 0198          __size_ofi2_I2C_Master_Start 0008  
                  __end_of_lcdNibble 2CE2          __size_ofi2_I2C_Master_Write 000A  
                            _S_array 01A8                              __Hparam 0000  
                         _hr_initial 008E                              __Lparam 0000  
                            _W_array 0100                              ___awdiv 2CE2  
                            ___awmod 2FFE                              ___lldiv 2E74  
                    __size_of___wmul 0028                              ___lwdiv 3190  
                            ___lwmod 335E             interruptHandler@keypress 0040  
                            __pcinit 2BC0                              __ramtop 1000  
                         _initialize 2940                              _lcdInst 357A  
                            __ptext0 22CC                              __ptext1 1A6A  
                            __ptext2 3562                              __ptext3 3522  
                            __ptext4 335E                              __ptext5 3190  
                            __ptext6 2940                              __ptext7 3236  
                            __ptext8 357A                              __ptext9 2C5A  
                    __size_of_printf 0448                      __size_of_strcat 0042  
                    __size_of_strcmp 004A                      __size_of_strcpy 0046  
                            _initLCD 3236                    __end_of_hexpowers FE1A  
                            _counter 00A0                              _dpowers FE08  
                            _isdigit 3522                     ___awmod@dividend 0001  
                          _LCD_RIGHT FE25             __size_of_I2C_Master_Init 0060  
           __size_of_I2C_Master_Read 002A             __size_of_I2C_Master_Wait 0014  
           __size_of_I2C_Master_Stop 0008                        _S_spacingTime 013A  
                            _strncmp 2DEE                       __pintcode_body 0E68  
               end_of_initialization 2C50                __end_of_LCD_SIZE_HORZ FE28  
              __end_of_LCD_SIZE_VERT FE27         ??_generate_compartment_array 0003  
                       _final_number 0120                              int_func 0E68  
                i2___wmul@multiplier 0001                           ??_is_valid 0007  
                     _operation_done 00AC            __size_of_I2C_Master_Start 0008  
          __size_of_I2C_Master_Write 000A                      ___lldiv@divisor 00C6  
                       _close_handle 0072                      ___lldiv@counter 00CE  
                            printf@c 00E5                              printf@f 00D0  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                            strcmp@r 0006                            _PORTAbits 000F80  
                         _prev_state 009A                           _servo_ramp 0073  
__size_of_generate_compartment_array 026C                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                  i2_I2C_Master_Init 3134                    i2_I2C_Master_Read 34FE  
                  i2_I2C_Master_Wait 35E6                         _happynewyear FE1A  
                  i2_I2C_Master_Stop 3628                            i2___awdiv 2EF8  
                         _white_tape 00B2                            _B_counter 0144  
                  i2___lwdiv@divisor 0003                            i2___lldiv 2F7C  
                          i2___lwdiv 31E4                            i2___lwmod 33A2  
                 ?i2_I2C_Master_Init 000E                    i2___lwdiv@counter 0007  
                 ?i2_I2C_Master_Read 0001                   ?i2_I2C_Master_Wait 0001  
                 ?i2_I2C_Master_Stop 0001                            i2_lcdInst 35D2  
                        printf@width 00E3                            i2_initLCD 3282  
                 i2___awdiv@dividend 0001                  ??i2_I2C_Master_Init 0012  
                ??i2_I2C_Master_Read 0002                            i2_isdigit 3544  
                ??i2_I2C_Master_Wait 0001                  ??i2_I2C_Master_Stop 0002  
                     __end_of___wmul 34B0                 __size_ofi2_lcdNibble 0086  
                      __pidataCOMRAM 35F8                          ?_initialize 0001  
                      i2lcdInst@data 0003                     i2___wmul@product 0005  
                     __end_of_printf 1EB2                            _N_counter 0142  
                     __end_of_strcat 3426                       __end_of_strcmp 3318  
                       i2printf@flag 0023                       __end_of_strcpy 335E  
          __end_ofi2_I2C_Master_Init 3190            __end_ofi2_I2C_Master_Read 3522  
          __end_ofi2_I2C_Master_Wait 35F8                         i2printf@prec 001A  
                start_initialization 2BC0            __end_ofi2_I2C_Master_Stop 3630  
                 i2___awdiv@quotient 0007                    __size_ofi2___wmul 0026  
                          i2printf@c 0026                            i2printf@f 000D  
                         ?i2___awdiv 0001                           ?i2___lldiv 0001  
                         ?i2___lwdiv 0001                           ?i2___lwmod 0008  
                  __size_ofi2_printf 041A                            _S_counter 0098  
                  ??_I2C_Master_Init 00D3                    ??_I2C_Master_Read 00C3  
                  ??_I2C_Master_Wait 00C2                           ?i2_lcdInst 0001  
                  ??_I2C_Master_Stop 00C3                         _counter_step 0061  
                         ?i2_initLCD 0001                           ?i2_isdigit 0001  
                          _W_counter 0140                    interruptHandler@i 003E  
                           ??___wmul 00CE             I2C_Master_Init@clockFreq 00CF  
                        __pdataBANK0 00E8                          __pdataBANK1 0198  
                   __CFG_LPT1OSC$OFF 000000                             ??_printf 00D4  
          __size_of_interruptHandler 1A62                             ??_strcat 0005  
                           ??_strcmp 0005                             ??_strcpy 000B  
             __size_of_get_RTC_final 012E                          __pbssCOMRAM 0042  
                        _change_mode 00B0                        __pcstackBANK0 00C2  
                  i2___lwmod@divisor 000A                    i2___lwmod@counter 000C  
                       _isdigit$1238 00C3   __end_of_generate_compartment_array 2940  
         _generate_compartment_array 26D4                             ?i2_putch 0001  
                __size_of_initialize 0152                         _current_set2 006B  
                   _I2C_Master_Start 3620                     _I2C_Master_Write 3604  
                  __size_of_is_valid 0E56                     ___lwdiv@dividend 00C2  
                       _initial_time 0088                    __CFG_CCP2MX$PORTC 000000  
                          __pintcode 0008                        __pmediumconst FDF6  
                          _lcdNibble 2C5A                             ?___awdiv 00C2  
                           ?___awmod 0001                             ?___lldiv 00C2  
                           ?___lwdiv 00C2                             ?___lwmod 00C9  
                          _final_set 0170                             ?_lcdInst 0001  
                           ?_initLCD 0001                             ?_isdigit 0001  
         __size_ofi2_I2C_Master_Init 005C           __size_ofi2_I2C_Master_Read 0024  
         __size_ofi2_I2C_Master_Wait 0012           __size_ofi2_I2C_Master_Stop 0008  
                          _hexpowers FE12                       __size_of_check 0066  
                   ___lwdiv@quotient 00C6                          ??i2___awdiv 0005  
                        ??i2___lldiv 0009                        _W_spacingTime 0138  
                      ?_I2C_sendData 0001                            _min_final 0084  
                           ?_strncmp 0007                          ??i2___lwdiv 0005  
                        ??i2___lwmod 000C                       __size_of_putch 0018  
                          _sec_final 0082                             _LCD_LEFT FE24  
         __end_ofi2_I2C_Master_Start 3638           __end_ofi2_I2C_Master_Write 3618  
                        ??i2_lcdInst 0003                       ___wmul@product 00CE  
                           _LATDbits 000F8C                          ??i2_initLCD 0004  
                        ??i2_isdigit 0001                        _get_RTC_final 2A92  
                      _operationTime 00A4                             i2u303_40 2E1E  
                           i2u232_40 330C                             i2u400_40 10C6  
                           i2u401_40 1152                             i2u420_40 16E2  
                           i2u228_45 2DA6                             i2u228_46 2DA8  
                           i2u325_40 307E                             i2u261_40 33BC  
                           i2u229_45 2DEA                             i2u229_46 2DEC  
                           i2u334_40 3038                             i2u326_40 308E  
                           i2u422_40 1766                             i2u327_40 309E  
                           i2u255_40 2FAE                             i2u343_40 1FDC  
                           i2u343_47 1FD2                             i2u328_40 30AE  
                           i2u329_40 30C0                             i2u337_45 3168  
                           i2u258_40 3206                             i2u418_40 15D0  
                           i2u338_45 351A                             i2u338_46 351C  
                           i2u347_40 203C                             i2u347_47 2032  
                           i2u372_40 2F3E                             i2u364_40 21CA  
                           i2u365_40 21DE                             i2u367_40 22B0  
                           i2u391_40 0F14                            _operation 00AE  
                           i2u480_47 167A                             i2u472_47 0F9C  
                           i2u393_40 0F84                             i2u481_47 16BA  
                           i2u473_47 0FF2                             i2u298_40 3354  
                           i2u298_47 334A                             i2u490_47 32BC  
                           i2u482_47 172E                             i2u474_47 10DE  
                           i2u491_47 35DE                             i2u483_47 1780  
                           i2u475_47 1134                             i2u492_47 2D8C  
                           i2u484_47 17F0                             i2u476_47 126C  
                           i2u493_47 2D96                             i2u485_47 18C4  
                           i2u477_47 1280                             i2u398_40 1056  
                           i2u494_47 2DD0                             i2u486_47 192C  
                           i2u478_47 143E                             i2u495_47 2DDA  
                           i2u487_47 194C                             i2u479_47 15A2  
                           i2u488_47 35CA                             i2u489_47 3288  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
      i2I2C_Master_Write@byteToWrite 0002                            _nuts_data 00B6  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 00CA  
                           i2___wmul 34D8                        lcdNibble@data 00C3  
                           _B_remain 0096                           printf@flag 00E2  
                      lcdNibble@temp 00C2                           printf@prec 00D9  
                  i2___awdiv@divisor 0003                    i2___awdiv@counter 0005  
                           i2_printf 1EB2                       ??_I2C_sendData 00C5  
                     _LCD_HORZ_LIMIT FE29                            copy_data0 2BD4  
                          copy_data1 2BF4                            copy_data2 2C14  
               interruptHandler@temp 0041                             _N_remain 0094  
                   __size_ofi2_putch 0014                       ?_get_RTC_final 0001  
                           _S_remain 0092                             __Hrparam 0000  
              I2C_sendData@char_data 00C5                             __Lrparam 0000  
                           _W_remain 0090                   __CFG_BOREN$SBORDIS 000000  
                   __size_of___awdiv 0086                     __size_of___awmod 0070  
              i2___wmul@multiplicand 0003                     __size_of___lldiv 0084  
                _rotate_1compartment 007C                     __size_of___lwdiv 0054  
                   __size_of___lwmod 0044                         ??_initialize 00C2  
                   _interruptHandler 0008                     __size_of_lcdInst 0018  
                    _I2C_Master_Init 30D4                      _I2C_Master_Read 345E  
                   __size_of_initLCD 004C                          _current_set 00BD  
                    _I2C_Master_Wait 35AA                           strcat@from 0003  
                    _I2C_Master_Stop 3618               __end_of_LCD_HORZ_LIMIT FE2A  
                   __size_of_isdigit 0022                      ___lwdiv@divisor 00C4  
                    ___lwdiv@counter 00C8                             __ptext10 2A92  
                           __ptext11 3488                             __ptext20 2E74  
                           __ptext12 2CE2                             __ptext13 345E  
                           __ptext30 2EF8                             __ptext22 1EB2  
                           __ptext14 34B0                             __ptext31 360E  
                           __ptext23 35BE                             __ptext15 3604  
                           __ptext40 33E4                             __ptext32 3628  
                           __ptext24 3544                             __ptext16 3618  
                           __ptext41 0012                             __ptext33 3630  
                           __ptext25 33A2                             __ptext17 3620  
                           __ptext42 34D8                             __ptext34 34FE  
                           __ptext26 31E4                             __ptext18 35AA  
                           __ptext43 32CE                             __ptext35 35E6  
                           __ptext27 3282                             __ptext19 30D4  
                           __ptext44 26D4                             __ptext36 3134  
                           __ptext28 35D2                             __ptext45 306E  
                           __ptext37 2F7C                             __ptext29 2D68  
                           __ptext46 2FFE                             __ptext38 2DEE  
                           __ptext39 3318                             _fastener 0200  
                     _LCD_VERT_LIMIT FE28                          _min_initial 008C  
                   __size_of_strncmp 0086                             _hr_final 0086  
                         strcpy@from 0009                       i2_isdigit$1238 0002  
                      __size_of_main 0408                             _is_valid 0012  
                         strncmp@len 000B                   __end_of_initialize 2A92  
                        _sec_initial 008A                             _temp_set 00B8  
                      ??i2_lcdNibble 0001                          ??_lcdNibble 00C2  
                           _prev_set 0148                             int$flags 007E  
                          printf@idx 00D8                            printf@len 00DE  
                          printf@val 00E0          I2C_Master_Write@byteToWrite 00C3  
                          putch@data 00C4             __end_of_I2C_Master_Start 3628  
           __end_of_I2C_Master_Write 360E                           _INTCONbits 000FF2  
                       _motorStart_0 0079                         _motorStart_1 0077  
                       _motorStart_2 00FD                         _motorStart_3 0075  
             __end_of_LCD_VERT_LIMIT FE29                             isdigit@c 00C4  
                           intlevel2 0000          ?_generate_compartment_array 0001  
                    ??_get_RTC_final 00D0                        _LCD_SIZE_HORZ FE27  
                   ___lwmod@dividend 00C9                        _LCD_SIZE_VERT FE26  
                   ___lldiv@dividend 00C2                            strncmp@s1 0007  
                          strncmp@s2 0009                             printf@ap 00DC  
                           printf@cp 00DA                 __end_of_I2C_sendData 34D8  
            __end_of_I2C_Master_Init 3134              __end_of_I2C_Master_Read 3488  
            __end_of_I2C_Master_Wait 35BE              __end_of_I2C_Master_Stop 3620  
                        lcdInst@data 00C4                          _motorStop_0 0078  
                        _motorStop_1 0076                          _motorStop_2 00FC  
                        _motorStop_3 0074                  __end_ofi2_lcdNibble 2DEE  
                           strcat@cp 0005                             strcat@to 0001  
                           strcmp@s1 0001                             strcmp@s2 0003  
                   ___lldiv@quotient 00CA                      ___lwmod@divisor 00CB  
                           strcpy@cp 000B                             strcpy@to 0007  
                    ___lwmod@counter 00CD                          _SSPCON1bits 000FC6  
                        _SSPCON2bits 000FC5                          _prev_number 0110  
      i2I2C_Master_Read@receivedByte 0003  
