

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 30 18:05:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _dpowers:
    78                           	opt stack 0
    79  001001  0001               	dw	1
    80  001003  000A               	dw	10
    81  001005  0064               	dw	100
    82  001007  03E8               	dw	1000
    83  001009  2710               	dw	10000
    84  00100B                     __end_of_dpowers:
    85                           	opt stack 0
    86  00100B                     _LCD_LEFT:
    87                           	opt stack 0
    88  00100B  00                 	db	0
    89  00100C                     __end_of_LCD_LEFT:
    90                           	opt stack 0
    91  00100C                     _LCD_RIGHT:
    92                           	opt stack 0
    93  00100C  01                 	db	1
    94  00100D                     __end_of_LCD_RIGHT:
    95                           	opt stack 0
    96  00100D                     _LCD_SIZE_VERT:
    97                           	opt stack 0
    98  00100D  02                 	db	2
    99  00100E                     __end_of_LCD_SIZE_VERT:
   100                           	opt stack 0
   101  00100E                     _LCD_SIZE_HORZ:
   102                           	opt stack 0
   103  00100E  10                 	db	16
   104  00100F                     __end_of_LCD_SIZE_HORZ:
   105                           	opt stack 0
   106  00100F                     _LCD_VERT_LIMIT:
   107                           	opt stack 0
   108  00100F  02                 	db	2
   109  001010                     __end_of_LCD_VERT_LIMIT:
   110                           	opt stack 0
   111  001010                     _LCD_HORZ_LIMIT:
   112                           	opt stack 0
   113  001010  28                 	db	40
   114  001011                     __end_of_LCD_HORZ_LIMIT:
   115                           	opt stack 0
   116  0000                     _SSPBUF	set	4041
   117  0000                     _SSPCON2bits	set	4037
   118  0000                     _SSPADD	set	4040
   119  0000                     _SSPCON2	set	4037
   120  0000                     _SSPCON1	set	4038
   121  0000                     _SSPSTAT	set	4039
   122  0000                     _SSPCON1bits	set	4038
   123  0000                     _ADRESL	set	4035
   124  0000                     _ADRESH	set	4036
   125  0000                     _ADCON0bits	set	4034
   126  0000                     _PORTBbits	set	3969
   127  0000                     _TRISBbits	set	3987
   128  0000                     _TRISCbits	set	3988
   129  0000                     _LATCbits	set	3979
   130  0000                     _ADCON2bits	set	4032
   131  0000                     _ADCON1	set	4033
   132  0000                     _ADCON0	set	4034
   133  0000                     _TRISE	set	3990
   134  0000                     _TRISD	set	3989
   135  0000                     _TRISC	set	3988
   136  0000                     _TRISB	set	3987
   137  0000                     _TRISA	set	3986
   138  0000                     _LATE	set	3981
   139  0000                     _LATC	set	3979
   140  0000                     _LATB	set	3978
   141  0000                     _LATA	set	3977
   142  0000                     _OSCCON	set	4051
   143  0000                     _INTCONbits	set	4082
   144  0000                     _LATD	set	3980
   145  0000                     _LATDbits	set	3980
   146  0000                     _ADON	set	32272
   147  0000                     _RBIF	set	32656
   148  0000                     _RBIE	set	32659
   149  001011                     STR_1:
   150  001011  42                 	db	66	;'B'
   151  001012  5F                 	db	95	;'_'
   152  001013  63                 	db	99	;'c'
   153  001014  6F                 	db	111	;'o'
   154  001015  75                 	db	117	;'u'
   155  001016  6E                 	db	110	;'n'
   156  001017  74                 	db	116	;'t'
   157  001018  3A                 	db	58	;':'
   158  001019  25                 	db	37
   159  00101A  64                 	db	100	;'d'
   160  00101B  00                 	db	0
   161  0000                     
   162                           ; #config settings
   163  00101C  00                 	db	0	; dummy byte at the end
   164  0000                     
   165                           	psect	cinit
   166  001704                     __pcinit:
   167                           	opt stack 0
   168  001704                     start_initialization:
   169                           	opt stack 0
   170  001704                     __initialization:
   171                           	opt stack 0
   172                           
   173                           ; Clear objects allocated to COMRAM (10 bytes)
   174  001704  EE00  F047         	lfsr	0,__pbssCOMRAM
   175  001708  0E0A               	movlw	10
   176  00170A                     clear_0:
   177  00170A  6AEE               	clrf	postinc0,c
   178  00170C  06E8               	decf	wreg,f,c
   179  00170E  E1FD               	bnz	clear_0
   180  001710                     end_of_initialization:
   181                           	opt stack 0
   182  001710                     __end_of__initialization:
   183                           	opt stack 0
   184  001710  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   185  001712  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   186  001714  0E00               	movlw	low (__Lmediumconst shr (0+16))
   187  001716  6EF8               	movwf	tblptru,c
   188  001718  0100               	movlb	0
   189  00171A  EFA1  F009         	goto	_main	;jump to C main() function
   190                           tblptru	equ	0xFF8
   191                           postinc0	equ	0xFEE
   192                           wreg	equ	0xFE8
   193                           
   194                           	psect	bssCOMRAM
   195  000047                     __pbssCOMRAM:
   196                           	opt stack 0
   197  000047                     _W_count:
   198                           	opt stack 0
   199  000047                     	ds	2
   200  000049                     _S_count:
   201                           	opt stack 0
   202  000049                     	ds	2
   203  00004B                     _N_count:
   204                           	opt stack 0
   205  00004B                     	ds	2
   206  00004D                     _B_count:
   207                           	opt stack 0
   208  00004D                     	ds	2
   209  00004F                     	ds	1
   210  000050                     _LCDinterruptState:
   211                           	opt stack 0
   212  000050                     	ds	1
   213                           tblptru	equ	0xFF8
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           
   217                           	psect	cstackBANK0
   218  000080                     __pcstackBANK0:
   219                           	opt stack 0
   220  000080                     main@input:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x0
   224  000080                     	ds	2
   225                           tblptru	equ	0xFF8
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	cstackCOMRAM
   230  000001                     __pcstackCOMRAM:
   231                           	opt stack 0
   232  000001                     ?i2___lwdiv:
   233                           	opt stack 0
   234  000001                     i2lcdNibble@temp:
   235                           	opt stack 0
   236  000001                     i2___lwdiv@dividend:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x0
   240  000001                     	ds	1
   241  000002                     i2lcdNibble@data:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x1
   245  000002                     	ds	1
   246  000003                     i2lcdInst@data:
   247                           	opt stack 0
   248  000003                     i2putch@data:
   249                           	opt stack 0
   250  000003                     i2___lwdiv@divisor:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x2
   254  000003                     	ds	1
   255  000004                     ??i2_initLCD:
   256                           
   257                           ; 1 bytes @ 0x3
   258  000004                     	ds	1
   259  000005                     i2___lwdiv@quotient:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x4
   263  000005                     	ds	2
   264  000007                     i2___lwdiv@counter:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x6
   268  000007                     	ds	1
   269  000008                     ?i2___lwmod:
   270                           	opt stack 0
   271  000008                     i2___lwmod@dividend:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x7
   275  000008                     	ds	2
   276  00000A                     i2___lwmod@divisor:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x9
   280  00000A                     	ds	2
   281  00000C                     i2___lwmod@counter:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0xB
   285  00000C                     	ds	1
   286  00000D                     ?i2_printf:
   287                           	opt stack 0
   288  00000D                     i2printf@f:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0xC
   292  00000D                     	ds	4
   293  000011                     ??i2_printf:
   294                           
   295                           ; 1 bytes @ 0x10
   296  000011                     	ds	1
   297  000012                     i2printf@ap:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x11
   301  000012                     	ds	2
   302  000014                     i2printf@flag:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x13
   306  000014                     	ds	1
   307  000015                     i2printf@prec:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x14
   311  000015                     	ds	1
   312  000016                     i2printf@val:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x15
   316  000016                     	ds	2
   317  000018                     i2printf@c:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0x17
   321  000018                     	ds	1
   322  000019                     ??_interruptHandler:
   323                           
   324                           ; 1 bytes @ 0x18
   325  000019                     	ds	19
   326  00002C                     interruptHandler@input:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x2B
   330  00002C                     	ds	2
   331  00002E                     ??_I2C_Master_Wait:
   332  00002E                     ?___lwdiv:
   333                           	opt stack 0
   334  00002E                     lcdNibble@temp:
   335                           	opt stack 0
   336  00002E                     ___lwdiv@dividend:
   337                           	opt stack 0
   338  00002E                     I2C_Master_Init@clockFreq:
   339                           	opt stack 0
   340                           
   341                           ; 4 bytes @ 0x2D
   342  00002E                     	ds	1
   343  00002F                     lcdNibble@data:
   344                           	opt stack 0
   345  00002F                     I2C_Master_Write@byteToWrite:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x2E
   349  00002F                     	ds	1
   350  000030                     lcdInst@data:
   351                           	opt stack 0
   352  000030                     putch@data:
   353                           	opt stack 0
   354  000030                     ___lwdiv@divisor:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x2F
   358  000030                     	ds	1
   359  000031                     ??_initLCD:
   360  000031                     I2C_sendData@char_data:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x30
   364  000031                     	ds	1
   365  000032                     ___lwdiv@counter:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x31
   369  000032                     	ds	1
   370  000033                     ___lwdiv@quotient:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x32
   374  000033                     	ds	2
   375  000035                     ?___lwmod:
   376                           	opt stack 0
   377  000035                     ___lwmod@dividend:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x34
   381  000035                     	ds	2
   382  000037                     ___lwmod@divisor:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x36
   386  000037                     	ds	2
   387  000039                     ___lwmod@counter:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x38
   391  000039                     	ds	1
   392  00003A                     ?_printf:
   393                           	opt stack 0
   394  00003A                     printf@f:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x39
   398  00003A                     	ds	4
   399  00003E                     ??_printf:
   400                           
   401                           ; 1 bytes @ 0x3D
   402  00003E                     	ds	1
   403  00003F                     printf@ap:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x3E
   407  00003F                     	ds	2
   408  000041                     printf@flag:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x40
   412  000041                     	ds	1
   413  000042                     printf@prec:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x41
   417  000042                     	ds	1
   418  000043                     printf@val:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x42
   422  000043                     	ds	2
   423  000045                     printf@c:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x44
   427  000045                     	ds	1
   428  000046                     ??_main:
   429                           
   430                           ; 1 bytes @ 0x45
   431  000046                     	ds	1
   432                           tblptru	equ	0xFF8
   433                           postinc0	equ	0xFEE
   434                           wreg	equ	0xFE8
   435                           
   436 ;;
   437 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   438 ;;
   439 ;; *************** function _main *****************
   440 ;; Defined at:
   441 ;;		line 25 in file "main.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;		None
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  input           2    0[BANK0 ] int 
   446 ;; Return value:  Size  Location     Type
   447 ;;                  1    wreg      void 
   448 ;; Registers used:
   449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   456 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;Total ram usage:        3 bytes
   460 ;; Hardware stack levels required when called:    7
   461 ;; This function calls:
   462 ;;		_I2C_init
   463 ;;		_I2C_sendData
   464 ;;		_initLCD
   465 ;;		_lcdInst
   466 ;;		_printf
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text0
   473  001342                     __ptext0:
   474                           	opt stack 0
   475  001342                     _main:
   476                           	opt stack 24
   477                           
   478                           ;main.c: 29: OSCCON = 0xF2;
   479                           
   480                           ;incstack = 0
   481  001342  0EF2               	movlw	242
   482  001344  6ED3               	movwf	4051,c	;volatile
   483                           
   484                           ;main.c: 40: LATA = 0x00;
   485  001346  0E00               	movlw	0
   486  001348  6E89               	movwf	3977,c	;volatile
   487                           
   488                           ;main.c: 41: LATB = 0x00;
   489  00134A  0E00               	movlw	0
   490  00134C  6E8A               	movwf	3978,c	;volatile
   491                           
   492                           ;main.c: 42: LATC = 0x00;
   493  00134E  0E00               	movlw	0
   494  001350  6E8B               	movwf	3979,c	;volatile
   495                           
   496                           ;main.c: 43: LATD = 0x00;
   497  001352  0E00               	movlw	0
   498  001354  6E8C               	movwf	3980,c	;volatile
   499                           
   500                           ;main.c: 44: LATE = 0x00;
   501  001356  0E00               	movlw	0
   502  001358  6E8D               	movwf	3981,c	;volatile
   503                           
   504                           ;main.c: 48: TRISA = 0xFF;
   505  00135A  6892               	setf	3986,c	;volatile
   506                           
   507                           ;main.c: 49: TRISB = 0xFF;
   508  00135C  6893               	setf	3987,c	;volatile
   509                           
   510                           ;main.c: 50: TRISC = 0x00;
   511  00135E  0E00               	movlw	0
   512  001360  6E94               	movwf	3988,c	;volatile
   513                           
   514                           ;main.c: 51: TRISD = 0x00;
   515  001362  0E00               	movlw	0
   516  001364  6E95               	movwf	3989,c	;volatile
   517                           
   518                           ;main.c: 52: TRISE = 0x00;
   519  001366  0E00               	movlw	0
   520  001368  6E96               	movwf	3990,c	;volatile
   521                           
   522                           ;main.c: 55: ADCON0 = 0x00;
   523  00136A  0E00               	movlw	0
   524  00136C  6EC2               	movwf	4034,c	;volatile
   525                           
   526                           ;main.c: 56: ADCON1 = 0b00001111;
   527  00136E  0E0F               	movlw	15
   528  001370  6EC1               	movwf	4033,c	;volatile
   529                           
   530                           ;main.c: 57: ADCON2bits.ADFM = 1;
   531  001372  8EC0               	bsf	4032,7,c	;volatile
   532                           
   533                           ;main.c: 62: (INTCONbits.GIE = 1);
   534  001374  8EF2               	bsf	intcon,7,c	;volatile
   535                           
   536                           ;main.c: 63: initLCD();
   537  001376  ECCE  F00A         	call	_initLCD	;wreg free
   538                           
   539                           ;main.c: 64: I2C_init();
   540  00137A  EC5C  F00B         	call	_I2C_init	;wreg free
   541                           
   542                           ;main.c: 69: LATCbits.LATC0 = 1;
   543  00137E  808B               	bsf	3979,0,c	;volatile
   544                           
   545                           ;main.c: 70: TRISCbits.RC0 = 0;
   546  001380  9094               	bcf	3988,0,c	;volatile
   547                           
   548                           ;main.c: 73: RBIE = 1;
   549  001382  86F2               	bsf	intcon,3,c	;volatile
   550                           
   551                           ;main.c: 77: printf("B_count:%d",B_count);
   552  001384  0E11               	movlw	low STR_1
   553  001386  6E3A               	movwf	printf@f,c
   554  001388  0E10               	movlw	high STR_1
   555  00138A  6E3B               	movwf	printf@f+1,c
   556  00138C  C04D  F03C         	movff	_B_count,?_printf+2
   557  001390  C04E  F03D         	movff	_B_count+1,?_printf+3
   558  001394  EC0F  F008         	call	_printf	;wreg free
   559                           
   560                           ;main.c: 78: initLCD();
   561  001398  ECCE  F00A         	call	_initLCD	;wreg free
   562                           
   563                           ;main.c: 80: I2C_sendData(11);
   564  00139C  0E0B               	movlw	11
   565  00139E  EC71  F00B         	call	_I2C_sendData
   566  0013A2                     
   567                           ;main.c: 83: TRISBbits.RB5 = 1;
   568  0013A2  8A93               	bsf	3987,5,c	;volatile
   569                           
   570                           ;main.c: 84: int input = PORTBbits.RB5;
   571  0013A4  AA81               	btfss	3969,5,c	;volatile
   572  0013A6  D003               	goto	u1050
   573  0013A8  6A46               	clrf	??_main& (0+255),c
   574  0013AA  2A46               	incf	??_main& (0+255),f,c
   575  0013AC  D001               	goto	u1058
   576  0013AE                     u1050:
   577  0013AE  6A46               	clrf	??_main& (0+255),c
   578  0013B0                     u1058:
   579  0013B0  5046               	movf	??_main,w,c
   580  0013B2  0100               	movlb	0	; () banked
   581  0013B4  6F80               	movwf	main@input& (0+255),b
   582  0013B6  6B81               	clrf	(main@input+1)& (0+255),b
   583                           
   584                           ; BSR set to: 0
   585                           ;main.c: 85: initLCD();
   586  0013B8  ECCE  F00A         	call	_initLCD	;wreg free
   587                           
   588                           ;main.c: 86: printf("%d",B_count);
   589  0013BC  0E19               	movlw	low (STR_1+8)
   590  0013BE  6E3A               	movwf	printf@f,c
   591  0013C0  0E10               	movlw	high (STR_1+8)
   592  0013C2  6E3B               	movwf	printf@f+1,c
   593  0013C4  C04D  F03C         	movff	_B_count,?_printf+2
   594  0013C8  C04E  F03D         	movff	_B_count+1,?_printf+3
   595  0013CC  EC0F  F008         	call	_printf	;wreg free
   596  0013D0  D7E8               	goto	l152
   597  0013D2                     
   598                           ;main.c: 101: printf("B_count:%d",B_count);
   599  0013D2  0E11               	movlw	low STR_1
   600  0013D4  6E3A               	movwf	printf@f,c
   601  0013D6  0E10               	movlw	high STR_1
   602  0013D8  6E3B               	movwf	printf@f+1,c
   603  0013DA  C04D  F03C         	movff	_B_count,?_printf+2
   604  0013DE  C04E  F03D         	movff	_B_count+1,?_printf+3
   605  0013E2  EC0F  F008         	call	_printf	;wreg free
   606                           
   607                           ;main.c: 102: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   608  0013E6  0E80               	movlw	128
   609  0013E8  ECA5  F00B         	call	_lcdInst
   610  0013EC  0E34               	movlw	52
   611  0013EE  6E46               	movwf	??_main& (0+255),c
   612  0013F0  0EF2               	movlw	242
   613  0013F2                     u1077:
   614  0013F2  2EE8               	decfsz	wreg,f,c
   615  0013F4  D7FE               	bra	u1077
   616  0013F6  2E46               	decfsz	??_main& (0+255),f,c
   617  0013F8  D7FC               	bra	u1077
   618  0013FA  D7EB               	goto	l155
   619  0013FC                     __end_of_main:
   620                           	opt stack 0
   621                           tblptru	equ	0xFF8
   622                           intcon	equ	0xFF2
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           
   626 ;; *************** function _printf *****************
   627 ;; Defined at:
   628 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  f               2   57[COMRAM] PTR const unsigned char 
   631 ;;		 -> STR_4(3), STR_3(11), STR_2(3), STR_1(11), 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  tmpval          4    0        struct .
   634 ;;  cp              3    0        PTR const unsigned char 
   635 ;;  val             2   66[COMRAM] unsigned int 
   636 ;;  ap              2   62[COMRAM] PTR void [1]
   637 ;;		 -> ?i2_printf(2), ?_printf(2), 
   638 ;;  len             2    0        unsigned int 
   639 ;;  c               1   68[COMRAM] char 
   640 ;;  prec            1   65[COMRAM] char 
   641 ;;  flag            1   64[COMRAM] unsigned char 
   642 ;; Return value:  Size  Location     Type
   643 ;;                  2   57[COMRAM] int 
   644 ;; Registers used:
   645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   651 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   654 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;Total ram usage:       12 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    6
   658 ;; This function calls:
   659 ;;		___lwdiv
   660 ;;		___lwmod
   661 ;;		_putch
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           	psect	text1
   668  00101E                     __ptext1:
   669                           	opt stack 0
   670  00101E                     _printf:
   671                           	opt stack 24
   672                           
   673                           ;doprnt.c: 466: va_list ap;
   674                           ;doprnt.c: 499: signed char c;
   675                           ;doprnt.c: 506: signed char prec;
   676                           ;doprnt.c: 508: unsigned char flag;
   677                           ;doprnt.c: 523: union {
   678                           ;doprnt.c: 524: unsigned long vd;
   679                           ;doprnt.c: 525: double integ;
   680                           ;doprnt.c: 526: } tmpval;
   681                           ;doprnt.c: 528: unsigned int val;
   682                           ;doprnt.c: 529: unsigned len;
   683                           ;doprnt.c: 530: const char * cp;
   684                           ;doprnt.c: 533: *ap = __va_start();
   685                           
   686                           ;incstack = 0
   687  00101E  0E3C               	movlw	low (?_printf+2)
   688  001020  6E3F               	movwf	printf@ap,c
   689  001022  0E00               	movlw	high (?_printf+2)
   690  001024  6E40               	movwf	printf@ap+1,c
   691                           
   692                           ;doprnt.c: 536: while(c = *f++) {
   693  001026  D07D               	goto	u970
   694  001028                     
   695                           ;doprnt.c: 538: if(c != '%')
   696  001028  0E25               	movlw	37
   697  00102A  1845               	xorwf	printf@c,w,c
   698  00102C  B4D8               	btfsc	status,2,c
   699  00102E  D004               	goto	l230
   700                           
   701                           ;doprnt.c: 540: {
   702                           ;doprnt.c: 541: (putch(c) );
   703  001030  5045               	movf	printf@c,w,c
   704  001032  EC9B  F00B         	call	_putch
   705                           
   706                           ;doprnt.c: 542: continue;
   707  001036  D075               	goto	u970
   708  001038                     l230:
   709                           
   710                           ;doprnt.c: 543: }
   711                           ;doprnt.c: 548: flag = 0;
   712  001038  0E00               	movlw	0
   713  00103A  6E41               	movwf	printf@flag,c
   714                           
   715                           ;doprnt.c: 822: }
   716                           
   717                           ;doprnt.c: 813: continue;
   718                           
   719                           ;doprnt.c: 802: default:
   720                           
   721                           ;doprnt.c: 698: case 'i':
   722                           ;doprnt.c: 699: break;
   723                           
   724                           ;doprnt.c: 697: case 'd':
   725                           
   726                           ;doprnt.c: 638: goto alldone;
   727                           
   728                           ;doprnt.c: 637: case 0:
   729                           
   730                           ;doprnt.c: 635: switch(c = *f++) {
   731  00103C  C03A  FFF6         	movff	printf@f,tblptrl
   732  001040  C03B  FFF7         	movff	printf@f+1,tblptrh
   733  001044  4A3A               	infsnz	printf@f,f,c
   734  001046  2A3B               	incf	printf@f+1,f,c
   735  001048                     	if	0	;tblptru may be non-zero
   736  001048                     	endif
   737  001048                     	if	0	;tblptru may be non-zero
   738  001048                     	endif
   739  001048  0008               	tblrd		*
   740  00104A  CFF5 F045          	movff	tablat,printf@c
   741  00104E  5045               	movf	printf@c,w,c
   742                           
   743                           ; Switch size 1, requested type "space"
   744                           ; Number of cases is 3, Range of values is 0 to 105
   745                           ; switch strategies available:
   746                           ; Name         Instructions Cycles
   747                           ; simple_byte           10     6 (average)
   748                           ;	Chosen strategy is simple_byte
   749  001050  0A00               	xorlw	0	; case 0
   750  001052  B4D8               	btfsc	status,2,c
   751  001054  0012               	return	
   752  001056  0A64               	xorlw	100	; case 100
   753  001058  B4D8               	btfsc	status,2,c
   754  00105A  D003               	goto	l236
   755  00105C  0A0D               	xorlw	13	; case 105
   756  00105E  A4D8               	btfss	status,2,c
   757  001060  D060               	goto	u970
   758  001062                     l236:
   759                           
   760                           ;doprnt.c: 1253: {
   761                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   762  001062  C03F  FFD9         	movff	printf@ap,fsr2l
   763  001066  C040  FFDA         	movff	printf@ap+1,fsr2h
   764  00106A  CFDE F043          	movff	postinc2,printf@val
   765  00106E  CFDD F044          	movff	postdec2,printf@val+1
   766  001072  0E02               	movlw	2
   767  001074  263F               	addwf	printf@ap,f,c
   768  001076  0E00               	movlw	0
   769  001078  2240               	addwfc	printf@ap+1,f,c
   770                           
   771                           ;doprnt.c: 1261: if((int)val < 0) {
   772  00107A  AE44               	btfss	printf@val+1,7,c
   773  00107C  D006               	goto	l238
   774                           
   775                           ;doprnt.c: 1262: flag |= 0x03;
   776  00107E  0E03               	movlw	3
   777  001080  1241               	iorwf	printf@flag,f,c
   778                           
   779                           ;doprnt.c: 1263: val = -val;
   780  001082  6C43               	negf	printf@val,c
   781  001084  1E44               	comf	printf@val+1,f,c
   782  001086  B0D8               	btfsc	status,0,c
   783  001088  2A44               	incf	printf@val+1,f,c
   784  00108A                     l238:
   785                           
   786                           ;doprnt.c: 1264: }
   787                           ;doprnt.c: 1266: }
   788                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   789  00108A  0E01               	movlw	1
   790  00108C  6E45               	movwf	printf@c,c
   791  00108E                     l1825:
   792  00108E  0E05               	movlw	5
   793  001090  1845               	xorwf	printf@c,w,c
   794  001092  B4D8               	btfsc	status,2,c
   795  001094  D012               	goto	u950
   796                           
   797                           ;doprnt.c: 1306: if(val < dpowers[c])
   798  001096  5045               	movf	printf@c,w,c
   799  001098  0D02               	mullw	2
   800  00109A  0E01               	movlw	low _dpowers
   801  00109C  24F3               	addwf	prodl,w,c
   802  00109E  6EF6               	movwf	tblptrl,c
   803  0010A0  0E10               	movlw	high _dpowers
   804  0010A2  20F4               	addwfc	prodh,w,c
   805  0010A4  6EF7               	movwf	tblptrh,c
   806  0010A6                     	if	0	;There are less than 3 active tblptr bytes
   807  0010A6                     	endif
   808  0010A6  0009               	tblrd		*+
   809  0010A8  50F5               	movf	tablat,w,c
   810  0010AA  5C43               	subwf	printf@val,w,c
   811  0010AC  0009               	tblrd		*+
   812  0010AE  50F5               	movf	tablat,w,c
   813  0010B0  5844               	subwfb	printf@val+1,w,c
   814  0010B2  A0D8               	btfss	status,0,c
   815  0010B4  D002               	goto	u950
   816                           
   817                           ;doprnt.c: 1307: break;
   818  0010B6  2A45               	incf	printf@c,f,c
   819  0010B8  D7EA               	goto	l1825
   820  0010BA                     u950:
   821                           
   822                           ;doprnt.c: 1422: {
   823                           ;doprnt.c: 1438: if(flag & 0x03)
   824  0010BA  C041  F03E         	movff	printf@flag,??_printf
   825  0010BE  0E03               	movlw	3
   826  0010C0  163E               	andwf	??_printf,f,c
   827  0010C2  B4D8               	btfsc	status,2,c
   828  0010C4  D003               	goto	l242
   829                           
   830                           ;doprnt.c: 1439: (putch('-') );
   831  0010C6  0E2D               	movlw	45
   832  0010C8  EC9B  F00B         	call	_putch
   833  0010CC                     l242:
   834                           
   835                           ;doprnt.c: 1469: }
   836                           ;doprnt.c: 1472: prec = c;
   837  0010CC  C045  F042         	movff	printf@c,printf@prec
   838                           
   839                           ;doprnt.c: 1474: while(prec--) {
   840  0010D0  D024               	goto	l243
   841  0010D2                     
   842                           ;doprnt.c: 1478: {
   843                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   844  0010D2  5042               	movf	printf@prec,w,c
   845  0010D4  0D02               	mullw	2
   846  0010D6  0E01               	movlw	low _dpowers
   847  0010D8  24F3               	addwf	prodl,w,c
   848  0010DA  6EF6               	movwf	tblptrl,c
   849  0010DC  0E10               	movlw	high _dpowers
   850  0010DE  20F4               	addwfc	prodh,w,c
   851  0010E0  6EF7               	movwf	tblptrh,c
   852  0010E2                     	if	0	;There are less than 3 active tblptr bytes
   853  0010E2                     	endif
   854  0010E2  0009               	tblrd		*+
   855  0010E4  CFF5 F030          	movff	tablat,___lwdiv@divisor
   856  0010E8  000A               	tblrd		*-
   857  0010EA  CFF5 F031          	movff	tablat,___lwdiv@divisor+1
   858  0010EE  C043  F02E         	movff	printf@val,___lwdiv@dividend
   859  0010F2  C044  F02F         	movff	printf@val+1,___lwdiv@dividend+1
   860  0010F6  EC7C  F00A         	call	___lwdiv	;wreg free
   861  0010FA  C02E  F035         	movff	?___lwdiv,___lwmod@dividend
   862  0010FE  C02F  F036         	movff	?___lwdiv+1,___lwmod@dividend+1
   863  001102  0E00               	movlw	0
   864  001104  6E38               	movwf	___lwmod@divisor+1,c
   865  001106  0E0A               	movlw	10
   866  001108  6E37               	movwf	___lwmod@divisor,c
   867  00110A  EC1A  F00B         	call	___lwmod	;wreg free
   868  00110E  5035               	movf	?___lwmod,w,c
   869  001110  0F30               	addlw	48
   870  001112  6E45               	movwf	printf@c,c
   871                           
   872                           ;doprnt.c: 1523: }
   873                           ;doprnt.c: 1524: (putch(c) );
   874  001114  5045               	movf	printf@c,w,c
   875  001116  EC9B  F00B         	call	_putch
   876  00111A                     l243:
   877  00111A  0642               	decf	printf@prec,f,c
   878  00111C  2842               	incf	printf@prec,w,c
   879  00111E  A4D8               	btfss	status,2,c
   880  001120  D7D8               	goto	l244
   881  001122                     u970:
   882  001122  C03A  FFF6         	movff	printf@f,tblptrl
   883  001126  C03B  FFF7         	movff	printf@f+1,tblptrh
   884  00112A  4A3A               	infsnz	printf@f,f,c
   885  00112C  2A3B               	incf	printf@f+1,f,c
   886  00112E                     	if	0	;tblptru may be non-zero
   887  00112E                     	endif
   888  00112E                     	if	0	;tblptru may be non-zero
   889  00112E                     	endif
   890  00112E  0008               	tblrd		*
   891  001130  CFF5 F045          	movff	tablat,printf@c
   892  001134  5045               	movf	printf@c,w,c
   893  001136  B4D8               	btfsc	status,2,c
   894  001138  0012               	return	
   895  00113A  D776               	goto	l229
   896  00113C                     __end_of_printf:
   897                           	opt stack 0
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           prodh	equ	0xFF4
   903                           prodl	equ	0xFF3
   904                           intcon	equ	0xFF2
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postinc2	equ	0xFDE
   908                           postdec2	equ	0xFDD
   909                           fsr2h	equ	0xFDA
   910                           fsr2l	equ	0xFD9
   911                           status	equ	0xFD8
   912                           
   913 ;; *************** function _putch *****************
   914 ;; Defined at:
   915 ;;		line 24 in file "lcd.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;  data            1    wreg     unsigned char 
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  data            1   47[COMRAM] unsigned char 
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      void 
   922 ;; Registers used:
   923 ;;		wreg, status,2, status,0, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;Total ram usage:        1 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    5
   936 ;; This function calls:
   937 ;;		_lcdNibble
   938 ;; This function is called by:
   939 ;;		_printf
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text2
   944  001736                     __ptext2:
   945                           	opt stack 0
   946  001736                     _putch:
   947                           	opt stack 24
   948                           
   949                           ;incstack = 0
   950                           ;putch@data stored from wreg
   951  001736  6E30               	movwf	putch@data,c
   952                           
   953                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   954  001738  848C               	bsf	3980,2,c	;volatile
   955                           
   956                           ;lcd.c: 33: lcdNibble(data);
   957  00173A  5030               	movf	putch@data,w,c
   958  00173C  ECFE  F009         	call	_lcdNibble
   959                           
   960                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
   961  001740  0EA0               	movlw	160
   962  001742                     u1087:
   963  001742  D000               	nop2	
   964  001744  2EE8               	decfsz	wreg,f,c
   965  001746  D7FD               	bra	u1087
   966  001748  0012               	return		;funcret
   967  00174A                     __end_of_putch:
   968                           	opt stack 0
   969                           tblptru	equ	0xFF8
   970                           tblptrh	equ	0xFF7
   971                           tblptrl	equ	0xFF6
   972                           tablat	equ	0xFF5
   973                           prodh	equ	0xFF4
   974                           prodl	equ	0xFF3
   975                           intcon	equ	0xFF2
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           postinc2	equ	0xFDE
   979                           postdec2	equ	0xFDD
   980                           fsr2h	equ	0xFDA
   981                           fsr2l	equ	0xFD9
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function ___lwmod *****************
   985 ;; Defined at:
   986 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  dividend        2   52[COMRAM] unsigned int 
   989 ;;  divisor         2   54[COMRAM] unsigned int 
   990 ;; Auto vars:     Size  Location     Type
   991 ;;  counter         1   56[COMRAM] unsigned char 
   992 ;; Return value:  Size  Location     Type
   993 ;;                  2   52[COMRAM] unsigned int 
   994 ;; Registers used:
   995 ;;		wreg, status,2, status,0
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1001 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;Total ram usage:        5 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; Hardware stack levels required when called:    4
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_printf
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text3
  1016  001634                     __ptext3:
  1017                           	opt stack 0
  1018  001634                     ___lwmod:
  1019                           	opt stack 25
  1020                           
  1021                           ;incstack = 0
  1022  001634  5037               	movf	___lwmod@divisor,w,c
  1023  001636  1038               	iorwf	___lwmod@divisor+1,w,c
  1024  001638  B4D8               	btfsc	status,2,c
  1025  00163A  D018               	goto	l666
  1026  00163C  0E01               	movlw	1
  1027  00163E  6E39               	movwf	___lwmod@counter,c
  1028  001640  D004               	goto	l661
  1029  001642  90D8               	bcf	status,0,c
  1030  001644  3637               	rlcf	___lwmod@divisor,f,c
  1031  001646  3638               	rlcf	___lwmod@divisor+1,f,c
  1032  001648  2A39               	incf	___lwmod@counter,f,c
  1033  00164A                     l661:
  1034  00164A  AE38               	btfss	___lwmod@divisor+1,7,c
  1035  00164C  D7FA               	goto	l662
  1036  00164E                     u890:
  1037  00164E  5037               	movf	___lwmod@divisor,w,c
  1038  001650  5C35               	subwf	___lwmod@dividend,w,c
  1039  001652  5038               	movf	___lwmod@divisor+1,w,c
  1040  001654  5836               	subwfb	___lwmod@dividend+1,w,c
  1041  001656  A0D8               	btfss	status,0,c
  1042  001658  D004               	goto	l665
  1043  00165A  5037               	movf	___lwmod@divisor,w,c
  1044  00165C  5E35               	subwf	___lwmod@dividend,f,c
  1045  00165E  5038               	movf	___lwmod@divisor+1,w,c
  1046  001660  5A36               	subwfb	___lwmod@dividend+1,f,c
  1047  001662                     l665:
  1048  001662  90D8               	bcf	status,0,c
  1049  001664  3238               	rrcf	___lwmod@divisor+1,f,c
  1050  001666  3237               	rrcf	___lwmod@divisor,f,c
  1051  001668  2E39               	decfsz	___lwmod@counter,f,c
  1052  00166A  D7F1               	goto	u890
  1053  00166C                     l666:
  1054  00166C  C035  F035         	movff	___lwmod@dividend,?___lwmod
  1055  001670  C036  F036         	movff	___lwmod@dividend+1,?___lwmod+1
  1056  001674  0012               	return		;funcret
  1057  001676                     __end_of___lwmod:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           prodh	equ	0xFF4
  1064                           prodl	equ	0xFF3
  1065                           intcon	equ	0xFF2
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postinc2	equ	0xFDE
  1069                           postdec2	equ	0xFDD
  1070                           fsr2h	equ	0xFDA
  1071                           fsr2l	equ	0xFD9
  1072                           status	equ	0xFD8
  1073                           
  1074 ;; *************** function ___lwdiv *****************
  1075 ;; Defined at:
  1076 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  dividend        2   45[COMRAM] unsigned int 
  1079 ;;  divisor         2   47[COMRAM] unsigned int 
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;  quotient        2   50[COMRAM] unsigned int 
  1082 ;;  counter         1   49[COMRAM] unsigned char 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  2   45[COMRAM] unsigned int 
  1085 ;; Registers used:
  1086 ;;		wreg, status,2, status,0
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1095 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;Total ram usage:        7 bytes
  1097 ;; Hardware stack levels used:    1
  1098 ;; Hardware stack levels required when called:    4
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_printf
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           	psect	text4
  1107  0014F8                     __ptext4:
  1108                           	opt stack 0
  1109  0014F8                     ___lwdiv:
  1110                           	opt stack 25
  1111                           
  1112                           ;incstack = 0
  1113  0014F8  0E00               	movlw	0
  1114  0014FA  6E34               	movwf	___lwdiv@quotient+1,c
  1115  0014FC  0E00               	movlw	0
  1116  0014FE  6E33               	movwf	___lwdiv@quotient,c
  1117  001500  5030               	movf	___lwdiv@divisor,w,c
  1118  001502  1031               	iorwf	___lwdiv@divisor+1,w,c
  1119  001504  B4D8               	btfsc	status,2,c
  1120  001506  D01C               	goto	l656
  1121  001508  0E01               	movlw	1
  1122  00150A  6E32               	movwf	___lwdiv@counter,c
  1123  00150C  D004               	goto	l651
  1124  00150E  90D8               	bcf	status,0,c
  1125  001510  3630               	rlcf	___lwdiv@divisor,f,c
  1126  001512  3631               	rlcf	___lwdiv@divisor+1,f,c
  1127  001514  2A32               	incf	___lwdiv@counter,f,c
  1128  001516                     l651:
  1129  001516  AE31               	btfss	___lwdiv@divisor+1,7,c
  1130  001518  D7FA               	goto	l652
  1131  00151A                     u860:
  1132  00151A  90D8               	bcf	status,0,c
  1133  00151C  3633               	rlcf	___lwdiv@quotient,f,c
  1134  00151E  3634               	rlcf	___lwdiv@quotient+1,f,c
  1135  001520  5030               	movf	___lwdiv@divisor,w,c
  1136  001522  5C2E               	subwf	___lwdiv@dividend,w,c
  1137  001524  5031               	movf	___lwdiv@divisor+1,w,c
  1138  001526  582F               	subwfb	___lwdiv@dividend+1,w,c
  1139  001528  A0D8               	btfss	status,0,c
  1140  00152A  D005               	goto	l655
  1141  00152C  5030               	movf	___lwdiv@divisor,w,c
  1142  00152E  5E2E               	subwf	___lwdiv@dividend,f,c
  1143  001530  5031               	movf	___lwdiv@divisor+1,w,c
  1144  001532  5A2F               	subwfb	___lwdiv@dividend+1,f,c
  1145  001534  8033               	bsf	___lwdiv@quotient,0,c
  1146  001536                     l655:
  1147  001536  90D8               	bcf	status,0,c
  1148  001538  3231               	rrcf	___lwdiv@divisor+1,f,c
  1149  00153A  3230               	rrcf	___lwdiv@divisor,f,c
  1150  00153C  2E32               	decfsz	___lwdiv@counter,f,c
  1151  00153E  D7ED               	goto	u860
  1152  001540                     l656:
  1153  001540  C033  F02E         	movff	___lwdiv@quotient,?___lwdiv
  1154  001544  C034  F02F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1155  001548  0012               	return		;funcret
  1156  00154A                     __end_of___lwdiv:
  1157                           	opt stack 0
  1158                           tblptru	equ	0xFF8
  1159                           tblptrh	equ	0xFF7
  1160                           tblptrl	equ	0xFF6
  1161                           tablat	equ	0xFF5
  1162                           prodh	equ	0xFF4
  1163                           prodl	equ	0xFF3
  1164                           intcon	equ	0xFF2
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postinc2	equ	0xFDE
  1168                           postdec2	equ	0xFDD
  1169                           fsr2h	equ	0xFDA
  1170                           fsr2l	equ	0xFD9
  1171                           status	equ	0xFD8
  1172                           
  1173 ;; *************** function _initLCD *****************
  1174 ;; Defined at:
  1175 ;;		line 60 in file "lcd.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;		None
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;		None
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, status,2, status,0, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1191 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1192 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1193 ;;Total ram usage:        1 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    6
  1196 ;; This function calls:
  1197 ;;		_lcdInst
  1198 ;; This function is called by:
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text5
  1204  00159C                     __ptext5:
  1205                           	opt stack 0
  1206  00159C                     _initLCD:
  1207                           	opt stack 24
  1208                           
  1209                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1210                           
  1211                           ;incstack = 0
  1212  00159C  0E9C               	movlw	156
  1213  00159E  6E31               	movwf	??_initLCD& (0+255),c
  1214  0015A0  0ED7               	movlw	215
  1215  0015A2                     u1097:
  1216  0015A2  2EE8               	decfsz	wreg,f,c
  1217  0015A4  D7FE               	bra	u1097
  1218  0015A6  2E31               	decfsz	??_initLCD& (0+255),f,c
  1219  0015A8  D7FC               	bra	u1097
  1220  0015AA  F000               	nop	
  1221                           
  1222                           ;lcd.c: 69: lcdInst(0b00110011);
  1223  0015AC  0E33               	movlw	51
  1224  0015AE  ECA5  F00B         	call	_lcdInst
  1225                           
  1226                           ;lcd.c: 70: lcdInst(0b00110010);
  1227  0015B2  0E32               	movlw	50
  1228  0015B4  ECA5  F00B         	call	_lcdInst
  1229                           
  1230                           ;lcd.c: 71: lcdInst(0b00101000);
  1231  0015B8  0E28               	movlw	40
  1232  0015BA  ECA5  F00B         	call	_lcdInst
  1233                           
  1234                           ;lcd.c: 72: lcdInst(0b00001111);
  1235  0015BE  0E0F               	movlw	15
  1236  0015C0  ECA5  F00B         	call	_lcdInst
  1237                           
  1238                           ;lcd.c: 73: lcdInst(0b00000110);
  1239  0015C4  0E06               	movlw	6
  1240  0015C6  ECA5  F00B         	call	_lcdInst
  1241                           
  1242                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1243  0015CA  0E01               	movlw	1
  1244  0015CC  ECA5  F00B         	call	_lcdInst
  1245  0015D0  0E9C               	movlw	156
  1246  0015D2  6E31               	movwf	??_initLCD& (0+255),c
  1247  0015D4  0ED7               	movlw	215
  1248  0015D6                     u1107:
  1249  0015D6  2EE8               	decfsz	wreg,f,c
  1250  0015D8  D7FE               	bra	u1107
  1251  0015DA  2E31               	decfsz	??_initLCD& (0+255),f,c
  1252  0015DC  D7FC               	bra	u1107
  1253  0015DE  F000               	nop	
  1254                           
  1255                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1256  0015E0  0E0F               	movlw	15
  1257  0015E2  ECA5  F00B         	call	_lcdInst
  1258  0015E6  0012               	return		;funcret
  1259  0015E8                     __end_of_initLCD:
  1260                           	opt stack 0
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           prodh	equ	0xFF4
  1266                           prodl	equ	0xFF3
  1267                           intcon	equ	0xFF2
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           postinc2	equ	0xFDE
  1271                           postdec2	equ	0xFDD
  1272                           fsr2h	equ	0xFDA
  1273                           fsr2l	equ	0xFD9
  1274                           status	equ	0xFD8
  1275                           
  1276 ;; *************** function _lcdInst *****************
  1277 ;; Defined at:
  1278 ;;		line 11 in file "lcd.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  data            1    wreg     unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  data            1   47[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;Total ram usage:        1 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    5
  1299 ;; This function calls:
  1300 ;;		_lcdNibble
  1301 ;; This function is called by:
  1302 ;;		_initLCD
  1303 ;;		_main
  1304 ;;		_lcd_set_cursor
  1305 ;;		_lcd_shift_cursor
  1306 ;;		_lcd_shift_display
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text6
  1311  00174A                     __ptext6:
  1312                           	opt stack 0
  1313  00174A                     _lcdInst:
  1314                           	opt stack 25
  1315                           
  1316                           ;incstack = 0
  1317                           ;lcdInst@data stored from wreg
  1318  00174A  6E30               	movwf	lcdInst@data,c
  1319                           
  1320                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1321  00174C  948C               	bcf	3980,2,c	;volatile
  1322                           
  1323                           ;lcd.c: 20: lcdNibble(data);
  1324  00174E  5030               	movf	lcdInst@data,w,c
  1325  001750  ECFE  F009         	call	_lcdNibble
  1326                           
  1327                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1328  001754  0EA0               	movlw	160
  1329  001756                     u1117:
  1330  001756  D000               	nop2	
  1331  001758  2EE8               	decfsz	wreg,f,c
  1332  00175A  D7FD               	bra	u1117
  1333  00175C  0012               	return		;funcret
  1334  00175E                     __end_of_lcdInst:
  1335                           	opt stack 0
  1336                           tblptru	equ	0xFF8
  1337                           tblptrh	equ	0xFF7
  1338                           tblptrl	equ	0xFF6
  1339                           tablat	equ	0xFF5
  1340                           prodh	equ	0xFF4
  1341                           prodl	equ	0xFF3
  1342                           intcon	equ	0xFF2
  1343                           postinc0	equ	0xFEE
  1344                           wreg	equ	0xFE8
  1345                           postinc2	equ	0xFDE
  1346                           postdec2	equ	0xFDD
  1347                           fsr2h	equ	0xFDA
  1348                           fsr2l	equ	0xFD9
  1349                           status	equ	0xFD8
  1350                           
  1351 ;; *************** function _lcdNibble *****************
  1352 ;; Defined at:
  1353 ;;		line 37 in file "lcd.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  data            1    wreg     unsigned char 
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;  data            1   46[COMRAM] unsigned char 
  1358 ;;  temp            1   45[COMRAM] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2, status,0
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1371 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;Total ram usage:        2 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    4
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_lcdInst
  1379 ;;		_putch
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text7
  1384  0013FC                     __ptext7:
  1385                           	opt stack 0
  1386  0013FC                     _lcdNibble:
  1387                           	opt stack 24
  1388                           
  1389                           ;incstack = 0
  1390                           ;lcdNibble@data stored from wreg
  1391  0013FC  6E2F               	movwf	lcdNibble@data,c
  1392                           
  1393                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1394  0013FE  502F               	movf	lcdNibble@data,w,c
  1395  001400  0BF0               	andlw	240
  1396  001402  6E2E               	movwf	lcdNibble@temp,c
  1397                           
  1398                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1399  001404  508C               	movf	3980,w,c	;volatile
  1400  001406  0B0F               	andlw	15
  1401  001408  6E8C               	movwf	3980,c	;volatile
  1402                           
  1403                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1404  00140A  502E               	movf	lcdNibble@temp,w,c
  1405  00140C  108C               	iorwf	3980,w,c	;volatile
  1406  00140E  6E8C               	movwf	3980,c	;volatile
  1407                           
  1408                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1409  001410  0E00               	movlw	0
  1410  001412  BEF2               	btfsc	intcon,7,c	;volatile
  1411  001414  0E01               	movlw	1
  1412  001416  6E50               	movwf	_LCDinterruptState,c
  1413  001418  9EF2               	bcf	intcon,7,c	;volatile
  1414  00141A  868C               	bsf	3980,3,c	;volatile
  1415  00141C  0E42               	movlw	66
  1416  00141E                     u1127:
  1417  00141E  2EE8               	decfsz	wreg,f,c
  1418  001420  D7FE               	bra	u1127
  1419  001422  D000               	nop2	
  1420  001424  968C               	bcf	3980,3,c	;volatile
  1421  001426  0EA0               	movlw	160
  1422  001428                     u1137:
  1423  001428  D000               	nop2	
  1424  00142A  2EE8               	decfsz	wreg,f,c
  1425  00142C  D7FD               	bra	u1137
  1426  00142E  B050               	btfsc	_LCDinterruptState,0,c
  1427  001430  D002               	bra	u815
  1428  001432  9EF2               	bcf	intcon,7,c	;volatile
  1429  001434  D001               	bra	u816
  1430  001436                     u815:
  1431  001436  8EF2               	bsf	intcon,7,c	;volatile
  1432  001438                     u816:
  1433                           
  1434                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1435  001438  382F               	swapf	lcdNibble@data,w,c
  1436  00143A  0BF0               	andlw	240
  1437  00143C  6E2F               	movwf	lcdNibble@data,c
  1438                           
  1439                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1440  00143E  502F               	movf	lcdNibble@data,w,c
  1441  001440  0BF0               	andlw	240
  1442  001442  6E2E               	movwf	lcdNibble@temp,c
  1443                           
  1444                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1445  001444  508C               	movf	3980,w,c	;volatile
  1446  001446  0B0F               	andlw	15
  1447  001448  6E8C               	movwf	3980,c	;volatile
  1448                           
  1449                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1450  00144A  502E               	movf	lcdNibble@temp,w,c
  1451  00144C  108C               	iorwf	3980,w,c	;volatile
  1452  00144E  6E8C               	movwf	3980,c	;volatile
  1453                           
  1454                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1455  001450  0E00               	movlw	0
  1456  001452  BEF2               	btfsc	intcon,7,c	;volatile
  1457  001454  0E01               	movlw	1
  1458  001456  6E50               	movwf	_LCDinterruptState,c
  1459  001458  9EF2               	bcf	intcon,7,c	;volatile
  1460  00145A  868C               	bsf	3980,3,c	;volatile
  1461  00145C  0E42               	movlw	66
  1462  00145E                     u1147:
  1463  00145E  2EE8               	decfsz	wreg,f,c
  1464  001460  D7FE               	bra	u1147
  1465  001462  D000               	nop2	
  1466  001464  968C               	bcf	3980,3,c	;volatile
  1467  001466  0EA0               	movlw	160
  1468  001468                     u1157:
  1469  001468  D000               	nop2	
  1470  00146A  2EE8               	decfsz	wreg,f,c
  1471  00146C  D7FD               	bra	u1157
  1472  00146E  B050               	btfsc	_LCDinterruptState,0,c
  1473  001470  D002               	bra	u825
  1474  001472  9EF2               	bcf	intcon,7,c	;volatile
  1475  001474  D001               	bra	u826
  1476  001476                     u825:
  1477  001476  8EF2               	bsf	intcon,7,c	;volatile
  1478  001478                     u826:
  1479  001478  0012               	return		;funcret
  1480  00147A                     __end_of_lcdNibble:
  1481                           	opt stack 0
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           prodh	equ	0xFF4
  1487                           prodl	equ	0xFF3
  1488                           intcon	equ	0xFF2
  1489                           postinc0	equ	0xFEE
  1490                           wreg	equ	0xFE8
  1491                           postinc2	equ	0xFDE
  1492                           postdec2	equ	0xFDD
  1493                           fsr2h	equ	0xFDA
  1494                           fsr2l	equ	0xFD9
  1495                           status	equ	0xFD8
  1496                           
  1497 ;; *************** function _I2C_sendData *****************
  1498 ;; Defined at:
  1499 ;;		line 185 in file "main.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  char_data       1    wreg     unsigned char 
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;  char_data       1   48[COMRAM] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2, status,0, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1517 ;;Total ram usage:        1 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    6
  1520 ;; This function calls:
  1521 ;;		_I2C_Master_Start
  1522 ;;		_I2C_Master_Stop
  1523 ;;		_I2C_Master_Write
  1524 ;; This function is called by:
  1525 ;;		_main
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text8
  1530  0016E2                     __ptext8:
  1531                           	opt stack 0
  1532  0016E2                     _I2C_sendData:
  1533                           	opt stack 24
  1534                           
  1535                           ;incstack = 0
  1536                           ;I2C_sendData@char_data stored from wreg
  1537  0016E2  6E31               	movwf	I2C_sendData@char_data,c
  1538                           
  1539                           ;main.c: 186: I2C_Master_Start();
  1540  0016E4  ECD5  F00B         	call	_I2C_Master_Start	;wreg free
  1541                           
  1542                           ;main.c: 187: I2C_Master_Write(0b00010000);
  1543  0016E8  0E00               	movlw	0
  1544  0016EA  6E30               	movwf	I2C_Master_Write@byteToWrite+1,c
  1545  0016EC  0E10               	movlw	16
  1546  0016EE  6E2F               	movwf	I2C_Master_Write@byteToWrite,c
  1547  0016F0  ECCC  F00B         	call	_I2C_Master_Write	;wreg free
  1548                           
  1549                           ;main.c: 188: I2C_Master_Write(char_data);
  1550  0016F4  C031  F02F         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  1551  0016F8  6A30               	clrf	I2C_Master_Write@byteToWrite+1,c
  1552  0016FA  ECCC  F00B         	call	_I2C_Master_Write	;wreg free
  1553                           
  1554                           ;main.c: 189: I2C_Master_Stop();
  1555  0016FE  ECD1  F00B         	call	_I2C_Master_Stop	;wreg free
  1556  001702  0012               	return		;funcret
  1557  001704                     __end_of_I2C_sendData:
  1558                           	opt stack 0
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           prodh	equ	0xFF4
  1564                           prodl	equ	0xFF3
  1565                           intcon	equ	0xFF2
  1566                           postinc0	equ	0xFEE
  1567                           wreg	equ	0xFE8
  1568                           postinc2	equ	0xFDE
  1569                           postdec2	equ	0xFDD
  1570                           fsr2h	equ	0xFDA
  1571                           fsr2l	equ	0xFD9
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _I2C_init *****************
  1575 ;; Defined at:
  1576 ;;		line 179 in file "main.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;Total ram usage:        0 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    6
  1597 ;; This function calls:
  1598 ;;		_I2C_Master_Init
  1599 ;;		_I2C_Master_Start
  1600 ;;		_I2C_Master_Stop
  1601 ;;		_I2C_Master_Write
  1602 ;; This function is called by:
  1603 ;;		_main
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text9
  1608  0016B8                     __ptext9:
  1609                           	opt stack 0
  1610  0016B8                     _I2C_init:
  1611                           	opt stack 24
  1612                           
  1613                           ;main.c: 180: I2C_Master_Init(100000);
  1614                           
  1615                           ;incstack = 0
  1616  0016B8  0EA0               	movlw	160
  1617  0016BA  6E2E               	movwf	I2C_Master_Init@clockFreq,c
  1618  0016BC  0E86               	movlw	134
  1619  0016BE  6E2F               	movwf	I2C_Master_Init@clockFreq+1,c
  1620  0016C0  0E01               	movlw	1
  1621  0016C2  6E30               	movwf	I2C_Master_Init@clockFreq+2,c
  1622  0016C4  0E00               	movlw	0
  1623  0016C6  6E31               	movwf	I2C_Master_Init@clockFreq+3,c
  1624  0016C8  EC8F  F00B         	call	_I2C_Master_Init	;wreg free
  1625                           
  1626                           ;main.c: 181: I2C_Master_Start();
  1627  0016CC  ECD5  F00B         	call	_I2C_Master_Start	;wreg free
  1628                           
  1629                           ;main.c: 182: I2C_Master_Write(0b00010000);
  1630  0016D0  0E00               	movlw	0
  1631  0016D2  6E30               	movwf	I2C_Master_Write@byteToWrite+1,c
  1632  0016D4  0E10               	movlw	16
  1633  0016D6  6E2F               	movwf	I2C_Master_Write@byteToWrite,c
  1634  0016D8  ECCC  F00B         	call	_I2C_Master_Write	;wreg free
  1635                           
  1636                           ;main.c: 183: I2C_Master_Stop();
  1637  0016DC  ECD1  F00B         	call	_I2C_Master_Stop	;wreg free
  1638  0016E0  0012               	return		;funcret
  1639  0016E2                     __end_of_I2C_init:
  1640                           	opt stack 0
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           prodh	equ	0xFF4
  1646                           prodl	equ	0xFF3
  1647                           intcon	equ	0xFF2
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           postinc2	equ	0xFDE
  1651                           postdec2	equ	0xFDD
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           
  1656 ;; *************** function _I2C_Master_Write *****************
  1657 ;; Defined at:
  1658 ;;		line 109 in file "I2C.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  byteToWrite     2   46[COMRAM] unsigned int 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;Total ram usage:        2 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    5
  1679 ;; This function calls:
  1680 ;;		_I2C_Master_Wait
  1681 ;; This function is called by:
  1682 ;;		_I2C_init
  1683 ;;		_I2C_sendData
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text10
  1688  001798                     __ptext10:
  1689                           	opt stack 0
  1690  001798                     _I2C_Master_Write:
  1691                           	opt stack 24
  1692                           
  1693                           ;I2C.c: 117: I2C_Master_Wait();
  1694                           
  1695                           ;incstack = 0
  1696  001798  ECC3  F00B         	call	_I2C_Master_Wait	;wreg free
  1697                           
  1698                           ;I2C.c: 118: SSPBUF = byteToWrite;
  1699  00179C  C02F  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1700  0017A0  0012               	return		;funcret
  1701  0017A2                     __end_of_I2C_Master_Write:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           prodh	equ	0xFF4
  1708                           prodl	equ	0xFF3
  1709                           intcon	equ	0xFF2
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           postinc2	equ	0xFDE
  1713                           postdec2	equ	0xFDD
  1714                           fsr2h	equ	0xFDA
  1715                           fsr2l	equ	0xFD9
  1716                           status	equ	0xFD8
  1717                           
  1718 ;; *************** function _I2C_Master_Stop *****************
  1719 ;; Defined at:
  1720 ;;		line 96 in file "I2C.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    5
  1741 ;; This function calls:
  1742 ;;		_I2C_Master_Wait
  1743 ;; This function is called by:
  1744 ;;		_I2C_init
  1745 ;;		_I2C_sendData
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text11
  1750  0017A2                     __ptext11:
  1751                           	opt stack 0
  1752  0017A2                     _I2C_Master_Stop:
  1753                           	opt stack 24
  1754                           
  1755                           ;I2C.c: 105: I2C_Master_Wait();
  1756                           
  1757                           ;incstack = 0
  1758  0017A2  ECC3  F00B         	call	_I2C_Master_Wait	;wreg free
  1759                           
  1760                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  1761  0017A6  84C5               	bsf	4037,2,c	;volatile
  1762  0017A8  0012               	return		;funcret
  1763  0017AA                     __end_of_I2C_Master_Stop:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           postinc2	equ	0xFDE
  1775                           postdec2	equ	0xFDD
  1776                           fsr2h	equ	0xFDA
  1777                           fsr2l	equ	0xFD9
  1778                           status	equ	0xFD8
  1779                           
  1780 ;; *************** function _I2C_Master_Start *****************
  1781 ;; Defined at:
  1782 ;;		line 70 in file "I2C.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;		None
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;		None
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;Total ram usage:        0 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    5
  1803 ;; This function calls:
  1804 ;;		_I2C_Master_Wait
  1805 ;; This function is called by:
  1806 ;;		_I2C_init
  1807 ;;		_I2C_sendData
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text12
  1812  0017AA                     __ptext12:
  1813                           	opt stack 0
  1814  0017AA                     _I2C_Master_Start:
  1815                           	opt stack 24
  1816                           
  1817                           ;I2C.c: 79: I2C_Master_Wait();
  1818                           
  1819                           ;incstack = 0
  1820  0017AA  ECC3  F00B         	call	_I2C_Master_Wait	;wreg free
  1821                           
  1822                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  1823  0017AE  80C5               	bsf	4037,0,c	;volatile
  1824  0017B0  0012               	return		;funcret
  1825  0017B2                     __end_of_I2C_Master_Start:
  1826                           	opt stack 0
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           prodh	equ	0xFF4
  1832                           prodl	equ	0xFF3
  1833                           intcon	equ	0xFF2
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           postinc2	equ	0xFDE
  1837                           postdec2	equ	0xFDD
  1838                           fsr2h	equ	0xFDA
  1839                           fsr2l	equ	0xFD9
  1840                           status	equ	0xFD8
  1841                           
  1842 ;; *************** function _I2C_Master_Wait *****************
  1843 ;; Defined at:
  1844 ;;		line 52 in file "I2C.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;Total ram usage:        1 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    4
  1865 ;; This function calls:
  1866 ;;		Nothing
  1867 ;; This function is called by:
  1868 ;;		_I2C_Master_Start
  1869 ;;		_I2C_Master_Stop
  1870 ;;		_I2C_Master_Write
  1871 ;;		_I2C_Master_RepeatedStart
  1872 ;;		_I2C_Master_Read
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text13
  1877  001786                     __ptext13:
  1878                           	opt stack 0
  1879  001786                     _I2C_Master_Wait:
  1880                           	opt stack 24
  1881                           
  1882                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1883                           
  1884                           ;incstack = 0
  1885  001786  B4C7               	btfsc	4039,2,c	;volatile
  1886  001788  D7FE               	goto	_I2C_Master_Wait
  1887  00178A  CFC5 F02E          	movff	4037,??_I2C_Master_Wait	;volatile
  1888  00178E  0E1F               	movlw	31
  1889  001790  162E               	andwf	??_I2C_Master_Wait,f,c
  1890  001792  B4D8               	btfsc	status,2,c
  1891  001794  0012               	return	
  1892  001796  D7F7               	goto	_I2C_Master_Wait
  1893  001798                     __end_of_I2C_Master_Wait:
  1894                           	opt stack 0
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           intcon	equ	0xFF2
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           postinc2	equ	0xFDE
  1905                           postdec2	equ	0xFDD
  1906                           fsr2h	equ	0xFDA
  1907                           fsr2l	equ	0xFD9
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _I2C_Master_Init *****************
  1911 ;; Defined at:
  1912 ;;		line 14 in file "I2C.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  clockFreq       4   45[COMRAM] const unsigned long 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;		None
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1926 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;Total ram usage:        4 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    4
  1933 ;; This function calls:
  1934 ;;		Nothing
  1935 ;; This function is called by:
  1936 ;;		_I2C_init
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text14
  1941  00171E                     __ptext14:
  1942                           	opt stack 0
  1943  00171E                     _I2C_Master_Init:
  1944                           	opt stack 25
  1945                           
  1946                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1947                           
  1948                           ;incstack = 0
  1949  00171E  9AC6               	bcf	4038,5,c	;volatile
  1950                           
  1951                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1952  001720  8694               	bsf	3988,3,c	;volatile
  1953                           
  1954                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1955  001722  8894               	bsf	3988,4,c	;volatile
  1956                           
  1957                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1958  001724  0E80               	movlw	128
  1959  001726  6EC7               	movwf	4039,c	;volatile
  1960                           
  1961                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1962  001728  0E28               	movlw	40
  1963  00172A  6EC6               	movwf	4038,c	;volatile
  1964                           
  1965                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1966  00172C  0E00               	movlw	0
  1967  00172E  6EC5               	movwf	4037,c	;volatile
  1968                           
  1969                           ;I2C.c: 49: SSPADD = 9600;
  1970  001730  0E80               	movlw	128
  1971  001732  6EC8               	movwf	4040,c	;volatile
  1972  001734  0012               	return		;funcret
  1973  001736                     __end_of_I2C_Master_Init:
  1974                           	opt stack 0
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           prodh	equ	0xFF4
  1980                           prodl	equ	0xFF3
  1981                           intcon	equ	0xFF2
  1982                           postinc0	equ	0xFEE
  1983                           wreg	equ	0xFE8
  1984                           postinc2	equ	0xFDE
  1985                           postdec2	equ	0xFDD
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _interruptHandler *****************
  1991 ;; Defined at:
  1992 ;;		line 112 in file "main.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;		None
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  input           2   43[COMRAM] int 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;Total ram usage:       21 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    3
  2013 ;; This function calls:
  2014 ;;		i2_initLCD
  2015 ;;		i2_lcdInst
  2016 ;;		i2_printf
  2017 ;; This function is called by:
  2018 ;;		Interrupt level 2
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	intcode
  2023  000008                     __pintcode:
  2024                           	opt stack 0
  2025  000008                     _interruptHandler:
  2026                           	opt stack 24
  2027                           
  2028                           ;incstack = 0
  2029  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2030  00000A  ED2D  F009         	call	int_func,f	;refresh shadow registers
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           prodh	equ	0xFF4
  2036                           prodl	equ	0xFF3
  2037                           intcon	equ	0xFF2
  2038                           postinc0	equ	0xFEE
  2039                           wreg	equ	0xFE8
  2040                           postinc2	equ	0xFDE
  2041                           postdec2	equ	0xFDD
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046                           	psect	intcode_body
  2047  00125A                     __pintcode_body:
  2048                           	opt stack 24
  2049  00125A                     int_func:
  2050                           	opt stack 24
  2051  00125A  0006               	pop		; remove dummy address from shadow register refresh
  2052  00125C  CFFA F01A          	movff	pclath,??_interruptHandler+1
  2053  001260  CFFB F01B          	movff	pclatu,??_interruptHandler+2
  2054  001264  CFE9 F01C          	movff	fsr0l,??_interruptHandler+3
  2055  001268  CFEA F01D          	movff	fsr0h,??_interruptHandler+4
  2056  00126C  CFE1 F01E          	movff	fsr1l,??_interruptHandler+5
  2057  001270  CFE2 F01F          	movff	fsr1h,??_interruptHandler+6
  2058  001274  CFD9 F020          	movff	fsr2l,??_interruptHandler+7
  2059  001278  CFDA F021          	movff	fsr2h,??_interruptHandler+8
  2060  00127C  CFF3 F022          	movff	prodl,??_interruptHandler+9
  2061  001280  CFF4 F023          	movff	prodh,??_interruptHandler+10
  2062  001284  CFF6 F024          	movff	tblptrl,??_interruptHandler+11
  2063  001288  CFF7 F025          	movff	tblptrh,??_interruptHandler+12
  2064  00128C  CFF8 F026          	movff	tblptru,??_interruptHandler+13
  2065  001290  CFF5 F027          	movff	tablat,??_interruptHandler+14
  2066  001294  C051  F028         	movff	btemp,??_interruptHandler+15
  2067  001298  C052  F029         	movff	btemp+1,??_interruptHandler+16
  2068  00129C  C053  F02A         	movff	btemp+2,??_interruptHandler+17
  2069  0012A0  C054  F02B         	movff	btemp+3,??_interruptHandler+18
  2070                           
  2071                           ;main.c: 124: if (RBIF){
  2072  0012A4  A0F2               	btfss	intcon,0,c	;volatile
  2073  0012A6  D027               	goto	i2l1667
  2074                           
  2075                           ;main.c: 129: TRISBbits.RB5 = 1;
  2076  0012A8  8A93               	bsf	3987,5,c	;volatile
  2077                           
  2078                           ;main.c: 130: int input = PORTBbits.RB5;
  2079  0012AA  AA81               	btfss	3969,5,c	;volatile
  2080  0012AC  D003               	goto	i2u79_40
  2081  0012AE  6A19               	clrf	??_interruptHandler& (0+255),c
  2082  0012B0  2A19               	incf	??_interruptHandler& (0+255),f,c
  2083  0012B2  D001               	goto	i2u79_48
  2084  0012B4                     i2u79_40:
  2085  0012B4  6A19               	clrf	??_interruptHandler& (0+255),c
  2086  0012B6                     i2u79_48:
  2087  0012B6  5019               	movf	??_interruptHandler,w,c
  2088  0012B8  6E2C               	movwf	interruptHandler@input,c
  2089  0012BA  6A2D               	clrf	interruptHandler@input+1,c
  2090                           
  2091                           ;main.c: 132: if (input == 0){
  2092  0012BC  502C               	movf	interruptHandler@input,w,c
  2093  0012BE  102D               	iorwf	interruptHandler@input+1,w,c
  2094  0012C0  A4D8               	btfss	status,2,c
  2095  0012C2  D018               	goto	i2l164
  2096                           
  2097                           ;main.c: 133: initLCD();
  2098  0012C4  ECF4  F00A         	call	i2_initLCD	;wreg free
  2099                           
  2100                           ;main.c: 134: B_count++;
  2101  0012C8  4A4D               	infsnz	_B_count,f,c
  2102  0012CA  2A4E               	incf	_B_count+1,f,c
  2103                           
  2104                           ;main.c: 135: printf("%d",B_count);
  2105  0012CC  0E19               	movlw	low (STR_1+8)
  2106  0012CE  6E0D               	movwf	i2printf@f,c
  2107  0012D0  0E10               	movlw	high (STR_1+8)
  2108  0012D2  6E0E               	movwf	i2printf@f+1,c
  2109  0012D4  C04D  F00F         	movff	_B_count,?i2_printf+2
  2110  0012D8  C04E  F010         	movff	_B_count+1,?i2_printf+3
  2111  0012DC  EC9E  F008         	call	i2_printf	;wreg free
  2112                           
  2113                           ;main.c: 136: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2114  0012E0  0E80               	movlw	128
  2115  0012E2  ECB9  F00B         	call	i2_lcdInst
  2116  0012E6  0E34               	movlw	52
  2117  0012E8  6E19               	movwf	??_interruptHandler& (0+255),c
  2118  0012EA  0EF2               	movlw	242
  2119  0012EC                     i2u116_47:
  2120  0012EC  2EE8               	decfsz	wreg,f,c
  2121  0012EE  D7FE               	bra	i2u116_47
  2122  0012F0  2E19               	decfsz	??_interruptHandler& (0+255),f,c
  2123  0012F2  D7FC               	bra	i2u116_47
  2124  0012F4                     i2l164:
  2125                           
  2126                           ;main.c: 137: }
  2127                           ;main.c: 152: RBIF = 0;
  2128  0012F4  90F2               	bcf	intcon,0,c	;volatile
  2129  0012F6                     i2l1667:
  2130                           
  2131                           ;main.c: 153: return;
  2132  0012F6  C02B  F054         	movff	??_interruptHandler+18,btemp+3
  2133  0012FA  C02A  F053         	movff	??_interruptHandler+17,btemp+2
  2134  0012FE  C029  F052         	movff	??_interruptHandler+16,btemp+1
  2135  001302  C028  F051         	movff	??_interruptHandler+15,btemp
  2136  001306  C027  FFF5         	movff	??_interruptHandler+14,tablat
  2137  00130A  C026  FFF8         	movff	??_interruptHandler+13,tblptru
  2138  00130E  C025  FFF7         	movff	??_interruptHandler+12,tblptrh
  2139  001312  C024  FFF6         	movff	??_interruptHandler+11,tblptrl
  2140  001316  C023  FFF4         	movff	??_interruptHandler+10,prodh
  2141  00131A  C022  FFF3         	movff	??_interruptHandler+9,prodl
  2142  00131E  C021  FFDA         	movff	??_interruptHandler+8,fsr2h
  2143  001322  C020  FFD9         	movff	??_interruptHandler+7,fsr2l
  2144  001326  C01F  FFE2         	movff	??_interruptHandler+6,fsr1h
  2145  00132A  C01E  FFE1         	movff	??_interruptHandler+5,fsr1l
  2146  00132E  C01D  FFEA         	movff	??_interruptHandler+4,fsr0h
  2147  001332  C01C  FFE9         	movff	??_interruptHandler+3,fsr0l
  2148  001336  C01B  FFFB         	movff	??_interruptHandler+2,pclatu
  2149  00133A  C01A  FFFA         	movff	??_interruptHandler+1,pclath
  2150  00133E  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2151  001340  0011               	retfie		f
  2152  001342                     __end_of_interruptHandler:
  2153                           	opt stack 0
  2154                           pclatu	equ	0xFFB
  2155                           pclath	equ	0xFFA
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           prodh	equ	0xFF4
  2161                           prodl	equ	0xFF3
  2162                           intcon	equ	0xFF2
  2163                           postinc0	equ	0xFEE
  2164                           fsr0h	equ	0xFEA
  2165                           fsr0l	equ	0xFE9
  2166                           wreg	equ	0xFE8
  2167                           fsr1h	equ	0xFE2
  2168                           fsr1l	equ	0xFE1
  2169                           postinc2	equ	0xFDE
  2170                           postdec2	equ	0xFDD
  2171                           fsr2h	equ	0xFDA
  2172                           fsr2l	equ	0xFD9
  2173                           status	equ	0xFD8
  2174                           
  2175 ;; *************** function i2_printf *****************
  2176 ;; Defined at:
  2177 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2180 ;;		 -> STR_4(3), STR_3(11), STR_2(3), STR_1(11), 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  printf          4    0        struct .
  2183 ;;  printf          3    0        PTR const unsigned char 
  2184 ;;  printf          2   21[COMRAM] unsigned int 
  2185 ;;  printf          2   17[COMRAM] PTR void [1]
  2186 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2187 ;;  printf          2    0        unsigned int 
  2188 ;;  printf          1   23[COMRAM] char 
  2189 ;;  printf          1   20[COMRAM] char 
  2190 ;;  printf          1   19[COMRAM] unsigned char 
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  2   12[COMRAM] int 
  2193 ;; Registers used:
  2194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2200 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;Total ram usage:       12 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; Hardware stack levels required when called:    2
  2207 ;; This function calls:
  2208 ;;		i2___lwdiv
  2209 ;;		i2___lwmod
  2210 ;;		i2_putch
  2211 ;; This function is called by:
  2212 ;;		_interruptHandler
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text16
  2217  00113C                     __ptext16:
  2218                           	opt stack 0
  2219  00113C                     i2_printf:
  2220                           	opt stack 24
  2221                           
  2222                           ;doprnt.c: 466: va_list ap;
  2223                           ;doprnt.c: 499: signed char c;
  2224                           ;doprnt.c: 506: signed char prec;
  2225                           ;doprnt.c: 508: unsigned char flag;
  2226                           ;doprnt.c: 523: union {
  2227                           ;doprnt.c: 524: unsigned long vd;
  2228                           ;doprnt.c: 525: double integ;
  2229                           ;doprnt.c: 526: } tmpval;
  2230                           ;doprnt.c: 528: unsigned int val;
  2231                           ;doprnt.c: 529: unsigned len;
  2232                           ;doprnt.c: 530: const char * cp;
  2233                           ;doprnt.c: 533: *ap = __va_start();
  2234                           
  2235                           ;incstack = 0
  2236  00113C  0E0F               	movlw	low (?i2_printf+2)
  2237  00113E  6E12               	movwf	i2printf@ap,c
  2238  001140  0E00               	movlw	high (?i2_printf+2)
  2239  001142  6E13               	movwf	i2printf@ap+1,c
  2240                           
  2241                           ;doprnt.c: 536: while(c = *f++) {
  2242  001144  D07D               	goto	i2u75_40
  2243  001146                     
  2244                           ;doprnt.c: 538: if(c != '%')
  2245  001146  0E25               	movlw	37
  2246  001148  1818               	xorwf	i2printf@c,w,c
  2247  00114A  B4D8               	btfsc	status,2,c
  2248  00114C  D004               	goto	i2l230
  2249                           
  2250                           ;doprnt.c: 540: {
  2251                           ;doprnt.c: 541: (putch(c) );
  2252  00114E  5018               	movf	i2printf@c,w,c
  2253  001150  ECAF  F00B         	call	i2_putch
  2254                           
  2255                           ;doprnt.c: 542: continue;
  2256  001154  D075               	goto	i2u75_40
  2257  001156                     i2l230:
  2258                           
  2259                           ;doprnt.c: 543: }
  2260                           ;doprnt.c: 548: flag = 0;
  2261  001156  0E00               	movlw	0
  2262  001158  6E14               	movwf	i2printf@flag,c
  2263                           
  2264                           ;doprnt.c: 822: }
  2265                           
  2266                           ;doprnt.c: 813: continue;
  2267                           
  2268                           ;doprnt.c: 802: default:
  2269                           
  2270                           ;doprnt.c: 698: case 'i':
  2271                           ;doprnt.c: 699: break;
  2272                           
  2273                           ;doprnt.c: 697: case 'd':
  2274                           
  2275                           ;doprnt.c: 638: goto alldone;
  2276                           
  2277                           ;doprnt.c: 637: case 0:
  2278                           
  2279                           ;doprnt.c: 635: switch(c = *f++) {
  2280  00115A  C00D  FFF6         	movff	i2printf@f,tblptrl
  2281  00115E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2282  001162  4A0D               	infsnz	i2printf@f,f,c
  2283  001164  2A0E               	incf	i2printf@f+1,f,c
  2284  001166                     	if	0	;tblptru may be non-zero
  2285  001166                     	endif
  2286  001166                     	if	0	;tblptru may be non-zero
  2287  001166                     	endif
  2288  001166  0008               	tblrd		*
  2289  001168  CFF5 F018          	movff	tablat,i2printf@c
  2290  00116C  5018               	movf	i2printf@c,w,c
  2291                           
  2292                           ; Switch size 1, requested type "space"
  2293                           ; Number of cases is 3, Range of values is 0 to 105
  2294                           ; switch strategies available:
  2295                           ; Name         Instructions Cycles
  2296                           ; simple_byte           10     6 (average)
  2297                           ;	Chosen strategy is simple_byte
  2298  00116E  0A00               	xorlw	0	; case 0
  2299  001170  B4D8               	btfsc	status,2,c
  2300  001172  0012               	return	
  2301  001174  0A64               	xorlw	100	; case 100
  2302  001176  B4D8               	btfsc	status,2,c
  2303  001178  D003               	goto	i2l236
  2304  00117A  0A0D               	xorlw	13	; case 105
  2305  00117C  A4D8               	btfss	status,2,c
  2306  00117E  D060               	goto	i2u75_40
  2307  001180                     i2l236:
  2308                           
  2309                           ;doprnt.c: 1253: {
  2310                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2311  001180  C012  FFD9         	movff	i2printf@ap,fsr2l
  2312  001184  C013  FFDA         	movff	i2printf@ap+1,fsr2h
  2313  001188  CFDE F016          	movff	postinc2,i2printf@val
  2314  00118C  CFDD F017          	movff	postdec2,i2printf@val+1
  2315  001190  0E02               	movlw	2
  2316  001192  2612               	addwf	i2printf@ap,f,c
  2317  001194  0E00               	movlw	0
  2318  001196  2213               	addwfc	i2printf@ap+1,f,c
  2319                           
  2320                           ;doprnt.c: 1261: if((int)val < 0) {
  2321  001198  AE17               	btfss	i2printf@val+1,7,c
  2322  00119A  D006               	goto	i2l238
  2323                           
  2324                           ;doprnt.c: 1262: flag |= 0x03;
  2325  00119C  0E03               	movlw	3
  2326  00119E  1214               	iorwf	i2printf@flag,f,c
  2327                           
  2328                           ;doprnt.c: 1263: val = -val;
  2329  0011A0  6C16               	negf	i2printf@val,c
  2330  0011A2  1E17               	comf	i2printf@val+1,f,c
  2331  0011A4  B0D8               	btfsc	status,0,c
  2332  0011A6  2A17               	incf	i2printf@val+1,f,c
  2333  0011A8                     i2l238:
  2334                           
  2335                           ;doprnt.c: 1264: }
  2336                           ;doprnt.c: 1266: }
  2337                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2338  0011A8  0E01               	movlw	1
  2339  0011AA  6E18               	movwf	i2printf@c,c
  2340  0011AC                     i2l1575:
  2341  0011AC  0E05               	movlw	5
  2342  0011AE  1818               	xorwf	i2printf@c,w,c
  2343  0011B0  B4D8               	btfsc	status,2,c
  2344  0011B2  D012               	goto	i2u73_40
  2345                           
  2346                           ;doprnt.c: 1306: if(val < dpowers[c])
  2347  0011B4  5018               	movf	i2printf@c,w,c
  2348  0011B6  0D02               	mullw	2
  2349  0011B8  0E01               	movlw	low _dpowers
  2350  0011BA  24F3               	addwf	prodl,w,c
  2351  0011BC  6EF6               	movwf	tblptrl,c
  2352  0011BE  0E10               	movlw	high _dpowers
  2353  0011C0  20F4               	addwfc	prodh,w,c
  2354  0011C2  6EF7               	movwf	tblptrh,c
  2355  0011C4                     	if	0	;There are less than 3 active tblptr bytes
  2356  0011C4                     	endif
  2357  0011C4  0009               	tblrd		*+
  2358  0011C6  50F5               	movf	tablat,w,c
  2359  0011C8  5C16               	subwf	i2printf@val,w,c
  2360  0011CA  0009               	tblrd		*+
  2361  0011CC  50F5               	movf	tablat,w,c
  2362  0011CE  5817               	subwfb	i2printf@val+1,w,c
  2363  0011D0  A0D8               	btfss	status,0,c
  2364  0011D2  D002               	goto	i2u73_40
  2365                           
  2366                           ;doprnt.c: 1307: break;
  2367  0011D4  2A18               	incf	i2printf@c,f,c
  2368  0011D6  D7EA               	goto	i2l1575
  2369  0011D8                     i2u73_40:
  2370                           
  2371                           ;doprnt.c: 1422: {
  2372                           ;doprnt.c: 1438: if(flag & 0x03)
  2373  0011D8  C014  F011         	movff	i2printf@flag,??i2_printf
  2374  0011DC  0E03               	movlw	3
  2375  0011DE  1611               	andwf	??i2_printf,f,c
  2376  0011E0  B4D8               	btfsc	status,2,c
  2377  0011E2  D003               	goto	i2l242
  2378                           
  2379                           ;doprnt.c: 1439: (putch('-') );
  2380  0011E4  0E2D               	movlw	45
  2381  0011E6  ECAF  F00B         	call	i2_putch
  2382  0011EA                     i2l242:
  2383                           
  2384                           ;doprnt.c: 1469: }
  2385                           ;doprnt.c: 1472: prec = c;
  2386  0011EA  C018  F015         	movff	i2printf@c,i2printf@prec
  2387                           
  2388                           ;doprnt.c: 1474: while(prec--) {
  2389  0011EE  D024               	goto	i2l243
  2390  0011F0                     
  2391                           ;doprnt.c: 1478: {
  2392                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2393  0011F0  5015               	movf	i2printf@prec,w,c
  2394  0011F2  0D02               	mullw	2
  2395  0011F4  0E01               	movlw	low _dpowers
  2396  0011F6  24F3               	addwf	prodl,w,c
  2397  0011F8  6EF6               	movwf	tblptrl,c
  2398  0011FA  0E10               	movlw	high _dpowers
  2399  0011FC  20F4               	addwfc	prodh,w,c
  2400  0011FE  6EF7               	movwf	tblptrh,c
  2401  001200                     	if	0	;There are less than 3 active tblptr bytes
  2402  001200                     	endif
  2403  001200  0009               	tblrd		*+
  2404  001202  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2405  001206  000A               	tblrd		*-
  2406  001208  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2407  00120C  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2408  001210  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2409  001214  ECA5  F00A         	call	i2___lwdiv	;wreg free
  2410  001218  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2411  00121C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2412  001220  0E00               	movlw	0
  2413  001222  6E0B               	movwf	i2___lwmod@divisor+1,c
  2414  001224  0E0A               	movlw	10
  2415  001226  6E0A               	movwf	i2___lwmod@divisor,c
  2416  001228  EC3B  F00B         	call	i2___lwmod	;wreg free
  2417  00122C  5008               	movf	?i2___lwmod,w,c
  2418  00122E  0F30               	addlw	48
  2419  001230  6E18               	movwf	i2printf@c,c
  2420                           
  2421                           ;doprnt.c: 1523: }
  2422                           ;doprnt.c: 1524: (putch(c) );
  2423  001232  5018               	movf	i2printf@c,w,c
  2424  001234  ECAF  F00B         	call	i2_putch
  2425  001238                     i2l243:
  2426  001238  0615               	decf	i2printf@prec,f,c
  2427  00123A  2815               	incf	i2printf@prec,w,c
  2428  00123C  A4D8               	btfss	status,2,c
  2429  00123E  D7D8               	goto	i2l244
  2430  001240                     i2u75_40:
  2431  001240  C00D  FFF6         	movff	i2printf@f,tblptrl
  2432  001244  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2433  001248  4A0D               	infsnz	i2printf@f,f,c
  2434  00124A  2A0E               	incf	i2printf@f+1,f,c
  2435  00124C                     	if	0	;tblptru may be non-zero
  2436  00124C                     	endif
  2437  00124C                     	if	0	;tblptru may be non-zero
  2438  00124C                     	endif
  2439  00124C  0008               	tblrd		*
  2440  00124E  CFF5 F018          	movff	tablat,i2printf@c
  2441  001252  5018               	movf	i2printf@c,w,c
  2442  001254  B4D8               	btfsc	status,2,c
  2443  001256  0012               	return	
  2444  001258  D776               	goto	i2l229
  2445  00125A                     __end_ofi2_printf:
  2446                           	opt stack 0
  2447                           pclatu	equ	0xFFB
  2448                           pclath	equ	0xFFA
  2449                           tblptru	equ	0xFF8
  2450                           tblptrh	equ	0xFF7
  2451                           tblptrl	equ	0xFF6
  2452                           tablat	equ	0xFF5
  2453                           prodh	equ	0xFF4
  2454                           prodl	equ	0xFF3
  2455                           intcon	equ	0xFF2
  2456                           postinc0	equ	0xFEE
  2457                           fsr0h	equ	0xFEA
  2458                           fsr0l	equ	0xFE9
  2459                           wreg	equ	0xFE8
  2460                           fsr1h	equ	0xFE2
  2461                           fsr1l	equ	0xFE1
  2462                           postinc2	equ	0xFDE
  2463                           postdec2	equ	0xFDD
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function i2_putch *****************
  2469 ;; Defined at:
  2470 ;;		line 24 in file "lcd.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  data            1    wreg     unsigned char 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  data            1    2[COMRAM] unsigned char 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      void 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;Total ram usage:        1 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    1
  2491 ;; This function calls:
  2492 ;;		i2_lcdNibble
  2493 ;; This function is called by:
  2494 ;;		i2_printf
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           	psect	text17
  2499  00175E                     __ptext17:
  2500                           	opt stack 0
  2501  00175E                     i2_putch:
  2502                           	opt stack 24
  2503                           
  2504                           ;incstack = 0
  2505                           ;i2putch@data stored from wreg
  2506  00175E  6E03               	movwf	i2putch@data,c
  2507                           
  2508                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2509  001760  848C               	bsf	3980,2,c	;volatile
  2510                           
  2511                           ;lcd.c: 33: lcdNibble(data);
  2512  001762  5003               	movf	i2putch@data,w,c
  2513  001764  EC3D  F00A         	call	i2_lcdNibble
  2514                           
  2515                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2516  001768  0EA0               	movlw	160
  2517  00176A                     i2u117_47:
  2518  00176A  D000               	nop2	
  2519  00176C  2EE8               	decfsz	wreg,f,c
  2520  00176E  D7FD               	bra	i2u117_47
  2521  001770  0012               	return		;funcret
  2522  001772                     __end_ofi2_putch:
  2523                           	opt stack 0
  2524                           pclatu	equ	0xFFB
  2525                           pclath	equ	0xFFA
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           prodh	equ	0xFF4
  2531                           prodl	equ	0xFF3
  2532                           intcon	equ	0xFF2
  2533                           postinc0	equ	0xFEE
  2534                           fsr0h	equ	0xFEA
  2535                           fsr0l	equ	0xFE9
  2536                           wreg	equ	0xFE8
  2537                           fsr1h	equ	0xFE2
  2538                           fsr1l	equ	0xFE1
  2539                           postinc2	equ	0xFDE
  2540                           postdec2	equ	0xFDD
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8
  2544                           
  2545 ;; *************** function i2___lwmod *****************
  2546 ;; Defined at:
  2547 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  dividend        2    7[COMRAM] unsigned int 
  2550 ;;  divisor         2    9[COMRAM] unsigned int 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  __lwmod         1   11[COMRAM] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  2    7[COMRAM] unsigned int 
  2555 ;; Registers used:
  2556 ;;		wreg, status,2, status,0
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2562 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;Total ram usage:        5 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		i2_printf
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text18
  2576  001676                     __ptext18:
  2577                           	opt stack 0
  2578  001676                     i2___lwmod:
  2579                           	opt stack 25
  2580                           
  2581                           ;incstack = 0
  2582  001676  500A               	movf	i2___lwmod@divisor,w,c
  2583  001678  100B               	iorwf	i2___lwmod@divisor+1,w,c
  2584  00167A  B4D8               	btfsc	status,2,c
  2585  00167C  D018               	goto	i2l666
  2586  00167E  0E01               	movlw	1
  2587  001680  6E0C               	movwf	i2___lwmod@counter,c
  2588  001682  D004               	goto	i2l661
  2589  001684  90D8               	bcf	status,0,c
  2590  001686  360A               	rlcf	i2___lwmod@divisor,f,c
  2591  001688  360B               	rlcf	i2___lwmod@divisor+1,f,c
  2592  00168A  2A0C               	incf	i2___lwmod@counter,f,c
  2593  00168C                     i2l661:
  2594  00168C  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  2595  00168E  D7FA               	goto	i2l662
  2596  001690                     i2u59_40:
  2597  001690  500A               	movf	i2___lwmod@divisor,w,c
  2598  001692  5C08               	subwf	i2___lwmod@dividend,w,c
  2599  001694  500B               	movf	i2___lwmod@divisor+1,w,c
  2600  001696  5809               	subwfb	i2___lwmod@dividend+1,w,c
  2601  001698  A0D8               	btfss	status,0,c
  2602  00169A  D004               	goto	i2l665
  2603  00169C  500A               	movf	i2___lwmod@divisor,w,c
  2604  00169E  5E08               	subwf	i2___lwmod@dividend,f,c
  2605  0016A0  500B               	movf	i2___lwmod@divisor+1,w,c
  2606  0016A2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  2607  0016A4                     i2l665:
  2608  0016A4  90D8               	bcf	status,0,c
  2609  0016A6  320B               	rrcf	i2___lwmod@divisor+1,f,c
  2610  0016A8  320A               	rrcf	i2___lwmod@divisor,f,c
  2611  0016AA  2E0C               	decfsz	i2___lwmod@counter,f,c
  2612  0016AC  D7F1               	goto	i2u59_40
  2613  0016AE                     i2l666:
  2614  0016AE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  2615  0016B2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  2616  0016B6  0012               	return		;funcret
  2617  0016B8                     __end_ofi2___lwmod:
  2618                           	opt stack 0
  2619                           pclatu	equ	0xFFB
  2620                           pclath	equ	0xFFA
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           intcon	equ	0xFF2
  2628                           postinc0	equ	0xFEE
  2629                           fsr0h	equ	0xFEA
  2630                           fsr0l	equ	0xFE9
  2631                           wreg	equ	0xFE8
  2632                           fsr1h	equ	0xFE2
  2633                           fsr1l	equ	0xFE1
  2634                           postinc2	equ	0xFDE
  2635                           postdec2	equ	0xFDD
  2636                           fsr2h	equ	0xFDA
  2637                           fsr2l	equ	0xFD9
  2638                           status	equ	0xFD8
  2639                           
  2640 ;; *************** function i2___lwdiv *****************
  2641 ;; Defined at:
  2642 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;  dividend        2    0[COMRAM] unsigned int 
  2645 ;;  divisor         2    2[COMRAM] unsigned int 
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  2648 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  2    0[COMRAM] unsigned int 
  2651 ;; Registers used:
  2652 ;;		wreg, status,2, status,0
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2658 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;Total ram usage:        7 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; This function calls:
  2665 ;;		Nothing
  2666 ;; This function is called by:
  2667 ;;		i2_printf
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           	psect	text19
  2672  00154A                     __ptext19:
  2673                           	opt stack 0
  2674  00154A                     i2___lwdiv:
  2675                           	opt stack 25
  2676                           
  2677                           ;incstack = 0
  2678  00154A  0E00               	movlw	0
  2679  00154C  6E06               	movwf	i2___lwdiv@quotient+1,c
  2680  00154E  0E00               	movlw	0
  2681  001550  6E05               	movwf	i2___lwdiv@quotient,c
  2682  001552  5003               	movf	i2___lwdiv@divisor,w,c
  2683  001554  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  2684  001556  B4D8               	btfsc	status,2,c
  2685  001558  D01C               	goto	i2l656
  2686  00155A  0E01               	movlw	1
  2687  00155C  6E07               	movwf	i2___lwdiv@counter,c
  2688  00155E  D004               	goto	i2l651
  2689  001560  90D8               	bcf	status,0,c
  2690  001562  3603               	rlcf	i2___lwdiv@divisor,f,c
  2691  001564  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  2692  001566  2A07               	incf	i2___lwdiv@counter,f,c
  2693  001568                     i2l651:
  2694  001568  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  2695  00156A  D7FA               	goto	i2l652
  2696  00156C                     i2u56_40:
  2697  00156C  90D8               	bcf	status,0,c
  2698  00156E  3605               	rlcf	i2___lwdiv@quotient,f,c
  2699  001570  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  2700  001572  5003               	movf	i2___lwdiv@divisor,w,c
  2701  001574  5C01               	subwf	i2___lwdiv@dividend,w,c
  2702  001576  5004               	movf	i2___lwdiv@divisor+1,w,c
  2703  001578  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  2704  00157A  A0D8               	btfss	status,0,c
  2705  00157C  D005               	goto	i2l655
  2706  00157E  5003               	movf	i2___lwdiv@divisor,w,c
  2707  001580  5E01               	subwf	i2___lwdiv@dividend,f,c
  2708  001582  5004               	movf	i2___lwdiv@divisor+1,w,c
  2709  001584  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  2710  001586  8005               	bsf	i2___lwdiv@quotient,0,c
  2711  001588                     i2l655:
  2712  001588  90D8               	bcf	status,0,c
  2713  00158A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  2714  00158C  3203               	rrcf	i2___lwdiv@divisor,f,c
  2715  00158E  2E07               	decfsz	i2___lwdiv@counter,f,c
  2716  001590  D7ED               	goto	i2u56_40
  2717  001592                     i2l656:
  2718  001592  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  2719  001596  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  2720  00159A  0012               	return		;funcret
  2721  00159C                     __end_ofi2___lwdiv:
  2722                           	opt stack 0
  2723                           pclatu	equ	0xFFB
  2724                           pclath	equ	0xFFA
  2725                           tblptru	equ	0xFF8
  2726                           tblptrh	equ	0xFF7
  2727                           tblptrl	equ	0xFF6
  2728                           tablat	equ	0xFF5
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon	equ	0xFF2
  2732                           postinc0	equ	0xFEE
  2733                           fsr0h	equ	0xFEA
  2734                           fsr0l	equ	0xFE9
  2735                           wreg	equ	0xFE8
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           postinc2	equ	0xFDE
  2739                           postdec2	equ	0xFDD
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function i2_initLCD *****************
  2745 ;; Defined at:
  2746 ;;		line 60 in file "lcd.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;Total ram usage:        1 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    2
  2767 ;; This function calls:
  2768 ;;		i2_lcdInst
  2769 ;; This function is called by:
  2770 ;;		_interruptHandler
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text20
  2775  0015E8                     __ptext20:
  2776                           	opt stack 0
  2777  0015E8                     i2_initLCD:
  2778                           	opt stack 24
  2779                           
  2780                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  2781                           
  2782                           ;incstack = 0
  2783  0015E8  0E9C               	movlw	156
  2784  0015EA  6E04               	movwf	??i2_initLCD& (0+255),c
  2785  0015EC  0ED7               	movlw	215
  2786  0015EE                     i2u118_47:
  2787  0015EE  2EE8               	decfsz	wreg,f,c
  2788  0015F0  D7FE               	bra	i2u118_47
  2789  0015F2  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2790  0015F4  D7FC               	bra	i2u118_47
  2791  0015F6  F000               	nop	
  2792                           
  2793                           ;lcd.c: 69: lcdInst(0b00110011);
  2794  0015F8  0E33               	movlw	51
  2795  0015FA  ECB9  F00B         	call	i2_lcdInst
  2796                           
  2797                           ;lcd.c: 70: lcdInst(0b00110010);
  2798  0015FE  0E32               	movlw	50
  2799  001600  ECB9  F00B         	call	i2_lcdInst
  2800                           
  2801                           ;lcd.c: 71: lcdInst(0b00101000);
  2802  001604  0E28               	movlw	40
  2803  001606  ECB9  F00B         	call	i2_lcdInst
  2804                           
  2805                           ;lcd.c: 72: lcdInst(0b00001111);
  2806  00160A  0E0F               	movlw	15
  2807  00160C  ECB9  F00B         	call	i2_lcdInst
  2808                           
  2809                           ;lcd.c: 73: lcdInst(0b00000110);
  2810  001610  0E06               	movlw	6
  2811  001612  ECB9  F00B         	call	i2_lcdInst
  2812                           
  2813                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  2814  001616  0E01               	movlw	1
  2815  001618  ECB9  F00B         	call	i2_lcdInst
  2816  00161C  0E9C               	movlw	156
  2817  00161E  6E04               	movwf	??i2_initLCD& (0+255),c
  2818  001620  0ED7               	movlw	215
  2819  001622                     i2u119_47:
  2820  001622  2EE8               	decfsz	wreg,f,c
  2821  001624  D7FE               	bra	i2u119_47
  2822  001626  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2823  001628  D7FC               	bra	i2u119_47
  2824  00162A  F000               	nop	
  2825                           
  2826                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2827  00162C  0E0F               	movlw	15
  2828  00162E  ECB9  F00B         	call	i2_lcdInst
  2829  001632  0012               	return		;funcret
  2830  001634                     __end_ofi2_initLCD:
  2831                           	opt stack 0
  2832                           pclatu	equ	0xFFB
  2833                           pclath	equ	0xFFA
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           intcon	equ	0xFF2
  2841                           postinc0	equ	0xFEE
  2842                           fsr0h	equ	0xFEA
  2843                           fsr0l	equ	0xFE9
  2844                           wreg	equ	0xFE8
  2845                           fsr1h	equ	0xFE2
  2846                           fsr1l	equ	0xFE1
  2847                           postinc2	equ	0xFDE
  2848                           postdec2	equ	0xFDD
  2849                           fsr2h	equ	0xFDA
  2850                           fsr2l	equ	0xFD9
  2851                           status	equ	0xFD8
  2852                           
  2853 ;; *************** function i2_lcdInst *****************
  2854 ;; Defined at:
  2855 ;;		line 11 in file "lcd.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  data            1    wreg     unsigned char 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  data            1    2[COMRAM] unsigned char 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;Total ram usage:        1 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    1
  2876 ;; This function calls:
  2877 ;;		i2_lcdNibble
  2878 ;; This function is called by:
  2879 ;;		_interruptHandler
  2880 ;;		i2_initLCD
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	text21
  2885  001772                     __ptext21:
  2886                           	opt stack 0
  2887  001772                     i2_lcdInst:
  2888                           	opt stack 25
  2889                           
  2890                           ;incstack = 0
  2891                           ;i2lcdInst@data stored from wreg
  2892  001772  6E03               	movwf	i2lcdInst@data,c
  2893                           
  2894                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2895  001774  948C               	bcf	3980,2,c	;volatile
  2896                           
  2897                           ;lcd.c: 20: lcdNibble(data);
  2898  001776  5003               	movf	i2lcdInst@data,w,c
  2899  001778  EC3D  F00A         	call	i2_lcdNibble
  2900                           
  2901                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2902  00177C  0EA0               	movlw	160
  2903  00177E                     i2u120_47:
  2904  00177E  D000               	nop2	
  2905  001780  2EE8               	decfsz	wreg,f,c
  2906  001782  D7FD               	bra	i2u120_47
  2907  001784  0012               	return		;funcret
  2908  001786                     __end_ofi2_lcdInst:
  2909                           	opt stack 0
  2910                           pclatu	equ	0xFFB
  2911                           pclath	equ	0xFFA
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           intcon	equ	0xFF2
  2919                           postinc0	equ	0xFEE
  2920                           fsr0h	equ	0xFEA
  2921                           fsr0l	equ	0xFE9
  2922                           wreg	equ	0xFE8
  2923                           fsr1h	equ	0xFE2
  2924                           fsr1l	equ	0xFE1
  2925                           postinc2	equ	0xFDE
  2926                           postdec2	equ	0xFDD
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function i2_lcdNibble *****************
  2932 ;; Defined at:
  2933 ;;		line 37 in file "lcd.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  data            1    wreg     unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  data            1    1[COMRAM] unsigned char 
  2938 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;Total ram usage:        2 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; This function calls:
  2955 ;;		Nothing
  2956 ;; This function is called by:
  2957 ;;		i2_lcdInst
  2958 ;;		i2_putch
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text22
  2963  00147A                     __ptext22:
  2964                           	opt stack 0
  2965  00147A                     i2_lcdNibble:
  2966                           	opt stack 24
  2967                           
  2968                           ;incstack = 0
  2969                           ;i2lcdNibble@data stored from wreg
  2970  00147A  6E02               	movwf	i2lcdNibble@data,c
  2971                           
  2972                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2973  00147C  5002               	movf	i2lcdNibble@data,w,c
  2974  00147E  0BF0               	andlw	240
  2975  001480  6E01               	movwf	i2lcdNibble@temp,c
  2976                           
  2977                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2978  001482  508C               	movf	3980,w,c	;volatile
  2979  001484  0B0F               	andlw	15
  2980  001486  6E8C               	movwf	3980,c	;volatile
  2981                           
  2982                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2983  001488  5001               	movf	i2lcdNibble@temp,w,c
  2984  00148A  108C               	iorwf	3980,w,c	;volatile
  2985  00148C  6E8C               	movwf	3980,c	;volatile
  2986                           
  2987                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2988  00148E  0E00               	movlw	0
  2989  001490  BEF2               	btfsc	intcon,7,c	;volatile
  2990  001492  0E01               	movlw	1
  2991  001494  6E50               	movwf	_LCDinterruptState,c
  2992  001496  9EF2               	bcf	intcon,7,c	;volatile
  2993  001498  868C               	bsf	3980,3,c	;volatile
  2994  00149A  0E42               	movlw	66
  2995  00149C                     i2u121_47:
  2996  00149C  2EE8               	decfsz	wreg,f,c
  2997  00149E  D7FE               	bra	i2u121_47
  2998  0014A0  D000               	nop2	
  2999  0014A2  968C               	bcf	3980,3,c	;volatile
  3000  0014A4  0EA0               	movlw	160
  3001  0014A6                     i2u122_47:
  3002  0014A6  D000               	nop2	
  3003  0014A8  2EE8               	decfsz	wreg,f,c
  3004  0014AA  D7FD               	bra	i2u122_47
  3005  0014AC  B050               	btfsc	_LCDinterruptState,0,c
  3006  0014AE  D002               	bra	i2u47_45
  3007  0014B0  9EF2               	bcf	intcon,7,c	;volatile
  3008  0014B2  D001               	bra	i2u47_46
  3009  0014B4                     i2u47_45:
  3010  0014B4  8EF2               	bsf	intcon,7,c	;volatile
  3011  0014B6                     i2u47_46:
  3012                           
  3013                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3014  0014B6  3802               	swapf	i2lcdNibble@data,w,c
  3015  0014B8  0BF0               	andlw	240
  3016  0014BA  6E02               	movwf	i2lcdNibble@data,c
  3017                           
  3018                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3019  0014BC  5002               	movf	i2lcdNibble@data,w,c
  3020  0014BE  0BF0               	andlw	240
  3021  0014C0  6E01               	movwf	i2lcdNibble@temp,c
  3022                           
  3023                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3024  0014C2  508C               	movf	3980,w,c	;volatile
  3025  0014C4  0B0F               	andlw	15
  3026  0014C6  6E8C               	movwf	3980,c	;volatile
  3027                           
  3028                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3029  0014C8  5001               	movf	i2lcdNibble@temp,w,c
  3030  0014CA  108C               	iorwf	3980,w,c	;volatile
  3031  0014CC  6E8C               	movwf	3980,c	;volatile
  3032                           
  3033                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3034  0014CE  0E00               	movlw	0
  3035  0014D0  BEF2               	btfsc	intcon,7,c	;volatile
  3036  0014D2  0E01               	movlw	1
  3037  0014D4  6E50               	movwf	_LCDinterruptState,c
  3038  0014D6  9EF2               	bcf	intcon,7,c	;volatile
  3039  0014D8  868C               	bsf	3980,3,c	;volatile
  3040  0014DA  0E42               	movlw	66
  3041  0014DC                     i2u123_47:
  3042  0014DC  2EE8               	decfsz	wreg,f,c
  3043  0014DE  D7FE               	bra	i2u123_47
  3044  0014E0  D000               	nop2	
  3045  0014E2  968C               	bcf	3980,3,c	;volatile
  3046  0014E4  0EA0               	movlw	160
  3047  0014E6                     i2u124_47:
  3048  0014E6  D000               	nop2	
  3049  0014E8  2EE8               	decfsz	wreg,f,c
  3050  0014EA  D7FD               	bra	i2u124_47
  3051  0014EC  B050               	btfsc	_LCDinterruptState,0,c
  3052  0014EE  D002               	bra	i2u48_45
  3053  0014F0  9EF2               	bcf	intcon,7,c	;volatile
  3054  0014F2  D001               	bra	i2u48_46
  3055  0014F4                     i2u48_45:
  3056  0014F4  8EF2               	bsf	intcon,7,c	;volatile
  3057  0014F6                     i2u48_46:
  3058  0014F6  0012               	return		;funcret
  3059  0014F8                     __end_ofi2_lcdNibble:
  3060                           	opt stack 0
  3061                           pclatu	equ	0xFFB
  3062                           pclath	equ	0xFFA
  3063                           tblptru	equ	0xFF8
  3064                           tblptrh	equ	0xFF7
  3065                           tblptrl	equ	0xFF6
  3066                           tablat	equ	0xFF5
  3067                           prodh	equ	0xFF4
  3068                           prodl	equ	0xFF3
  3069                           intcon	equ	0xFF2
  3070                           postinc0	equ	0xFEE
  3071                           fsr0h	equ	0xFEA
  3072                           fsr0l	equ	0xFE9
  3073                           wreg	equ	0xFE8
  3074                           fsr1h	equ	0xFE2
  3075                           fsr1l	equ	0xFE1
  3076                           postinc2	equ	0xFDE
  3077                           postdec2	equ	0xFDD
  3078                           fsr2h	equ	0xFDA
  3079                           fsr2l	equ	0xFD9
  3080                           status	equ	0xFD8
  3081                           pclatu	equ	0xFFB
  3082                           pclath	equ	0xFFA
  3083                           tblptru	equ	0xFF8
  3084                           tblptrh	equ	0xFF7
  3085                           tblptrl	equ	0xFF6
  3086                           tablat	equ	0xFF5
  3087                           prodh	equ	0xFF4
  3088                           prodl	equ	0xFF3
  3089                           intcon	equ	0xFF2
  3090                           postinc0	equ	0xFEE
  3091                           fsr0h	equ	0xFEA
  3092                           fsr0l	equ	0xFE9
  3093                           wreg	equ	0xFE8
  3094                           fsr1h	equ	0xFE2
  3095                           fsr1l	equ	0xFE1
  3096                           postinc2	equ	0xFDE
  3097                           postdec2	equ	0xFDD
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102                           	psect	rparam
  3103  0000                     pclatu	equ	0xFFB
  3104                           pclath	equ	0xFFA
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon	equ	0xFF2
  3112                           postinc0	equ	0xFEE
  3113                           fsr0h	equ	0xFEA
  3114                           fsr0l	equ	0xFE9
  3115                           wreg	equ	0xFE8
  3116                           fsr1h	equ	0xFE2
  3117                           fsr1l	equ	0xFE1
  3118                           postinc2	equ	0xFDE
  3119                           postdec2	equ	0xFDD
  3120                           fsr2h	equ	0xFDA
  3121                           fsr2l	equ	0xFD9
  3122                           status	equ	0xFD8
  3123                           
  3124                           	psect	temp
  3125  000051                     btemp:
  3126                           	opt stack 0
  3127  000051                     	ds	1
  3128  0000                     int$flags	set	btemp
  3129  0000                     wtemp6	set	btemp+1
  3130                           pclatu	equ	0xFFB
  3131                           pclath	equ	0xFFA
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           intcon	equ	0xFF2
  3139                           postinc0	equ	0xFEE
  3140                           fsr0h	equ	0xFEA
  3141                           fsr0l	equ	0xFE9
  3142                           wreg	equ	0xFE8
  3143                           fsr1h	equ	0xFE2
  3144                           fsr1l	equ	0xFE1
  3145                           postinc2	equ	0xFDE
  3146                           postdec2	equ	0xFDD
  3147                           fsr2h	equ	0xFDA
  3148                           fsr2l	equ	0xFD9
  3149                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    16
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     70      80
    BANK0           128      2       2
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[3]), STR_3(CODE[11]), STR_2(CODE[3]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2852
                                             69 COMRAM     1     1      0
                                              0 BANK0      2     2      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1856
                                             57 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             47 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             52 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             45 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             48 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             47 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             45 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     332
                                             48 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     391
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     301
                                             46 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      90
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    21    21      0    1265
                                             24 COMRAM    21    21      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            21    17      4     972
                                             12 COMRAM    12     8      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2       2       5        1.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     46      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      52      34        0.0%
DATA                 0      0      52       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 30 18:05:21 2018

                __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l230 1038                          l152 13A2  
                        l242 10CC                          l243 111A                          l155 13D2  
                        l244 10D2                          l236 1062                          l229 1028  
                        l238 108A                          l651 1516                          l652 150E  
                        l661 164A                          l662 1642                          l655 1536  
                        l656 1540                          l665 1662                          l666 166C  
               __CFG_CPB$OFF 000000                          u815 1436                          u816 1438  
                        u825 1476                          u826 1478                          u860 151A  
                        u950 10BA                          u890 164E                          u970 1122  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1825 108E                         _ADON 007E10                         STR_1 1011  
                       STR_2 1019                         STR_3 1011                         STR_4 1019  
                       u1050 13AE                         u1107 15D6                         u1117 1756  
                       u1127 141E                         u1137 1428                         u1058 13B0  
                       u1147 145E                         u1157 1468                         u1077 13F2  
                       _LATA 000F89                         _LATB 000F8A                         u1087 1742  
                       _LATC 000F8B                         _LATD 000F8C                         u1097 15A2  
                       _LATE 000F8D                         _RBIE 007F93                         _RBIF 007F90  
                       _main 1342     __end_of_interruptHandler 1342                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0051             __end_of_I2C_init 16E2                         prodh 000FF4  
                       prodl 000FF3                         start 000E                __CFG_IESO$OFF 000000  
            __end_ofi2_putch 1772                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
                i2_lcdNibble 147A             __end_of_LCD_LEFT 100C             ?_I2C_Master_Init 002E  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lwdiv 154A              __end_of___lwmod 1676                        i2l230 1156  
                      i2l242 11EA                        i2l243 1238                        i2l244 11F0  
                      i2l236 1180                        i2l164 12F4                        i2l229 1146  
                      i2l238 11A8                        i2l651 1568                        i2l652 1560  
                      i2l661 168C                        i2l662 1684                        i2l655 1588  
                      i2l656 1592                        i2l665 16A4                        i2l666 16AE  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 175E               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 15E8               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 100B                        _putch 1736                        pclath 000FFA  
                      tablat 000FF5            _LCDinterruptState 0050                        status 000FD8  
                      wtemp6 0052               __CFG_PBADEN$ON 000000        __size_of_I2C_sendData 0022  
           __end_ofi2_printf 125A           __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042  
            __initialization 1704           __size_ofi2_lcdInst 0014                 __end_of_main 13FC  
                 i2printf@ap 0012           __size_ofi2_initLCD 004C            __end_of_LCD_RIGHT 100D  
                     ??_main 0046                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 002F           ??_I2C_Master_Start 002F                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0031                       _ADRESH 000FC4  
                     _ADRESL 000FC3              i2lcdNibble@data 0002                       ?_putch 0001  
               _I2C_sendData 16E2              i2lcdNibble@temp 0001                       i2l1575 11AC  
                     i2l1667 12F6                       _OSCCON 000FD3                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
             __CFG_STVREN$ON 000000                    ??___lwdiv 0032                    ??___lwmod 0039  
                     clear_0 170A                    ??_lcdInst 0030                       _printf 101E  
                  ??_initLCD 0031            __end_ofi2___lwdiv 159C                 __mediumconst 0000  
          __end_ofi2___lwmod 16B8                    ?_I2C_init 0001                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8            __end_ofi2_lcdInst 1786  
          __end_ofi2_initLCD 1634                   __accesstop 0080      __end_of__initialization 1710  
              ___rparam_used 000001           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
              __end_of_putch 174A                  i2printf@val 0016           __size_of_lcdNibble 007E  
                i2putch@data 0003                   ??_I2C_init 0032                    ?i2_printf 000D  
                    ??_putch 0030            ?_interruptHandler 0001           ??_interruptHandler 0019  
               ?i2_lcdNibble 0001                      ?_printf 003A                   ??i2_printf 0011  
                    i2u47_45 14B4                      i2u47_46 14B6                      i2u56_40 156C  
                    i2u48_45 14F4                      i2u48_46 14F6                      i2u73_40 11D8  
                    i2u59_40 1690                      i2u75_40 1240                      i2u79_40 12B4  
                    i2u79_48 12B6         lcd@LCDinterruptState 004F                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                      _B_count 004D  
                    i2_putch 175E                      _N_count 004B            __end_of_lcdNibble 147A  
                    _S_count 0049                      __Hparam 0000                      __Lparam 0000  
                    _W_count 0047                      ___lwdiv 14F8                      ___lwmod 1634  
               __psmallconst 1000                      __pcinit 1704                      __ramtop 1000  
                    _lcdInst 174A                      __ptext0 1342                      __ptext1 101E  
                    __ptext2 1736                      __ptext3 1634                      __ptext4 14F8  
                    __ptext5 159C                      __ptext6 174A                      __ptext7 13FC  
                    __ptext8 16E2                      __ptext9 16B8              __size_of_printf 011E  
                    _initLCD 159C                      _dpowers 1001                    _LCD_RIGHT 100C  
   __size_of_I2C_Master_Init 0018     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
             __pintcode_body 125A         end_of_initialization 1710        __end_of_LCD_SIZE_HORZ 100F  
      __end_of_LCD_SIZE_VERT 100E                __Lmediumconst 0000                      int_func 125A  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A                      printf@c 0045  
                    printf@f 003A                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81                    _TRISBbits 000F93  
                  _TRISCbits 000F94            __size_of_I2C_init 002A            i2___lwdiv@divisor 0003  
                  i2___lwdiv 154A                    i2___lwmod 1676            i2___lwdiv@counter 0007  
                  i2_lcdInst 1772                    i2_initLCD 15E8         __size_ofi2_lcdNibble 007E  
              i2lcdInst@data 0003        interruptHandler@input 002C               __end_of_printf 113C  
               i2printf@flag 0014                 i2printf@prec 0015          start_initialization 1704  
                  i2printf@c 0018                    i2printf@f 000D                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 011E            ??_I2C_Master_Init 0032  
          ??_I2C_Master_Wait 002E                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 002F  
           __CFG_OSC$INTIO67 000000                   ?i2_initLCD 0001     I2C_Master_Init@clockFreq 002E  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 003E    __size_of_interruptHandler 133A  
                __pbssCOMRAM 0047                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                     ?i2_putch 0001             _I2C_Master_Start 17AA  
           _I2C_Master_Write 1798             ___lwdiv@dividend 002E            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                    _lcdNibble 13FC                     ?___lwdiv 002E  
                   ?___lwmod 0035                     ?_lcdInst 0001                     ?_initLCD 0001  
                __smallconst 1000                     _I2C_init 16B8             ___lwdiv@quotient 0033  
              ?_I2C_sendData 0001                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0014                     _LCD_LEFT 100B                  ??i2_lcdInst 0003  
                   _LATCbits 000F8B                     _LATDbits 000F8C                  ??i2_initLCD 0004  
                   i2u120_47 177E                     i2u121_47 149C                     i2u122_47 14A6  
                   i2u123_47 14DC                     i2u124_47 14E6                     i2u116_47 12EC  
                   i2u117_47 176A                     i2u118_47 15EE                     i2u119_47 1622  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001                   _ADCON0bits 000FC2  
                 _ADCON2bits 000FC0                lcdNibble@data 002F                   printf@flag 0041  
              lcdNibble@temp 002E                   printf@prec 0042                    main@input 0080  
                   i2_printf 113C               ??_I2C_sendData 0031               _LCD_HORZ_LIMIT 1010  
           __size_ofi2_putch 0014                     __Hrparam 0000        I2C_sendData@char_data 0031  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000             __size_of___lwdiv 0052  
           __size_of___lwmod 0042             _interruptHandler 0008             __size_of_lcdInst 0014  
            _I2C_Master_Init 171E             __size_of_initLCD 004C              _I2C_Master_Wait 1786  
            _I2C_Master_Stop 17A2       __end_of_LCD_HORZ_LIMIT 1011              ___lwdiv@divisor 0030  
            ___lwdiv@counter 0032                     __ptext10 1798                     __ptext11 17A2  
                   __ptext20 15E8                     __ptext12 17AA                     __ptext21 1772  
                   __ptext13 1786                     __ptext22 147A                     __ptext14 171E  
                   __ptext16 113C                     __ptext17 175E                     __ptext18 1676  
                   __ptext19 154A               _LCD_VERT_LIMIT 100F                __size_of_main 00BA  
              ??i2_lcdNibble 0001                  ??_lcdNibble 002E                     int$flags 0051  
                  printf@val 0043  I2C_Master_Write@byteToWrite 002F                    putch@data 0030  
   __end_of_I2C_Master_Start 17B2     __end_of_I2C_Master_Write 17A2                   _INTCONbits 000FF2  
     __end_of_LCD_VERT_LIMIT 1010                     intlevel2 0000                _LCD_SIZE_HORZ 100E  
           ___lwmod@dividend 0035                _LCD_SIZE_VERT 100D                     printf@ap 003F  
       __end_of_I2C_sendData 1704      __end_of_I2C_Master_Init 1736      __end_of_I2C_Master_Wait 1798  
    __end_of_I2C_Master_Stop 17AA                  lcdInst@data 0030          __end_ofi2_lcdNibble 14F8  
            ___lwmod@divisor 0037              ___lwmod@counter 0039                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5  
