

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 23 15:15:08 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           ; Version 1.45
    84                           ; Generated 16/11/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F4620 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	idataBANK0
   119  004450                     __pidataBANK0:
   120                           	opt stack 0
   121                           
   122                           ;initializer for _init_position
   123  004450  0005               	dw	5
   124                           
   125                           	psect	mediumconst
   126  00FD76                     __pmediumconst:
   127                           	opt stack 0
   128  00FD76  00                 	db	0
   129  00FD77                     _keys:
   130                           	opt stack 0
   131  00FD77  31                 	db	49
   132  00FD78  32                 	db	50
   133  00FD79  33                 	db	51
   134  00FD7A  41                 	db	65
   135  00FD7B  34                 	db	52
   136  00FD7C  35                 	db	53
   137  00FD7D  36                 	db	54
   138  00FD7E  42                 	db	66
   139  00FD7F  37                 	db	55
   140  00FD80  38                 	db	56
   141  00FD81  39                 	db	57
   142  00FD82  43                 	db	67
   143  00FD83  2A                 	db	42
   144  00FD84  30                 	db	48
   145  00FD85  23                 	db	35
   146  00FD86  44                 	db	68
   147  00FD87  00                 	db	0
   148  00FD88                     __end_of_keys:
   149                           	opt stack 0
   150  00FD88                     _dpowers:
   151                           	opt stack 0
   152  00FD88  0001               	dw	1
   153  00FD8A  000A               	dw	10
   154  00FD8C  0064               	dw	100
   155  00FD8E  03E8               	dw	1000
   156  00FD90  2710               	dw	10000
   157  00FD92                     __end_of_dpowers:
   158                           	opt stack 0
   159  00FD92                     _hexpowers:
   160                           	opt stack 0
   161  00FD92  0001               	dw	1
   162  00FD94  0010               	dw	16
   163  00FD96  0100               	dw	256
   164  00FD98  1000               	dw	4096
   165  00FD9A                     __end_of_hexpowers:
   166                           	opt stack 0
   167  00FD9A                     _happynewyear:
   168                           	opt stack 0
   169  00FD9A  45                 	db	69
   170  00FD9B  14                 	db	20
   171  00FD9C  14                 	db	20
   172  00FD9D  00                 	db	0
   173  00FD9E  11                 	db	17
   174  00FD9F  03                 	db	3
   175  00FDA0  18                 	db	24
   176  00FDA1                     __end_of_happynewyear:
   177                           	opt stack 0
   178  00FDA1                     _array:
   179                           	opt stack 0
   180  00FDA1  30                 	db	48
   181  00FDA2  31                 	db	49
   182  00FDA3  00                 	db	0
   183  00FDA4                     __end_of_array:
   184                           	opt stack 0
   185  00FDA4                     _LCD_LEFT:
   186                           	opt stack 0
   187  00FDA4  00                 	db	0
   188  00FDA5                     __end_of_LCD_LEFT:
   189                           	opt stack 0
   190  00FDA5                     _LCD_RIGHT:
   191                           	opt stack 0
   192  00FDA5  01                 	db	1
   193  00FDA6                     __end_of_LCD_RIGHT:
   194                           	opt stack 0
   195  00FDA6                     _LCD_SIZE_VERT:
   196                           	opt stack 0
   197  00FDA6  02                 	db	2
   198  00FDA7                     __end_of_LCD_SIZE_VERT:
   199                           	opt stack 0
   200  00FDA7                     _LCD_SIZE_HORZ:
   201                           	opt stack 0
   202  00FDA7  10                 	db	16
   203  00FDA8                     __end_of_LCD_SIZE_HORZ:
   204                           	opt stack 0
   205  00FDA8                     _LCD_VERT_LIMIT:
   206                           	opt stack 0
   207  00FDA8  02                 	db	2
   208  00FDA9                     __end_of_LCD_VERT_LIMIT:
   209                           	opt stack 0
   210  00FDA9                     _LCD_HORZ_LIMIT:
   211                           	opt stack 0
   212  00FDA9  28                 	db	40
   213  00FDAA                     __end_of_LCD_HORZ_LIMIT:
   214                           	opt stack 0
   215  00FDAA                     _strs:
   216                           	opt stack 0
   217  00FDAA  42                 	db	66
   218  00FDAB  00                 	db	0
   219  00FDAC  00                 	db	0
   220  00FDAD  00                 	db	0
   221  00FDAE  00                 	db	0
   222  00FDAF  4E                 	db	78
   223  00FDB0  00                 	db	0
   224  00FDB1  00                 	db	0
   225  00FDB2  00                 	db	0
   226  00FDB3  00                 	db	0
   227  00FDB4  53                 	db	83
   228  00FDB5  00                 	db	0
   229  00FDB6  00                 	db	0
   230  00FDB7  00                 	db	0
   231  00FDB8  00                 	db	0
   232  00FDB9  57                 	db	87
   233  00FDBA  00                 	db	0
   234  00FDBB  00                 	db	0
   235  00FDBC  00                 	db	0
   236  00FDBD  00                 	db	0
   237  00FDBE  42                 	db	66
   238  00FDBF  4E                 	db	78
   239  00FDC0  00                 	db	0
   240  00FDC1  00                 	db	0
   241  00FDC2  00                 	db	0
   242  00FDC3  42                 	db	66
   243  00FDC4  53                 	db	83
   244  00FDC5  00                 	db	0
   245  00FDC6  00                 	db	0
   246  00FDC7  00                 	db	0
   247  00FDC8  42                 	db	66
   248  00FDC9  57                 	db	87
   249  00FDCA  00                 	db	0
   250  00FDCB  00                 	db	0
   251  00FDCC  00                 	db	0
   252  00FDCD  42                 	db	66
   253  00FDCE  42                 	db	66
   254  00FDCF  4E                 	db	78
   255  00FDD0  00                 	db	0
   256  00FDD1  00                 	db	0
   257  00FDD2  42                 	db	66
   258  00FDD3  42                 	db	66
   259  00FDD4  53                 	db	83
   260  00FDD5  00                 	db	0
   261  00FDD6  00                 	db	0
   262  00FDD7  42                 	db	66
   263  00FDD8  42                 	db	66
   264  00FDD9  57                 	db	87
   265  00FDDA  00                 	db	0
   266  00FDDB  00                 	db	0
   267  00FDDC  42                 	db	66
   268  00FDDD  4E                 	db	78
   269  00FDDE  57                 	db	87
   270  00FDDF  00                 	db	0
   271  00FDE0  00                 	db	0
   272  00FDE1  42                 	db	66
   273  00FDE2  53                 	db	83
   274  00FDE3  57                 	db	87
   275  00FDE4  00                 	db	0
   276  00FDE5  00                 	db	0
   277  00FDE6  42                 	db	66
   278  00FDE7  57                 	db	87
   279  00FDE8  57                 	db	87
   280  00FDE9  00                 	db	0
   281  00FDEA  00                 	db	0
   282  00FDEB  42                 	db	66
   283  00FDEC  4E                 	db	78
   284  00FDED  57                 	db	87
   285  00FDEE  57                 	db	87
   286  00FDEF  00                 	db	0
   287  00FDF0  42                 	db	66
   288  00FDF1  53                 	db	83
   289  00FDF2  57                 	db	87
   290  00FDF3  57                 	db	87
   291  00FDF4  00                 	db	0
   292  00FDF5  42                 	db	66
   293  00FDF6  42                 	db	66
   294  00FDF7  53                 	db	83
   295  00FDF8  57                 	db	87
   296  00FDF9  00                 	db	0
   297  00FDFA  42                 	db	66
   298  00FDFB  42                 	db	66
   299  00FDFC  4E                 	db	78
   300  00FDFD  57                 	db	87
   301  00FDFE  00                 	db	0
   302  00FDFF  42                 	db	66
   303  00FE00  4E                 	db	78
   304  00FE01  4E                 	db	78
   305  00FE02  57                 	db	87
   306  00FE03  00                 	db	0
   307  00FE04  42                 	db	66
   308  00FE05  4E                 	db	78
   309  00FE06  4E                 	db	78
   310  00FE07  4E                 	db	78
   311  00FE08  00                 	db	0
   312  00FE09  42                 	db	66
   313  00FE0A  57                 	db	87
   314  00FE0B  57                 	db	87
   315  00FE0C  57                 	db	87
   316  00FE0D  00                 	db	0
   317  00FE0E                     __end_of_strs:
   318                           	opt stack 0
   319  0000                     _SSPBUF	set	4041
   320  0000                     _SSPCON2bits	set	4037
   321  0000                     _SSPADD	set	4040
   322  0000                     _SSPCON2	set	4037
   323  0000                     _SSPCON1	set	4038
   324  0000                     _SSPSTAT	set	4039
   325  0000                     _SSPCON1bits	set	4038
   326  0000                     _PORTAbits	set	3968
   327  0000                     _TRISAbits	set	3986
   328  0000                     _TRISDbits	set	3989
   329  0000                     _TRISCbits	set	3988
   330  0000                     _LATCbits	set	3979
   331  0000                     _ADRESL	set	4035
   332  0000                     _ADRESH	set	4036
   333  0000                     _ADCON0bits	set	4034
   334  0000                     _PORTB	set	3969
   335  0000                     _ADCON1	set	4033
   336  0000                     _ADCON0	set	4034
   337  0000                     _TRISE	set	3990
   338  0000                     _TRISD	set	3989
   339  0000                     _TRISC	set	3988
   340  0000                     _TRISB	set	3987
   341  0000                     _TRISA	set	3986
   342  0000                     _LATE	set	3981
   343  0000                     _LATC	set	3979
   344  0000                     _LATB	set	3978
   345  0000                     _LATA	set	3977
   346  0000                     _OSCCON	set	4051
   347  0000                     _INTCONbits	set	4082
   348  0000                     _LATD	set	3980
   349  0000                     _LATDbits	set	3980
   350  0000                     _ADON	set	32272
   351  0000                     _INT1IF	set	32640
   352  0000                     _INT1IE	set	32643
   353  00FE0E                     STR_51:
   354  00FE0E  20                 	db	32
   355  00FE0F  32                 	db	50	;'2'
   356  00FE10  3A                 	db	58	;':'
   357  00FE11  20                 	db	32
   358  00FE12  4F                 	db	79	;'O'
   359  00FE13  70                 	db	112	;'p'
   360  00FE14  65                 	db	101	;'e'
   361  00FE15  72                 	db	114	;'r'
   362  00FE16  61                 	db	97	;'a'
   363  00FE17  74                 	db	116	;'t'
   364  00FE18  69                 	db	105	;'i'
   365  00FE19  6F                 	db	111	;'o'
   366  00FE1A  6E                 	db	110	;'n'
   367  00FE1B  20                 	db	32
   368  00FE1C  54                 	db	84	;'T'
   369  00FE1D  69                 	db	105	;'i'
   370  00FE1E  6D                 	db	109	;'m'
   371  00FE1F  65                 	db	101	;'e'
   372  00FE20  00                 	db	0
   373  00FE21                     STR_96:
   374  00FE21  30                 	db	48	;'0'
   375  00FE22  31                 	db	49	;'1'
   376  00FE23  32                 	db	50	;'2'
   377  00FE24  33                 	db	51	;'3'
   378  00FE25  34                 	db	52	;'4'
   379  00FE26  35                 	db	53	;'5'
   380  00FE27  36                 	db	54	;'6'
   381  00FE28  37                 	db	55	;'7'
   382  00FE29  38                 	db	56	;'8'
   383  00FE2A  39                 	db	57	;'9'
   384  00FE2B  61                 	db	97	;'a'
   385  00FE2C  62                 	db	98	;'b'
   386  00FE2D  63                 	db	99	;'c'
   387  00FE2E  64                 	db	100	;'d'
   388  00FE2F  65                 	db	101	;'e'
   389  00FE30  66                 	db	102	;'f'
   390  00FE31  00                 	db	0
   391  00FE32                     STR_47:
   392  00FE32  53                 	db	83	;'S'
   393  00FE33  70                 	db	112	;'p'
   394  00FE34  61                 	db	97	;'a'
   395  00FE35  63                 	db	99	;'c'
   396  00FE36  65                 	db	101	;'e'
   397  00FE37  72                 	db	114	;'r'
   398  00FE38  5F                 	db	95	;'_'
   399  00FE39  72                 	db	114	;'r'
   400  00FE3A  65                 	db	101	;'e'
   401  00FE3B  6D                 	db	109	;'m'
   402  00FE3C  61                 	db	97	;'a'
   403  00FE3D  69                 	db	105	;'i'
   404  00FE3E  6E                 	db	110	;'n'
   405  00FE3F  3A                 	db	58	;':'
   406  00FE40  25                 	db	37
   407  00FE41  64                 	db	100	;'d'
   408  00FE42  00                 	db	0
   409  00FE43                     STR_48:
   410  00FE43  57                 	db	87	;'W'
   411  00FE44  61                 	db	97	;'a'
   412  00FE45  73                 	db	115	;'s'
   413  00FE46  68                 	db	104	;'h'
   414  00FE47  65                 	db	101	;'e'
   415  00FE48  72                 	db	114	;'r'
   416  00FE49  5F                 	db	95	;'_'
   417  00FE4A  72                 	db	114	;'r'
   418  00FE4B  65                 	db	101	;'e'
   419  00FE4C  6D                 	db	109	;'m'
   420  00FE4D  61                 	db	97	;'a'
   421  00FE4E  69                 	db	105	;'i'
   422  00FE4F  6E                 	db	110	;'n'
   423  00FE50  3A                 	db	58	;':'
   424  00FE51  25                 	db	37
   425  00FE52  64                 	db	100	;'d'
   426  00FE53  00                 	db	0
   427  00FE54                     STR_8:
   428  00FE54  61                 	db	97	;'a'
   429  00FE55  73                 	db	115	;'s'
   430  00FE56  73                 	db	115	;'s'
   431  00FE57  65                 	db	101	;'e'
   432  00FE58  6D                 	db	109	;'m'
   433  00FE59  62                 	db	98	;'b'
   434  00FE5A  6C                 	db	108	;'l'
   435  00FE5B  79                 	db	121	;'y'
   436  00FE5C  20                 	db	32
   437  00FE5D  73                 	db	115	;'s'
   438  00FE5E  74                 	db	116	;'t'
   439  00FE5F  65                 	db	101	;'e'
   440  00FE60  70                 	db	112	;'p'
   441  00FE61  3A                 	db	58	;':'
   442  00FE62  25                 	db	37
   443  00FE63  64                 	db	100	;'d'
   444  00FE64  00                 	db	0
   445  00FE65                     STR_50:
   446  00FE65  31                 	db	49	;'1'
   447  00FE66  3A                 	db	58	;':'
   448  00FE67  20                 	db	32
   449  00FE68  44                 	db	68	;'D'
   450  00FE69  61                 	db	97	;'a'
   451  00FE6A  74                 	db	116	;'t'
   452  00FE6B  65                 	db	101	;'e'
   453  00FE6C  20                 	db	32
   454  00FE6D  61                 	db	97	;'a'
   455  00FE6E  6E                 	db	110	;'n'
   456  00FE6F  64                 	db	100	;'d'
   457  00FE70  20                 	db	32
   458  00FE71  54                 	db	84	;'T'
   459  00FE72  69                 	db	105	;'i'
   460  00FE73  6D                 	db	109	;'m'
   461  00FE74  65                 	db	101	;'e'
   462  00FE75  00                 	db	0
   463  00FE76                     STR_57:
   464  00FE76  6F                 	db	111	;'o'
   465  00FE77  70                 	db	112	;'p'
   466  00FE78  65                 	db	101	;'e'
   467  00FE79  72                 	db	114	;'r'
   468  00FE7A  61                 	db	97	;'a'
   469  00FE7B  74                 	db	116	;'t'
   470  00FE7C  69                 	db	105	;'i'
   471  00FE7D  6F                 	db	111	;'o'
   472  00FE7E  6E                 	db	110	;'n'
   473  00FE7F  20                 	db	32
   474  00FE80  74                 	db	116	;'t'
   475  00FE81  69                 	db	105	;'i'
   476  00FE82  6D                 	db	109	;'m'
   477  00FE83  65                 	db	101	;'e'
   478  00FE84  3A                 	db	58	;':'
   479  00FE85  00                 	db	0
   480  00FE86                     STR_1:
   481  00FE86  31                 	db	49	;'1'
   482  00FE87  3A                 	db	58	;':'
   483  00FE88  64                 	db	100	;'d'
   484  00FE89  61                 	db	97	;'a'
   485  00FE8A  74                 	db	116	;'t'
   486  00FE8B  65                 	db	101	;'e'
   487  00FE8C  20                 	db	32
   488  00FE8D  61                 	db	97	;'a'
   489  00FE8E  6E                 	db	110	;'n'
   490  00FE8F  64                 	db	100	;'d'
   491  00FE90  20                 	db	32
   492  00FE91  74                 	db	116	;'t'
   493  00FE92  69                 	db	105	;'i'
   494  00FE93  6D                 	db	109	;'m'
   495  00FE94  65                 	db	101	;'e'
   496  00FE95  00                 	db	0
   497  00FE96                     STR_24:
   498  00FE96  73                 	db	115	;'s'
   499  00FE97  74                 	db	116	;'t'
   500  00FE98  61                 	db	97	;'a'
   501  00FE99  72                 	db	114	;'r'
   502  00FE9A  74                 	db	116	;'t'
   503  00FE9B  20                 	db	32
   504  00FE9C  6F                 	db	111	;'o'
   505  00FE9D  70                 	db	112	;'p'
   506  00FE9E  65                 	db	101	;'e'
   507  00FE9F  72                 	db	114	;'r'
   508  00FEA0  61                 	db	97	;'a'
   509  00FEA1  74                 	db	116	;'t'
   510  00FEA2  69                 	db	105	;'i'
   511  00FEA3  6F                 	db	111	;'o'
   512  00FEA4  6E                 	db	110	;'n'
   513  00FEA5  00                 	db	0
   514  00FEA6                     STR_59:
   515  00FEA6  57                 	db	87	;'W'
   516  00FEA7  72                 	db	114	;'r'
   517  00FEA8  6F                 	db	111	;'o'
   518  00FEA9  6E                 	db	110	;'n'
   519  00FEAA  67                 	db	103	;'g'
   520  00FEAB  20                 	db	32
   521  00FEAC  6E                 	db	110	;'n'
   522  00FEAD  75                 	db	117	;'u'
   523  00FEAE  6D                 	db	109	;'m'
   524  00FEAF  62                 	db	98	;'b'
   525  00FEB0  65                 	db	101	;'e'
   526  00FEB1  72                 	db	114	;'r'
   527  00FEB2  21                 	db	33
   528  00FEB3  20                 	db	32
   529  00FEB4  00                 	db	0
   530  00FEB5                     STR_3:
   531  00FEB5  61                 	db	97	;'a'
   532  00FEB6  73                 	db	115	;'s'
   533  00FEB7  73                 	db	115	;'s'
   534  00FEB8  65                 	db	101	;'e'
   535  00FEB9  6D                 	db	109	;'m'
   536  00FEBA  62                 	db	98	;'b'
   537  00FEBB  6C                 	db	108	;'l'
   538  00FEBC  79                 	db	121	;'y'
   539  00FEBD  20                 	db	32
   540  00FEBE  73                 	db	115	;'s'
   541  00FEBF  74                 	db	116	;'t'
   542  00FEC0  65                 	db	101	;'e'
   543  00FEC1  70                 	db	112	;'p'
   544  00FEC2  3A                 	db	58	;':'
   545  00FEC3  00                 	db	0
   546  00FEC4                     STR_45:
   547  00FEC4  42                 	db	66	;'B'
   548  00FEC5  6F                 	db	111	;'o'
   549  00FEC6  6C                 	db	108	;'l'
   550  00FEC7  74                 	db	116	;'t'
   551  00FEC8  5F                 	db	95	;'_'
   552  00FEC9  72                 	db	114	;'r'
   553  00FECA  65                 	db	101	;'e'
   554  00FECB  6D                 	db	109	;'m'
   555  00FECC  61                 	db	97	;'a'
   556  00FECD  69                 	db	105	;'i'
   557  00FECE  6E                 	db	110	;'n'
   558  00FECF  3A                 	db	58	;':'
   559  00FED0  25                 	db	37
   560  00FED1  64                 	db	100	;'d'
   561  00FED2  00                 	db	0
   562  00FED3                     STR_44:
   563  00FED3  6F                 	db	111	;'o'
   564  00FED4  70                 	db	112	;'p'
   565  00FED5  65                 	db	101	;'e'
   566  00FED6  72                 	db	114	;'r'
   567  00FED7  61                 	db	97	;'a'
   568  00FED8  74                 	db	116	;'t'
   569  00FED9  69                 	db	105	;'i'
   570  00FEDA  6F                 	db	111	;'o'
   571  00FEDB  6E                 	db	110	;'n'
   572  00FEDC  20                 	db	32
   573  00FEDD  65                 	db	101	;'e'
   574  00FEDE  6E                 	db	110	;'n'
   575  00FEDF  64                 	db	100	;'d'
   576  00FEE0  73                 	db	115	;'s'
   577  00FEE1  00                 	db	0
   578  00FEE2                     STR_53:
   579  00FEE2  25                 	db	37
   580  00FEE3  30                 	db	48	;'0'
   581  00FEE4  32                 	db	50	;'2'
   582  00FEE5  78                 	db	120	;'x'
   583  00FEE6  2F                 	db	47
   584  00FEE7  25                 	db	37
   585  00FEE8  30                 	db	48	;'0'
   586  00FEE9  32                 	db	50	;'2'
   587  00FEEA  78                 	db	120	;'x'
   588  00FEEB  2F                 	db	47
   589  00FEEC  25                 	db	37
   590  00FEED  30                 	db	48	;'0'
   591  00FEEE  32                 	db	50	;'2'
   592  00FEEF  78                 	db	120	;'x'
   593  00FEF0  00                 	db	0
   594  00FEF1                     STR_54:
   595  00FEF1  25                 	db	37
   596  00FEF2  30                 	db	48	;'0'
   597  00FEF3  32                 	db	50	;'2'
   598  00FEF4  78                 	db	120	;'x'
   599  00FEF5  3A                 	db	58	;':'
   600  00FEF6  25                 	db	37
   601  00FEF7  30                 	db	48	;'0'
   602  00FEF8  32                 	db	50	;'2'
   603  00FEF9  78                 	db	120	;'x'
   604  00FEFA  3A                 	db	58	;':'
   605  00FEFB  25                 	db	37
   606  00FEFC  30                 	db	48	;'0'
   607  00FEFD  32                 	db	50	;'2'
   608  00FEFE  78                 	db	120	;'x'
   609  00FEFF  00                 	db	0
   610  00FF00                     STR_4:
   611  00FF00  66                 	db	102	;'f'
   612  00FF01  61                 	db	97	;'a'
   613  00FF02  73                 	db	115	;'s'
   614  00FF03  74                 	db	116	;'t'
   615  00FF04  65                 	db	101	;'e'
   616  00FF05  6E                 	db	110	;'n'
   617  00FF06  65                 	db	101	;'e'
   618  00FF07  72                 	db	114	;'r'
   619  00FF08  20                 	db	32
   620  00FF09  73                 	db	115	;'s'
   621  00FF0A  65                 	db	101	;'e'
   622  00FF0B  74                 	db	116	;'t'
   623  00FF0C  3A                 	db	58	;':'
   624  00FF0D  00                 	db	0
   625  00FF0E                     STR_46:
   626  00FF0E  4E                 	db	78	;'N'
   627  00FF0F  75                 	db	117	;'u'
   628  00FF10  74                 	db	116	;'t'
   629  00FF11  5F                 	db	95	;'_'
   630  00FF12  72                 	db	114	;'r'
   631  00FF13  65                 	db	101	;'e'
   632  00FF14  6D                 	db	109	;'m'
   633  00FF15  61                 	db	97	;'a'
   634  00FF16  69                 	db	105	;'i'
   635  00FF17  6E                 	db	110	;'n'
   636  00FF18  3A                 	db	58	;':'
   637  00FF19  25                 	db	37
   638  00FF1A  64                 	db	100	;'d'
   639  00FF1B  00                 	db	0
   640  00FF1C                     STR_2:
   641  00FF1C  32                 	db	50	;'2'
   642  00FF1D  3A                 	db	58	;':'
   643  00FF1E  69                 	db	105	;'i'
   644  00FF1F  6E                 	db	110	;'n'
   645  00FF20  73                 	db	115	;'s'
   646  00FF21  74                 	db	116	;'t'
   647  00FF22  72                 	db	114	;'r'
   648  00FF23  75                 	db	117	;'u'
   649  00FF24  63                 	db	99	;'c'
   650  00FF25  74                 	db	116	;'t'
   651  00FF26  69                 	db	105	;'i'
   652  00FF27  6F                 	db	111	;'o'
   653  00FF28  6E                 	db	110	;'n'
   654  00FF29  00                 	db	0
   655  00FF2A                     STR_58:
   656  00FF2A  25                 	db	37
   657  00FF2B  64                 	db	100	;'d'
   658  00FF2C  6D                 	db	109	;'m'
   659  00FF2D  69                 	db	105	;'i'
   660  00FF2E  6E                 	db	110	;'n'
   661  00FF2F  20                 	db	32
   662  00FF30  25                 	db	37
   663  00FF31  64                 	db	100	;'d'
   664  00FF32  73                 	db	115	;'s'
   665  00FF33  65                 	db	101	;'e'
   666  00FF34  63                 	db	99	;'c'
   667  00FF35  73                 	db	115	;'s'
   668  00FF36  00                 	db	0
   669  00FF37                     STR_49:
   670  00FF37  79                 	db	121	;'y'
   671  00FF38  6F                 	db	111	;'o'
   672  00FF39  75                 	db	117	;'u'
   673  00FF3A  27                 	db	39
   674  00FF3B  72                 	db	114	;'r'
   675  00FF3C  65                 	db	101	;'e'
   676  00FF3D  20                 	db	32
   677  00FF3E  64                 	db	100	;'d'
   678  00FF3F  6F                 	db	111	;'o'
   679  00FF40  6E                 	db	110	;'n'
   680  00FF41  65                 	db	101	;'e'
   681  00FF42  00                 	db	0
   682  00FF43                     STR_72:
   683  00FF43  57                 	db	87	;'W'
   684  00FF44  72                 	db	114	;'r'
   685  00FF45  6F                 	db	111	;'o'
   686  00FF46  6E                 	db	110	;'n'
   687  00FF47  67                 	db	103	;'g'
   688  00FF48  20                 	db	32
   689  00FF49  69                 	db	105	;'i'
   690  00FF4A  6E                 	db	110	;'n'
   691  00FF4B  70                 	db	112	;'p'
   692  00FF4C  75                 	db	117	;'u'
   693  00FF4D  74                 	db	116	;'t'
   694  00FF4E  00                 	db	0
   695  00FF4F                     STR_67:
   696  00FF4F  77                 	db	119	;'w'
   697  00FF50  72                 	db	114	;'r'
   698  00FF51  6F                 	db	111	;'o'
   699  00FF52  6E                 	db	110	;'n'
   700  00FF53  67                 	db	103	;'g'
   701  00FF54  20                 	db	32
   702  00FF55  73                 	db	115	;'s'
   703  00FF56  65                 	db	101	;'e'
   704  00FF57  74                 	db	116	;'t'
   705  00FF58  21                 	db	33
   706  00FF59  00                 	db	0
   707  00FF5A                     STR_52:
   708  00FF5A  33                 	db	51	;'3'
   709  00FF5B  3A                 	db	58	;':'
   710  00FF5C  73                 	db	115	;'s'
   711  00FF5D  75                 	db	117	;'u'
   712  00FF5E  6D                 	db	109	;'m'
   713  00FF5F  6D                 	db	109	;'m'
   714  00FF60  61                 	db	97	;'a'
   715  00FF61  72                 	db	114	;'r'
   716  00FF62  79                 	db	121	;'y'
   717  00FF63  00                 	db	0
   718  00FF64                     STR_64:
   719  00FF64  63                 	db	99	;'c'
   720  00FF65  6F                 	db	111	;'o'
   721  00FF66  72                 	db	114	;'r'
   722  00FF67  72                 	db	114	;'r'
   723  00FF68  65                 	db	101	;'e'
   724  00FF69  63                 	db	99	;'c'
   725  00FF6A  74                 	db	116	;'t'
   726  00FF6B  21                 	db	33
   727  00FF6C  00                 	db	0
   728  00FF6D                     STR_73:
   729  00FF6D  54                 	db	84	;'T'
   730  00FF6E  4F                 	db	79	;'O'
   731  00FF6F  4F                 	db	79	;'O'
   732  00FF70  20                 	db	32
   733  00FF71  4D                 	db	77	;'M'
   734  00FF72  41                 	db	65	;'A'
   735  00FF73  4E                 	db	78	;'N'
   736  00FF74  59                 	db	89	;'Y'
   737  00FF75  00                 	db	0
   738  00FF76                     STR_6:
   739  00FF76  6E                 	db	110	;'n'
   740  00FF77  75                 	db	117	;'u'
   741  00FF78  6D                 	db	109	;'m'
   742  00FF79  62                 	db	98	;'b'
   743  00FF7A  65                 	db	101	;'e'
   744  00FF7B  72                 	db	114	;'r'
   745  00FF7C  3A                 	db	58	;':'
   746  00FF7D  00                 	db	0
   747  00FF7E                     STR_25:
   748  00FF7E  67                 	db	103	;'g'
   749  00FF7F  65                 	db	101	;'e'
   750  00FF80  61                 	db	97	;'a'
   751  00FF81  72                 	db	114	;'r'
   752  00FF82  3A                 	db	58	;':'
   753  00FF83  25                 	db	37
   754  00FF84  64                 	db	100	;'d'
   755  00FF85  00                 	db	0
   756  00FF86                     STR_95:
   757  00FF86  28                 	db	40
   758  00FF87  6E                 	db	110	;'n'
   759  00FF88  75                 	db	117	;'u'
   760  00FF89  6C                 	db	108	;'l'
   761  00FF8A  6C                 	db	108	;'l'
   762  00FF8B  29                 	db	41
   763  00FF8C  00                 	db	0
   764  00FF8D                     STR_70:
   765  00FF8D  77                 	db	119	;'w'
   766  00FF8E  72                 	db	114	;'r'
   767  00FF8F  6F                 	db	111	;'o'
   768  00FF90  6E                 	db	110	;'n'
   769  00FF91  67                 	db	103	;'g'
   770  00FF92  21                 	db	33
   771  00FF93  00                 	db	0
   772  00FF94                     STR_7:
   773  00FF94  44                 	db	68	;'D'
   774  00FF95  6F                 	db	111	;'o'
   775  00FF96  6E                 	db	110	;'n'
   776  00FF97  65                 	db	101	;'e'
   777  00FF98  21                 	db	33
   778  00FF99  00                 	db	0
   779  00FF9A                     STR_42:
   780  00FF9A  2C                 	db	44
   781  00FF9B  53                 	db	83	;'S'
   782  00FF9C  3A                 	db	58	;':'
   783  00FF9D  25                 	db	37
   784  00FF9E  64                 	db	100	;'d'
   785  00FF9F  00                 	db	0
   786  00FFA0                     STR_43:
   787  00FFA0  2C                 	db	44
   788  00FFA1  57                 	db	87	;'W'
   789  00FFA2  3A                 	db	58	;':'
   790  00FFA3  25                 	db	37
   791  00FFA4  64                 	db	100	;'d'
   792  00FFA5  00                 	db	0
   793  00FFA6                     STR_93:
   794  00FFA6  42                 	db	66	;'B'
   795  00FFA7  4E                 	db	78	;'N'
   796  00FFA8  4E                 	db	78	;'N'
   797  00FFA9  4E                 	db	78	;'N'
   798  00FFAA  00                 	db	0
   799  00FFAB                     STR_91:
   800  00FFAB  42                 	db	66	;'B'
   801  00FFAC  42                 	db	66	;'B'
   802  00FFAD  4E                 	db	78	;'N'
   803  00FFAE  57                 	db	87	;'W'
   804  00FFAF  00                 	db	0
   805  00FFB0                     STR_92:
   806  00FFB0  42                 	db	66	;'B'
   807  00FFB1  4E                 	db	78	;'N'
   808  00FFB2  4E                 	db	78	;'N'
   809  00FFB3  57                 	db	87	;'W'
   810  00FFB4  00                 	db	0
   811  00FFB5                     STR_90:
   812  00FFB5  42                 	db	66	;'B'
   813  00FFB6  42                 	db	66	;'B'
   814  00FFB7  53                 	db	83	;'S'
   815  00FFB8  57                 	db	87	;'W'
   816  00FFB9  00                 	db	0
   817  00FFBA                     STR_88:
   818  00FFBA  42                 	db	66	;'B'
   819  00FFBB  4E                 	db	78	;'N'
   820  00FFBC  57                 	db	87	;'W'
   821  00FFBD  57                 	db	87	;'W'
   822  00FFBE  00                 	db	0
   823  00FFBF                     STR_89:
   824  00FFBF  42                 	db	66	;'B'
   825  00FFC0  53                 	db	83	;'S'
   826  00FFC1  57                 	db	87	;'W'
   827  00FFC2  57                 	db	87	;'W'
   828  00FFC3  00                 	db	0
   829  00FFC4                     STR_94:
   830  00FFC4  42                 	db	66	;'B'
   831  00FFC5  57                 	db	87	;'W'
   832  00FFC6  57                 	db	87	;'W'
   833  00FFC7  57                 	db	87	;'W'
   834  00FFC8  00                 	db	0
   835  00FFC9                     STR_41:
   836  00FFC9  2C                 	db	44
   837  00FFCA  4E                 	db	78	;'N'
   838  00FFCB  25                 	db	37
   839  00FFCC  64                 	db	100	;'d'
   840  00FFCD  00                 	db	0
   841  00FFCE                     STR_9:
   842  00FFCE  73                 	db	115	;'s'
   843  00FFCF  74                 	db	116	;'t'
   844  00FFD0  65                 	db	101	;'e'
   845  00FFD1  70                 	db	112	;'p'
   846  00FFD2  00                 	db	0
   847  00FFD3                     STR_82:
   848  00FFD3  42                 	db	66	;'B'
   849  00FFD4  42                 	db	66	;'B'
   850  00FFD5  4E                 	db	78	;'N'
   851  00FFD6  00                 	db	0
   852  00FFD7                     STR_83:
   853  00FFD7  42                 	db	66	;'B'
   854  00FFD8  42                 	db	66	;'B'
   855  00FFD9  53                 	db	83	;'S'
   856  00FFDA  00                 	db	0
   857  00FFDB                     STR_84:
   858  00FFDB  42                 	db	66	;'B'
   859  00FFDC  42                 	db	66	;'B'
   860  00FFDD  57                 	db	87	;'W'
   861  00FFDE  00                 	db	0
   862  00FFDF                     STR_87:
   863  00FFDF  42                 	db	66	;'B'
   864  00FFE0  57                 	db	87	;'W'
   865  00FFE1  57                 	db	87	;'W'
   866  00FFE2  00                 	db	0
   867  00FFE3                     STR_16:
   868  00FFE3  20                 	db	32
   869  00FFE4  42                 	db	66	;'B'
   870  00FFE5  3A                 	db	58	;':'
   871  00FFE6  00                 	db	0
   872  00FFE7                     STR_18:
   873  00FFE7  20                 	db	32
   874  00FFE8  4E                 	db	78	;'N'
   875  00FFE9  3A                 	db	58	;':'
   876  00FFEA  00                 	db	0
   877  00FFEB                     STR_20:
   878  00FFEB  20                 	db	32
   879  00FFEC  53                 	db	83	;'S'
   880  00FFED  3A                 	db	58	;':'
   881  00FFEE  00                 	db	0
   882  00FFEF                     STR_22:
   883  00FFEF  20                 	db	32
   884  00FFF0  57                 	db	87	;'W'
   885  00FFF1  3A                 	db	58	;':'
   886  00FFF2  00                 	db	0
   887  00FFF3                     STR_40:
   888  00FFF3  42                 	db	66	;'B'
   889  00FFF4  25                 	db	37
   890  00FFF5  64                 	db	100	;'d'
   891  00FFF6  00                 	db	0
   892  00FFF7                     STR_5:
   893  00FFF7  25                 	db	37
   894  00FFF8  73                 	db	115	;'s'
   895  00FFF9  00                 	db	0
   896  00FFFA                     STR_13:
   897  00FFFA  2C                 	db	44
   898  00FFFB  00                 	db	0
   899  00FFFC                     STR_60:
   900  00FFFC  42                 	db	66	;'B'
   901  00FFFD  00                 	db	0
   902  0000                     
   903                           ; #config settings
   904  00FFFE  00                 	db	0	; dummy byte at the end
   905  0000                     
   906                           	psect	cinit
   907  003D38                     __pcinit:
   908                           	opt stack 0
   909  003D38                     start_initialization:
   910                           	opt stack 0
   911  003D38                     __initialization:
   912                           	opt stack 0
   913                           
   914                           ; Initialize objects allocated to BANK0 (2 bytes)
   915                           ; load TBLPTR registers with __pidataBANK0
   916  003D38  0E50               	movlw	low __pidataBANK0
   917  003D3A  6EF6               	movwf	tblptrl,c
   918  003D3C  0E44               	movlw	high __pidataBANK0
   919  003D3E  6EF7               	movwf	tblptrh,c
   920  003D40  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   921  003D42  6EF8               	movwf	tblptru,c
   922  003D44  0009               	tblrd		*+	;fetch initializer
   923  003D46  CFF5 F0FD          	movff	tablat,__pdataBANK0
   924  003D4A  0009               	tblrd		*+	;fetch initializer
   925  003D4C  CFF5 F0FE          	movff	tablat,__pdataBANK0+1
   926                           
   927                           ; Clear objects allocated to BANK2 (200 bytes)
   928  003D50  EE02  F000         	lfsr	0,__pbssBANK2
   929  003D54  0EC8               	movlw	200
   930  003D56                     clear_0:
   931  003D56  6AEE               	clrf	postinc0,c
   932  003D58  06E8               	decf	wreg,f,c
   933  003D5A  E1FD               	bnz	clear_0
   934                           
   935                           ; Clear objects allocated to BANK1 (185 bytes)
   936  003D5C  EE01  F000         	lfsr	0,__pbssBANK1
   937  003D60  0EB9               	movlw	185
   938  003D62                     clear_1:
   939  003D62  6AEE               	clrf	postinc0,c
   940  003D64  06E8               	decf	wreg,f,c
   941  003D66  E1FD               	bnz	clear_1
   942                           
   943                           ; Clear objects allocated to BANK0 (84 bytes)
   944  003D68  EE00  F080         	lfsr	0,__pbssBANK0
   945  003D6C  0E54               	movlw	84
   946  003D6E                     clear_2:
   947  003D6E  6AEE               	clrf	postinc0,c
   948  003D70  06E8               	decf	wreg,f,c
   949  003D72  E1FD               	bnz	clear_2
   950                           
   951                           ; Clear objects allocated to COMRAM (61 bytes)
   952  003D74  EE00  F042         	lfsr	0,__pbssCOMRAM
   953  003D78  0E3D               	movlw	61
   954  003D7A                     clear_3:
   955  003D7A  6AEE               	clrf	postinc0,c
   956  003D7C  06E8               	decf	wreg,f,c
   957  003D7E  E1FD               	bnz	clear_3
   958  003D80                     end_of_initialization:
   959                           	opt stack 0
   960  003D80                     __end_of__initialization:
   961                           	opt stack 0
   962  003D80  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   963  003D82  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   964  003D84  0100               	movlb	0
   965  003D86  EF09  F000         	goto	_main	;jump to C main() function
   966                           tblptru	equ	0xFF8
   967                           tblptrh	equ	0xFF7
   968                           tblptrl	equ	0xFF6
   969                           tablat	equ	0xFF5
   970                           postinc0	equ	0xFEE
   971                           wreg	equ	0xFE8
   972                           
   973                           	psect	bssCOMRAM
   974  000042                     __pbssCOMRAM:
   975                           	opt stack 0
   976  000042                     _compartment_number:
   977                           	opt stack 0
   978  000042                     	ds	16
   979  000052                     _time:
   980                           	opt stack 0
   981  000052                     	ds	7
   982  000059                     _sec_initial:
   983                           	opt stack 0
   984  000059                     	ds	2
   985  00005B                     _min_initial:
   986                           	opt stack 0
   987  00005B                     	ds	2
   988  00005D                     _hr_initial:
   989                           	opt stack 0
   990  00005D                     	ds	2
   991  00005F                     _W:
   992                           	opt stack 0
   993  00005F                     	ds	2
   994  000061                     _S:
   995                           	opt stack 0
   996  000061                     	ds	2
   997  000063                     _N:
   998                           	opt stack 0
   999  000063                     	ds	2
  1000  000065                     _B:
  1001                           	opt stack 0
  1002  000065                     	ds	2
  1003  000067                     _prev_state:
  1004                           	opt stack 0
  1005  000067                     	ds	2
  1006  000069                     _total_number:
  1007                           	opt stack 0
  1008  000069                     	ds	2
  1009  00006B                     _valid:
  1010                           	opt stack 0
  1011  00006B                     	ds	2
  1012  00006D                     _counter_step:
  1013                           	opt stack 0
  1014  00006D                     	ds	2
  1015  00006F                     _counter:
  1016                           	opt stack 0
  1017  00006F                     	ds	2
  1018  000071                     _operationTime:
  1019                           	opt stack 0
  1020  000071                     	ds	2
  1021  000073                     _operation:
  1022                           	opt stack 0
  1023  000073                     	ds	2
  1024  000075                     _j:
  1025                           	opt stack 0
  1026  000075                     	ds	1
  1027  000076                     _temp:
  1028                           	opt stack 0
  1029  000076                     	ds	1
  1030  000077                     	ds	1
  1031  000078                     _current_set2:
  1032                           	opt stack 0
  1033  000078                     	ds	5
  1034  00007D                     _number:
  1035                           	opt stack 0
  1036  00007D                     	ds	2
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           
  1044                           	psect	bssBANK0
  1045  000080                     __pbssBANK0:
  1046                           	opt stack 0
  1047  000080                     _compartment_array:
  1048                           	opt stack 0
  1049  000080                     	ds	16
  1050  000090                     _final_time:
  1051                           	opt stack 0
  1052  000090                     	ds	2
  1053  000092                     _sec_final:
  1054                           	opt stack 0
  1055  000092                     	ds	2
  1056  000094                     _min_final:
  1057                           	opt stack 0
  1058  000094                     	ds	2
  1059  000096                     _hr_final:
  1060                           	opt stack 0
  1061  000096                     	ds	2
  1062  000098                     _initial_time:
  1063                           	opt stack 0
  1064  000098                     	ds	2
  1065  00009A                     _W_done:
  1066                           	opt stack 0
  1067  00009A                     	ds	2
  1068  00009C                     _S_done:
  1069                           	opt stack 0
  1070  00009C                     	ds	2
  1071  00009E                     _N_done:
  1072                           	opt stack 0
  1073  00009E                     	ds	2
  1074  0000A0                     _B_done:
  1075                           	opt stack 0
  1076  0000A0                     	ds	2
  1077  0000A2                     _W_spacingTime:
  1078                           	opt stack 0
  1079  0000A2                     	ds	2
  1080  0000A4                     _S_spacingTime:
  1081                           	opt stack 0
  1082  0000A4                     	ds	2
  1083  0000A6                     _N_spacingTime:
  1084                           	opt stack 0
  1085  0000A6                     	ds	2
  1086  0000A8                     _B_spacingTime:
  1087                           	opt stack 0
  1088  0000A8                     	ds	2
  1089  0000AA                     _W_remain:
  1090                           	opt stack 0
  1091  0000AA                     	ds	2
  1092  0000AC                     _S_remain:
  1093                           	opt stack 0
  1094  0000AC                     	ds	2
  1095  0000AE                     _N_remain:
  1096                           	opt stack 0
  1097  0000AE                     	ds	2
  1098  0000B0                     _B_remain:
  1099                           	opt stack 0
  1100  0000B0                     	ds	2
  1101  0000B2                     _W_count:
  1102                           	opt stack 0
  1103  0000B2                     	ds	2
  1104  0000B4                     _N_count:
  1105                           	opt stack 0
  1106  0000B4                     	ds	2
  1107  0000B6                     _S_count:
  1108                           	opt stack 0
  1109  0000B6                     	ds	2
  1110  0000B8                     _B_count:
  1111                           	opt stack 0
  1112  0000B8                     	ds	2
  1113  0000BA                     _assembly_step:
  1114                           	opt stack 0
  1115  0000BA                     	ds	2
  1116  0000BC                     _state:
  1117                           	opt stack 0
  1118  0000BC                     	ds	2
  1119  0000BE                     _compartment_pos:
  1120                           	opt stack 0
  1121  0000BE                     	ds	2
  1122  0000C0                     _prev:
  1123                           	opt stack 0
  1124  0000C0                     	ds	2
  1125  0000C2                     _gear_counter:
  1126                           	opt stack 0
  1127  0000C2                     	ds	2
  1128  0000C4                     _operation_done:
  1129                           	opt stack 0
  1130  0000C4                     	ds	2
  1131  0000C6                     _change_mode:
  1132                           	opt stack 0
  1133  0000C6                     	ds	2
  1134  0000C8                     _mode:
  1135                           	opt stack 0
  1136  0000C8                     	ds	2
  1137  0000CA                     _white_tape:
  1138                           	opt stack 0
  1139  0000CA                     	ds	2
  1140  0000CC                     _i:
  1141                           	opt stack 0
  1142  0000CC                     	ds	2
  1143  0000CE                     _LCDinterruptState:
  1144                           	opt stack 0
  1145  0000CE                     	ds	1
  1146  0000CF                     _current_set:
  1147                           	opt stack 0
  1148  0000CF                     	ds	5
  1149                           tblptru	equ	0xFF8
  1150                           tblptrh	equ	0xFF7
  1151                           tblptrl	equ	0xFF6
  1152                           tablat	equ	0xFF5
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           
  1156                           	psect	dataBANK0
  1157  0000FD                     __pdataBANK0:
  1158                           	opt stack 0
  1159  0000FD                     _init_position:
  1160                           	opt stack 0
  1161  0000FD                     	ds	2
  1162                           tblptru	equ	0xFF8
  1163                           tblptrh	equ	0xFF7
  1164                           tblptrl	equ	0xFF6
  1165                           tablat	equ	0xFF5
  1166                           postinc0	equ	0xFEE
  1167                           wreg	equ	0xFE8
  1168                           
  1169                           	psect	bssBANK1
  1170  000100                     __pbssBANK1:
  1171                           	opt stack 0
  1172  000100                     _W_array:
  1173                           	opt stack 0
  1174  000100                     	ds	16
  1175  000110                     _N_array:
  1176                           	opt stack 0
  1177  000110                     	ds	16
  1178  000120                     _S_array:
  1179                           	opt stack 0
  1180  000120                     	ds	16
  1181  000130                     _B_array:
  1182                           	opt stack 0
  1183  000130                     	ds	16
  1184  000140                     _prev_number:
  1185                           	opt stack 0
  1186  000140                     	ds	16
  1187  000150                     _final_number:
  1188                           	opt stack 0
  1189  000150                     	ds	16
  1190  000160                     _error:
  1191                           	opt stack 0
  1192  000160                     	ds	2
  1193  000162                     _angle:
  1194                           	opt stack 0
  1195  000162                     	ds	2
  1196  000164                     _prev_set:
  1197                           	opt stack 0
  1198  000164                     	ds	40
  1199  00018C                     _final_set:
  1200                           	opt stack 0
  1201  00018C                     	ds	40
  1202  0001B4                     _temp_set:
  1203                           	opt stack 0
  1204  0001B4                     	ds	5
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           postinc0	equ	0xFEE
  1210                           wreg	equ	0xFE8
  1211                           
  1212                           	psect	bssBANK2
  1213  000200                     __pbssBANK2:
  1214                           	opt stack 0
  1215  000200                     _fastener:
  1216                           	opt stack 0
  1217  000200                     	ds	200
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           
  1225                           	psect	cstackBANK0
  1226  0000D4                     __pcstackBANK0:
  1227                           	opt stack 0
  1228  0000D4                     ??_servoRotate_clockwise:
  1229  0000D4                     ??_servoRotate_ConStop:
  1230  0000D4                     ??_motorStart_0:
  1231  0000D4                     ??_motorStop_0:
  1232  0000D4                     ??_motorStart_1:
  1233  0000D4                     ??_motorStop_1:
  1234  0000D4                     ??_motorStart_2:
  1235  0000D4                     ??_motorStop_2:
  1236  0000D4                     ??_motorStart_3:
  1237  0000D4                     ??_motorStop_3:
  1238  0000D4                     ??_servoRotate_counter:
  1239  0000D4                     ??_isdigit:
  1240  0000D4                     ??_I2C_Master_Wait:
  1241  0000D4                     ?_read_IR:
  1242                           	opt stack 0
  1243  0000D4                     ?_readADC:
  1244                           	opt stack 0
  1245  0000D4                     ?___awdiv:
  1246                           	opt stack 0
  1247  0000D4                     ?___lwdiv:
  1248                           	opt stack 0
  1249  0000D4                     ?___lldiv:
  1250                           	opt stack 0
  1251  0000D4                     lcdNibble@temp:
  1252                           	opt stack 0
  1253  0000D4                     ___awdiv@dividend:
  1254                           	opt stack 0
  1255  0000D4                     ___lwdiv@dividend:
  1256                           	opt stack 0
  1257  0000D4                     ___lldiv@dividend:
  1258                           	opt stack 0
  1259                           
  1260                           ; 4 bytes @ 0x0
  1261  0000D4                     	ds	1
  1262  0000D5                     lcdNibble@data:
  1263                           	opt stack 0
  1264  0000D5                     I2C_Master_Read@ackBit:
  1265                           	opt stack 0
  1266  0000D5                     _isdigit$1385:
  1267                           	opt stack 0
  1268  0000D5                     I2C_Master_Write@byteToWrite:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x1
  1272  0000D5                     	ds	1
  1273  0000D6                     ??_readADC:
  1274  0000D6                     lcdInst@data:
  1275                           	opt stack 0
  1276  0000D6                     putch@data:
  1277                           	opt stack 0
  1278  0000D6                     read_IR@input:
  1279                           	opt stack 0
  1280  0000D6                     I2C_Master_Read@receivedByte:
  1281                           	opt stack 0
  1282  0000D6                     isdigit@c:
  1283                           	opt stack 0
  1284  0000D6                     ___awdiv@divisor:
  1285                           	opt stack 0
  1286  0000D6                     ___lwdiv@divisor:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x2
  1290  0000D6                     	ds	1
  1291  0000D7                     ??_initLCD:
  1292                           
  1293                           ; 1 bytes @ 0x3
  1294  0000D7                     	ds	1
  1295  0000D8                     readADC@channel:
  1296                           	opt stack 0
  1297  0000D8                     ___awdiv@counter:
  1298                           	opt stack 0
  1299  0000D8                     ___lwdiv@quotient:
  1300                           	opt stack 0
  1301  0000D8                     ___lldiv@divisor:
  1302                           	opt stack 0
  1303                           
  1304                           ; 4 bytes @ 0x4
  1305  0000D8                     	ds	1
  1306  0000D9                     ___awdiv@sign:
  1307                           	opt stack 0
  1308                           
  1309                           ; 1 bytes @ 0x5
  1310  0000D9                     	ds	1
  1311  0000DA                     ___lwdiv@counter:
  1312                           	opt stack 0
  1313  0000DA                     ___awdiv@quotient:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x6
  1317  0000DA                     	ds	1
  1318  0000DB                     ?___lwmod:
  1319                           	opt stack 0
  1320  0000DB                     ___lwmod@dividend:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0x7
  1324  0000DB                     	ds	1
  1325  0000DC                     ?___wmul:
  1326                           	opt stack 0
  1327  0000DC                     ___wmul@multiplier:
  1328                           	opt stack 0
  1329  0000DC                     ___lldiv@quotient:
  1330                           	opt stack 0
  1331                           
  1332                           ; 4 bytes @ 0x8
  1333  0000DC                     	ds	1
  1334  0000DD                     ___lwmod@divisor:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x9
  1338  0000DD                     	ds	1
  1339  0000DE                     ___wmul@multiplicand:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0xA
  1343  0000DE                     	ds	1
  1344  0000DF                     ___lwmod@counter:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0xB
  1348  0000DF                     	ds	1
  1349  0000E0                     ___lldiv@counter:
  1350                           	opt stack 0
  1351  0000E0                     ___wmul@product:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0xC
  1355  0000E0                     	ds	1
  1356  0000E1                     I2C_Master_Init@clockFreq:
  1357                           	opt stack 0
  1358                           
  1359                           ; 4 bytes @ 0xD
  1360  0000E1                     	ds	1
  1361  0000E2                     ??_get_RTC_initial:
  1362  0000E2                     ??_get_RTC_final:
  1363  0000E2                     ?_printf:
  1364                           	opt stack 0
  1365  0000E2                     printf@f:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0xE
  1369  0000E2                     	ds	3
  1370  0000E5                     ??_I2C_Master_Init:
  1371                           
  1372                           ; 1 bytes @ 0x11
  1373  0000E5                     	ds	1
  1374  0000E6                     ??_printf:
  1375                           
  1376                           ; 1 bytes @ 0x12
  1377  0000E6                     	ds	3
  1378  0000E9                     
  1379                           ; 1 bytes @ 0x15
  1380  0000E9                     	ds	1
  1381  0000EA                     printf@idx:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x16
  1385  0000EA                     	ds	1
  1386  0000EB                     printf@prec:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x17
  1390  0000EB                     	ds	1
  1391  0000EC                     printf@cp:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x18
  1395  0000EC                     	ds	2
  1396  0000EE                     printf@ap:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x1A
  1400  0000EE                     	ds	2
  1401  0000F0                     printf@len:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x1C
  1405  0000F0                     	ds	2
  1406  0000F2                     printf@val:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x1E
  1410  0000F2                     	ds	2
  1411  0000F4                     printf@flag:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x20
  1415  0000F4                     	ds	1
  1416  0000F5                     printf@width:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x21
  1420  0000F5                     	ds	2
  1421  0000F7                     printf@c:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x23
  1425  0000F7                     	ds	1
  1426  0000F8                     ??_count_gear:
  1427                           
  1428                           ; 1 bytes @ 0x24
  1429  0000F8                     	ds	1
  1430  0000F9                     ??_main:
  1431                           
  1432                           ; 1 bytes @ 0x25
  1433  0000F9                     	ds	2
  1434  0000FB                     _main$1753:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x27
  1438  0000FB                     	ds	2
  1439                           tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           
  1446                           	psect	cstackCOMRAM
  1447  000001                     __pcstackCOMRAM:
  1448                           	opt stack 0
  1449  000001                     ??i2_I2C_Master_Wait:
  1450  000001                     ??i2_isdigit:
  1451  000001                     ?_check:
  1452                           	opt stack 0
  1453  000001                     ?_strcmp:
  1454                           	opt stack 0
  1455  000001                     ?___awmod:
  1456                           	opt stack 0
  1457  000001                     ?i2___wmul:
  1458                           	opt stack 0
  1459  000001                     ?i2___awdiv:
  1460                           	opt stack 0
  1461  000001                     ?i2___lwdiv:
  1462                           	opt stack 0
  1463  000001                     ?i2___lldiv:
  1464                           	opt stack 0
  1465  000001                     i2lcdNibble@temp:
  1466                           	opt stack 0
  1467  000001                     generate_compartment_array@step:
  1468                           	opt stack 0
  1469  000001                     ___awmod@dividend:
  1470                           	opt stack 0
  1471  000001                     strcat@to:
  1472                           	opt stack 0
  1473  000001                     strcmp@s1:
  1474                           	opt stack 0
  1475  000001                     i2___wmul@multiplier:
  1476                           	opt stack 0
  1477  000001                     i2___awdiv@dividend:
  1478                           	opt stack 0
  1479  000001                     i2___lwdiv@dividend:
  1480                           	opt stack 0
  1481  000001                     i2___lldiv@dividend:
  1482                           	opt stack 0
  1483                           
  1484                           ; 4 bytes @ 0x0
  1485  000001                     	ds	1
  1486  000002                     i2lcdNibble@data:
  1487                           	opt stack 0
  1488  000002                     i2I2C_Master_Read@ackBit:
  1489                           	opt stack 0
  1490  000002                     i2_isdigit$1385:
  1491                           	opt stack 0
  1492  000002                     i2I2C_Master_Write@byteToWrite:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x1
  1496  000002                     	ds	1
  1497  000003                     ??_generate_compartment_array:
  1498  000003                     i2lcdInst@data:
  1499                           	opt stack 0
  1500  000003                     i2putch@data:
  1501                           	opt stack 0
  1502  000003                     i2I2C_Master_Read@receivedByte:
  1503                           	opt stack 0
  1504  000003                     i2isdigit@c:
  1505                           	opt stack 0
  1506  000003                     ___awmod@divisor:
  1507                           	opt stack 0
  1508  000003                     strcat@from:
  1509                           	opt stack 0
  1510  000003                     strcmp@s2:
  1511                           	opt stack 0
  1512  000003                     i2___wmul@multiplicand:
  1513                           	opt stack 0
  1514  000003                     i2___awdiv@divisor:
  1515                           	opt stack 0
  1516  000003                     i2___lwdiv@divisor:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x2
  1520  000003                     	ds	1
  1521  000004                     ??i2_initLCD:
  1522  000004                     
  1523                           ; 1 bytes @ 0x3
  1524  000004                     	ds	1
  1525  000005                     ??_strcmp:
  1526  000005                     ___awmod@counter:
  1527                           	opt stack 0
  1528  000005                     i2___awdiv@counter:
  1529                           	opt stack 0
  1530  000005                     strcat@cp:
  1531                           	opt stack 0
  1532  000005                     i2___wmul@product:
  1533                           	opt stack 0
  1534  000005                     i2___lwdiv@quotient:
  1535                           	opt stack 0
  1536  000005                     i2___lldiv@divisor:
  1537                           	opt stack 0
  1538                           
  1539                           ; 4 bytes @ 0x4
  1540  000005                     	ds	1
  1541  000006                     ___awmod@sign:
  1542                           	opt stack 0
  1543  000006                     strcmp@r:
  1544                           	opt stack 0
  1545  000006                     i2___awdiv@sign:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x5
  1549  000006                     	ds	1
  1550  000007                     ??_is_valid:
  1551  000007                     ?_strncmp:
  1552                           	opt stack 0
  1553  000007                     i2___lwdiv@counter:
  1554                           	opt stack 0
  1555  000007                     strcpy@to:
  1556                           	opt stack 0
  1557  000007                     strncmp@s1:
  1558                           	opt stack 0
  1559  000007                     i2___awdiv@quotient:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x6
  1563  000007                     	ds	1
  1564  000008                     ?i2___lwmod:
  1565                           	opt stack 0
  1566  000008                     i2___lwmod@dividend:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x7
  1570  000008                     	ds	1
  1571  000009                     strcpy@from:
  1572                           	opt stack 0
  1573  000009                     strncmp@s2:
  1574                           	opt stack 0
  1575  000009                     i2___lldiv@quotient:
  1576                           	opt stack 0
  1577                           
  1578                           ; 4 bytes @ 0x8
  1579  000009                     	ds	1
  1580  00000A                     i2___lwmod@divisor:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x9
  1584  00000A                     	ds	1
  1585  00000B                     strcpy@cp:
  1586                           	opt stack 0
  1587  00000B                     strncmp@len:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0xA
  1591  00000B                     	ds	1
  1592  00000C                     i2___lwmod@counter:
  1593                           	opt stack 0
  1594                           
  1595                           ; 1 bytes @ 0xB
  1596  00000C                     	ds	1
  1597  00000D                     ??_strncmp:
  1598  00000D                     ?i2_printf:
  1599                           	opt stack 0
  1600  00000D                     i2___lldiv@counter:
  1601                           	opt stack 0
  1602  00000D                     i2printf@f:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0xC
  1606  00000D                     	ds	1
  1607  00000E                     i2I2C_Master_Init@clockFreq:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0xD
  1611  00000E                     	ds	4
  1612  000012                     ??i2_I2C_Master_Init:
  1613                           
  1614                           ; 1 bytes @ 0x11
  1615  000012                     	ds	3
  1616  000015                     ??i2_printf:
  1617                           
  1618                           ; 1 bytes @ 0x14
  1619  000015                     	ds	4
  1620  000019                     i2printf@idx:
  1621                           	opt stack 0
  1622                           
  1623                           ; 1 bytes @ 0x18
  1624  000019                     	ds	1
  1625  00001A                     i2printf@prec:
  1626                           	opt stack 0
  1627                           
  1628                           ; 1 bytes @ 0x19
  1629  00001A                     	ds	1
  1630  00001B                     i2printf@cp:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x1A
  1634  00001B                     	ds	2
  1635  00001D                     i2printf@ap:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x1C
  1639  00001D                     	ds	2
  1640  00001F                     i2printf@len:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x1E
  1644  00001F                     	ds	2
  1645  000021                     i2printf@val:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x20
  1649  000021                     	ds	2
  1650  000023                     i2printf@flag:
  1651                           	opt stack 0
  1652                           
  1653                           ; 1 bytes @ 0x22
  1654  000023                     	ds	1
  1655  000024                     i2printf@width:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x23
  1659  000024                     	ds	2
  1660  000026                     i2printf@c:
  1661                           	opt stack 0
  1662                           
  1663                           ; 1 bytes @ 0x25
  1664  000026                     	ds	1
  1665  000027                     ??_interruptHandler:
  1666                           
  1667                           ; 1 bytes @ 0x26
  1668  000027                     	ds	23
  1669  00003E                     interruptHandler@i:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x3D
  1673  00003E                     	ds	2
  1674  000040                     interruptHandler@keypress:
  1675                           	opt stack 0
  1676                           
  1677                           ; 1 bytes @ 0x3F
  1678  000040                     	ds	1
  1679  000041                     interruptHandler@temp:
  1680                           	opt stack 0
  1681                           
  1682                           ; 1 bytes @ 0x40
  1683  000041                     	ds	1
  1684                           tblptru	equ	0xFF8
  1685                           tblptrh	equ	0xFF7
  1686                           tblptrl	equ	0xFF6
  1687                           tablat	equ	0xFF5
  1688                           postinc0	equ	0xFEE
  1689                           wreg	equ	0xFE8
  1690                           
  1691 ;;
  1692 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1693 ;;
  1694 ;; *************** function _main *****************
  1695 ;; Defined at:
  1696 ;;		line 63 in file "main.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:        4 bytes
  1715 ;; Hardware stack levels required when called:    8
  1716 ;; This function calls:
  1717 ;;		___awdiv
  1718 ;;		___wmul
  1719 ;;		_count_gear
  1720 ;;		_get_RTC_final
  1721 ;;		_get_RTC_initial
  1722 ;;		_initLCD
  1723 ;;		_initRamp
  1724 ;;		_initialize
  1725 ;;		_lcdInst
  1726 ;;		_motorStart_0
  1727 ;;		_motorStart_1
  1728 ;;		_motorStart_2
  1729 ;;		_motorStart_3
  1730 ;;		_motorStop_0
  1731 ;;		_motorStop_1
  1732 ;;		_motorStop_2
  1733 ;;		_motorStop_3
  1734 ;;		_printf
  1735 ;;		_ramp_Rotate
  1736 ;;		_readADC
  1737 ;;		_read_IR
  1738 ;;		_servoRotate_ConStop
  1739 ;;		_servoRotate_clockwise
  1740 ;;		_servoRotate_counter
  1741 ;; This function is called by:
  1742 ;;		Startup code after reset
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text0
  1747  000012                     __ptext0:
  1748                           	opt stack 0
  1749  000012                     _main:
  1750                           	opt stack 23
  1751                           
  1752                           ;main.c: 67: OSCCON = 0xF2;
  1753                           
  1754                           ;incstack = 0
  1755  000012  0EF2               	movlw	242
  1756  000014  6ED3               	movwf	4051,c	;volatile
  1757                           
  1758                           ;main.c: 72: LATA = 0x00;
  1759  000016  0E00               	movlw	0
  1760  000018  6E89               	movwf	3977,c	;volatile
  1761                           
  1762                           ;main.c: 73: LATB = 0x00;
  1763  00001A  0E00               	movlw	0
  1764  00001C  6E8A               	movwf	3978,c	;volatile
  1765                           
  1766                           ;main.c: 74: LATC = 0x00;
  1767  00001E  0E00               	movlw	0
  1768  000020  6E8B               	movwf	3979,c	;volatile
  1769                           
  1770                           ;main.c: 75: LATD = 0x00;
  1771  000022  0E00               	movlw	0
  1772  000024  6E8C               	movwf	3980,c	;volatile
  1773                           
  1774                           ;main.c: 76: LATE = 0x00;
  1775  000026  0E00               	movlw	0
  1776  000028  6E8D               	movwf	3981,c	;volatile
  1777                           
  1778                           ;main.c: 80: TRISA = 0xFF;
  1779  00002A  6892               	setf	3986,c	;volatile
  1780                           
  1781                           ;main.c: 81: TRISB = 0xFF;
  1782  00002C  6893               	setf	3987,c	;volatile
  1783                           
  1784                           ;main.c: 82: TRISC = 0x00;
  1785  00002E  0E00               	movlw	0
  1786  000030  6E94               	movwf	3988,c	;volatile
  1787                           
  1788                           ;main.c: 83: TRISD = 0x00;
  1789  000032  0E00               	movlw	0
  1790  000034  6E95               	movwf	3989,c	;volatile
  1791                           
  1792                           ;main.c: 84: TRISE = 0x00;
  1793  000036  0E00               	movlw	0
  1794  000038  6E96               	movwf	3990,c	;volatile
  1795                           
  1796                           ;main.c: 87: ADCON0 = 0x00;
  1797  00003A  0E00               	movlw	0
  1798  00003C  6EC2               	movwf	4034,c	;volatile
  1799                           
  1800                           ;main.c: 88: ADCON1 = 0b00001111;
  1801  00003E  0E0F               	movlw	15
  1802  000040  6EC1               	movwf	4033,c	;volatile
  1803                           
  1804                           ;main.c: 91: INT1IE = 1;
  1805  000042  86F0               	bsf	intcon3,3,c	;volatile
  1806                           
  1807                           ;main.c: 92: (INTCONbits.GIE = 1);
  1808  000044  8EF2               	bsf	intcon,7,c	;volatile
  1809                           
  1810                           ;main.c: 95: initLCD();
  1811  000046  EC40  F01F         	call	_initLCD	;wreg free
  1812  00004A                     
  1813                           ;main.c: 100: if (mode == 0){
  1814  00004A  0100               	movlb	0	; () banked
  1815  00004C  51C8               	movf	_mode& (0+255),w,b
  1816  00004E  11C9               	iorwf	(_mode+1)& (0+255),w,b
  1817  000050  A4D8               	btfss	status,2,c
  1818  000052  D032               	goto	l330
  1819  000054                     u4260:
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 102: printf("1:date and time");
  1823                           
  1824                           ; BSR set to: 0
  1825                           
  1826                           ;main.c: 101: while(1){
  1827  000054  0E86               	movlw	low STR_1
  1828  000056  6FE2               	movwf	printf@f& (0+255),b
  1829  000058  0EFE               	movlw	high STR_1
  1830  00005A  6FE3               	movwf	(printf@f+1)& (0+255),b
  1831  00005C  EC5F  F014         	call	_printf	;wreg free
  1832                           
  1833                           ;main.c: 103: lcdInst(0xC0);;
  1834  000060  0EC0               	movlw	192
  1835  000062  ECDB  F021         	call	_lcdInst
  1836                           
  1837                           ;main.c: 104: printf("2:instruction");
  1838  000066  0E1C               	movlw	low STR_2
  1839  000068  0100               	movlb	0	; () banked
  1840  00006A  6FE2               	movwf	printf@f& (0+255),b
  1841  00006C  0EFF               	movlw	high STR_2
  1842  00006E  6FE3               	movwf	(printf@f+1)& (0+255),b
  1843  000070  EC5F  F014         	call	_printf	;wreg free
  1844                           
  1845                           ;main.c: 105: _delay((unsigned long)((300)*(40000000/4000.0)));
  1846  000074  0E10               	movlw	16
  1847  000076  0100               	movlb	0	; () banked
  1848  000078  6FFA               	movwf	(??_main+1)& (0+255),b
  1849  00007A  0E39               	movlw	57
  1850  00007C  6FF9               	movwf	??_main& (0+255),b
  1851  00007E  0E0D               	movlw	13
  1852  000080                     u5167:
  1853  000080  2EE8               	decfsz	wreg,f,c
  1854  000082  D7FE               	bra	u5167
  1855  000084  2FF9               	decfsz	??_main& (0+255),f,b
  1856  000086  D7FC               	bra	u5167
  1857  000088  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  1858  00008A  D7FA               	bra	u5167
  1859  00008C  D000               	nop2	
  1860                           
  1861                           ;main.c: 106: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1862  00008E  0E80               	movlw	128
  1863  000090  ECDB  F021         	call	_lcdInst
  1864  000094  0E41               	movlw	65
  1865  000096  0100               	movlb	0	; () banked
  1866  000098  6FF9               	movwf	??_main& (0+255),b
  1867  00009A  0EEE               	movlw	238
  1868  00009C                     u5177:
  1869  00009C  2EE8               	decfsz	wreg,f,c
  1870  00009E  D7FE               	bra	u5177
  1871  0000A0  2FF9               	decfsz	??_main& (0+255),f,b
  1872  0000A2  D7FC               	bra	u5177
  1873  0000A4  F000               	nop	
  1874                           
  1875                           ;main.c: 107: if (change_mode == 1){
  1876  0000A6  0100               	movlb	0	; () banked
  1877  0000A8  05C6               	decf	_change_mode& (0+255),w,b
  1878  0000AA  11C7               	iorwf	(_change_mode+1)& (0+255),w,b
  1879  0000AC  A4D8               	btfss	status,2,c
  1880  0000AE  D7D2               	goto	u4260
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 108: mode = 1;
  1884  0000B0  0E00               	movlw	0
  1885  0000B2  6FC9               	movwf	(_mode+1)& (0+255),b
  1886  0000B4  0E01               	movlw	1
  1887  0000B6  6FC8               	movwf	_mode& (0+255),b
  1888  0000B8                     l330:
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;main.c: 110: }
  1892                           ;main.c: 111: }
  1893                           ;main.c: 113: }
  1894                           ;main.c: 116: if (mode == 1){
  1895                           
  1896                           ; BSR set to: 0
  1897                           
  1898                           ; BSR set to: 0
  1899  0000B8  05C8               	decf	_mode& (0+255),w,b
  1900  0000BA  11C9               	iorwf	(_mode+1)& (0+255),w,b
  1901  0000BC  A4D8               	btfss	status,2,c
  1902  0000BE  D1E5               	goto	l343
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;main.c: 118: initLCD();
  1906  0000C0  EC40  F01F         	call	_initLCD	;wreg free
  1907  0000C4                     
  1908                           ;main.c: 121: if (state == 0){
  1909  0000C4  0100               	movlb	0	; () banked
  1910  0000C6  51BC               	movf	_state& (0+255),w,b
  1911  0000C8  11BD               	iorwf	(_state+1)& (0+255),w,b
  1912  0000CA  A4D8               	btfss	status,2,c
  1913  0000CC  D023               	goto	l334
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;main.c: 123: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1917  0000CE  0E80               	movlw	128
  1918  0000D0  ECDB  F021         	call	_lcdInst
  1919  0000D4  0E41               	movlw	65
  1920  0000D6  0100               	movlb	0	; () banked
  1921  0000D8  6FF9               	movwf	??_main& (0+255),b
  1922  0000DA  0EEE               	movlw	238
  1923  0000DC                     u5187:
  1924  0000DC  2EE8               	decfsz	wreg,f,c
  1925  0000DE  D7FE               	bra	u5187
  1926  0000E0  2FF9               	decfsz	??_main& (0+255),f,b
  1927  0000E2  D7FC               	bra	u5187
  1928  0000E4  F000               	nop	
  1929                           
  1930                           ;main.c: 124: printf("assembly step:");
  1931  0000E6  0EB5               	movlw	low STR_3
  1932  0000E8  0100               	movlb	0	; () banked
  1933  0000EA  6FE2               	movwf	printf@f& (0+255),b
  1934  0000EC  0EFE               	movlw	high STR_3
  1935  0000EE  6FE3               	movwf	(printf@f+1)& (0+255),b
  1936  0000F0  EC5F  F014         	call	_printf	;wreg free
  1937                           
  1938                           ;main.c: 125: _delay((unsigned long)((500)*(40000000/4000.0)));
  1939  0000F4  0E1A               	movlw	26
  1940  0000F6  0100               	movlb	0	; () banked
  1941  0000F8  6FFA               	movwf	(??_main+1)& (0+255),b
  1942  0000FA  0E5E               	movlw	94
  1943  0000FC  6FF9               	movwf	??_main& (0+255),b
  1944  0000FE  0E6E               	movlw	110
  1945  000100                     u5197:
  1946  000100  2EE8               	decfsz	wreg,f,c
  1947  000102  D7FE               	bra	u5197
  1948  000104  2FF9               	decfsz	??_main& (0+255),f,b
  1949  000106  D7FC               	bra	u5197
  1950  000108  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  1951  00010A  D7FA               	bra	u5197
  1952  00010C  F000               	nop	
  1953                           
  1954                           ;main.c: 126: lcdInst(0xC0);;
  1955  00010E  0EC0               	movlw	192
  1956  000110  ECDB  F021         	call	_lcdInst
  1957  000114                     l334:
  1958                           
  1959                           ;main.c: 127: }
  1960                           ;main.c: 128: if (state ==1){
  1961  000114  0100               	movlb	0	; () banked
  1962  000116  05BC               	decf	_state& (0+255),w,b
  1963  000118  11BD               	iorwf	(_state+1)& (0+255),w,b
  1964  00011A  A4D8               	btfss	status,2,c
  1965  00011C  D024               	goto	l335
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;main.c: 129: initLCD();
  1969  00011E  EC40  F01F         	call	_initLCD	;wreg free
  1970                           
  1971                           ;main.c: 130: printf("fastener set:");
  1972  000122  0E00               	movlw	low STR_4
  1973  000124  0100               	movlb	0	; () banked
  1974  000126  6FE2               	movwf	printf@f& (0+255),b
  1975  000128  0EFF               	movlw	high STR_4
  1976  00012A  6FE3               	movwf	(printf@f+1)& (0+255),b
  1977  00012C  EC5F  F014         	call	_printf	;wreg free
  1978                           
  1979                           ;main.c: 131: lcdInst(0xC0);;
  1980  000130  0EC0               	movlw	192
  1981  000132  ECDB  F021         	call	_lcdInst
  1982                           
  1983                           ;main.c: 132: printf("%s",current_set);
  1984  000136  0EF7               	movlw	low STR_5
  1985  000138  0100               	movlb	0	; () banked
  1986  00013A  6FE2               	movwf	printf@f& (0+255),b
  1987  00013C  0EFF               	movlw	high STR_5
  1988  00013E  6FE3               	movwf	(printf@f+1)& (0+255),b
  1989  000140  0ECF               	movlw	low _current_set
  1990  000142  6FE4               	movwf	(?_printf+2)& (0+255),b
  1991  000144  0E00               	movlw	high _current_set
  1992  000146  6FE5               	movwf	(?_printf+3)& (0+255),b
  1993  000148  EC5F  F014         	call	_printf	;wreg free
  1994                           
  1995                           ;main.c: 133: _delay((unsigned long)((500)*(40000000/4000.0)));
  1996  00014C  0E1A               	movlw	26
  1997  00014E  0100               	movlb	0	; () banked
  1998  000150  6FFA               	movwf	(??_main+1)& (0+255),b
  1999  000152  0E5E               	movlw	94
  2000  000154  6FF9               	movwf	??_main& (0+255),b
  2001  000156  0E6E               	movlw	110
  2002  000158                     u5207:
  2003  000158  2EE8               	decfsz	wreg,f,c
  2004  00015A  D7FE               	bra	u5207
  2005  00015C  2FF9               	decfsz	??_main& (0+255),f,b
  2006  00015E  D7FC               	bra	u5207
  2007  000160  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2008  000162  D7FA               	bra	u5207
  2009  000164  F000               	nop	
  2010  000166                     l335:
  2011                           
  2012                           ;main.c: 134: }
  2013                           ;main.c: 136: if (state == 2){
  2014  000166  0E02               	movlw	2
  2015  000168  0100               	movlb	0	; () banked
  2016  00016A  19BC               	xorwf	_state& (0+255),w,b
  2017  00016C  11BD               	iorwf	(_state+1)& (0+255),w,b
  2018  00016E  A4D8               	btfss	status,2,c
  2019  000170  D016               	goto	l336
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;main.c: 137: initLCD();
  2023  000172  EC40  F01F         	call	_initLCD	;wreg free
  2024                           
  2025                           ;main.c: 138: printf("number:");
  2026  000176  0E76               	movlw	low STR_6
  2027  000178  0100               	movlb	0	; () banked
  2028  00017A  6FE2               	movwf	printf@f& (0+255),b
  2029  00017C  0EFF               	movlw	high STR_6
  2030  00017E  6FE3               	movwf	(printf@f+1)& (0+255),b
  2031  000180  EC5F  F014         	call	_printf	;wreg free
  2032                           
  2033                           ;main.c: 139: _delay((unsigned long)((500)*(40000000/4000.0)));
  2034  000184  0E1A               	movlw	26
  2035  000186  0100               	movlb	0	; () banked
  2036  000188  6FFA               	movwf	(??_main+1)& (0+255),b
  2037  00018A  0E5E               	movlw	94
  2038  00018C  6FF9               	movwf	??_main& (0+255),b
  2039  00018E  0E6E               	movlw	110
  2040  000190                     u5217:
  2041  000190  2EE8               	decfsz	wreg,f,c
  2042  000192  D7FE               	bra	u5217
  2043  000194  2FF9               	decfsz	??_main& (0+255),f,b
  2044  000196  D7FC               	bra	u5217
  2045  000198  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2046  00019A  D7FA               	bra	u5217
  2047  00019C  F000               	nop	
  2048  00019E                     l336:
  2049                           
  2050                           ;main.c: 140: }
  2051                           ;main.c: 142: if (state == 3){
  2052  00019E  0E03               	movlw	3
  2053  0001A0  0100               	movlb	0	; () banked
  2054  0001A2  19BC               	xorwf	_state& (0+255),w,b
  2055  0001A4  11BD               	iorwf	(_state+1)& (0+255),w,b
  2056  0001A6  A4D8               	btfss	status,2,c
  2057  0001A8  D78D               	goto	l333
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 143: initLCD();
  2061  0001AA  EC40  F01F         	call	_initLCD	;wreg free
  2062                           
  2063                           ;main.c: 144: printf("Done!");
  2064  0001AE  0E94               	movlw	low STR_7
  2065  0001B0  0100               	movlb	0	; () banked
  2066  0001B2  6FE2               	movwf	printf@f& (0+255),b
  2067  0001B4  0EFF               	movlw	high STR_7
  2068  0001B6  6FE3               	movwf	(printf@f+1)& (0+255),b
  2069  0001B8  EC5F  F014         	call	_printf	;wreg free
  2070                           
  2071                           ;main.c: 145: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2072  0001BC  0E33               	movlw	51
  2073  0001BE  0100               	movlb	0	; () banked
  2074  0001C0  6FFA               	movwf	(??_main+1)& (0+255),b
  2075  0001C2  0EBB               	movlw	187
  2076  0001C4  6FF9               	movwf	??_main& (0+255),b
  2077  0001C6  0EDF               	movlw	223
  2078  0001C8                     u5227:
  2079  0001C8  2EE8               	decfsz	wreg,f,c
  2080  0001CA  D7FE               	bra	u5227
  2081  0001CC  2FF9               	decfsz	??_main& (0+255),f,b
  2082  0001CE  D7FC               	bra	u5227
  2083  0001D0  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2084  0001D2  D7FA               	bra	u5227
  2085  0001D4  D000               	nop2	
  2086                           
  2087                           ;main.c: 146: initLCD();
  2088  0001D6  EC40  F01F         	call	_initLCD	;wreg free
  2089                           
  2090                           ;main.c: 147: printf("assembly step:%d",assembly_step);
  2091  0001DA  0E54               	movlw	low STR_8
  2092  0001DC  0100               	movlb	0	; () banked
  2093  0001DE  6FE2               	movwf	printf@f& (0+255),b
  2094  0001E0  0EFE               	movlw	high STR_8
  2095  0001E2  6FE3               	movwf	(printf@f+1)& (0+255),b
  2096  0001E4  C0BA  F0E4         	movff	_assembly_step,?_printf+2
  2097  0001E8  C0BB  F0E5         	movff	_assembly_step+1,?_printf+3
  2098  0001EC  EC5F  F014         	call	_printf	;wreg free
  2099                           
  2100                           ;main.c: 148: _delay((unsigned long)((600)*(40000000/4000.0)));
  2101  0001F0  0E1F               	movlw	31
  2102  0001F2  0100               	movlb	0	; () banked
  2103  0001F4  6FFA               	movwf	(??_main+1)& (0+255),b
  2104  0001F6  0E71               	movlw	113
  2105  0001F8  6FF9               	movwf	??_main& (0+255),b
  2106  0001FA  0E1E               	movlw	30
  2107  0001FC                     u5237:
  2108  0001FC  2EE8               	decfsz	wreg,f,c
  2109  0001FE  D7FE               	bra	u5237
  2110  000200  2FF9               	decfsz	??_main& (0+255),f,b
  2111  000202  D7FC               	bra	u5237
  2112  000204  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2113  000206  D7FA               	bra	u5237
  2114  000208  F000               	nop	
  2115                           
  2116                           ;main.c: 149: for ( i=0; i<assembly_step; i++){
  2117  00020A  0E00               	movlw	0
  2118  00020C  0100               	movlb	0	; () banked
  2119  00020E  6FCD               	movwf	(_i+1)& (0+255),b
  2120  000210  0E00               	movlw	0
  2121  000212  6FCC               	movwf	_i& (0+255),b
  2122  000214  D074               	goto	l338
  2123  000216                     
  2124                           ; BSR set to: 0
  2125                           ;main.c: 151: initLCD();
  2126                           
  2127                           ; BSR set to: 0
  2128  000216  EC40  F01F         	call	_initLCD	;wreg free
  2129                           
  2130                           ;main.c: 153: printf("step");
  2131  00021A  0ECE               	movlw	low STR_9
  2132  00021C  0100               	movlb	0	; () banked
  2133  00021E  6FE2               	movwf	printf@f& (0+255),b
  2134  000220  0EFF               	movlw	high STR_9
  2135  000222  6FE3               	movwf	(printf@f+1)& (0+255),b
  2136  000224  EC5F  F014         	call	_printf	;wreg free
  2137                           
  2138                           ;main.c: 154: printf("%d", i+1);
  2139  000228  0E9D               	movlw	low (STR_42+3)
  2140  00022A  0100               	movlb	0	; () banked
  2141  00022C  6FE2               	movwf	printf@f& (0+255),b
  2142  00022E  0EFF               	movlw	high (STR_42+3)
  2143  000230  6FE3               	movwf	(printf@f+1)& (0+255),b
  2144  000232  0E01               	movlw	1
  2145  000234  25CC               	addwf	_i& (0+255),w,b
  2146  000236  6FE4               	movwf	(?_printf+2)& (0+255),b
  2147  000238  0E00               	movlw	0
  2148  00023A  21CD               	addwfc	(_i+1)& (0+255),w,b
  2149  00023C  6FE5               	movwf	(?_printf+3)& (0+255),b
  2150  00023E  EC5F  F014         	call	_printf	;wreg free
  2151                           
  2152                           ;main.c: 155: printf(":");
  2153  000242  0EE5               	movlw	low (STR_16+2)
  2154  000244  0100               	movlb	0	; () banked
  2155  000246  6FE2               	movwf	printf@f& (0+255),b
  2156  000248  0EFF               	movlw	high (STR_16+2)
  2157  00024A  6FE3               	movwf	(printf@f+1)& (0+255),b
  2158  00024C  EC5F  F014         	call	_printf	;wreg free
  2159                           
  2160                           ;main.c: 156: printf("%s", final_set[i]);
  2161  000250  C0CC  F0DC         	movff	_i,___wmul@multiplier
  2162  000254  C0CD  F0DD         	movff	_i+1,___wmul@multiplier+1
  2163  000258  0E00               	movlw	0
  2164  00025A  0100               	movlb	0	; () banked
  2165  00025C  6FDF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2166  00025E  0E05               	movlw	5
  2167  000260  6FDE               	movwf	___wmul@multiplicand& (0+255),b
  2168  000262  ECF6  F020         	call	___wmul	;wreg free
  2169  000266  0E8C               	movlw	low _final_set
  2170  000268  0100               	movlb	0	; () banked
  2171  00026A  25DC               	addwf	?___wmul& (0+255),w,b
  2172  00026C  6FFB               	movwf	_main$1753& (0+255),b
  2173  00026E  0E01               	movlw	high _final_set
  2174  000270  21DD               	addwfc	(?___wmul+1)& (0+255),w,b
  2175  000272  6FFC               	movwf	(_main$1753+1)& (0+255),b
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;main.c: 156: printf("%s", final_set[i]);
  2179  000274  0EF7               	movlw	low STR_5
  2180  000276  6FE2               	movwf	printf@f& (0+255),b
  2181  000278  0EFF               	movlw	high STR_5
  2182  00027A  6FE3               	movwf	(printf@f+1)& (0+255),b
  2183  00027C  C0FB  F0E4         	movff	_main$1753,?_printf+2
  2184  000280  C0FC  F0E5         	movff	_main$1753+1,?_printf+3
  2185  000284  EC5F  F014         	call	_printf	;wreg free
  2186                           
  2187                           ;main.c: 157: printf(",");
  2188  000288  0EFA               	movlw	low STR_13
  2189  00028A  0100               	movlb	0	; () banked
  2190  00028C  6FE2               	movwf	printf@f& (0+255),b
  2191  00028E  0EFF               	movlw	high STR_13
  2192  000290  6FE3               	movwf	(printf@f+1)& (0+255),b
  2193  000292  EC5F  F014         	call	_printf	;wreg free
  2194                           
  2195                           ;main.c: 158: printf("%d",final_number[i]);
  2196  000296  0E9D               	movlw	low (STR_42+3)
  2197  000298  0100               	movlb	0	; () banked
  2198  00029A  6FE2               	movwf	printf@f& (0+255),b
  2199  00029C  0EFF               	movlw	high (STR_42+3)
  2200  00029E  6FE3               	movwf	(printf@f+1)& (0+255),b
  2201  0002A0  90D8               	bcf	status,0,c
  2202  0002A2  35CC               	rlcf	_i& (0+255),w,b
  2203  0002A4  6ED9               	movwf	fsr2l,c
  2204  0002A6  35CD               	rlcf	(_i+1)& (0+255),w,b
  2205  0002A8  6EDA               	movwf	fsr2h,c
  2206  0002AA  0E50               	movlw	low _final_number
  2207  0002AC  26D9               	addwf	fsr2l,f,c
  2208  0002AE  0E01               	movlw	high _final_number
  2209  0002B0  22DA               	addwfc	fsr2h,f,c
  2210  0002B2  CFDE F0E4          	movff	postinc2,?_printf+2
  2211  0002B6  CFDD F0E5          	movff	postdec2,?_printf+3
  2212  0002BA  EC5F  F014         	call	_printf	;wreg free
  2213                           
  2214                           ;main.c: 159: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2215  0002BE  0E33               	movlw	51
  2216  0002C0  0100               	movlb	0	; () banked
  2217  0002C2  6FFA               	movwf	(??_main+1)& (0+255),b
  2218  0002C4  0EBB               	movlw	187
  2219  0002C6  6FF9               	movwf	??_main& (0+255),b
  2220  0002C8  0EDF               	movlw	223
  2221  0002CA                     u5247:
  2222  0002CA  2EE8               	decfsz	wreg,f,c
  2223  0002CC  D7FE               	bra	u5247
  2224  0002CE  2FF9               	decfsz	??_main& (0+255),f,b
  2225  0002D0  D7FC               	bra	u5247
  2226  0002D2  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2227  0002D4  D7FA               	bra	u5247
  2228  0002D6  D000               	nop2	
  2229                           
  2230                           ;main.c: 160: lcdInst(0xC0);;
  2231  0002D8  0EC0               	movlw	192
  2232  0002DA  ECDB  F021         	call	_lcdInst
  2233                           
  2234                           ;main.c: 164: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2235  0002DE  0E33               	movlw	51
  2236  0002E0  0100               	movlb	0	; () banked
  2237  0002E2  6FFA               	movwf	(??_main+1)& (0+255),b
  2238  0002E4  0EBB               	movlw	187
  2239  0002E6  6FF9               	movwf	??_main& (0+255),b
  2240  0002E8  0EDF               	movlw	223
  2241  0002EA                     u5257:
  2242  0002EA  2EE8               	decfsz	wreg,f,c
  2243  0002EC  D7FE               	bra	u5257
  2244  0002EE  2FF9               	decfsz	??_main& (0+255),f,b
  2245  0002F0  D7FC               	bra	u5257
  2246  0002F2  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2247  0002F4  D7FA               	bra	u5257
  2248  0002F6  D000               	nop2	
  2249  0002F8  0100               	movlb	0	; () banked
  2250  0002FA  4BCC               	infsnz	_i& (0+255),f,b
  2251  0002FC  2BCD               	incf	(_i+1)& (0+255),f,b
  2252  0002FE                     l338:
  2253                           
  2254                           ; BSR set to: 0
  2255                           
  2256                           ; BSR set to: 0
  2257  0002FE  51BA               	movf	_assembly_step& (0+255),w,b
  2258  000300  5DCC               	subwf	_i& (0+255),w,b
  2259  000302  51BB               	movf	(_assembly_step+1)& (0+255),w,b
  2260  000304  59CD               	subwfb	(_i+1)& (0+255),w,b
  2261  000306  A0D8               	btfss	status,0,c
  2262  000308  D786               	goto	l339
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;main.c: 166: }
  2266                           ;main.c: 168: for (i = 0; i<8; i++){
  2267                           
  2268                           ; BSR set to: 0
  2269  00030A  0E00               	movlw	0
  2270  00030C  6FCD               	movwf	(_i+1)& (0+255),b
  2271  00030E  0E00               	movlw	0
  2272  000310  6FCC               	movwf	_i& (0+255),b
  2273                           
  2274                           ; BSR set to: 0
  2275  000312  51CD               	movf	(_i+1)& (0+255),w,b
  2276  000314  E105               	bnz	u4340
  2277  000316  0E08               	movlw	8
  2278  000318  5DCC               	subwf	_i& (0+255),w,b
  2279  00031A  B0D8               	btfsc	status,0,c
  2280  00031C  D09A               	goto	u4350
  2281  00031E  D001               	goto	l341
  2282  000320                     u4340:
  2283                           
  2284                           ; BSR set to: 0
  2285  000320  D098               	goto	u4350
  2286  000322                     l341:
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;main.c: 169: initLCD();
  2290                           
  2291                           ; BSR set to: 0
  2292  000322  EC40  F01F         	call	_initLCD	;wreg free
  2293                           
  2294                           ;main.c: 170: printf("%d",compartment_array[i]);
  2295  000326  0E9D               	movlw	low (STR_42+3)
  2296  000328  0100               	movlb	0	; () banked
  2297  00032A  6FE2               	movwf	printf@f& (0+255),b
  2298  00032C  0EFF               	movlw	high (STR_42+3)
  2299  00032E  6FE3               	movwf	(printf@f+1)& (0+255),b
  2300  000330  90D8               	bcf	status,0,c
  2301  000332  35CC               	rlcf	_i& (0+255),w,b
  2302  000334  6ED9               	movwf	fsr2l,c
  2303  000336  35CD               	rlcf	(_i+1)& (0+255),w,b
  2304  000338  6EDA               	movwf	fsr2h,c
  2305  00033A  0E80               	movlw	low _compartment_array
  2306  00033C  26D9               	addwf	fsr2l,f,c
  2307  00033E  0E00               	movlw	high _compartment_array
  2308  000340  22DA               	addwfc	fsr2h,f,c
  2309  000342  CFDE F0E4          	movff	postinc2,?_printf+2
  2310  000346  CFDD F0E5          	movff	postdec2,?_printf+3
  2311  00034A  EC5F  F014         	call	_printf	;wreg free
  2312                           
  2313                           ;main.c: 171: printf(" B:");
  2314  00034E  0EE3               	movlw	low STR_16
  2315  000350  0100               	movlb	0	; () banked
  2316  000352  6FE2               	movwf	printf@f& (0+255),b
  2317  000354  0EFF               	movlw	high STR_16
  2318  000356  6FE3               	movwf	(printf@f+1)& (0+255),b
  2319  000358  EC5F  F014         	call	_printf	;wreg free
  2320                           
  2321                           ;main.c: 172: printf("%d",B_array[i]);
  2322  00035C  0E9D               	movlw	low (STR_42+3)
  2323  00035E  0100               	movlb	0	; () banked
  2324  000360  6FE2               	movwf	printf@f& (0+255),b
  2325  000362  0EFF               	movlw	high (STR_42+3)
  2326  000364  6FE3               	movwf	(printf@f+1)& (0+255),b
  2327  000366  90D8               	bcf	status,0,c
  2328  000368  35CC               	rlcf	_i& (0+255),w,b
  2329  00036A  6ED9               	movwf	fsr2l,c
  2330  00036C  35CD               	rlcf	(_i+1)& (0+255),w,b
  2331  00036E  6EDA               	movwf	fsr2h,c
  2332  000370  0E30               	movlw	low _B_array
  2333  000372  26D9               	addwf	fsr2l,f,c
  2334  000374  0E01               	movlw	high _B_array
  2335  000376  22DA               	addwfc	fsr2h,f,c
  2336  000378  CFDE F0E4          	movff	postinc2,?_printf+2
  2337  00037C  CFDD F0E5          	movff	postdec2,?_printf+3
  2338  000380  EC5F  F014         	call	_printf	;wreg free
  2339                           
  2340                           ;main.c: 173: printf(" N:");
  2341  000384  0EE7               	movlw	low STR_18
  2342  000386  0100               	movlb	0	; () banked
  2343  000388  6FE2               	movwf	printf@f& (0+255),b
  2344  00038A  0EFF               	movlw	high STR_18
  2345  00038C  6FE3               	movwf	(printf@f+1)& (0+255),b
  2346  00038E  EC5F  F014         	call	_printf	;wreg free
  2347                           
  2348                           ;main.c: 174: printf("%d",N_array[i]);
  2349  000392  0E9D               	movlw	low (STR_42+3)
  2350  000394  0100               	movlb	0	; () banked
  2351  000396  6FE2               	movwf	printf@f& (0+255),b
  2352  000398  0EFF               	movlw	high (STR_42+3)
  2353  00039A  6FE3               	movwf	(printf@f+1)& (0+255),b
  2354  00039C  90D8               	bcf	status,0,c
  2355  00039E  35CC               	rlcf	_i& (0+255),w,b
  2356  0003A0  6ED9               	movwf	fsr2l,c
  2357  0003A2  35CD               	rlcf	(_i+1)& (0+255),w,b
  2358  0003A4  6EDA               	movwf	fsr2h,c
  2359  0003A6  0E10               	movlw	low _N_array
  2360  0003A8  26D9               	addwf	fsr2l,f,c
  2361  0003AA  0E01               	movlw	high _N_array
  2362  0003AC  22DA               	addwfc	fsr2h,f,c
  2363  0003AE  CFDE F0E4          	movff	postinc2,?_printf+2
  2364  0003B2  CFDD F0E5          	movff	postdec2,?_printf+3
  2365  0003B6  EC5F  F014         	call	_printf	;wreg free
  2366                           
  2367                           ;main.c: 175: printf(" S:");
  2368  0003BA  0EEB               	movlw	low STR_20
  2369  0003BC  0100               	movlb	0	; () banked
  2370  0003BE  6FE2               	movwf	printf@f& (0+255),b
  2371  0003C0  0EFF               	movlw	high STR_20
  2372  0003C2  6FE3               	movwf	(printf@f+1)& (0+255),b
  2373  0003C4  EC5F  F014         	call	_printf	;wreg free
  2374                           
  2375                           ;main.c: 176: printf("%d",S_array[i]);
  2376  0003C8  0E9D               	movlw	low (STR_42+3)
  2377  0003CA  0100               	movlb	0	; () banked
  2378  0003CC  6FE2               	movwf	printf@f& (0+255),b
  2379  0003CE  0EFF               	movlw	high (STR_42+3)
  2380  0003D0  6FE3               	movwf	(printf@f+1)& (0+255),b
  2381  0003D2  90D8               	bcf	status,0,c
  2382  0003D4  35CC               	rlcf	_i& (0+255),w,b
  2383  0003D6  6ED9               	movwf	fsr2l,c
  2384  0003D8  35CD               	rlcf	(_i+1)& (0+255),w,b
  2385  0003DA  6EDA               	movwf	fsr2h,c
  2386  0003DC  0E20               	movlw	low _S_array
  2387  0003DE  26D9               	addwf	fsr2l,f,c
  2388  0003E0  0E01               	movlw	high _S_array
  2389  0003E2  22DA               	addwfc	fsr2h,f,c
  2390  0003E4  CFDE F0E4          	movff	postinc2,?_printf+2
  2391  0003E8  CFDD F0E5          	movff	postdec2,?_printf+3
  2392  0003EC  EC5F  F014         	call	_printf	;wreg free
  2393                           
  2394                           ;main.c: 177: printf(" W:");
  2395  0003F0  0EEF               	movlw	low STR_22
  2396  0003F2  0100               	movlb	0	; () banked
  2397  0003F4  6FE2               	movwf	printf@f& (0+255),b
  2398  0003F6  0EFF               	movlw	high STR_22
  2399  0003F8  6FE3               	movwf	(printf@f+1)& (0+255),b
  2400  0003FA  EC5F  F014         	call	_printf	;wreg free
  2401                           
  2402                           ;main.c: 178: printf("%d",W_array[i]);
  2403  0003FE  0E9D               	movlw	low (STR_42+3)
  2404  000400  0100               	movlb	0	; () banked
  2405  000402  6FE2               	movwf	printf@f& (0+255),b
  2406  000404  0EFF               	movlw	high (STR_42+3)
  2407  000406  6FE3               	movwf	(printf@f+1)& (0+255),b
  2408  000408  90D8               	bcf	status,0,c
  2409  00040A  35CC               	rlcf	_i& (0+255),w,b
  2410  00040C  6ED9               	movwf	fsr2l,c
  2411  00040E  35CD               	rlcf	(_i+1)& (0+255),w,b
  2412  000410  6EDA               	movwf	fsr2h,c
  2413  000412  0E00               	movlw	low _W_array
  2414  000414  26D9               	addwf	fsr2l,f,c
  2415  000416  0E01               	movlw	high _W_array
  2416  000418  22DA               	addwfc	fsr2h,f,c
  2417  00041A  CFDE F0E4          	movff	postinc2,?_printf+2
  2418  00041E  CFDD F0E5          	movff	postdec2,?_printf+3
  2419  000422  EC5F  F014         	call	_printf	;wreg free
  2420                           
  2421                           ;main.c: 179: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2422  000426  0E33               	movlw	51
  2423  000428  0100               	movlb	0	; () banked
  2424  00042A  6FFA               	movwf	(??_main+1)& (0+255),b
  2425  00042C  0EBB               	movlw	187
  2426  00042E  6FF9               	movwf	??_main& (0+255),b
  2427  000430  0EDF               	movlw	223
  2428  000432                     u5267:
  2429  000432  2EE8               	decfsz	wreg,f,c
  2430  000434  D7FE               	bra	u5267
  2431  000436  2FF9               	decfsz	??_main& (0+255),f,b
  2432  000438  D7FC               	bra	u5267
  2433  00043A  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2434  00043C  D7FA               	bra	u5267
  2435  00043E  D000               	nop2	
  2436                           
  2437                           ;main.c: 180: lcdInst(0xC0);;
  2438  000440  0EC0               	movlw	192
  2439  000442  ECDB  F021         	call	_lcdInst
  2440  000446  0100               	movlb	0	; () banked
  2441  000448  4BCC               	infsnz	_i& (0+255),f,b
  2442  00044A  2BCD               	incf	(_i+1)& (0+255),f,b
  2443                           
  2444                           ; BSR set to: 0
  2445  00044C  51CD               	movf	(_i+1)& (0+255),w,b
  2446  00044E  E101               	bnz	l5314
  2447  000450  D762               	goto	L1
  2448  000452                     u4350:
  2449  000452                     l5314:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 182: }
  2453                           ;main.c: 183: initLCD();
  2454  000452  EC40  F01F         	call	_initLCD	;wreg free
  2455                           
  2456                           ;main.c: 184: printf("start operation");
  2457  000456  0E96               	movlw	low STR_24
  2458  000458  0100               	movlb	0	; () banked
  2459  00045A  6FE2               	movwf	printf@f& (0+255),b
  2460  00045C  0EFE               	movlw	high STR_24
  2461  00045E  6FE3               	movwf	(printf@f+1)& (0+255),b
  2462  000460  EC5F  F014         	call	_printf	;wreg free
  2463                           
  2464                           ;main.c: 185: _delay((unsigned long)((700)*(40000000/4000.0)));
  2465  000464  0E24               	movlw	36
  2466  000466  0100               	movlb	0	; () banked
  2467  000468  6FFA               	movwf	(??_main+1)& (0+255),b
  2468  00046A  0E83               	movlw	131
  2469  00046C  6FF9               	movwf	??_main& (0+255),b
  2470  00046E  0ECF               	movlw	207
  2471  000470                     u5277:
  2472  000470  2EE8               	decfsz	wreg,f,c
  2473  000472  D7FE               	bra	u5277
  2474  000474  2FF9               	decfsz	??_main& (0+255),f,b
  2475  000476  D7FC               	bra	u5277
  2476  000478  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2477  00047A  D7FA               	bra	u5277
  2478                           
  2479                           ;main.c: 192: get_RTC_initial();
  2480  00047C  EC6B  F01A         	call	_get_RTC_initial	;wreg free
  2481                           
  2482                           ;main.c: 198: mode = 2;
  2483  000480  0E00               	movlw	0
  2484  000482  0100               	movlb	0	; () banked
  2485  000484  6FC9               	movwf	(_mode+1)& (0+255),b
  2486  000486  0E02               	movlw	2
  2487  000488  6FC8               	movwf	_mode& (0+255),b
  2488  00048A                     l343:
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;main.c: 201: }
  2492                           ;main.c: 203: }
  2493                           ;main.c: 204: }
  2494                           ;main.c: 216: if (mode == 2){
  2495                           
  2496                           ; BSR set to: 0
  2497                           
  2498                           ; BSR set to: 0
  2499  00048A  0E02               	movlw	2
  2500  00048C  19C8               	xorwf	_mode& (0+255),w,b
  2501  00048E  11C9               	iorwf	(_mode+1)& (0+255),w,b
  2502  000490  A4D8               	btfss	status,2,c
  2503  000492  D07C               	goto	l345
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;main.c: 217: (INTCONbits.GIE = 0);
  2507  000494  9EF2               	bcf	intcon,7,c	;volatile
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 218: initLCD();
  2511  000496  EC40  F01F         	call	_initLCD	;wreg free
  2512                           
  2513                           ;main.c: 221: initRamp();
  2514  00049A  ECEE  F01E         	call	_initRamp	;wreg free
  2515  00049E                     
  2516                           ;main.c: 225: if (gear_counter>= 50){
  2517  00049E  0100               	movlb	0	; () banked
  2518  0004A0  BFC3               	btfsc	(_gear_counter+1)& (0+255),7,b
  2519  0004A2  D00B               	goto	l347
  2520  0004A4  51C3               	movf	(_gear_counter+1)& (0+255),w,b
  2521  0004A6  E104               	bnz	u4370
  2522  0004A8  0E32               	movlw	50
  2523  0004AA  5DC2               	subwf	_gear_counter& (0+255),w,b
  2524  0004AC  A0D8               	btfss	status,0,c
  2525  0004AE  D005               	goto	l347
  2526  0004B0                     u4370:
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;main.c: 226: gear_counter = 0;
  2530  0004B0  0E00               	movlw	0
  2531  0004B2  6FC3               	movwf	(_gear_counter+1)& (0+255),b
  2532  0004B4  0E00               	movlw	0
  2533  0004B6  6FC2               	movwf	_gear_counter& (0+255),b
  2534                           
  2535                           ;main.c: 227: break;
  2536  0004B8  D01C               	goto	l348
  2537  0004BA                     l347:
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;main.c: 228: }
  2541                           ;main.c: 229: servoRotate_clockwise();
  2542                           
  2543                           ; BSR set to: 0
  2544  0004BA  EC3E  F020         	call	_servoRotate_clockwise	;wreg free
  2545                           
  2546                           ;main.c: 230: count_gear();
  2547  0004BE  EC6F  F01D         	call	_count_gear	;wreg free
  2548                           
  2549                           ;main.c: 231: printf("gear:%d",gear_counter);
  2550  0004C2  0E7E               	movlw	low STR_25
  2551  0004C4  0100               	movlb	0	; () banked
  2552  0004C6  6FE2               	movwf	printf@f& (0+255),b
  2553  0004C8  0EFF               	movlw	high STR_25
  2554  0004CA  6FE3               	movwf	(printf@f+1)& (0+255),b
  2555  0004CC  C0C2  F0E4         	movff	_gear_counter,?_printf+2
  2556  0004D0  C0C3  F0E5         	movff	_gear_counter+1,?_printf+3
  2557  0004D4  EC5F  F014         	call	_printf	;wreg free
  2558                           
  2559                           ;main.c: 233: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2560  0004D8  0E80               	movlw	128
  2561  0004DA  ECDB  F021         	call	_lcdInst
  2562  0004DE  0E41               	movlw	65
  2563  0004E0  0100               	movlb	0	; () banked
  2564  0004E2  6FF9               	movwf	??_main& (0+255),b
  2565  0004E4  0EEE               	movlw	238
  2566  0004E6                     u5287:
  2567  0004E6  2EE8               	decfsz	wreg,f,c
  2568  0004E8  D7FE               	bra	u5287
  2569  0004EA  2FF9               	decfsz	??_main& (0+255),f,b
  2570  0004EC  D7FC               	bra	u5287
  2571  0004EE  F000               	nop	
  2572  0004F0  D7D6               	goto	l346
  2573  0004F2                     l348:
  2574                           
  2575                           ;main.c: 239: servoRotate_clockwise();
  2576                           
  2577                           ;main.c: 234: }
  2578                           ;main.c: 237: while(1){
  2579  0004F2  EC3E  F020         	call	_servoRotate_clockwise	;wreg free
  2580                           
  2581                           ;main.c: 240: count_gear();
  2582  0004F6  EC6F  F01D         	call	_count_gear	;wreg free
  2583                           
  2584                           ;main.c: 241: printf("gear:%d",gear_counter);
  2585  0004FA  0E7E               	movlw	low STR_25
  2586  0004FC  0100               	movlb	0	; () banked
  2587  0004FE  6FE2               	movwf	printf@f& (0+255),b
  2588  000500  0EFF               	movlw	high STR_25
  2589  000502  6FE3               	movwf	(printf@f+1)& (0+255),b
  2590  000504  C0C2  F0E4         	movff	_gear_counter,?_printf+2
  2591  000508  C0C3  F0E5         	movff	_gear_counter+1,?_printf+3
  2592  00050C  EC5F  F014         	call	_printf	;wreg free
  2593                           
  2594                           ;main.c: 243: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2595  000510  0E80               	movlw	128
  2596  000512  ECDB  F021         	call	_lcdInst
  2597  000516  0E41               	movlw	65
  2598  000518  0100               	movlb	0	; () banked
  2599  00051A  6FF9               	movwf	??_main& (0+255),b
  2600  00051C  0EEE               	movlw	238
  2601  00051E                     u5297:
  2602  00051E  2EE8               	decfsz	wreg,f,c
  2603  000520  D7FE               	bra	u5297
  2604  000522  2FF9               	decfsz	??_main& (0+255),f,b
  2605  000524  D7FC               	bra	u5297
  2606  000526  F000               	nop	
  2607                           
  2608                           ;main.c: 244: if (read_IR() == 1){
  2609  000528  ECD6  F01F         	call	_read_IR	;wreg free
  2610  00052C  0100               	movlb	0	; () banked
  2611  00052E  05D4               	decf	?_read_IR& (0+255),w,b
  2612  000530  11D5               	iorwf	(?_read_IR+1)& (0+255),w,b
  2613  000532  A4D8               	btfss	status,2,c
  2614  000534  D7DE               	goto	l348
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;main.c: 245: white_tape = 1;
  2618  000536  0E00               	movlw	0
  2619  000538  6FCB               	movwf	(_white_tape+1)& (0+255),b
  2620  00053A  0E01               	movlw	1
  2621  00053C  6FCA               	movwf	_white_tape& (0+255),b
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 247: servoRotate_ConStop();
  2625  00053E  EC8C  F01F         	call	_servoRotate_ConStop	;wreg free
  2626                           
  2627                           ;main.c: 249: }
  2628                           ;main.c: 250: }
  2629                           ;main.c: 251: servoRotate_ConStop();
  2630                           
  2631                           ;main.c: 248: break;
  2632  000542  EC8C  F01F         	call	_servoRotate_ConStop	;wreg free
  2633                           
  2634                           ;main.c: 252: _delay((unsigned long)((200)*(40000000/4000.0)));
  2635  000546  0E0B               	movlw	11
  2636  000548  0100               	movlb	0	; () banked
  2637  00054A  6FFA               	movwf	(??_main+1)& (0+255),b
  2638  00054C  0E26               	movlw	38
  2639  00054E  6FF9               	movwf	??_main& (0+255),b
  2640  000550  0E5D               	movlw	93
  2641  000552                     u5307:
  2642  000552  2EE8               	decfsz	wreg,f,c
  2643  000554  D7FE               	bra	u5307
  2644  000556  2FF9               	decfsz	??_main& (0+255),f,b
  2645  000558  D7FC               	bra	u5307
  2646  00055A  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2647  00055C  D7FA               	bra	u5307
  2648  00055E  D000               	nop2	
  2649                           
  2650                           ;main.c: 253: gear_counter = 0;
  2651  000560  0E00               	movlw	0
  2652  000562  0100               	movlb	0	; () banked
  2653  000564  6FC3               	movwf	(_gear_counter+1)& (0+255),b
  2654  000566  0E00               	movlw	0
  2655  000568  6FC2               	movwf	_gear_counter& (0+255),b
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 254: compartment_pos = init_position/5 -1;
  2659  00056A  C0FD  F0D4         	movff	_init_position,___awdiv@dividend
  2660  00056E  C0FE  F0D5         	movff	_init_position+1,___awdiv@dividend+1
  2661  000572  0E00               	movlw	0
  2662  000574  6FD7               	movwf	(___awdiv@divisor+1)& (0+255),b
  2663  000576  0E05               	movlw	5
  2664  000578  6FD6               	movwf	___awdiv@divisor& (0+255),b
  2665  00057A  ECE1  F01B         	call	___awdiv	;wreg free
  2666  00057E  0EFF               	movlw	255
  2667  000580  0100               	movlb	0	; () banked
  2668  000582  25D4               	addwf	?___awdiv& (0+255),w,b
  2669  000584  6FBE               	movwf	_compartment_pos& (0+255),b
  2670  000586  0EFF               	movlw	255
  2671  000588  21D5               	addwfc	(?___awdiv+1)& (0+255),w,b
  2672  00058A  6FBF               	movwf	(_compartment_pos+1)& (0+255),b
  2673  00058C                     l345:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 257: }
  2677                           ;main.c: 262: i = 0;
  2678                           
  2679                           ; BSR set to: 0
  2680  00058C  0E00               	movlw	0
  2681  00058E  6FCD               	movwf	(_i+1)& (0+255),b
  2682  000590  0E00               	movlw	0
  2683  000592  6FCC               	movwf	_i& (0+255),b
  2684                           
  2685                           ;main.c: 263: while (i<7){
  2686  000594  D219               	goto	l354
  2687  000596                     
  2688                           ; BSR set to: 0
  2689                           ;main.c: 264: if (compartment_pos == 8){
  2690                           
  2691                           ; BSR set to: 0
  2692  000596  0E08               	movlw	8
  2693  000598  19BE               	xorwf	_compartment_pos& (0+255),w,b
  2694  00059A  11BF               	iorwf	(_compartment_pos+1)& (0+255),w,b
  2695  00059C  A4D8               	btfss	status,2,c
  2696  00059E  D004               	goto	l356
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 265: compartment_pos = 0;
  2700  0005A0  0E00               	movlw	0
  2701  0005A2  6FBF               	movwf	(_compartment_pos+1)& (0+255),b
  2702  0005A4  0E00               	movlw	0
  2703  0005A6  6FBE               	movwf	_compartment_pos& (0+255),b
  2704  0005A8                     l356:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 266: }
  2708                           ;main.c: 267: if (compartment_array[compartment_pos] != 0){
  2709                           
  2710                           ; BSR set to: 0
  2711  0005A8  90D8               	bcf	status,0,c
  2712  0005AA  35BE               	rlcf	_compartment_pos& (0+255),w,b
  2713  0005AC  6ED9               	movwf	fsr2l,c
  2714  0005AE  35BF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2715  0005B0  6EDA               	movwf	fsr2h,c
  2716  0005B2  0E80               	movlw	low _compartment_array
  2717  0005B4  26D9               	addwf	fsr2l,f,c
  2718  0005B6  0E00               	movlw	high _compartment_array
  2719  0005B8  22DA               	addwfc	fsr2h,f,c
  2720  0005BA  50DE               	movf	postinc2,w,c
  2721  0005BC  10DE               	iorwf	postinc2,w,c
  2722  0005BE  B4D8               	btfsc	status,2,c
  2723  0005C0  D158               	goto	l357
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;main.c: 268: servoRotate_ConStop();
  2727  0005C2  EC8C  F01F         	call	_servoRotate_ConStop	;wreg free
  2728                           
  2729                           ;main.c: 269: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2730  0005C6  0E66               	movlw	102
  2731  0005C8  0100               	movlb	0	; () banked
  2732  0005CA  6FFA               	movwf	(??_main+1)& (0+255),b
  2733  0005CC  0E76               	movlw	118
  2734  0005CE  6FF9               	movwf	??_main& (0+255),b
  2735  0005D0  0EC1               	movlw	193
  2736  0005D2                     u5317:
  2737  0005D2  2EE8               	decfsz	wreg,f,c
  2738  0005D4  D7FE               	bra	u5317
  2739  0005D6  2FF9               	decfsz	??_main& (0+255),f,b
  2740  0005D8  D7FC               	bra	u5317
  2741  0005DA  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2742  0005DC  D7FA               	bra	u5317
  2743                           
  2744                           ;main.c: 271: initLCD();
  2745  0005DE  EC40  F01F         	call	_initLCD	;wreg free
  2746                           
  2747                           ;main.c: 272: printf("%d",B_count);
  2748  0005E2  0E9D               	movlw	low (STR_42+3)
  2749  0005E4  0100               	movlb	0	; () banked
  2750  0005E6  6FE2               	movwf	printf@f& (0+255),b
  2751  0005E8  0EFF               	movlw	high (STR_42+3)
  2752  0005EA  6FE3               	movwf	(printf@f+1)& (0+255),b
  2753  0005EC  C0B8  F0E4         	movff	_B_count,?_printf+2
  2754  0005F0  C0B9  F0E5         	movff	_B_count+1,?_printf+3
  2755  0005F4  EC5F  F014         	call	_printf	;wreg free
  2756                           
  2757                           ;main.c: 273: _delay((unsigned long)((50)*(40000000/4000.0)));
  2758  0005F8  0E03               	movlw	3
  2759  0005FA  0100               	movlb	0	; () banked
  2760  0005FC  6FFA               	movwf	(??_main+1)& (0+255),b
  2761  0005FE  0E8A               	movlw	138
  2762  000600  6FF9               	movwf	??_main& (0+255),b
  2763  000602  0E55               	movlw	85
  2764  000604                     u5327:
  2765  000604  2EE8               	decfsz	wreg,f,c
  2766  000606  D7FE               	bra	u5327
  2767  000608  2FF9               	decfsz	??_main& (0+255),f,b
  2768  00060A  D7FC               	bra	u5327
  2769  00060C  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2770  00060E  D7FA               	bra	u5327
  2771  000610  D000               	nop2	
  2772                           
  2773                           ;main.c: 274: motorStart_0();
  2774  000612  ECB0  F021         	call	_motorStart_0	;wreg free
  2775  000616                     l5384:
  2776                           
  2777                           ;main.c: 279: if (B_count == B_array[compartment_pos]){
  2778  000616  90D8               	bcf	status,0,c
  2779  000618  0100               	movlb	0	; () banked
  2780  00061A  35BE               	rlcf	_compartment_pos& (0+255),w,b
  2781  00061C  6ED9               	movwf	fsr2l,c
  2782  00061E  35BF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2783  000620  6EDA               	movwf	fsr2h,c
  2784  000622  0E30               	movlw	low _B_array
  2785  000624  26D9               	addwf	fsr2l,f,c
  2786  000626  0E01               	movlw	high _B_array
  2787  000628  22DA               	addwfc	fsr2h,f,c
  2788  00062A  51B8               	movf	_B_count& (0+255),w,b
  2789  00062C  18DE               	xorwf	postinc2,w,c
  2790  00062E  E107               	bnz	l5388
  2791  000630  51B9               	movf	(_B_count+1)& (0+255),w,b
  2792  000632  18DE               	xorwf	postinc2,w,c
  2793  000634  A4D8               	btfss	status,2,c
  2794  000636  D003               	goto	l359
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 280: motorStop_0();
  2798  000638  EC70  F021         	call	_motorStop_0	;wreg free
  2799                           
  2800                           ;main.c: 281: break;
  2801  00063C  D02F               	goto	l360
  2802  00063E                     l359:
  2803  00063E                     l5388:
  2804                           
  2805                           ;main.c: 282: }
  2806                           ;main.c: 283: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2807  00063E  0E80               	movlw	128
  2808  000640  ECDB  F021         	call	_lcdInst
  2809  000644  0E41               	movlw	65
  2810  000646  0100               	movlb	0	; () banked
  2811  000648  6FF9               	movwf	??_main& (0+255),b
  2812  00064A  0EEE               	movlw	238
  2813  00064C                     u5337:
  2814  00064C  2EE8               	decfsz	wreg,f,c
  2815  00064E  D7FE               	bra	u5337
  2816  000650  2FF9               	decfsz	??_main& (0+255),f,b
  2817  000652  D7FC               	bra	u5337
  2818  000654  F000               	nop	
  2819                           
  2820                           ;main.c: 286: if (readADC(0)<= 250 ){
  2821  000656  0E00               	movlw	0
  2822  000658  ECC4  F020         	call	_readADC
  2823  00065C  0100               	movlb	0	; () banked
  2824  00065E  51D5               	movf	(?_readADC+1)& (0+255),w,b
  2825  000660  E1DA               	bnz	l5384
  2826  000662  0EFB               	movlw	251
  2827  000664  5DD4               	subwf	?_readADC& (0+255),w,b
  2828  000666  B0D8               	btfsc	status,0,c
  2829  000668  D7D6               	goto	l358
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 288: B_count ++;
  2833  00066A  4BB8               	infsnz	_B_count& (0+255),f,b
  2834  00066C  2BB9               	incf	(_B_count+1)& (0+255),f,b
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;main.c: 289: initLCD();
  2838  00066E  EC40  F01F         	call	_initLCD	;wreg free
  2839                           
  2840                           ;main.c: 290: printf("%d", B_count);
  2841  000672  0E9D               	movlw	low (STR_42+3)
  2842  000674  0100               	movlb	0	; () banked
  2843  000676  6FE2               	movwf	printf@f& (0+255),b
  2844  000678  0EFF               	movlw	high (STR_42+3)
  2845  00067A  6FE3               	movwf	(printf@f+1)& (0+255),b
  2846  00067C  C0B8  F0E4         	movff	_B_count,?_printf+2
  2847  000680  C0B9  F0E5         	movff	_B_count+1,?_printf+3
  2848  000684  EC5F  F014         	call	_printf	;wreg free
  2849                           
  2850                           ;main.c: 291: _delay((unsigned long)((10)*(40000000/4000.0)));
  2851  000688  0E82               	movlw	130
  2852  00068A  0100               	movlb	0	; () banked
  2853  00068C  6FF9               	movwf	??_main& (0+255),b
  2854  00068E  0EDD               	movlw	221
  2855  000690                     u5347:
  2856  000690  2EE8               	decfsz	wreg,f,c
  2857  000692  D7FE               	bra	u5347
  2858  000694  2FF9               	decfsz	??_main& (0+255),f,b
  2859  000696  D7FC               	bra	u5347
  2860  000698  D000               	nop2	
  2861  00069A  D7BD               	goto	l358
  2862  00069C                     l360:
  2863                           
  2864                           ;main.c: 292: }
  2865                           ;main.c: 294: }
  2866                           ;main.c: 295: initLCD();
  2867  00069C  EC40  F01F         	call	_initLCD	;wreg free
  2868                           
  2869                           ;main.c: 296: printf("done");
  2870  0006A0  0E3E               	movlw	low (STR_49+7)
  2871  0006A2  0100               	movlb	0	; () banked
  2872  0006A4  6FE2               	movwf	printf@f& (0+255),b
  2873  0006A6  0EFF               	movlw	high (STR_49+7)
  2874  0006A8  6FE3               	movwf	(printf@f+1)& (0+255),b
  2875  0006AA  EC5F  F014         	call	_printf	;wreg free
  2876                           
  2877                           ;main.c: 297: _delay((unsigned long)((500)*(40000000/4000.0)));
  2878  0006AE  0E1A               	movlw	26
  2879  0006B0  0100               	movlb	0	; () banked
  2880  0006B2  6FFA               	movwf	(??_main+1)& (0+255),b
  2881  0006B4  0E5E               	movlw	94
  2882  0006B6  6FF9               	movwf	??_main& (0+255),b
  2883  0006B8  0E6E               	movlw	110
  2884  0006BA                     u5357:
  2885  0006BA  2EE8               	decfsz	wreg,f,c
  2886  0006BC  D7FE               	bra	u5357
  2887  0006BE  2FF9               	decfsz	??_main& (0+255),f,b
  2888  0006C0  D7FC               	bra	u5357
  2889  0006C2  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2890  0006C4  D7FA               	bra	u5357
  2891  0006C6  F000               	nop	
  2892                           
  2893                           ;main.c: 305: initLCD();
  2894  0006C8  EC40  F01F         	call	_initLCD	;wreg free
  2895                           
  2896                           ;main.c: 306: printf("%d",N_count);
  2897  0006CC  0E9D               	movlw	low (STR_42+3)
  2898  0006CE  0100               	movlb	0	; () banked
  2899  0006D0  6FE2               	movwf	printf@f& (0+255),b
  2900  0006D2  0EFF               	movlw	high (STR_42+3)
  2901  0006D4  6FE3               	movwf	(printf@f+1)& (0+255),b
  2902  0006D6  C0B4  F0E4         	movff	_N_count,?_printf+2
  2903  0006DA  C0B5  F0E5         	movff	_N_count+1,?_printf+3
  2904  0006DE  EC5F  F014         	call	_printf	;wreg free
  2905                           
  2906                           ;main.c: 307: _delay((unsigned long)((50)*(40000000/4000.0)));
  2907  0006E2  0E03               	movlw	3
  2908  0006E4  0100               	movlb	0	; () banked
  2909  0006E6  6FFA               	movwf	(??_main+1)& (0+255),b
  2910  0006E8  0E8A               	movlw	138
  2911  0006EA  6FF9               	movwf	??_main& (0+255),b
  2912  0006EC  0E55               	movlw	85
  2913  0006EE                     u5367:
  2914  0006EE  2EE8               	decfsz	wreg,f,c
  2915  0006F0  D7FE               	bra	u5367
  2916  0006F2  2FF9               	decfsz	??_main& (0+255),f,b
  2917  0006F4  D7FC               	bra	u5367
  2918  0006F6  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  2919  0006F8  D7FA               	bra	u5367
  2920  0006FA  D000               	nop2	
  2921                           
  2922                           ;main.c: 308: motorStart_1();
  2923  0006FC  ECA0  F021         	call	_motorStart_1	;wreg free
  2924  000700                     l5414:
  2925                           
  2926                           ;main.c: 312: if (N_count == N_array[compartment_pos]){
  2927  000700  90D8               	bcf	status,0,c
  2928  000702  0100               	movlb	0	; () banked
  2929  000704  35BE               	rlcf	_compartment_pos& (0+255),w,b
  2930  000706  6ED9               	movwf	fsr2l,c
  2931  000708  35BF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2932  00070A  6EDA               	movwf	fsr2h,c
  2933  00070C  0E10               	movlw	low _N_array
  2934  00070E  26D9               	addwf	fsr2l,f,c
  2935  000710  0E01               	movlw	high _N_array
  2936  000712  22DA               	addwfc	fsr2h,f,c
  2937  000714  51B4               	movf	_N_count& (0+255),w,b
  2938  000716  18DE               	xorwf	postinc2,w,c
  2939  000718  E107               	bnz	l5418
  2940  00071A  51B5               	movf	(_N_count+1)& (0+255),w,b
  2941  00071C  18DE               	xorwf	postinc2,w,c
  2942  00071E  A4D8               	btfss	status,2,c
  2943  000720  D003               	goto	l364
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;main.c: 313: motorStop_1();
  2947  000722  EC60  F021         	call	_motorStop_1	;wreg free
  2948                           
  2949                           ;main.c: 314: break;
  2950  000726  D022               	goto	l365
  2951  000728                     l364:
  2952  000728                     l5418:
  2953                           
  2954                           ;main.c: 315: }
  2955                           ;main.c: 316: if (readADC(1)<=250 ){
  2956  000728  0E01               	movlw	1
  2957  00072A  ECC4  F020         	call	_readADC
  2958  00072E  0100               	movlb	0	; () banked
  2959  000730  51D5               	movf	(?_readADC+1)& (0+255),w,b
  2960  000732  E1E6               	bnz	l5414
  2961  000734  0EFB               	movlw	251
  2962  000736  5DD4               	subwf	?_readADC& (0+255),w,b
  2963  000738  B0D8               	btfsc	status,0,c
  2964  00073A  D7E2               	goto	l363
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 318: N_count ++;
  2968  00073C  4BB4               	infsnz	_N_count& (0+255),f,b
  2969  00073E  2BB5               	incf	(_N_count+1)& (0+255),f,b
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;main.c: 319: initLCD();
  2973  000740  EC40  F01F         	call	_initLCD	;wreg free
  2974                           
  2975                           ;main.c: 320: printf("%d", N_count);
  2976  000744  0E9D               	movlw	low (STR_42+3)
  2977  000746  0100               	movlb	0	; () banked
  2978  000748  6FE2               	movwf	printf@f& (0+255),b
  2979  00074A  0EFF               	movlw	high (STR_42+3)
  2980  00074C  6FE3               	movwf	(printf@f+1)& (0+255),b
  2981  00074E  C0B4  F0E4         	movff	_N_count,?_printf+2
  2982  000752  C0B5  F0E5         	movff	_N_count+1,?_printf+3
  2983  000756  EC5F  F014         	call	_printf	;wreg free
  2984                           
  2985                           ;main.c: 321: _delay((unsigned long)((3)*(40000000/4000.0)));
  2986  00075A  0E27               	movlw	39
  2987  00075C  0100               	movlb	0	; () banked
  2988  00075E  6FF9               	movwf	??_main& (0+255),b
  2989  000760  0EF5               	movlw	245
  2990  000762                     u5377:
  2991  000762  2EE8               	decfsz	wreg,f,c
  2992  000764  D7FE               	bra	u5377
  2993  000766  2FF9               	decfsz	??_main& (0+255),f,b
  2994  000768  D7FC               	bra	u5377
  2995  00076A  D7CA               	goto	l363
  2996  00076C                     l365:
  2997                           
  2998                           ;main.c: 322: }
  2999                           ;main.c: 324: }
  3000                           ;main.c: 326: initLCD();
  3001  00076C  EC40  F01F         	call	_initLCD	;wreg free
  3002                           
  3003                           ;main.c: 327: printf("done");
  3004  000770  0E3E               	movlw	low (STR_49+7)
  3005  000772  0100               	movlb	0	; () banked
  3006  000774  6FE2               	movwf	printf@f& (0+255),b
  3007  000776  0EFF               	movlw	high (STR_49+7)
  3008  000778  6FE3               	movwf	(printf@f+1)& (0+255),b
  3009  00077A  EC5F  F014         	call	_printf	;wreg free
  3010                           
  3011                           ;main.c: 328: _delay((unsigned long)((500)*(40000000/4000.0)));
  3012  00077E  0E1A               	movlw	26
  3013  000780  0100               	movlb	0	; () banked
  3014  000782  6FFA               	movwf	(??_main+1)& (0+255),b
  3015  000784  0E5E               	movlw	94
  3016  000786  6FF9               	movwf	??_main& (0+255),b
  3017  000788  0E6E               	movlw	110
  3018  00078A                     u5387:
  3019  00078A  2EE8               	decfsz	wreg,f,c
  3020  00078C  D7FE               	bra	u5387
  3021  00078E  2FF9               	decfsz	??_main& (0+255),f,b
  3022  000790  D7FC               	bra	u5387
  3023  000792  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3024  000794  D7FA               	bra	u5387
  3025  000796  F000               	nop	
  3026                           
  3027                           ;main.c: 339: initLCD();
  3028  000798  EC40  F01F         	call	_initLCD	;wreg free
  3029                           
  3030                           ;main.c: 340: printf("%d",S_count);
  3031  00079C  0E9D               	movlw	low (STR_42+3)
  3032  00079E  0100               	movlb	0	; () banked
  3033  0007A0  6FE2               	movwf	printf@f& (0+255),b
  3034  0007A2  0EFF               	movlw	high (STR_42+3)
  3035  0007A4  6FE3               	movwf	(printf@f+1)& (0+255),b
  3036  0007A6  C0B6  F0E4         	movff	_S_count,?_printf+2
  3037  0007AA  C0B7  F0E5         	movff	_S_count+1,?_printf+3
  3038  0007AE  EC5F  F014         	call	_printf	;wreg free
  3039                           
  3040                           ;main.c: 341: _delay((unsigned long)((50)*(40000000/4000.0)));
  3041  0007B2  0E03               	movlw	3
  3042  0007B4  0100               	movlb	0	; () banked
  3043  0007B6  6FFA               	movwf	(??_main+1)& (0+255),b
  3044  0007B8  0E8A               	movlw	138
  3045  0007BA  6FF9               	movwf	??_main& (0+255),b
  3046  0007BC  0E55               	movlw	85
  3047  0007BE                     u5397:
  3048  0007BE  2EE8               	decfsz	wreg,f,c
  3049  0007C0  D7FE               	bra	u5397
  3050  0007C2  2FF9               	decfsz	??_main& (0+255),f,b
  3051  0007C4  D7FC               	bra	u5397
  3052  0007C6  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3053  0007C8  D7FA               	bra	u5397
  3054  0007CA  D000               	nop2	
  3055                           
  3056                           ;main.c: 342: motorStart_2();
  3057  0007CC  EC90  F021         	call	_motorStart_2	;wreg free
  3058  0007D0                     l5440:
  3059                           
  3060                           ;main.c: 346: if (S_count == S_array[compartment_pos]){
  3061  0007D0  90D8               	bcf	status,0,c
  3062  0007D2  0100               	movlb	0	; () banked
  3063  0007D4  35BE               	rlcf	_compartment_pos& (0+255),w,b
  3064  0007D6  6ED9               	movwf	fsr2l,c
  3065  0007D8  35BF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3066  0007DA  6EDA               	movwf	fsr2h,c
  3067  0007DC  0E20               	movlw	low _S_array
  3068  0007DE  26D9               	addwf	fsr2l,f,c
  3069  0007E0  0E01               	movlw	high _S_array
  3070  0007E2  22DA               	addwfc	fsr2h,f,c
  3071  0007E4  51B6               	movf	_S_count& (0+255),w,b
  3072  0007E6  18DE               	xorwf	postinc2,w,c
  3073  0007E8  E107               	bnz	l5444
  3074  0007EA  51B7               	movf	(_S_count+1)& (0+255),w,b
  3075  0007EC  18DE               	xorwf	postinc2,w,c
  3076  0007EE  A4D8               	btfss	status,2,c
  3077  0007F0  D003               	goto	l369
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;main.c: 347: motorStop_2();
  3081  0007F2  EC50  F021         	call	_motorStop_2	;wreg free
  3082                           
  3083                           ;main.c: 348: break;
  3084  0007F6  D027               	goto	l370
  3085  0007F8                     l369:
  3086  0007F8                     l5444:
  3087                           
  3088                           ;main.c: 349: }
  3089                           ;main.c: 350: if (readADC(5)<=250 ){
  3090  0007F8  0E05               	movlw	5
  3091  0007FA  ECC4  F020         	call	_readADC
  3092  0007FE  0100               	movlb	0	; () banked
  3093  000800  51D5               	movf	(?_readADC+1)& (0+255),w,b
  3094  000802  E1E6               	bnz	l5440
  3095  000804  0EFB               	movlw	251
  3096  000806  5DD4               	subwf	?_readADC& (0+255),w,b
  3097  000808  B0D8               	btfsc	status,0,c
  3098  00080A  D7E2               	goto	l368
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;main.c: 352: S_count ++;
  3102  00080C  4BB6               	infsnz	_S_count& (0+255),f,b
  3103  00080E  2BB7               	incf	(_S_count+1)& (0+255),f,b
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;main.c: 353: initLCD();
  3107  000810  EC40  F01F         	call	_initLCD	;wreg free
  3108                           
  3109                           ;main.c: 354: printf("%d", S_count);
  3110  000814  0E9D               	movlw	low (STR_42+3)
  3111  000816  0100               	movlb	0	; () banked
  3112  000818  6FE2               	movwf	printf@f& (0+255),b
  3113  00081A  0EFF               	movlw	high (STR_42+3)
  3114  00081C  6FE3               	movwf	(printf@f+1)& (0+255),b
  3115  00081E  C0B6  F0E4         	movff	_S_count,?_printf+2
  3116  000822  C0B7  F0E5         	movff	_S_count+1,?_printf+3
  3117  000826  EC5F  F014         	call	_printf	;wreg free
  3118                           
  3119                           ;main.c: 355: _delay((unsigned long)((50)*(40000000/4000.0)));
  3120  00082A  0E03               	movlw	3
  3121  00082C  0100               	movlb	0	; () banked
  3122  00082E  6FFA               	movwf	(??_main+1)& (0+255),b
  3123  000830  0E8A               	movlw	138
  3124  000832  6FF9               	movwf	??_main& (0+255),b
  3125  000834  0E55               	movlw	85
  3126  000836                     u5407:
  3127  000836  2EE8               	decfsz	wreg,f,c
  3128  000838  D7FE               	bra	u5407
  3129  00083A  2FF9               	decfsz	??_main& (0+255),f,b
  3130  00083C  D7FC               	bra	u5407
  3131  00083E  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3132  000840  D7FA               	bra	u5407
  3133  000842  D000               	nop2	
  3134  000844  D7C5               	goto	l368
  3135  000846                     l370:
  3136                           
  3137                           ;main.c: 356: }
  3138                           ;main.c: 358: }
  3139                           ;main.c: 360: initLCD();
  3140  000846  EC40  F01F         	call	_initLCD	;wreg free
  3141                           
  3142                           ;main.c: 361: printf("done");
  3143  00084A  0E3E               	movlw	low (STR_49+7)
  3144  00084C  0100               	movlb	0	; () banked
  3145  00084E  6FE2               	movwf	printf@f& (0+255),b
  3146  000850  0EFF               	movlw	high (STR_49+7)
  3147  000852  6FE3               	movwf	(printf@f+1)& (0+255),b
  3148  000854  EC5F  F014         	call	_printf	;wreg free
  3149                           
  3150                           ;main.c: 362: _delay((unsigned long)((500)*(40000000/4000.0)));
  3151  000858  0E1A               	movlw	26
  3152  00085A  0100               	movlb	0	; () banked
  3153  00085C  6FFA               	movwf	(??_main+1)& (0+255),b
  3154  00085E  0E5E               	movlw	94
  3155  000860  6FF9               	movwf	??_main& (0+255),b
  3156  000862  0E6E               	movlw	110
  3157  000864                     u5417:
  3158  000864  2EE8               	decfsz	wreg,f,c
  3159  000866  D7FE               	bra	u5417
  3160  000868  2FF9               	decfsz	??_main& (0+255),f,b
  3161  00086A  D7FC               	bra	u5417
  3162  00086C  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3163  00086E  D7FA               	bra	u5417
  3164  000870  F000               	nop	
  3165  000872                     l357:
  3166                           
  3167                           ;main.c: 363: }
  3168                           ;main.c: 371: initLCD();
  3169  000872  EC40  F01F         	call	_initLCD	;wreg free
  3170                           
  3171                           ;main.c: 372: printf("%d",W_count);
  3172  000876  0E9D               	movlw	low (STR_42+3)
  3173  000878  0100               	movlb	0	; () banked
  3174  00087A  6FE2               	movwf	printf@f& (0+255),b
  3175  00087C  0EFF               	movlw	high (STR_42+3)
  3176  00087E  6FE3               	movwf	(printf@f+1)& (0+255),b
  3177  000880  C0B2  F0E4         	movff	_W_count,?_printf+2
  3178  000884  C0B3  F0E5         	movff	_W_count+1,?_printf+3
  3179  000888  EC5F  F014         	call	_printf	;wreg free
  3180                           
  3181                           ;main.c: 373: _delay((unsigned long)((50)*(40000000/4000.0)));
  3182  00088C  0E03               	movlw	3
  3183  00088E  0100               	movlb	0	; () banked
  3184  000890  6FFA               	movwf	(??_main+1)& (0+255),b
  3185  000892  0E8A               	movlw	138
  3186  000894  6FF9               	movwf	??_main& (0+255),b
  3187  000896  0E55               	movlw	85
  3188  000898                     u5427:
  3189  000898  2EE8               	decfsz	wreg,f,c
  3190  00089A  D7FE               	bra	u5427
  3191  00089C  2FF9               	decfsz	??_main& (0+255),f,b
  3192  00089E  D7FC               	bra	u5427
  3193  0008A0  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3194  0008A2  D7FA               	bra	u5427
  3195  0008A4  D000               	nop2	
  3196                           
  3197                           ;main.c: 374: motorStart_3();
  3198  0008A6  EC80  F021         	call	_motorStart_3	;wreg free
  3199  0008AA                     l5466:
  3200                           
  3201                           ;main.c: 378: if (W_count == W_array[compartment_pos]){
  3202  0008AA  90D8               	bcf	status,0,c
  3203  0008AC  0100               	movlb	0	; () banked
  3204  0008AE  35BE               	rlcf	_compartment_pos& (0+255),w,b
  3205  0008B0  6ED9               	movwf	fsr2l,c
  3206  0008B2  35BF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3207  0008B4  6EDA               	movwf	fsr2h,c
  3208  0008B6  0E00               	movlw	low _W_array
  3209  0008B8  26D9               	addwf	fsr2l,f,c
  3210  0008BA  0E01               	movlw	high _W_array
  3211  0008BC  22DA               	addwfc	fsr2h,f,c
  3212  0008BE  51B2               	movf	_W_count& (0+255),w,b
  3213  0008C0  18DE               	xorwf	postinc2,w,c
  3214  0008C2  E107               	bnz	l5470
  3215  0008C4  51B3               	movf	(_W_count+1)& (0+255),w,b
  3216  0008C6  18DE               	xorwf	postinc2,w,c
  3217  0008C8  A4D8               	btfss	status,2,c
  3218  0008CA  D003               	goto	l374
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;main.c: 379: motorStop_3();
  3222  0008CC  EC40  F021         	call	_motorStop_3	;wreg free
  3223                           
  3224                           ;main.c: 380: break;
  3225  0008D0  D027               	goto	l375
  3226  0008D2                     l374:
  3227  0008D2                     l5470:
  3228                           
  3229                           ;main.c: 381: }
  3230                           ;main.c: 382: if (readADC(4)<=250 ){
  3231  0008D2  0E04               	movlw	4
  3232  0008D4  ECC4  F020         	call	_readADC
  3233  0008D8  0100               	movlb	0	; () banked
  3234  0008DA  51D5               	movf	(?_readADC+1)& (0+255),w,b
  3235  0008DC  E1E6               	bnz	l5466
  3236  0008DE  0EFB               	movlw	251
  3237  0008E0  5DD4               	subwf	?_readADC& (0+255),w,b
  3238  0008E2  B0D8               	btfsc	status,0,c
  3239  0008E4  D7E2               	goto	l373
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;main.c: 384: W_count ++;
  3243  0008E6  4BB2               	infsnz	_W_count& (0+255),f,b
  3244  0008E8  2BB3               	incf	(_W_count+1)& (0+255),f,b
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;main.c: 385: initLCD();
  3248  0008EA  EC40  F01F         	call	_initLCD	;wreg free
  3249                           
  3250                           ;main.c: 386: printf("%d", W_count);
  3251  0008EE  0E9D               	movlw	low (STR_42+3)
  3252  0008F0  0100               	movlb	0	; () banked
  3253  0008F2  6FE2               	movwf	printf@f& (0+255),b
  3254  0008F4  0EFF               	movlw	high (STR_42+3)
  3255  0008F6  6FE3               	movwf	(printf@f+1)& (0+255),b
  3256  0008F8  C0B2  F0E4         	movff	_W_count,?_printf+2
  3257  0008FC  C0B3  F0E5         	movff	_W_count+1,?_printf+3
  3258  000900  EC5F  F014         	call	_printf	;wreg free
  3259                           
  3260                           ;main.c: 387: _delay((unsigned long)((50)*(40000000/4000.0)));
  3261  000904  0E03               	movlw	3
  3262  000906  0100               	movlb	0	; () banked
  3263  000908  6FFA               	movwf	(??_main+1)& (0+255),b
  3264  00090A  0E8A               	movlw	138
  3265  00090C  6FF9               	movwf	??_main& (0+255),b
  3266  00090E  0E55               	movlw	85
  3267  000910                     u5437:
  3268  000910  2EE8               	decfsz	wreg,f,c
  3269  000912  D7FE               	bra	u5437
  3270  000914  2FF9               	decfsz	??_main& (0+255),f,b
  3271  000916  D7FC               	bra	u5437
  3272  000918  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3273  00091A  D7FA               	bra	u5437
  3274  00091C  D000               	nop2	
  3275  00091E  D7C5               	goto	l373
  3276  000920                     l375:
  3277                           
  3278                           ;main.c: 388: }
  3279                           ;main.c: 390: }
  3280                           ;main.c: 392: initLCD();
  3281  000920  EC40  F01F         	call	_initLCD	;wreg free
  3282                           
  3283                           ;main.c: 393: printf("done");
  3284  000924  0E3E               	movlw	low (STR_49+7)
  3285  000926  0100               	movlb	0	; () banked
  3286  000928  6FE2               	movwf	printf@f& (0+255),b
  3287  00092A  0EFF               	movlw	high (STR_49+7)
  3288  00092C  6FE3               	movwf	(printf@f+1)& (0+255),b
  3289  00092E  EC5F  F014         	call	_printf	;wreg free
  3290                           
  3291                           ;main.c: 394: _delay((unsigned long)((500)*(40000000/4000.0)));
  3292  000932  0E1A               	movlw	26
  3293  000934  0100               	movlb	0	; () banked
  3294  000936  6FFA               	movwf	(??_main+1)& (0+255),b
  3295  000938  0E5E               	movlw	94
  3296  00093A  6FF9               	movwf	??_main& (0+255),b
  3297  00093C  0E6E               	movlw	110
  3298  00093E                     u5447:
  3299  00093E  2EE8               	decfsz	wreg,f,c
  3300  000940  D7FE               	bra	u5447
  3301  000942  2FF9               	decfsz	??_main& (0+255),f,b
  3302  000944  D7FC               	bra	u5447
  3303  000946  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3304  000948  D7FA               	bra	u5447
  3305  00094A  D01C               	goto	L2
  3306  00094C                     
  3307                           ;main.c: 399: servoRotate_clockwise();
  3308  00094C  EC3E  F020         	call	_servoRotate_clockwise	;wreg free
  3309                           
  3310                           ;main.c: 400: count_gear();
  3311  000950  EC6F  F01D         	call	_count_gear	;wreg free
  3312                           
  3313                           ;main.c: 401: initLCD();
  3314  000954  EC40  F01F         	call	_initLCD	;wreg free
  3315                           
  3316                           ;main.c: 402: printf("%d",gear_counter);
  3317  000958  0E9D               	movlw	low (STR_42+3)
  3318  00095A  0100               	movlb	0	; () banked
  3319  00095C  6FE2               	movwf	printf@f& (0+255),b
  3320  00095E  0EFF               	movlw	high (STR_42+3)
  3321  000960  6FE3               	movwf	(printf@f+1)& (0+255),b
  3322  000962  C0C2  F0E4         	movff	_gear_counter,?_printf+2
  3323  000966  C0C3  F0E5         	movff	_gear_counter+1,?_printf+3
  3324  00096A  EC5F  F014         	call	_printf	;wreg free
  3325                           
  3326                           ;main.c: 403: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3327  00096E  0E80               	movlw	128
  3328  000970  ECDB  F021         	call	_lcdInst
  3329  000974  0E41               	movlw	65
  3330  000976  0100               	movlb	0	; () banked
  3331  000978  6FF9               	movwf	??_main& (0+255),b
  3332  00097A  0EEE               	movlw	238
  3333  00097C                     u5457:
  3334  00097C  2EE8               	decfsz	wreg,f,c
  3335  00097E  D7FE               	bra	u5457
  3336  000980  2FF9               	decfsz	??_main& (0+255),f,b
  3337  000982  D7FC               	bra	u5457
  3338  000984                     L2:
  3339  000984  F000               	nop	
  3340  000986  0100               	movlb	0	; () banked
  3341  000988  BFC3               	btfsc	(_gear_counter+1)& (0+255),7,b
  3342  00098A  D7E0               	goto	l379
  3343  00098C  51C3               	movf	(_gear_counter+1)& (0+255),w,b
  3344  00098E  E104               	bnz	l5498
  3345  000990  0E06               	movlw	6
  3346  000992  5DC2               	subwf	_gear_counter& (0+255),w,b
  3347  000994  A0D8               	btfss	status,0,c
  3348  000996  D7DA               	goto	l379
  3349  000998                     l5498:
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 405: }
  3353                           ;main.c: 407: B_count = 0;
  3354  000998  0E00               	movlw	0
  3355  00099A  6FB9               	movwf	(_B_count+1)& (0+255),b
  3356  00099C  0E00               	movlw	0
  3357  00099E  6FB8               	movwf	_B_count& (0+255),b
  3358                           
  3359                           ;main.c: 408: N_count = 0;
  3360  0009A0  0E00               	movlw	0
  3361  0009A2  6FB5               	movwf	(_N_count+1)& (0+255),b
  3362  0009A4  0E00               	movlw	0
  3363  0009A6  6FB4               	movwf	_N_count& (0+255),b
  3364                           
  3365                           ;main.c: 409: S_count = 0;
  3366  0009A8  0E00               	movlw	0
  3367  0009AA  6FB7               	movwf	(_S_count+1)& (0+255),b
  3368  0009AC  0E00               	movlw	0
  3369  0009AE  6FB6               	movwf	_S_count& (0+255),b
  3370                           
  3371                           ;main.c: 410: W_count = 0;
  3372  0009B0  0E00               	movlw	0
  3373  0009B2  6FB3               	movwf	(_W_count+1)& (0+255),b
  3374  0009B4  0E00               	movlw	0
  3375  0009B6  6FB2               	movwf	_W_count& (0+255),b
  3376                           
  3377                           ;main.c: 411: gear_counter = 0;
  3378  0009B8  0E00               	movlw	0
  3379  0009BA  6FC3               	movwf	(_gear_counter+1)& (0+255),b
  3380  0009BC  0E00               	movlw	0
  3381  0009BE  6FC2               	movwf	_gear_counter& (0+255),b
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 414: compartment_pos++;
  3385  0009C0  4BBE               	infsnz	_compartment_pos& (0+255),f,b
  3386  0009C2  2BBF               	incf	(_compartment_pos+1)& (0+255),f,b
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;main.c: 415: i++;
  3390  0009C4  4BCC               	infsnz	_i& (0+255),f,b
  3391  0009C6  2BCD               	incf	(_i+1)& (0+255),f,b
  3392  0009C8                     l354:
  3393                           
  3394                           ; BSR set to: 0
  3395                           
  3396                           ; BSR set to: 0
  3397  0009C8  51CD               	movf	(_i+1)& (0+255),w,b
  3398  0009CA  E104               	bnz	l5506
  3399  0009CC  0E07               	movlw	7
  3400  0009CE  5DCC               	subwf	_i& (0+255),w,b
  3401  0009D0  A0D8               	btfss	status,0,c
  3402  0009D2  D5E1               	goto	l355
  3403  0009D4                     l5506:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;main.c: 416: }
  3407                           ;main.c: 420: ramp_Rotate();
  3408  0009D4  ECC5  F01E         	call	_ramp_Rotate	;wreg free
  3409                           
  3410                           ;main.c: 424: motorStart_0();
  3411  0009D8  ECB0  F021         	call	_motorStart_0	;wreg free
  3412                           
  3413                           ;main.c: 425: motorStart_1();
  3414  0009DC  ECA0  F021         	call	_motorStart_1	;wreg free
  3415                           
  3416                           ;main.c: 426: motorStart_2();
  3417  0009E0  EC90  F021         	call	_motorStart_2	;wreg free
  3418                           
  3419                           ;main.c: 427: motorStart_3();
  3420  0009E4  EC80  F021         	call	_motorStart_3	;wreg free
  3421  0009E8                     
  3422                           ;main.c: 431: if (gear_counter>=50){
  3423  0009E8  0100               	movlb	0	; () banked
  3424  0009EA  BFC3               	btfsc	(_gear_counter+1)& (0+255),7,b
  3425  0009EC  D009               	goto	l383
  3426  0009EE  51C3               	movf	(_gear_counter+1)& (0+255),w,b
  3427  0009F0  E104               	bnz	u4510
  3428  0009F2  0E32               	movlw	50
  3429  0009F4  5DC2               	subwf	_gear_counter& (0+255),w,b
  3430  0009F6  A0D8               	btfss	status,0,c
  3431  0009F8  D003               	goto	l383
  3432  0009FA                     u4510:
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;main.c: 432: servoRotate_ConStop();
  3436  0009FA  EC8C  F01F         	call	_servoRotate_ConStop	;wreg free
  3437                           
  3438                           ;main.c: 433: }
  3439  0009FE  D004               	goto	l384
  3440  000A00                     l383:
  3441                           
  3442                           ;main.c: 434: else{
  3443                           ;main.c: 435: servoRotate_counter();
  3444  000A00  EC1C  F020         	call	_servoRotate_counter	;wreg free
  3445                           
  3446                           ;main.c: 436: count_gear();
  3447  000A04  EC6F  F01D         	call	_count_gear	;wreg free
  3448  000A08                     l384:
  3449                           
  3450                           ;main.c: 437: }
  3451                           ;main.c: 441: if (B_done == 1 && S_done == 1 && N_done == 1 && W_done ==1){
  3452  000A08  0100               	movlb	0	; () banked
  3453  000A0A  05A0               	decf	_B_done& (0+255),w,b
  3454  000A0C  11A1               	iorwf	(_B_done+1)& (0+255),w,b
  3455  000A0E  A4D8               	btfss	status,2,c
  3456  000A10  D00C               	goto	l385
  3457                           
  3458                           ; BSR set to: 0
  3459  000A12  059C               	decf	_S_done& (0+255),w,b
  3460  000A14  119D               	iorwf	(_S_done+1)& (0+255),w,b
  3461  000A16  A4D8               	btfss	status,2,c
  3462  000A18  D008               	goto	l385
  3463                           
  3464                           ; BSR set to: 0
  3465  000A1A  059E               	decf	_N_done& (0+255),w,b
  3466  000A1C  119F               	iorwf	(_N_done+1)& (0+255),w,b
  3467  000A1E  A4D8               	btfss	status,2,c
  3468  000A20  D004               	goto	l385
  3469                           
  3470                           ; BSR set to: 0
  3471  000A22  059A               	decf	_W_done& (0+255),w,b
  3472  000A24  119B               	iorwf	(_W_done+1)& (0+255),w,b
  3473  000A26  B4D8               	btfsc	status,2,c
  3474  000A28  D0B9               	goto	l386
  3475  000A2A                     l385:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;main.c: 444: }
  3479                           ;main.c: 445: if (B_spacingTime>= 15000){
  3480                           
  3481                           ; BSR set to: 0
  3482  000A2A  BFA9               	btfsc	(_B_spacingTime+1)& (0+255),7,b
  3483  000A2C  D00D               	goto	l387
  3484  000A2E  0E98               	movlw	152
  3485  000A30  5DA8               	subwf	_B_spacingTime& (0+255),w,b
  3486  000A32  0E3A               	movlw	58
  3487  000A34  59A9               	subwfb	(_B_spacingTime+1)& (0+255),w,b
  3488  000A36  A0D8               	btfss	status,0,c
  3489  000A38  D007               	goto	l387
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;main.c: 446: motorStop_0();
  3493  000A3A  EC70  F021         	call	_motorStop_0	;wreg free
  3494                           
  3495                           ;main.c: 447: B_done = 1;
  3496  000A3E  0E00               	movlw	0
  3497  000A40  0100               	movlb	0	; () banked
  3498  000A42  6FA1               	movwf	(_B_done+1)& (0+255),b
  3499  000A44  0E01               	movlw	1
  3500  000A46  6FA0               	movwf	_B_done& (0+255),b
  3501  000A48                     l387:
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;main.c: 448: }
  3505                           ;main.c: 450: if (N_spacingTime>= 15000){
  3506                           
  3507                           ; BSR set to: 0
  3508  000A48  BFA7               	btfsc	(_N_spacingTime+1)& (0+255),7,b
  3509  000A4A  D00D               	goto	l388
  3510  000A4C  0E98               	movlw	152
  3511  000A4E  5DA6               	subwf	_N_spacingTime& (0+255),w,b
  3512  000A50  0E3A               	movlw	58
  3513  000A52  59A7               	subwfb	(_N_spacingTime+1)& (0+255),w,b
  3514  000A54  A0D8               	btfss	status,0,c
  3515  000A56  D007               	goto	l388
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;main.c: 451: motorStop_1();
  3519  000A58  EC60  F021         	call	_motorStop_1	;wreg free
  3520                           
  3521                           ;main.c: 452: N_done = 1;
  3522  000A5C  0E00               	movlw	0
  3523  000A5E  0100               	movlb	0	; () banked
  3524  000A60  6F9F               	movwf	(_N_done+1)& (0+255),b
  3525  000A62  0E01               	movlw	1
  3526  000A64  6F9E               	movwf	_N_done& (0+255),b
  3527  000A66                     l388:
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;main.c: 453: }
  3531                           ;main.c: 455: if (S_spacingTime>= 15000){
  3532                           
  3533                           ; BSR set to: 0
  3534  000A66  BFA5               	btfsc	(_S_spacingTime+1)& (0+255),7,b
  3535  000A68  D00D               	goto	l389
  3536  000A6A  0E98               	movlw	152
  3537  000A6C  5DA4               	subwf	_S_spacingTime& (0+255),w,b
  3538  000A6E  0E3A               	movlw	58
  3539  000A70  59A5               	subwfb	(_S_spacingTime+1)& (0+255),w,b
  3540  000A72  A0D8               	btfss	status,0,c
  3541  000A74  D007               	goto	l389
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;main.c: 456: motorStop_2();
  3545  000A76  EC50  F021         	call	_motorStop_2	;wreg free
  3546                           
  3547                           ;main.c: 457: S_done = 1;
  3548  000A7A  0E00               	movlw	0
  3549  000A7C  0100               	movlb	0	; () banked
  3550  000A7E  6F9D               	movwf	(_S_done+1)& (0+255),b
  3551  000A80  0E01               	movlw	1
  3552  000A82  6F9C               	movwf	_S_done& (0+255),b
  3553  000A84                     l389:
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;main.c: 458: }
  3557                           ;main.c: 460: if (W_spacingTime>= 15000){
  3558                           
  3559                           ; BSR set to: 0
  3560  000A84  BFA3               	btfsc	(_W_spacingTime+1)& (0+255),7,b
  3561  000A86  D00D               	goto	l390
  3562  000A88  0E98               	movlw	152
  3563  000A8A  5DA2               	subwf	_W_spacingTime& (0+255),w,b
  3564  000A8C  0E3A               	movlw	58
  3565  000A8E  59A3               	subwfb	(_W_spacingTime+1)& (0+255),w,b
  3566  000A90  A0D8               	btfss	status,0,c
  3567  000A92  D007               	goto	l390
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;main.c: 461: motorStop_3();
  3571  000A94  EC40  F021         	call	_motorStop_3	;wreg free
  3572                           
  3573                           ;main.c: 462: W_done = 1;
  3574  000A98  0E00               	movlw	0
  3575  000A9A  0100               	movlb	0	; () banked
  3576  000A9C  6F9B               	movwf	(_W_done+1)& (0+255),b
  3577  000A9E  0E01               	movlw	1
  3578  000AA0  6F9A               	movwf	_W_done& (0+255),b
  3579  000AA2                     l390:
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;main.c: 463: }
  3583                           ;main.c: 466: if (readADC(0)<=250 ){
  3584                           
  3585                           ; BSR set to: 0
  3586  000AA2  0E00               	movlw	0
  3587  000AA4  ECC4  F020         	call	_readADC
  3588  000AA8  0100               	movlb	0	; () banked
  3589  000AAA  51D5               	movf	(?_readADC+1)& (0+255),w,b
  3590  000AAC  E10A               	bnz	l5564
  3591  000AAE  0EFB               	movlw	251
  3592  000AB0  5DD4               	subwf	?_readADC& (0+255),w,b
  3593  000AB2  B0D8               	btfsc	status,0,c
  3594  000AB4  D006               	goto	l391
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;main.c: 468: B_spacingTime=0;
  3598  000AB6  0E00               	movlw	0
  3599  000AB8  6FA9               	movwf	(_B_spacingTime+1)& (0+255),b
  3600  000ABA  0E00               	movlw	0
  3601  000ABC  6FA8               	movwf	_B_spacingTime& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;main.c: 469: B_remain ++;
  3605  000ABE  4BB0               	infsnz	_B_remain& (0+255),f,b
  3606  000AC0  2BB1               	incf	(_B_remain+1)& (0+255),f,b
  3607  000AC2                     l391:
  3608  000AC2                     l5564:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;main.c: 470: }
  3612                           ;main.c: 471: initLCD();
  3613  000AC2  EC40  F01F         	call	_initLCD	;wreg free
  3614                           
  3615                           ;main.c: 472: printf("B%d", B_remain);
  3616  000AC6  0EF3               	movlw	low STR_40
  3617  000AC8  0100               	movlb	0	; () banked
  3618  000ACA  6FE2               	movwf	printf@f& (0+255),b
  3619  000ACC  0EFF               	movlw	high STR_40
  3620  000ACE  6FE3               	movwf	(printf@f+1)& (0+255),b
  3621  000AD0  C0B0  F0E4         	movff	_B_remain,?_printf+2
  3622  000AD4  C0B1  F0E5         	movff	_B_remain+1,?_printf+3
  3623  000AD8  EC5F  F014         	call	_printf	;wreg free
  3624                           
  3625                           ;main.c: 474: if (readADC(1)<=250 ){
  3626  000ADC  0E01               	movlw	1
  3627  000ADE  ECC4  F020         	call	_readADC
  3628  000AE2  0100               	movlb	0	; () banked
  3629  000AE4  51D5               	movf	(?_readADC+1)& (0+255),w,b
  3630  000AE6  E10A               	bnz	l5574
  3631  000AE8  0EFB               	movlw	251
  3632  000AEA  5DD4               	subwf	?_readADC& (0+255),w,b
  3633  000AEC  B0D8               	btfsc	status,0,c
  3634  000AEE  D006               	goto	l392
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;main.c: 476: N_spacingTime=0;
  3638  000AF0  0E00               	movlw	0
  3639  000AF2  6FA7               	movwf	(_N_spacingTime+1)& (0+255),b
  3640  000AF4  0E00               	movlw	0
  3641  000AF6  6FA6               	movwf	_N_spacingTime& (0+255),b
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;main.c: 477: N_remain ++;
  3645  000AF8  4BAE               	infsnz	_N_remain& (0+255),f,b
  3646  000AFA  2BAF               	incf	(_N_remain+1)& (0+255),f,b
  3647  000AFC                     l392:
  3648  000AFC                     l5574:
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;main.c: 479: }
  3652                           ;main.c: 480: printf(",N%d", N_remain);
  3653  000AFC  0EC9               	movlw	low STR_41
  3654  000AFE  6FE2               	movwf	printf@f& (0+255),b
  3655  000B00  0EFF               	movlw	high STR_41
  3656  000B02  6FE3               	movwf	(printf@f+1)& (0+255),b
  3657  000B04  C0AE  F0E4         	movff	_N_remain,?_printf+2
  3658  000B08  C0AF  F0E5         	movff	_N_remain+1,?_printf+3
  3659  000B0C  EC5F  F014         	call	_printf	;wreg free
  3660                           
  3661                           ;main.c: 481: if (readADC(5)<=250 ){
  3662  000B10  0E05               	movlw	5
  3663  000B12  ECC4  F020         	call	_readADC
  3664  000B16  0100               	movlb	0	; () banked
  3665  000B18  51D5               	movf	(?_readADC+1)& (0+255),w,b
  3666  000B1A  E10A               	bnz	l5582
  3667  000B1C  0EFB               	movlw	251
  3668  000B1E  5DD4               	subwf	?_readADC& (0+255),w,b
  3669  000B20  B0D8               	btfsc	status,0,c
  3670  000B22  D006               	goto	l393
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;main.c: 483: S_spacingTime=0;
  3674  000B24  0E00               	movlw	0
  3675  000B26  6FA5               	movwf	(_S_spacingTime+1)& (0+255),b
  3676  000B28  0E00               	movlw	0
  3677  000B2A  6FA4               	movwf	_S_spacingTime& (0+255),b
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;main.c: 484: S_remain ++;
  3681  000B2C  4BAC               	infsnz	_S_remain& (0+255),f,b
  3682  000B2E  2BAD               	incf	(_S_remain+1)& (0+255),f,b
  3683  000B30                     l393:
  3684  000B30                     l5582:
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;main.c: 487: }
  3688                           ;main.c: 488: printf(",S:%d", S_remain);
  3689  000B30  0E9A               	movlw	low STR_42
  3690  000B32  6FE2               	movwf	printf@f& (0+255),b
  3691  000B34  0EFF               	movlw	high STR_42
  3692  000B36  6FE3               	movwf	(printf@f+1)& (0+255),b
  3693  000B38  C0AC  F0E4         	movff	_S_remain,?_printf+2
  3694  000B3C  C0AD  F0E5         	movff	_S_remain+1,?_printf+3
  3695  000B40  EC5F  F014         	call	_printf	;wreg free
  3696                           
  3697                           ;main.c: 490: if (readADC(4)<=250 ){
  3698  000B44  0E04               	movlw	4
  3699  000B46  ECC4  F020         	call	_readADC
  3700  000B4A  0100               	movlb	0	; () banked
  3701  000B4C  51D5               	movf	(?_readADC+1)& (0+255),w,b
  3702  000B4E  E10A               	bnz	l5590
  3703  000B50  0EFB               	movlw	251
  3704  000B52  5DD4               	subwf	?_readADC& (0+255),w,b
  3705  000B54  B0D8               	btfsc	status,0,c
  3706  000B56  D006               	goto	l394
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;main.c: 492: W_spacingTime=0;
  3710  000B58  0E00               	movlw	0
  3711  000B5A  6FA3               	movwf	(_W_spacingTime+1)& (0+255),b
  3712  000B5C  0E00               	movlw	0
  3713  000B5E  6FA2               	movwf	_W_spacingTime& (0+255),b
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;main.c: 493: W_remain ++;
  3717  000B60  4BAA               	infsnz	_W_remain& (0+255),f,b
  3718  000B62  2BAB               	incf	(_W_remain+1)& (0+255),f,b
  3719  000B64                     l394:
  3720  000B64                     l5590:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;main.c: 497: }
  3724                           ;main.c: 498: printf(",W:%d", W_remain);
  3725  000B64  0EA0               	movlw	low STR_43
  3726  000B66  6FE2               	movwf	printf@f& (0+255),b
  3727  000B68  0EFF               	movlw	high STR_43
  3728  000B6A  6FE3               	movwf	(printf@f+1)& (0+255),b
  3729  000B6C  C0AA  F0E4         	movff	_W_remain,?_printf+2
  3730  000B70  C0AB  F0E5         	movff	_W_remain+1,?_printf+3
  3731  000B74  EC5F  F014         	call	_printf	;wreg free
  3732                           
  3733                           ;main.c: 501: B_spacingTime+=200;
  3734  000B78  0EC8               	movlw	200
  3735  000B7A  0100               	movlb	0	; () banked
  3736  000B7C  27A8               	addwf	_B_spacingTime& (0+255),f,b
  3737  000B7E  0E00               	movlw	0
  3738  000B80  23A9               	addwfc	(_B_spacingTime+1)& (0+255),f,b
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;main.c: 502: N_spacingTime+=200;
  3742  000B82  0EC8               	movlw	200
  3743  000B84  27A6               	addwf	_N_spacingTime& (0+255),f,b
  3744  000B86  0E00               	movlw	0
  3745  000B88  23A7               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;main.c: 503: S_spacingTime+=200;
  3749  000B8A  0EC8               	movlw	200
  3750  000B8C  27A4               	addwf	_S_spacingTime& (0+255),f,b
  3751  000B8E  0E00               	movlw	0
  3752  000B90  23A5               	addwfc	(_S_spacingTime+1)& (0+255),f,b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 504: W_spacingTime+=200;
  3756  000B92  0EC8               	movlw	200
  3757  000B94  27A2               	addwf	_W_spacingTime& (0+255),f,b
  3758  000B96  0E00               	movlw	0
  3759  000B98  23A3               	addwfc	(_W_spacingTime+1)& (0+255),f,b
  3760                           
  3761                           ; BSR set to: 0
  3762  000B9A  D726               	goto	l382
  3763  000B9C                     l386:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 505: }
  3767                           ;main.c: 509: initLCD();
  3768                           
  3769                           ; BSR set to: 0
  3770  000B9C  EC40  F01F         	call	_initLCD	;wreg free
  3771                           
  3772                           ;main.c: 510: printf("operation ends");
  3773  000BA0  0ED3               	movlw	low STR_44
  3774  000BA2  0100               	movlb	0	; () banked
  3775  000BA4  6FE2               	movwf	printf@f& (0+255),b
  3776  000BA6  0EFE               	movlw	high STR_44
  3777  000BA8  6FE3               	movwf	(printf@f+1)& (0+255),b
  3778  000BAA  EC5F  F014         	call	_printf	;wreg free
  3779                           
  3780                           ;main.c: 511: _delay((unsigned long)((300)*(40000000/4000.0)));
  3781  000BAE  0E10               	movlw	16
  3782  000BB0  0100               	movlb	0	; () banked
  3783  000BB2  6FFA               	movwf	(??_main+1)& (0+255),b
  3784  000BB4  0E39               	movlw	57
  3785  000BB6  6FF9               	movwf	??_main& (0+255),b
  3786  000BB8  0E0D               	movlw	13
  3787  000BBA                     u5467:
  3788  000BBA  2EE8               	decfsz	wreg,f,c
  3789  000BBC  D7FE               	bra	u5467
  3790  000BBE  2FF9               	decfsz	??_main& (0+255),f,b
  3791  000BC0  D7FC               	bra	u5467
  3792  000BC2  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3793  000BC4  D7FA               	bra	u5467
  3794  000BC6  D000               	nop2	
  3795                           
  3796                           ;main.c: 512: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3797  000BC8  0E01               	movlw	1
  3798  000BCA  ECDB  F021         	call	_lcdInst
  3799  000BCE  0EC3               	movlw	195
  3800  000BD0  0100               	movlb	0	; () banked
  3801  000BD2  6FF9               	movwf	??_main& (0+255),b
  3802  000BD4  0ECD               	movlw	205
  3803  000BD6                     u5477:
  3804  000BD6  2EE8               	decfsz	wreg,f,c
  3805  000BD8  D7FE               	bra	u5477
  3806  000BDA  2FF9               	decfsz	??_main& (0+255),f,b
  3807  000BDC  D7FC               	bra	u5477
  3808                           
  3809                           ;main.c: 513: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3810  000BDE  0E80               	movlw	128
  3811  000BE0  ECDB  F021         	call	_lcdInst
  3812  000BE4  0E41               	movlw	65
  3813  000BE6  0100               	movlb	0	; () banked
  3814  000BE8  6FF9               	movwf	??_main& (0+255),b
  3815  000BEA  0EEE               	movlw	238
  3816  000BEC                     u5487:
  3817  000BEC  2EE8               	decfsz	wreg,f,c
  3818  000BEE  D7FE               	bra	u5487
  3819  000BF0  2FF9               	decfsz	??_main& (0+255),f,b
  3820  000BF2  D7FC               	bra	u5487
  3821  000BF4  F000               	nop	
  3822                           
  3823                           ;main.c: 517: get_RTC_final();
  3824  000BF6  EC04  F01B         	call	_get_RTC_final	;wreg free
  3825                           
  3826                           ;main.c: 519: printf("Bolt_remain:%d",B_remain);
  3827  000BFA  0EC4               	movlw	low STR_45
  3828  000BFC  0100               	movlb	0	; () banked
  3829  000BFE  6FE2               	movwf	printf@f& (0+255),b
  3830  000C00  0EFE               	movlw	high STR_45
  3831  000C02  6FE3               	movwf	(printf@f+1)& (0+255),b
  3832  000C04  C0B0  F0E4         	movff	_B_remain,?_printf+2
  3833  000C08  C0B1  F0E5         	movff	_B_remain+1,?_printf+3
  3834  000C0C  EC5F  F014         	call	_printf	;wreg free
  3835                           
  3836                           ;main.c: 520: _delay((unsigned long)((300)*(40000000/4000.0)));
  3837  000C10  0E10               	movlw	16
  3838  000C12  0100               	movlb	0	; () banked
  3839  000C14  6FFA               	movwf	(??_main+1)& (0+255),b
  3840  000C16  0E39               	movlw	57
  3841  000C18  6FF9               	movwf	??_main& (0+255),b
  3842  000C1A  0E0D               	movlw	13
  3843  000C1C                     u5497:
  3844  000C1C  2EE8               	decfsz	wreg,f,c
  3845  000C1E  D7FE               	bra	u5497
  3846  000C20  2FF9               	decfsz	??_main& (0+255),f,b
  3847  000C22  D7FC               	bra	u5497
  3848  000C24  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3849  000C26  D7FA               	bra	u5497
  3850  000C28  D000               	nop2	
  3851                           
  3852                           ;main.c: 521: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3853  000C2A  0E01               	movlw	1
  3854  000C2C  ECDB  F021         	call	_lcdInst
  3855  000C30  0EC3               	movlw	195
  3856  000C32  0100               	movlb	0	; () banked
  3857  000C34  6FF9               	movwf	??_main& (0+255),b
  3858  000C36  0ECD               	movlw	205
  3859  000C38                     u5507:
  3860  000C38  2EE8               	decfsz	wreg,f,c
  3861  000C3A  D7FE               	bra	u5507
  3862  000C3C  2FF9               	decfsz	??_main& (0+255),f,b
  3863  000C3E  D7FC               	bra	u5507
  3864                           
  3865                           ;main.c: 522: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3866  000C40  0E80               	movlw	128
  3867  000C42  ECDB  F021         	call	_lcdInst
  3868  000C46  0E41               	movlw	65
  3869  000C48  0100               	movlb	0	; () banked
  3870  000C4A  6FF9               	movwf	??_main& (0+255),b
  3871  000C4C  0EEE               	movlw	238
  3872  000C4E                     u5517:
  3873  000C4E  2EE8               	decfsz	wreg,f,c
  3874  000C50  D7FE               	bra	u5517
  3875  000C52  2FF9               	decfsz	??_main& (0+255),f,b
  3876  000C54  D7FC               	bra	u5517
  3877  000C56  F000               	nop	
  3878                           
  3879                           ;main.c: 523: printf("Nut_remain:%d",N_remain);
  3880  000C58  0E0E               	movlw	low STR_46
  3881  000C5A  0100               	movlb	0	; () banked
  3882  000C5C  6FE2               	movwf	printf@f& (0+255),b
  3883  000C5E  0EFF               	movlw	high STR_46
  3884  000C60  6FE3               	movwf	(printf@f+1)& (0+255),b
  3885  000C62  C0AE  F0E4         	movff	_N_remain,?_printf+2
  3886  000C66  C0AF  F0E5         	movff	_N_remain+1,?_printf+3
  3887  000C6A  EC5F  F014         	call	_printf	;wreg free
  3888                           
  3889                           ;main.c: 524: _delay((unsigned long)((300)*(40000000/4000.0)));
  3890  000C6E  0E10               	movlw	16
  3891  000C70  0100               	movlb	0	; () banked
  3892  000C72  6FFA               	movwf	(??_main+1)& (0+255),b
  3893  000C74  0E39               	movlw	57
  3894  000C76  6FF9               	movwf	??_main& (0+255),b
  3895  000C78  0E0D               	movlw	13
  3896  000C7A                     u5527:
  3897  000C7A  2EE8               	decfsz	wreg,f,c
  3898  000C7C  D7FE               	bra	u5527
  3899  000C7E  2FF9               	decfsz	??_main& (0+255),f,b
  3900  000C80  D7FC               	bra	u5527
  3901  000C82  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3902  000C84  D7FA               	bra	u5527
  3903  000C86  D000               	nop2	
  3904                           
  3905                           ;main.c: 525: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3906  000C88  0E01               	movlw	1
  3907  000C8A  ECDB  F021         	call	_lcdInst
  3908  000C8E  0EC3               	movlw	195
  3909  000C90  0100               	movlb	0	; () banked
  3910  000C92  6FF9               	movwf	??_main& (0+255),b
  3911  000C94  0ECD               	movlw	205
  3912  000C96                     u5537:
  3913  000C96  2EE8               	decfsz	wreg,f,c
  3914  000C98  D7FE               	bra	u5537
  3915  000C9A  2FF9               	decfsz	??_main& (0+255),f,b
  3916  000C9C  D7FC               	bra	u5537
  3917                           
  3918                           ;main.c: 526: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3919  000C9E  0E80               	movlw	128
  3920  000CA0  ECDB  F021         	call	_lcdInst
  3921  000CA4  0E41               	movlw	65
  3922  000CA6  0100               	movlb	0	; () banked
  3923  000CA8  6FF9               	movwf	??_main& (0+255),b
  3924  000CAA  0EEE               	movlw	238
  3925  000CAC                     u5547:
  3926  000CAC  2EE8               	decfsz	wreg,f,c
  3927  000CAE  D7FE               	bra	u5547
  3928  000CB0  2FF9               	decfsz	??_main& (0+255),f,b
  3929  000CB2  D7FC               	bra	u5547
  3930  000CB4  F000               	nop	
  3931                           
  3932                           ;main.c: 527: printf("Spacer_remain:%d",S_remain);
  3933  000CB6  0E32               	movlw	low STR_47
  3934  000CB8  0100               	movlb	0	; () banked
  3935  000CBA  6FE2               	movwf	printf@f& (0+255),b
  3936  000CBC  0EFE               	movlw	high STR_47
  3937  000CBE  6FE3               	movwf	(printf@f+1)& (0+255),b
  3938  000CC0  C0AC  F0E4         	movff	_S_remain,?_printf+2
  3939  000CC4  C0AD  F0E5         	movff	_S_remain+1,?_printf+3
  3940  000CC8  EC5F  F014         	call	_printf	;wreg free
  3941                           
  3942                           ;main.c: 528: _delay((unsigned long)((300)*(40000000/4000.0)));
  3943  000CCC  0E10               	movlw	16
  3944  000CCE  0100               	movlb	0	; () banked
  3945  000CD0  6FFA               	movwf	(??_main+1)& (0+255),b
  3946  000CD2  0E39               	movlw	57
  3947  000CD4  6FF9               	movwf	??_main& (0+255),b
  3948  000CD6  0E0D               	movlw	13
  3949  000CD8                     u5557:
  3950  000CD8  2EE8               	decfsz	wreg,f,c
  3951  000CDA  D7FE               	bra	u5557
  3952  000CDC  2FF9               	decfsz	??_main& (0+255),f,b
  3953  000CDE  D7FC               	bra	u5557
  3954  000CE0  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3955  000CE2  D7FA               	bra	u5557
  3956  000CE4  D000               	nop2	
  3957                           
  3958                           ;main.c: 529: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3959  000CE6  0E01               	movlw	1
  3960  000CE8  ECDB  F021         	call	_lcdInst
  3961  000CEC  0EC3               	movlw	195
  3962  000CEE  0100               	movlb	0	; () banked
  3963  000CF0  6FF9               	movwf	??_main& (0+255),b
  3964  000CF2  0ECD               	movlw	205
  3965  000CF4                     u5567:
  3966  000CF4  2EE8               	decfsz	wreg,f,c
  3967  000CF6  D7FE               	bra	u5567
  3968  000CF8  2FF9               	decfsz	??_main& (0+255),f,b
  3969  000CFA  D7FC               	bra	u5567
  3970                           
  3971                           ;main.c: 530: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3972  000CFC  0E80               	movlw	128
  3973  000CFE  ECDB  F021         	call	_lcdInst
  3974  000D02  0E41               	movlw	65
  3975  000D04  0100               	movlb	0	; () banked
  3976  000D06  6FF9               	movwf	??_main& (0+255),b
  3977  000D08  0EEE               	movlw	238
  3978  000D0A                     u5577:
  3979  000D0A  2EE8               	decfsz	wreg,f,c
  3980  000D0C  D7FE               	bra	u5577
  3981  000D0E  2FF9               	decfsz	??_main& (0+255),f,b
  3982  000D10  D7FC               	bra	u5577
  3983  000D12  F000               	nop	
  3984                           
  3985                           ;main.c: 531: printf("Washer_remain:%d",W_remain);
  3986  000D14  0E43               	movlw	low STR_48
  3987  000D16  0100               	movlb	0	; () banked
  3988  000D18  6FE2               	movwf	printf@f& (0+255),b
  3989  000D1A  0EFE               	movlw	high STR_48
  3990  000D1C  6FE3               	movwf	(printf@f+1)& (0+255),b
  3991  000D1E  C0AA  F0E4         	movff	_W_remain,?_printf+2
  3992  000D22  C0AB  F0E5         	movff	_W_remain+1,?_printf+3
  3993  000D26  EC5F  F014         	call	_printf	;wreg free
  3994                           
  3995                           ;main.c: 532: _delay((unsigned long)((300)*(40000000/4000.0)));
  3996  000D2A  0E10               	movlw	16
  3997  000D2C  0100               	movlb	0	; () banked
  3998  000D2E  6FFA               	movwf	(??_main+1)& (0+255),b
  3999  000D30  0E39               	movlw	57
  4000  000D32  6FF9               	movwf	??_main& (0+255),b
  4001  000D34  0E0D               	movlw	13
  4002  000D36                     u5587:
  4003  000D36  2EE8               	decfsz	wreg,f,c
  4004  000D38  D7FE               	bra	u5587
  4005  000D3A  2FF9               	decfsz	??_main& (0+255),f,b
  4006  000D3C  D7FC               	bra	u5587
  4007  000D3E  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  4008  000D40  D7FA               	bra	u5587
  4009  000D42  D000               	nop2	
  4010                           
  4011                           ;main.c: 533: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4012  000D44  0E01               	movlw	1
  4013  000D46  ECDB  F021         	call	_lcdInst
  4014  000D4A  0EC3               	movlw	195
  4015  000D4C  0100               	movlb	0	; () banked
  4016  000D4E  6FF9               	movwf	??_main& (0+255),b
  4017  000D50  0ECD               	movlw	205
  4018  000D52                     u5597:
  4019  000D52  2EE8               	decfsz	wreg,f,c
  4020  000D54  D7FE               	bra	u5597
  4021  000D56  2FF9               	decfsz	??_main& (0+255),f,b
  4022  000D58  D7FC               	bra	u5597
  4023                           
  4024                           ;main.c: 534: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4025  000D5A  0E80               	movlw	128
  4026  000D5C  ECDB  F021         	call	_lcdInst
  4027  000D60  0E41               	movlw	65
  4028  000D62  0100               	movlb	0	; () banked
  4029  000D64  6FF9               	movwf	??_main& (0+255),b
  4030  000D66  0EEE               	movlw	238
  4031  000D68                     u5607:
  4032  000D68  2EE8               	decfsz	wreg,f,c
  4033  000D6A  D7FE               	bra	u5607
  4034  000D6C  2FF9               	decfsz	??_main& (0+255),f,b
  4035  000D6E  D7FC               	bra	u5607
  4036  000D70  F000               	nop	
  4037                           
  4038                           ;main.c: 535: printf("you're done");
  4039  000D72  0E37               	movlw	low STR_49
  4040  000D74  0100               	movlb	0	; () banked
  4041  000D76  6FE2               	movwf	printf@f& (0+255),b
  4042  000D78  0EFF               	movlw	high STR_49
  4043  000D7A  6FE3               	movwf	(printf@f+1)& (0+255),b
  4044  000D7C  EC5F  F014         	call	_printf	;wreg free
  4045                           
  4046                           ;main.c: 536: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4047  000D80  0E33               	movlw	51
  4048  000D82  0100               	movlb	0	; () banked
  4049  000D84  6FFA               	movwf	(??_main+1)& (0+255),b
  4050  000D86  0EBB               	movlw	187
  4051  000D88  6FF9               	movwf	??_main& (0+255),b
  4052  000D8A  0EDF               	movlw	223
  4053  000D8C                     u5617:
  4054  000D8C  2EE8               	decfsz	wreg,f,c
  4055  000D8E  D7FE               	bra	u5617
  4056  000D90  2FF9               	decfsz	??_main& (0+255),f,b
  4057  000D92  D7FC               	bra	u5617
  4058  000D94  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  4059  000D96  D7FA               	bra	u5617
  4060  000D98  D000               	nop2	
  4061                           
  4062                           ;main.c: 537: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4063  000D9A  0E80               	movlw	128
  4064  000D9C  ECDB  F021         	call	_lcdInst
  4065  000DA0  0E41               	movlw	65
  4066  000DA2  0100               	movlb	0	; () banked
  4067  000DA4  6FF9               	movwf	??_main& (0+255),b
  4068  000DA6  0EEE               	movlw	238
  4069  000DA8                     u5627:
  4070  000DA8  2EE8               	decfsz	wreg,f,c
  4071  000DAA  D7FE               	bra	u5627
  4072  000DAC  2FF9               	decfsz	??_main& (0+255),f,b
  4073  000DAE  D7FC               	bra	u5627
  4074  000DB0  F000               	nop	
  4075  000DB2                     
  4076                           ;main.c: 561: (INTCONbits.GIE = 1);
  4077  000DB2  8EF2               	bsf	intcon,7,c	;volatile
  4078                           
  4079                           ;main.c: 562: operation = 1;
  4080  000DB4  0E00               	movlw	0
  4081  000DB6  6E74               	movwf	_operation+1,c
  4082  000DB8  0E01               	movlw	1
  4083  000DBA  6E73               	movwf	_operation,c
  4084                           
  4085                           ;main.c: 563: printf("1: Date and Time");
  4086  000DBC  0E65               	movlw	low STR_50
  4087  000DBE  0100               	movlb	0	; () banked
  4088  000DC0  6FE2               	movwf	printf@f& (0+255),b
  4089  000DC2  0EFE               	movlw	high STR_50
  4090  000DC4  6FE3               	movwf	(printf@f+1)& (0+255),b
  4091  000DC6  EC5F  F014         	call	_printf	;wreg free
  4092                           
  4093                           ;main.c: 564: lcdInst(0xC0);;
  4094  000DCA  0EC0               	movlw	192
  4095  000DCC  ECDB  F021         	call	_lcdInst
  4096                           
  4097                           ;main.c: 565: printf(" 2: Operation Time");
  4098  000DD0  0E0E               	movlw	low STR_51
  4099  000DD2  0100               	movlb	0	; () banked
  4100  000DD4  6FE2               	movwf	printf@f& (0+255),b
  4101  000DD6  0EFE               	movlw	high STR_51
  4102  000DD8  6FE3               	movwf	(printf@f+1)& (0+255),b
  4103  000DDA  EC5F  F014         	call	_printf	;wreg free
  4104                           
  4105                           ;main.c: 566: _delay((unsigned long)((600)*(40000000/4000.0)));
  4106  000DDE  0E1F               	movlw	31
  4107  000DE0  0100               	movlb	0	; () banked
  4108  000DE2  6FFA               	movwf	(??_main+1)& (0+255),b
  4109  000DE4  0E71               	movlw	113
  4110  000DE6  6FF9               	movwf	??_main& (0+255),b
  4111  000DE8  0E1E               	movlw	30
  4112  000DEA                     u5637:
  4113  000DEA  2EE8               	decfsz	wreg,f,c
  4114  000DEC  D7FE               	bra	u5637
  4115  000DEE  2FF9               	decfsz	??_main& (0+255),f,b
  4116  000DF0  D7FC               	bra	u5637
  4117  000DF2  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  4118  000DF4  D7FA               	bra	u5637
  4119  000DF6  F000               	nop	
  4120                           
  4121                           ;main.c: 567: initLCD();
  4122  000DF8  EC40  F01F         	call	_initLCD	;wreg free
  4123                           
  4124                           ;main.c: 568: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4125  000DFC  0E80               	movlw	128
  4126  000DFE  ECDB  F021         	call	_lcdInst
  4127  000E02  0E41               	movlw	65
  4128  000E04  0100               	movlb	0	; () banked
  4129  000E06  6FF9               	movwf	??_main& (0+255),b
  4130  000E08  0EEE               	movlw	238
  4131  000E0A                     u5647:
  4132  000E0A  2EE8               	decfsz	wreg,f,c
  4133  000E0C  D7FE               	bra	u5647
  4134  000E0E  2FF9               	decfsz	??_main& (0+255),f,b
  4135  000E10  D7FC               	bra	u5647
  4136  000E12  F000               	nop	
  4137                           
  4138                           ;main.c: 569: printf("3:summary");
  4139  000E14  0E5A               	movlw	low STR_52
  4140  000E16  0100               	movlb	0	; () banked
  4141  000E18  6FE2               	movwf	printf@f& (0+255),b
  4142  000E1A  0EFF               	movlw	high STR_52
  4143  000E1C  6FE3               	movwf	(printf@f+1)& (0+255),b
  4144  000E1E  EC5F  F014         	call	_printf	;wreg free
  4145                           
  4146                           ;main.c: 570: lcdInst(0xC0);;
  4147  000E22  0EC0               	movlw	192
  4148  000E24  ECDB  F021         	call	_lcdInst
  4149                           
  4150                           ;main.c: 572: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4151  000E28  0E33               	movlw	51
  4152  000E2A  0100               	movlb	0	; () banked
  4153  000E2C  6FFA               	movwf	(??_main+1)& (0+255),b
  4154  000E2E  0EBB               	movlw	187
  4155  000E30  6FF9               	movwf	??_main& (0+255),b
  4156  000E32  0EDF               	movlw	223
  4157  000E34                     u5657:
  4158  000E34  2EE8               	decfsz	wreg,f,c
  4159  000E36  D7FE               	bra	u5657
  4160  000E38  2FF9               	decfsz	??_main& (0+255),f,b
  4161  000E3A  D7FC               	bra	u5657
  4162  000E3C  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  4163  000E3E  D7FA               	bra	u5657
  4164  000E40  D000               	nop2	
  4165                           
  4166                           ;main.c: 573: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4167  000E42  0E80               	movlw	128
  4168  000E44  ECDB  F021         	call	_lcdInst
  4169  000E48  0E41               	movlw	65
  4170  000E4A  0100               	movlb	0	; () banked
  4171  000E4C  6FF9               	movwf	??_main& (0+255),b
  4172  000E4E  0EEE               	movlw	238
  4173  000E50                     u5667:
  4174  000E50  2EE8               	decfsz	wreg,f,c
  4175  000E52  D7FE               	bra	u5667
  4176  000E54  2FF9               	decfsz	??_main& (0+255),f,b
  4177  000E56  D7FC               	bra	u5667
  4178  000E58  F000               	nop	
  4179                           
  4180                           ;main.c: 575: if(operation_done == 1){
  4181  000E5A  0100               	movlb	0	; () banked
  4182  000E5C  05C4               	decf	_operation_done& (0+255),w,b
  4183  000E5E  11C5               	iorwf	(_operation_done+1)& (0+255),w,b
  4184  000E60  A4D8               	btfss	status,2,c
  4185  000E62  D7A7               	goto	l396
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;main.c: 577: }
  4189                           ;main.c: 578: }
  4190                           ;main.c: 579: initialize();
  4191                           
  4192                           ; BSR set to: 0
  4193                           
  4194                           ; BSR set to: 0
  4195                           
  4196                           ; BSR set to: 0
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;main.c: 576: break;
  4200  000E64  ECC6  F019         	call	_initialize	;wreg free
  4201                           
  4202                           ;main.c: 580: mode = 0;
  4203  000E68  0E00               	movlw	0
  4204  000E6A  0100               	movlb	0	; () banked
  4205  000E6C  6FC9               	movwf	(_mode+1)& (0+255),b
  4206  000E6E  0E00               	movlw	0
  4207  000E70  6FC8               	movwf	_mode& (0+255),b
  4208                           
  4209                           ; BSR set to: 0
  4210  000E72  EF25  F000         	goto	l326
  4211  000E76                     __end_of_main:
  4212                           	opt stack 0
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           intcon	equ	0xFF2
  4218                           intcon3	equ	0xFF0
  4219                           postinc0	equ	0xFEE
  4220                           wreg	equ	0xFE8
  4221                           postinc2	equ	0xFDE
  4222                           postdec2	equ	0xFDD
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _servoRotate_counter *****************
  4228 ;; Defined at:
  4229 ;;		line 126 in file "DCmotor.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;		None
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;		None
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      void 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;Total ram usage:        1 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    4
  4250 ;; This function calls:
  4251 ;;		Nothing
  4252 ;; This function is called by:
  4253 ;;		_main
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text1
  4258  004038                     __ptext1:
  4259                           	opt stack 0
  4260  004038                     _servoRotate_counter:
  4261                           	opt stack 26
  4262                           
  4263                           ;DCmotor.c: 128: for (i = 0; i<1; i++){
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;incstack = 0
  4267  004038  0E00               	movlw	0
  4268  00403A  0100               	movlb	0	; () banked
  4269  00403C  6FCD               	movwf	(_i+1)& (0+255),b
  4270  00403E  0E00               	movlw	0
  4271  004040  6FCC               	movwf	_i& (0+255),b
  4272  004042                     l4504:
  4273                           
  4274                           ; BSR set to: 0
  4275  004042  51CC               	movf	_i& (0+255),w,b
  4276  004044  11CD               	iorwf	(_i+1)& (0+255),w,b
  4277  004046  A4D8               	btfss	status,2,c
  4278  004048  0012               	return	
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;DCmotor.c: 129: LATDbits.LATD0 = 1;
  4282                           
  4283                           ; BSR set to: 0
  4284  00404A  808C               	bsf	3980,0,c	;volatile
  4285                           
  4286                           ;DCmotor.c: 130: TRISDbits.RD0 = 0;
  4287  00404C  9095               	bcf	3989,0,c	;volatile
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;DCmotor.c: 131: _delay((unsigned long)((2000)*(40000000/4000000.0)));
  4291  00404E  0E1A               	movlw	26
  4292  004050  0100               	movlb	0	; () banked
  4293  004052  6FD4               	movwf	??_servoRotate_counter& (0+255),b
  4294  004054  0EF8               	movlw	248
  4295  004056                     u5677:
  4296  004056  2EE8               	decfsz	wreg,f,c
  4297  004058  D7FE               	bra	u5677
  4298  00405A  2FD4               	decfsz	??_servoRotate_counter& (0+255),f,b
  4299  00405C  D7FC               	bra	u5677
  4300  00405E  F000               	nop	
  4301                           
  4302                           ;DCmotor.c: 132: LATDbits.LATD0 = 0;
  4303  004060  908C               	bcf	3980,0,c	;volatile
  4304                           
  4305                           ;DCmotor.c: 133: TRISDbits.RD0 = 0;
  4306  004062  9095               	bcf	3989,0,c	;volatile
  4307                           
  4308                           ;DCmotor.c: 134: _delay((unsigned long)((18000)*(40000000/4000000.0)));
  4309  004064  0EEA               	movlw	234
  4310  004066  0100               	movlb	0	; () banked
  4311  004068  6FD4               	movwf	??_servoRotate_counter& (0+255),b
  4312  00406A  0EC3               	movlw	195
  4313  00406C                     u5687:
  4314  00406C  2EE8               	decfsz	wreg,f,c
  4315  00406E  D7FE               	bra	u5687
  4316  004070  2FD4               	decfsz	??_servoRotate_counter& (0+255),f,b
  4317  004072  D7FC               	bra	u5687
  4318  004074  0100               	movlb	0	; () banked
  4319  004076  4BCC               	infsnz	_i& (0+255),f,b
  4320  004078  2BCD               	incf	(_i+1)& (0+255),f,b
  4321  00407A  D7E3               	goto	l4504
  4322  00407C                     __end_of_servoRotate_counter:
  4323                           	opt stack 0
  4324                           tblptru	equ	0xFF8
  4325                           tblptrh	equ	0xFF7
  4326                           tblptrl	equ	0xFF6
  4327                           tablat	equ	0xFF5
  4328                           intcon	equ	0xFF2
  4329                           intcon3	equ	0xFF0
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _servoRotate_clockwise *****************
  4339 ;; Defined at:
  4340 ;;		line 99 in file "DCmotor.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        1 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    4
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text2
  4369  00407C                     __ptext2:
  4370                           	opt stack 0
  4371  00407C                     _servoRotate_clockwise:
  4372                           	opt stack 26
  4373                           
  4374                           ;DCmotor.c: 101: for (i = 0; i<1; i++){
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;incstack = 0
  4378  00407C  0E00               	movlw	0
  4379  00407E  0100               	movlb	0	; () banked
  4380  004080  6FCD               	movwf	(_i+1)& (0+255),b
  4381  004082  0E00               	movlw	0
  4382  004084  6FCC               	movwf	_i& (0+255),b
  4383  004086                     l4406:
  4384                           
  4385                           ; BSR set to: 0
  4386  004086  51CC               	movf	_i& (0+255),w,b
  4387  004088  11CD               	iorwf	(_i+1)& (0+255),w,b
  4388  00408A  A4D8               	btfss	status,2,c
  4389  00408C  0012               	return	
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;DCmotor.c: 102: LATDbits.LATD0 = 1;
  4393                           
  4394                           ; BSR set to: 0
  4395  00408E  808C               	bsf	3980,0,c	;volatile
  4396                           
  4397                           ;DCmotor.c: 103: TRISDbits.RD0 = 0;
  4398  004090  9095               	bcf	3989,0,c	;volatile
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;DCmotor.c: 104: _delay((unsigned long)((1400)*(40000000/4000000.0)));
  4402  004092  0E13               	movlw	19
  4403  004094  0100               	movlb	0	; () banked
  4404  004096  6FD4               	movwf	??_servoRotate_clockwise& (0+255),b
  4405  004098  0E2D               	movlw	45
  4406  00409A                     u5697:
  4407  00409A  2EE8               	decfsz	wreg,f,c
  4408  00409C  D7FE               	bra	u5697
  4409  00409E  2FD4               	decfsz	??_servoRotate_clockwise& (0+255),f,b
  4410  0040A0  D7FC               	bra	u5697
  4411                           
  4412                           ;DCmotor.c: 105: LATDbits.LATD0 = 0;
  4413  0040A2  908C               	bcf	3980,0,c	;volatile
  4414                           
  4415                           ;DCmotor.c: 106: TRISDbits.RD0 = 0;
  4416  0040A4  9095               	bcf	3989,0,c	;volatile
  4417                           
  4418                           ;DCmotor.c: 107: _delay((unsigned long)((18600)*(40000000/4000000.0)));
  4419  0040A6  0EF2               	movlw	242
  4420  0040A8  0100               	movlb	0	; () banked
  4421  0040AA  6FD4               	movwf	??_servoRotate_clockwise& (0+255),b
  4422  0040AC  0E8D               	movlw	141
  4423  0040AE                     u5707:
  4424  0040AE  2EE8               	decfsz	wreg,f,c
  4425  0040B0  D7FE               	bra	u5707
  4426  0040B2  2FD4               	decfsz	??_servoRotate_clockwise& (0+255),f,b
  4427  0040B4  D7FC               	bra	u5707
  4428  0040B6  D000               	nop2	
  4429  0040B8  0100               	movlb	0	; () banked
  4430  0040BA  4BCC               	infsnz	_i& (0+255),f,b
  4431  0040BC  2BCD               	incf	(_i+1)& (0+255),f,b
  4432  0040BE  D7E3               	goto	l4406
  4433  0040C0                     __end_of_servoRotate_clockwise:
  4434                           	opt stack 0
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           intcon	equ	0xFF2
  4440                           intcon3	equ	0xFF0
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postinc2	equ	0xFDE
  4444                           postdec2	equ	0xFDD
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _servoRotate_ConStop *****************
  4450 ;; Defined at:
  4451 ;;		line 113 in file "DCmotor.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, status,2, status,0
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;Total ram usage:        1 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    4
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_main
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text3
  4480  003F18                     __ptext3:
  4481                           	opt stack 0
  4482  003F18                     _servoRotate_ConStop:
  4483                           	opt stack 26
  4484                           
  4485                           ;DCmotor.c: 114: for(i=0;i<50;i++)
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;incstack = 0
  4489  003F18  0E00               	movlw	0
  4490  003F1A  0100               	movlb	0	; () banked
  4491  003F1C  6FCD               	movwf	(_i+1)& (0+255),b
  4492  003F1E  0E00               	movlw	0
  4493  003F20  6FCC               	movwf	_i& (0+255),b
  4494  003F22                     l4456:
  4495                           
  4496                           ; BSR set to: 0
  4497  003F22  51CD               	movf	(_i+1)& (0+255),w,b
  4498  003F24  E11D               	bnz	l560
  4499  003F26  0E32               	movlw	50
  4500  003F28  5DCC               	subwf	_i& (0+255),w,b
  4501  003F2A  B0D8               	btfsc	status,0,c
  4502  003F2C  0012               	return	
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;DCmotor.c: 115: {
  4506                           ;DCmotor.c: 116: LATDbits.LATD0 = 1;
  4507                           
  4508                           ; BSR set to: 0
  4509  003F2E  808C               	bsf	3980,0,c	;volatile
  4510                           
  4511                           ;DCmotor.c: 117: TRISDbits.RD0 = 0;
  4512  003F30  9095               	bcf	3989,0,c	;volatile
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;DCmotor.c: 118: _delay((unsigned long)((1500)*(40000000/4000000.0)));
  4516  003F32  0E14               	movlw	20
  4517  003F34  0100               	movlb	0	; () banked
  4518  003F36  6FD4               	movwf	??_servoRotate_ConStop& (0+255),b
  4519  003F38  0E79               	movlw	121
  4520  003F3A                     u5717:
  4521  003F3A  2EE8               	decfsz	wreg,f,c
  4522  003F3C  D7FE               	bra	u5717
  4523  003F3E  2FD4               	decfsz	??_servoRotate_ConStop& (0+255),f,b
  4524  003F40  D7FC               	bra	u5717
  4525  003F42  D000               	nop2	
  4526                           
  4527                           ;DCmotor.c: 119: LATDbits.LATD0 = 0;
  4528  003F44  908C               	bcf	3980,0,c	;volatile
  4529                           
  4530                           ;DCmotor.c: 120: TRISDbits.RD0 = 0;
  4531  003F46  9095               	bcf	3989,0,c	;volatile
  4532                           
  4533                           ;DCmotor.c: 121: _delay((unsigned long)((18500)*(40000000/4000000.0)));
  4534  003F48  0EF1               	movlw	241
  4535  003F4A  0100               	movlb	0	; () banked
  4536  003F4C  6FD4               	movwf	??_servoRotate_ConStop& (0+255),b
  4537  003F4E  0E41               	movlw	65
  4538  003F50                     u5727:
  4539  003F50  2EE8               	decfsz	wreg,f,c
  4540  003F52  D7FE               	bra	u5727
  4541  003F54  2FD4               	decfsz	??_servoRotate_ConStop& (0+255),f,b
  4542  003F56  D7FC               	bra	u5727
  4543  003F58  0100               	movlb	0	; () banked
  4544  003F5A  4BCC               	infsnz	_i& (0+255),f,b
  4545  003F5C  2BCD               	incf	(_i+1)& (0+255),f,b
  4546  003F5E  D7E1               	goto	l4456
  4547  003F60                     l560:
  4548                           
  4549                           ; BSR set to: 0
  4550  003F60  0012               	return		;funcret
  4551  003F62                     __end_of_servoRotate_ConStop:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           intcon	equ	0xFF2
  4558                           intcon3	equ	0xFF0
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           postinc2	equ	0xFDE
  4562                           postdec2	equ	0xFDD
  4563                           fsr2h	equ	0xFDA
  4564                           fsr2l	equ	0xFD9
  4565                           status	equ	0xFD8
  4566                           
  4567 ;; *************** function _read_IR *****************
  4568 ;; Defined at:
  4569 ;;		line 153 in file "DCmotor.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;		None
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  input           1    2[BANK0 ] unsigned char 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  2    0[BANK0 ] int 
  4576 ;; Registers used:
  4577 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4583 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;Total ram usage:        3 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    4
  4590 ;; This function calls:
  4591 ;;		Nothing
  4592 ;; This function is called by:
  4593 ;;		_main
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text4
  4598  003FAC                     __ptext4:
  4599                           	opt stack 0
  4600  003FAC                     _read_IR:
  4601                           	opt stack 26
  4602                           
  4603                           ;DCmotor.c: 155: TRISAbits.RA4 = 1;
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;incstack = 0
  4607                           ;DCmotor.c: 154: while(1){
  4608  003FAC  8892               	bsf	3986,4,c	;volatile
  4609                           
  4610                           ;DCmotor.c: 156: unsigned char input = PORTAbits.RA4;
  4611  003FAE  0E00               	movlw	0
  4612  003FB0  B880               	btfsc	3968,4,c	;volatile
  4613  003FB2  0E01               	movlw	1
  4614  003FB4  0100               	movlb	0	; () banked
  4615  003FB6  6FD6               	movwf	read_IR@input& (0+255),b
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;DCmotor.c: 161: if (array[input] == '1'){
  4619  003FB8  51D6               	movf	read_IR@input& (0+255),w,b
  4620  003FBA  0D01               	mullw	1
  4621  003FBC  0EA1               	movlw	low _array
  4622  003FBE  24F3               	addwf	prodl,w,c
  4623  003FC0  6EF6               	movwf	tblptrl,c
  4624  003FC2  0EFD               	movlw	high _array
  4625  003FC4  20F4               	addwfc	prodh,w,c
  4626  003FC6  6EF7               	movwf	tblptrh,c
  4627  003FC8                     	if	1	;There are 3 active tblptr bytes
  4628  003FC8  6AF8               	clrf	tblptru,c
  4629  003FCA  0E00               	movlw	low (__mediumconst shr (0+16))
  4630  003FCC  22F8               	addwfc	tblptru,f,c
  4631  003FCE                     	endif
  4632  003FCE  0008               	tblrd		*
  4633  003FD0  50F5               	movf	tablat,w,c
  4634  003FD2  0A31               	xorlw	49
  4635  003FD4  A4D8               	btfss	status,2,c
  4636  003FD6  D009               	goto	l569
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;DCmotor.c: 162: white_tape = 1;
  4640  003FD8  0E00               	movlw	0
  4641  003FDA  6FCB               	movwf	(_white_tape+1)& (0+255),b
  4642  003FDC  0E01               	movlw	1
  4643  003FDE  6FCA               	movwf	_white_tape& (0+255),b
  4644                           
  4645                           ;DCmotor.c: 163: return 1;
  4646  003FE0  0E00               	movlw	0
  4647  003FE2  6FD5               	movwf	(?_read_IR+1)& (0+255),b
  4648  003FE4  0E01               	movlw	1
  4649  003FE6  6FD4               	movwf	?_read_IR& (0+255),b
  4650                           
  4651                           ; BSR set to: 0
  4652  003FE8  0012               	return	
  4653  003FEA                     l569:
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;DCmotor.c: 165: else{
  4657                           ;DCmotor.c: 166: return 0;
  4658                           
  4659                           ; BSR set to: 0
  4660  003FEA  0E00               	movlw	0
  4661  003FEC  6FD5               	movwf	(?_read_IR+1)& (0+255),b
  4662  003FEE  0E00               	movlw	0
  4663  003FF0  D7FA               	goto	L3
  4664  003FF2                     __end_of_read_IR:
  4665                           	opt stack 0
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           intcon	equ	0xFF2
  4673                           intcon3	equ	0xFF0
  4674                           postinc0	equ	0xFEE
  4675                           wreg	equ	0xFE8
  4676                           postinc2	equ	0xFDE
  4677                           postdec2	equ	0xFDD
  4678                           fsr2h	equ	0xFDA
  4679                           fsr2l	equ	0xFD9
  4680                           status	equ	0xFD8
  4681                           
  4682 ;; *************** function _ramp_Rotate *****************
  4683 ;; Defined at:
  4684 ;;		line 1119 in file "main.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;		None
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;		None
  4689 ;; Return value:  Size  Location     Type
  4690 ;;                  1    wreg      void 
  4691 ;; Registers used:
  4692 ;;		wreg, status,2, status,0, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;Total ram usage:        0 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    6
  4705 ;; This function calls:
  4706 ;;		_I2C_Master_Init
  4707 ;;		_I2C_Master_Start
  4708 ;;		_I2C_Master_Stop
  4709 ;;		_I2C_Master_Write
  4710 ;; This function is called by:
  4711 ;;		_main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text5
  4716  003D8A                     __ptext5:
  4717                           	opt stack 0
  4718  003D8A                     _ramp_Rotate:
  4719                           	opt stack 24
  4720                           
  4721                           ;main.c: 1122: I2C_Master_Init(100000);
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;incstack = 0
  4725  003D8A  0EA0               	movlw	160
  4726  003D8C  0100               	movlb	0	; () banked
  4727  003D8E  6FE1               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  4728  003D90  0E86               	movlw	134
  4729  003D92  6FE2               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  4730  003D94  0E01               	movlw	1
  4731  003D96  6FE3               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  4732  003D98  0E00               	movlw	0
  4733  003D9A  6FE4               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  4734  003D9C  EC14  F01E         	call	_I2C_Master_Init	;wreg free
  4735                           
  4736                           ;main.c: 1123: I2C_Master_Start();
  4737  003DA0  EC1C  F022         	call	_I2C_Master_Start	;wreg free
  4738                           
  4739                           ;main.c: 1125: I2C_Master_Write(0b00010000);
  4740  003DA4  0E00               	movlw	0
  4741  003DA6  0100               	movlb	0	; () banked
  4742  003DA8  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4743  003DAA  0E10               	movlw	16
  4744  003DAC  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4745  003DAE  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  4746                           
  4747                           ;main.c: 1126: I2C_Master_Stop();
  4748  003DB2  EC18  F022         	call	_I2C_Master_Stop	;wreg free
  4749                           
  4750                           ;main.c: 1129: I2C_Master_Start();
  4751  003DB6  EC1C  F022         	call	_I2C_Master_Start	;wreg free
  4752                           
  4753                           ;main.c: 1130: I2C_Master_Write(0b00010000);
  4754  003DBA  0E00               	movlw	0
  4755  003DBC  0100               	movlb	0	; () banked
  4756  003DBE  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4757  003DC0  0E10               	movlw	16
  4758  003DC2  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4759  003DC4  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  4760                           
  4761                           ;main.c: 1131: I2C_Master_Write('2');
  4762  003DC8  0E00               	movlw	0
  4763  003DCA  0100               	movlb	0	; () banked
  4764  003DCC  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  4765  003DCE  0E32               	movlw	50
  4766  003DD0  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  4767  003DD2  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  4768                           
  4769                           ;main.c: 1132: I2C_Master_Stop();
  4770  003DD6  EC18  F022         	call	_I2C_Master_Stop	;wreg free
  4771  003DDA  0012               	return		;funcret
  4772  003DDC                     __end_of_ramp_Rotate:
  4773                           	opt stack 0
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           intcon3	equ	0xFF0
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790 ;; *************** function _motorStop_3 *****************
  4791 ;; Defined at:
  4792 ;;		line 85 in file "DCmotor.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;		None
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;Total ram usage:        2 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    4
  4813 ;; This function calls:
  4814 ;;		Nothing
  4815 ;; This function is called by:
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text6
  4821  004280                     __ptext6:
  4822                           	opt stack 0
  4823  004280                     _motorStop_3:
  4824                           	opt stack 26
  4825                           
  4826                           ;DCmotor.c: 86: LATCbits.LATC3 = 0;
  4827                           
  4828                           ;incstack = 0
  4829  004280  968B               	bcf	3979,3,c	;volatile
  4830                           
  4831                           ;DCmotor.c: 87: TRISCbits.RC3 = 0;
  4832  004282  9694               	bcf	3988,3,c	;volatile
  4833                           
  4834                           ;DCmotor.c: 89: _delay((unsigned long)((200)*(40000000/4000.0)));
  4835  004284  0E0B               	movlw	11
  4836  004286  0100               	movlb	0	; () banked
  4837  004288  6FD5               	movwf	(??_motorStop_3+1)& (0+255),b
  4838  00428A  0E26               	movlw	38
  4839  00428C  6FD4               	movwf	??_motorStop_3& (0+255),b
  4840  00428E  0E5D               	movlw	93
  4841  004290                     u5737:
  4842  004290  2EE8               	decfsz	wreg,f,c
  4843  004292  D7FE               	bra	u5737
  4844  004294  2FD4               	decfsz	??_motorStop_3& (0+255),f,b
  4845  004296  D7FC               	bra	u5737
  4846  004298  2FD5               	decfsz	(??_motorStop_3+1)& (0+255),f,b
  4847  00429A  D7FA               	bra	u5737
  4848  00429C  D000               	nop2	
  4849  00429E  0012               	return		;funcret
  4850  0042A0                     __end_of_motorStop_3:
  4851                           	opt stack 0
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           intcon3	equ	0xFF0
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function _motorStop_2 *****************
  4869 ;; Defined at:
  4870 ;;		line 67 in file "DCmotor.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;Total ram usage:        2 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    4
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_main
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text7
  4899  0042A0                     __ptext7:
  4900                           	opt stack 0
  4901  0042A0                     _motorStop_2:
  4902                           	opt stack 26
  4903                           
  4904                           ;DCmotor.c: 68: LATCbits.LATC2 = 0;
  4905                           
  4906                           ;incstack = 0
  4907  0042A0  948B               	bcf	3979,2,c	;volatile
  4908                           
  4909                           ;DCmotor.c: 69: TRISCbits.RC2 = 0;
  4910  0042A2  9494               	bcf	3988,2,c	;volatile
  4911                           
  4912                           ;DCmotor.c: 71: _delay((unsigned long)((200)*(40000000/4000.0)));
  4913  0042A4  0E0B               	movlw	11
  4914  0042A6  0100               	movlb	0	; () banked
  4915  0042A8  6FD5               	movwf	(??_motorStop_2+1)& (0+255),b
  4916  0042AA  0E26               	movlw	38
  4917  0042AC  6FD4               	movwf	??_motorStop_2& (0+255),b
  4918  0042AE  0E5D               	movlw	93
  4919  0042B0                     u5747:
  4920  0042B0  2EE8               	decfsz	wreg,f,c
  4921  0042B2  D7FE               	bra	u5747
  4922  0042B4  2FD4               	decfsz	??_motorStop_2& (0+255),f,b
  4923  0042B6  D7FC               	bra	u5747
  4924  0042B8  2FD5               	decfsz	(??_motorStop_2+1)& (0+255),f,b
  4925  0042BA  D7FA               	bra	u5747
  4926  0042BC  D000               	nop2	
  4927  0042BE  0012               	return		;funcret
  4928  0042C0                     __end_of_motorStop_2:
  4929                           	opt stack 0
  4930                           tblptru	equ	0xFF8
  4931                           tblptrh	equ	0xFF7
  4932                           tblptrl	equ	0xFF6
  4933                           tablat	equ	0xFF5
  4934                           prodh	equ	0xFF4
  4935                           prodl	equ	0xFF3
  4936                           intcon	equ	0xFF2
  4937                           intcon3	equ	0xFF0
  4938                           postinc0	equ	0xFEE
  4939                           wreg	equ	0xFE8
  4940                           postinc2	equ	0xFDE
  4941                           postdec2	equ	0xFDD
  4942                           fsr2h	equ	0xFDA
  4943                           fsr2l	equ	0xFD9
  4944                           status	equ	0xFD8
  4945                           
  4946 ;; *************** function _motorStop_1 *****************
  4947 ;; Defined at:
  4948 ;;		line 50 in file "DCmotor.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      void 
  4955 ;; Registers used:
  4956 ;;		wreg
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;Total ram usage:        2 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    4
  4969 ;; This function calls:
  4970 ;;		Nothing
  4971 ;; This function is called by:
  4972 ;;		_main
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text8
  4977  0042C0                     __ptext8:
  4978                           	opt stack 0
  4979  0042C0                     _motorStop_1:
  4980                           	opt stack 26
  4981                           
  4982                           ;DCmotor.c: 51: LATCbits.LATC1 = 0;
  4983                           
  4984                           ;incstack = 0
  4985  0042C0  928B               	bcf	3979,1,c	;volatile
  4986                           
  4987                           ;DCmotor.c: 52: TRISCbits.RC1 = 0;
  4988  0042C2  9294               	bcf	3988,1,c	;volatile
  4989                           
  4990                           ;DCmotor.c: 54: _delay((unsigned long)((200)*(40000000/4000.0)));
  4991  0042C4  0E0B               	movlw	11
  4992  0042C6  0100               	movlb	0	; () banked
  4993  0042C8  6FD5               	movwf	(??_motorStop_1+1)& (0+255),b
  4994  0042CA  0E26               	movlw	38
  4995  0042CC  6FD4               	movwf	??_motorStop_1& (0+255),b
  4996  0042CE  0E5D               	movlw	93
  4997  0042D0                     u5757:
  4998  0042D0  2EE8               	decfsz	wreg,f,c
  4999  0042D2  D7FE               	bra	u5757
  5000  0042D4  2FD4               	decfsz	??_motorStop_1& (0+255),f,b
  5001  0042D6  D7FC               	bra	u5757
  5002  0042D8  2FD5               	decfsz	(??_motorStop_1+1)& (0+255),f,b
  5003  0042DA  D7FA               	bra	u5757
  5004  0042DC  D000               	nop2	
  5005  0042DE  0012               	return		;funcret
  5006  0042E0                     __end_of_motorStop_1:
  5007                           	opt stack 0
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           intcon	equ	0xFF2
  5015                           intcon3	equ	0xFF0
  5016                           postinc0	equ	0xFEE
  5017                           wreg	equ	0xFE8
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function _motorStop_0 *****************
  5025 ;; Defined at:
  5026 ;;		line 32 in file "DCmotor.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      void 
  5033 ;; Registers used:
  5034 ;;		wreg
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;Total ram usage:        2 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    4
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_main
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text9
  5055  0042E0                     __ptext9:
  5056                           	opt stack 0
  5057  0042E0                     _motorStop_0:
  5058                           	opt stack 26
  5059                           
  5060                           ;DCmotor.c: 33: LATCbits.LATC0 = 0;
  5061                           
  5062                           ;incstack = 0
  5063  0042E0  908B               	bcf	3979,0,c	;volatile
  5064                           
  5065                           ;DCmotor.c: 34: TRISCbits.RC0 = 0;
  5066  0042E2  9094               	bcf	3988,0,c	;volatile
  5067                           
  5068                           ;DCmotor.c: 36: _delay((unsigned long)((200)*(40000000/4000.0)));
  5069  0042E4  0E0B               	movlw	11
  5070  0042E6  0100               	movlb	0	; () banked
  5071  0042E8  6FD5               	movwf	(??_motorStop_0+1)& (0+255),b
  5072  0042EA  0E26               	movlw	38
  5073  0042EC  6FD4               	movwf	??_motorStop_0& (0+255),b
  5074  0042EE  0E5D               	movlw	93
  5075  0042F0                     u5767:
  5076  0042F0  2EE8               	decfsz	wreg,f,c
  5077  0042F2  D7FE               	bra	u5767
  5078  0042F4  2FD4               	decfsz	??_motorStop_0& (0+255),f,b
  5079  0042F6  D7FC               	bra	u5767
  5080  0042F8  2FD5               	decfsz	(??_motorStop_0+1)& (0+255),f,b
  5081  0042FA  D7FA               	bra	u5767
  5082  0042FC  D000               	nop2	
  5083  0042FE  0012               	return		;funcret
  5084  004300                     __end_of_motorStop_0:
  5085                           	opt stack 0
  5086                           tblptru	equ	0xFF8
  5087                           tblptrh	equ	0xFF7
  5088                           tblptrl	equ	0xFF6
  5089                           tablat	equ	0xFF5
  5090                           prodh	equ	0xFF4
  5091                           prodl	equ	0xFF3
  5092                           intcon	equ	0xFF2
  5093                           intcon3	equ	0xFF0
  5094                           postinc0	equ	0xFEE
  5095                           wreg	equ	0xFE8
  5096                           postinc2	equ	0xFDE
  5097                           postdec2	equ	0xFDD
  5098                           fsr2h	equ	0xFDA
  5099                           fsr2l	equ	0xFD9
  5100                           status	equ	0xFD8
  5101                           
  5102 ;; *************** function _motorStart_3 *****************
  5103 ;; Defined at:
  5104 ;;		line 76 in file "DCmotor.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      void 
  5111 ;; Registers used:
  5112 ;;		wreg
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;Total ram usage:        2 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    4
  5125 ;; This function calls:
  5126 ;;		Nothing
  5127 ;; This function is called by:
  5128 ;;		_main
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           	psect	text10
  5133  004300                     __ptext10:
  5134                           	opt stack 0
  5135  004300                     _motorStart_3:
  5136                           	opt stack 26
  5137                           
  5138                           ;DCmotor.c: 78: LATCbits.LATC3 = 1;
  5139                           
  5140                           ;incstack = 0
  5141  004300  868B               	bsf	3979,3,c	;volatile
  5142                           
  5143                           ;DCmotor.c: 79: TRISCbits.RC3 = 0;
  5144  004302  9694               	bcf	3988,3,c	;volatile
  5145                           
  5146                           ;DCmotor.c: 81: _delay((unsigned long)((200)*(40000000/4000.0)));
  5147  004304  0E0B               	movlw	11
  5148  004306  0100               	movlb	0	; () banked
  5149  004308  6FD5               	movwf	(??_motorStart_3+1)& (0+255),b
  5150  00430A  0E26               	movlw	38
  5151  00430C  6FD4               	movwf	??_motorStart_3& (0+255),b
  5152  00430E  0E5D               	movlw	93
  5153  004310                     u5777:
  5154  004310  2EE8               	decfsz	wreg,f,c
  5155  004312  D7FE               	bra	u5777
  5156  004314  2FD4               	decfsz	??_motorStart_3& (0+255),f,b
  5157  004316  D7FC               	bra	u5777
  5158  004318  2FD5               	decfsz	(??_motorStart_3+1)& (0+255),f,b
  5159  00431A  D7FA               	bra	u5777
  5160  00431C  D000               	nop2	
  5161  00431E  0012               	return		;funcret
  5162  004320                     __end_of_motorStart_3:
  5163                           	opt stack 0
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           intcon	equ	0xFF2
  5171                           intcon3	equ	0xFF0
  5172                           postinc0	equ	0xFEE
  5173                           wreg	equ	0xFE8
  5174                           postinc2	equ	0xFDE
  5175                           postdec2	equ	0xFDD
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180 ;; *************** function _motorStart_2 *****************
  5181 ;; Defined at:
  5182 ;;		line 58 in file "DCmotor.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;		None
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;		None
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  1    wreg      void 
  5189 ;; Registers used:
  5190 ;;		wreg
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;Total ram usage:        2 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    4
  5203 ;; This function calls:
  5204 ;;		Nothing
  5205 ;; This function is called by:
  5206 ;;		_main
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text11
  5211  004320                     __ptext11:
  5212                           	opt stack 0
  5213  004320                     _motorStart_2:
  5214                           	opt stack 26
  5215                           
  5216                           ;DCmotor.c: 60: LATCbits.LATC2 = 1;
  5217                           
  5218                           ;incstack = 0
  5219  004320  848B               	bsf	3979,2,c	;volatile
  5220                           
  5221                           ;DCmotor.c: 61: TRISCbits.RC2 = 0;
  5222  004322  9494               	bcf	3988,2,c	;volatile
  5223                           
  5224                           ;DCmotor.c: 63: _delay((unsigned long)((200)*(40000000/4000.0)));
  5225  004324  0E0B               	movlw	11
  5226  004326  0100               	movlb	0	; () banked
  5227  004328  6FD5               	movwf	(??_motorStart_2+1)& (0+255),b
  5228  00432A  0E26               	movlw	38
  5229  00432C  6FD4               	movwf	??_motorStart_2& (0+255),b
  5230  00432E  0E5D               	movlw	93
  5231  004330                     u5787:
  5232  004330  2EE8               	decfsz	wreg,f,c
  5233  004332  D7FE               	bra	u5787
  5234  004334  2FD4               	decfsz	??_motorStart_2& (0+255),f,b
  5235  004336  D7FC               	bra	u5787
  5236  004338  2FD5               	decfsz	(??_motorStart_2+1)& (0+255),f,b
  5237  00433A  D7FA               	bra	u5787
  5238  00433C  D000               	nop2	
  5239  00433E  0012               	return		;funcret
  5240  004340                     __end_of_motorStart_2:
  5241                           	opt stack 0
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           intcon3	equ	0xFF0
  5250                           postinc0	equ	0xFEE
  5251                           wreg	equ	0xFE8
  5252                           postinc2	equ	0xFDE
  5253                           postdec2	equ	0xFDD
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258 ;; *************** function _motorStart_1 *****************
  5259 ;; Defined at:
  5260 ;;		line 41 in file "DCmotor.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;		None
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;		None
  5265 ;; Return value:  Size  Location     Type
  5266 ;;                  1    wreg      void 
  5267 ;; Registers used:
  5268 ;;		wreg
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;Total ram usage:        2 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    4
  5281 ;; This function calls:
  5282 ;;		Nothing
  5283 ;; This function is called by:
  5284 ;;		_main
  5285 ;; This function uses a non-reentrant model
  5286 ;;
  5287                           
  5288                           	psect	text12
  5289  004340                     __ptext12:
  5290                           	opt stack 0
  5291  004340                     _motorStart_1:
  5292                           	opt stack 26
  5293                           
  5294                           ;DCmotor.c: 43: LATCbits.LATC1 = 1;
  5295                           
  5296                           ;incstack = 0
  5297  004340  828B               	bsf	3979,1,c	;volatile
  5298                           
  5299                           ;DCmotor.c: 44: TRISCbits.RC1 = 0;
  5300  004342  9294               	bcf	3988,1,c	;volatile
  5301                           
  5302                           ;DCmotor.c: 46: _delay((unsigned long)((200)*(40000000/4000.0)));
  5303  004344  0E0B               	movlw	11
  5304  004346  0100               	movlb	0	; () banked
  5305  004348  6FD5               	movwf	(??_motorStart_1+1)& (0+255),b
  5306  00434A  0E26               	movlw	38
  5307  00434C  6FD4               	movwf	??_motorStart_1& (0+255),b
  5308  00434E  0E5D               	movlw	93
  5309  004350                     u5797:
  5310  004350  2EE8               	decfsz	wreg,f,c
  5311  004352  D7FE               	bra	u5797
  5312  004354  2FD4               	decfsz	??_motorStart_1& (0+255),f,b
  5313  004356  D7FC               	bra	u5797
  5314  004358  2FD5               	decfsz	(??_motorStart_1+1)& (0+255),f,b
  5315  00435A  D7FA               	bra	u5797
  5316  00435C  D000               	nop2	
  5317  00435E  0012               	return		;funcret
  5318  004360                     __end_of_motorStart_1:
  5319                           	opt stack 0
  5320                           tblptru	equ	0xFF8
  5321                           tblptrh	equ	0xFF7
  5322                           tblptrl	equ	0xFF6
  5323                           tablat	equ	0xFF5
  5324                           prodh	equ	0xFF4
  5325                           prodl	equ	0xFF3
  5326                           intcon	equ	0xFF2
  5327                           intcon3	equ	0xFF0
  5328                           postinc0	equ	0xFEE
  5329                           wreg	equ	0xFE8
  5330                           postinc2	equ	0xFDE
  5331                           postdec2	equ	0xFDD
  5332                           fsr2h	equ	0xFDA
  5333                           fsr2l	equ	0xFD9
  5334                           status	equ	0xFD8
  5335                           
  5336 ;; *************** function _motorStart_0 *****************
  5337 ;; Defined at:
  5338 ;;		line 23 in file "DCmotor.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;		None
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;		None
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;Total ram usage:        2 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    4
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_main
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text13
  5367  004360                     __ptext13:
  5368                           	opt stack 0
  5369  004360                     _motorStart_0:
  5370                           	opt stack 26
  5371                           
  5372                           ;DCmotor.c: 25: LATCbits.LATC0 = 1;
  5373                           
  5374                           ;incstack = 0
  5375  004360  808B               	bsf	3979,0,c	;volatile
  5376                           
  5377                           ;DCmotor.c: 26: TRISCbits.RC0 = 0;
  5378  004362  9094               	bcf	3988,0,c	;volatile
  5379                           
  5380                           ;DCmotor.c: 28: _delay((unsigned long)((200)*(40000000/4000.0)));
  5381  004364  0E0B               	movlw	11
  5382  004366  0100               	movlb	0	; () banked
  5383  004368  6FD5               	movwf	(??_motorStart_0+1)& (0+255),b
  5384  00436A  0E26               	movlw	38
  5385  00436C  6FD4               	movwf	??_motorStart_0& (0+255),b
  5386  00436E  0E5D               	movlw	93
  5387  004370                     u5807:
  5388  004370  2EE8               	decfsz	wreg,f,c
  5389  004372  D7FE               	bra	u5807
  5390  004374  2FD4               	decfsz	??_motorStart_0& (0+255),f,b
  5391  004376  D7FC               	bra	u5807
  5392  004378  2FD5               	decfsz	(??_motorStart_0+1)& (0+255),f,b
  5393  00437A  D7FA               	bra	u5807
  5394  00437C  D000               	nop2	
  5395  00437E  0012               	return		;funcret
  5396  004380                     __end_of_motorStart_0:
  5397                           	opt stack 0
  5398                           tblptru	equ	0xFF8
  5399                           tblptrh	equ	0xFF7
  5400                           tblptrl	equ	0xFF6
  5401                           tablat	equ	0xFF5
  5402                           prodh	equ	0xFF4
  5403                           prodl	equ	0xFF3
  5404                           intcon	equ	0xFF2
  5405                           intcon3	equ	0xFF0
  5406                           postinc0	equ	0xFEE
  5407                           wreg	equ	0xFE8
  5408                           postinc2	equ	0xFDE
  5409                           postdec2	equ	0xFDD
  5410                           fsr2h	equ	0xFDA
  5411                           fsr2l	equ	0xFD9
  5412                           status	equ	0xFD8
  5413                           
  5414 ;; *************** function _initialize *****************
  5415 ;; Defined at:
  5416 ;;		line 1024 in file "main.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;		None
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;		None
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  1    wreg      void 
  5423 ;; Registers used:
  5424 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;Total ram usage:        0 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    4
  5437 ;; This function calls:
  5438 ;;		Nothing
  5439 ;; This function is called by:
  5440 ;;		_main
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text14
  5445  00338C                     __ptext14:
  5446                           	opt stack 0
  5447  00338C                     _initialize:
  5448                           	opt stack 26
  5449                           
  5450                           ;main.c: 1025: white_tape = 0;
  5451                           
  5452                           ;incstack = 0
  5453  00338C  0E00               	movlw	0
  5454  00338E  0100               	movlb	0	; () banked
  5455  003390  6FCB               	movwf	(_white_tape+1)& (0+255),b
  5456  003392  0E00               	movlw	0
  5457  003394  6FCA               	movwf	_white_tape& (0+255),b
  5458                           
  5459                           ;main.c: 1026: mode = 0;
  5460  003396  0E00               	movlw	0
  5461  003398  6FC9               	movwf	(_mode+1)& (0+255),b
  5462  00339A  0E00               	movlw	0
  5463  00339C  6FC8               	movwf	_mode& (0+255),b
  5464                           
  5465                           ;main.c: 1027: state = 0;
  5466  00339E  0E00               	movlw	0
  5467  0033A0  6FBD               	movwf	(_state+1)& (0+255),b
  5468  0033A2  0E00               	movlw	0
  5469  0033A4  6FBC               	movwf	_state& (0+255),b
  5470                           
  5471                           ;main.c: 1028: assembly_step = 0;
  5472  0033A6  0E00               	movlw	0
  5473  0033A8  6FBB               	movwf	(_assembly_step+1)& (0+255),b
  5474  0033AA  0E00               	movlw	0
  5475  0033AC  6FBA               	movwf	_assembly_step& (0+255),b
  5476                           
  5477                           ;main.c: 1029: counter_step = 0;
  5478  0033AE  0E00               	movlw	0
  5479  0033B0  6E6E               	movwf	_counter_step+1,c
  5480  0033B2  0E00               	movlw	0
  5481  0033B4  6E6D               	movwf	_counter_step,c
  5482                           
  5483                           ;main.c: 1031: valid = 0;
  5484  0033B6  0E00               	movlw	0
  5485  0033B8  6E6C               	movwf	_valid+1,c
  5486  0033BA  0E00               	movlw	0
  5487  0033BC  6E6B               	movwf	_valid,c
  5488                           
  5489                           ;main.c: 1032: number = 0;
  5490  0033BE  0E00               	movlw	0
  5491  0033C0  6E7E               	movwf	_number+1,c
  5492  0033C2  0E00               	movlw	0
  5493  0033C4  6E7D               	movwf	_number,c
  5494                           
  5495                           ;main.c: 1033: total_number=0;
  5496  0033C6  0E00               	movlw	0
  5497  0033C8  6E6A               	movwf	_total_number+1,c
  5498  0033CA  0E00               	movlw	0
  5499  0033CC  6E69               	movwf	_total_number,c
  5500                           
  5501                           ;main.c: 1035: B=0,N=0,S=0,W=0;
  5502  0033CE  0E00               	movlw	0
  5503  0033D0  6E66               	movwf	_B+1,c
  5504  0033D2  0E00               	movlw	0
  5505  0033D4  6E65               	movwf	_B,c
  5506  0033D6  0E00               	movlw	0
  5507  0033D8  6E64               	movwf	_N+1,c
  5508  0033DA  0E00               	movlw	0
  5509  0033DC  6E63               	movwf	_N,c
  5510  0033DE  0E00               	movlw	0
  5511  0033E0  6E62               	movwf	_S+1,c
  5512  0033E2  0E00               	movlw	0
  5513  0033E4  6E61               	movwf	_S,c
  5514  0033E6  0E00               	movlw	0
  5515  0033E8  6E60               	movwf	_W+1,c
  5516  0033EA  0E00               	movlw	0
  5517  0033EC  6E5F               	movwf	_W,c
  5518                           
  5519                           ;main.c: 1037: B_count= 0;
  5520  0033EE  0E00               	movlw	0
  5521  0033F0  6FB9               	movwf	(_B_count+1)& (0+255),b
  5522  0033F2  0E00               	movlw	0
  5523  0033F4  6FB8               	movwf	_B_count& (0+255),b
  5524                           
  5525                           ;main.c: 1038: S_count= 0;
  5526  0033F6  0E00               	movlw	0
  5527  0033F8  6FB7               	movwf	(_S_count+1)& (0+255),b
  5528  0033FA  0E00               	movlw	0
  5529  0033FC  6FB6               	movwf	_S_count& (0+255),b
  5530                           
  5531                           ;main.c: 1039: N_count= 0;
  5532  0033FE  0E00               	movlw	0
  5533  003400  6FB5               	movwf	(_N_count+1)& (0+255),b
  5534  003402  0E00               	movlw	0
  5535  003404  6FB4               	movwf	_N_count& (0+255),b
  5536                           
  5537                           ;main.c: 1040: W_count= 0;
  5538  003406  0E00               	movlw	0
  5539  003408  6FB3               	movwf	(_W_count+1)& (0+255),b
  5540  00340A  0E00               	movlw	0
  5541  00340C  6FB2               	movwf	_W_count& (0+255),b
  5542                           
  5543                           ;main.c: 1043: initial_time = 0;
  5544  00340E  0E00               	movlw	0
  5545  003410  6F99               	movwf	(_initial_time+1)& (0+255),b
  5546  003412  0E00               	movlw	0
  5547  003414  6F98               	movwf	_initial_time& (0+255),b
  5548                           
  5549                           ;main.c: 1044: final_time = 0;
  5550  003416  0E00               	movlw	0
  5551  003418  6F91               	movwf	(_final_time+1)& (0+255),b
  5552  00341A  0E00               	movlw	0
  5553  00341C  6F90               	movwf	_final_time& (0+255),b
  5554                           
  5555                           ;main.c: 1046: for (i=0;i<8;i++){
  5556  00341E  0E00               	movlw	0
  5557  003420  6FCD               	movwf	(_i+1)& (0+255),b
  5558  003422  0E00               	movlw	0
  5559  003424  6FCC               	movwf	_i& (0+255),b
  5560  003426                     l4540:
  5561                           
  5562                           ; BSR set to: 0
  5563  003426  51CD               	movf	(_i+1)& (0+255),w,b
  5564  003428  E155               	bnz	l470
  5565  00342A  0E08               	movlw	8
  5566  00342C  5DCC               	subwf	_i& (0+255),w,b
  5567  00342E  B0D8               	btfsc	status,0,c
  5568  003430  0012               	return	
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;main.c: 1047: compartment_array[i] = 0;
  5572                           
  5573                           ; BSR set to: 0
  5574                           
  5575                           ; BSR set to: 0
  5576  003432  90D8               	bcf	status,0,c
  5577  003434  35CC               	rlcf	_i& (0+255),w,b
  5578  003436  6ED9               	movwf	fsr2l,c
  5579  003438  35CD               	rlcf	(_i+1)& (0+255),w,b
  5580  00343A  6EDA               	movwf	fsr2h,c
  5581  00343C  0E80               	movlw	low _compartment_array
  5582  00343E  26D9               	addwf	fsr2l,f,c
  5583  003440  0E00               	movlw	high _compartment_array
  5584  003442  22DA               	addwfc	fsr2h,f,c
  5585  003444  0E00               	movlw	0
  5586  003446  6EDE               	movwf	postinc2,c
  5587  003448  0E00               	movlw	0
  5588  00344A  6EDD               	movwf	postdec2,c
  5589                           
  5590                           ;main.c: 1048: compartment_number[i] = 0;
  5591  00344C  90D8               	bcf	status,0,c
  5592  00344E  35CC               	rlcf	_i& (0+255),w,b
  5593  003450  6ED9               	movwf	fsr2l,c
  5594  003452  35CD               	rlcf	(_i+1)& (0+255),w,b
  5595  003454  6EDA               	movwf	fsr2h,c
  5596  003456  0E42               	movlw	low _compartment_number
  5597  003458  26D9               	addwf	fsr2l,f,c
  5598  00345A  0E00               	movlw	high _compartment_number
  5599  00345C  22DA               	addwfc	fsr2h,f,c
  5600  00345E  0E00               	movlw	0
  5601  003460  6EDE               	movwf	postinc2,c
  5602  003462  0E00               	movlw	0
  5603  003464  6EDD               	movwf	postdec2,c
  5604                           
  5605                           ;main.c: 1049: B_array[i] = 0;
  5606  003466  90D8               	bcf	status,0,c
  5607  003468  35CC               	rlcf	_i& (0+255),w,b
  5608  00346A  6ED9               	movwf	fsr2l,c
  5609  00346C  35CD               	rlcf	(_i+1)& (0+255),w,b
  5610  00346E  6EDA               	movwf	fsr2h,c
  5611  003470  0E30               	movlw	low _B_array
  5612  003472  26D9               	addwf	fsr2l,f,c
  5613  003474  0E01               	movlw	high _B_array
  5614  003476  22DA               	addwfc	fsr2h,f,c
  5615  003478  0E00               	movlw	0
  5616  00347A  6EDE               	movwf	postinc2,c
  5617  00347C  0E00               	movlw	0
  5618  00347E  6EDD               	movwf	postdec2,c
  5619                           
  5620                           ;main.c: 1050: N_array[i] = 0;
  5621  003480  90D8               	bcf	status,0,c
  5622  003482  35CC               	rlcf	_i& (0+255),w,b
  5623  003484  6ED9               	movwf	fsr2l,c
  5624  003486  35CD               	rlcf	(_i+1)& (0+255),w,b
  5625  003488  6EDA               	movwf	fsr2h,c
  5626  00348A  0E10               	movlw	low _N_array
  5627  00348C  26D9               	addwf	fsr2l,f,c
  5628  00348E  0E01               	movlw	high _N_array
  5629  003490  22DA               	addwfc	fsr2h,f,c
  5630  003492  0E00               	movlw	0
  5631  003494  6EDE               	movwf	postinc2,c
  5632  003496  0E00               	movlw	0
  5633  003498  6EDD               	movwf	postdec2,c
  5634                           
  5635                           ;main.c: 1051: S_array[i] = 0;
  5636  00349A  90D8               	bcf	status,0,c
  5637  00349C  35CC               	rlcf	_i& (0+255),w,b
  5638  00349E  6ED9               	movwf	fsr2l,c
  5639  0034A0  35CD               	rlcf	(_i+1)& (0+255),w,b
  5640  0034A2  6EDA               	movwf	fsr2h,c
  5641  0034A4  0E20               	movlw	low _S_array
  5642  0034A6  26D9               	addwf	fsr2l,f,c
  5643  0034A8  0E01               	movlw	high _S_array
  5644  0034AA  22DA               	addwfc	fsr2h,f,c
  5645  0034AC  0E00               	movlw	0
  5646  0034AE  6EDE               	movwf	postinc2,c
  5647  0034B0  0E00               	movlw	0
  5648  0034B2  6EDD               	movwf	postdec2,c
  5649                           
  5650                           ;main.c: 1052: W_array[i] = 0;
  5651  0034B4  90D8               	bcf	status,0,c
  5652  0034B6  35CC               	rlcf	_i& (0+255),w,b
  5653  0034B8  6ED9               	movwf	fsr2l,c
  5654  0034BA  35CD               	rlcf	(_i+1)& (0+255),w,b
  5655  0034BC  6EDA               	movwf	fsr2h,c
  5656  0034BE  0E00               	movlw	low _W_array
  5657  0034C0  26D9               	addwf	fsr2l,f,c
  5658  0034C2  0E01               	movlw	high _W_array
  5659  0034C4  22DA               	addwfc	fsr2h,f,c
  5660  0034C6  0E00               	movlw	0
  5661  0034C8  6EDE               	movwf	postinc2,c
  5662  0034CA  0E00               	movlw	0
  5663  0034CC  6EDD               	movwf	postdec2,c
  5664                           
  5665                           ; BSR set to: 0
  5666  0034CE  4BCC               	infsnz	_i& (0+255),f,b
  5667  0034D0  2BCD               	incf	(_i+1)& (0+255),f,b
  5668  0034D2  D7A9               	goto	l4540
  5669  0034D4                     l470:
  5670                           
  5671                           ; BSR set to: 0
  5672  0034D4  0012               	return		;funcret
  5673  0034D6                     __end_of_initialize:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           intcon	equ	0xFF2
  5682                           intcon3	equ	0xFF0
  5683                           postinc0	equ	0xFEE
  5684                           wreg	equ	0xFE8
  5685                           postinc2	equ	0xFDE
  5686                           postdec2	equ	0xFDD
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _initRamp *****************
  5692 ;; Defined at:
  5693 ;;		line 1099 in file "main.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;		None
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;		None
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;Total ram usage:        0 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    6
  5714 ;; This function calls:
  5715 ;;		_I2C_Master_Init
  5716 ;;		_I2C_Master_Start
  5717 ;;		_I2C_Master_Stop
  5718 ;;		_I2C_Master_Write
  5719 ;; This function is called by:
  5720 ;;		_main
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text15
  5725  003DDC                     __ptext15:
  5726                           	opt stack 0
  5727  003DDC                     _initRamp:
  5728                           	opt stack 24
  5729                           
  5730                           ;main.c: 1101: I2C_Master_Init(100000);
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;incstack = 0
  5734  003DDC  0EA0               	movlw	160
  5735  003DDE  0100               	movlb	0	; () banked
  5736  003DE0  6FE1               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  5737  003DE2  0E86               	movlw	134
  5738  003DE4  6FE2               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  5739  003DE6  0E01               	movlw	1
  5740  003DE8  6FE3               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  5741  003DEA  0E00               	movlw	0
  5742  003DEC  6FE4               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  5743  003DEE  EC14  F01E         	call	_I2C_Master_Init	;wreg free
  5744                           
  5745                           ;main.c: 1102: I2C_Master_Start();
  5746  003DF2  EC1C  F022         	call	_I2C_Master_Start	;wreg free
  5747                           
  5748                           ;main.c: 1109: I2C_Master_Write(0b00010000);
  5749  003DF6  0E00               	movlw	0
  5750  003DF8  0100               	movlb	0	; () banked
  5751  003DFA  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  5752  003DFC  0E10               	movlw	16
  5753  003DFE  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  5754  003E00  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  5755                           
  5756                           ;main.c: 1110: I2C_Master_Stop();
  5757  003E04  EC18  F022         	call	_I2C_Master_Stop	;wreg free
  5758                           
  5759                           ;main.c: 1112: I2C_Master_Start();
  5760  003E08  EC1C  F022         	call	_I2C_Master_Start	;wreg free
  5761                           
  5762                           ;main.c: 1113: I2C_Master_Write(0b00010000);
  5763  003E0C  0E00               	movlw	0
  5764  003E0E  0100               	movlb	0	; () banked
  5765  003E10  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  5766  003E12  0E10               	movlw	16
  5767  003E14  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  5768  003E16  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  5769                           
  5770                           ;main.c: 1114: I2C_Master_Write('1');
  5771  003E1A  0E00               	movlw	0
  5772  003E1C  0100               	movlb	0	; () banked
  5773  003E1E  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  5774  003E20  0E31               	movlw	49
  5775  003E22  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  5776  003E24  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  5777                           
  5778                           ;main.c: 1115: I2C_Master_Stop();
  5779  003E28  EC18  F022         	call	_I2C_Master_Stop	;wreg free
  5780  003E2C  0012               	return		;funcret
  5781  003E2E                     __end_of_initRamp:
  5782                           	opt stack 0
  5783                           tblptru	equ	0xFF8
  5784                           tblptrh	equ	0xFF7
  5785                           tblptrl	equ	0xFF6
  5786                           tablat	equ	0xFF5
  5787                           prodh	equ	0xFF4
  5788                           prodl	equ	0xFF3
  5789                           intcon	equ	0xFF2
  5790                           intcon3	equ	0xFF0
  5791                           postinc0	equ	0xFEE
  5792                           wreg	equ	0xFE8
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function _I2C_Master_Init *****************
  5800 ;; Defined at:
  5801 ;;		line 14 in file "I2C.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;		None
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  1    wreg      void 
  5808 ;; Registers used:
  5809 ;;		wreg, status,2, status,0, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5815 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;Total ram usage:        8 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    5
  5822 ;; This function calls:
  5823 ;;		___lldiv
  5824 ;; This function is called by:
  5825 ;;		_initRamp
  5826 ;;		_ramp_Rotate
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text16
  5831  003C28                     __ptext16:
  5832                           	opt stack 0
  5833  003C28                     _I2C_Master_Init:
  5834                           	opt stack 24
  5835                           
  5836                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  5837                           
  5838                           ;incstack = 0
  5839  003C28  9AC6               	bcf	4038,5,c	;volatile
  5840                           
  5841                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  5842  003C2A  8694               	bsf	3988,3,c	;volatile
  5843                           
  5844                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  5845  003C2C  8894               	bsf	3988,4,c	;volatile
  5846                           
  5847                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  5848  003C2E  0E80               	movlw	128
  5849  003C30  6EC7               	movwf	4039,c	;volatile
  5850                           
  5851                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  5852  003C32  0E28               	movlw	40
  5853  003C34  6EC6               	movwf	4038,c	;volatile
  5854                           
  5855                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  5856  003C36  0E00               	movlw	0
  5857  003C38  6EC5               	movwf	4037,c	;volatile
  5858                           
  5859                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  5860  003C3A  0E00               	movlw	0
  5861  003C3C  0100               	movlb	0	; () banked
  5862  003C3E  6FD4               	movwf	___lldiv@dividend& (0+255),b
  5863  003C40  0E5A               	movlw	90
  5864  003C42  6FD5               	movwf	(___lldiv@dividend+1)& (0+255),b
  5865  003C44  0E62               	movlw	98
  5866  003C46  6FD6               	movwf	(___lldiv@dividend+2)& (0+255),b
  5867  003C48  0E02               	movlw	2
  5868  003C4A  6FD7               	movwf	(___lldiv@dividend+3)& (0+255),b
  5869  003C4C  C0E1  F0E5         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5870  003C50  C0E2  F0E6         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5871  003C54  C0E3  F0E7         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5872  003C58  C0E4  F0E8         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5873  003C5C  0E02               	movlw	2
  5874  003C5E                     u3055:
  5875  003C5E  90D8               	bcf	status,0,c
  5876  003C60  37E5               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5877  003C62  37E6               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5878  003C64  37E7               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5879  003C66  37E8               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5880  003C68  2EE8               	decfsz	wreg,f,c
  5881  003C6A  D7F9               	goto	u3055
  5882  003C6C  C0E5  F0D8         	movff	??_I2C_Master_Init,___lldiv@divisor
  5883  003C70  C0E6  F0D9         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5884  003C74  C0E7  F0DA         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5885  003C78  C0E8  F0DB         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5886  003C7C  ECAA  F01C         	call	___lldiv	;wreg free
  5887  003C80  0100               	movlb	0	; () banked
  5888  003C82  05D4               	decf	?___lldiv& (0+255),w,b
  5889  003C84  6EC8               	movwf	4040,c	;volatile
  5890                           
  5891                           ; BSR set to: 0
  5892  003C86  0012               	return		;funcret
  5893  003C88                     __end_of_I2C_Master_Init:
  5894                           	opt stack 0
  5895                           tblptru	equ	0xFF8
  5896                           tblptrh	equ	0xFF7
  5897                           tblptrl	equ	0xFF6
  5898                           tablat	equ	0xFF5
  5899                           prodh	equ	0xFF4
  5900                           prodl	equ	0xFF3
  5901                           intcon	equ	0xFF2
  5902                           intcon3	equ	0xFF0
  5903                           postinc0	equ	0xFEE
  5904                           wreg	equ	0xFE8
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           fsr2h	equ	0xFDA
  5908                           fsr2l	equ	0xFD9
  5909                           status	equ	0xFD8
  5910                           
  5911 ;; *************** function ___lldiv *****************
  5912 ;; Defined at:
  5913 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  dividend        4    0[BANK0 ] unsigned long 
  5916 ;;  divisor         4    4[BANK0 ] unsigned long 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  quotient        4    8[BANK0 ] unsigned long 
  5919 ;;  counter         1   12[BANK0 ] unsigned char 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  4    0[BANK0 ] unsigned long 
  5922 ;; Registers used:
  5923 ;;		wreg, status,2, status,0
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5929 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;Total ram usage:       13 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    4
  5936 ;; This function calls:
  5937 ;;		Nothing
  5938 ;; This function is called by:
  5939 ;;		_I2C_Master_Init
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           	psect	text17
  5944  003954                     __ptext17:
  5945                           	opt stack 0
  5946  003954                     ___lldiv:
  5947                           	opt stack 24
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;incstack = 0
  5951  003954  0E00               	movlw	0
  5952  003956  0100               	movlb	0	; () banked
  5953  003958  6FDC               	movwf	___lldiv@quotient& (0+255),b
  5954  00395A  0E00               	movlw	0
  5955  00395C  6FDD               	movwf	(___lldiv@quotient+1)& (0+255),b
  5956  00395E  0E00               	movlw	0
  5957  003960  6FDE               	movwf	(___lldiv@quotient+2)& (0+255),b
  5958  003962  0E00               	movlw	0
  5959  003964  6FDF               	movwf	(___lldiv@quotient+3)& (0+255),b
  5960                           
  5961                           ; BSR set to: 0
  5962  003966  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5963  003968  11D9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5964  00396A  11DA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5965  00396C  11DB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5966  00396E  B4D8               	btfsc	status,2,c
  5967  003970  D02A               	goto	l1234
  5968                           
  5969                           ; BSR set to: 0
  5970  003972  0E01               	movlw	1
  5971  003974  6FE0               	movwf	___lldiv@counter& (0+255),b
  5972  003976  D006               	goto	l1229
  5973  003978                     
  5974                           ; BSR set to: 0
  5975                           
  5976                           ; BSR set to: 0
  5977  003978  90D8               	bcf	status,0,c
  5978  00397A  37D8               	rlcf	___lldiv@divisor& (0+255),f,b
  5979  00397C  37D9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5980  00397E  37DA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5981  003980  37DB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5982  003982  2BE0               	incf	___lldiv@counter& (0+255),f,b
  5983  003984                     l1229:
  5984                           
  5985                           ; BSR set to: 0
  5986                           
  5987                           ; BSR set to: 0
  5988  003984  AFDB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5989  003986  D7F8               	goto	l1230
  5990  003988                     u2640:
  5991                           
  5992                           ; BSR set to: 0
  5993                           
  5994                           ; BSR set to: 0
  5995                           
  5996                           ; BSR set to: 0
  5997  003988  90D8               	bcf	status,0,c
  5998  00398A  37DC               	rlcf	___lldiv@quotient& (0+255),f,b
  5999  00398C  37DD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6000  00398E  37DE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6001  003990  37DF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6002                           
  6003                           ; BSR set to: 0
  6004  003992  51D8               	movf	___lldiv@divisor& (0+255),w,b
  6005  003994  5DD4               	subwf	___lldiv@dividend& (0+255),w,b
  6006  003996  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6007  003998  59D5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6008  00399A  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6009  00399C  59D6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6010  00399E  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6011  0039A0  59D7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6012  0039A2  A0D8               	btfss	status,0,c
  6013  0039A4  D009               	goto	l1233
  6014                           
  6015                           ; BSR set to: 0
  6016  0039A6  51D8               	movf	___lldiv@divisor& (0+255),w,b
  6017  0039A8  5FD4               	subwf	___lldiv@dividend& (0+255),f,b
  6018  0039AA  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6019  0039AC  5BD5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6020  0039AE  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6021  0039B0  5BD6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6022  0039B2  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6023  0039B4  5BD7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6024                           
  6025                           ; BSR set to: 0
  6026  0039B6  81DC               	bsf	___lldiv@quotient& (0+255),0,b
  6027  0039B8                     l1233:
  6028                           
  6029                           ; BSR set to: 0
  6030                           
  6031                           ; BSR set to: 0
  6032  0039B8  90D8               	bcf	status,0,c
  6033  0039BA  33DB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6034  0039BC  33DA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6035  0039BE  33D9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6036  0039C0  33D8               	rrcf	___lldiv@divisor& (0+255),f,b
  6037                           
  6038                           ; BSR set to: 0
  6039  0039C2  2FE0               	decfsz	___lldiv@counter& (0+255),f,b
  6040  0039C4  D7E1               	goto	u2640
  6041  0039C6                     l1234:
  6042                           
  6043                           ; BSR set to: 0
  6044                           
  6045                           ; BSR set to: 0
  6046  0039C6  C0DC  F0D4         	movff	___lldiv@quotient,?___lldiv
  6047  0039CA  C0DD  F0D5         	movff	___lldiv@quotient+1,?___lldiv+1
  6048  0039CE  C0DE  F0D6         	movff	___lldiv@quotient+2,?___lldiv+2
  6049  0039D2  C0DF  F0D7         	movff	___lldiv@quotient+3,?___lldiv+3
  6050                           
  6051                           ; BSR set to: 0
  6052  0039D6  0012               	return		;funcret
  6053  0039D8                     __end_of___lldiv:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           intcon3	equ	0xFF0
  6063                           postinc0	equ	0xFEE
  6064                           wreg	equ	0xFE8
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _get_RTC_initial *****************
  6072 ;; Defined at:
  6073 ;;		line 1158 in file "main.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;		None
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;		None
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      void 
  6080 ;; Registers used:
  6081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;Total ram usage:        1 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    6
  6094 ;; This function calls:
  6095 ;;		_I2C_Master_Read
  6096 ;;		_I2C_Master_Start
  6097 ;;		_I2C_Master_Stop
  6098 ;;		_I2C_Master_Write
  6099 ;;		___awdiv
  6100 ;;		___wmul
  6101 ;; This function is called by:
  6102 ;;		_main
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           	psect	text18
  6107  0034D6                     __ptext18:
  6108                           	opt stack 0
  6109  0034D6                     _get_RTC_initial:
  6110                           	opt stack 24
  6111                           
  6112                           ;main.c: 1160: I2C_Master_Start();
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;incstack = 0
  6116  0034D6  EC1C  F022         	call	_I2C_Master_Start	;wreg free
  6117                           
  6118                           ;main.c: 1161: I2C_Master_Write(0b11010000);
  6119  0034DA  0E00               	movlw	0
  6120  0034DC  0100               	movlb	0	; () banked
  6121  0034DE  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6122  0034E0  0ED0               	movlw	208
  6123  0034E2  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6124  0034E4  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  6125                           
  6126                           ;main.c: 1162: I2C_Master_Write(0x00);
  6127  0034E8  0E00               	movlw	0
  6128  0034EA  0100               	movlb	0	; () banked
  6129  0034EC  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6130  0034EE  0E00               	movlw	0
  6131  0034F0  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6132  0034F2  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  6133                           
  6134                           ;main.c: 1163: I2C_Master_Stop();
  6135  0034F6  EC18  F022         	call	_I2C_Master_Stop	;wreg free
  6136                           
  6137                           ;main.c: 1166: I2C_Master_Start();
  6138  0034FA  EC1C  F022         	call	_I2C_Master_Start	;wreg free
  6139                           
  6140                           ;main.c: 1167: I2C_Master_Write(0b11010001);
  6141  0034FE  0E00               	movlw	0
  6142  003500  0100               	movlb	0	; () banked
  6143  003502  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6144  003504  0ED1               	movlw	209
  6145  003506  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6146  003508  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  6147                           
  6148                           ;main.c: 1168: for(i = 0; i < 6; i++){
  6149  00350C  0E00               	movlw	0
  6150  00350E  0100               	movlb	0	; () banked
  6151  003510  6FCD               	movwf	(_i+1)& (0+255),b
  6152  003512  0E00               	movlw	0
  6153  003514  6FCC               	movwf	_i& (0+255),b
  6154  003516                     l4384:
  6155                           
  6156                           ; BSR set to: 0
  6157  003516  51CD               	movf	(_i+1)& (0+255),w,b
  6158  003518  E112               	bnz	l4394
  6159  00351A  0E06               	movlw	6
  6160  00351C  5DCC               	subwf	_i& (0+255),w,b
  6161  00351E  B0D8               	btfsc	status,0,c
  6162  003520  D00E               	goto	u3290
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;main.c: 1169: time[i] = I2C_Master_Read(0);
  6166                           
  6167                           ; BSR set to: 0
  6168                           
  6169                           ; BSR set to: 0
  6170  003522  0E52               	movlw	low _time
  6171  003524  25CC               	addwf	_i& (0+255),w,b
  6172  003526  6ED9               	movwf	fsr2l,c
  6173  003528  0E00               	movlw	high _time
  6174  00352A  21CD               	addwfc	(_i+1)& (0+255),w,b
  6175  00352C  6EDA               	movwf	fsr2h,c
  6176  00352E  0E00               	movlw	0
  6177  003530  ECE1  F020         	call	_I2C_Master_Read
  6178  003534  6EDF               	movwf	indf2,c
  6179  003536  0100               	movlb	0	; () banked
  6180  003538  4BCC               	infsnz	_i& (0+255),f,b
  6181  00353A  2BCD               	incf	(_i+1)& (0+255),f,b
  6182  00353C  D7EC               	goto	l4384
  6183  00353E                     u3290:
  6184  00353E                     l4394:
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;main.c: 1170: }
  6188                           ;main.c: 1171: time[6] = I2C_Master_Read(1);
  6189  00353E  0E01               	movlw	1
  6190  003540  ECE1  F020         	call	_I2C_Master_Read
  6191  003544  6E58               	movwf	_time+6,c
  6192                           
  6193                           ;main.c: 1172: I2C_Master_Stop();
  6194  003546  EC18  F022         	call	_I2C_Master_Stop	;wreg free
  6195                           
  6196                           ;main.c: 1174: hr_initial = time[2]/16*10+time[2]%16;
  6197  00354A  C054  F0E2         	movff	_time+2,??_get_RTC_initial
  6198  00354E  0E0F               	movlw	15
  6199  003550  0100               	movlb	0	; () banked
  6200  003552  17E2               	andwf	??_get_RTC_initial& (0+255),f,b
  6201  003554  0E00               	movlw	0
  6202  003556  6FD7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6203  003558  0E10               	movlw	16
  6204  00355A  6FD6               	movwf	___awdiv@divisor& (0+255),b
  6205  00355C  C054  F0D4         	movff	_time+2,___awdiv@dividend
  6206  003560  6BD5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6207  003562  ECE1  F01B         	call	___awdiv	;wreg free
  6208  003566  C0D4  F0DC         	movff	?___awdiv,___wmul@multiplier
  6209  00356A  C0D5  F0DD         	movff	?___awdiv+1,___wmul@multiplier+1
  6210  00356E  0E00               	movlw	0
  6211  003570  0100               	movlb	0	; () banked
  6212  003572  6FDF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6213  003574  0E0A               	movlw	10
  6214  003576  6FDE               	movwf	___wmul@multiplicand& (0+255),b
  6215  003578  ECF6  F020         	call	___wmul	;wreg free
  6216  00357C  0100               	movlb	0	; () banked
  6217  00357E  51E2               	movf	??_get_RTC_initial& (0+255),w,b
  6218  003580  25DC               	addwf	?___wmul& (0+255),w,b
  6219  003582  6E5D               	movwf	_hr_initial,c
  6220  003584  0E00               	movlw	0
  6221  003586  21DD               	addwfc	(?___wmul+1)& (0+255),w,b
  6222  003588  6E5E               	movwf	_hr_initial+1,c
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;main.c: 1175: min_initial = time[1]/16*10 + time[1]%16;
  6226  00358A  C053  F0E2         	movff	_time+1,??_get_RTC_initial
  6227  00358E  0E0F               	movlw	15
  6228  003590  17E2               	andwf	??_get_RTC_initial& (0+255),f,b
  6229  003592  0E00               	movlw	0
  6230  003594  6FD7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6231  003596  0E10               	movlw	16
  6232  003598  6FD6               	movwf	___awdiv@divisor& (0+255),b
  6233  00359A  C053  F0D4         	movff	_time+1,___awdiv@dividend
  6234  00359E  6BD5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6235  0035A0  ECE1  F01B         	call	___awdiv	;wreg free
  6236  0035A4  C0D4  F0DC         	movff	?___awdiv,___wmul@multiplier
  6237  0035A8  C0D5  F0DD         	movff	?___awdiv+1,___wmul@multiplier+1
  6238  0035AC  0E00               	movlw	0
  6239  0035AE  0100               	movlb	0	; () banked
  6240  0035B0  6FDF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6241  0035B2  0E0A               	movlw	10
  6242  0035B4  6FDE               	movwf	___wmul@multiplicand& (0+255),b
  6243  0035B6  ECF6  F020         	call	___wmul	;wreg free
  6244  0035BA  0100               	movlb	0	; () banked
  6245  0035BC  51E2               	movf	??_get_RTC_initial& (0+255),w,b
  6246  0035BE  25DC               	addwf	?___wmul& (0+255),w,b
  6247  0035C0  6E5B               	movwf	_min_initial,c
  6248  0035C2  0E00               	movlw	0
  6249  0035C4  21DD               	addwfc	(?___wmul+1)& (0+255),w,b
  6250  0035C6  6E5C               	movwf	_min_initial+1,c
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;main.c: 1176: sec_initial = time[0]/16*10 +time[0]%16;
  6254  0035C8  C052  F0E2         	movff	_time,??_get_RTC_initial
  6255  0035CC  0E0F               	movlw	15
  6256  0035CE  17E2               	andwf	??_get_RTC_initial& (0+255),f,b
  6257  0035D0  0E00               	movlw	0
  6258  0035D2  6FD7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6259  0035D4  0E10               	movlw	16
  6260  0035D6  6FD6               	movwf	___awdiv@divisor& (0+255),b
  6261  0035D8  C052  F0D4         	movff	_time,___awdiv@dividend
  6262  0035DC  6BD5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6263  0035DE  ECE1  F01B         	call	___awdiv	;wreg free
  6264  0035E2  C0D4  F0DC         	movff	?___awdiv,___wmul@multiplier
  6265  0035E6  C0D5  F0DD         	movff	?___awdiv+1,___wmul@multiplier+1
  6266  0035EA  0E00               	movlw	0
  6267  0035EC  0100               	movlb	0	; () banked
  6268  0035EE  6FDF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6269  0035F0  0E0A               	movlw	10
  6270  0035F2  6FDE               	movwf	___wmul@multiplicand& (0+255),b
  6271  0035F4  ECF6  F020         	call	___wmul	;wreg free
  6272  0035F8  0100               	movlb	0	; () banked
  6273  0035FA  51E2               	movf	??_get_RTC_initial& (0+255),w,b
  6274  0035FC  25DC               	addwf	?___wmul& (0+255),w,b
  6275  0035FE  6E59               	movwf	_sec_initial,c
  6276  003600  0E00               	movlw	0
  6277  003602  21DD               	addwfc	(?___wmul+1)& (0+255),w,b
  6278  003604  6E5A               	movwf	_sec_initial+1,c
  6279                           
  6280                           ; BSR set to: 0
  6281  003606  0012               	return		;funcret
  6282  003608                     __end_of_get_RTC_initial:
  6283                           	opt stack 0
  6284                           tblptru	equ	0xFF8
  6285                           tblptrh	equ	0xFF7
  6286                           tblptrl	equ	0xFF6
  6287                           tablat	equ	0xFF5
  6288                           prodh	equ	0xFF4
  6289                           prodl	equ	0xFF3
  6290                           intcon	equ	0xFF2
  6291                           intcon3	equ	0xFF0
  6292                           postinc0	equ	0xFEE
  6293                           wreg	equ	0xFE8
  6294                           indf2	equ	0xFDF
  6295                           postinc2	equ	0xFDE
  6296                           postdec2	equ	0xFDD
  6297                           fsr2h	equ	0xFDA
  6298                           fsr2l	equ	0xFD9
  6299                           status	equ	0xFD8
  6300                           
  6301 ;; *************** function _get_RTC_final *****************
  6302 ;; Defined at:
  6303 ;;		line 1179 in file "main.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      void 
  6310 ;; Registers used:
  6311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;Total ram usage:        1 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    6
  6324 ;; This function calls:
  6325 ;;		_I2C_Master_Read
  6326 ;;		_I2C_Master_Start
  6327 ;;		_I2C_Master_Stop
  6328 ;;		_I2C_Master_Write
  6329 ;;		___awdiv
  6330 ;;		___wmul
  6331 ;; This function is called by:
  6332 ;;		_main
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text19
  6337  003608                     __ptext19:
  6338                           	opt stack 0
  6339  003608                     _get_RTC_final:
  6340                           	opt stack 24
  6341                           
  6342                           ;main.c: 1180: I2C_Master_Start();
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;incstack = 0
  6346  003608  EC1C  F022         	call	_I2C_Master_Start	;wreg free
  6347                           
  6348                           ;main.c: 1181: I2C_Master_Write(0b11010000);
  6349  00360C  0E00               	movlw	0
  6350  00360E  0100               	movlb	0	; () banked
  6351  003610  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6352  003612  0ED0               	movlw	208
  6353  003614  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6354  003616  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  6355                           
  6356                           ;main.c: 1182: I2C_Master_Write(0x00);
  6357  00361A  0E00               	movlw	0
  6358  00361C  0100               	movlb	0	; () banked
  6359  00361E  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6360  003620  0E00               	movlw	0
  6361  003622  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6362  003624  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  6363                           
  6364                           ;main.c: 1183: I2C_Master_Stop();
  6365  003628  EC18  F022         	call	_I2C_Master_Stop	;wreg free
  6366                           
  6367                           ;main.c: 1186: I2C_Master_Start();
  6368  00362C  EC1C  F022         	call	_I2C_Master_Start	;wreg free
  6369                           
  6370                           ;main.c: 1187: I2C_Master_Write(0b11010001);
  6371  003630  0E00               	movlw	0
  6372  003632  0100               	movlb	0	; () banked
  6373  003634  6FD6               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6374  003636  0ED1               	movlw	209
  6375  003638  6FD5               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6376  00363A  EC0E  F022         	call	_I2C_Master_Write	;wreg free
  6377                           
  6378                           ;main.c: 1188: for(i = 0; i < 6; i++){
  6379  00363E  0E00               	movlw	0
  6380  003640  0100               	movlb	0	; () banked
  6381  003642  6FCD               	movwf	(_i+1)& (0+255),b
  6382  003644  0E00               	movlw	0
  6383  003646  6FCC               	movwf	_i& (0+255),b
  6384  003648                     l4520:
  6385                           
  6386                           ; BSR set to: 0
  6387  003648  51CD               	movf	(_i+1)& (0+255),w,b
  6388  00364A  E112               	bnz	l4530
  6389  00364C  0E06               	movlw	6
  6390  00364E  5DCC               	subwf	_i& (0+255),w,b
  6391  003650  B0D8               	btfsc	status,0,c
  6392  003652  D00E               	goto	u3410
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;main.c: 1189: time[i] = I2C_Master_Read(0);
  6396                           
  6397                           ; BSR set to: 0
  6398                           
  6399                           ; BSR set to: 0
  6400  003654  0E52               	movlw	low _time
  6401  003656  25CC               	addwf	_i& (0+255),w,b
  6402  003658  6ED9               	movwf	fsr2l,c
  6403  00365A  0E00               	movlw	high _time
  6404  00365C  21CD               	addwfc	(_i+1)& (0+255),w,b
  6405  00365E  6EDA               	movwf	fsr2h,c
  6406  003660  0E00               	movlw	0
  6407  003662  ECE1  F020         	call	_I2C_Master_Read
  6408  003666  6EDF               	movwf	indf2,c
  6409  003668  0100               	movlb	0	; () banked
  6410  00366A  4BCC               	infsnz	_i& (0+255),f,b
  6411  00366C  2BCD               	incf	(_i+1)& (0+255),f,b
  6412  00366E  D7EC               	goto	l4520
  6413  003670                     u3410:
  6414  003670                     l4530:
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;main.c: 1190: }
  6418                           ;main.c: 1191: time[6] = I2C_Master_Read(1);
  6419  003670  0E01               	movlw	1
  6420  003672  ECE1  F020         	call	_I2C_Master_Read
  6421  003676  6E58               	movwf	_time+6,c
  6422                           
  6423                           ;main.c: 1192: I2C_Master_Stop();
  6424  003678  EC18  F022         	call	_I2C_Master_Stop	;wreg free
  6425                           
  6426                           ;main.c: 1194: hr_final = time[2]/16*10+time[2]%16;
  6427  00367C  C054  F0E2         	movff	_time+2,??_get_RTC_final
  6428  003680  0E0F               	movlw	15
  6429  003682  0100               	movlb	0	; () banked
  6430  003684  17E2               	andwf	??_get_RTC_final& (0+255),f,b
  6431  003686  0E00               	movlw	0
  6432  003688  6FD7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6433  00368A  0E10               	movlw	16
  6434  00368C  6FD6               	movwf	___awdiv@divisor& (0+255),b
  6435  00368E  C054  F0D4         	movff	_time+2,___awdiv@dividend
  6436  003692  6BD5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6437  003694  ECE1  F01B         	call	___awdiv	;wreg free
  6438  003698  C0D4  F0DC         	movff	?___awdiv,___wmul@multiplier
  6439  00369C  C0D5  F0DD         	movff	?___awdiv+1,___wmul@multiplier+1
  6440  0036A0  0E00               	movlw	0
  6441  0036A2  0100               	movlb	0	; () banked
  6442  0036A4  6FDF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6443  0036A6  0E0A               	movlw	10
  6444  0036A8  6FDE               	movwf	___wmul@multiplicand& (0+255),b
  6445  0036AA  ECF6  F020         	call	___wmul	;wreg free
  6446  0036AE  0100               	movlb	0	; () banked
  6447  0036B0  51E2               	movf	??_get_RTC_final& (0+255),w,b
  6448  0036B2  25DC               	addwf	?___wmul& (0+255),w,b
  6449  0036B4  6F96               	movwf	_hr_final& (0+255),b
  6450  0036B6  0E00               	movlw	0
  6451  0036B8  21DD               	addwfc	(?___wmul+1)& (0+255),w,b
  6452  0036BA  6F97               	movwf	(_hr_final+1)& (0+255),b
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;main.c: 1195: min_final = time[1]/16*10 + time[1]%16;
  6456  0036BC  C053  F0E2         	movff	_time+1,??_get_RTC_final
  6457  0036C0  0E0F               	movlw	15
  6458  0036C2  17E2               	andwf	??_get_RTC_final& (0+255),f,b
  6459  0036C4  0E00               	movlw	0
  6460  0036C6  6FD7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6461  0036C8  0E10               	movlw	16
  6462  0036CA  6FD6               	movwf	___awdiv@divisor& (0+255),b
  6463  0036CC  C053  F0D4         	movff	_time+1,___awdiv@dividend
  6464  0036D0  6BD5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6465  0036D2  ECE1  F01B         	call	___awdiv	;wreg free
  6466  0036D6  C0D4  F0DC         	movff	?___awdiv,___wmul@multiplier
  6467  0036DA  C0D5  F0DD         	movff	?___awdiv+1,___wmul@multiplier+1
  6468  0036DE  0E00               	movlw	0
  6469  0036E0  0100               	movlb	0	; () banked
  6470  0036E2  6FDF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6471  0036E4  0E0A               	movlw	10
  6472  0036E6  6FDE               	movwf	___wmul@multiplicand& (0+255),b
  6473  0036E8  ECF6  F020         	call	___wmul	;wreg free
  6474  0036EC  0100               	movlb	0	; () banked
  6475  0036EE  51E2               	movf	??_get_RTC_final& (0+255),w,b
  6476  0036F0  25DC               	addwf	?___wmul& (0+255),w,b
  6477  0036F2  6F94               	movwf	_min_final& (0+255),b
  6478  0036F4  0E00               	movlw	0
  6479  0036F6  21DD               	addwfc	(?___wmul+1)& (0+255),w,b
  6480  0036F8  6F95               	movwf	(_min_final+1)& (0+255),b
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;main.c: 1196: sec_final = time[0]/16*10 + time[0]%16;
  6484  0036FA  C052  F0E2         	movff	_time,??_get_RTC_final
  6485  0036FE  0E0F               	movlw	15
  6486  003700  17E2               	andwf	??_get_RTC_final& (0+255),f,b
  6487  003702  0E00               	movlw	0
  6488  003704  6FD7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6489  003706  0E10               	movlw	16
  6490  003708  6FD6               	movwf	___awdiv@divisor& (0+255),b
  6491  00370A  C052  F0D4         	movff	_time,___awdiv@dividend
  6492  00370E  6BD5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6493  003710  ECE1  F01B         	call	___awdiv	;wreg free
  6494  003714  C0D4  F0DC         	movff	?___awdiv,___wmul@multiplier
  6495  003718  C0D5  F0DD         	movff	?___awdiv+1,___wmul@multiplier+1
  6496  00371C  0E00               	movlw	0
  6497  00371E  0100               	movlb	0	; () banked
  6498  003720  6FDF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6499  003722  0E0A               	movlw	10
  6500  003724  6FDE               	movwf	___wmul@multiplicand& (0+255),b
  6501  003726  ECF6  F020         	call	___wmul	;wreg free
  6502  00372A  0100               	movlb	0	; () banked
  6503  00372C  51E2               	movf	??_get_RTC_final& (0+255),w,b
  6504  00372E  25DC               	addwf	?___wmul& (0+255),w,b
  6505  003730  6F92               	movwf	_sec_final& (0+255),b
  6506  003732  0E00               	movlw	0
  6507  003734  21DD               	addwfc	(?___wmul+1)& (0+255),w,b
  6508  003736  6F93               	movwf	(_sec_final+1)& (0+255),b
  6509                           
  6510                           ; BSR set to: 0
  6511  003738  0012               	return		;funcret
  6512  00373A                     __end_of_get_RTC_final:
  6513                           	opt stack 0
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           intcon	equ	0xFF2
  6521                           intcon3	equ	0xFF0
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           indf2	equ	0xFDF
  6525                           postinc2	equ	0xFDE
  6526                           postdec2	equ	0xFDD
  6527                           fsr2h	equ	0xFDA
  6528                           fsr2l	equ	0xFD9
  6529                           status	equ	0xFD8
  6530                           
  6531 ;; *************** function ___awdiv *****************
  6532 ;; Defined at:
  6533 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  dividend        2    0[BANK0 ] int 
  6536 ;;  divisor         2    2[BANK0 ] int 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  quotient        2    6[BANK0 ] int 
  6539 ;;  sign            1    5[BANK0 ] unsigned char 
  6540 ;;  counter         1    4[BANK0 ] unsigned char 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  2    0[BANK0 ] int 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2, status,0
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6550 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;Total ram usage:        8 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    4
  6557 ;; This function calls:
  6558 ;;		Nothing
  6559 ;; This function is called by:
  6560 ;;		_main
  6561 ;;		_get_RTC_initial
  6562 ;;		_get_RTC_final
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text20
  6567  0037C2                     __ptext20:
  6568                           	opt stack 0
  6569  0037C2                     ___awdiv:
  6570                           	opt stack 25
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;incstack = 0
  6574  0037C2  0E00               	movlw	0
  6575  0037C4  0100               	movlb	0	; () banked
  6576  0037C6  6FD9               	movwf	___awdiv@sign& (0+255),b
  6577                           
  6578                           ; BSR set to: 0
  6579  0037C8  AFD7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6580  0037CA  D006               	goto	l1041
  6581                           
  6582                           ; BSR set to: 0
  6583  0037CC  6DD6               	negf	___awdiv@divisor& (0+255),b
  6584  0037CE  1FD7               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6585  0037D0  B0D8               	btfsc	status,0,c
  6586  0037D2  2BD7               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6587                           
  6588                           ; BSR set to: 0
  6589  0037D4  0E01               	movlw	1
  6590  0037D6  6FD9               	movwf	___awdiv@sign& (0+255),b
  6591  0037D8                     l1041:
  6592                           
  6593                           ; BSR set to: 0
  6594                           
  6595                           ; BSR set to: 0
  6596  0037D8  AFD5               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6597  0037DA  D006               	goto	l1042
  6598                           
  6599                           ; BSR set to: 0
  6600  0037DC  6DD4               	negf	___awdiv@dividend& (0+255),b
  6601  0037DE  1FD5               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6602  0037E0  B0D8               	btfsc	status,0,c
  6603  0037E2  2BD5               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6604                           
  6605                           ; BSR set to: 0
  6606  0037E4  0E01               	movlw	1
  6607  0037E6  1BD9               	xorwf	___awdiv@sign& (0+255),f,b
  6608  0037E8                     l1042:
  6609                           
  6610                           ; BSR set to: 0
  6611                           
  6612                           ; BSR set to: 0
  6613  0037E8  0E00               	movlw	0
  6614  0037EA  6FDB               	movwf	(___awdiv@quotient+1)& (0+255),b
  6615  0037EC  0E00               	movlw	0
  6616  0037EE  6FDA               	movwf	___awdiv@quotient& (0+255),b
  6617                           
  6618                           ; BSR set to: 0
  6619  0037F0  51D6               	movf	___awdiv@divisor& (0+255),w,b
  6620  0037F2  11D7               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6621  0037F4  B4D8               	btfsc	status,2,c
  6622  0037F6  D01C               	goto	l1049
  6623                           
  6624                           ; BSR set to: 0
  6625  0037F8  0E01               	movlw	1
  6626  0037FA  6FD8               	movwf	___awdiv@counter& (0+255),b
  6627  0037FC  D004               	goto	l1044
  6628  0037FE                     
  6629                           ; BSR set to: 0
  6630                           
  6631                           ; BSR set to: 0
  6632  0037FE  90D8               	bcf	status,0,c
  6633  003800  37D6               	rlcf	___awdiv@divisor& (0+255),f,b
  6634  003802  37D7               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6635  003804  2BD8               	incf	___awdiv@counter& (0+255),f,b
  6636  003806                     l1044:
  6637                           
  6638                           ; BSR set to: 0
  6639                           
  6640                           ; BSR set to: 0
  6641  003806  AFD7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6642  003808  D7FA               	goto	l1045
  6643  00380A                     u3120:
  6644                           
  6645                           ; BSR set to: 0
  6646                           
  6647                           ; BSR set to: 0
  6648                           
  6649                           ; BSR set to: 0
  6650  00380A  90D8               	bcf	status,0,c
  6651  00380C  37DA               	rlcf	___awdiv@quotient& (0+255),f,b
  6652  00380E  37DB               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6653                           
  6654                           ; BSR set to: 0
  6655  003810  51D6               	movf	___awdiv@divisor& (0+255),w,b
  6656  003812  5DD4               	subwf	___awdiv@dividend& (0+255),w,b
  6657  003814  51D7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6658  003816  59D5               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6659  003818  A0D8               	btfss	status,0,c
  6660  00381A  D005               	goto	l1048
  6661                           
  6662                           ; BSR set to: 0
  6663  00381C  51D6               	movf	___awdiv@divisor& (0+255),w,b
  6664  00381E  5FD4               	subwf	___awdiv@dividend& (0+255),f,b
  6665  003820  51D7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6666  003822  5BD5               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6667                           
  6668                           ; BSR set to: 0
  6669  003824  81DA               	bsf	___awdiv@quotient& (0+255),0,b
  6670  003826                     l1048:
  6671                           
  6672                           ; BSR set to: 0
  6673                           
  6674                           ; BSR set to: 0
  6675  003826  90D8               	bcf	status,0,c
  6676  003828  33D7               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6677  00382A  33D6               	rrcf	___awdiv@divisor& (0+255),f,b
  6678                           
  6679                           ; BSR set to: 0
  6680  00382C  2FD8               	decfsz	___awdiv@counter& (0+255),f,b
  6681  00382E  D7ED               	goto	u3120
  6682  003830                     l1049:
  6683                           
  6684                           ; BSR set to: 0
  6685                           
  6686                           ; BSR set to: 0
  6687                           
  6688                           ; BSR set to: 0
  6689  003830  51D9               	movf	___awdiv@sign& (0+255),w,b
  6690  003832  B4D8               	btfsc	status,2,c
  6691  003834  D004               	goto	l1050
  6692                           
  6693                           ; BSR set to: 0
  6694  003836  6DDA               	negf	___awdiv@quotient& (0+255),b
  6695  003838  1FDB               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6696  00383A  B0D8               	btfsc	status,0,c
  6697  00383C  2BDB               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6698  00383E                     l1050:
  6699                           
  6700                           ; BSR set to: 0
  6701                           
  6702                           ; BSR set to: 0
  6703  00383E  C0DA  F0D4         	movff	___awdiv@quotient,?___awdiv
  6704  003842  C0DB  F0D5         	movff	___awdiv@quotient+1,?___awdiv+1
  6705  003846  0012               	return	
  6706  003848                     __end_of___awdiv:
  6707                           	opt stack 0
  6708                           tblptru	equ	0xFF8
  6709                           tblptrh	equ	0xFF7
  6710                           tblptrl	equ	0xFF6
  6711                           tablat	equ	0xFF5
  6712                           prodh	equ	0xFF4
  6713                           prodl	equ	0xFF3
  6714                           intcon	equ	0xFF2
  6715                           intcon3	equ	0xFF0
  6716                           postinc0	equ	0xFEE
  6717                           wreg	equ	0xFE8
  6718                           indf2	equ	0xFDF
  6719                           postinc2	equ	0xFDE
  6720                           postdec2	equ	0xFDD
  6721                           fsr2h	equ	0xFDA
  6722                           fsr2l	equ	0xFD9
  6723                           status	equ	0xFD8
  6724                           
  6725 ;; *************** function _I2C_Master_Write *****************
  6726 ;; Defined at:
  6727 ;;		line 108 in file "I2C.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      void 
  6734 ;; Registers used:
  6735 ;;		wreg, status,2, status,0, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6741 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;Total ram usage:        2 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    5
  6748 ;; This function calls:
  6749 ;;		_I2C_Master_Wait
  6750 ;; This function is called by:
  6751 ;;		_initRamp
  6752 ;;		_ramp_Rotate
  6753 ;;		_get_RTC_initial
  6754 ;;		_get_RTC_final
  6755 ;;		_RTC_setTime
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text21
  6760  00441C                     __ptext21:
  6761                           	opt stack 0
  6762  00441C                     _I2C_Master_Write:
  6763                           	opt stack 24
  6764                           
  6765                           ;I2C.c: 116: I2C_Master_Wait();
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;incstack = 0
  6769  00441C  ECE7  F021         	call	_I2C_Master_Wait	;wreg free
  6770                           
  6771                           ;I2C.c: 117: SSPBUF = byteToWrite;
  6772  004420  C0D5  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  6773  004424  0012               	return		;funcret
  6774  004426                     __end_of_I2C_Master_Write:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           intcon3	equ	0xFF0
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           indf2	equ	0xFDF
  6787                           postinc2	equ	0xFDE
  6788                           postdec2	equ	0xFDD
  6789                           fsr2h	equ	0xFDA
  6790                           fsr2l	equ	0xFD9
  6791                           status	equ	0xFD8
  6792                           
  6793 ;; *************** function _I2C_Master_Stop *****************
  6794 ;; Defined at:
  6795 ;;		line 95 in file "I2C.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;		None
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;		None
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  1    wreg      void 
  6802 ;; Registers used:
  6803 ;;		wreg, status,2, status,0, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;Total ram usage:        0 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    5
  6816 ;; This function calls:
  6817 ;;		_I2C_Master_Wait
  6818 ;; This function is called by:
  6819 ;;		_initRamp
  6820 ;;		_ramp_Rotate
  6821 ;;		_get_RTC_initial
  6822 ;;		_get_RTC_final
  6823 ;;		_RTC_setTime
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text22
  6828  004430                     __ptext22:
  6829                           	opt stack 0
  6830  004430                     _I2C_Master_Stop:
  6831                           	opt stack 24
  6832                           
  6833                           ;I2C.c: 104: I2C_Master_Wait();
  6834                           
  6835                           ;incstack = 0
  6836  004430  ECE7  F021         	call	_I2C_Master_Wait	;wreg free
  6837                           
  6838                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  6839  004434  84C5               	bsf	4037,2,c	;volatile
  6840  004436  0012               	return		;funcret
  6841  004438                     __end_of_I2C_Master_Stop:
  6842                           	opt stack 0
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           prodh	equ	0xFF4
  6848                           prodl	equ	0xFF3
  6849                           intcon	equ	0xFF2
  6850                           intcon3	equ	0xFF0
  6851                           postinc0	equ	0xFEE
  6852                           wreg	equ	0xFE8
  6853                           indf2	equ	0xFDF
  6854                           postinc2	equ	0xFDE
  6855                           postdec2	equ	0xFDD
  6856                           fsr2h	equ	0xFDA
  6857                           fsr2l	equ	0xFD9
  6858                           status	equ	0xFD8
  6859                           
  6860 ;; *************** function _I2C_Master_Start *****************
  6861 ;; Defined at:
  6862 ;;		line 69 in file "I2C.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;		None
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, status,2, status,0, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;Total ram usage:        0 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    5
  6883 ;; This function calls:
  6884 ;;		_I2C_Master_Wait
  6885 ;; This function is called by:
  6886 ;;		_initRamp
  6887 ;;		_ramp_Rotate
  6888 ;;		_get_RTC_initial
  6889 ;;		_get_RTC_final
  6890 ;;		_RTC_setTime
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text23
  6895  004438                     __ptext23:
  6896                           	opt stack 0
  6897  004438                     _I2C_Master_Start:
  6898                           	opt stack 24
  6899                           
  6900                           ;I2C.c: 78: I2C_Master_Wait();
  6901                           
  6902                           ;incstack = 0
  6903  004438  ECE7  F021         	call	_I2C_Master_Wait	;wreg free
  6904                           
  6905                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  6906  00443C  80C5               	bsf	4037,0,c	;volatile
  6907  00443E  0012               	return		;funcret
  6908  004440                     __end_of_I2C_Master_Start:
  6909                           	opt stack 0
  6910                           tblptru	equ	0xFF8
  6911                           tblptrh	equ	0xFF7
  6912                           tblptrl	equ	0xFF6
  6913                           tablat	equ	0xFF5
  6914                           prodh	equ	0xFF4
  6915                           prodl	equ	0xFF3
  6916                           intcon	equ	0xFF2
  6917                           intcon3	equ	0xFF0
  6918                           postinc0	equ	0xFEE
  6919                           wreg	equ	0xFE8
  6920                           indf2	equ	0xFDF
  6921                           postinc2	equ	0xFDE
  6922                           postdec2	equ	0xFDD
  6923                           fsr2h	equ	0xFDA
  6924                           fsr2l	equ	0xFD9
  6925                           status	equ	0xFD8
  6926                           
  6927 ;; *************** function _I2C_Master_Read *****************
  6928 ;; Defined at:
  6929 ;;		line 120 in file "I2C.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;  ackBit          1    wreg     unsigned char 
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;  ackBit          1    1[BANK0 ] unsigned char 
  6934 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      unsigned char 
  6937 ;; Registers used:
  6938 ;;		wreg, status,2, status,0, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;Total ram usage:        2 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    5
  6951 ;; This function calls:
  6952 ;;		_I2C_Master_Wait
  6953 ;; This function is called by:
  6954 ;;		_get_RTC_initial
  6955 ;;		_get_RTC_final
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text24
  6960  0041C2                     __ptext24:
  6961                           	opt stack 0
  6962  0041C2                     _I2C_Master_Read:
  6963                           	opt stack 24
  6964                           
  6965                           ;incstack = 0
  6966                           ;I2C_Master_Read@ackBit stored from wreg
  6967  0041C2  0100               	movlb	0	; () banked
  6968  0041C4  6FD5               	movwf	I2C_Master_Read@ackBit& (0+255),b
  6969                           
  6970                           ;I2C.c: 130: unsigned char receivedByte;
  6971                           ;I2C.c: 132: I2C_Master_Wait();
  6972  0041C6  ECE7  F021         	call	_I2C_Master_Wait	;wreg free
  6973                           
  6974                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  6975  0041CA  86C5               	bsf	4037,3,c	;volatile
  6976                           
  6977                           ;I2C.c: 135: I2C_Master_Wait();
  6978  0041CC  ECE7  F021         	call	_I2C_Master_Wait	;wreg free
  6979                           
  6980                           ;I2C.c: 136: receivedByte = SSPBUF;
  6981  0041D0  CFC9 F0D6          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  6982                           
  6983                           ;I2C.c: 138: I2C_Master_Wait();
  6984  0041D4  ECE7  F021         	call	_I2C_Master_Wait	;wreg free
  6985                           
  6986                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  6987  0041D8  0100               	movlb	0	; () banked
  6988  0041DA  B1D5               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  6989  0041DC  D002               	bra	u3065
  6990  0041DE  9AC5               	bcf	4037,5,c	;volatile
  6991  0041E0  D001               	bra	u3066
  6992  0041E2                     u3065:
  6993  0041E2  8AC5               	bsf	4037,5,c	;volatile
  6994  0041E4                     u3066:
  6995                           
  6996                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  6997  0041E4  88C5               	bsf	4037,4,c	;volatile
  6998                           
  6999                           ;I2C.c: 142: return receivedByte;
  7000  0041E6  0100               	movlb	0	; () banked
  7001  0041E8  51D6               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  7002  0041EA  0012               	return	
  7003  0041EC                     __end_of_I2C_Master_Read:
  7004                           	opt stack 0
  7005                           tblptru	equ	0xFF8
  7006                           tblptrh	equ	0xFF7
  7007                           tblptrl	equ	0xFF6
  7008                           tablat	equ	0xFF5
  7009                           prodh	equ	0xFF4
  7010                           prodl	equ	0xFF3
  7011                           intcon	equ	0xFF2
  7012                           intcon3	equ	0xFF0
  7013                           postinc0	equ	0xFEE
  7014                           wreg	equ	0xFE8
  7015                           indf2	equ	0xFDF
  7016                           postinc2	equ	0xFDE
  7017                           postdec2	equ	0xFDD
  7018                           fsr2h	equ	0xFDA
  7019                           fsr2l	equ	0xFD9
  7020                           status	equ	0xFD8
  7021                           
  7022 ;; *************** function _I2C_Master_Wait *****************
  7023 ;; Defined at:
  7024 ;;		line 51 in file "I2C.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;		None
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;		None
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      void 
  7031 ;; Registers used:
  7032 ;;		wreg, status,2, status,0
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7042 ;;Total ram usage:        1 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    4
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_I2C_Master_Start
  7049 ;;		_I2C_Master_Stop
  7050 ;;		_I2C_Master_Write
  7051 ;;		_I2C_Master_Read
  7052 ;;		_I2C_Master_RepeatedStart
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           	psect	text25
  7057  0043CE                     __ptext25:
  7058                           	opt stack 0
  7059  0043CE                     _I2C_Master_Wait:
  7060                           	opt stack 24
  7061                           
  7062                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;incstack = 0
  7066  0043CE  B4C7               	btfsc	4039,2,c	;volatile
  7067  0043D0  D7FE               	goto	_I2C_Master_Wait
  7068  0043D2  CFC5 F0D4          	movff	4037,??_I2C_Master_Wait	;volatile
  7069  0043D6  0E1F               	movlw	31
  7070  0043D8  0100               	movlb	0	; () banked
  7071  0043DA  17D4               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7072  0043DC  B4D8               	btfsc	status,2,c
  7073  0043DE  0012               	return	
  7074  0043E0  D7F6               	goto	_I2C_Master_Wait
  7075  0043E2                     __end_of_I2C_Master_Wait:
  7076                           	opt stack 0
  7077                           tblptru	equ	0xFF8
  7078                           tblptrh	equ	0xFF7
  7079                           tblptrl	equ	0xFF6
  7080                           tablat	equ	0xFF5
  7081                           prodh	equ	0xFF4
  7082                           prodl	equ	0xFF3
  7083                           intcon	equ	0xFF2
  7084                           intcon3	equ	0xFF0
  7085                           postinc0	equ	0xFEE
  7086                           wreg	equ	0xFE8
  7087                           indf2	equ	0xFDF
  7088                           postinc2	equ	0xFDE
  7089                           postdec2	equ	0xFDD
  7090                           fsr2h	equ	0xFDA
  7091                           fsr2l	equ	0xFD9
  7092                           status	equ	0xFD8
  7093                           
  7094 ;; *************** function _count_gear *****************
  7095 ;; Defined at:
  7096 ;;		line 1077 in file "main.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;		None
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;		None
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      void 
  7103 ;; Registers used:
  7104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        1 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    7
  7117 ;; This function calls:
  7118 ;;		_initLCD
  7119 ;;		_lcdInst
  7120 ;;		_printf
  7121 ;;		_readADC
  7122 ;; This function is called by:
  7123 ;;		_main
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           	psect	text26
  7128  003ADE                     __ptext26:
  7129                           	opt stack 0
  7130  003ADE                     _count_gear:
  7131                           	opt stack 23
  7132                           
  7133                           ;main.c: 1079: if (readADC(3)<250){
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;incstack = 0
  7137  003ADE  0E03               	movlw	3
  7138  003AE0  ECC4  F020         	call	_readADC
  7139  003AE4  0100               	movlb	0	; () banked
  7140  003AE6  51D5               	movf	(?_readADC+1)& (0+255),w,b
  7141  003AE8  E134               	bnz	l483
  7142  003AEA  0EFA               	movlw	250
  7143  003AEC  5DD4               	subwf	?_readADC& (0+255),w,b
  7144  003AEE  B0D8               	btfsc	status,0,c
  7145  003AF0  0012               	return	
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;main.c: 1080: if (prev == 0){
  7149  003AF2  51C0               	movf	_prev& (0+255),w,b
  7150  003AF4  11C1               	iorwf	(_prev+1)& (0+255),w,b
  7151  003AF6  A4D8               	btfss	status,2,c
  7152  003AF8  D027               	goto	l480
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;main.c: 1081: initLCD();
  7156  003AFA  EC40  F01F         	call	_initLCD	;wreg free
  7157                           
  7158                           ;main.c: 1082: printf("%d",gear_counter);
  7159  003AFE  0E9D               	movlw	low (STR_42+3)
  7160  003B00  0100               	movlb	0	; () banked
  7161  003B02  6FE2               	movwf	printf@f& (0+255),b
  7162  003B04  0EFF               	movlw	high (STR_42+3)
  7163  003B06  6FE3               	movwf	(printf@f+1)& (0+255),b
  7164  003B08  C0C2  F0E4         	movff	_gear_counter,?_printf+2
  7165  003B0C  C0C3  F0E5         	movff	_gear_counter+1,?_printf+3
  7166  003B10  EC5F  F014         	call	_printf	;wreg free
  7167                           
  7168                           ;main.c: 1083: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7169  003B14  0E80               	movlw	128
  7170  003B16  ECDB  F021         	call	_lcdInst
  7171  003B1A  0E41               	movlw	65
  7172  003B1C  0100               	movlb	0	; () banked
  7173  003B1E  6FF8               	movwf	??_count_gear& (0+255),b
  7174  003B20  0EEE               	movlw	238
  7175  003B22                     u5817:
  7176  003B22  2EE8               	decfsz	wreg,f,c
  7177  003B24  D7FE               	bra	u5817
  7178  003B26  2FF8               	decfsz	??_count_gear& (0+255),f,b
  7179  003B28  D7FC               	bra	u5817
  7180  003B2A  F000               	nop	
  7181                           
  7182                           ;main.c: 1085: gear_counter++;
  7183  003B2C  0100               	movlb	0	; () banked
  7184  003B2E  4BC2               	infsnz	_gear_counter& (0+255),f,b
  7185  003B30  2BC3               	incf	(_gear_counter+1)& (0+255),f,b
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;main.c: 1086: if (white_tape == 1){
  7189  003B32  05CA               	decf	_white_tape& (0+255),w,b
  7190  003B34  11CB               	iorwf	(_white_tape+1)& (0+255),w,b
  7191  003B36  A4D8               	btfss	status,2,c
  7192  003B38  D002               	goto	l481
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;main.c: 1087: init_position ++;
  7196  003B3A  4BFD               	infsnz	_init_position& (0+255),f,b
  7197  003B3C  2BFE               	incf	(_init_position+1)& (0+255),f,b
  7198  003B3E                     l481:
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;main.c: 1089: }
  7202                           ;main.c: 1090: prev = 1;
  7203                           
  7204                           ; BSR set to: 0
  7205  003B3E  0E00               	movlw	0
  7206  003B40  6FC1               	movwf	(_prev+1)& (0+255),b
  7207  003B42  0E01               	movlw	1
  7208  003B44  6FC0               	movwf	_prev& (0+255),b
  7209                           
  7210                           ;main.c: 1091: }
  7211  003B46  0012               	return	
  7212  003B48                     l480:
  7213                           
  7214                           ; BSR set to: 0
  7215                           ;main.c: 1092: else{
  7216                           ;main.c: 1093: prev = 0;
  7217                           
  7218                           ; BSR set to: 0
  7219  003B48  0E00               	movlw	0
  7220  003B4A  6FC1               	movwf	(_prev+1)& (0+255),b
  7221  003B4C  0E00               	movlw	0
  7222  003B4E  6FC0               	movwf	_prev& (0+255),b
  7223                           
  7224                           ; BSR set to: 0
  7225  003B50  0012               	return	
  7226  003B52                     l483:
  7227                           
  7228                           ; BSR set to: 0
  7229  003B52  0012               	return		;funcret
  7230  003B54                     __end_of_count_gear:
  7231                           	opt stack 0
  7232                           tblptru	equ	0xFF8
  7233                           tblptrh	equ	0xFF7
  7234                           tblptrl	equ	0xFF6
  7235                           tablat	equ	0xFF5
  7236                           prodh	equ	0xFF4
  7237                           prodl	equ	0xFF3
  7238                           intcon	equ	0xFF2
  7239                           intcon3	equ	0xFF0
  7240                           postinc0	equ	0xFEE
  7241                           wreg	equ	0xFE8
  7242                           indf2	equ	0xFDF
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           fsr2h	equ	0xFDA
  7246                           fsr2l	equ	0xFD9
  7247                           status	equ	0xFD8
  7248                           
  7249 ;; *************** function _readADC *****************
  7250 ;; Defined at:
  7251 ;;		line 1059 in file "main.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  channel         1    wreg     unsigned char 
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;  channel         1    4[BANK0 ] unsigned char 
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  2    0[BANK0 ] unsigned short 
  7258 ;; Registers used:
  7259 ;;		wreg, status,2, status,0
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7265 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;Total ram usage:        5 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    4
  7272 ;; This function calls:
  7273 ;;		Nothing
  7274 ;; This function is called by:
  7275 ;;		_main
  7276 ;;		_count_gear
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text27
  7281  004188                     __ptext27:
  7282                           	opt stack 0
  7283  004188                     _readADC:
  7284                           	opt stack 26
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;incstack = 0
  7288                           ;readADC@channel stored from wreg
  7289  004188  0100               	movlb	0	; () banked
  7290  00418A  6FD8               	movwf	readADC@channel& (0+255),b
  7291                           
  7292                           ;main.c: 1068: ADCON0 = (channel & 0x0F) << 2;
  7293  00418C  C0D8  F0D6         	movff	readADC@channel,??_readADC
  7294  004190  0E0F               	movlw	15
  7295  004192  0100               	movlb	0	; () banked
  7296  004194  17D6               	andwf	??_readADC& (0+255),f,b
  7297  004196  90D8               	bcf	status,0,c
  7298  004198  37D6               	rlcf	??_readADC& (0+255),f,b
  7299  00419A  90D8               	bcf	status,0,c
  7300  00419C  35D6               	rlcf	??_readADC& (0+255),w,b
  7301  00419E  6EC2               	movwf	4034,c	;volatile
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;main.c: 1069: ADON = 1;
  7305  0041A0  80C2               	bsf	4034,0,c	;volatile
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;main.c: 1070: ADCON0bits.GO = 1;
  7309  0041A2  82C2               	bsf	4034,1,c	;volatile
  7310  0041A4                     
  7311                           ; BSR set to: 0
  7312  0041A4  B2C2               	btfsc	4034,1,c	;volatile
  7313  0041A6  D7FE               	goto	l474
  7314                           
  7315                           ;main.c: 1072: return (ADRESH << 8) | ADRESL;
  7316  0041A8  50C3               	movf	4035,w,c	;volatile
  7317  0041AA  CFC4 F0D6          	movff	4036,??_readADC	;volatile
  7318  0041AE  0100               	movlb	0	; () banked
  7319  0041B0  6BD7               	clrf	(??_readADC+1)& (0+255),b
  7320  0041B2  C0D6  F0D7         	movff	??_readADC,??_readADC+1
  7321  0041B6  6BD6               	clrf	??_readADC& (0+255),b
  7322  0041B8  11D6               	iorwf	??_readADC& (0+255),w,b
  7323  0041BA  6FD4               	movwf	?_readADC& (0+255),b
  7324  0041BC  51D7               	movf	(??_readADC+1)& (0+255),w,b
  7325  0041BE  6FD5               	movwf	(?_readADC+1)& (0+255),b
  7326  0041C0  0012               	return	
  7327  0041C2                     __end_of_readADC:
  7328                           	opt stack 0
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           intcon3	equ	0xFF0
  7337                           postinc0	equ	0xFEE
  7338                           wreg	equ	0xFE8
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           postdec2	equ	0xFDD
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346 ;; *************** function _printf *****************
  7347 ;; Defined at:
  7348 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  7351 ;;		 -> STR_74(3), STR_73(9), STR_72(12), STR_70(7), 
  7352 ;;		 -> STR_68(3), STR_67(11), STR_65(3), STR_64(9), 
  7353 ;;		 -> STR_59(15), STR_58(13), STR_57(16), STR_56(15), 
  7354 ;;		 -> STR_55(15), STR_54(15), STR_53(15), STR_52(10), 
  7355 ;;		 -> STR_51(19), STR_50(17), STR_49(12), STR_48(17), 
  7356 ;;		 -> STR_47(17), STR_46(14), STR_45(15), STR_44(15), 
  7357 ;;		 -> STR_43(6), STR_42(6), STR_41(5), STR_40(4), 
  7358 ;;		 -> STR_39(3), STR_38(5), STR_37(3), STR_36(3), 
  7359 ;;		 -> STR_35(5), STR_34(3), STR_33(3), STR_32(5), 
  7360 ;;		 -> STR_31(3), STR_30(3), STR_29(5), STR_28(3), 
  7361 ;;		 -> STR_27(3), STR_26(8), STR_25(8), STR_24(16), 
  7362 ;;		 -> STR_23(3), STR_22(4), STR_21(3), STR_20(4), 
  7363 ;;		 -> STR_19(3), STR_18(4), STR_17(3), STR_16(4), 
  7364 ;;		 -> STR_15(3), STR_14(3), STR_13(2), STR_12(3), 
  7365 ;;		 -> STR_11(2), STR_10(3), STR_9(5), STR_8(17), 
  7366 ;;		 -> STR_7(6), STR_6(8), STR_5(3), STR_4(14), 
  7367 ;;		 -> STR_3(15), STR_2(14), STR_1(16), 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;  idx             1   22[BANK0 ] unsigned char 
  7370 ;;  tmpval          4    0        struct .
  7371 ;;  width           2   33[BANK0 ] int 
  7372 ;;  val             2   30[BANK0 ] unsigned int 
  7373 ;;  len             2   28[BANK0 ] unsigned int 
  7374 ;;  ap              2   26[BANK0 ] PTR void [1]
  7375 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7376 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  7377 ;;		 -> STR_95(7), number(2), final_set(40), current_set(5), 
  7378 ;;  c               1   35[BANK0 ] char 
  7379 ;;  flag            1   32[BANK0 ] unsigned char 
  7380 ;;  prec            1   23[BANK0 ] char 
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  2   14[BANK0 ] int 
  7383 ;; Registers used:
  7384 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7391 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;Total ram usage:       22 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    6
  7397 ;; This function calls:
  7398 ;;		___lwdiv
  7399 ;;		___lwmod
  7400 ;;		___wmul
  7401 ;;		_isdigit
  7402 ;;		_putch
  7403 ;; This function is called by:
  7404 ;;		_main
  7405 ;;		_count_gear
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           	psect	text28
  7410  0028BE                     __ptext28:
  7411                           	opt stack 0
  7412  0028BE                     _printf:
  7413                           	opt stack 24
  7414                           
  7415                           ;doprnt.c: 466: va_list ap;
  7416                           ;doprnt.c: 499: signed char c;
  7417                           ;doprnt.c: 501: int width;
  7418                           ;doprnt.c: 506: signed char prec;
  7419                           ;doprnt.c: 508: unsigned char flag;
  7420                           ;doprnt.c: 523: union {
  7421                           ;doprnt.c: 524: unsigned long vd;
  7422                           ;doprnt.c: 525: double integ;
  7423                           ;doprnt.c: 526: } tmpval;
  7424                           ;doprnt.c: 528: unsigned int val;
  7425                           ;doprnt.c: 529: unsigned len;
  7426                           ;doprnt.c: 530: const char * cp;
  7427                           ;doprnt.c: 533: *ap = __va_start();
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;incstack = 0
  7431  0028BE  0EE4               	movlw	low (?_printf+2)
  7432  0028C0  0100               	movlb	0	; () banked
  7433  0028C2  6FEE               	movwf	printf@ap& (0+255),b
  7434  0028C4  0E00               	movlw	high (?_printf+2)
  7435  0028C6  6FEF               	movwf	(printf@ap+1)& (0+255),b
  7436                           
  7437                           ;doprnt.c: 536: while(c = *f++) {
  7438  0028C8  D20F               	goto	u3020
  7439  0028CA                     
  7440                           ; BSR set to: 0
  7441                           ;doprnt.c: 538: if(c != '%')
  7442                           
  7443                           ; BSR set to: 0
  7444  0028CA  0E25               	movlw	37
  7445  0028CC  19F7               	xorwf	printf@c& (0+255),w,b
  7446  0028CE  B4D8               	btfsc	status,2,c
  7447  0028D0  D004               	goto	l808
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;doprnt.c: 540: {
  7451                           ;doprnt.c: 541: (putch(c) );
  7452  0028D2  51F7               	movf	printf@c& (0+255),w,b
  7453  0028D4  ECCF  F021         	call	_putch
  7454                           
  7455                           ;doprnt.c: 542: continue;
  7456  0028D8  D207               	goto	u3020
  7457  0028DA                     l808:
  7458                           
  7459                           ;doprnt.c: 543: }
  7460                           ;doprnt.c: 546: width = 0;
  7461  0028DA  0E00               	movlw	0
  7462  0028DC  0100               	movlb	0	; () banked
  7463  0028DE  6FF6               	movwf	(printf@width+1)& (0+255),b
  7464  0028E0  0E00               	movlw	0
  7465  0028E2  6FF5               	movwf	printf@width& (0+255),b
  7466                           
  7467                           ;doprnt.c: 548: flag = 0;
  7468  0028E4  0E00               	movlw	0
  7469  0028E6  6FF4               	movwf	printf@flag& (0+255),b
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;doprnt.c: 551: switch(*f) {
  7473                           
  7474                           ;doprnt.c: 550: for(;;) {
  7475  0028E8  D004               	goto	l810
  7476  0028EA                     
  7477                           ;doprnt.c: 580: flag |= 0x04;
  7478                           
  7479                           ; BSR set to: 0
  7480  0028EA  0100               	movlb	0	; () banked
  7481  0028EC  85F4               	bsf	printf@flag& (0+255),2,b
  7482                           
  7483                           ;doprnt.c: 581: f++;
  7484  0028EE  4BE2               	infsnz	printf@f& (0+255),f,b
  7485  0028F0  2BE3               	incf	(printf@f+1)& (0+255),f,b
  7486  0028F2                     l810:
  7487                           
  7488                           ; BSR set to: 0
  7489  0028F2  C0E2  FFF6         	movff	printf@f,tblptrl
  7490  0028F6  C0E3  FFF7         	movff	printf@f+1,tblptrh
  7491  0028FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7492  0028FA  6AF8               	clrf	tblptru,c
  7493  0028FC                     	endif
  7494  0028FC                     	if	0	;tblptru may be non-zero
  7495  0028FC                     	endif
  7496  0028FC  0008               	tblrd		*
  7497  0028FE  50F5               	movf	tablat,w,c
  7498                           
  7499                           ; Switch size 1, requested type "space"
  7500                           ; Number of cases is 1, Range of values is 48 to 48
  7501                           ; switch strategies available:
  7502                           ; Name         Instructions Cycles
  7503                           ; simple_byte            4     3 (average)
  7504                           ;	Chosen strategy is simple_byte
  7505  002900  0A30               	xorlw	48	; case 48
  7506  002902  B4D8               	btfsc	status,2,c
  7507  002904  D7F2               	goto	l811
  7508                           
  7509                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7510                           
  7511                           ;doprnt.c: 586: }
  7512                           
  7513                           ;doprnt.c: 585: break;
  7514  002906  C0E2  FFF6         	movff	printf@f,tblptrl
  7515  00290A  C0E3  FFF7         	movff	printf@f+1,tblptrh
  7516  00290E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7517  00290E  6AF8               	clrf	tblptru,c
  7518  002910                     	endif
  7519  002910                     	if	0	;tblptru may be non-zero
  7520  002910                     	endif
  7521  002910  0008               	tblrd		*
  7522  002912  50F5               	movf	tablat,w,c
  7523  002914  EC2F  F021         	call	_isdigit
  7524  002918  A0D8               	btfss	status,0,c
  7525  00291A  D0AE               	goto	l818
  7526                           
  7527                           ;doprnt.c: 598: width = 0;
  7528  00291C  0E00               	movlw	0
  7529  00291E  0100               	movlb	0	; () banked
  7530  002920  6FF6               	movwf	(printf@width+1)& (0+255),b
  7531  002922  0E00               	movlw	0
  7532  002924  6FF5               	movwf	printf@width& (0+255),b
  7533  002926                     
  7534                           ;doprnt.c: 600: width *= 10;
  7535                           
  7536                           ; BSR set to: 0
  7537  002926  C0F5  F0DC         	movff	printf@width,___wmul@multiplier
  7538  00292A  C0F6  F0DD         	movff	printf@width+1,___wmul@multiplier+1
  7539  00292E  0E00               	movlw	0
  7540  002930  0100               	movlb	0	; () banked
  7541  002932  6FDF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7542  002934  0E0A               	movlw	10
  7543  002936  6FDE               	movwf	___wmul@multiplicand& (0+255),b
  7544  002938  ECF6  F020         	call	___wmul	;wreg free
  7545  00293C  C0DC  F0F5         	movff	?___wmul,printf@width
  7546  002940  C0DD  F0F6         	movff	?___wmul+1,printf@width+1
  7547                           
  7548                           ;doprnt.c: 601: width += *f++ - '0';
  7549  002944  0ED0               	movlw	208
  7550  002946  0100               	movlb	0	; () banked
  7551  002948  6FE6               	movwf	??_printf& (0+255),b
  7552  00294A  0EFF               	movlw	255
  7553  00294C  6FE7               	movwf	(??_printf+1)& (0+255),b
  7554  00294E  C0E2  FFF6         	movff	printf@f,tblptrl
  7555  002952  C0E3  FFF7         	movff	printf@f+1,tblptrh
  7556  002956                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7557  002956  6AF8               	clrf	tblptru,c
  7558  002958                     	endif
  7559  002958                     	if	0	;tblptru may be non-zero
  7560  002958                     	endif
  7561  002958  0008               	tblrd		*
  7562  00295A  50F5               	movf	tablat,w,c
  7563  00295C  6FE8               	movwf	(??_printf+2)& (0+255),b
  7564  00295E  6BE9               	clrf	(??_printf+3)& (0+255),b
  7565  002960  51E6               	movf	??_printf& (0+255),w,b
  7566  002962  27E8               	addwf	(??_printf+2)& (0+255),f,b
  7567  002964  51E7               	movf	(??_printf+1)& (0+255),w,b
  7568  002966  23E9               	addwfc	(??_printf+3)& (0+255),f,b
  7569  002968  51E8               	movf	(??_printf+2)& (0+255),w,b
  7570  00296A  27F5               	addwf	printf@width& (0+255),f,b
  7571  00296C  51E9               	movf	(??_printf+3)& (0+255),w,b
  7572  00296E  23F6               	addwfc	(printf@width+1)& (0+255),f,b
  7573                           
  7574                           ; BSR set to: 0
  7575  002970  4BE2               	infsnz	printf@f& (0+255),f,b
  7576  002972  2BE3               	incf	(printf@f+1)& (0+255),f,b
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7580  002974  C0E2  FFF6         	movff	printf@f,tblptrl
  7581  002978  C0E3  FFF7         	movff	printf@f+1,tblptrh
  7582  00297C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7583  00297C  6AF8               	clrf	tblptru,c
  7584  00297E                     	endif
  7585  00297E                     	if	0	;tblptru may be non-zero
  7586  00297E                     	endif
  7587  00297E  0008               	tblrd		*
  7588  002980  50F5               	movf	tablat,w,c
  7589  002982  EC2F  F021         	call	_isdigit
  7590  002986  A0D8               	btfss	status,0,c
  7591  002988  D077               	goto	l818
  7592  00298A  D7CD               	goto	l816
  7593  00298C                     
  7594                           ;doprnt.c: 721: flag |= 0x80;
  7595  00298C  0100               	movlb	0	; () banked
  7596  00298E  8FF4               	bsf	printf@flag& (0+255),7,b
  7597                           
  7598                           ;doprnt.c: 723: break;
  7599  002990  D08F               	goto	l823
  7600  002992                     
  7601                           ; BSR set to: 0
  7602                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7603                           
  7604                           ; BSR set to: 0
  7605  002992  C0EE  FFD9         	movff	printf@ap,fsr2l
  7606  002996  C0EF  FFDA         	movff	printf@ap+1,fsr2h
  7607  00299A  CFDE F0EC          	movff	postinc2,printf@cp
  7608  00299E  CFDD F0ED          	movff	postdec2,printf@cp+1
  7609                           
  7610                           ; BSR set to: 0
  7611  0029A2  0E02               	movlw	2
  7612  0029A4  27EE               	addwf	printf@ap& (0+255),f,b
  7613  0029A6  0E00               	movlw	0
  7614  0029A8  23EF               	addwfc	(printf@ap+1)& (0+255),f,b
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;doprnt.c: 740: if(!cp)
  7618  0029AA  51EC               	movf	printf@cp& (0+255),w,b
  7619  0029AC  11ED               	iorwf	(printf@cp+1)& (0+255),w,b
  7620  0029AE  A4D8               	btfss	status,2,c
  7621  0029B0  D004               	goto	l826
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;doprnt.c: 741: cp = "(null)";
  7625  0029B2  0E86               	movlw	low STR_95
  7626  0029B4  6FEC               	movwf	printf@cp& (0+255),b
  7627  0029B6  0EFF               	movlw	high STR_95
  7628  0029B8  6FED               	movwf	(printf@cp+1)& (0+255),b
  7629  0029BA                     l826:
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;doprnt.c: 745: len = 0;
  7633                           
  7634                           ; BSR set to: 0
  7635  0029BA  0E00               	movlw	0
  7636  0029BC  6FF1               	movwf	(printf@len+1)& (0+255),b
  7637  0029BE  0E00               	movlw	0
  7638  0029C0  6FF0               	movwf	printf@len& (0+255),b
  7639                           
  7640                           ;doprnt.c: 746: while(cp[len])
  7641  0029C2  D003               	goto	l827
  7642  0029C4                     
  7643                           ;doprnt.c: 747: len++;
  7644                           
  7645                           ; BSR set to: 0
  7646  0029C4  0100               	movlb	0	; () banked
  7647  0029C6  4BF0               	infsnz	printf@len& (0+255),f,b
  7648  0029C8  2BF1               	incf	(printf@len+1)& (0+255),f,b
  7649  0029CA                     l827:
  7650                           
  7651                           ; BSR set to: 0
  7652                           
  7653                           ; BSR set to: 0
  7654  0029CA  51F0               	movf	printf@len& (0+255),w,b
  7655  0029CC  25EC               	addwf	printf@cp& (0+255),w,b
  7656  0029CE  6FE6               	movwf	??_printf& (0+255),b
  7657  0029D0  51F1               	movf	(printf@len+1)& (0+255),w,b
  7658  0029D2  21ED               	addwfc	(printf@cp+1)& (0+255),w,b
  7659  0029D4  6FE7               	movwf	(??_printf+1)& (0+255),b
  7660  0029D6  C0E6  FFF6         	movff	??_printf,tblptrl
  7661  0029DA  C0E7  FFF7         	movff	??_printf+1,tblptrh
  7662  0029DE  0E00               	movlw	low (__mediumconst shr (0+16))
  7663  0029E0  6EF8               	movwf	tblptru,c
  7664  0029E2  0E0F               	movlw	(high __ramtop+-1)
  7665  0029E4  64F7               	cpfsgt	tblptrh,c
  7666  0029E6  D003               	bra	u2787
  7667  0029E8  0008               	tblrd		*
  7668  0029EA  50F5               	movf	tablat,w,c
  7669  0029EC  D005               	bra	u2780
  7670  0029EE                     u2787:
  7671  0029EE  CFF6 FFE9          	movff	tblptrl,fsr0l
  7672  0029F2  CFF7 FFEA          	movff	tblptrh,fsr0h
  7673  0029F6  50EF               	movf	indf0,w,c
  7674  0029F8                     u2780:
  7675  0029F8  0900               	iorlw	0
  7676  0029FA  A4D8               	btfss	status,2,c
  7677  0029FC  D7E3               	goto	l828
  7678                           
  7679                           ;doprnt.c: 757: if(width > len)
  7680  0029FE  0100               	movlb	0	; () banked
  7681  002A00  51F5               	movf	printf@width& (0+255),w,b
  7682  002A02  5DF0               	subwf	printf@len& (0+255),w,b
  7683  002A04  51F6               	movf	(printf@width+1)& (0+255),w,b
  7684  002A06  59F1               	subwfb	(printf@len+1)& (0+255),w,b
  7685  002A08  B0D8               	btfsc	status,0,c
  7686  002A0A  D005               	goto	l830
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;doprnt.c: 758: width -= len;
  7690  002A0C  51F0               	movf	printf@len& (0+255),w,b
  7691  002A0E  5FF5               	subwf	printf@width& (0+255),f,b
  7692  002A10  51F1               	movf	(printf@len+1)& (0+255),w,b
  7693  002A12  5BF6               	subwfb	(printf@width+1)& (0+255),f,b
  7694  002A14  D008               	goto	l832
  7695  002A16                     l830:
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;doprnt.c: 759: else
  7699                           ;doprnt.c: 760: width = 0;
  7700                           
  7701                           ; BSR set to: 0
  7702  002A16  0E00               	movlw	0
  7703  002A18  6FF6               	movwf	(printf@width+1)& (0+255),b
  7704  002A1A  0E00               	movlw	0
  7705  002A1C  6FF5               	movwf	printf@width& (0+255),b
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;doprnt.c: 764: while(width--)
  7709  002A1E  D003               	goto	l832
  7710  002A20                     l4076:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;doprnt.c: 765: (putch(' ') );
  7714  002A20  0E20               	movlw	32
  7715  002A22  ECCF  F021         	call	_putch
  7716  002A26                     l832:
  7717  002A26  0100               	movlb	0	; () banked
  7718  002A28  07F5               	decf	printf@width& (0+255),f,b
  7719  002A2A  A0D8               	btfss	status,0,c
  7720  002A2C  07F6               	decf	(printf@width+1)& (0+255),f,b
  7721  002A2E  29F5               	incf	printf@width& (0+255),w,b
  7722  002A30  E1F7               	bnz	l4076
  7723  002A32  29F6               	incf	(printf@width+1)& (0+255),w,b
  7724  002A34  B4D8               	btfsc	status,2,c
  7725  002A36  D017               	goto	l835
  7726  002A38  D7F3               	goto	l833
  7727  002A3A                     l4080:
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;doprnt.c: 768: (putch(*cp++) );
  7731  002A3A  C0EC  FFF6         	movff	printf@cp,tblptrl
  7732  002A3E  C0ED  FFF7         	movff	printf@cp+1,tblptrh
  7733  002A42  0E00               	movlw	low (__mediumconst shr (0+16))
  7734  002A44  6EF8               	movwf	tblptru,c
  7735  002A46  0E0F               	movlw	(high __ramtop+-1)
  7736  002A48  64F7               	cpfsgt	tblptrh,c
  7737  002A4A  D003               	bra	u2827
  7738  002A4C  0008               	tblrd		*
  7739  002A4E  50F5               	movf	tablat,w,c
  7740  002A50  D005               	bra	u2820
  7741  002A52                     u2827:
  7742  002A52  CFF6 FFE9          	movff	tblptrl,fsr0l
  7743  002A56  CFF7 FFEA          	movff	tblptrh,fsr0h
  7744  002A5A  50EF               	movf	indf0,w,c
  7745  002A5C                     u2820:
  7746  002A5C  ECCF  F021         	call	_putch
  7747  002A60  0100               	movlb	0	; () banked
  7748  002A62  4BEC               	infsnz	printf@cp& (0+255),f,b
  7749  002A64  2BED               	incf	(printf@cp+1)& (0+255),f,b
  7750  002A66                     l835:
  7751                           
  7752                           ; BSR set to: 0
  7753                           
  7754                           ; BSR set to: 0
  7755  002A66  07F0               	decf	printf@len& (0+255),f,b
  7756  002A68  A0D8               	btfss	status,0,c
  7757  002A6A  07F1               	decf	(printf@len+1)& (0+255),f,b
  7758  002A6C  29F0               	incf	printf@len& (0+255),w,b
  7759  002A6E  E1E5               	bnz	l4080
  7760  002A70  29F1               	incf	(printf@len+1)& (0+255),w,b
  7761  002A72  B4D8               	btfsc	status,2,c
  7762  002A74  D139               	goto	u3020
  7763  002A76  D7E1               	goto	l836
  7764  002A78                     l818:
  7765                           
  7766                           ; BSR set to: 0
  7767  002A78  C0E2  FFF6         	movff	printf@f,tblptrl
  7768  002A7C  C0E3  FFF7         	movff	printf@f+1,tblptrh
  7769  002A80  0100               	movlb	0	; () banked
  7770  002A82  4BE2               	infsnz	printf@f& (0+255),f,b
  7771  002A84  2BE3               	incf	(printf@f+1)& (0+255),f,b
  7772  002A86                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7773  002A86  6AF8               	clrf	tblptru,c
  7774  002A88                     	endif
  7775  002A88                     	if	0	;tblptru may be non-zero
  7776  002A88                     	endif
  7777  002A88  0008               	tblrd		*
  7778  002A8A  CFF5 F0F7          	movff	tablat,printf@c
  7779  002A8E  51F7               	movf	printf@c& (0+255),w,b
  7780                           
  7781                           ; Switch size 1, requested type "space"
  7782                           ; Number of cases is 5, Range of values is 0 to 120
  7783                           ; switch strategies available:
  7784                           ; Name         Instructions Cycles
  7785                           ; simple_byte           16     9 (average)
  7786                           ;	Chosen strategy is simple_byte
  7787  002A90  0A00               	xorlw	0	; case 0
  7788  002A92  B4D8               	btfsc	status,2,c
  7789  002A94  0012               	return	
  7790  002A96  0A64               	xorlw	100	; case 100
  7791  002A98  B4D8               	btfsc	status,2,c
  7792  002A9A  D00A               	goto	l823
  7793  002A9C  0A0D               	xorlw	13	; case 105
  7794  002A9E  B4D8               	btfsc	status,2,c
  7795  002AA0  D007               	goto	l823
  7796  002AA2  0A1A               	xorlw	26	; case 115
  7797  002AA4  B4D8               	btfsc	status,2,c
  7798  002AA6  D775               	goto	l825
  7799  002AA8  0A0B               	xorlw	11	; case 120
  7800  002AAA  B4D8               	btfsc	status,2,c
  7801  002AAC  D76F               	goto	l824
  7802  002AAE  D11C               	goto	u3020
  7803  002AB0                     l823:
  7804                           
  7805                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7806  002AB0  0100               	movlb	0	; () banked
  7807  002AB2  BFF4               	btfsc	printf@flag& (0+255),7,b
  7808  002AB4  D015               	goto	l839
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;doprnt.c: 1253: {
  7812                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7813  002AB6  C0EE  FFD9         	movff	printf@ap,fsr2l
  7814  002ABA  C0EF  FFDA         	movff	printf@ap+1,fsr2h
  7815  002ABE  CFDE F0F2          	movff	postinc2,printf@val
  7816  002AC2  CFDD F0F3          	movff	postdec2,printf@val+1
  7817                           
  7818                           ; BSR set to: 0
  7819  002AC6  0E02               	movlw	2
  7820  002AC8  27EE               	addwf	printf@ap& (0+255),f,b
  7821  002ACA  0E00               	movlw	0
  7822  002ACC  23EF               	addwfc	(printf@ap+1)& (0+255),f,b
  7823                           
  7824                           ; BSR set to: 0
  7825                           ;doprnt.c: 1261: if((int)val < 0) {
  7826  002ACE  AFF3               	btfss	(printf@val+1)& (0+255),7,b
  7827  002AD0  D04A               	goto	l842
  7828                           
  7829                           ; BSR set to: 0
  7830                           ;doprnt.c: 1262: flag |= 0x03;
  7831  002AD2  0E03               	movlw	3
  7832  002AD4  13F4               	iorwf	printf@flag& (0+255),f,b
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;doprnt.c: 1263: val = -val;
  7836  002AD6  6DF2               	negf	printf@val& (0+255),b
  7837  002AD8  1FF3               	comf	(printf@val+1)& (0+255),f,b
  7838  002ADA  B0D8               	btfsc	status,0,c
  7839  002ADC  2BF3               	incf	(printf@val+1)& (0+255),f,b
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;doprnt.c: 1264: }
  7843                           ;doprnt.c: 1266: }
  7844  002ADE  D043               	goto	l842
  7845  002AE0                     l839:
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;doprnt.c: 1268: else
  7849                           ;doprnt.c: 1273: {
  7850                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7851                           
  7852                           ; BSR set to: 0
  7853  002AE0  C0EE  FFD9         	movff	printf@ap,fsr2l
  7854  002AE4  C0EF  FFDA         	movff	printf@ap+1,fsr2h
  7855  002AE8  CFDE F0F2          	movff	postinc2,printf@val
  7856  002AEC  CFDD F0F3          	movff	postdec2,printf@val+1
  7857                           
  7858                           ; BSR set to: 0
  7859  002AF0  0E02               	movlw	2
  7860  002AF2  27EE               	addwf	printf@ap& (0+255),f,b
  7861  002AF4  0E00               	movlw	0
  7862  002AF6  23EF               	addwfc	(printf@ap+1)& (0+255),f,b
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;doprnt.c: 1287: }
  7866                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7867  002AF8  D036               	goto	l842
  7868  002AFA                     
  7869                           ; BSR set to: 0
  7870                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7871                           
  7872                           ; BSR set to: 0
  7873  002AFA  0E01               	movlw	1
  7874  002AFC  6FF7               	movwf	printf@c& (0+255),b
  7875  002AFE                     l4106:
  7876                           
  7877                           ; BSR set to: 0
  7878  002AFE  0E05               	movlw	5
  7879  002B00  19F7               	xorwf	printf@c& (0+255),w,b
  7880  002B02  B4D8               	btfsc	status,2,c
  7881  002B04  D038               	goto	l847
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;doprnt.c: 1306: if(val < dpowers[c])
  7885                           
  7886                           ; BSR set to: 0
  7887                           
  7888                           ; BSR set to: 0
  7889  002B06  51F7               	movf	printf@c& (0+255),w,b
  7890  002B08  0D02               	mullw	2
  7891  002B0A  0E88               	movlw	low _dpowers
  7892  002B0C  24F3               	addwf	prodl,w,c
  7893  002B0E  6EF6               	movwf	tblptrl,c
  7894  002B10  0EFD               	movlw	high _dpowers
  7895  002B12  20F4               	addwfc	prodh,w,c
  7896  002B14  6EF7               	movwf	tblptrh,c
  7897  002B16                     	if	1	;There are 3 active tblptr bytes
  7898  002B16  6AF8               	clrf	tblptru,c
  7899  002B18  0E00               	movlw	low (__mediumconst shr (0+16))
  7900  002B1A  22F8               	addwfc	tblptru,f,c
  7901  002B1C                     	endif
  7902  002B1C  0009               	tblrd		*+
  7903  002B1E  50F5               	movf	tablat,w,c
  7904  002B20  5DF2               	subwf	printf@val& (0+255),w,b
  7905  002B22  0009               	tblrd		*+
  7906  002B24  50F5               	movf	tablat,w,c
  7907  002B26  59F3               	subwfb	(printf@val+1)& (0+255),w,b
  7908  002B28  A0D8               	btfss	status,0,c
  7909  002B2A  D025               	goto	l847
  7910                           
  7911                           ; BSR set to: 0
  7912                           
  7913                           ; BSR set to: 0
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;doprnt.c: 1307: break;
  7917  002B2C  2BF7               	incf	printf@c& (0+255),f,b
  7918  002B2E  D7E7               	goto	l4106
  7919  002B30                     
  7920                           ; BSR set to: 0
  7921                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7922                           
  7923                           ; BSR set to: 0
  7924  002B30  0E01               	movlw	1
  7925  002B32  6FF7               	movwf	printf@c& (0+255),b
  7926  002B34                     l4120:
  7927                           
  7928                           ; BSR set to: 0
  7929  002B34  0E04               	movlw	4
  7930  002B36  19F7               	xorwf	printf@c& (0+255),w,b
  7931  002B38  B4D8               	btfsc	status,2,c
  7932  002B3A  D01D               	goto	l847
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7936                           
  7937                           ; BSR set to: 0
  7938                           
  7939                           ; BSR set to: 0
  7940  002B3C  51F7               	movf	printf@c& (0+255),w,b
  7941  002B3E  0D02               	mullw	2
  7942  002B40  0E92               	movlw	low _hexpowers
  7943  002B42  24F3               	addwf	prodl,w,c
  7944  002B44  6EF6               	movwf	tblptrl,c
  7945  002B46  0EFD               	movlw	high _hexpowers
  7946  002B48  20F4               	addwfc	prodh,w,c
  7947  002B4A  6EF7               	movwf	tblptrh,c
  7948  002B4C                     	if	1	;There are 3 active tblptr bytes
  7949  002B4C  6AF8               	clrf	tblptru,c
  7950  002B4E  0E00               	movlw	low (__mediumconst shr (0+16))
  7951  002B50  22F8               	addwfc	tblptru,f,c
  7952  002B52                     	endif
  7953  002B52  0009               	tblrd		*+
  7954  002B54  50F5               	movf	tablat,w,c
  7955  002B56  5DF2               	subwf	printf@val& (0+255),w,b
  7956  002B58  0009               	tblrd		*+
  7957  002B5A  50F5               	movf	tablat,w,c
  7958  002B5C  59F3               	subwfb	(printf@val+1)& (0+255),w,b
  7959  002B5E  A0D8               	btfss	status,0,c
  7960  002B60  D00A               	goto	l847
  7961                           
  7962                           ; BSR set to: 0
  7963                           
  7964                           ; BSR set to: 0
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;doprnt.c: 1318: break;
  7968  002B62  2BF7               	incf	printf@c& (0+255),f,b
  7969  002B64  D7E7               	goto	l4120
  7970  002B66                     l842:
  7971                           
  7972                           ; BSR set to: 0
  7973                           
  7974                           ; BSR set to: 0
  7975  002B66  51F4               	movf	printf@flag& (0+255),w,b
  7976  002B68  0B80               	andlw	128
  7977                           
  7978                           ; Switch size 1, requested type "space"
  7979                           ; Number of cases is 2, Range of values is 0 to 128
  7980                           ; switch strategies available:
  7981                           ; Name         Instructions Cycles
  7982                           ; simple_byte            7     4 (average)
  7983                           ;	Chosen strategy is simple_byte
  7984  002B6A  0A00               	xorlw	0	; case 0
  7985  002B6C  B4D8               	btfsc	status,2,c
  7986  002B6E  D7C5               	goto	l843
  7987  002B70  0A80               	xorlw	128	; case 128
  7988  002B72  B4D8               	btfsc	status,2,c
  7989  002B74  D7DD               	goto	l848
  7990  002B76                     l847:
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7994                           
  7995                           ; BSR set to: 0
  7996  002B76  51F5               	movf	printf@width& (0+255),w,b
  7997  002B78  11F6               	iorwf	(printf@width+1)& (0+255),w,b
  7998  002B7A  B4D8               	btfsc	status,2,c
  7999  002B7C  D009               	goto	l852
  8000                           
  8001                           ; BSR set to: 0
  8002  002B7E  C0F4  F0E6         	movff	printf@flag,??_printf
  8003  002B82  0E03               	movlw	3
  8004  002B84  17E6               	andwf	??_printf& (0+255),f,b
  8005  002B86  B4D8               	btfsc	status,2,c
  8006  002B88  D003               	goto	l852
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;doprnt.c: 1346: width--;
  8010  002B8A  07F5               	decf	printf@width& (0+255),f,b
  8011  002B8C  A0D8               	btfss	status,0,c
  8012  002B8E  07F6               	decf	(printf@width+1)& (0+255),f,b
  8013  002B90                     l852:
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;doprnt.c: 1381: if(width > c)
  8017                           
  8018                           ; BSR set to: 0
  8019  002B90  0E80               	movlw	128
  8020  002B92  BFF7               	btfsc	printf@c& (0+255),7,b
  8021  002B94  0E7F               	movlw	127
  8022  002B96  6FE6               	movwf	??_printf& (0+255),b
  8023  002B98  51F5               	movf	printf@width& (0+255),w,b
  8024  002B9A  5DF7               	subwf	printf@c& (0+255),w,b
  8025  002B9C  51F6               	movf	(printf@width+1)& (0+255),w,b
  8026  002B9E  0A80               	xorlw	128
  8027  002BA0  59E6               	subwfb	??_printf& (0+255),w,b
  8028  002BA2  B0D8               	btfsc	status,0,c
  8029  002BA4  D007               	goto	l853
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;doprnt.c: 1382: width -= c;
  8033  002BA6  51F7               	movf	printf@c& (0+255),w,b
  8034  002BA8  5FF5               	subwf	printf@width& (0+255),f,b
  8035  002BAA  0E00               	movlw	0
  8036  002BAC  BFF7               	btfsc	printf@c& (0+255),7,b
  8037  002BAE  0EFF               	movlw	255
  8038  002BB0  5BF6               	subwfb	(printf@width+1)& (0+255),f,b
  8039  002BB2  D004               	goto	l854
  8040  002BB4                     l853:
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;doprnt.c: 1383: else
  8044                           ;doprnt.c: 1384: width = 0;
  8045                           
  8046                           ; BSR set to: 0
  8047  002BB4  0E00               	movlw	0
  8048  002BB6  6FF6               	movwf	(printf@width+1)& (0+255),b
  8049  002BB8  0E00               	movlw	0
  8050  002BBA  6FF5               	movwf	printf@width& (0+255),b
  8051  002BBC                     l854:
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;doprnt.c: 1387: if(flag & 0x04) {
  8055                           
  8056                           ; BSR set to: 0
  8057  002BBC  A5F4               	btfss	printf@flag& (0+255),2,b
  8058  002BBE  D016               	goto	l855
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;doprnt.c: 1392: if(flag & 0x03)
  8062  002BC0  C0F4  F0E6         	movff	printf@flag,??_printf
  8063  002BC4  0E03               	movlw	3
  8064  002BC6  17E6               	andwf	??_printf& (0+255),f,b
  8065  002BC8  B4D8               	btfsc	status,2,c
  8066  002BCA  D003               	goto	l856
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;doprnt.c: 1393: (putch('-') );
  8070  002BCC  0E2D               	movlw	45
  8071  002BCE  ECCF  F021         	call	_putch
  8072  002BD2                     l856:
  8073                           
  8074                           ;doprnt.c: 1415: if(width)
  8075  002BD2  0100               	movlb	0	; () banked
  8076  002BD4  51F5               	movf	printf@width& (0+255),w,b
  8077  002BD6  11F6               	iorwf	(printf@width+1)& (0+255),w,b
  8078  002BD8  B4D8               	btfsc	status,2,c
  8079  002BDA  D020               	goto	l864
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;doprnt.c: 1417: (putch('0') );
  8083                           
  8084                           ; BSR set to: 0
  8085                           
  8086                           ;doprnt.c: 1416: do
  8087  002BDC  0E30               	movlw	48
  8088  002BDE  ECCF  F021         	call	_putch
  8089                           
  8090                           ;doprnt.c: 1418: while(--width);
  8091  002BE2  0100               	movlb	0	; () banked
  8092  002BE4  07F5               	decf	printf@width& (0+255),f,b
  8093  002BE6  A0D8               	btfss	status,0,c
  8094  002BE8  07F6               	decf	(printf@width+1)& (0+255),f,b
  8095  002BEA  D7F4               	goto	L12
  8096  002BEC                     l855:
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;doprnt.c: 1422: {
  8100                           ;doprnt.c: 1424: if(width
  8101                           ;doprnt.c: 1428: )
  8102                           
  8103                           ; BSR set to: 0
  8104  002BEC  51F5               	movf	printf@width& (0+255),w,b
  8105  002BEE  11F6               	iorwf	(printf@width+1)& (0+255),w,b
  8106  002BF0  B4D8               	btfsc	status,2,c
  8107  002BF2  D00B               	goto	u3000
  8108  002BF4                     u2990:
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;doprnt.c: 1430: (putch(' ') );
  8112                           
  8113                           ; BSR set to: 0
  8114                           
  8115                           ;doprnt.c: 1429: do
  8116  002BF4  0E20               	movlw	32
  8117  002BF6  ECCF  F021         	call	_putch
  8118                           
  8119                           ;doprnt.c: 1431: while(--width);
  8120  002BFA  0100               	movlb	0	; () banked
  8121  002BFC  07F5               	decf	printf@width& (0+255),f,b
  8122  002BFE  A0D8               	btfss	status,0,c
  8123  002C00  07F6               	decf	(printf@width+1)& (0+255),f,b
  8124  002C02  51F5               	movf	printf@width& (0+255),w,b
  8125  002C04  11F6               	iorwf	(printf@width+1)& (0+255),w,b
  8126  002C06  A4D8               	btfss	status,2,c
  8127  002C08  D7F5               	goto	u2990
  8128  002C0A                     u3000:
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;doprnt.c: 1438: if(flag & 0x03)
  8132                           
  8133                           ; BSR set to: 0
  8134                           
  8135                           ; BSR set to: 0
  8136  002C0A  C0F4  F0E6         	movff	printf@flag,??_printf
  8137  002C0E  0E03               	movlw	3
  8138  002C10  17E6               	andwf	??_printf& (0+255),f,b
  8139  002C12  B4D8               	btfsc	status,2,c
  8140  002C14  D003               	goto	l864
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;doprnt.c: 1439: (putch('-') );
  8144  002C16  0E2D               	movlw	45
  8145  002C18  ECCF  F021         	call	_putch
  8146  002C1C                     l864:
  8147                           
  8148                           ;doprnt.c: 1469: }
  8149                           ;doprnt.c: 1472: prec = c;
  8150  002C1C  C0F7  F0EB         	movff	printf@c,printf@prec
  8151                           
  8152                           ;doprnt.c: 1474: while(prec--) {
  8153  002C20  D05E               	goto	l865
  8154  002C22                     
  8155                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8156  002C22  0100               	movlb	0	; () banked
  8157  002C24  51EB               	movf	printf@prec& (0+255),w,b
  8158  002C26  0D02               	mullw	2
  8159  002C28  0E88               	movlw	low _dpowers
  8160  002C2A  24F3               	addwf	prodl,w,c
  8161  002C2C  6EF6               	movwf	tblptrl,c
  8162  002C2E  0EFD               	movlw	high _dpowers
  8163  002C30  20F4               	addwfc	prodh,w,c
  8164  002C32  6EF7               	movwf	tblptrh,c
  8165  002C34                     	if	1	;There are 3 active tblptr bytes
  8166  002C34  6AF8               	clrf	tblptru,c
  8167  002C36  0E00               	movlw	low (__mediumconst shr (0+16))
  8168  002C38  22F8               	addwfc	tblptru,f,c
  8169  002C3A                     	endif
  8170  002C3A  0009               	tblrd		*+
  8171  002C3C  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  8172  002C40  000A               	tblrd		*-
  8173  002C42  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  8174  002C46  C0F2  F0D4         	movff	printf@val,___lwdiv@dividend
  8175  002C4A  C0F3  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  8176  002C4E  EC72  F01E         	call	___lwdiv	;wreg free
  8177  002C52  C0D4  F0DB         	movff	?___lwdiv,___lwmod@dividend
  8178  002C56  C0D5  F0DC         	movff	?___lwdiv+1,___lwmod@dividend+1
  8179  002C5A  0E00               	movlw	0
  8180  002C5C  0100               	movlb	0	; () banked
  8181  002C5E  6FDE               	movwf	(___lwmod@divisor+1)& (0+255),b
  8182  002C60  0E0A               	movlw	10
  8183  002C62  6FDD               	movwf	___lwmod@divisor& (0+255),b
  8184  002C64  EC60  F020         	call	___lwmod	;wreg free
  8185  002C68  0100               	movlb	0	; () banked
  8186  002C6A  51DB               	movf	?___lwmod& (0+255),w,b
  8187  002C6C  0F30               	addlw	48
  8188  002C6E  6FF7               	movwf	printf@c& (0+255),b
  8189                           
  8190                           ;doprnt.c: 1491: break;
  8191  002C70  D033               	goto	l869
  8192  002C72                     
  8193                           ; BSR set to: 0
  8194                           ;doprnt.c: 1499: {
  8195                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8196                           
  8197                           ; BSR set to: 0
  8198  002C72  C0F2  F0D4         	movff	printf@val,___lwdiv@dividend
  8199  002C76  C0F3  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  8200  002C7A  51EB               	movf	printf@prec& (0+255),w,b
  8201  002C7C  0D02               	mullw	2
  8202  002C7E  0E92               	movlw	low _hexpowers
  8203  002C80  24F3               	addwf	prodl,w,c
  8204  002C82  6EF6               	movwf	tblptrl,c
  8205  002C84  0EFD               	movlw	high _hexpowers
  8206  002C86  20F4               	addwfc	prodh,w,c
  8207  002C88  6EF7               	movwf	tblptrh,c
  8208  002C8A                     	if	1	;There are 3 active tblptr bytes
  8209  002C8A  6AF8               	clrf	tblptru,c
  8210  002C8C  0E00               	movlw	low (__mediumconst shr (0+16))
  8211  002C8E  22F8               	addwfc	tblptru,f,c
  8212  002C90                     	endif
  8213  002C90  0009               	tblrd		*+
  8214  002C92  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  8215  002C96  000A               	tblrd		*-
  8216  002C98  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  8217  002C9C  EC72  F01E         	call	___lwdiv	;wreg free
  8218  002CA0  0100               	movlb	0	; () banked
  8219  002CA2  51D4               	movf	?___lwdiv& (0+255),w,b
  8220  002CA4  0B0F               	andlw	15
  8221  002CA6  6FEA               	movwf	printf@idx& (0+255),b
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8225  002CA8  51EA               	movf	printf@idx& (0+255),w,b
  8226  002CAA  0D01               	mullw	1
  8227  002CAC  0E21               	movlw	low STR_96
  8228  002CAE  24F3               	addwf	prodl,w,c
  8229  002CB0  6EF6               	movwf	tblptrl,c
  8230  002CB2  0EFE               	movlw	high STR_96
  8231  002CB4  20F4               	addwfc	prodh,w,c
  8232  002CB6  6EF7               	movwf	tblptrh,c
  8233  002CB8                     	if	1	;There are 3 active tblptr bytes
  8234  002CB8  6AF8               	clrf	tblptru,c
  8235  002CBA  0E00               	movlw	low (__mediumconst shr (0+16))
  8236  002CBC  22F8               	addwfc	tblptru,f,c
  8237  002CBE                     	endif
  8238  002CBE  0008               	tblrd		*
  8239  002CC0  CFF5 F0F7          	movff	tablat,printf@c
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;doprnt.c: 1523: }
  8243                           
  8244                           ;doprnt.c: 1508: }
  8245                           ;doprnt.c: 1510: break;
  8246  002CC4  D009               	goto	l869
  8247  002CC6                     
  8248                           ; BSR set to: 0
  8249  002CC6  0100               	movlb	0	; () banked
  8250  002CC8  51F4               	movf	printf@flag& (0+255),w,b
  8251  002CCA  0B80               	andlw	128
  8252                           
  8253                           ; Switch size 1, requested type "space"
  8254                           ; Number of cases is 2, Range of values is 0 to 128
  8255                           ; switch strategies available:
  8256                           ; Name         Instructions Cycles
  8257                           ; simple_byte            7     4 (average)
  8258                           ;	Chosen strategy is simple_byte
  8259  002CCC  0A00               	xorlw	0	; case 0
  8260  002CCE  B4D8               	btfsc	status,2,c
  8261  002CD0  D7A8               	goto	l868
  8262  002CD2  0A80               	xorlw	128	; case 128
  8263  002CD4  B4D8               	btfsc	status,2,c
  8264  002CD6  D7CD               	goto	l870
  8265  002CD8                     l869:
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;doprnt.c: 1524: (putch(c) );
  8269                           
  8270                           ; BSR set to: 0
  8271  002CD8  51F7               	movf	printf@c& (0+255),w,b
  8272  002CDA  ECCF  F021         	call	_putch
  8273  002CDE                     l865:
  8274  002CDE  0100               	movlb	0	; () banked
  8275  002CE0  07EB               	decf	printf@prec& (0+255),f,b
  8276  002CE2  29EB               	incf	printf@prec& (0+255),w,b
  8277  002CE4  A4D8               	btfss	status,2,c
  8278  002CE6  D7EF               	goto	l867
  8279  002CE8                     u3020:
  8280                           
  8281                           ; BSR set to: 0
  8282                           
  8283                           ; BSR set to: 0
  8284  002CE8  C0E2  FFF6         	movff	printf@f,tblptrl
  8285  002CEC  C0E3  FFF7         	movff	printf@f+1,tblptrh
  8286  002CF0  0100               	movlb	0	; () banked
  8287  002CF2  4BE2               	infsnz	printf@f& (0+255),f,b
  8288  002CF4  2BE3               	incf	(printf@f+1)& (0+255),f,b
  8289  002CF6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8290  002CF6  6AF8               	clrf	tblptru,c
  8291  002CF8                     	endif
  8292  002CF8                     	if	0	;tblptru may be non-zero
  8293  002CF8                     	endif
  8294  002CF8  0008               	tblrd		*
  8295  002CFA  CFF5 F0F7          	movff	tablat,printf@c
  8296  002CFE  51F7               	movf	printf@c& (0+255),w,b
  8297  002D00  B4D8               	btfsc	status,2,c
  8298  002D02  0012               	return	
  8299  002D04  D5E2               	goto	l807
  8300  002D06                     __end_of_printf:
  8301                           	opt stack 0
  8302                           tblptru	equ	0xFF8
  8303                           tblptrh	equ	0xFF7
  8304                           tblptrl	equ	0xFF6
  8305                           tablat	equ	0xFF5
  8306                           prodh	equ	0xFF4
  8307                           prodl	equ	0xFF3
  8308                           intcon	equ	0xFF2
  8309                           intcon3	equ	0xFF0
  8310                           indf0	equ	0xFEF
  8311                           postinc0	equ	0xFEE
  8312                           fsr0h	equ	0xFEA
  8313                           fsr0l	equ	0xFE9
  8314                           wreg	equ	0xFE8
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _putch *****************
  8323 ;; Defined at:
  8324 ;;		line 24 in file "lcd.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;  data            1    wreg     unsigned char 
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;  data            1    2[BANK0 ] unsigned char 
  8329 ;; Return value:  Size  Location     Type
  8330 ;;                  1    wreg      void 
  8331 ;; Registers used:
  8332 ;;		wreg, status,2, status,0, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;Total ram usage:        1 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    5
  8345 ;; This function calls:
  8346 ;;		_lcdNibble
  8347 ;; This function is called by:
  8348 ;;		_printf
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text29
  8353  00439E                     __ptext29:
  8354                           	opt stack 0
  8355  00439E                     _putch:
  8356                           	opt stack 24
  8357                           
  8358                           ;incstack = 0
  8359                           ;putch@data stored from wreg
  8360  00439E  0100               	movlb	0	; () banked
  8361  0043A0  6FD6               	movwf	putch@data& (0+255),b
  8362                           
  8363                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  8364  0043A2  848C               	bsf	3980,2,c	;volatile
  8365                           
  8366                           ;lcd.c: 33: lcdNibble(data);
  8367  0043A4  0100               	movlb	0	; () banked
  8368  0043A6  51D6               	movf	putch@data& (0+255),w,b
  8369  0043A8  EC9D  F01B         	call	_lcdNibble
  8370                           
  8371                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8372  0043AC  0EC8               	movlw	200
  8373  0043AE                     u5827:
  8374  0043AE  D000               	nop2	
  8375  0043B0  2EE8               	decfsz	wreg,f,c
  8376  0043B2  D7FD               	bra	u5827
  8377  0043B4  0012               	return		;funcret
  8378  0043B6                     __end_of_putch:
  8379                           	opt stack 0
  8380                           tblptru	equ	0xFF8
  8381                           tblptrh	equ	0xFF7
  8382                           tblptrl	equ	0xFF6
  8383                           tablat	equ	0xFF5
  8384                           prodh	equ	0xFF4
  8385                           prodl	equ	0xFF3
  8386                           intcon	equ	0xFF2
  8387                           intcon3	equ	0xFF0
  8388                           indf0	equ	0xFEF
  8389                           postinc0	equ	0xFEE
  8390                           fsr0h	equ	0xFEA
  8391                           fsr0l	equ	0xFE9
  8392                           wreg	equ	0xFE8
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _isdigit *****************
  8401 ;; Defined at:
  8402 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;  c               1    wreg     unsigned char 
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  c               1    2[BANK0 ] unsigned char 
  8407 ;; Return value:  Size  Location     Type
  8408 ;;		None               void
  8409 ;; Registers used:
  8410 ;;		wreg, status,2, status,0
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;Total ram usage:        3 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    4
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		_printf
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text30
  8431  00425E                     __ptext30:
  8432                           	opt stack 0
  8433  00425E                     _isdigit:
  8434                           	opt stack 25
  8435                           
  8436                           ;incstack = 0
  8437                           ;isdigit@c stored from wreg
  8438  00425E  0100               	movlb	0	; () banked
  8439  004260  6FD6               	movwf	isdigit@c& (0+255),b
  8440  004262  0E00               	movlw	0
  8441  004264  0100               	movlb	0	; () banked
  8442  004266  6FD5               	movwf	_isdigit$1385& (0+255),b
  8443                           
  8444                           ; BSR set to: 0
  8445  004268  0E3A               	movlw	58
  8446  00426A  61D6               	cpfslt	isdigit@c& (0+255),b
  8447  00426C  D005               	goto	l1203
  8448                           
  8449                           ; BSR set to: 0
  8450  00426E  0E2F               	movlw	47
  8451  004270  65D6               	cpfsgt	isdigit@c& (0+255),b
  8452  004272  D002               	goto	l1203
  8453                           
  8454                           ; BSR set to: 0
  8455  004274  0E01               	movlw	1
  8456  004276  6FD5               	movwf	_isdigit$1385& (0+255),b
  8457  004278                     l1203:
  8458                           
  8459                           ; BSR set to: 0
  8460                           
  8461                           ; BSR set to: 0
  8462  004278  C0D5  F0D4         	movff	_isdigit$1385,??_isdigit
  8463  00427C  31D4               	rrcf	??_isdigit& (0+255),w,b
  8464  00427E  0012               	return	
  8465  004280                     __end_of_isdigit:
  8466                           	opt stack 0
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           intcon3	equ	0xFF0
  8475                           indf0	equ	0xFEF
  8476                           postinc0	equ	0xFEE
  8477                           fsr0h	equ	0xFEA
  8478                           fsr0l	equ	0xFE9
  8479                           wreg	equ	0xFE8
  8480                           indf2	equ	0xFDF
  8481                           postinc2	equ	0xFDE
  8482                           postdec2	equ	0xFDD
  8483                           fsr2h	equ	0xFDA
  8484                           fsr2l	equ	0xFD9
  8485                           status	equ	0xFD8
  8486                           
  8487 ;; *************** function ___wmul *****************
  8488 ;; Defined at:
  8489 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  multiplier      2    8[BANK0 ] unsigned int 
  8492 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;  product         2   12[BANK0 ] unsigned int 
  8495 ;; Return value:  Size  Location     Type
  8496 ;;                  2    8[BANK0 ] unsigned int 
  8497 ;; Registers used:
  8498 ;;		wreg, status,2, status,0, prodl, prodh
  8499 ;; Tracked objects:
  8500 ;;		On entry : 0/0
  8501 ;;		On exit  : 0/0
  8502 ;;		Unchanged: 0/0
  8503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8505 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8507 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;Total ram usage:        6 bytes
  8509 ;; Hardware stack levels used:    1
  8510 ;; Hardware stack levels required when called:    4
  8511 ;; This function calls:
  8512 ;;		Nothing
  8513 ;; This function is called by:
  8514 ;;		_main
  8515 ;;		_get_RTC_initial
  8516 ;;		_get_RTC_final
  8517 ;;		_printf
  8518 ;;		_store_prev
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text31
  8523  0041EC                     __ptext31:
  8524                           	opt stack 0
  8525  0041EC                     ___wmul:
  8526                           	opt stack 25
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;incstack = 0
  8530  0041EC  0100               	movlb	0	; () banked
  8531  0041EE  51DC               	movf	___wmul@multiplier& (0+255),w,b
  8532  0041F0  03DE               	mulwf	___wmul@multiplicand& (0+255),b
  8533  0041F2  CFF3 F0E0          	movff	prodl,___wmul@product
  8534  0041F6  CFF4 F0E1          	movff	prodh,___wmul@product+1
  8535  0041FA  51DC               	movf	___wmul@multiplier& (0+255),w,b
  8536  0041FC  03DF               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8537  0041FE  50F3               	movf	prodl,w,c
  8538  004200  27E1               	addwf	(___wmul@product+1)& (0+255),f,b
  8539  004202  51DD               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8540  004204  03DE               	mulwf	___wmul@multiplicand& (0+255),b
  8541  004206  50F3               	movf	prodl,w,c
  8542  004208  27E1               	addwf	(___wmul@product+1)& (0+255),f,b
  8543                           
  8544                           ; BSR set to: 0
  8545  00420A  C0E0  F0DC         	movff	___wmul@product,?___wmul
  8546  00420E  C0E1  F0DD         	movff	___wmul@product+1,?___wmul+1
  8547  004212  0012               	return	
  8548  004214                     __end_of___wmul:
  8549                           	opt stack 0
  8550                           tblptru	equ	0xFF8
  8551                           tblptrh	equ	0xFF7
  8552                           tblptrl	equ	0xFF6
  8553                           tablat	equ	0xFF5
  8554                           prodh	equ	0xFF4
  8555                           prodl	equ	0xFF3
  8556                           intcon	equ	0xFF2
  8557                           intcon3	equ	0xFF0
  8558                           indf0	equ	0xFEF
  8559                           postinc0	equ	0xFEE
  8560                           fsr0h	equ	0xFEA
  8561                           fsr0l	equ	0xFE9
  8562                           wreg	equ	0xFE8
  8563                           indf2	equ	0xFDF
  8564                           postinc2	equ	0xFDE
  8565                           postdec2	equ	0xFDD
  8566                           fsr2h	equ	0xFDA
  8567                           fsr2l	equ	0xFD9
  8568                           status	equ	0xFD8
  8569                           
  8570 ;; *************** function ___lwmod *****************
  8571 ;; Defined at:
  8572 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;  dividend        2    7[BANK0 ] unsigned int 
  8575 ;;  divisor         2    9[BANK0 ] unsigned int 
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;  counter         1   11[BANK0 ] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  2    7[BANK0 ] unsigned int 
  8580 ;; Registers used:
  8581 ;;		wreg, status,2, status,0
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8587 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;Total ram usage:        5 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    4
  8594 ;; This function calls:
  8595 ;;		Nothing
  8596 ;; This function is called by:
  8597 ;;		_printf
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text32
  8602  0040C0                     __ptext32:
  8603                           	opt stack 0
  8604  0040C0                     ___lwmod:
  8605                           	opt stack 25
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;incstack = 0
  8609  0040C0  0100               	movlb	0	; () banked
  8610  0040C2  51DD               	movf	___lwmod@divisor& (0+255),w,b
  8611  0040C4  11DE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8612  0040C6  B4D8               	btfsc	status,2,c
  8613  0040C8  D018               	goto	l1297
  8614                           
  8615                           ; BSR set to: 0
  8616  0040CA  0E01               	movlw	1
  8617  0040CC  6FDF               	movwf	___lwmod@counter& (0+255),b
  8618  0040CE  D004               	goto	l1292
  8619  0040D0                     
  8620                           ; BSR set to: 0
  8621                           
  8622                           ; BSR set to: 0
  8623  0040D0  90D8               	bcf	status,0,c
  8624  0040D2  37DD               	rlcf	___lwmod@divisor& (0+255),f,b
  8625  0040D4  37DE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8626  0040D6  2BDF               	incf	___lwmod@counter& (0+255),f,b
  8627  0040D8                     l1292:
  8628                           
  8629                           ; BSR set to: 0
  8630                           
  8631                           ; BSR set to: 0
  8632  0040D8  AFDE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8633  0040DA  D7FA               	goto	l1293
  8634  0040DC                     u2700:
  8635                           
  8636                           ; BSR set to: 0
  8637                           
  8638                           ; BSR set to: 0
  8639                           
  8640                           ; BSR set to: 0
  8641  0040DC  51DD               	movf	___lwmod@divisor& (0+255),w,b
  8642  0040DE  5DDB               	subwf	___lwmod@dividend& (0+255),w,b
  8643  0040E0  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8644  0040E2  59DC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8645  0040E4  A0D8               	btfss	status,0,c
  8646  0040E6  D004               	goto	l1296
  8647                           
  8648                           ; BSR set to: 0
  8649  0040E8  51DD               	movf	___lwmod@divisor& (0+255),w,b
  8650  0040EA  5FDB               	subwf	___lwmod@dividend& (0+255),f,b
  8651  0040EC  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8652  0040EE  5BDC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8653  0040F0                     l1296:
  8654                           
  8655                           ; BSR set to: 0
  8656                           
  8657                           ; BSR set to: 0
  8658  0040F0  90D8               	bcf	status,0,c
  8659  0040F2  33DE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8660  0040F4  33DD               	rrcf	___lwmod@divisor& (0+255),f,b
  8661                           
  8662                           ; BSR set to: 0
  8663  0040F6  2FDF               	decfsz	___lwmod@counter& (0+255),f,b
  8664  0040F8  D7F1               	goto	u2700
  8665  0040FA                     l1297:
  8666                           
  8667                           ; BSR set to: 0
  8668                           
  8669                           ; BSR set to: 0
  8670  0040FA  C0DB  F0DB         	movff	___lwmod@dividend,?___lwmod
  8671  0040FE  C0DC  F0DC         	movff	___lwmod@dividend+1,?___lwmod+1
  8672                           
  8673                           ; BSR set to: 0
  8674  004102  0012               	return		;funcret
  8675  004104                     __end_of___lwmod:
  8676                           	opt stack 0
  8677                           tblptru	equ	0xFF8
  8678                           tblptrh	equ	0xFF7
  8679                           tblptrl	equ	0xFF6
  8680                           tablat	equ	0xFF5
  8681                           prodh	equ	0xFF4
  8682                           prodl	equ	0xFF3
  8683                           intcon	equ	0xFF2
  8684                           intcon3	equ	0xFF0
  8685                           indf0	equ	0xFEF
  8686                           postinc0	equ	0xFEE
  8687                           fsr0h	equ	0xFEA
  8688                           fsr0l	equ	0xFE9
  8689                           wreg	equ	0xFE8
  8690                           indf2	equ	0xFDF
  8691                           postinc2	equ	0xFDE
  8692                           postdec2	equ	0xFDD
  8693                           fsr2h	equ	0xFDA
  8694                           fsr2l	equ	0xFD9
  8695                           status	equ	0xFD8
  8696                           
  8697 ;; *************** function ___lwdiv *****************
  8698 ;; Defined at:
  8699 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  dividend        2    0[BANK0 ] unsigned int 
  8702 ;;  divisor         2    2[BANK0 ] unsigned int 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;  quotient        2    4[BANK0 ] unsigned int 
  8705 ;;  counter         1    6[BANK0 ] unsigned char 
  8706 ;; Return value:  Size  Location     Type
  8707 ;;                  2    0[BANK0 ] unsigned int 
  8708 ;; Registers used:
  8709 ;;		wreg, status,2, status,0
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8715 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;Total ram usage:        7 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    4
  8722 ;; This function calls:
  8723 ;;		Nothing
  8724 ;; This function is called by:
  8725 ;;		_printf
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text33
  8730  003CE4                     __ptext33:
  8731                           	opt stack 0
  8732  003CE4                     ___lwdiv:
  8733                           	opt stack 25
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;incstack = 0
  8737  003CE4  0E00               	movlw	0
  8738  003CE6  0100               	movlb	0	; () banked
  8739  003CE8  6FD9               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8740  003CEA  0E00               	movlw	0
  8741  003CEC  6FD8               	movwf	___lwdiv@quotient& (0+255),b
  8742                           
  8743                           ; BSR set to: 0
  8744  003CEE  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  8745  003CF0  11D7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8746  003CF2  B4D8               	btfsc	status,2,c
  8747  003CF4  D01C               	goto	l1287
  8748                           
  8749                           ; BSR set to: 0
  8750  003CF6  0E01               	movlw	1
  8751  003CF8  6FDA               	movwf	___lwdiv@counter& (0+255),b
  8752  003CFA  D004               	goto	l1282
  8753  003CFC                     
  8754                           ; BSR set to: 0
  8755                           
  8756                           ; BSR set to: 0
  8757  003CFC  90D8               	bcf	status,0,c
  8758  003CFE  37D6               	rlcf	___lwdiv@divisor& (0+255),f,b
  8759  003D00  37D7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8760  003D02  2BDA               	incf	___lwdiv@counter& (0+255),f,b
  8761  003D04                     l1282:
  8762                           
  8763                           ; BSR set to: 0
  8764                           
  8765                           ; BSR set to: 0
  8766  003D04  AFD7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8767  003D06  D7FA               	goto	l1283
  8768  003D08                     u2670:
  8769                           
  8770                           ; BSR set to: 0
  8771                           
  8772                           ; BSR set to: 0
  8773                           
  8774                           ; BSR set to: 0
  8775  003D08  90D8               	bcf	status,0,c
  8776  003D0A  37D8               	rlcf	___lwdiv@quotient& (0+255),f,b
  8777  003D0C  37D9               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8778                           
  8779                           ; BSR set to: 0
  8780  003D0E  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  8781  003D10  5DD4               	subwf	___lwdiv@dividend& (0+255),w,b
  8782  003D12  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8783  003D14  59D5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8784  003D16  A0D8               	btfss	status,0,c
  8785  003D18  D005               	goto	l1286
  8786                           
  8787                           ; BSR set to: 0
  8788  003D1A  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  8789  003D1C  5FD4               	subwf	___lwdiv@dividend& (0+255),f,b
  8790  003D1E  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8791  003D20  5BD5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8792                           
  8793                           ; BSR set to: 0
  8794  003D22  81D8               	bsf	___lwdiv@quotient& (0+255),0,b
  8795  003D24                     l1286:
  8796                           
  8797                           ; BSR set to: 0
  8798                           
  8799                           ; BSR set to: 0
  8800  003D24  90D8               	bcf	status,0,c
  8801  003D26  33D7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8802  003D28  33D6               	rrcf	___lwdiv@divisor& (0+255),f,b
  8803                           
  8804                           ; BSR set to: 0
  8805  003D2A  2FDA               	decfsz	___lwdiv@counter& (0+255),f,b
  8806  003D2C  D7ED               	goto	u2670
  8807  003D2E                     l1287:
  8808                           
  8809                           ; BSR set to: 0
  8810                           
  8811                           ; BSR set to: 0
  8812  003D2E  C0D8  F0D4         	movff	___lwdiv@quotient,?___lwdiv
  8813  003D32  C0D9  F0D5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8814                           
  8815                           ; BSR set to: 0
  8816  003D36  0012               	return		;funcret
  8817  003D38                     __end_of___lwdiv:
  8818                           	opt stack 0
  8819                           tblptru	equ	0xFF8
  8820                           tblptrh	equ	0xFF7
  8821                           tblptrl	equ	0xFF6
  8822                           tablat	equ	0xFF5
  8823                           prodh	equ	0xFF4
  8824                           prodl	equ	0xFF3
  8825                           intcon	equ	0xFF2
  8826                           intcon3	equ	0xFF0
  8827                           indf0	equ	0xFEF
  8828                           postinc0	equ	0xFEE
  8829                           fsr0h	equ	0xFEA
  8830                           fsr0l	equ	0xFE9
  8831                           wreg	equ	0xFE8
  8832                           indf2	equ	0xFDF
  8833                           postinc2	equ	0xFDE
  8834                           postdec2	equ	0xFDD
  8835                           fsr2h	equ	0xFDA
  8836                           fsr2l	equ	0xFD9
  8837                           status	equ	0xFD8
  8838                           
  8839 ;; *************** function _initLCD *****************
  8840 ;; Defined at:
  8841 ;;		line 60 in file "lcd.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;		None
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;		None
  8846 ;; Return value:  Size  Location     Type
  8847 ;;                  1    wreg      void 
  8848 ;; Registers used:
  8849 ;;		wreg, status,2, status,0, cstack
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8858 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8859 ;;Total ram usage:        1 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; Hardware stack levels required when called:    6
  8862 ;; This function calls:
  8863 ;;		_lcdInst
  8864 ;; This function is called by:
  8865 ;;		_main
  8866 ;;		_count_gear
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           	psect	text34
  8871  003E80                     __ptext34:
  8872                           	opt stack 0
  8873  003E80                     _initLCD:
  8874                           	opt stack 24
  8875                           
  8876                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;incstack = 0
  8880  003E80  0EC3               	movlw	195
  8881  003E82  0100               	movlb	0	; () banked
  8882  003E84  6FD7               	movwf	??_initLCD& (0+255),b
  8883  003E86  0ECD               	movlw	205
  8884  003E88                     u5837:
  8885  003E88  2EE8               	decfsz	wreg,f,c
  8886  003E8A  D7FE               	bra	u5837
  8887  003E8C  2FD7               	decfsz	??_initLCD& (0+255),f,b
  8888  003E8E  D7FC               	bra	u5837
  8889                           
  8890                           ;lcd.c: 69: lcdInst(0b00110011);
  8891  003E90  0E33               	movlw	51
  8892  003E92  ECDB  F021         	call	_lcdInst
  8893                           
  8894                           ;lcd.c: 70: lcdInst(0b00110010);
  8895  003E96  0E32               	movlw	50
  8896  003E98  ECDB  F021         	call	_lcdInst
  8897                           
  8898                           ;lcd.c: 71: lcdInst(0b00101000);
  8899  003E9C  0E28               	movlw	40
  8900  003E9E  ECDB  F021         	call	_lcdInst
  8901                           
  8902                           ;lcd.c: 72: lcdInst(0b00001111);
  8903  003EA2  0E0F               	movlw	15
  8904  003EA4  ECDB  F021         	call	_lcdInst
  8905                           
  8906                           ;lcd.c: 73: lcdInst(0b00000110);
  8907  003EA8  0E06               	movlw	6
  8908  003EAA  ECDB  F021         	call	_lcdInst
  8909                           
  8910                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8911  003EAE  0E01               	movlw	1
  8912  003EB0  ECDB  F021         	call	_lcdInst
  8913  003EB4  0EC3               	movlw	195
  8914  003EB6  0100               	movlb	0	; () banked
  8915  003EB8  6FD7               	movwf	??_initLCD& (0+255),b
  8916  003EBA  0ECD               	movlw	205
  8917  003EBC                     u5847:
  8918  003EBC  2EE8               	decfsz	wreg,f,c
  8919  003EBE  D7FE               	bra	u5847
  8920  003EC0  2FD7               	decfsz	??_initLCD& (0+255),f,b
  8921  003EC2  D7FC               	bra	u5847
  8922                           
  8923                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  8924  003EC4  0E0F               	movlw	15
  8925  003EC6  ECDB  F021         	call	_lcdInst
  8926  003ECA  0012               	return		;funcret
  8927  003ECC                     __end_of_initLCD:
  8928                           	opt stack 0
  8929                           tblptru	equ	0xFF8
  8930                           tblptrh	equ	0xFF7
  8931                           tblptrl	equ	0xFF6
  8932                           tablat	equ	0xFF5
  8933                           prodh	equ	0xFF4
  8934                           prodl	equ	0xFF3
  8935                           intcon	equ	0xFF2
  8936                           intcon3	equ	0xFF0
  8937                           indf0	equ	0xFEF
  8938                           postinc0	equ	0xFEE
  8939                           fsr0h	equ	0xFEA
  8940                           fsr0l	equ	0xFE9
  8941                           wreg	equ	0xFE8
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           fsr2h	equ	0xFDA
  8946                           fsr2l	equ	0xFD9
  8947                           status	equ	0xFD8
  8948                           
  8949 ;; *************** function _lcdInst *****************
  8950 ;; Defined at:
  8951 ;;		line 11 in file "lcd.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;  data            1    wreg     unsigned char 
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  data            1    2[BANK0 ] unsigned char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		wreg, status,2, status,0, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;Total ram usage:        1 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    5
  8972 ;; This function calls:
  8973 ;;		_lcdNibble
  8974 ;; This function is called by:
  8975 ;;		_initLCD
  8976 ;;		_main
  8977 ;;		_count_gear
  8978 ;;		_lcd_set_cursor
  8979 ;;		_lcd_shift_cursor
  8980 ;;		_lcd_shift_display
  8981 ;; This function uses a non-reentrant model
  8982 ;;
  8983                           
  8984                           	psect	text35
  8985  0043B6                     __ptext35:
  8986                           	opt stack 0
  8987  0043B6                     _lcdInst:
  8988                           	opt stack 25
  8989                           
  8990                           ;incstack = 0
  8991                           ;lcdInst@data stored from wreg
  8992  0043B6  0100               	movlb	0	; () banked
  8993  0043B8  6FD6               	movwf	lcdInst@data& (0+255),b
  8994                           
  8995                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  8996  0043BA  948C               	bcf	3980,2,c	;volatile
  8997                           
  8998                           ;lcd.c: 20: lcdNibble(data);
  8999  0043BC  0100               	movlb	0	; () banked
  9000  0043BE  51D6               	movf	lcdInst@data& (0+255),w,b
  9001  0043C0  EC9D  F01B         	call	_lcdNibble
  9002                           
  9003                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  9004  0043C4  0EC8               	movlw	200
  9005  0043C6                     u5857:
  9006  0043C6  D000               	nop2	
  9007  0043C8  2EE8               	decfsz	wreg,f,c
  9008  0043CA  D7FD               	bra	u5857
  9009  0043CC  0012               	return		;funcret
  9010  0043CE                     __end_of_lcdInst:
  9011                           	opt stack 0
  9012                           tblptru	equ	0xFF8
  9013                           tblptrh	equ	0xFF7
  9014                           tblptrl	equ	0xFF6
  9015                           tablat	equ	0xFF5
  9016                           prodh	equ	0xFF4
  9017                           prodl	equ	0xFF3
  9018                           intcon	equ	0xFF2
  9019                           intcon3	equ	0xFF0
  9020                           indf0	equ	0xFEF
  9021                           postinc0	equ	0xFEE
  9022                           fsr0h	equ	0xFEA
  9023                           fsr0l	equ	0xFE9
  9024                           wreg	equ	0xFE8
  9025                           indf2	equ	0xFDF
  9026                           postinc2	equ	0xFDE
  9027                           postdec2	equ	0xFDD
  9028                           fsr2h	equ	0xFDA
  9029                           fsr2l	equ	0xFD9
  9030                           status	equ	0xFD8
  9031                           
  9032 ;; *************** function _lcdNibble *****************
  9033 ;; Defined at:
  9034 ;;		line 37 in file "lcd.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;  data            1    wreg     unsigned char 
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  data            1    1[BANK0 ] unsigned char 
  9039 ;;  temp            1    0[BANK0 ] unsigned char 
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  1    wreg      void 
  9042 ;; Registers used:
  9043 ;;		wreg, status,2, status,0
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;Total ram usage:        2 bytes
  9054 ;; Hardware stack levels used:    1
  9055 ;; Hardware stack levels required when called:    4
  9056 ;; This function calls:
  9057 ;;		Nothing
  9058 ;; This function is called by:
  9059 ;;		_lcdInst
  9060 ;;		_putch
  9061 ;; This function uses a non-reentrant model
  9062 ;;
  9063                           
  9064                           	psect	text36
  9065  00373A                     __ptext36:
  9066                           	opt stack 0
  9067  00373A                     _lcdNibble:
  9068                           	opt stack 24
  9069                           
  9070                           ;incstack = 0
  9071                           ;lcdNibble@data stored from wreg
  9072  00373A  0100               	movlb	0	; () banked
  9073  00373C  6FD5               	movwf	lcdNibble@data& (0+255),b
  9074                           
  9075                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  9076  00373E  0100               	movlb	0	; () banked
  9077  003740  51D5               	movf	lcdNibble@data& (0+255),w,b
  9078  003742  0BF0               	andlw	240
  9079  003744  6FD4               	movwf	lcdNibble@temp& (0+255),b
  9080                           
  9081                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  9082  003746  508C               	movf	3980,w,c	;volatile
  9083  003748  0B0F               	andlw	15
  9084  00374A  6E8C               	movwf	3980,c	;volatile
  9085                           
  9086                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  9087  00374C  51D4               	movf	lcdNibble@temp& (0+255),w,b
  9088  00374E  108C               	iorwf	3980,w,c	;volatile
  9089  003750  6E8C               	movwf	3980,c	;volatile
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9093  003752  0E00               	movlw	0
  9094  003754  BEF2               	btfsc	intcon,7,c	;volatile
  9095  003756  0E01               	movlw	1
  9096  003758  6FCE               	movwf	_LCDinterruptState& (0+255),b
  9097                           
  9098                           ; BSR set to: 0
  9099  00375A  9EF2               	bcf	intcon,7,c	;volatile
  9100                           
  9101                           ; BSR set to: 0
  9102  00375C  868C               	bsf	3980,3,c	;volatile
  9103                           
  9104                           ; BSR set to: 0
  9105  00375E  0E53               	movlw	83
  9106  003760                     u5867:
  9107  003760  2EE8               	decfsz	wreg,f,c
  9108  003762  D7FE               	bra	u5867
  9109  003764  F000               	nop	
  9110  003766  968C               	bcf	3980,3,c	;volatile
  9111  003768  0EC8               	movlw	200
  9112  00376A                     u5877:
  9113  00376A  D000               	nop2	
  9114  00376C  2EE8               	decfsz	wreg,f,c
  9115  00376E  D7FD               	bra	u5877
  9116  003770  0100               	movlb	0	; () banked
  9117  003772  B1CE               	btfsc	_LCDinterruptState& (0+255),0,b
  9118  003774  D002               	bra	u2575
  9119  003776  9EF2               	bcf	intcon,7,c	;volatile
  9120  003778  D001               	bra	u2576
  9121  00377A                     u2575:
  9122  00377A  8EF2               	bsf	intcon,7,c	;volatile
  9123  00377C                     u2576:
  9124                           
  9125                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  9126  00377C  0100               	movlb	0	; () banked
  9127  00377E  39D5               	swapf	lcdNibble@data& (0+255),w,b
  9128  003780  0BF0               	andlw	240
  9129  003782  6FD5               	movwf	lcdNibble@data& (0+255),b
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  9133  003784  51D5               	movf	lcdNibble@data& (0+255),w,b
  9134  003786  0BF0               	andlw	240
  9135  003788  6FD4               	movwf	lcdNibble@temp& (0+255),b
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  9139  00378A  508C               	movf	3980,w,c	;volatile
  9140  00378C  0B0F               	andlw	15
  9141  00378E  6E8C               	movwf	3980,c	;volatile
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  9145  003790  51D4               	movf	lcdNibble@temp& (0+255),w,b
  9146  003792  108C               	iorwf	3980,w,c	;volatile
  9147  003794  6E8C               	movwf	3980,c	;volatile
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9151  003796  0E00               	movlw	0
  9152  003798  BEF2               	btfsc	intcon,7,c	;volatile
  9153  00379A  0E01               	movlw	1
  9154  00379C  6FCE               	movwf	_LCDinterruptState& (0+255),b
  9155                           
  9156                           ; BSR set to: 0
  9157  00379E  9EF2               	bcf	intcon,7,c	;volatile
  9158                           
  9159                           ; BSR set to: 0
  9160  0037A0  868C               	bsf	3980,3,c	;volatile
  9161                           
  9162                           ; BSR set to: 0
  9163  0037A2  0E53               	movlw	83
  9164  0037A4                     u5887:
  9165  0037A4  2EE8               	decfsz	wreg,f,c
  9166  0037A6  D7FE               	bra	u5887
  9167  0037A8  F000               	nop	
  9168  0037AA  968C               	bcf	3980,3,c	;volatile
  9169  0037AC  0EC8               	movlw	200
  9170  0037AE                     u5897:
  9171  0037AE  D000               	nop2	
  9172  0037B0  2EE8               	decfsz	wreg,f,c
  9173  0037B2  D7FD               	bra	u5897
  9174  0037B4  0100               	movlb	0	; () banked
  9175  0037B6  B1CE               	btfsc	_LCDinterruptState& (0+255),0,b
  9176  0037B8  D002               	bra	u2585
  9177  0037BA  9EF2               	bcf	intcon,7,c	;volatile
  9178  0037BC  D001               	bra	u2586
  9179  0037BE                     u2585:
  9180  0037BE  8EF2               	bsf	intcon,7,c	;volatile
  9181  0037C0                     u2586:
  9182  0037C0  0012               	return		;funcret
  9183  0037C2                     __end_of_lcdNibble:
  9184                           	opt stack 0
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           prodh	equ	0xFF4
  9190                           prodl	equ	0xFF3
  9191                           intcon	equ	0xFF2
  9192                           intcon3	equ	0xFF0
  9193                           indf0	equ	0xFEF
  9194                           postinc0	equ	0xFEE
  9195                           fsr0h	equ	0xFEA
  9196                           fsr0l	equ	0xFE9
  9197                           wreg	equ	0xFE8
  9198                           indf2	equ	0xFDF
  9199                           postinc2	equ	0xFDE
  9200                           postdec2	equ	0xFDD
  9201                           fsr2h	equ	0xFDA
  9202                           fsr2l	equ	0xFD9
  9203                           status	equ	0xFD8
  9204                           
  9205 ;; *************** function _interruptHandler *****************
  9206 ;; Defined at:
  9207 ;;		line 588 in file "main.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;		None
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;  i               2   61[COMRAM] int 
  9212 ;;  temp            1   64[COMRAM] unsigned char 
  9213 ;;  keypress        1   63[COMRAM] unsigned char 
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  1    wreg      void 
  9216 ;; Registers used:
  9217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;Total ram usage:       27 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    3
  9230 ;; This function calls:
  9231 ;;		___awmod
  9232 ;;		_check
  9233 ;;		_generate_compartment_array
  9234 ;;		_is_valid
  9235 ;;		_strcat
  9236 ;;		_strcpy
  9237 ;;		_strncmp
  9238 ;;		i2_I2C_Master_Init
  9239 ;;		i2_I2C_Master_Read
  9240 ;;		i2_I2C_Master_Start
  9241 ;;		i2_I2C_Master_Stop
  9242 ;;		i2_I2C_Master_Write
  9243 ;;		i2___awdiv
  9244 ;;		i2___wmul
  9245 ;;		i2_initLCD
  9246 ;;		i2_lcdInst
  9247 ;;		i2_printf
  9248 ;;		i2_putch
  9249 ;; This function is called by:
  9250 ;;		Interrupt level 2
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	intcode
  9255  000008                     __pintcode:
  9256                           	opt stack 0
  9257  000008                     _interruptHandler:
  9258                           	opt stack 23
  9259                           
  9260                           ;incstack = 0
  9261  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9262  00000A  ED63  F00E         	call	int_func,f	;refresh shadow registers
  9263                           tblptru	equ	0xFF8
  9264                           tblptrh	equ	0xFF7
  9265                           tblptrl	equ	0xFF6
  9266                           tablat	equ	0xFF5
  9267                           prodh	equ	0xFF4
  9268                           prodl	equ	0xFF3
  9269                           intcon	equ	0xFF2
  9270                           intcon3	equ	0xFF0
  9271                           indf0	equ	0xFEF
  9272                           postinc0	equ	0xFEE
  9273                           fsr0h	equ	0xFEA
  9274                           fsr0l	equ	0xFE9
  9275                           wreg	equ	0xFE8
  9276                           indf2	equ	0xFDF
  9277                           postinc2	equ	0xFDE
  9278                           postdec2	equ	0xFDD
  9279                           fsr2h	equ	0xFDA
  9280                           fsr2l	equ	0xFD9
  9281                           status	equ	0xFD8
  9282                           
  9283                           	psect	intcode_body
  9284  001CC6                     __pintcode_body:
  9285                           	opt stack 23
  9286  001CC6                     int_func:
  9287                           	opt stack 23
  9288  001CC6  0006               	pop		; remove dummy address from shadow register refresh
  9289  001CC8  CFFA F02C          	movff	pclath,??_interruptHandler+5
  9290  001CCC  CFFB F02D          	movff	pclatu,??_interruptHandler+6
  9291  001CD0  CFE9 F02E          	movff	fsr0l,??_interruptHandler+7
  9292  001CD4  CFEA F02F          	movff	fsr0h,??_interruptHandler+8
  9293  001CD8  CFE1 F030          	movff	fsr1l,??_interruptHandler+9
  9294  001CDC  CFE2 F031          	movff	fsr1h,??_interruptHandler+10
  9295  001CE0  CFD9 F032          	movff	fsr2l,??_interruptHandler+11
  9296  001CE4  CFDA F033          	movff	fsr2h,??_interruptHandler+12
  9297  001CE8  CFF3 F034          	movff	prodl,??_interruptHandler+13
  9298  001CEC  CFF4 F035          	movff	prodh,??_interruptHandler+14
  9299  001CF0  CFF6 F036          	movff	tblptrl,??_interruptHandler+15
  9300  001CF4  CFF7 F037          	movff	tblptrh,??_interruptHandler+16
  9301  001CF8  CFF8 F038          	movff	tblptru,??_interruptHandler+17
  9302  001CFC  CFF5 F039          	movff	tablat,??_interruptHandler+18
  9303  001D00  C07F  F03A         	movff	btemp,??_interruptHandler+19
  9304  001D04  C080  F03B         	movff	btemp+1,??_interruptHandler+20
  9305  001D08  C081  F03C         	movff	btemp+2,??_interruptHandler+21
  9306  001D0C  C082  F03D         	movff	btemp+3,??_interruptHandler+22
  9307                           
  9308                           ;main.c: 599: if(INT1IF){
  9309  001D10  A0F0               	btfss	intcon3,0,c	;volatile
  9310  001D12  EF39  F014         	goto	i2l6102
  9311                           
  9312                           ;main.c: 605: unsigned char keypress = (PORTB & 0xF0) >> 4;
  9313  001D16  3881               	swapf	3969,w,c	;volatile
  9314  001D18  0B0F               	andlw	15
  9315  001D1A  0B0F               	andlw	15
  9316  001D1C  6E40               	movwf	interruptHandler@keypress,c
  9317                           
  9318                           ;main.c: 607: char temp = keys[keypress];
  9319  001D1E  5040               	movf	interruptHandler@keypress,w,c
  9320  001D20  0D01               	mullw	1
  9321  001D22  0E77               	movlw	low _keys
  9322  001D24  24F3               	addwf	prodl,w,c
  9323  001D26  6EF6               	movwf	tblptrl,c
  9324  001D28  0EFD               	movlw	high _keys
  9325  001D2A  20F4               	addwfc	prodh,w,c
  9326  001D2C  6EF7               	movwf	tblptrh,c
  9327  001D2E                     	if	1	;There are 3 active tblptr bytes
  9328  001D2E  6AF8               	clrf	tblptru,c
  9329  001D30  0E00               	movlw	low (__mediumconst shr (0+16))
  9330  001D32  22F8               	addwfc	tblptru,f,c
  9331  001D34                     	endif
  9332  001D34  0008               	tblrd		*
  9333  001D36  CFF5 F041          	movff	tablat,interruptHandler@temp
  9334                           
  9335                           ;main.c: 610: if(temp == 'A'){
  9336  001D3A  0E41               	movlw	65
  9337  001D3C  1841               	xorwf	interruptHandler@temp,w,c
  9338  001D3E  A4D8               	btfss	status,2,c
  9339  001D40  D006               	goto	i2l408
  9340                           
  9341                           ;main.c: 611: state = prev_state;
  9342  001D42  C067  F0BC         	movff	_prev_state,_state
  9343  001D46  C068  F0BD         	movff	_prev_state+1,_state+1
  9344  001D4A  EF38  F014         	goto	i2l6100
  9345  001D4E                     i2l408:
  9346                           
  9347                           ;main.c: 614: }
  9348                           ;main.c: 617: if (change_mode == 0){
  9349  001D4E  0100               	movlb	0	; () banked
  9350  001D50  51C6               	movf	_change_mode& (0+255),w,b
  9351  001D52  11C7               	iorwf	(_change_mode+1)& (0+255),w,b
  9352  001D54  A4D8               	btfss	status,2,c
  9353  001D56  D09D               	goto	i2l416
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;main.c: 621: if (temp == '1'){
  9357  001D58  0E31               	movlw	49
  9358  001D5A  1841               	xorwf	interruptHandler@temp,w,c
  9359  001D5C  A4D8               	btfss	status,2,c
  9360  001D5E  D08B               	goto	i2l411
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;main.c: 623: initLCD();
  9364  001D60  EC66  F01F         	call	i2_initLCD	;wreg free
  9365                           
  9366                           ;main.c: 624: for (i = 0; i <3; i++){
  9367  001D64  0E00               	movlw	0
  9368  001D66  0100               	movlb	0	; () banked
  9369  001D68  6FCD               	movwf	(_i+1)& (0+255),b
  9370  001D6A  0E00               	movlw	0
  9371  001D6C  6FCC               	movwf	_i& (0+255),b
  9372                           
  9373                           ; BSR set to: 0
  9374  001D6E  51CD               	movf	(_i+1)& (0+255),w,b
  9375  001D70  E101               	bnz	i2u469_40
  9376  001D72  D07B               	goto	L4
  9377  001D74                     i2u469_40:
  9378                           
  9379                           ; BSR set to: 0
  9380  001D74  EF38  F014         	goto	i2l6100
  9381  001D78                     
  9382                           ; BSR set to: 0
  9383                           ;main.c: 625: I2C_Master_Init(100000);
  9384                           
  9385                           ; BSR set to: 0
  9386  001D78  0EA0               	movlw	160
  9387  001D7A  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9388  001D7C  0E86               	movlw	134
  9389  001D7E  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9390  001D80  0E01               	movlw	1
  9391  001D82  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9392  001D84  0E00               	movlw	0
  9393  001D86  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9394  001D88  EC44  F01E         	call	i2_I2C_Master_Init	;wreg free
  9395                           
  9396                           ;main.c: 626: I2C_Master_Start();
  9397  001D8C  EC24  F022         	call	i2_I2C_Master_Start	;wreg free
  9398                           
  9399                           ;main.c: 627: I2C_Master_Write(0b11010000);
  9400  001D90  0E00               	movlw	0
  9401  001D92  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9402  001D94  0ED0               	movlw	208
  9403  001D96  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9404  001D98  EC13  F022         	call	i2_I2C_Master_Write	;wreg free
  9405                           
  9406                           ;main.c: 628: I2C_Master_Write(0x00);
  9407  001D9C  0E00               	movlw	0
  9408  001D9E  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9409  001DA0  0E00               	movlw	0
  9410  001DA2  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9411  001DA4  EC13  F022         	call	i2_I2C_Master_Write	;wreg free
  9412                           
  9413                           ;main.c: 629: I2C_Master_Stop();
  9414  001DA8  EC20  F022         	call	i2_I2C_Master_Stop	;wreg free
  9415                           
  9416                           ;main.c: 632: I2C_Master_Start();
  9417  001DAC  EC24  F022         	call	i2_I2C_Master_Start	;wreg free
  9418                           
  9419                           ;main.c: 633: I2C_Master_Write(0b11010001);
  9420  001DB0  0E00               	movlw	0
  9421  001DB2  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9422  001DB4  0ED1               	movlw	209
  9423  001DB6  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9424  001DB8  EC13  F022         	call	i2_I2C_Master_Write	;wreg free
  9425                           
  9426                           ;main.c: 634: for(j = 0; j < 6; j++){
  9427  001DBC  0E00               	movlw	0
  9428  001DBE  6E75               	movwf	_j,c
  9429  001DC0                     i2l5734:
  9430  001DC0  0E05               	movlw	5
  9431  001DC2  6475               	cpfsgt	_j,c
  9432  001DC4  D001               	goto	i2l414
  9433  001DC6  D00E               	goto	i2u471_40
  9434  001DC8                     i2l414:
  9435                           
  9436                           ;main.c: 635: time[j] = I2C_Master_Read(0);
  9437  001DC8  5075               	movf	_j,w,c
  9438  001DCA  0D01               	mullw	1
  9439  001DCC  0E52               	movlw	low _time
  9440  001DCE  24F3               	addwf	prodl,w,c
  9441  001DD0  6ED9               	movwf	fsr2l,c
  9442  001DD2  0E00               	movlw	high _time
  9443  001DD4  20F4               	addwfc	prodh,w,c
  9444  001DD6  6EDA               	movwf	fsr2h,c
  9445  001DD8  0E00               	movlw	0
  9446  001DDA  EC1D  F021         	call	i2_I2C_Master_Read
  9447  001DDE  6EDF               	movwf	indf2,c
  9448  001DE0  2A75               	incf	_j,f,c
  9449  001DE2  D7EE               	goto	i2l5734
  9450  001DE4                     i2u471_40:
  9451                           
  9452                           ;main.c: 636: }
  9453                           ;main.c: 637: time[6] = I2C_Master_Read(1);
  9454  001DE4  0E01               	movlw	1
  9455  001DE6  EC1D  F021         	call	i2_I2C_Master_Read
  9456  001DEA  6E58               	movwf	_time+6,c
  9457                           
  9458                           ;main.c: 638: I2C_Master_Stop();
  9459  001DEC  EC20  F022         	call	i2_I2C_Master_Stop	;wreg free
  9460                           
  9461                           ;main.c: 640: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9462  001DF0  0E80               	movlw	128
  9463  001DF2  ECFB  F021         	call	i2_lcdInst
  9464  001DF6  0E41               	movlw	65
  9465  001DF8  6E27               	movwf	??_interruptHandler& (0+255),c
  9466  001DFA  0EEE               	movlw	238
  9467  001DFC                     i2u590_47:
  9468  001DFC  2EE8               	decfsz	wreg,f,c
  9469  001DFE  D7FE               	bra	i2u590_47
  9470  001E00  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9471  001E02  D7FC               	bra	i2u590_47
  9472  001E04  D000               	nop2	
  9473                           
  9474                           ;main.c: 641: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9475  001E06  0EE2               	movlw	low STR_53
  9476  001E08  6E0D               	movwf	i2printf@f,c
  9477  001E0A  0EFE               	movlw	high STR_53
  9478  001E0C  6E0E               	movwf	i2printf@f+1,c
  9479  001E0E  C058  F00F         	movff	_time+6,?i2_printf+2
  9480  001E12  6A10               	clrf	?i2_printf+3,c
  9481  001E14  C057  F011         	movff	_time+5,?i2_printf+4
  9482  001E18  6A12               	clrf	?i2_printf+5,c
  9483  001E1A  C056  F013         	movff	_time+4,?i2_printf+6
  9484  001E1E  6A14               	clrf	?i2_printf+7,c
  9485  001E20  EC83  F016         	call	i2_printf	;wreg free
  9486                           
  9487                           ;main.c: 642: lcdInst(0xC0);;
  9488  001E24  0EC0               	movlw	192
  9489  001E26  ECFB  F021         	call	i2_lcdInst
  9490                           
  9491                           ;main.c: 643: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9492  001E2A  0EF1               	movlw	low STR_54
  9493  001E2C  6E0D               	movwf	i2printf@f,c
  9494  001E2E  0EFE               	movlw	high STR_54
  9495  001E30  6E0E               	movwf	i2printf@f+1,c
  9496  001E32  C054  F00F         	movff	_time+2,?i2_printf+2
  9497  001E36  6A10               	clrf	?i2_printf+3,c
  9498  001E38  C053  F011         	movff	_time+1,?i2_printf+4
  9499  001E3C  6A12               	clrf	?i2_printf+5,c
  9500  001E3E  C052  F013         	movff	_time,?i2_printf+6
  9501  001E42  6A14               	clrf	?i2_printf+7,c
  9502  001E44  EC83  F016         	call	i2_printf	;wreg free
  9503                           
  9504                           ;main.c: 644: _delay((unsigned long)((600)*(40000000/4000.0)));
  9505  001E48  0E1F               	movlw	31
  9506  001E4A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  9507  001E4C  0E71               	movlw	113
  9508  001E4E  6E27               	movwf	??_interruptHandler& (0+255),c
  9509  001E50  0E1E               	movlw	30
  9510  001E52                     i2u591_47:
  9511  001E52  2EE8               	decfsz	wreg,f,c
  9512  001E54  D7FE               	bra	i2u591_47
  9513  001E56  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9514  001E58  D7FC               	bra	i2u591_47
  9515  001E5A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9516  001E5C  D7FA               	bra	i2u591_47
  9517  001E5E  D000               	nop2	
  9518  001E60  0100               	movlb	0	; () banked
  9519  001E62  4BCC               	infsnz	_i& (0+255),f,b
  9520  001E64  2BCD               	incf	(_i+1)& (0+255),f,b
  9521  001E66  51CD               	movf	(_i+1)& (0+255),w,b
  9522  001E68  E112               	bnz	i2l5760
  9523  001E6A                     L4:
  9524  001E6A  0E03               	movlw	3
  9525  001E6C  5DCC               	subwf	_i& (0+255),w,b
  9526  001E6E  A0D8               	btfss	status,0,c
  9527  001E70  D783               	goto	i2l412
  9528  001E72  EF38  F014         	goto	i2l6100
  9529  001E76                     i2l411:
  9530                           
  9531                           ; BSR set to: 0
  9532                           ;main.c: 648: }
  9533                           ;main.c: 649: if (temp == '2'){
  9534                           
  9535                           ; BSR set to: 0
  9536  001E76  0E32               	movlw	50
  9537  001E78  1841               	xorwf	interruptHandler@temp,w,c
  9538  001E7A  A4D8               	btfss	status,2,c
  9539  001E7C  D00A               	goto	i2l416
  9540                           
  9541                           ; BSR set to: 0
  9542                           ;main.c: 650: change_mode = 1;
  9543  001E7E  0E00               	movlw	0
  9544  001E80  6FC7               	movwf	(_change_mode+1)& (0+255),b
  9545  001E82  0E01               	movlw	1
  9546  001E84  6FC6               	movwf	_change_mode& (0+255),b
  9547                           
  9548                           ;main.c: 651: mode = 1;
  9549  001E86  0E00               	movlw	0
  9550  001E88  6FC9               	movwf	(_mode+1)& (0+255),b
  9551  001E8A  0E01               	movlw	1
  9552  001E8C  D142               	goto	L11
  9553  001E8E                     i2l5760:
  9554  001E8E  EF38  F014         	goto	i2l6100
  9555  001E92                     i2l416:
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;main.c: 656: }
  9559                           ;main.c: 659: }
  9560                           ;main.c: 664: if(operation == 1){
  9561                           
  9562                           ; BSR set to: 0
  9563                           
  9564                           ; BSR set to: 0
  9565  001E92  0473               	decf	_operation,w,c
  9566  001E94  1074               	iorwf	_operation+1,w,c
  9567  001E96  A4D8               	btfss	status,2,c
  9568  001E98  D13E               	goto	i2l425
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;main.c: 665: if (temp == '1'){
  9572  001E9A  0E31               	movlw	49
  9573  001E9C  1841               	xorwf	interruptHandler@temp,w,c
  9574  001E9E  A4D8               	btfss	status,2,c
  9575  001EA0  D08B               	goto	i2l418
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;main.c: 666: initLCD();
  9579  001EA2  EC66  F01F         	call	i2_initLCD	;wreg free
  9580                           
  9581                           ;main.c: 667: for (i = 0; i <3; i++){
  9582  001EA6  0E00               	movlw	0
  9583  001EA8  0100               	movlb	0	; () banked
  9584  001EAA  6FCD               	movwf	(_i+1)& (0+255),b
  9585  001EAC  0E00               	movlw	0
  9586  001EAE  6FCC               	movwf	_i& (0+255),b
  9587                           
  9588                           ; BSR set to: 0
  9589  001EB0  51CD               	movf	(_i+1)& (0+255),w,b
  9590  001EB2  E101               	bnz	i2u476_40
  9591  001EB4  D07B               	goto	L5
  9592  001EB6                     i2u476_40:
  9593                           
  9594                           ; BSR set to: 0
  9595  001EB6  EF38  F014         	goto	i2l6100
  9596  001EBA                     
  9597                           ; BSR set to: 0
  9598                           ;main.c: 668: I2C_Master_Init(100000);
  9599                           
  9600                           ; BSR set to: 0
  9601  001EBA  0EA0               	movlw	160
  9602  001EBC  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
  9603  001EBE  0E86               	movlw	134
  9604  001EC0  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
  9605  001EC2  0E01               	movlw	1
  9606  001EC4  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
  9607  001EC6  0E00               	movlw	0
  9608  001EC8  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
  9609  001ECA  EC44  F01E         	call	i2_I2C_Master_Init	;wreg free
  9610                           
  9611                           ;main.c: 669: I2C_Master_Start();
  9612  001ECE  EC24  F022         	call	i2_I2C_Master_Start	;wreg free
  9613                           
  9614                           ;main.c: 670: I2C_Master_Write(0b11010000);
  9615  001ED2  0E00               	movlw	0
  9616  001ED4  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9617  001ED6  0ED0               	movlw	208
  9618  001ED8  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9619  001EDA  EC13  F022         	call	i2_I2C_Master_Write	;wreg free
  9620                           
  9621                           ;main.c: 671: I2C_Master_Write(0x00);
  9622  001EDE  0E00               	movlw	0
  9623  001EE0  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9624  001EE2  0E00               	movlw	0
  9625  001EE4  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9626  001EE6  EC13  F022         	call	i2_I2C_Master_Write	;wreg free
  9627                           
  9628                           ;main.c: 672: I2C_Master_Stop();
  9629  001EEA  EC20  F022         	call	i2_I2C_Master_Stop	;wreg free
  9630                           
  9631                           ;main.c: 675: I2C_Master_Start();
  9632  001EEE  EC24  F022         	call	i2_I2C_Master_Start	;wreg free
  9633                           
  9634                           ;main.c: 676: I2C_Master_Write(0b11010001);
  9635  001EF2  0E00               	movlw	0
  9636  001EF4  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  9637  001EF6  0ED1               	movlw	209
  9638  001EF8  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  9639  001EFA  EC13  F022         	call	i2_I2C_Master_Write	;wreg free
  9640                           
  9641                           ;main.c: 677: for(j = 0; j < 6; j++){
  9642  001EFE  0E00               	movlw	0
  9643  001F00  6E75               	movwf	_j,c
  9644  001F02                     i2l5780:
  9645  001F02  0E05               	movlw	5
  9646  001F04  6475               	cpfsgt	_j,c
  9647  001F06  D001               	goto	i2l421
  9648  001F08  D00E               	goto	i2u478_40
  9649  001F0A                     i2l421:
  9650                           
  9651                           ;main.c: 678: time[j] = I2C_Master_Read(0);
  9652  001F0A  5075               	movf	_j,w,c
  9653  001F0C  0D01               	mullw	1
  9654  001F0E  0E52               	movlw	low _time
  9655  001F10  24F3               	addwf	prodl,w,c
  9656  001F12  6ED9               	movwf	fsr2l,c
  9657  001F14  0E00               	movlw	high _time
  9658  001F16  20F4               	addwfc	prodh,w,c
  9659  001F18  6EDA               	movwf	fsr2h,c
  9660  001F1A  0E00               	movlw	0
  9661  001F1C  EC1D  F021         	call	i2_I2C_Master_Read
  9662  001F20  6EDF               	movwf	indf2,c
  9663  001F22  2A75               	incf	_j,f,c
  9664  001F24  D7EE               	goto	i2l5780
  9665  001F26                     i2u478_40:
  9666                           
  9667                           ;main.c: 679: }
  9668                           ;main.c: 680: time[6] = I2C_Master_Read(1);
  9669  001F26  0E01               	movlw	1
  9670  001F28  EC1D  F021         	call	i2_I2C_Master_Read
  9671  001F2C  6E58               	movwf	_time+6,c
  9672                           
  9673                           ;main.c: 681: I2C_Master_Stop();
  9674  001F2E  EC20  F022         	call	i2_I2C_Master_Stop	;wreg free
  9675                           
  9676                           ;main.c: 683: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9677  001F32  0E80               	movlw	128
  9678  001F34  ECFB  F021         	call	i2_lcdInst
  9679  001F38  0E41               	movlw	65
  9680  001F3A  6E27               	movwf	??_interruptHandler& (0+255),c
  9681  001F3C  0EEE               	movlw	238
  9682  001F3E                     i2u592_47:
  9683  001F3E  2EE8               	decfsz	wreg,f,c
  9684  001F40  D7FE               	bra	i2u592_47
  9685  001F42  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9686  001F44  D7FC               	bra	i2u592_47
  9687  001F46  D000               	nop2	
  9688                           
  9689                           ;main.c: 684: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  9690  001F48  0EE2               	movlw	low STR_53
  9691  001F4A  6E0D               	movwf	i2printf@f,c
  9692  001F4C  0EFE               	movlw	high STR_53
  9693  001F4E  6E0E               	movwf	i2printf@f+1,c
  9694  001F50  C058  F00F         	movff	_time+6,?i2_printf+2
  9695  001F54  6A10               	clrf	?i2_printf+3,c
  9696  001F56  C057  F011         	movff	_time+5,?i2_printf+4
  9697  001F5A  6A12               	clrf	?i2_printf+5,c
  9698  001F5C  C056  F013         	movff	_time+4,?i2_printf+6
  9699  001F60  6A14               	clrf	?i2_printf+7,c
  9700  001F62  EC83  F016         	call	i2_printf	;wreg free
  9701                           
  9702                           ;main.c: 685: lcdInst(0xC0);;
  9703  001F66  0EC0               	movlw	192
  9704  001F68  ECFB  F021         	call	i2_lcdInst
  9705                           
  9706                           ;main.c: 686: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  9707  001F6C  0EF1               	movlw	low STR_54
  9708  001F6E  6E0D               	movwf	i2printf@f,c
  9709  001F70  0EFE               	movlw	high STR_54
  9710  001F72  6E0E               	movwf	i2printf@f+1,c
  9711  001F74  C054  F00F         	movff	_time+2,?i2_printf+2
  9712  001F78  6A10               	clrf	?i2_printf+3,c
  9713  001F7A  C053  F011         	movff	_time+1,?i2_printf+4
  9714  001F7E  6A12               	clrf	?i2_printf+5,c
  9715  001F80  C052  F013         	movff	_time,?i2_printf+6
  9716  001F84  6A14               	clrf	?i2_printf+7,c
  9717  001F86  EC83  F016         	call	i2_printf	;wreg free
  9718                           
  9719                           ;main.c: 687: _delay((unsigned long)((600)*(40000000/4000.0)));
  9720  001F8A  0E1F               	movlw	31
  9721  001F8C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  9722  001F8E  0E71               	movlw	113
  9723  001F90  6E27               	movwf	??_interruptHandler& (0+255),c
  9724  001F92  0E1E               	movlw	30
  9725  001F94                     i2u593_47:
  9726  001F94  2EE8               	decfsz	wreg,f,c
  9727  001F96  D7FE               	bra	i2u593_47
  9728  001F98  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9729  001F9A  D7FC               	bra	i2u593_47
  9730  001F9C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9731  001F9E  D7FA               	bra	i2u593_47
  9732  001FA0  D000               	nop2	
  9733  001FA2  0100               	movlb	0	; () banked
  9734  001FA4  4BCC               	infsnz	_i& (0+255),f,b
  9735  001FA6  2BCD               	incf	(_i+1)& (0+255),f,b
  9736  001FA8  51CD               	movf	(_i+1)& (0+255),w,b
  9737  001FAA  E104               	bnz	i2u479_40
  9738  001FAC                     L5:
  9739  001FAC  0E03               	movlw	3
  9740  001FAE  5DCC               	subwf	_i& (0+255),w,b
  9741  001FB0  A0D8               	btfss	status,0,c
  9742  001FB2  D783               	goto	i2l419
  9743  001FB4                     i2u479_40:
  9744  001FB4  EF38  F014         	goto	i2l6100
  9745  001FB8                     i2l418:
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;main.c: 693: }
  9749                           ;main.c: 694: if (temp == '2'){
  9750                           
  9751                           ; BSR set to: 0
  9752  001FB8  0E32               	movlw	50
  9753  001FBA  1841               	xorwf	interruptHandler@temp,w,c
  9754  001FBC  A4D8               	btfss	status,2,c
  9755  001FBE  D099               	goto	i2l423
  9756                           
  9757                           ; BSR set to: 0
  9758                           ;main.c: 703: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
  9759  001FC0  C05D  F001         	movff	_hr_initial,i2___wmul@multiplier
  9760  001FC4  C05E  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
  9761  001FC8  0E0E               	movlw	14
  9762  001FCA  6E04               	movwf	i2___wmul@multiplicand+1,c
  9763  001FCC  0E10               	movlw	16
  9764  001FCE  6E03               	movwf	i2___wmul@multiplicand,c
  9765  001FD0  EC0A  F021         	call	i2___wmul	;wreg free
  9766  001FD4  C001  F027         	movff	?i2___wmul,??_interruptHandler
  9767  001FD8  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
  9768  001FDC  C05B  F001         	movff	_min_initial,i2___wmul@multiplier
  9769  001FE0  C05C  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
  9770  001FE4  0E00               	movlw	0
  9771  001FE6  6E04               	movwf	i2___wmul@multiplicand+1,c
  9772  001FE8  0E3C               	movlw	60
  9773  001FEA  6E03               	movwf	i2___wmul@multiplicand,c
  9774  001FEC  EC0A  F021         	call	i2___wmul	;wreg free
  9775  001FF0  5001               	movf	?i2___wmul,w,c
  9776  001FF2  2627               	addwf	??_interruptHandler,f,c
  9777  001FF4  5002               	movf	?i2___wmul+1,w,c
  9778  001FF6  2228               	addwfc	??_interruptHandler+1,f,c
  9779  001FF8  5059               	movf	_sec_initial,w,c
  9780  001FFA  2427               	addwf	??_interruptHandler,w,c
  9781  001FFC  0100               	movlb	0	; () banked
  9782  001FFE  6F98               	movwf	_initial_time& (0+255),b
  9783  002000  505A               	movf	_sec_initial+1,w,c
  9784  002002  2028               	addwfc	??_interruptHandler+1,w,c
  9785  002004  6F99               	movwf	(_initial_time+1)& (0+255),b
  9786                           
  9787                           ;main.c: 704: final_time = hr_final*3600 + min_final*60 + sec_final;
  9788  002006  C096  F001         	movff	_hr_final,i2___wmul@multiplier
  9789  00200A  C097  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
  9790  00200E  0E0E               	movlw	14
  9791  002010  6E04               	movwf	i2___wmul@multiplicand+1,c
  9792  002012  0E10               	movlw	16
  9793  002014  6E03               	movwf	i2___wmul@multiplicand,c
  9794  002016  EC0A  F021         	call	i2___wmul	;wreg free
  9795  00201A  C001  F027         	movff	?i2___wmul,??_interruptHandler
  9796  00201E  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
  9797  002022  C094  F001         	movff	_min_final,i2___wmul@multiplier
  9798  002026  C095  F002         	movff	_min_final+1,i2___wmul@multiplier+1
  9799  00202A  0E00               	movlw	0
  9800  00202C  6E04               	movwf	i2___wmul@multiplicand+1,c
  9801  00202E  0E3C               	movlw	60
  9802  002030  6E03               	movwf	i2___wmul@multiplicand,c
  9803  002032  EC0A  F021         	call	i2___wmul	;wreg free
  9804  002036  5001               	movf	?i2___wmul,w,c
  9805  002038  2627               	addwf	??_interruptHandler,f,c
  9806  00203A  5002               	movf	?i2___wmul+1,w,c
  9807  00203C  2228               	addwfc	??_interruptHandler+1,f,c
  9808  00203E  0100               	movlb	0	; () banked
  9809  002040  5192               	movf	_sec_final& (0+255),w,b
  9810  002042  2427               	addwf	??_interruptHandler,w,c
  9811  002044  6F90               	movwf	_final_time& (0+255),b
  9812  002046  5193               	movf	(_sec_final+1)& (0+255),w,b
  9813  002048  2028               	addwfc	??_interruptHandler+1,w,c
  9814  00204A  6F91               	movwf	(_final_time+1)& (0+255),b
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;main.c: 705: operationTime = final_time - initial_time;
  9818  00204C  C098  F027         	movff	_initial_time,??_interruptHandler
  9819  002050  C099  F028         	movff	_initial_time+1,??_interruptHandler+1
  9820  002054  1E27               	comf	??_interruptHandler,f,c
  9821  002056  1E28               	comf	??_interruptHandler+1,f,c
  9822  002058  4A27               	infsnz	??_interruptHandler,f,c
  9823  00205A  2A28               	incf	??_interruptHandler+1,f,c
  9824  00205C  5190               	movf	_final_time& (0+255),w,b
  9825  00205E  2427               	addwf	??_interruptHandler,w,c
  9826  002060  6E71               	movwf	_operationTime,c
  9827  002062  5191               	movf	(_final_time+1)& (0+255),w,b
  9828  002064  2028               	addwfc	??_interruptHandler+1,w,c
  9829  002066  6E72               	movwf	_operationTime+1,c
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;main.c: 706: initLCD();
  9833  002068  EC66  F01F         	call	i2_initLCD	;wreg free
  9834                           
  9835                           ;main.c: 709: printf("operation time:");
  9836  00206C  0E76               	movlw	low STR_57
  9837  00206E  6E0D               	movwf	i2printf@f,c
  9838  002070  0EFE               	movlw	high STR_57
  9839  002072  6E0E               	movwf	i2printf@f+1,c
  9840  002074  EC83  F016         	call	i2_printf	;wreg free
  9841                           
  9842                           ;main.c: 710: lcdInst(0xC0);;
  9843  002078  0EC0               	movlw	192
  9844  00207A  ECFB  F021         	call	i2_lcdInst
  9845                           
  9846                           ;main.c: 711: printf("%dmin %dsecs",operationTime/60,operationTime%60);
  9847  00207E  0E2A               	movlw	low STR_58
  9848  002080  6E0D               	movwf	i2printf@f,c
  9849  002082  0EFF               	movlw	high STR_58
  9850  002084  6E0E               	movwf	i2printf@f+1,c
  9851  002086  C071  F001         	movff	_operationTime,i2___awdiv@dividend
  9852  00208A  C072  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
  9853  00208E  0E00               	movlw	0
  9854  002090  6E04               	movwf	i2___awdiv@divisor+1,c
  9855  002092  0E3C               	movlw	60
  9856  002094  6E03               	movwf	i2___awdiv@divisor,c
  9857  002096  ECEC  F01C         	call	i2___awdiv	;wreg free
  9858  00209A  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  9859  00209E  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  9860  0020A2  C071  F001         	movff	_operationTime,___awmod@dividend
  9861  0020A6  C072  F002         	movff	_operationTime+1,___awmod@dividend+1
  9862  0020AA  0E00               	movlw	0
  9863  0020AC  6E04               	movwf	___awmod@divisor+1,c
  9864  0020AE  0E3C               	movlw	60
  9865  0020B0  6E03               	movwf	___awmod@divisor,c
  9866  0020B2  ECAA  F01D         	call	___awmod	;wreg free
  9867  0020B6  C001  F011         	movff	?___awmod,?i2_printf+4
  9868  0020BA  C002  F012         	movff	?___awmod+1,?i2_printf+5
  9869  0020BE  EC83  F016         	call	i2_printf	;wreg free
  9870                           
  9871                           ;main.c: 712: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9872  0020C2  0E80               	movlw	128
  9873  0020C4  ECFB  F021         	call	i2_lcdInst
  9874  0020C8  0E41               	movlw	65
  9875  0020CA  6E27               	movwf	??_interruptHandler& (0+255),c
  9876  0020CC  0EEE               	movlw	238
  9877  0020CE                     i2u594_47:
  9878  0020CE  2EE8               	decfsz	wreg,f,c
  9879  0020D0  D7FE               	bra	i2u594_47
  9880  0020D2  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9881  0020D4  D7FC               	bra	i2u594_47
  9882  0020D6  D000               	nop2	
  9883                           
  9884                           ;main.c: 713: _delay((unsigned long)((2000)*(40000000/4000.0)));
  9885  0020D8  0E66               	movlw	102
  9886  0020DA  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  9887  0020DC  0E76               	movlw	118
  9888  0020DE  6E27               	movwf	??_interruptHandler& (0+255),c
  9889  0020E0  0EC1               	movlw	193
  9890  0020E2                     i2u595_47:
  9891  0020E2  2EE8               	decfsz	wreg,f,c
  9892  0020E4  D7FE               	bra	i2u595_47
  9893  0020E6  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9894  0020E8  D7FC               	bra	i2u595_47
  9895  0020EA  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9896  0020EC  D7FA               	bra	i2u595_47
  9897  0020EE  F000               	nop	
  9898  0020F0  D3BF               	goto	i2l6100
  9899  0020F2                     i2l423:
  9900                           
  9901                           ;main.c: 719: }
  9902                           ;main.c: 721: if (temp == '3'){
  9903  0020F2  0E33               	movlw	51
  9904  0020F4  1841               	xorwf	interruptHandler@temp,w,c
  9905  0020F6  B4D8               	btfsc	status,2,c
  9906  0020F8  D3BB               	goto	i2l6100
  9907                           
  9908                           ;main.c: 728: }
  9909                           ;main.c: 730: if (temp == '4'){
  9910                           
  9911                           ;main.c: 727: return;
  9912                           
  9913                           ;main.c: 726: INT1IF = 0;
  9914  0020FA  0E34               	movlw	52
  9915  0020FC  1841               	xorwf	interruptHandler@temp,w,c
  9916  0020FE  A4D8               	btfss	status,2,c
  9917  002100  D00A               	goto	i2l425
  9918                           
  9919                           ;main.c: 731: operation_done = 1;
  9920  002102  0E00               	movlw	0
  9921  002104  0100               	movlb	0	; () banked
  9922  002106  6FC5               	movwf	(_operation_done+1)& (0+255),b
  9923  002108  0E01               	movlw	1
  9924  00210A  6FC4               	movwf	_operation_done& (0+255),b
  9925                           
  9926                           ;main.c: 732: mode = 0;
  9927  00210C  0E00               	movlw	0
  9928  00210E  6FC9               	movwf	(_mode+1)& (0+255),b
  9929  002110  0E00               	movlw	0
  9930  002112                     L11:
  9931  002112  6FC8               	movwf	_mode& (0+255),b
  9932  002114  D3AD               	goto	i2l6100
  9933  002116                     i2l425:
  9934                           
  9935                           ;main.c: 735: }
  9936                           ;main.c: 737: }
  9937                           ;main.c: 762: if (state == 0){
  9938                           
  9939                           ; BSR set to: 0
  9940                           
  9941                           ; BSR set to: 0
  9942  002116  0100               	movlb	0	; () banked
  9943  002118  51BC               	movf	_state& (0+255),w,b
  9944  00211A  11BD               	iorwf	(_state+1)& (0+255),w,b
  9945  00211C  A4D8               	btfss	status,2,c
  9946  00211E  D0CD               	goto	i2l426
  9947                           
  9948                           ; BSR set to: 0
  9949                           ;main.c: 764: if(temp == '4'){
  9950  002120  0E34               	movlw	52
  9951  002122  1841               	xorwf	interruptHandler@temp,w,c
  9952  002124  A4D8               	btfss	status,2,c
  9953  002126  D01F               	goto	i2l427
  9954                           
  9955                           ; BSR set to: 0
  9956                           ;main.c: 765: assembly_step = 4;
  9957  002128  0E00               	movlw	0
  9958  00212A  6FBB               	movwf	(_assembly_step+1)& (0+255),b
  9959  00212C  0E04               	movlw	4
  9960  00212E  6FBA               	movwf	_assembly_step& (0+255),b
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;main.c: 766: prev_state = state;
  9964  002130  C0BC  F067         	movff	_state,_prev_state
  9965  002134  C0BD  F068         	movff	_state+1,_prev_state+1
  9966                           
  9967                           ;main.c: 767: state = 1;
  9968  002138  0E00               	movlw	0
  9969  00213A  6FBD               	movwf	(_state+1)& (0+255),b
  9970  00213C  0E01               	movlw	1
  9971  00213E  6FBC               	movwf	_state& (0+255),b
  9972                           
  9973                           ; BSR set to: 0
  9974                           ;main.c: 768: lcdInst(0xC0);;
  9975  002140  0EC0               	movlw	192
  9976  002142  ECFB  F021         	call	i2_lcdInst
  9977                           
  9978                           ;main.c: 769: putch(keys[keypress]);
  9979  002146  5040               	movf	interruptHandler@keypress,w,c
  9980  002148  0D01               	mullw	1
  9981  00214A  0E77               	movlw	low _keys
  9982  00214C  24F3               	addwf	prodl,w,c
  9983  00214E  6EF6               	movwf	tblptrl,c
  9984  002150  0EFD               	movlw	high _keys
  9985  002152  20F4               	addwfc	prodh,w,c
  9986  002154  6EF7               	movwf	tblptrh,c
  9987  002156                     	if	1	;There are 3 active tblptr bytes
  9988  002156  6AF8               	clrf	tblptru,c
  9989  002158  0E00               	movlw	low (__mediumconst shr (0+16))
  9990  00215A  22F8               	addwfc	tblptru,f,c
  9991  00215C                     	endif
  9992  00215C  0008               	tblrd		*
  9993  00215E  50F5               	movf	tablat,w,c
  9994  002160  ECF1  F021         	call	i2_putch
  9995                           
  9996                           ;main.c: 771: }
  9997  002164  D0A3               	goto	i2l436
  9998  002166                     i2l427:
  9999                           
 10000                           ;main.c: 772: else if(temp == '5'){
 10001  002166  0E35               	movlw	53
 10002  002168  1841               	xorwf	interruptHandler@temp,w,c
 10003  00216A  A4D8               	btfss	status,2,c
 10004  00216C  D020               	goto	i2l429
 10005                           
 10006                           ;main.c: 773: assembly_step = 5;
 10007  00216E  0E00               	movlw	0
 10008  002170  0100               	movlb	0	; () banked
 10009  002172  6FBB               	movwf	(_assembly_step+1)& (0+255),b
 10010  002174  0E05               	movlw	5
 10011  002176  6FBA               	movwf	_assembly_step& (0+255),b
 10012                           
 10013                           ; BSR set to: 0
 10014                           ;main.c: 774: prev_state = state;
 10015  002178  C0BC  F067         	movff	_state,_prev_state
 10016  00217C  C0BD  F068         	movff	_state+1,_prev_state+1
 10017                           
 10018                           ;main.c: 775: state = 1;
 10019  002180  0E00               	movlw	0
 10020  002182  6FBD               	movwf	(_state+1)& (0+255),b
 10021  002184  0E01               	movlw	1
 10022  002186  6FBC               	movwf	_state& (0+255),b
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;main.c: 776: lcdInst(0xC0);;
 10026  002188  0EC0               	movlw	192
 10027  00218A  ECFB  F021         	call	i2_lcdInst
 10028                           
 10029                           ;main.c: 777: putch(keys[keypress]);
 10030  00218E  5040               	movf	interruptHandler@keypress,w,c
 10031  002190  0D01               	mullw	1
 10032  002192  0E77               	movlw	low _keys
 10033  002194  24F3               	addwf	prodl,w,c
 10034  002196  6EF6               	movwf	tblptrl,c
 10035  002198  0EFD               	movlw	high _keys
 10036  00219A  20F4               	addwfc	prodh,w,c
 10037  00219C  6EF7               	movwf	tblptrh,c
 10038  00219E                     	if	1	;There are 3 active tblptr bytes
 10039  00219E  6AF8               	clrf	tblptru,c
 10040  0021A0  0E00               	movlw	low (__mediumconst shr (0+16))
 10041  0021A2  22F8               	addwfc	tblptru,f,c
 10042  0021A4                     	endif
 10043  0021A4  0008               	tblrd		*
 10044  0021A6  50F5               	movf	tablat,w,c
 10045  0021A8  ECF1  F021         	call	i2_putch
 10046                           
 10047                           ;main.c: 779: }
 10048  0021AC  D07F               	goto	i2l436
 10049  0021AE                     i2l429:
 10050                           
 10051                           ;main.c: 780: else if (temp == '6') {
 10052  0021AE  0E36               	movlw	54
 10053  0021B0  1841               	xorwf	interruptHandler@temp,w,c
 10054  0021B2  A4D8               	btfss	status,2,c
 10055  0021B4  D020               	goto	i2l431
 10056                           
 10057                           ;main.c: 781: assembly_step = 6;
 10058  0021B6  0E00               	movlw	0
 10059  0021B8  0100               	movlb	0	; () banked
 10060  0021BA  6FBB               	movwf	(_assembly_step+1)& (0+255),b
 10061  0021BC  0E06               	movlw	6
 10062  0021BE  6FBA               	movwf	_assembly_step& (0+255),b
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;main.c: 782: prev_state = state;
 10066  0021C0  C0BC  F067         	movff	_state,_prev_state
 10067  0021C4  C0BD  F068         	movff	_state+1,_prev_state+1
 10068                           
 10069                           ;main.c: 783: state = 1;
 10070  0021C8  0E00               	movlw	0
 10071  0021CA  6FBD               	movwf	(_state+1)& (0+255),b
 10072  0021CC  0E01               	movlw	1
 10073  0021CE  6FBC               	movwf	_state& (0+255),b
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;main.c: 784: lcdInst(0xC0);;
 10077  0021D0  0EC0               	movlw	192
 10078  0021D2  ECFB  F021         	call	i2_lcdInst
 10079                           
 10080                           ;main.c: 785: putch(keys[keypress]);
 10081  0021D6  5040               	movf	interruptHandler@keypress,w,c
 10082  0021D8  0D01               	mullw	1
 10083  0021DA  0E77               	movlw	low _keys
 10084  0021DC  24F3               	addwf	prodl,w,c
 10085  0021DE  6EF6               	movwf	tblptrl,c
 10086  0021E0  0EFD               	movlw	high _keys
 10087  0021E2  20F4               	addwfc	prodh,w,c
 10088  0021E4  6EF7               	movwf	tblptrh,c
 10089  0021E6                     	if	1	;There are 3 active tblptr bytes
 10090  0021E6  6AF8               	clrf	tblptru,c
 10091  0021E8  0E00               	movlw	low (__mediumconst shr (0+16))
 10092  0021EA  22F8               	addwfc	tblptru,f,c
 10093  0021EC                     	endif
 10094  0021EC  0008               	tblrd		*
 10095  0021EE  50F5               	movf	tablat,w,c
 10096  0021F0  ECF1  F021         	call	i2_putch
 10097                           
 10098                           ;main.c: 786: }
 10099  0021F4  D05B               	goto	i2l436
 10100  0021F6                     i2l431:
 10101                           
 10102                           ;main.c: 787: else if (temp == '7'){
 10103  0021F6  0E37               	movlw	55
 10104  0021F8  1841               	xorwf	interruptHandler@temp,w,c
 10105  0021FA  A4D8               	btfss	status,2,c
 10106  0021FC  D020               	goto	i2l433
 10107                           
 10108                           ;main.c: 788: assembly_step = 7;
 10109  0021FE  0E00               	movlw	0
 10110  002200  0100               	movlb	0	; () banked
 10111  002202  6FBB               	movwf	(_assembly_step+1)& (0+255),b
 10112  002204  0E07               	movlw	7
 10113  002206  6FBA               	movwf	_assembly_step& (0+255),b
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;main.c: 789: prev_state = state;
 10117  002208  C0BC  F067         	movff	_state,_prev_state
 10118  00220C  C0BD  F068         	movff	_state+1,_prev_state+1
 10119                           
 10120                           ;main.c: 790: state = 1;
 10121  002210  0E00               	movlw	0
 10122  002212  6FBD               	movwf	(_state+1)& (0+255),b
 10123  002214  0E01               	movlw	1
 10124  002216  6FBC               	movwf	_state& (0+255),b
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;main.c: 791: lcdInst(0xC0);;
 10128  002218  0EC0               	movlw	192
 10129  00221A  ECFB  F021         	call	i2_lcdInst
 10130                           
 10131                           ;main.c: 792: putch(keys[keypress]);
 10132  00221E  5040               	movf	interruptHandler@keypress,w,c
 10133  002220  0D01               	mullw	1
 10134  002222  0E77               	movlw	low _keys
 10135  002224  24F3               	addwf	prodl,w,c
 10136  002226  6EF6               	movwf	tblptrl,c
 10137  002228  0EFD               	movlw	high _keys
 10138  00222A  20F4               	addwfc	prodh,w,c
 10139  00222C  6EF7               	movwf	tblptrh,c
 10140  00222E                     	if	1	;There are 3 active tblptr bytes
 10141  00222E  6AF8               	clrf	tblptru,c
 10142  002230  0E00               	movlw	low (__mediumconst shr (0+16))
 10143  002232  22F8               	addwfc	tblptru,f,c
 10144  002234                     	endif
 10145  002234  0008               	tblrd		*
 10146  002236  50F5               	movf	tablat,w,c
 10147  002238  ECF1  F021         	call	i2_putch
 10148                           
 10149                           ;main.c: 794: }
 10150  00223C  D037               	goto	i2l436
 10151  00223E                     i2l433:
 10152                           
 10153                           ;main.c: 795: else if (temp == '8'){
 10154  00223E  0E38               	movlw	56
 10155  002240  1841               	xorwf	interruptHandler@temp,w,c
 10156  002242  A4D8               	btfss	status,2,c
 10157  002244  D020               	goto	i2l435
 10158                           
 10159                           ;main.c: 796: assembly_step = 8;
 10160  002246  0E00               	movlw	0
 10161  002248  0100               	movlb	0	; () banked
 10162  00224A  6FBB               	movwf	(_assembly_step+1)& (0+255),b
 10163  00224C  0E08               	movlw	8
 10164  00224E  6FBA               	movwf	_assembly_step& (0+255),b
 10165                           
 10166                           ; BSR set to: 0
 10167                           ;main.c: 797: prev_state = state;
 10168  002250  C0BC  F067         	movff	_state,_prev_state
 10169  002254  C0BD  F068         	movff	_state+1,_prev_state+1
 10170                           
 10171                           ;main.c: 798: state = 1;
 10172  002258  0E00               	movlw	0
 10173  00225A  6FBD               	movwf	(_state+1)& (0+255),b
 10174  00225C  0E01               	movlw	1
 10175  00225E  6FBC               	movwf	_state& (0+255),b
 10176                           
 10177                           ; BSR set to: 0
 10178                           ;main.c: 799: lcdInst(0xC0);;
 10179  002260  0EC0               	movlw	192
 10180  002262  ECFB  F021         	call	i2_lcdInst
 10181                           
 10182                           ;main.c: 800: putch(keys[keypress]);
 10183  002266  5040               	movf	interruptHandler@keypress,w,c
 10184  002268  0D01               	mullw	1
 10185  00226A  0E77               	movlw	low _keys
 10186  00226C  24F3               	addwf	prodl,w,c
 10187  00226E  6EF6               	movwf	tblptrl,c
 10188  002270  0EFD               	movlw	high _keys
 10189  002272  20F4               	addwfc	prodh,w,c
 10190  002274  6EF7               	movwf	tblptrh,c
 10191  002276                     	if	1	;There are 3 active tblptr bytes
 10192  002276  6AF8               	clrf	tblptru,c
 10193  002278  0E00               	movlw	low (__mediumconst shr (0+16))
 10194  00227A  22F8               	addwfc	tblptru,f,c
 10195  00227C                     	endif
 10196  00227C  0008               	tblrd		*
 10197  00227E  50F5               	movf	tablat,w,c
 10198  002280  ECF1  F021         	call	i2_putch
 10199                           
 10200                           ;main.c: 802: }
 10201  002284  D013               	goto	i2l436
 10202  002286                     i2l435:
 10203                           
 10204                           ;main.c: 803: else{
 10205                           ;main.c: 809: initLCD();
 10206  002286  EC66  F01F         	call	i2_initLCD	;wreg free
 10207                           
 10208                           ;main.c: 810: printf("Wrong number! ");
 10209  00228A  0EA6               	movlw	low STR_59
 10210  00228C  6E0D               	movwf	i2printf@f,c
 10211  00228E  0EFE               	movlw	high STR_59
 10212  002290  6E0E               	movwf	i2printf@f+1,c
 10213  002292  EC83  F016         	call	i2_printf	;wreg free
 10214                           
 10215                           ;main.c: 811: _delay((unsigned long)((1000)*(40000000/4000.0)));
 10216  002296  0E33               	movlw	51
 10217  002298  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10218  00229A  0EBB               	movlw	187
 10219  00229C  6E27               	movwf	??_interruptHandler& (0+255),c
 10220  00229E  0EE0               	movlw	224
 10221  0022A0                     i2u596_47:
 10222  0022A0  2EE8               	decfsz	wreg,f,c
 10223  0022A2  D7FE               	bra	i2u596_47
 10224  0022A4  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10225  0022A6  D7FC               	bra	i2u596_47
 10226  0022A8  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10227  0022AA  D7FA               	bra	i2u596_47
 10228  0022AC                     i2l436:
 10229                           
 10230                           ;main.c: 813: }
 10231                           ;main.c: 819: generate_compartment_array(assembly_step);
 10232  0022AC  C0BA  F001         	movff	_assembly_step,generate_compartment_array@step
 10233  0022B0  C0BB  F002         	movff	_assembly_step+1,generate_compartment_array@step+1
 10234  0022B4  EC90  F018         	call	_generate_compartment_array	;wreg free
 10235  0022B8  D2DB               	goto	i2l6100
 10236  0022BA                     i2l426:
 10237                           
 10238                           ;main.c: 826: }
 10239                           ;main.c: 834: if(state == 1){
 10240  0022BA  0100               	movlb	0	; () banked
 10241  0022BC  05BC               	decf	_state& (0+255),w,b
 10242  0022BE  11BD               	iorwf	(_state+1)& (0+255),w,b
 10243  0022C0  A4D8               	btfss	status,2,c
 10244  0022C2  D19D               	goto	i2l437
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;main.c: 835: if (temp == 'A'){
 10248  0022C4  0E41               	movlw	65
 10249  0022C6  1841               	xorwf	interruptHandler@temp,w,c
 10250  0022C8  A4D8               	btfss	status,2,c
 10251  0022CA  D004               	goto	i2l438
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;main.c: 836: state = prev_state;
 10255  0022CC  C067  F0BC         	movff	_prev_state,_state
 10256  0022D0  C068  F0BD         	movff	_prev_state+1,_state+1
 10257  0022D4                     i2l438:
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;main.c: 837: }
 10261                           ;main.c: 839: if (temp == '1'){
 10262                           
 10263                           ; BSR set to: 0
 10264  0022D4  0E31               	movlw	49
 10265  0022D6  1841               	xorwf	interruptHandler@temp,w,c
 10266  0022D8  A4D8               	btfss	status,2,c
 10267  0022DA  D01C               	goto	i2l439
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;main.c: 840: lcdInst(0xC0);;
 10271  0022DC  0EC0               	movlw	192
 10272  0022DE  ECFB  F021         	call	i2_lcdInst
 10273                           
 10274                           ;main.c: 841: putch('B');
 10275  0022E2  0E42               	movlw	66
 10276  0022E4  ECF1  F021         	call	i2_putch
 10277                           
 10278                           ;main.c: 842: strcpy(temp_set,"B");
 10279  0022E8  0EB4               	movlw	low _temp_set
 10280  0022EA  6E07               	movwf	strcpy@to,c
 10281  0022EC  0E01               	movlw	high _temp_set
 10282  0022EE  6E08               	movwf	strcpy@to+1,c
 10283  0022F0  0EFC               	movlw	low STR_60
 10284  0022F2  6E09               	movwf	strcpy@from,c
 10285  0022F4  0EFF               	movlw	high STR_60
 10286  0022F6  6E0A               	movwf	strcpy@from+1,c
 10287  0022F8  ECF9  F01F         	call	_strcpy	;wreg free
 10288                           
 10289                           ;main.c: 843: strcat(current_set,temp_set);
 10290  0022FC  0ECF               	movlw	low _current_set
 10291  0022FE  6E01               	movwf	strcat@to,c
 10292  002300  0E00               	movlw	high _current_set
 10293  002302  6E02               	movwf	strcat@to+1,c
 10294  002304  0EB4               	movlw	low _temp_set
 10295  002306  6E03               	movwf	strcat@from,c
 10296  002308  0E01               	movlw	high _temp_set
 10297  00230A  6E04               	movwf	strcat@from+1,c
 10298  00230C  ECA3  F020         	call	_strcat	;wreg free
 10299                           
 10300                           ;main.c: 844: counter++;
 10301  002310  4A6F               	infsnz	_counter,f,c
 10302  002312  2A70               	incf	_counter+1,f,c
 10303  002314                     i2l439:
 10304                           
 10305                           ;main.c: 845: }
 10306                           ;main.c: 847: if(temp == '2'){
 10307  002314  0E32               	movlw	50
 10308  002316  1841               	xorwf	interruptHandler@temp,w,c
 10309  002318  A4D8               	btfss	status,2,c
 10310  00231A  D01C               	goto	i2l440
 10311                           
 10312                           ;main.c: 848: lcdInst(0xC0);;
 10313  00231C  0EC0               	movlw	192
 10314  00231E  ECFB  F021         	call	i2_lcdInst
 10315                           
 10316                           ;main.c: 849: putch('N');
 10317  002322  0E4E               	movlw	78
 10318  002324  ECF1  F021         	call	i2_putch
 10319                           
 10320                           ;main.c: 850: strcpy(temp_set,"N");
 10321  002328  0EB4               	movlw	low _temp_set
 10322  00232A  6E07               	movwf	strcpy@to,c
 10323  00232C  0E01               	movlw	high _temp_set
 10324  00232E  6E08               	movwf	strcpy@to+1,c
 10325  002330  0ED5               	movlw	low (STR_82+2)
 10326  002332  6E09               	movwf	strcpy@from,c
 10327  002334  0EFF               	movlw	high (STR_82+2)
 10328  002336  6E0A               	movwf	strcpy@from+1,c
 10329  002338  ECF9  F01F         	call	_strcpy	;wreg free
 10330                           
 10331                           ;main.c: 851: strcat(current_set,temp_set);
 10332  00233C  0ECF               	movlw	low _current_set
 10333  00233E  6E01               	movwf	strcat@to,c
 10334  002340  0E00               	movlw	high _current_set
 10335  002342  6E02               	movwf	strcat@to+1,c
 10336  002344  0EB4               	movlw	low _temp_set
 10337  002346  6E03               	movwf	strcat@from,c
 10338  002348  0E01               	movlw	high _temp_set
 10339  00234A  6E04               	movwf	strcat@from+1,c
 10340  00234C  ECA3  F020         	call	_strcat	;wreg free
 10341                           
 10342                           ;main.c: 852: counter++;
 10343  002350  4A6F               	infsnz	_counter,f,c
 10344  002352  2A70               	incf	_counter+1,f,c
 10345  002354                     i2l440:
 10346                           
 10347                           ;main.c: 853: }
 10348                           ;main.c: 855: if(temp == '3'){
 10349  002354  0E33               	movlw	51
 10350  002356  1841               	xorwf	interruptHandler@temp,w,c
 10351  002358  A4D8               	btfss	status,2,c
 10352  00235A  D01C               	goto	i2l441
 10353                           
 10354                           ;main.c: 856: lcdInst(0xC0);;
 10355  00235C  0EC0               	movlw	192
 10356  00235E  ECFB  F021         	call	i2_lcdInst
 10357                           
 10358                           ;main.c: 857: putch('S');
 10359  002362  0E53               	movlw	83
 10360  002364  ECF1  F021         	call	i2_putch
 10361                           
 10362                           ;main.c: 859: strcpy(temp_set,"S");
 10363  002368  0EB4               	movlw	low _temp_set
 10364  00236A  6E07               	movwf	strcpy@to,c
 10365  00236C  0E01               	movlw	high _temp_set
 10366  00236E  6E08               	movwf	strcpy@to+1,c
 10367  002370  0ED9               	movlw	low (STR_83+2)
 10368  002372  6E09               	movwf	strcpy@from,c
 10369  002374  0EFF               	movlw	high (STR_83+2)
 10370  002376  6E0A               	movwf	strcpy@from+1,c
 10371  002378  ECF9  F01F         	call	_strcpy	;wreg free
 10372                           
 10373                           ;main.c: 860: strcat(current_set,temp_set);
 10374  00237C  0ECF               	movlw	low _current_set
 10375  00237E  6E01               	movwf	strcat@to,c
 10376  002380  0E00               	movlw	high _current_set
 10377  002382  6E02               	movwf	strcat@to+1,c
 10378  002384  0EB4               	movlw	low _temp_set
 10379  002386  6E03               	movwf	strcat@from,c
 10380  002388  0E01               	movlw	high _temp_set
 10381  00238A  6E04               	movwf	strcat@from+1,c
 10382  00238C  ECA3  F020         	call	_strcat	;wreg free
 10383                           
 10384                           ;main.c: 861: counter++;
 10385  002390  4A6F               	infsnz	_counter,f,c
 10386  002392  2A70               	incf	_counter+1,f,c
 10387  002394                     i2l441:
 10388                           
 10389                           ;main.c: 862: }
 10390                           ;main.c: 863: if (temp == '4'){
 10391  002394  0E34               	movlw	52
 10392  002396  1841               	xorwf	interruptHandler@temp,w,c
 10393  002398  A4D8               	btfss	status,2,c
 10394  00239A  D01C               	goto	i2l442
 10395                           
 10396                           ;main.c: 864: lcdInst(0xC0);;
 10397  00239C  0EC0               	movlw	192
 10398  00239E  ECFB  F021         	call	i2_lcdInst
 10399                           
 10400                           ;main.c: 865: putch('W');
 10401  0023A2  0E57               	movlw	87
 10402  0023A4  ECF1  F021         	call	i2_putch
 10403                           
 10404                           ;main.c: 867: strcpy(temp_set,"W");
 10405  0023A8  0EB4               	movlw	low _temp_set
 10406  0023AA  6E07               	movwf	strcpy@to,c
 10407  0023AC  0E01               	movlw	high _temp_set
 10408  0023AE  6E08               	movwf	strcpy@to+1,c
 10409  0023B0  0EDD               	movlw	low (STR_84+2)
 10410  0023B2  6E09               	movwf	strcpy@from,c
 10411  0023B4  0EFF               	movlw	high (STR_84+2)
 10412  0023B6  6E0A               	movwf	strcpy@from+1,c
 10413  0023B8  ECF9  F01F         	call	_strcpy	;wreg free
 10414                           
 10415                           ;main.c: 868: strcat(current_set,temp_set);
 10416  0023BC  0ECF               	movlw	low _current_set
 10417  0023BE  6E01               	movwf	strcat@to,c
 10418  0023C0  0E00               	movlw	high _current_set
 10419  0023C2  6E02               	movwf	strcat@to+1,c
 10420  0023C4  0EB4               	movlw	low _temp_set
 10421  0023C6  6E03               	movwf	strcat@from,c
 10422  0023C8  0E01               	movlw	high _temp_set
 10423  0023CA  6E04               	movwf	strcat@from+1,c
 10424  0023CC  ECA3  F020         	call	_strcat	;wreg free
 10425                           
 10426                           ;main.c: 870: counter++;
 10427  0023D0  4A6F               	infsnz	_counter,f,c
 10428  0023D2  2A70               	incf	_counter+1,f,c
 10429  0023D4                     i2l442:
 10430                           
 10431                           ;main.c: 871: }
 10432                           ;main.c: 873: if (keys[keypress] == '*'){
 10433  0023D4  5040               	movf	interruptHandler@keypress,w,c
 10434  0023D6  0D01               	mullw	1
 10435  0023D8  0E77               	movlw	low _keys
 10436  0023DA  24F3               	addwf	prodl,w,c
 10437  0023DC  6EF6               	movwf	tblptrl,c
 10438  0023DE  0EFD               	movlw	high _keys
 10439  0023E0  20F4               	addwfc	prodh,w,c
 10440  0023E2  6EF7               	movwf	tblptrh,c
 10441  0023E4                     	if	1	;There are 3 active tblptr bytes
 10442  0023E4  6AF8               	clrf	tblptru,c
 10443  0023E6  0E00               	movlw	low (__mediumconst shr (0+16))
 10444  0023E8  22F8               	addwfc	tblptru,f,c
 10445  0023EA                     	endif
 10446  0023EA  0008               	tblrd		*
 10447  0023EC  50F5               	movf	tablat,w,c
 10448  0023EE  0A2A               	xorlw	42
 10449  0023F0  A4D8               	btfss	status,2,c
 10450  0023F2  D0DA               	goto	i2l443
 10451                           
 10452                           ;main.c: 876: _delay((unsigned long)((500)*(40000000/4000.0)));
 10453  0023F4  0E1A               	movlw	26
 10454  0023F6  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10455  0023F8  0E5E               	movlw	94
 10456  0023FA  6E27               	movwf	??_interruptHandler& (0+255),c
 10457  0023FC  0E6E               	movlw	110
 10458  0023FE                     i2u597_47:
 10459  0023FE  2EE8               	decfsz	wreg,f,c
 10460  002400  D7FE               	bra	i2u597_47
 10461  002402  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10462  002404  D7FC               	bra	i2u597_47
 10463  002406  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10464  002408  D7FA               	bra	i2u597_47
 10465  00240A  D000               	nop2	
 10466                           
 10467                           ;main.c: 877: counter ++;
 10468  00240C  4A6F               	infsnz	_counter,f,c
 10469  00240E  2A70               	incf	_counter+1,f,c
 10470                           
 10471                           ;main.c: 878: for (int i=0;i<20;i++){
 10472  002410  0E00               	movlw	0
 10473  002412  6E3F               	movwf	interruptHandler@i+1,c
 10474  002414  0E00               	movlw	0
 10475  002416  6E3E               	movwf	interruptHandler@i,c
 10476  002418  BE3F               	btfsc	interruptHandler@i+1,7,c
 10477  00241A  D008               	goto	i2l444
 10478  00241C  503F               	movf	interruptHandler@i+1,w,c
 10479  00241E  E105               	bnz	i2u496_40
 10480  002420  0E14               	movlw	20
 10481  002422  5C3E               	subwf	interruptHandler@i,w,c
 10482  002424  B0D8               	btfsc	status,0,c
 10483  002426  D089               	goto	i2u498_40
 10484  002428  D001               	goto	i2l444
 10485  00242A                     i2u496_40:
 10486  00242A  D087               	goto	i2u498_40
 10487  00242C                     i2l444:
 10488                           
 10489                           ;main.c: 879: if (strncmp(current_set,strs[i],4) == 0){
 10490  00242C  0ECF               	movlw	low _current_set
 10491  00242E  6E07               	movwf	strncmp@s1,c
 10492  002430  0E00               	movlw	high _current_set
 10493  002432  6E08               	movwf	strncmp@s1+1,c
 10494  002434  C03E  F001         	movff	interruptHandler@i,i2___wmul@multiplier
 10495  002438  C03F  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
 10496  00243C  0E00               	movlw	0
 10497  00243E  6E04               	movwf	i2___wmul@multiplicand+1,c
 10498  002440  0E05               	movlw	5
 10499  002442  6E03               	movwf	i2___wmul@multiplicand,c
 10500  002444  EC0A  F021         	call	i2___wmul	;wreg free
 10501  002448  0EAA               	movlw	low _strs
 10502  00244A  2401               	addwf	?i2___wmul,w,c
 10503  00244C  6E09               	movwf	strncmp@s2,c
 10504  00244E  0EFD               	movlw	high _strs
 10505  002450  2002               	addwfc	?i2___wmul+1,w,c
 10506  002452  6E0A               	movwf	strncmp@s2+1,c
 10507  002454  0E00               	movlw	0
 10508  002456  6E0C               	movwf	strncmp@len+1,c
 10509  002458  0E04               	movlw	4
 10510  00245A  6E0B               	movwf	strncmp@len,c
 10511  00245C  EC67  F01C         	call	_strncmp	;wreg free
 10512  002460  5007               	movf	?_strncmp,w,c
 10513  002462  1008               	iorwf	?_strncmp+1,w,c
 10514  002464  A4D8               	btfss	status,2,c
 10515  002466  D062               	goto	i2l446
 10516                           
 10517                           ;main.c: 880: strcpy(final_set[counter_step],current_set);
 10518  002468  C06D  F001         	movff	_counter_step,i2___wmul@multiplier
 10519  00246C  C06E  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
 10520  002470  0E00               	movlw	0
 10521  002472  6E04               	movwf	i2___wmul@multiplicand+1,c
 10522  002474  0E05               	movlw	5
 10523  002476  6E03               	movwf	i2___wmul@multiplicand,c
 10524  002478  EC0A  F021         	call	i2___wmul	;wreg free
 10525  00247C  0E8C               	movlw	low _final_set
 10526  00247E  2401               	addwf	?i2___wmul,w,c
 10527  002480  6E07               	movwf	strcpy@to,c
 10528  002482  0E01               	movlw	high _final_set
 10529  002484  2002               	addwfc	?i2___wmul+1,w,c
 10530  002486  6E08               	movwf	strcpy@to+1,c
 10531  002488  0ECF               	movlw	low _current_set
 10532  00248A  6E09               	movwf	strcpy@from,c
 10533  00248C  0E00               	movlw	high _current_set
 10534  00248E  6E0A               	movwf	strcpy@from+1,c
 10535  002490  ECF9  F01F         	call	_strcpy	;wreg free
 10536                           
 10537                           ;main.c: 881: strcpy(current_set2,current_set);
 10538  002494  0E78               	movlw	low _current_set2
 10539  002496  6E07               	movwf	strcpy@to,c
 10540  002498  0E00               	movlw	high _current_set2
 10541  00249A  6E08               	movwf	strcpy@to+1,c
 10542  00249C  0ECF               	movlw	low _current_set
 10543  00249E  6E09               	movwf	strcpy@from,c
 10544  0024A0  0E00               	movlw	high _current_set
 10545  0024A2  6E0A               	movwf	strcpy@from+1,c
 10546  0024A4  ECF9  F01F         	call	_strcpy	;wreg free
 10547                           
 10548                           ;main.c: 884: valid = 1;
 10549  0024A8  0E00               	movlw	0
 10550  0024AA  6E6C               	movwf	_valid+1,c
 10551  0024AC  0E01               	movlw	1
 10552  0024AE  6E6B               	movwf	_valid,c
 10553                           
 10554                           ;main.c: 885: state = 2;
 10555  0024B0  0E00               	movlw	0
 10556  0024B2  0100               	movlb	0	; () banked
 10557  0024B4  6FBD               	movwf	(_state+1)& (0+255),b
 10558  0024B6  0E02               	movlw	2
 10559  0024B8  6FBC               	movwf	_state& (0+255),b
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;main.c: 887: initLCD();
 10563  0024BA  EC66  F01F         	call	i2_initLCD	;wreg free
 10564                           
 10565                           ;main.c: 888: printf("correct!");
 10566  0024BE  0E64               	movlw	low STR_64
 10567  0024C0  6E0D               	movwf	i2printf@f,c
 10568  0024C2  0EFF               	movlw	high STR_64
 10569  0024C4  6E0E               	movwf	i2printf@f+1,c
 10570  0024C6  EC83  F016         	call	i2_printf	;wreg free
 10571                           
 10572                           ;main.c: 889: _delay((unsigned long)((500)*(40000000/4000.0)));
 10573  0024CA  0E1A               	movlw	26
 10574  0024CC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10575  0024CE  0E5E               	movlw	94
 10576  0024D0  6E27               	movwf	??_interruptHandler& (0+255),c
 10577  0024D2  0E6E               	movlw	110
 10578  0024D4                     i2u598_47:
 10579  0024D4  2EE8               	decfsz	wreg,f,c
 10580  0024D6  D7FE               	bra	i2u598_47
 10581  0024D8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10582  0024DA  D7FC               	bra	i2u598_47
 10583  0024DC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10584  0024DE  D7FA               	bra	i2u598_47
 10585  0024E0  D000               	nop2	
 10586                           
 10587                           ;main.c: 891: printf("%s",current_set);
 10588  0024E2  0EF7               	movlw	low STR_5
 10589  0024E4  6E0D               	movwf	i2printf@f,c
 10590  0024E6  0EFF               	movlw	high STR_5
 10591  0024E8  6E0E               	movwf	i2printf@f+1,c
 10592  0024EA  0ECF               	movlw	low _current_set
 10593  0024EC  6E0F               	movwf	?i2_printf+2,c
 10594  0024EE  0E00               	movlw	high _current_set
 10595  0024F0  6E10               	movwf	?i2_printf+3,c
 10596  0024F2  EC83  F016         	call	i2_printf	;wreg free
 10597                           
 10598                           ;main.c: 893: strcpy(current_set,"");
 10599  0024F6  0ECF               	movlw	low _current_set
 10600  0024F8  6E07               	movwf	strcpy@to,c
 10601  0024FA  0E00               	movlw	high _current_set
 10602  0024FC  6E08               	movwf	strcpy@to+1,c
 10603  0024FE  0EB4               	movlw	low (STR_59+14)
 10604  002500  6E09               	movwf	strcpy@from,c
 10605  002502  0EFE               	movlw	high (STR_59+14)
 10606  002504  6E0A               	movwf	strcpy@from+1,c
 10607  002506  ECF9  F01F         	call	_strcpy	;wreg free
 10608                           
 10609                           ;main.c: 894: _delay((unsigned long)((500)*(40000000/4000.0)));
 10610  00250A  0E1A               	movlw	26
 10611  00250C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10612  00250E  0E5E               	movlw	94
 10613  002510  6E27               	movwf	??_interruptHandler& (0+255),c
 10614  002512  0E6E               	movlw	110
 10615  002514                     i2u599_47:
 10616  002514  2EE8               	decfsz	wreg,f,c
 10617  002516  D7FE               	bra	i2u599_47
 10618  002518  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10619  00251A  D7FC               	bra	i2u599_47
 10620  00251C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10621  00251E  D7FA               	bra	i2u599_47
 10622  002520  D000               	nop2	
 10623                           
 10624                           ;main.c: 895: counter = 0;
 10625  002522  0E00               	movlw	0
 10626  002524  6E70               	movwf	_counter+1,c
 10627  002526  0E00               	movlw	0
 10628  002528  6E6F               	movwf	_counter,c
 10629                           
 10630                           ;main.c: 896: break;
 10631  00252A  D007               	goto	i2u498_40
 10632  00252C                     i2l446:
 10633  00252C  4A3E               	infsnz	interruptHandler@i,f,c
 10634  00252E  2A3F               	incf	interruptHandler@i+1,f,c
 10635  002530  BE3F               	btfsc	interruptHandler@i+1,7,c
 10636  002532  D77C               	goto	i2l444
 10637  002534  503F               	movf	interruptHandler@i+1,w,c
 10638  002536  E101               	bnz	i2l5988
 10639  002538  D773               	goto	L6
 10640  00253A                     i2u498_40:
 10641  00253A                     i2l5988:
 10642                           
 10643                           ;main.c: 898: }
 10644                           ;main.c: 899: }
 10645                           ;main.c: 900: if (valid != 1){
 10646  00253A  046B               	decf	_valid,w,c
 10647  00253C  106C               	iorwf	_valid+1,w,c
 10648  00253E  B4D8               	btfsc	status,2,c
 10649  002540  D02F               	goto	i2l447
 10650                           
 10651                           ;main.c: 902: initLCD();
 10652  002542  EC66  F01F         	call	i2_initLCD	;wreg free
 10653                           
 10654                           ;main.c: 903: printf("wrong set!");
 10655  002546  0E4F               	movlw	low STR_67
 10656  002548  6E0D               	movwf	i2printf@f,c
 10657  00254A  0EFF               	movlw	high STR_67
 10658  00254C  6E0E               	movwf	i2printf@f+1,c
 10659  00254E  EC83  F016         	call	i2_printf	;wreg free
 10660                           
 10661                           ;main.c: 904: printf("%s",current_set);
 10662  002552  0EF7               	movlw	low STR_5
 10663  002554  6E0D               	movwf	i2printf@f,c
 10664  002556  0EFF               	movlw	high STR_5
 10665  002558  6E0E               	movwf	i2printf@f+1,c
 10666  00255A  0ECF               	movlw	low _current_set
 10667  00255C  6E0F               	movwf	?i2_printf+2,c
 10668  00255E  0E00               	movlw	high _current_set
 10669  002560  6E10               	movwf	?i2_printf+3,c
 10670  002562  EC83  F016         	call	i2_printf	;wreg free
 10671                           
 10672                           ;main.c: 905: strcpy(current_set,"");
 10673  002566  0ECF               	movlw	low _current_set
 10674  002568  6E07               	movwf	strcpy@to,c
 10675  00256A  0E00               	movlw	high _current_set
 10676  00256C  6E08               	movwf	strcpy@to+1,c
 10677  00256E  0EB4               	movlw	low (STR_59+14)
 10678  002570  6E09               	movwf	strcpy@from,c
 10679  002572  0EFE               	movlw	high (STR_59+14)
 10680  002574  6E0A               	movwf	strcpy@from+1,c
 10681  002576  ECF9  F01F         	call	_strcpy	;wreg free
 10682                           
 10683                           ;main.c: 906: _delay((unsigned long)((300)*(40000000/4000.0)));
 10684  00257A  0E10               	movlw	16
 10685  00257C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10686  00257E  0E39               	movlw	57
 10687  002580  6E27               	movwf	??_interruptHandler& (0+255),c
 10688  002582  0E0E               	movlw	14
 10689  002584                     i2u600_47:
 10690  002584  2EE8               	decfsz	wreg,f,c
 10691  002586  D7FE               	bra	i2u600_47
 10692  002588  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10693  00258A  D7FC               	bra	i2u600_47
 10694  00258C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10695  00258E  D7FA               	bra	i2u600_47
 10696                           
 10697                           ;main.c: 907: counter = 0;
 10698  002590  0E00               	movlw	0
 10699  002592  6E70               	movwf	_counter+1,c
 10700  002594  0E00               	movlw	0
 10701  002596  6E6F               	movwf	_counter,c
 10702                           
 10703                           ;main.c: 908: valid = 0;
 10704  002598  0E00               	movlw	0
 10705  00259A  6E6C               	movwf	_valid+1,c
 10706  00259C  0E00               	movlw	0
 10707  00259E  6E6B               	movwf	_valid,c
 10708  0025A0                     i2l447:
 10709                           
 10710                           ;main.c: 909: }
 10711                           ;main.c: 910: valid = 0;
 10712  0025A0  0E00               	movlw	0
 10713  0025A2  6E6C               	movwf	_valid+1,c
 10714  0025A4  0E00               	movlw	0
 10715  0025A6  6E6B               	movwf	_valid,c
 10716  0025A8                     i2l443:
 10717                           
 10718                           ;main.c: 912: }
 10719                           ;main.c: 915: if (counter >= 5){
 10720  0025A8  BE70               	btfsc	_counter+1,7,c
 10721  0025AA  D162               	goto	i2l6100
 10722  0025AC  5070               	movf	_counter+1,w,c
 10723  0025AE  E104               	bnz	i2u500_40
 10724  0025B0  0E05               	movlw	5
 10725  0025B2  5C6F               	subwf	_counter,w,c
 10726  0025B4  A0D8               	btfss	status,0,c
 10727  0025B6  D15C               	goto	i2l6100
 10728  0025B8                     i2u500_40:
 10729                           
 10730                           ;main.c: 917: initLCD();
 10731  0025B8  EC66  F01F         	call	i2_initLCD	;wreg free
 10732                           
 10733                           ;main.c: 918: printf("wrong!");
 10734  0025BC  0E8D               	movlw	low STR_70
 10735  0025BE  6E0D               	movwf	i2printf@f,c
 10736  0025C0  0EFF               	movlw	high STR_70
 10737  0025C2  6E0E               	movwf	i2printf@f+1,c
 10738  0025C4  EC83  F016         	call	i2_printf	;wreg free
 10739                           
 10740                           ;main.c: 920: _delay((unsigned long)((500)*(40000000/4000.0)));
 10741  0025C8  0E1A               	movlw	26
 10742  0025CA  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10743  0025CC  0E5E               	movlw	94
 10744  0025CE  6E27               	movwf	??_interruptHandler& (0+255),c
 10745  0025D0  0E6E               	movlw	110
 10746  0025D2                     i2u601_47:
 10747  0025D2  2EE8               	decfsz	wreg,f,c
 10748  0025D4  D7FE               	bra	i2u601_47
 10749  0025D6  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10750  0025D8  D7FC               	bra	i2u601_47
 10751  0025DA  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10752  0025DC  D7FA               	bra	i2u601_47
 10753  0025DE  D000               	nop2	
 10754                           
 10755                           ;main.c: 922: strcpy(current_set,"");
 10756  0025E0  0ECF               	movlw	low _current_set
 10757  0025E2  6E07               	movwf	strcpy@to,c
 10758  0025E4  0E00               	movlw	high _current_set
 10759  0025E6  6E08               	movwf	strcpy@to+1,c
 10760  0025E8  0EB4               	movlw	low (STR_59+14)
 10761  0025EA  6E09               	movwf	strcpy@from,c
 10762  0025EC  0EFE               	movlw	high (STR_59+14)
 10763  0025EE  6E0A               	movwf	strcpy@from+1,c
 10764  0025F0  ECF9  F01F         	call	_strcpy	;wreg free
 10765                           
 10766                           ;main.c: 925: counter = 0;
 10767  0025F4  0E00               	movlw	0
 10768  0025F6  6E70               	movwf	_counter+1,c
 10769  0025F8  0E00               	movlw	0
 10770  0025FA  6E6F               	movwf	_counter,c
 10771  0025FC  D139               	goto	i2l6100
 10772  0025FE                     i2l437:
 10773                           
 10774                           ;main.c: 930: }
 10775                           ;main.c: 935: if (state ==2){
 10776  0025FE  0E02               	movlw	2
 10777  002600  0100               	movlb	0	; () banked
 10778  002602  19BC               	xorwf	_state& (0+255),w,b
 10779  002604  11BD               	iorwf	(_state+1)& (0+255),w,b
 10780  002606  A4D8               	btfss	status,2,c
 10781  002608  D11F               	goto	i2l465
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;main.c: 936: counter = 0;
 10785  00260A  0E00               	movlw	0
 10786  00260C  6E70               	movwf	_counter+1,c
 10787  00260E  0E00               	movlw	0
 10788  002610  6E6F               	movwf	_counter,c
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;main.c: 938: lcdInst(0xC0);;
 10792  002612  0EC0               	movlw	192
 10793  002614  ECFB  F021         	call	i2_lcdInst
 10794                           
 10795                           ;main.c: 939: putch(keys[keypress]);
 10796  002618  5040               	movf	interruptHandler@keypress,w,c
 10797  00261A  0D01               	mullw	1
 10798  00261C  0E77               	movlw	low _keys
 10799  00261E  24F3               	addwf	prodl,w,c
 10800  002620  6EF6               	movwf	tblptrl,c
 10801  002622  0EFD               	movlw	high _keys
 10802  002624  20F4               	addwfc	prodh,w,c
 10803  002626  6EF7               	movwf	tblptrh,c
 10804  002628                     	if	1	;There are 3 active tblptr bytes
 10805  002628  6AF8               	clrf	tblptru,c
 10806  00262A  0E00               	movlw	low (__mediumconst shr (0+16))
 10807  00262C  22F8               	addwfc	tblptru,f,c
 10808  00262E                     	endif
 10809  00262E  0008               	tblrd		*
 10810  002630  50F5               	movf	tablat,w,c
 10811  002632  ECF1  F021         	call	i2_putch
 10812                           
 10813                           ;main.c: 941: _delay((unsigned long)((500)*(40000000/4000.0)));
 10814  002636  0E1A               	movlw	26
 10815  002638  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10816  00263A  0E5E               	movlw	94
 10817  00263C  6E27               	movwf	??_interruptHandler& (0+255),c
 10818  00263E  0E6E               	movlw	110
 10819  002640                     i2u602_47:
 10820  002640  2EE8               	decfsz	wreg,f,c
 10821  002642  D7FE               	bra	i2u602_47
 10822  002644  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10823  002646  D7FC               	bra	i2u602_47
 10824  002648  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10825  00264A  D7FA               	bra	i2u602_47
 10826  00264C  D000               	nop2	
 10827                           
 10828                           ;main.c: 943: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
 10829  00264E  5040               	movf	interruptHandler@keypress,w,c
 10830  002650  0D01               	mullw	1
 10831  002652  0E77               	movlw	low _keys
 10832  002654  24F3               	addwf	prodl,w,c
 10833  002656  6EF6               	movwf	tblptrl,c
 10834  002658  0EFD               	movlw	high _keys
 10835  00265A  20F4               	addwfc	prodh,w,c
 10836  00265C  6EF7               	movwf	tblptrh,c
 10837  00265E                     	if	1	;There are 3 active tblptr bytes
 10838  00265E  6AF8               	clrf	tblptru,c
 10839  002660  0E00               	movlw	low (__mediumconst shr (0+16))
 10840  002662  22F8               	addwfc	tblptru,f,c
 10841  002664                     	endif
 10842  002664  0008               	tblrd		*
 10843  002666  50F5               	movf	tablat,w,c
 10844  002668  0A31               	xorlw	49
 10845  00266A  B4D8               	btfsc	status,2,c
 10846  00266C  D05A               	goto	i2l453
 10847  00266E  5040               	movf	interruptHandler@keypress,w,c
 10848  002670  0D01               	mullw	1
 10849  002672  0E77               	movlw	low _keys
 10850  002674  24F3               	addwf	prodl,w,c
 10851  002676  6EF6               	movwf	tblptrl,c
 10852  002678  0EFD               	movlw	high _keys
 10853  00267A  20F4               	addwfc	prodh,w,c
 10854  00267C  6EF7               	movwf	tblptrh,c
 10855  00267E                     	if	1	;There are 3 active tblptr bytes
 10856  00267E  6AF8               	clrf	tblptru,c
 10857  002680  0E00               	movlw	low (__mediumconst shr (0+16))
 10858  002682  22F8               	addwfc	tblptru,f,c
 10859  002684                     	endif
 10860  002684  0008               	tblrd		*
 10861  002686  50F5               	movf	tablat,w,c
 10862  002688  0A32               	xorlw	50
 10863  00268A  B4D8               	btfsc	status,2,c
 10864  00268C  D04A               	goto	i2l453
 10865  00268E  5040               	movf	interruptHandler@keypress,w,c
 10866  002690  0D01               	mullw	1
 10867  002692  0E77               	movlw	low _keys
 10868  002694  24F3               	addwf	prodl,w,c
 10869  002696  6EF6               	movwf	tblptrl,c
 10870  002698  0EFD               	movlw	high _keys
 10871  00269A  20F4               	addwfc	prodh,w,c
 10872  00269C  6EF7               	movwf	tblptrh,c
 10873  00269E                     	if	1	;There are 3 active tblptr bytes
 10874  00269E  6AF8               	clrf	tblptru,c
 10875  0026A0  0E00               	movlw	low (__mediumconst shr (0+16))
 10876  0026A2  22F8               	addwfc	tblptru,f,c
 10877  0026A4                     	endif
 10878  0026A4  0008               	tblrd		*
 10879  0026A6  50F5               	movf	tablat,w,c
 10880  0026A8  0A33               	xorlw	51
 10881  0026AA  B4D8               	btfsc	status,2,c
 10882  0026AC  D03A               	goto	i2l453
 10883  0026AE  5040               	movf	interruptHandler@keypress,w,c
 10884  0026B0  0D01               	mullw	1
 10885  0026B2  0E77               	movlw	low _keys
 10886  0026B4  24F3               	addwf	prodl,w,c
 10887  0026B6  6EF6               	movwf	tblptrl,c
 10888  0026B8  0EFD               	movlw	high _keys
 10889  0026BA  20F4               	addwfc	prodh,w,c
 10890  0026BC  6EF7               	movwf	tblptrh,c
 10891  0026BE                     	if	1	;There are 3 active tblptr bytes
 10892  0026BE  6AF8               	clrf	tblptru,c
 10893  0026C0  0E00               	movlw	low (__mediumconst shr (0+16))
 10894  0026C2  22F8               	addwfc	tblptru,f,c
 10895  0026C4                     	endif
 10896  0026C4  0008               	tblrd		*
 10897  0026C6  50F5               	movf	tablat,w,c
 10898  0026C8  0A34               	xorlw	52
 10899  0026CA  B4D8               	btfsc	status,2,c
 10900  0026CC  D02A               	goto	i2l453
 10901  0026CE  D0BC               	goto	i2l465
 10902  0026D0                     
 10903                           ;main.c: 947: number = 1;
 10904  0026D0  0E00               	movlw	0
 10905  0026D2  6E7E               	movwf	_number+1,c
 10906  0026D4  0E01               	movlw	1
 10907  0026D6  D00F               	goto	L10
 10908  0026D8                     
 10909                           ;main.c: 950: number = 2;
 10910  0026D8  0E00               	movlw	0
 10911  0026DA  6E7E               	movwf	_number+1,c
 10912  0026DC  0E02               	movlw	2
 10913  0026DE  D00B               	goto	L10
 10914  0026E0                     
 10915                           ;main.c: 953: number = 3;
 10916  0026E0  0E00               	movlw	0
 10917  0026E2  6E7E               	movwf	_number+1,c
 10918  0026E4  0E03               	movlw	3
 10919  0026E6  D007               	goto	L10
 10920  0026E8                     
 10921                           ;main.c: 956: number = 4;
 10922  0026E8  0E00               	movlw	0
 10923  0026EA  6E7E               	movwf	_number+1,c
 10924  0026EC  0E04               	movlw	4
 10925  0026EE  D003               	goto	L10
 10926  0026F0                     
 10927                           ;main.c: 959: number = 5;
 10928  0026F0  0E00               	movlw	0
 10929  0026F2  6E7E               	movwf	_number+1,c
 10930  0026F4  0E05               	movlw	5
 10931  0026F6                     L10:
 10932  0026F6  6E7D               	movwf	_number,c
 10933                           
 10934                           ;main.c: 960: break;
 10935  0026F8  D031               	goto	i2l455
 10936  0026FA                     
 10937                           ;main.c: 962: initLCD();
 10938  0026FA  EC66  F01F         	call	i2_initLCD	;wreg free
 10939                           
 10940                           ;main.c: 963: printf("Wrong input");
 10941  0026FE  0E43               	movlw	low STR_72
 10942  002700  6E0D               	movwf	i2printf@f,c
 10943  002702  0EFF               	movlw	high STR_72
 10944  002704  6E0E               	movwf	i2printf@f+1,c
 10945  002706  EC83  F016         	call	i2_printf	;wreg free
 10946                           
 10947                           ;main.c: 964: _delay((unsigned long)((1000)*(40000000/4000.0)));
 10948  00270A  0E33               	movlw	51
 10949  00270C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 10950  00270E  0EBB               	movlw	187
 10951  002710  6E27               	movwf	??_interruptHandler& (0+255),c
 10952  002712  0EE0               	movlw	224
 10953  002714                     i2u603_47:
 10954  002714  2EE8               	decfsz	wreg,f,c
 10955  002716  D7FE               	bra	i2u603_47
 10956  002718  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 10957  00271A  D7FC               	bra	i2u603_47
 10958  00271C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 10959  00271E  D7FA               	bra	i2u603_47
 10960                           
 10961                           ;main.c: 965: }
 10962  002720  D01D               	goto	i2l455
 10963  002722                     i2l453:
 10964  002722  5040               	movf	interruptHandler@keypress,w,c
 10965  002724  0D01               	mullw	1
 10966  002726  0E77               	movlw	low _keys
 10967  002728  24F3               	addwf	prodl,w,c
 10968  00272A  6EF6               	movwf	tblptrl,c
 10969  00272C  0EFD               	movlw	high _keys
 10970  00272E  20F4               	addwfc	prodh,w,c
 10971  002730  6EF7               	movwf	tblptrh,c
 10972  002732                     	if	1	;There are 3 active tblptr bytes
 10973  002732  6AF8               	clrf	tblptru,c
 10974  002734  0E00               	movlw	low (__mediumconst shr (0+16))
 10975  002736  22F8               	addwfc	tblptru,f,c
 10976  002738                     	endif
 10977  002738  0008               	tblrd		*
 10978  00273A  50F5               	movf	tablat,w,c
 10979                           
 10980                           ; Switch size 1, requested type "space"
 10981                           ; Number of cases is 5, Range of values is 49 to 53
 10982                           ; switch strategies available:
 10983                           ; Name         Instructions Cycles
 10984                           ; simple_byte           16     9 (average)
 10985                           ;	Chosen strategy is simple_byte
 10986  00273C  0A31               	xorlw	49	; case 49
 10987  00273E  B4D8               	btfsc	status,2,c
 10988  002740  D7C7               	goto	i2l454
 10989  002742  0A03               	xorlw	3	; case 50
 10990  002744  B4D8               	btfsc	status,2,c
 10991  002746  D7C8               	goto	i2l456
 10992  002748  0A01               	xorlw	1	; case 51
 10993  00274A  B4D8               	btfsc	status,2,c
 10994  00274C  D7C9               	goto	i2l457
 10995  00274E  0A07               	xorlw	7	; case 52
 10996  002750  B4D8               	btfsc	status,2,c
 10997  002752  D7CA               	goto	i2l458
 10998  002754  0A01               	xorlw	1	; case 53
 10999  002756  B4D8               	btfsc	status,2,c
 11000  002758  D7CB               	goto	i2l459
 11001  00275A  D7CF               	goto	i2l460
 11002  00275C                     i2l455:
 11003                           
 11004                           ;main.c: 968: is_valid();
 11005  00275C  EC3B  F007         	call	_is_valid	;wreg free
 11006                           
 11007                           ;main.c: 970: if ( check() == 0){
 11008  002760  ECE2  F01D         	call	_check	;wreg free
 11009  002764  5001               	movf	?_check,w,c
 11010  002766  1002               	iorwf	?_check+1,w,c
 11011  002768  A4D8               	btfss	status,2,c
 11012  00276A  D029               	goto	i2l461
 11013                           
 11014                           ;main.c: 971: initLCD();
 11015  00276C  EC66  F01F         	call	i2_initLCD	;wreg free
 11016                           
 11017                           ;main.c: 972: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
 11018  002770  0E80               	movlw	128
 11019  002772  ECFB  F021         	call	i2_lcdInst
 11020  002776  0E41               	movlw	65
 11021  002778  6E27               	movwf	??_interruptHandler& (0+255),c
 11022  00277A  0EEE               	movlw	238
 11023  00277C                     i2u604_47:
 11024  00277C  2EE8               	decfsz	wreg,f,c
 11025  00277E  D7FE               	bra	i2u604_47
 11026  002780  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11027  002782  D7FC               	bra	i2u604_47
 11028  002784  D000               	nop2	
 11029                           
 11030                           ;main.c: 973: printf("TOO MANY");
 11031  002786  0E6D               	movlw	low STR_73
 11032  002788  6E0D               	movwf	i2printf@f,c
 11033  00278A  0EFF               	movlw	high STR_73
 11034  00278C  6E0E               	movwf	i2printf@f+1,c
 11035  00278E  EC83  F016         	call	i2_printf	;wreg free
 11036                           
 11037                           ;main.c: 975: _delay((unsigned long)((500)*(40000000/4000.0)));
 11038  002792  0E1A               	movlw	26
 11039  002794  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11040  002796  0E5E               	movlw	94
 11041  002798  6E27               	movwf	??_interruptHandler& (0+255),c
 11042  00279A  0E6E               	movlw	110
 11043  00279C                     i2u605_47:
 11044  00279C  2EE8               	decfsz	wreg,f,c
 11045  00279E  D7FE               	bra	i2u605_47
 11046  0027A0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 11047  0027A2  D7FC               	bra	i2u605_47
 11048  0027A4  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 11049  0027A6  D7FA               	bra	i2u605_47
 11050  0027A8  D000               	nop2	
 11051                           
 11052                           ;main.c: 976: state = 2;
 11053  0027AA  0E00               	movlw	0
 11054  0027AC  0100               	movlb	0	; () banked
 11055  0027AE  6FBD               	movwf	(_state+1)& (0+255),b
 11056  0027B0  0E02               	movlw	2
 11057  0027B2  6FBC               	movwf	_state& (0+255),b
 11058                           
 11059                           ; BSR set to: 0
 11060                           ;main.c: 977: number = 0;
 11061  0027B4  0E00               	movlw	0
 11062  0027B6  6E7E               	movwf	_number+1,c
 11063  0027B8  0E00               	movlw	0
 11064  0027BA  6E7D               	movwf	_number,c
 11065                           
 11066                           ;main.c: 978: }
 11067  0027BC  D045               	goto	i2l465
 11068  0027BE                     i2l461:
 11069                           
 11070                           ;main.c: 981: else if (counter_step >= assembly_step-1){
 11071                           
 11072                           ; BSR set to: 0
 11073  0027BE  0EFF               	movlw	255
 11074  0027C0  6E27               	movwf	??_interruptHandler& (0+255),c
 11075  0027C2  0EFF               	movlw	255
 11076  0027C4  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 11077  0027C6  C0BA  F029         	movff	_assembly_step,??_interruptHandler+2
 11078  0027CA  C0BB  F02A         	movff	_assembly_step+1,??_interruptHandler+3
 11079  0027CE  5027               	movf	??_interruptHandler,w,c
 11080  0027D0  2629               	addwf	??_interruptHandler+2,f,c
 11081  0027D2  5028               	movf	??_interruptHandler+1,w,c
 11082  0027D4  222A               	addwfc	??_interruptHandler+3,f,c
 11083  0027D6  5029               	movf	??_interruptHandler+2,w,c
 11084  0027D8  5C6D               	subwf	_counter_step,w,c
 11085  0027DA  506E               	movf	_counter_step+1,w,c
 11086  0027DC  0A80               	xorlw	128
 11087  0027DE  6E2B               	movwf	(??_interruptHandler+4)& (0+255),c
 11088  0027E0  502A               	movf	??_interruptHandler+3,w,c
 11089  0027E2  0A80               	xorlw	128
 11090  0027E4  582B               	subwfb	(??_interruptHandler+4)& (0+255),w,c
 11091  0027E6  A0D8               	btfss	status,0,c
 11092  0027E8  D013               	goto	i2l463
 11093                           
 11094                           ;main.c: 982: final_number[counter_step] = number;
 11095  0027EA  90D8               	bcf	status,0,c
 11096  0027EC  346D               	rlcf	_counter_step,w,c
 11097  0027EE  6ED9               	movwf	fsr2l,c
 11098  0027F0  346E               	rlcf	_counter_step+1,w,c
 11099  0027F2  6EDA               	movwf	fsr2h,c
 11100  0027F4  0E50               	movlw	low _final_number
 11101  0027F6  26D9               	addwf	fsr2l,f,c
 11102  0027F8  0E01               	movlw	high _final_number
 11103  0027FA  22DA               	addwfc	fsr2h,f,c
 11104  0027FC  C07D  FFDE         	movff	_number,postinc2
 11105  002800  C07E  FFDD         	movff	_number+1,postdec2
 11106                           
 11107                           ;main.c: 983: state = 3;
 11108  002804  0E00               	movlw	0
 11109  002806  0100               	movlb	0	; () banked
 11110  002808  6FBD               	movwf	(_state+1)& (0+255),b
 11111  00280A  0E03               	movlw	3
 11112  00280C  6FBC               	movwf	_state& (0+255),b
 11113                           
 11114                           ;main.c: 984: }
 11115  00280E  D01C               	goto	i2l465
 11116  002810                     i2l463:
 11117                           
 11118                           ;main.c: 985: else if ( check() == 1){
 11119                           
 11120                           ; BSR set to: 0
 11121  002810  ECE2  F01D         	call	_check	;wreg free
 11122  002814  0401               	decf	?_check,w,c
 11123  002816  1002               	iorwf	?_check+1,w,c
 11124  002818  A4D8               	btfss	status,2,c
 11125  00281A  D016               	goto	i2l465
 11126                           
 11127                           ;main.c: 986: state = 1;
 11128  00281C  0E00               	movlw	0
 11129  00281E  0100               	movlb	0	; () banked
 11130  002820  6FBD               	movwf	(_state+1)& (0+255),b
 11131  002822  0E01               	movlw	1
 11132  002824  6FBC               	movwf	_state& (0+255),b
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;main.c: 987: initLCD();
 11136  002826  EC66  F01F         	call	i2_initLCD	;wreg free
 11137                           
 11138                           ;main.c: 990: final_number[counter_step] = number;
 11139  00282A  90D8               	bcf	status,0,c
 11140  00282C  346D               	rlcf	_counter_step,w,c
 11141  00282E  6ED9               	movwf	fsr2l,c
 11142  002830  346E               	rlcf	_counter_step+1,w,c
 11143  002832  6EDA               	movwf	fsr2h,c
 11144  002834  0E50               	movlw	low _final_number
 11145  002836  26D9               	addwf	fsr2l,f,c
 11146  002838  0E01               	movlw	high _final_number
 11147  00283A  22DA               	addwfc	fsr2h,f,c
 11148  00283C  C07D  FFDE         	movff	_number,postinc2
 11149  002840  C07E  FFDD         	movff	_number+1,postdec2
 11150                           
 11151                           ;main.c: 991: counter_step++;
 11152  002844  4A6D               	infsnz	_counter_step,f,c
 11153  002846  2A6E               	incf	_counter_step+1,f,c
 11154  002848                     i2l465:
 11155                           
 11156                           ;main.c: 992: }
 11157                           ;main.c: 995: }
 11158                           ;main.c: 997: }
 11159                           ;main.c: 1004: B=0;N=0;S=0;W=0;
 11160  002848  0E00               	movlw	0
 11161  00284A  6E66               	movwf	_B+1,c
 11162  00284C  0E00               	movlw	0
 11163  00284E  6E65               	movwf	_B,c
 11164  002850  0E00               	movlw	0
 11165  002852  6E64               	movwf	_N+1,c
 11166  002854  0E00               	movlw	0
 11167  002856  6E63               	movwf	_N,c
 11168  002858  0E00               	movlw	0
 11169  00285A  6E62               	movwf	_S+1,c
 11170  00285C  0E00               	movlw	0
 11171  00285E  6E61               	movwf	_S,c
 11172  002860  0E00               	movlw	0
 11173  002862  6E60               	movwf	_W+1,c
 11174  002864  0E00               	movlw	0
 11175  002866  6E5F               	movwf	_W,c
 11176                           
 11177                           ;main.c: 1005: total_number = 0;
 11178  002868  0E00               	movlw	0
 11179  00286A  6E6A               	movwf	_total_number+1,c
 11180  00286C  0E00               	movlw	0
 11181  00286E  6E69               	movwf	_total_number,c
 11182  002870                     i2l6100:
 11183                           
 11184                           ;main.c: 1007: INT1IF = 0;
 11185  002870  90F0               	bcf	intcon3,0,c	;volatile
 11186  002872                     i2l6102:
 11187                           
 11188                           ;main.c: 1008: return;
 11189  002872  C03D  F082         	movff	??_interruptHandler+22,btemp+3
 11190  002876  C03C  F081         	movff	??_interruptHandler+21,btemp+2
 11191  00287A  C03B  F080         	movff	??_interruptHandler+20,btemp+1
 11192  00287E  C03A  F07F         	movff	??_interruptHandler+19,btemp
 11193  002882  C039  FFF5         	movff	??_interruptHandler+18,tablat
 11194  002886  C038  FFF8         	movff	??_interruptHandler+17,tblptru
 11195  00288A  C037  FFF7         	movff	??_interruptHandler+16,tblptrh
 11196  00288E  C036  FFF6         	movff	??_interruptHandler+15,tblptrl
 11197  002892  C035  FFF4         	movff	??_interruptHandler+14,prodh
 11198  002896  C034  FFF3         	movff	??_interruptHandler+13,prodl
 11199  00289A  C033  FFDA         	movff	??_interruptHandler+12,fsr2h
 11200  00289E  C032  FFD9         	movff	??_interruptHandler+11,fsr2l
 11201  0028A2  C031  FFE2         	movff	??_interruptHandler+10,fsr1h
 11202  0028A6  C030  FFE1         	movff	??_interruptHandler+9,fsr1l
 11203  0028AA  C02F  FFEA         	movff	??_interruptHandler+8,fsr0h
 11204  0028AE  C02E  FFE9         	movff	??_interruptHandler+7,fsr0l
 11205  0028B2  C02D  FFFB         	movff	??_interruptHandler+6,pclatu
 11206  0028B6  C02C  FFFA         	movff	??_interruptHandler+5,pclath
 11207  0028BA  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11208  0028BC  0011               	retfie		f
 11209  0028BE                     __end_of_interruptHandler:
 11210                           	opt stack 0
 11211                           pclatu	equ	0xFFB
 11212                           pclath	equ	0xFFA
 11213                           tblptru	equ	0xFF8
 11214                           tblptrh	equ	0xFF7
 11215                           tblptrl	equ	0xFF6
 11216                           tablat	equ	0xFF5
 11217                           prodh	equ	0xFF4
 11218                           prodl	equ	0xFF3
 11219                           intcon	equ	0xFF2
 11220                           intcon3	equ	0xFF0
 11221                           indf0	equ	0xFEF
 11222                           postinc0	equ	0xFEE
 11223                           fsr0h	equ	0xFEA
 11224                           fsr0l	equ	0xFE9
 11225                           wreg	equ	0xFE8
 11226                           fsr1h	equ	0xFE2
 11227                           fsr1l	equ	0xFE1
 11228                           indf2	equ	0xFDF
 11229                           postinc2	equ	0xFDE
 11230                           postdec2	equ	0xFDD
 11231                           fsr2h	equ	0xFDA
 11232                           fsr2l	equ	0xFD9
 11233                           status	equ	0xFD8
 11234                           
 11235 ;; *************** function i2_printf *****************
 11236 ;; Defined at:
 11237 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11240 ;;		 -> STR_74(3), STR_73(9), STR_72(12), STR_70(7), 
 11241 ;;		 -> STR_68(3), STR_67(11), STR_65(3), STR_64(9), 
 11242 ;;		 -> STR_59(15), STR_58(13), STR_57(16), STR_56(15), 
 11243 ;;		 -> STR_55(15), STR_54(15), STR_53(15), STR_52(10), 
 11244 ;;		 -> STR_51(19), STR_50(17), STR_49(12), STR_48(17), 
 11245 ;;		 -> STR_47(17), STR_46(14), STR_45(15), STR_44(15), 
 11246 ;;		 -> STR_43(6), STR_42(6), STR_41(5), STR_40(4), 
 11247 ;;		 -> STR_39(3), STR_38(5), STR_37(3), STR_36(3), 
 11248 ;;		 -> STR_35(5), STR_34(3), STR_33(3), STR_32(5), 
 11249 ;;		 -> STR_31(3), STR_30(3), STR_29(5), STR_28(3), 
 11250 ;;		 -> STR_27(3), STR_26(8), STR_25(8), STR_24(16), 
 11251 ;;		 -> STR_23(3), STR_22(4), STR_21(3), STR_20(4), 
 11252 ;;		 -> STR_19(3), STR_18(4), STR_17(3), STR_16(4), 
 11253 ;;		 -> STR_15(3), STR_14(3), STR_13(2), STR_12(3), 
 11254 ;;		 -> STR_11(2), STR_10(3), STR_9(5), STR_8(17), 
 11255 ;;		 -> STR_7(6), STR_6(8), STR_5(3), STR_4(14), 
 11256 ;;		 -> STR_3(15), STR_2(14), STR_1(16), 
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;  printf          4    0        struct .
 11259 ;;  printf          2   35[COMRAM] int 
 11260 ;;  printf          2   32[COMRAM] unsigned int 
 11261 ;;  printf          2   30[COMRAM] unsigned int 
 11262 ;;  printf          2   28[COMRAM] PTR void [1]
 11263 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11264 ;;  printf          2   26[COMRAM] PTR const unsigned char 
 11265 ;;		 -> STR_95(7), number(2), final_set(40), current_set(5), 
 11266 ;;  printf          1   37[COMRAM] char 
 11267 ;;  printf          1   34[COMRAM] unsigned char 
 11268 ;;  printf          1   25[COMRAM] char 
 11269 ;;  printf          1   24[COMRAM] unsigned char 
 11270 ;; Return value:  Size  Location     Type
 11271 ;;                  2   12[COMRAM] int 
 11272 ;; Registers used:
 11273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11279 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11282 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11283 ;;Total ram usage:       26 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:    2
 11286 ;; This function calls:
 11287 ;;		i2___lwdiv
 11288 ;;		i2___lwmod
 11289 ;;		i2___wmul
 11290 ;;		i2_isdigit
 11291 ;;		i2_putch
 11292 ;; This function is called by:
 11293 ;;		_interruptHandler
 11294 ;; This function uses a non-reentrant model
 11295 ;;
 11296                           
 11297                           	psect	text38
 11298  002D06                     __ptext38:
 11299                           	opt stack 0
 11300  002D06                     i2_printf:
 11301                           	opt stack 23
 11302                           
 11303                           ;doprnt.c: 466: va_list ap;
 11304                           ;doprnt.c: 499: signed char c;
 11305                           ;doprnt.c: 501: int width;
 11306                           ;doprnt.c: 506: signed char prec;
 11307                           ;doprnt.c: 508: unsigned char flag;
 11308                           ;doprnt.c: 523: union {
 11309                           ;doprnt.c: 524: unsigned long vd;
 11310                           ;doprnt.c: 525: double integ;
 11311                           ;doprnt.c: 526: } tmpval;
 11312                           ;doprnt.c: 528: unsigned int val;
 11313                           ;doprnt.c: 529: unsigned len;
 11314                           ;doprnt.c: 530: const char * cp;
 11315                           ;doprnt.c: 533: *ap = __va_start();
 11316                           
 11317                           ;incstack = 0
 11318  002D06  0E0F               	movlw	low (?i2_printf+2)
 11319  002D08  6E1D               	movwf	i2printf@ap,c
 11320  002D0A  0E00               	movlw	high (?i2_printf+2)
 11321  002D0C  6E1E               	movwf	i2printf@ap+1,c
 11322                           
 11323                           ;doprnt.c: 536: while(c = *f++) {
 11324  002D0E  D1FA               	goto	i2u412_40
 11325  002D10                     
 11326                           ;doprnt.c: 538: if(c != '%')
 11327  002D10  0E25               	movlw	37
 11328  002D12  1826               	xorwf	i2printf@c,w,c
 11329  002D14  B4D8               	btfsc	status,2,c
 11330  002D16  D004               	goto	i2l808
 11331                           
 11332                           ;doprnt.c: 540: {
 11333                           ;doprnt.c: 541: (putch(c) );
 11334  002D18  5026               	movf	i2printf@c,w,c
 11335  002D1A  ECF1  F021         	call	i2_putch
 11336                           
 11337                           ;doprnt.c: 542: continue;
 11338  002D1E  D1F2               	goto	i2u412_40
 11339  002D20                     i2l808:
 11340                           
 11341                           ;doprnt.c: 543: }
 11342                           ;doprnt.c: 546: width = 0;
 11343  002D20  0E00               	movlw	0
 11344  002D22  6E25               	movwf	i2printf@width+1,c
 11345  002D24  0E00               	movlw	0
 11346  002D26  6E24               	movwf	i2printf@width,c
 11347                           
 11348                           ;doprnt.c: 548: flag = 0;
 11349  002D28  0E00               	movlw	0
 11350  002D2A  6E23               	movwf	i2printf@flag,c
 11351                           
 11352                           ;doprnt.c: 551: switch(*f) {
 11353                           
 11354                           ;doprnt.c: 550: for(;;) {
 11355  002D2C  D003               	goto	i2l810
 11356  002D2E                     
 11357                           ;doprnt.c: 580: flag |= 0x04;
 11358  002D2E  8423               	bsf	i2printf@flag,2,c
 11359                           
 11360                           ;doprnt.c: 581: f++;
 11361  002D30  4A0D               	infsnz	i2printf@f,f,c
 11362  002D32  2A0E               	incf	i2printf@f+1,f,c
 11363  002D34                     i2l810:
 11364  002D34  C00D  FFF6         	movff	i2printf@f,tblptrl
 11365  002D38  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11366  002D3C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11367  002D3C  6AF8               	clrf	tblptru,c
 11368  002D3E                     	endif
 11369  002D3E                     	if	0	;tblptru may be non-zero
 11370  002D3E                     	endif
 11371  002D3E  0008               	tblrd		*
 11372  002D40  50F5               	movf	tablat,w,c
 11373                           
 11374                           ; Switch size 1, requested type "space"
 11375                           ; Number of cases is 1, Range of values is 48 to 48
 11376                           ; switch strategies available:
 11377                           ; Name         Instructions Cycles
 11378                           ; simple_byte            4     3 (average)
 11379                           ;	Chosen strategy is simple_byte
 11380  002D42  0A30               	xorlw	48	; case 48
 11381  002D44  B4D8               	btfsc	status,2,c
 11382  002D46  D7F3               	goto	i2l811
 11383                           
 11384                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11385                           
 11386                           ;doprnt.c: 586: }
 11387                           
 11388                           ;doprnt.c: 585: break;
 11389  002D48  C00D  FFF6         	movff	i2printf@f,tblptrl
 11390  002D4C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11391  002D50                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11392  002D50  6AF8               	clrf	tblptru,c
 11393  002D52                     	endif
 11394  002D52                     	if	0	;tblptru may be non-zero
 11395  002D52                     	endif
 11396  002D52  0008               	tblrd		*
 11397  002D54  50F5               	movf	tablat,w,c
 11398  002D56  ECC0  F021         	call	i2_isdigit
 11399  002D5A  A0D8               	btfss	status,0,c
 11400  002D5C  D0A6               	goto	i2l818
 11401                           
 11402                           ;doprnt.c: 598: width = 0;
 11403  002D5E  0E00               	movlw	0
 11404  002D60  6E25               	movwf	i2printf@width+1,c
 11405  002D62  0E00               	movlw	0
 11406  002D64  6E24               	movwf	i2printf@width,c
 11407  002D66                     
 11408                           ;doprnt.c: 600: width *= 10;
 11409  002D66  C024  F001         	movff	i2printf@width,i2___wmul@multiplier
 11410  002D6A  C025  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11411  002D6E  0E00               	movlw	0
 11412  002D70  6E04               	movwf	i2___wmul@multiplicand+1,c
 11413  002D72  0E0A               	movlw	10
 11414  002D74  6E03               	movwf	i2___wmul@multiplicand,c
 11415  002D76  EC0A  F021         	call	i2___wmul	;wreg free
 11416  002D7A  C001  F024         	movff	?i2___wmul,i2printf@width
 11417  002D7E  C002  F025         	movff	?i2___wmul+1,i2printf@width+1
 11418                           
 11419                           ;doprnt.c: 601: width += *f++ - '0';
 11420  002D82  0ED0               	movlw	208
 11421  002D84  6E15               	movwf	??i2_printf& (0+255),c
 11422  002D86  0EFF               	movlw	255
 11423  002D88  6E16               	movwf	(??i2_printf+1)& (0+255),c
 11424  002D8A  C00D  FFF6         	movff	i2printf@f,tblptrl
 11425  002D8E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11426  002D92                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11427  002D92  6AF8               	clrf	tblptru,c
 11428  002D94                     	endif
 11429  002D94                     	if	0	;tblptru may be non-zero
 11430  002D94                     	endif
 11431  002D94  0008               	tblrd		*
 11432  002D96  50F5               	movf	tablat,w,c
 11433  002D98  6E17               	movwf	(??i2_printf+2)& (0+255),c
 11434  002D9A  6A18               	clrf	(??i2_printf+3)& (0+255),c
 11435  002D9C  5015               	movf	??i2_printf,w,c
 11436  002D9E  2617               	addwf	??i2_printf+2,f,c
 11437  002DA0  5016               	movf	??i2_printf+1,w,c
 11438  002DA2  2218               	addwfc	??i2_printf+3,f,c
 11439  002DA4  5017               	movf	??i2_printf+2,w,c
 11440  002DA6  2624               	addwf	i2printf@width,f,c
 11441  002DA8  5018               	movf	??i2_printf+3,w,c
 11442  002DAA  2225               	addwfc	i2printf@width+1,f,c
 11443  002DAC  4A0D               	infsnz	i2printf@f,f,c
 11444  002DAE  2A0E               	incf	i2printf@f+1,f,c
 11445                           
 11446                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11447  002DB0  C00D  FFF6         	movff	i2printf@f,tblptrl
 11448  002DB4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11449  002DB8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11450  002DB8  6AF8               	clrf	tblptru,c
 11451  002DBA                     	endif
 11452  002DBA                     	if	0	;tblptru may be non-zero
 11453  002DBA                     	endif
 11454  002DBA  0008               	tblrd		*
 11455  002DBC  50F5               	movf	tablat,w,c
 11456  002DBE  ECC0  F021         	call	i2_isdigit
 11457  002DC2  A0D8               	btfss	status,0,c
 11458  002DC4  D072               	goto	i2l818
 11459  002DC6  D7CF               	goto	i2l816
 11460  002DC8                     
 11461                           ;doprnt.c: 721: flag |= 0x80;
 11462  002DC8  8E23               	bsf	i2printf@flag,7,c
 11463                           
 11464                           ;doprnt.c: 723: break;
 11465  002DCA  D08A               	goto	i2l823
 11466  002DCC                     
 11467                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11468  002DCC  C01D  FFD9         	movff	i2printf@ap,fsr2l
 11469  002DD0  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 11470  002DD4  CFDE F01B          	movff	postinc2,i2printf@cp
 11471  002DD8  CFDD F01C          	movff	postdec2,i2printf@cp+1
 11472  002DDC  0E02               	movlw	2
 11473  002DDE  261D               	addwf	i2printf@ap,f,c
 11474  002DE0  0E00               	movlw	0
 11475  002DE2  221E               	addwfc	i2printf@ap+1,f,c
 11476                           
 11477                           ;doprnt.c: 740: if(!cp)
 11478  002DE4  501B               	movf	i2printf@cp,w,c
 11479  002DE6  101C               	iorwf	i2printf@cp+1,w,c
 11480  002DE8  A4D8               	btfss	status,2,c
 11481  002DEA  D004               	goto	i2l826
 11482                           
 11483                           ;doprnt.c: 741: cp = "(null)";
 11484  002DEC  0E86               	movlw	low STR_95
 11485  002DEE  6E1B               	movwf	i2printf@cp,c
 11486  002DF0  0EFF               	movlw	high STR_95
 11487  002DF2  6E1C               	movwf	i2printf@cp+1,c
 11488  002DF4                     i2l826:
 11489                           
 11490                           ;doprnt.c: 745: len = 0;
 11491  002DF4  0E00               	movlw	0
 11492  002DF6  6E20               	movwf	i2printf@len+1,c
 11493  002DF8  0E00               	movlw	0
 11494  002DFA  6E1F               	movwf	i2printf@len,c
 11495                           
 11496                           ;doprnt.c: 746: while(cp[len])
 11497  002DFC  D002               	goto	i2l827
 11498  002DFE                     
 11499                           ;doprnt.c: 747: len++;
 11500  002DFE  4A1F               	infsnz	i2printf@len,f,c
 11501  002E00  2A20               	incf	i2printf@len+1,f,c
 11502  002E02                     i2l827:
 11503  002E02  501F               	movf	i2printf@len,w,c
 11504  002E04  241B               	addwf	i2printf@cp,w,c
 11505  002E06  6E15               	movwf	??i2_printf& (0+255),c
 11506  002E08  5020               	movf	i2printf@len+1,w,c
 11507  002E0A  201C               	addwfc	i2printf@cp+1,w,c
 11508  002E0C  6E16               	movwf	(??i2_printf+1)& (0+255),c
 11509  002E0E  C015  FFF6         	movff	??i2_printf,tblptrl
 11510  002E12  C016  FFF7         	movff	??i2_printf+1,tblptrh
 11511  002E16  0E00               	movlw	low (__mediumconst shr (0+16))
 11512  002E18  6EF8               	movwf	tblptru,c
 11513  002E1A  0E0F               	movlw	(high __ramtop+-1)
 11514  002E1C  64F7               	cpfsgt	tblptrh,c
 11515  002E1E  D003               	bra	i2u388_47
 11516  002E20  0008               	tblrd		*
 11517  002E22  50F5               	movf	tablat,w,c
 11518  002E24  D005               	bra	i2u388_40
 11519  002E26                     i2u388_47:
 11520  002E26  CFF6 FFE9          	movff	tblptrl,fsr0l
 11521  002E2A  CFF7 FFEA          	movff	tblptrh,fsr0h
 11522  002E2E  50EF               	movf	indf0,w,c
 11523  002E30                     i2u388_40:
 11524  002E30  0900               	iorlw	0
 11525  002E32  A4D8               	btfss	status,2,c
 11526  002E34  D7E4               	goto	i2l828
 11527                           
 11528                           ;doprnt.c: 757: if(width > len)
 11529  002E36  5024               	movf	i2printf@width,w,c
 11530  002E38  5C1F               	subwf	i2printf@len,w,c
 11531  002E3A  5025               	movf	i2printf@width+1,w,c
 11532  002E3C  5820               	subwfb	i2printf@len+1,w,c
 11533  002E3E  B0D8               	btfsc	status,0,c
 11534  002E40  D005               	goto	i2l830
 11535                           
 11536                           ;doprnt.c: 758: width -= len;
 11537  002E42  501F               	movf	i2printf@len,w,c
 11538  002E44  5E24               	subwf	i2printf@width,f,c
 11539  002E46  5020               	movf	i2printf@len+1,w,c
 11540  002E48  5A25               	subwfb	i2printf@width+1,f,c
 11541  002E4A  D008               	goto	i2l832
 11542  002E4C                     i2l830:
 11543                           
 11544                           ;doprnt.c: 759: else
 11545                           ;doprnt.c: 760: width = 0;
 11546  002E4C  0E00               	movlw	0
 11547  002E4E  6E25               	movwf	i2printf@width+1,c
 11548  002E50  0E00               	movlw	0
 11549  002E52  6E24               	movwf	i2printf@width,c
 11550                           
 11551                           ;doprnt.c: 764: while(width--)
 11552  002E54  D003               	goto	i2l832
 11553  002E56                     i2l4982:
 11554                           
 11555                           ;doprnt.c: 765: (putch(' ') );
 11556  002E56  0E20               	movlw	32
 11557  002E58  ECF1  F021         	call	i2_putch
 11558  002E5C                     i2l832:
 11559  002E5C  0624               	decf	i2printf@width,f,c
 11560  002E5E  A0D8               	btfss	status,0,c
 11561  002E60  0625               	decf	i2printf@width+1,f,c
 11562  002E62  2824               	incf	i2printf@width,w,c
 11563  002E64  E1F8               	bnz	i2l4982
 11564  002E66  2825               	incf	i2printf@width+1,w,c
 11565  002E68  B4D8               	btfsc	status,2,c
 11566  002E6A  D016               	goto	i2l835
 11567  002E6C  D7F4               	goto	i2l833
 11568  002E6E                     i2l4986:
 11569                           
 11570                           ;doprnt.c: 768: (putch(*cp++) );
 11571  002E6E  C01B  FFF6         	movff	i2printf@cp,tblptrl
 11572  002E72  C01C  FFF7         	movff	i2printf@cp+1,tblptrh
 11573  002E76  0E00               	movlw	low (__mediumconst shr (0+16))
 11574  002E78  6EF8               	movwf	tblptru,c
 11575  002E7A  0E0F               	movlw	(high __ramtop+-1)
 11576  002E7C  64F7               	cpfsgt	tblptrh,c
 11577  002E7E  D003               	bra	i2u392_47
 11578  002E80  0008               	tblrd		*
 11579  002E82  50F5               	movf	tablat,w,c
 11580  002E84  D005               	bra	i2u392_40
 11581  002E86                     i2u392_47:
 11582  002E86  CFF6 FFE9          	movff	tblptrl,fsr0l
 11583  002E8A  CFF7 FFEA          	movff	tblptrh,fsr0h
 11584  002E8E  50EF               	movf	indf0,w,c
 11585  002E90                     i2u392_40:
 11586  002E90  ECF1  F021         	call	i2_putch
 11587  002E94  4A1B               	infsnz	i2printf@cp,f,c
 11588  002E96  2A1C               	incf	i2printf@cp+1,f,c
 11589  002E98                     i2l835:
 11590  002E98  061F               	decf	i2printf@len,f,c
 11591  002E9A  A0D8               	btfss	status,0,c
 11592  002E9C  0620               	decf	i2printf@len+1,f,c
 11593  002E9E  281F               	incf	i2printf@len,w,c
 11594  002EA0  E1E6               	bnz	i2l4986
 11595  002EA2  2820               	incf	i2printf@len+1,w,c
 11596  002EA4  B4D8               	btfsc	status,2,c
 11597  002EA6  D12E               	goto	i2u412_40
 11598  002EA8  D7E2               	goto	i2l836
 11599  002EAA                     i2l818:
 11600  002EAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 11601  002EAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11602  002EB2  4A0D               	infsnz	i2printf@f,f,c
 11603  002EB4  2A0E               	incf	i2printf@f+1,f,c
 11604  002EB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11605  002EB6  6AF8               	clrf	tblptru,c
 11606  002EB8                     	endif
 11607  002EB8                     	if	0	;tblptru may be non-zero
 11608  002EB8                     	endif
 11609  002EB8  0008               	tblrd		*
 11610  002EBA  CFF5 F026          	movff	tablat,i2printf@c
 11611  002EBE  5026               	movf	i2printf@c,w,c
 11612                           
 11613                           ; Switch size 1, requested type "space"
 11614                           ; Number of cases is 5, Range of values is 0 to 120
 11615                           ; switch strategies available:
 11616                           ; Name         Instructions Cycles
 11617                           ; simple_byte           16     9 (average)
 11618                           ;	Chosen strategy is simple_byte
 11619  002EC0  0A00               	xorlw	0	; case 0
 11620  002EC2  B4D8               	btfsc	status,2,c
 11621  002EC4  0012               	return	
 11622  002EC6  0A64               	xorlw	100	; case 100
 11623  002EC8  B4D8               	btfsc	status,2,c
 11624  002ECA  D00A               	goto	i2l823
 11625  002ECC  0A0D               	xorlw	13	; case 105
 11626  002ECE  B4D8               	btfsc	status,2,c
 11627  002ED0  D007               	goto	i2l823
 11628  002ED2  0A1A               	xorlw	26	; case 115
 11629  002ED4  B4D8               	btfsc	status,2,c
 11630  002ED6  D77A               	goto	i2l825
 11631  002ED8  0A0B               	xorlw	11	; case 120
 11632  002EDA  B4D8               	btfsc	status,2,c
 11633  002EDC  D775               	goto	i2l824
 11634  002EDE  D112               	goto	i2u412_40
 11635  002EE0                     i2l823:
 11636                           
 11637                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11638  002EE0  BE23               	btfsc	i2printf@flag,7,c
 11639  002EE2  D015               	goto	i2l839
 11640                           
 11641                           ;doprnt.c: 1253: {
 11642                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11643  002EE4  C01D  FFD9         	movff	i2printf@ap,fsr2l
 11644  002EE8  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 11645  002EEC  CFDE F021          	movff	postinc2,i2printf@val
 11646  002EF0  CFDD F022          	movff	postdec2,i2printf@val+1
 11647  002EF4  0E02               	movlw	2
 11648  002EF6  261D               	addwf	i2printf@ap,f,c
 11649  002EF8  0E00               	movlw	0
 11650  002EFA  221E               	addwfc	i2printf@ap+1,f,c
 11651                           
 11652                           ;doprnt.c: 1261: if((int)val < 0) {
 11653  002EFC  AE22               	btfss	i2printf@val+1,7,c
 11654  002EFE  D04A               	goto	i2l842
 11655                           
 11656                           ;doprnt.c: 1262: flag |= 0x03;
 11657  002F00  0E03               	movlw	3
 11658  002F02  1223               	iorwf	i2printf@flag,f,c
 11659                           
 11660                           ;doprnt.c: 1263: val = -val;
 11661  002F04  6C21               	negf	i2printf@val,c
 11662  002F06  1E22               	comf	i2printf@val+1,f,c
 11663  002F08  B0D8               	btfsc	status,0,c
 11664  002F0A  2A22               	incf	i2printf@val+1,f,c
 11665                           
 11666                           ;doprnt.c: 1264: }
 11667                           ;doprnt.c: 1266: }
 11668  002F0C  D043               	goto	i2l842
 11669  002F0E                     i2l839:
 11670                           
 11671                           ;doprnt.c: 1268: else
 11672                           ;doprnt.c: 1273: {
 11673                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11674  002F0E  C01D  FFD9         	movff	i2printf@ap,fsr2l
 11675  002F12  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 11676  002F16  CFDE F021          	movff	postinc2,i2printf@val
 11677  002F1A  CFDD F022          	movff	postdec2,i2printf@val+1
 11678  002F1E  0E02               	movlw	2
 11679  002F20  261D               	addwf	i2printf@ap,f,c
 11680  002F22  0E00               	movlw	0
 11681  002F24  221E               	addwfc	i2printf@ap+1,f,c
 11682                           
 11683                           ;doprnt.c: 1287: }
 11684                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 11685  002F26  D036               	goto	i2l842
 11686  002F28                     
 11687                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11688  002F28  0E01               	movlw	1
 11689  002F2A  6E26               	movwf	i2printf@c,c
 11690  002F2C                     i2l5012:
 11691  002F2C  0E05               	movlw	5
 11692  002F2E  1826               	xorwf	i2printf@c,w,c
 11693  002F30  B4D8               	btfsc	status,2,c
 11694  002F32  D038               	goto	i2l847
 11695                           
 11696                           ;doprnt.c: 1306: if(val < dpowers[c])
 11697  002F34  5026               	movf	i2printf@c,w,c
 11698  002F36  0D02               	mullw	2
 11699  002F38  0E88               	movlw	low _dpowers
 11700  002F3A  24F3               	addwf	prodl,w,c
 11701  002F3C  6EF6               	movwf	tblptrl,c
 11702  002F3E  0EFD               	movlw	high _dpowers
 11703  002F40  20F4               	addwfc	prodh,w,c
 11704  002F42  6EF7               	movwf	tblptrh,c
 11705  002F44                     	if	1	;There are 3 active tblptr bytes
 11706  002F44  6AF8               	clrf	tblptru,c
 11707  002F46  0E00               	movlw	low (__mediumconst shr (0+16))
 11708  002F48  22F8               	addwfc	tblptru,f,c
 11709  002F4A                     	endif
 11710  002F4A  0009               	tblrd		*+
 11711  002F4C  50F5               	movf	tablat,w,c
 11712  002F4E  5C21               	subwf	i2printf@val,w,c
 11713  002F50  0009               	tblrd		*+
 11714  002F52  50F5               	movf	tablat,w,c
 11715  002F54  5822               	subwfb	i2printf@val+1,w,c
 11716  002F56  A0D8               	btfss	status,0,c
 11717  002F58  D025               	goto	i2l847
 11718                           
 11719                           ;doprnt.c: 1307: break;
 11720  002F5A  2A26               	incf	i2printf@c,f,c
 11721  002F5C  D7E7               	goto	i2l5012
 11722  002F5E                     
 11723                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11724  002F5E  0E01               	movlw	1
 11725  002F60  6E26               	movwf	i2printf@c,c
 11726  002F62                     i2l5026:
 11727  002F62  0E04               	movlw	4
 11728  002F64  1826               	xorwf	i2printf@c,w,c
 11729  002F66  B4D8               	btfsc	status,2,c
 11730  002F68  D01D               	goto	i2l847
 11731                           
 11732                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11733  002F6A  5026               	movf	i2printf@c,w,c
 11734  002F6C  0D02               	mullw	2
 11735  002F6E  0E92               	movlw	low _hexpowers
 11736  002F70  24F3               	addwf	prodl,w,c
 11737  002F72  6EF6               	movwf	tblptrl,c
 11738  002F74  0EFD               	movlw	high _hexpowers
 11739  002F76  20F4               	addwfc	prodh,w,c
 11740  002F78  6EF7               	movwf	tblptrh,c
 11741  002F7A                     	if	1	;There are 3 active tblptr bytes
 11742  002F7A  6AF8               	clrf	tblptru,c
 11743  002F7C  0E00               	movlw	low (__mediumconst shr (0+16))
 11744  002F7E  22F8               	addwfc	tblptru,f,c
 11745  002F80                     	endif
 11746  002F80  0009               	tblrd		*+
 11747  002F82  50F5               	movf	tablat,w,c
 11748  002F84  5C21               	subwf	i2printf@val,w,c
 11749  002F86  0009               	tblrd		*+
 11750  002F88  50F5               	movf	tablat,w,c
 11751  002F8A  5822               	subwfb	i2printf@val+1,w,c
 11752  002F8C  A0D8               	btfss	status,0,c
 11753  002F8E  D00A               	goto	i2l847
 11754                           
 11755                           ;doprnt.c: 1318: break;
 11756  002F90  2A26               	incf	i2printf@c,f,c
 11757  002F92  D7E7               	goto	i2l5026
 11758  002F94                     i2l842:
 11759  002F94  5023               	movf	i2printf@flag,w,c
 11760  002F96  0B80               	andlw	128
 11761                           
 11762                           ; Switch size 1, requested type "space"
 11763                           ; Number of cases is 2, Range of values is 0 to 128
 11764                           ; switch strategies available:
 11765                           ; Name         Instructions Cycles
 11766                           ; simple_byte            7     4 (average)
 11767                           ;	Chosen strategy is simple_byte
 11768  002F98  0A00               	xorlw	0	; case 0
 11769  002F9A  B4D8               	btfsc	status,2,c
 11770  002F9C  D7C5               	goto	i2l843
 11771  002F9E  0A80               	xorlw	128	; case 128
 11772  002FA0  B4D8               	btfsc	status,2,c
 11773  002FA2  D7DD               	goto	i2l848
 11774  002FA4                     i2l847:
 11775                           
 11776                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11777  002FA4  5024               	movf	i2printf@width,w,c
 11778  002FA6  1025               	iorwf	i2printf@width+1,w,c
 11779  002FA8  B4D8               	btfsc	status,2,c
 11780  002FAA  D009               	goto	i2l852
 11781  002FAC  C023  F015         	movff	i2printf@flag,??i2_printf
 11782  002FB0  0E03               	movlw	3
 11783  002FB2  1615               	andwf	??i2_printf,f,c
 11784  002FB4  B4D8               	btfsc	status,2,c
 11785  002FB6  D003               	goto	i2l852
 11786                           
 11787                           ;doprnt.c: 1346: width--;
 11788  002FB8  0624               	decf	i2printf@width,f,c
 11789  002FBA  A0D8               	btfss	status,0,c
 11790  002FBC  0625               	decf	i2printf@width+1,f,c
 11791  002FBE                     i2l852:
 11792                           
 11793                           ;doprnt.c: 1381: if(width > c)
 11794  002FBE  0E80               	movlw	128
 11795  002FC0  BE26               	btfsc	i2printf@c,7,c
 11796  002FC2  0E7F               	movlw	127
 11797  002FC4  6E15               	movwf	??i2_printf& (0+255),c
 11798  002FC6  5024               	movf	i2printf@width,w,c
 11799  002FC8  5C26               	subwf	i2printf@c,w,c
 11800  002FCA  5025               	movf	i2printf@width+1,w,c
 11801  002FCC  0A80               	xorlw	128
 11802  002FCE  5815               	subwfb	??i2_printf& (0+255),w,c
 11803  002FD0  B0D8               	btfsc	status,0,c
 11804  002FD2  D007               	goto	i2l853
 11805                           
 11806                           ;doprnt.c: 1382: width -= c;
 11807  002FD4  5026               	movf	i2printf@c,w,c
 11808  002FD6  5E24               	subwf	i2printf@width,f,c
 11809  002FD8  0E00               	movlw	0
 11810  002FDA  BE26               	btfsc	i2printf@c,7,c
 11811  002FDC  0EFF               	movlw	255
 11812  002FDE  5A25               	subwfb	i2printf@width+1,f,c
 11813  002FE0  D004               	goto	i2l854
 11814  002FE2                     i2l853:
 11815                           
 11816                           ;doprnt.c: 1383: else
 11817                           ;doprnt.c: 1384: width = 0;
 11818  002FE2  0E00               	movlw	0
 11819  002FE4  6E25               	movwf	i2printf@width+1,c
 11820  002FE6  0E00               	movlw	0
 11821  002FE8  6E24               	movwf	i2printf@width,c
 11822  002FEA                     i2l854:
 11823                           
 11824                           ;doprnt.c: 1387: if(flag & 0x04) {
 11825  002FEA  A423               	btfss	i2printf@flag,2,c
 11826  002FEC  D014               	goto	i2l855
 11827                           
 11828                           ;doprnt.c: 1392: if(flag & 0x03)
 11829  002FEE  C023  F015         	movff	i2printf@flag,??i2_printf
 11830  002FF2  0E03               	movlw	3
 11831  002FF4  1615               	andwf	??i2_printf,f,c
 11832  002FF6  B4D8               	btfsc	status,2,c
 11833  002FF8  D003               	goto	i2l856
 11834                           
 11835                           ;doprnt.c: 1393: (putch('-') );
 11836  002FFA  0E2D               	movlw	45
 11837  002FFC  ECF1  F021         	call	i2_putch
 11838  003000                     i2l856:
 11839                           
 11840                           ;doprnt.c: 1415: if(width)
 11841  003000  5024               	movf	i2printf@width,w,c
 11842  003002  1025               	iorwf	i2printf@width+1,w,c
 11843  003004  B4D8               	btfsc	status,2,c
 11844  003006  D01E               	goto	i2l864
 11845                           
 11846                           ;doprnt.c: 1417: (putch('0') );
 11847                           
 11848                           ;doprnt.c: 1416: do
 11849  003008  0E30               	movlw	48
 11850  00300A  ECF1  F021         	call	i2_putch
 11851                           
 11852                           ;doprnt.c: 1418: while(--width);
 11853  00300E  0624               	decf	i2printf@width,f,c
 11854  003010  A0D8               	btfss	status,0,c
 11855  003012  0625               	decf	i2printf@width+1,f,c
 11856  003014  D7F5               	goto	i2l856
 11857  003016                     i2l855:
 11858                           
 11859                           ;doprnt.c: 1422: {
 11860                           ;doprnt.c: 1424: if(width
 11861                           ;doprnt.c: 1428: )
 11862  003016  5024               	movf	i2printf@width,w,c
 11863  003018  1025               	iorwf	i2printf@width+1,w,c
 11864  00301A  B4D8               	btfsc	status,2,c
 11865  00301C  D00A               	goto	i2u410_40
 11866  00301E                     i2u409_40:
 11867                           
 11868                           ;doprnt.c: 1430: (putch(' ') );
 11869                           
 11870                           ;doprnt.c: 1429: do
 11871  00301E  0E20               	movlw	32
 11872  003020  ECF1  F021         	call	i2_putch
 11873                           
 11874                           ;doprnt.c: 1431: while(--width);
 11875  003024  0624               	decf	i2printf@width,f,c
 11876  003026  A0D8               	btfss	status,0,c
 11877  003028  0625               	decf	i2printf@width+1,f,c
 11878  00302A  5024               	movf	i2printf@width,w,c
 11879  00302C  1025               	iorwf	i2printf@width+1,w,c
 11880  00302E  A4D8               	btfss	status,2,c
 11881  003030  D7F6               	goto	i2u409_40
 11882  003032                     i2u410_40:
 11883                           
 11884                           ;doprnt.c: 1438: if(flag & 0x03)
 11885  003032  C023  F015         	movff	i2printf@flag,??i2_printf
 11886  003036  0E03               	movlw	3
 11887  003038  1615               	andwf	??i2_printf,f,c
 11888  00303A  B4D8               	btfsc	status,2,c
 11889  00303C  D003               	goto	i2l864
 11890                           
 11891                           ;doprnt.c: 1439: (putch('-') );
 11892  00303E  0E2D               	movlw	45
 11893  003040  ECF1  F021         	call	i2_putch
 11894  003044                     i2l864:
 11895                           
 11896                           ;doprnt.c: 1469: }
 11897                           ;doprnt.c: 1472: prec = c;
 11898  003044  C026  F01A         	movff	i2printf@c,i2printf@prec
 11899                           
 11900                           ;doprnt.c: 1474: while(prec--) {
 11901  003048  D059               	goto	i2l865
 11902  00304A                     
 11903                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11904  00304A  501A               	movf	i2printf@prec,w,c
 11905  00304C  0D02               	mullw	2
 11906  00304E  0E88               	movlw	low _dpowers
 11907  003050  24F3               	addwf	prodl,w,c
 11908  003052  6EF6               	movwf	tblptrl,c
 11909  003054  0EFD               	movlw	high _dpowers
 11910  003056  20F4               	addwfc	prodh,w,c
 11911  003058  6EF7               	movwf	tblptrh,c
 11912  00305A                     	if	1	;There are 3 active tblptr bytes
 11913  00305A  6AF8               	clrf	tblptru,c
 11914  00305C  0E00               	movlw	low (__mediumconst shr (0+16))
 11915  00305E  22F8               	addwfc	tblptru,f,c
 11916  003060                     	endif
 11917  003060  0009               	tblrd		*+
 11918  003062  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11919  003066  000A               	tblrd		*-
 11920  003068  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11921  00306C  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11922  003070  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11923  003074  EC17  F01F         	call	i2___lwdiv	;wreg free
 11924  003078  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 11925  00307C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11926  003080  0E00               	movlw	0
 11927  003082  6E0B               	movwf	i2___lwmod@divisor+1,c
 11928  003084  0E0A               	movlw	10
 11929  003086  6E0A               	movwf	i2___lwmod@divisor,c
 11930  003088  EC82  F020         	call	i2___lwmod	;wreg free
 11931  00308C  5008               	movf	?i2___lwmod,w,c
 11932  00308E  0F30               	addlw	48
 11933  003090  6E26               	movwf	i2printf@c,c
 11934                           
 11935                           ;doprnt.c: 1491: break;
 11936  003092  D031               	goto	i2l869
 11937  003094                     
 11938                           ;doprnt.c: 1499: {
 11939                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11940  003094  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11941  003098  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11942  00309C  501A               	movf	i2printf@prec,w,c
 11943  00309E  0D02               	mullw	2
 11944  0030A0  0E92               	movlw	low _hexpowers
 11945  0030A2  24F3               	addwf	prodl,w,c
 11946  0030A4  6EF6               	movwf	tblptrl,c
 11947  0030A6  0EFD               	movlw	high _hexpowers
 11948  0030A8  20F4               	addwfc	prodh,w,c
 11949  0030AA  6EF7               	movwf	tblptrh,c
 11950  0030AC                     	if	1	;There are 3 active tblptr bytes
 11951  0030AC  6AF8               	clrf	tblptru,c
 11952  0030AE  0E00               	movlw	low (__mediumconst shr (0+16))
 11953  0030B0  22F8               	addwfc	tblptru,f,c
 11954  0030B2                     	endif
 11955  0030B2  0009               	tblrd		*+
 11956  0030B4  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11957  0030B8  000A               	tblrd		*-
 11958  0030BA  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11959  0030BE  EC17  F01F         	call	i2___lwdiv	;wreg free
 11960  0030C2  5001               	movf	?i2___lwdiv,w,c
 11961  0030C4  0B0F               	andlw	15
 11962  0030C6  6E19               	movwf	i2printf@idx,c
 11963                           
 11964                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11965  0030C8  5019               	movf	i2printf@idx,w,c
 11966  0030CA  0D01               	mullw	1
 11967  0030CC  0E21               	movlw	low STR_96
 11968  0030CE  24F3               	addwf	prodl,w,c
 11969  0030D0  6EF6               	movwf	tblptrl,c
 11970  0030D2  0EFE               	movlw	high STR_96
 11971  0030D4  20F4               	addwfc	prodh,w,c
 11972  0030D6  6EF7               	movwf	tblptrh,c
 11973  0030D8                     	if	1	;There are 3 active tblptr bytes
 11974  0030D8  6AF8               	clrf	tblptru,c
 11975  0030DA  0E00               	movlw	low (__mediumconst shr (0+16))
 11976  0030DC  22F8               	addwfc	tblptru,f,c
 11977  0030DE                     	endif
 11978  0030DE  0008               	tblrd		*
 11979  0030E0  CFF5 F026          	movff	tablat,i2printf@c
 11980                           
 11981                           ;doprnt.c: 1523: }
 11982                           
 11983                           ;doprnt.c: 1508: }
 11984                           ;doprnt.c: 1510: break;
 11985  0030E4  D008               	goto	i2l869
 11986  0030E6  5023               	movf	i2printf@flag,w,c
 11987  0030E8  0B80               	andlw	128
 11988                           
 11989                           ; Switch size 1, requested type "space"
 11990                           ; Number of cases is 2, Range of values is 0 to 128
 11991                           ; switch strategies available:
 11992                           ; Name         Instructions Cycles
 11993                           ; simple_byte            7     4 (average)
 11994                           ;	Chosen strategy is simple_byte
 11995  0030EA  0A00               	xorlw	0	; case 0
 11996  0030EC  B4D8               	btfsc	status,2,c
 11997  0030EE  D7AD               	goto	i2l868
 11998  0030F0  0A80               	xorlw	128	; case 128
 11999  0030F2  B4D8               	btfsc	status,2,c
 12000  0030F4  D7CF               	goto	i2l870
 12001  0030F6                     i2l869:
 12002                           
 12003                           ;doprnt.c: 1524: (putch(c) );
 12004  0030F6  5026               	movf	i2printf@c,w,c
 12005  0030F8  ECF1  F021         	call	i2_putch
 12006  0030FC                     i2l865:
 12007  0030FC  061A               	decf	i2printf@prec,f,c
 12008  0030FE  281A               	incf	i2printf@prec,w,c
 12009  003100  A4D8               	btfss	status,2,c
 12010  003102  D7F1               	goto	i2l867
 12011  003104                     i2u412_40:
 12012  003104  C00D  FFF6         	movff	i2printf@f,tblptrl
 12013  003108  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12014  00310C  4A0D               	infsnz	i2printf@f,f,c
 12015  00310E  2A0E               	incf	i2printf@f+1,f,c
 12016  003110                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12017  003110  6AF8               	clrf	tblptru,c
 12018  003112                     	endif
 12019  003112                     	if	0	;tblptru may be non-zero
 12020  003112                     	endif
 12021  003112  0008               	tblrd		*
 12022  003114  CFF5 F026          	movff	tablat,i2printf@c
 12023  003118  5026               	movf	i2printf@c,w,c
 12024  00311A  B4D8               	btfsc	status,2,c
 12025  00311C  0012               	return	
 12026  00311E  D5F8               	goto	i2l807
 12027  003120                     __end_ofi2_printf:
 12028                           	opt stack 0
 12029                           pclatu	equ	0xFFB
 12030                           pclath	equ	0xFFA
 12031                           tblptru	equ	0xFF8
 12032                           tblptrh	equ	0xFF7
 12033                           tblptrl	equ	0xFF6
 12034                           tablat	equ	0xFF5
 12035                           prodh	equ	0xFF4
 12036                           prodl	equ	0xFF3
 12037                           intcon	equ	0xFF2
 12038                           intcon3	equ	0xFF0
 12039                           indf0	equ	0xFEF
 12040                           postinc0	equ	0xFEE
 12041                           fsr0h	equ	0xFEA
 12042                           fsr0l	equ	0xFE9
 12043                           wreg	equ	0xFE8
 12044                           fsr1h	equ	0xFE2
 12045                           fsr1l	equ	0xFE1
 12046                           indf2	equ	0xFDF
 12047                           postinc2	equ	0xFDE
 12048                           postdec2	equ	0xFDD
 12049                           fsr2h	equ	0xFDA
 12050                           fsr2l	equ	0xFD9
 12051                           status	equ	0xFD8
 12052                           
 12053 ;; *************** function i2_putch *****************
 12054 ;; Defined at:
 12055 ;;		line 24 in file "lcd.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;  data            1    wreg     unsigned char 
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;  data            1    2[COMRAM] unsigned char 
 12060 ;; Return value:  Size  Location     Type
 12061 ;;                  1    wreg      void 
 12062 ;; Registers used:
 12063 ;;		wreg, status,2, status,0, cstack
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12072 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12073 ;;Total ram usage:        1 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    1
 12076 ;; This function calls:
 12077 ;;		i2_lcdNibble
 12078 ;; This function is called by:
 12079 ;;		_interruptHandler
 12080 ;;		i2_printf
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084                           	psect	text39
 12085  0043E2                     __ptext39:
 12086                           	opt stack 0
 12087  0043E2                     i2_putch:
 12088                           	opt stack 24
 12089                           
 12090                           ;incstack = 0
 12091                           ;i2putch@data stored from wreg
 12092  0043E2  6E03               	movwf	i2putch@data,c
 12093                           
 12094                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 12095  0043E4  848C               	bsf	3980,2,c	;volatile
 12096                           
 12097                           ;lcd.c: 33: lcdNibble(data);
 12098  0043E6  5003               	movf	i2putch@data,w,c
 12099  0043E8  EC24  F01C         	call	i2_lcdNibble
 12100                           
 12101                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
 12102  0043EC  0EC8               	movlw	200
 12103  0043EE                     i2u606_47:
 12104  0043EE  D000               	nop2	
 12105  0043F0  2EE8               	decfsz	wreg,f,c
 12106  0043F2  D7FD               	bra	i2u606_47
 12107  0043F4  0012               	return		;funcret
 12108  0043F6                     __end_ofi2_putch:
 12109                           	opt stack 0
 12110                           pclatu	equ	0xFFB
 12111                           pclath	equ	0xFFA
 12112                           tblptru	equ	0xFF8
 12113                           tblptrh	equ	0xFF7
 12114                           tblptrl	equ	0xFF6
 12115                           tablat	equ	0xFF5
 12116                           prodh	equ	0xFF4
 12117                           prodl	equ	0xFF3
 12118                           intcon	equ	0xFF2
 12119                           intcon3	equ	0xFF0
 12120                           indf0	equ	0xFEF
 12121                           postinc0	equ	0xFEE
 12122                           fsr0h	equ	0xFEA
 12123                           fsr0l	equ	0xFE9
 12124                           wreg	equ	0xFE8
 12125                           fsr1h	equ	0xFE2
 12126                           fsr1l	equ	0xFE1
 12127                           indf2	equ	0xFDF
 12128                           postinc2	equ	0xFDE
 12129                           postdec2	equ	0xFDD
 12130                           fsr2h	equ	0xFDA
 12131                           fsr2l	equ	0xFD9
 12132                           status	equ	0xFD8
 12133                           
 12134 ;; *************** function i2_isdigit *****************
 12135 ;; Defined at:
 12136 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 12137 ;; Parameters:    Size  Location     Type
 12138 ;;  c               1    wreg     unsigned char 
 12139 ;; Auto vars:     Size  Location     Type
 12140 ;;  c               1    2[COMRAM] unsigned char 
 12141 ;; Return value:  Size  Location     Type
 12142 ;;		None               void
 12143 ;; Registers used:
 12144 ;;		wreg, status,2, status,0
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12153 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12154 ;;Total ram usage:        3 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; This function calls:
 12157 ;;		Nothing
 12158 ;; This function is called by:
 12159 ;;		i2_printf
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           	psect	text40
 12164  004380                     __ptext40:
 12165                           	opt stack 0
 12166  004380                     i2_isdigit:
 12167                           	opt stack 24
 12168                           
 12169                           ;incstack = 0
 12170                           ;i2isdigit@c stored from wreg
 12171  004380  6E03               	movwf	i2isdigit@c,c
 12172  004382  0E00               	movlw	0
 12173  004384  6E02               	movwf	i2_isdigit$1385,c
 12174  004386  0E3A               	movlw	58
 12175  004388  6003               	cpfslt	i2isdigit@c,c
 12176  00438A  D005               	goto	i2l1203
 12177  00438C  0E2F               	movlw	47
 12178  00438E  6403               	cpfsgt	i2isdigit@c,c
 12179  004390  D002               	goto	i2l1203
 12180  004392  0E01               	movlw	1
 12181  004394  6E02               	movwf	i2_isdigit$1385,c
 12182  004396                     i2l1203:
 12183  004396  C002  F001         	movff	i2_isdigit$1385,??i2_isdigit
 12184  00439A  3001               	rrcf	??i2_isdigit,w,c
 12185  00439C  0012               	return	
 12186  00439E                     __end_ofi2_isdigit:
 12187                           	opt stack 0
 12188                           pclatu	equ	0xFFB
 12189                           pclath	equ	0xFFA
 12190                           tblptru	equ	0xFF8
 12191                           tblptrh	equ	0xFF7
 12192                           tblptrl	equ	0xFF6
 12193                           tablat	equ	0xFF5
 12194                           prodh	equ	0xFF4
 12195                           prodl	equ	0xFF3
 12196                           intcon	equ	0xFF2
 12197                           intcon3	equ	0xFF0
 12198                           indf0	equ	0xFEF
 12199                           postinc0	equ	0xFEE
 12200                           fsr0h	equ	0xFEA
 12201                           fsr0l	equ	0xFE9
 12202                           wreg	equ	0xFE8
 12203                           fsr1h	equ	0xFE2
 12204                           fsr1l	equ	0xFE1
 12205                           indf2	equ	0xFDF
 12206                           postinc2	equ	0xFDE
 12207                           postdec2	equ	0xFDD
 12208                           fsr2h	equ	0xFDA
 12209                           fsr2l	equ	0xFD9
 12210                           status	equ	0xFD8
 12211                           
 12212 ;; *************** function i2___lwmod *****************
 12213 ;; Defined at:
 12214 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 12215 ;; Parameters:    Size  Location     Type
 12216 ;;  dividend        2    7[COMRAM] unsigned int 
 12217 ;;  divisor         2    9[COMRAM] unsigned int 
 12218 ;; Auto vars:     Size  Location     Type
 12219 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12220 ;; Return value:  Size  Location     Type
 12221 ;;                  2    7[COMRAM] unsigned int 
 12222 ;; Registers used:
 12223 ;;		wreg, status,2, status,0
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12229 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;Total ram usage:        5 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; This function calls:
 12236 ;;		Nothing
 12237 ;; This function is called by:
 12238 ;;		i2_printf
 12239 ;; This function uses a non-reentrant model
 12240 ;;
 12241                           
 12242                           	psect	text41
 12243  004104                     __ptext41:
 12244                           	opt stack 0
 12245  004104                     i2___lwmod:
 12246                           	opt stack 24
 12247                           
 12248                           ;incstack = 0
 12249  004104  500A               	movf	i2___lwmod@divisor,w,c
 12250  004106  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12251  004108  B4D8               	btfsc	status,2,c
 12252  00410A  D018               	goto	i2l1297
 12253  00410C  0E01               	movlw	1
 12254  00410E  6E0C               	movwf	i2___lwmod@counter,c
 12255  004110  D004               	goto	i2l1292
 12256  004112  90D8               	bcf	status,0,c
 12257  004114  360A               	rlcf	i2___lwmod@divisor,f,c
 12258  004116  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12259  004118  2A0C               	incf	i2___lwmod@counter,f,c
 12260  00411A                     i2l1292:
 12261  00411A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12262  00411C  D7FA               	goto	i2l1293
 12263  00411E                     i2u326_40:
 12264  00411E  500A               	movf	i2___lwmod@divisor,w,c
 12265  004120  5C08               	subwf	i2___lwmod@dividend,w,c
 12266  004122  500B               	movf	i2___lwmod@divisor+1,w,c
 12267  004124  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12268  004126  A0D8               	btfss	status,0,c
 12269  004128  D004               	goto	i2l1296
 12270  00412A  500A               	movf	i2___lwmod@divisor,w,c
 12271  00412C  5E08               	subwf	i2___lwmod@dividend,f,c
 12272  00412E  500B               	movf	i2___lwmod@divisor+1,w,c
 12273  004130  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12274  004132                     i2l1296:
 12275  004132  90D8               	bcf	status,0,c
 12276  004134  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12277  004136  320A               	rrcf	i2___lwmod@divisor,f,c
 12278  004138  2E0C               	decfsz	i2___lwmod@counter,f,c
 12279  00413A  D7F1               	goto	i2u326_40
 12280  00413C                     i2l1297:
 12281  00413C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12282  004140  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12283  004144  0012               	return		;funcret
 12284  004146                     __end_ofi2___lwmod:
 12285                           	opt stack 0
 12286                           pclatu	equ	0xFFB
 12287                           pclath	equ	0xFFA
 12288                           tblptru	equ	0xFF8
 12289                           tblptrh	equ	0xFF7
 12290                           tblptrl	equ	0xFF6
 12291                           tablat	equ	0xFF5
 12292                           prodh	equ	0xFF4
 12293                           prodl	equ	0xFF3
 12294                           intcon	equ	0xFF2
 12295                           intcon3	equ	0xFF0
 12296                           indf0	equ	0xFEF
 12297                           postinc0	equ	0xFEE
 12298                           fsr0h	equ	0xFEA
 12299                           fsr0l	equ	0xFE9
 12300                           wreg	equ	0xFE8
 12301                           fsr1h	equ	0xFE2
 12302                           fsr1l	equ	0xFE1
 12303                           indf2	equ	0xFDF
 12304                           postinc2	equ	0xFDE
 12305                           postdec2	equ	0xFDD
 12306                           fsr2h	equ	0xFDA
 12307                           fsr2l	equ	0xFD9
 12308                           status	equ	0xFD8
 12309                           
 12310 ;; *************** function i2___lwdiv *****************
 12311 ;; Defined at:
 12312 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 12313 ;; Parameters:    Size  Location     Type
 12314 ;;  dividend        2    0[COMRAM] unsigned int 
 12315 ;;  divisor         2    2[COMRAM] unsigned int 
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12318 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12319 ;; Return value:  Size  Location     Type
 12320 ;;                  2    0[COMRAM] unsigned int 
 12321 ;; Registers used:
 12322 ;;		wreg, status,2, status,0
 12323 ;; Tracked objects:
 12324 ;;		On entry : 0/0
 12325 ;;		On exit  : 0/0
 12326 ;;		Unchanged: 0/0
 12327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12329 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12331 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12332 ;;Total ram usage:        7 bytes
 12333 ;; Hardware stack levels used:    1
 12334 ;; This function calls:
 12335 ;;		Nothing
 12336 ;; This function is called by:
 12337 ;;		i2_printf
 12338 ;; This function uses a non-reentrant model
 12339 ;;
 12340                           
 12341                           	psect	text42
 12342  003E2E                     __ptext42:
 12343                           	opt stack 0
 12344  003E2E                     i2___lwdiv:
 12345                           	opt stack 24
 12346                           
 12347                           ;incstack = 0
 12348  003E2E  0E00               	movlw	0
 12349  003E30  6E06               	movwf	i2___lwdiv@quotient+1,c
 12350  003E32  0E00               	movlw	0
 12351  003E34  6E05               	movwf	i2___lwdiv@quotient,c
 12352  003E36  5003               	movf	i2___lwdiv@divisor,w,c
 12353  003E38  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12354  003E3A  B4D8               	btfsc	status,2,c
 12355  003E3C  D01C               	goto	i2l1287
 12356  003E3E  0E01               	movlw	1
 12357  003E40  6E07               	movwf	i2___lwdiv@counter,c
 12358  003E42  D004               	goto	i2l1282
 12359  003E44  90D8               	bcf	status,0,c
 12360  003E46  3603               	rlcf	i2___lwdiv@divisor,f,c
 12361  003E48  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12362  003E4A  2A07               	incf	i2___lwdiv@counter,f,c
 12363  003E4C                     i2l1282:
 12364  003E4C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12365  003E4E  D7FA               	goto	i2l1283
 12366  003E50                     i2u323_40:
 12367  003E50  90D8               	bcf	status,0,c
 12368  003E52  3605               	rlcf	i2___lwdiv@quotient,f,c
 12369  003E54  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12370  003E56  5003               	movf	i2___lwdiv@divisor,w,c
 12371  003E58  5C01               	subwf	i2___lwdiv@dividend,w,c
 12372  003E5A  5004               	movf	i2___lwdiv@divisor+1,w,c
 12373  003E5C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12374  003E5E  A0D8               	btfss	status,0,c
 12375  003E60  D005               	goto	i2l1286
 12376  003E62  5003               	movf	i2___lwdiv@divisor,w,c
 12377  003E64  5E01               	subwf	i2___lwdiv@dividend,f,c
 12378  003E66  5004               	movf	i2___lwdiv@divisor+1,w,c
 12379  003E68  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12380  003E6A  8005               	bsf	i2___lwdiv@quotient,0,c
 12381  003E6C                     i2l1286:
 12382  003E6C  90D8               	bcf	status,0,c
 12383  003E6E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12384  003E70  3203               	rrcf	i2___lwdiv@divisor,f,c
 12385  003E72  2E07               	decfsz	i2___lwdiv@counter,f,c
 12386  003E74  D7ED               	goto	i2u323_40
 12387  003E76                     i2l1287:
 12388  003E76  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12389  003E7A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12390  003E7E  0012               	return		;funcret
 12391  003E80                     __end_ofi2___lwdiv:
 12392                           	opt stack 0
 12393                           pclatu	equ	0xFFB
 12394                           pclath	equ	0xFFA
 12395                           tblptru	equ	0xFF8
 12396                           tblptrh	equ	0xFF7
 12397                           tblptrl	equ	0xFF6
 12398                           tablat	equ	0xFF5
 12399                           prodh	equ	0xFF4
 12400                           prodl	equ	0xFF3
 12401                           intcon	equ	0xFF2
 12402                           intcon3	equ	0xFF0
 12403                           indf0	equ	0xFEF
 12404                           postinc0	equ	0xFEE
 12405                           fsr0h	equ	0xFEA
 12406                           fsr0l	equ	0xFE9
 12407                           wreg	equ	0xFE8
 12408                           fsr1h	equ	0xFE2
 12409                           fsr1l	equ	0xFE1
 12410                           indf2	equ	0xFDF
 12411                           postinc2	equ	0xFDE
 12412                           postdec2	equ	0xFDD
 12413                           fsr2h	equ	0xFDA
 12414                           fsr2l	equ	0xFD9
 12415                           status	equ	0xFD8
 12416                           
 12417 ;; *************** function i2_initLCD *****************
 12418 ;; Defined at:
 12419 ;;		line 60 in file "lcd.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;		None
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;		None
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      void 
 12426 ;; Registers used:
 12427 ;;		wreg, status,2, status,0, cstack
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12437 ;;Total ram usage:        1 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    2
 12440 ;; This function calls:
 12441 ;;		i2_lcdInst
 12442 ;; This function is called by:
 12443 ;;		_interruptHandler
 12444 ;; This function uses a non-reentrant model
 12445 ;;
 12446                           
 12447                           	psect	text43
 12448  003ECC                     __ptext43:
 12449                           	opt stack 0
 12450  003ECC                     i2_initLCD:
 12451                           	opt stack 23
 12452                           
 12453                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
 12454                           
 12455                           ;incstack = 0
 12456  003ECC  0EC3               	movlw	195
 12457  003ECE  6E04               	movwf	??i2_initLCD& (0+255),c
 12458  003ED0  0ECD               	movlw	205
 12459  003ED2                     i2u607_47:
 12460  003ED2  2EE8               	decfsz	wreg,f,c
 12461  003ED4  D7FE               	bra	i2u607_47
 12462  003ED6  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12463  003ED8  D7FC               	bra	i2u607_47
 12464  003EDA  F000               	nop	
 12465                           
 12466                           ;lcd.c: 69: lcdInst(0b00110011);
 12467  003EDC  0E33               	movlw	51
 12468  003EDE  ECFB  F021         	call	i2_lcdInst
 12469                           
 12470                           ;lcd.c: 70: lcdInst(0b00110010);
 12471  003EE2  0E32               	movlw	50
 12472  003EE4  ECFB  F021         	call	i2_lcdInst
 12473                           
 12474                           ;lcd.c: 71: lcdInst(0b00101000);
 12475  003EE8  0E28               	movlw	40
 12476  003EEA  ECFB  F021         	call	i2_lcdInst
 12477                           
 12478                           ;lcd.c: 72: lcdInst(0b00001111);
 12479  003EEE  0E0F               	movlw	15
 12480  003EF0  ECFB  F021         	call	i2_lcdInst
 12481                           
 12482                           ;lcd.c: 73: lcdInst(0b00000110);
 12483  003EF4  0E06               	movlw	6
 12484  003EF6  ECFB  F021         	call	i2_lcdInst
 12485                           
 12486                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12487  003EFA  0E01               	movlw	1
 12488  003EFC  ECFB  F021         	call	i2_lcdInst
 12489  003F00  0EC3               	movlw	195
 12490  003F02  6E04               	movwf	??i2_initLCD& (0+255),c
 12491  003F04  0ECD               	movlw	205
 12492  003F06                     i2u608_47:
 12493  003F06  2EE8               	decfsz	wreg,f,c
 12494  003F08  D7FE               	bra	i2u608_47
 12495  003F0A  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 12496  003F0C  D7FC               	bra	i2u608_47
 12497  003F0E  F000               	nop	
 12498                           
 12499                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 12500  003F10  0E0F               	movlw	15
 12501  003F12  ECFB  F021         	call	i2_lcdInst
 12502  003F16  0012               	return		;funcret
 12503  003F18                     __end_ofi2_initLCD:
 12504                           	opt stack 0
 12505                           pclatu	equ	0xFFB
 12506                           pclath	equ	0xFFA
 12507                           tblptru	equ	0xFF8
 12508                           tblptrh	equ	0xFF7
 12509                           tblptrl	equ	0xFF6
 12510                           tablat	equ	0xFF5
 12511                           prodh	equ	0xFF4
 12512                           prodl	equ	0xFF3
 12513                           intcon	equ	0xFF2
 12514                           intcon3	equ	0xFF0
 12515                           indf0	equ	0xFEF
 12516                           postinc0	equ	0xFEE
 12517                           fsr0h	equ	0xFEA
 12518                           fsr0l	equ	0xFE9
 12519                           wreg	equ	0xFE8
 12520                           fsr1h	equ	0xFE2
 12521                           fsr1l	equ	0xFE1
 12522                           indf2	equ	0xFDF
 12523                           postinc2	equ	0xFDE
 12524                           postdec2	equ	0xFDD
 12525                           fsr2h	equ	0xFDA
 12526                           fsr2l	equ	0xFD9
 12527                           status	equ	0xFD8
 12528                           
 12529 ;; *************** function i2_lcdInst *****************
 12530 ;; Defined at:
 12531 ;;		line 11 in file "lcd.c"
 12532 ;; Parameters:    Size  Location     Type
 12533 ;;  data            1    wreg     unsigned char 
 12534 ;; Auto vars:     Size  Location     Type
 12535 ;;  data            1    2[COMRAM] unsigned char 
 12536 ;; Return value:  Size  Location     Type
 12537 ;;                  1    wreg      void 
 12538 ;; Registers used:
 12539 ;;		wreg, status,2, status,0, cstack
 12540 ;; Tracked objects:
 12541 ;;		On entry : 0/0
 12542 ;;		On exit  : 0/0
 12543 ;;		Unchanged: 0/0
 12544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;Total ram usage:        1 bytes
 12550 ;; Hardware stack levels used:    1
 12551 ;; Hardware stack levels required when called:    1
 12552 ;; This function calls:
 12553 ;;		i2_lcdNibble
 12554 ;; This function is called by:
 12555 ;;		_interruptHandler
 12556 ;;		i2_initLCD
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           	psect	text44
 12561  0043F6                     __ptext44:
 12562                           	opt stack 0
 12563  0043F6                     i2_lcdInst:
 12564                           	opt stack 24
 12565                           
 12566                           ;incstack = 0
 12567                           ;i2lcdInst@data stored from wreg
 12568  0043F6  6E03               	movwf	i2lcdInst@data,c
 12569                           
 12570                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 12571  0043F8  948C               	bcf	3980,2,c	;volatile
 12572                           
 12573                           ;lcd.c: 20: lcdNibble(data);
 12574  0043FA  5003               	movf	i2lcdInst@data,w,c
 12575  0043FC  EC24  F01C         	call	i2_lcdNibble
 12576                           
 12577                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
 12578  004400  0EC8               	movlw	200
 12579  004402                     i2u609_47:
 12580  004402  D000               	nop2	
 12581  004404  2EE8               	decfsz	wreg,f,c
 12582  004406  D7FD               	bra	i2u609_47
 12583  004408  0012               	return		;funcret
 12584  00440A                     __end_ofi2_lcdInst:
 12585                           	opt stack 0
 12586                           pclatu	equ	0xFFB
 12587                           pclath	equ	0xFFA
 12588                           tblptru	equ	0xFF8
 12589                           tblptrh	equ	0xFF7
 12590                           tblptrl	equ	0xFF6
 12591                           tablat	equ	0xFF5
 12592                           prodh	equ	0xFF4
 12593                           prodl	equ	0xFF3
 12594                           intcon	equ	0xFF2
 12595                           intcon3	equ	0xFF0
 12596                           indf0	equ	0xFEF
 12597                           postinc0	equ	0xFEE
 12598                           fsr0h	equ	0xFEA
 12599                           fsr0l	equ	0xFE9
 12600                           wreg	equ	0xFE8
 12601                           fsr1h	equ	0xFE2
 12602                           fsr1l	equ	0xFE1
 12603                           indf2	equ	0xFDF
 12604                           postinc2	equ	0xFDE
 12605                           postdec2	equ	0xFDD
 12606                           fsr2h	equ	0xFDA
 12607                           fsr2l	equ	0xFD9
 12608                           status	equ	0xFD8
 12609                           
 12610 ;; *************** function i2_lcdNibble *****************
 12611 ;; Defined at:
 12612 ;;		line 37 in file "lcd.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;  data            1    wreg     unsigned char 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  data            1    1[COMRAM] unsigned char 
 12617 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12618 ;; Return value:  Size  Location     Type
 12619 ;;                  1    wreg      void 
 12620 ;; Registers used:
 12621 ;;		wreg, status,2, status,0
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;Total ram usage:        2 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; This function calls:
 12634 ;;		Nothing
 12635 ;; This function is called by:
 12636 ;;		i2_lcdInst
 12637 ;;		i2_putch
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           	psect	text45
 12642  003848                     __ptext45:
 12643                           	opt stack 0
 12644  003848                     i2_lcdNibble:
 12645                           	opt stack 24
 12646                           
 12647                           ;incstack = 0
 12648                           ;i2lcdNibble@data stored from wreg
 12649  003848  6E02               	movwf	i2lcdNibble@data,c
 12650                           
 12651                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 12652  00384A  5002               	movf	i2lcdNibble@data,w,c
 12653  00384C  0BF0               	andlw	240
 12654  00384E  6E01               	movwf	i2lcdNibble@temp,c
 12655                           
 12656                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 12657  003850  508C               	movf	3980,w,c	;volatile
 12658  003852  0B0F               	andlw	15
 12659  003854  6E8C               	movwf	3980,c	;volatile
 12660                           
 12661                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 12662  003856  5001               	movf	i2lcdNibble@temp,w,c
 12663  003858  108C               	iorwf	3980,w,c	;volatile
 12664  00385A  6E8C               	movwf	3980,c	;volatile
 12665                           
 12666                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12667  00385C  0E00               	movlw	0
 12668  00385E  BEF2               	btfsc	intcon,7,c	;volatile
 12669  003860  0E01               	movlw	1
 12670  003862  0100               	movlb	0	; () banked
 12671  003864  6FCE               	movwf	_LCDinterruptState& (0+255),b
 12672                           
 12673                           ; BSR set to: 0
 12674  003866  9EF2               	bcf	intcon,7,c	;volatile
 12675                           
 12676                           ; BSR set to: 0
 12677  003868  868C               	bsf	3980,3,c	;volatile
 12678                           
 12679                           ; BSR set to: 0
 12680  00386A  0E53               	movlw	83
 12681  00386C                     i2u610_47:
 12682  00386C  2EE8               	decfsz	wreg,f,c
 12683  00386E  D7FE               	bra	i2u610_47
 12684  003870  F000               	nop	
 12685  003872  968C               	bcf	3980,3,c	;volatile
 12686  003874  0EC8               	movlw	200
 12687  003876                     i2u611_47:
 12688  003876  D000               	nop2	
 12689  003878  2EE8               	decfsz	wreg,f,c
 12690  00387A  D7FD               	bra	i2u611_47
 12691  00387C  0100               	movlb	0	; () banked
 12692  00387E  B1CE               	btfsc	_LCDinterruptState& (0+255),0,b
 12693  003880  D002               	bra	i2u272_45
 12694  003882  9EF2               	bcf	intcon,7,c	;volatile
 12695  003884  D001               	bra	i2u272_46
 12696  003886                     i2u272_45:
 12697  003886  8EF2               	bsf	intcon,7,c	;volatile
 12698  003888                     i2u272_46:
 12699                           
 12700                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 12701  003888  3802               	swapf	i2lcdNibble@data,w,c
 12702  00388A  0BF0               	andlw	240
 12703  00388C  6E02               	movwf	i2lcdNibble@data,c
 12704                           
 12705                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 12706  00388E  5002               	movf	i2lcdNibble@data,w,c
 12707  003890  0BF0               	andlw	240
 12708  003892  6E01               	movwf	i2lcdNibble@temp,c
 12709                           
 12710                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 12711  003894  508C               	movf	3980,w,c	;volatile
 12712  003896  0B0F               	andlw	15
 12713  003898  6E8C               	movwf	3980,c	;volatile
 12714                           
 12715                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 12716  00389A  5001               	movf	i2lcdNibble@temp,w,c
 12717  00389C  108C               	iorwf	3980,w,c	;volatile
 12718  00389E  6E8C               	movwf	3980,c	;volatile
 12719                           
 12720                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12721  0038A0  0E00               	movlw	0
 12722  0038A2  BEF2               	btfsc	intcon,7,c	;volatile
 12723  0038A4  0E01               	movlw	1
 12724  0038A6  0100               	movlb	0	; () banked
 12725  0038A8  6FCE               	movwf	_LCDinterruptState& (0+255),b
 12726                           
 12727                           ; BSR set to: 0
 12728  0038AA  9EF2               	bcf	intcon,7,c	;volatile
 12729                           
 12730                           ; BSR set to: 0
 12731  0038AC  868C               	bsf	3980,3,c	;volatile
 12732                           
 12733                           ; BSR set to: 0
 12734  0038AE  0E53               	movlw	83
 12735  0038B0                     i2u612_47:
 12736  0038B0  2EE8               	decfsz	wreg,f,c
 12737  0038B2  D7FE               	bra	i2u612_47
 12738  0038B4  F000               	nop	
 12739  0038B6  968C               	bcf	3980,3,c	;volatile
 12740  0038B8  0EC8               	movlw	200
 12741  0038BA                     i2u613_47:
 12742  0038BA  D000               	nop2	
 12743  0038BC  2EE8               	decfsz	wreg,f,c
 12744  0038BE  D7FD               	bra	i2u613_47
 12745  0038C0  0100               	movlb	0	; () banked
 12746  0038C2  B1CE               	btfsc	_LCDinterruptState& (0+255),0,b
 12747  0038C4  D002               	bra	i2u273_45
 12748  0038C6  9EF2               	bcf	intcon,7,c	;volatile
 12749  0038C8  D001               	bra	i2u273_46
 12750  0038CA                     i2u273_45:
 12751  0038CA  8EF2               	bsf	intcon,7,c	;volatile
 12752  0038CC                     i2u273_46:
 12753  0038CC  0012               	return		;funcret
 12754  0038CE                     __end_ofi2_lcdNibble:
 12755                           	opt stack 0
 12756                           pclatu	equ	0xFFB
 12757                           pclath	equ	0xFFA
 12758                           tblptru	equ	0xFF8
 12759                           tblptrh	equ	0xFF7
 12760                           tblptrl	equ	0xFF6
 12761                           tablat	equ	0xFF5
 12762                           prodh	equ	0xFF4
 12763                           prodl	equ	0xFF3
 12764                           intcon	equ	0xFF2
 12765                           intcon3	equ	0xFF0
 12766                           indf0	equ	0xFEF
 12767                           postinc0	equ	0xFEE
 12768                           fsr0h	equ	0xFEA
 12769                           fsr0l	equ	0xFE9
 12770                           wreg	equ	0xFE8
 12771                           fsr1h	equ	0xFE2
 12772                           fsr1l	equ	0xFE1
 12773                           indf2	equ	0xFDF
 12774                           postinc2	equ	0xFDE
 12775                           postdec2	equ	0xFDD
 12776                           fsr2h	equ	0xFDA
 12777                           fsr2l	equ	0xFD9
 12778                           status	equ	0xFD8
 12779                           
 12780 ;; *************** function i2___awdiv *****************
 12781 ;; Defined at:
 12782 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 12783 ;; Parameters:    Size  Location     Type
 12784 ;;  dividend        2    0[COMRAM] int 
 12785 ;;  divisor         2    2[COMRAM] int 
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;  __awdiv         2    6[COMRAM] int 
 12788 ;;  __awdiv         1    5[COMRAM] unsigned char 
 12789 ;;  __awdiv         1    4[COMRAM] unsigned char 
 12790 ;; Return value:  Size  Location     Type
 12791 ;;                  2    0[COMRAM] int 
 12792 ;; Registers used:
 12793 ;;		wreg, status,2, status,0
 12794 ;; Tracked objects:
 12795 ;;		On entry : 0/0
 12796 ;;		On exit  : 0/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12799 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12800 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12802 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12803 ;;Total ram usage:        8 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; This function calls:
 12806 ;;		Nothing
 12807 ;; This function is called by:
 12808 ;;		_interruptHandler
 12809 ;; This function uses a non-reentrant model
 12810 ;;
 12811                           
 12812                           	psect	text46
 12813  0039D8                     __ptext46:
 12814                           	opt stack 0
 12815  0039D8                     i2___awdiv:
 12816                           	opt stack 25
 12817                           
 12818                           ;incstack = 0
 12819  0039D8  0E00               	movlw	0
 12820  0039DA  6E06               	movwf	i2___awdiv@sign,c
 12821  0039DC  AE04               	btfss	i2___awdiv@divisor+1,7,c
 12822  0039DE  D006               	goto	i2l1041
 12823  0039E0  6C03               	negf	i2___awdiv@divisor,c
 12824  0039E2  1E04               	comf	i2___awdiv@divisor+1,f,c
 12825  0039E4  B0D8               	btfsc	status,0,c
 12826  0039E6  2A04               	incf	i2___awdiv@divisor+1,f,c
 12827  0039E8  0E01               	movlw	1
 12828  0039EA  6E06               	movwf	i2___awdiv@sign,c
 12829  0039EC                     i2l1041:
 12830  0039EC  AE02               	btfss	i2___awdiv@dividend+1,7,c
 12831  0039EE  D006               	goto	i2l1042
 12832  0039F0  6C01               	negf	i2___awdiv@dividend,c
 12833  0039F2  1E02               	comf	i2___awdiv@dividend+1,f,c
 12834  0039F4  B0D8               	btfsc	status,0,c
 12835  0039F6  2A02               	incf	i2___awdiv@dividend+1,f,c
 12836  0039F8  0E01               	movlw	1
 12837  0039FA  1A06               	xorwf	i2___awdiv@sign,f,c
 12838  0039FC                     i2l1042:
 12839  0039FC  0E00               	movlw	0
 12840  0039FE  6E08               	movwf	i2___awdiv@quotient+1,c
 12841  003A00  0E00               	movlw	0
 12842  003A02  6E07               	movwf	i2___awdiv@quotient,c
 12843  003A04  5003               	movf	i2___awdiv@divisor,w,c
 12844  003A06  1004               	iorwf	i2___awdiv@divisor+1,w,c
 12845  003A08  B4D8               	btfsc	status,2,c
 12846  003A0A  D01C               	goto	i2l1049
 12847  003A0C  0E01               	movlw	1
 12848  003A0E  6E05               	movwf	i2___awdiv@counter,c
 12849  003A10  D004               	goto	i2l1044
 12850  003A12  90D8               	bcf	status,0,c
 12851  003A14  3603               	rlcf	i2___awdiv@divisor,f,c
 12852  003A16  3604               	rlcf	i2___awdiv@divisor+1,f,c
 12853  003A18  2A05               	incf	i2___awdiv@counter,f,c
 12854  003A1A                     i2l1044:
 12855  003A1A  AE04               	btfss	i2___awdiv@divisor+1,7,c
 12856  003A1C  D7FA               	goto	i2l1045
 12857  003A1E                     i2u417_40:
 12858  003A1E  90D8               	bcf	status,0,c
 12859  003A20  3607               	rlcf	i2___awdiv@quotient,f,c
 12860  003A22  3608               	rlcf	i2___awdiv@quotient+1,f,c
 12861  003A24  5003               	movf	i2___awdiv@divisor,w,c
 12862  003A26  5C01               	subwf	i2___awdiv@dividend,w,c
 12863  003A28  5004               	movf	i2___awdiv@divisor+1,w,c
 12864  003A2A  5802               	subwfb	i2___awdiv@dividend+1,w,c
 12865  003A2C  A0D8               	btfss	status,0,c
 12866  003A2E  D005               	goto	i2l1048
 12867  003A30  5003               	movf	i2___awdiv@divisor,w,c
 12868  003A32  5E01               	subwf	i2___awdiv@dividend,f,c
 12869  003A34  5004               	movf	i2___awdiv@divisor+1,w,c
 12870  003A36  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 12871  003A38  8007               	bsf	i2___awdiv@quotient,0,c
 12872  003A3A                     i2l1048:
 12873  003A3A  90D8               	bcf	status,0,c
 12874  003A3C  3204               	rrcf	i2___awdiv@divisor+1,f,c
 12875  003A3E  3203               	rrcf	i2___awdiv@divisor,f,c
 12876  003A40  2E05               	decfsz	i2___awdiv@counter,f,c
 12877  003A42  D7ED               	goto	i2u417_40
 12878  003A44                     i2l1049:
 12879  003A44  5006               	movf	i2___awdiv@sign,w,c
 12880  003A46  B4D8               	btfsc	status,2,c
 12881  003A48  D004               	goto	i2l1050
 12882  003A4A  6C07               	negf	i2___awdiv@quotient,c
 12883  003A4C  1E08               	comf	i2___awdiv@quotient+1,f,c
 12884  003A4E  B0D8               	btfsc	status,0,c
 12885  003A50  2A08               	incf	i2___awdiv@quotient+1,f,c
 12886  003A52                     i2l1050:
 12887  003A52  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 12888  003A56  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 12889  003A5A  0012               	return	
 12890  003A5C                     __end_ofi2___awdiv:
 12891                           	opt stack 0
 12892                           pclatu	equ	0xFFB
 12893                           pclath	equ	0xFFA
 12894                           tblptru	equ	0xFF8
 12895                           tblptrh	equ	0xFF7
 12896                           tblptrl	equ	0xFF6
 12897                           tablat	equ	0xFF5
 12898                           prodh	equ	0xFF4
 12899                           prodl	equ	0xFF3
 12900                           intcon	equ	0xFF2
 12901                           intcon3	equ	0xFF0
 12902                           indf0	equ	0xFEF
 12903                           postinc0	equ	0xFEE
 12904                           fsr0h	equ	0xFEA
 12905                           fsr0l	equ	0xFE9
 12906                           wreg	equ	0xFE8
 12907                           fsr1h	equ	0xFE2
 12908                           fsr1l	equ	0xFE1
 12909                           indf2	equ	0xFDF
 12910                           postinc2	equ	0xFDE
 12911                           postdec2	equ	0xFDD
 12912                           fsr2h	equ	0xFDA
 12913                           fsr2l	equ	0xFD9
 12914                           status	equ	0xFD8
 12915                           
 12916 ;; *************** function i2_I2C_Master_Write *****************
 12917 ;; Defined at:
 12918 ;;		line 108 in file "I2C.c"
 12919 ;; Parameters:    Size  Location     Type
 12920 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 12921 ;; Auto vars:     Size  Location     Type
 12922 ;;		None
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  1    wreg      void 
 12925 ;; Registers used:
 12926 ;;		wreg, status,2, status,0, cstack
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12932 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12935 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12936 ;;Total ram usage:        2 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; Hardware stack levels required when called:    1
 12939 ;; This function calls:
 12940 ;;		i2_I2C_Master_Wait
 12941 ;; This function is called by:
 12942 ;;		_interruptHandler
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           	psect	text47
 12947  004426                     __ptext47:
 12948                           	opt stack 0
 12949  004426                     i2_I2C_Master_Write:
 12950                           	opt stack 24
 12951                           
 12952                           ;I2C.c: 116: I2C_Master_Wait();
 12953                           
 12954                           ;incstack = 0
 12955  004426  EC05  F022         	call	i2_I2C_Master_Wait	;wreg free
 12956                           
 12957                           ;I2C.c: 117: SSPBUF = byteToWrite;
 12958  00442A  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 12959  00442E  0012               	return		;funcret
 12960  004430                     __end_ofi2_I2C_Master_Write:
 12961                           	opt stack 0
 12962                           pclatu	equ	0xFFB
 12963                           pclath	equ	0xFFA
 12964                           tblptru	equ	0xFF8
 12965                           tblptrh	equ	0xFF7
 12966                           tblptrl	equ	0xFF6
 12967                           tablat	equ	0xFF5
 12968                           prodh	equ	0xFF4
 12969                           prodl	equ	0xFF3
 12970                           intcon	equ	0xFF2
 12971                           intcon3	equ	0xFF0
 12972                           indf0	equ	0xFEF
 12973                           postinc0	equ	0xFEE
 12974                           fsr0h	equ	0xFEA
 12975                           fsr0l	equ	0xFE9
 12976                           wreg	equ	0xFE8
 12977                           fsr1h	equ	0xFE2
 12978                           fsr1l	equ	0xFE1
 12979                           indf2	equ	0xFDF
 12980                           postinc2	equ	0xFDE
 12981                           postdec2	equ	0xFDD
 12982                           fsr2h	equ	0xFDA
 12983                           fsr2l	equ	0xFD9
 12984                           status	equ	0xFD8
 12985                           
 12986 ;; *************** function i2_I2C_Master_Stop *****************
 12987 ;; Defined at:
 12988 ;;		line 95 in file "I2C.c"
 12989 ;; Parameters:    Size  Location     Type
 12990 ;;		None
 12991 ;; Auto vars:     Size  Location     Type
 12992 ;;		None
 12993 ;; Return value:  Size  Location     Type
 12994 ;;                  1    wreg      void 
 12995 ;; Registers used:
 12996 ;;		wreg, status,2, status,0, cstack
 12997 ;; Tracked objects:
 12998 ;;		On entry : 0/0
 12999 ;;		On exit  : 0/0
 13000 ;;		Unchanged: 0/0
 13001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13006 ;;Total ram usage:        0 bytes
 13007 ;; Hardware stack levels used:    1
 13008 ;; Hardware stack levels required when called:    1
 13009 ;; This function calls:
 13010 ;;		i2_I2C_Master_Wait
 13011 ;; This function is called by:
 13012 ;;		_interruptHandler
 13013 ;; This function uses a non-reentrant model
 13014 ;;
 13015                           
 13016                           	psect	text48
 13017  004440                     __ptext48:
 13018                           	opt stack 0
 13019  004440                     i2_I2C_Master_Stop:
 13020                           	opt stack 24
 13021                           
 13022                           ;I2C.c: 104: I2C_Master_Wait();
 13023                           
 13024                           ;incstack = 0
 13025  004440  EC05  F022         	call	i2_I2C_Master_Wait	;wreg free
 13026                           
 13027                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 13028  004444  84C5               	bsf	4037,2,c	;volatile
 13029  004446  0012               	return		;funcret
 13030  004448                     __end_ofi2_I2C_Master_Stop:
 13031                           	opt stack 0
 13032                           pclatu	equ	0xFFB
 13033                           pclath	equ	0xFFA
 13034                           tblptru	equ	0xFF8
 13035                           tblptrh	equ	0xFF7
 13036                           tblptrl	equ	0xFF6
 13037                           tablat	equ	0xFF5
 13038                           prodh	equ	0xFF4
 13039                           prodl	equ	0xFF3
 13040                           intcon	equ	0xFF2
 13041                           intcon3	equ	0xFF0
 13042                           indf0	equ	0xFEF
 13043                           postinc0	equ	0xFEE
 13044                           fsr0h	equ	0xFEA
 13045                           fsr0l	equ	0xFE9
 13046                           wreg	equ	0xFE8
 13047                           fsr1h	equ	0xFE2
 13048                           fsr1l	equ	0xFE1
 13049                           indf2	equ	0xFDF
 13050                           postinc2	equ	0xFDE
 13051                           postdec2	equ	0xFDD
 13052                           fsr2h	equ	0xFDA
 13053                           fsr2l	equ	0xFD9
 13054                           status	equ	0xFD8
 13055                           
 13056 ;; *************** function i2_I2C_Master_Start *****************
 13057 ;; Defined at:
 13058 ;;		line 69 in file "I2C.c"
 13059 ;; Parameters:    Size  Location     Type
 13060 ;;		None
 13061 ;; Auto vars:     Size  Location     Type
 13062 ;;		None
 13063 ;; Return value:  Size  Location     Type
 13064 ;;                  1    wreg      void 
 13065 ;; Registers used:
 13066 ;;		wreg, status,2, status,0, cstack
 13067 ;; Tracked objects:
 13068 ;;		On entry : 0/0
 13069 ;;		On exit  : 0/0
 13070 ;;		Unchanged: 0/0
 13071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13076 ;;Total ram usage:        0 bytes
 13077 ;; Hardware stack levels used:    1
 13078 ;; Hardware stack levels required when called:    1
 13079 ;; This function calls:
 13080 ;;		i2_I2C_Master_Wait
 13081 ;; This function is called by:
 13082 ;;		_interruptHandler
 13083 ;; This function uses a non-reentrant model
 13084 ;;
 13085                           
 13086                           	psect	text49
 13087  004448                     __ptext49:
 13088                           	opt stack 0
 13089  004448                     i2_I2C_Master_Start:
 13090                           	opt stack 24
 13091                           
 13092                           ;I2C.c: 78: I2C_Master_Wait();
 13093                           
 13094                           ;incstack = 0
 13095  004448  EC05  F022         	call	i2_I2C_Master_Wait	;wreg free
 13096                           
 13097                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 13098  00444C  80C5               	bsf	4037,0,c	;volatile
 13099  00444E  0012               	return		;funcret
 13100  004450                     __end_ofi2_I2C_Master_Start:
 13101                           	opt stack 0
 13102                           pclatu	equ	0xFFB
 13103                           pclath	equ	0xFFA
 13104                           tblptru	equ	0xFF8
 13105                           tblptrh	equ	0xFF7
 13106                           tblptrl	equ	0xFF6
 13107                           tablat	equ	0xFF5
 13108                           prodh	equ	0xFF4
 13109                           prodl	equ	0xFF3
 13110                           intcon	equ	0xFF2
 13111                           intcon3	equ	0xFF0
 13112                           indf0	equ	0xFEF
 13113                           postinc0	equ	0xFEE
 13114                           fsr0h	equ	0xFEA
 13115                           fsr0l	equ	0xFE9
 13116                           wreg	equ	0xFE8
 13117                           fsr1h	equ	0xFE2
 13118                           fsr1l	equ	0xFE1
 13119                           indf2	equ	0xFDF
 13120                           postinc2	equ	0xFDE
 13121                           postdec2	equ	0xFDD
 13122                           fsr2h	equ	0xFDA
 13123                           fsr2l	equ	0xFD9
 13124                           status	equ	0xFD8
 13125                           
 13126 ;; *************** function i2_I2C_Master_Read *****************
 13127 ;; Defined at:
 13128 ;;		line 120 in file "I2C.c"
 13129 ;; Parameters:    Size  Location     Type
 13130 ;;  ackBit          1    wreg     unsigned char 
 13131 ;; Auto vars:     Size  Location     Type
 13132 ;;  ackBit          1    1[COMRAM] unsigned char 
 13133 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13134 ;; Return value:  Size  Location     Type
 13135 ;;                  1    wreg      unsigned char 
 13136 ;; Registers used:
 13137 ;;		wreg, status,2, status,0, cstack
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13146 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13147 ;;Total ram usage:        2 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    1
 13150 ;; This function calls:
 13151 ;;		i2_I2C_Master_Wait
 13152 ;; This function is called by:
 13153 ;;		_interruptHandler
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           	psect	text50
 13158  00423A                     __ptext50:
 13159                           	opt stack 0
 13160  00423A                     i2_I2C_Master_Read:
 13161                           	opt stack 24
 13162                           
 13163                           ;incstack = 0
 13164                           ;i2I2C_Master_Read@ackBit stored from wreg
 13165  00423A  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 13166                           
 13167                           ;I2C.c: 130: unsigned char receivedByte;
 13168                           ;I2C.c: 132: I2C_Master_Wait();
 13169  00423C  EC05  F022         	call	i2_I2C_Master_Wait	;wreg free
 13170                           
 13171                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 13172  004240  86C5               	bsf	4037,3,c	;volatile
 13173                           
 13174                           ;I2C.c: 135: I2C_Master_Wait();
 13175  004242  EC05  F022         	call	i2_I2C_Master_Wait	;wreg free
 13176                           
 13177                           ;I2C.c: 136: receivedByte = SSPBUF;
 13178  004246  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 13179                           
 13180                           ;I2C.c: 138: I2C_Master_Wait();
 13181  00424A  EC05  F022         	call	i2_I2C_Master_Wait	;wreg free
 13182                           
 13183                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 13184  00424E  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 13185  004250  D002               	bra	i2u383_45
 13186  004252  9AC5               	bcf	4037,5,c	;volatile
 13187  004254  D001               	bra	i2u383_46
 13188  004256                     i2u383_45:
 13189  004256  8AC5               	bsf	4037,5,c	;volatile
 13190  004258                     i2u383_46:
 13191                           
 13192                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 13193  004258  88C5               	bsf	4037,4,c	;volatile
 13194                           
 13195                           ;I2C.c: 142: return receivedByte;
 13196  00425A  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 13197  00425C  0012               	return	
 13198  00425E                     __end_ofi2_I2C_Master_Read:
 13199                           	opt stack 0
 13200                           pclatu	equ	0xFFB
 13201                           pclath	equ	0xFFA
 13202                           tblptru	equ	0xFF8
 13203                           tblptrh	equ	0xFF7
 13204                           tblptrl	equ	0xFF6
 13205                           tablat	equ	0xFF5
 13206                           prodh	equ	0xFF4
 13207                           prodl	equ	0xFF3
 13208                           intcon	equ	0xFF2
 13209                           intcon3	equ	0xFF0
 13210                           indf0	equ	0xFEF
 13211                           postinc0	equ	0xFEE
 13212                           fsr0h	equ	0xFEA
 13213                           fsr0l	equ	0xFE9
 13214                           wreg	equ	0xFE8
 13215                           fsr1h	equ	0xFE2
 13216                           fsr1l	equ	0xFE1
 13217                           indf2	equ	0xFDF
 13218                           postinc2	equ	0xFDE
 13219                           postdec2	equ	0xFDD
 13220                           fsr2h	equ	0xFDA
 13221                           fsr2l	equ	0xFD9
 13222                           status	equ	0xFD8
 13223                           
 13224 ;; *************** function i2_I2C_Master_Wait *****************
 13225 ;; Defined at:
 13226 ;;		line 51 in file "I2C.c"
 13227 ;; Parameters:    Size  Location     Type
 13228 ;;		None
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;		None
 13231 ;; Return value:  Size  Location     Type
 13232 ;;                  1    wreg      void 
 13233 ;; Registers used:
 13234 ;;		wreg, status,2, status,0
 13235 ;; Tracked objects:
 13236 ;;		On entry : 0/0
 13237 ;;		On exit  : 0/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;Total ram usage:        1 bytes
 13245 ;; Hardware stack levels used:    1
 13246 ;; This function calls:
 13247 ;;		Nothing
 13248 ;; This function is called by:
 13249 ;;		i2_I2C_Master_Start
 13250 ;;		i2_I2C_Master_Stop
 13251 ;;		i2_I2C_Master_Write
 13252 ;;		i2_I2C_Master_Read
 13253 ;; This function uses a non-reentrant model
 13254 ;;
 13255                           
 13256                           	psect	text51
 13257  00440A                     __ptext51:
 13258                           	opt stack 0
 13259  00440A                     i2_I2C_Master_Wait:
 13260                           	opt stack 24
 13261                           
 13262                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 13263                           
 13264                           ;incstack = 0
 13265  00440A  B4C7               	btfsc	4039,2,c	;volatile
 13266  00440C  D7FE               	goto	i2_I2C_Master_Wait
 13267  00440E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13268  004412  0E1F               	movlw	31
 13269  004414  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13270  004416  B4D8               	btfsc	status,2,c
 13271  004418  0012               	return	
 13272  00441A  D7F7               	goto	i2_I2C_Master_Wait
 13273  00441C                     __end_ofi2_I2C_Master_Wait:
 13274                           	opt stack 0
 13275                           pclatu	equ	0xFFB
 13276                           pclath	equ	0xFFA
 13277                           tblptru	equ	0xFF8
 13278                           tblptrh	equ	0xFF7
 13279                           tblptrl	equ	0xFF6
 13280                           tablat	equ	0xFF5
 13281                           prodh	equ	0xFF4
 13282                           prodl	equ	0xFF3
 13283                           intcon	equ	0xFF2
 13284                           intcon3	equ	0xFF0
 13285                           indf0	equ	0xFEF
 13286                           postinc0	equ	0xFEE
 13287                           fsr0h	equ	0xFEA
 13288                           fsr0l	equ	0xFE9
 13289                           wreg	equ	0xFE8
 13290                           fsr1h	equ	0xFE2
 13291                           fsr1l	equ	0xFE1
 13292                           indf2	equ	0xFDF
 13293                           postinc2	equ	0xFDE
 13294                           postdec2	equ	0xFDD
 13295                           fsr2h	equ	0xFDA
 13296                           fsr2l	equ	0xFD9
 13297                           status	equ	0xFD8
 13298                           
 13299 ;; *************** function i2_I2C_Master_Init *****************
 13300 ;; Defined at:
 13301 ;;		line 14 in file "I2C.c"
 13302 ;; Parameters:    Size  Location     Type
 13303 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 13304 ;; Auto vars:     Size  Location     Type
 13305 ;;		None
 13306 ;; Return value:  Size  Location     Type
 13307 ;;                  1    wreg      void 
 13308 ;; Registers used:
 13309 ;;		wreg, status,2, status,0, cstack
 13310 ;; Tracked objects:
 13311 ;;		On entry : 0/0
 13312 ;;		On exit  : 0/0
 13313 ;;		Unchanged: 0/0
 13314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13315 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13317 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13318 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13319 ;;Total ram usage:        8 bytes
 13320 ;; Hardware stack levels used:    1
 13321 ;; Hardware stack levels required when called:    1
 13322 ;; This function calls:
 13323 ;;		i2___lldiv
 13324 ;; This function is called by:
 13325 ;;		_interruptHandler
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           	psect	text52
 13330  003C88                     __ptext52:
 13331                           	opt stack 0
 13332  003C88                     i2_I2C_Master_Init:
 13333                           	opt stack 24
 13334                           
 13335                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 13336                           
 13337                           ;incstack = 0
 13338  003C88  9AC6               	bcf	4038,5,c	;volatile
 13339                           
 13340                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 13341  003C8A  8694               	bsf	3988,3,c	;volatile
 13342                           
 13343                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 13344  003C8C  8894               	bsf	3988,4,c	;volatile
 13345                           
 13346                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 13347  003C8E  0E80               	movlw	128
 13348  003C90  6EC7               	movwf	4039,c	;volatile
 13349                           
 13350                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 13351  003C92  0E28               	movlw	40
 13352  003C94  6EC6               	movwf	4038,c	;volatile
 13353                           
 13354                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 13355  003C96  0E00               	movlw	0
 13356  003C98  6EC5               	movwf	4037,c	;volatile
 13357                           
 13358                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 13359  003C9A  0E00               	movlw	0
 13360  003C9C  6E01               	movwf	i2___lldiv@dividend,c
 13361  003C9E  0E5A               	movlw	90
 13362  003CA0  6E02               	movwf	i2___lldiv@dividend+1,c
 13363  003CA2  0E62               	movlw	98
 13364  003CA4  6E03               	movwf	i2___lldiv@dividend+2,c
 13365  003CA6  0E02               	movlw	2
 13366  003CA8  6E04               	movwf	i2___lldiv@dividend+3,c
 13367  003CAA  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 13368  003CAE  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 13369  003CB2  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 13370  003CB6  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 13371  003CBA  0E02               	movlw	2
 13372  003CBC                     i2u382_45:
 13373  003CBC  90D8               	bcf	status,0,c
 13374  003CBE  3612               	rlcf	??i2_I2C_Master_Init,f,c
 13375  003CC0  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 13376  003CC2  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 13377  003CC4  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 13378  003CC6  2EE8               	decfsz	wreg,f,c
 13379  003CC8  D7F9               	goto	i2u382_45
 13380  003CCA  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 13381  003CCE  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 13382  003CD2  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 13383  003CD6  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 13384  003CDA  EC2E  F01D         	call	i2___lldiv	;wreg free
 13385  003CDE  0401               	decf	?i2___lldiv,w,c
 13386  003CE0  6EC8               	movwf	4040,c	;volatile
 13387  003CE2  0012               	return		;funcret
 13388  003CE4                     __end_ofi2_I2C_Master_Init:
 13389                           	opt stack 0
 13390                           pclatu	equ	0xFFB
 13391                           pclath	equ	0xFFA
 13392                           tblptru	equ	0xFF8
 13393                           tblptrh	equ	0xFF7
 13394                           tblptrl	equ	0xFF6
 13395                           tablat	equ	0xFF5
 13396                           prodh	equ	0xFF4
 13397                           prodl	equ	0xFF3
 13398                           intcon	equ	0xFF2
 13399                           intcon3	equ	0xFF0
 13400                           indf0	equ	0xFEF
 13401                           postinc0	equ	0xFEE
 13402                           fsr0h	equ	0xFEA
 13403                           fsr0l	equ	0xFE9
 13404                           wreg	equ	0xFE8
 13405                           fsr1h	equ	0xFE2
 13406                           fsr1l	equ	0xFE1
 13407                           indf2	equ	0xFDF
 13408                           postinc2	equ	0xFDE
 13409                           postdec2	equ	0xFDD
 13410                           fsr2h	equ	0xFDA
 13411                           fsr2l	equ	0xFD9
 13412                           status	equ	0xFD8
 13413                           
 13414 ;; *************** function i2___lldiv *****************
 13415 ;; Defined at:
 13416 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;  dividend        4    0[COMRAM] unsigned long 
 13419 ;;  divisor         4    4[COMRAM] unsigned long 
 13420 ;; Auto vars:     Size  Location     Type
 13421 ;;  __lldiv         4    8[COMRAM] unsigned long 
 13422 ;;  __lldiv         1   12[COMRAM] unsigned char 
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  4    0[COMRAM] unsigned long 
 13425 ;; Registers used:
 13426 ;;		wreg, status,2, status,0
 13427 ;; Tracked objects:
 13428 ;;		On entry : 0/0
 13429 ;;		On exit  : 0/0
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13432 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13433 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13435 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13436 ;;Total ram usage:       13 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; This function calls:
 13439 ;;		Nothing
 13440 ;; This function is called by:
 13441 ;;		i2_I2C_Master_Init
 13442 ;; This function uses a non-reentrant model
 13443 ;;
 13444                           
 13445                           	psect	text53
 13446  003A5C                     __ptext53:
 13447                           	opt stack 0
 13448  003A5C                     i2___lldiv:
 13449                           	opt stack 24
 13450                           
 13451                           ;incstack = 0
 13452  003A5C  0E00               	movlw	0
 13453  003A5E  6E09               	movwf	i2___lldiv@quotient,c
 13454  003A60  0E00               	movlw	0
 13455  003A62  6E0A               	movwf	i2___lldiv@quotient+1,c
 13456  003A64  0E00               	movlw	0
 13457  003A66  6E0B               	movwf	i2___lldiv@quotient+2,c
 13458  003A68  0E00               	movlw	0
 13459  003A6A  6E0C               	movwf	i2___lldiv@quotient+3,c
 13460  003A6C  5005               	movf	i2___lldiv@divisor,w,c
 13461  003A6E  1006               	iorwf	i2___lldiv@divisor+1,w,c
 13462  003A70  1007               	iorwf	i2___lldiv@divisor+2,w,c
 13463  003A72  1008               	iorwf	i2___lldiv@divisor+3,w,c
 13464  003A74  B4D8               	btfsc	status,2,c
 13465  003A76  D02A               	goto	i2l1234
 13466  003A78  0E01               	movlw	1
 13467  003A7A  6E0D               	movwf	i2___lldiv@counter,c
 13468  003A7C  D006               	goto	i2l1229
 13469  003A7E  90D8               	bcf	status,0,c
 13470  003A80  3605               	rlcf	i2___lldiv@divisor,f,c
 13471  003A82  3606               	rlcf	i2___lldiv@divisor+1,f,c
 13472  003A84  3607               	rlcf	i2___lldiv@divisor+2,f,c
 13473  003A86  3608               	rlcf	i2___lldiv@divisor+3,f,c
 13474  003A88  2A0D               	incf	i2___lldiv@counter,f,c
 13475  003A8A                     i2l1229:
 13476  003A8A  AE08               	btfss	i2___lldiv@divisor+3,7,c
 13477  003A8C  D7F8               	goto	i2l1230
 13478  003A8E                     i2u320_40:
 13479  003A8E  90D8               	bcf	status,0,c
 13480  003A90  3609               	rlcf	i2___lldiv@quotient,f,c
 13481  003A92  360A               	rlcf	i2___lldiv@quotient+1,f,c
 13482  003A94  360B               	rlcf	i2___lldiv@quotient+2,f,c
 13483  003A96  360C               	rlcf	i2___lldiv@quotient+3,f,c
 13484  003A98  5005               	movf	i2___lldiv@divisor,w,c
 13485  003A9A  5C01               	subwf	i2___lldiv@dividend,w,c
 13486  003A9C  5006               	movf	i2___lldiv@divisor+1,w,c
 13487  003A9E  5802               	subwfb	i2___lldiv@dividend+1,w,c
 13488  003AA0  5007               	movf	i2___lldiv@divisor+2,w,c
 13489  003AA2  5803               	subwfb	i2___lldiv@dividend+2,w,c
 13490  003AA4  5008               	movf	i2___lldiv@divisor+3,w,c
 13491  003AA6  5804               	subwfb	i2___lldiv@dividend+3,w,c
 13492  003AA8  A0D8               	btfss	status,0,c
 13493  003AAA  D009               	goto	i2l1233
 13494  003AAC  5005               	movf	i2___lldiv@divisor,w,c
 13495  003AAE  5E01               	subwf	i2___lldiv@dividend,f,c
 13496  003AB0  5006               	movf	i2___lldiv@divisor+1,w,c
 13497  003AB2  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 13498  003AB4  5007               	movf	i2___lldiv@divisor+2,w,c
 13499  003AB6  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 13500  003AB8  5008               	movf	i2___lldiv@divisor+3,w,c
 13501  003ABA  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 13502  003ABC  8009               	bsf	i2___lldiv@quotient,0,c
 13503  003ABE                     i2l1233:
 13504  003ABE  90D8               	bcf	status,0,c
 13505  003AC0  3208               	rrcf	i2___lldiv@divisor+3,f,c
 13506  003AC2  3207               	rrcf	i2___lldiv@divisor+2,f,c
 13507  003AC4  3206               	rrcf	i2___lldiv@divisor+1,f,c
 13508  003AC6  3205               	rrcf	i2___lldiv@divisor,f,c
 13509  003AC8  2E0D               	decfsz	i2___lldiv@counter,f,c
 13510  003ACA  D7E1               	goto	i2u320_40
 13511  003ACC                     i2l1234:
 13512  003ACC  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 13513  003AD0  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 13514  003AD4  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 13515  003AD8  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 13516  003ADC  0012               	return		;funcret
 13517  003ADE                     __end_ofi2___lldiv:
 13518                           	opt stack 0
 13519                           pclatu	equ	0xFFB
 13520                           pclath	equ	0xFFA
 13521                           tblptru	equ	0xFF8
 13522                           tblptrh	equ	0xFF7
 13523                           tblptrl	equ	0xFF6
 13524                           tablat	equ	0xFF5
 13525                           prodh	equ	0xFF4
 13526                           prodl	equ	0xFF3
 13527                           intcon	equ	0xFF2
 13528                           intcon3	equ	0xFF0
 13529                           indf0	equ	0xFEF
 13530                           postinc0	equ	0xFEE
 13531                           fsr0h	equ	0xFEA
 13532                           fsr0l	equ	0xFE9
 13533                           wreg	equ	0xFE8
 13534                           fsr1h	equ	0xFE2
 13535                           fsr1l	equ	0xFE1
 13536                           indf2	equ	0xFDF
 13537                           postinc2	equ	0xFDE
 13538                           postdec2	equ	0xFDD
 13539                           fsr2h	equ	0xFDA
 13540                           fsr2l	equ	0xFD9
 13541                           status	equ	0xFD8
 13542                           
 13543 ;; *************** function _strncmp *****************
 13544 ;; Defined at:
 13545 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 13546 ;; Parameters:    Size  Location     Type
 13547 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 13548 ;;		 -> current_set(5), 
 13549 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 13550 ;;		 -> strs(100), 
 13551 ;;  len             2   10[COMRAM] unsigned int 
 13552 ;; Auto vars:     Size  Location     Type
 13553 ;;		None
 13554 ;; Return value:  Size  Location     Type
 13555 ;;                  2    6[COMRAM] int 
 13556 ;; Registers used:
 13557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13558 ;; Tracked objects:
 13559 ;;		On entry : 0/0
 13560 ;;		On exit  : 0/0
 13561 ;;		Unchanged: 0/0
 13562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13563 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13565 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13566 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13567 ;;Total ram usage:        9 bytes
 13568 ;; Hardware stack levels used:    1
 13569 ;; This function calls:
 13570 ;;		Nothing
 13571 ;; This function is called by:
 13572 ;;		_interruptHandler
 13573 ;; This function uses a non-reentrant model
 13574 ;;
 13575                           
 13576                           	psect	text54
 13577  0038CE                     __ptext54:
 13578                           	opt stack 0
 13579  0038CE                     _strncmp:
 13580                           	opt stack 25
 13581                           
 13582                           ;incstack = 0
 13583  0038CE  D035               	goto	i2l1449
 13584  0038D0                     i2l4588:
 13585  0038D0  C007  FFD9         	movff	strncmp@s1,fsr2l
 13586  0038D4  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 13587  0038D8  50DF               	movf	indf2,w,c
 13588  0038DA  B4D8               	btfsc	status,2,c
 13589  0038DC  D010               	goto	i2u349_40
 13590  0038DE  C007  FFD9         	movff	strncmp@s1,fsr2l
 13591  0038E2  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 13592  0038E6  50DF               	movf	indf2,w,c
 13593  0038E8  6E0D               	movwf	??_strncmp& (0+255),c
 13594  0038EA  C009  FFF6         	movff	strncmp@s2,tblptrl
 13595  0038EE  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 13596  0038F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13597  0038F2  6AF8               	clrf	tblptru,c
 13598  0038F4                     	endif
 13599  0038F4                     	if	0	;tblptru may be non-zero
 13600  0038F4                     	endif
 13601  0038F4  0008               	tblrd		*
 13602  0038F6  50F5               	movf	tablat,w,c
 13603  0038F8  180D               	xorwf	??_strncmp,w,c
 13604  0038FA  B4D8               	btfsc	status,2,c
 13605  0038FC  D01A               	goto	i2l1451
 13606  0038FE                     i2u349_40:
 13607  0038FE  C009  FFF6         	movff	strncmp@s2,tblptrl
 13608  003902  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 13609  003906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13610  003906  6AF8               	clrf	tblptru,c
 13611  003908                     	endif
 13612  003908                     	if	0	;tblptru may be non-zero
 13613  003908                     	endif
 13614  003908  0008               	tblrd		*
 13615  00390A  50F5               	movf	tablat,w,c
 13616  00390C  6E0D               	movwf	??_strncmp& (0+255),c
 13617  00390E  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 13618  003910  1E0D               	comf	??_strncmp,f,c
 13619  003912  1E0E               	comf	??_strncmp+1,f,c
 13620  003914  4A0D               	infsnz	??_strncmp,f,c
 13621  003916  2A0E               	incf	??_strncmp+1,f,c
 13622  003918  C007  FFD9         	movff	strncmp@s1,fsr2l
 13623  00391C  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 13624  003920  50DF               	movf	indf2,w,c
 13625  003922  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 13626  003924  500F               	movf	??_strncmp+2,w,c
 13627  003926  240D               	addwf	??_strncmp,w,c
 13628  003928  6E07               	movwf	?_strncmp,c
 13629  00392A  0E00               	movlw	0
 13630  00392C  200E               	addwfc	??_strncmp+1,w,c
 13631  00392E  6E08               	movwf	?_strncmp+1,c
 13632  003930  0012               	return	
 13633  003932                     i2l1451:
 13634  003932  4A07               	infsnz	strncmp@s1,f,c
 13635  003934  2A08               	incf	strncmp@s1+1,f,c
 13636  003936  4A09               	infsnz	strncmp@s2,f,c
 13637  003938  2A0A               	incf	strncmp@s2+1,f,c
 13638  00393A                     i2l1449:
 13639  00393A  060B               	decf	strncmp@len,f,c
 13640  00393C  A0D8               	btfss	status,0,c
 13641  00393E  060C               	decf	strncmp@len+1,f,c
 13642  003940  280B               	incf	strncmp@len,w,c
 13643  003942  E1C6               	bnz	i2l4588
 13644  003944  280C               	incf	strncmp@len+1,w,c
 13645  003946  A4D8               	btfss	status,2,c
 13646  003948  D7C3               	goto	i2l1450
 13647  00394A  0E00               	movlw	0
 13648  00394C  6E08               	movwf	?_strncmp+1,c
 13649  00394E  0E00               	movlw	0
 13650  003950  6E07               	movwf	?_strncmp,c
 13651  003952  0012               	return	
 13652  003954                     __end_of_strncmp:
 13653                           	opt stack 0
 13654                           pclatu	equ	0xFFB
 13655                           pclath	equ	0xFFA
 13656                           tblptru	equ	0xFF8
 13657                           tblptrh	equ	0xFF7
 13658                           tblptrl	equ	0xFF6
 13659                           tablat	equ	0xFF5
 13660                           prodh	equ	0xFF4
 13661                           prodl	equ	0xFF3
 13662                           intcon	equ	0xFF2
 13663                           intcon3	equ	0xFF0
 13664                           indf0	equ	0xFEF
 13665                           postinc0	equ	0xFEE
 13666                           fsr0h	equ	0xFEA
 13667                           fsr0l	equ	0xFE9
 13668                           wreg	equ	0xFE8
 13669                           fsr1h	equ	0xFE2
 13670                           fsr1l	equ	0xFE1
 13671                           indf2	equ	0xFDF
 13672                           postinc2	equ	0xFDE
 13673                           postdec2	equ	0xFDD
 13674                           fsr2h	equ	0xFDA
 13675                           fsr2l	equ	0xFD9
 13676                           status	equ	0xFD8
 13677                           
 13678 ;; *************** function _strcpy *****************
 13679 ;; Defined at:
 13680 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 13681 ;; Parameters:    Size  Location     Type
 13682 ;;  to              2    6[COMRAM] PTR unsigned char 
 13683 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 13684 ;;  from            2    8[COMRAM] PTR const unsigned char 
 13685 ;;		 -> STR_71(1), STR_69(1), STR_66(1), STR_63(2), 
 13686 ;;		 -> STR_62(2), STR_61(2), STR_60(2), current_set(5), 
 13687 ;; Auto vars:     Size  Location     Type
 13688 ;;  cp              2   10[COMRAM] PTR unsigned char 
 13689 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 13690 ;; Return value:  Size  Location     Type
 13691 ;;                  2    6[COMRAM] PTR unsigned char 
 13692 ;; Registers used:
 13693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13694 ;; Tracked objects:
 13695 ;;		On entry : 0/0
 13696 ;;		On exit  : 0/0
 13697 ;;		Unchanged: 0/0
 13698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13699 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13700 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13702 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13703 ;;Total ram usage:        6 bytes
 13704 ;; Hardware stack levels used:    1
 13705 ;; This function calls:
 13706 ;;		Nothing
 13707 ;; This function is called by:
 13708 ;;		_interruptHandler
 13709 ;; This function uses a non-reentrant model
 13710 ;;
 13711                           
 13712                           	psect	text55
 13713  003FF2                     __ptext55:
 13714                           	opt stack 0
 13715  003FF2                     _strcpy:
 13716                           	opt stack 25
 13717                           
 13718                           ;incstack = 0
 13719  003FF2  C007  F00B         	movff	strcpy@to,strcpy@cp
 13720  003FF6  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 13721  003FFA  D004               	goto	i2l1443
 13722  003FFC  4A0B               	infsnz	strcpy@cp,f,c
 13723  003FFE  2A0C               	incf	strcpy@cp+1,f,c
 13724  004000  4A09               	infsnz	strcpy@from,f,c
 13725  004002  2A0A               	incf	strcpy@from+1,f,c
 13726  004004                     i2l1443:
 13727  004004  C009  FFF6         	movff	strcpy@from,tblptrl
 13728  004008  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 13729  00400C  0E00               	movlw	low (__mediumconst shr (0+16))
 13730  00400E  6EF8               	movwf	tblptru,c
 13731  004010  C00B  FFD9         	movff	strcpy@cp,fsr2l
 13732  004014  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 13733  004018  0E0F               	movlw	(high __ramtop+-1)
 13734  00401A  64F7               	cpfsgt	tblptrh,c
 13735  00401C  D003               	bra	i2u344_47
 13736  00401E  0008               	tblrd		*
 13737  004020  50F5               	movf	tablat,w,c
 13738  004022  D005               	bra	i2u344_40
 13739  004024                     i2u344_47:
 13740  004024  CFF6 FFE9          	movff	tblptrl,fsr0l
 13741  004028  CFF7 FFEA          	movff	tblptrh,fsr0h
 13742  00402C  50EF               	movf	indf0,w,c
 13743  00402E                     i2u344_40:
 13744  00402E  6EDF               	movwf	indf2,c
 13745  004030  50DF               	movf	indf2,w,c
 13746  004032  B4D8               	btfsc	status,2,c
 13747  004034  0012               	return	
 13748  004036  D7E2               	goto	i2l1444
 13749  004038                     __end_of_strcpy:
 13750                           	opt stack 0
 13751                           pclatu	equ	0xFFB
 13752                           pclath	equ	0xFFA
 13753                           tblptru	equ	0xFF8
 13754                           tblptrh	equ	0xFF7
 13755                           tblptrl	equ	0xFF6
 13756                           tablat	equ	0xFF5
 13757                           prodh	equ	0xFF4
 13758                           prodl	equ	0xFF3
 13759                           intcon	equ	0xFF2
 13760                           intcon3	equ	0xFF0
 13761                           indf0	equ	0xFEF
 13762                           postinc0	equ	0xFEE
 13763                           fsr0h	equ	0xFEA
 13764                           fsr0l	equ	0xFE9
 13765                           wreg	equ	0xFE8
 13766                           fsr1h	equ	0xFE2
 13767                           fsr1l	equ	0xFE1
 13768                           indf2	equ	0xFDF
 13769                           postinc2	equ	0xFDE
 13770                           postdec2	equ	0xFDD
 13771                           fsr2h	equ	0xFDA
 13772                           fsr2l	equ	0xFD9
 13773                           status	equ	0xFD8
 13774                           
 13775 ;; *************** function _strcat *****************
 13776 ;; Defined at:
 13777 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 13778 ;; Parameters:    Size  Location     Type
 13779 ;;  to              2    0[COMRAM] PTR unsigned char 
 13780 ;;		 -> current_set(5), 
 13781 ;;  from            2    2[COMRAM] PTR const unsigned char 
 13782 ;;		 -> temp_set(5), 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  cp              2    4[COMRAM] PTR unsigned char 
 13785 ;;		 -> current_set(5), 
 13786 ;; Return value:  Size  Location     Type
 13787 ;;                  2    0[COMRAM] PTR unsigned char 
 13788 ;; Registers used:
 13789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13790 ;; Tracked objects:
 13791 ;;		On entry : 0/0
 13792 ;;		On exit  : 0/0
 13793 ;;		Unchanged: 0/0
 13794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13795 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13796 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13798 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13799 ;;Total ram usage:        6 bytes
 13800 ;; Hardware stack levels used:    1
 13801 ;; This function calls:
 13802 ;;		Nothing
 13803 ;; This function is called by:
 13804 ;;		_interruptHandler
 13805 ;; This function uses a non-reentrant model
 13806 ;;
 13807                           
 13808                           	psect	text56
 13809  004146                     __ptext56:
 13810                           	opt stack 0
 13811  004146                     _strcat:
 13812                           	opt stack 25
 13813                           
 13814                           ;incstack = 0
 13815  004146  C001  F005         	movff	strcat@to,strcat@cp
 13816  00414A  C002  F006         	movff	strcat@to+1,strcat@cp+1
 13817  00414E  D002               	goto	i2l1426
 13818  004150  4A05               	infsnz	strcat@cp,f,c
 13819  004152  2A06               	incf	strcat@cp+1,f,c
 13820  004154                     i2l1426:
 13821  004154  C005  FFD9         	movff	strcat@cp,fsr2l
 13822  004158  C006  FFDA         	movff	strcat@cp+1,fsr2h
 13823  00415C  50DF               	movf	indf2,w,c
 13824  00415E  B4D8               	btfsc	status,2,c
 13825  004160  D005               	goto	i2l1429
 13826  004162  D7F6               	goto	i2l1427
 13827  004164  4A05               	infsnz	strcat@cp,f,c
 13828  004166  2A06               	incf	strcat@cp+1,f,c
 13829  004168  4A03               	infsnz	strcat@from,f,c
 13830  00416A  2A04               	incf	strcat@from+1,f,c
 13831  00416C                     i2l1429:
 13832  00416C  C003  FFD9         	movff	strcat@from,fsr2l
 13833  004170  C004  FFDA         	movff	strcat@from+1,fsr2h
 13834  004174  C005  FFE1         	movff	strcat@cp,fsr1l
 13835  004178  C006  FFE2         	movff	strcat@cp+1,fsr1h
 13836  00417C  CFDF FFE7          	movff	indf2,indf1
 13837  004180  50E7               	movf	indf1,w,c
 13838  004182  B4D8               	btfsc	status,2,c
 13839  004184  0012               	return	
 13840  004186  D7EE               	goto	i2l1430
 13841  004188                     __end_of_strcat:
 13842                           	opt stack 0
 13843                           pclatu	equ	0xFFB
 13844                           pclath	equ	0xFFA
 13845                           tblptru	equ	0xFF8
 13846                           tblptrh	equ	0xFF7
 13847                           tblptrl	equ	0xFF6
 13848                           tablat	equ	0xFF5
 13849                           prodh	equ	0xFF4
 13850                           prodl	equ	0xFF3
 13851                           intcon	equ	0xFF2
 13852                           intcon3	equ	0xFF0
 13853                           indf0	equ	0xFEF
 13854                           postinc0	equ	0xFEE
 13855                           fsr0h	equ	0xFEA
 13856                           fsr0l	equ	0xFE9
 13857                           wreg	equ	0xFE8
 13858                           indf1	equ	0xFE7
 13859                           fsr1h	equ	0xFE2
 13860                           fsr1l	equ	0xFE1
 13861                           indf2	equ	0xFDF
 13862                           postinc2	equ	0xFDE
 13863                           postdec2	equ	0xFDD
 13864                           fsr2h	equ	0xFDA
 13865                           fsr2l	equ	0xFD9
 13866                           status	equ	0xFD8
 13867                           
 13868 ;; *************** function _is_valid *****************
 13869 ;; Defined at:
 13870 ;;		line 12 in file "keypad.c"
 13871 ;; Parameters:    Size  Location     Type
 13872 ;;		None
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;		None
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  2  157[None  ] int 
 13877 ;; Registers used:
 13878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13879 ;; Tracked objects:
 13880 ;;		On entry : 0/0
 13881 ;;		On exit  : 0/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13888 ;;Total ram usage:        2 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; Hardware stack levels required when called:    1
 13891 ;; This function calls:
 13892 ;;		_strcmp
 13893 ;;		i2___wmul
 13894 ;; This function is called by:
 13895 ;;		_interruptHandler
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           	psect	text57
 13900  000E76                     __ptext57:
 13901                           	opt stack 0
 13902  000E76                     _is_valid:
 13903                           	opt stack 24
 13904                           
 13905                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 13906                           
 13907                           ;incstack = 0
 13908  000E76  0E78               	movlw	low _current_set2
 13909  000E78  6E01               	movwf	strcmp@s1,c
 13910  000E7A  0E00               	movlw	high _current_set2
 13911  000E7C  6E02               	movwf	strcmp@s1+1,c
 13912  000E7E  0EFC               	movlw	low STR_60
 13913  000E80  6E03               	movwf	strcmp@s2,c
 13914  000E82  0EFF               	movlw	high STR_60
 13915  000E84  6E04               	movwf	strcmp@s2+1,c
 13916  000E86  ECB1  F01F         	call	_strcmp	;wreg free
 13917  000E8A  5001               	movf	?_strcmp,w,c
 13918  000E8C  1002               	iorwf	?_strcmp+1,w,c
 13919  000E8E  A4D8               	btfss	status,2,c
 13920  000E90  D023               	goto	i2l690
 13921                           
 13922                           ;keypad.c: 17: B=1*number;
 13923  000E92  C07D  F065         	movff	_number,_B
 13924  000E96  C07E  F066         	movff	_number+1,_B+1
 13925                           
 13926                           ;keypad.c: 18: total_number = 1*number;
 13927  000E9A  C07D  F069         	movff	_number,_total_number
 13928  000E9E  C07E  F06A         	movff	_number+1,_total_number+1
 13929                           
 13930                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 13931  000EA2  90D8               	bcf	status,0,c
 13932  000EA4  346D               	rlcf	_counter_step,w,c
 13933  000EA6  6ED9               	movwf	fsr2l,c
 13934  000EA8  346E               	rlcf	_counter_step+1,w,c
 13935  000EAA  6EDA               	movwf	fsr2h,c
 13936  000EAC  0E42               	movlw	low _compartment_number
 13937  000EAE  26D9               	addwf	fsr2l,f,c
 13938  000EB0  0E00               	movlw	high _compartment_number
 13939  000EB2  22DA               	addwfc	fsr2h,f,c
 13940  000EB4  CFDE F007          	movff	postinc2,??_is_valid
 13941  000EB8  CFDD F008          	movff	postdec2,??_is_valid+1
 13942  000EBC  90D8               	bcf	status,0,c
 13943  000EBE  3607               	rlcf	??_is_valid,f,c
 13944  000EC0  3608               	rlcf	??_is_valid+1,f,c
 13945  000EC2  0E30               	movlw	low _B_array
 13946  000EC4  2407               	addwf	??_is_valid,w,c
 13947  000EC6  6ED9               	movwf	fsr2l,c
 13948  000EC8  0E01               	movlw	high _B_array
 13949  000ECA  2008               	addwfc	??_is_valid+1,w,c
 13950  000ECC  6EDA               	movwf	fsr2h,c
 13951  000ECE  C065  FFDE         	movff	_B,postinc2
 13952  000ED2  C066  FFDD         	movff	_B+1,postdec2
 13953                           
 13954                           ;keypad.c: 22: }
 13955  000ED6  0012               	return	
 13956  000ED8                     i2l690:
 13957                           
 13958                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 13959  000ED8  0E78               	movlw	low _current_set2
 13960  000EDA  6E01               	movwf	strcmp@s1,c
 13961  000EDC  0E00               	movlw	high _current_set2
 13962  000EDE  6E02               	movwf	strcmp@s1+1,c
 13963  000EE0  0ED5               	movlw	low (STR_82+2)
 13964  000EE2  6E03               	movwf	strcmp@s2,c
 13965  000EE4  0EFF               	movlw	high (STR_82+2)
 13966  000EE6  6E04               	movwf	strcmp@s2+1,c
 13967  000EE8  ECB1  F01F         	call	_strcmp	;wreg free
 13968  000EEC  5001               	movf	?_strcmp,w,c
 13969  000EEE  1002               	iorwf	?_strcmp+1,w,c
 13970  000EF0  A4D8               	btfss	status,2,c
 13971  000EF2  D023               	goto	i2l692
 13972                           
 13973                           ;keypad.c: 25: N=1*number;
 13974  000EF4  C07D  F063         	movff	_number,_N
 13975  000EF8  C07E  F064         	movff	_number+1,_N+1
 13976                           
 13977                           ;keypad.c: 26: total_number = 1*number;
 13978  000EFC  C07D  F069         	movff	_number,_total_number
 13979  000F00  C07E  F06A         	movff	_number+1,_total_number+1
 13980                           
 13981                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 13982  000F04  90D8               	bcf	status,0,c
 13983  000F06  346D               	rlcf	_counter_step,w,c
 13984  000F08  6ED9               	movwf	fsr2l,c
 13985  000F0A  346E               	rlcf	_counter_step+1,w,c
 13986  000F0C  6EDA               	movwf	fsr2h,c
 13987  000F0E  0E42               	movlw	low _compartment_number
 13988  000F10  26D9               	addwf	fsr2l,f,c
 13989  000F12  0E00               	movlw	high _compartment_number
 13990  000F14  22DA               	addwfc	fsr2h,f,c
 13991  000F16  CFDE F007          	movff	postinc2,??_is_valid
 13992  000F1A  CFDD F008          	movff	postdec2,??_is_valid+1
 13993  000F1E  90D8               	bcf	status,0,c
 13994  000F20  3607               	rlcf	??_is_valid,f,c
 13995  000F22  3608               	rlcf	??_is_valid+1,f,c
 13996  000F24  0E10               	movlw	low _N_array
 13997  000F26  2407               	addwf	??_is_valid,w,c
 13998  000F28  6ED9               	movwf	fsr2l,c
 13999  000F2A  0E01               	movlw	high _N_array
 14000  000F2C  2008               	addwfc	??_is_valid+1,w,c
 14001  000F2E  6EDA               	movwf	fsr2h,c
 14002  000F30  C063  FFDE         	movff	_N,postinc2
 14003  000F34  C064  FFDD         	movff	_N+1,postdec2
 14004                           
 14005                           ;keypad.c: 28: }
 14006  000F38  0012               	return	
 14007  000F3A                     i2l692:
 14008                           
 14009                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 14010  000F3A  0E78               	movlw	low _current_set2
 14011  000F3C  6E01               	movwf	strcmp@s1,c
 14012  000F3E  0E00               	movlw	high _current_set2
 14013  000F40  6E02               	movwf	strcmp@s1+1,c
 14014  000F42  0ED9               	movlw	low (STR_83+2)
 14015  000F44  6E03               	movwf	strcmp@s2,c
 14016  000F46  0EFF               	movlw	high (STR_83+2)
 14017  000F48  6E04               	movwf	strcmp@s2+1,c
 14018  000F4A  ECB1  F01F         	call	_strcmp	;wreg free
 14019  000F4E  5001               	movf	?_strcmp,w,c
 14020  000F50  1002               	iorwf	?_strcmp+1,w,c
 14021  000F52  A4D8               	btfss	status,2,c
 14022  000F54  D023               	goto	i2l694
 14023                           
 14024                           ;keypad.c: 30: S=1*number;
 14025  000F56  C07D  F061         	movff	_number,_S
 14026  000F5A  C07E  F062         	movff	_number+1,_S+1
 14027                           
 14028                           ;keypad.c: 31: total_number = 1*number;
 14029  000F5E  C07D  F069         	movff	_number,_total_number
 14030  000F62  C07E  F06A         	movff	_number+1,_total_number+1
 14031                           
 14032                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 14033  000F66  90D8               	bcf	status,0,c
 14034  000F68  346D               	rlcf	_counter_step,w,c
 14035  000F6A  6ED9               	movwf	fsr2l,c
 14036  000F6C  346E               	rlcf	_counter_step+1,w,c
 14037  000F6E  6EDA               	movwf	fsr2h,c
 14038  000F70  0E42               	movlw	low _compartment_number
 14039  000F72  26D9               	addwf	fsr2l,f,c
 14040  000F74  0E00               	movlw	high _compartment_number
 14041  000F76  22DA               	addwfc	fsr2h,f,c
 14042  000F78  CFDE F007          	movff	postinc2,??_is_valid
 14043  000F7C  CFDD F008          	movff	postdec2,??_is_valid+1
 14044  000F80  90D8               	bcf	status,0,c
 14045  000F82  3607               	rlcf	??_is_valid,f,c
 14046  000F84  3608               	rlcf	??_is_valid+1,f,c
 14047  000F86  0E20               	movlw	low _S_array
 14048  000F88  2407               	addwf	??_is_valid,w,c
 14049  000F8A  6ED9               	movwf	fsr2l,c
 14050  000F8C  0E01               	movlw	high _S_array
 14051  000F8E  2008               	addwfc	??_is_valid+1,w,c
 14052  000F90  6EDA               	movwf	fsr2h,c
 14053  000F92  C061  FFDE         	movff	_S,postinc2
 14054  000F96  C062  FFDD         	movff	_S+1,postdec2
 14055                           
 14056                           ;keypad.c: 33: }
 14057  000F9A  0012               	return	
 14058  000F9C                     i2l694:
 14059                           
 14060                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 14061  000F9C  0E78               	movlw	low _current_set2
 14062  000F9E  6E01               	movwf	strcmp@s1,c
 14063  000FA0  0E00               	movlw	high _current_set2
 14064  000FA2  6E02               	movwf	strcmp@s1+1,c
 14065  000FA4  0EDD               	movlw	low (STR_84+2)
 14066  000FA6  6E03               	movwf	strcmp@s2,c
 14067  000FA8  0EFF               	movlw	high (STR_84+2)
 14068  000FAA  6E04               	movwf	strcmp@s2+1,c
 14069  000FAC  ECB1  F01F         	call	_strcmp	;wreg free
 14070  000FB0  5001               	movf	?_strcmp,w,c
 14071  000FB2  1002               	iorwf	?_strcmp+1,w,c
 14072  000FB4  A4D8               	btfss	status,2,c
 14073  000FB6  D023               	goto	i2l696
 14074                           
 14075                           ;keypad.c: 35: W=1*number;
 14076  000FB8  C07D  F05F         	movff	_number,_W
 14077  000FBC  C07E  F060         	movff	_number+1,_W+1
 14078                           
 14079                           ;keypad.c: 36: total_number = 1*number;
 14080  000FC0  C07D  F069         	movff	_number,_total_number
 14081  000FC4  C07E  F06A         	movff	_number+1,_total_number+1
 14082                           
 14083                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 14084  000FC8  90D8               	bcf	status,0,c
 14085  000FCA  346D               	rlcf	_counter_step,w,c
 14086  000FCC  6ED9               	movwf	fsr2l,c
 14087  000FCE  346E               	rlcf	_counter_step+1,w,c
 14088  000FD0  6EDA               	movwf	fsr2h,c
 14089  000FD2  0E42               	movlw	low _compartment_number
 14090  000FD4  26D9               	addwf	fsr2l,f,c
 14091  000FD6  0E00               	movlw	high _compartment_number
 14092  000FD8  22DA               	addwfc	fsr2h,f,c
 14093  000FDA  CFDE F007          	movff	postinc2,??_is_valid
 14094  000FDE  CFDD F008          	movff	postdec2,??_is_valid+1
 14095  000FE2  90D8               	bcf	status,0,c
 14096  000FE4  3607               	rlcf	??_is_valid,f,c
 14097  000FE6  3608               	rlcf	??_is_valid+1,f,c
 14098  000FE8  0E00               	movlw	low _W_array
 14099  000FEA  2407               	addwf	??_is_valid,w,c
 14100  000FEC  6ED9               	movwf	fsr2l,c
 14101  000FEE  0E01               	movlw	high _W_array
 14102  000FF0  2008               	addwfc	??_is_valid+1,w,c
 14103  000FF2  6EDA               	movwf	fsr2h,c
 14104  000FF4  C05F  FFDE         	movff	_W,postinc2
 14105  000FF8  C060  FFDD         	movff	_W+1,postdec2
 14106                           
 14107                           ;keypad.c: 38: }
 14108  000FFC  0012               	return	
 14109  000FFE                     i2l696:
 14110                           
 14111                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 14112  000FFE  0E78               	movlw	low _current_set2
 14113  001000  6E01               	movwf	strcmp@s1,c
 14114  001002  0E00               	movlw	high _current_set2
 14115  001004  6E02               	movwf	strcmp@s1+1,c
 14116  001006  0ED4               	movlw	low (STR_82+1)
 14117  001008  6E03               	movwf	strcmp@s2,c
 14118  00100A  0EFF               	movlw	high (STR_82+1)
 14119  00100C  6E04               	movwf	strcmp@s2+1,c
 14120  00100E  ECB1  F01F         	call	_strcmp	;wreg free
 14121  001012  5001               	movf	?_strcmp,w,c
 14122  001014  1002               	iorwf	?_strcmp+1,w,c
 14123  001016  A4D8               	btfss	status,2,c
 14124  001018  D042               	goto	i2l698
 14125                           
 14126                           ;keypad.c: 40: B = 1*number;
 14127  00101A  C07D  F065         	movff	_number,_B
 14128  00101E  C07E  F066         	movff	_number+1,_B+1
 14129                           
 14130                           ;keypad.c: 42: N = 1*number;
 14131  001022  C07D  F063         	movff	_number,_N
 14132  001026  C07E  F064         	movff	_number+1,_N+1
 14133                           
 14134                           ;keypad.c: 43: total_number = 2*number;
 14135  00102A  90D8               	bcf	status,0,c
 14136  00102C  347D               	rlcf	_number,w,c
 14137  00102E  6E69               	movwf	_total_number,c
 14138  001030  347E               	rlcf	_number+1,w,c
 14139  001032  6E6A               	movwf	_total_number+1,c
 14140                           
 14141                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 14142  001034  90D8               	bcf	status,0,c
 14143  001036  346D               	rlcf	_counter_step,w,c
 14144  001038  6ED9               	movwf	fsr2l,c
 14145  00103A  346E               	rlcf	_counter_step+1,w,c
 14146  00103C  6EDA               	movwf	fsr2h,c
 14147  00103E  0E42               	movlw	low _compartment_number
 14148  001040  26D9               	addwf	fsr2l,f,c
 14149  001042  0E00               	movlw	high _compartment_number
 14150  001044  22DA               	addwfc	fsr2h,f,c
 14151  001046  CFDE F007          	movff	postinc2,??_is_valid
 14152  00104A  CFDD F008          	movff	postdec2,??_is_valid+1
 14153  00104E  90D8               	bcf	status,0,c
 14154  001050  3607               	rlcf	??_is_valid,f,c
 14155  001052  3608               	rlcf	??_is_valid+1,f,c
 14156  001054  0E30               	movlw	low _B_array
 14157  001056  2407               	addwf	??_is_valid,w,c
 14158  001058  6ED9               	movwf	fsr2l,c
 14159  00105A  0E01               	movlw	high _B_array
 14160  00105C  2008               	addwfc	??_is_valid+1,w,c
 14161  00105E  6EDA               	movwf	fsr2h,c
 14162  001060  C065  FFDE         	movff	_B,postinc2
 14163  001064  C066  FFDD         	movff	_B+1,postdec2
 14164                           
 14165                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 14166  001068  90D8               	bcf	status,0,c
 14167  00106A  346D               	rlcf	_counter_step,w,c
 14168  00106C  6ED9               	movwf	fsr2l,c
 14169  00106E  346E               	rlcf	_counter_step+1,w,c
 14170  001070  6EDA               	movwf	fsr2h,c
 14171  001072  0E42               	movlw	low _compartment_number
 14172  001074  26D9               	addwf	fsr2l,f,c
 14173  001076  0E00               	movlw	high _compartment_number
 14174  001078  22DA               	addwfc	fsr2h,f,c
 14175  00107A  CFDE F007          	movff	postinc2,??_is_valid
 14176  00107E  CFDD F008          	movff	postdec2,??_is_valid+1
 14177  001082  90D8               	bcf	status,0,c
 14178  001084  3607               	rlcf	??_is_valid,f,c
 14179  001086  3608               	rlcf	??_is_valid+1,f,c
 14180  001088  0E10               	movlw	low _N_array
 14181  00108A  2407               	addwf	??_is_valid,w,c
 14182  00108C  6ED9               	movwf	fsr2l,c
 14183  00108E  0E01               	movlw	high _N_array
 14184  001090  2008               	addwfc	??_is_valid+1,w,c
 14185  001092  6EDA               	movwf	fsr2h,c
 14186  001094  C063  FFDE         	movff	_N,postinc2
 14187  001098  C064  FFDD         	movff	_N+1,postdec2
 14188                           
 14189                           ;keypad.c: 47: }
 14190  00109C  0012               	return	
 14191  00109E                     i2l698:
 14192                           
 14193                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 14194  00109E  0E78               	movlw	low _current_set2
 14195  0010A0  6E01               	movwf	strcmp@s1,c
 14196  0010A2  0E00               	movlw	high _current_set2
 14197  0010A4  6E02               	movwf	strcmp@s1+1,c
 14198  0010A6  0ED8               	movlw	low (STR_83+1)
 14199  0010A8  6E03               	movwf	strcmp@s2,c
 14200  0010AA  0EFF               	movlw	high (STR_83+1)
 14201  0010AC  6E04               	movwf	strcmp@s2+1,c
 14202  0010AE  ECB1  F01F         	call	_strcmp	;wreg free
 14203  0010B2  5001               	movf	?_strcmp,w,c
 14204  0010B4  1002               	iorwf	?_strcmp+1,w,c
 14205  0010B6  A4D8               	btfss	status,2,c
 14206  0010B8  D042               	goto	i2l700
 14207                           
 14208                           ;keypad.c: 49: B = 1*number;
 14209  0010BA  C07D  F065         	movff	_number,_B
 14210  0010BE  C07E  F066         	movff	_number+1,_B+1
 14211                           
 14212                           ;keypad.c: 51: S = 1*number;
 14213  0010C2  C07D  F061         	movff	_number,_S
 14214  0010C6  C07E  F062         	movff	_number+1,_S+1
 14215                           
 14216                           ;keypad.c: 52: total_number = 2*number;
 14217  0010CA  90D8               	bcf	status,0,c
 14218  0010CC  347D               	rlcf	_number,w,c
 14219  0010CE  6E69               	movwf	_total_number,c
 14220  0010D0  347E               	rlcf	_number+1,w,c
 14221  0010D2  6E6A               	movwf	_total_number+1,c
 14222                           
 14223                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 14224  0010D4  90D8               	bcf	status,0,c
 14225  0010D6  346D               	rlcf	_counter_step,w,c
 14226  0010D8  6ED9               	movwf	fsr2l,c
 14227  0010DA  346E               	rlcf	_counter_step+1,w,c
 14228  0010DC  6EDA               	movwf	fsr2h,c
 14229  0010DE  0E42               	movlw	low _compartment_number
 14230  0010E0  26D9               	addwf	fsr2l,f,c
 14231  0010E2  0E00               	movlw	high _compartment_number
 14232  0010E4  22DA               	addwfc	fsr2h,f,c
 14233  0010E6  CFDE F007          	movff	postinc2,??_is_valid
 14234  0010EA  CFDD F008          	movff	postdec2,??_is_valid+1
 14235  0010EE  90D8               	bcf	status,0,c
 14236  0010F0  3607               	rlcf	??_is_valid,f,c
 14237  0010F2  3608               	rlcf	??_is_valid+1,f,c
 14238  0010F4  0E30               	movlw	low _B_array
 14239  0010F6  2407               	addwf	??_is_valid,w,c
 14240  0010F8  6ED9               	movwf	fsr2l,c
 14241  0010FA  0E01               	movlw	high _B_array
 14242  0010FC  2008               	addwfc	??_is_valid+1,w,c
 14243  0010FE  6EDA               	movwf	fsr2h,c
 14244  001100  C065  FFDE         	movff	_B,postinc2
 14245  001104  C066  FFDD         	movff	_B+1,postdec2
 14246                           
 14247                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 14248  001108  90D8               	bcf	status,0,c
 14249  00110A  346D               	rlcf	_counter_step,w,c
 14250  00110C  6ED9               	movwf	fsr2l,c
 14251  00110E  346E               	rlcf	_counter_step+1,w,c
 14252  001110  6EDA               	movwf	fsr2h,c
 14253  001112  0E42               	movlw	low _compartment_number
 14254  001114  26D9               	addwf	fsr2l,f,c
 14255  001116  0E00               	movlw	high _compartment_number
 14256  001118  22DA               	addwfc	fsr2h,f,c
 14257  00111A  CFDE F007          	movff	postinc2,??_is_valid
 14258  00111E  CFDD F008          	movff	postdec2,??_is_valid+1
 14259  001122  90D8               	bcf	status,0,c
 14260  001124  3607               	rlcf	??_is_valid,f,c
 14261  001126  3608               	rlcf	??_is_valid+1,f,c
 14262  001128  0E20               	movlw	low _S_array
 14263  00112A  2407               	addwf	??_is_valid,w,c
 14264  00112C  6ED9               	movwf	fsr2l,c
 14265  00112E  0E01               	movlw	high _S_array
 14266  001130  2008               	addwfc	??_is_valid+1,w,c
 14267  001132  6EDA               	movwf	fsr2h,c
 14268  001134  C061  FFDE         	movff	_S,postinc2
 14269  001138  C062  FFDD         	movff	_S+1,postdec2
 14270                           
 14271                           ;keypad.c: 57: }
 14272  00113C  0012               	return	
 14273  00113E                     i2l700:
 14274                           
 14275                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 14276  00113E  0E78               	movlw	low _current_set2
 14277  001140  6E01               	movwf	strcmp@s1,c
 14278  001142  0E00               	movlw	high _current_set2
 14279  001144  6E02               	movwf	strcmp@s1+1,c
 14280  001146  0EDC               	movlw	low (STR_84+1)
 14281  001148  6E03               	movwf	strcmp@s2,c
 14282  00114A  0EFF               	movlw	high (STR_84+1)
 14283  00114C  6E04               	movwf	strcmp@s2+1,c
 14284  00114E  ECB1  F01F         	call	_strcmp	;wreg free
 14285  001152  5001               	movf	?_strcmp,w,c
 14286  001154  1002               	iorwf	?_strcmp+1,w,c
 14287  001156  A4D8               	btfss	status,2,c
 14288  001158  D042               	goto	i2l702
 14289                           
 14290                           ;keypad.c: 60: B = 1*number;
 14291  00115A  C07D  F065         	movff	_number,_B
 14292  00115E  C07E  F066         	movff	_number+1,_B+1
 14293                           
 14294                           ;keypad.c: 62: W = 1*number;
 14295  001162  C07D  F05F         	movff	_number,_W
 14296  001166  C07E  F060         	movff	_number+1,_W+1
 14297                           
 14298                           ;keypad.c: 63: total_number = 2*number;
 14299  00116A  90D8               	bcf	status,0,c
 14300  00116C  347D               	rlcf	_number,w,c
 14301  00116E  6E69               	movwf	_total_number,c
 14302  001170  347E               	rlcf	_number+1,w,c
 14303  001172  6E6A               	movwf	_total_number+1,c
 14304                           
 14305                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 14306  001174  90D8               	bcf	status,0,c
 14307  001176  346D               	rlcf	_counter_step,w,c
 14308  001178  6ED9               	movwf	fsr2l,c
 14309  00117A  346E               	rlcf	_counter_step+1,w,c
 14310  00117C  6EDA               	movwf	fsr2h,c
 14311  00117E  0E42               	movlw	low _compartment_number
 14312  001180  26D9               	addwf	fsr2l,f,c
 14313  001182  0E00               	movlw	high _compartment_number
 14314  001184  22DA               	addwfc	fsr2h,f,c
 14315  001186  CFDE F007          	movff	postinc2,??_is_valid
 14316  00118A  CFDD F008          	movff	postdec2,??_is_valid+1
 14317  00118E  90D8               	bcf	status,0,c
 14318  001190  3607               	rlcf	??_is_valid,f,c
 14319  001192  3608               	rlcf	??_is_valid+1,f,c
 14320  001194  0E30               	movlw	low _B_array
 14321  001196  2407               	addwf	??_is_valid,w,c
 14322  001198  6ED9               	movwf	fsr2l,c
 14323  00119A  0E01               	movlw	high _B_array
 14324  00119C  2008               	addwfc	??_is_valid+1,w,c
 14325  00119E  6EDA               	movwf	fsr2h,c
 14326  0011A0  C065  FFDE         	movff	_B,postinc2
 14327  0011A4  C066  FFDD         	movff	_B+1,postdec2
 14328                           
 14329                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 14330  0011A8  90D8               	bcf	status,0,c
 14331  0011AA  346D               	rlcf	_counter_step,w,c
 14332  0011AC  6ED9               	movwf	fsr2l,c
 14333  0011AE  346E               	rlcf	_counter_step+1,w,c
 14334  0011B0  6EDA               	movwf	fsr2h,c
 14335  0011B2  0E42               	movlw	low _compartment_number
 14336  0011B4  26D9               	addwf	fsr2l,f,c
 14337  0011B6  0E00               	movlw	high _compartment_number
 14338  0011B8  22DA               	addwfc	fsr2h,f,c
 14339  0011BA  CFDE F007          	movff	postinc2,??_is_valid
 14340  0011BE  CFDD F008          	movff	postdec2,??_is_valid+1
 14341  0011C2  90D8               	bcf	status,0,c
 14342  0011C4  3607               	rlcf	??_is_valid,f,c
 14343  0011C6  3608               	rlcf	??_is_valid+1,f,c
 14344  0011C8  0E00               	movlw	low _W_array
 14345  0011CA  2407               	addwf	??_is_valid,w,c
 14346  0011CC  6ED9               	movwf	fsr2l,c
 14347  0011CE  0E01               	movlw	high _W_array
 14348  0011D0  2008               	addwfc	??_is_valid+1,w,c
 14349  0011D2  6EDA               	movwf	fsr2h,c
 14350  0011D4  C05F  FFDE         	movff	_W,postinc2
 14351  0011D8  C060  FFDD         	movff	_W+1,postdec2
 14352                           
 14353                           ;keypad.c: 67: }
 14354  0011DC  0012               	return	
 14355  0011DE                     i2l702:
 14356                           
 14357                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 14358  0011DE  0E78               	movlw	low _current_set2
 14359  0011E0  6E01               	movwf	strcmp@s1,c
 14360  0011E2  0E00               	movlw	high _current_set2
 14361  0011E4  6E02               	movwf	strcmp@s1+1,c
 14362  0011E6  0ED3               	movlw	low STR_82
 14363  0011E8  6E03               	movwf	strcmp@s2,c
 14364  0011EA  0EFF               	movlw	high STR_82
 14365  0011EC  6E04               	movwf	strcmp@s2+1,c
 14366  0011EE  ECB1  F01F         	call	_strcmp	;wreg free
 14367  0011F2  5001               	movf	?_strcmp,w,c
 14368  0011F4  1002               	iorwf	?_strcmp+1,w,c
 14369  0011F6  A4D8               	btfss	status,2,c
 14370  0011F8  D04C               	goto	i2l704
 14371                           
 14372                           ;keypad.c: 69: B = 2*number;
 14373  0011FA  90D8               	bcf	status,0,c
 14374  0011FC  347D               	rlcf	_number,w,c
 14375  0011FE  6E65               	movwf	_B,c
 14376  001200  347E               	rlcf	_number+1,w,c
 14377  001202  6E66               	movwf	_B+1,c
 14378                           
 14379                           ;keypad.c: 71: N = 1*number;
 14380  001204  C07D  F063         	movff	_number,_N
 14381  001208  C07E  F064         	movff	_number+1,_N+1
 14382                           
 14383                           ;keypad.c: 72: total_number = 3*number;
 14384  00120C  C07D  F001         	movff	_number,i2___wmul@multiplier
 14385  001210  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 14386  001214  0E00               	movlw	0
 14387  001216  6E04               	movwf	i2___wmul@multiplicand+1,c
 14388  001218  0E03               	movlw	3
 14389  00121A  6E03               	movwf	i2___wmul@multiplicand,c
 14390  00121C  EC0A  F021         	call	i2___wmul	;wreg free
 14391  001220  C001  F069         	movff	?i2___wmul,_total_number
 14392  001224  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 14393                           
 14394                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 14395  001228  90D8               	bcf	status,0,c
 14396  00122A  346D               	rlcf	_counter_step,w,c
 14397  00122C  6ED9               	movwf	fsr2l,c
 14398  00122E  346E               	rlcf	_counter_step+1,w,c
 14399  001230  6EDA               	movwf	fsr2h,c
 14400  001232  0E42               	movlw	low _compartment_number
 14401  001234  26D9               	addwf	fsr2l,f,c
 14402  001236  0E00               	movlw	high _compartment_number
 14403  001238  22DA               	addwfc	fsr2h,f,c
 14404  00123A  CFDE F007          	movff	postinc2,??_is_valid
 14405  00123E  CFDD F008          	movff	postdec2,??_is_valid+1
 14406  001242  90D8               	bcf	status,0,c
 14407  001244  3607               	rlcf	??_is_valid,f,c
 14408  001246  3608               	rlcf	??_is_valid+1,f,c
 14409  001248  0E30               	movlw	low _B_array
 14410  00124A  2407               	addwf	??_is_valid,w,c
 14411  00124C  6ED9               	movwf	fsr2l,c
 14412  00124E  0E01               	movlw	high _B_array
 14413  001250  2008               	addwfc	??_is_valid+1,w,c
 14414  001252  6EDA               	movwf	fsr2h,c
 14415  001254  C065  FFDE         	movff	_B,postinc2
 14416  001258  C066  FFDD         	movff	_B+1,postdec2
 14417                           
 14418                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 14419  00125C  90D8               	bcf	status,0,c
 14420  00125E  346D               	rlcf	_counter_step,w,c
 14421  001260  6ED9               	movwf	fsr2l,c
 14422  001262  346E               	rlcf	_counter_step+1,w,c
 14423  001264  6EDA               	movwf	fsr2h,c
 14424  001266  0E42               	movlw	low _compartment_number
 14425  001268  26D9               	addwf	fsr2l,f,c
 14426  00126A  0E00               	movlw	high _compartment_number
 14427  00126C  22DA               	addwfc	fsr2h,f,c
 14428  00126E  CFDE F007          	movff	postinc2,??_is_valid
 14429  001272  CFDD F008          	movff	postdec2,??_is_valid+1
 14430  001276  90D8               	bcf	status,0,c
 14431  001278  3607               	rlcf	??_is_valid,f,c
 14432  00127A  3608               	rlcf	??_is_valid+1,f,c
 14433  00127C  0E10               	movlw	low _N_array
 14434  00127E  2407               	addwf	??_is_valid,w,c
 14435  001280  6ED9               	movwf	fsr2l,c
 14436  001282  0E01               	movlw	high _N_array
 14437  001284  2008               	addwfc	??_is_valid+1,w,c
 14438  001286  6EDA               	movwf	fsr2h,c
 14439  001288  C063  FFDE         	movff	_N,postinc2
 14440  00128C  C064  FFDD         	movff	_N+1,postdec2
 14441                           
 14442                           ;keypad.c: 76: }
 14443  001290  0012               	return	
 14444  001292                     i2l704:
 14445                           
 14446                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 14447  001292  0E78               	movlw	low _current_set2
 14448  001294  6E01               	movwf	strcmp@s1,c
 14449  001296  0E00               	movlw	high _current_set2
 14450  001298  6E02               	movwf	strcmp@s1+1,c
 14451  00129A  0ED7               	movlw	low STR_83
 14452  00129C  6E03               	movwf	strcmp@s2,c
 14453  00129E  0EFF               	movlw	high STR_83
 14454  0012A0  6E04               	movwf	strcmp@s2+1,c
 14455  0012A2  ECB1  F01F         	call	_strcmp	;wreg free
 14456  0012A6  5001               	movf	?_strcmp,w,c
 14457  0012A8  1002               	iorwf	?_strcmp+1,w,c
 14458  0012AA  A4D8               	btfss	status,2,c
 14459  0012AC  D04C               	goto	i2l706
 14460                           
 14461                           ;keypad.c: 78: B = 2*number;
 14462  0012AE  90D8               	bcf	status,0,c
 14463  0012B0  347D               	rlcf	_number,w,c
 14464  0012B2  6E65               	movwf	_B,c
 14465  0012B4  347E               	rlcf	_number+1,w,c
 14466  0012B6  6E66               	movwf	_B+1,c
 14467                           
 14468                           ;keypad.c: 80: S = 1*number;
 14469  0012B8  C07D  F061         	movff	_number,_S
 14470  0012BC  C07E  F062         	movff	_number+1,_S+1
 14471                           
 14472                           ;keypad.c: 81: total_number = 3*number;
 14473  0012C0  C07D  F001         	movff	_number,i2___wmul@multiplier
 14474  0012C4  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 14475  0012C8  0E00               	movlw	0
 14476  0012CA  6E04               	movwf	i2___wmul@multiplicand+1,c
 14477  0012CC  0E03               	movlw	3
 14478  0012CE  6E03               	movwf	i2___wmul@multiplicand,c
 14479  0012D0  EC0A  F021         	call	i2___wmul	;wreg free
 14480  0012D4  C001  F069         	movff	?i2___wmul,_total_number
 14481  0012D8  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 14482                           
 14483                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 14484  0012DC  90D8               	bcf	status,0,c
 14485  0012DE  346D               	rlcf	_counter_step,w,c
 14486  0012E0  6ED9               	movwf	fsr2l,c
 14487  0012E2  346E               	rlcf	_counter_step+1,w,c
 14488  0012E4  6EDA               	movwf	fsr2h,c
 14489  0012E6  0E42               	movlw	low _compartment_number
 14490  0012E8  26D9               	addwf	fsr2l,f,c
 14491  0012EA  0E00               	movlw	high _compartment_number
 14492  0012EC  22DA               	addwfc	fsr2h,f,c
 14493  0012EE  CFDE F007          	movff	postinc2,??_is_valid
 14494  0012F2  CFDD F008          	movff	postdec2,??_is_valid+1
 14495  0012F6  90D8               	bcf	status,0,c
 14496  0012F8  3607               	rlcf	??_is_valid,f,c
 14497  0012FA  3608               	rlcf	??_is_valid+1,f,c
 14498  0012FC  0E30               	movlw	low _B_array
 14499  0012FE  2407               	addwf	??_is_valid,w,c
 14500  001300  6ED9               	movwf	fsr2l,c
 14501  001302  0E01               	movlw	high _B_array
 14502  001304  2008               	addwfc	??_is_valid+1,w,c
 14503  001306  6EDA               	movwf	fsr2h,c
 14504  001308  C065  FFDE         	movff	_B,postinc2
 14505  00130C  C066  FFDD         	movff	_B+1,postdec2
 14506                           
 14507                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 14508  001310  90D8               	bcf	status,0,c
 14509  001312  346D               	rlcf	_counter_step,w,c
 14510  001314  6ED9               	movwf	fsr2l,c
 14511  001316  346E               	rlcf	_counter_step+1,w,c
 14512  001318  6EDA               	movwf	fsr2h,c
 14513  00131A  0E42               	movlw	low _compartment_number
 14514  00131C  26D9               	addwf	fsr2l,f,c
 14515  00131E  0E00               	movlw	high _compartment_number
 14516  001320  22DA               	addwfc	fsr2h,f,c
 14517  001322  CFDE F007          	movff	postinc2,??_is_valid
 14518  001326  CFDD F008          	movff	postdec2,??_is_valid+1
 14519  00132A  90D8               	bcf	status,0,c
 14520  00132C  3607               	rlcf	??_is_valid,f,c
 14521  00132E  3608               	rlcf	??_is_valid+1,f,c
 14522  001330  0E20               	movlw	low _S_array
 14523  001332  2407               	addwf	??_is_valid,w,c
 14524  001334  6ED9               	movwf	fsr2l,c
 14525  001336  0E01               	movlw	high _S_array
 14526  001338  2008               	addwfc	??_is_valid+1,w,c
 14527  00133A  6EDA               	movwf	fsr2h,c
 14528  00133C  C061  FFDE         	movff	_S,postinc2
 14529  001340  C062  FFDD         	movff	_S+1,postdec2
 14530                           
 14531                           ;keypad.c: 85: }
 14532  001344  0012               	return	
 14533  001346                     i2l706:
 14534                           
 14535                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 14536  001346  0E78               	movlw	low _current_set2
 14537  001348  6E01               	movwf	strcmp@s1,c
 14538  00134A  0E00               	movlw	high _current_set2
 14539  00134C  6E02               	movwf	strcmp@s1+1,c
 14540  00134E  0EDB               	movlw	low STR_84
 14541  001350  6E03               	movwf	strcmp@s2,c
 14542  001352  0EFF               	movlw	high STR_84
 14543  001354  6E04               	movwf	strcmp@s2+1,c
 14544  001356  ECB1  F01F         	call	_strcmp	;wreg free
 14545  00135A  5001               	movf	?_strcmp,w,c
 14546  00135C  1002               	iorwf	?_strcmp+1,w,c
 14547  00135E  A4D8               	btfss	status,2,c
 14548  001360  D04C               	goto	i2l708
 14549                           
 14550                           ;keypad.c: 87: B = 2*number;
 14551  001362  90D8               	bcf	status,0,c
 14552  001364  347D               	rlcf	_number,w,c
 14553  001366  6E65               	movwf	_B,c
 14554  001368  347E               	rlcf	_number+1,w,c
 14555  00136A  6E66               	movwf	_B+1,c
 14556                           
 14557                           ;keypad.c: 89: W = 1*number;
 14558  00136C  C07D  F05F         	movff	_number,_W
 14559  001370  C07E  F060         	movff	_number+1,_W+1
 14560                           
 14561                           ;keypad.c: 90: total_number = 3*number;
 14562  001374  C07D  F001         	movff	_number,i2___wmul@multiplier
 14563  001378  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 14564  00137C  0E00               	movlw	0
 14565  00137E  6E04               	movwf	i2___wmul@multiplicand+1,c
 14566  001380  0E03               	movlw	3
 14567  001382  6E03               	movwf	i2___wmul@multiplicand,c
 14568  001384  EC0A  F021         	call	i2___wmul	;wreg free
 14569  001388  C001  F069         	movff	?i2___wmul,_total_number
 14570  00138C  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 14571                           
 14572                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 14573  001390  90D8               	bcf	status,0,c
 14574  001392  346D               	rlcf	_counter_step,w,c
 14575  001394  6ED9               	movwf	fsr2l,c
 14576  001396  346E               	rlcf	_counter_step+1,w,c
 14577  001398  6EDA               	movwf	fsr2h,c
 14578  00139A  0E42               	movlw	low _compartment_number
 14579  00139C  26D9               	addwf	fsr2l,f,c
 14580  00139E  0E00               	movlw	high _compartment_number
 14581  0013A0  22DA               	addwfc	fsr2h,f,c
 14582  0013A2  CFDE F007          	movff	postinc2,??_is_valid
 14583  0013A6  CFDD F008          	movff	postdec2,??_is_valid+1
 14584  0013AA  90D8               	bcf	status,0,c
 14585  0013AC  3607               	rlcf	??_is_valid,f,c
 14586  0013AE  3608               	rlcf	??_is_valid+1,f,c
 14587  0013B0  0E30               	movlw	low _B_array
 14588  0013B2  2407               	addwf	??_is_valid,w,c
 14589  0013B4  6ED9               	movwf	fsr2l,c
 14590  0013B6  0E01               	movlw	high _B_array
 14591  0013B8  2008               	addwfc	??_is_valid+1,w,c
 14592  0013BA  6EDA               	movwf	fsr2h,c
 14593  0013BC  C065  FFDE         	movff	_B,postinc2
 14594  0013C0  C066  FFDD         	movff	_B+1,postdec2
 14595                           
 14596                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 14597  0013C4  90D8               	bcf	status,0,c
 14598  0013C6  346D               	rlcf	_counter_step,w,c
 14599  0013C8  6ED9               	movwf	fsr2l,c
 14600  0013CA  346E               	rlcf	_counter_step+1,w,c
 14601  0013CC  6EDA               	movwf	fsr2h,c
 14602  0013CE  0E42               	movlw	low _compartment_number
 14603  0013D0  26D9               	addwf	fsr2l,f,c
 14604  0013D2  0E00               	movlw	high _compartment_number
 14605  0013D4  22DA               	addwfc	fsr2h,f,c
 14606  0013D6  CFDE F007          	movff	postinc2,??_is_valid
 14607  0013DA  CFDD F008          	movff	postdec2,??_is_valid+1
 14608  0013DE  90D8               	bcf	status,0,c
 14609  0013E0  3607               	rlcf	??_is_valid,f,c
 14610  0013E2  3608               	rlcf	??_is_valid+1,f,c
 14611  0013E4  0E00               	movlw	low _W_array
 14612  0013E6  2407               	addwf	??_is_valid,w,c
 14613  0013E8  6ED9               	movwf	fsr2l,c
 14614  0013EA  0E01               	movlw	high _W_array
 14615  0013EC  2008               	addwfc	??_is_valid+1,w,c
 14616  0013EE  6EDA               	movwf	fsr2h,c
 14617  0013F0  C05F  FFDE         	movff	_W,postinc2
 14618  0013F4  C060  FFDD         	movff	_W+1,postdec2
 14619                           
 14620                           ;keypad.c: 94: }
 14621  0013F8  0012               	return	
 14622  0013FA                     i2l708:
 14623                           
 14624                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 14625  0013FA  0E78               	movlw	low _current_set2
 14626  0013FC  6E01               	movwf	strcmp@s1,c
 14627  0013FE  0E00               	movlw	high _current_set2
 14628  001400  6E02               	movwf	strcmp@s1+1,c
 14629  001402  0EAC               	movlw	low (STR_91+1)
 14630  001404  6E03               	movwf	strcmp@s2,c
 14631  001406  0EFF               	movlw	high (STR_91+1)
 14632  001408  6E04               	movwf	strcmp@s2+1,c
 14633  00140A  ECB1  F01F         	call	_strcmp	;wreg free
 14634  00140E  5001               	movf	?_strcmp,w,c
 14635  001410  1002               	iorwf	?_strcmp+1,w,c
 14636  001412  A4D8               	btfss	status,2,c
 14637  001414  D069               	goto	i2l710
 14638                           
 14639                           ;keypad.c: 96: B = 1*number;
 14640  001416  C07D  F065         	movff	_number,_B
 14641  00141A  C07E  F066         	movff	_number+1,_B+1
 14642                           
 14643                           ;keypad.c: 97: W = 1*number;
 14644  00141E  C07D  F05F         	movff	_number,_W
 14645  001422  C07E  F060         	movff	_number+1,_W+1
 14646                           
 14647                           ;keypad.c: 98: N = 1*number;
 14648  001426  C07D  F063         	movff	_number,_N
 14649  00142A  C07E  F064         	movff	_number+1,_N+1
 14650                           
 14651                           ;keypad.c: 99: total_number = 3*number;
 14652  00142E  C07D  F001         	movff	_number,i2___wmul@multiplier
 14653  001432  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 14654  001436  0E00               	movlw	0
 14655  001438  6E04               	movwf	i2___wmul@multiplicand+1,c
 14656  00143A  0E03               	movlw	3
 14657  00143C  6E03               	movwf	i2___wmul@multiplicand,c
 14658  00143E  EC0A  F021         	call	i2___wmul	;wreg free
 14659  001442  C001  F069         	movff	?i2___wmul,_total_number
 14660  001446  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 14661                           
 14662                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 14663  00144A  90D8               	bcf	status,0,c
 14664  00144C  346D               	rlcf	_counter_step,w,c
 14665  00144E  6ED9               	movwf	fsr2l,c
 14666  001450  346E               	rlcf	_counter_step+1,w,c
 14667  001452  6EDA               	movwf	fsr2h,c
 14668  001454  0E42               	movlw	low _compartment_number
 14669  001456  26D9               	addwf	fsr2l,f,c
 14670  001458  0E00               	movlw	high _compartment_number
 14671  00145A  22DA               	addwfc	fsr2h,f,c
 14672  00145C  CFDE F007          	movff	postinc2,??_is_valid
 14673  001460  CFDD F008          	movff	postdec2,??_is_valid+1
 14674  001464  90D8               	bcf	status,0,c
 14675  001466  3607               	rlcf	??_is_valid,f,c
 14676  001468  3608               	rlcf	??_is_valid+1,f,c
 14677  00146A  0E30               	movlw	low _B_array
 14678  00146C  2407               	addwf	??_is_valid,w,c
 14679  00146E  6ED9               	movwf	fsr2l,c
 14680  001470  0E01               	movlw	high _B_array
 14681  001472  2008               	addwfc	??_is_valid+1,w,c
 14682  001474  6EDA               	movwf	fsr2h,c
 14683  001476  C065  FFDE         	movff	_B,postinc2
 14684  00147A  C066  FFDD         	movff	_B+1,postdec2
 14685                           
 14686                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 14687  00147E  90D8               	bcf	status,0,c
 14688  001480  346D               	rlcf	_counter_step,w,c
 14689  001482  6ED9               	movwf	fsr2l,c
 14690  001484  346E               	rlcf	_counter_step+1,w,c
 14691  001486  6EDA               	movwf	fsr2h,c
 14692  001488  0E42               	movlw	low _compartment_number
 14693  00148A  26D9               	addwf	fsr2l,f,c
 14694  00148C  0E00               	movlw	high _compartment_number
 14695  00148E  22DA               	addwfc	fsr2h,f,c
 14696  001490  CFDE F007          	movff	postinc2,??_is_valid
 14697  001494  CFDD F008          	movff	postdec2,??_is_valid+1
 14698  001498  90D8               	bcf	status,0,c
 14699  00149A  3607               	rlcf	??_is_valid,f,c
 14700  00149C  3608               	rlcf	??_is_valid+1,f,c
 14701  00149E  0E00               	movlw	low _W_array
 14702  0014A0  2407               	addwf	??_is_valid,w,c
 14703  0014A2  6ED9               	movwf	fsr2l,c
 14704  0014A4  0E01               	movlw	high _W_array
 14705  0014A6  2008               	addwfc	??_is_valid+1,w,c
 14706  0014A8  6EDA               	movwf	fsr2h,c
 14707  0014AA  C05F  FFDE         	movff	_W,postinc2
 14708  0014AE  C060  FFDD         	movff	_W+1,postdec2
 14709                           
 14710                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 14711  0014B2  90D8               	bcf	status,0,c
 14712  0014B4  346D               	rlcf	_counter_step,w,c
 14713  0014B6  6ED9               	movwf	fsr2l,c
 14714  0014B8  346E               	rlcf	_counter_step+1,w,c
 14715  0014BA  6EDA               	movwf	fsr2h,c
 14716  0014BC  0E42               	movlw	low _compartment_number
 14717  0014BE  26D9               	addwf	fsr2l,f,c
 14718  0014C0  0E00               	movlw	high _compartment_number
 14719  0014C2  22DA               	addwfc	fsr2h,f,c
 14720  0014C4  CFDE F007          	movff	postinc2,??_is_valid
 14721  0014C8  CFDD F008          	movff	postdec2,??_is_valid+1
 14722  0014CC  90D8               	bcf	status,0,c
 14723  0014CE  3607               	rlcf	??_is_valid,f,c
 14724  0014D0  3608               	rlcf	??_is_valid+1,f,c
 14725  0014D2  0E10               	movlw	low _N_array
 14726  0014D4  2407               	addwf	??_is_valid,w,c
 14727  0014D6  6ED9               	movwf	fsr2l,c
 14728  0014D8  0E01               	movlw	high _N_array
 14729  0014DA  2008               	addwfc	??_is_valid+1,w,c
 14730  0014DC  6EDA               	movwf	fsr2h,c
 14731  0014DE  C063  FFDE         	movff	_N,postinc2
 14732  0014E2  C064  FFDD         	movff	_N+1,postdec2
 14733                           
 14734                           ;keypad.c: 105: }
 14735  0014E6  0012               	return	
 14736  0014E8                     i2l710:
 14737                           
 14738                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 14739  0014E8  0E78               	movlw	low _current_set2
 14740  0014EA  6E01               	movwf	strcmp@s1,c
 14741  0014EC  0E00               	movlw	high _current_set2
 14742  0014EE  6E02               	movwf	strcmp@s1+1,c
 14743  0014F0  0EB6               	movlw	low (STR_90+1)
 14744  0014F2  6E03               	movwf	strcmp@s2,c
 14745  0014F4  0EFF               	movlw	high (STR_90+1)
 14746  0014F6  6E04               	movwf	strcmp@s2+1,c
 14747  0014F8  ECB1  F01F         	call	_strcmp	;wreg free
 14748  0014FC  5001               	movf	?_strcmp,w,c
 14749  0014FE  1002               	iorwf	?_strcmp+1,w,c
 14750  001500  A4D8               	btfss	status,2,c
 14751  001502  D069               	goto	i2l712
 14752                           
 14753                           ;keypad.c: 107: B = 1*number;
 14754  001504  C07D  F065         	movff	_number,_B
 14755  001508  C07E  F066         	movff	_number+1,_B+1
 14756                           
 14757                           ;keypad.c: 108: S = 1*number;
 14758  00150C  C07D  F061         	movff	_number,_S
 14759  001510  C07E  F062         	movff	_number+1,_S+1
 14760                           
 14761                           ;keypad.c: 109: N = 1*number;
 14762  001514  C07D  F063         	movff	_number,_N
 14763  001518  C07E  F064         	movff	_number+1,_N+1
 14764                           
 14765                           ;keypad.c: 110: total_number = 3*number;
 14766  00151C  C07D  F001         	movff	_number,i2___wmul@multiplier
 14767  001520  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 14768  001524  0E00               	movlw	0
 14769  001526  6E04               	movwf	i2___wmul@multiplicand+1,c
 14770  001528  0E03               	movlw	3
 14771  00152A  6E03               	movwf	i2___wmul@multiplicand,c
 14772  00152C  EC0A  F021         	call	i2___wmul	;wreg free
 14773  001530  C001  F069         	movff	?i2___wmul,_total_number
 14774  001534  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 14775                           
 14776                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 14777  001538  90D8               	bcf	status,0,c
 14778  00153A  346D               	rlcf	_counter_step,w,c
 14779  00153C  6ED9               	movwf	fsr2l,c
 14780  00153E  346E               	rlcf	_counter_step+1,w,c
 14781  001540  6EDA               	movwf	fsr2h,c
 14782  001542  0E42               	movlw	low _compartment_number
 14783  001544  26D9               	addwf	fsr2l,f,c
 14784  001546  0E00               	movlw	high _compartment_number
 14785  001548  22DA               	addwfc	fsr2h,f,c
 14786  00154A  CFDE F007          	movff	postinc2,??_is_valid
 14787  00154E  CFDD F008          	movff	postdec2,??_is_valid+1
 14788  001552  90D8               	bcf	status,0,c
 14789  001554  3607               	rlcf	??_is_valid,f,c
 14790  001556  3608               	rlcf	??_is_valid+1,f,c
 14791  001558  0E30               	movlw	low _B_array
 14792  00155A  2407               	addwf	??_is_valid,w,c
 14793  00155C  6ED9               	movwf	fsr2l,c
 14794  00155E  0E01               	movlw	high _B_array
 14795  001560  2008               	addwfc	??_is_valid+1,w,c
 14796  001562  6EDA               	movwf	fsr2h,c
 14797  001564  C065  FFDE         	movff	_B,postinc2
 14798  001568  C066  FFDD         	movff	_B+1,postdec2
 14799                           
 14800                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 14801  00156C  90D8               	bcf	status,0,c
 14802  00156E  346D               	rlcf	_counter_step,w,c
 14803  001570  6ED9               	movwf	fsr2l,c
 14804  001572  346E               	rlcf	_counter_step+1,w,c
 14805  001574  6EDA               	movwf	fsr2h,c
 14806  001576  0E42               	movlw	low _compartment_number
 14807  001578  26D9               	addwf	fsr2l,f,c
 14808  00157A  0E00               	movlw	high _compartment_number
 14809  00157C  22DA               	addwfc	fsr2h,f,c
 14810  00157E  CFDE F007          	movff	postinc2,??_is_valid
 14811  001582  CFDD F008          	movff	postdec2,??_is_valid+1
 14812  001586  90D8               	bcf	status,0,c
 14813  001588  3607               	rlcf	??_is_valid,f,c
 14814  00158A  3608               	rlcf	??_is_valid+1,f,c
 14815  00158C  0E20               	movlw	low _S_array
 14816  00158E  2407               	addwf	??_is_valid,w,c
 14817  001590  6ED9               	movwf	fsr2l,c
 14818  001592  0E01               	movlw	high _S_array
 14819  001594  2008               	addwfc	??_is_valid+1,w,c
 14820  001596  6EDA               	movwf	fsr2h,c
 14821  001598  C061  FFDE         	movff	_S,postinc2
 14822  00159C  C062  FFDD         	movff	_S+1,postdec2
 14823                           
 14824                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
 14825  0015A0  90D8               	bcf	status,0,c
 14826  0015A2  346D               	rlcf	_counter_step,w,c
 14827  0015A4  6ED9               	movwf	fsr2l,c
 14828  0015A6  346E               	rlcf	_counter_step+1,w,c
 14829  0015A8  6EDA               	movwf	fsr2h,c
 14830  0015AA  0E42               	movlw	low _compartment_number
 14831  0015AC  26D9               	addwf	fsr2l,f,c
 14832  0015AE  0E00               	movlw	high _compartment_number
 14833  0015B0  22DA               	addwfc	fsr2h,f,c
 14834  0015B2  CFDE F007          	movff	postinc2,??_is_valid
 14835  0015B6  CFDD F008          	movff	postdec2,??_is_valid+1
 14836  0015BA  90D8               	bcf	status,0,c
 14837  0015BC  3607               	rlcf	??_is_valid,f,c
 14838  0015BE  3608               	rlcf	??_is_valid+1,f,c
 14839  0015C0  0E10               	movlw	low _N_array
 14840  0015C2  2407               	addwf	??_is_valid,w,c
 14841  0015C4  6ED9               	movwf	fsr2l,c
 14842  0015C6  0E01               	movlw	high _N_array
 14843  0015C8  2008               	addwfc	??_is_valid+1,w,c
 14844  0015CA  6EDA               	movwf	fsr2h,c
 14845  0015CC  C063  FFDE         	movff	_N,postinc2
 14846  0015D0  C064  FFDD         	movff	_N+1,postdec2
 14847                           
 14848                           ;keypad.c: 116: }
 14849  0015D4  0012               	return	
 14850  0015D6                     i2l712:
 14851                           
 14852                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 14853  0015D6  0E78               	movlw	low _current_set2
 14854  0015D8  6E01               	movwf	strcmp@s1,c
 14855  0015DA  0E00               	movlw	high _current_set2
 14856  0015DC  6E02               	movwf	strcmp@s1+1,c
 14857  0015DE  0EDF               	movlw	low STR_87
 14858  0015E0  6E03               	movwf	strcmp@s2,c
 14859  0015E2  0EFF               	movlw	high STR_87
 14860  0015E4  6E04               	movwf	strcmp@s2+1,c
 14861  0015E6  ECB1  F01F         	call	_strcmp	;wreg free
 14862  0015EA  5001               	movf	?_strcmp,w,c
 14863  0015EC  1002               	iorwf	?_strcmp+1,w,c
 14864  0015EE  A4D8               	btfss	status,2,c
 14865  0015F0  D04C               	goto	i2l714
 14866                           
 14867                           ;keypad.c: 118: B = 1*number;
 14868  0015F2  C07D  F065         	movff	_number,_B
 14869  0015F6  C07E  F066         	movff	_number+1,_B+1
 14870                           
 14871                           ;keypad.c: 119: W = 2*number;
 14872  0015FA  90D8               	bcf	status,0,c
 14873  0015FC  347D               	rlcf	_number,w,c
 14874  0015FE  6E5F               	movwf	_W,c
 14875  001600  347E               	rlcf	_number+1,w,c
 14876  001602  6E60               	movwf	_W+1,c
 14877                           
 14878                           ;keypad.c: 120: total_number = 3*number;
 14879  001604  C07D  F001         	movff	_number,i2___wmul@multiplier
 14880  001608  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 14881  00160C  0E00               	movlw	0
 14882  00160E  6E04               	movwf	i2___wmul@multiplicand+1,c
 14883  001610  0E03               	movlw	3
 14884  001612  6E03               	movwf	i2___wmul@multiplicand,c
 14885  001614  EC0A  F021         	call	i2___wmul	;wreg free
 14886  001618  C001  F069         	movff	?i2___wmul,_total_number
 14887  00161C  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 14888                           
 14889                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 14890  001620  90D8               	bcf	status,0,c
 14891  001622  346D               	rlcf	_counter_step,w,c
 14892  001624  6ED9               	movwf	fsr2l,c
 14893  001626  346E               	rlcf	_counter_step+1,w,c
 14894  001628  6EDA               	movwf	fsr2h,c
 14895  00162A  0E42               	movlw	low _compartment_number
 14896  00162C  26D9               	addwf	fsr2l,f,c
 14897  00162E  0E00               	movlw	high _compartment_number
 14898  001630  22DA               	addwfc	fsr2h,f,c
 14899  001632  CFDE F007          	movff	postinc2,??_is_valid
 14900  001636  CFDD F008          	movff	postdec2,??_is_valid+1
 14901  00163A  90D8               	bcf	status,0,c
 14902  00163C  3607               	rlcf	??_is_valid,f,c
 14903  00163E  3608               	rlcf	??_is_valid+1,f,c
 14904  001640  0E30               	movlw	low _B_array
 14905  001642  2407               	addwf	??_is_valid,w,c
 14906  001644  6ED9               	movwf	fsr2l,c
 14907  001646  0E01               	movlw	high _B_array
 14908  001648  2008               	addwfc	??_is_valid+1,w,c
 14909  00164A  6EDA               	movwf	fsr2h,c
 14910  00164C  C065  FFDE         	movff	_B,postinc2
 14911  001650  C066  FFDD         	movff	_B+1,postdec2
 14912                           
 14913                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 14914  001654  90D8               	bcf	status,0,c
 14915  001656  346D               	rlcf	_counter_step,w,c
 14916  001658  6ED9               	movwf	fsr2l,c
 14917  00165A  346E               	rlcf	_counter_step+1,w,c
 14918  00165C  6EDA               	movwf	fsr2h,c
 14919  00165E  0E42               	movlw	low _compartment_number
 14920  001660  26D9               	addwf	fsr2l,f,c
 14921  001662  0E00               	movlw	high _compartment_number
 14922  001664  22DA               	addwfc	fsr2h,f,c
 14923  001666  CFDE F007          	movff	postinc2,??_is_valid
 14924  00166A  CFDD F008          	movff	postdec2,??_is_valid+1
 14925  00166E  90D8               	bcf	status,0,c
 14926  001670  3607               	rlcf	??_is_valid,f,c
 14927  001672  3608               	rlcf	??_is_valid+1,f,c
 14928  001674  0E00               	movlw	low _W_array
 14929  001676  2407               	addwf	??_is_valid,w,c
 14930  001678  6ED9               	movwf	fsr2l,c
 14931  00167A  0E01               	movlw	high _W_array
 14932  00167C  2008               	addwfc	??_is_valid+1,w,c
 14933  00167E  6EDA               	movwf	fsr2h,c
 14934  001680  C05F  FFDE         	movff	_W,postinc2
 14935  001684  C060  FFDD         	movff	_W+1,postdec2
 14936                           
 14937                           ;keypad.c: 124: }
 14938  001688  0012               	return	
 14939  00168A                     i2l714:
 14940                           
 14941                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 14942  00168A  0E78               	movlw	low _current_set2
 14943  00168C  6E01               	movwf	strcmp@s1,c
 14944  00168E  0E00               	movlw	high _current_set2
 14945  001690  6E02               	movwf	strcmp@s1+1,c
 14946  001692  0EBA               	movlw	low STR_88
 14947  001694  6E03               	movwf	strcmp@s2,c
 14948  001696  0EFF               	movlw	high STR_88
 14949  001698  6E04               	movwf	strcmp@s2+1,c
 14950  00169A  ECB1  F01F         	call	_strcmp	;wreg free
 14951  00169E  5001               	movf	?_strcmp,w,c
 14952  0016A0  1002               	iorwf	?_strcmp+1,w,c
 14953  0016A2  A4D8               	btfss	status,2,c
 14954  0016A4  D06A               	goto	i2l716
 14955                           
 14956                           ;keypad.c: 126: B = 1*number;
 14957  0016A6  C07D  F065         	movff	_number,_B
 14958  0016AA  C07E  F066         	movff	_number+1,_B+1
 14959                           
 14960                           ;keypad.c: 127: N = 1*number;
 14961  0016AE  C07D  F063         	movff	_number,_N
 14962  0016B2  C07E  F064         	movff	_number+1,_N+1
 14963                           
 14964                           ;keypad.c: 128: W = 2*number;
 14965  0016B6  90D8               	bcf	status,0,c
 14966  0016B8  347D               	rlcf	_number,w,c
 14967  0016BA  6E5F               	movwf	_W,c
 14968  0016BC  347E               	rlcf	_number+1,w,c
 14969  0016BE  6E60               	movwf	_W+1,c
 14970                           
 14971                           ;keypad.c: 129: total_number = 4*number;
 14972  0016C0  C07D  F007         	movff	_number,??_is_valid
 14973  0016C4  C07E  F008         	movff	_number+1,??_is_valid+1
 14974  0016C8  90D8               	bcf	status,0,c
 14975  0016CA  3607               	rlcf	??_is_valid,f,c
 14976  0016CC  3608               	rlcf	??_is_valid+1,f,c
 14977  0016CE  90D8               	bcf	status,0,c
 14978  0016D0  3607               	rlcf	??_is_valid,f,c
 14979  0016D2  3608               	rlcf	??_is_valid+1,f,c
 14980  0016D4  C007  F069         	movff	??_is_valid,_total_number
 14981  0016D8  C008  F06A         	movff	??_is_valid+1,_total_number+1
 14982                           
 14983                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 14984  0016DC  90D8               	bcf	status,0,c
 14985  0016DE  346D               	rlcf	_counter_step,w,c
 14986  0016E0  6ED9               	movwf	fsr2l,c
 14987  0016E2  346E               	rlcf	_counter_step+1,w,c
 14988  0016E4  6EDA               	movwf	fsr2h,c
 14989  0016E6  0E42               	movlw	low _compartment_number
 14990  0016E8  26D9               	addwf	fsr2l,f,c
 14991  0016EA  0E00               	movlw	high _compartment_number
 14992  0016EC  22DA               	addwfc	fsr2h,f,c
 14993  0016EE  CFDE F007          	movff	postinc2,??_is_valid
 14994  0016F2  CFDD F008          	movff	postdec2,??_is_valid+1
 14995  0016F6  90D8               	bcf	status,0,c
 14996  0016F8  3607               	rlcf	??_is_valid,f,c
 14997  0016FA  3608               	rlcf	??_is_valid+1,f,c
 14998  0016FC  0E30               	movlw	low _B_array
 14999  0016FE  2407               	addwf	??_is_valid,w,c
 15000  001700  6ED9               	movwf	fsr2l,c
 15001  001702  0E01               	movlw	high _B_array
 15002  001704  2008               	addwfc	??_is_valid+1,w,c
 15003  001706  6EDA               	movwf	fsr2h,c
 15004  001708  C065  FFDE         	movff	_B,postinc2
 15005  00170C  C066  FFDD         	movff	_B+1,postdec2
 15006                           
 15007                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 15008  001710  90D8               	bcf	status,0,c
 15009  001712  346D               	rlcf	_counter_step,w,c
 15010  001714  6ED9               	movwf	fsr2l,c
 15011  001716  346E               	rlcf	_counter_step+1,w,c
 15012  001718  6EDA               	movwf	fsr2h,c
 15013  00171A  0E42               	movlw	low _compartment_number
 15014  00171C  26D9               	addwf	fsr2l,f,c
 15015  00171E  0E00               	movlw	high _compartment_number
 15016  001720  22DA               	addwfc	fsr2h,f,c
 15017  001722  CFDE F007          	movff	postinc2,??_is_valid
 15018  001726  CFDD F008          	movff	postdec2,??_is_valid+1
 15019  00172A  90D8               	bcf	status,0,c
 15020  00172C  3607               	rlcf	??_is_valid,f,c
 15021  00172E  3608               	rlcf	??_is_valid+1,f,c
 15022  001730  0E10               	movlw	low _N_array
 15023  001732  2407               	addwf	??_is_valid,w,c
 15024  001734  6ED9               	movwf	fsr2l,c
 15025  001736  0E01               	movlw	high _N_array
 15026  001738  2008               	addwfc	??_is_valid+1,w,c
 15027  00173A  6EDA               	movwf	fsr2h,c
 15028  00173C  C063  FFDE         	movff	_N,postinc2
 15029  001740  C064  FFDD         	movff	_N+1,postdec2
 15030                           
 15031                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 15032  001744  90D8               	bcf	status,0,c
 15033  001746  346D               	rlcf	_counter_step,w,c
 15034  001748  6ED9               	movwf	fsr2l,c
 15035  00174A  346E               	rlcf	_counter_step+1,w,c
 15036  00174C  6EDA               	movwf	fsr2h,c
 15037  00174E  0E42               	movlw	low _compartment_number
 15038  001750  26D9               	addwf	fsr2l,f,c
 15039  001752  0E00               	movlw	high _compartment_number
 15040  001754  22DA               	addwfc	fsr2h,f,c
 15041  001756  CFDE F007          	movff	postinc2,??_is_valid
 15042  00175A  CFDD F008          	movff	postdec2,??_is_valid+1
 15043  00175E  90D8               	bcf	status,0,c
 15044  001760  3607               	rlcf	??_is_valid,f,c
 15045  001762  3608               	rlcf	??_is_valid+1,f,c
 15046  001764  0E00               	movlw	low _W_array
 15047  001766  2407               	addwf	??_is_valid,w,c
 15048  001768  6ED9               	movwf	fsr2l,c
 15049  00176A  0E01               	movlw	high _W_array
 15050  00176C  2008               	addwfc	??_is_valid+1,w,c
 15051  00176E  6EDA               	movwf	fsr2h,c
 15052  001770  C05F  FFDE         	movff	_W,postinc2
 15053  001774  C060  FFDD         	movff	_W+1,postdec2
 15054                           
 15055                           ;keypad.c: 134: }
 15056  001778  0012               	return	
 15057  00177A                     i2l716:
 15058                           
 15059                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 15060  00177A  0E78               	movlw	low _current_set2
 15061  00177C  6E01               	movwf	strcmp@s1,c
 15062  00177E  0E00               	movlw	high _current_set2
 15063  001780  6E02               	movwf	strcmp@s1+1,c
 15064  001782  0EBF               	movlw	low STR_89
 15065  001784  6E03               	movwf	strcmp@s2,c
 15066  001786  0EFF               	movlw	high STR_89
 15067  001788  6E04               	movwf	strcmp@s2+1,c
 15068  00178A  ECB1  F01F         	call	_strcmp	;wreg free
 15069  00178E  5001               	movf	?_strcmp,w,c
 15070  001790  1002               	iorwf	?_strcmp+1,w,c
 15071  001792  A4D8               	btfss	status,2,c
 15072  001794  D06A               	goto	i2l718
 15073                           
 15074                           ;keypad.c: 136: B = 1*number;
 15075  001796  C07D  F065         	movff	_number,_B
 15076  00179A  C07E  F066         	movff	_number+1,_B+1
 15077                           
 15078                           ;keypad.c: 137: S = 1*number;
 15079  00179E  C07D  F061         	movff	_number,_S
 15080  0017A2  C07E  F062         	movff	_number+1,_S+1
 15081                           
 15082                           ;keypad.c: 138: W = 2*number;
 15083  0017A6  90D8               	bcf	status,0,c
 15084  0017A8  347D               	rlcf	_number,w,c
 15085  0017AA  6E5F               	movwf	_W,c
 15086  0017AC  347E               	rlcf	_number+1,w,c
 15087  0017AE  6E60               	movwf	_W+1,c
 15088                           
 15089                           ;keypad.c: 139: total_number = 4*number;
 15090  0017B0  C07D  F007         	movff	_number,??_is_valid
 15091  0017B4  C07E  F008         	movff	_number+1,??_is_valid+1
 15092  0017B8  90D8               	bcf	status,0,c
 15093  0017BA  3607               	rlcf	??_is_valid,f,c
 15094  0017BC  3608               	rlcf	??_is_valid+1,f,c
 15095  0017BE  90D8               	bcf	status,0,c
 15096  0017C0  3607               	rlcf	??_is_valid,f,c
 15097  0017C2  3608               	rlcf	??_is_valid+1,f,c
 15098  0017C4  C007  F069         	movff	??_is_valid,_total_number
 15099  0017C8  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15100                           
 15101                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 15102  0017CC  90D8               	bcf	status,0,c
 15103  0017CE  346D               	rlcf	_counter_step,w,c
 15104  0017D0  6ED9               	movwf	fsr2l,c
 15105  0017D2  346E               	rlcf	_counter_step+1,w,c
 15106  0017D4  6EDA               	movwf	fsr2h,c
 15107  0017D6  0E42               	movlw	low _compartment_number
 15108  0017D8  26D9               	addwf	fsr2l,f,c
 15109  0017DA  0E00               	movlw	high _compartment_number
 15110  0017DC  22DA               	addwfc	fsr2h,f,c
 15111  0017DE  CFDE F007          	movff	postinc2,??_is_valid
 15112  0017E2  CFDD F008          	movff	postdec2,??_is_valid+1
 15113  0017E6  90D8               	bcf	status,0,c
 15114  0017E8  3607               	rlcf	??_is_valid,f,c
 15115  0017EA  3608               	rlcf	??_is_valid+1,f,c
 15116  0017EC  0E30               	movlw	low _B_array
 15117  0017EE  2407               	addwf	??_is_valid,w,c
 15118  0017F0  6ED9               	movwf	fsr2l,c
 15119  0017F2  0E01               	movlw	high _B_array
 15120  0017F4  2008               	addwfc	??_is_valid+1,w,c
 15121  0017F6  6EDA               	movwf	fsr2h,c
 15122  0017F8  C065  FFDE         	movff	_B,postinc2
 15123  0017FC  C066  FFDD         	movff	_B+1,postdec2
 15124                           
 15125                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 15126  001800  90D8               	bcf	status,0,c
 15127  001802  346D               	rlcf	_counter_step,w,c
 15128  001804  6ED9               	movwf	fsr2l,c
 15129  001806  346E               	rlcf	_counter_step+1,w,c
 15130  001808  6EDA               	movwf	fsr2h,c
 15131  00180A  0E42               	movlw	low _compartment_number
 15132  00180C  26D9               	addwf	fsr2l,f,c
 15133  00180E  0E00               	movlw	high _compartment_number
 15134  001810  22DA               	addwfc	fsr2h,f,c
 15135  001812  CFDE F007          	movff	postinc2,??_is_valid
 15136  001816  CFDD F008          	movff	postdec2,??_is_valid+1
 15137  00181A  90D8               	bcf	status,0,c
 15138  00181C  3607               	rlcf	??_is_valid,f,c
 15139  00181E  3608               	rlcf	??_is_valid+1,f,c
 15140  001820  0E20               	movlw	low _S_array
 15141  001822  2407               	addwf	??_is_valid,w,c
 15142  001824  6ED9               	movwf	fsr2l,c
 15143  001826  0E01               	movlw	high _S_array
 15144  001828  2008               	addwfc	??_is_valid+1,w,c
 15145  00182A  6EDA               	movwf	fsr2h,c
 15146  00182C  C061  FFDE         	movff	_S,postinc2
 15147  001830  C062  FFDD         	movff	_S+1,postdec2
 15148                           
 15149                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 15150  001834  90D8               	bcf	status,0,c
 15151  001836  346D               	rlcf	_counter_step,w,c
 15152  001838  6ED9               	movwf	fsr2l,c
 15153  00183A  346E               	rlcf	_counter_step+1,w,c
 15154  00183C  6EDA               	movwf	fsr2h,c
 15155  00183E  0E42               	movlw	low _compartment_number
 15156  001840  26D9               	addwf	fsr2l,f,c
 15157  001842  0E00               	movlw	high _compartment_number
 15158  001844  22DA               	addwfc	fsr2h,f,c
 15159  001846  CFDE F007          	movff	postinc2,??_is_valid
 15160  00184A  CFDD F008          	movff	postdec2,??_is_valid+1
 15161  00184E  90D8               	bcf	status,0,c
 15162  001850  3607               	rlcf	??_is_valid,f,c
 15163  001852  3608               	rlcf	??_is_valid+1,f,c
 15164  001854  0E00               	movlw	low _W_array
 15165  001856  2407               	addwf	??_is_valid,w,c
 15166  001858  6ED9               	movwf	fsr2l,c
 15167  00185A  0E01               	movlw	high _W_array
 15168  00185C  2008               	addwfc	??_is_valid+1,w,c
 15169  00185E  6EDA               	movwf	fsr2h,c
 15170  001860  C05F  FFDE         	movff	_W,postinc2
 15171  001864  C060  FFDD         	movff	_W+1,postdec2
 15172                           
 15173                           ;keypad.c: 145: }
 15174  001868  0012               	return	
 15175  00186A                     i2l718:
 15176                           
 15177                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 15178  00186A  0E78               	movlw	low _current_set2
 15179  00186C  6E01               	movwf	strcmp@s1,c
 15180  00186E  0E00               	movlw	high _current_set2
 15181  001870  6E02               	movwf	strcmp@s1+1,c
 15182  001872  0EB5               	movlw	low STR_90
 15183  001874  6E03               	movwf	strcmp@s2,c
 15184  001876  0EFF               	movlw	high STR_90
 15185  001878  6E04               	movwf	strcmp@s2+1,c
 15186  00187A  ECB1  F01F         	call	_strcmp	;wreg free
 15187  00187E  5001               	movf	?_strcmp,w,c
 15188  001880  1002               	iorwf	?_strcmp+1,w,c
 15189  001882  A4D8               	btfss	status,2,c
 15190  001884  D06A               	goto	i2l720
 15191                           
 15192                           ;keypad.c: 147: B = 2*number;
 15193  001886  90D8               	bcf	status,0,c
 15194  001888  347D               	rlcf	_number,w,c
 15195  00188A  6E65               	movwf	_B,c
 15196  00188C  347E               	rlcf	_number+1,w,c
 15197  00188E  6E66               	movwf	_B+1,c
 15198                           
 15199                           ;keypad.c: 148: S = 1*number;
 15200  001890  C07D  F061         	movff	_number,_S
 15201  001894  C07E  F062         	movff	_number+1,_S+1
 15202                           
 15203                           ;keypad.c: 149: W = number;
 15204  001898  C07D  F05F         	movff	_number,_W
 15205  00189C  C07E  F060         	movff	_number+1,_W+1
 15206                           
 15207                           ;keypad.c: 150: total_number = 4*number;
 15208  0018A0  C07D  F007         	movff	_number,??_is_valid
 15209  0018A4  C07E  F008         	movff	_number+1,??_is_valid+1
 15210  0018A8  90D8               	bcf	status,0,c
 15211  0018AA  3607               	rlcf	??_is_valid,f,c
 15212  0018AC  3608               	rlcf	??_is_valid+1,f,c
 15213  0018AE  90D8               	bcf	status,0,c
 15214  0018B0  3607               	rlcf	??_is_valid,f,c
 15215  0018B2  3608               	rlcf	??_is_valid+1,f,c
 15216  0018B4  C007  F069         	movff	??_is_valid,_total_number
 15217  0018B8  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15218                           
 15219                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 15220  0018BC  90D8               	bcf	status,0,c
 15221  0018BE  346D               	rlcf	_counter_step,w,c
 15222  0018C0  6ED9               	movwf	fsr2l,c
 15223  0018C2  346E               	rlcf	_counter_step+1,w,c
 15224  0018C4  6EDA               	movwf	fsr2h,c
 15225  0018C6  0E42               	movlw	low _compartment_number
 15226  0018C8  26D9               	addwf	fsr2l,f,c
 15227  0018CA  0E00               	movlw	high _compartment_number
 15228  0018CC  22DA               	addwfc	fsr2h,f,c
 15229  0018CE  CFDE F007          	movff	postinc2,??_is_valid
 15230  0018D2  CFDD F008          	movff	postdec2,??_is_valid+1
 15231  0018D6  90D8               	bcf	status,0,c
 15232  0018D8  3607               	rlcf	??_is_valid,f,c
 15233  0018DA  3608               	rlcf	??_is_valid+1,f,c
 15234  0018DC  0E30               	movlw	low _B_array
 15235  0018DE  2407               	addwf	??_is_valid,w,c
 15236  0018E0  6ED9               	movwf	fsr2l,c
 15237  0018E2  0E01               	movlw	high _B_array
 15238  0018E4  2008               	addwfc	??_is_valid+1,w,c
 15239  0018E6  6EDA               	movwf	fsr2h,c
 15240  0018E8  C065  FFDE         	movff	_B,postinc2
 15241  0018EC  C066  FFDD         	movff	_B+1,postdec2
 15242                           
 15243                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 15244  0018F0  90D8               	bcf	status,0,c
 15245  0018F2  346D               	rlcf	_counter_step,w,c
 15246  0018F4  6ED9               	movwf	fsr2l,c
 15247  0018F6  346E               	rlcf	_counter_step+1,w,c
 15248  0018F8  6EDA               	movwf	fsr2h,c
 15249  0018FA  0E42               	movlw	low _compartment_number
 15250  0018FC  26D9               	addwf	fsr2l,f,c
 15251  0018FE  0E00               	movlw	high _compartment_number
 15252  001900  22DA               	addwfc	fsr2h,f,c
 15253  001902  CFDE F007          	movff	postinc2,??_is_valid
 15254  001906  CFDD F008          	movff	postdec2,??_is_valid+1
 15255  00190A  90D8               	bcf	status,0,c
 15256  00190C  3607               	rlcf	??_is_valid,f,c
 15257  00190E  3608               	rlcf	??_is_valid+1,f,c
 15258  001910  0E20               	movlw	low _S_array
 15259  001912  2407               	addwf	??_is_valid,w,c
 15260  001914  6ED9               	movwf	fsr2l,c
 15261  001916  0E01               	movlw	high _S_array
 15262  001918  2008               	addwfc	??_is_valid+1,w,c
 15263  00191A  6EDA               	movwf	fsr2h,c
 15264  00191C  C061  FFDE         	movff	_S,postinc2
 15265  001920  C062  FFDD         	movff	_S+1,postdec2
 15266                           
 15267                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 15268  001924  90D8               	bcf	status,0,c
 15269  001926  346D               	rlcf	_counter_step,w,c
 15270  001928  6ED9               	movwf	fsr2l,c
 15271  00192A  346E               	rlcf	_counter_step+1,w,c
 15272  00192C  6EDA               	movwf	fsr2h,c
 15273  00192E  0E42               	movlw	low _compartment_number
 15274  001930  26D9               	addwf	fsr2l,f,c
 15275  001932  0E00               	movlw	high _compartment_number
 15276  001934  22DA               	addwfc	fsr2h,f,c
 15277  001936  CFDE F007          	movff	postinc2,??_is_valid
 15278  00193A  CFDD F008          	movff	postdec2,??_is_valid+1
 15279  00193E  90D8               	bcf	status,0,c
 15280  001940  3607               	rlcf	??_is_valid,f,c
 15281  001942  3608               	rlcf	??_is_valid+1,f,c
 15282  001944  0E00               	movlw	low _W_array
 15283  001946  2407               	addwf	??_is_valid,w,c
 15284  001948  6ED9               	movwf	fsr2l,c
 15285  00194A  0E01               	movlw	high _W_array
 15286  00194C  2008               	addwfc	??_is_valid+1,w,c
 15287  00194E  6EDA               	movwf	fsr2h,c
 15288  001950  C05F  FFDE         	movff	_W,postinc2
 15289  001954  C060  FFDD         	movff	_W+1,postdec2
 15290                           
 15291                           ;keypad.c: 155: }
 15292  001958  0012               	return	
 15293  00195A                     i2l720:
 15294                           
 15295                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 15296  00195A  0E78               	movlw	low _current_set2
 15297  00195C  6E01               	movwf	strcmp@s1,c
 15298  00195E  0E00               	movlw	high _current_set2
 15299  001960  6E02               	movwf	strcmp@s1+1,c
 15300  001962  0EAB               	movlw	low STR_91
 15301  001964  6E03               	movwf	strcmp@s2,c
 15302  001966  0EFF               	movlw	high STR_91
 15303  001968  6E04               	movwf	strcmp@s2+1,c
 15304  00196A  ECB1  F01F         	call	_strcmp	;wreg free
 15305  00196E  5001               	movf	?_strcmp,w,c
 15306  001970  1002               	iorwf	?_strcmp+1,w,c
 15307  001972  A4D8               	btfss	status,2,c
 15308  001974  D06A               	goto	i2l722
 15309                           
 15310                           ;keypad.c: 157: B = 2*number;
 15311  001976  90D8               	bcf	status,0,c
 15312  001978  347D               	rlcf	_number,w,c
 15313  00197A  6E65               	movwf	_B,c
 15314  00197C  347E               	rlcf	_number+1,w,c
 15315  00197E  6E66               	movwf	_B+1,c
 15316                           
 15317                           ;keypad.c: 158: N = 1*number;
 15318  001980  C07D  F063         	movff	_number,_N
 15319  001984  C07E  F064         	movff	_number+1,_N+1
 15320                           
 15321                           ;keypad.c: 159: W = 1*number;
 15322  001988  C07D  F05F         	movff	_number,_W
 15323  00198C  C07E  F060         	movff	_number+1,_W+1
 15324                           
 15325                           ;keypad.c: 160: total_number = 4*number;
 15326  001990  C07D  F007         	movff	_number,??_is_valid
 15327  001994  C07E  F008         	movff	_number+1,??_is_valid+1
 15328  001998  90D8               	bcf	status,0,c
 15329  00199A  3607               	rlcf	??_is_valid,f,c
 15330  00199C  3608               	rlcf	??_is_valid+1,f,c
 15331  00199E  90D8               	bcf	status,0,c
 15332  0019A0  3607               	rlcf	??_is_valid,f,c
 15333  0019A2  3608               	rlcf	??_is_valid+1,f,c
 15334  0019A4  C007  F069         	movff	??_is_valid,_total_number
 15335  0019A8  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15336                           
 15337                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 15338  0019AC  90D8               	bcf	status,0,c
 15339  0019AE  346D               	rlcf	_counter_step,w,c
 15340  0019B0  6ED9               	movwf	fsr2l,c
 15341  0019B2  346E               	rlcf	_counter_step+1,w,c
 15342  0019B4  6EDA               	movwf	fsr2h,c
 15343  0019B6  0E42               	movlw	low _compartment_number
 15344  0019B8  26D9               	addwf	fsr2l,f,c
 15345  0019BA  0E00               	movlw	high _compartment_number
 15346  0019BC  22DA               	addwfc	fsr2h,f,c
 15347  0019BE  CFDE F007          	movff	postinc2,??_is_valid
 15348  0019C2  CFDD F008          	movff	postdec2,??_is_valid+1
 15349  0019C6  90D8               	bcf	status,0,c
 15350  0019C8  3607               	rlcf	??_is_valid,f,c
 15351  0019CA  3608               	rlcf	??_is_valid+1,f,c
 15352  0019CC  0E30               	movlw	low _B_array
 15353  0019CE  2407               	addwf	??_is_valid,w,c
 15354  0019D0  6ED9               	movwf	fsr2l,c
 15355  0019D2  0E01               	movlw	high _B_array
 15356  0019D4  2008               	addwfc	??_is_valid+1,w,c
 15357  0019D6  6EDA               	movwf	fsr2h,c
 15358  0019D8  C065  FFDE         	movff	_B,postinc2
 15359  0019DC  C066  FFDD         	movff	_B+1,postdec2
 15360                           
 15361                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 15362  0019E0  90D8               	bcf	status,0,c
 15363  0019E2  346D               	rlcf	_counter_step,w,c
 15364  0019E4  6ED9               	movwf	fsr2l,c
 15365  0019E6  346E               	rlcf	_counter_step+1,w,c
 15366  0019E8  6EDA               	movwf	fsr2h,c
 15367  0019EA  0E42               	movlw	low _compartment_number
 15368  0019EC  26D9               	addwf	fsr2l,f,c
 15369  0019EE  0E00               	movlw	high _compartment_number
 15370  0019F0  22DA               	addwfc	fsr2h,f,c
 15371  0019F2  CFDE F007          	movff	postinc2,??_is_valid
 15372  0019F6  CFDD F008          	movff	postdec2,??_is_valid+1
 15373  0019FA  90D8               	bcf	status,0,c
 15374  0019FC  3607               	rlcf	??_is_valid,f,c
 15375  0019FE  3608               	rlcf	??_is_valid+1,f,c
 15376  001A00  0E10               	movlw	low _N_array
 15377  001A02  2407               	addwf	??_is_valid,w,c
 15378  001A04  6ED9               	movwf	fsr2l,c
 15379  001A06  0E01               	movlw	high _N_array
 15380  001A08  2008               	addwfc	??_is_valid+1,w,c
 15381  001A0A  6EDA               	movwf	fsr2h,c
 15382  001A0C  C063  FFDE         	movff	_N,postinc2
 15383  001A10  C064  FFDD         	movff	_N+1,postdec2
 15384                           
 15385                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 15386  001A14  90D8               	bcf	status,0,c
 15387  001A16  346D               	rlcf	_counter_step,w,c
 15388  001A18  6ED9               	movwf	fsr2l,c
 15389  001A1A  346E               	rlcf	_counter_step+1,w,c
 15390  001A1C  6EDA               	movwf	fsr2h,c
 15391  001A1E  0E42               	movlw	low _compartment_number
 15392  001A20  26D9               	addwf	fsr2l,f,c
 15393  001A22  0E00               	movlw	high _compartment_number
 15394  001A24  22DA               	addwfc	fsr2h,f,c
 15395  001A26  CFDE F007          	movff	postinc2,??_is_valid
 15396  001A2A  CFDD F008          	movff	postdec2,??_is_valid+1
 15397  001A2E  90D8               	bcf	status,0,c
 15398  001A30  3607               	rlcf	??_is_valid,f,c
 15399  001A32  3608               	rlcf	??_is_valid+1,f,c
 15400  001A34  0E00               	movlw	low _W_array
 15401  001A36  2407               	addwf	??_is_valid,w,c
 15402  001A38  6ED9               	movwf	fsr2l,c
 15403  001A3A  0E01               	movlw	high _W_array
 15404  001A3C  2008               	addwfc	??_is_valid+1,w,c
 15405  001A3E  6EDA               	movwf	fsr2h,c
 15406  001A40  C05F  FFDE         	movff	_W,postinc2
 15407  001A44  C060  FFDD         	movff	_W+1,postdec2
 15408                           
 15409                           ;keypad.c: 165: }
 15410  001A48  0012               	return	
 15411  001A4A                     i2l722:
 15412                           
 15413                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 15414  001A4A  0E78               	movlw	low _current_set2
 15415  001A4C  6E01               	movwf	strcmp@s1,c
 15416  001A4E  0E00               	movlw	high _current_set2
 15417  001A50  6E02               	movwf	strcmp@s1+1,c
 15418  001A52  0EB0               	movlw	low STR_92
 15419  001A54  6E03               	movwf	strcmp@s2,c
 15420  001A56  0EFF               	movlw	high STR_92
 15421  001A58  6E04               	movwf	strcmp@s2+1,c
 15422  001A5A  ECB1  F01F         	call	_strcmp	;wreg free
 15423  001A5E  5001               	movf	?_strcmp,w,c
 15424  001A60  1002               	iorwf	?_strcmp+1,w,c
 15425  001A62  A4D8               	btfss	status,2,c
 15426  001A64  D06A               	goto	i2l724
 15427                           
 15428                           ;keypad.c: 167: B = 1*number;
 15429  001A66  C07D  F065         	movff	_number,_B
 15430  001A6A  C07E  F066         	movff	_number+1,_B+1
 15431                           
 15432                           ;keypad.c: 168: N = 2*number;
 15433  001A6E  90D8               	bcf	status,0,c
 15434  001A70  347D               	rlcf	_number,w,c
 15435  001A72  6E63               	movwf	_N,c
 15436  001A74  347E               	rlcf	_number+1,w,c
 15437  001A76  6E64               	movwf	_N+1,c
 15438                           
 15439                           ;keypad.c: 169: W = 1*number;
 15440  001A78  C07D  F05F         	movff	_number,_W
 15441  001A7C  C07E  F060         	movff	_number+1,_W+1
 15442                           
 15443                           ;keypad.c: 170: total_number = 4*number;
 15444  001A80  C07D  F007         	movff	_number,??_is_valid
 15445  001A84  C07E  F008         	movff	_number+1,??_is_valid+1
 15446  001A88  90D8               	bcf	status,0,c
 15447  001A8A  3607               	rlcf	??_is_valid,f,c
 15448  001A8C  3608               	rlcf	??_is_valid+1,f,c
 15449  001A8E  90D8               	bcf	status,0,c
 15450  001A90  3607               	rlcf	??_is_valid,f,c
 15451  001A92  3608               	rlcf	??_is_valid+1,f,c
 15452  001A94  C007  F069         	movff	??_is_valid,_total_number
 15453  001A98  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15454                           
 15455                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 15456  001A9C  90D8               	bcf	status,0,c
 15457  001A9E  346D               	rlcf	_counter_step,w,c
 15458  001AA0  6ED9               	movwf	fsr2l,c
 15459  001AA2  346E               	rlcf	_counter_step+1,w,c
 15460  001AA4  6EDA               	movwf	fsr2h,c
 15461  001AA6  0E42               	movlw	low _compartment_number
 15462  001AA8  26D9               	addwf	fsr2l,f,c
 15463  001AAA  0E00               	movlw	high _compartment_number
 15464  001AAC  22DA               	addwfc	fsr2h,f,c
 15465  001AAE  CFDE F007          	movff	postinc2,??_is_valid
 15466  001AB2  CFDD F008          	movff	postdec2,??_is_valid+1
 15467  001AB6  90D8               	bcf	status,0,c
 15468  001AB8  3607               	rlcf	??_is_valid,f,c
 15469  001ABA  3608               	rlcf	??_is_valid+1,f,c
 15470  001ABC  0E30               	movlw	low _B_array
 15471  001ABE  2407               	addwf	??_is_valid,w,c
 15472  001AC0  6ED9               	movwf	fsr2l,c
 15473  001AC2  0E01               	movlw	high _B_array
 15474  001AC4  2008               	addwfc	??_is_valid+1,w,c
 15475  001AC6  6EDA               	movwf	fsr2h,c
 15476  001AC8  C065  FFDE         	movff	_B,postinc2
 15477  001ACC  C066  FFDD         	movff	_B+1,postdec2
 15478                           
 15479                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 15480  001AD0  90D8               	bcf	status,0,c
 15481  001AD2  346D               	rlcf	_counter_step,w,c
 15482  001AD4  6ED9               	movwf	fsr2l,c
 15483  001AD6  346E               	rlcf	_counter_step+1,w,c
 15484  001AD8  6EDA               	movwf	fsr2h,c
 15485  001ADA  0E42               	movlw	low _compartment_number
 15486  001ADC  26D9               	addwf	fsr2l,f,c
 15487  001ADE  0E00               	movlw	high _compartment_number
 15488  001AE0  22DA               	addwfc	fsr2h,f,c
 15489  001AE2  CFDE F007          	movff	postinc2,??_is_valid
 15490  001AE6  CFDD F008          	movff	postdec2,??_is_valid+1
 15491  001AEA  90D8               	bcf	status,0,c
 15492  001AEC  3607               	rlcf	??_is_valid,f,c
 15493  001AEE  3608               	rlcf	??_is_valid+1,f,c
 15494  001AF0  0E10               	movlw	low _N_array
 15495  001AF2  2407               	addwf	??_is_valid,w,c
 15496  001AF4  6ED9               	movwf	fsr2l,c
 15497  001AF6  0E01               	movlw	high _N_array
 15498  001AF8  2008               	addwfc	??_is_valid+1,w,c
 15499  001AFA  6EDA               	movwf	fsr2h,c
 15500  001AFC  C063  FFDE         	movff	_N,postinc2
 15501  001B00  C064  FFDD         	movff	_N+1,postdec2
 15502                           
 15503                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 15504  001B04  90D8               	bcf	status,0,c
 15505  001B06  346D               	rlcf	_counter_step,w,c
 15506  001B08  6ED9               	movwf	fsr2l,c
 15507  001B0A  346E               	rlcf	_counter_step+1,w,c
 15508  001B0C  6EDA               	movwf	fsr2h,c
 15509  001B0E  0E42               	movlw	low _compartment_number
 15510  001B10  26D9               	addwf	fsr2l,f,c
 15511  001B12  0E00               	movlw	high _compartment_number
 15512  001B14  22DA               	addwfc	fsr2h,f,c
 15513  001B16  CFDE F007          	movff	postinc2,??_is_valid
 15514  001B1A  CFDD F008          	movff	postdec2,??_is_valid+1
 15515  001B1E  90D8               	bcf	status,0,c
 15516  001B20  3607               	rlcf	??_is_valid,f,c
 15517  001B22  3608               	rlcf	??_is_valid+1,f,c
 15518  001B24  0E00               	movlw	low _W_array
 15519  001B26  2407               	addwf	??_is_valid,w,c
 15520  001B28  6ED9               	movwf	fsr2l,c
 15521  001B2A  0E01               	movlw	high _W_array
 15522  001B2C  2008               	addwfc	??_is_valid+1,w,c
 15523  001B2E  6EDA               	movwf	fsr2h,c
 15524  001B30  C05F  FFDE         	movff	_W,postinc2
 15525  001B34  C060  FFDD         	movff	_W+1,postdec2
 15526                           
 15527                           ;keypad.c: 175: }
 15528  001B38  0012               	return	
 15529  001B3A                     i2l724:
 15530                           
 15531                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 15532  001B3A  0E78               	movlw	low _current_set2
 15533  001B3C  6E01               	movwf	strcmp@s1,c
 15534  001B3E  0E00               	movlw	high _current_set2
 15535  001B40  6E02               	movwf	strcmp@s1+1,c
 15536  001B42  0EA6               	movlw	low STR_93
 15537  001B44  6E03               	movwf	strcmp@s2,c
 15538  001B46  0EFF               	movlw	high STR_93
 15539  001B48  6E04               	movwf	strcmp@s2+1,c
 15540  001B4A  ECB1  F01F         	call	_strcmp	;wreg free
 15541  001B4E  5001               	movf	?_strcmp,w,c
 15542  001B50  1002               	iorwf	?_strcmp+1,w,c
 15543  001B52  A4D8               	btfss	status,2,c
 15544  001B54  D055               	goto	i2l726
 15545                           
 15546                           ;keypad.c: 177: B = 1*number;
 15547  001B56  C07D  F065         	movff	_number,_B
 15548  001B5A  C07E  F066         	movff	_number+1,_B+1
 15549                           
 15550                           ;keypad.c: 178: N = 3*number;
 15551  001B5E  C07D  F001         	movff	_number,i2___wmul@multiplier
 15552  001B62  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15553  001B66  0E00               	movlw	0
 15554  001B68  6E04               	movwf	i2___wmul@multiplicand+1,c
 15555  001B6A  0E03               	movlw	3
 15556  001B6C  6E03               	movwf	i2___wmul@multiplicand,c
 15557  001B6E  EC0A  F021         	call	i2___wmul	;wreg free
 15558  001B72  C001  F063         	movff	?i2___wmul,_N
 15559  001B76  C002  F064         	movff	?i2___wmul+1,_N+1
 15560                           
 15561                           ;keypad.c: 179: total_number = 4*number;
 15562  001B7A  C07D  F007         	movff	_number,??_is_valid
 15563  001B7E  C07E  F008         	movff	_number+1,??_is_valid+1
 15564  001B82  90D8               	bcf	status,0,c
 15565  001B84  3607               	rlcf	??_is_valid,f,c
 15566  001B86  3608               	rlcf	??_is_valid+1,f,c
 15567  001B88  90D8               	bcf	status,0,c
 15568  001B8A  3607               	rlcf	??_is_valid,f,c
 15569  001B8C  3608               	rlcf	??_is_valid+1,f,c
 15570  001B8E  C007  F069         	movff	??_is_valid,_total_number
 15571  001B92  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15572                           
 15573                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 15574  001B96  90D8               	bcf	status,0,c
 15575  001B98  346D               	rlcf	_counter_step,w,c
 15576  001B9A  6ED9               	movwf	fsr2l,c
 15577  001B9C  346E               	rlcf	_counter_step+1,w,c
 15578  001B9E  6EDA               	movwf	fsr2h,c
 15579  001BA0  0E42               	movlw	low _compartment_number
 15580  001BA2  26D9               	addwf	fsr2l,f,c
 15581  001BA4  0E00               	movlw	high _compartment_number
 15582  001BA6  22DA               	addwfc	fsr2h,f,c
 15583  001BA8  CFDE F007          	movff	postinc2,??_is_valid
 15584  001BAC  CFDD F008          	movff	postdec2,??_is_valid+1
 15585  001BB0  90D8               	bcf	status,0,c
 15586  001BB2  3607               	rlcf	??_is_valid,f,c
 15587  001BB4  3608               	rlcf	??_is_valid+1,f,c
 15588  001BB6  0E30               	movlw	low _B_array
 15589  001BB8  2407               	addwf	??_is_valid,w,c
 15590  001BBA  6ED9               	movwf	fsr2l,c
 15591  001BBC  0E01               	movlw	high _B_array
 15592  001BBE  2008               	addwfc	??_is_valid+1,w,c
 15593  001BC0  6EDA               	movwf	fsr2h,c
 15594  001BC2  C065  FFDE         	movff	_B,postinc2
 15595  001BC6  C066  FFDD         	movff	_B+1,postdec2
 15596                           
 15597                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 15598  001BCA  90D8               	bcf	status,0,c
 15599  001BCC  346D               	rlcf	_counter_step,w,c
 15600  001BCE  6ED9               	movwf	fsr2l,c
 15601  001BD0  346E               	rlcf	_counter_step+1,w,c
 15602  001BD2  6EDA               	movwf	fsr2h,c
 15603  001BD4  0E42               	movlw	low _compartment_number
 15604  001BD6  26D9               	addwf	fsr2l,f,c
 15605  001BD8  0E00               	movlw	high _compartment_number
 15606  001BDA  22DA               	addwfc	fsr2h,f,c
 15607  001BDC  CFDE F007          	movff	postinc2,??_is_valid
 15608  001BE0  CFDD F008          	movff	postdec2,??_is_valid+1
 15609  001BE4  90D8               	bcf	status,0,c
 15610  001BE6  3607               	rlcf	??_is_valid,f,c
 15611  001BE8  3608               	rlcf	??_is_valid+1,f,c
 15612  001BEA  0E10               	movlw	low _N_array
 15613  001BEC  2407               	addwf	??_is_valid,w,c
 15614  001BEE  6ED9               	movwf	fsr2l,c
 15615  001BF0  0E01               	movlw	high _N_array
 15616  001BF2  2008               	addwfc	??_is_valid+1,w,c
 15617  001BF4  6EDA               	movwf	fsr2h,c
 15618  001BF6  C063  FFDE         	movff	_N,postinc2
 15619  001BFA  C064  FFDD         	movff	_N+1,postdec2
 15620                           
 15621                           ;keypad.c: 184: }
 15622  001BFE  0012               	return	
 15623  001C00                     i2l726:
 15624                           
 15625                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 15626  001C00  0E78               	movlw	low _current_set2
 15627  001C02  6E01               	movwf	strcmp@s1,c
 15628  001C04  0E00               	movlw	high _current_set2
 15629  001C06  6E02               	movwf	strcmp@s1+1,c
 15630  001C08  0EC4               	movlw	low STR_94
 15631  001C0A  6E03               	movwf	strcmp@s2,c
 15632  001C0C  0EFF               	movlw	high STR_94
 15633  001C0E  6E04               	movwf	strcmp@s2+1,c
 15634  001C10  ECB1  F01F         	call	_strcmp	;wreg free
 15635  001C14  5001               	movf	?_strcmp,w,c
 15636  001C16  1002               	iorwf	?_strcmp+1,w,c
 15637  001C18  A4D8               	btfss	status,2,c
 15638  001C1A  0012               	return	
 15639                           
 15640                           ;keypad.c: 186: B = 1*number;
 15641  001C1C  C07D  F065         	movff	_number,_B
 15642  001C20  C07E  F066         	movff	_number+1,_B+1
 15643                           
 15644                           ;keypad.c: 187: W = 3*number;
 15645  001C24  C07D  F001         	movff	_number,i2___wmul@multiplier
 15646  001C28  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 15647  001C2C  0E00               	movlw	0
 15648  001C2E  6E04               	movwf	i2___wmul@multiplicand+1,c
 15649  001C30  0E03               	movlw	3
 15650  001C32  6E03               	movwf	i2___wmul@multiplicand,c
 15651  001C34  EC0A  F021         	call	i2___wmul	;wreg free
 15652  001C38  C001  F05F         	movff	?i2___wmul,_W
 15653  001C3C  C002  F060         	movff	?i2___wmul+1,_W+1
 15654                           
 15655                           ;keypad.c: 188: total_number = 4*number;
 15656  001C40  C07D  F007         	movff	_number,??_is_valid
 15657  001C44  C07E  F008         	movff	_number+1,??_is_valid+1
 15658  001C48  90D8               	bcf	status,0,c
 15659  001C4A  3607               	rlcf	??_is_valid,f,c
 15660  001C4C  3608               	rlcf	??_is_valid+1,f,c
 15661  001C4E  90D8               	bcf	status,0,c
 15662  001C50  3607               	rlcf	??_is_valid,f,c
 15663  001C52  3608               	rlcf	??_is_valid+1,f,c
 15664  001C54  C007  F069         	movff	??_is_valid,_total_number
 15665  001C58  C008  F06A         	movff	??_is_valid+1,_total_number+1
 15666                           
 15667                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 15668  001C5C  90D8               	bcf	status,0,c
 15669  001C5E  346D               	rlcf	_counter_step,w,c
 15670  001C60  6ED9               	movwf	fsr2l,c
 15671  001C62  346E               	rlcf	_counter_step+1,w,c
 15672  001C64  6EDA               	movwf	fsr2h,c
 15673  001C66  0E42               	movlw	low _compartment_number
 15674  001C68  26D9               	addwf	fsr2l,f,c
 15675  001C6A  0E00               	movlw	high _compartment_number
 15676  001C6C  22DA               	addwfc	fsr2h,f,c
 15677  001C6E  CFDE F007          	movff	postinc2,??_is_valid
 15678  001C72  CFDD F008          	movff	postdec2,??_is_valid+1
 15679  001C76  90D8               	bcf	status,0,c
 15680  001C78  3607               	rlcf	??_is_valid,f,c
 15681  001C7A  3608               	rlcf	??_is_valid+1,f,c
 15682  001C7C  0E30               	movlw	low _B_array
 15683  001C7E  2407               	addwf	??_is_valid,w,c
 15684  001C80  6ED9               	movwf	fsr2l,c
 15685  001C82  0E01               	movlw	high _B_array
 15686  001C84  2008               	addwfc	??_is_valid+1,w,c
 15687  001C86  6EDA               	movwf	fsr2h,c
 15688  001C88  C065  FFDE         	movff	_B,postinc2
 15689  001C8C  C066  FFDD         	movff	_B+1,postdec2
 15690                           
 15691                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 15692  001C90  90D8               	bcf	status,0,c
 15693  001C92  346D               	rlcf	_counter_step,w,c
 15694  001C94  6ED9               	movwf	fsr2l,c
 15695  001C96  346E               	rlcf	_counter_step+1,w,c
 15696  001C98  6EDA               	movwf	fsr2h,c
 15697  001C9A  0E42               	movlw	low _compartment_number
 15698  001C9C  26D9               	addwf	fsr2l,f,c
 15699  001C9E  0E00               	movlw	high _compartment_number
 15700  001CA0  22DA               	addwfc	fsr2h,f,c
 15701  001CA2  CFDE F007          	movff	postinc2,??_is_valid
 15702  001CA6  CFDD F008          	movff	postdec2,??_is_valid+1
 15703  001CAA  90D8               	bcf	status,0,c
 15704  001CAC  3607               	rlcf	??_is_valid,f,c
 15705  001CAE  3608               	rlcf	??_is_valid+1,f,c
 15706  001CB0  0E00               	movlw	low _W_array
 15707  001CB2  2407               	addwf	??_is_valid,w,c
 15708  001CB4  6ED9               	movwf	fsr2l,c
 15709  001CB6  0E01               	movlw	high _W_array
 15710  001CB8  2008               	addwfc	??_is_valid+1,w,c
 15711  001CBA  6EDA               	movwf	fsr2h,c
 15712  001CBC  C05F  FFDE         	movff	_W,postinc2
 15713  001CC0  C060  FFDD         	movff	_W+1,postdec2
 15714  001CC4  0012               	return	
 15715  001CC6                     __end_of_is_valid:
 15716                           	opt stack 0
 15717                           pclatu	equ	0xFFB
 15718                           pclath	equ	0xFFA
 15719                           tblptru	equ	0xFF8
 15720                           tblptrh	equ	0xFF7
 15721                           tblptrl	equ	0xFF6
 15722                           tablat	equ	0xFF5
 15723                           prodh	equ	0xFF4
 15724                           prodl	equ	0xFF3
 15725                           intcon	equ	0xFF2
 15726                           intcon3	equ	0xFF0
 15727                           indf0	equ	0xFEF
 15728                           postinc0	equ	0xFEE
 15729                           fsr0h	equ	0xFEA
 15730                           fsr0l	equ	0xFE9
 15731                           wreg	equ	0xFE8
 15732                           indf1	equ	0xFE7
 15733                           fsr1h	equ	0xFE2
 15734                           fsr1l	equ	0xFE1
 15735                           indf2	equ	0xFDF
 15736                           postinc2	equ	0xFDE
 15737                           postdec2	equ	0xFDD
 15738                           fsr2h	equ	0xFDA
 15739                           fsr2l	equ	0xFD9
 15740                           status	equ	0xFD8
 15741                           
 15742 ;; *************** function i2___wmul *****************
 15743 ;; Defined at:
 15744 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 15745 ;; Parameters:    Size  Location     Type
 15746 ;;  multiplier      2    0[COMRAM] unsigned int 
 15747 ;;  multiplicand    2    2[COMRAM] unsigned int 
 15748 ;; Auto vars:     Size  Location     Type
 15749 ;;  __wmul          2    4[COMRAM] unsigned int 
 15750 ;; Return value:  Size  Location     Type
 15751 ;;                  2    0[COMRAM] unsigned int 
 15752 ;; Registers used:
 15753 ;;		wreg, status,2, status,0, prodl, prodh
 15754 ;; Tracked objects:
 15755 ;;		On entry : 0/0
 15756 ;;		On exit  : 0/0
 15757 ;;		Unchanged: 0/0
 15758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15762 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15763 ;;Total ram usage:        6 bytes
 15764 ;; Hardware stack levels used:    1
 15765 ;; This function calls:
 15766 ;;		Nothing
 15767 ;; This function is called by:
 15768 ;;		_interruptHandler
 15769 ;;		_is_valid
 15770 ;;		i2_printf
 15771 ;; This function uses a non-reentrant model
 15772 ;;
 15773                           
 15774                           	psect	text58
 15775  004214                     __ptext58:
 15776                           	opt stack 0
 15777  004214                     i2___wmul:
 15778                           	opt stack 24
 15779                           
 15780                           ;incstack = 0
 15781  004214  5001               	movf	i2___wmul@multiplier,w,c
 15782  004216  0203               	mulwf	i2___wmul@multiplicand,c
 15783  004218  CFF3 F005          	movff	prodl,i2___wmul@product
 15784  00421C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 15785  004220  5001               	movf	i2___wmul@multiplier,w,c
 15786  004222  0204               	mulwf	i2___wmul@multiplicand+1,c
 15787  004224  50F3               	movf	prodl,w,c
 15788  004226  2606               	addwf	i2___wmul@product+1,f,c
 15789  004228  5002               	movf	i2___wmul@multiplier+1,w,c
 15790  00422A  0203               	mulwf	i2___wmul@multiplicand,c
 15791  00422C  50F3               	movf	prodl,w,c
 15792  00422E  2606               	addwf	i2___wmul@product+1,f,c
 15793  004230  C005  F001         	movff	i2___wmul@product,?i2___wmul
 15794  004234  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 15795  004238  0012               	return	
 15796  00423A                     __end_ofi2___wmul:
 15797                           	opt stack 0
 15798                           pclatu	equ	0xFFB
 15799                           pclath	equ	0xFFA
 15800                           tblptru	equ	0xFF8
 15801                           tblptrh	equ	0xFF7
 15802                           tblptrl	equ	0xFF6
 15803                           tablat	equ	0xFF5
 15804                           prodh	equ	0xFF4
 15805                           prodl	equ	0xFF3
 15806                           intcon	equ	0xFF2
 15807                           intcon3	equ	0xFF0
 15808                           indf0	equ	0xFEF
 15809                           postinc0	equ	0xFEE
 15810                           fsr0h	equ	0xFEA
 15811                           fsr0l	equ	0xFE9
 15812                           wreg	equ	0xFE8
 15813                           indf1	equ	0xFE7
 15814                           fsr1h	equ	0xFE2
 15815                           fsr1l	equ	0xFE1
 15816                           indf2	equ	0xFDF
 15817                           postinc2	equ	0xFDE
 15818                           postdec2	equ	0xFDD
 15819                           fsr2h	equ	0xFDA
 15820                           fsr2l	equ	0xFD9
 15821                           status	equ	0xFD8
 15822                           
 15823 ;; *************** function _strcmp *****************
 15824 ;; Defined at:
 15825 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 15826 ;; Parameters:    Size  Location     Type
 15827 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 15828 ;;		 -> current_set2(5), 
 15829 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 15830 ;;		 -> STR_94(5), STR_93(5), STR_92(5), STR_91(5), 
 15831 ;;		 -> STR_90(5), STR_89(5), STR_88(5), STR_87(4), 
 15832 ;;		 -> STR_86(4), STR_85(4), STR_84(4), STR_83(4), 
 15833 ;;		 -> STR_82(4), STR_81(3), STR_80(3), STR_79(3), 
 15834 ;;		 -> STR_78(2), STR_77(2), STR_76(2), STR_75(2), 
 15835 ;; Auto vars:     Size  Location     Type
 15836 ;;  r               1    5[COMRAM] char 
 15837 ;; Return value:  Size  Location     Type
 15838 ;;                  2    0[COMRAM] int 
 15839 ;; Registers used:
 15840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15841 ;; Tracked objects:
 15842 ;;		On entry : 0/0
 15843 ;;		On exit  : 0/0
 15844 ;;		Unchanged: 0/0
 15845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15846 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15848 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15849 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15850 ;;Total ram usage:        6 bytes
 15851 ;; Hardware stack levels used:    1
 15852 ;; This function calls:
 15853 ;;		Nothing
 15854 ;; This function is called by:
 15855 ;;		_is_valid
 15856 ;; This function uses a non-reentrant model
 15857 ;;
 15858                           
 15859                           	psect	text59
 15860  003F62                     __ptext59:
 15861                           	opt stack 0
 15862  003F62                     _strcmp:
 15863                           	opt stack 24
 15864                           
 15865                           ;incstack = 0
 15866  003F62  D004               	goto	i2l1435
 15867  003F64  4A01               	infsnz	strcmp@s1,f,c
 15868  003F66  2A02               	incf	strcmp@s1+1,f,c
 15869  003F68  4A03               	infsnz	strcmp@s2,f,c
 15870  003F6A  2A04               	incf	strcmp@s2+1,f,c
 15871  003F6C                     i2l1435:
 15872  003F6C  C001  FFD9         	movff	strcmp@s1,fsr2l
 15873  003F70  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 15874  003F74  50DF               	movf	indf2,w,c
 15875  003F76  6E05               	movwf	??_strcmp& (0+255),c
 15876  003F78  C003  FFF6         	movff	strcmp@s2,tblptrl
 15877  003F7C  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 15878  003F80                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15879  003F80  6AF8               	clrf	tblptru,c
 15880  003F82                     	endif
 15881  003F82                     	if	0	;tblptru may be non-zero
 15882  003F82                     	endif
 15883  003F82  0008               	tblrd		*
 15884  003F84  50F5               	movf	tablat,w,c
 15885  003F86  0800               	sublw	0
 15886  003F88  2405               	addwf	??_strcmp,w,c
 15887  003F8A  6E06               	movwf	strcmp@r,c
 15888  003F8C  5006               	movf	strcmp@r,w,c
 15889  003F8E  A4D8               	btfss	status,2,c
 15890  003F90  D007               	goto	i2u308_40
 15891  003F92  C001  FFD9         	movff	strcmp@s1,fsr2l
 15892  003F96  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 15893  003F9A  50DF               	movf	indf2,w,c
 15894  003F9C  A4D8               	btfss	status,2,c
 15895  003F9E  D7E2               	goto	i2l1436
 15896  003FA0                     i2u308_40:
 15897  003FA0  5006               	movf	strcmp@r,w,c
 15898  003FA2  6E01               	movwf	?_strcmp,c
 15899  003FA4  6A02               	clrf	?_strcmp+1,c
 15900  003FA6  BE01               	btfsc	?_strcmp,7,c
 15901  003FA8  0602               	decf	?_strcmp+1,f,c
 15902  003FAA  0012               	return	
 15903  003FAC                     __end_of_strcmp:
 15904                           	opt stack 0
 15905                           pclatu	equ	0xFFB
 15906                           pclath	equ	0xFFA
 15907                           tblptru	equ	0xFF8
 15908                           tblptrh	equ	0xFF7
 15909                           tblptrl	equ	0xFF6
 15910                           tablat	equ	0xFF5
 15911                           prodh	equ	0xFF4
 15912                           prodl	equ	0xFF3
 15913                           intcon	equ	0xFF2
 15914                           intcon3	equ	0xFF0
 15915                           indf0	equ	0xFEF
 15916                           postinc0	equ	0xFEE
 15917                           fsr0h	equ	0xFEA
 15918                           fsr0l	equ	0xFE9
 15919                           wreg	equ	0xFE8
 15920                           indf1	equ	0xFE7
 15921                           fsr1h	equ	0xFE2
 15922                           fsr1l	equ	0xFE1
 15923                           indf2	equ	0xFDF
 15924                           postinc2	equ	0xFDE
 15925                           postdec2	equ	0xFDD
 15926                           fsr2h	equ	0xFDA
 15927                           fsr2l	equ	0xFD9
 15928                           status	equ	0xFD8
 15929                           
 15930 ;; *************** function _generate_compartment_array *****************
 15931 ;; Defined at:
 15932 ;;		line 220 in file "keypad.c"
 15933 ;; Parameters:    Size  Location     Type
 15934 ;;  step            2    0[COMRAM] int 
 15935 ;; Auto vars:     Size  Location     Type
 15936 ;;		None
 15937 ;; Return value:  Size  Location     Type
 15938 ;;                  1    wreg      void 
 15939 ;; Registers used:
 15940 ;;		wreg, status,2, status,0
 15941 ;; Tracked objects:
 15942 ;;		On entry : 0/0
 15943 ;;		On exit  : 0/0
 15944 ;;		Unchanged: 0/0
 15945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15946 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15948 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15949 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15950 ;;Total ram usage:        4 bytes
 15951 ;; Hardware stack levels used:    1
 15952 ;; This function calls:
 15953 ;;		Nothing
 15954 ;; This function is called by:
 15955 ;;		_interruptHandler
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           	psect	text60
 15960  003120                     __ptext60:
 15961                           	opt stack 0
 15962  003120                     _generate_compartment_array:
 15963                           	opt stack 25
 15964                           
 15965                           ;keypad.c: 222: switch(step){
 15966                           
 15967                           ;incstack = 0
 15968  003120  D11C               	goto	i2l738
 15969  003122                     
 15970                           ;keypad.c: 224: compartment_array[1] = 1;
 15971  003122  0E00               	movlw	0
 15972  003124  0100               	movlb	0	; () banked
 15973  003126  6F83               	movwf	(_compartment_array+3)& (0+255),b
 15974  003128  0E01               	movlw	1
 15975  00312A  6F82               	movwf	(_compartment_array+2)& (0+255),b
 15976                           
 15977                           ;keypad.c: 225: compartment_array[3] = 1;
 15978  00312C  0E00               	movlw	0
 15979  00312E  6F87               	movwf	(_compartment_array+7)& (0+255),b
 15980  003130  0E01               	movlw	1
 15981  003132  6F86               	movwf	(_compartment_array+6)& (0+255),b
 15982                           
 15983                           ;keypad.c: 226: compartment_array[5] = 1;
 15984  003134  0E00               	movlw	0
 15985  003136  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 15986  003138  0E01               	movlw	1
 15987  00313A  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 15988                           
 15989                           ;keypad.c: 227: compartment_array[7] = 1;
 15990  00313C  0E00               	movlw	0
 15991  00313E  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 15992  003140  0E01               	movlw	1
 15993  003142  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 15994                           
 15995                           ;keypad.c: 230: compartment_number[0] = 1;
 15996  003144  0E00               	movlw	0
 15997  003146  6E43               	movwf	_compartment_number+1,c
 15998  003148  0E01               	movlw	1
 15999  00314A  6E42               	movwf	_compartment_number,c
 16000                           
 16001                           ;keypad.c: 231: compartment_number[1] = 3;
 16002  00314C  0E00               	movlw	0
 16003  00314E  6E45               	movwf	_compartment_number+3,c
 16004  003150  0E03               	movlw	3
 16005  003152  6E44               	movwf	_compartment_number+2,c
 16006                           
 16007                           ;keypad.c: 232: compartment_number[2] = 5;
 16008  003154  0E00               	movlw	0
 16009  003156  6E47               	movwf	_compartment_number+5,c
 16010  003158  0E05               	movlw	5
 16011  00315A  6E46               	movwf	_compartment_number+4,c
 16012                           
 16013                           ;keypad.c: 233: compartment_number[3] = 7;
 16014  00315C  0E00               	movlw	0
 16015  00315E  6E49               	movwf	_compartment_number+7,c
 16016  003160  0E07               	movlw	7
 16017  003162  6E48               	movwf	_compartment_number+6,c
 16018                           
 16019                           ;keypad.c: 235: break;
 16020  003164  0012               	return	
 16021  003166                     
 16022                           ;keypad.c: 237: compartment_array[0] = 1;
 16023                           
 16024                           ; BSR set to: 0
 16025  003166  0E00               	movlw	0
 16026  003168  0100               	movlb	0	; () banked
 16027  00316A  6F81               	movwf	(_compartment_array+1)& (0+255),b
 16028  00316C  0E01               	movlw	1
 16029  00316E  6F80               	movwf	_compartment_array& (0+255),b
 16030                           
 16031                           ;keypad.c: 238: compartment_array[1] = 1;
 16032  003170  0E00               	movlw	0
 16033  003172  6F83               	movwf	(_compartment_array+3)& (0+255),b
 16034  003174  0E01               	movlw	1
 16035  003176  6F82               	movwf	(_compartment_array+2)& (0+255),b
 16036                           
 16037                           ;keypad.c: 239: compartment_array[3] = 1;
 16038  003178  0E00               	movlw	0
 16039  00317A  6F87               	movwf	(_compartment_array+7)& (0+255),b
 16040  00317C  0E01               	movlw	1
 16041  00317E  6F86               	movwf	(_compartment_array+6)& (0+255),b
 16042                           
 16043                           ;keypad.c: 240: compartment_array[4] = 1;
 16044  003180  0E00               	movlw	0
 16045  003182  6F89               	movwf	(_compartment_array+9)& (0+255),b
 16046  003184  0E01               	movlw	1
 16047  003186  6F88               	movwf	(_compartment_array+8)& (0+255),b
 16048                           
 16049                           ;keypad.c: 241: compartment_array[6] = 1;
 16050  003188  0E00               	movlw	0
 16051  00318A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 16052  00318C  0E01               	movlw	1
 16053  00318E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 16054                           
 16055                           ;keypad.c: 245: compartment_number[0] = 0;
 16056  003190  0E00               	movlw	0
 16057  003192  6E43               	movwf	_compartment_number+1,c
 16058  003194  0E00               	movlw	0
 16059  003196  6E42               	movwf	_compartment_number,c
 16060                           
 16061                           ;keypad.c: 246: compartment_number[1] = 1;
 16062  003198  0E00               	movlw	0
 16063  00319A  6E45               	movwf	_compartment_number+3,c
 16064  00319C  0E01               	movlw	1
 16065  00319E  6E44               	movwf	_compartment_number+2,c
 16066                           
 16067                           ;keypad.c: 247: compartment_number[2] = 3;
 16068  0031A0  0E00               	movlw	0
 16069  0031A2  6E47               	movwf	_compartment_number+5,c
 16070  0031A4  0E03               	movlw	3
 16071  0031A6  6E46               	movwf	_compartment_number+4,c
 16072                           
 16073                           ;keypad.c: 248: compartment_number[3] = 4;
 16074  0031A8  0E00               	movlw	0
 16075  0031AA  6E49               	movwf	_compartment_number+7,c
 16076  0031AC  0E04               	movlw	4
 16077  0031AE  6E48               	movwf	_compartment_number+6,c
 16078                           
 16079                           ;keypad.c: 249: compartment_number[4] = 6;
 16080  0031B0  0E00               	movlw	0
 16081  0031B2  6E4B               	movwf	_compartment_number+9,c
 16082  0031B4  0E06               	movlw	6
 16083  0031B6  6E4A               	movwf	_compartment_number+8,c
 16084                           
 16085                           ;keypad.c: 251: break;
 16086  0031B8  0012               	return	
 16087  0031BA                     
 16088                           ;keypad.c: 254: compartment_array[0] = 1;
 16089                           
 16090                           ; BSR set to: 0
 16091  0031BA  0E00               	movlw	0
 16092  0031BC  0100               	movlb	0	; () banked
 16093  0031BE  6F81               	movwf	(_compartment_array+1)& (0+255),b
 16094  0031C0  0E01               	movlw	1
 16095  0031C2  6F80               	movwf	_compartment_array& (0+255),b
 16096                           
 16097                           ;keypad.c: 255: compartment_array[1] = 1;
 16098  0031C4  0E00               	movlw	0
 16099  0031C6  6F83               	movwf	(_compartment_array+3)& (0+255),b
 16100  0031C8  0E01               	movlw	1
 16101  0031CA  6F82               	movwf	(_compartment_array+2)& (0+255),b
 16102                           
 16103                           ;keypad.c: 256: compartment_array[2] = 1;
 16104  0031CC  0E00               	movlw	0
 16105  0031CE  6F85               	movwf	(_compartment_array+5)& (0+255),b
 16106  0031D0  0E01               	movlw	1
 16107  0031D2  6F84               	movwf	(_compartment_array+4)& (0+255),b
 16108                           
 16109                           ;keypad.c: 257: compartment_array[4] = 1;
 16110  0031D4  0E00               	movlw	0
 16111  0031D6  6F89               	movwf	(_compartment_array+9)& (0+255),b
 16112  0031D8  0E01               	movlw	1
 16113  0031DA  6F88               	movwf	(_compartment_array+8)& (0+255),b
 16114                           
 16115                           ;keypad.c: 258: compartment_array[5] = 1;
 16116  0031DC  0E00               	movlw	0
 16117  0031DE  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 16118  0031E0  0E01               	movlw	1
 16119  0031E2  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 16120                           
 16121                           ;keypad.c: 259: compartment_array[6] = 1;
 16122  0031E4  0E00               	movlw	0
 16123  0031E6  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 16124  0031E8  0E01               	movlw	1
 16125  0031EA  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 16126                           
 16127                           ;keypad.c: 262: compartment_number[0] = 0;
 16128  0031EC  0E00               	movlw	0
 16129  0031EE  6E43               	movwf	_compartment_number+1,c
 16130  0031F0  0E00               	movlw	0
 16131  0031F2  6E42               	movwf	_compartment_number,c
 16132                           
 16133                           ;keypad.c: 263: compartment_number[1] = 1;
 16134  0031F4  0E00               	movlw	0
 16135  0031F6  6E45               	movwf	_compartment_number+3,c
 16136  0031F8  0E01               	movlw	1
 16137  0031FA  6E44               	movwf	_compartment_number+2,c
 16138                           
 16139                           ;keypad.c: 264: compartment_number[2] = 2;
 16140  0031FC  0E00               	movlw	0
 16141  0031FE  6E47               	movwf	_compartment_number+5,c
 16142  003200  0E02               	movlw	2
 16143  003202  6E46               	movwf	_compartment_number+4,c
 16144                           
 16145                           ;keypad.c: 265: compartment_number[3] = 4;
 16146  003204  0E00               	movlw	0
 16147  003206  6E49               	movwf	_compartment_number+7,c
 16148  003208  0E04               	movlw	4
 16149  00320A  6E48               	movwf	_compartment_number+6,c
 16150                           
 16151                           ;keypad.c: 266: compartment_number[4] = 5;
 16152  00320C  0E00               	movlw	0
 16153  00320E  6E4B               	movwf	_compartment_number+9,c
 16154  003210  0E05               	movlw	5
 16155  003212  6E4A               	movwf	_compartment_number+8,c
 16156                           
 16157                           ;keypad.c: 267: compartment_number[5] = 6;
 16158  003214  0E00               	movlw	0
 16159  003216  6E4D               	movwf	_compartment_number+11,c
 16160  003218  0E06               	movlw	6
 16161  00321A  6E4C               	movwf	_compartment_number+10,c
 16162                           
 16163                           ;keypad.c: 269: break;
 16164  00321C  0012               	return	
 16165  00321E                     
 16166                           ;keypad.c: 271: compartment_array[0] = 1;
 16167                           
 16168                           ; BSR set to: 0
 16169  00321E  0E00               	movlw	0
 16170  003220  0100               	movlb	0	; () banked
 16171  003222  6F81               	movwf	(_compartment_array+1)& (0+255),b
 16172  003224  0E01               	movlw	1
 16173  003226  6F80               	movwf	_compartment_array& (0+255),b
 16174                           
 16175                           ;keypad.c: 272: compartment_array[1] = 1;
 16176  003228  0E00               	movlw	0
 16177  00322A  6F83               	movwf	(_compartment_array+3)& (0+255),b
 16178  00322C  0E01               	movlw	1
 16179  00322E  6F82               	movwf	(_compartment_array+2)& (0+255),b
 16180                           
 16181                           ;keypad.c: 273: compartment_array[2] = 1;
 16182  003230  0E00               	movlw	0
 16183  003232  6F85               	movwf	(_compartment_array+5)& (0+255),b
 16184  003234  0E01               	movlw	1
 16185  003236  6F84               	movwf	(_compartment_array+4)& (0+255),b
 16186                           
 16187                           ;keypad.c: 274: compartment_array[3] = 1;
 16188  003238  0E00               	movlw	0
 16189  00323A  6F87               	movwf	(_compartment_array+7)& (0+255),b
 16190  00323C  0E01               	movlw	1
 16191  00323E  6F86               	movwf	(_compartment_array+6)& (0+255),b
 16192                           
 16193                           ;keypad.c: 275: compartment_array[4] = 1;
 16194  003240  0E00               	movlw	0
 16195  003242  6F89               	movwf	(_compartment_array+9)& (0+255),b
 16196  003244  0E01               	movlw	1
 16197  003246  6F88               	movwf	(_compartment_array+8)& (0+255),b
 16198                           
 16199                           ;keypad.c: 276: compartment_array[5] = 1;
 16200  003248  0E00               	movlw	0
 16201  00324A  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 16202  00324C  0E01               	movlw	1
 16203  00324E  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 16204                           
 16205                           ;keypad.c: 277: compartment_array[6] = 1;
 16206  003250  0E00               	movlw	0
 16207  003252  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 16208  003254  0E01               	movlw	1
 16209  003256  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 16210                           
 16211                           ;keypad.c: 280: compartment_number[0] = 0;
 16212  003258  0E00               	movlw	0
 16213  00325A  6E43               	movwf	_compartment_number+1,c
 16214  00325C  0E00               	movlw	0
 16215  00325E  6E42               	movwf	_compartment_number,c
 16216                           
 16217                           ;keypad.c: 281: compartment_number[1] = 1;
 16218  003260  0E00               	movlw	0
 16219  003262  6E45               	movwf	_compartment_number+3,c
 16220  003264  0E01               	movlw	1
 16221  003266  6E44               	movwf	_compartment_number+2,c
 16222                           
 16223                           ;keypad.c: 282: compartment_number[2] = 2;
 16224  003268  0E00               	movlw	0
 16225  00326A  6E47               	movwf	_compartment_number+5,c
 16226  00326C  0E02               	movlw	2
 16227  00326E  6E46               	movwf	_compartment_number+4,c
 16228                           
 16229                           ;keypad.c: 283: compartment_number[3] = 3;
 16230  003270  0E00               	movlw	0
 16231  003272  6E49               	movwf	_compartment_number+7,c
 16232  003274  0E03               	movlw	3
 16233  003276  6E48               	movwf	_compartment_number+6,c
 16234                           
 16235                           ;keypad.c: 284: compartment_number[4] = 4;
 16236  003278  0E00               	movlw	0
 16237  00327A  6E4B               	movwf	_compartment_number+9,c
 16238  00327C  0E04               	movlw	4
 16239  00327E  6E4A               	movwf	_compartment_number+8,c
 16240                           
 16241                           ;keypad.c: 285: compartment_number[5] = 5;
 16242  003280  0E00               	movlw	0
 16243  003282  6E4D               	movwf	_compartment_number+11,c
 16244  003284  0E05               	movlw	5
 16245  003286  6E4C               	movwf	_compartment_number+10,c
 16246                           
 16247                           ;keypad.c: 286: compartment_number[6] = 6;
 16248  003288  0E00               	movlw	0
 16249  00328A  6E4F               	movwf	_compartment_number+13,c
 16250  00328C  0E06               	movlw	6
 16251  00328E  6E4E               	movwf	_compartment_number+12,c
 16252                           
 16253                           ;keypad.c: 288: break;
 16254  003290  0012               	return	
 16255  003292                     
 16256                           ;keypad.c: 290: compartment_array[0] = 1;
 16257                           
 16258                           ; BSR set to: 0
 16259  003292  0E00               	movlw	0
 16260  003294  0100               	movlb	0	; () banked
 16261  003296  6F81               	movwf	(_compartment_array+1)& (0+255),b
 16262  003298  0E01               	movlw	1
 16263  00329A  6F80               	movwf	_compartment_array& (0+255),b
 16264                           
 16265                           ;keypad.c: 291: compartment_array[1] = 1;
 16266  00329C  0E00               	movlw	0
 16267  00329E  6F83               	movwf	(_compartment_array+3)& (0+255),b
 16268  0032A0  0E01               	movlw	1
 16269  0032A2  6F82               	movwf	(_compartment_array+2)& (0+255),b
 16270                           
 16271                           ;keypad.c: 292: compartment_array[2] = 1;
 16272  0032A4  0E00               	movlw	0
 16273  0032A6  6F85               	movwf	(_compartment_array+5)& (0+255),b
 16274  0032A8  0E01               	movlw	1
 16275  0032AA  6F84               	movwf	(_compartment_array+4)& (0+255),b
 16276                           
 16277                           ;keypad.c: 293: compartment_array[3] = 1;
 16278  0032AC  0E00               	movlw	0
 16279  0032AE  6F87               	movwf	(_compartment_array+7)& (0+255),b
 16280  0032B0  0E01               	movlw	1
 16281  0032B2  6F86               	movwf	(_compartment_array+6)& (0+255),b
 16282                           
 16283                           ;keypad.c: 294: compartment_array[4] = 1;
 16284  0032B4  0E00               	movlw	0
 16285  0032B6  6F89               	movwf	(_compartment_array+9)& (0+255),b
 16286  0032B8  0E01               	movlw	1
 16287  0032BA  6F88               	movwf	(_compartment_array+8)& (0+255),b
 16288                           
 16289                           ;keypad.c: 295: compartment_array[5] = 1;
 16290  0032BC  0E00               	movlw	0
 16291  0032BE  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 16292  0032C0  0E01               	movlw	1
 16293  0032C2  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 16294                           
 16295                           ;keypad.c: 296: compartment_array[6] = 1;
 16296  0032C4  0E00               	movlw	0
 16297  0032C6  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 16298  0032C8  0E01               	movlw	1
 16299  0032CA  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 16300                           
 16301                           ;keypad.c: 297: compartment_array[7] = 1;
 16302  0032CC  0E00               	movlw	0
 16303  0032CE  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 16304  0032D0  0E01               	movlw	1
 16305  0032D2  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 16306                           
 16307                           ;keypad.c: 300: compartment_number[0] = 0;
 16308  0032D4  0E00               	movlw	0
 16309  0032D6  6E43               	movwf	_compartment_number+1,c
 16310  0032D8  0E00               	movlw	0
 16311  0032DA  6E42               	movwf	_compartment_number,c
 16312                           
 16313                           ;keypad.c: 301: compartment_number[1] = 1;
 16314  0032DC  0E00               	movlw	0
 16315  0032DE  6E45               	movwf	_compartment_number+3,c
 16316  0032E0  0E01               	movlw	1
 16317  0032E2  6E44               	movwf	_compartment_number+2,c
 16318                           
 16319                           ;keypad.c: 302: compartment_number[2] = 2;
 16320  0032E4  0E00               	movlw	0
 16321  0032E6  6E47               	movwf	_compartment_number+5,c
 16322  0032E8  0E02               	movlw	2
 16323  0032EA  6E46               	movwf	_compartment_number+4,c
 16324                           
 16325                           ;keypad.c: 303: compartment_number[3] = 3;
 16326  0032EC  0E00               	movlw	0
 16327  0032EE  6E49               	movwf	_compartment_number+7,c
 16328  0032F0  0E03               	movlw	3
 16329  0032F2  6E48               	movwf	_compartment_number+6,c
 16330                           
 16331                           ;keypad.c: 304: compartment_number[4] = 4;
 16332  0032F4  0E00               	movlw	0
 16333  0032F6  6E4B               	movwf	_compartment_number+9,c
 16334  0032F8  0E04               	movlw	4
 16335  0032FA  6E4A               	movwf	_compartment_number+8,c
 16336                           
 16337                           ;keypad.c: 305: compartment_number[5] = 5;
 16338  0032FC  0E00               	movlw	0
 16339  0032FE  6E4D               	movwf	_compartment_number+11,c
 16340  003300  0E05               	movlw	5
 16341  003302  6E4C               	movwf	_compartment_number+10,c
 16342                           
 16343                           ;keypad.c: 306: compartment_number[6] = 6;
 16344  003304  0E00               	movlw	0
 16345  003306  6E4F               	movwf	_compartment_number+13,c
 16346  003308  0E06               	movlw	6
 16347  00330A  6E4E               	movwf	_compartment_number+12,c
 16348                           
 16349                           ;keypad.c: 307: compartment_number[7] = 7;
 16350  00330C  0E00               	movlw	0
 16351  00330E  6E51               	movwf	_compartment_number+15,c
 16352  003310  0E07               	movlw	7
 16353  003312  6E50               	movwf	_compartment_number+14,c
 16354                           
 16355                           ;keypad.c: 309: break;
 16356  003314  0012               	return	
 16357  003316                     
 16358                           ;keypad.c: 311: compartment_array[0] = 0;
 16359                           
 16360                           ; BSR set to: 0
 16361  003316  0E00               	movlw	0
 16362  003318  0100               	movlb	0	; () banked
 16363  00331A  6F81               	movwf	(_compartment_array+1)& (0+255),b
 16364  00331C  0E00               	movlw	0
 16365  00331E  6F80               	movwf	_compartment_array& (0+255),b
 16366                           
 16367                           ;keypad.c: 312: compartment_array[1] = 0;
 16368  003320  0E00               	movlw	0
 16369  003322  6F83               	movwf	(_compartment_array+3)& (0+255),b
 16370  003324  0E00               	movlw	0
 16371  003326  6F82               	movwf	(_compartment_array+2)& (0+255),b
 16372                           
 16373                           ;keypad.c: 313: compartment_array[2] = 0;
 16374  003328  0E00               	movlw	0
 16375  00332A  6F85               	movwf	(_compartment_array+5)& (0+255),b
 16376  00332C  0E00               	movlw	0
 16377  00332E  6F84               	movwf	(_compartment_array+4)& (0+255),b
 16378                           
 16379                           ;keypad.c: 314: compartment_array[3] = 0;
 16380  003330  0E00               	movlw	0
 16381  003332  6F87               	movwf	(_compartment_array+7)& (0+255),b
 16382  003334  0E00               	movlw	0
 16383  003336  6F86               	movwf	(_compartment_array+6)& (0+255),b
 16384                           
 16385                           ;keypad.c: 315: compartment_array[4] = 0;
 16386  003338  0E00               	movlw	0
 16387  00333A  6F89               	movwf	(_compartment_array+9)& (0+255),b
 16388  00333C  0E00               	movlw	0
 16389  00333E  6F88               	movwf	(_compartment_array+8)& (0+255),b
 16390                           
 16391                           ;keypad.c: 316: compartment_array[5] = 0;
 16392  003340  0E00               	movlw	0
 16393  003342  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 16394  003344  0E00               	movlw	0
 16395  003346  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 16396                           
 16397                           ;keypad.c: 317: compartment_array[6] = 0;
 16398  003348  0E00               	movlw	0
 16399  00334A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 16400  00334C  0E00               	movlw	0
 16401  00334E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 16402                           
 16403                           ;keypad.c: 318: compartment_array[7] = 0;
 16404  003350  0E00               	movlw	0
 16405  003352  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 16406  003354  0E00               	movlw	0
 16407  003356  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 16408                           
 16409                           ;keypad.c: 320: }
 16410  003358  0012               	return	
 16411  00335A                     i2l738:
 16412                           
 16413                           ; BSR set to: 0
 16414  00335A  C001  F003         	movff	generate_compartment_array@step,??_generate_compartment_array
 16415  00335E  C002  F004         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
 16416                           
 16417                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16418                           ; Switch size 1, requested type "space"
 16419                           ; Number of cases is 1, Range of values is 0 to 0
 16420                           ; switch strategies available:
 16421                           ; Name         Instructions Cycles
 16422                           ; simple_byte            4     3 (average)
 16423                           ;	Chosen strategy is simple_byte
 16424  003362  5004               	movf	??_generate_compartment_array+1,w,c
 16425  003364  0A00               	xorlw	0	; case 0
 16426  003366  A4D8               	btfss	status,2,c
 16427  003368  D7D6               	goto	i2l745
 16428                           
 16429                           ; Switch size 1, requested type "space"
 16430                           ; Number of cases is 5, Range of values is 4 to 8
 16431                           ; switch strategies available:
 16432                           ; Name         Instructions Cycles
 16433                           ; simple_byte           16     9 (average)
 16434                           ;	Chosen strategy is simple_byte
 16435  00336A  5003               	movf	??_generate_compartment_array,w,c
 16436  00336C  0A04               	xorlw	4	; case 4
 16437  00336E  B4D8               	btfsc	status,2,c
 16438  003370  D6D8               	goto	i2l739
 16439  003372  0A01               	xorlw	1	; case 5
 16440  003374  B4D8               	btfsc	status,2,c
 16441  003376  D6F7               	goto	i2l741
 16442  003378  0A03               	xorlw	3	; case 6
 16443  00337A  B4D8               	btfsc	status,2,c
 16444  00337C  D71E               	goto	i2l742
 16445  00337E  0A01               	xorlw	1	; case 7
 16446  003380  B4D8               	btfsc	status,2,c
 16447  003382  D74D               	goto	i2l743
 16448  003384  0A0F               	xorlw	15	; case 8
 16449  003386  B4D8               	btfsc	status,2,c
 16450  003388  D784               	goto	i2l744
 16451  00338A  D7C5               	goto	i2l745
 16452  00338C                     __end_of_generate_compartment_array:
 16453                           	opt stack 0
 16454                           pclatu	equ	0xFFB
 16455                           pclath	equ	0xFFA
 16456                           tblptru	equ	0xFF8
 16457                           tblptrh	equ	0xFF7
 16458                           tblptrl	equ	0xFF6
 16459                           tablat	equ	0xFF5
 16460                           prodh	equ	0xFF4
 16461                           prodl	equ	0xFF3
 16462                           intcon	equ	0xFF2
 16463                           intcon3	equ	0xFF0
 16464                           indf0	equ	0xFEF
 16465                           postinc0	equ	0xFEE
 16466                           fsr0h	equ	0xFEA
 16467                           fsr0l	equ	0xFE9
 16468                           wreg	equ	0xFE8
 16469                           indf1	equ	0xFE7
 16470                           fsr1h	equ	0xFE2
 16471                           fsr1l	equ	0xFE1
 16472                           indf2	equ	0xFDF
 16473                           postinc2	equ	0xFDE
 16474                           postdec2	equ	0xFDD
 16475                           fsr2h	equ	0xFDA
 16476                           fsr2l	equ	0xFD9
 16477                           status	equ	0xFD8
 16478                           
 16479 ;; *************** function _check *****************
 16480 ;; Defined at:
 16481 ;;		line 208 in file "keypad.c"
 16482 ;; Parameters:    Size  Location     Type
 16483 ;;		None
 16484 ;; Auto vars:     Size  Location     Type
 16485 ;;		None
 16486 ;; Return value:  Size  Location     Type
 16487 ;;                  2    0[COMRAM] int 
 16488 ;; Registers used:
 16489 ;;		wreg, status,2, status,0
 16490 ;; Tracked objects:
 16491 ;;		On entry : 0/0
 16492 ;;		On exit  : 0/0
 16493 ;;		Unchanged: 0/0
 16494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16495 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16498 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;Total ram usage:        2 bytes
 16500 ;; Hardware stack levels used:    1
 16501 ;; This function calls:
 16502 ;;		Nothing
 16503 ;; This function is called by:
 16504 ;;		_interruptHandler
 16505 ;; This function uses a non-reentrant model
 16506 ;;
 16507                           
 16508                           	psect	text61
 16509  003BC4                     __ptext61:
 16510                           	opt stack 0
 16511  003BC4                     _check:
 16512                           	opt stack 25
 16513                           
 16514                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 16515                           
 16516                           ;incstack = 0
 16517  003BC4  BE66               	btfsc	_B+1,7,c
 16518  003BC6  D006               	goto	i2u371_40
 16519  003BC8  5066               	movf	_B+1,w,c
 16520  003BCA  E124               	bnz	i2l4842
 16521  003BCC  0E03               	movlw	3
 16522  003BCE  5C65               	subwf	_B,w,c
 16523  003BD0  B0D8               	btfsc	status,0,c
 16524  003BD2  D020               	goto	i2u375_40
 16525  003BD4                     i2u371_40:
 16526  003BD4  BE64               	btfsc	_N+1,7,c
 16527  003BD6  D006               	goto	i2u372_40
 16528  003BD8  5064               	movf	_N+1,w,c
 16529  003BDA  E11C               	bnz	i2l4842
 16530  003BDC  0E04               	movlw	4
 16531  003BDE  5C63               	subwf	_N,w,c
 16532  003BE0  B0D8               	btfsc	status,0,c
 16533  003BE2  D018               	goto	i2u375_40
 16534  003BE4                     i2u372_40:
 16535  003BE4  BE62               	btfsc	_S+1,7,c
 16536  003BE6  D006               	goto	i2u373_40
 16537  003BE8  5062               	movf	_S+1,w,c
 16538  003BEA  E114               	bnz	i2l4842
 16539  003BEC  0E03               	movlw	3
 16540  003BEE  5C61               	subwf	_S,w,c
 16541  003BF0  B0D8               	btfsc	status,0,c
 16542  003BF2  D010               	goto	i2u375_40
 16543  003BF4                     i2u373_40:
 16544  003BF4  BE60               	btfsc	_W+1,7,c
 16545  003BF6  D006               	goto	i2u374_40
 16546  003BF8  5060               	movf	_W+1,w,c
 16547  003BFA  E10C               	bnz	i2l4842
 16548  003BFC  0E05               	movlw	5
 16549  003BFE  5C5F               	subwf	_W,w,c
 16550  003C00  B0D8               	btfsc	status,0,c
 16551  003C02  D008               	goto	i2u375_40
 16552  003C04                     i2u374_40:
 16553  003C04  BE6A               	btfsc	_total_number+1,7,c
 16554  003C06  D00B               	goto	i2l732
 16555  003C08  506A               	movf	_total_number+1,w,c
 16556  003C0A  E104               	bnz	i2l4842
 16557  003C0C  0E05               	movlw	5
 16558  003C0E  5C69               	subwf	_total_number,w,c
 16559  003C10  A0D8               	btfss	status,0,c
 16560  003C12  D005               	goto	i2l732
 16561  003C14                     i2u375_40:
 16562  003C14                     i2l4842:
 16563                           
 16564                           ;keypad.c: 213: return 0;
 16565  003C14  0E00               	movlw	0
 16566  003C16  6E02               	movwf	?_check+1,c
 16567  003C18  0E00               	movlw	0
 16568  003C1A  6E01               	movwf	?_check,c
 16569  003C1C  0012               	return	
 16570  003C1E                     i2l732:
 16571                           
 16572                           ;keypad.c: 214: }
 16573                           ;keypad.c: 215: return 1;
 16574  003C1E  0E00               	movlw	0
 16575  003C20  6E02               	movwf	?_check+1,c
 16576  003C22  0E01               	movlw	1
 16577  003C24  6E01               	movwf	?_check,c
 16578  003C26  0012               	return	
 16579  003C28                     __end_of_check:
 16580                           	opt stack 0
 16581                           pclatu	equ	0xFFB
 16582                           pclath	equ	0xFFA
 16583                           tblptru	equ	0xFF8
 16584                           tblptrh	equ	0xFF7
 16585                           tblptrl	equ	0xFF6
 16586                           tablat	equ	0xFF5
 16587                           prodh	equ	0xFF4
 16588                           prodl	equ	0xFF3
 16589                           intcon	equ	0xFF2
 16590                           intcon3	equ	0xFF0
 16591                           indf0	equ	0xFEF
 16592                           postinc0	equ	0xFEE
 16593                           fsr0h	equ	0xFEA
 16594                           fsr0l	equ	0xFE9
 16595                           wreg	equ	0xFE8
 16596                           indf1	equ	0xFE7
 16597                           fsr1h	equ	0xFE2
 16598                           fsr1l	equ	0xFE1
 16599                           indf2	equ	0xFDF
 16600                           postinc2	equ	0xFDE
 16601                           postdec2	equ	0xFDD
 16602                           fsr2h	equ	0xFDA
 16603                           fsr2l	equ	0xFD9
 16604                           status	equ	0xFD8
 16605                           
 16606 ;; *************** function ___awmod *****************
 16607 ;; Defined at:
 16608 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 16609 ;; Parameters:    Size  Location     Type
 16610 ;;  dividend        2    0[COMRAM] int 
 16611 ;;  divisor         2    2[COMRAM] int 
 16612 ;; Auto vars:     Size  Location     Type
 16613 ;;  sign            1    5[COMRAM] unsigned char 
 16614 ;;  counter         1    4[COMRAM] unsigned char 
 16615 ;; Return value:  Size  Location     Type
 16616 ;;                  2    0[COMRAM] int 
 16617 ;; Registers used:
 16618 ;;		wreg, status,2, status,0
 16619 ;; Tracked objects:
 16620 ;;		On entry : 0/0
 16621 ;;		On exit  : 0/0
 16622 ;;		Unchanged: 0/0
 16623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;Total ram usage:        6 bytes
 16629 ;; Hardware stack levels used:    1
 16630 ;; This function calls:
 16631 ;;		Nothing
 16632 ;; This function is called by:
 16633 ;;		_interruptHandler
 16634 ;; This function uses a non-reentrant model
 16635 ;;
 16636                           
 16637                           	psect	text62
 16638  003B54                     __ptext62:
 16639                           	opt stack 0
 16640  003B54                     ___awmod:
 16641                           	opt stack 25
 16642                           
 16643                           ;incstack = 0
 16644  003B54  0E00               	movlw	0
 16645  003B56  6E06               	movwf	___awmod@sign,c
 16646  003B58  AE02               	btfss	___awmod@dividend+1,7,c
 16647  003B5A  D006               	goto	i2l1054
 16648  003B5C  6C01               	negf	___awmod@dividend,c
 16649  003B5E  1E02               	comf	___awmod@dividend+1,f,c
 16650  003B60  B0D8               	btfsc	status,0,c
 16651  003B62  2A02               	incf	___awmod@dividend+1,f,c
 16652  003B64  0E01               	movlw	1
 16653  003B66  6E06               	movwf	___awmod@sign,c
 16654  003B68                     i2l1054:
 16655  003B68  AE04               	btfss	___awmod@divisor+1,7,c
 16656  003B6A  D004               	goto	i2l1055
 16657  003B6C  6C03               	negf	___awmod@divisor,c
 16658  003B6E  1E04               	comf	___awmod@divisor+1,f,c
 16659  003B70  B0D8               	btfsc	status,0,c
 16660  003B72  2A04               	incf	___awmod@divisor+1,f,c
 16661  003B74                     i2l1055:
 16662  003B74  5003               	movf	___awmod@divisor,w,c
 16663  003B76  1004               	iorwf	___awmod@divisor+1,w,c
 16664  003B78  B4D8               	btfsc	status,2,c
 16665  003B7A  D018               	goto	i2l1062
 16666  003B7C  0E01               	movlw	1
 16667  003B7E  6E05               	movwf	___awmod@counter,c
 16668  003B80  D004               	goto	i2l1057
 16669  003B82  90D8               	bcf	status,0,c
 16670  003B84  3603               	rlcf	___awmod@divisor,f,c
 16671  003B86  3604               	rlcf	___awmod@divisor+1,f,c
 16672  003B88  2A05               	incf	___awmod@counter,f,c
 16673  003B8A                     i2l1057:
 16674  003B8A  AE04               	btfss	___awmod@divisor+1,7,c
 16675  003B8C  D7FA               	goto	i2l1058
 16676  003B8E                     i2u379_40:
 16677  003B8E  5003               	movf	___awmod@divisor,w,c
 16678  003B90  5C01               	subwf	___awmod@dividend,w,c
 16679  003B92  5004               	movf	___awmod@divisor+1,w,c
 16680  003B94  5802               	subwfb	___awmod@dividend+1,w,c
 16681  003B96  A0D8               	btfss	status,0,c
 16682  003B98  D004               	goto	i2l1061
 16683  003B9A  5003               	movf	___awmod@divisor,w,c
 16684  003B9C  5E01               	subwf	___awmod@dividend,f,c
 16685  003B9E  5004               	movf	___awmod@divisor+1,w,c
 16686  003BA0  5A02               	subwfb	___awmod@dividend+1,f,c
 16687  003BA2                     i2l1061:
 16688  003BA2  90D8               	bcf	status,0,c
 16689  003BA4  3204               	rrcf	___awmod@divisor+1,f,c
 16690  003BA6  3203               	rrcf	___awmod@divisor,f,c
 16691  003BA8  2E05               	decfsz	___awmod@counter,f,c
 16692  003BAA  D7F1               	goto	i2u379_40
 16693  003BAC                     i2l1062:
 16694  003BAC  5006               	movf	___awmod@sign,w,c
 16695  003BAE  B4D8               	btfsc	status,2,c
 16696  003BB0  D004               	goto	i2l1063
 16697  003BB2  6C01               	negf	___awmod@dividend,c
 16698  003BB4  1E02               	comf	___awmod@dividend+1,f,c
 16699  003BB6  B0D8               	btfsc	status,0,c
 16700  003BB8  2A02               	incf	___awmod@dividend+1,f,c
 16701  003BBA                     i2l1063:
 16702  003BBA  C001  F001         	movff	___awmod@dividend,?___awmod
 16703  003BBE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 16704  003BC2  0012               	return	
 16705  003BC4                     __end_of___awmod:
 16706                           	opt stack 0
 16707                           pclatu	equ	0xFFB
 16708                           pclath	equ	0xFFA
 16709                           tblptru	equ	0xFF8
 16710                           tblptrh	equ	0xFF7
 16711                           tblptrl	equ	0xFF6
 16712                           tablat	equ	0xFF5
 16713                           prodh	equ	0xFF4
 16714                           prodl	equ	0xFF3
 16715                           intcon	equ	0xFF2
 16716                           intcon3	equ	0xFF0
 16717                           indf0	equ	0xFEF
 16718                           postinc0	equ	0xFEE
 16719                           fsr0h	equ	0xFEA
 16720                           fsr0l	equ	0xFE9
 16721                           wreg	equ	0xFE8
 16722                           indf1	equ	0xFE7
 16723                           fsr1h	equ	0xFE2
 16724                           fsr1l	equ	0xFE1
 16725                           indf2	equ	0xFDF
 16726                           postinc2	equ	0xFDE
 16727                           postdec2	equ	0xFDD
 16728                           fsr2h	equ	0xFDA
 16729                           fsr2l	equ	0xFD9
 16730                           status	equ	0xFD8
 16731                           pclatu	equ	0xFFB
 16732                           pclath	equ	0xFFA
 16733                           tblptru	equ	0xFF8
 16734                           tblptrh	equ	0xFF7
 16735                           tblptrl	equ	0xFF6
 16736                           tablat	equ	0xFF5
 16737                           prodh	equ	0xFF4
 16738                           prodl	equ	0xFF3
 16739                           intcon	equ	0xFF2
 16740                           intcon3	equ	0xFF0
 16741                           indf0	equ	0xFEF
 16742                           postinc0	equ	0xFEE
 16743                           fsr0h	equ	0xFEA
 16744                           fsr0l	equ	0xFE9
 16745                           wreg	equ	0xFE8
 16746                           indf1	equ	0xFE7
 16747                           fsr1h	equ	0xFE2
 16748                           fsr1l	equ	0xFE1
 16749                           indf2	equ	0xFDF
 16750                           postinc2	equ	0xFDE
 16751                           postdec2	equ	0xFDD
 16752                           fsr2h	equ	0xFDA
 16753                           fsr2l	equ	0xFD9
 16754                           status	equ	0xFD8
 16755                           
 16756                           	psect	rparam
 16757  0000                     pclatu	equ	0xFFB
 16758                           pclath	equ	0xFFA
 16759                           tblptru	equ	0xFF8
 16760                           tblptrh	equ	0xFF7
 16761                           tblptrl	equ	0xFF6
 16762                           tablat	equ	0xFF5
 16763                           prodh	equ	0xFF4
 16764                           prodl	equ	0xFF3
 16765                           intcon	equ	0xFF2
 16766                           intcon3	equ	0xFF0
 16767                           indf0	equ	0xFEF
 16768                           postinc0	equ	0xFEE
 16769                           fsr0h	equ	0xFEA
 16770                           fsr0l	equ	0xFE9
 16771                           wreg	equ	0xFE8
 16772                           indf1	equ	0xFE7
 16773                           fsr1h	equ	0xFE2
 16774                           fsr1l	equ	0xFE1
 16775                           indf2	equ	0xFDF
 16776                           postinc2	equ	0xFDE
 16777                           postdec2	equ	0xFDD
 16778                           fsr2h	equ	0xFDA
 16779                           fsr2l	equ	0xFD9
 16780                           status	equ	0xFD8
 16781                           
 16782                           	psect	temp
 16783  00007F                     btemp:
 16784                           	opt stack 0
 16785  00007F                     	ds	1
 16786  0000                     int$flags	set	btemp
 16787  0000                     wtemp6	set	btemp+1
 16788                           pclatu	equ	0xFFB
 16789                           pclath	equ	0xFFA
 16790                           tblptru	equ	0xFF8
 16791                           tblptrh	equ	0xFF7
 16792                           tblptrl	equ	0xFF6
 16793                           tablat	equ	0xFF5
 16794                           prodh	equ	0xFF4
 16795                           prodl	equ	0xFF3
 16796                           intcon	equ	0xFF2
 16797                           intcon3	equ	0xFF0
 16798                           indf0	equ	0xFEF
 16799                           postinc0	equ	0xFEE
 16800                           fsr0h	equ	0xFEA
 16801                           fsr0l	equ	0xFE9
 16802                           wreg	equ	0xFE8
 16803                           indf1	equ	0xFE7
 16804                           fsr1h	equ	0xFE2
 16805                           fsr1l	equ	0xFE1
 16806                           indf2	equ	0xFDF
 16807                           postinc2	equ	0xFDE
 16808                           postdec2	equ	0xFDD
 16809                           fsr2h	equ	0xFDA
 16810                           fsr2l	equ	0xFD9
 16811                           status	equ	0xFD8


Data Sizes:
    Strings     496
    Constant    151
    Data        2
    BSS         530
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65     126
    BANK0           128     41     127
    BANK1           256      0     185
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$1753	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_71(CODE[1]), STR_69(CODE[1]), STR_66(CODE[1]), STR_63(CODE[2]), 
		 -> STR_62(CODE[2]), STR_61(CODE[2]), STR_60(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_94(CODE[5]), STR_93(CODE[5]), STR_92(CODE[5]), STR_91(CODE[5]), 
		 -> STR_90(CODE[5]), STR_89(CODE[5]), STR_88(CODE[5]), STR_87(CODE[4]), 
		 -> STR_86(CODE[4]), STR_85(CODE[4]), STR_84(CODE[4]), STR_83(CODE[4]), 
		 -> STR_82(CODE[4]), STR_81(CODE[3]), STR_80(CODE[3]), STR_79(CODE[3]), 
		 -> STR_78(CODE[2]), STR_77(CODE[2]), STR_76(CODE[2]), STR_75(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_95(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_74(CODE[3]), STR_73(CODE[9]), STR_72(CODE[12]), STR_70(CODE[7]), 
		 -> STR_68(CODE[3]), STR_67(CODE[11]), STR_65(CODE[3]), STR_64(CODE[9]), 
		 -> STR_59(CODE[15]), STR_58(CODE[13]), STR_57(CODE[16]), STR_56(CODE[15]), 
		 -> STR_55(CODE[15]), STR_54(CODE[15]), STR_53(CODE[15]), STR_52(CODE[10]), 
		 -> STR_51(CODE[19]), STR_50(CODE[17]), STR_49(CODE[12]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[14]), STR_45(CODE[15]), STR_44(CODE[15]), 
		 -> STR_43(CODE[6]), STR_42(CODE[6]), STR_41(CODE[5]), STR_40(CODE[4]), 
		 -> STR_39(CODE[3]), STR_38(CODE[5]), STR_37(CODE[3]), STR_36(CODE[3]), 
		 -> STR_35(CODE[5]), STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[5]), 
		 -> STR_31(CODE[3]), STR_30(CODE[3]), STR_29(CODE[5]), STR_28(CODE[3]), 
		 -> STR_27(CODE[3]), STR_26(CODE[8]), STR_25(CODE[8]), STR_24(CODE[16]), 
		 -> STR_23(CODE[3]), STR_22(CODE[4]), STR_21(CODE[3]), STR_20(CODE[4]), 
		 -> STR_19(CODE[3]), STR_18(CODE[4]), STR_17(CODE[3]), STR_16(CODE[4]), 
		 -> STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[2]), STR_12(CODE[3]), 
		 -> STR_11(CODE[2]), STR_10(CODE[3]), STR_9(CODE[5]), STR_8(CODE[17]), 
		 -> STR_7(CODE[6]), STR_6(CODE[8]), STR_5(CODE[3]), STR_4(CODE[14]), 
		 -> STR_3(CODE[15]), STR_2(CODE[14]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_count_gear
    _ramp_Rotate->_I2C_Master_Init
    _initRamp->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _get_RTC_initial->___wmul
    _get_RTC_final->___wmul
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _count_gear->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___wmul->___awdiv
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   41407
                                             37 BANK0      4     4      0
                            ___awdiv
                             ___wmul
                         _count_gear
                      _get_RTC_final
                    _get_RTC_initial
                            _initLCD
                           _initRamp
                         _initialize
                            _lcdInst
                       _motorStart_0
                       _motorStart_1
                       _motorStart_2
                       _motorStart_3
                        _motorStop_0
                        _motorStop_1
                        _motorStop_2
                        _motorStop_3
                             _printf
                        _ramp_Rotate
                            _readADC
                            _read_IR
                _servoRotate_ConStop
              _servoRotate_clockwise
                _servoRotate_counter
 ---------------------------------------------------------------------------------
 (1) _servoRotate_counter                                  1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate_clockwise                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate_ConStop                                  1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_IR                                              3     1      2      23
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ramp_Rotate                                          0     0      0    2050
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStop_3                                          2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_2                                          2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_3                                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_2                                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRamp                                             0     0      0    2050
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     588
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _get_RTC_initial                                      1     1      0    6052
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_RTC_final                                        1     1      0    6052
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1464
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1462
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _count_gear                                           1     1      0   10306
                                             36 BANK0      1     1      0
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4   10014
                                             14 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3081
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interruptHandler                                    27    27      0   13266
                                             38 COMRAM    27    27      0
                            ___awmod
                              _check
         _generate_compartment_array
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            30    22      8    3206
                                             12 COMRAM    26    18      8
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (7) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _generate_compartment_array                           4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___wmul
     ___awdiv (ARG)
   _count_gear
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
     _readADC
   _get_RTC_final
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _get_RTC_initial
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _initRamp
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initialize
   _lcdInst
     _lcdNibble
   _motorStart_0
   _motorStart_1
   _motorStart_2
   _motorStart_3
   _motorStop_0
   _motorStop_1
   _motorStop_2
   _motorStop_3
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble
   _ramp_Rotate
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _readADC
   _read_IR
   _servoRotate_ConStop
   _servoRotate_clockwise
   _servoRotate_counter

 _interruptHandler (ROOT)
   ___awmod
   _check
   _generate_compartment_array
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B9       7       72.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     29      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27E      34        0.0%
DATA                 0      0     27E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 23 15:15:08 2018

                                  _B 0065                                    _N 0063  
                                  _S 0061                                    _W 005F  
                                  _i 00CC                                    _j 0075  
                 i2_I2C_Master_Start 4448                   i2_I2C_Master_Write 4426  
                        __CFG_CPD$ON 000000                         ___awdiv@sign 00D9  
                ___wmul@multiplicand 00DE                   i2___lwdiv@dividend 0001  
                        __CFG_BORV$3 000000                  _servoRotate_ConStop 3F18  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l330 00B8                                  l341 0322  
                                l333 00C4                                  l334 0114  
                                l326 004A                                  l343 048A  
                                l335 0166                                  l360 069C  
                                l336 019E                                  l345 058C  
                                l354 09C8                                  l370 0846  
                                l346 049E                                  l338 02FE  
                                l363 0700                                  l355 0596  
                                l347 04BA                                  l339 0216  
                                l364 0728                                  l356 05A8  
                                l348 04F2                                  l373 08AA  
                                l357 0872                                  l365 076C  
                                l470 34D4                                  l390 0AA2  
                                l382 09E8                                  l374 08D2  
                                l358 0616                                  l391 0AC2  
                                l383 0A00                                  l375 0920  
                                l359 063E                                  l480 3B48  
                                l560 3F60                                  l392 0AFC  
                                l384 0A08                                  l368 07D0  
                                l481 3B3E                                  l393 0B30  
                                l385 0A2A                                  l369 07F8  
                                l810 28F2                                  l474 41A4  
                                l386 0B9C                                  l394 0B64  
                                l811 28EA                                  l483 3B52  
                                l387 0A48                                  l379 094C  
                                l396 0DB2                                  l388 0A66  
                                l389 0A84                                  l830 2A16  
                                l823 2AB0                                  l807 28CA  
                                l832 2A26                                  l824 298C  
                                l816 2926                                  l808 28DA  
                                l833 2A20                                  l825 2992  
                                l569 3FEA                                  l842 2B66  
                                l818 2A78                                  l826 29BA  
                                l843 2AFA                                  l835 2A66  
                                l827 29CA                                  l852 2B90  
                                l836 2A3A                                  l828 29C4  
                                l853 2BB4                                  l870 2C72  
                                l854 2BBC                                  l855 2BEC  
                                l847 2B76                                  l839 2AE0  
                                l864 2C1C                                  l856 2BD2  
                                l848 2B30                                  l865 2CDE  
                                l867 2CC6                                  l868 2C22  
                                l869 2CD8                         __CFG_CPB$OFF 000000  
                ?i2_I2C_Master_Start 0001                  ?i2_I2C_Master_Write 0002  
                    _compartment_pos 00BE                         ___awmod@sign 0006  
                                prod 000FF3                        _assembly_step 00BA  
                                wreg 000FE8              __end_of_get_RTC_initial 3608  
                       __CFG_LVP$OFF 000000                         __CFG_WDT$OFF 000000  
                               l1041 37D8                                 l1050 383E  
                               l1042 37E8                                 l1203 4278  
                               l1044 3806                                 l1045 37FE  
                               l1230 3978                                 l1048 3826  
                               l1049 3830                                 l1233 39B8  
                               l1234 39C6                                 l1229 3984  
                               l1282 3D04                                 l1283 3CFC  
                               l1292 40D8                                 l1293 40D0  
                               l1286 3D24                                 l1287 3D2E  
                               l1296 40F0                                 l4120 2B34  
                               l1297 40FA                                 l4106 2AFE  
                               l4080 2A3A                                 l4076 2A20  
                               l4406 4086                                 l4520 3648  
                               l4504 4042                                 l4530 3670  
                               l5314 0452                                 l4540 3426  
                               l5414 0700                                 l4384 3516  
                               l4456 3F22                                 l5440 07D0  
                               l4394 353E                                 l5506 09D4  
                               l5418 0728                                 l5444 07F8  
                               l5470 08D2                                 l5384 0616  
                               l5466 08AA                                 l5564 0AC2  
                               l5388 063E                                 l5590 0B64  
                               l5582 0B30                                 l5574 0AFC  
                               l5498 0998                                 _ADON 007E10  
                               STR_1 FE86                                 STR_2 FF1C  
                               STR_3 FEB5                                 STR_4 FF00  
                               STR_5 FFF7                                 STR_6 FF76  
                               STR_7 FF94                                 STR_8 FE54  
                               STR_9 FFCE                                 u3000 2C0A  
                               u3020 2CE8                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u3120 380A                                 _LATD 000F8C  
                               _LATE 000F8D                                 u3055 3C5E  
                               u3065 41E2                                 u3066 41E4  
                               u3410 3670                                 u2700 40DC  
                               u2640 3988                                 u3290 353E  
                               u2820 2A5C                                 u4340 0320  
                               u4260 0054                                 u2670 3D08  
                               u4510 09FA                                 u4350 0452  
                               u2575 377A                                 u5207 0158  
                               u2576 377C                                 u2585 37BE  
                               u5217 0190                                 u2586 37C0  
                               u4370 04B0                                 u2827 2A52  
                               u5307 0552                                 u5227 01C8  
                               u2780 29F8                                 u5317 05D2  
                               u5237 01FC                                 u5407 0836  
                               u5327 0604                                 u5247 02CA  
                               u5167 0080                                 u5417 0864  
                               u5337 064C                                 u5257 02EA  
                               u5177 009C                                 u2787 29EE  
                               u5507 0C38                                 u5427 0898  
                               u5347 0690                                 u5267 0432  
                               u5187 00DC                                 u5517 0C4E  
                               u5437 0910                                 u5357 06BA  
                               u5277 0470                                 u5197 0100  
                               u2990 2BF4                                 u5607 0D68  
                               u5527 0C7A                                 u5447 093E  
                               u5367 06EE                                 u5287 04E6  
                               u5617 0D8C                                 u5537 0C96  
                               u5457 097C                                 u5377 0762  
                               u5297 051E                                 u5707 40AE  
                               u5627 0DA8                                 u5547 0CAC  
                               u5467 0BBA                                 u5387 078A  
                               u5717 3F3A                                 u5637 0DEA  
                               u5557 0CD8                                 u5477 0BD6  
                               u5397 07BE                                 u5807 4370  
                               u5727 3F50                                 u5647 0E0A  
                               u5567 0CF4                                 u5487 0BEC  
                               u5817 3B22                                 u5737 4290  
                               u5657 0E34                                 u5577 0D0A  
                               u5497 0C1C                                 u5827 43AE  
                               u5747 42B0                                 u5667 0E50  
                               u5587 0D36                                 u5837 3E88  
                               u5757 42D0                                 u5677 4056  
                               u5597 0D52                                 u5847 3EBC  
                               u5767 42F0                                 u5687 406C  
                               u5857 43C6                                 u5777 4310  
                               u5697 409A                                 u5867 3760  
                               u5787 4330                                 u5877 376A  
                               u5797 4350                                 u5887 37A4  
                               u5897 37AE                 ?_servoRotate_ConStop 0001  
                               _main 0012             __end_of_interruptHandler 28BE  
                               _mode 00C8                                 _keys FD77  
                _servoRotate_counter 4038                                 _temp 0076  
                               _time 0052                                 _prev 00C0  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                 i2___lwdiv@quotient 0005                                 indf0 000FEF  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 007F                                 _strs FDAA  
               ??i2_I2C_Master_Start 0002                 ??i2_I2C_Master_Write 0004  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                    __end_ofi2_putch 43F6                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000                          i2_lcdNibble 3848  
                   __end_of_LCD_LEFT FDA5                         _total_number 0069  
              I2C_Master_Read@ackBit 00D5                     ?_I2C_Master_Init 00E1  
                   ?_I2C_Master_Read 0001       generate_compartment_array@step 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
               ?_servoRotate_counter 0001                                ?_main 0001  
                    __end_of___awdiv 3848                                STR_10 FF9D  
                              STR_11 FFE5                                STR_12 FFF7  
                              STR_20 FFEB                                STR_21 FF9D  
                              STR_13 FFFA                                STR_30 FF9D  
                              STR_14 FF9D                                STR_22 FFEF  
                              STR_31 FF9D                                STR_23 FF9D  
                              STR_15 FF9D                                STR_32 FF3E  
                              STR_40 FFF3                                STR_16 FFE3  
                              STR_24 FE96                                STR_33 FF9D  
                              STR_17 FF9D                                STR_41 FFC9  
                              STR_25 FF7E                                STR_34 FF9D  
                              STR_26 FF7E                                STR_18 FFE7  
                              STR_42 FF9A                                STR_50 FE65  
                              STR_27 FF9D                                STR_19 FF9D  
                              STR_35 FF3E                                STR_43 FFA0  
                              STR_51 FE0E                                STR_36 FF9D  
                              STR_28 FF9D                                STR_60 FFFC  
                              STR_52 FF5A                                STR_44 FED3  
                    __end_of___awmod 3BC4                                STR_61 FFD5  
                              STR_37 FF9D                                STR_29 FF3E  
                              STR_53 FEE2                                STR_45 FEC4  
                              STR_62 FFD9                                STR_38 FF3E  
                              STR_70 FF8D                                STR_46 FF0E  
                              STR_54 FEF1                                STR_71 FEB4  
                              STR_63 FFDD                                STR_39 FF9D  
                              STR_55 FEE2                                STR_47 FE32  
                              STR_80 FFD8                                STR_56 FEF1  
                              STR_64 FF64                                STR_72 FF43  
                              STR_48 FE43                                STR_81 FFDC  
                              STR_65 FFF7                                STR_73 FF6D  
                              STR_49 FF37                                STR_57 FE76  
                              STR_66 FEB4                                STR_74 FF9D  
                              STR_82 FFD3                                STR_90 FFB5  
                              STR_58 FF2A                                STR_75 FFFC  
                              STR_83 FFD7                                STR_91 FFAB  
                              STR_67 FF4F                                STR_59 FEA6  
                              STR_76 FFD5                                STR_68 FFF7  
                              STR_84 FFDB                                STR_92 FFB0  
                              STR_69 FEB4                                STR_77 FFD9  
                              STR_85 FFAC                                STR_93 FFA6  
                              STR_78 FFDD                                STR_86 FFB6  
                              STR_94 FFC4                                STR_79 FFD4  
                              STR_87 FFDF                                STR_95 FF86  
                              STR_88 FFBA                                STR_96 FE21  
                              STR_89 FFBF                      __end_of___lldiv 39D8  
                    ___awdiv@divisor 00D6                      __end_of___lwdiv 3D38  
                    __end_of___lwmod 4104                                i2l411 1E76  
                              i2l412 1D78                                i2l421 1F0A  
                              i2l414 1DC8                                i2l431 21F6  
                              i2l423 20F2                                i2l440 2354  
                              i2l416 1E92                                i2l408 1D4E  
                              i2l441 2394                                i2l433 223E  
                              i2l425 2116                                i2l442 23D4  
                              i2l426 22BA                                i2l418 1FB8  
                              i2l443 25A8                                i2l435 2286  
                              i2l427 2166                                i2l419 1EBA  
                              i2l700 113E                                i2l460 26FA  
                              i2l444 242C                                i2l436 22AC  
                              i2l461 27BE                                i2l453 2722  
                              i2l437 25FE                                i2l429 21AE  
                              i2l710 14E8                                i2l702 11DE  
                              i2l454 26D0                                i2l446 252C  
                              i2l438 22D4                                i2l463 2810  
                              i2l455 275C                                i2l447 25A0  
                              i2l439 2314                                i2l720 195A  
                              i2l712 15D6                                i2l704 1292  
                              i2l456 26D8                                i2l465 2848  
                              i2l457 26E0                                i2l722 1A4A  
                              i2l714 168A                                i2l706 1346  
                              i2l810 2D34                                i2l458 26E8  
                              i2l811 2D2E                                i2l459 26F0  
                              i2l732 3C1E                                i2l724 1B3A  
                              i2l716 177A                                i2l708 13FA  
                              i2l741 3166                                i2l742 31BA  
                              i2l726 1C00                                i2l718 186A  
                              i2l830 2E4C                                i2l743 321E  
                              i2l823 2EE0                                i2l807 2D10  
                              i2l744 3292                                i2l832 2E5C  
                              i2l824 2DC8                                i2l816 2D66  
                              i2l808 2D20                                i2l745 3316  
                              i2l833 2E56                                i2l825 2DCC  
                              i2l738 335A                                i2l690 0ED8  
                              i2l842 2F94                                i2l818 2EAA  
                              i2l826 2DF4                                i2l739 3122  
                              i2l843 2F28                                i2l835 2E98  
                              i2l827 2E02                                i2l692 0F3A  
                              i2l852 2FBE                                i2l836 2E6E  
                              i2l828 2DFE                                i2l853 2FE2  
                              i2l694 0F9C                                i2l870 3094  
                              i2l854 2FEA                                i2l855 3016  
                              i2l847 2FA4                                i2l839 2F0E  
                              i2l696 0FFE                                i2l864 3044  
                              i2l856 3000                                i2l848 2F5E  
                              i2l865 30FC                                i2l698 109E  
                              i2l867 30E6                                i2l868 304A  
                    ___awdiv@counter 00D8                                i2l869 30F6  
                              _PORTB 000F81                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                      __end_of_lcdInst 43CE  
                      _N_spacingTime 00A6                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_readADC 41C2  
                    __end_of_initLCD 3ECC                                _check 3BC4  
                     __CFG_EBTRB$OFF 000000                           i2isdigit@c 0003  
                              _angle 0162                      __end_of_dpowers FD92  
                              _array FDA1                      __end_of_read_IR 3FF2  
                              _error 0160                      __end_of_isdigit 4280  
                              _valid 006B                                _state 00BC  
                              _putch 439E                    _compartment_array 0080  
              ??_servoRotate_ConStop 00D4                                pclath 000FFA  
                              tablat 000FF5                    _LCDinterruptState 00CE  
                   __end_ofi2___wmul 423A                                status 000FD8  
        I2C_Master_Read@receivedByte 00D6                                wtemp6 0080  
                    __end_of_strncmp 3954                   __size_ofi2___awdiv 0084  
                     __CFG_PBADEN$ON 000000                        i2printf@width 0024  
                 __size_ofi2___lldiv 0082                     __end_ofi2_printf 3120  
                 __size_ofi2___lwdiv 0052                   __size_ofi2___lwmod 0042  
                       ?_ramp_Rotate 0001                      __initialization 3D38  
                  i2___lldiv@divisor 0005                   __size_ofi2_lcdInst 0014  
                       __end_of_main 0E76                    i2___lldiv@counter 000D  
                       __end_of_keys FD88                           i2printf@ap 001D  
                         i2printf@cp 001B                         __end_of_strs FE0E  
                 __size_ofi2_initLCD 004C                   __size_ofi2_isdigit 001E  
                     __CFG_OSC$HSPLL 000000                ??_servoRotate_counter 00D4  
                  __end_of_LCD_RIGHT FDA6                               ??_main 00F9  
                      __activetblptr 000003                    ?_I2C_Master_Start 0001  
                  ?_I2C_Master_Write 00D5                     ?_get_RTC_initial 0001  
                             ?_check 0001                   ??_I2C_Master_Start 00D5  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                 ??_I2C_Master_Write 00D7                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 00D4  
                    i2lcdNibble@data 0002                               ?_putch 0001  
                    i2lcdNibble@temp 0001                               _INT1IE 007F83  
                             _INT1IF 007F80                               i2l1041 39EC  
                             i2l1050 3A52                               i2l1042 39FC  
                             i2l1203 4396                               i2l1044 3A1A  
                             i2l1061 3BA2                               i2l1045 3A12  
                             i2l1062 3BAC                               i2l1054 3B68  
                             i2l1230 3A7E                               i2l1063 3BBA  
                             i2l1055 3B74                               i2l1048 3A3A  
                             i2l1057 3B8A                               i2l1233 3ABE  
                             i2l1049 3A44                               i2l1058 3B82  
                             i2l1234 3ACC                               i2l1229 3A8A  
                             i2l1430 4164                               i2l1426 4154  
                             i2l1450 38D0                               i2l1282 3E4C  
                             i2l1435 3F6C                               i2l1427 4150  
                             i2l1443 4004                               i2l1451 3932  
                             i2l1283 3E44                               i2l1436 3F64  
                             i2l1444 3FFC                               i2l1292 411A  
                             i2l1429 416C                               i2l1293 4112  
                             i2l1286 3E6C                               i2l1287 3E76  
                             i2l1296 4132                               i2l1449 393A  
                             i2l1297 413C                               i2l5012 2F2C  
                             i2l5026 2F62                               i2l6100 2870  
                             i2l6102 2872                               i2l4842 3C14  
                             i2l4588 38D0                               i2l5734 1DC0  
                             i2l5760 1E8E                               i2l5780 1F02  
                             i2l4982 2E56                               i2l4986 2E6E  
                             i2l5988 253A                               _OSCCON 000FD3  
                          ??i2_putch 0003                               _SSPADD 000FC8  
                             _SSPBUF 000FC9                               _B_done 00A0  
                             _N_done 009E                _servoRotate_clockwise 407C  
                             _S_done 009C                       __CFG_XINST$OFF 000000  
                             _W_done 009A                               ___wmul 41EC  
                          ??___awdiv 00D8                       __CFG_STVREN$ON 000000  
                          ??___awmod 0005                            ??___lldiv 00DC  
                          ??___lwdiv 00D8                            ??___lwmod 00DF  
                   __end_of_initRamp 3E2E                     __end_of_is_valid 1CC6  
                             clear_0 3D56                               clear_1 3D62  
                             clear_2 3D6E                               clear_3 3D7A  
                       ?_motorStop_0 0001                         ?_motorStop_1 0001  
                       ?_motorStop_2 0001                         ?_motorStop_3 0001  
                   ___awdiv@quotient 00DA                      ___awmod@divisor 0003  
                             _number 007D                      ___awmod@counter 0005  
                          ??_lcdInst 00D6                               _printf 28BE  
                             _strcat 4146                               _strcmp 3F62  
                             _strcpy 3FF2                       i2___awdiv@sign 0006  
                          ??_readADC 00D6                            ??_initLCD 00D7  
                          ??_read_IR 00D6                   _compartment_number 0042  
                          ??_isdigit 00D4                    __end_ofi2___awdiv 3A5C  
                  __end_ofi2___lldiv 3ADE                    __end_ofi2___lwdiv 3E80  
                       __mediumconst FD76                    __end_ofi2___lwmod 4146  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                    __end_ofi2_lcdInst 440A  
                          ??_strncmp 000D                    __end_ofi2_initLCD 3F18  
                  __end_ofi2_isdigit 439E                           __accesstop 0080  
            __end_of__initialization 3D80                __end_of_get_RTC_final 373A  
                      ___rparam_used 000001                   i2___lwmod@dividend 0008  
               __end_of_happynewyear FDA1                       __pcstackCOMRAM 0001  
                 i2___lldiv@dividend 0001                         __pidataBANK0 4450  
            i2I2C_Master_Read@ackBit 0002                        __end_of_check 3C28  
                      __end_of_array FDA4                        __end_of_putch 43B6  
                        i2printf@idx 0019                          i2printf@len 001F  
                        i2printf@val 0021                        _B_spacingTime 00A8  
                          ?i2___wmul 0001                   __size_of_lcdNibble 0088  
                        i2putch@data 0003                            ?i2_printf 000D  
                            ??_check 0003                              ??_putch 00D6  
                 i2___lldiv@quotient 0009                           __pbssBANK0 0080  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                  ?_interruptHandler 0001               ?_servoRotate_clockwise 0001  
                 ??_interruptHandler 0027                        _init_position 00FD  
                       ?i2_lcdNibble 0001                              ?___wmul 00DC  
         i2I2C_Master_Init@clockFreq 000E                 __size_of_ramp_Rotate 0052  
                            ?_printf 00E2                              ?_strcat 0001  
                            ?_strcmp 0001                              ?_strcpy 0007  
                         ??i2___wmul 0005                         _gear_counter 00C2  
                       read_IR@input 00D6                           _final_time 0090  
                         ??i2_printf 0015                 lcd@LCDinterruptState 0077  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                              _B_array 0130  
                            _B_count 00B8                            ?_initRamp 0001  
                            i2_putch 43E2                            ?_is_valid 0001  
                            _N_array 0110                              _N_count 00B4  
        __size_ofi2_I2C_Master_Start 0008                    __end_of_lcdNibble 37C2  
        __size_ofi2_I2C_Master_Write 000A                           _count_gear 3ADE  
                            _S_array 0120                              _S_count 00B6  
                            __Hparam 0000                           _hr_initial 005D  
                            __Lparam 0000                              _W_array 0100  
                            _W_count 00B2                              ___awdiv 37C2  
                            ___awmod 3B54                              ___lldiv 3954  
                    __size_of___wmul 0028                              ___lwdiv 3CE4  
                            ___lwmod 40C0             interruptHandler@keypress 0040  
                            __pcinit 3D38                              __ramtop 1000  
                         _initialize 338C                              _lcdInst 43B6  
                            __ptext0 0012                              __ptext1 4038  
                            __ptext2 407C                              __ptext3 3F18  
                            __ptext4 3FAC                              __ptext5 3D8A  
                            __ptext6 4280                              __ptext7 42A0  
                            __ptext8 42C0                              __ptext9 42E0  
                    __size_of_printf 0448                      __size_of_strcat 0042  
                    __size_of_strcmp 004A                              _readADC 4188  
                    __size_of_strcpy 0046                              _initLCD 3E80  
                  __end_of_hexpowers FD9A                              _counter 006F  
               __size_of_motorStop_0 0020                 __size_of_motorStop_1 0020  
               __size_of_motorStop_2 0020                 __size_of_motorStop_3 0020  
                            _dpowers FD88                              _read_IR 3FAC  
                            _isdigit 425E                     ___awmod@dividend 0001  
                      ?_motorStart_0 0001                        ?_motorStart_1 0001  
                      ?_motorStart_2 0001                        ?_motorStart_3 0001  
        __end_of_servoRotate_ConStop 3F62                            _LCD_RIGHT FDA5  
           __size_of_I2C_Master_Init 0060             __size_of_I2C_Master_Read 002A  
           __size_of_I2C_Master_Wait 0014             __size_of_I2C_Master_Stop 0008  
                      _S_spacingTime 00A4                              _strncmp 38CE  
                     __pintcode_body 1CC6                 end_of_initialization 3D80  
              __end_of_LCD_SIZE_HORZ FDA8                __end_of_LCD_SIZE_VERT FDA7  
       ??_generate_compartment_array 0003                         _final_number 0150  
                         ??_initRamp 00E9                              int_func 1CC6  
                i2___wmul@multiplier 0001                           ??_is_valid 0007  
                     _operation_done 00C4            __size_of_I2C_Master_Start 0008  
          __size_of_I2C_Master_Write 000A                      ___lldiv@divisor 00D8  
                    ___lldiv@counter 00E0          __end_of_servoRotate_counter 407C  
                            printf@c 00F7                              printf@f 00E2  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                              strcmp@r 0006  
                          _PORTAbits 000F80                           _prev_state 0067  
                     ??_motorStart_0 00D4                       ??_motorStart_1 00D4  
                     ??_motorStart_2 00D4                       ??_motorStart_3 00D4  
__size_of_generate_compartment_array 026C                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                  i2_I2C_Master_Init 3C88                    i2_I2C_Master_Read 423A  
                  i2_I2C_Master_Wait 440A                         _happynewyear FD9A  
                  i2_I2C_Master_Stop 4440                            i2___awdiv 39D8  
                         _white_tape 00CA                    i2___lwdiv@divisor 0003  
                          i2___lldiv 3A5C                            i2___lwdiv 3E2E  
                          i2___lwmod 4104                   ?i2_I2C_Master_Init 000E  
                  i2___lwdiv@counter 0007                   ?i2_I2C_Master_Read 0001  
                 ?i2_I2C_Master_Wait 0001                   ?i2_I2C_Master_Stop 0001  
                          i2_lcdInst 43F6             __size_of_get_RTC_initial 0132  
                        printf@width 00F5                            i2_initLCD 3ECC  
                 i2___awdiv@dividend 0001                          ?_count_gear 0001  
                ??i2_I2C_Master_Init 0012                  ??i2_I2C_Master_Read 0002  
                          i2_isdigit 4380                  ??i2_I2C_Master_Wait 0001  
                ??i2_I2C_Master_Stop 0002                       __end_of___wmul 4214  
               __size_ofi2_lcdNibble 0086                          ?_initialize 0001  
                      i2lcdInst@data 0003                     i2___wmul@product 0005  
                     __end_of_printf 2D06                       __end_of_strcat 4188  
                     __end_of_strcmp 3FAC                         i2printf@flag 0023  
                     __end_of_strcpy 4038            __end_ofi2_I2C_Master_Init 3CE4  
          __end_ofi2_I2C_Master_Read 425E            __end_ofi2_I2C_Master_Wait 441C  
                       i2printf@prec 001A                  start_initialization 3D38  
          __end_ofi2_I2C_Master_Stop 4448                   i2___awdiv@quotient 0007  
                  __size_ofi2___wmul 0026                            i2printf@c 0026  
                          i2printf@f 000D                           ?i2___awdiv 0001  
                         ?i2___lldiv 0001                           ?i2___lwdiv 0001  
                         ?i2___lwmod 0008                    __size_ofi2_printf 041A  
            ??_servoRotate_clockwise 00D4                    ??_I2C_Master_Init 00E5  
                  ??_I2C_Master_Read 00D5                    ??_I2C_Master_Wait 00D4  
                         ?i2_lcdInst 0001                    ??_I2C_Master_Stop 00D5  
                       _counter_step 006D                           ?i2_initLCD 0001  
                         ?i2_isdigit 0001                    interruptHandler@i 003E  
                           ??___wmul 00E0             I2C_Master_Init@clockFreq 00E1  
                        __pdataBANK0 00FD                     __CFG_LPT1OSC$OFF 000000  
                           ??_printf 00E6            __size_of_interruptHandler 28B6  
                           ??_strcat 0005                             ??_strcmp 0005  
                           ??_strcpy 000B               __size_of_get_RTC_final 0132  
                        __pbssCOMRAM 0042                  __size_of_count_gear 0076  
                        _change_mode 00C6                        __pcstackBANK0 00D4  
                  i2___lwmod@divisor 000A                    i2___lwmod@counter 000C  
                       _isdigit$1385 00D5   __end_of_generate_compartment_array 338C  
         _generate_compartment_array 3120                             ?i2_putch 0001  
                __size_of_initialize 014A                         _current_set2 0078  
                   _I2C_Master_Start 4438                     _I2C_Master_Write 441C  
                  __size_of_initRamp 0052                 __end_of_motorStart_0 4380  
               __end_of_motorStart_1 4360                 __end_of_motorStart_2 4340  
               __end_of_motorStart_3 4320                    __size_of_is_valid 0E50  
                          _main$1753 00FB                     ___lwdiv@dividend 00D4  
                      ??_ramp_Rotate 00E9                         _initial_time 0098  
                  __CFG_CCP2MX$PORTC 000000                            __pintcode 0008  
                  ??_get_RTC_initial 00E2                        __pmediumconst FD76  
                          _lcdNibble 373A                             ?___awdiv 00D4  
                           ?___awmod 0001                             ?___lldiv 00D4  
                           ?___lwdiv 00D4                             ?___lwmod 00DB  
                          _final_set 018C                             ?_lcdInst 0001  
                           ?_readADC 00D4                             ?_initLCD 0001  
                           ?_read_IR 00D4                             ?_isdigit 0001  
         __size_ofi2_I2C_Master_Init 005C           __size_ofi2_I2C_Master_Read 0024  
         __size_ofi2_I2C_Master_Wait 0012           __size_ofi2_I2C_Master_Stop 0008  
                          _hexpowers FD92                       __size_of_check 0064  
                   ___lwdiv@quotient 00D8                          ??i2___awdiv 0005  
                        ??i2___lldiv 0009                        _W_spacingTime 00A2  
                          _min_final 0094                             ?_strncmp 0007  
                        ??i2___lwdiv 0005                          ??i2___lwmod 000C  
                     __size_of_putch 0018                            _sec_final 0092  
                           _LCD_LEFT FDA4           __end_ofi2_I2C_Master_Start 4450  
         __end_ofi2_I2C_Master_Write 4430                          ??i2_lcdInst 0003  
                     ___wmul@product 00E0                             _LATCbits 000F8B  
                           _LATDbits 000F8C                          ??i2_initLCD 0004  
                        ??i2_isdigit 0001                        _get_RTC_final 3608  
                      _operationTime 0071                             i2u320_40 3A8E  
                           i2u410_40 3032                             i2u323_40 3E50  
                           i2u308_40 3FA0                             i2u412_40 3104  
                           i2u500_40 25B8                             i2u326_40 411E  
                           i2u344_40 402E                             i2u272_45 3886  
                           i2u272_46 3888                             i2u344_47 4024  
                           i2u600_47 2584                             i2u417_40 3A1E  
                           i2u409_40 301E                             i2u273_45 38CA  
                           i2u273_46 38CC                             i2u601_47 25D2  
                           i2u610_47 386C                             i2u602_47 2640  
                           i2u371_40 3BD4                             i2u611_47 3876  
                           i2u603_47 2714                             i2u372_40 3BE4  
                           i2u612_47 38B0                             i2u604_47 277C  
                           i2u373_40 3BF4                             i2u349_40 38FE  
                           i2u613_47 38BA                             i2u605_47 279C  
                           i2u374_40 3C04                             i2u382_45 3CBC  
                           i2u606_47 43EE                             i2u375_40 3C14  
                           i2u471_40 1DE4                             i2u383_45 4256  
                           i2u383_46 4258                             i2u607_47 3ED2  
                          _operation 0073                             i2u392_40 2E90  
                           i2u608_47 3F06                             i2u392_47 2E86  
                           i2u609_47 4402                             i2u379_40 3B8E  
                           i2u388_40 2E30                             i2u476_40 1EB6  
                           i2u388_47 2E26                             i2u469_40 1D74  
                           i2u478_40 1F26                             i2u590_47 1DFC  
                           i2u479_40 1FB4                             i2u591_47 1E52  
                           i2u496_40 242A                             i2u592_47 1F3E  
                           i2u593_47 1F94                             i2u498_40 253A  
                           i2u594_47 20CE                             i2u595_47 20E2  
                           i2u596_47 22A0                             i2u597_47 23FE  
                           i2u598_47 24D4                             i2u599_47 2514  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
      i2I2C_Master_Write@byteToWrite 0002                        ??_motorStop_0 00D4  
                      ??_motorStop_1 00D4                        ??_motorStop_2 00D4  
                      ??_motorStop_3 00D4                  __end_of_ramp_Rotate 3DDC  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 00DC  
                           i2___wmul 4214                        lcdNibble@data 00D5  
                           _B_remain 00B0                           printf@flag 00F4  
                      lcdNibble@temp 00D4                           printf@prec 00EB  
                  i2___awdiv@divisor 0003                    i2___awdiv@counter 0005  
                           i2_printf 2D06                       _LCD_HORZ_LIMIT FDA9  
               interruptHandler@temp 0041         __size_of_servoRotate_ConStop 004A  
                           _N_remain 00AE                     __size_ofi2_putch 0014  
                     ?_get_RTC_final 0001                         ??_count_gear 00F8  
                           _S_remain 00AC                             __Hrparam 0000  
                           __Lrparam 0000                             _W_remain 00AA  
                 __CFG_BOREN$SBORDIS 000000                     __size_of___awdiv 0086  
                   __size_of___awmod 0070                i2___wmul@multiplicand 0003  
                   __size_of___lldiv 0084                     __size_of___lwdiv 0054  
                   __size_of___lwmod 0044                       readADC@channel 00D8  
                       ??_initialize 00D4                     _interruptHandler 0008  
       __size_of_servoRotate_counter 0044                     __size_of_lcdInst 0018  
                    _I2C_Master_Init 3C28                     __size_of_readADC 003A  
                    _I2C_Master_Read 41C2                     __size_of_initLCD 004C  
                        _current_set 00CF                      _I2C_Master_Wait 43CE  
                         strcat@from 0003                      _I2C_Master_Stop 4430  
             __end_of_LCD_HORZ_LIMIT FDAA                     __size_of_read_IR 0046  
                __end_of_motorStop_0 4300                  __end_of_motorStop_1 42E0  
                __end_of_motorStop_2 42C0                     __size_of_isdigit 0022  
                __end_of_motorStop_3 42A0                      ___lwdiv@divisor 00D6  
                 __end_of_count_gear 3B54                      ___lwdiv@counter 00DA  
                           __ptext10 4300                             __ptext11 4320  
                           __ptext20 37C2                             __ptext12 4340  
                           __ptext21 441C                             __ptext13 4360  
                           __ptext30 425E                             __ptext22 4430  
                           __ptext14 338C                             __ptext31 41EC  
                           __ptext23 4438                             __ptext15 3DDC  
                           __ptext40 4380                             __ptext32 40C0  
                           __ptext24 41C2                             __ptext16 3C28  
                           __ptext41 4104                             __ptext33 3CE4  
                           __ptext25 43CE                             __ptext17 3954  
                           __ptext50 423A                             __ptext42 3E2E  
                           __ptext34 3E80                             __ptext26 3ADE  
                           __ptext18 34D6                             __ptext51 440A  
                           __ptext43 3ECC                             __ptext35 43B6  
                           __ptext27 4188                             __ptext19 3608  
                           __ptext60 3120                             __ptext52 3C88  
                           __ptext44 43F6                             __ptext36 373A  
                           __ptext28 28BE                             __ptext61 3BC4  
                           __ptext53 3A5C                             __ptext45 3848  
                           __ptext29 439E                             __ptext62 3B54  
                           __ptext54 38CE                             __ptext46 39D8  
                           __ptext38 2D06                             __ptext55 3FF2  
                           __ptext47 4426                             __ptext39 43E2  
                           __ptext56 4146                             __ptext48 4440  
                           __ptext57 0E76                             __ptext49 4448  
                           __ptext58 4214                             __ptext59 3F62  
                           _fastener 0200                       _LCD_VERT_LIMIT FDA8  
                        _min_initial 005B                     __size_of_strncmp 0086  
                           _hr_final 0096                           strcpy@from 0009  
                     i2_isdigit$1385 0002                __size_of_motorStart_0 0020  
              __size_of_motorStart_1 0020                __size_of_motorStart_2 0020  
              __size_of_motorStart_3 0020                             _initRamp 3DDC  
     __size_of_servoRotate_clockwise 0044                        __size_of_main 0E64  
                           _is_valid 0E76        __end_of_servoRotate_clockwise 40C0  
                         strncmp@len 000B                   __end_of_initialize 34D6  
                        _sec_initial 0059                          _ramp_Rotate 3D8A  
                           _temp_set 01B4                        ??i2_lcdNibble 0001  
                        ??_lcdNibble 00D4                             _prev_set 0164  
                           int$flags 007F                            printf@idx 00EA  
                          printf@len 00F0                            printf@val 00F2  
        I2C_Master_Write@byteToWrite 00D5                            putch@data 00D6  
           __end_of_I2C_Master_Start 4440             __end_of_I2C_Master_Write 4426  
                         _INTCONbits 000FF2                         _motorStart_0 4360  
                       _motorStart_1 4340                         _motorStart_2 4320  
                       _motorStart_3 4300               __end_of_LCD_VERT_LIMIT FDA9  
                           isdigit@c 00D6                             intlevel2 0000  
        ?_generate_compartment_array 0001                      _get_RTC_initial 34D6  
                    ??_get_RTC_final 00E2                        _LCD_SIZE_HORZ FDA7  
                   ___lwmod@dividend 00DB                        _LCD_SIZE_VERT FDA6  
                   ___lldiv@dividend 00D4                            strncmp@s1 0007  
                          strncmp@s2 0009                             printf@ap 00EE  
                           printf@cp 00EC              __end_of_I2C_Master_Init 3C88  
            __end_of_I2C_Master_Read 41EC              __end_of_I2C_Master_Wait 43E2  
            __end_of_I2C_Master_Stop 4438                          lcdInst@data 00D6  
                        _motorStop_0 42E0                          _motorStop_1 42C0  
                        _motorStop_2 42A0                          _motorStop_3 4280  
                __end_ofi2_lcdNibble 38CE                             strcat@cp 0005  
                           strcat@to 0001                             strcmp@s1 0001  
                           strcmp@s2 0003                     ___lldiv@quotient 00DC  
                    ___lwmod@divisor 00DD                             strcpy@cp 000B  
                           strcpy@to 0007                      ___lwmod@counter 00DF  
                        _SSPCON1bits 000FC6                          _SSPCON2bits 000FC5  
                        _prev_number 0140        i2I2C_Master_Read@receivedByte 0003  
