

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Apr  7 20:26:55 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4620 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	smallconst
    73  001000                     __psmallconst:
    74                           	opt stack 0
    75  001000  00                 	db	0
    76  001001                     _dpowers:
    77                           	opt stack 0
    78  001001  0001               	dw	1
    79  001003  000A               	dw	10
    80  001005  0064               	dw	100
    81  001007  03E8               	dw	1000
    82  001009  2710               	dw	10000
    83  00100B                     __end_of_dpowers:
    84                           	opt stack 0
    85  00100B                     _LCD_LEFT:
    86                           	opt stack 0
    87  00100B  00                 	db	0
    88  00100C                     __end_of_LCD_LEFT:
    89                           	opt stack 0
    90  00100C                     _LCD_RIGHT:
    91                           	opt stack 0
    92  00100C  01                 	db	1
    93  00100D                     __end_of_LCD_RIGHT:
    94                           	opt stack 0
    95  00100D                     _LCD_SIZE_VERT:
    96                           	opt stack 0
    97  00100D  02                 	db	2
    98  00100E                     __end_of_LCD_SIZE_VERT:
    99                           	opt stack 0
   100  00100E                     _LCD_SIZE_HORZ:
   101                           	opt stack 0
   102  00100E  10                 	db	16
   103  00100F                     __end_of_LCD_SIZE_HORZ:
   104                           	opt stack 0
   105  00100F                     _LCD_VERT_LIMIT:
   106                           	opt stack 0
   107  00100F  02                 	db	2
   108  001010                     __end_of_LCD_VERT_LIMIT:
   109                           	opt stack 0
   110  001010                     _LCD_HORZ_LIMIT:
   111                           	opt stack 0
   112  001010  28                 	db	40
   113  001011                     __end_of_LCD_HORZ_LIMIT:
   114                           	opt stack 0
   115  0000                     _SSPBUF	set	4041
   116  0000                     _SSPCON2bits	set	4037
   117  0000                     _SSPADD	set	4040
   118  0000                     _SSPCON2	set	4037
   119  0000                     _SSPCON1	set	4038
   120  0000                     _SSPSTAT	set	4039
   121  0000                     _SSPCON1bits	set	4038
   122  0000                     _ADRESL	set	4035
   123  0000                     _ADRESH	set	4036
   124  0000                     _ADCON0bits	set	4034
   125  0000                     _PORTBbits	set	3969
   126  0000                     _TRISBbits	set	3987
   127  0000                     _TRISCbits	set	3988
   128  0000                     _LATCbits	set	3979
   129  0000                     _ADCON2bits	set	4032
   130  0000                     _ADCON1	set	4033
   131  0000                     _ADCON0	set	4034
   132  0000                     _TRISE	set	3990
   133  0000                     _TRISD	set	3989
   134  0000                     _TRISC	set	3988
   135  0000                     _TRISB	set	3987
   136  0000                     _TRISA	set	3986
   137  0000                     _LATE	set	3981
   138  0000                     _LATC	set	3979
   139  0000                     _LATB	set	3978
   140  0000                     _LATA	set	3977
   141  0000                     _OSCTUNEbits	set	3995
   142  0000                     _OSCCONbits	set	4051
   143  0000                     _INTCONbits	set	4082
   144  0000                     _LATD	set	3980
   145  0000                     _LATDbits	set	3980
   146  0000                     _ADON	set	32272
   147  0000                     _RBIF	set	32656
   148  0000                     _RBIE	set	32659
   149  001011                     STR_2:
   150  001011  57                 	db	87	;'W'
   151  001012  5F                 	db	95	;'_'
   152  001013  63                 	db	99	;'c'
   153  001014  6F                 	db	111	;'o'
   154  001015  75                 	db	117	;'u'
   155  001016  6E                 	db	110	;'n'
   156  001017  74                 	db	116	;'t'
   157  001018  3A                 	db	58	;':'
   158  001019  25                 	db	37
   159  00101A  64                 	db	100	;'d'
   160  00101B  00                 	db	0
   161  0000                     
   162                           ; #config settings
   163  00101C  00                 	db	0	; dummy byte at the end
   164  0000                     
   165                           	psect	cinit
   166  00171A                     __pcinit:
   167                           	opt stack 0
   168  00171A                     start_initialization:
   169                           	opt stack 0
   170  00171A                     __initialization:
   171                           	opt stack 0
   172                           
   173                           ; Clear objects allocated to COMRAM (10 bytes)
   174  00171A  EE00  F047         	lfsr	0,__pbssCOMRAM
   175  00171E  0E0A               	movlw	10
   176  001720                     clear_0:
   177  001720  6AEE               	clrf	postinc0,c
   178  001722  06E8               	decf	wreg,f,c
   179  001724  E1FD               	bnz	clear_0
   180  001726                     end_of_initialization:
   181                           	opt stack 0
   182  001726                     __end_of__initialization:
   183                           	opt stack 0
   184  001726  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   185  001728  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   186  00172A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   187  00172C  6EF8               	movwf	tblptru,c
   188  00172E  0100               	movlb	0
   189  001730  EFA0  F009         	goto	_main	;jump to C main() function
   190                           tblptru	equ	0xFF8
   191                           postinc0	equ	0xFEE
   192                           wreg	equ	0xFE8
   193                           
   194                           	psect	bssCOMRAM
   195  000047                     __pbssCOMRAM:
   196                           	opt stack 0
   197  000047                     _W_count:
   198                           	opt stack 0
   199  000047                     	ds	2
   200  000049                     _S_count:
   201                           	opt stack 0
   202  000049                     	ds	2
   203  00004B                     _N_count:
   204                           	opt stack 0
   205  00004B                     	ds	2
   206  00004D                     _B_count:
   207                           	opt stack 0
   208  00004D                     	ds	2
   209  00004F                     	ds	1
   210  000050                     _LCDinterruptState:
   211                           	opt stack 0
   212  000050                     	ds	1
   213                           tblptru	equ	0xFF8
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           
   217                           	psect	cstackCOMRAM
   218  000001                     __pcstackCOMRAM:
   219                           	opt stack 0
   220  000001                     ?i2___lwdiv:
   221                           	opt stack 0
   222  000001                     i2lcdNibble@temp:
   223                           	opt stack 0
   224  000001                     i2___lwdiv@dividend:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x0
   228  000001                     	ds	1
   229  000002                     i2lcdNibble@data:
   230                           	opt stack 0
   231                           
   232                           ; 1 bytes @ 0x1
   233  000002                     	ds	1
   234  000003                     i2lcdInst@data:
   235                           	opt stack 0
   236  000003                     i2putch@data:
   237                           	opt stack 0
   238  000003                     i2___lwdiv@divisor:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x2
   242  000003                     	ds	1
   243  000004                     ??i2_initLCD:
   244                           
   245                           ; 1 bytes @ 0x3
   246  000004                     	ds	1
   247  000005                     i2___lwdiv@quotient:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x4
   251  000005                     	ds	2
   252  000007                     i2___lwdiv@counter:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x6
   256  000007                     	ds	1
   257  000008                     ?i2___lwmod:
   258                           	opt stack 0
   259  000008                     i2___lwmod@dividend:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x7
   263  000008                     	ds	2
   264  00000A                     i2___lwmod@divisor:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x9
   268  00000A                     	ds	2
   269  00000C                     i2___lwmod@counter:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0xB
   273  00000C                     	ds	1
   274  00000D                     ?i2_printf:
   275                           	opt stack 0
   276  00000D                     i2printf@f:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0xC
   280  00000D                     	ds	4
   281  000011                     ??i2_printf:
   282                           
   283                           ; 1 bytes @ 0x10
   284  000011                     	ds	1
   285  000012                     i2printf@ap:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x11
   289  000012                     	ds	2
   290  000014                     i2printf@flag:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x13
   294  000014                     	ds	1
   295  000015                     i2printf@prec:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0x14
   299  000015                     	ds	1
   300  000016                     i2printf@val:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x15
   304  000016                     	ds	2
   305  000018                     i2printf@c:
   306                           	opt stack 0
   307                           
   308                           ; 1 bytes @ 0x17
   309  000018                     	ds	1
   310  000019                     ??_interruptHandler:
   311                           
   312                           ; 1 bytes @ 0x18
   313  000019                     	ds	19
   314  00002C                     interruptHandler@input:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x2B
   318  00002C                     	ds	2
   319  00002E                     ??_I2C_Master_Wait:
   320  00002E                     ?___lwdiv:
   321                           	opt stack 0
   322  00002E                     lcdNibble@temp:
   323                           	opt stack 0
   324  00002E                     ___lwdiv@dividend:
   325                           	opt stack 0
   326  00002E                     I2C_Master_Init@clockFreq:
   327                           	opt stack 0
   328                           
   329                           ; 4 bytes @ 0x2D
   330  00002E                     	ds	1
   331  00002F                     lcdNibble@data:
   332                           	opt stack 0
   333  00002F                     I2C_Master_Write@byteToWrite:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x2E
   337  00002F                     	ds	1
   338  000030                     lcdInst@data:
   339                           	opt stack 0
   340  000030                     putch@data:
   341                           	opt stack 0
   342  000030                     ___lwdiv@divisor:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2F
   346  000030                     	ds	1
   347  000031                     ??_initLCD:
   348  000031                     I2C_sendData@char_data:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x30
   352  000031                     	ds	1
   353  000032                     ___lwdiv@quotient:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x31
   357  000032                     	ds	2
   358  000034                     ___lwdiv@counter:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x33
   362  000034                     	ds	1
   363  000035                     ?___lwmod:
   364                           	opt stack 0
   365  000035                     ___lwmod@dividend:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x34
   369  000035                     	ds	2
   370  000037                     ___lwmod@divisor:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x36
   374  000037                     	ds	2
   375  000039                     ___lwmod@counter:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x38
   379  000039                     	ds	1
   380  00003A                     ?_printf:
   381                           	opt stack 0
   382  00003A                     printf@f:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x39
   386  00003A                     	ds	4
   387  00003E                     ??_printf:
   388                           
   389                           ; 1 bytes @ 0x3D
   390  00003E                     	ds	1
   391  00003F                     printf@ap:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x3E
   395  00003F                     	ds	2
   396  000041                     printf@flag:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x40
   400  000041                     	ds	1
   401  000042                     printf@prec:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x41
   405  000042                     	ds	1
   406  000043                     printf@val:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x42
   410  000043                     	ds	2
   411  000045                     printf@c:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x44
   415  000045                     	ds	1
   416  000046                     ??_main:
   417                           
   418                           ; 1 bytes @ 0x45
   419  000046                     	ds	1
   420                           tblptru	equ	0xFF8
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           
   424 ;;
   425 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   426 ;;
   427 ;; *************** function _main *****************
   428 ;; Defined at:
   429 ;;		line 24 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;Total ram usage:        1 bytes
   448 ;; Hardware stack levels required when called:    7
   449 ;; This function calls:
   450 ;;		_I2C_init
   451 ;;		_I2C_sendData
   452 ;;		_initLCD
   453 ;;		_lcdInst
   454 ;;		_printf
   455 ;; This function is called by:
   456 ;;		Startup code after reset
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460                           	psect	text0
   461  001340                     __ptext0:
   462                           	opt stack 0
   463  001340                     _main:
   464                           	opt stack 24
   465                           
   466                           ;main.c: 31: OSCCONbits.IRCF2 = 1;
   467                           
   468                           ;incstack = 0
   469  001340  8CD3               	bsf	4051,6,c	;volatile
   470                           
   471                           ;main.c: 32: OSCCONbits.IRCF1 = 1;
   472  001342  8AD3               	bsf	4051,5,c	;volatile
   473                           
   474                           ;main.c: 33: OSCCONbits.IRCF0 = 1;
   475  001344  88D3               	bsf	4051,4,c	;volatile
   476                           
   477                           ;main.c: 34: OSCCONbits.SCS1 = 1;
   478  001346  82D3               	bsf	4051,1,c	;volatile
   479                           
   480                           ;main.c: 35: OSCTUNEbits.PLLEN = 1;
   481  001348  8C9B               	bsf	3995,6,c	;volatile
   482                           
   483                           ;main.c: 39: LATA = 0x00;
   484  00134A  0E00               	movlw	0
   485  00134C  6E89               	movwf	3977,c	;volatile
   486                           
   487                           ;main.c: 40: LATB = 0x00;
   488  00134E  0E00               	movlw	0
   489  001350  6E8A               	movwf	3978,c	;volatile
   490                           
   491                           ;main.c: 41: LATC = 0x00;
   492  001352  0E00               	movlw	0
   493  001354  6E8B               	movwf	3979,c	;volatile
   494                           
   495                           ;main.c: 42: LATD = 0x00;
   496  001356  0E00               	movlw	0
   497  001358  6E8C               	movwf	3980,c	;volatile
   498                           
   499                           ;main.c: 43: LATE = 0x00;
   500  00135A  0E00               	movlw	0
   501  00135C  6E8D               	movwf	3981,c	;volatile
   502                           
   503                           ;main.c: 47: TRISA = 0xFF;
   504  00135E  6892               	setf	3986,c	;volatile
   505                           
   506                           ;main.c: 48: TRISB = 0xFF;
   507  001360  6893               	setf	3987,c	;volatile
   508                           
   509                           ;main.c: 49: TRISC = 0x00;
   510  001362  0E00               	movlw	0
   511  001364  6E94               	movwf	3988,c	;volatile
   512                           
   513                           ;main.c: 50: TRISD = 0x00;
   514  001366  0E00               	movlw	0
   515  001368  6E95               	movwf	3989,c	;volatile
   516                           
   517                           ;main.c: 51: TRISE = 0x00;
   518  00136A  0E00               	movlw	0
   519  00136C  6E96               	movwf	3990,c	;volatile
   520                           
   521                           ;main.c: 54: ADCON0 = 0x00;
   522  00136E  0E00               	movlw	0
   523  001370  6EC2               	movwf	4034,c	;volatile
   524                           
   525                           ;main.c: 55: ADCON1 = 0b00001111;
   526  001372  0E0F               	movlw	15
   527  001374  6EC1               	movwf	4033,c	;volatile
   528                           
   529                           ;main.c: 56: ADCON2bits.ADFM = 1;
   530  001376  8EC0               	bsf	4032,7,c	;volatile
   531                           
   532                           ;main.c: 61: (INTCONbits.GIE = 1);
   533  001378  8EF2               	bsf	intcon,7,c	;volatile
   534                           
   535                           ;main.c: 62: initLCD();
   536  00137A  ECD9  F00A         	call	_initLCD	;wreg free
   537                           
   538                           ;main.c: 63: I2C_init();
   539  00137E  EC67  F00B         	call	_I2C_init	;wreg free
   540                           
   541                           ;main.c: 68: LATCbits.LATC0 = 1;
   542  001382  808B               	bsf	3979,0,c	;volatile
   543                           
   544                           ;main.c: 69: TRISCbits.RC0 = 0;
   545  001384  9094               	bcf	3988,0,c	;volatile
   546                           
   547                           ;main.c: 72: RBIE = 1;
   548  001386  86F2               	bsf	intcon,3,c	;volatile
   549                           
   550                           ;main.c: 78: initLCD();
   551  001388  ECD9  F00A         	call	_initLCD	;wreg free
   552                           
   553                           ;main.c: 79: W_count = 0;
   554  00138C  0E00               	movlw	0
   555  00138E  6E48               	movwf	_W_count+1,c
   556  001390  0E00               	movlw	0
   557  001392  6E47               	movwf	_W_count,c
   558                           
   559                           ;main.c: 81: I2C_sendData(11);
   560  001394  0E0B               	movlw	11
   561  001396  EC7C  F00B         	call	_I2C_sendData
   562                           
   563                           ;main.c: 82: TRISBbits.RB7 = 1;
   564  00139A  8E93               	bsf	3987,7,c	;volatile
   565  00139C                     l154:
   566                           
   567                           ;main.c: 87: initLCD();
   568  00139C  ECD9  F00A         	call	_initLCD	;wreg free
   569                           
   570                           ;main.c: 89: printf("%d",W_count);
   571  0013A0  0E19               	movlw	low (STR_2+8)
   572  0013A2  6E3A               	movwf	printf@f,c
   573  0013A4  0E10               	movlw	high (STR_2+8)
   574  0013A6  6E3B               	movwf	printf@f+1,c
   575  0013A8  C047  F03C         	movff	_W_count,?_printf+2
   576  0013AC  C048  F03D         	movff	_W_count+1,?_printf+3
   577  0013B0  EC0F  F008         	call	_printf	;wreg free
   578                           
   579                           ;main.c: 92: if(W_count >= 4){
   580  0013B4  BE48               	btfsc	_W_count+1,7,c
   581  0013B6  D00A               	goto	l155
   582  0013B8  5048               	movf	_W_count+1,w,c
   583  0013BA  E104               	bnz	u770
   584  0013BC  0E04               	movlw	4
   585  0013BE  5C47               	subwf	_W_count,w,c
   586  0013C0  A0D8               	btfss	status,0,c
   587  0013C2  D004               	goto	l155
   588  0013C4                     u770:
   589                           
   590                           ;main.c: 93: I2C_sendData(12);
   591  0013C4  0E0C               	movlw	12
   592  0013C6  EC7C  F00B         	call	_I2C_sendData
   593                           
   594                           ;main.c: 94: break;
   595  0013CA  D00B               	goto	l156
   596  0013CC                     l155:
   597                           
   598                           ;main.c: 95: }
   599                           ;main.c: 96: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   600  0013CC  0E80               	movlw	128
   601  0013CE  ECB0  F00B         	call	_lcdInst
   602  0013D2  0E34               	movlw	52
   603  0013D4  6E46               	movwf	??_main& (0+255),c
   604  0013D6  0EF2               	movlw	242
   605  0013D8                     u817:
   606  0013D8  2EE8               	decfsz	wreg,f,c
   607  0013DA  D7FE               	bra	u817
   608  0013DC  2E46               	decfsz	??_main& (0+255),f,c
   609  0013DE  D7FC               	bra	u817
   610  0013E0  D7DD               	goto	l154
   611  0013E2                     l156:
   612                           
   613                           ;main.c: 98: }
   614                           ;main.c: 99: initLCD();
   615  0013E2  ECD9  F00A         	call	_initLCD	;wreg free
   616                           
   617                           ;main.c: 100: RBIE = 0;
   618  0013E6  96F2               	bcf	intcon,3,c	;volatile
   619  0013E8                     
   620                           ;main.c: 104: printf("W_count:%d",W_count);
   621  0013E8  0E11               	movlw	low STR_2
   622  0013EA  6E3A               	movwf	printf@f,c
   623  0013EC  0E10               	movlw	high STR_2
   624  0013EE  6E3B               	movwf	printf@f+1,c
   625  0013F0  C047  F03C         	movff	_W_count,?_printf+2
   626  0013F4  C048  F03D         	movff	_W_count+1,?_printf+3
   627  0013F8  EC0F  F008         	call	_printf	;wreg free
   628                           
   629                           ;main.c: 105: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   630  0013FC  0E80               	movlw	128
   631  0013FE  ECB0  F00B         	call	_lcdInst
   632  001402  0E34               	movlw	52
   633  001404  6E46               	movwf	??_main& (0+255),c
   634  001406  0EF2               	movlw	242
   635  001408                     u827:
   636  001408  2EE8               	decfsz	wreg,f,c
   637  00140A  D7FE               	bra	u827
   638  00140C  2E46               	decfsz	??_main& (0+255),f,c
   639  00140E  D7FC               	bra	u827
   640  001410  D7EB               	goto	l158
   641  001412                     __end_of_main:
   642                           	opt stack 0
   643                           tblptru	equ	0xFF8
   644                           intcon	equ	0xFF2
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           status	equ	0xFD8
   648                           
   649 ;; *************** function _printf *****************
   650 ;; Defined at:
   651 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;  f               2   57[COMRAM] PTR const unsigned char 
   654 ;;		 -> STR_3(3), STR_2(11), STR_1(3), 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  tmpval          4    0        struct .
   657 ;;  cp              3    0        PTR const unsigned char 
   658 ;;  val             2   66[COMRAM] unsigned int 
   659 ;;  ap              2   62[COMRAM] PTR void [1]
   660 ;;		 -> ?i2_printf(2), ?_printf(2), 
   661 ;;  len             2    0        unsigned int 
   662 ;;  c               1   68[COMRAM] char 
   663 ;;  prec            1   65[COMRAM] char 
   664 ;;  flag            1   64[COMRAM] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  2   57[COMRAM] int 
   667 ;; Registers used:
   668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   675 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   678 ;;Total ram usage:       12 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    6
   681 ;; This function calls:
   682 ;;		___lwdiv
   683 ;;		___lwmod
   684 ;;		_putch
   685 ;; This function is called by:
   686 ;;		_main
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text1
   691  00101E                     __ptext1:
   692                           	opt stack 0
   693  00101E                     _printf:
   694                           	opt stack 24
   695                           
   696                           ;doprnt.c: 466: va_list ap;
   697                           ;doprnt.c: 499: signed char c;
   698                           ;doprnt.c: 506: signed char prec;
   699                           ;doprnt.c: 508: unsigned char flag;
   700                           ;doprnt.c: 523: union {
   701                           ;doprnt.c: 524: unsigned long vd;
   702                           ;doprnt.c: 525: double integ;
   703                           ;doprnt.c: 526: } tmpval;
   704                           ;doprnt.c: 528: unsigned int val;
   705                           ;doprnt.c: 529: unsigned len;
   706                           ;doprnt.c: 530: const char * cp;
   707                           ;doprnt.c: 533: *ap = __va_start();
   708                           
   709                           ;incstack = 0
   710  00101E  0E3C               	movlw	low (?_printf+2)
   711  001020  6E3F               	movwf	printf@ap,c
   712  001022  0E00               	movlw	high (?_printf+2)
   713  001024  6E40               	movwf	printf@ap+1,c
   714                           
   715                           ;doprnt.c: 536: while(c = *f++) {
   716  001026  D07D               	goto	u670
   717  001028                     
   718                           ;doprnt.c: 538: if(c != '%')
   719  001028  0E25               	movlw	37
   720  00102A  1845               	xorwf	printf@c,w,c
   721  00102C  B4D8               	btfsc	status,2,c
   722  00102E  D004               	goto	l233
   723                           
   724                           ;doprnt.c: 540: {
   725                           ;doprnt.c: 541: (putch(c) );
   726  001030  5045               	movf	printf@c,w,c
   727  001032  ECA6  F00B         	call	_putch
   728                           
   729                           ;doprnt.c: 542: continue;
   730  001036  D075               	goto	u670
   731  001038                     l233:
   732                           
   733                           ;doprnt.c: 543: }
   734                           ;doprnt.c: 548: flag = 0;
   735  001038  0E00               	movlw	0
   736  00103A  6E41               	movwf	printf@flag,c
   737                           
   738                           ;doprnt.c: 822: }
   739                           
   740                           ;doprnt.c: 813: continue;
   741                           
   742                           ;doprnt.c: 802: default:
   743                           
   744                           ;doprnt.c: 698: case 'i':
   745                           ;doprnt.c: 699: break;
   746                           
   747                           ;doprnt.c: 697: case 'd':
   748                           
   749                           ;doprnt.c: 638: goto alldone;
   750                           
   751                           ;doprnt.c: 637: case 0:
   752                           
   753                           ;doprnt.c: 635: switch(c = *f++) {
   754  00103C  C03A  FFF6         	movff	printf@f,tblptrl
   755  001040  C03B  FFF7         	movff	printf@f+1,tblptrh
   756  001044  4A3A               	infsnz	printf@f,f,c
   757  001046  2A3B               	incf	printf@f+1,f,c
   758  001048                     	if	0	;tblptru may be non-zero
   759  001048                     	endif
   760  001048                     	if	0	;tblptru may be non-zero
   761  001048                     	endif
   762  001048  0008               	tblrd		*
   763  00104A  CFF5 F045          	movff	tablat,printf@c
   764  00104E  5045               	movf	printf@c,w,c
   765                           
   766                           ; Switch size 1, requested type "space"
   767                           ; Number of cases is 3, Range of values is 0 to 105
   768                           ; switch strategies available:
   769                           ; Name         Instructions Cycles
   770                           ; simple_byte           10     6 (average)
   771                           ;	Chosen strategy is simple_byte
   772  001050  0A00               	xorlw	0	; case 0
   773  001052  B4D8               	btfsc	status,2,c
   774  001054  0012               	return	
   775  001056  0A64               	xorlw	100	; case 100
   776  001058  B4D8               	btfsc	status,2,c
   777  00105A  D003               	goto	l239
   778  00105C  0A0D               	xorlw	13	; case 105
   779  00105E  A4D8               	btfss	status,2,c
   780  001060  D060               	goto	u670
   781  001062                     l239:
   782                           
   783                           ;doprnt.c: 1253: {
   784                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   785  001062  C03F  FFD9         	movff	printf@ap,fsr2l
   786  001066  C040  FFDA         	movff	printf@ap+1,fsr2h
   787  00106A  CFDE F043          	movff	postinc2,printf@val
   788  00106E  CFDD F044          	movff	postdec2,printf@val+1
   789  001072  0E02               	movlw	2
   790  001074  263F               	addwf	printf@ap,f,c
   791  001076  0E00               	movlw	0
   792  001078  2240               	addwfc	printf@ap+1,f,c
   793                           
   794                           ;doprnt.c: 1261: if((int)val < 0) {
   795  00107A  AE44               	btfss	printf@val+1,7,c
   796  00107C  D006               	goto	l241
   797                           
   798                           ;doprnt.c: 1262: flag |= 0x03;
   799  00107E  0E03               	movlw	3
   800  001080  1241               	iorwf	printf@flag,f,c
   801                           
   802                           ;doprnt.c: 1263: val = -val;
   803  001082  6C43               	negf	printf@val,c
   804  001084  1E44               	comf	printf@val+1,f,c
   805  001086  B0D8               	btfsc	status,0,c
   806  001088  2A44               	incf	printf@val+1,f,c
   807  00108A                     l241:
   808                           
   809                           ;doprnt.c: 1264: }
   810                           ;doprnt.c: 1266: }
   811                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   812  00108A  0E01               	movlw	1
   813  00108C  6E45               	movwf	printf@c,c
   814  00108E                     l1514:
   815  00108E  0E05               	movlw	5
   816  001090  1845               	xorwf	printf@c,w,c
   817  001092  B4D8               	btfsc	status,2,c
   818  001094  D012               	goto	u650
   819                           
   820                           ;doprnt.c: 1306: if(val < dpowers[c])
   821  001096  5045               	movf	printf@c,w,c
   822  001098  0D02               	mullw	2
   823  00109A  0E01               	movlw	low _dpowers
   824  00109C  24F3               	addwf	prodl,w,c
   825  00109E  6EF6               	movwf	tblptrl,c
   826  0010A0  0E10               	movlw	high _dpowers
   827  0010A2  20F4               	addwfc	prodh,w,c
   828  0010A4  6EF7               	movwf	tblptrh,c
   829  0010A6                     	if	0	;There are less than 3 active tblptr bytes
   830  0010A6                     	endif
   831  0010A6  0009               	tblrd		*+
   832  0010A8  50F5               	movf	tablat,w,c
   833  0010AA  5C43               	subwf	printf@val,w,c
   834  0010AC  0009               	tblrd		*+
   835  0010AE  50F5               	movf	tablat,w,c
   836  0010B0  5844               	subwfb	printf@val+1,w,c
   837  0010B2  A0D8               	btfss	status,0,c
   838  0010B4  D002               	goto	u650
   839                           
   840                           ;doprnt.c: 1307: break;
   841  0010B6  2A45               	incf	printf@c,f,c
   842  0010B8  D7EA               	goto	l1514
   843  0010BA                     u650:
   844                           
   845                           ;doprnt.c: 1422: {
   846                           ;doprnt.c: 1438: if(flag & 0x03)
   847  0010BA  C041  F03E         	movff	printf@flag,??_printf
   848  0010BE  0E03               	movlw	3
   849  0010C0  163E               	andwf	??_printf,f,c
   850  0010C2  B4D8               	btfsc	status,2,c
   851  0010C4  D003               	goto	l245
   852                           
   853                           ;doprnt.c: 1439: (putch('-') );
   854  0010C6  0E2D               	movlw	45
   855  0010C8  ECA6  F00B         	call	_putch
   856  0010CC                     l245:
   857                           
   858                           ;doprnt.c: 1469: }
   859                           ;doprnt.c: 1472: prec = c;
   860  0010CC  C045  F042         	movff	printf@c,printf@prec
   861                           
   862                           ;doprnt.c: 1474: while(prec--) {
   863  0010D0  D024               	goto	l246
   864  0010D2                     
   865                           ;doprnt.c: 1478: {
   866                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   867  0010D2  5042               	movf	printf@prec,w,c
   868  0010D4  0D02               	mullw	2
   869  0010D6  0E01               	movlw	low _dpowers
   870  0010D8  24F3               	addwf	prodl,w,c
   871  0010DA  6EF6               	movwf	tblptrl,c
   872  0010DC  0E10               	movlw	high _dpowers
   873  0010DE  20F4               	addwfc	prodh,w,c
   874  0010E0  6EF7               	movwf	tblptrh,c
   875  0010E2                     	if	0	;There are less than 3 active tblptr bytes
   876  0010E2                     	endif
   877  0010E2  0009               	tblrd		*+
   878  0010E4  CFF5 F030          	movff	tablat,___lwdiv@divisor
   879  0010E8  000A               	tblrd		*-
   880  0010EA  CFF5 F031          	movff	tablat,___lwdiv@divisor+1
   881  0010EE  C043  F02E         	movff	printf@val,___lwdiv@dividend
   882  0010F2  C044  F02F         	movff	printf@val+1,___lwdiv@dividend+1
   883  0010F6  EC87  F00A         	call	___lwdiv	;wreg free
   884  0010FA  C02E  F035         	movff	?___lwdiv,___lwmod@dividend
   885  0010FE  C02F  F036         	movff	?___lwdiv+1,___lwmod@dividend+1
   886  001102  0E00               	movlw	0
   887  001104  6E38               	movwf	___lwmod@divisor+1,c
   888  001106  0E0A               	movlw	10
   889  001108  6E37               	movwf	___lwmod@divisor,c
   890  00110A  EC25  F00B         	call	___lwmod	;wreg free
   891  00110E  5035               	movf	?___lwmod,w,c
   892  001110  0F30               	addlw	48
   893  001112  6E45               	movwf	printf@c,c
   894                           
   895                           ;doprnt.c: 1523: }
   896                           ;doprnt.c: 1524: (putch(c) );
   897  001114  5045               	movf	printf@c,w,c
   898  001116  ECA6  F00B         	call	_putch
   899  00111A                     l246:
   900  00111A  0642               	decf	printf@prec,f,c
   901  00111C  2842               	incf	printf@prec,w,c
   902  00111E  A4D8               	btfss	status,2,c
   903  001120  D7D8               	goto	l247
   904  001122                     u670:
   905  001122  C03A  FFF6         	movff	printf@f,tblptrl
   906  001126  C03B  FFF7         	movff	printf@f+1,tblptrh
   907  00112A  4A3A               	infsnz	printf@f,f,c
   908  00112C  2A3B               	incf	printf@f+1,f,c
   909  00112E                     	if	0	;tblptru may be non-zero
   910  00112E                     	endif
   911  00112E                     	if	0	;tblptru may be non-zero
   912  00112E                     	endif
   913  00112E  0008               	tblrd		*
   914  001130  CFF5 F045          	movff	tablat,printf@c
   915  001134  5045               	movf	printf@c,w,c
   916  001136  B4D8               	btfsc	status,2,c
   917  001138  0012               	return	
   918  00113A  D776               	goto	l232
   919  00113C                     __end_of_printf:
   920                           	opt stack 0
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           prodh	equ	0xFF4
   926                           prodl	equ	0xFF3
   927                           intcon	equ	0xFF2
   928                           postinc0	equ	0xFEE
   929                           wreg	equ	0xFE8
   930                           postinc2	equ	0xFDE
   931                           postdec2	equ	0xFDD
   932                           fsr2h	equ	0xFDA
   933                           fsr2l	equ	0xFD9
   934                           status	equ	0xFD8
   935                           
   936 ;; *************** function _putch *****************
   937 ;; Defined at:
   938 ;;		line 24 in file "lcd.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  data            1    wreg     unsigned char 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  data            1   47[COMRAM] unsigned char 
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, status,2, status,0, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;Total ram usage:        1 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    5
   959 ;; This function calls:
   960 ;;		_lcdNibble
   961 ;; This function is called by:
   962 ;;		_printf
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text2
   967  00174C                     __ptext2:
   968                           	opt stack 0
   969  00174C                     _putch:
   970                           	opt stack 24
   971                           
   972                           ;incstack = 0
   973                           ;putch@data stored from wreg
   974  00174C  6E30               	movwf	putch@data,c
   975                           
   976                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   977  00174E  848C               	bsf	3980,2,c	;volatile
   978                           
   979                           ;lcd.c: 33: lcdNibble(data);
   980  001750  5030               	movf	putch@data,w,c
   981  001752  EC09  F00A         	call	_lcdNibble
   982                           
   983                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
   984  001756  0EA0               	movlw	160
   985  001758                     u837:
   986  001758  D000               	nop2	
   987  00175A  2EE8               	decfsz	wreg,f,c
   988  00175C  D7FD               	bra	u837
   989  00175E  0012               	return		;funcret
   990  001760                     __end_of_putch:
   991                           	opt stack 0
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           prodh	equ	0xFF4
   997                           prodl	equ	0xFF3
   998                           intcon	equ	0xFF2
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postinc2	equ	0xFDE
  1002                           postdec2	equ	0xFDD
  1003                           fsr2h	equ	0xFDA
  1004                           fsr2l	equ	0xFD9
  1005                           status	equ	0xFD8
  1006                           
  1007 ;; *************** function ___lwmod *****************
  1008 ;; Defined at:
  1009 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;  dividend        2   52[COMRAM] unsigned int 
  1012 ;;  divisor         2   54[COMRAM] unsigned int 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  counter         1   56[COMRAM] unsigned char 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  2   52[COMRAM] unsigned int 
  1017 ;; Registers used:
  1018 ;;		wreg, status,2, status,0
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;Total ram usage:        5 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    4
  1031 ;; This function calls:
  1032 ;;		Nothing
  1033 ;; This function is called by:
  1034 ;;		_printf
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text3
  1039  00164A                     __ptext3:
  1040                           	opt stack 0
  1041  00164A                     ___lwmod:
  1042                           	opt stack 25
  1043                           
  1044                           ;incstack = 0
  1045  00164A  5037               	movf	___lwmod@divisor,w,c
  1046  00164C  1038               	iorwf	___lwmod@divisor+1,w,c
  1047  00164E  B4D8               	btfsc	status,2,c
  1048  001650  D018               	goto	l669
  1049  001652  0E01               	movlw	1
  1050  001654  6E39               	movwf	___lwmod@counter,c
  1051  001656  D004               	goto	l664
  1052  001658  90D8               	bcf	status,0,c
  1053  00165A  3637               	rlcf	___lwmod@divisor,f,c
  1054  00165C  3638               	rlcf	___lwmod@divisor+1,f,c
  1055  00165E  2A39               	incf	___lwmod@counter,f,c
  1056  001660                     l664:
  1057  001660  AE38               	btfss	___lwmod@divisor+1,7,c
  1058  001662  D7FA               	goto	l665
  1059  001664                     u530:
  1060  001664  5037               	movf	___lwmod@divisor,w,c
  1061  001666  5C35               	subwf	___lwmod@dividend,w,c
  1062  001668  5038               	movf	___lwmod@divisor+1,w,c
  1063  00166A  5836               	subwfb	___lwmod@dividend+1,w,c
  1064  00166C  A0D8               	btfss	status,0,c
  1065  00166E  D004               	goto	l668
  1066  001670  5037               	movf	___lwmod@divisor,w,c
  1067  001672  5E35               	subwf	___lwmod@dividend,f,c
  1068  001674  5038               	movf	___lwmod@divisor+1,w,c
  1069  001676  5A36               	subwfb	___lwmod@dividend+1,f,c
  1070  001678                     l668:
  1071  001678  90D8               	bcf	status,0,c
  1072  00167A  3238               	rrcf	___lwmod@divisor+1,f,c
  1073  00167C  3237               	rrcf	___lwmod@divisor,f,c
  1074  00167E  2E39               	decfsz	___lwmod@counter,f,c
  1075  001680  D7F1               	goto	u530
  1076  001682                     l669:
  1077  001682  C035  F035         	movff	___lwmod@dividend,?___lwmod
  1078  001686  C036  F036         	movff	___lwmod@dividend+1,?___lwmod+1
  1079  00168A  0012               	return		;funcret
  1080  00168C                     __end_of___lwmod:
  1081                           	opt stack 0
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           prodh	equ	0xFF4
  1087                           prodl	equ	0xFF3
  1088                           intcon	equ	0xFF2
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postinc2	equ	0xFDE
  1092                           postdec2	equ	0xFDD
  1093                           fsr2h	equ	0xFDA
  1094                           fsr2l	equ	0xFD9
  1095                           status	equ	0xFD8
  1096                           
  1097 ;; *************** function ___lwdiv *****************
  1098 ;; Defined at:
  1099 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  dividend        2   45[COMRAM] unsigned int 
  1102 ;;  divisor         2   47[COMRAM] unsigned int 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  quotient        2   49[COMRAM] unsigned int 
  1105 ;;  counter         1   51[COMRAM] unsigned char 
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  2   45[COMRAM] unsigned int 
  1108 ;; Registers used:
  1109 ;;		wreg, status,2, status,0
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1115 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1118 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;Total ram usage:        7 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; Hardware stack levels required when called:    4
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_printf
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text4
  1130  00150E                     __ptext4:
  1131                           	opt stack 0
  1132  00150E                     ___lwdiv:
  1133                           	opt stack 25
  1134                           
  1135                           ;incstack = 0
  1136  00150E  0E00               	movlw	0
  1137  001510  6E33               	movwf	___lwdiv@quotient+1,c
  1138  001512  0E00               	movlw	0
  1139  001514  6E32               	movwf	___lwdiv@quotient,c
  1140  001516  5030               	movf	___lwdiv@divisor,w,c
  1141  001518  1031               	iorwf	___lwdiv@divisor+1,w,c
  1142  00151A  B4D8               	btfsc	status,2,c
  1143  00151C  D01C               	goto	l659
  1144  00151E  0E01               	movlw	1
  1145  001520  6E34               	movwf	___lwdiv@counter,c
  1146  001522  D004               	goto	l654
  1147  001524  90D8               	bcf	status,0,c
  1148  001526  3630               	rlcf	___lwdiv@divisor,f,c
  1149  001528  3631               	rlcf	___lwdiv@divisor+1,f,c
  1150  00152A  2A34               	incf	___lwdiv@counter,f,c
  1151  00152C                     l654:
  1152  00152C  AE31               	btfss	___lwdiv@divisor+1,7,c
  1153  00152E  D7FA               	goto	l655
  1154  001530                     u500:
  1155  001530  90D8               	bcf	status,0,c
  1156  001532  3632               	rlcf	___lwdiv@quotient,f,c
  1157  001534  3633               	rlcf	___lwdiv@quotient+1,f,c
  1158  001536  5030               	movf	___lwdiv@divisor,w,c
  1159  001538  5C2E               	subwf	___lwdiv@dividend,w,c
  1160  00153A  5031               	movf	___lwdiv@divisor+1,w,c
  1161  00153C  582F               	subwfb	___lwdiv@dividend+1,w,c
  1162  00153E  A0D8               	btfss	status,0,c
  1163  001540  D005               	goto	l658
  1164  001542  5030               	movf	___lwdiv@divisor,w,c
  1165  001544  5E2E               	subwf	___lwdiv@dividend,f,c
  1166  001546  5031               	movf	___lwdiv@divisor+1,w,c
  1167  001548  5A2F               	subwfb	___lwdiv@dividend+1,f,c
  1168  00154A  8032               	bsf	___lwdiv@quotient,0,c
  1169  00154C                     l658:
  1170  00154C  90D8               	bcf	status,0,c
  1171  00154E  3231               	rrcf	___lwdiv@divisor+1,f,c
  1172  001550  3230               	rrcf	___lwdiv@divisor,f,c
  1173  001552  2E34               	decfsz	___lwdiv@counter,f,c
  1174  001554  D7ED               	goto	u500
  1175  001556                     l659:
  1176  001556  C032  F02E         	movff	___lwdiv@quotient,?___lwdiv
  1177  00155A  C033  F02F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1178  00155E  0012               	return		;funcret
  1179  001560                     __end_of___lwdiv:
  1180                           	opt stack 0
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           prodh	equ	0xFF4
  1186                           prodl	equ	0xFF3
  1187                           intcon	equ	0xFF2
  1188                           postinc0	equ	0xFEE
  1189                           wreg	equ	0xFE8
  1190                           postinc2	equ	0xFDE
  1191                           postdec2	equ	0xFDD
  1192                           fsr2h	equ	0xFDA
  1193                           fsr2l	equ	0xFD9
  1194                           status	equ	0xFD8
  1195                           
  1196 ;; *************** function _initLCD *****************
  1197 ;; Defined at:
  1198 ;;		line 60 in file "lcd.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;		None
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1216 ;;Total ram usage:        1 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    6
  1219 ;; This function calls:
  1220 ;;		_lcdInst
  1221 ;; This function is called by:
  1222 ;;		_main
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text5
  1227  0015B2                     __ptext5:
  1228                           	opt stack 0
  1229  0015B2                     _initLCD:
  1230                           	opt stack 24
  1231                           
  1232                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1233                           
  1234                           ;incstack = 0
  1235  0015B2  0E9C               	movlw	156
  1236  0015B4  6E31               	movwf	??_initLCD& (0+255),c
  1237  0015B6  0ED7               	movlw	215
  1238  0015B8                     u847:
  1239  0015B8  2EE8               	decfsz	wreg,f,c
  1240  0015BA  D7FE               	bra	u847
  1241  0015BC  2E31               	decfsz	??_initLCD& (0+255),f,c
  1242  0015BE  D7FC               	bra	u847
  1243  0015C0  F000               	nop	
  1244                           
  1245                           ;lcd.c: 69: lcdInst(0b00110011);
  1246  0015C2  0E33               	movlw	51
  1247  0015C4  ECB0  F00B         	call	_lcdInst
  1248                           
  1249                           ;lcd.c: 70: lcdInst(0b00110010);
  1250  0015C8  0E32               	movlw	50
  1251  0015CA  ECB0  F00B         	call	_lcdInst
  1252                           
  1253                           ;lcd.c: 71: lcdInst(0b00101000);
  1254  0015CE  0E28               	movlw	40
  1255  0015D0  ECB0  F00B         	call	_lcdInst
  1256                           
  1257                           ;lcd.c: 72: lcdInst(0b00001111);
  1258  0015D4  0E0F               	movlw	15
  1259  0015D6  ECB0  F00B         	call	_lcdInst
  1260                           
  1261                           ;lcd.c: 73: lcdInst(0b00000110);
  1262  0015DA  0E06               	movlw	6
  1263  0015DC  ECB0  F00B         	call	_lcdInst
  1264                           
  1265                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1266  0015E0  0E01               	movlw	1
  1267  0015E2  ECB0  F00B         	call	_lcdInst
  1268  0015E6  0E9C               	movlw	156
  1269  0015E8  6E31               	movwf	??_initLCD& (0+255),c
  1270  0015EA  0ED7               	movlw	215
  1271  0015EC                     u857:
  1272  0015EC  2EE8               	decfsz	wreg,f,c
  1273  0015EE  D7FE               	bra	u857
  1274  0015F0  2E31               	decfsz	??_initLCD& (0+255),f,c
  1275  0015F2  D7FC               	bra	u857
  1276  0015F4  F000               	nop	
  1277                           
  1278                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1279  0015F6  0E0F               	movlw	15
  1280  0015F8  ECB0  F00B         	call	_lcdInst
  1281  0015FC  0012               	return		;funcret
  1282  0015FE                     __end_of_initLCD:
  1283                           	opt stack 0
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           prodh	equ	0xFF4
  1289                           prodl	equ	0xFF3
  1290                           intcon	equ	0xFF2
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postinc2	equ	0xFDE
  1294                           postdec2	equ	0xFDD
  1295                           fsr2h	equ	0xFDA
  1296                           fsr2l	equ	0xFD9
  1297                           status	equ	0xFD8
  1298                           
  1299 ;; *************** function _lcdInst *****************
  1300 ;; Defined at:
  1301 ;;		line 11 in file "lcd.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  data            1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  data            1   47[COMRAM] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg, status,2, status,0, cstack
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;Total ram usage:        1 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    5
  1322 ;; This function calls:
  1323 ;;		_lcdNibble
  1324 ;; This function is called by:
  1325 ;;		_initLCD
  1326 ;;		_main
  1327 ;;		_lcd_set_cursor
  1328 ;;		_lcd_shift_cursor
  1329 ;;		_lcd_shift_display
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text6
  1334  001760                     __ptext6:
  1335                           	opt stack 0
  1336  001760                     _lcdInst:
  1337                           	opt stack 25
  1338                           
  1339                           ;incstack = 0
  1340                           ;lcdInst@data stored from wreg
  1341  001760  6E30               	movwf	lcdInst@data,c
  1342                           
  1343                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1344  001762  948C               	bcf	3980,2,c	;volatile
  1345                           
  1346                           ;lcd.c: 20: lcdNibble(data);
  1347  001764  5030               	movf	lcdInst@data,w,c
  1348  001766  EC09  F00A         	call	_lcdNibble
  1349                           
  1350                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1351  00176A  0EA0               	movlw	160
  1352  00176C                     u867:
  1353  00176C  D000               	nop2	
  1354  00176E  2EE8               	decfsz	wreg,f,c
  1355  001770  D7FD               	bra	u867
  1356  001772  0012               	return		;funcret
  1357  001774                     __end_of_lcdInst:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           prodh	equ	0xFF4
  1364                           prodl	equ	0xFF3
  1365                           intcon	equ	0xFF2
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           postinc2	equ	0xFDE
  1369                           postdec2	equ	0xFDD
  1370                           fsr2h	equ	0xFDA
  1371                           fsr2l	equ	0xFD9
  1372                           status	equ	0xFD8
  1373                           
  1374 ;; *************** function _lcdNibble *****************
  1375 ;; Defined at:
  1376 ;;		line 37 in file "lcd.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  data            1    wreg     unsigned char 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  data            1   46[COMRAM] unsigned char 
  1381 ;;  temp            1   45[COMRAM] unsigned char 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      void 
  1384 ;; Registers used:
  1385 ;;		wreg, status,2, status,0
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;Total ram usage:        2 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; Hardware stack levels required when called:    4
  1398 ;; This function calls:
  1399 ;;		Nothing
  1400 ;; This function is called by:
  1401 ;;		_lcdInst
  1402 ;;		_putch
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text7
  1407  001412                     __ptext7:
  1408                           	opt stack 0
  1409  001412                     _lcdNibble:
  1410                           	opt stack 24
  1411                           
  1412                           ;incstack = 0
  1413                           ;lcdNibble@data stored from wreg
  1414  001412  6E2F               	movwf	lcdNibble@data,c
  1415                           
  1416                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1417  001414  502F               	movf	lcdNibble@data,w,c
  1418  001416  0BF0               	andlw	240
  1419  001418  6E2E               	movwf	lcdNibble@temp,c
  1420                           
  1421                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1422  00141A  508C               	movf	3980,w,c	;volatile
  1423  00141C  0B0F               	andlw	15
  1424  00141E  6E8C               	movwf	3980,c	;volatile
  1425                           
  1426                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1427  001420  502E               	movf	lcdNibble@temp,w,c
  1428  001422  108C               	iorwf	3980,w,c	;volatile
  1429  001424  6E8C               	movwf	3980,c	;volatile
  1430                           
  1431                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1432  001426  0E00               	movlw	0
  1433  001428  BEF2               	btfsc	intcon,7,c	;volatile
  1434  00142A  0E01               	movlw	1
  1435  00142C  6E50               	movwf	_LCDinterruptState,c
  1436  00142E  9EF2               	bcf	intcon,7,c	;volatile
  1437  001430  868C               	bsf	3980,3,c	;volatile
  1438  001432  0E42               	movlw	66
  1439  001434                     u877:
  1440  001434  2EE8               	decfsz	wreg,f,c
  1441  001436  D7FE               	bra	u877
  1442  001438  D000               	nop2	
  1443  00143A  968C               	bcf	3980,3,c	;volatile
  1444  00143C  0EA0               	movlw	160
  1445  00143E                     u887:
  1446  00143E  D000               	nop2	
  1447  001440  2EE8               	decfsz	wreg,f,c
  1448  001442  D7FD               	bra	u887
  1449  001444  B050               	btfsc	_LCDinterruptState,0,c
  1450  001446  D002               	bra	u15
  1451  001448  9EF2               	bcf	intcon,7,c	;volatile
  1452  00144A  D001               	bra	u16
  1453  00144C                     u15:
  1454  00144C  8EF2               	bsf	intcon,7,c	;volatile
  1455  00144E                     u16:
  1456                           
  1457                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1458  00144E  382F               	swapf	lcdNibble@data,w,c
  1459  001450  0BF0               	andlw	240
  1460  001452  6E2F               	movwf	lcdNibble@data,c
  1461                           
  1462                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1463  001454  502F               	movf	lcdNibble@data,w,c
  1464  001456  0BF0               	andlw	240
  1465  001458  6E2E               	movwf	lcdNibble@temp,c
  1466                           
  1467                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1468  00145A  508C               	movf	3980,w,c	;volatile
  1469  00145C  0B0F               	andlw	15
  1470  00145E  6E8C               	movwf	3980,c	;volatile
  1471                           
  1472                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1473  001460  502E               	movf	lcdNibble@temp,w,c
  1474  001462  108C               	iorwf	3980,w,c	;volatile
  1475  001464  6E8C               	movwf	3980,c	;volatile
  1476                           
  1477                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1478  001466  0E00               	movlw	0
  1479  001468  BEF2               	btfsc	intcon,7,c	;volatile
  1480  00146A  0E01               	movlw	1
  1481  00146C  6E50               	movwf	_LCDinterruptState,c
  1482  00146E  9EF2               	bcf	intcon,7,c	;volatile
  1483  001470  868C               	bsf	3980,3,c	;volatile
  1484  001472  0E42               	movlw	66
  1485  001474                     u897:
  1486  001474  2EE8               	decfsz	wreg,f,c
  1487  001476  D7FE               	bra	u897
  1488  001478  D000               	nop2	
  1489  00147A  968C               	bcf	3980,3,c	;volatile
  1490  00147C  0EA0               	movlw	160
  1491  00147E                     u907:
  1492  00147E  D000               	nop2	
  1493  001480  2EE8               	decfsz	wreg,f,c
  1494  001482  D7FD               	bra	u907
  1495  001484  B050               	btfsc	_LCDinterruptState,0,c
  1496  001486  D002               	bra	u25
  1497  001488  9EF2               	bcf	intcon,7,c	;volatile
  1498  00148A  D001               	bra	u26
  1499  00148C                     u25:
  1500  00148C  8EF2               	bsf	intcon,7,c	;volatile
  1501  00148E                     u26:
  1502  00148E  0012               	return		;funcret
  1503  001490                     __end_of_lcdNibble:
  1504                           	opt stack 0
  1505                           tblptru	equ	0xFF8
  1506                           tblptrh	equ	0xFF7
  1507                           tblptrl	equ	0xFF6
  1508                           tablat	equ	0xFF5
  1509                           prodh	equ	0xFF4
  1510                           prodl	equ	0xFF3
  1511                           intcon	equ	0xFF2
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           postinc2	equ	0xFDE
  1515                           postdec2	equ	0xFDD
  1516                           fsr2h	equ	0xFDA
  1517                           fsr2l	equ	0xFD9
  1518                           status	equ	0xFD8
  1519                           
  1520 ;; *************** function _I2C_sendData *****************
  1521 ;; Defined at:
  1522 ;;		line 192 in file "main.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  char_data       1    wreg     unsigned char 
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;  char_data       1   48[COMRAM] unsigned char 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2, status,0, cstack
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;Total ram usage:        1 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    6
  1543 ;; This function calls:
  1544 ;;		_I2C_Master_Start
  1545 ;;		_I2C_Master_Stop
  1546 ;;		_I2C_Master_Write
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text8
  1553  0016F8                     __ptext8:
  1554                           	opt stack 0
  1555  0016F8                     _I2C_sendData:
  1556                           	opt stack 24
  1557                           
  1558                           ;incstack = 0
  1559                           ;I2C_sendData@char_data stored from wreg
  1560  0016F8  6E31               	movwf	I2C_sendData@char_data,c
  1561                           
  1562                           ;main.c: 193: I2C_Master_Start();
  1563  0016FA  ECE0  F00B         	call	_I2C_Master_Start	;wreg free
  1564                           
  1565                           ;main.c: 194: I2C_Master_Write(0b00010000);
  1566  0016FE  0E00               	movlw	0
  1567  001700  6E30               	movwf	I2C_Master_Write@byteToWrite+1,c
  1568  001702  0E10               	movlw	16
  1569  001704  6E2F               	movwf	I2C_Master_Write@byteToWrite,c
  1570  001706  ECD7  F00B         	call	_I2C_Master_Write	;wreg free
  1571                           
  1572                           ;main.c: 195: I2C_Master_Write(char_data);
  1573  00170A  C031  F02F         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  1574  00170E  6A30               	clrf	I2C_Master_Write@byteToWrite+1,c
  1575  001710  ECD7  F00B         	call	_I2C_Master_Write	;wreg free
  1576                           
  1577                           ;main.c: 196: I2C_Master_Stop();
  1578  001714  ECDC  F00B         	call	_I2C_Master_Stop	;wreg free
  1579  001718  0012               	return		;funcret
  1580  00171A                     __end_of_I2C_sendData:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           prodh	equ	0xFF4
  1587                           prodl	equ	0xFF3
  1588                           intcon	equ	0xFF2
  1589                           postinc0	equ	0xFEE
  1590                           wreg	equ	0xFE8
  1591                           postinc2	equ	0xFDE
  1592                           postdec2	equ	0xFDD
  1593                           fsr2h	equ	0xFDA
  1594                           fsr2l	equ	0xFD9
  1595                           status	equ	0xFD8
  1596                           
  1597 ;; *************** function _I2C_init *****************
  1598 ;; Defined at:
  1599 ;;		line 186 in file "main.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    6
  1620 ;; This function calls:
  1621 ;;		_I2C_Master_Init
  1622 ;;		_I2C_Master_Start
  1623 ;;		_I2C_Master_Stop
  1624 ;;		_I2C_Master_Write
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text9
  1631  0016CE                     __ptext9:
  1632                           	opt stack 0
  1633  0016CE                     _I2C_init:
  1634                           	opt stack 24
  1635                           
  1636                           ;main.c: 187: I2C_Master_Init(100000);
  1637                           
  1638                           ;incstack = 0
  1639  0016CE  0EA0               	movlw	160
  1640  0016D0  6E2E               	movwf	I2C_Master_Init@clockFreq,c
  1641  0016D2  0E86               	movlw	134
  1642  0016D4  6E2F               	movwf	I2C_Master_Init@clockFreq+1,c
  1643  0016D6  0E01               	movlw	1
  1644  0016D8  6E30               	movwf	I2C_Master_Init@clockFreq+2,c
  1645  0016DA  0E00               	movlw	0
  1646  0016DC  6E31               	movwf	I2C_Master_Init@clockFreq+3,c
  1647  0016DE  EC9A  F00B         	call	_I2C_Master_Init	;wreg free
  1648                           
  1649                           ;main.c: 188: I2C_Master_Start();
  1650  0016E2  ECE0  F00B         	call	_I2C_Master_Start	;wreg free
  1651                           
  1652                           ;main.c: 189: I2C_Master_Write(0b00010000);
  1653  0016E6  0E00               	movlw	0
  1654  0016E8  6E30               	movwf	I2C_Master_Write@byteToWrite+1,c
  1655  0016EA  0E10               	movlw	16
  1656  0016EC  6E2F               	movwf	I2C_Master_Write@byteToWrite,c
  1657  0016EE  ECD7  F00B         	call	_I2C_Master_Write	;wreg free
  1658                           
  1659                           ;main.c: 190: I2C_Master_Stop();
  1660  0016F2  ECDC  F00B         	call	_I2C_Master_Stop	;wreg free
  1661  0016F6  0012               	return		;funcret
  1662  0016F8                     __end_of_I2C_init:
  1663                           	opt stack 0
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           prodh	equ	0xFF4
  1669                           prodl	equ	0xFF3
  1670                           intcon	equ	0xFF2
  1671                           postinc0	equ	0xFEE
  1672                           wreg	equ	0xFE8
  1673                           postinc2	equ	0xFDE
  1674                           postdec2	equ	0xFDD
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _I2C_Master_Write *****************
  1680 ;; Defined at:
  1681 ;;		line 109 in file "I2C.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  byteToWrite     2   46[COMRAM] unsigned int 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2, status,0, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1699 ;;Total ram usage:        2 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    5
  1702 ;; This function calls:
  1703 ;;		_I2C_Master_Wait
  1704 ;; This function is called by:
  1705 ;;		_I2C_init
  1706 ;;		_I2C_sendData
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text10
  1711  0017AE                     __ptext10:
  1712                           	opt stack 0
  1713  0017AE                     _I2C_Master_Write:
  1714                           	opt stack 24
  1715                           
  1716                           ;I2C.c: 117: I2C_Master_Wait();
  1717                           
  1718                           ;incstack = 0
  1719  0017AE  ECCE  F00B         	call	_I2C_Master_Wait	;wreg free
  1720                           
  1721                           ;I2C.c: 118: SSPBUF = byteToWrite;
  1722  0017B2  C02F  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1723  0017B6  0012               	return		;funcret
  1724  0017B8                     __end_of_I2C_Master_Write:
  1725                           	opt stack 0
  1726                           tblptru	equ	0xFF8
  1727                           tblptrh	equ	0xFF7
  1728                           tblptrl	equ	0xFF6
  1729                           tablat	equ	0xFF5
  1730                           prodh	equ	0xFF4
  1731                           prodl	equ	0xFF3
  1732                           intcon	equ	0xFF2
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postinc2	equ	0xFDE
  1736                           postdec2	equ	0xFDD
  1737                           fsr2h	equ	0xFDA
  1738                           fsr2l	equ	0xFD9
  1739                           status	equ	0xFD8
  1740                           
  1741 ;; *************** function _I2C_Master_Stop *****************
  1742 ;; Defined at:
  1743 ;;		line 96 in file "I2C.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		wreg, status,2, status,0, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;Total ram usage:        0 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    5
  1764 ;; This function calls:
  1765 ;;		_I2C_Master_Wait
  1766 ;; This function is called by:
  1767 ;;		_I2C_init
  1768 ;;		_I2C_sendData
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text11
  1773  0017B8                     __ptext11:
  1774                           	opt stack 0
  1775  0017B8                     _I2C_Master_Stop:
  1776                           	opt stack 24
  1777                           
  1778                           ;I2C.c: 105: I2C_Master_Wait();
  1779                           
  1780                           ;incstack = 0
  1781  0017B8  ECCE  F00B         	call	_I2C_Master_Wait	;wreg free
  1782                           
  1783                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  1784  0017BC  84C5               	bsf	4037,2,c	;volatile
  1785  0017BE  0012               	return		;funcret
  1786  0017C0                     __end_of_I2C_Master_Stop:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           prodh	equ	0xFF4
  1793                           prodl	equ	0xFF3
  1794                           intcon	equ	0xFF2
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           postinc2	equ	0xFDE
  1798                           postdec2	equ	0xFDD
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8
  1802                           
  1803 ;; *************** function _I2C_Master_Start *****************
  1804 ;; Defined at:
  1805 ;;		line 70 in file "I2C.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;		None
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;		None
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1    wreg      void 
  1812 ;; Registers used:
  1813 ;;		wreg, status,2, status,0, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;Total ram usage:        0 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    5
  1826 ;; This function calls:
  1827 ;;		_I2C_Master_Wait
  1828 ;; This function is called by:
  1829 ;;		_I2C_init
  1830 ;;		_I2C_sendData
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text12
  1835  0017C0                     __ptext12:
  1836                           	opt stack 0
  1837  0017C0                     _I2C_Master_Start:
  1838                           	opt stack 24
  1839                           
  1840                           ;I2C.c: 79: I2C_Master_Wait();
  1841                           
  1842                           ;incstack = 0
  1843  0017C0  ECCE  F00B         	call	_I2C_Master_Wait	;wreg free
  1844                           
  1845                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  1846  0017C4  80C5               	bsf	4037,0,c	;volatile
  1847  0017C6  0012               	return		;funcret
  1848  0017C8                     __end_of_I2C_Master_Start:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           prodh	equ	0xFF4
  1855                           prodl	equ	0xFF3
  1856                           intcon	equ	0xFF2
  1857                           postinc0	equ	0xFEE
  1858                           wreg	equ	0xFE8
  1859                           postinc2	equ	0xFDE
  1860                           postdec2	equ	0xFDD
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865 ;; *************** function _I2C_Master_Wait *****************
  1866 ;; Defined at:
  1867 ;;		line 52 in file "I2C.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, status,2, status,0
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;Total ram usage:        1 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    4
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_I2C_Master_Start
  1892 ;;		_I2C_Master_Stop
  1893 ;;		_I2C_Master_Write
  1894 ;;		_I2C_Master_RepeatedStart
  1895 ;;		_I2C_Master_Read
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text13
  1900  00179C                     __ptext13:
  1901                           	opt stack 0
  1902  00179C                     _I2C_Master_Wait:
  1903                           	opt stack 24
  1904                           
  1905                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1906                           
  1907                           ;incstack = 0
  1908  00179C  B4C7               	btfsc	4039,2,c	;volatile
  1909  00179E  D7FE               	goto	_I2C_Master_Wait
  1910  0017A0  CFC5 F02E          	movff	4037,??_I2C_Master_Wait	;volatile
  1911  0017A4  0E1F               	movlw	31
  1912  0017A6  162E               	andwf	??_I2C_Master_Wait,f,c
  1913  0017A8  B4D8               	btfsc	status,2,c
  1914  0017AA  0012               	return	
  1915  0017AC  D7F7               	goto	_I2C_Master_Wait
  1916  0017AE                     __end_of_I2C_Master_Wait:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           prodh	equ	0xFF4
  1923                           prodl	equ	0xFF3
  1924                           intcon	equ	0xFF2
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           postinc2	equ	0xFDE
  1928                           postdec2	equ	0xFDD
  1929                           fsr2h	equ	0xFDA
  1930                           fsr2l	equ	0xFD9
  1931                           status	equ	0xFD8
  1932                           
  1933 ;; *************** function _I2C_Master_Init *****************
  1934 ;; Defined at:
  1935 ;;		line 14 in file "I2C.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  clockFreq       4   45[COMRAM] const unsigned long 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        4 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    4
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_I2C_init
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text14
  1964  001734                     __ptext14:
  1965                           	opt stack 0
  1966  001734                     _I2C_Master_Init:
  1967                           	opt stack 25
  1968                           
  1969                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1970                           
  1971                           ;incstack = 0
  1972  001734  9AC6               	bcf	4038,5,c	;volatile
  1973                           
  1974                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1975  001736  8694               	bsf	3988,3,c	;volatile
  1976                           
  1977                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1978  001738  8894               	bsf	3988,4,c	;volatile
  1979                           
  1980                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1981  00173A  0E80               	movlw	128
  1982  00173C  6EC7               	movwf	4039,c	;volatile
  1983                           
  1984                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1985  00173E  0E28               	movlw	40
  1986  001740  6EC6               	movwf	4038,c	;volatile
  1987                           
  1988                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1989  001742  0E00               	movlw	0
  1990  001744  6EC5               	movwf	4037,c	;volatile
  1991                           
  1992                           ;I2C.c: 49: SSPADD = 9600;
  1993  001746  0E80               	movlw	128
  1994  001748  6EC8               	movwf	4040,c	;volatile
  1995  00174A  0012               	return		;funcret
  1996  00174C                     __end_of_I2C_Master_Init:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           prodh	equ	0xFF4
  2003                           prodl	equ	0xFF3
  2004                           intcon	equ	0xFF2
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postinc2	equ	0xFDE
  2008                           postdec2	equ	0xFDD
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _interruptHandler *****************
  2014 ;; Defined at:
  2015 ;;		line 115 in file "main.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;		None
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  input           2   43[COMRAM] int 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      void 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;Total ram usage:       21 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    3
  2036 ;; This function calls:
  2037 ;;		i2_initLCD
  2038 ;;		i2_lcdInst
  2039 ;;		i2_printf
  2040 ;; This function is called by:
  2041 ;;		Interrupt level 2
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	intcode
  2046  000008                     __pintcode:
  2047                           	opt stack 0
  2048  000008                     _interruptHandler:
  2049                           	opt stack 24
  2050                           
  2051                           ;incstack = 0
  2052  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2053  00000A  ED2D  F009         	call	int_func,f	;refresh shadow registers
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           prodh	equ	0xFF4
  2059                           prodl	equ	0xFF3
  2060                           intcon	equ	0xFF2
  2061                           postinc0	equ	0xFEE
  2062                           wreg	equ	0xFE8
  2063                           postinc2	equ	0xFDE
  2064                           postdec2	equ	0xFDD
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8
  2068                           
  2069                           	psect	intcode_body
  2070  00125A                     __pintcode_body:
  2071                           	opt stack 24
  2072  00125A                     int_func:
  2073                           	opt stack 24
  2074  00125A  0006               	pop		; remove dummy address from shadow register refresh
  2075  00125C  CFFA F01A          	movff	pclath,??_interruptHandler+1
  2076  001260  CFFB F01B          	movff	pclatu,??_interruptHandler+2
  2077  001264  CFE9 F01C          	movff	fsr0l,??_interruptHandler+3
  2078  001268  CFEA F01D          	movff	fsr0h,??_interruptHandler+4
  2079  00126C  CFE1 F01E          	movff	fsr1l,??_interruptHandler+5
  2080  001270  CFE2 F01F          	movff	fsr1h,??_interruptHandler+6
  2081  001274  CFD9 F020          	movff	fsr2l,??_interruptHandler+7
  2082  001278  CFDA F021          	movff	fsr2h,??_interruptHandler+8
  2083  00127C  CFF3 F022          	movff	prodl,??_interruptHandler+9
  2084  001280  CFF4 F023          	movff	prodh,??_interruptHandler+10
  2085  001284  CFF6 F024          	movff	tblptrl,??_interruptHandler+11
  2086  001288  CFF7 F025          	movff	tblptrh,??_interruptHandler+12
  2087  00128C  CFF8 F026          	movff	tblptru,??_interruptHandler+13
  2088  001290  CFF5 F027          	movff	tablat,??_interruptHandler+14
  2089  001294  C051  F028         	movff	btemp,??_interruptHandler+15
  2090  001298  C052  F029         	movff	btemp+1,??_interruptHandler+16
  2091  00129C  C053  F02A         	movff	btemp+2,??_interruptHandler+17
  2092  0012A0  C054  F02B         	movff	btemp+3,??_interruptHandler+18
  2093                           
  2094                           ;main.c: 127: if (RBIF){
  2095  0012A4  A0F2               	btfss	intcon,0,c	;volatile
  2096  0012A6  D026               	goto	i2l1674
  2097                           
  2098                           ;main.c: 135: int input = PORTBbits.RB7;
  2099  0012A8  AE81               	btfss	3969,7,c	;volatile
  2100  0012AA  D003               	goto	i2u79_40
  2101  0012AC  6A19               	clrf	??_interruptHandler& (0+255),c
  2102  0012AE  2A19               	incf	??_interruptHandler& (0+255),f,c
  2103  0012B0  D001               	goto	i2u79_48
  2104  0012B2                     i2u79_40:
  2105  0012B2  6A19               	clrf	??_interruptHandler& (0+255),c
  2106  0012B4                     i2u79_48:
  2107  0012B4  5019               	movf	??_interruptHandler,w,c
  2108  0012B6  6E2C               	movwf	interruptHandler@input,c
  2109  0012B8  6A2D               	clrf	interruptHandler@input+1,c
  2110                           
  2111                           ;main.c: 137: if (input == 1){
  2112  0012BA  042C               	decf	interruptHandler@input,w,c
  2113  0012BC  102D               	iorwf	interruptHandler@input+1,w,c
  2114  0012BE  A4D8               	btfss	status,2,c
  2115  0012C0  D018               	goto	i2l167
  2116                           
  2117                           ;main.c: 138: initLCD();
  2118  0012C2  ECFF  F00A         	call	i2_initLCD	;wreg free
  2119                           
  2120                           ;main.c: 139: W_count++;
  2121  0012C6  4A47               	infsnz	_W_count,f,c
  2122  0012C8  2A48               	incf	_W_count+1,f,c
  2123                           
  2124                           ;main.c: 140: printf("%d",W_count);
  2125  0012CA  0E19               	movlw	low (STR_2+8)
  2126  0012CC  6E0D               	movwf	i2printf@f,c
  2127  0012CE  0E10               	movlw	high (STR_2+8)
  2128  0012D0  6E0E               	movwf	i2printf@f+1,c
  2129  0012D2  C047  F00F         	movff	_W_count,?i2_printf+2
  2130  0012D6  C048  F010         	movff	_W_count+1,?i2_printf+3
  2131  0012DA  EC9E  F008         	call	i2_printf	;wreg free
  2132                           
  2133                           ;main.c: 142: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2134  0012DE  0E80               	movlw	128
  2135  0012E0  ECC4  F00B         	call	i2_lcdInst
  2136  0012E4  0E34               	movlw	52
  2137  0012E6  6E19               	movwf	??_interruptHandler& (0+255),c
  2138  0012E8  0EF2               	movlw	242
  2139  0012EA                     i2u91_47:
  2140  0012EA  2EE8               	decfsz	wreg,f,c
  2141  0012EC  D7FE               	bra	i2u91_47
  2142  0012EE  2E19               	decfsz	??_interruptHandler& (0+255),f,c
  2143  0012F0  D7FC               	bra	i2u91_47
  2144  0012F2                     i2l167:
  2145                           
  2146                           ;main.c: 143: }
  2147                           ;main.c: 159: RBIF = 0;
  2148  0012F2  90F2               	bcf	intcon,0,c	;volatile
  2149  0012F4                     i2l1674:
  2150                           
  2151                           ;main.c: 160: return;
  2152  0012F4  C02B  F054         	movff	??_interruptHandler+18,btemp+3
  2153  0012F8  C02A  F053         	movff	??_interruptHandler+17,btemp+2
  2154  0012FC  C029  F052         	movff	??_interruptHandler+16,btemp+1
  2155  001300  C028  F051         	movff	??_interruptHandler+15,btemp
  2156  001304  C027  FFF5         	movff	??_interruptHandler+14,tablat
  2157  001308  C026  FFF8         	movff	??_interruptHandler+13,tblptru
  2158  00130C  C025  FFF7         	movff	??_interruptHandler+12,tblptrh
  2159  001310  C024  FFF6         	movff	??_interruptHandler+11,tblptrl
  2160  001314  C023  FFF4         	movff	??_interruptHandler+10,prodh
  2161  001318  C022  FFF3         	movff	??_interruptHandler+9,prodl
  2162  00131C  C021  FFDA         	movff	??_interruptHandler+8,fsr2h
  2163  001320  C020  FFD9         	movff	??_interruptHandler+7,fsr2l
  2164  001324  C01F  FFE2         	movff	??_interruptHandler+6,fsr1h
  2165  001328  C01E  FFE1         	movff	??_interruptHandler+5,fsr1l
  2166  00132C  C01D  FFEA         	movff	??_interruptHandler+4,fsr0h
  2167  001330  C01C  FFE9         	movff	??_interruptHandler+3,fsr0l
  2168  001334  C01B  FFFB         	movff	??_interruptHandler+2,pclatu
  2169  001338  C01A  FFFA         	movff	??_interruptHandler+1,pclath
  2170  00133C  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2171  00133E  0011               	retfie		f
  2172  001340                     __end_of_interruptHandler:
  2173                           	opt stack 0
  2174                           pclatu	equ	0xFFB
  2175                           pclath	equ	0xFFA
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           fsr0h	equ	0xFEA
  2185                           fsr0l	equ	0xFE9
  2186                           wreg	equ	0xFE8
  2187                           fsr1h	equ	0xFE2
  2188                           fsr1l	equ	0xFE1
  2189                           postinc2	equ	0xFDE
  2190                           postdec2	equ	0xFDD
  2191                           fsr2h	equ	0xFDA
  2192                           fsr2l	equ	0xFD9
  2193                           status	equ	0xFD8
  2194                           
  2195 ;; *************** function i2_printf *****************
  2196 ;; Defined at:
  2197 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2200 ;;		 -> STR_3(3), STR_2(11), STR_1(3), 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  printf          4    0        struct .
  2203 ;;  printf          3    0        PTR const unsigned char 
  2204 ;;  printf          2   21[COMRAM] unsigned int 
  2205 ;;  printf          2   17[COMRAM] PTR void [1]
  2206 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2207 ;;  printf          2    0        unsigned int 
  2208 ;;  printf          1   23[COMRAM] char 
  2209 ;;  printf          1   20[COMRAM] char 
  2210 ;;  printf          1   19[COMRAM] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  2   12[COMRAM] int 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:       12 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    2
  2227 ;; This function calls:
  2228 ;;		i2___lwdiv
  2229 ;;		i2___lwmod
  2230 ;;		i2_putch
  2231 ;; This function is called by:
  2232 ;;		_interruptHandler
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	text16
  2237  00113C                     __ptext16:
  2238                           	opt stack 0
  2239  00113C                     i2_printf:
  2240                           	opt stack 24
  2241                           
  2242                           ;doprnt.c: 466: va_list ap;
  2243                           ;doprnt.c: 499: signed char c;
  2244                           ;doprnt.c: 506: signed char prec;
  2245                           ;doprnt.c: 508: unsigned char flag;
  2246                           ;doprnt.c: 523: union {
  2247                           ;doprnt.c: 524: unsigned long vd;
  2248                           ;doprnt.c: 525: double integ;
  2249                           ;doprnt.c: 526: } tmpval;
  2250                           ;doprnt.c: 528: unsigned int val;
  2251                           ;doprnt.c: 529: unsigned len;
  2252                           ;doprnt.c: 530: const char * cp;
  2253                           ;doprnt.c: 533: *ap = __va_start();
  2254                           
  2255                           ;incstack = 0
  2256  00113C  0E0F               	movlw	low (?i2_printf+2)
  2257  00113E  6E12               	movwf	i2printf@ap,c
  2258  001140  0E00               	movlw	high (?i2_printf+2)
  2259  001142  6E13               	movwf	i2printf@ap+1,c
  2260                           
  2261                           ;doprnt.c: 536: while(c = *f++) {
  2262  001144  D07D               	goto	i2u75_40
  2263  001146                     
  2264                           ;doprnt.c: 538: if(c != '%')
  2265  001146  0E25               	movlw	37
  2266  001148  1818               	xorwf	i2printf@c,w,c
  2267  00114A  B4D8               	btfsc	status,2,c
  2268  00114C  D004               	goto	i2l233
  2269                           
  2270                           ;doprnt.c: 540: {
  2271                           ;doprnt.c: 541: (putch(c) );
  2272  00114E  5018               	movf	i2printf@c,w,c
  2273  001150  ECBA  F00B         	call	i2_putch
  2274                           
  2275                           ;doprnt.c: 542: continue;
  2276  001154  D075               	goto	i2u75_40
  2277  001156                     i2l233:
  2278                           
  2279                           ;doprnt.c: 543: }
  2280                           ;doprnt.c: 548: flag = 0;
  2281  001156  0E00               	movlw	0
  2282  001158  6E14               	movwf	i2printf@flag,c
  2283                           
  2284                           ;doprnt.c: 822: }
  2285                           
  2286                           ;doprnt.c: 813: continue;
  2287                           
  2288                           ;doprnt.c: 802: default:
  2289                           
  2290                           ;doprnt.c: 698: case 'i':
  2291                           ;doprnt.c: 699: break;
  2292                           
  2293                           ;doprnt.c: 697: case 'd':
  2294                           
  2295                           ;doprnt.c: 638: goto alldone;
  2296                           
  2297                           ;doprnt.c: 637: case 0:
  2298                           
  2299                           ;doprnt.c: 635: switch(c = *f++) {
  2300  00115A  C00D  FFF6         	movff	i2printf@f,tblptrl
  2301  00115E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2302  001162  4A0D               	infsnz	i2printf@f,f,c
  2303  001164  2A0E               	incf	i2printf@f+1,f,c
  2304  001166                     	if	0	;tblptru may be non-zero
  2305  001166                     	endif
  2306  001166                     	if	0	;tblptru may be non-zero
  2307  001166                     	endif
  2308  001166  0008               	tblrd		*
  2309  001168  CFF5 F018          	movff	tablat,i2printf@c
  2310  00116C  5018               	movf	i2printf@c,w,c
  2311                           
  2312                           ; Switch size 1, requested type "space"
  2313                           ; Number of cases is 3, Range of values is 0 to 105
  2314                           ; switch strategies available:
  2315                           ; Name         Instructions Cycles
  2316                           ; simple_byte           10     6 (average)
  2317                           ;	Chosen strategy is simple_byte
  2318  00116E  0A00               	xorlw	0	; case 0
  2319  001170  B4D8               	btfsc	status,2,c
  2320  001172  0012               	return	
  2321  001174  0A64               	xorlw	100	; case 100
  2322  001176  B4D8               	btfsc	status,2,c
  2323  001178  D003               	goto	i2l239
  2324  00117A  0A0D               	xorlw	13	; case 105
  2325  00117C  A4D8               	btfss	status,2,c
  2326  00117E  D060               	goto	i2u75_40
  2327  001180                     i2l239:
  2328                           
  2329                           ;doprnt.c: 1253: {
  2330                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2331  001180  C012  FFD9         	movff	i2printf@ap,fsr2l
  2332  001184  C013  FFDA         	movff	i2printf@ap+1,fsr2h
  2333  001188  CFDE F016          	movff	postinc2,i2printf@val
  2334  00118C  CFDD F017          	movff	postdec2,i2printf@val+1
  2335  001190  0E02               	movlw	2
  2336  001192  2612               	addwf	i2printf@ap,f,c
  2337  001194  0E00               	movlw	0
  2338  001196  2213               	addwfc	i2printf@ap+1,f,c
  2339                           
  2340                           ;doprnt.c: 1261: if((int)val < 0) {
  2341  001198  AE17               	btfss	i2printf@val+1,7,c
  2342  00119A  D006               	goto	i2l241
  2343                           
  2344                           ;doprnt.c: 1262: flag |= 0x03;
  2345  00119C  0E03               	movlw	3
  2346  00119E  1214               	iorwf	i2printf@flag,f,c
  2347                           
  2348                           ;doprnt.c: 1263: val = -val;
  2349  0011A0  6C16               	negf	i2printf@val,c
  2350  0011A2  1E17               	comf	i2printf@val+1,f,c
  2351  0011A4  B0D8               	btfsc	status,0,c
  2352  0011A6  2A17               	incf	i2printf@val+1,f,c
  2353  0011A8                     i2l241:
  2354                           
  2355                           ;doprnt.c: 1264: }
  2356                           ;doprnt.c: 1266: }
  2357                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2358  0011A8  0E01               	movlw	1
  2359  0011AA  6E18               	movwf	i2printf@c,c
  2360  0011AC                     i2l1580:
  2361  0011AC  0E05               	movlw	5
  2362  0011AE  1818               	xorwf	i2printf@c,w,c
  2363  0011B0  B4D8               	btfsc	status,2,c
  2364  0011B2  D012               	goto	i2u73_40
  2365                           
  2366                           ;doprnt.c: 1306: if(val < dpowers[c])
  2367  0011B4  5018               	movf	i2printf@c,w,c
  2368  0011B6  0D02               	mullw	2
  2369  0011B8  0E01               	movlw	low _dpowers
  2370  0011BA  24F3               	addwf	prodl,w,c
  2371  0011BC  6EF6               	movwf	tblptrl,c
  2372  0011BE  0E10               	movlw	high _dpowers
  2373  0011C0  20F4               	addwfc	prodh,w,c
  2374  0011C2  6EF7               	movwf	tblptrh,c
  2375  0011C4                     	if	0	;There are less than 3 active tblptr bytes
  2376  0011C4                     	endif
  2377  0011C4  0009               	tblrd		*+
  2378  0011C6  50F5               	movf	tablat,w,c
  2379  0011C8  5C16               	subwf	i2printf@val,w,c
  2380  0011CA  0009               	tblrd		*+
  2381  0011CC  50F5               	movf	tablat,w,c
  2382  0011CE  5817               	subwfb	i2printf@val+1,w,c
  2383  0011D0  A0D8               	btfss	status,0,c
  2384  0011D2  D002               	goto	i2u73_40
  2385                           
  2386                           ;doprnt.c: 1307: break;
  2387  0011D4  2A18               	incf	i2printf@c,f,c
  2388  0011D6  D7EA               	goto	i2l1580
  2389  0011D8                     i2u73_40:
  2390                           
  2391                           ;doprnt.c: 1422: {
  2392                           ;doprnt.c: 1438: if(flag & 0x03)
  2393  0011D8  C014  F011         	movff	i2printf@flag,??i2_printf
  2394  0011DC  0E03               	movlw	3
  2395  0011DE  1611               	andwf	??i2_printf,f,c
  2396  0011E0  B4D8               	btfsc	status,2,c
  2397  0011E2  D003               	goto	i2l245
  2398                           
  2399                           ;doprnt.c: 1439: (putch('-') );
  2400  0011E4  0E2D               	movlw	45
  2401  0011E6  ECBA  F00B         	call	i2_putch
  2402  0011EA                     i2l245:
  2403                           
  2404                           ;doprnt.c: 1469: }
  2405                           ;doprnt.c: 1472: prec = c;
  2406  0011EA  C018  F015         	movff	i2printf@c,i2printf@prec
  2407                           
  2408                           ;doprnt.c: 1474: while(prec--) {
  2409  0011EE  D024               	goto	i2l246
  2410  0011F0                     
  2411                           ;doprnt.c: 1478: {
  2412                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2413  0011F0  5015               	movf	i2printf@prec,w,c
  2414  0011F2  0D02               	mullw	2
  2415  0011F4  0E01               	movlw	low _dpowers
  2416  0011F6  24F3               	addwf	prodl,w,c
  2417  0011F8  6EF6               	movwf	tblptrl,c
  2418  0011FA  0E10               	movlw	high _dpowers
  2419  0011FC  20F4               	addwfc	prodh,w,c
  2420  0011FE  6EF7               	movwf	tblptrh,c
  2421  001200                     	if	0	;There are less than 3 active tblptr bytes
  2422  001200                     	endif
  2423  001200  0009               	tblrd		*+
  2424  001202  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2425  001206  000A               	tblrd		*-
  2426  001208  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2427  00120C  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2428  001210  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2429  001214  ECB0  F00A         	call	i2___lwdiv	;wreg free
  2430  001218  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2431  00121C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2432  001220  0E00               	movlw	0
  2433  001222  6E0B               	movwf	i2___lwmod@divisor+1,c
  2434  001224  0E0A               	movlw	10
  2435  001226  6E0A               	movwf	i2___lwmod@divisor,c
  2436  001228  EC46  F00B         	call	i2___lwmod	;wreg free
  2437  00122C  5008               	movf	?i2___lwmod,w,c
  2438  00122E  0F30               	addlw	48
  2439  001230  6E18               	movwf	i2printf@c,c
  2440                           
  2441                           ;doprnt.c: 1523: }
  2442                           ;doprnt.c: 1524: (putch(c) );
  2443  001232  5018               	movf	i2printf@c,w,c
  2444  001234  ECBA  F00B         	call	i2_putch
  2445  001238                     i2l246:
  2446  001238  0615               	decf	i2printf@prec,f,c
  2447  00123A  2815               	incf	i2printf@prec,w,c
  2448  00123C  A4D8               	btfss	status,2,c
  2449  00123E  D7D8               	goto	i2l247
  2450  001240                     i2u75_40:
  2451  001240  C00D  FFF6         	movff	i2printf@f,tblptrl
  2452  001244  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2453  001248  4A0D               	infsnz	i2printf@f,f,c
  2454  00124A  2A0E               	incf	i2printf@f+1,f,c
  2455  00124C                     	if	0	;tblptru may be non-zero
  2456  00124C                     	endif
  2457  00124C                     	if	0	;tblptru may be non-zero
  2458  00124C                     	endif
  2459  00124C  0008               	tblrd		*
  2460  00124E  CFF5 F018          	movff	tablat,i2printf@c
  2461  001252  5018               	movf	i2printf@c,w,c
  2462  001254  B4D8               	btfsc	status,2,c
  2463  001256  0012               	return	
  2464  001258  D776               	goto	i2l232
  2465  00125A                     __end_ofi2_printf:
  2466                           	opt stack 0
  2467                           pclatu	equ	0xFFB
  2468                           pclath	equ	0xFFA
  2469                           tblptru	equ	0xFF8
  2470                           tblptrh	equ	0xFF7
  2471                           tblptrl	equ	0xFF6
  2472                           tablat	equ	0xFF5
  2473                           prodh	equ	0xFF4
  2474                           prodl	equ	0xFF3
  2475                           intcon	equ	0xFF2
  2476                           postinc0	equ	0xFEE
  2477                           fsr0h	equ	0xFEA
  2478                           fsr0l	equ	0xFE9
  2479                           wreg	equ	0xFE8
  2480                           fsr1h	equ	0xFE2
  2481                           fsr1l	equ	0xFE1
  2482                           postinc2	equ	0xFDE
  2483                           postdec2	equ	0xFDD
  2484                           fsr2h	equ	0xFDA
  2485                           fsr2l	equ	0xFD9
  2486                           status	equ	0xFD8
  2487                           
  2488 ;; *************** function i2_putch *****************
  2489 ;; Defined at:
  2490 ;;		line 24 in file "lcd.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  data            1    wreg     unsigned char 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  data            1    2[COMRAM] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, status,0, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;Total ram usage:        1 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    1
  2511 ;; This function calls:
  2512 ;;		i2_lcdNibble
  2513 ;; This function is called by:
  2514 ;;		i2_printf
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text17
  2519  001774                     __ptext17:
  2520                           	opt stack 0
  2521  001774                     i2_putch:
  2522                           	opt stack 24
  2523                           
  2524                           ;incstack = 0
  2525                           ;i2putch@data stored from wreg
  2526  001774  6E03               	movwf	i2putch@data,c
  2527                           
  2528                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2529  001776  848C               	bsf	3980,2,c	;volatile
  2530                           
  2531                           ;lcd.c: 33: lcdNibble(data);
  2532  001778  5003               	movf	i2putch@data,w,c
  2533  00177A  EC48  F00A         	call	i2_lcdNibble
  2534                           
  2535                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2536  00177E  0EA0               	movlw	160
  2537  001780                     i2u92_47:
  2538  001780  D000               	nop2	
  2539  001782  2EE8               	decfsz	wreg,f,c
  2540  001784  D7FD               	bra	i2u92_47
  2541  001786  0012               	return		;funcret
  2542  001788                     __end_ofi2_putch:
  2543                           	opt stack 0
  2544                           pclatu	equ	0xFFB
  2545                           pclath	equ	0xFFA
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           intcon	equ	0xFF2
  2553                           postinc0	equ	0xFEE
  2554                           fsr0h	equ	0xFEA
  2555                           fsr0l	equ	0xFE9
  2556                           wreg	equ	0xFE8
  2557                           fsr1h	equ	0xFE2
  2558                           fsr1l	equ	0xFE1
  2559                           postinc2	equ	0xFDE
  2560                           postdec2	equ	0xFDD
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function i2___lwmod *****************
  2566 ;; Defined at:
  2567 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  dividend        2    7[COMRAM] unsigned int 
  2570 ;;  divisor         2    9[COMRAM] unsigned int 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  __lwmod         1   11[COMRAM] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  2    7[COMRAM] unsigned int 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2582 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;Total ram usage:        5 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; This function calls:
  2589 ;;		Nothing
  2590 ;; This function is called by:
  2591 ;;		i2_printf
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text18
  2596  00168C                     __ptext18:
  2597                           	opt stack 0
  2598  00168C                     i2___lwmod:
  2599                           	opt stack 25
  2600                           
  2601                           ;incstack = 0
  2602  00168C  500A               	movf	i2___lwmod@divisor,w,c
  2603  00168E  100B               	iorwf	i2___lwmod@divisor+1,w,c
  2604  001690  B4D8               	btfsc	status,2,c
  2605  001692  D018               	goto	i2l669
  2606  001694  0E01               	movlw	1
  2607  001696  6E0C               	movwf	i2___lwmod@counter,c
  2608  001698  D004               	goto	i2l664
  2609  00169A  90D8               	bcf	status,0,c
  2610  00169C  360A               	rlcf	i2___lwmod@divisor,f,c
  2611  00169E  360B               	rlcf	i2___lwmod@divisor+1,f,c
  2612  0016A0  2A0C               	incf	i2___lwmod@counter,f,c
  2613  0016A2                     i2l664:
  2614  0016A2  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  2615  0016A4  D7FA               	goto	i2l665
  2616  0016A6                     i2u59_40:
  2617  0016A6  500A               	movf	i2___lwmod@divisor,w,c
  2618  0016A8  5C08               	subwf	i2___lwmod@dividend,w,c
  2619  0016AA  500B               	movf	i2___lwmod@divisor+1,w,c
  2620  0016AC  5809               	subwfb	i2___lwmod@dividend+1,w,c
  2621  0016AE  A0D8               	btfss	status,0,c
  2622  0016B0  D004               	goto	i2l668
  2623  0016B2  500A               	movf	i2___lwmod@divisor,w,c
  2624  0016B4  5E08               	subwf	i2___lwmod@dividend,f,c
  2625  0016B6  500B               	movf	i2___lwmod@divisor+1,w,c
  2626  0016B8  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  2627  0016BA                     i2l668:
  2628  0016BA  90D8               	bcf	status,0,c
  2629  0016BC  320B               	rrcf	i2___lwmod@divisor+1,f,c
  2630  0016BE  320A               	rrcf	i2___lwmod@divisor,f,c
  2631  0016C0  2E0C               	decfsz	i2___lwmod@counter,f,c
  2632  0016C2  D7F1               	goto	i2u59_40
  2633  0016C4                     i2l669:
  2634  0016C4  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  2635  0016C8  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  2636  0016CC  0012               	return		;funcret
  2637  0016CE                     __end_ofi2___lwmod:
  2638                           	opt stack 0
  2639                           pclatu	equ	0xFFB
  2640                           pclath	equ	0xFFA
  2641                           tblptru	equ	0xFF8
  2642                           tblptrh	equ	0xFF7
  2643                           tblptrl	equ	0xFF6
  2644                           tablat	equ	0xFF5
  2645                           prodh	equ	0xFF4
  2646                           prodl	equ	0xFF3
  2647                           intcon	equ	0xFF2
  2648                           postinc0	equ	0xFEE
  2649                           fsr0h	equ	0xFEA
  2650                           fsr0l	equ	0xFE9
  2651                           wreg	equ	0xFE8
  2652                           fsr1h	equ	0xFE2
  2653                           fsr1l	equ	0xFE1
  2654                           postinc2	equ	0xFDE
  2655                           postdec2	equ	0xFDD
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function i2___lwdiv *****************
  2661 ;; Defined at:
  2662 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  dividend        2    0[COMRAM] unsigned int 
  2665 ;;  divisor         2    2[COMRAM] unsigned int 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  2668 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  2    0[COMRAM] unsigned int 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2678 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;Total ram usage:        7 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		i2_printf
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text19
  2692  001560                     __ptext19:
  2693                           	opt stack 0
  2694  001560                     i2___lwdiv:
  2695                           	opt stack 25
  2696                           
  2697                           ;incstack = 0
  2698  001560  0E00               	movlw	0
  2699  001562  6E06               	movwf	i2___lwdiv@quotient+1,c
  2700  001564  0E00               	movlw	0
  2701  001566  6E05               	movwf	i2___lwdiv@quotient,c
  2702  001568  5003               	movf	i2___lwdiv@divisor,w,c
  2703  00156A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  2704  00156C  B4D8               	btfsc	status,2,c
  2705  00156E  D01C               	goto	i2l659
  2706  001570  0E01               	movlw	1
  2707  001572  6E07               	movwf	i2___lwdiv@counter,c
  2708  001574  D004               	goto	i2l654
  2709  001576  90D8               	bcf	status,0,c
  2710  001578  3603               	rlcf	i2___lwdiv@divisor,f,c
  2711  00157A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  2712  00157C  2A07               	incf	i2___lwdiv@counter,f,c
  2713  00157E                     i2l654:
  2714  00157E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  2715  001580  D7FA               	goto	i2l655
  2716  001582                     i2u56_40:
  2717  001582  90D8               	bcf	status,0,c
  2718  001584  3605               	rlcf	i2___lwdiv@quotient,f,c
  2719  001586  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  2720  001588  5003               	movf	i2___lwdiv@divisor,w,c
  2721  00158A  5C01               	subwf	i2___lwdiv@dividend,w,c
  2722  00158C  5004               	movf	i2___lwdiv@divisor+1,w,c
  2723  00158E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  2724  001590  A0D8               	btfss	status,0,c
  2725  001592  D005               	goto	i2l658
  2726  001594  5003               	movf	i2___lwdiv@divisor,w,c
  2727  001596  5E01               	subwf	i2___lwdiv@dividend,f,c
  2728  001598  5004               	movf	i2___lwdiv@divisor+1,w,c
  2729  00159A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  2730  00159C  8005               	bsf	i2___lwdiv@quotient,0,c
  2731  00159E                     i2l658:
  2732  00159E  90D8               	bcf	status,0,c
  2733  0015A0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  2734  0015A2  3203               	rrcf	i2___lwdiv@divisor,f,c
  2735  0015A4  2E07               	decfsz	i2___lwdiv@counter,f,c
  2736  0015A6  D7ED               	goto	i2u56_40
  2737  0015A8                     i2l659:
  2738  0015A8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  2739  0015AC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  2740  0015B0  0012               	return		;funcret
  2741  0015B2                     __end_ofi2___lwdiv:
  2742                           	opt stack 0
  2743                           pclatu	equ	0xFFB
  2744                           pclath	equ	0xFFA
  2745                           tblptru	equ	0xFF8
  2746                           tblptrh	equ	0xFF7
  2747                           tblptrl	equ	0xFF6
  2748                           tablat	equ	0xFF5
  2749                           prodh	equ	0xFF4
  2750                           prodl	equ	0xFF3
  2751                           intcon	equ	0xFF2
  2752                           postinc0	equ	0xFEE
  2753                           fsr0h	equ	0xFEA
  2754                           fsr0l	equ	0xFE9
  2755                           wreg	equ	0xFE8
  2756                           fsr1h	equ	0xFE2
  2757                           fsr1l	equ	0xFE1
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function i2_initLCD *****************
  2765 ;; Defined at:
  2766 ;;		line 60 in file "lcd.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;Total ram usage:        1 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    2
  2787 ;; This function calls:
  2788 ;;		i2_lcdInst
  2789 ;; This function is called by:
  2790 ;;		_interruptHandler
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text20
  2795  0015FE                     __ptext20:
  2796                           	opt stack 0
  2797  0015FE                     i2_initLCD:
  2798                           	opt stack 24
  2799                           
  2800                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  2801                           
  2802                           ;incstack = 0
  2803  0015FE  0E9C               	movlw	156
  2804  001600  6E04               	movwf	??i2_initLCD& (0+255),c
  2805  001602  0ED7               	movlw	215
  2806  001604                     i2u93_47:
  2807  001604  2EE8               	decfsz	wreg,f,c
  2808  001606  D7FE               	bra	i2u93_47
  2809  001608  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2810  00160A  D7FC               	bra	i2u93_47
  2811  00160C  F000               	nop	
  2812                           
  2813                           ;lcd.c: 69: lcdInst(0b00110011);
  2814  00160E  0E33               	movlw	51
  2815  001610  ECC4  F00B         	call	i2_lcdInst
  2816                           
  2817                           ;lcd.c: 70: lcdInst(0b00110010);
  2818  001614  0E32               	movlw	50
  2819  001616  ECC4  F00B         	call	i2_lcdInst
  2820                           
  2821                           ;lcd.c: 71: lcdInst(0b00101000);
  2822  00161A  0E28               	movlw	40
  2823  00161C  ECC4  F00B         	call	i2_lcdInst
  2824                           
  2825                           ;lcd.c: 72: lcdInst(0b00001111);
  2826  001620  0E0F               	movlw	15
  2827  001622  ECC4  F00B         	call	i2_lcdInst
  2828                           
  2829                           ;lcd.c: 73: lcdInst(0b00000110);
  2830  001626  0E06               	movlw	6
  2831  001628  ECC4  F00B         	call	i2_lcdInst
  2832                           
  2833                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  2834  00162C  0E01               	movlw	1
  2835  00162E  ECC4  F00B         	call	i2_lcdInst
  2836  001632  0E9C               	movlw	156
  2837  001634  6E04               	movwf	??i2_initLCD& (0+255),c
  2838  001636  0ED7               	movlw	215
  2839  001638                     i2u94_47:
  2840  001638  2EE8               	decfsz	wreg,f,c
  2841  00163A  D7FE               	bra	i2u94_47
  2842  00163C  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2843  00163E  D7FC               	bra	i2u94_47
  2844  001640  F000               	nop	
  2845                           
  2846                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2847  001642  0E0F               	movlw	15
  2848  001644  ECC4  F00B         	call	i2_lcdInst
  2849  001648  0012               	return		;funcret
  2850  00164A                     __end_ofi2_initLCD:
  2851                           	opt stack 0
  2852                           pclatu	equ	0xFFB
  2853                           pclath	equ	0xFFA
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           prodh	equ	0xFF4
  2859                           prodl	equ	0xFF3
  2860                           intcon	equ	0xFF2
  2861                           postinc0	equ	0xFEE
  2862                           fsr0h	equ	0xFEA
  2863                           fsr0l	equ	0xFE9
  2864                           wreg	equ	0xFE8
  2865                           fsr1h	equ	0xFE2
  2866                           fsr1l	equ	0xFE1
  2867                           postinc2	equ	0xFDE
  2868                           postdec2	equ	0xFDD
  2869                           fsr2h	equ	0xFDA
  2870                           fsr2l	equ	0xFD9
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function i2_lcdInst *****************
  2874 ;; Defined at:
  2875 ;;		line 11 in file "lcd.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  data            1    wreg     unsigned char 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  data            1    2[COMRAM] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, status,2, status,0, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;Total ram usage:        1 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    1
  2896 ;; This function calls:
  2897 ;;		i2_lcdNibble
  2898 ;; This function is called by:
  2899 ;;		_interruptHandler
  2900 ;;		i2_initLCD
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text21
  2905  001788                     __ptext21:
  2906                           	opt stack 0
  2907  001788                     i2_lcdInst:
  2908                           	opt stack 25
  2909                           
  2910                           ;incstack = 0
  2911                           ;i2lcdInst@data stored from wreg
  2912  001788  6E03               	movwf	i2lcdInst@data,c
  2913                           
  2914                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2915  00178A  948C               	bcf	3980,2,c	;volatile
  2916                           
  2917                           ;lcd.c: 20: lcdNibble(data);
  2918  00178C  5003               	movf	i2lcdInst@data,w,c
  2919  00178E  EC48  F00A         	call	i2_lcdNibble
  2920                           
  2921                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2922  001792  0EA0               	movlw	160
  2923  001794                     i2u95_47:
  2924  001794  D000               	nop2	
  2925  001796  2EE8               	decfsz	wreg,f,c
  2926  001798  D7FD               	bra	i2u95_47
  2927  00179A  0012               	return		;funcret
  2928  00179C                     __end_ofi2_lcdInst:
  2929                           	opt stack 0
  2930                           pclatu	equ	0xFFB
  2931                           pclath	equ	0xFFA
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           intcon	equ	0xFF2
  2939                           postinc0	equ	0xFEE
  2940                           fsr0h	equ	0xFEA
  2941                           fsr0l	equ	0xFE9
  2942                           wreg	equ	0xFE8
  2943                           fsr1h	equ	0xFE2
  2944                           fsr1l	equ	0xFE1
  2945                           postinc2	equ	0xFDE
  2946                           postdec2	equ	0xFDD
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function i2_lcdNibble *****************
  2952 ;; Defined at:
  2953 ;;		line 37 in file "lcd.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  data            1    wreg     unsigned char 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  data            1    1[COMRAM] unsigned char 
  2958 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;Total ram usage:        2 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		i2_lcdInst
  2978 ;;		i2_putch
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text22
  2983  001490                     __ptext22:
  2984                           	opt stack 0
  2985  001490                     i2_lcdNibble:
  2986                           	opt stack 24
  2987                           
  2988                           ;incstack = 0
  2989                           ;i2lcdNibble@data stored from wreg
  2990  001490  6E02               	movwf	i2lcdNibble@data,c
  2991                           
  2992                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2993  001492  5002               	movf	i2lcdNibble@data,w,c
  2994  001494  0BF0               	andlw	240
  2995  001496  6E01               	movwf	i2lcdNibble@temp,c
  2996                           
  2997                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2998  001498  508C               	movf	3980,w,c	;volatile
  2999  00149A  0B0F               	andlw	15
  3000  00149C  6E8C               	movwf	3980,c	;volatile
  3001                           
  3002                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3003  00149E  5001               	movf	i2lcdNibble@temp,w,c
  3004  0014A0  108C               	iorwf	3980,w,c	;volatile
  3005  0014A2  6E8C               	movwf	3980,c	;volatile
  3006                           
  3007                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3008  0014A4  0E00               	movlw	0
  3009  0014A6  BEF2               	btfsc	intcon,7,c	;volatile
  3010  0014A8  0E01               	movlw	1
  3011  0014AA  6E50               	movwf	_LCDinterruptState,c
  3012  0014AC  9EF2               	bcf	intcon,7,c	;volatile
  3013  0014AE  868C               	bsf	3980,3,c	;volatile
  3014  0014B0  0E42               	movlw	66
  3015  0014B2                     i2u96_47:
  3016  0014B2  2EE8               	decfsz	wreg,f,c
  3017  0014B4  D7FE               	bra	i2u96_47
  3018  0014B6  D000               	nop2	
  3019  0014B8  968C               	bcf	3980,3,c	;volatile
  3020  0014BA  0EA0               	movlw	160
  3021  0014BC                     i2u97_47:
  3022  0014BC  D000               	nop2	
  3023  0014BE  2EE8               	decfsz	wreg,f,c
  3024  0014C0  D7FD               	bra	i2u97_47
  3025  0014C2  B050               	btfsc	_LCDinterruptState,0,c
  3026  0014C4  D002               	bra	i2u47_45
  3027  0014C6  9EF2               	bcf	intcon,7,c	;volatile
  3028  0014C8  D001               	bra	i2u47_46
  3029  0014CA                     i2u47_45:
  3030  0014CA  8EF2               	bsf	intcon,7,c	;volatile
  3031  0014CC                     i2u47_46:
  3032                           
  3033                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3034  0014CC  3802               	swapf	i2lcdNibble@data,w,c
  3035  0014CE  0BF0               	andlw	240
  3036  0014D0  6E02               	movwf	i2lcdNibble@data,c
  3037                           
  3038                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3039  0014D2  5002               	movf	i2lcdNibble@data,w,c
  3040  0014D4  0BF0               	andlw	240
  3041  0014D6  6E01               	movwf	i2lcdNibble@temp,c
  3042                           
  3043                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3044  0014D8  508C               	movf	3980,w,c	;volatile
  3045  0014DA  0B0F               	andlw	15
  3046  0014DC  6E8C               	movwf	3980,c	;volatile
  3047                           
  3048                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3049  0014DE  5001               	movf	i2lcdNibble@temp,w,c
  3050  0014E0  108C               	iorwf	3980,w,c	;volatile
  3051  0014E2  6E8C               	movwf	3980,c	;volatile
  3052                           
  3053                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3054  0014E4  0E00               	movlw	0
  3055  0014E6  BEF2               	btfsc	intcon,7,c	;volatile
  3056  0014E8  0E01               	movlw	1
  3057  0014EA  6E50               	movwf	_LCDinterruptState,c
  3058  0014EC  9EF2               	bcf	intcon,7,c	;volatile
  3059  0014EE  868C               	bsf	3980,3,c	;volatile
  3060  0014F0  0E42               	movlw	66
  3061  0014F2                     i2u98_47:
  3062  0014F2  2EE8               	decfsz	wreg,f,c
  3063  0014F4  D7FE               	bra	i2u98_47
  3064  0014F6  D000               	nop2	
  3065  0014F8  968C               	bcf	3980,3,c	;volatile
  3066  0014FA  0EA0               	movlw	160
  3067  0014FC                     i2u99_47:
  3068  0014FC  D000               	nop2	
  3069  0014FE  2EE8               	decfsz	wreg,f,c
  3070  001500  D7FD               	bra	i2u99_47
  3071  001502  B050               	btfsc	_LCDinterruptState,0,c
  3072  001504  D002               	bra	i2u48_45
  3073  001506  9EF2               	bcf	intcon,7,c	;volatile
  3074  001508  D001               	bra	i2u48_46
  3075  00150A                     i2u48_45:
  3076  00150A  8EF2               	bsf	intcon,7,c	;volatile
  3077  00150C                     i2u48_46:
  3078  00150C  0012               	return		;funcret
  3079  00150E                     __end_ofi2_lcdNibble:
  3080                           	opt stack 0
  3081                           pclatu	equ	0xFFB
  3082                           pclath	equ	0xFFA
  3083                           tblptru	equ	0xFF8
  3084                           tblptrh	equ	0xFF7
  3085                           tblptrl	equ	0xFF6
  3086                           tablat	equ	0xFF5
  3087                           prodh	equ	0xFF4
  3088                           prodl	equ	0xFF3
  3089                           intcon	equ	0xFF2
  3090                           postinc0	equ	0xFEE
  3091                           fsr0h	equ	0xFEA
  3092                           fsr0l	equ	0xFE9
  3093                           wreg	equ	0xFE8
  3094                           fsr1h	equ	0xFE2
  3095                           fsr1l	equ	0xFE1
  3096                           postinc2	equ	0xFDE
  3097                           postdec2	equ	0xFDD
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           pclatu	equ	0xFFB
  3102                           pclath	equ	0xFFA
  3103                           tblptru	equ	0xFF8
  3104                           tblptrh	equ	0xFF7
  3105                           tblptrl	equ	0xFF6
  3106                           tablat	equ	0xFF5
  3107                           prodh	equ	0xFF4
  3108                           prodl	equ	0xFF3
  3109                           intcon	equ	0xFF2
  3110                           postinc0	equ	0xFEE
  3111                           fsr0h	equ	0xFEA
  3112                           fsr0l	equ	0xFE9
  3113                           wreg	equ	0xFE8
  3114                           fsr1h	equ	0xFE2
  3115                           fsr1l	equ	0xFE1
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122                           	psect	rparam
  3123  0000                     pclatu	equ	0xFFB
  3124                           pclath	equ	0xFFA
  3125                           tblptru	equ	0xFF8
  3126                           tblptrh	equ	0xFF7
  3127                           tblptrl	equ	0xFF6
  3128                           tablat	equ	0xFF5
  3129                           prodh	equ	0xFF4
  3130                           prodl	equ	0xFF3
  3131                           intcon	equ	0xFF2
  3132                           postinc0	equ	0xFEE
  3133                           fsr0h	equ	0xFEA
  3134                           fsr0l	equ	0xFE9
  3135                           wreg	equ	0xFE8
  3136                           fsr1h	equ	0xFE2
  3137                           fsr1l	equ	0xFE1
  3138                           postinc2	equ	0xFDE
  3139                           postdec2	equ	0xFDD
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144                           	psect	temp
  3145  000051                     btemp:
  3146                           	opt stack 0
  3147  000051                     	ds	1
  3148  0000                     int$flags	set	btemp
  3149  0000                     wtemp6	set	btemp+1
  3150                           pclatu	equ	0xFFB
  3151                           pclath	equ	0xFFA
  3152                           tblptru	equ	0xFF8
  3153                           tblptrh	equ	0xFF7
  3154                           tblptrl	equ	0xFF6
  3155                           tablat	equ	0xFF5
  3156                           prodh	equ	0xFF4
  3157                           prodl	equ	0xFF3
  3158                           intcon	equ	0xFF2
  3159                           postinc0	equ	0xFEE
  3160                           fsr0h	equ	0xFEA
  3161                           fsr0l	equ	0xFE9
  3162                           wreg	equ	0xFE8
  3163                           fsr1h	equ	0xFE2
  3164                           fsr1l	equ	0xFE1
  3165                           postinc2	equ	0xFDE
  3166                           postdec2	equ	0xFDD
  3167                           fsr2h	equ	0xFDA
  3168                           fsr2l	equ	0xFD9
  3169                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    16
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     70      80
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[3]), STR_2(CODE[11]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2081
                                             69 COMRAM     1     1      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1303
                                             57 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             47 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             52 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             45 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             48 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             47 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             45 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     272
                                             48 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     326
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     250
                                             46 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      76
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    21    21      0    1265
                                             24 COMRAM    21    21      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            21    17      4     972
                                             12 COMRAM    12     8      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     46      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      50      34        0.0%
DATA                 0      0      50       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Apr  7 20:26:55 2018

                         u15 144C                           u16 144E                           u25 148C  
                         u26 148E                  __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l232 1028  
                        l241 108A                          l233 1038                          l154 139C  
                        l155 13CC                          l156 13E2                          l245 10CC  
                        l246 111A                          l158 13E8                          l247 10D2  
                        l239 1062                          l654 152C                          l655 1524  
                        l664 1660                          l665 1658                          l658 154C  
                        l659 1556                          l668 1678                          l669 1682  
               __CFG_CPB$OFF 000000                          u500 1530                          u530 1664  
                        u650 10BA                          u670 1122                          u817 13D8  
                        u770 13C4                          u907 147E                          u827 1408  
                        u837 1758                          u847 15B8                          u857 15EC  
                        u867 176C                          u877 1434                          u887 143E  
                        u897 1474                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1514 108E                         _ADON 007E10  
                       STR_1 1019                         STR_2 1011                         STR_3 1019  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         _RBIE 007F93  
                       _RBIF 007F90                         _main 1340     __end_of_interruptHandler 1340  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0051             __end_of_I2C_init 16F8  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000              __end_ofi2_putch 1788                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  i2_lcdNibble 1490             __end_of_LCD_LEFT 100C  
           ?_I2C_Master_Init 002E             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_main 0001              __end_of___lwdiv 1560              __end_of___lwmod 168C  
                      i2l232 1146                        i2l241 11A8                        i2l233 1156  
                      i2l245 11EA                        i2l246 1238                        i2l247 11F0  
                      i2l239 1180                        i2l167 12F2                        i2l654 157E  
                      i2l655 1576                        i2l664 16A2                        i2l665 169A  
                      i2l658 159E                        i2l659 15A8                        i2l668 16BA  
                      i2l669 16C4                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              __end_of_lcdInst 1774  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 15FE  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 100B                        _putch 174C  
                      pclath 000FFA                        tablat 000FF5            _LCDinterruptState 0050  
                      status 000FD8                        wtemp6 0052               __CFG_PBADEN$ON 000000  
      __size_of_I2C_sendData 0022             __end_ofi2_printf 125A           __size_ofi2___lwdiv 0052  
         __size_ofi2___lwmod 0042              __initialization 171A           __size_ofi2_lcdInst 0014  
               __end_of_main 1412                   i2printf@ap 0012           __size_ofi2_initLCD 004C  
          __end_of_LCD_RIGHT 100D                       ??_main 0046                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 002F           ??_I2C_Master_Start 002F  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0031  
                     _ADRESH 000FC4                       _ADRESL 000FC3              i2lcdNibble@data 0002  
                     ?_putch 0001                 _I2C_sendData 16F8              i2lcdNibble@temp 0001  
                     i2l1580 11AC                       i2l1674 12F4                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
             __CFG_STVREN$ON 000000                    ??___lwdiv 0032                    ??___lwmod 0039  
                     clear_0 1720                    ??_lcdInst 0030                       _printf 101E  
                  ??_initLCD 0031            __end_ofi2___lwdiv 15B2                 __mediumconst 0000  
          __end_ofi2___lwmod 16CE                    ?_I2C_init 0001                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8            __end_ofi2_lcdInst 179C  
          __end_ofi2_initLCD 164A                   __accesstop 0080      __end_of__initialization 1726  
              ___rparam_used 000001           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
              __end_of_putch 1760                  i2printf@val 0016           __size_of_lcdNibble 007E  
                i2putch@data 0003                   ??_I2C_init 0032                    ?i2_printf 000D  
                    ??_putch 0030            ?_interruptHandler 0001           ??_interruptHandler 0019  
               ?i2_lcdNibble 0001                      ?_printf 003A                   ??i2_printf 0011  
                    i2u47_45 14CA                      i2u47_46 14CC                      i2u56_40 1582  
                    i2u48_45 150A                      i2u48_46 150C                      i2u73_40 11D8  
                    i2u59_40 16A6                      i2u75_40 1240                      i2u91_47 12EA  
                    i2u92_47 1780                      i2u93_47 1604                      i2u94_47 1638  
                    i2u79_40 12B2                      i2u95_47 1794                      i2u79_48 12B4  
                    i2u96_47 14B2                      i2u97_47 14BC                      i2u98_47 14F2  
                    i2u99_47 14FC         lcd@LCDinterruptState 004F                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                      _B_count 004D  
                    i2_putch 1774                      _N_count 004B            __end_of_lcdNibble 1490  
                    _S_count 0049                      __Hparam 0000                      __Lparam 0000  
                    _W_count 0047                      ___lwdiv 150E                      ___lwmod 164A  
               __psmallconst 1000                      __pcinit 171A                      __ramtop 1000  
                    _lcdInst 1760                      __ptext0 1340                      __ptext1 101E  
                    __ptext2 174C                      __ptext3 164A                      __ptext4 150E  
                    __ptext5 15B2                      __ptext6 1760                      __ptext7 1412  
                    __ptext8 16F8                      __ptext9 16CE              __size_of_printf 011E  
                    _initLCD 15B2                      _dpowers 1001                    _LCD_RIGHT 100C  
   __size_of_I2C_Master_Init 0018     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
             __pintcode_body 125A         end_of_initialization 1726        __end_of_LCD_SIZE_HORZ 100F  
      __end_of_LCD_SIZE_VERT 100E                __Lmediumconst 0000                      int_func 125A  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A                      printf@c 0045  
                    printf@f 003A                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81                    _TRISBbits 000F93  
                  _TRISCbits 000F94            __size_of_I2C_init 002A            i2___lwdiv@divisor 0003  
                  i2___lwdiv 1560                    i2___lwmod 168C            i2___lwdiv@counter 0007  
                  i2_lcdInst 1788                    i2_initLCD 15FE         __size_ofi2_lcdNibble 007E  
              i2lcdInst@data 0003        interruptHandler@input 002C               __end_of_printf 113C  
               i2printf@flag 0014                 i2printf@prec 0015          start_initialization 171A  
                  i2printf@c 0018                    i2printf@f 000D                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 011E            ??_I2C_Master_Init 0032  
          ??_I2C_Master_Wait 002E                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 002F  
           __CFG_OSC$INTIO67 000000                   ?i2_initLCD 0001     I2C_Master_Init@clockFreq 002E  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 003E    __size_of_interruptHandler 1338  
                __pbssCOMRAM 0047            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
                   ?i2_putch 0001             _I2C_Master_Start 17C0             _I2C_Master_Write 17AE  
           ___lwdiv@dividend 002E            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
                  _lcdNibble 1412                     ?___lwdiv 002E                     ?___lwmod 0035  
                   ?_lcdInst 0001                     ?_initLCD 0001                  __smallconst 1000  
                   _I2C_init 16CE             ___lwdiv@quotient 0032                ?_I2C_sendData 0001  
                ??i2___lwdiv 0005                  ??i2___lwmod 000C               __size_of_putch 0014  
                   _LCD_LEFT 100B                  ??i2_lcdInst 0003                     _LATCbits 000F8B  
                   _LATDbits 000F8C                  ??i2_initLCD 0004             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001                   _ADCON0bits 000FC2                   _ADCON2bits 000FC0  
              lcdNibble@data 002F                   printf@flag 0041                lcdNibble@temp 002E  
                 printf@prec 0042                     i2_printf 113C               ??_I2C_sendData 0031  
             _LCD_HORZ_LIMIT 1010             __size_ofi2_putch 0014                     __Hrparam 0000  
      I2C_sendData@char_data 0031                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___lwdiv 0052             __size_of___lwmod 0042             _interruptHandler 0008  
           __size_of_lcdInst 0014              _I2C_Master_Init 1734             __size_of_initLCD 004C  
            _I2C_Master_Wait 179C              _I2C_Master_Stop 17B8       __end_of_LCD_HORZ_LIMIT 1011  
            ___lwdiv@divisor 0030              ___lwdiv@counter 0034                     __ptext10 17AE  
                   __ptext11 17B8                     __ptext20 15FE                     __ptext12 17C0  
                   __ptext21 1788                     __ptext13 179C                     __ptext22 1490  
                   __ptext14 1734                     __ptext16 113C                     __ptext17 1774  
                   __ptext18 168C                     __ptext19 1560               _LCD_VERT_LIMIT 100F  
              __size_of_main 00D2                ??i2_lcdNibble 0001                  ??_lcdNibble 002E  
                   int$flags 0051                    printf@val 0043  I2C_Master_Write@byteToWrite 002F  
                  putch@data 0030     __end_of_I2C_Master_Start 17C8                  _OSCTUNEbits 000F9B  
   __end_of_I2C_Master_Write 17B8                   _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1010  
                   intlevel2 0000                _LCD_SIZE_HORZ 100E             ___lwmod@dividend 0035  
              _LCD_SIZE_VERT 100D                   _OSCCONbits 000FD3                     printf@ap 003F  
       __end_of_I2C_sendData 171A      __end_of_I2C_Master_Init 174C      __end_of_I2C_Master_Wait 17AE  
    __end_of_I2C_Master_Stop 17C0                  lcdInst@data 0030          __end_ofi2_lcdNibble 150E  
            ___lwmod@divisor 0037              ___lwmod@counter 0039                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5  
