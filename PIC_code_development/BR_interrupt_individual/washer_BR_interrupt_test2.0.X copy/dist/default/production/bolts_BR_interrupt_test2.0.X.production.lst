

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 31 13:22:32 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _dpowers:
    78                           	opt stack 0
    79  001001  0001               	dw	1
    80  001003  000A               	dw	10
    81  001005  0064               	dw	100
    82  001007  03E8               	dw	1000
    83  001009  2710               	dw	10000
    84  00100B                     __end_of_dpowers:
    85                           	opt stack 0
    86  00100B                     _LCD_LEFT:
    87                           	opt stack 0
    88  00100B  00                 	db	0
    89  00100C                     __end_of_LCD_LEFT:
    90                           	opt stack 0
    91  00100C                     _LCD_RIGHT:
    92                           	opt stack 0
    93  00100C  01                 	db	1
    94  00100D                     __end_of_LCD_RIGHT:
    95                           	opt stack 0
    96  00100D                     _LCD_SIZE_VERT:
    97                           	opt stack 0
    98  00100D  02                 	db	2
    99  00100E                     __end_of_LCD_SIZE_VERT:
   100                           	opt stack 0
   101  00100E                     _LCD_SIZE_HORZ:
   102                           	opt stack 0
   103  00100E  10                 	db	16
   104  00100F                     __end_of_LCD_SIZE_HORZ:
   105                           	opt stack 0
   106  00100F                     _LCD_VERT_LIMIT:
   107                           	opt stack 0
   108  00100F  02                 	db	2
   109  001010                     __end_of_LCD_VERT_LIMIT:
   110                           	opt stack 0
   111  001010                     _LCD_HORZ_LIMIT:
   112                           	opt stack 0
   113  001010  28                 	db	40
   114  001011                     __end_of_LCD_HORZ_LIMIT:
   115                           	opt stack 0
   116  0000                     _SSPBUF	set	4041
   117  0000                     _SSPCON2bits	set	4037
   118  0000                     _SSPADD	set	4040
   119  0000                     _SSPCON2	set	4037
   120  0000                     _SSPCON1	set	4038
   121  0000                     _SSPSTAT	set	4039
   122  0000                     _SSPCON1bits	set	4038
   123  0000                     _ADRESL	set	4035
   124  0000                     _ADRESH	set	4036
   125  0000                     _ADCON0bits	set	4034
   126  0000                     _PORTBbits	set	3969
   127  0000                     _TRISBbits	set	3987
   128  0000                     _TRISCbits	set	3988
   129  0000                     _LATCbits	set	3979
   130  0000                     _ADCON2bits	set	4032
   131  0000                     _ADCON1	set	4033
   132  0000                     _ADCON0	set	4034
   133  0000                     _TRISE	set	3990
   134  0000                     _TRISD	set	3989
   135  0000                     _TRISC	set	3988
   136  0000                     _TRISB	set	3987
   137  0000                     _TRISA	set	3986
   138  0000                     _LATE	set	3981
   139  0000                     _LATC	set	3979
   140  0000                     _LATB	set	3978
   141  0000                     _LATA	set	3977
   142  0000                     _OSCTUNEbits	set	3995
   143  0000                     _OSCCON	set	4051
   144  0000                     _INTCONbits	set	4082
   145  0000                     _LATD	set	3980
   146  0000                     _LATDbits	set	3980
   147  0000                     _ADON	set	32272
   148  0000                     _RBIF	set	32656
   149  0000                     _RBIE	set	32659
   150  001011                     STR_2:
   151  001011  42                 	db	66	;'B'
   152  001012  5F                 	db	95	;'_'
   153  001013  63                 	db	99	;'c'
   154  001014  6F                 	db	111	;'o'
   155  001015  75                 	db	117	;'u'
   156  001016  6E                 	db	110	;'n'
   157  001017  74                 	db	116	;'t'
   158  001018  3A                 	db	58	;':'
   159  001019  25                 	db	37
   160  00101A  64                 	db	100	;'d'
   161  00101B  00                 	db	0
   162  0000                     
   163                           ; #config settings
   164  00101C  00                 	db	0	; dummy byte at the end
   165  0000                     
   166                           	psect	cinit
   167  0016F2                     __pcinit:
   168                           	opt stack 0
   169  0016F2                     start_initialization:
   170                           	opt stack 0
   171  0016F2                     __initialization:
   172                           	opt stack 0
   173                           
   174                           ; Clear objects allocated to COMRAM (10 bytes)
   175  0016F2  EE00  F047         	lfsr	0,__pbssCOMRAM
   176  0016F6  0E0A               	movlw	10
   177  0016F8                     clear_0:
   178  0016F8  6AEE               	clrf	postinc0,c
   179  0016FA  06E8               	decf	wreg,f,c
   180  0016FC  E1FD               	bnz	clear_0
   181  0016FE                     end_of_initialization:
   182                           	opt stack 0
   183  0016FE                     __end_of__initialization:
   184                           	opt stack 0
   185  0016FE  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   186  001700  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   187  001702  0E00               	movlw	low (__Lmediumconst shr (0+16))
   188  001704  6EF8               	movwf	tblptru,c
   189  001706  0100               	movlb	0
   190  001708  EFA1  F009         	goto	_main	;jump to C main() function
   191                           tblptru	equ	0xFF8
   192                           postinc0	equ	0xFEE
   193                           wreg	equ	0xFE8
   194                           
   195                           	psect	bssCOMRAM
   196  000047                     __pbssCOMRAM:
   197                           	opt stack 0
   198  000047                     _W_count:
   199                           	opt stack 0
   200  000047                     	ds	2
   201  000049                     _S_count:
   202                           	opt stack 0
   203  000049                     	ds	2
   204  00004B                     _N_count:
   205                           	opt stack 0
   206  00004B                     	ds	2
   207  00004D                     _B_count:
   208                           	opt stack 0
   209  00004D                     	ds	2
   210  00004F                     	ds	1
   211  000050                     _LCDinterruptState:
   212                           	opt stack 0
   213  000050                     	ds	1
   214                           tblptru	equ	0xFF8
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           
   218                           	psect	cstackBANK0
   219  000080                     __pcstackBANK0:
   220                           	opt stack 0
   221  000080                     main@input:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x0
   225  000080                     	ds	2
   226                           tblptru	equ	0xFF8
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	cstackCOMRAM
   231  000001                     __pcstackCOMRAM:
   232                           	opt stack 0
   233  000001                     ?i2___lwdiv:
   234                           	opt stack 0
   235  000001                     i2lcdNibble@temp:
   236                           	opt stack 0
   237  000001                     i2___lwdiv@dividend:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x0
   241  000001                     	ds	1
   242  000002                     i2lcdNibble@data:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0x1
   246  000002                     	ds	1
   247  000003                     i2lcdInst@data:
   248                           	opt stack 0
   249  000003                     i2putch@data:
   250                           	opt stack 0
   251  000003                     i2___lwdiv@divisor:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x2
   255  000003                     	ds	1
   256  000004                     ??i2_initLCD:
   257                           
   258                           ; 1 bytes @ 0x3
   259  000004                     	ds	1
   260  000005                     i2___lwdiv@quotient:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x4
   264  000005                     	ds	2
   265  000007                     i2___lwdiv@counter:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x6
   269  000007                     	ds	1
   270  000008                     ?i2___lwmod:
   271                           	opt stack 0
   272  000008                     i2___lwmod@dividend:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x7
   276  000008                     	ds	2
   277  00000A                     i2___lwmod@divisor:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x9
   281  00000A                     	ds	2
   282  00000C                     i2___lwmod@counter:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0xB
   286  00000C                     	ds	1
   287  00000D                     ?i2_printf:
   288                           	opt stack 0
   289  00000D                     i2printf@f:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0xC
   293  00000D                     	ds	4
   294  000011                     ??i2_printf:
   295                           
   296                           ; 1 bytes @ 0x10
   297  000011                     	ds	1
   298  000012                     i2printf@ap:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x11
   302  000012                     	ds	2
   303  000014                     i2printf@flag:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x13
   307  000014                     	ds	1
   308  000015                     i2printf@prec:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x14
   312  000015                     	ds	1
   313  000016                     i2printf@val:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x15
   317  000016                     	ds	2
   318  000018                     i2printf@c:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x17
   322  000018                     	ds	1
   323  000019                     ??_interruptHandler:
   324                           
   325                           ; 1 bytes @ 0x18
   326  000019                     	ds	19
   327  00002C                     interruptHandler@input:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x2B
   331  00002C                     	ds	2
   332  00002E                     ??_I2C_Master_Wait:
   333  00002E                     ?___lwdiv:
   334                           	opt stack 0
   335  00002E                     lcdNibble@temp:
   336                           	opt stack 0
   337  00002E                     ___lwdiv@dividend:
   338                           	opt stack 0
   339  00002E                     I2C_Master_Init@clockFreq:
   340                           	opt stack 0
   341                           
   342                           ; 4 bytes @ 0x2D
   343  00002E                     	ds	1
   344  00002F                     lcdNibble@data:
   345                           	opt stack 0
   346  00002F                     I2C_Master_Write@byteToWrite:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x2E
   350  00002F                     	ds	1
   351  000030                     lcdInst@data:
   352                           	opt stack 0
   353  000030                     putch@data:
   354                           	opt stack 0
   355  000030                     ___lwdiv@divisor:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x2F
   359  000030                     	ds	1
   360  000031                     ??_initLCD:
   361  000031                     I2C_sendData@char_data:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x30
   365  000031                     	ds	1
   366  000032                     ___lwdiv@counter:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x31
   370  000032                     	ds	1
   371  000033                     ___lwdiv@quotient:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x32
   375  000033                     	ds	2
   376  000035                     ?___lwmod:
   377                           	opt stack 0
   378  000035                     ___lwmod@dividend:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x34
   382  000035                     	ds	2
   383  000037                     ___lwmod@divisor:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x36
   387  000037                     	ds	2
   388  000039                     ___lwmod@counter:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x38
   392  000039                     	ds	1
   393  00003A                     ?_printf:
   394                           	opt stack 0
   395  00003A                     printf@f:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x39
   399  00003A                     	ds	4
   400  00003E                     ??_printf:
   401                           
   402                           ; 1 bytes @ 0x3D
   403  00003E                     	ds	1
   404  00003F                     printf@ap:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x3E
   408  00003F                     	ds	2
   409  000041                     printf@flag:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x40
   413  000041                     	ds	1
   414  000042                     printf@prec:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x41
   418  000042                     	ds	1
   419  000043                     printf@val:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x42
   423  000043                     	ds	2
   424  000045                     printf@c:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x44
   428  000045                     	ds	1
   429  000046                     ??_main:
   430                           
   431                           ; 1 bytes @ 0x45
   432  000046                     	ds	1
   433                           tblptru	equ	0xFF8
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 28 in file "main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;  input           2    0[BANK0 ] int 
   447 ;; Return value:  Size  Location     Type
   448 ;;                  1    wreg      void 
   449 ;; Registers used:
   450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;Total ram usage:        3 bytes
   461 ;; Hardware stack levels required when called:    7
   462 ;; This function calls:
   463 ;;		_I2C_init
   464 ;;		_I2C_sendData
   465 ;;		_initLCD
   466 ;;		_lcdInst
   467 ;;		_printf
   468 ;; This function is called by:
   469 ;;		Startup code after reset
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text0
   474  001342                     __ptext0:
   475                           	opt stack 0
   476  001342                     _main:
   477                           	opt stack 24
   478                           
   479                           ;main.c: 32: OSCCON = 0xE2;
   480                           
   481                           ;incstack = 0
   482  001342  0EE2               	movlw	226
   483  001344  6ED3               	movwf	4051,c	;volatile
   484                           
   485                           ;main.c: 39: OSCTUNEbits.PLLEN = 1;
   486  001346  8C9B               	bsf	3995,6,c	;volatile
   487                           
   488                           ;main.c: 43: LATA = 0x00;
   489  001348  0E00               	movlw	0
   490  00134A  6E89               	movwf	3977,c	;volatile
   491                           
   492                           ;main.c: 44: LATB = 0x00;
   493  00134C  0E00               	movlw	0
   494  00134E  6E8A               	movwf	3978,c	;volatile
   495                           
   496                           ;main.c: 45: LATC = 0x00;
   497  001350  0E00               	movlw	0
   498  001352  6E8B               	movwf	3979,c	;volatile
   499                           
   500                           ;main.c: 46: LATD = 0x00;
   501  001354  0E00               	movlw	0
   502  001356  6E8C               	movwf	3980,c	;volatile
   503                           
   504                           ;main.c: 47: LATE = 0x00;
   505  001358  0E00               	movlw	0
   506  00135A  6E8D               	movwf	3981,c	;volatile
   507                           
   508                           ;main.c: 51: TRISA = 0xFF;
   509  00135C  6892               	setf	3986,c	;volatile
   510                           
   511                           ;main.c: 52: TRISB = 0xFF;
   512  00135E  6893               	setf	3987,c	;volatile
   513                           
   514                           ;main.c: 53: TRISC = 0x00;
   515  001360  0E00               	movlw	0
   516  001362  6E94               	movwf	3988,c	;volatile
   517                           
   518                           ;main.c: 54: TRISD = 0x00;
   519  001364  0E00               	movlw	0
   520  001366  6E95               	movwf	3989,c	;volatile
   521                           
   522                           ;main.c: 55: TRISE = 0x00;
   523  001368  0E00               	movlw	0
   524  00136A  6E96               	movwf	3990,c	;volatile
   525                           
   526                           ;main.c: 58: ADCON0 = 0x00;
   527  00136C  0E00               	movlw	0
   528  00136E  6EC2               	movwf	4034,c	;volatile
   529                           
   530                           ;main.c: 59: ADCON1 = 0b00001111;
   531  001370  0E0F               	movlw	15
   532  001372  6EC1               	movwf	4033,c	;volatile
   533                           
   534                           ;main.c: 60: ADCON2bits.ADFM = 1;
   535  001374  8EC0               	bsf	4032,7,c	;volatile
   536                           
   537                           ;main.c: 65: (INTCONbits.GIE = 1);
   538  001376  8EF2               	bsf	intcon,7,c	;volatile
   539                           
   540                           ;main.c: 66: initLCD();
   541  001378  ECC5  F00A         	call	_initLCD	;wreg free
   542                           
   543                           ;main.c: 67: I2C_init();
   544  00137C  EC53  F00B         	call	_I2C_init	;wreg free
   545                           
   546                           ;main.c: 72: LATCbits.LATC0 = 1;
   547  001380  808B               	bsf	3979,0,c	;volatile
   548                           
   549                           ;main.c: 73: TRISCbits.RC0 = 0;
   550  001382  9094               	bcf	3988,0,c	;volatile
   551                           
   552                           ;main.c: 76: RBIE = 1;
   553  001384  86F2               	bsf	intcon,3,c	;volatile
   554                           
   555                           ;main.c: 82: initLCD();
   556  001386  ECC5  F00A         	call	_initLCD	;wreg free
   557                           
   558                           ;main.c: 84: I2C_sendData('5');
   559  00138A  0E35               	movlw	53
   560  00138C  EC68  F00B         	call	_I2C_sendData
   561  001390                     
   562                           ;main.c: 87: TRISBbits.RB5 = 1;
   563  001390  8A93               	bsf	3987,5,c	;volatile
   564                           
   565                           ;main.c: 88: int input = PORTBbits.RB5;
   566  001392  AA81               	btfss	3969,5,c	;volatile
   567  001394  D003               	goto	u1050
   568  001396  6A46               	clrf	??_main& (0+255),c
   569  001398  2A46               	incf	??_main& (0+255),f,c
   570  00139A  D001               	goto	u1058
   571  00139C                     u1050:
   572  00139C  6A46               	clrf	??_main& (0+255),c
   573  00139E                     u1058:
   574  00139E  5046               	movf	??_main,w,c
   575  0013A0  0100               	movlb	0	; () banked
   576  0013A2  6F80               	movwf	main@input& (0+255),b
   577  0013A4  6B81               	clrf	(main@input+1)& (0+255),b
   578                           
   579                           ; BSR set to: 0
   580                           ;main.c: 89: initLCD();
   581  0013A6  ECC5  F00A         	call	_initLCD	;wreg free
   582                           
   583                           ;main.c: 90: printf("%d",input);
   584  0013AA  0E19               	movlw	low (STR_2+8)
   585  0013AC  6E3A               	movwf	printf@f,c
   586  0013AE  0E10               	movlw	high (STR_2+8)
   587  0013B0  6E3B               	movwf	printf@f+1,c
   588  0013B2  C080  F03C         	movff	main@input,?_printf+2
   589  0013B6  C081  F03D         	movff	main@input+1,?_printf+3
   590  0013BA  EC0F  F008         	call	_printf	;wreg free
   591  0013BE  D7E8               	goto	l154
   592  0013C0                     
   593                           ;main.c: 106: printf("B_count:%d",B_count);
   594  0013C0  0E11               	movlw	low STR_2
   595  0013C2  6E3A               	movwf	printf@f,c
   596  0013C4  0E10               	movlw	high STR_2
   597  0013C6  6E3B               	movwf	printf@f+1,c
   598  0013C8  C04D  F03C         	movff	_B_count,?_printf+2
   599  0013CC  C04E  F03D         	movff	_B_count+1,?_printf+3
   600  0013D0  EC0F  F008         	call	_printf	;wreg free
   601                           
   602                           ;main.c: 107: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   603  0013D4  0E80               	movlw	128
   604  0013D6  EC9C  F00B         	call	_lcdInst
   605  0013DA  0E34               	movlw	52
   606  0013DC  6E46               	movwf	??_main& (0+255),c
   607  0013DE  0EF2               	movlw	242
   608  0013E0                     u1077:
   609  0013E0  2EE8               	decfsz	wreg,f,c
   610  0013E2  D7FE               	bra	u1077
   611  0013E4  2E46               	decfsz	??_main& (0+255),f,c
   612  0013E6  D7FC               	bra	u1077
   613  0013E8  D7EB               	goto	l157
   614  0013EA                     __end_of_main:
   615                           	opt stack 0
   616                           tblptru	equ	0xFF8
   617                           intcon	equ	0xFF2
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           
   621 ;; *************** function _printf *****************
   622 ;; Defined at:
   623 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;  f               2   57[COMRAM] PTR const unsigned char 
   626 ;;		 -> STR_3(3), STR_2(11), STR_1(3), 
   627 ;; Auto vars:     Size  Location     Type
   628 ;;  tmpval          4    0        struct .
   629 ;;  cp              3    0        PTR const unsigned char 
   630 ;;  val             2   66[COMRAM] unsigned int 
   631 ;;  ap              2   62[COMRAM] PTR void [1]
   632 ;;		 -> ?i2_printf(2), ?_printf(2), 
   633 ;;  len             2    0        unsigned int 
   634 ;;  c               1   68[COMRAM] char 
   635 ;;  prec            1   65[COMRAM] char 
   636 ;;  flag            1   64[COMRAM] unsigned char 
   637 ;; Return value:  Size  Location     Type
   638 ;;                  2   57[COMRAM] int 
   639 ;; Registers used:
   640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   646 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   647 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   648 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   649 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   650 ;;Total ram usage:       12 bytes
   651 ;; Hardware stack levels used:    1
   652 ;; Hardware stack levels required when called:    6
   653 ;; This function calls:
   654 ;;		___lwdiv
   655 ;;		___lwmod
   656 ;;		_putch
   657 ;; This function is called by:
   658 ;;		_main
   659 ;; This function uses a non-reentrant model
   660 ;;
   661                           
   662                           	psect	text1
   663  00101E                     __ptext1:
   664                           	opt stack 0
   665  00101E                     _printf:
   666                           	opt stack 24
   667                           
   668                           ;doprnt.c: 466: va_list ap;
   669                           ;doprnt.c: 499: signed char c;
   670                           ;doprnt.c: 506: signed char prec;
   671                           ;doprnt.c: 508: unsigned char flag;
   672                           ;doprnt.c: 523: union {
   673                           ;doprnt.c: 524: unsigned long vd;
   674                           ;doprnt.c: 525: double integ;
   675                           ;doprnt.c: 526: } tmpval;
   676                           ;doprnt.c: 528: unsigned int val;
   677                           ;doprnt.c: 529: unsigned len;
   678                           ;doprnt.c: 530: const char * cp;
   679                           ;doprnt.c: 533: *ap = __va_start();
   680                           
   681                           ;incstack = 0
   682  00101E  0E3C               	movlw	low (?_printf+2)
   683  001020  6E3F               	movwf	printf@ap,c
   684  001022  0E00               	movlw	high (?_printf+2)
   685  001024  6E40               	movwf	printf@ap+1,c
   686                           
   687                           ;doprnt.c: 536: while(c = *f++) {
   688  001026  D07D               	goto	u970
   689  001028                     
   690                           ;doprnt.c: 538: if(c != '%')
   691  001028  0E25               	movlw	37
   692  00102A  1845               	xorwf	printf@c,w,c
   693  00102C  B4D8               	btfsc	status,2,c
   694  00102E  D004               	goto	l232
   695                           
   696                           ;doprnt.c: 540: {
   697                           ;doprnt.c: 541: (putch(c) );
   698  001030  5045               	movf	printf@c,w,c
   699  001032  EC92  F00B         	call	_putch
   700                           
   701                           ;doprnt.c: 542: continue;
   702  001036  D075               	goto	u970
   703  001038                     l232:
   704                           
   705                           ;doprnt.c: 543: }
   706                           ;doprnt.c: 548: flag = 0;
   707  001038  0E00               	movlw	0
   708  00103A  6E41               	movwf	printf@flag,c
   709                           
   710                           ;doprnt.c: 822: }
   711                           
   712                           ;doprnt.c: 813: continue;
   713                           
   714                           ;doprnt.c: 802: default:
   715                           
   716                           ;doprnt.c: 698: case 'i':
   717                           ;doprnt.c: 699: break;
   718                           
   719                           ;doprnt.c: 697: case 'd':
   720                           
   721                           ;doprnt.c: 638: goto alldone;
   722                           
   723                           ;doprnt.c: 637: case 0:
   724                           
   725                           ;doprnt.c: 635: switch(c = *f++) {
   726  00103C  C03A  FFF6         	movff	printf@f,tblptrl
   727  001040  C03B  FFF7         	movff	printf@f+1,tblptrh
   728  001044  4A3A               	infsnz	printf@f,f,c
   729  001046  2A3B               	incf	printf@f+1,f,c
   730  001048                     	if	0	;tblptru may be non-zero
   731  001048                     	endif
   732  001048                     	if	0	;tblptru may be non-zero
   733  001048                     	endif
   734  001048  0008               	tblrd		*
   735  00104A  CFF5 F045          	movff	tablat,printf@c
   736  00104E  5045               	movf	printf@c,w,c
   737                           
   738                           ; Switch size 1, requested type "space"
   739                           ; Number of cases is 3, Range of values is 0 to 105
   740                           ; switch strategies available:
   741                           ; Name         Instructions Cycles
   742                           ; simple_byte           10     6 (average)
   743                           ;	Chosen strategy is simple_byte
   744  001050  0A00               	xorlw	0	; case 0
   745  001052  B4D8               	btfsc	status,2,c
   746  001054  0012               	return	
   747  001056  0A64               	xorlw	100	; case 100
   748  001058  B4D8               	btfsc	status,2,c
   749  00105A  D003               	goto	l238
   750  00105C  0A0D               	xorlw	13	; case 105
   751  00105E  A4D8               	btfss	status,2,c
   752  001060  D060               	goto	u970
   753  001062                     l238:
   754                           
   755                           ;doprnt.c: 1253: {
   756                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   757  001062  C03F  FFD9         	movff	printf@ap,fsr2l
   758  001066  C040  FFDA         	movff	printf@ap+1,fsr2h
   759  00106A  CFDE F043          	movff	postinc2,printf@val
   760  00106E  CFDD F044          	movff	postdec2,printf@val+1
   761  001072  0E02               	movlw	2
   762  001074  263F               	addwf	printf@ap,f,c
   763  001076  0E00               	movlw	0
   764  001078  2240               	addwfc	printf@ap+1,f,c
   765                           
   766                           ;doprnt.c: 1261: if((int)val < 0) {
   767  00107A  AE44               	btfss	printf@val+1,7,c
   768  00107C  D006               	goto	l240
   769                           
   770                           ;doprnt.c: 1262: flag |= 0x03;
   771  00107E  0E03               	movlw	3
   772  001080  1241               	iorwf	printf@flag,f,c
   773                           
   774                           ;doprnt.c: 1263: val = -val;
   775  001082  6C43               	negf	printf@val,c
   776  001084  1E44               	comf	printf@val+1,f,c
   777  001086  B0D8               	btfsc	status,0,c
   778  001088  2A44               	incf	printf@val+1,f,c
   779  00108A                     l240:
   780                           
   781                           ;doprnt.c: 1264: }
   782                           ;doprnt.c: 1266: }
   783                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   784  00108A  0E01               	movlw	1
   785  00108C  6E45               	movwf	printf@c,c
   786  00108E                     l1825:
   787  00108E  0E05               	movlw	5
   788  001090  1845               	xorwf	printf@c,w,c
   789  001092  B4D8               	btfsc	status,2,c
   790  001094  D012               	goto	u950
   791                           
   792                           ;doprnt.c: 1306: if(val < dpowers[c])
   793  001096  5045               	movf	printf@c,w,c
   794  001098  0D02               	mullw	2
   795  00109A  0E01               	movlw	low _dpowers
   796  00109C  24F3               	addwf	prodl,w,c
   797  00109E  6EF6               	movwf	tblptrl,c
   798  0010A0  0E10               	movlw	high _dpowers
   799  0010A2  20F4               	addwfc	prodh,w,c
   800  0010A4  6EF7               	movwf	tblptrh,c
   801  0010A6                     	if	0	;There are less than 3 active tblptr bytes
   802  0010A6                     	endif
   803  0010A6  0009               	tblrd		*+
   804  0010A8  50F5               	movf	tablat,w,c
   805  0010AA  5C43               	subwf	printf@val,w,c
   806  0010AC  0009               	tblrd		*+
   807  0010AE  50F5               	movf	tablat,w,c
   808  0010B0  5844               	subwfb	printf@val+1,w,c
   809  0010B2  A0D8               	btfss	status,0,c
   810  0010B4  D002               	goto	u950
   811                           
   812                           ;doprnt.c: 1307: break;
   813  0010B6  2A45               	incf	printf@c,f,c
   814  0010B8  D7EA               	goto	l1825
   815  0010BA                     u950:
   816                           
   817                           ;doprnt.c: 1422: {
   818                           ;doprnt.c: 1438: if(flag & 0x03)
   819  0010BA  C041  F03E         	movff	printf@flag,??_printf
   820  0010BE  0E03               	movlw	3
   821  0010C0  163E               	andwf	??_printf,f,c
   822  0010C2  B4D8               	btfsc	status,2,c
   823  0010C4  D003               	goto	l244
   824                           
   825                           ;doprnt.c: 1439: (putch('-') );
   826  0010C6  0E2D               	movlw	45
   827  0010C8  EC92  F00B         	call	_putch
   828  0010CC                     l244:
   829                           
   830                           ;doprnt.c: 1469: }
   831                           ;doprnt.c: 1472: prec = c;
   832  0010CC  C045  F042         	movff	printf@c,printf@prec
   833                           
   834                           ;doprnt.c: 1474: while(prec--) {
   835  0010D0  D024               	goto	l245
   836  0010D2                     
   837                           ;doprnt.c: 1478: {
   838                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   839  0010D2  5042               	movf	printf@prec,w,c
   840  0010D4  0D02               	mullw	2
   841  0010D6  0E01               	movlw	low _dpowers
   842  0010D8  24F3               	addwf	prodl,w,c
   843  0010DA  6EF6               	movwf	tblptrl,c
   844  0010DC  0E10               	movlw	high _dpowers
   845  0010DE  20F4               	addwfc	prodh,w,c
   846  0010E0  6EF7               	movwf	tblptrh,c
   847  0010E2                     	if	0	;There are less than 3 active tblptr bytes
   848  0010E2                     	endif
   849  0010E2  0009               	tblrd		*+
   850  0010E4  CFF5 F030          	movff	tablat,___lwdiv@divisor
   851  0010E8  000A               	tblrd		*-
   852  0010EA  CFF5 F031          	movff	tablat,___lwdiv@divisor+1
   853  0010EE  C043  F02E         	movff	printf@val,___lwdiv@dividend
   854  0010F2  C044  F02F         	movff	printf@val+1,___lwdiv@dividend+1
   855  0010F6  EC73  F00A         	call	___lwdiv	;wreg free
   856  0010FA  C02E  F035         	movff	?___lwdiv,___lwmod@dividend
   857  0010FE  C02F  F036         	movff	?___lwdiv+1,___lwmod@dividend+1
   858  001102  0E00               	movlw	0
   859  001104  6E38               	movwf	___lwmod@divisor+1,c
   860  001106  0E0A               	movlw	10
   861  001108  6E37               	movwf	___lwmod@divisor,c
   862  00110A  EC11  F00B         	call	___lwmod	;wreg free
   863  00110E  5035               	movf	?___lwmod,w,c
   864  001110  0F30               	addlw	48
   865  001112  6E45               	movwf	printf@c,c
   866                           
   867                           ;doprnt.c: 1523: }
   868                           ;doprnt.c: 1524: (putch(c) );
   869  001114  5045               	movf	printf@c,w,c
   870  001116  EC92  F00B         	call	_putch
   871  00111A                     l245:
   872  00111A  0642               	decf	printf@prec,f,c
   873  00111C  2842               	incf	printf@prec,w,c
   874  00111E  A4D8               	btfss	status,2,c
   875  001120  D7D8               	goto	l246
   876  001122                     u970:
   877  001122  C03A  FFF6         	movff	printf@f,tblptrl
   878  001126  C03B  FFF7         	movff	printf@f+1,tblptrh
   879  00112A  4A3A               	infsnz	printf@f,f,c
   880  00112C  2A3B               	incf	printf@f+1,f,c
   881  00112E                     	if	0	;tblptru may be non-zero
   882  00112E                     	endif
   883  00112E                     	if	0	;tblptru may be non-zero
   884  00112E                     	endif
   885  00112E  0008               	tblrd		*
   886  001130  CFF5 F045          	movff	tablat,printf@c
   887  001134  5045               	movf	printf@c,w,c
   888  001136  B4D8               	btfsc	status,2,c
   889  001138  0012               	return	
   890  00113A  D776               	goto	l231
   891  00113C                     __end_of_printf:
   892                           	opt stack 0
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           prodh	equ	0xFF4
   898                           prodl	equ	0xFF3
   899                           intcon	equ	0xFF2
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postinc2	equ	0xFDE
   903                           postdec2	equ	0xFDD
   904                           fsr2h	equ	0xFDA
   905                           fsr2l	equ	0xFD9
   906                           status	equ	0xFD8
   907                           
   908 ;; *************** function _putch *****************
   909 ;; Defined at:
   910 ;;		line 24 in file "lcd.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;  data            1    wreg     unsigned char 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  data            1   47[COMRAM] unsigned char 
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, status,2, status,0, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   928 ;;Total ram usage:        1 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    5
   931 ;; This function calls:
   932 ;;		_lcdNibble
   933 ;; This function is called by:
   934 ;;		_printf
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text2
   939  001724                     __ptext2:
   940                           	opt stack 0
   941  001724                     _putch:
   942                           	opt stack 24
   943                           
   944                           ;incstack = 0
   945                           ;putch@data stored from wreg
   946  001724  6E30               	movwf	putch@data,c
   947                           
   948                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   949  001726  848C               	bsf	3980,2,c	;volatile
   950                           
   951                           ;lcd.c: 33: lcdNibble(data);
   952  001728  5030               	movf	putch@data,w,c
   953  00172A  ECF5  F009         	call	_lcdNibble
   954                           
   955                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
   956  00172E  0EA0               	movlw	160
   957  001730                     u1087:
   958  001730  D000               	nop2	
   959  001732  2EE8               	decfsz	wreg,f,c
   960  001734  D7FD               	bra	u1087
   961  001736  0012               	return		;funcret
   962  001738                     __end_of_putch:
   963                           	opt stack 0
   964                           tblptru	equ	0xFF8
   965                           tblptrh	equ	0xFF7
   966                           tblptrl	equ	0xFF6
   967                           tablat	equ	0xFF5
   968                           prodh	equ	0xFF4
   969                           prodl	equ	0xFF3
   970                           intcon	equ	0xFF2
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           postinc2	equ	0xFDE
   974                           postdec2	equ	0xFDD
   975                           fsr2h	equ	0xFDA
   976                           fsr2l	equ	0xFD9
   977                           status	equ	0xFD8
   978                           
   979 ;; *************** function ___lwmod *****************
   980 ;; Defined at:
   981 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;  dividend        2   52[COMRAM] unsigned int 
   984 ;;  divisor         2   54[COMRAM] unsigned int 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  counter         1   56[COMRAM] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  2   52[COMRAM] unsigned int 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   996 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   999 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1000 ;;Total ram usage:        5 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; Hardware stack levels required when called:    4
  1003 ;; This function calls:
  1004 ;;		Nothing
  1005 ;; This function is called by:
  1006 ;;		_printf
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text3
  1011  001622                     __ptext3:
  1012                           	opt stack 0
  1013  001622                     ___lwmod:
  1014                           	opt stack 25
  1015                           
  1016                           ;incstack = 0
  1017  001622  5037               	movf	___lwmod@divisor,w,c
  1018  001624  1038               	iorwf	___lwmod@divisor+1,w,c
  1019  001626  B4D8               	btfsc	status,2,c
  1020  001628  D018               	goto	l668
  1021  00162A  0E01               	movlw	1
  1022  00162C  6E39               	movwf	___lwmod@counter,c
  1023  00162E  D004               	goto	l663
  1024  001630  90D8               	bcf	status,0,c
  1025  001632  3637               	rlcf	___lwmod@divisor,f,c
  1026  001634  3638               	rlcf	___lwmod@divisor+1,f,c
  1027  001636  2A39               	incf	___lwmod@counter,f,c
  1028  001638                     l663:
  1029  001638  AE38               	btfss	___lwmod@divisor+1,7,c
  1030  00163A  D7FA               	goto	l664
  1031  00163C                     u890:
  1032  00163C  5037               	movf	___lwmod@divisor,w,c
  1033  00163E  5C35               	subwf	___lwmod@dividend,w,c
  1034  001640  5038               	movf	___lwmod@divisor+1,w,c
  1035  001642  5836               	subwfb	___lwmod@dividend+1,w,c
  1036  001644  A0D8               	btfss	status,0,c
  1037  001646  D004               	goto	l667
  1038  001648  5037               	movf	___lwmod@divisor,w,c
  1039  00164A  5E35               	subwf	___lwmod@dividend,f,c
  1040  00164C  5038               	movf	___lwmod@divisor+1,w,c
  1041  00164E  5A36               	subwfb	___lwmod@dividend+1,f,c
  1042  001650                     l667:
  1043  001650  90D8               	bcf	status,0,c
  1044  001652  3238               	rrcf	___lwmod@divisor+1,f,c
  1045  001654  3237               	rrcf	___lwmod@divisor,f,c
  1046  001656  2E39               	decfsz	___lwmod@counter,f,c
  1047  001658  D7F1               	goto	u890
  1048  00165A                     l668:
  1049  00165A  C035  F035         	movff	___lwmod@dividend,?___lwmod
  1050  00165E  C036  F036         	movff	___lwmod@dividend+1,?___lwmod+1
  1051  001662  0012               	return		;funcret
  1052  001664                     __end_of___lwmod:
  1053                           	opt stack 0
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           prodh	equ	0xFF4
  1059                           prodl	equ	0xFF3
  1060                           intcon	equ	0xFF2
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           postinc2	equ	0xFDE
  1064                           postdec2	equ	0xFDD
  1065                           fsr2h	equ	0xFDA
  1066                           fsr2l	equ	0xFD9
  1067                           status	equ	0xFD8
  1068                           
  1069 ;; *************** function ___lwdiv *****************
  1070 ;; Defined at:
  1071 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  dividend        2   45[COMRAM] unsigned int 
  1074 ;;  divisor         2   47[COMRAM] unsigned int 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  quotient        2   50[COMRAM] unsigned int 
  1077 ;;  counter         1   49[COMRAM] unsigned char 
  1078 ;; Return value:  Size  Location     Type
  1079 ;;                  2   45[COMRAM] unsigned int 
  1080 ;; Registers used:
  1081 ;;		wreg, status,2, status,0
  1082 ;; Tracked objects:
  1083 ;;		On entry : 0/0
  1084 ;;		On exit  : 0/0
  1085 ;;		Unchanged: 0/0
  1086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1087 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;Total ram usage:        7 bytes
  1092 ;; Hardware stack levels used:    1
  1093 ;; Hardware stack levels required when called:    4
  1094 ;; This function calls:
  1095 ;;		Nothing
  1096 ;; This function is called by:
  1097 ;;		_printf
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text4
  1102  0014E6                     __ptext4:
  1103                           	opt stack 0
  1104  0014E6                     ___lwdiv:
  1105                           	opt stack 25
  1106                           
  1107                           ;incstack = 0
  1108  0014E6  0E00               	movlw	0
  1109  0014E8  6E34               	movwf	___lwdiv@quotient+1,c
  1110  0014EA  0E00               	movlw	0
  1111  0014EC  6E33               	movwf	___lwdiv@quotient,c
  1112  0014EE  5030               	movf	___lwdiv@divisor,w,c
  1113  0014F0  1031               	iorwf	___lwdiv@divisor+1,w,c
  1114  0014F2  B4D8               	btfsc	status,2,c
  1115  0014F4  D01C               	goto	l658
  1116  0014F6  0E01               	movlw	1
  1117  0014F8  6E32               	movwf	___lwdiv@counter,c
  1118  0014FA  D004               	goto	l653
  1119  0014FC  90D8               	bcf	status,0,c
  1120  0014FE  3630               	rlcf	___lwdiv@divisor,f,c
  1121  001500  3631               	rlcf	___lwdiv@divisor+1,f,c
  1122  001502  2A32               	incf	___lwdiv@counter,f,c
  1123  001504                     l653:
  1124  001504  AE31               	btfss	___lwdiv@divisor+1,7,c
  1125  001506  D7FA               	goto	l654
  1126  001508                     u860:
  1127  001508  90D8               	bcf	status,0,c
  1128  00150A  3633               	rlcf	___lwdiv@quotient,f,c
  1129  00150C  3634               	rlcf	___lwdiv@quotient+1,f,c
  1130  00150E  5030               	movf	___lwdiv@divisor,w,c
  1131  001510  5C2E               	subwf	___lwdiv@dividend,w,c
  1132  001512  5031               	movf	___lwdiv@divisor+1,w,c
  1133  001514  582F               	subwfb	___lwdiv@dividend+1,w,c
  1134  001516  A0D8               	btfss	status,0,c
  1135  001518  D005               	goto	l657
  1136  00151A  5030               	movf	___lwdiv@divisor,w,c
  1137  00151C  5E2E               	subwf	___lwdiv@dividend,f,c
  1138  00151E  5031               	movf	___lwdiv@divisor+1,w,c
  1139  001520  5A2F               	subwfb	___lwdiv@dividend+1,f,c
  1140  001522  8033               	bsf	___lwdiv@quotient,0,c
  1141  001524                     l657:
  1142  001524  90D8               	bcf	status,0,c
  1143  001526  3231               	rrcf	___lwdiv@divisor+1,f,c
  1144  001528  3230               	rrcf	___lwdiv@divisor,f,c
  1145  00152A  2E32               	decfsz	___lwdiv@counter,f,c
  1146  00152C  D7ED               	goto	u860
  1147  00152E                     l658:
  1148  00152E  C033  F02E         	movff	___lwdiv@quotient,?___lwdiv
  1149  001532  C034  F02F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1150  001536  0012               	return		;funcret
  1151  001538                     __end_of___lwdiv:
  1152                           	opt stack 0
  1153                           tblptru	equ	0xFF8
  1154                           tblptrh	equ	0xFF7
  1155                           tblptrl	equ	0xFF6
  1156                           tablat	equ	0xFF5
  1157                           prodh	equ	0xFF4
  1158                           prodl	equ	0xFF3
  1159                           intcon	equ	0xFF2
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           postinc2	equ	0xFDE
  1163                           postdec2	equ	0xFDD
  1164                           fsr2h	equ	0xFDA
  1165                           fsr2l	equ	0xFD9
  1166                           status	equ	0xFD8
  1167                           
  1168 ;; *************** function _initLCD *****************
  1169 ;; Defined at:
  1170 ;;		line 60 in file "lcd.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;		None
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;		None
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg, status,2, status,0, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;Total ram usage:        1 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; Hardware stack levels required when called:    6
  1191 ;; This function calls:
  1192 ;;		_lcdInst
  1193 ;; This function is called by:
  1194 ;;		_main
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text5
  1199  00158A                     __ptext5:
  1200                           	opt stack 0
  1201  00158A                     _initLCD:
  1202                           	opt stack 24
  1203                           
  1204                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1205                           
  1206                           ;incstack = 0
  1207  00158A  0E9C               	movlw	156
  1208  00158C  6E31               	movwf	??_initLCD& (0+255),c
  1209  00158E  0ED7               	movlw	215
  1210  001590                     u1097:
  1211  001590  2EE8               	decfsz	wreg,f,c
  1212  001592  D7FE               	bra	u1097
  1213  001594  2E31               	decfsz	??_initLCD& (0+255),f,c
  1214  001596  D7FC               	bra	u1097
  1215  001598  F000               	nop	
  1216                           
  1217                           ;lcd.c: 69: lcdInst(0b00110011);
  1218  00159A  0E33               	movlw	51
  1219  00159C  EC9C  F00B         	call	_lcdInst
  1220                           
  1221                           ;lcd.c: 70: lcdInst(0b00110010);
  1222  0015A0  0E32               	movlw	50
  1223  0015A2  EC9C  F00B         	call	_lcdInst
  1224                           
  1225                           ;lcd.c: 71: lcdInst(0b00101000);
  1226  0015A6  0E28               	movlw	40
  1227  0015A8  EC9C  F00B         	call	_lcdInst
  1228                           
  1229                           ;lcd.c: 72: lcdInst(0b00001111);
  1230  0015AC  0E0F               	movlw	15
  1231  0015AE  EC9C  F00B         	call	_lcdInst
  1232                           
  1233                           ;lcd.c: 73: lcdInst(0b00000110);
  1234  0015B2  0E06               	movlw	6
  1235  0015B4  EC9C  F00B         	call	_lcdInst
  1236                           
  1237                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1238  0015B8  0E01               	movlw	1
  1239  0015BA  EC9C  F00B         	call	_lcdInst
  1240  0015BE  0E9C               	movlw	156
  1241  0015C0  6E31               	movwf	??_initLCD& (0+255),c
  1242  0015C2  0ED7               	movlw	215
  1243  0015C4                     u1107:
  1244  0015C4  2EE8               	decfsz	wreg,f,c
  1245  0015C6  D7FE               	bra	u1107
  1246  0015C8  2E31               	decfsz	??_initLCD& (0+255),f,c
  1247  0015CA  D7FC               	bra	u1107
  1248  0015CC  F000               	nop	
  1249                           
  1250                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1251  0015CE  0E0F               	movlw	15
  1252  0015D0  EC9C  F00B         	call	_lcdInst
  1253  0015D4  0012               	return		;funcret
  1254  0015D6                     __end_of_initLCD:
  1255                           	opt stack 0
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           prodh	equ	0xFF4
  1261                           prodl	equ	0xFF3
  1262                           intcon	equ	0xFF2
  1263                           postinc0	equ	0xFEE
  1264                           wreg	equ	0xFE8
  1265                           postinc2	equ	0xFDE
  1266                           postdec2	equ	0xFDD
  1267                           fsr2h	equ	0xFDA
  1268                           fsr2l	equ	0xFD9
  1269                           status	equ	0xFD8
  1270                           
  1271 ;; *************** function _lcdInst *****************
  1272 ;; Defined at:
  1273 ;;		line 11 in file "lcd.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;  data            1    wreg     unsigned char 
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  data            1   47[COMRAM] unsigned char 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      void 
  1280 ;; Registers used:
  1281 ;;		wreg, status,2, status,0, cstack
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;Total ram usage:        1 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    5
  1294 ;; This function calls:
  1295 ;;		_lcdNibble
  1296 ;; This function is called by:
  1297 ;;		_initLCD
  1298 ;;		_main
  1299 ;;		_lcd_set_cursor
  1300 ;;		_lcd_shift_cursor
  1301 ;;		_lcd_shift_display
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           	psect	text6
  1306  001738                     __ptext6:
  1307                           	opt stack 0
  1308  001738                     _lcdInst:
  1309                           	opt stack 25
  1310                           
  1311                           ;incstack = 0
  1312                           ;lcdInst@data stored from wreg
  1313  001738  6E30               	movwf	lcdInst@data,c
  1314                           
  1315                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1316  00173A  948C               	bcf	3980,2,c	;volatile
  1317                           
  1318                           ;lcd.c: 20: lcdNibble(data);
  1319  00173C  5030               	movf	lcdInst@data,w,c
  1320  00173E  ECF5  F009         	call	_lcdNibble
  1321                           
  1322                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1323  001742  0EA0               	movlw	160
  1324  001744                     u1117:
  1325  001744  D000               	nop2	
  1326  001746  2EE8               	decfsz	wreg,f,c
  1327  001748  D7FD               	bra	u1117
  1328  00174A  0012               	return		;funcret
  1329  00174C                     __end_of_lcdInst:
  1330                           	opt stack 0
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           prodh	equ	0xFF4
  1336                           prodl	equ	0xFF3
  1337                           intcon	equ	0xFF2
  1338                           postinc0	equ	0xFEE
  1339                           wreg	equ	0xFE8
  1340                           postinc2	equ	0xFDE
  1341                           postdec2	equ	0xFDD
  1342                           fsr2h	equ	0xFDA
  1343                           fsr2l	equ	0xFD9
  1344                           status	equ	0xFD8
  1345                           
  1346 ;; *************** function _lcdNibble *****************
  1347 ;; Defined at:
  1348 ;;		line 37 in file "lcd.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;  data            1    wreg     unsigned char 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  data            1   46[COMRAM] unsigned char 
  1353 ;;  temp            1   45[COMRAM] unsigned char 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, status,2, status,0
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;Total ram usage:        2 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    4
  1370 ;; This function calls:
  1371 ;;		Nothing
  1372 ;; This function is called by:
  1373 ;;		_lcdInst
  1374 ;;		_putch
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text7
  1379  0013EA                     __ptext7:
  1380                           	opt stack 0
  1381  0013EA                     _lcdNibble:
  1382                           	opt stack 24
  1383                           
  1384                           ;incstack = 0
  1385                           ;lcdNibble@data stored from wreg
  1386  0013EA  6E2F               	movwf	lcdNibble@data,c
  1387                           
  1388                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1389  0013EC  502F               	movf	lcdNibble@data,w,c
  1390  0013EE  0BF0               	andlw	240
  1391  0013F0  6E2E               	movwf	lcdNibble@temp,c
  1392                           
  1393                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1394  0013F2  508C               	movf	3980,w,c	;volatile
  1395  0013F4  0B0F               	andlw	15
  1396  0013F6  6E8C               	movwf	3980,c	;volatile
  1397                           
  1398                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1399  0013F8  502E               	movf	lcdNibble@temp,w,c
  1400  0013FA  108C               	iorwf	3980,w,c	;volatile
  1401  0013FC  6E8C               	movwf	3980,c	;volatile
  1402                           
  1403                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1404  0013FE  0E00               	movlw	0
  1405  001400  BEF2               	btfsc	intcon,7,c	;volatile
  1406  001402  0E01               	movlw	1
  1407  001404  6E50               	movwf	_LCDinterruptState,c
  1408  001406  9EF2               	bcf	intcon,7,c	;volatile
  1409  001408  868C               	bsf	3980,3,c	;volatile
  1410  00140A  0E42               	movlw	66
  1411  00140C                     u1127:
  1412  00140C  2EE8               	decfsz	wreg,f,c
  1413  00140E  D7FE               	bra	u1127
  1414  001410  D000               	nop2	
  1415  001412  968C               	bcf	3980,3,c	;volatile
  1416  001414  0EA0               	movlw	160
  1417  001416                     u1137:
  1418  001416  D000               	nop2	
  1419  001418  2EE8               	decfsz	wreg,f,c
  1420  00141A  D7FD               	bra	u1137
  1421  00141C  B050               	btfsc	_LCDinterruptState,0,c
  1422  00141E  D002               	bra	u815
  1423  001420  9EF2               	bcf	intcon,7,c	;volatile
  1424  001422  D001               	bra	u816
  1425  001424                     u815:
  1426  001424  8EF2               	bsf	intcon,7,c	;volatile
  1427  001426                     u816:
  1428                           
  1429                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1430  001426  382F               	swapf	lcdNibble@data,w,c
  1431  001428  0BF0               	andlw	240
  1432  00142A  6E2F               	movwf	lcdNibble@data,c
  1433                           
  1434                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1435  00142C  502F               	movf	lcdNibble@data,w,c
  1436  00142E  0BF0               	andlw	240
  1437  001430  6E2E               	movwf	lcdNibble@temp,c
  1438                           
  1439                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1440  001432  508C               	movf	3980,w,c	;volatile
  1441  001434  0B0F               	andlw	15
  1442  001436  6E8C               	movwf	3980,c	;volatile
  1443                           
  1444                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1445  001438  502E               	movf	lcdNibble@temp,w,c
  1446  00143A  108C               	iorwf	3980,w,c	;volatile
  1447  00143C  6E8C               	movwf	3980,c	;volatile
  1448                           
  1449                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1450  00143E  0E00               	movlw	0
  1451  001440  BEF2               	btfsc	intcon,7,c	;volatile
  1452  001442  0E01               	movlw	1
  1453  001444  6E50               	movwf	_LCDinterruptState,c
  1454  001446  9EF2               	bcf	intcon,7,c	;volatile
  1455  001448  868C               	bsf	3980,3,c	;volatile
  1456  00144A  0E42               	movlw	66
  1457  00144C                     u1147:
  1458  00144C  2EE8               	decfsz	wreg,f,c
  1459  00144E  D7FE               	bra	u1147
  1460  001450  D000               	nop2	
  1461  001452  968C               	bcf	3980,3,c	;volatile
  1462  001454  0EA0               	movlw	160
  1463  001456                     u1157:
  1464  001456  D000               	nop2	
  1465  001458  2EE8               	decfsz	wreg,f,c
  1466  00145A  D7FD               	bra	u1157
  1467  00145C  B050               	btfsc	_LCDinterruptState,0,c
  1468  00145E  D002               	bra	u825
  1469  001460  9EF2               	bcf	intcon,7,c	;volatile
  1470  001462  D001               	bra	u826
  1471  001464                     u825:
  1472  001464  8EF2               	bsf	intcon,7,c	;volatile
  1473  001466                     u826:
  1474  001466  0012               	return		;funcret
  1475  001468                     __end_of_lcdNibble:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           prodh	equ	0xFF4
  1482                           prodl	equ	0xFF3
  1483                           intcon	equ	0xFF2
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postinc2	equ	0xFDE
  1487                           postdec2	equ	0xFDD
  1488                           fsr2h	equ	0xFDA
  1489                           fsr2l	equ	0xFD9
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function _I2C_sendData *****************
  1493 ;; Defined at:
  1494 ;;		line 194 in file "main.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  char_data       1    wreg     unsigned char 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  char_data       1   48[COMRAM] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2, status,0, cstack
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;Total ram usage:        1 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    6
  1515 ;; This function calls:
  1516 ;;		_I2C_Master_Start
  1517 ;;		_I2C_Master_Stop
  1518 ;;		_I2C_Master_Write
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text8
  1525  0016D0                     __ptext8:
  1526                           	opt stack 0
  1527  0016D0                     _I2C_sendData:
  1528                           	opt stack 24
  1529                           
  1530                           ;incstack = 0
  1531                           ;I2C_sendData@char_data stored from wreg
  1532  0016D0  6E31               	movwf	I2C_sendData@char_data,c
  1533                           
  1534                           ;main.c: 195: I2C_Master_Start();
  1535  0016D2  ECCC  F00B         	call	_I2C_Master_Start	;wreg free
  1536                           
  1537                           ;main.c: 196: I2C_Master_Write(0b00010000);
  1538  0016D6  0E00               	movlw	0
  1539  0016D8  6E30               	movwf	I2C_Master_Write@byteToWrite+1,c
  1540  0016DA  0E10               	movlw	16
  1541  0016DC  6E2F               	movwf	I2C_Master_Write@byteToWrite,c
  1542  0016DE  ECC3  F00B         	call	_I2C_Master_Write	;wreg free
  1543                           
  1544                           ;main.c: 197: I2C_Master_Write(char_data);
  1545  0016E2  C031  F02F         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  1546  0016E6  6A30               	clrf	I2C_Master_Write@byteToWrite+1,c
  1547  0016E8  ECC3  F00B         	call	_I2C_Master_Write	;wreg free
  1548                           
  1549                           ;main.c: 198: I2C_Master_Stop();
  1550  0016EC  ECC8  F00B         	call	_I2C_Master_Stop	;wreg free
  1551  0016F0  0012               	return		;funcret
  1552  0016F2                     __end_of_I2C_sendData:
  1553                           	opt stack 0
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           prodh	equ	0xFF4
  1559                           prodl	equ	0xFF3
  1560                           intcon	equ	0xFF2
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           postinc2	equ	0xFDE
  1564                           postdec2	equ	0xFDD
  1565                           fsr2h	equ	0xFDA
  1566                           fsr2l	equ	0xFD9
  1567                           status	equ	0xFD8
  1568                           
  1569 ;; *************** function _I2C_init *****************
  1570 ;; Defined at:
  1571 ;;		line 188 in file "main.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;		None
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;		None
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, status,2, status,0, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;Total ram usage:        0 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    6
  1592 ;; This function calls:
  1593 ;;		_I2C_Master_Init
  1594 ;;		_I2C_Master_Start
  1595 ;;		_I2C_Master_Stop
  1596 ;;		_I2C_Master_Write
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text9
  1603  0016A6                     __ptext9:
  1604                           	opt stack 0
  1605  0016A6                     _I2C_init:
  1606                           	opt stack 24
  1607                           
  1608                           ;main.c: 189: I2C_Master_Init(100000);
  1609                           
  1610                           ;incstack = 0
  1611  0016A6  0EA0               	movlw	160
  1612  0016A8  6E2E               	movwf	I2C_Master_Init@clockFreq,c
  1613  0016AA  0E86               	movlw	134
  1614  0016AC  6E2F               	movwf	I2C_Master_Init@clockFreq+1,c
  1615  0016AE  0E01               	movlw	1
  1616  0016B0  6E30               	movwf	I2C_Master_Init@clockFreq+2,c
  1617  0016B2  0E00               	movlw	0
  1618  0016B4  6E31               	movwf	I2C_Master_Init@clockFreq+3,c
  1619  0016B6  EC86  F00B         	call	_I2C_Master_Init	;wreg free
  1620                           
  1621                           ;main.c: 190: I2C_Master_Start();
  1622  0016BA  ECCC  F00B         	call	_I2C_Master_Start	;wreg free
  1623                           
  1624                           ;main.c: 191: I2C_Master_Write(0b00010000);
  1625  0016BE  0E00               	movlw	0
  1626  0016C0  6E30               	movwf	I2C_Master_Write@byteToWrite+1,c
  1627  0016C2  0E10               	movlw	16
  1628  0016C4  6E2F               	movwf	I2C_Master_Write@byteToWrite,c
  1629  0016C6  ECC3  F00B         	call	_I2C_Master_Write	;wreg free
  1630                           
  1631                           ;main.c: 192: I2C_Master_Stop();
  1632  0016CA  ECC8  F00B         	call	_I2C_Master_Stop	;wreg free
  1633  0016CE  0012               	return		;funcret
  1634  0016D0                     __end_of_I2C_init:
  1635                           	opt stack 0
  1636                           tblptru	equ	0xFF8
  1637                           tblptrh	equ	0xFF7
  1638                           tblptrl	equ	0xFF6
  1639                           tablat	equ	0xFF5
  1640                           prodh	equ	0xFF4
  1641                           prodl	equ	0xFF3
  1642                           intcon	equ	0xFF2
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           postinc2	equ	0xFDE
  1646                           postdec2	equ	0xFDD
  1647                           fsr2h	equ	0xFDA
  1648                           fsr2l	equ	0xFD9
  1649                           status	equ	0xFD8
  1650                           
  1651 ;; *************** function _I2C_Master_Write *****************
  1652 ;; Defined at:
  1653 ;;		line 109 in file "I2C.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  byteToWrite     2   46[COMRAM] unsigned int 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;		None
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      void 
  1660 ;; Registers used:
  1661 ;;		wreg, status,2, status,0, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1667 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;Total ram usage:        2 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    5
  1674 ;; This function calls:
  1675 ;;		_I2C_Master_Wait
  1676 ;; This function is called by:
  1677 ;;		_I2C_init
  1678 ;;		_I2C_sendData
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text10
  1683  001786                     __ptext10:
  1684                           	opt stack 0
  1685  001786                     _I2C_Master_Write:
  1686                           	opt stack 24
  1687                           
  1688                           ;I2C.c: 117: I2C_Master_Wait();
  1689                           
  1690                           ;incstack = 0
  1691  001786  ECBA  F00B         	call	_I2C_Master_Wait	;wreg free
  1692                           
  1693                           ;I2C.c: 118: SSPBUF = byteToWrite;
  1694  00178A  C02F  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1695  00178E  0012               	return		;funcret
  1696  001790                     __end_of_I2C_Master_Write:
  1697                           	opt stack 0
  1698                           tblptru	equ	0xFF8
  1699                           tblptrh	equ	0xFF7
  1700                           tblptrl	equ	0xFF6
  1701                           tablat	equ	0xFF5
  1702                           prodh	equ	0xFF4
  1703                           prodl	equ	0xFF3
  1704                           intcon	equ	0xFF2
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postinc2	equ	0xFDE
  1708                           postdec2	equ	0xFDD
  1709                           fsr2h	equ	0xFDA
  1710                           fsr2l	equ	0xFD9
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _I2C_Master_Stop *****************
  1714 ;; Defined at:
  1715 ;;		line 96 in file "I2C.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;		None
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, status,0, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;Total ram usage:        0 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    5
  1736 ;; This function calls:
  1737 ;;		_I2C_Master_Wait
  1738 ;; This function is called by:
  1739 ;;		_I2C_init
  1740 ;;		_I2C_sendData
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text11
  1745  001790                     __ptext11:
  1746                           	opt stack 0
  1747  001790                     _I2C_Master_Stop:
  1748                           	opt stack 24
  1749                           
  1750                           ;I2C.c: 105: I2C_Master_Wait();
  1751                           
  1752                           ;incstack = 0
  1753  001790  ECBA  F00B         	call	_I2C_Master_Wait	;wreg free
  1754                           
  1755                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  1756  001794  84C5               	bsf	4037,2,c	;volatile
  1757  001796  0012               	return		;funcret
  1758  001798                     __end_of_I2C_Master_Stop:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           prodh	equ	0xFF4
  1765                           prodl	equ	0xFF3
  1766                           intcon	equ	0xFF2
  1767                           postinc0	equ	0xFEE
  1768                           wreg	equ	0xFE8
  1769                           postinc2	equ	0xFDE
  1770                           postdec2	equ	0xFDD
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _I2C_Master_Start *****************
  1776 ;; Defined at:
  1777 ;;		line 70 in file "I2C.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1    wreg      void 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;Total ram usage:        0 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    5
  1798 ;; This function calls:
  1799 ;;		_I2C_Master_Wait
  1800 ;; This function is called by:
  1801 ;;		_I2C_init
  1802 ;;		_I2C_sendData
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text12
  1807  001798                     __ptext12:
  1808                           	opt stack 0
  1809  001798                     _I2C_Master_Start:
  1810                           	opt stack 24
  1811                           
  1812                           ;I2C.c: 79: I2C_Master_Wait();
  1813                           
  1814                           ;incstack = 0
  1815  001798  ECBA  F00B         	call	_I2C_Master_Wait	;wreg free
  1816                           
  1817                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  1818  00179C  80C5               	bsf	4037,0,c	;volatile
  1819  00179E  0012               	return		;funcret
  1820  0017A0                     __end_of_I2C_Master_Start:
  1821                           	opt stack 0
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           intcon	equ	0xFF2
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postinc2	equ	0xFDE
  1832                           postdec2	equ	0xFDD
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _I2C_Master_Wait *****************
  1838 ;; Defined at:
  1839 ;;		line 52 in file "I2C.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		wreg, status,2, status,0
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;Total ram usage:        1 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    4
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		_I2C_Master_Start
  1864 ;;		_I2C_Master_Stop
  1865 ;;		_I2C_Master_Write
  1866 ;;		_I2C_Master_RepeatedStart
  1867 ;;		_I2C_Master_Read
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text13
  1872  001774                     __ptext13:
  1873                           	opt stack 0
  1874  001774                     _I2C_Master_Wait:
  1875                           	opt stack 24
  1876                           
  1877                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1878                           
  1879                           ;incstack = 0
  1880  001774  B4C7               	btfsc	4039,2,c	;volatile
  1881  001776  D7FE               	goto	_I2C_Master_Wait
  1882  001778  CFC5 F02E          	movff	4037,??_I2C_Master_Wait	;volatile
  1883  00177C  0E1F               	movlw	31
  1884  00177E  162E               	andwf	??_I2C_Master_Wait,f,c
  1885  001780  B4D8               	btfsc	status,2,c
  1886  001782  0012               	return	
  1887  001784  D7F7               	goto	_I2C_Master_Wait
  1888  001786                     __end_of_I2C_Master_Wait:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           prodh	equ	0xFF4
  1895                           prodl	equ	0xFF3
  1896                           intcon	equ	0xFF2
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postinc2	equ	0xFDE
  1900                           postdec2	equ	0xFDD
  1901                           fsr2h	equ	0xFDA
  1902                           fsr2l	equ	0xFD9
  1903                           status	equ	0xFD8
  1904                           
  1905 ;; *************** function _I2C_Master_Init *****************
  1906 ;; Defined at:
  1907 ;;		line 14 in file "I2C.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;  clockFreq       4   45[COMRAM] const unsigned long 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;		None
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;Total ram usage:        4 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    4
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_I2C_init
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text14
  1936  00170C                     __ptext14:
  1937                           	opt stack 0
  1938  00170C                     _I2C_Master_Init:
  1939                           	opt stack 25
  1940                           
  1941                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1942                           
  1943                           ;incstack = 0
  1944  00170C  9AC6               	bcf	4038,5,c	;volatile
  1945                           
  1946                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1947  00170E  8694               	bsf	3988,3,c	;volatile
  1948                           
  1949                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1950  001710  8894               	bsf	3988,4,c	;volatile
  1951                           
  1952                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1953  001712  0E80               	movlw	128
  1954  001714  6EC7               	movwf	4039,c	;volatile
  1955                           
  1956                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1957  001716  0E28               	movlw	40
  1958  001718  6EC6               	movwf	4038,c	;volatile
  1959                           
  1960                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1961  00171A  0E00               	movlw	0
  1962  00171C  6EC5               	movwf	4037,c	;volatile
  1963                           
  1964                           ;I2C.c: 49: SSPADD = 9600;
  1965  00171E  0E80               	movlw	128
  1966  001720  6EC8               	movwf	4040,c	;volatile
  1967  001722  0012               	return		;funcret
  1968  001724                     __end_of_I2C_Master_Init:
  1969                           	opt stack 0
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           prodh	equ	0xFF4
  1975                           prodl	equ	0xFF3
  1976                           intcon	equ	0xFF2
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postinc2	equ	0xFDE
  1980                           postdec2	equ	0xFDD
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _interruptHandler *****************
  1986 ;; Defined at:
  1987 ;;		line 117 in file "main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  input           2   43[COMRAM] int 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;Total ram usage:       21 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    3
  2008 ;; This function calls:
  2009 ;;		i2_initLCD
  2010 ;;		i2_lcdInst
  2011 ;;		i2_printf
  2012 ;; This function is called by:
  2013 ;;		Interrupt level 2
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           	psect	intcode
  2018  000008                     __pintcode:
  2019                           	opt stack 0
  2020  000008                     _interruptHandler:
  2021                           	opt stack 24
  2022                           
  2023                           ;incstack = 0
  2024  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2025  00000A  ED2D  F009         	call	int_func,f	;refresh shadow registers
  2026                           tblptru	equ	0xFF8
  2027                           tblptrh	equ	0xFF7
  2028                           tblptrl	equ	0xFF6
  2029                           tablat	equ	0xFF5
  2030                           prodh	equ	0xFF4
  2031                           prodl	equ	0xFF3
  2032                           intcon	equ	0xFF2
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041                           	psect	intcode_body
  2042  00125A                     __pintcode_body:
  2043                           	opt stack 24
  2044  00125A                     int_func:
  2045                           	opt stack 24
  2046  00125A  0006               	pop		; remove dummy address from shadow register refresh
  2047  00125C  CFFA F01A          	movff	pclath,??_interruptHandler+1
  2048  001260  CFFB F01B          	movff	pclatu,??_interruptHandler+2
  2049  001264  CFE9 F01C          	movff	fsr0l,??_interruptHandler+3
  2050  001268  CFEA F01D          	movff	fsr0h,??_interruptHandler+4
  2051  00126C  CFE1 F01E          	movff	fsr1l,??_interruptHandler+5
  2052  001270  CFE2 F01F          	movff	fsr1h,??_interruptHandler+6
  2053  001274  CFD9 F020          	movff	fsr2l,??_interruptHandler+7
  2054  001278  CFDA F021          	movff	fsr2h,??_interruptHandler+8
  2055  00127C  CFF3 F022          	movff	prodl,??_interruptHandler+9
  2056  001280  CFF4 F023          	movff	prodh,??_interruptHandler+10
  2057  001284  CFF6 F024          	movff	tblptrl,??_interruptHandler+11
  2058  001288  CFF7 F025          	movff	tblptrh,??_interruptHandler+12
  2059  00128C  CFF8 F026          	movff	tblptru,??_interruptHandler+13
  2060  001290  CFF5 F027          	movff	tablat,??_interruptHandler+14
  2061  001294  C051  F028         	movff	btemp,??_interruptHandler+15
  2062  001298  C052  F029         	movff	btemp+1,??_interruptHandler+16
  2063  00129C  C053  F02A         	movff	btemp+2,??_interruptHandler+17
  2064  0012A0  C054  F02B         	movff	btemp+3,??_interruptHandler+18
  2065                           
  2066                           ;main.c: 129: if (RBIF){
  2067  0012A4  A0F2               	btfss	intcon,0,c	;volatile
  2068  0012A6  D027               	goto	i2l1665
  2069                           
  2070                           ;main.c: 137: TRISBbits.RB5 = 1;
  2071  0012A8  8A93               	bsf	3987,5,c	;volatile
  2072                           
  2073                           ;main.c: 138: int input = PORTBbits.RB5;
  2074  0012AA  AA81               	btfss	3969,5,c	;volatile
  2075  0012AC  D003               	goto	i2u79_40
  2076  0012AE  6A19               	clrf	??_interruptHandler& (0+255),c
  2077  0012B0  2A19               	incf	??_interruptHandler& (0+255),f,c
  2078  0012B2  D001               	goto	i2u79_48
  2079  0012B4                     i2u79_40:
  2080  0012B4  6A19               	clrf	??_interruptHandler& (0+255),c
  2081  0012B6                     i2u79_48:
  2082  0012B6  5019               	movf	??_interruptHandler,w,c
  2083  0012B8  6E2C               	movwf	interruptHandler@input,c
  2084  0012BA  6A2D               	clrf	interruptHandler@input+1,c
  2085                           
  2086                           ;main.c: 140: if (input == 0){
  2087  0012BC  502C               	movf	interruptHandler@input,w,c
  2088  0012BE  102D               	iorwf	interruptHandler@input+1,w,c
  2089  0012C0  A4D8               	btfss	status,2,c
  2090  0012C2  D018               	goto	i2l166
  2091                           
  2092                           ;main.c: 141: initLCD();
  2093  0012C4  ECEB  F00A         	call	i2_initLCD	;wreg free
  2094                           
  2095                           ;main.c: 142: B_count++;
  2096  0012C8  4A4D               	infsnz	_B_count,f,c
  2097  0012CA  2A4E               	incf	_B_count+1,f,c
  2098                           
  2099                           ;main.c: 143: printf("%d",input);
  2100  0012CC  0E19               	movlw	low (STR_2+8)
  2101  0012CE  6E0D               	movwf	i2printf@f,c
  2102  0012D0  0E10               	movlw	high (STR_2+8)
  2103  0012D2  6E0E               	movwf	i2printf@f+1,c
  2104  0012D4  C02C  F00F         	movff	interruptHandler@input,?i2_printf+2
  2105  0012D8  C02D  F010         	movff	interruptHandler@input+1,?i2_printf+3
  2106  0012DC  EC9E  F008         	call	i2_printf	;wreg free
  2107                           
  2108                           ;main.c: 145: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2109  0012E0  0E80               	movlw	128
  2110  0012E2  ECB0  F00B         	call	i2_lcdInst
  2111  0012E6  0E34               	movlw	52
  2112  0012E8  6E19               	movwf	??_interruptHandler& (0+255),c
  2113  0012EA  0EF2               	movlw	242
  2114  0012EC                     i2u116_47:
  2115  0012EC  2EE8               	decfsz	wreg,f,c
  2116  0012EE  D7FE               	bra	i2u116_47
  2117  0012F0  2E19               	decfsz	??_interruptHandler& (0+255),f,c
  2118  0012F2  D7FC               	bra	i2u116_47
  2119  0012F4                     i2l166:
  2120                           
  2121                           ;main.c: 146: }
  2122                           ;main.c: 161: RBIF = 0;
  2123  0012F4  90F2               	bcf	intcon,0,c	;volatile
  2124  0012F6                     i2l1665:
  2125                           
  2126                           ;main.c: 162: return;
  2127  0012F6  C02B  F054         	movff	??_interruptHandler+18,btemp+3
  2128  0012FA  C02A  F053         	movff	??_interruptHandler+17,btemp+2
  2129  0012FE  C029  F052         	movff	??_interruptHandler+16,btemp+1
  2130  001302  C028  F051         	movff	??_interruptHandler+15,btemp
  2131  001306  C027  FFF5         	movff	??_interruptHandler+14,tablat
  2132  00130A  C026  FFF8         	movff	??_interruptHandler+13,tblptru
  2133  00130E  C025  FFF7         	movff	??_interruptHandler+12,tblptrh
  2134  001312  C024  FFF6         	movff	??_interruptHandler+11,tblptrl
  2135  001316  C023  FFF4         	movff	??_interruptHandler+10,prodh
  2136  00131A  C022  FFF3         	movff	??_interruptHandler+9,prodl
  2137  00131E  C021  FFDA         	movff	??_interruptHandler+8,fsr2h
  2138  001322  C020  FFD9         	movff	??_interruptHandler+7,fsr2l
  2139  001326  C01F  FFE2         	movff	??_interruptHandler+6,fsr1h
  2140  00132A  C01E  FFE1         	movff	??_interruptHandler+5,fsr1l
  2141  00132E  C01D  FFEA         	movff	??_interruptHandler+4,fsr0h
  2142  001332  C01C  FFE9         	movff	??_interruptHandler+3,fsr0l
  2143  001336  C01B  FFFB         	movff	??_interruptHandler+2,pclatu
  2144  00133A  C01A  FFFA         	movff	??_interruptHandler+1,pclath
  2145  00133E  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2146  001340  0011               	retfie		f
  2147  001342                     __end_of_interruptHandler:
  2148                           	opt stack 0
  2149                           pclatu	equ	0xFFB
  2150                           pclath	equ	0xFFA
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           intcon	equ	0xFF2
  2158                           postinc0	equ	0xFEE
  2159                           fsr0h	equ	0xFEA
  2160                           fsr0l	equ	0xFE9
  2161                           wreg	equ	0xFE8
  2162                           fsr1h	equ	0xFE2
  2163                           fsr1l	equ	0xFE1
  2164                           postinc2	equ	0xFDE
  2165                           postdec2	equ	0xFDD
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function i2_printf *****************
  2171 ;; Defined at:
  2172 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2175 ;;		 -> STR_3(3), STR_2(11), STR_1(3), 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  printf          4    0        struct .
  2178 ;;  printf          3    0        PTR const unsigned char 
  2179 ;;  printf          2   21[COMRAM] unsigned int 
  2180 ;;  printf          2   17[COMRAM] PTR void [1]
  2181 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2182 ;;  printf          2    0        unsigned int 
  2183 ;;  printf          1   23[COMRAM] char 
  2184 ;;  printf          1   20[COMRAM] char 
  2185 ;;  printf          1   19[COMRAM] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  2   12[COMRAM] int 
  2188 ;; Registers used:
  2189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;Total ram usage:       12 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    2
  2202 ;; This function calls:
  2203 ;;		i2___lwdiv
  2204 ;;		i2___lwmod
  2205 ;;		i2_putch
  2206 ;; This function is called by:
  2207 ;;		_interruptHandler
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text16
  2212  00113C                     __ptext16:
  2213                           	opt stack 0
  2214  00113C                     i2_printf:
  2215                           	opt stack 24
  2216                           
  2217                           ;doprnt.c: 466: va_list ap;
  2218                           ;doprnt.c: 499: signed char c;
  2219                           ;doprnt.c: 506: signed char prec;
  2220                           ;doprnt.c: 508: unsigned char flag;
  2221                           ;doprnt.c: 523: union {
  2222                           ;doprnt.c: 524: unsigned long vd;
  2223                           ;doprnt.c: 525: double integ;
  2224                           ;doprnt.c: 526: } tmpval;
  2225                           ;doprnt.c: 528: unsigned int val;
  2226                           ;doprnt.c: 529: unsigned len;
  2227                           ;doprnt.c: 530: const char * cp;
  2228                           ;doprnt.c: 533: *ap = __va_start();
  2229                           
  2230                           ;incstack = 0
  2231  00113C  0E0F               	movlw	low (?i2_printf+2)
  2232  00113E  6E12               	movwf	i2printf@ap,c
  2233  001140  0E00               	movlw	high (?i2_printf+2)
  2234  001142  6E13               	movwf	i2printf@ap+1,c
  2235                           
  2236                           ;doprnt.c: 536: while(c = *f++) {
  2237  001144  D07D               	goto	i2u75_40
  2238  001146                     
  2239                           ;doprnt.c: 538: if(c != '%')
  2240  001146  0E25               	movlw	37
  2241  001148  1818               	xorwf	i2printf@c,w,c
  2242  00114A  B4D8               	btfsc	status,2,c
  2243  00114C  D004               	goto	i2l232
  2244                           
  2245                           ;doprnt.c: 540: {
  2246                           ;doprnt.c: 541: (putch(c) );
  2247  00114E  5018               	movf	i2printf@c,w,c
  2248  001150  ECA6  F00B         	call	i2_putch
  2249                           
  2250                           ;doprnt.c: 542: continue;
  2251  001154  D075               	goto	i2u75_40
  2252  001156                     i2l232:
  2253                           
  2254                           ;doprnt.c: 543: }
  2255                           ;doprnt.c: 548: flag = 0;
  2256  001156  0E00               	movlw	0
  2257  001158  6E14               	movwf	i2printf@flag,c
  2258                           
  2259                           ;doprnt.c: 822: }
  2260                           
  2261                           ;doprnt.c: 813: continue;
  2262                           
  2263                           ;doprnt.c: 802: default:
  2264                           
  2265                           ;doprnt.c: 698: case 'i':
  2266                           ;doprnt.c: 699: break;
  2267                           
  2268                           ;doprnt.c: 697: case 'd':
  2269                           
  2270                           ;doprnt.c: 638: goto alldone;
  2271                           
  2272                           ;doprnt.c: 637: case 0:
  2273                           
  2274                           ;doprnt.c: 635: switch(c = *f++) {
  2275  00115A  C00D  FFF6         	movff	i2printf@f,tblptrl
  2276  00115E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2277  001162  4A0D               	infsnz	i2printf@f,f,c
  2278  001164  2A0E               	incf	i2printf@f+1,f,c
  2279  001166                     	if	0	;tblptru may be non-zero
  2280  001166                     	endif
  2281  001166                     	if	0	;tblptru may be non-zero
  2282  001166                     	endif
  2283  001166  0008               	tblrd		*
  2284  001168  CFF5 F018          	movff	tablat,i2printf@c
  2285  00116C  5018               	movf	i2printf@c,w,c
  2286                           
  2287                           ; Switch size 1, requested type "space"
  2288                           ; Number of cases is 3, Range of values is 0 to 105
  2289                           ; switch strategies available:
  2290                           ; Name         Instructions Cycles
  2291                           ; simple_byte           10     6 (average)
  2292                           ;	Chosen strategy is simple_byte
  2293  00116E  0A00               	xorlw	0	; case 0
  2294  001170  B4D8               	btfsc	status,2,c
  2295  001172  0012               	return	
  2296  001174  0A64               	xorlw	100	; case 100
  2297  001176  B4D8               	btfsc	status,2,c
  2298  001178  D003               	goto	i2l238
  2299  00117A  0A0D               	xorlw	13	; case 105
  2300  00117C  A4D8               	btfss	status,2,c
  2301  00117E  D060               	goto	i2u75_40
  2302  001180                     i2l238:
  2303                           
  2304                           ;doprnt.c: 1253: {
  2305                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2306  001180  C012  FFD9         	movff	i2printf@ap,fsr2l
  2307  001184  C013  FFDA         	movff	i2printf@ap+1,fsr2h
  2308  001188  CFDE F016          	movff	postinc2,i2printf@val
  2309  00118C  CFDD F017          	movff	postdec2,i2printf@val+1
  2310  001190  0E02               	movlw	2
  2311  001192  2612               	addwf	i2printf@ap,f,c
  2312  001194  0E00               	movlw	0
  2313  001196  2213               	addwfc	i2printf@ap+1,f,c
  2314                           
  2315                           ;doprnt.c: 1261: if((int)val < 0) {
  2316  001198  AE17               	btfss	i2printf@val+1,7,c
  2317  00119A  D006               	goto	i2l240
  2318                           
  2319                           ;doprnt.c: 1262: flag |= 0x03;
  2320  00119C  0E03               	movlw	3
  2321  00119E  1214               	iorwf	i2printf@flag,f,c
  2322                           
  2323                           ;doprnt.c: 1263: val = -val;
  2324  0011A0  6C16               	negf	i2printf@val,c
  2325  0011A2  1E17               	comf	i2printf@val+1,f,c
  2326  0011A4  B0D8               	btfsc	status,0,c
  2327  0011A6  2A17               	incf	i2printf@val+1,f,c
  2328  0011A8                     i2l240:
  2329                           
  2330                           ;doprnt.c: 1264: }
  2331                           ;doprnt.c: 1266: }
  2332                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2333  0011A8  0E01               	movlw	1
  2334  0011AA  6E18               	movwf	i2printf@c,c
  2335  0011AC                     i2l1575:
  2336  0011AC  0E05               	movlw	5
  2337  0011AE  1818               	xorwf	i2printf@c,w,c
  2338  0011B0  B4D8               	btfsc	status,2,c
  2339  0011B2  D012               	goto	i2u73_40
  2340                           
  2341                           ;doprnt.c: 1306: if(val < dpowers[c])
  2342  0011B4  5018               	movf	i2printf@c,w,c
  2343  0011B6  0D02               	mullw	2
  2344  0011B8  0E01               	movlw	low _dpowers
  2345  0011BA  24F3               	addwf	prodl,w,c
  2346  0011BC  6EF6               	movwf	tblptrl,c
  2347  0011BE  0E10               	movlw	high _dpowers
  2348  0011C0  20F4               	addwfc	prodh,w,c
  2349  0011C2  6EF7               	movwf	tblptrh,c
  2350  0011C4                     	if	0	;There are less than 3 active tblptr bytes
  2351  0011C4                     	endif
  2352  0011C4  0009               	tblrd		*+
  2353  0011C6  50F5               	movf	tablat,w,c
  2354  0011C8  5C16               	subwf	i2printf@val,w,c
  2355  0011CA  0009               	tblrd		*+
  2356  0011CC  50F5               	movf	tablat,w,c
  2357  0011CE  5817               	subwfb	i2printf@val+1,w,c
  2358  0011D0  A0D8               	btfss	status,0,c
  2359  0011D2  D002               	goto	i2u73_40
  2360                           
  2361                           ;doprnt.c: 1307: break;
  2362  0011D4  2A18               	incf	i2printf@c,f,c
  2363  0011D6  D7EA               	goto	i2l1575
  2364  0011D8                     i2u73_40:
  2365                           
  2366                           ;doprnt.c: 1422: {
  2367                           ;doprnt.c: 1438: if(flag & 0x03)
  2368  0011D8  C014  F011         	movff	i2printf@flag,??i2_printf
  2369  0011DC  0E03               	movlw	3
  2370  0011DE  1611               	andwf	??i2_printf,f,c
  2371  0011E0  B4D8               	btfsc	status,2,c
  2372  0011E2  D003               	goto	i2l244
  2373                           
  2374                           ;doprnt.c: 1439: (putch('-') );
  2375  0011E4  0E2D               	movlw	45
  2376  0011E6  ECA6  F00B         	call	i2_putch
  2377  0011EA                     i2l244:
  2378                           
  2379                           ;doprnt.c: 1469: }
  2380                           ;doprnt.c: 1472: prec = c;
  2381  0011EA  C018  F015         	movff	i2printf@c,i2printf@prec
  2382                           
  2383                           ;doprnt.c: 1474: while(prec--) {
  2384  0011EE  D024               	goto	i2l245
  2385  0011F0                     
  2386                           ;doprnt.c: 1478: {
  2387                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2388  0011F0  5015               	movf	i2printf@prec,w,c
  2389  0011F2  0D02               	mullw	2
  2390  0011F4  0E01               	movlw	low _dpowers
  2391  0011F6  24F3               	addwf	prodl,w,c
  2392  0011F8  6EF6               	movwf	tblptrl,c
  2393  0011FA  0E10               	movlw	high _dpowers
  2394  0011FC  20F4               	addwfc	prodh,w,c
  2395  0011FE  6EF7               	movwf	tblptrh,c
  2396  001200                     	if	0	;There are less than 3 active tblptr bytes
  2397  001200                     	endif
  2398  001200  0009               	tblrd		*+
  2399  001202  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2400  001206  000A               	tblrd		*-
  2401  001208  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2402  00120C  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2403  001210  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2404  001214  EC9C  F00A         	call	i2___lwdiv	;wreg free
  2405  001218  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2406  00121C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2407  001220  0E00               	movlw	0
  2408  001222  6E0B               	movwf	i2___lwmod@divisor+1,c
  2409  001224  0E0A               	movlw	10
  2410  001226  6E0A               	movwf	i2___lwmod@divisor,c
  2411  001228  EC32  F00B         	call	i2___lwmod	;wreg free
  2412  00122C  5008               	movf	?i2___lwmod,w,c
  2413  00122E  0F30               	addlw	48
  2414  001230  6E18               	movwf	i2printf@c,c
  2415                           
  2416                           ;doprnt.c: 1523: }
  2417                           ;doprnt.c: 1524: (putch(c) );
  2418  001232  5018               	movf	i2printf@c,w,c
  2419  001234  ECA6  F00B         	call	i2_putch
  2420  001238                     i2l245:
  2421  001238  0615               	decf	i2printf@prec,f,c
  2422  00123A  2815               	incf	i2printf@prec,w,c
  2423  00123C  A4D8               	btfss	status,2,c
  2424  00123E  D7D8               	goto	i2l246
  2425  001240                     i2u75_40:
  2426  001240  C00D  FFF6         	movff	i2printf@f,tblptrl
  2427  001244  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2428  001248  4A0D               	infsnz	i2printf@f,f,c
  2429  00124A  2A0E               	incf	i2printf@f+1,f,c
  2430  00124C                     	if	0	;tblptru may be non-zero
  2431  00124C                     	endif
  2432  00124C                     	if	0	;tblptru may be non-zero
  2433  00124C                     	endif
  2434  00124C  0008               	tblrd		*
  2435  00124E  CFF5 F018          	movff	tablat,i2printf@c
  2436  001252  5018               	movf	i2printf@c,w,c
  2437  001254  B4D8               	btfsc	status,2,c
  2438  001256  0012               	return	
  2439  001258  D776               	goto	i2l231
  2440  00125A                     __end_ofi2_printf:
  2441                           	opt stack 0
  2442                           pclatu	equ	0xFFB
  2443                           pclath	equ	0xFFA
  2444                           tblptru	equ	0xFF8
  2445                           tblptrh	equ	0xFF7
  2446                           tblptrl	equ	0xFF6
  2447                           tablat	equ	0xFF5
  2448                           prodh	equ	0xFF4
  2449                           prodl	equ	0xFF3
  2450                           intcon	equ	0xFF2
  2451                           postinc0	equ	0xFEE
  2452                           fsr0h	equ	0xFEA
  2453                           fsr0l	equ	0xFE9
  2454                           wreg	equ	0xFE8
  2455                           fsr1h	equ	0xFE2
  2456                           fsr1l	equ	0xFE1
  2457                           postinc2	equ	0xFDE
  2458                           postdec2	equ	0xFDD
  2459                           fsr2h	equ	0xFDA
  2460                           fsr2l	equ	0xFD9
  2461                           status	equ	0xFD8
  2462                           
  2463 ;; *************** function i2_putch *****************
  2464 ;; Defined at:
  2465 ;;		line 24 in file "lcd.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  data            1    wreg     unsigned char 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  data            1    2[COMRAM] unsigned char 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, status,2, status,0, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2483 ;;Total ram usage:        1 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    1
  2486 ;; This function calls:
  2487 ;;		i2_lcdNibble
  2488 ;; This function is called by:
  2489 ;;		i2_printf
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text17
  2494  00174C                     __ptext17:
  2495                           	opt stack 0
  2496  00174C                     i2_putch:
  2497                           	opt stack 24
  2498                           
  2499                           ;incstack = 0
  2500                           ;i2putch@data stored from wreg
  2501  00174C  6E03               	movwf	i2putch@data,c
  2502                           
  2503                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2504  00174E  848C               	bsf	3980,2,c	;volatile
  2505                           
  2506                           ;lcd.c: 33: lcdNibble(data);
  2507  001750  5003               	movf	i2putch@data,w,c
  2508  001752  EC34  F00A         	call	i2_lcdNibble
  2509                           
  2510                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2511  001756  0EA0               	movlw	160
  2512  001758                     i2u117_47:
  2513  001758  D000               	nop2	
  2514  00175A  2EE8               	decfsz	wreg,f,c
  2515  00175C  D7FD               	bra	i2u117_47
  2516  00175E  0012               	return		;funcret
  2517  001760                     __end_ofi2_putch:
  2518                           	opt stack 0
  2519                           pclatu	equ	0xFFB
  2520                           pclath	equ	0xFFA
  2521                           tblptru	equ	0xFF8
  2522                           tblptrh	equ	0xFF7
  2523                           tblptrl	equ	0xFF6
  2524                           tablat	equ	0xFF5
  2525                           prodh	equ	0xFF4
  2526                           prodl	equ	0xFF3
  2527                           intcon	equ	0xFF2
  2528                           postinc0	equ	0xFEE
  2529                           fsr0h	equ	0xFEA
  2530                           fsr0l	equ	0xFE9
  2531                           wreg	equ	0xFE8
  2532                           fsr1h	equ	0xFE2
  2533                           fsr1l	equ	0xFE1
  2534                           postinc2	equ	0xFDE
  2535                           postdec2	equ	0xFDD
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function i2___lwmod *****************
  2541 ;; Defined at:
  2542 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;  dividend        2    7[COMRAM] unsigned int 
  2545 ;;  divisor         2    9[COMRAM] unsigned int 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  __lwmod         1   11[COMRAM] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  2    7[COMRAM] unsigned int 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;Total ram usage:        5 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; This function calls:
  2564 ;;		Nothing
  2565 ;; This function is called by:
  2566 ;;		i2_printf
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text18
  2571  001664                     __ptext18:
  2572                           	opt stack 0
  2573  001664                     i2___lwmod:
  2574                           	opt stack 25
  2575                           
  2576                           ;incstack = 0
  2577  001664  500A               	movf	i2___lwmod@divisor,w,c
  2578  001666  100B               	iorwf	i2___lwmod@divisor+1,w,c
  2579  001668  B4D8               	btfsc	status,2,c
  2580  00166A  D018               	goto	i2l668
  2581  00166C  0E01               	movlw	1
  2582  00166E  6E0C               	movwf	i2___lwmod@counter,c
  2583  001670  D004               	goto	i2l663
  2584  001672  90D8               	bcf	status,0,c
  2585  001674  360A               	rlcf	i2___lwmod@divisor,f,c
  2586  001676  360B               	rlcf	i2___lwmod@divisor+1,f,c
  2587  001678  2A0C               	incf	i2___lwmod@counter,f,c
  2588  00167A                     i2l663:
  2589  00167A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  2590  00167C  D7FA               	goto	i2l664
  2591  00167E                     i2u59_40:
  2592  00167E  500A               	movf	i2___lwmod@divisor,w,c
  2593  001680  5C08               	subwf	i2___lwmod@dividend,w,c
  2594  001682  500B               	movf	i2___lwmod@divisor+1,w,c
  2595  001684  5809               	subwfb	i2___lwmod@dividend+1,w,c
  2596  001686  A0D8               	btfss	status,0,c
  2597  001688  D004               	goto	i2l667
  2598  00168A  500A               	movf	i2___lwmod@divisor,w,c
  2599  00168C  5E08               	subwf	i2___lwmod@dividend,f,c
  2600  00168E  500B               	movf	i2___lwmod@divisor+1,w,c
  2601  001690  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  2602  001692                     i2l667:
  2603  001692  90D8               	bcf	status,0,c
  2604  001694  320B               	rrcf	i2___lwmod@divisor+1,f,c
  2605  001696  320A               	rrcf	i2___lwmod@divisor,f,c
  2606  001698  2E0C               	decfsz	i2___lwmod@counter,f,c
  2607  00169A  D7F1               	goto	i2u59_40
  2608  00169C                     i2l668:
  2609  00169C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  2610  0016A0  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  2611  0016A4  0012               	return		;funcret
  2612  0016A6                     __end_ofi2___lwmod:
  2613                           	opt stack 0
  2614                           pclatu	equ	0xFFB
  2615                           pclath	equ	0xFFA
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           intcon	equ	0xFF2
  2623                           postinc0	equ	0xFEE
  2624                           fsr0h	equ	0xFEA
  2625                           fsr0l	equ	0xFE9
  2626                           wreg	equ	0xFE8
  2627                           fsr1h	equ	0xFE2
  2628                           fsr1l	equ	0xFE1
  2629                           postinc2	equ	0xFDE
  2630                           postdec2	equ	0xFDD
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function i2___lwdiv *****************
  2636 ;; Defined at:
  2637 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  dividend        2    0[COMRAM] unsigned int 
  2640 ;;  divisor         2    2[COMRAM] unsigned int 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  2643 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  2    0[COMRAM] unsigned int 
  2646 ;; Registers used:
  2647 ;;		wreg, status,2, status,0
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2653 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;Total ram usage:        7 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		i2_printf
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text19
  2667  001538                     __ptext19:
  2668                           	opt stack 0
  2669  001538                     i2___lwdiv:
  2670                           	opt stack 25
  2671                           
  2672                           ;incstack = 0
  2673  001538  0E00               	movlw	0
  2674  00153A  6E06               	movwf	i2___lwdiv@quotient+1,c
  2675  00153C  0E00               	movlw	0
  2676  00153E  6E05               	movwf	i2___lwdiv@quotient,c
  2677  001540  5003               	movf	i2___lwdiv@divisor,w,c
  2678  001542  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  2679  001544  B4D8               	btfsc	status,2,c
  2680  001546  D01C               	goto	i2l658
  2681  001548  0E01               	movlw	1
  2682  00154A  6E07               	movwf	i2___lwdiv@counter,c
  2683  00154C  D004               	goto	i2l653
  2684  00154E  90D8               	bcf	status,0,c
  2685  001550  3603               	rlcf	i2___lwdiv@divisor,f,c
  2686  001552  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  2687  001554  2A07               	incf	i2___lwdiv@counter,f,c
  2688  001556                     i2l653:
  2689  001556  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  2690  001558  D7FA               	goto	i2l654
  2691  00155A                     i2u56_40:
  2692  00155A  90D8               	bcf	status,0,c
  2693  00155C  3605               	rlcf	i2___lwdiv@quotient,f,c
  2694  00155E  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  2695  001560  5003               	movf	i2___lwdiv@divisor,w,c
  2696  001562  5C01               	subwf	i2___lwdiv@dividend,w,c
  2697  001564  5004               	movf	i2___lwdiv@divisor+1,w,c
  2698  001566  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  2699  001568  A0D8               	btfss	status,0,c
  2700  00156A  D005               	goto	i2l657
  2701  00156C  5003               	movf	i2___lwdiv@divisor,w,c
  2702  00156E  5E01               	subwf	i2___lwdiv@dividend,f,c
  2703  001570  5004               	movf	i2___lwdiv@divisor+1,w,c
  2704  001572  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  2705  001574  8005               	bsf	i2___lwdiv@quotient,0,c
  2706  001576                     i2l657:
  2707  001576  90D8               	bcf	status,0,c
  2708  001578  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  2709  00157A  3203               	rrcf	i2___lwdiv@divisor,f,c
  2710  00157C  2E07               	decfsz	i2___lwdiv@counter,f,c
  2711  00157E  D7ED               	goto	i2u56_40
  2712  001580                     i2l658:
  2713  001580  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  2714  001584  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  2715  001588  0012               	return		;funcret
  2716  00158A                     __end_ofi2___lwdiv:
  2717                           	opt stack 0
  2718                           pclatu	equ	0xFFB
  2719                           pclath	equ	0xFFA
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           prodh	equ	0xFF4
  2725                           prodl	equ	0xFF3
  2726                           intcon	equ	0xFF2
  2727                           postinc0	equ	0xFEE
  2728                           fsr0h	equ	0xFEA
  2729                           fsr0l	equ	0xFE9
  2730                           wreg	equ	0xFE8
  2731                           fsr1h	equ	0xFE2
  2732                           fsr1l	equ	0xFE1
  2733                           postinc2	equ	0xFDE
  2734                           postdec2	equ	0xFDD
  2735                           fsr2h	equ	0xFDA
  2736                           fsr2l	equ	0xFD9
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function i2_initLCD *****************
  2740 ;; Defined at:
  2741 ;;		line 60 in file "lcd.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;		None
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;		None
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      void 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2, status,0, cstack
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;Total ram usage:        1 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    2
  2762 ;; This function calls:
  2763 ;;		i2_lcdInst
  2764 ;; This function is called by:
  2765 ;;		_interruptHandler
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text20
  2770  0015D6                     __ptext20:
  2771                           	opt stack 0
  2772  0015D6                     i2_initLCD:
  2773                           	opt stack 24
  2774                           
  2775                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  2776                           
  2777                           ;incstack = 0
  2778  0015D6  0E9C               	movlw	156
  2779  0015D8  6E04               	movwf	??i2_initLCD& (0+255),c
  2780  0015DA  0ED7               	movlw	215
  2781  0015DC                     i2u118_47:
  2782  0015DC  2EE8               	decfsz	wreg,f,c
  2783  0015DE  D7FE               	bra	i2u118_47
  2784  0015E0  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2785  0015E2  D7FC               	bra	i2u118_47
  2786  0015E4  F000               	nop	
  2787                           
  2788                           ;lcd.c: 69: lcdInst(0b00110011);
  2789  0015E6  0E33               	movlw	51
  2790  0015E8  ECB0  F00B         	call	i2_lcdInst
  2791                           
  2792                           ;lcd.c: 70: lcdInst(0b00110010);
  2793  0015EC  0E32               	movlw	50
  2794  0015EE  ECB0  F00B         	call	i2_lcdInst
  2795                           
  2796                           ;lcd.c: 71: lcdInst(0b00101000);
  2797  0015F2  0E28               	movlw	40
  2798  0015F4  ECB0  F00B         	call	i2_lcdInst
  2799                           
  2800                           ;lcd.c: 72: lcdInst(0b00001111);
  2801  0015F8  0E0F               	movlw	15
  2802  0015FA  ECB0  F00B         	call	i2_lcdInst
  2803                           
  2804                           ;lcd.c: 73: lcdInst(0b00000110);
  2805  0015FE  0E06               	movlw	6
  2806  001600  ECB0  F00B         	call	i2_lcdInst
  2807                           
  2808                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  2809  001604  0E01               	movlw	1
  2810  001606  ECB0  F00B         	call	i2_lcdInst
  2811  00160A  0E9C               	movlw	156
  2812  00160C  6E04               	movwf	??i2_initLCD& (0+255),c
  2813  00160E  0ED7               	movlw	215
  2814  001610                     i2u119_47:
  2815  001610  2EE8               	decfsz	wreg,f,c
  2816  001612  D7FE               	bra	i2u119_47
  2817  001614  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2818  001616  D7FC               	bra	i2u119_47
  2819  001618  F000               	nop	
  2820                           
  2821                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2822  00161A  0E0F               	movlw	15
  2823  00161C  ECB0  F00B         	call	i2_lcdInst
  2824  001620  0012               	return		;funcret
  2825  001622                     __end_ofi2_initLCD:
  2826                           	opt stack 0
  2827                           pclatu	equ	0xFFB
  2828                           pclath	equ	0xFFA
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           prodh	equ	0xFF4
  2834                           prodl	equ	0xFF3
  2835                           intcon	equ	0xFF2
  2836                           postinc0	equ	0xFEE
  2837                           fsr0h	equ	0xFEA
  2838                           fsr0l	equ	0xFE9
  2839                           wreg	equ	0xFE8
  2840                           fsr1h	equ	0xFE2
  2841                           fsr1l	equ	0xFE1
  2842                           postinc2	equ	0xFDE
  2843                           postdec2	equ	0xFDD
  2844                           fsr2h	equ	0xFDA
  2845                           fsr2l	equ	0xFD9
  2846                           status	equ	0xFD8
  2847                           
  2848 ;; *************** function i2_lcdInst *****************
  2849 ;; Defined at:
  2850 ;;		line 11 in file "lcd.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  data            1    wreg     unsigned char 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  data            1    2[COMRAM] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;Total ram usage:        1 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    1
  2871 ;; This function calls:
  2872 ;;		i2_lcdNibble
  2873 ;; This function is called by:
  2874 ;;		_interruptHandler
  2875 ;;		i2_initLCD
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text21
  2880  001760                     __ptext21:
  2881                           	opt stack 0
  2882  001760                     i2_lcdInst:
  2883                           	opt stack 25
  2884                           
  2885                           ;incstack = 0
  2886                           ;i2lcdInst@data stored from wreg
  2887  001760  6E03               	movwf	i2lcdInst@data,c
  2888                           
  2889                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2890  001762  948C               	bcf	3980,2,c	;volatile
  2891                           
  2892                           ;lcd.c: 20: lcdNibble(data);
  2893  001764  5003               	movf	i2lcdInst@data,w,c
  2894  001766  EC34  F00A         	call	i2_lcdNibble
  2895                           
  2896                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2897  00176A  0EA0               	movlw	160
  2898  00176C                     i2u120_47:
  2899  00176C  D000               	nop2	
  2900  00176E  2EE8               	decfsz	wreg,f,c
  2901  001770  D7FD               	bra	i2u120_47
  2902  001772  0012               	return		;funcret
  2903  001774                     __end_ofi2_lcdInst:
  2904                           	opt stack 0
  2905                           pclatu	equ	0xFFB
  2906                           pclath	equ	0xFFA
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           postinc0	equ	0xFEE
  2915                           fsr0h	equ	0xFEA
  2916                           fsr0l	equ	0xFE9
  2917                           wreg	equ	0xFE8
  2918                           fsr1h	equ	0xFE2
  2919                           fsr1l	equ	0xFE1
  2920                           postinc2	equ	0xFDE
  2921                           postdec2	equ	0xFDD
  2922                           fsr2h	equ	0xFDA
  2923                           fsr2l	equ	0xFD9
  2924                           status	equ	0xFD8
  2925                           
  2926 ;; *************** function i2_lcdNibble *****************
  2927 ;; Defined at:
  2928 ;;		line 37 in file "lcd.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  data            1    wreg     unsigned char 
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;  data            1    1[COMRAM] unsigned char 
  2933 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;Total ram usage:        2 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		i2_lcdInst
  2953 ;;		i2_putch
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text22
  2958  001468                     __ptext22:
  2959                           	opt stack 0
  2960  001468                     i2_lcdNibble:
  2961                           	opt stack 24
  2962                           
  2963                           ;incstack = 0
  2964                           ;i2lcdNibble@data stored from wreg
  2965  001468  6E02               	movwf	i2lcdNibble@data,c
  2966                           
  2967                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2968  00146A  5002               	movf	i2lcdNibble@data,w,c
  2969  00146C  0BF0               	andlw	240
  2970  00146E  6E01               	movwf	i2lcdNibble@temp,c
  2971                           
  2972                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2973  001470  508C               	movf	3980,w,c	;volatile
  2974  001472  0B0F               	andlw	15
  2975  001474  6E8C               	movwf	3980,c	;volatile
  2976                           
  2977                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2978  001476  5001               	movf	i2lcdNibble@temp,w,c
  2979  001478  108C               	iorwf	3980,w,c	;volatile
  2980  00147A  6E8C               	movwf	3980,c	;volatile
  2981                           
  2982                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2983  00147C  0E00               	movlw	0
  2984  00147E  BEF2               	btfsc	intcon,7,c	;volatile
  2985  001480  0E01               	movlw	1
  2986  001482  6E50               	movwf	_LCDinterruptState,c
  2987  001484  9EF2               	bcf	intcon,7,c	;volatile
  2988  001486  868C               	bsf	3980,3,c	;volatile
  2989  001488  0E42               	movlw	66
  2990  00148A                     i2u121_47:
  2991  00148A  2EE8               	decfsz	wreg,f,c
  2992  00148C  D7FE               	bra	i2u121_47
  2993  00148E  D000               	nop2	
  2994  001490  968C               	bcf	3980,3,c	;volatile
  2995  001492  0EA0               	movlw	160
  2996  001494                     i2u122_47:
  2997  001494  D000               	nop2	
  2998  001496  2EE8               	decfsz	wreg,f,c
  2999  001498  D7FD               	bra	i2u122_47
  3000  00149A  B050               	btfsc	_LCDinterruptState,0,c
  3001  00149C  D002               	bra	i2u47_45
  3002  00149E  9EF2               	bcf	intcon,7,c	;volatile
  3003  0014A0  D001               	bra	i2u47_46
  3004  0014A2                     i2u47_45:
  3005  0014A2  8EF2               	bsf	intcon,7,c	;volatile
  3006  0014A4                     i2u47_46:
  3007                           
  3008                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3009  0014A4  3802               	swapf	i2lcdNibble@data,w,c
  3010  0014A6  0BF0               	andlw	240
  3011  0014A8  6E02               	movwf	i2lcdNibble@data,c
  3012                           
  3013                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3014  0014AA  5002               	movf	i2lcdNibble@data,w,c
  3015  0014AC  0BF0               	andlw	240
  3016  0014AE  6E01               	movwf	i2lcdNibble@temp,c
  3017                           
  3018                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3019  0014B0  508C               	movf	3980,w,c	;volatile
  3020  0014B2  0B0F               	andlw	15
  3021  0014B4  6E8C               	movwf	3980,c	;volatile
  3022                           
  3023                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3024  0014B6  5001               	movf	i2lcdNibble@temp,w,c
  3025  0014B8  108C               	iorwf	3980,w,c	;volatile
  3026  0014BA  6E8C               	movwf	3980,c	;volatile
  3027                           
  3028                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3029  0014BC  0E00               	movlw	0
  3030  0014BE  BEF2               	btfsc	intcon,7,c	;volatile
  3031  0014C0  0E01               	movlw	1
  3032  0014C2  6E50               	movwf	_LCDinterruptState,c
  3033  0014C4  9EF2               	bcf	intcon,7,c	;volatile
  3034  0014C6  868C               	bsf	3980,3,c	;volatile
  3035  0014C8  0E42               	movlw	66
  3036  0014CA                     i2u123_47:
  3037  0014CA  2EE8               	decfsz	wreg,f,c
  3038  0014CC  D7FE               	bra	i2u123_47
  3039  0014CE  D000               	nop2	
  3040  0014D0  968C               	bcf	3980,3,c	;volatile
  3041  0014D2  0EA0               	movlw	160
  3042  0014D4                     i2u124_47:
  3043  0014D4  D000               	nop2	
  3044  0014D6  2EE8               	decfsz	wreg,f,c
  3045  0014D8  D7FD               	bra	i2u124_47
  3046  0014DA  B050               	btfsc	_LCDinterruptState,0,c
  3047  0014DC  D002               	bra	i2u48_45
  3048  0014DE  9EF2               	bcf	intcon,7,c	;volatile
  3049  0014E0  D001               	bra	i2u48_46
  3050  0014E2                     i2u48_45:
  3051  0014E2  8EF2               	bsf	intcon,7,c	;volatile
  3052  0014E4                     i2u48_46:
  3053  0014E4  0012               	return		;funcret
  3054  0014E6                     __end_ofi2_lcdNibble:
  3055                           	opt stack 0
  3056                           pclatu	equ	0xFFB
  3057                           pclath	equ	0xFFA
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           tblptrl	equ	0xFF6
  3061                           tablat	equ	0xFF5
  3062                           prodh	equ	0xFF4
  3063                           prodl	equ	0xFF3
  3064                           intcon	equ	0xFF2
  3065                           postinc0	equ	0xFEE
  3066                           fsr0h	equ	0xFEA
  3067                           fsr0l	equ	0xFE9
  3068                           wreg	equ	0xFE8
  3069                           fsr1h	equ	0xFE2
  3070                           fsr1l	equ	0xFE1
  3071                           postinc2	equ	0xFDE
  3072                           postdec2	equ	0xFDD
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           pclatu	equ	0xFFB
  3077                           pclath	equ	0xFFA
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon	equ	0xFF2
  3085                           postinc0	equ	0xFEE
  3086                           fsr0h	equ	0xFEA
  3087                           fsr0l	equ	0xFE9
  3088                           wreg	equ	0xFE8
  3089                           fsr1h	equ	0xFE2
  3090                           fsr1l	equ	0xFE1
  3091                           postinc2	equ	0xFDE
  3092                           postdec2	equ	0xFDD
  3093                           fsr2h	equ	0xFDA
  3094                           fsr2l	equ	0xFD9
  3095                           status	equ	0xFD8
  3096                           
  3097                           	psect	rparam
  3098  0000                     pclatu	equ	0xFFB
  3099                           pclath	equ	0xFFA
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           prodh	equ	0xFF4
  3105                           prodl	equ	0xFF3
  3106                           intcon	equ	0xFF2
  3107                           postinc0	equ	0xFEE
  3108                           fsr0h	equ	0xFEA
  3109                           fsr0l	equ	0xFE9
  3110                           wreg	equ	0xFE8
  3111                           fsr1h	equ	0xFE2
  3112                           fsr1l	equ	0xFE1
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119                           	psect	temp
  3120  000051                     btemp:
  3121                           	opt stack 0
  3122  000051                     	ds	1
  3123  0000                     int$flags	set	btemp
  3124  0000                     wtemp6	set	btemp+1
  3125                           pclatu	equ	0xFFB
  3126                           pclath	equ	0xFFA
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           intcon	equ	0xFF2
  3134                           postinc0	equ	0xFEE
  3135                           fsr0h	equ	0xFEA
  3136                           fsr0l	equ	0xFE9
  3137                           wreg	equ	0xFE8
  3138                           fsr1h	equ	0xFE2
  3139                           fsr1l	equ	0xFE1
  3140                           postinc2	equ	0xFDE
  3141                           postdec2	equ	0xFDD
  3142                           fsr2h	equ	0xFDA
  3143                           fsr2l	equ	0xFD9
  3144                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    16
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     70      80
    BANK0           128      2       2
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[3]), STR_2(CODE[11]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2793
                                             69 COMRAM     1     1      0
                                              0 BANK0      2     2      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1766
                                             57 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             47 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             52 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             45 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             48 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             47 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             45 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     332
                                             48 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     391
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     301
                                             46 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      90
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    21    21      0    1287
                                             24 COMRAM    21    21      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            21    17      4     972
                                             12 COMRAM    12     8      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2       2       5        1.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     46      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      52      34        0.0%
DATA                 0      0      52       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 31 13:22:32 2018

                __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l231 1028                          l240 108A  
                        l232 1038                          l154 1390                          l244 10CC  
                        l245 111A                          l157 13C0                          l246 10D2  
                        l238 1062                          l653 1504                          l654 14FC  
                        l663 1638                          l664 1630                          l657 1524  
                        l658 152E                          l667 1650                          l668 165A  
               __CFG_CPB$OFF 000000                          u815 1424                          u816 1426  
                        u825 1464                          u826 1466                          u860 1508  
                        u950 10BA                          u890 163C                          u970 1122  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1825 108E                         _ADON 007E10                         STR_1 1019  
                       STR_2 1011                         STR_3 1019                         u1050 139C  
                       u1107 15C4                         u1117 1744                         u1127 140C  
                       u1137 1416                         u1058 139E                         u1147 144C  
                       u1157 1456                         u1077 13E0                         _LATA 000F89  
                       _LATB 000F8A                         u1087 1730                         _LATC 000F8B  
                       _LATD 000F8C                         u1097 1590                         _LATE 000F8D  
                       _RBIE 007F93                         _RBIF 007F90                         _main 1342  
   __end_of_interruptHandler 1342                         fsr0h 000FEA                         fsr1h 000FE2  
         i2___lwdiv@quotient 0005                         fsr2h 000FDA                         fsr0l 000FE9  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0051  
           __end_of_I2C_init 16D0                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000              __end_ofi2_putch 1760  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                  i2_lcdNibble 1468  
           __end_of_LCD_LEFT 100C             ?_I2C_Master_Init 002E             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lwdiv 1538  
            __end_of___lwmod 1664                        i2l231 1146                        i2l240 11A8  
                      i2l232 1156                        i2l244 11EA                        i2l245 1238  
                      i2l246 11F0                        i2l238 1180                        i2l166 12F4  
                      i2l653 1556                        i2l654 154E                        i2l663 167A  
                      i2l664 1672                        i2l657 1576                        i2l658 1580  
                      i2l667 1692                        i2l668 169C                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 174C               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 15D6               __CFG_EBTRB$OFF 000000              __end_of_dpowers 100B  
                      _putch 1724                        pclath 000FFA                        tablat 000FF5  
          _LCDinterruptState 0050                        status 000FD8                        wtemp6 0052  
             __CFG_PBADEN$ON 000000        __size_of_I2C_sendData 0022             __end_ofi2_printf 125A  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042              __initialization 16F2  
         __size_ofi2_lcdInst 0014                 __end_of_main 13EA                   i2printf@ap 0012  
         __size_ofi2_initLCD 004C            __end_of_LCD_RIGHT 100D                       ??_main 0046  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 002F  
         ??_I2C_Master_Start 002F                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0031                       _ADRESH 000FC4                       _ADRESL 000FC3  
            i2lcdNibble@data 0002                       ?_putch 0001                 _I2C_sendData 16D0  
            i2lcdNibble@temp 0001                       i2l1575 11AC                       i2l1665 12F6  
                     _OSCCON 000FD3                    ??i2_putch 0003                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000  
                  ??___lwdiv 0032                    ??___lwmod 0039                       clear_0 16F8  
                  ??_lcdInst 0030                       _printf 101E                    ??_initLCD 0031  
          __end_ofi2___lwdiv 158A                 __mediumconst 0000            __end_ofi2___lwmod 16A6  
                  ?_I2C_init 0001                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8            __end_ofi2_lcdInst 1774            __end_ofi2_initLCD 1622  
                 __accesstop 0080      __end_of__initialization 16FE                ___rparam_used 000001  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                __end_of_putch 1738  
                i2printf@val 0016           __size_of_lcdNibble 007E                  i2putch@data 0003  
                 ??_I2C_init 0032                    ?i2_printf 000D                      ??_putch 0030  
          ?_interruptHandler 0001           ??_interruptHandler 0019                 ?i2_lcdNibble 0001  
                    ?_printf 003A                   ??i2_printf 0011                      i2u47_45 14A2  
                    i2u47_46 14A4                      i2u56_40 155A                      i2u48_45 14E2  
                    i2u48_46 14E4                      i2u73_40 11D8                      i2u59_40 167E  
                    i2u75_40 1240                      i2u79_40 12B4                      i2u79_48 12B6  
       lcd@LCDinterruptState 004F                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7                      _B_count 004D                      i2_putch 174C  
                    _N_count 004B            __end_of_lcdNibble 1468                      _S_count 0049  
                    __Hparam 0000                      __Lparam 0000                      _W_count 0047  
                    ___lwdiv 14E6                      ___lwmod 1622                 __psmallconst 1000  
                    __pcinit 16F2                      __ramtop 1000                      _lcdInst 1738  
                    __ptext0 1342                      __ptext1 101E                      __ptext2 1724  
                    __ptext3 1622                      __ptext4 14E6                      __ptext5 158A  
                    __ptext6 1738                      __ptext7 13EA                      __ptext8 16D0  
                    __ptext9 16A6              __size_of_printf 011E                      _initLCD 158A  
                    _dpowers 1001                    _LCD_RIGHT 100C     __size_of_I2C_Master_Init 0018  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008               __pintcode_body 125A  
       end_of_initialization 16FE        __end_of_LCD_SIZE_HORZ 100F        __end_of_LCD_SIZE_VERT 100E  
              __Lmediumconst 0000                      int_func 125A    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A                      printf@c 0045                      printf@f 003A  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                  _PORTBbits 000F81                    _TRISBbits 000F93                    _TRISCbits 000F94  
          __size_of_I2C_init 002A            i2___lwdiv@divisor 0003                    i2___lwdiv 1538  
                  i2___lwmod 1664            i2___lwdiv@counter 0007                    i2_lcdInst 1760  
                  i2_initLCD 15D6         __size_ofi2_lcdNibble 007E                i2lcdInst@data 0003  
      interruptHandler@input 002C               __end_of_printf 113C                 i2printf@flag 0014  
               i2printf@prec 0015          start_initialization 16F2                    i2printf@c 0018  
                  i2printf@f 000D                   ?i2___lwdiv 0001                   ?i2___lwmod 0008  
          __size_ofi2_printf 011E            ??_I2C_Master_Init 0032            ??_I2C_Master_Wait 002E  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 002F             __CFG_OSC$INTIO67 000000  
                 ?i2_initLCD 0001     I2C_Master_Init@clockFreq 002E             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 003E    __size_of_interruptHandler 133A                  __pbssCOMRAM 0047  
              __pcstackBANK0 0080            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
                   ?i2_putch 0001             _I2C_Master_Start 1798             _I2C_Master_Write 1786  
           ___lwdiv@dividend 002E            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
                  _lcdNibble 13EA                     ?___lwdiv 002E                     ?___lwmod 0035  
                   ?_lcdInst 0001                     ?_initLCD 0001                  __smallconst 1000  
                   _I2C_init 16A6             ___lwdiv@quotient 0033                ?_I2C_sendData 0001  
                ??i2___lwdiv 0005                  ??i2___lwmod 000C               __size_of_putch 0014  
                   _LCD_LEFT 100B                  ??i2_lcdInst 0003                     _LATCbits 000F8B  
                   _LATDbits 000F8C                  ??i2_initLCD 0004                     i2u120_47 176C  
                   i2u121_47 148A                     i2u122_47 1494                     i2u123_47 14CA  
                   i2u124_47 14D4                     i2u116_47 12EC                     i2u117_47 1758  
                   i2u118_47 15DC                     i2u119_47 1610             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001                   _ADCON0bits 000FC2                   _ADCON2bits 000FC0  
              lcdNibble@data 002F                   printf@flag 0041                lcdNibble@temp 002E  
                 printf@prec 0042                    main@input 0080                     i2_printf 113C  
             ??_I2C_sendData 0031               _LCD_HORZ_LIMIT 1010             __size_ofi2_putch 0014  
                   __Hrparam 0000        I2C_sendData@char_data 0031                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___lwdiv 0052             __size_of___lwmod 0042  
           _interruptHandler 0008             __size_of_lcdInst 0014              _I2C_Master_Init 170C  
           __size_of_initLCD 004C              _I2C_Master_Wait 1774              _I2C_Master_Stop 1790  
     __end_of_LCD_HORZ_LIMIT 1011              ___lwdiv@divisor 0030              ___lwdiv@counter 0032  
                   __ptext10 1786                     __ptext11 1790                     __ptext20 15D6  
                   __ptext12 1798                     __ptext21 1760                     __ptext13 1774  
                   __ptext22 1468                     __ptext14 170C                     __ptext16 113C  
                   __ptext17 174C                     __ptext18 1664                     __ptext19 1538  
             _LCD_VERT_LIMIT 100F                __size_of_main 00A8                ??i2_lcdNibble 0001  
                ??_lcdNibble 002E                     int$flags 0051                    printf@val 0043  
I2C_Master_Write@byteToWrite 002F                    putch@data 0030     __end_of_I2C_Master_Start 17A0  
                _OSCTUNEbits 000F9B     __end_of_I2C_Master_Write 1790                   _INTCONbits 000FF2  
     __end_of_LCD_VERT_LIMIT 1010                     intlevel2 0000                _LCD_SIZE_HORZ 100E  
           ___lwmod@dividend 0035                _LCD_SIZE_VERT 100D                     printf@ap 003F  
       __end_of_I2C_sendData 16F2      __end_of_I2C_Master_Init 1724      __end_of_I2C_Master_Wait 1786  
    __end_of_I2C_Master_Stop 1798                  lcdInst@data 0030          __end_ofi2_lcdNibble 14E6  
            ___lwmod@divisor 0037              ___lwmod@counter 0039                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5  
