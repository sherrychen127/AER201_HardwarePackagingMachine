

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Apr  5 18:11:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4620 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  001E94                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _compartment_array
    90  001E94  0000               	dw	0
    91  001E96  0001               	dw	1
    92  001E98  0000               	dw	0
    93  001E9A  0001               	dw	1
    94  001E9C  0000               	dw	0
    95  001E9E  0001               	dw	1
    96  001EA0  0000               	dw	0
    97  001EA2  0001               	dw	1
    98                           
    99                           ;initializer for _max
   100  001EA4  0004               	dw	4
   101                           
   102                           ;initializer for _spacingTime
   103  001EA6  0FA0               	dw	4000
   104                           
   105                           	psect	idataBANK0
   106  001DB6                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _W_array
   110  001DB6  0000               	dw	0
   111  001DB8  0002               	dw	2
   112  001DBA  0000               	dw	0
   113  001DBC  0001               	dw	1
   114  001DBE  0000               	dw	0
   115  001DC0  0003               	dw	3
   116  001DC2  0000               	dw	0
   117  001DC4  0001               	dw	1
   118                           
   119                           ;initializer for _N_array
   120  001DC6  0000               	dw	0
   121  001DC8  0003               	dw	3
   122  001DCA  0000               	dw	0
   123  001DCC  0001               	dw	1
   124  001DCE  0000               	dw	0
   125  001DD0  0002               	dw	2
   126  001DD2  0000               	dw	0
   127  001DD4  0002               	dw	2
   128                           
   129                           ;initializer for _S_array
   130  001DD6  0000               	dw	0
   131  001DD8  0001               	dw	1
   132  001DDA  0000               	dw	0
   133  001DDC  0002               	dw	2
   134  001DDE  0000               	dw	0
   135  001DE0  0003               	dw	3
   136  001DE2  0000               	dw	0
   137  001DE4  0001               	dw	1
   138                           
   139                           ;initializer for _B_array
   140  001DE6  0000               	dw	0
   141  001DE8  0002               	dw	2
   142  001DEA  0000               	dw	0
   143  001DEC  0002               	dw	2
   144  001DEE  0000               	dw	0
   145  001DF0  0001               	dw	1
   146  001DF2  0000               	dw	0
   147  001DF4  0001               	dw	1
   148                           
   149                           	psect	smallconst
   150  001000                     __psmallconst:
   151                           	opt stack 0
   152  001000  00                 	db	0
   153  001001                     _dpowers:
   154                           	opt stack 0
   155  001001  0001               	dw	1
   156  001003  000A               	dw	10
   157  001005  0064               	dw	100
   158  001007  03E8               	dw	1000
   159  001009  2710               	dw	10000
   160  00100B                     __end_of_dpowers:
   161                           	opt stack 0
   162  00100B                     _LCD_LEFT:
   163                           	opt stack 0
   164  00100B  00                 	db	0
   165  00100C                     __end_of_LCD_LEFT:
   166                           	opt stack 0
   167  00100C                     _LCD_RIGHT:
   168                           	opt stack 0
   169  00100C  01                 	db	1
   170  00100D                     __end_of_LCD_RIGHT:
   171                           	opt stack 0
   172  00100D                     _LCD_SIZE_VERT:
   173                           	opt stack 0
   174  00100D  02                 	db	2
   175  00100E                     __end_of_LCD_SIZE_VERT:
   176                           	opt stack 0
   177  00100E                     _LCD_SIZE_HORZ:
   178                           	opt stack 0
   179  00100E  10                 	db	16
   180  00100F                     __end_of_LCD_SIZE_HORZ:
   181                           	opt stack 0
   182  00100F                     _LCD_VERT_LIMIT:
   183                           	opt stack 0
   184  00100F  02                 	db	2
   185  001010                     __end_of_LCD_VERT_LIMIT:
   186                           	opt stack 0
   187  001010                     _LCD_HORZ_LIMIT:
   188                           	opt stack 0
   189  001010  28                 	db	40
   190  001011                     __end_of_LCD_HORZ_LIMIT:
   191                           	opt stack 0
   192  0000                     _SSPBUF	set	4041
   193  0000                     _SSPCON2bits	set	4037
   194  0000                     _SSPADD	set	4040
   195  0000                     _SSPCON2	set	4037
   196  0000                     _SSPCON1	set	4038
   197  0000                     _SSPSTAT	set	4039
   198  0000                     _SSPCON1bits	set	4038
   199  0000                     _ADRESL	set	4035
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _PORTBbits	set	3969
   203  0000                     _TRISBbits	set	3987
   204  0000                     _TRISCbits	set	3988
   205  0000                     _LATCbits	set	3979
   206  0000                     _ADCON2bits	set	4032
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON0	set	4034
   209  0000                     _TRISE	set	3990
   210  0000                     _TRISD	set	3989
   211  0000                     _TRISC	set	3988
   212  0000                     _TRISB	set	3987
   213  0000                     _TRISA	set	3986
   214  0000                     _LATE	set	3981
   215  0000                     _LATC	set	3979
   216  0000                     _LATB	set	3978
   217  0000                     _LATA	set	3977
   218  0000                     _OSCTUNEbits	set	3995
   219  0000                     _OSCCONbits	set	4051
   220  0000                     _INTCONbits	set	4082
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _ADON	set	32272
   224  0000                     _RBIF	set	32656
   225  0000                     _RBIE	set	32659
   226  001011                     STR_1:
   227  001011  42                 	db	66	;'B'
   228  001012  3A                 	db	58	;':'
   229  001013  25                 	db	37
   230  001014  64                 	db	100	;'d'
   231  001015  2C                 	db	44
   232  001016  4E                 	db	78	;'N'
   233  001017  3A                 	db	58	;':'
   234  001018  25                 	db	37
   235  001019  64                 	db	100	;'d'
   236  00101A  2C                 	db	44
   237  00101B  53                 	db	83	;'S'
   238  00101C  3A                 	db	58	;':'
   239  00101D  25                 	db	37
   240  00101E  64                 	db	100	;'d'
   241  00101F  2C                 	db	44
   242  001020  57                 	db	87	;'W'
   243  001021  3A                 	db	58	;':'
   244  001022  25                 	db	37
   245  001023  64                 	db	100	;'d'
   246  001024  00                 	db	0
   247  001025                     STR_6:
   248  001025  73                 	db	115	;'s'
   249  001026  70                 	db	112	;'p'
   250  001027  61                 	db	97	;'a'
   251  001028  63                 	db	99	;'c'
   252  001029  65                 	db	101	;'e'
   253  00102A  72                 	db	114	;'r'
   254  00102B  5F                 	db	95	;'_'
   255  00102C  69                 	db	105	;'i'
   256  00102D  6E                 	db	110	;'n'
   257  00102E  74                 	db	116	;'t'
   258  00102F  65                 	db	101	;'e'
   259  001030  72                 	db	114	;'r'
   260  001031  72                 	db	114	;'r'
   261  001032  75                 	db	117	;'u'
   262  001033  70                 	db	112	;'p'
   263  001034  74                 	db	116	;'t'
   264  001035  65                 	db	101	;'e'
   265  001036  64                 	db	100	;'d'
   266  001037  00                 	db	0
   267  001038                     STR_7:
   268  001038  77                 	db	119	;'w'
   269  001039  61                 	db	97	;'a'
   270  00103A  73                 	db	115	;'s'
   271  00103B  68                 	db	104	;'h'
   272  00103C  65                 	db	101	;'e'
   273  00103D  72                 	db	114	;'r'
   274  00103E  5F                 	db	95	;'_'
   275  00103F  69                 	db	105	;'i'
   276  001040  6E                 	db	110	;'n'
   277  001041  74                 	db	116	;'t'
   278  001042  65                 	db	101	;'e'
   279  001043  72                 	db	114	;'r'
   280  001044  72                 	db	114	;'r'
   281  001045  75                 	db	117	;'u'
   282  001046  70                 	db	112	;'p'
   283  001047  74                 	db	116	;'t'
   284  001048  00                 	db	0
   285  001049                     STR_2:
   286  001049  70                 	db	112	;'p'
   287  00104A  72                 	db	114	;'r'
   288  00104B  6F                 	db	111	;'o'
   289  00104C  63                 	db	99	;'c'
   290  00104D  65                 	db	101	;'e'
   291  00104E  73                 	db	115	;'s'
   292  00104F  73                 	db	115	;'s'
   293  001050  69                 	db	105	;'i'
   294  001051  6E                 	db	110	;'n'
   295  001052  67                 	db	103	;'g'
   296  001053  20                 	db	32
   297  001054  43                 	db	67	;'C'
   298  001055  25                 	db	37
   299  001056  64                 	db	100	;'d'
   300  001057  00                 	db	0
   301  001058                     STR_4:
   302  001058  62                 	db	98	;'b'
   303  001059  6F                 	db	111	;'o'
   304  00105A  6C                 	db	108	;'l'
   305  00105B  74                 	db	116	;'t'
   306  00105C  5F                 	db	95	;'_'
   307  00105D  69                 	db	105	;'i'
   308  00105E  6E                 	db	110	;'n'
   309  00105F  74                 	db	116	;'t'
   310  001060  65                 	db	101	;'e'
   311  001061  72                 	db	114	;'r'
   312  001062  72                 	db	114	;'r'
   313  001063  75                 	db	117	;'u'
   314  001064  70                 	db	112	;'p'
   315  001065  74                 	db	116	;'t'
   316  001066  00                 	db	0
   317  001067                     STR_5:
   318  001067  6E                 	db	110	;'n'
   319  001068  75                 	db	117	;'u'
   320  001069  74                 	db	116	;'t'
   321  00106A  5F                 	db	95	;'_'
   322  00106B  69                 	db	105	;'i'
   323  00106C  6E                 	db	110	;'n'
   324  00106D  74                 	db	116	;'t'
   325  00106E  65                 	db	101	;'e'
   326  00106F  72                 	db	114	;'r'
   327  001070  72                 	db	114	;'r'
   328  001071  75                 	db	117	;'u'
   329  001072  70                 	db	112	;'p'
   330  001073  74                 	db	116	;'t'
   331  001074  00                 	db	0
   332  0000                     
   333                           ; #config settings
   334  001075  00                 	db	0	; dummy byte at the end
   335  0000                     
   336                           	psect	cinit
   337  001B98                     __pcinit:
   338                           	opt stack 0
   339  001B98                     start_initialization:
   340                           	opt stack 0
   341  001B98                     __initialization:
   342                           	opt stack 0
   343                           
   344                           ; Initialize objects allocated to BANK0 (64 bytes)
   345                           ; load TBLPTR registers with __pidataBANK0
   346  001B98  0EB6               	movlw	low __pidataBANK0
   347  001B9A  6EF6               	movwf	tblptrl,c
   348  001B9C  0E1D               	movlw	high __pidataBANK0
   349  001B9E  6EF7               	movwf	tblptrh,c
   350  001BA0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   351  001BA2  6EF8               	movwf	tblptru,c
   352  001BA4  EE00  F080         	lfsr	0,__pdataBANK0
   353  001BA8  EE10 F040          	lfsr	1,64
   354  001BAC                     copy_data0:
   355  001BAC  0009               	tblrd		*+
   356  001BAE  CFF5 FFEE          	movff	tablat,postinc0
   357  001BB2  50E5               	movf	postdec1,w,c
   358  001BB4  50E1               	movf	fsr1l,w,c
   359  001BB6  E1FA               	bnz	copy_data0
   360                           
   361                           ; Initialize objects allocated to COMRAM (20 bytes)
   362                           ; load TBLPTR registers with __pidataCOMRAM
   363  001BB8  0E94               	movlw	low __pidataCOMRAM
   364  001BBA  6EF6               	movwf	tblptrl,c
   365  001BBC  0E1E               	movlw	high __pidataCOMRAM
   366  001BBE  6EF7               	movwf	tblptrh,c
   367  001BC0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   368  001BC2  6EF8               	movwf	tblptru,c
   369  001BC4  EE00  F044         	lfsr	0,__pdataCOMRAM
   370  001BC8  EE10 F014          	lfsr	1,20
   371  001BCC                     copy_data1:
   372  001BCC  0009               	tblrd		*+
   373  001BCE  CFF5 FFEE          	movff	tablat,postinc0
   374  001BD2  50E5               	movf	postdec1,w,c
   375  001BD4  50E1               	movf	fsr1l,w,c
   376  001BD6  E1FA               	bnz	copy_data1
   377                           
   378                           ; Clear objects allocated to COMRAM (26 bytes)
   379  001BD8  EE00  F02A         	lfsr	0,__pbssCOMRAM
   380  001BDC  0E1A               	movlw	26
   381  001BDE                     clear_0:
   382  001BDE  6AEE               	clrf	postinc0,c
   383  001BE0  06E8               	decf	wreg,f,c
   384  001BE2  E1FD               	bnz	clear_0
   385  001BE4                     end_of_initialization:
   386                           	opt stack 0
   387  001BE4                     __end_of__initialization:
   388                           	opt stack 0
   389  001BE4  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   390  001BE6  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   391  001BE8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   392  001BEA  6EF8               	movwf	tblptru,c
   393  001BEC  0100               	movlb	0
   394  001BEE  EF3B  F008         	goto	_main	;jump to C main() function
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1l	equ	0xFE1
   403                           
   404                           	psect	bssCOMRAM
   405  00002A                     __pbssCOMRAM:
   406                           	opt stack 0
   407  00002A                     _W_spacingTime:
   408                           	opt stack 0
   409  00002A                     	ds	2
   410  00002C                     _S_spacingTime:
   411                           	opt stack 0
   412  00002C                     	ds	2
   413  00002E                     _N_spacingTime:
   414                           	opt stack 0
   415  00002E                     	ds	2
   416  000030                     _B_spacingTime:
   417                           	opt stack 0
   418  000030                     	ds	2
   419  000032                     _W_input:
   420                           	opt stack 0
   421  000032                     	ds	2
   422  000034                     _S_input:
   423                           	opt stack 0
   424  000034                     	ds	2
   425  000036                     _N_input:
   426                           	opt stack 0
   427  000036                     	ds	2
   428  000038                     _B_input:
   429                           	opt stack 0
   430  000038                     	ds	2
   431  00003A                     _W_count:
   432                           	opt stack 0
   433  00003A                     	ds	2
   434  00003C                     _S_count:
   435                           	opt stack 0
   436  00003C                     	ds	2
   437  00003E                     _N_count:
   438                           	opt stack 0
   439  00003E                     	ds	2
   440  000040                     _B_count:
   441                           	opt stack 0
   442  000040                     	ds	2
   443  000042                     	ds	1
   444  000043                     _LCDinterruptState:
   445                           	opt stack 0
   446  000043                     	ds	1
   447                           tblptru	equ	0xFF8
   448                           tblptrh	equ	0xFF7
   449                           tblptrl	equ	0xFF6
   450                           tablat	equ	0xFF5
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456                           	psect	dataCOMRAM
   457  000044                     __pdataCOMRAM:
   458                           	opt stack 0
   459  000044                     _compartment_array:
   460                           	opt stack 0
   461  000044                     	ds	16
   462  000054                     _max:
   463                           	opt stack 0
   464  000054                     	ds	2
   465  000056                     _spacingTime:
   466                           	opt stack 0
   467  000056                     	ds	2
   468                           tblptru	equ	0xFF8
   469                           tblptrh	equ	0xFF7
   470                           tblptrl	equ	0xFF6
   471                           tablat	equ	0xFF5
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           postdec1	equ	0xFE5
   475                           fsr1l	equ	0xFE1
   476                           
   477                           	psect	dataBANK0
   478  000080                     __pdataBANK0:
   479                           	opt stack 0
   480  000080                     _W_array:
   481                           	opt stack 0
   482  000080                     	ds	16
   483  000090                     _N_array:
   484                           	opt stack 0
   485  000090                     	ds	16
   486  0000A0                     _S_array:
   487                           	opt stack 0
   488  0000A0                     	ds	16
   489  0000B0                     _B_array:
   490                           	opt stack 0
   491  0000B0                     	ds	16
   492                           tblptru	equ	0xFF8
   493                           tblptrh	equ	0xFF7
   494                           tblptrl	equ	0xFF6
   495                           tablat	equ	0xFF5
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           postdec1	equ	0xFE5
   499                           fsr1l	equ	0xFE1
   500                           
   501                           	psect	cstackBANK0
   502  0000C0                     __pcstackBANK0:
   503                           	opt stack 0
   504  0000C0                     ??_I2C_Master_Wait:
   505  0000C0                     ?___lwdiv:
   506                           	opt stack 0
   507  0000C0                     lcdNibble@temp:
   508                           	opt stack 0
   509  0000C0                     ___lwdiv@dividend:
   510                           	opt stack 0
   511  0000C0                     I2C_Master_Init@clockFreq:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0x0
   515  0000C0                     	ds	1
   516  0000C1                     lcdNibble@data:
   517                           	opt stack 0
   518  0000C1                     I2C_Master_Write@byteToWrite:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x1
   522  0000C1                     	ds	1
   523  0000C2                     lcdInst@data:
   524                           	opt stack 0
   525  0000C2                     putch@data:
   526                           	opt stack 0
   527  0000C2                     ___lwdiv@divisor:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x2
   531  0000C2                     	ds	1
   532  0000C3                     ??_initLCD:
   533  0000C3                     I2C_sendData@char_data:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x3
   537  0000C3                     	ds	1
   538  0000C4                     ___lwdiv@counter:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x4
   542  0000C4                     	ds	1
   543  0000C5                     ___lwdiv@quotient:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x5
   547  0000C5                     	ds	2
   548  0000C7                     ?___lwmod:
   549                           	opt stack 0
   550  0000C7                     ___lwmod@dividend:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x7
   554  0000C7                     	ds	2
   555  0000C9                     ___lwmod@divisor:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x9
   559  0000C9                     	ds	2
   560  0000CB                     ___lwmod@counter:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0xB
   564  0000CB                     	ds	1
   565  0000CC                     ?_printf:
   566                           	opt stack 0
   567  0000CC                     printf@f:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0xC
   571  0000CC                     	ds	10
   572  0000D6                     ??_printf:
   573                           
   574                           ; 1 bytes @ 0x16
   575  0000D6                     	ds	1
   576  0000D7                     printf@ap:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x17
   580  0000D7                     	ds	2
   581  0000D9                     printf@flag:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x19
   585  0000D9                     	ds	1
   586  0000DA                     printf@prec:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x1A
   590  0000DA                     	ds	1
   591  0000DB                     printf@val:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x1B
   595  0000DB                     	ds	2
   596  0000DD                     printf@c:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x1D
   600  0000DD                     	ds	1
   601  0000DE                     Bolt_dispense@B_max:
   602                           	opt stack 0
   603  0000DE                     Nut_dispense@N_max:
   604                           	opt stack 0
   605  0000DE                     Spacer_dispense@S_max:
   606                           	opt stack 0
   607  0000DE                     Washer_dispense@W_max:
   608                           	opt stack 0
   609  0000DE                     Bolt_remain@time:
   610                           	opt stack 0
   611  0000DE                     Nut_remain@time:
   612                           	opt stack 0
   613  0000DE                     Spacer_remain@time:
   614                           	opt stack 0
   615  0000DE                     Washer_remain@time:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x1E
   619  0000DE                     	ds	2
   620  0000E0                     ??_Bolt_dispense:
   621  0000E0                     ??_Nut_dispense:
   622  0000E0                     ??_Spacer_dispense:
   623  0000E0                     ??_Washer_dispense:
   624  0000E0                     ??_Bolt_remain:
   625  0000E0                     ??_Nut_remain:
   626  0000E0                     ??_Spacer_remain:
   627  0000E0                     ??_Washer_remain:
   628                           
   629                           ; 1 bytes @ 0x20
   630  0000E0                     	ds	1
   631  0000E1                     ??_main:
   632                           
   633                           ; 1 bytes @ 0x21
   634  0000E1                     	ds	2
   635  0000E3                     main@i:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x23
   639  0000E3                     	ds	2
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           postdec1	equ	0xFE5
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	cstackCOMRAM
   650  000001                     __pcstackCOMRAM:
   651                           	opt stack 0
   652  000001                     ?i2___lwdiv:
   653                           	opt stack 0
   654  000001                     i2lcdNibble@temp:
   655                           	opt stack 0
   656  000001                     i2___lwdiv@dividend:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x0
   660  000001                     	ds	1
   661  000002                     i2lcdNibble@data:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x1
   665  000002                     	ds	1
   666  000003                     i2lcdInst@data:
   667                           	opt stack 0
   668  000003                     i2putch@data:
   669                           	opt stack 0
   670  000003                     i2___lwdiv@divisor:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x2
   674  000003                     	ds	1
   675  000004                     ??i2_initLCD:
   676                           
   677                           ; 1 bytes @ 0x3
   678  000004                     	ds	1
   679  000005                     i2___lwdiv@quotient:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x4
   683  000005                     	ds	2
   684  000007                     i2___lwdiv@counter:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x6
   688  000007                     	ds	1
   689  000008                     ?i2___lwmod:
   690                           	opt stack 0
   691  000008                     i2___lwmod@dividend:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x7
   695  000008                     	ds	2
   696  00000A                     i2___lwmod@divisor:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x9
   700  00000A                     	ds	2
   701  00000C                     i2___lwmod@counter:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0xB
   705  00000C                     	ds	1
   706  00000D                     ?i2_printf:
   707                           	opt stack 0
   708  00000D                     i2printf@f:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0xC
   712  00000D                     	ds	2
   713  00000F                     ??i2_printf:
   714                           
   715                           ; 1 bytes @ 0xE
   716  00000F                     	ds	1
   717  000010                     i2printf@ap:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0xF
   721  000010                     	ds	2
   722  000012                     i2printf@flag:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x11
   726  000012                     	ds	1
   727  000013                     i2printf@prec:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x12
   731  000013                     	ds	1
   732  000014                     i2printf@val:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x13
   736  000014                     	ds	2
   737  000016                     i2printf@c:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x15
   741  000016                     	ds	1
   742  000017                     ??_interruptHandler:
   743                           
   744                           ; 1 bytes @ 0x16
   745  000017                     	ds	19
   746                           tblptru	equ	0xFF8
   747                           tblptrh	equ	0xFF7
   748                           tblptrl	equ	0xFF6
   749                           tablat	equ	0xFF5
   750                           postinc0	equ	0xFEE
   751                           wreg	equ	0xFE8
   752                           postdec1	equ	0xFE5
   753                           fsr1l	equ	0xFE1
   754                           
   755 ;;
   756 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   757 ;;
   758 ;; *************** function _main *****************
   759 ;; Defined at:
   760 ;;		line 57 in file "main.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;  i               2   35[BANK0 ] int 
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   776 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   777 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   778 ;;Total ram usage:        4 bytes
   779 ;; Hardware stack levels required when called:    8
   780 ;; This function calls:
   781 ;;		_Bolt_dispense
   782 ;;		_Bolt_remain
   783 ;;		_I2C_init
   784 ;;		_Nut_dispense
   785 ;;		_Nut_remain
   786 ;;		_Spacer_dispense
   787 ;;		_Spacer_remain
   788 ;;		_Washer_dispense
   789 ;;		_Washer_remain
   790 ;;		_initLCD
   791 ;;		_lcdInst
   792 ;;		_printf
   793 ;; This function is called by:
   794 ;;		Startup code after reset
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text0
   799  001076                     __ptext0:
   800                           	opt stack 0
   801  001076                     _main:
   802                           	opt stack 23
   803                           
   804                           ;main.c: 64: OSCCONbits.IRCF2 = 1;
   805                           
   806                           ;incstack = 0
   807  001076  8CD3               	bsf	4051,6,c	;volatile
   808                           
   809                           ;main.c: 65: OSCCONbits.IRCF1 = 1;
   810  001078  8AD3               	bsf	4051,5,c	;volatile
   811                           
   812                           ;main.c: 66: OSCCONbits.IRCF0 = 1;
   813  00107A  88D3               	bsf	4051,4,c	;volatile
   814                           
   815                           ;main.c: 67: OSCCONbits.SCS1 = 1;
   816  00107C  82D3               	bsf	4051,1,c	;volatile
   817                           
   818                           ;main.c: 68: OSCTUNEbits.PLLEN = 1;
   819  00107E  8C9B               	bsf	3995,6,c	;volatile
   820                           
   821                           ;main.c: 72: LATA = 0x00;
   822  001080  0E00               	movlw	0
   823  001082  6E89               	movwf	3977,c	;volatile
   824                           
   825                           ;main.c: 73: LATB = 0x00;
   826  001084  0E00               	movlw	0
   827  001086  6E8A               	movwf	3978,c	;volatile
   828                           
   829                           ;main.c: 74: LATC = 0x00;
   830  001088  0E00               	movlw	0
   831  00108A  6E8B               	movwf	3979,c	;volatile
   832                           
   833                           ;main.c: 75: LATD = 0x00;
   834  00108C  0E00               	movlw	0
   835  00108E  6E8C               	movwf	3980,c	;volatile
   836                           
   837                           ;main.c: 76: LATE = 0x00;
   838  001090  0E00               	movlw	0
   839  001092  6E8D               	movwf	3981,c	;volatile
   840                           
   841                           ;main.c: 80: TRISA = 0xFF;
   842  001094  6892               	setf	3986,c	;volatile
   843                           
   844                           ;main.c: 81: TRISB = 0xFF;
   845  001096  6893               	setf	3987,c	;volatile
   846                           
   847                           ;main.c: 82: TRISC = 0x00;
   848  001098  0E00               	movlw	0
   849  00109A  6E94               	movwf	3988,c	;volatile
   850                           
   851                           ;main.c: 83: TRISD = 0x00;
   852  00109C  0E00               	movlw	0
   853  00109E  6E95               	movwf	3989,c	;volatile
   854                           
   855                           ;main.c: 84: TRISE = 0x00;
   856  0010A0  0E00               	movlw	0
   857  0010A2  6E96               	movwf	3990,c	;volatile
   858                           
   859                           ;main.c: 87: ADCON0 = 0x00;
   860  0010A4  0E00               	movlw	0
   861  0010A6  6EC2               	movwf	4034,c	;volatile
   862                           
   863                           ;main.c: 88: ADCON1 = 0b00001111;
   864  0010A8  0E0F               	movlw	15
   865  0010AA  6EC1               	movwf	4033,c	;volatile
   866                           
   867                           ;main.c: 89: ADCON2bits.ADFM = 1;
   868  0010AC  8EC0               	bsf	4032,7,c	;volatile
   869                           
   870                           ;main.c: 94: (INTCONbits.GIE = 1);
   871  0010AE  8EF2               	bsf	intcon,7,c	;volatile
   872                           
   873                           ;main.c: 95: initLCD();
   874  0010B0  EC4C  F00E         	call	_initLCD	;wreg free
   875                           
   876                           ;main.c: 96: I2C_init();
   877  0010B4  ECFB  F00E         	call	_I2C_init	;wreg free
   878                           
   879                           ;main.c: 98: LATCbits.LATC0 = 1;
   880  0010B8  808B               	bsf	3979,0,c	;volatile
   881                           
   882                           ;main.c: 99: TRISCbits.RC0 = 0;
   883  0010BA  9094               	bcf	3988,0,c	;volatile
   884                           
   885                           ;main.c: 101: RBIE = 1;
   886  0010BC  86F2               	bsf	intcon,3,c	;volatile
   887                           
   888                           ;main.c: 104: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   889  0010BE  0E11               	movlw	low STR_1
   890  0010C0  0100               	movlb	0	; () banked
   891  0010C2  6FCC               	movwf	printf@f& (0+255),b
   892  0010C4  0E10               	movlw	high STR_1
   893  0010C6  6FCD               	movwf	(printf@f+1)& (0+255),b
   894  0010C8  C040  F0CE         	movff	_B_count,?_printf+2
   895  0010CC  C041  F0CF         	movff	_B_count+1,?_printf+3
   896  0010D0  C03E  F0D0         	movff	_N_count,?_printf+4
   897  0010D4  C03F  F0D1         	movff	_N_count+1,?_printf+5
   898  0010D8  C03C  F0D2         	movff	_S_count,?_printf+6
   899  0010DC  C03D  F0D3         	movff	_S_count+1,?_printf+7
   900  0010E0  C03A  F0D4         	movff	_W_count,?_printf+8
   901  0010E4  C03B  F0D5         	movff	_W_count+1,?_printf+9
   902  0010E8  EC4A  F00A         	call	_printf	;wreg free
   903                           
   904                           ;main.c: 105: initLCD();
   905  0010EC  EC4C  F00E         	call	_initLCD	;wreg free
   906                           
   907                           ;main.c: 107: TRISBbits.RB5 = 1;
   908  0010F0  8A93               	bsf	3987,5,c	;volatile
   909                           
   910                           ;main.c: 108: TRISBbits.RB7 = 1;
   911  0010F2  8E93               	bsf	3987,7,c	;volatile
   912                           
   913                           ;main.c: 109: TRISBbits.RB6 = 1;
   914  0010F4  8C93               	bsf	3987,6,c	;volatile
   915                           
   916                           ;main.c: 110: TRISBbits.RB4 = 1;
   917  0010F6  8893               	bsf	3987,4,c	;volatile
   918                           
   919                           ;main.c: 112: for (int i = 0; i< 8; i++){
   920  0010F8  0E00               	movlw	0
   921  0010FA  0100               	movlb	0	; () banked
   922  0010FC  6FE4               	movwf	(main@i+1)& (0+255),b
   923  0010FE  0E00               	movlw	0
   924  001100  6FE3               	movwf	main@i& (0+255),b
   925                           
   926                           ; BSR set to: 0
   927  001102  BFE4               	btfsc	(main@i+1)& (0+255),7,b
   928  001104  D008               	goto	l198
   929  001106  51E4               	movf	(main@i+1)& (0+255),w,b
   930  001108  E105               	bnz	u1560
   931  00110A  0E08               	movlw	8
   932  00110C  5DE3               	subwf	main@i& (0+255),w,b
   933  00110E  B0D8               	btfsc	status,0,c
   934  001110  D081               	goto	u1580
   935  001112  D001               	goto	l198
   936  001114                     u1560:
   937                           
   938                           ; BSR set to: 0
   939  001114  D07F               	goto	u1580
   940  001116                     l198:
   941                           
   942                           ; BSR set to: 0
   943                           ;main.c: 113: initLCD();
   944                           
   945                           ; BSR set to: 0
   946  001116  EC4C  F00E         	call	_initLCD	;wreg free
   947                           
   948                           ;main.c: 114: printf("processing C%d",i);
   949  00111A  0E49               	movlw	low STR_2
   950  00111C  0100               	movlb	0	; () banked
   951  00111E  6FCC               	movwf	printf@f& (0+255),b
   952  001120  0E10               	movlw	high STR_2
   953  001122  6FCD               	movwf	(printf@f+1)& (0+255),b
   954  001124  C0E3  F0CE         	movff	main@i,?_printf+2
   955  001128  C0E4  F0CF         	movff	main@i+1,?_printf+3
   956  00112C  EC4A  F00A         	call	_printf	;wreg free
   957                           
   958                           ;main.c: 115: _delay((unsigned long)((80)*(32000000/4000.0)));
   959  001130  0E04               	movlw	4
   960  001132  0100               	movlb	0	; () banked
   961  001134  6FE2               	movwf	(??_main+1)& (0+255),b
   962  001136  0E40               	movlw	64
   963  001138  6FE1               	movwf	??_main& (0+255),b
   964  00113A  0E26               	movlw	38
   965  00113C                     u1607:
   966  00113C  2EE8               	decfsz	wreg,f,c
   967  00113E  D7FE               	bra	u1607
   968  001140  2FE1               	decfsz	??_main& (0+255),f,b
   969  001142  D7FC               	bra	u1607
   970  001144  2FE2               	decfsz	(??_main+1)& (0+255),f,b
   971  001146  D7FA               	bra	u1607
   972  001148  F000               	nop	
   973                           
   974                           ;main.c: 116: if (compartment_array[i] == 1){
   975  00114A  90D8               	bcf	status,0,c
   976  00114C  0100               	movlb	0	; () banked
   977  00114E  35E3               	rlcf	main@i& (0+255),w,b
   978  001150  6ED9               	movwf	fsr2l,c
   979  001152  35E4               	rlcf	(main@i+1)& (0+255),w,b
   980  001154  6EDA               	movwf	fsr2h,c
   981  001156  0E44               	movlw	low _compartment_array
   982  001158  26D9               	addwf	fsr2l,f,c
   983  00115A  0E00               	movlw	high _compartment_array
   984  00115C  22DA               	addwfc	fsr2h,f,c
   985  00115E  04DE               	decf	postinc2,w,c
   986  001160  10DE               	iorwf	postinc2,w,c
   987  001162  A4D8               	btfss	status,2,c
   988  001164  D04F               	goto	l200
   989                           
   990                           ; BSR set to: 0
   991                           ;main.c: 117: B_count = 0;
   992  001166  0E00               	movlw	0
   993  001168  6E41               	movwf	_B_count+1,c
   994  00116A  0E00               	movlw	0
   995  00116C  6E40               	movwf	_B_count,c
   996                           
   997                           ;main.c: 118: N_count = 0;
   998  00116E  0E00               	movlw	0
   999  001170  6E3F               	movwf	_N_count+1,c
  1000  001172  0E00               	movlw	0
  1001  001174  6E3E               	movwf	_N_count,c
  1002                           
  1003                           ;main.c: 119: S_count = 0;
  1004  001176  0E00               	movlw	0
  1005  001178  6E3D               	movwf	_S_count+1,c
  1006  00117A  0E00               	movlw	0
  1007  00117C  6E3C               	movwf	_S_count,c
  1008                           
  1009                           ;main.c: 120: W_count = 0;
  1010  00117E  0E00               	movlw	0
  1011  001180  6E3B               	movwf	_W_count+1,c
  1012  001182  0E00               	movlw	0
  1013  001184  6E3A               	movwf	_W_count,c
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;main.c: 121: Bolt_dispense(B_array[i]);
  1017  001186  90D8               	bcf	status,0,c
  1018  001188  35E3               	rlcf	main@i& (0+255),w,b
  1019  00118A  6ED9               	movwf	fsr2l,c
  1020  00118C  35E4               	rlcf	(main@i+1)& (0+255),w,b
  1021  00118E  6EDA               	movwf	fsr2h,c
  1022  001190  0EB0               	movlw	low _B_array
  1023  001192  26D9               	addwf	fsr2l,f,c
  1024  001194  0E00               	movlw	high _B_array
  1025  001196  22DA               	addwfc	fsr2h,f,c
  1026  001198  CFDE F0DE          	movff	postinc2,Bolt_dispense@B_max
  1027  00119C  CFDD F0DF          	movff	postdec2,Bolt_dispense@B_max+1
  1028  0011A0  EC94  F00D         	call	_Bolt_dispense	;wreg free
  1029                           
  1030                           ;main.c: 122: Nut_dispense(N_array[i]);
  1031  0011A4  90D8               	bcf	status,0,c
  1032  0011A6  0100               	movlb	0	; () banked
  1033  0011A8  35E3               	rlcf	main@i& (0+255),w,b
  1034  0011AA  6ED9               	movwf	fsr2l,c
  1035  0011AC  35E4               	rlcf	(main@i+1)& (0+255),w,b
  1036  0011AE  6EDA               	movwf	fsr2h,c
  1037  0011B0  0E90               	movlw	low _N_array
  1038  0011B2  26D9               	addwf	fsr2l,f,c
  1039  0011B4  0E00               	movlw	high _N_array
  1040  0011B6  22DA               	addwfc	fsr2h,f,c
  1041  0011B8  CFDE F0DE          	movff	postinc2,Nut_dispense@N_max
  1042  0011BC  CFDD F0DF          	movff	postdec2,Nut_dispense@N_max+1
  1043  0011C0  EC1C  F00D         	call	_Nut_dispense	;wreg free
  1044                           
  1045                           ;main.c: 123: Spacer_dispense(S_array[i]);
  1046  0011C4  90D8               	bcf	status,0,c
  1047  0011C6  0100               	movlb	0	; () banked
  1048  0011C8  35E3               	rlcf	main@i& (0+255),w,b
  1049  0011CA  6ED9               	movwf	fsr2l,c
  1050  0011CC  35E4               	rlcf	(main@i+1)& (0+255),w,b
  1051  0011CE  6EDA               	movwf	fsr2h,c
  1052  0011D0  0EA0               	movlw	low _S_array
  1053  0011D2  26D9               	addwf	fsr2l,f,c
  1054  0011D4  0E00               	movlw	high _S_array
  1055  0011D6  22DA               	addwfc	fsr2h,f,c
  1056  0011D8  CFDE F0DE          	movff	postinc2,Spacer_dispense@S_max
  1057  0011DC  CFDD F0DF          	movff	postdec2,Spacer_dispense@S_max+1
  1058  0011E0  ECA4  F00C         	call	_Spacer_dispense	;wreg free
  1059                           
  1060                           ;main.c: 124: Washer_dispense(W_array[i]);
  1061  0011E4  90D8               	bcf	status,0,c
  1062  0011E6  0100               	movlb	0	; () banked
  1063  0011E8  35E3               	rlcf	main@i& (0+255),w,b
  1064  0011EA  6ED9               	movwf	fsr2l,c
  1065  0011EC  35E4               	rlcf	(main@i+1)& (0+255),w,b
  1066  0011EE  6EDA               	movwf	fsr2h,c
  1067  0011F0  0E80               	movlw	low _W_array
  1068  0011F2  26D9               	addwf	fsr2l,f,c
  1069  0011F4  0E00               	movlw	high _W_array
  1070  0011F6  22DA               	addwfc	fsr2h,f,c
  1071  0011F8  CFDE F0DE          	movff	postinc2,Washer_dispense@W_max
  1072  0011FC  CFDD F0DF          	movff	postdec2,Washer_dispense@W_max+1
  1073  001200  EC2C  F00C         	call	_Washer_dispense	;wreg free
  1074  001204                     l200:
  1075  001204  0100               	movlb	0	; () banked
  1076  001206  4BE3               	infsnz	main@i& (0+255),f,b
  1077  001208  2BE4               	incf	(main@i+1)& (0+255),f,b
  1078                           
  1079                           ; BSR set to: 0
  1080  00120A  BFE4               	btfsc	(main@i+1)& (0+255),7,b
  1081  00120C  D784               	goto	l198
  1082  00120E  51E4               	movf	(main@i+1)& (0+255),w,b
  1083  001210  E101               	bnz	l2688
  1084  001212  D77B               	goto	L1
  1085  001214                     u1580:
  1086  001214                     l2688:
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;main.c: 125: }
  1090                           ;main.c: 127: }
  1091                           ;main.c: 132: _delay((unsigned long)((300)*(32000000/4000.0)));
  1092  001214  0E0D               	movlw	13
  1093  001216  0100               	movlb	0	; () banked
  1094  001218  6FE2               	movwf	(??_main+1)& (0+255),b
  1095  00121A  0E2D               	movlw	45
  1096  00121C  6FE1               	movwf	??_main& (0+255),b
  1097  00121E  0ED7               	movlw	215
  1098  001220                     u1617:
  1099  001220  2EE8               	decfsz	wreg,f,c
  1100  001222  D7FE               	bra	u1617
  1101  001224  2FE1               	decfsz	??_main& (0+255),f,b
  1102  001226  D7FC               	bra	u1617
  1103  001228  2FE2               	decfsz	(??_main+1)& (0+255),f,b
  1104  00122A  D7FA               	bra	u1617
  1105  00122C  D000               	nop2	
  1106                           
  1107                           ;main.c: 134: Bolt_remain(spacingTime);
  1108  00122E  C056  F0DE         	movff	_spacingTime,Bolt_remain@time
  1109  001232  C057  F0DF         	movff	_spacingTime+1,Bolt_remain@time+1
  1110  001236  EC58  F00D         	call	_Bolt_remain	;wreg free
  1111                           
  1112                           ;main.c: 135: Nut_remain(spacingTime);
  1113  00123A  C056  F0DE         	movff	_spacingTime,Nut_remain@time
  1114  00123E  C057  F0DF         	movff	_spacingTime+1,Nut_remain@time+1
  1115  001242  ECE0  F00C         	call	_Nut_remain	;wreg free
  1116                           
  1117                           ;main.c: 136: Spacer_remain(spacingTime);
  1118  001246  C056  F0DE         	movff	_spacingTime,Spacer_remain@time
  1119  00124A  C057  F0DF         	movff	_spacingTime+1,Spacer_remain@time+1
  1120  00124E  EC68  F00C         	call	_Spacer_remain	;wreg free
  1121                           
  1122                           ;main.c: 137: Washer_remain(spacingTime);
  1123  001252  C056  F0DE         	movff	_spacingTime,Washer_remain@time
  1124  001256  C057  F0DF         	movff	_spacingTime+1,Washer_remain@time+1
  1125  00125A  ECF0  F00B         	call	_Washer_remain	;wreg free
  1126                           
  1127                           ;main.c: 140: initLCD();
  1128  00125E  EC4C  F00E         	call	_initLCD	;wreg free
  1129                           
  1130                           ;main.c: 141: RBIE = 0;
  1131  001262  96F2               	bcf	intcon,3,c	;volatile
  1132  001264                     
  1133                           ;main.c: 145: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  1134  001264  0E11               	movlw	low STR_1
  1135  001266  0100               	movlb	0	; () banked
  1136  001268  6FCC               	movwf	printf@f& (0+255),b
  1137  00126A  0E10               	movlw	high STR_1
  1138  00126C  6FCD               	movwf	(printf@f+1)& (0+255),b
  1139  00126E  C040  F0CE         	movff	_B_count,?_printf+2
  1140  001272  C041  F0CF         	movff	_B_count+1,?_printf+3
  1141  001276  C03E  F0D0         	movff	_N_count,?_printf+4
  1142  00127A  C03F  F0D1         	movff	_N_count+1,?_printf+5
  1143  00127E  C03C  F0D2         	movff	_S_count,?_printf+6
  1144  001282  C03D  F0D3         	movff	_S_count+1,?_printf+7
  1145  001286  C03A  F0D4         	movff	_W_count,?_printf+8
  1146  00128A  C03B  F0D5         	movff	_W_count+1,?_printf+9
  1147  00128E  EC4A  F00A         	call	_printf	;wreg free
  1148                           
  1149                           ;main.c: 146: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  1150  001292  0E80               	movlw	128
  1151  001294  EC3E  F00F         	call	_lcdInst
  1152  001298  0E34               	movlw	52
  1153  00129A  0100               	movlb	0	; () banked
  1154  00129C  6FE1               	movwf	??_main& (0+255),b
  1155  00129E  0EF1               	movlw	241
  1156  0012A0                     u1627:
  1157  0012A0  2EE8               	decfsz	wreg,f,c
  1158  0012A2  D7FE               	bra	u1627
  1159  0012A4  2FE1               	decfsz	??_main& (0+255),f,b
  1160  0012A6  D7FC               	bra	u1627
  1161  0012A8  D000               	nop2	
  1162  0012AA  D7DC               	goto	l201
  1163  0012AC                     __end_of_main:
  1164                           	opt stack 0
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           intcon	equ	0xFF2
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           fsr1l	equ	0xFE1
  1174                           postinc2	equ	0xFDE
  1175                           postdec2	equ	0xFDD
  1176                           fsr2h	equ	0xFDA
  1177                           fsr2l	equ	0xFD9
  1178                           status	equ	0xFD8
  1179                           
  1180 ;; *************** function _Washer_remain *****************
  1181 ;; Defined at:
  1182 ;;		line 367 in file "main.c"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;  time            2   30[BANK0 ] int 
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;		None
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      void 
  1189 ;; Registers used:
  1190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1191 ;; Tracked objects:
  1192 ;;		On entry : 0/0
  1193 ;;		On exit  : 0/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1196 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;Total ram usage:        3 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; Hardware stack levels required when called:    7
  1203 ;; This function calls:
  1204 ;;		_I2C_sendData
  1205 ;;		_initLCD
  1206 ;;		_lcdInst
  1207 ;;		_printf
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text1
  1214  0017E0                     __ptext1:
  1215                           	opt stack 0
  1216  0017E0                     _Washer_remain:
  1217                           	opt stack 23
  1218                           
  1219                           ;main.c: 368: I2C_sendData(11);
  1220                           
  1221                           ;incstack = 0
  1222  0017E0  0E0B               	movlw	11
  1223  0017E2  EC12  F00F         	call	_I2C_sendData
  1224  0017E6                     l278:
  1225                           
  1226                           ;main.c: 370: initLCD();
  1227  0017E6  EC4C  F00E         	call	_initLCD	;wreg free
  1228                           
  1229                           ;main.c: 371: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  1230  0017EA  0E80               	movlw	128
  1231  0017EC  EC3E  F00F         	call	_lcdInst
  1232  0017F0  0E34               	movlw	52
  1233  0017F2  0100               	movlb	0	; () banked
  1234  0017F4  6FE0               	movwf	??_Washer_remain& (0+255),b
  1235  0017F6  0EF1               	movlw	241
  1236  0017F8                     u1637:
  1237  0017F8  2EE8               	decfsz	wreg,f,c
  1238  0017FA  D7FE               	bra	u1637
  1239  0017FC  2FE0               	decfsz	??_Washer_remain& (0+255),f,b
  1240  0017FE  D7FC               	bra	u1637
  1241  001800  D000               	nop2	
  1242                           
  1243                           ;main.c: 372: if (W_spacingTime >= time){
  1244  001802  0100               	movlb	0	; () banked
  1245  001804  51DE               	movf	Washer_remain@time& (0+255),w,b
  1246  001806  5C2A               	subwf	_W_spacingTime,w,c
  1247  001808  502B               	movf	_W_spacingTime+1,w,c
  1248  00180A  0A80               	xorlw	128
  1249  00180C  6FE0               	movwf	??_Washer_remain& (0+255),b
  1250  00180E  51DF               	movf	(Washer_remain@time+1)& (0+255),w,b
  1251  001810  0A80               	xorlw	128
  1252  001812  59E0               	subwfb	??_Washer_remain& (0+255),w,b
  1253  001814  A0D8               	btfss	status,0,c
  1254  001816  D004               	goto	l279
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;main.c: 373: I2C_sendData(12);
  1258  001818  0E0C               	movlw	12
  1259  00181A  EC12  F00F         	call	_I2C_sendData
  1260                           
  1261                           ;main.c: 374: break;
  1262  00181E  0012               	return	
  1263  001820                     l279:
  1264                           
  1265                           ;main.c: 375: }
  1266                           ;main.c: 376: W_spacingTime +=100;
  1267  001820  0E64               	movlw	100
  1268  001822  262A               	addwf	_W_spacingTime,f,c
  1269  001824  0E00               	movlw	0
  1270  001826  222B               	addwfc	_W_spacingTime+1,f,c
  1271                           
  1272                           ;main.c: 377: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  1273  001828  0E11               	movlw	low STR_1
  1274  00182A  0100               	movlb	0	; () banked
  1275  00182C  6FCC               	movwf	printf@f& (0+255),b
  1276  00182E  0E10               	movlw	high STR_1
  1277  001830  6FCD               	movwf	(printf@f+1)& (0+255),b
  1278  001832  C040  F0CE         	movff	_B_count,?_printf+2
  1279  001836  C041  F0CF         	movff	_B_count+1,?_printf+3
  1280  00183A  C03E  F0D0         	movff	_N_count,?_printf+4
  1281  00183E  C03F  F0D1         	movff	_N_count+1,?_printf+5
  1282  001842  C03C  F0D2         	movff	_S_count,?_printf+6
  1283  001846  C03D  F0D3         	movff	_S_count+1,?_printf+7
  1284  00184A  C03A  F0D4         	movff	_W_count,?_printf+8
  1285  00184E  C03B  F0D5         	movff	_W_count+1,?_printf+9
  1286  001852  EC4A  F00A         	call	_printf	;wreg free
  1287  001856  D7C7               	goto	l278
  1288  001858                     __end_of_Washer_remain:
  1289                           	opt stack 0
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           intcon	equ	0xFF2
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           postdec1	equ	0xFE5
  1298                           fsr1l	equ	0xFE1
  1299                           postinc2	equ	0xFDE
  1300                           postdec2	equ	0xFDD
  1301                           fsr2h	equ	0xFDA
  1302                           fsr2l	equ	0xFD9
  1303                           status	equ	0xFD8
  1304                           
  1305 ;; *************** function _Washer_dispense *****************
  1306 ;; Defined at:
  1307 ;;		line 305 in file "main.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  W_max           2   30[BANK0 ] int 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;		None
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1321 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;Total ram usage:        3 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    7
  1328 ;; This function calls:
  1329 ;;		_I2C_sendData
  1330 ;;		_initLCD
  1331 ;;		_lcdInst
  1332 ;;		_printf
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text2
  1339  001858                     __ptext2:
  1340                           	opt stack 0
  1341  001858                     _Washer_dispense:
  1342                           	opt stack 23
  1343                           
  1344                           ;main.c: 306: I2C_sendData(11);
  1345                           
  1346                           ;incstack = 0
  1347  001858  0E0B               	movlw	11
  1348  00185A  EC12  F00F         	call	_I2C_sendData
  1349                           
  1350                           ;main.c: 307: W_count = 0;
  1351  00185E  0E00               	movlw	0
  1352  001860  6E3B               	movwf	_W_count+1,c
  1353  001862  0E00               	movlw	0
  1354  001864  6E3A               	movwf	_W_count,c
  1355  001866                     
  1356                           ;main.c: 309: initLCD();
  1357  001866  EC4C  F00E         	call	_initLCD	;wreg free
  1358                           
  1359                           ;main.c: 310: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  1360  00186A  0E80               	movlw	128
  1361  00186C  EC3E  F00F         	call	_lcdInst
  1362  001870  0E34               	movlw	52
  1363  001872  0100               	movlb	0	; () banked
  1364  001874  6FE0               	movwf	??_Washer_dispense& (0+255),b
  1365  001876  0EF1               	movlw	241
  1366  001878                     u1647:
  1367  001878  2EE8               	decfsz	wreg,f,c
  1368  00187A  D7FE               	bra	u1647
  1369  00187C  2FE0               	decfsz	??_Washer_dispense& (0+255),f,b
  1370  00187E  D7FC               	bra	u1647
  1371  001880  D000               	nop2	
  1372                           
  1373                           ;main.c: 311: if (W_count >= W_max){
  1374  001882  0100               	movlb	0	; () banked
  1375  001884  51DE               	movf	Washer_dispense@W_max& (0+255),w,b
  1376  001886  5C3A               	subwf	_W_count,w,c
  1377  001888  503B               	movf	_W_count+1,w,c
  1378  00188A  0A80               	xorlw	128
  1379  00188C  6FE0               	movwf	??_Washer_dispense& (0+255),b
  1380  00188E  51DF               	movf	(Washer_dispense@W_max+1)& (0+255),w,b
  1381  001890  0A80               	xorlw	128
  1382  001892  59E0               	subwfb	??_Washer_dispense& (0+255),w,b
  1383  001894  A0D8               	btfss	status,0,c
  1384  001896  D004               	goto	l251
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 312: I2C_sendData(12);
  1388  001898  0E0C               	movlw	12
  1389  00189A  EC12  F00F         	call	_I2C_sendData
  1390                           
  1391                           ;main.c: 313: break;
  1392  00189E  0012               	return	
  1393  0018A0                     l251:
  1394                           
  1395                           ;main.c: 314: }
  1396                           ;main.c: 315: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  1397  0018A0  0E11               	movlw	low STR_1
  1398  0018A2  0100               	movlb	0	; () banked
  1399  0018A4  6FCC               	movwf	printf@f& (0+255),b
  1400  0018A6  0E10               	movlw	high STR_1
  1401  0018A8  6FCD               	movwf	(printf@f+1)& (0+255),b
  1402  0018AA  C040  F0CE         	movff	_B_count,?_printf+2
  1403  0018AE  C041  F0CF         	movff	_B_count+1,?_printf+3
  1404  0018B2  C03E  F0D0         	movff	_N_count,?_printf+4
  1405  0018B6  C03F  F0D1         	movff	_N_count+1,?_printf+5
  1406  0018BA  C03C  F0D2         	movff	_S_count,?_printf+6
  1407  0018BE  C03D  F0D3         	movff	_S_count+1,?_printf+7
  1408  0018C2  C03A  F0D4         	movff	_W_count,?_printf+8
  1409  0018C6  C03B  F0D5         	movff	_W_count+1,?_printf+9
  1410  0018CA  EC4A  F00A         	call	_printf	;wreg free
  1411  0018CE  D7CB               	goto	l250
  1412  0018D0                     __end_of_Washer_dispense:
  1413                           	opt stack 0
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           intcon	equ	0xFF2
  1419                           postinc0	equ	0xFEE
  1420                           wreg	equ	0xFE8
  1421                           postdec1	equ	0xFE5
  1422                           fsr1l	equ	0xFE1
  1423                           postinc2	equ	0xFDE
  1424                           postdec2	equ	0xFDD
  1425                           fsr2h	equ	0xFDA
  1426                           fsr2l	equ	0xFD9
  1427                           status	equ	0xFD8
  1428                           
  1429 ;; *************** function _Spacer_remain *****************
  1430 ;; Defined at:
  1431 ;;		line 352 in file "main.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;  time            2   30[BANK0 ] int 
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1445 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1449 ;;Total ram usage:        3 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    7
  1452 ;; This function calls:
  1453 ;;		_I2C_sendData
  1454 ;;		_initLCD
  1455 ;;		_lcdInst
  1456 ;;		_printf
  1457 ;; This function is called by:
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text3
  1463  0018D0                     __ptext3:
  1464                           	opt stack 0
  1465  0018D0                     _Spacer_remain:
  1466                           	opt stack 23
  1467                           
  1468                           ;main.c: 353: I2C_sendData('9');
  1469                           
  1470                           ;incstack = 0
  1471  0018D0  0E39               	movlw	57
  1472  0018D2  EC12  F00F         	call	_I2C_sendData
  1473  0018D6                     l271:
  1474                           
  1475                           ;main.c: 355: initLCD();
  1476  0018D6  EC4C  F00E         	call	_initLCD	;wreg free
  1477                           
  1478                           ;main.c: 356: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  1479  0018DA  0E80               	movlw	128
  1480  0018DC  EC3E  F00F         	call	_lcdInst
  1481  0018E0  0E34               	movlw	52
  1482  0018E2  0100               	movlb	0	; () banked
  1483  0018E4  6FE0               	movwf	??_Spacer_remain& (0+255),b
  1484  0018E6  0EF1               	movlw	241
  1485  0018E8                     u1657:
  1486  0018E8  2EE8               	decfsz	wreg,f,c
  1487  0018EA  D7FE               	bra	u1657
  1488  0018EC  2FE0               	decfsz	??_Spacer_remain& (0+255),f,b
  1489  0018EE  D7FC               	bra	u1657
  1490  0018F0  D000               	nop2	
  1491                           
  1492                           ;main.c: 357: if (S_spacingTime >= time){
  1493  0018F2  0100               	movlb	0	; () banked
  1494  0018F4  51DE               	movf	Spacer_remain@time& (0+255),w,b
  1495  0018F6  5C2C               	subwf	_S_spacingTime,w,c
  1496  0018F8  502D               	movf	_S_spacingTime+1,w,c
  1497  0018FA  0A80               	xorlw	128
  1498  0018FC  6FE0               	movwf	??_Spacer_remain& (0+255),b
  1499  0018FE  51DF               	movf	(Spacer_remain@time+1)& (0+255),w,b
  1500  001900  0A80               	xorlw	128
  1501  001902  59E0               	subwfb	??_Spacer_remain& (0+255),w,b
  1502  001904  A0D8               	btfss	status,0,c
  1503  001906  D004               	goto	l272
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 358: I2C_sendData(10);
  1507  001908  0E0A               	movlw	10
  1508  00190A  EC12  F00F         	call	_I2C_sendData
  1509                           
  1510                           ;main.c: 359: break;
  1511  00190E  0012               	return	
  1512  001910                     l272:
  1513                           
  1514                           ;main.c: 360: }
  1515                           ;main.c: 361: S_spacingTime +=100;
  1516  001910  0E64               	movlw	100
  1517  001912  262C               	addwf	_S_spacingTime,f,c
  1518  001914  0E00               	movlw	0
  1519  001916  222D               	addwfc	_S_spacingTime+1,f,c
  1520                           
  1521                           ;main.c: 362: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  1522  001918  0E11               	movlw	low STR_1
  1523  00191A  0100               	movlb	0	; () banked
  1524  00191C  6FCC               	movwf	printf@f& (0+255),b
  1525  00191E  0E10               	movlw	high STR_1
  1526  001920  6FCD               	movwf	(printf@f+1)& (0+255),b
  1527  001922  C040  F0CE         	movff	_B_count,?_printf+2
  1528  001926  C041  F0CF         	movff	_B_count+1,?_printf+3
  1529  00192A  C03E  F0D0         	movff	_N_count,?_printf+4
  1530  00192E  C03F  F0D1         	movff	_N_count+1,?_printf+5
  1531  001932  C03C  F0D2         	movff	_S_count,?_printf+6
  1532  001936  C03D  F0D3         	movff	_S_count+1,?_printf+7
  1533  00193A  C03A  F0D4         	movff	_W_count,?_printf+8
  1534  00193E  C03B  F0D5         	movff	_W_count+1,?_printf+9
  1535  001942  EC4A  F00A         	call	_printf	;wreg free
  1536  001946  D7C7               	goto	l271
  1537  001948                     __end_of_Spacer_remain:
  1538                           	opt stack 0
  1539                           tblptru	equ	0xFF8
  1540                           tblptrh	equ	0xFF7
  1541                           tblptrl	equ	0xFF6
  1542                           tablat	equ	0xFF5
  1543                           intcon	equ	0xFF2
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           postdec1	equ	0xFE5
  1547                           fsr1l	equ	0xFE1
  1548                           postinc2	equ	0xFDE
  1549                           postdec2	equ	0xFDD
  1550                           fsr2h	equ	0xFDA
  1551                           fsr2l	equ	0xFD9
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function _Spacer_dispense *****************
  1555 ;; Defined at:
  1556 ;;		line 290 in file "main.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;  S_max           2   30[BANK0 ] int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1570 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;Total ram usage:        3 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    7
  1577 ;; This function calls:
  1578 ;;		_I2C_sendData
  1579 ;;		_initLCD
  1580 ;;		_lcdInst
  1581 ;;		_printf
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text4
  1588  001948                     __ptext4:
  1589                           	opt stack 0
  1590  001948                     _Spacer_dispense:
  1591                           	opt stack 23
  1592                           
  1593                           ;main.c: 291: I2C_sendData('9');
  1594                           
  1595                           ;incstack = 0
  1596  001948  0E39               	movlw	57
  1597  00194A  EC12  F00F         	call	_I2C_sendData
  1598                           
  1599                           ;main.c: 292: S_count = 0;
  1600  00194E  0E00               	movlw	0
  1601  001950  6E3D               	movwf	_S_count+1,c
  1602  001952  0E00               	movlw	0
  1603  001954  6E3C               	movwf	_S_count,c
  1604  001956                     
  1605                           ;main.c: 294: initLCD();
  1606  001956  EC4C  F00E         	call	_initLCD	;wreg free
  1607                           
  1608                           ;main.c: 295: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  1609  00195A  0E80               	movlw	128
  1610  00195C  EC3E  F00F         	call	_lcdInst
  1611  001960  0E34               	movlw	52
  1612  001962  0100               	movlb	0	; () banked
  1613  001964  6FE0               	movwf	??_Spacer_dispense& (0+255),b
  1614  001966  0EF1               	movlw	241
  1615  001968                     u1667:
  1616  001968  2EE8               	decfsz	wreg,f,c
  1617  00196A  D7FE               	bra	u1667
  1618  00196C  2FE0               	decfsz	??_Spacer_dispense& (0+255),f,b
  1619  00196E  D7FC               	bra	u1667
  1620  001970  D000               	nop2	
  1621                           
  1622                           ;main.c: 296: if (S_count >= S_max){
  1623  001972  0100               	movlb	0	; () banked
  1624  001974  51DE               	movf	Spacer_dispense@S_max& (0+255),w,b
  1625  001976  5C3C               	subwf	_S_count,w,c
  1626  001978  503D               	movf	_S_count+1,w,c
  1627  00197A  0A80               	xorlw	128
  1628  00197C  6FE0               	movwf	??_Spacer_dispense& (0+255),b
  1629  00197E  51DF               	movf	(Spacer_dispense@S_max+1)& (0+255),w,b
  1630  001980  0A80               	xorlw	128
  1631  001982  59E0               	subwfb	??_Spacer_dispense& (0+255),w,b
  1632  001984  A0D8               	btfss	status,0,c
  1633  001986  D004               	goto	l244
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;main.c: 297: I2C_sendData(10);
  1637  001988  0E0A               	movlw	10
  1638  00198A  EC12  F00F         	call	_I2C_sendData
  1639                           
  1640                           ;main.c: 298: break;
  1641  00198E  0012               	return	
  1642  001990                     l244:
  1643                           
  1644                           ;main.c: 299: }
  1645                           ;main.c: 300: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  1646  001990  0E11               	movlw	low STR_1
  1647  001992  0100               	movlb	0	; () banked
  1648  001994  6FCC               	movwf	printf@f& (0+255),b
  1649  001996  0E10               	movlw	high STR_1
  1650  001998  6FCD               	movwf	(printf@f+1)& (0+255),b
  1651  00199A  C040  F0CE         	movff	_B_count,?_printf+2
  1652  00199E  C041  F0CF         	movff	_B_count+1,?_printf+3
  1653  0019A2  C03E  F0D0         	movff	_N_count,?_printf+4
  1654  0019A6  C03F  F0D1         	movff	_N_count+1,?_printf+5
  1655  0019AA  C03C  F0D2         	movff	_S_count,?_printf+6
  1656  0019AE  C03D  F0D3         	movff	_S_count+1,?_printf+7
  1657  0019B2  C03A  F0D4         	movff	_W_count,?_printf+8
  1658  0019B6  C03B  F0D5         	movff	_W_count+1,?_printf+9
  1659  0019BA  EC4A  F00A         	call	_printf	;wreg free
  1660  0019BE  D7CB               	goto	l243
  1661  0019C0                     __end_of_Spacer_dispense:
  1662                           	opt stack 0
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           intcon	equ	0xFF2
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postdec1	equ	0xFE5
  1671                           fsr1l	equ	0xFE1
  1672                           postinc2	equ	0xFDE
  1673                           postdec2	equ	0xFDD
  1674                           fsr2h	equ	0xFDA
  1675                           fsr2l	equ	0xFD9
  1676                           status	equ	0xFD8
  1677                           
  1678 ;; *************** function _Nut_remain *****************
  1679 ;; Defined at:
  1680 ;;		line 337 in file "main.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  time            2   30[BANK0 ] int 
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1694 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;Total ram usage:        3 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; Hardware stack levels required when called:    7
  1701 ;; This function calls:
  1702 ;;		_I2C_sendData
  1703 ;;		_initLCD
  1704 ;;		_lcdInst
  1705 ;;		_printf
  1706 ;; This function is called by:
  1707 ;;		_main
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text5
  1712  0019C0                     __ptext5:
  1713                           	opt stack 0
  1714  0019C0                     _Nut_remain:
  1715                           	opt stack 23
  1716                           
  1717                           ;main.c: 338: I2C_sendData('7');
  1718                           
  1719                           ;incstack = 0
  1720  0019C0  0E37               	movlw	55
  1721  0019C2  EC12  F00F         	call	_I2C_sendData
  1722  0019C6                     l264:
  1723                           
  1724                           ;main.c: 340: initLCD();
  1725  0019C6  EC4C  F00E         	call	_initLCD	;wreg free
  1726                           
  1727                           ;main.c: 341: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  1728  0019CA  0E80               	movlw	128
  1729  0019CC  EC3E  F00F         	call	_lcdInst
  1730  0019D0  0E34               	movlw	52
  1731  0019D2  0100               	movlb	0	; () banked
  1732  0019D4  6FE0               	movwf	??_Nut_remain& (0+255),b
  1733  0019D6  0EF1               	movlw	241
  1734  0019D8                     u1677:
  1735  0019D8  2EE8               	decfsz	wreg,f,c
  1736  0019DA  D7FE               	bra	u1677
  1737  0019DC  2FE0               	decfsz	??_Nut_remain& (0+255),f,b
  1738  0019DE  D7FC               	bra	u1677
  1739  0019E0  D000               	nop2	
  1740                           
  1741                           ;main.c: 342: if (N_spacingTime >= time){
  1742  0019E2  0100               	movlb	0	; () banked
  1743  0019E4  51DE               	movf	Nut_remain@time& (0+255),w,b
  1744  0019E6  5C2E               	subwf	_N_spacingTime,w,c
  1745  0019E8  502F               	movf	_N_spacingTime+1,w,c
  1746  0019EA  0A80               	xorlw	128
  1747  0019EC  6FE0               	movwf	??_Nut_remain& (0+255),b
  1748  0019EE  51DF               	movf	(Nut_remain@time+1)& (0+255),w,b
  1749  0019F0  0A80               	xorlw	128
  1750  0019F2  59E0               	subwfb	??_Nut_remain& (0+255),w,b
  1751  0019F4  A0D8               	btfss	status,0,c
  1752  0019F6  D004               	goto	l265
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 343: I2C_sendData('8');
  1756  0019F8  0E38               	movlw	56
  1757  0019FA  EC12  F00F         	call	_I2C_sendData
  1758                           
  1759                           ;main.c: 344: break;
  1760  0019FE  0012               	return	
  1761  001A00                     l265:
  1762                           
  1763                           ;main.c: 345: }
  1764                           ;main.c: 346: N_spacingTime +=100;
  1765  001A00  0E64               	movlw	100
  1766  001A02  262E               	addwf	_N_spacingTime,f,c
  1767  001A04  0E00               	movlw	0
  1768  001A06  222F               	addwfc	_N_spacingTime+1,f,c
  1769                           
  1770                           ;main.c: 347: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  1771  001A08  0E11               	movlw	low STR_1
  1772  001A0A  0100               	movlb	0	; () banked
  1773  001A0C  6FCC               	movwf	printf@f& (0+255),b
  1774  001A0E  0E10               	movlw	high STR_1
  1775  001A10  6FCD               	movwf	(printf@f+1)& (0+255),b
  1776  001A12  C040  F0CE         	movff	_B_count,?_printf+2
  1777  001A16  C041  F0CF         	movff	_B_count+1,?_printf+3
  1778  001A1A  C03E  F0D0         	movff	_N_count,?_printf+4
  1779  001A1E  C03F  F0D1         	movff	_N_count+1,?_printf+5
  1780  001A22  C03C  F0D2         	movff	_S_count,?_printf+6
  1781  001A26  C03D  F0D3         	movff	_S_count+1,?_printf+7
  1782  001A2A  C03A  F0D4         	movff	_W_count,?_printf+8
  1783  001A2E  C03B  F0D5         	movff	_W_count+1,?_printf+9
  1784  001A32  EC4A  F00A         	call	_printf	;wreg free
  1785  001A36  D7C7               	goto	l264
  1786  001A38                     __end_of_Nut_remain:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           intcon	equ	0xFF2
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           postdec1	equ	0xFE5
  1796                           fsr1l	equ	0xFE1
  1797                           postinc2	equ	0xFDE
  1798                           postdec2	equ	0xFDD
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8
  1802                           
  1803 ;; *************** function _Nut_dispense *****************
  1804 ;; Defined at:
  1805 ;;		line 275 in file "main.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  N_max           2   30[BANK0 ] int 
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;		None
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1    wreg      void 
  1812 ;; Registers used:
  1813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1819 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;Total ram usage:        3 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    7
  1826 ;; This function calls:
  1827 ;;		_I2C_sendData
  1828 ;;		_initLCD
  1829 ;;		_lcdInst
  1830 ;;		_printf
  1831 ;; This function is called by:
  1832 ;;		_main
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text6
  1837  001A38                     __ptext6:
  1838                           	opt stack 0
  1839  001A38                     _Nut_dispense:
  1840                           	opt stack 23
  1841                           
  1842                           ;main.c: 276: I2C_sendData('7');
  1843                           
  1844                           ;incstack = 0
  1845  001A38  0E37               	movlw	55
  1846  001A3A  EC12  F00F         	call	_I2C_sendData
  1847                           
  1848                           ;main.c: 277: N_count = 0;
  1849  001A3E  0E00               	movlw	0
  1850  001A40  6E3F               	movwf	_N_count+1,c
  1851  001A42  0E00               	movlw	0
  1852  001A44  6E3E               	movwf	_N_count,c
  1853  001A46                     
  1854                           ;main.c: 279: initLCD();
  1855  001A46  EC4C  F00E         	call	_initLCD	;wreg free
  1856                           
  1857                           ;main.c: 280: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  1858  001A4A  0E80               	movlw	128
  1859  001A4C  EC3E  F00F         	call	_lcdInst
  1860  001A50  0E34               	movlw	52
  1861  001A52  0100               	movlb	0	; () banked
  1862  001A54  6FE0               	movwf	??_Nut_dispense& (0+255),b
  1863  001A56  0EF1               	movlw	241
  1864  001A58                     u1687:
  1865  001A58  2EE8               	decfsz	wreg,f,c
  1866  001A5A  D7FE               	bra	u1687
  1867  001A5C  2FE0               	decfsz	??_Nut_dispense& (0+255),f,b
  1868  001A5E  D7FC               	bra	u1687
  1869  001A60  D000               	nop2	
  1870                           
  1871                           ;main.c: 281: if (N_count >= N_max){
  1872  001A62  0100               	movlb	0	; () banked
  1873  001A64  51DE               	movf	Nut_dispense@N_max& (0+255),w,b
  1874  001A66  5C3E               	subwf	_N_count,w,c
  1875  001A68  503F               	movf	_N_count+1,w,c
  1876  001A6A  0A80               	xorlw	128
  1877  001A6C  6FE0               	movwf	??_Nut_dispense& (0+255),b
  1878  001A6E  51DF               	movf	(Nut_dispense@N_max+1)& (0+255),w,b
  1879  001A70  0A80               	xorlw	128
  1880  001A72  59E0               	subwfb	??_Nut_dispense& (0+255),w,b
  1881  001A74  A0D8               	btfss	status,0,c
  1882  001A76  D004               	goto	l237
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;main.c: 282: I2C_sendData('8');
  1886  001A78  0E38               	movlw	56
  1887  001A7A  EC12  F00F         	call	_I2C_sendData
  1888                           
  1889                           ;main.c: 283: break;
  1890  001A7E  0012               	return	
  1891  001A80                     l237:
  1892                           
  1893                           ;main.c: 284: }
  1894                           ;main.c: 285: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  1895  001A80  0E11               	movlw	low STR_1
  1896  001A82  0100               	movlb	0	; () banked
  1897  001A84  6FCC               	movwf	printf@f& (0+255),b
  1898  001A86  0E10               	movlw	high STR_1
  1899  001A88  6FCD               	movwf	(printf@f+1)& (0+255),b
  1900  001A8A  C040  F0CE         	movff	_B_count,?_printf+2
  1901  001A8E  C041  F0CF         	movff	_B_count+1,?_printf+3
  1902  001A92  C03E  F0D0         	movff	_N_count,?_printf+4
  1903  001A96  C03F  F0D1         	movff	_N_count+1,?_printf+5
  1904  001A9A  C03C  F0D2         	movff	_S_count,?_printf+6
  1905  001A9E  C03D  F0D3         	movff	_S_count+1,?_printf+7
  1906  001AA2  C03A  F0D4         	movff	_W_count,?_printf+8
  1907  001AA6  C03B  F0D5         	movff	_W_count+1,?_printf+9
  1908  001AAA  EC4A  F00A         	call	_printf	;wreg free
  1909  001AAE  D7CB               	goto	l236
  1910  001AB0                     __end_of_Nut_dispense:
  1911                           	opt stack 0
  1912                           tblptru	equ	0xFF8
  1913                           tblptrh	equ	0xFF7
  1914                           tblptrl	equ	0xFF6
  1915                           tablat	equ	0xFF5
  1916                           intcon	equ	0xFF2
  1917                           postinc0	equ	0xFEE
  1918                           wreg	equ	0xFE8
  1919                           postdec1	equ	0xFE5
  1920                           fsr1l	equ	0xFE1
  1921                           postinc2	equ	0xFDE
  1922                           postdec2	equ	0xFDD
  1923                           fsr2h	equ	0xFDA
  1924                           fsr2l	equ	0xFD9
  1925                           status	equ	0xFD8
  1926                           
  1927 ;; *************** function _I2C_init *****************
  1928 ;; Defined at:
  1929 ;;		line 248 in file "main.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;		None
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;		None
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  1    wreg      void 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;Total ram usage:        0 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    6
  1950 ;; This function calls:
  1951 ;;		_I2C_Master_Init
  1952 ;;		_I2C_Master_Start
  1953 ;;		_I2C_Master_Stop
  1954 ;;		_I2C_Master_Write
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text7
  1961  001DF6                     __ptext7:
  1962                           	opt stack 0
  1963  001DF6                     _I2C_init:
  1964                           	opt stack 24
  1965                           
  1966                           ;main.c: 249: I2C_Master_Init(100000);
  1967                           
  1968                           ;incstack = 0
  1969  001DF6  0EA0               	movlw	160
  1970  001DF8  0100               	movlb	0	; () banked
  1971  001DFA  6FC0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  1972  001DFC  0E86               	movlw	134
  1973  001DFE  6FC1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  1974  001E00  0E01               	movlw	1
  1975  001E02  6FC2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  1976  001E04  0E00               	movlw	0
  1977  001E06  6FC3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  1978  001E08  EC26  F00F         	call	_I2C_Master_Init	;wreg free
  1979                           
  1980                           ;main.c: 250: I2C_Master_Start();
  1981  001E0C  EC7B  F00F         	call	_I2C_Master_Start	;wreg free
  1982                           
  1983                           ;main.c: 251: I2C_Master_Write(0b00010000);
  1984  001E10  0E00               	movlw	0
  1985  001E12  0100               	movlb	0	; () banked
  1986  001E14  6FC2               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  1987  001E16  0E10               	movlw	16
  1988  001E18  6FC1               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  1989  001E1A  EC72  F00F         	call	_I2C_Master_Write	;wreg free
  1990                           
  1991                           ;main.c: 252: I2C_Master_Stop();
  1992  001E1E  EC77  F00F         	call	_I2C_Master_Stop	;wreg free
  1993  001E22  0012               	return		;funcret
  1994  001E24                     __end_of_I2C_init:
  1995                           	opt stack 0
  1996                           tblptru	equ	0xFF8
  1997                           tblptrh	equ	0xFF7
  1998                           tblptrl	equ	0xFF6
  1999                           tablat	equ	0xFF5
  2000                           intcon	equ	0xFF2
  2001                           postinc0	equ	0xFEE
  2002                           wreg	equ	0xFE8
  2003                           postdec1	equ	0xFE5
  2004                           fsr1l	equ	0xFE1
  2005                           postinc2	equ	0xFDE
  2006                           postdec2	equ	0xFDD
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8
  2010                           
  2011 ;; *************** function _I2C_Master_Init *****************
  2012 ;; Defined at:
  2013 ;;		line 14 in file "I2C.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;  clockFreq       4    0[BANK0 ] const unsigned long 
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;		None
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		wreg, status,2
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2027 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;Total ram usage:        4 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    4
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_I2C_init
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text8
  2042  001E4C                     __ptext8:
  2043                           	opt stack 0
  2044  001E4C                     _I2C_Master_Init:
  2045                           	opt stack 25
  2046                           
  2047                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2048                           
  2049                           ;incstack = 0
  2050  001E4C  9AC6               	bcf	4038,5,c	;volatile
  2051                           
  2052                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2053  001E4E  8694               	bsf	3988,3,c	;volatile
  2054                           
  2055                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2056  001E50  8894               	bsf	3988,4,c	;volatile
  2057                           
  2058                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2059  001E52  0E80               	movlw	128
  2060  001E54  6EC7               	movwf	4039,c	;volatile
  2061                           
  2062                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2063  001E56  0E28               	movlw	40
  2064  001E58  6EC6               	movwf	4038,c	;volatile
  2065                           
  2066                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2067  001E5A  0E00               	movlw	0
  2068  001E5C  6EC5               	movwf	4037,c	;volatile
  2069                           
  2070                           ;I2C.c: 49: SSPADD = 9600;
  2071  001E5E  0E80               	movlw	128
  2072  001E60  6EC8               	movwf	4040,c	;volatile
  2073  001E62  0012               	return		;funcret
  2074  001E64                     __end_of_I2C_Master_Init:
  2075                           	opt stack 0
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           intcon	equ	0xFF2
  2081                           postinc0	equ	0xFEE
  2082                           wreg	equ	0xFE8
  2083                           postdec1	equ	0xFE5
  2084                           fsr1l	equ	0xFE1
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _Bolt_remain *****************
  2092 ;; Defined at:
  2093 ;;		line 322 in file "main.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  time            2   30[BANK0 ] int 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      void 
  2100 ;; Registers used:
  2101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2107 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;Total ram usage:        3 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    7
  2114 ;; This function calls:
  2115 ;;		_I2C_sendData
  2116 ;;		_initLCD
  2117 ;;		_lcdInst
  2118 ;;		_printf
  2119 ;; This function is called by:
  2120 ;;		_main
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text9
  2125  001AB0                     __ptext9:
  2126                           	opt stack 0
  2127  001AB0                     _Bolt_remain:
  2128                           	opt stack 23
  2129                           
  2130                           ;main.c: 323: I2C_sendData('5');
  2131                           
  2132                           ;incstack = 0
  2133  001AB0  0E35               	movlw	53
  2134  001AB2  EC12  F00F         	call	_I2C_sendData
  2135  001AB6                     l257:
  2136                           
  2137                           ;main.c: 325: initLCD();
  2138  001AB6  EC4C  F00E         	call	_initLCD	;wreg free
  2139                           
  2140                           ;main.c: 326: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2141  001ABA  0E80               	movlw	128
  2142  001ABC  EC3E  F00F         	call	_lcdInst
  2143  001AC0  0E34               	movlw	52
  2144  001AC2  0100               	movlb	0	; () banked
  2145  001AC4  6FE0               	movwf	??_Bolt_remain& (0+255),b
  2146  001AC6  0EF1               	movlw	241
  2147  001AC8                     u1697:
  2148  001AC8  2EE8               	decfsz	wreg,f,c
  2149  001ACA  D7FE               	bra	u1697
  2150  001ACC  2FE0               	decfsz	??_Bolt_remain& (0+255),f,b
  2151  001ACE  D7FC               	bra	u1697
  2152  001AD0  D000               	nop2	
  2153                           
  2154                           ;main.c: 327: if (B_spacingTime >= time){
  2155  001AD2  0100               	movlb	0	; () banked
  2156  001AD4  51DE               	movf	Bolt_remain@time& (0+255),w,b
  2157  001AD6  5C30               	subwf	_B_spacingTime,w,c
  2158  001AD8  5031               	movf	_B_spacingTime+1,w,c
  2159  001ADA  0A80               	xorlw	128
  2160  001ADC  6FE0               	movwf	??_Bolt_remain& (0+255),b
  2161  001ADE  51DF               	movf	(Bolt_remain@time+1)& (0+255),w,b
  2162  001AE0  0A80               	xorlw	128
  2163  001AE2  59E0               	subwfb	??_Bolt_remain& (0+255),w,b
  2164  001AE4  A0D8               	btfss	status,0,c
  2165  001AE6  D004               	goto	l258
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;main.c: 328: I2C_sendData('6');
  2169  001AE8  0E36               	movlw	54
  2170  001AEA  EC12  F00F         	call	_I2C_sendData
  2171                           
  2172                           ;main.c: 329: break;
  2173  001AEE  0012               	return	
  2174  001AF0                     l258:
  2175                           
  2176                           ;main.c: 330: }
  2177                           ;main.c: 331: B_spacingTime +=100;
  2178  001AF0  0E64               	movlw	100
  2179  001AF2  2630               	addwf	_B_spacingTime,f,c
  2180  001AF4  0E00               	movlw	0
  2181  001AF6  2231               	addwfc	_B_spacingTime+1,f,c
  2182                           
  2183                           ;main.c: 332: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  2184  001AF8  0E11               	movlw	low STR_1
  2185  001AFA  0100               	movlb	0	; () banked
  2186  001AFC  6FCC               	movwf	printf@f& (0+255),b
  2187  001AFE  0E10               	movlw	high STR_1
  2188  001B00  6FCD               	movwf	(printf@f+1)& (0+255),b
  2189  001B02  C040  F0CE         	movff	_B_count,?_printf+2
  2190  001B06  C041  F0CF         	movff	_B_count+1,?_printf+3
  2191  001B0A  C03E  F0D0         	movff	_N_count,?_printf+4
  2192  001B0E  C03F  F0D1         	movff	_N_count+1,?_printf+5
  2193  001B12  C03C  F0D2         	movff	_S_count,?_printf+6
  2194  001B16  C03D  F0D3         	movff	_S_count+1,?_printf+7
  2195  001B1A  C03A  F0D4         	movff	_W_count,?_printf+8
  2196  001B1E  C03B  F0D5         	movff	_W_count+1,?_printf+9
  2197  001B22  EC4A  F00A         	call	_printf	;wreg free
  2198  001B26  D7C7               	goto	l257
  2199  001B28                     __end_of_Bolt_remain:
  2200                           	opt stack 0
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           intcon	equ	0xFF2
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           postdec1	equ	0xFE5
  2209                           fsr1l	equ	0xFE1
  2210                           postinc2	equ	0xFDE
  2211                           postdec2	equ	0xFDD
  2212                           fsr2h	equ	0xFDA
  2213                           fsr2l	equ	0xFD9
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _Bolt_dispense *****************
  2217 ;; Defined at:
  2218 ;;		line 261 in file "main.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  B_max           2   30[BANK0 ] int 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;Total ram usage:        3 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    7
  2239 ;; This function calls:
  2240 ;;		_I2C_sendData
  2241 ;;		_initLCD
  2242 ;;		_lcdInst
  2243 ;;		_printf
  2244 ;; This function is called by:
  2245 ;;		_main
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text10
  2250  001B28                     __ptext10:
  2251                           	opt stack 0
  2252  001B28                     _Bolt_dispense:
  2253                           	opt stack 23
  2254                           
  2255                           ;main.c: 263: I2C_sendData('5');
  2256                           
  2257                           ;incstack = 0
  2258  001B28  0E35               	movlw	53
  2259  001B2A  EC12  F00F         	call	_I2C_sendData
  2260  001B2E                     l229:
  2261                           
  2262                           ;main.c: 265: initLCD();
  2263  001B2E  EC4C  F00E         	call	_initLCD	;wreg free
  2264                           
  2265                           ;main.c: 266: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2266  001B32  0E80               	movlw	128
  2267  001B34  EC3E  F00F         	call	_lcdInst
  2268  001B38  0E34               	movlw	52
  2269  001B3A  0100               	movlb	0	; () banked
  2270  001B3C  6FE0               	movwf	??_Bolt_dispense& (0+255),b
  2271  001B3E  0EF1               	movlw	241
  2272  001B40                     u1707:
  2273  001B40  2EE8               	decfsz	wreg,f,c
  2274  001B42  D7FE               	bra	u1707
  2275  001B44  2FE0               	decfsz	??_Bolt_dispense& (0+255),f,b
  2276  001B46  D7FC               	bra	u1707
  2277  001B48  D000               	nop2	
  2278                           
  2279                           ;main.c: 267: if (B_count >= B_max){
  2280  001B4A  0100               	movlb	0	; () banked
  2281  001B4C  51DE               	movf	Bolt_dispense@B_max& (0+255),w,b
  2282  001B4E  5C40               	subwf	_B_count,w,c
  2283  001B50  5041               	movf	_B_count+1,w,c
  2284  001B52  0A80               	xorlw	128
  2285  001B54  6FE0               	movwf	??_Bolt_dispense& (0+255),b
  2286  001B56  51DF               	movf	(Bolt_dispense@B_max+1)& (0+255),w,b
  2287  001B58  0A80               	xorlw	128
  2288  001B5A  59E0               	subwfb	??_Bolt_dispense& (0+255),w,b
  2289  001B5C  A0D8               	btfss	status,0,c
  2290  001B5E  D004               	goto	l230
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;main.c: 268: I2C_sendData('6');
  2294  001B60  0E36               	movlw	54
  2295  001B62  EC12  F00F         	call	_I2C_sendData
  2296                           
  2297                           ;main.c: 269: break;
  2298  001B66  0012               	return	
  2299  001B68                     l230:
  2300                           
  2301                           ;main.c: 270: }
  2302                           ;main.c: 271: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  2303  001B68  0E11               	movlw	low STR_1
  2304  001B6A  0100               	movlb	0	; () banked
  2305  001B6C  6FCC               	movwf	printf@f& (0+255),b
  2306  001B6E  0E10               	movlw	high STR_1
  2307  001B70  6FCD               	movwf	(printf@f+1)& (0+255),b
  2308  001B72  C040  F0CE         	movff	_B_count,?_printf+2
  2309  001B76  C041  F0CF         	movff	_B_count+1,?_printf+3
  2310  001B7A  C03E  F0D0         	movff	_N_count,?_printf+4
  2311  001B7E  C03F  F0D1         	movff	_N_count+1,?_printf+5
  2312  001B82  C03C  F0D2         	movff	_S_count,?_printf+6
  2313  001B86  C03D  F0D3         	movff	_S_count+1,?_printf+7
  2314  001B8A  C03A  F0D4         	movff	_W_count,?_printf+8
  2315  001B8E  C03B  F0D5         	movff	_W_count+1,?_printf+9
  2316  001B92  EC4A  F00A         	call	_printf	;wreg free
  2317  001B96  D7CB               	goto	l229
  2318  001B98                     __end_of_Bolt_dispense:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           intcon	equ	0xFF2
  2325                           postinc0	equ	0xFEE
  2326                           wreg	equ	0xFE8
  2327                           postdec1	equ	0xFE5
  2328                           fsr1l	equ	0xFE1
  2329                           postinc2	equ	0xFDE
  2330                           postdec2	equ	0xFDD
  2331                           fsr2h	equ	0xFDA
  2332                           fsr2l	equ	0xFD9
  2333                           status	equ	0xFD8
  2334                           
  2335 ;; *************** function _printf *****************
  2336 ;; Defined at:
  2337 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  2340 ;;		 -> STR_16(20), STR_15(20), STR_14(20), STR_13(20), 
  2341 ;;		 -> STR_12(20), STR_11(20), STR_10(20), STR_9(20), 
  2342 ;;		 -> STR_8(12), STR_7(17), STR_6(19), STR_5(14), 
  2343 ;;		 -> STR_4(15), STR_3(20), STR_2(15), STR_1(20), 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  tmpval          4    0        struct .
  2346 ;;  cp              3    0        PTR const unsigned char 
  2347 ;;  val             2   27[BANK0 ] unsigned int 
  2348 ;;  ap              2   23[BANK0 ] PTR void [1]
  2349 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2350 ;;  len             2    0        unsigned int 
  2351 ;;  c               1   29[BANK0 ] char 
  2352 ;;  prec            1   26[BANK0 ] char 
  2353 ;;  flag            1   25[BANK0 ] unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  2   12[BANK0 ] int 
  2356 ;; Registers used:
  2357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2363 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;Total ram usage:       18 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    6
  2370 ;; This function calls:
  2371 ;;		___lwdiv
  2372 ;;		___lwmod
  2373 ;;		_putch
  2374 ;; This function is called by:
  2375 ;;		_main
  2376 ;;		_Bolt_dispense
  2377 ;;		_Nut_dispense
  2378 ;;		_Spacer_dispense
  2379 ;;		_Washer_dispense
  2380 ;;		_Bolt_remain
  2381 ;;		_Nut_remain
  2382 ;;		_Spacer_remain
  2383 ;;		_Washer_remain
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text11
  2388  001494                     __ptext11:
  2389                           	opt stack 0
  2390  001494                     _printf:
  2391                           	opt stack 24
  2392                           
  2393                           ;doprnt.c: 466: va_list ap;
  2394                           ;doprnt.c: 499: signed char c;
  2395                           ;doprnt.c: 506: signed char prec;
  2396                           ;doprnt.c: 508: unsigned char flag;
  2397                           ;doprnt.c: 523: union {
  2398                           ;doprnt.c: 524: unsigned long vd;
  2399                           ;doprnt.c: 525: double integ;
  2400                           ;doprnt.c: 526: } tmpval;
  2401                           ;doprnt.c: 528: unsigned int val;
  2402                           ;doprnt.c: 529: unsigned len;
  2403                           ;doprnt.c: 530: const char * cp;
  2404                           ;doprnt.c: 533: *ap = __va_start();
  2405                           
  2406                           ;incstack = 0
  2407  001494  0ECE               	movlw	low (?_printf+2)
  2408  001496  0100               	movlb	0	; () banked
  2409  001498  6FD7               	movwf	printf@ap& (0+255),b
  2410  00149A  0E00               	movlw	high (?_printf+2)
  2411  00149C  6FD8               	movwf	(printf@ap+1)& (0+255),b
  2412                           
  2413                           ;doprnt.c: 536: while(c = *f++) {
  2414  00149E  D082               	goto	u1400
  2415  0014A0                     
  2416                           ; BSR set to: 0
  2417                           ;doprnt.c: 538: if(c != '%')
  2418                           
  2419                           ; BSR set to: 0
  2420  0014A0  0E25               	movlw	37
  2421  0014A2  19DD               	xorwf	printf@c& (0+255),w,b
  2422  0014A4  B4D8               	btfsc	status,2,c
  2423  0014A6  D004               	goto	l335
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;doprnt.c: 540: {
  2427                           ;doprnt.c: 541: (putch(c) );
  2428  0014A8  51DD               	movf	printf@c& (0+255),w,b
  2429  0014AA  EC32  F00F         	call	_putch
  2430                           
  2431                           ;doprnt.c: 542: continue;
  2432  0014AE  D07A               	goto	u1400
  2433  0014B0                     l335:
  2434                           
  2435                           ;doprnt.c: 543: }
  2436                           ;doprnt.c: 548: flag = 0;
  2437  0014B0  0E00               	movlw	0
  2438  0014B2  0100               	movlb	0	; () banked
  2439  0014B4  6FD9               	movwf	printf@flag& (0+255),b
  2440                           
  2441                           ; BSR set to: 0
  2442                           
  2443                           ; BSR set to: 0
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 822: }
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;doprnt.c: 813: continue;
  2450                           
  2451                           ;doprnt.c: 802: default:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;doprnt.c: 698: case 'i':
  2455                           ;doprnt.c: 699: break;
  2456                           
  2457                           ; BSR set to: 0
  2458                           
  2459                           ;doprnt.c: 697: case 'd':
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;doprnt.c: 638: goto alldone;
  2463                           
  2464                           ;doprnt.c: 637: case 0:
  2465                           
  2466                           ;doprnt.c: 635: switch(c = *f++) {
  2467  0014B6  C0CC  FFF6         	movff	printf@f,tblptrl
  2468  0014BA  C0CD  FFF7         	movff	printf@f+1,tblptrh
  2469  0014BE  4BCC               	infsnz	printf@f& (0+255),f,b
  2470  0014C0  2BCD               	incf	(printf@f+1)& (0+255),f,b
  2471  0014C2                     	if	0	;tblptru may be non-zero
  2472  0014C2                     	endif
  2473  0014C2                     	if	0	;tblptru may be non-zero
  2474  0014C2                     	endif
  2475  0014C2  0008               	tblrd		*
  2476  0014C4  CFF5 F0DD          	movff	tablat,printf@c
  2477  0014C8  51DD               	movf	printf@c& (0+255),w,b
  2478                           
  2479                           ; Switch size 1, requested type "space"
  2480                           ; Number of cases is 3, Range of values is 0 to 105
  2481                           ; switch strategies available:
  2482                           ; Name         Instructions Cycles
  2483                           ; simple_byte           10     6 (average)
  2484                           ;	Chosen strategy is simple_byte
  2485  0014CA  0A00               	xorlw	0	; case 0
  2486  0014CC  B4D8               	btfsc	status,2,c
  2487  0014CE  0012               	return	
  2488  0014D0  0A64               	xorlw	100	; case 100
  2489  0014D2  B4D8               	btfsc	status,2,c
  2490  0014D4  D003               	goto	l341
  2491  0014D6  0A0D               	xorlw	13	; case 105
  2492  0014D8  A4D8               	btfss	status,2,c
  2493  0014DA  D064               	goto	u1400
  2494  0014DC                     l341:
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;doprnt.c: 1253: {
  2498                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2499                           
  2500                           ; BSR set to: 0
  2501  0014DC  C0D7  FFD9         	movff	printf@ap,fsr2l
  2502  0014E0  C0D8  FFDA         	movff	printf@ap+1,fsr2h
  2503  0014E4  CFDE F0DB          	movff	postinc2,printf@val
  2504  0014E8  CFDD F0DC          	movff	postdec2,printf@val+1
  2505                           
  2506                           ; BSR set to: 0
  2507  0014EC  0E02               	movlw	2
  2508  0014EE  27D7               	addwf	printf@ap& (0+255),f,b
  2509  0014F0  0E00               	movlw	0
  2510  0014F2  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;doprnt.c: 1261: if((int)val < 0) {
  2514  0014F4  AFDC               	btfss	(printf@val+1)& (0+255),7,b
  2515  0014F6  D006               	goto	l343
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;doprnt.c: 1262: flag |= 0x03;
  2519  0014F8  0E03               	movlw	3
  2520  0014FA  13D9               	iorwf	printf@flag& (0+255),f,b
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;doprnt.c: 1263: val = -val;
  2524  0014FC  6DDB               	negf	printf@val& (0+255),b
  2525  0014FE  1FDC               	comf	(printf@val+1)& (0+255),f,b
  2526  001500  B0D8               	btfsc	status,0,c
  2527  001502  2BDC               	incf	(printf@val+1)& (0+255),f,b
  2528  001504                     l343:
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;doprnt.c: 1264: }
  2532                           ;doprnt.c: 1266: }
  2533                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2534                           
  2535                           ; BSR set to: 0
  2536  001504  0E01               	movlw	1
  2537  001506  6FDD               	movwf	printf@c& (0+255),b
  2538  001508                     l2440:
  2539                           
  2540                           ; BSR set to: 0
  2541  001508  0E05               	movlw	5
  2542  00150A  19DD               	xorwf	printf@c& (0+255),w,b
  2543  00150C  B4D8               	btfsc	status,2,c
  2544  00150E  D012               	goto	u1380
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;doprnt.c: 1306: if(val < dpowers[c])
  2548                           
  2549                           ; BSR set to: 0
  2550                           
  2551                           ; BSR set to: 0
  2552  001510  51DD               	movf	printf@c& (0+255),w,b
  2553  001512  0D02               	mullw	2
  2554  001514  0E01               	movlw	low _dpowers
  2555  001516  24F3               	addwf	prodl,w,c
  2556  001518  6EF6               	movwf	tblptrl,c
  2557  00151A  0E10               	movlw	high _dpowers
  2558  00151C  20F4               	addwfc	prodh,w,c
  2559  00151E  6EF7               	movwf	tblptrh,c
  2560  001520                     	if	0	;There are less than 3 active tblptr bytes
  2561  001520                     	endif
  2562  001520  0009               	tblrd		*+
  2563  001522  50F5               	movf	tablat,w,c
  2564  001524  5DDB               	subwf	printf@val& (0+255),w,b
  2565  001526  0009               	tblrd		*+
  2566  001528  50F5               	movf	tablat,w,c
  2567  00152A  59DC               	subwfb	(printf@val+1)& (0+255),w,b
  2568  00152C  A0D8               	btfss	status,0,c
  2569  00152E  D002               	goto	u1380
  2570                           
  2571                           ; BSR set to: 0
  2572                           
  2573                           ; BSR set to: 0
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;doprnt.c: 1307: break;
  2577  001530  2BDD               	incf	printf@c& (0+255),f,b
  2578  001532  D7EA               	goto	l2440
  2579  001534                     u1380:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;doprnt.c: 1422: {
  2583                           ;doprnt.c: 1438: if(flag & 0x03)
  2584                           
  2585                           ; BSR set to: 0
  2586  001534  C0D9  F0D6         	movff	printf@flag,??_printf
  2587  001538  0E03               	movlw	3
  2588  00153A  17D6               	andwf	??_printf& (0+255),f,b
  2589  00153C  B4D8               	btfsc	status,2,c
  2590  00153E  D003               	goto	l347
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;doprnt.c: 1439: (putch('-') );
  2594  001540  0E2D               	movlw	45
  2595  001542  EC32  F00F         	call	_putch
  2596  001546                     l347:
  2597                           
  2598                           ;doprnt.c: 1469: }
  2599                           ;doprnt.c: 1472: prec = c;
  2600  001546  C0DD  F0DA         	movff	printf@c,printf@prec
  2601                           
  2602                           ;doprnt.c: 1474: while(prec--) {
  2603  00154A  D027               	goto	l348
  2604  00154C                     
  2605                           ;doprnt.c: 1478: {
  2606                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2607  00154C  0100               	movlb	0	; () banked
  2608  00154E  51DA               	movf	printf@prec& (0+255),w,b
  2609  001550  0D02               	mullw	2
  2610  001552  0E01               	movlw	low _dpowers
  2611  001554  24F3               	addwf	prodl,w,c
  2612  001556  6EF6               	movwf	tblptrl,c
  2613  001558  0E10               	movlw	high _dpowers
  2614  00155A  20F4               	addwfc	prodh,w,c
  2615  00155C  6EF7               	movwf	tblptrh,c
  2616  00155E                     	if	0	;There are less than 3 active tblptr bytes
  2617  00155E                     	endif
  2618  00155E  0009               	tblrd		*+
  2619  001560  CFF5 F0C2          	movff	tablat,___lwdiv@divisor
  2620  001564  000A               	tblrd		*-
  2621  001566  CFF5 F0C3          	movff	tablat,___lwdiv@divisor+1
  2622  00156A  C0DB  F0C0         	movff	printf@val,___lwdiv@dividend
  2623  00156E  C0DC  F0C1         	movff	printf@val+1,___lwdiv@dividend+1
  2624  001572  ECF9  F00D         	call	___lwdiv	;wreg free
  2625  001576  C0C0  F0C7         	movff	?___lwdiv,___lwmod@dividend
  2626  00157A  C0C1  F0C8         	movff	?___lwdiv+1,___lwmod@dividend+1
  2627  00157E  0E00               	movlw	0
  2628  001580  0100               	movlb	0	; () banked
  2629  001582  6FCA               	movwf	(___lwmod@divisor+1)& (0+255),b
  2630  001584  0E0A               	movlw	10
  2631  001586  6FC9               	movwf	___lwmod@divisor& (0+255),b
  2632  001588  EC98  F00E         	call	___lwmod	;wreg free
  2633  00158C  0100               	movlb	0	; () banked
  2634  00158E  51C7               	movf	?___lwmod& (0+255),w,b
  2635  001590  0F30               	addlw	48
  2636  001592  6FDD               	movwf	printf@c& (0+255),b
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;doprnt.c: 1523: }
  2640                           ;doprnt.c: 1524: (putch(c) );
  2641  001594  51DD               	movf	printf@c& (0+255),w,b
  2642  001596  EC32  F00F         	call	_putch
  2643  00159A                     l348:
  2644  00159A  0100               	movlb	0	; () banked
  2645  00159C  07DA               	decf	printf@prec& (0+255),f,b
  2646  00159E  29DA               	incf	printf@prec& (0+255),w,b
  2647  0015A0  A4D8               	btfss	status,2,c
  2648  0015A2  D7D4               	goto	l349
  2649  0015A4                     u1400:
  2650                           
  2651                           ; BSR set to: 0
  2652                           
  2653                           ; BSR set to: 0
  2654  0015A4  C0CC  FFF6         	movff	printf@f,tblptrl
  2655  0015A8  C0CD  FFF7         	movff	printf@f+1,tblptrh
  2656  0015AC  0100               	movlb	0	; () banked
  2657  0015AE  4BCC               	infsnz	printf@f& (0+255),f,b
  2658  0015B0  2BCD               	incf	(printf@f+1)& (0+255),f,b
  2659  0015B2                     	if	0	;tblptru may be non-zero
  2660  0015B2                     	endif
  2661  0015B2                     	if	0	;tblptru may be non-zero
  2662  0015B2                     	endif
  2663  0015B2  0008               	tblrd		*
  2664  0015B4  CFF5 F0DD          	movff	tablat,printf@c
  2665  0015B8  51DD               	movf	printf@c& (0+255),w,b
  2666  0015BA  B4D8               	btfsc	status,2,c
  2667  0015BC  0012               	return	
  2668  0015BE  D770               	goto	l334
  2669  0015C0                     __end_of_printf:
  2670                           	opt stack 0
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           prodh	equ	0xFF4
  2676                           prodl	equ	0xFF3
  2677                           intcon	equ	0xFF2
  2678                           postinc0	equ	0xFEE
  2679                           wreg	equ	0xFE8
  2680                           postdec1	equ	0xFE5
  2681                           fsr1l	equ	0xFE1
  2682                           postinc2	equ	0xFDE
  2683                           postdec2	equ	0xFDD
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _putch *****************
  2689 ;; Defined at:
  2690 ;;		line 24 in file "lcd.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  data            1    wreg     unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  data            1    2[BANK0 ] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;Total ram usage:        1 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    5
  2711 ;; This function calls:
  2712 ;;		_lcdNibble
  2713 ;; This function is called by:
  2714 ;;		_printf
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text12
  2719  001E64                     __ptext12:
  2720                           	opt stack 0
  2721  001E64                     _putch:
  2722                           	opt stack 24
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;incstack = 0
  2726                           ;putch@data stored from wreg
  2727  001E64  0100               	movlb	0	; () banked
  2728  001E66  6FC2               	movwf	putch@data& (0+255),b
  2729                           
  2730                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2731  001E68  848C               	bsf	3980,2,c	;volatile
  2732                           
  2733                           ;lcd.c: 33: lcdNibble(data);
  2734  001E6A  0100               	movlb	0	; () banked
  2735  001E6C  51C2               	movf	putch@data& (0+255),w,b
  2736  001E6E  EC6F  F00B         	call	_lcdNibble
  2737                           
  2738                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2739  001E72  0EA0               	movlw	160
  2740  001E74                     u1717:
  2741  001E74  D000               	nop2	
  2742  001E76  2EE8               	decfsz	wreg,f,c
  2743  001E78  D7FD               	bra	u1717
  2744  001E7A  0012               	return		;funcret
  2745  001E7C                     __end_of_putch:
  2746                           	opt stack 0
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           prodh	equ	0xFF4
  2752                           prodl	equ	0xFF3
  2753                           intcon	equ	0xFF2
  2754                           postinc0	equ	0xFEE
  2755                           wreg	equ	0xFE8
  2756                           postdec1	equ	0xFE5
  2757                           fsr1l	equ	0xFE1
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function ___lwmod *****************
  2765 ;; Defined at:
  2766 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  dividend        2    7[BANK0 ] unsigned int 
  2769 ;;  divisor         2    9[BANK0 ] unsigned int 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  counter         1   11[BANK0 ] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  2    7[BANK0 ] unsigned int 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2781 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;Total ram usage:        5 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    4
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_printf
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text13
  2796  001D30                     __ptext13:
  2797                           	opt stack 0
  2798  001D30                     ___lwmod:
  2799                           	opt stack 25
  2800                           
  2801                           ;incstack = 0
  2802  001D30  0100               	movlb	0	; () banked
  2803  001D32  51C9               	movf	___lwmod@divisor& (0+255),w,b
  2804  001D34  11CA               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2805  001D36  B4D8               	btfsc	status,2,c
  2806  001D38  D018               	goto	l771
  2807                           
  2808                           ; BSR set to: 0
  2809  001D3A  0E01               	movlw	1
  2810  001D3C  6FCB               	movwf	___lwmod@counter& (0+255),b
  2811  001D3E  D004               	goto	l766
  2812  001D40                     
  2813                           ; BSR set to: 0
  2814                           
  2815                           ; BSR set to: 0
  2816  001D40  90D8               	bcf	status,0,c
  2817  001D42  37C9               	rlcf	___lwmod@divisor& (0+255),f,b
  2818  001D44  37CA               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2819  001D46  2BCB               	incf	___lwmod@counter& (0+255),f,b
  2820  001D48                     l766:
  2821                           
  2822                           ; BSR set to: 0
  2823                           
  2824                           ; BSR set to: 0
  2825  001D48  AFCA               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2826  001D4A  D7FA               	goto	l767
  2827  001D4C                     u1320:
  2828                           
  2829                           ; BSR set to: 0
  2830                           
  2831                           ; BSR set to: 0
  2832                           
  2833                           ; BSR set to: 0
  2834  001D4C  51C9               	movf	___lwmod@divisor& (0+255),w,b
  2835  001D4E  5DC7               	subwf	___lwmod@dividend& (0+255),w,b
  2836  001D50  51CA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2837  001D52  59C8               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2838  001D54  A0D8               	btfss	status,0,c
  2839  001D56  D004               	goto	l770
  2840                           
  2841                           ; BSR set to: 0
  2842  001D58  51C9               	movf	___lwmod@divisor& (0+255),w,b
  2843  001D5A  5FC7               	subwf	___lwmod@dividend& (0+255),f,b
  2844  001D5C  51CA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2845  001D5E  5BC8               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2846  001D60                     l770:
  2847                           
  2848                           ; BSR set to: 0
  2849                           
  2850                           ; BSR set to: 0
  2851  001D60  90D8               	bcf	status,0,c
  2852  001D62  33CA               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2853  001D64  33C9               	rrcf	___lwmod@divisor& (0+255),f,b
  2854                           
  2855                           ; BSR set to: 0
  2856  001D66  2FCB               	decfsz	___lwmod@counter& (0+255),f,b
  2857  001D68  D7F1               	goto	u1320
  2858  001D6A                     l771:
  2859                           
  2860                           ; BSR set to: 0
  2861                           
  2862                           ; BSR set to: 0
  2863  001D6A  C0C7  F0C7         	movff	___lwmod@dividend,?___lwmod
  2864  001D6E  C0C8  F0C8         	movff	___lwmod@dividend+1,?___lwmod+1
  2865                           
  2866                           ; BSR set to: 0
  2867  001D72  0012               	return		;funcret
  2868  001D74                     __end_of___lwmod:
  2869                           	opt stack 0
  2870                           tblptru	equ	0xFF8
  2871                           tblptrh	equ	0xFF7
  2872                           tblptrl	equ	0xFF6
  2873                           tablat	equ	0xFF5
  2874                           prodh	equ	0xFF4
  2875                           prodl	equ	0xFF3
  2876                           intcon	equ	0xFF2
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           postdec1	equ	0xFE5
  2880                           fsr1l	equ	0xFE1
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function ___lwdiv *****************
  2888 ;; Defined at:
  2889 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  dividend        2    0[BANK0 ] unsigned int 
  2892 ;;  divisor         2    2[BANK0 ] unsigned int 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  quotient        2    5[BANK0 ] unsigned int 
  2895 ;;  counter         1    4[BANK0 ] unsigned char 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  2    0[BANK0 ] unsigned int 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2905 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;Total ram usage:        7 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    4
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_printf
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text14
  2920  001BF2                     __ptext14:
  2921                           	opt stack 0
  2922  001BF2                     ___lwdiv:
  2923                           	opt stack 25
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;incstack = 0
  2927  001BF2  0E00               	movlw	0
  2928  001BF4  0100               	movlb	0	; () banked
  2929  001BF6  6FC6               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2930  001BF8  0E00               	movlw	0
  2931  001BFA  6FC5               	movwf	___lwdiv@quotient& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934  001BFC  51C2               	movf	___lwdiv@divisor& (0+255),w,b
  2935  001BFE  11C3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2936  001C00  B4D8               	btfsc	status,2,c
  2937  001C02  D01C               	goto	l761
  2938                           
  2939                           ; BSR set to: 0
  2940  001C04  0E01               	movlw	1
  2941  001C06  6FC4               	movwf	___lwdiv@counter& (0+255),b
  2942  001C08  D004               	goto	l756
  2943  001C0A                     
  2944                           ; BSR set to: 0
  2945                           
  2946                           ; BSR set to: 0
  2947  001C0A  90D8               	bcf	status,0,c
  2948  001C0C  37C2               	rlcf	___lwdiv@divisor& (0+255),f,b
  2949  001C0E  37C3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2950  001C10  2BC4               	incf	___lwdiv@counter& (0+255),f,b
  2951  001C12                     l756:
  2952                           
  2953                           ; BSR set to: 0
  2954                           
  2955                           ; BSR set to: 0
  2956  001C12  AFC3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2957  001C14  D7FA               	goto	l757
  2958  001C16                     u1290:
  2959                           
  2960                           ; BSR set to: 0
  2961                           
  2962                           ; BSR set to: 0
  2963                           
  2964                           ; BSR set to: 0
  2965  001C16  90D8               	bcf	status,0,c
  2966  001C18  37C5               	rlcf	___lwdiv@quotient& (0+255),f,b
  2967  001C1A  37C6               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2968                           
  2969                           ; BSR set to: 0
  2970  001C1C  51C2               	movf	___lwdiv@divisor& (0+255),w,b
  2971  001C1E  5DC0               	subwf	___lwdiv@dividend& (0+255),w,b
  2972  001C20  51C3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2973  001C22  59C1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2974  001C24  A0D8               	btfss	status,0,c
  2975  001C26  D005               	goto	l760
  2976                           
  2977                           ; BSR set to: 0
  2978  001C28  51C2               	movf	___lwdiv@divisor& (0+255),w,b
  2979  001C2A  5FC0               	subwf	___lwdiv@dividend& (0+255),f,b
  2980  001C2C  51C3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2981  001C2E  5BC1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2982                           
  2983                           ; BSR set to: 0
  2984  001C30  81C5               	bsf	___lwdiv@quotient& (0+255),0,b
  2985  001C32                     l760:
  2986                           
  2987                           ; BSR set to: 0
  2988                           
  2989                           ; BSR set to: 0
  2990  001C32  90D8               	bcf	status,0,c
  2991  001C34  33C3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2992  001C36  33C2               	rrcf	___lwdiv@divisor& (0+255),f,b
  2993                           
  2994                           ; BSR set to: 0
  2995  001C38  2FC4               	decfsz	___lwdiv@counter& (0+255),f,b
  2996  001C3A  D7ED               	goto	u1290
  2997  001C3C                     l761:
  2998                           
  2999                           ; BSR set to: 0
  3000                           
  3001                           ; BSR set to: 0
  3002  001C3C  C0C5  F0C0         	movff	___lwdiv@quotient,?___lwdiv
  3003  001C40  C0C6  F0C1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3004                           
  3005                           ; BSR set to: 0
  3006  001C44  0012               	return		;funcret
  3007  001C46                     __end_of___lwdiv:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           postinc0	equ	0xFEE
  3017                           wreg	equ	0xFE8
  3018                           postdec1	equ	0xFE5
  3019                           fsr1l	equ	0xFE1
  3020                           postinc2	equ	0xFDE
  3021                           postdec2	equ	0xFDD
  3022                           fsr2h	equ	0xFDA
  3023                           fsr2l	equ	0xFD9
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _initLCD *****************
  3027 ;; Defined at:
  3028 ;;		line 60 in file "lcd.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2, status,0, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;Total ram usage:        1 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    6
  3049 ;; This function calls:
  3050 ;;		_lcdInst
  3051 ;; This function is called by:
  3052 ;;		_main
  3053 ;;		_Bolt_dispense
  3054 ;;		_Nut_dispense
  3055 ;;		_Spacer_dispense
  3056 ;;		_Washer_dispense
  3057 ;;		_Bolt_remain
  3058 ;;		_Nut_remain
  3059 ;;		_Spacer_remain
  3060 ;;		_Washer_remain
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text15
  3065  001C98                     __ptext15:
  3066                           	opt stack 0
  3067  001C98                     _initLCD:
  3068                           	opt stack 24
  3069                           
  3070                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;incstack = 0
  3074  001C98  0E9C               	movlw	156
  3075  001C9A  0100               	movlb	0	; () banked
  3076  001C9C  6FC3               	movwf	??_initLCD& (0+255),b
  3077  001C9E  0ED7               	movlw	215
  3078  001CA0                     u1727:
  3079  001CA0  2EE8               	decfsz	wreg,f,c
  3080  001CA2  D7FE               	bra	u1727
  3081  001CA4  2FC3               	decfsz	??_initLCD& (0+255),f,b
  3082  001CA6  D7FC               	bra	u1727
  3083                           
  3084                           ;lcd.c: 69: lcdInst(0b00110011);
  3085  001CA8  0E33               	movlw	51
  3086  001CAA  EC3E  F00F         	call	_lcdInst
  3087                           
  3088                           ;lcd.c: 70: lcdInst(0b00110010);
  3089  001CAE  0E32               	movlw	50
  3090  001CB0  EC3E  F00F         	call	_lcdInst
  3091                           
  3092                           ;lcd.c: 71: lcdInst(0b00101000);
  3093  001CB4  0E28               	movlw	40
  3094  001CB6  EC3E  F00F         	call	_lcdInst
  3095                           
  3096                           ;lcd.c: 72: lcdInst(0b00001111);
  3097  001CBA  0E0F               	movlw	15
  3098  001CBC  EC3E  F00F         	call	_lcdInst
  3099                           
  3100                           ;lcd.c: 73: lcdInst(0b00000110);
  3101  001CC0  0E06               	movlw	6
  3102  001CC2  EC3E  F00F         	call	_lcdInst
  3103                           
  3104                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3105  001CC6  0E01               	movlw	1
  3106  001CC8  EC3E  F00F         	call	_lcdInst
  3107  001CCC  0E9C               	movlw	156
  3108  001CCE  0100               	movlb	0	; () banked
  3109  001CD0  6FC3               	movwf	??_initLCD& (0+255),b
  3110  001CD2  0ED7               	movlw	215
  3111  001CD4                     u1737:
  3112  001CD4  2EE8               	decfsz	wreg,f,c
  3113  001CD6  D7FE               	bra	u1737
  3114  001CD8  2FC3               	decfsz	??_initLCD& (0+255),f,b
  3115  001CDA  D7FC               	bra	u1737
  3116                           
  3117                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3118  001CDC  0E0F               	movlw	15
  3119  001CDE  EC3E  F00F         	call	_lcdInst
  3120  001CE2  0012               	return		;funcret
  3121  001CE4                     __end_of_initLCD:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postdec1	equ	0xFE5
  3133                           fsr1l	equ	0xFE1
  3134                           postinc2	equ	0xFDE
  3135                           postdec2	equ	0xFDD
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _lcdInst *****************
  3141 ;; Defined at:
  3142 ;;		line 11 in file "lcd.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  data            1    wreg     unsigned char 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  data            1    2[BANK0 ] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;Total ram usage:        1 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    5
  3163 ;; This function calls:
  3164 ;;		_lcdNibble
  3165 ;; This function is called by:
  3166 ;;		_initLCD
  3167 ;;		_main
  3168 ;;		_Bolt_dispense
  3169 ;;		_Nut_dispense
  3170 ;;		_Spacer_dispense
  3171 ;;		_Washer_dispense
  3172 ;;		_Bolt_remain
  3173 ;;		_Nut_remain
  3174 ;;		_Spacer_remain
  3175 ;;		_Washer_remain
  3176 ;;		_lcd_set_cursor
  3177 ;;		_lcd_shift_cursor
  3178 ;;		_lcd_shift_display
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text16
  3183  001E7C                     __ptext16:
  3184                           	opt stack 0
  3185  001E7C                     _lcdInst:
  3186                           	opt stack 25
  3187                           
  3188                           ;incstack = 0
  3189                           ;lcdInst@data stored from wreg
  3190  001E7C  0100               	movlb	0	; () banked
  3191  001E7E  6FC2               	movwf	lcdInst@data& (0+255),b
  3192                           
  3193                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  3194  001E80  948C               	bcf	3980,2,c	;volatile
  3195                           
  3196                           ;lcd.c: 20: lcdNibble(data);
  3197  001E82  0100               	movlb	0	; () banked
  3198  001E84  51C2               	movf	lcdInst@data& (0+255),w,b
  3199  001E86  EC6F  F00B         	call	_lcdNibble
  3200                           
  3201                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3202  001E8A  0EA0               	movlw	160
  3203  001E8C                     u1747:
  3204  001E8C  D000               	nop2	
  3205  001E8E  2EE8               	decfsz	wreg,f,c
  3206  001E90  D7FD               	bra	u1747
  3207  001E92  0012               	return		;funcret
  3208  001E94                     __end_of_lcdInst:
  3209                           	opt stack 0
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           prodh	equ	0xFF4
  3215                           prodl	equ	0xFF3
  3216                           intcon	equ	0xFF2
  3217                           postinc0	equ	0xFEE
  3218                           wreg	equ	0xFE8
  3219                           postdec1	equ	0xFE5
  3220                           fsr1l	equ	0xFE1
  3221                           postinc2	equ	0xFDE
  3222                           postdec2	equ	0xFDD
  3223                           fsr2h	equ	0xFDA
  3224                           fsr2l	equ	0xFD9
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _lcdNibble *****************
  3228 ;; Defined at:
  3229 ;;		line 37 in file "lcd.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  data            1    wreg     unsigned char 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  data            1    1[BANK0 ] unsigned char 
  3234 ;;  temp            1    0[BANK0 ] unsigned char 
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      void 
  3237 ;; Registers used:
  3238 ;;		wreg, status,2, status,0
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;Total ram usage:        2 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    4
  3251 ;; This function calls:
  3252 ;;		Nothing
  3253 ;; This function is called by:
  3254 ;;		_lcdInst
  3255 ;;		_putch
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text17
  3260  0016DE                     __ptext17:
  3261                           	opt stack 0
  3262  0016DE                     _lcdNibble:
  3263                           	opt stack 24
  3264                           
  3265                           ;incstack = 0
  3266                           ;lcdNibble@data stored from wreg
  3267  0016DE  0100               	movlb	0	; () banked
  3268  0016E0  6FC1               	movwf	lcdNibble@data& (0+255),b
  3269                           
  3270                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3271  0016E2  0100               	movlb	0	; () banked
  3272  0016E4  51C1               	movf	lcdNibble@data& (0+255),w,b
  3273  0016E6  0BF0               	andlw	240
  3274  0016E8  6FC0               	movwf	lcdNibble@temp& (0+255),b
  3275                           
  3276                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3277  0016EA  508C               	movf	3980,w,c	;volatile
  3278  0016EC  0B0F               	andlw	15
  3279  0016EE  6E8C               	movwf	3980,c	;volatile
  3280                           
  3281                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3282  0016F0  51C0               	movf	lcdNibble@temp& (0+255),w,b
  3283  0016F2  108C               	iorwf	3980,w,c	;volatile
  3284  0016F4  6E8C               	movwf	3980,c	;volatile
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3288  0016F6  0E00               	movlw	0
  3289  0016F8  BEF2               	btfsc	intcon,7,c	;volatile
  3290  0016FA  0E01               	movlw	1
  3291  0016FC  6E43               	movwf	_LCDinterruptState,c
  3292                           
  3293                           ; BSR set to: 0
  3294  0016FE  9EF2               	bcf	intcon,7,c	;volatile
  3295                           
  3296                           ; BSR set to: 0
  3297  001700  868C               	bsf	3980,3,c	;volatile
  3298                           
  3299                           ; BSR set to: 0
  3300  001702  0E42               	movlw	66
  3301  001704                     u1757:
  3302  001704  2EE8               	decfsz	wreg,f,c
  3303  001706  D7FE               	bra	u1757
  3304  001708  D000               	nop2	
  3305  00170A  968C               	bcf	3980,3,c	;volatile
  3306  00170C  0EA0               	movlw	160
  3307  00170E                     u1767:
  3308  00170E  D000               	nop2	
  3309  001710  2EE8               	decfsz	wreg,f,c
  3310  001712  D7FD               	bra	u1767
  3311  001714  B043               	btfsc	_LCDinterruptState,0,c
  3312  001716  D002               	bra	u1245
  3313  001718  9EF2               	bcf	intcon,7,c	;volatile
  3314  00171A  D001               	bra	u1246
  3315  00171C                     u1245:
  3316  00171C  8EF2               	bsf	intcon,7,c	;volatile
  3317  00171E                     u1246:
  3318                           
  3319                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3320  00171E  0100               	movlb	0	; () banked
  3321  001720  39C1               	swapf	lcdNibble@data& (0+255),w,b
  3322  001722  0BF0               	andlw	240
  3323  001724  6FC1               	movwf	lcdNibble@data& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3327  001726  51C1               	movf	lcdNibble@data& (0+255),w,b
  3328  001728  0BF0               	andlw	240
  3329  00172A  6FC0               	movwf	lcdNibble@temp& (0+255),b
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3333  00172C  508C               	movf	3980,w,c	;volatile
  3334  00172E  0B0F               	andlw	15
  3335  001730  6E8C               	movwf	3980,c	;volatile
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3339  001732  51C0               	movf	lcdNibble@temp& (0+255),w,b
  3340  001734  108C               	iorwf	3980,w,c	;volatile
  3341  001736  6E8C               	movwf	3980,c	;volatile
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3345  001738  0E00               	movlw	0
  3346  00173A  BEF2               	btfsc	intcon,7,c	;volatile
  3347  00173C  0E01               	movlw	1
  3348  00173E  6E43               	movwf	_LCDinterruptState,c
  3349                           
  3350                           ; BSR set to: 0
  3351  001740  9EF2               	bcf	intcon,7,c	;volatile
  3352                           
  3353                           ; BSR set to: 0
  3354  001742  868C               	bsf	3980,3,c	;volatile
  3355                           
  3356                           ; BSR set to: 0
  3357  001744  0E42               	movlw	66
  3358  001746                     u1777:
  3359  001746  2EE8               	decfsz	wreg,f,c
  3360  001748  D7FE               	bra	u1777
  3361  00174A  D000               	nop2	
  3362  00174C  968C               	bcf	3980,3,c	;volatile
  3363  00174E  0EA0               	movlw	160
  3364  001750                     u1787:
  3365  001750  D000               	nop2	
  3366  001752  2EE8               	decfsz	wreg,f,c
  3367  001754  D7FD               	bra	u1787
  3368  001756  B043               	btfsc	_LCDinterruptState,0,c
  3369  001758  D002               	bra	u1255
  3370  00175A  9EF2               	bcf	intcon,7,c	;volatile
  3371  00175C  D001               	bra	u1256
  3372  00175E                     u1255:
  3373  00175E  8EF2               	bsf	intcon,7,c	;volatile
  3374  001760                     u1256:
  3375  001760  0012               	return		;funcret
  3376  001762                     __end_of_lcdNibble:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           intcon	equ	0xFF2
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           postdec1	equ	0xFE5
  3388                           fsr1l	equ	0xFE1
  3389                           postinc2	equ	0xFDE
  3390                           postdec2	equ	0xFDD
  3391                           fsr2h	equ	0xFDA
  3392                           fsr2l	equ	0xFD9
  3393                           status	equ	0xFD8
  3394                           
  3395 ;; *************** function _I2C_sendData *****************
  3396 ;; Defined at:
  3397 ;;		line 254 in file "main.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  char_data       1    wreg     unsigned char 
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;  char_data       1    3[BANK0 ] unsigned char 
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;Total ram usage:        1 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    6
  3418 ;; This function calls:
  3419 ;;		_I2C_Master_Start
  3420 ;;		_I2C_Master_Stop
  3421 ;;		_I2C_Master_Write
  3422 ;; This function is called by:
  3423 ;;		_Bolt_dispense
  3424 ;;		_Nut_dispense
  3425 ;;		_Spacer_dispense
  3426 ;;		_Washer_dispense
  3427 ;;		_Bolt_remain
  3428 ;;		_Nut_remain
  3429 ;;		_Spacer_remain
  3430 ;;		_Washer_remain
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text18
  3435  001E24                     __ptext18:
  3436                           	opt stack 0
  3437  001E24                     _I2C_sendData:
  3438                           	opt stack 23
  3439                           
  3440                           ;incstack = 0
  3441                           ;I2C_sendData@char_data stored from wreg
  3442  001E24  0100               	movlb	0	; () banked
  3443  001E26  6FC3               	movwf	I2C_sendData@char_data& (0+255),b
  3444                           
  3445                           ;main.c: 255: I2C_Master_Start();
  3446  001E28  EC7B  F00F         	call	_I2C_Master_Start	;wreg free
  3447                           
  3448                           ;main.c: 256: I2C_Master_Write(0b00010000);
  3449  001E2C  0E00               	movlw	0
  3450  001E2E  0100               	movlb	0	; () banked
  3451  001E30  6FC2               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3452  001E32  0E10               	movlw	16
  3453  001E34  6FC1               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3454  001E36  EC72  F00F         	call	_I2C_Master_Write	;wreg free
  3455                           
  3456                           ;main.c: 257: I2C_Master_Write(char_data);
  3457  001E3A  C0C3  F0C1         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  3458  001E3E  0100               	movlb	0	; () banked
  3459  001E40  6BC2               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3460  001E42  EC72  F00F         	call	_I2C_Master_Write	;wreg free
  3461                           
  3462                           ;main.c: 258: I2C_Master_Stop();
  3463  001E46  EC77  F00F         	call	_I2C_Master_Stop	;wreg free
  3464  001E4A  0012               	return		;funcret
  3465  001E4C                     __end_of_I2C_sendData:
  3466                           	opt stack 0
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           intcon	equ	0xFF2
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           postdec1	equ	0xFE5
  3477                           fsr1l	equ	0xFE1
  3478                           postinc2	equ	0xFDE
  3479                           postdec2	equ	0xFDD
  3480                           fsr2h	equ	0xFDA
  3481                           fsr2l	equ	0xFD9
  3482                           status	equ	0xFD8
  3483                           
  3484 ;; *************** function _I2C_Master_Write *****************
  3485 ;; Defined at:
  3486 ;;		line 109 in file "I2C.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;Total ram usage:        2 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    5
  3507 ;; This function calls:
  3508 ;;		_I2C_Master_Wait
  3509 ;; This function is called by:
  3510 ;;		_I2C_init
  3511 ;;		_I2C_sendData
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text19
  3516  001EE4                     __ptext19:
  3517                           	opt stack 0
  3518  001EE4                     _I2C_Master_Write:
  3519                           	opt stack 23
  3520                           
  3521                           ;I2C.c: 117: I2C_Master_Wait();
  3522                           
  3523                           ;incstack = 0
  3524  001EE4  EC54  F00F         	call	_I2C_Master_Wait	;wreg free
  3525                           
  3526                           ;I2C.c: 118: SSPBUF = byteToWrite;
  3527  001EE8  C0C1  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  3528  001EEC  0012               	return		;funcret
  3529  001EEE                     __end_of_I2C_Master_Write:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           prodh	equ	0xFF4
  3536                           prodl	equ	0xFF3
  3537                           intcon	equ	0xFF2
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           postdec1	equ	0xFE5
  3541                           fsr1l	equ	0xFE1
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _I2C_Master_Stop *****************
  3549 ;; Defined at:
  3550 ;;		line 96 in file "I2C.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2, status,0, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    5
  3571 ;; This function calls:
  3572 ;;		_I2C_Master_Wait
  3573 ;; This function is called by:
  3574 ;;		_I2C_init
  3575 ;;		_I2C_sendData
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	text20
  3580  001EEE                     __ptext20:
  3581                           	opt stack 0
  3582  001EEE                     _I2C_Master_Stop:
  3583                           	opt stack 23
  3584                           
  3585                           ;I2C.c: 105: I2C_Master_Wait();
  3586                           
  3587                           ;incstack = 0
  3588  001EEE  EC54  F00F         	call	_I2C_Master_Wait	;wreg free
  3589                           
  3590                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  3591  001EF2  84C5               	bsf	4037,2,c	;volatile
  3592  001EF4  0012               	return		;funcret
  3593  001EF6                     __end_of_I2C_Master_Stop:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           postdec1	equ	0xFE5
  3605                           fsr1l	equ	0xFE1
  3606                           postinc2	equ	0xFDE
  3607                           postdec2	equ	0xFDD
  3608                           fsr2h	equ	0xFDA
  3609                           fsr2l	equ	0xFD9
  3610                           status	equ	0xFD8
  3611                           
  3612 ;; *************** function _I2C_Master_Start *****************
  3613 ;; Defined at:
  3614 ;;		line 70 in file "I2C.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      void 
  3621 ;; Registers used:
  3622 ;;		wreg, status,2, status,0, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;Total ram usage:        0 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    5
  3635 ;; This function calls:
  3636 ;;		_I2C_Master_Wait
  3637 ;; This function is called by:
  3638 ;;		_I2C_init
  3639 ;;		_I2C_sendData
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text21
  3644  001EF6                     __ptext21:
  3645                           	opt stack 0
  3646  001EF6                     _I2C_Master_Start:
  3647                           	opt stack 23
  3648                           
  3649                           ;I2C.c: 79: I2C_Master_Wait();
  3650                           
  3651                           ;incstack = 0
  3652  001EF6  EC54  F00F         	call	_I2C_Master_Wait	;wreg free
  3653                           
  3654                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  3655  001EFA  80C5               	bsf	4037,0,c	;volatile
  3656  001EFC  0012               	return		;funcret
  3657  001EFE                     __end_of_I2C_Master_Start:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           intcon	equ	0xFF2
  3666                           postinc0	equ	0xFEE
  3667                           wreg	equ	0xFE8
  3668                           postdec1	equ	0xFE5
  3669                           fsr1l	equ	0xFE1
  3670                           postinc2	equ	0xFDE
  3671                           postdec2	equ	0xFDD
  3672                           fsr2h	equ	0xFDA
  3673                           fsr2l	equ	0xFD9
  3674                           status	equ	0xFD8
  3675                           
  3676 ;; *************** function _I2C_Master_Wait *****************
  3677 ;; Defined at:
  3678 ;;		line 52 in file "I2C.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;		None
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;Total ram usage:        1 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    4
  3699 ;; This function calls:
  3700 ;;		Nothing
  3701 ;; This function is called by:
  3702 ;;		_I2C_Master_Start
  3703 ;;		_I2C_Master_Stop
  3704 ;;		_I2C_Master_Write
  3705 ;;		_I2C_Master_RepeatedStart
  3706 ;;		_I2C_Master_Read
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text22
  3711  001EA8                     __ptext22:
  3712                           	opt stack 0
  3713  001EA8                     _I2C_Master_Wait:
  3714                           	opt stack 23
  3715                           
  3716                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3717                           
  3718                           ;incstack = 0
  3719  001EA8  B4C7               	btfsc	4039,2,c	;volatile
  3720  001EAA  D7FE               	goto	_I2C_Master_Wait
  3721  001EAC  CFC5 F0C0          	movff	4037,??_I2C_Master_Wait	;volatile
  3722  001EB0  0E1F               	movlw	31
  3723  001EB2  0100               	movlb	0	; () banked
  3724  001EB4  17C0               	andwf	??_I2C_Master_Wait& (0+255),f,b
  3725  001EB6  B4D8               	btfsc	status,2,c
  3726  001EB8  0012               	return	
  3727  001EBA  D7F6               	goto	_I2C_Master_Wait
  3728  001EBC                     __end_of_I2C_Master_Wait:
  3729                           	opt stack 0
  3730                           tblptru	equ	0xFF8
  3731                           tblptrh	equ	0xFF7
  3732                           tblptrl	equ	0xFF6
  3733                           tablat	equ	0xFF5
  3734                           prodh	equ	0xFF4
  3735                           prodl	equ	0xFF3
  3736                           intcon	equ	0xFF2
  3737                           postinc0	equ	0xFEE
  3738                           wreg	equ	0xFE8
  3739                           postdec1	equ	0xFE5
  3740                           fsr1l	equ	0xFE1
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _interruptHandler *****************
  3748 ;; Defined at:
  3749 ;;		line 156 in file "main.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:       19 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    3
  3770 ;; This function calls:
  3771 ;;		i2_initLCD
  3772 ;;		i2_lcdInst
  3773 ;;		i2_printf
  3774 ;; This function is called by:
  3775 ;;		Interrupt level 2
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	intcode
  3780  000008                     __pintcode:
  3781                           	opt stack 0
  3782  000008                     _interruptHandler:
  3783                           	opt stack 23
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;incstack = 0
  3787  000008  8258               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3788  00000A  ED56  F009         	call	int_func,f	;refresh shadow registers
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           prodh	equ	0xFF4
  3794                           prodl	equ	0xFF3
  3795                           intcon	equ	0xFF2
  3796                           postinc0	equ	0xFEE
  3797                           wreg	equ	0xFE8
  3798                           postdec1	equ	0xFE5
  3799                           fsr1l	equ	0xFE1
  3800                           postinc2	equ	0xFDE
  3801                           postdec2	equ	0xFDD
  3802                           fsr2h	equ	0xFDA
  3803                           fsr2l	equ	0xFD9
  3804                           status	equ	0xFD8
  3805                           
  3806                           	psect	intcode_body
  3807  0012AC                     __pintcode_body:
  3808                           	opt stack 23
  3809  0012AC                     int_func:
  3810                           	opt stack 23
  3811  0012AC  0006               	pop		; remove dummy address from shadow register refresh
  3812  0012AE  CFFA F018          	movff	pclath,??_interruptHandler+1
  3813  0012B2  CFFB F019          	movff	pclatu,??_interruptHandler+2
  3814  0012B6  CFE9 F01A          	movff	fsr0l,??_interruptHandler+3
  3815  0012BA  CFEA F01B          	movff	fsr0h,??_interruptHandler+4
  3816  0012BE  CFE1 F01C          	movff	fsr1l,??_interruptHandler+5
  3817  0012C2  CFE2 F01D          	movff	fsr1h,??_interruptHandler+6
  3818  0012C6  CFD9 F01E          	movff	fsr2l,??_interruptHandler+7
  3819  0012CA  CFDA F01F          	movff	fsr2h,??_interruptHandler+8
  3820  0012CE  CFF3 F020          	movff	prodl,??_interruptHandler+9
  3821  0012D2  CFF4 F021          	movff	prodh,??_interruptHandler+10
  3822  0012D6  CFF6 F022          	movff	tblptrl,??_interruptHandler+11
  3823  0012DA  CFF7 F023          	movff	tblptrh,??_interruptHandler+12
  3824  0012DE  CFF8 F024          	movff	tblptru,??_interruptHandler+13
  3825  0012E2  CFF5 F025          	movff	tablat,??_interruptHandler+14
  3826  0012E6  C058  F026         	movff	btemp,??_interruptHandler+15
  3827  0012EA  C059  F027         	movff	btemp+1,??_interruptHandler+16
  3828  0012EE  C05A  F028         	movff	btemp+2,??_interruptHandler+17
  3829  0012F2  C05B  F029         	movff	btemp+3,??_interruptHandler+18
  3830                           
  3831                           ;main.c: 168: if (RBIF){
  3832  0012F6  A0F2               	btfss	intcon,0,c	;volatile
  3833  0012F8  D0A7               	goto	i2l2278
  3834                           
  3835                           ;main.c: 170: B_input = PORTBbits.RB5;
  3836  0012FA  AA81               	btfss	3969,5,c	;volatile
  3837  0012FC  D003               	goto	i2u115_40
  3838  0012FE  6A17               	clrf	??_interruptHandler& (0+255),c
  3839  001300  2A17               	incf	??_interruptHandler& (0+255),f,c
  3840  001302  D001               	goto	i2u115_48
  3841  001304                     i2u115_40:
  3842  001304  6A17               	clrf	??_interruptHandler& (0+255),c
  3843  001306                     i2u115_48:
  3844  001306  5017               	movf	??_interruptHandler,w,c
  3845  001308  6E38               	movwf	_B_input,c
  3846  00130A  6A39               	clrf	_B_input+1,c
  3847                           
  3848                           ;main.c: 171: N_input = PORTBbits.RB6;
  3849  00130C  AC81               	btfss	3969,6,c	;volatile
  3850  00130E  D003               	goto	i2u116_40
  3851  001310  6A17               	clrf	??_interruptHandler& (0+255),c
  3852  001312  2A17               	incf	??_interruptHandler& (0+255),f,c
  3853  001314  D001               	goto	i2u116_48
  3854  001316                     i2u116_40:
  3855  001316  6A17               	clrf	??_interruptHandler& (0+255),c
  3856  001318                     i2u116_48:
  3857  001318  5017               	movf	??_interruptHandler,w,c
  3858  00131A  6E36               	movwf	_N_input,c
  3859  00131C  6A37               	clrf	_N_input+1,c
  3860                           
  3861                           ;main.c: 172: S_input = PORTBbits.RB4;
  3862  00131E  A881               	btfss	3969,4,c	;volatile
  3863  001320  D003               	goto	i2u117_40
  3864  001322  6A17               	clrf	??_interruptHandler& (0+255),c
  3865  001324  2A17               	incf	??_interruptHandler& (0+255),f,c
  3866  001326  D001               	goto	i2u117_48
  3867  001328                     i2u117_40:
  3868  001328  6A17               	clrf	??_interruptHandler& (0+255),c
  3869  00132A                     i2u117_48:
  3870  00132A  5017               	movf	??_interruptHandler,w,c
  3871  00132C  6E34               	movwf	_S_input,c
  3872  00132E  6A35               	clrf	_S_input+1,c
  3873                           
  3874                           ;main.c: 173: W_input = PORTBbits.RB7;
  3875  001330  AE81               	btfss	3969,7,c	;volatile
  3876  001332  D003               	goto	i2u118_40
  3877  001334  6A17               	clrf	??_interruptHandler& (0+255),c
  3878  001336  2A17               	incf	??_interruptHandler& (0+255),f,c
  3879  001338  D001               	goto	i2u118_48
  3880  00133A                     i2u118_40:
  3881  00133A  6A17               	clrf	??_interruptHandler& (0+255),c
  3882  00133C                     i2u118_48:
  3883  00133C  5017               	movf	??_interruptHandler,w,c
  3884  00133E  6E32               	movwf	_W_input,c
  3885  001340  6A33               	clrf	_W_input+1,c
  3886                           
  3887                           ;main.c: 177: if (B_input == 1){
  3888  001342  0438               	decf	_B_input,w,c
  3889  001344  1039               	iorwf	_B_input+1,w,c
  3890  001346  A4D8               	btfss	status,2,c
  3891  001348  D018               	goto	i2l210
  3892                           
  3893                           ;main.c: 178: B_spacingTime = 0;
  3894  00134A  0E00               	movlw	0
  3895  00134C  6E31               	movwf	_B_spacingTime+1,c
  3896  00134E  0E00               	movlw	0
  3897  001350  6E30               	movwf	_B_spacingTime,c
  3898                           
  3899                           ;main.c: 179: initLCD();
  3900  001352  EC72  F00E         	call	i2_initLCD	;wreg free
  3901                           
  3902                           ;main.c: 180: printf("bolt_interrupt");
  3903  001356  0E58               	movlw	low STR_4
  3904  001358  6E0D               	movwf	i2printf@f,c
  3905  00135A  0E10               	movlw	high STR_4
  3906  00135C  6E0E               	movwf	i2printf@f+1,c
  3907  00135E  ECE0  F00A         	call	i2_printf	;wreg free
  3908                           
  3909                           ;main.c: 181: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3910  001362  0E80               	movlw	128
  3911  001364  EC68  F00F         	call	i2_lcdInst
  3912  001368  0E34               	movlw	52
  3913  00136A  6E17               	movwf	??_interruptHandler& (0+255),c
  3914  00136C  0EF2               	movlw	242
  3915  00136E                     i2u179_47:
  3916  00136E  2EE8               	decfsz	wreg,f,c
  3917  001370  D7FE               	bra	i2u179_47
  3918  001372  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  3919  001374  D7FC               	bra	i2u179_47
  3920                           
  3921                           ;main.c: 182: B_count++;
  3922  001376  4A40               	infsnz	_B_count,f,c
  3923  001378  2A41               	incf	_B_count+1,f,c
  3924  00137A                     i2l210:
  3925                           
  3926                           ;main.c: 184: }
  3927                           ;main.c: 187: if (N_input == 1){
  3928  00137A  0436               	decf	_N_input,w,c
  3929  00137C  1037               	iorwf	_N_input+1,w,c
  3930  00137E  A4D8               	btfss	status,2,c
  3931  001380  D018               	goto	i2l211
  3932                           
  3933                           ;main.c: 188: N_spacingTime = 0;
  3934  001382  0E00               	movlw	0
  3935  001384  6E2F               	movwf	_N_spacingTime+1,c
  3936  001386  0E00               	movlw	0
  3937  001388  6E2E               	movwf	_N_spacingTime,c
  3938                           
  3939                           ;main.c: 189: initLCD();
  3940  00138A  EC72  F00E         	call	i2_initLCD	;wreg free
  3941                           
  3942                           ;main.c: 190: printf("nut_interrupt");
  3943  00138E  0E67               	movlw	low STR_5
  3944  001390  6E0D               	movwf	i2printf@f,c
  3945  001392  0E10               	movlw	high STR_5
  3946  001394  6E0E               	movwf	i2printf@f+1,c
  3947  001396  ECE0  F00A         	call	i2_printf	;wreg free
  3948                           
  3949                           ;main.c: 191: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3950  00139A  0E80               	movlw	128
  3951  00139C  EC68  F00F         	call	i2_lcdInst
  3952  0013A0  0E34               	movlw	52
  3953  0013A2  6E17               	movwf	??_interruptHandler& (0+255),c
  3954  0013A4  0EF2               	movlw	242
  3955  0013A6                     i2u180_47:
  3956  0013A6  2EE8               	decfsz	wreg,f,c
  3957  0013A8  D7FE               	bra	i2u180_47
  3958  0013AA  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  3959  0013AC  D7FC               	bra	i2u180_47
  3960                           
  3961                           ;main.c: 192: N_count++;
  3962  0013AE  4A3E               	infsnz	_N_count,f,c
  3963  0013B0  2A3F               	incf	_N_count+1,f,c
  3964  0013B2                     i2l211:
  3965                           
  3966                           ;main.c: 193: }
  3967                           ;main.c: 195: if (S_input == 1){
  3968  0013B2  0434               	decf	_S_input,w,c
  3969  0013B4  1035               	iorwf	_S_input+1,w,c
  3970  0013B6  A4D8               	btfss	status,2,c
  3971  0013B8  D018               	goto	i2l212
  3972                           
  3973                           ;main.c: 196: S_spacingTime = 0;
  3974  0013BA  0E00               	movlw	0
  3975  0013BC  6E2D               	movwf	_S_spacingTime+1,c
  3976  0013BE  0E00               	movlw	0
  3977  0013C0  6E2C               	movwf	_S_spacingTime,c
  3978                           
  3979                           ;main.c: 197: S_count++;
  3980  0013C2  4A3C               	infsnz	_S_count,f,c
  3981  0013C4  2A3D               	incf	_S_count+1,f,c
  3982                           
  3983                           ;main.c: 198: initLCD();
  3984  0013C6  EC72  F00E         	call	i2_initLCD	;wreg free
  3985                           
  3986                           ;main.c: 200: printf("spacer_interrupted");
  3987  0013CA  0E25               	movlw	low STR_6
  3988  0013CC  6E0D               	movwf	i2printf@f,c
  3989  0013CE  0E10               	movlw	high STR_6
  3990  0013D0  6E0E               	movwf	i2printf@f+1,c
  3991  0013D2  ECE0  F00A         	call	i2_printf	;wreg free
  3992                           
  3993                           ;main.c: 201: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3994  0013D6  0E80               	movlw	128
  3995  0013D8  EC68  F00F         	call	i2_lcdInst
  3996  0013DC  0E34               	movlw	52
  3997  0013DE  6E17               	movwf	??_interruptHandler& (0+255),c
  3998  0013E0  0EF2               	movlw	242
  3999  0013E2                     i2u181_47:
  4000  0013E2  2EE8               	decfsz	wreg,f,c
  4001  0013E4  D7FE               	bra	i2u181_47
  4002  0013E6  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  4003  0013E8  D7FC               	bra	i2u181_47
  4004  0013EA                     i2l212:
  4005                           
  4006                           ;main.c: 202: }
  4007                           ;main.c: 204: if (W_input == 1){
  4008  0013EA  0432               	decf	_W_input,w,c
  4009  0013EC  1033               	iorwf	_W_input+1,w,c
  4010  0013EE  A4D8               	btfss	status,2,c
  4011  0013F0  D018               	goto	i2l213
  4012                           
  4013                           ;main.c: 205: W_spacingTime = 0;
  4014  0013F2  0E00               	movlw	0
  4015  0013F4  6E2B               	movwf	_W_spacingTime+1,c
  4016  0013F6  0E00               	movlw	0
  4017  0013F8  6E2A               	movwf	_W_spacingTime,c
  4018                           
  4019                           ;main.c: 206: initLCD();
  4020  0013FA  EC72  F00E         	call	i2_initLCD	;wreg free
  4021                           
  4022                           ;main.c: 207: printf("washer_interrupt");
  4023  0013FE  0E38               	movlw	low STR_7
  4024  001400  6E0D               	movwf	i2printf@f,c
  4025  001402  0E10               	movlw	high STR_7
  4026  001404  6E0E               	movwf	i2printf@f+1,c
  4027  001406  ECE0  F00A         	call	i2_printf	;wreg free
  4028                           
  4029                           ;main.c: 208: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4030  00140A  0E80               	movlw	128
  4031  00140C  EC68  F00F         	call	i2_lcdInst
  4032  001410  0E34               	movlw	52
  4033  001412  6E17               	movwf	??_interruptHandler& (0+255),c
  4034  001414  0EF2               	movlw	242
  4035  001416                     i2u182_47:
  4036  001416  2EE8               	decfsz	wreg,f,c
  4037  001418  D7FE               	bra	i2u182_47
  4038  00141A  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  4039  00141C  D7FC               	bra	i2u182_47
  4040                           
  4041                           ;main.c: 209: W_count++;
  4042  00141E  4A3A               	infsnz	_W_count,f,c
  4043  001420  2A3B               	incf	_W_count+1,f,c
  4044  001422                     i2l213:
  4045                           
  4046                           ;main.c: 212: }
  4047                           ;main.c: 213: initLCD();
  4048  001422  EC72  F00E         	call	i2_initLCD	;wreg free
  4049                           
  4050                           ;main.c: 214: printf("interrupted");
  4051  001426  0E2C               	movlw	low (STR_6+7)
  4052  001428  6E0D               	movwf	i2printf@f,c
  4053  00142A  0E10               	movlw	high (STR_6+7)
  4054  00142C  6E0E               	movwf	i2printf@f+1,c
  4055  00142E  ECE0  F00A         	call	i2_printf	;wreg free
  4056                           
  4057                           ;main.c: 215: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4058  001432  0E80               	movlw	128
  4059  001434  EC68  F00F         	call	i2_lcdInst
  4060  001438  0E34               	movlw	52
  4061  00143A  6E17               	movwf	??_interruptHandler& (0+255),c
  4062  00143C  0EF2               	movlw	242
  4063  00143E                     i2u183_47:
  4064  00143E  2EE8               	decfsz	wreg,f,c
  4065  001440  D7FE               	bra	i2u183_47
  4066  001442  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  4067  001444  D7FC               	bra	i2u183_47
  4068                           
  4069                           ;main.c: 221: RBIF = 0;
  4070  001446  90F2               	bcf	intcon,0,c	;volatile
  4071  001448                     i2l2278:
  4072                           
  4073                           ;main.c: 222: return;
  4074  001448  C029  F05B         	movff	??_interruptHandler+18,btemp+3
  4075  00144C  C028  F05A         	movff	??_interruptHandler+17,btemp+2
  4076  001450  C027  F059         	movff	??_interruptHandler+16,btemp+1
  4077  001454  C026  F058         	movff	??_interruptHandler+15,btemp
  4078  001458  C025  FFF5         	movff	??_interruptHandler+14,tablat
  4079  00145C  C024  FFF8         	movff	??_interruptHandler+13,tblptru
  4080  001460  C023  FFF7         	movff	??_interruptHandler+12,tblptrh
  4081  001464  C022  FFF6         	movff	??_interruptHandler+11,tblptrl
  4082  001468  C021  FFF4         	movff	??_interruptHandler+10,prodh
  4083  00146C  C020  FFF3         	movff	??_interruptHandler+9,prodl
  4084  001470  C01F  FFDA         	movff	??_interruptHandler+8,fsr2h
  4085  001474  C01E  FFD9         	movff	??_interruptHandler+7,fsr2l
  4086  001478  C01D  FFE2         	movff	??_interruptHandler+6,fsr1h
  4087  00147C  C01C  FFE1         	movff	??_interruptHandler+5,fsr1l
  4088  001480  C01B  FFEA         	movff	??_interruptHandler+4,fsr0h
  4089  001484  C01A  FFE9         	movff	??_interruptHandler+3,fsr0l
  4090  001488  C019  FFFB         	movff	??_interruptHandler+2,pclatu
  4091  00148C  C018  FFFA         	movff	??_interruptHandler+1,pclath
  4092  001490  9258               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4093  001492  0011               	retfie		f
  4094  001494                     __end_of_interruptHandler:
  4095                           	opt stack 0
  4096                           pclatu	equ	0xFFB
  4097                           pclath	equ	0xFFA
  4098                           tblptru	equ	0xFF8
  4099                           tblptrh	equ	0xFF7
  4100                           tblptrl	equ	0xFF6
  4101                           tablat	equ	0xFF5
  4102                           prodh	equ	0xFF4
  4103                           prodl	equ	0xFF3
  4104                           intcon	equ	0xFF2
  4105                           postinc0	equ	0xFEE
  4106                           fsr0h	equ	0xFEA
  4107                           fsr0l	equ	0xFE9
  4108                           wreg	equ	0xFE8
  4109                           postdec1	equ	0xFE5
  4110                           fsr1h	equ	0xFE2
  4111                           fsr1l	equ	0xFE1
  4112                           postinc2	equ	0xFDE
  4113                           postdec2	equ	0xFDD
  4114                           fsr2h	equ	0xFDA
  4115                           fsr2l	equ	0xFD9
  4116                           status	equ	0xFD8
  4117                           
  4118 ;; *************** function i2_printf *****************
  4119 ;; Defined at:
  4120 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4123 ;;		 -> STR_16(20), STR_15(20), STR_14(20), STR_13(20), 
  4124 ;;		 -> STR_12(20), STR_11(20), STR_10(20), STR_9(20), 
  4125 ;;		 -> STR_8(12), STR_7(17), STR_6(19), STR_5(14), 
  4126 ;;		 -> STR_4(15), STR_3(20), STR_2(15), STR_1(20), 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  printf          4    0        struct .
  4129 ;;  printf          3    0        PTR const unsigned char 
  4130 ;;  printf          2   19[COMRAM] unsigned int 
  4131 ;;  printf          2   15[COMRAM] PTR void [1]
  4132 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4133 ;;  printf          2    0        unsigned int 
  4134 ;;  printf          1   21[COMRAM] char 
  4135 ;;  printf          1   18[COMRAM] char 
  4136 ;;  printf          1   17[COMRAM] unsigned char 
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  2   12[COMRAM] int 
  4139 ;; Registers used:
  4140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4146 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;Total ram usage:       10 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    2
  4153 ;; This function calls:
  4154 ;;		i2___lwdiv
  4155 ;;		i2___lwmod
  4156 ;;		i2_putch
  4157 ;; This function is called by:
  4158 ;;		_interruptHandler
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text24
  4163  0015C0                     __ptext24:
  4164                           	opt stack 0
  4165  0015C0                     i2_printf:
  4166                           	opt stack 23
  4167                           
  4168                           ;doprnt.c: 466: va_list ap;
  4169                           ;doprnt.c: 499: signed char c;
  4170                           ;doprnt.c: 506: signed char prec;
  4171                           ;doprnt.c: 508: unsigned char flag;
  4172                           ;doprnt.c: 523: union {
  4173                           ;doprnt.c: 524: unsigned long vd;
  4174                           ;doprnt.c: 525: double integ;
  4175                           ;doprnt.c: 526: } tmpval;
  4176                           ;doprnt.c: 528: unsigned int val;
  4177                           ;doprnt.c: 529: unsigned len;
  4178                           ;doprnt.c: 530: const char * cp;
  4179                           ;doprnt.c: 533: *ap = __va_start();
  4180                           
  4181                           ;incstack = 0
  4182  0015C0  0E0F               	movlw	low (?i2_printf+2)
  4183  0015C2  6E10               	movwf	i2printf@ap,c
  4184  0015C4  0E00               	movlw	high (?i2_printf+2)
  4185  0015C6  6E11               	movwf	i2printf@ap+1,c
  4186                           
  4187                           ;doprnt.c: 536: while(c = *f++) {
  4188  0015C8  D07D               	goto	i2u103_40
  4189  0015CA                     
  4190                           ;doprnt.c: 538: if(c != '%')
  4191  0015CA  0E25               	movlw	37
  4192  0015CC  1816               	xorwf	i2printf@c,w,c
  4193  0015CE  B4D8               	btfsc	status,2,c
  4194  0015D0  D004               	goto	i2l335
  4195                           
  4196                           ;doprnt.c: 540: {
  4197                           ;doprnt.c: 541: (putch(c) );
  4198  0015D2  5016               	movf	i2printf@c,w,c
  4199  0015D4  EC5E  F00F         	call	i2_putch
  4200                           
  4201                           ;doprnt.c: 542: continue;
  4202  0015D8  D075               	goto	i2u103_40
  4203  0015DA                     i2l335:
  4204                           
  4205                           ;doprnt.c: 543: }
  4206                           ;doprnt.c: 548: flag = 0;
  4207  0015DA  0E00               	movlw	0
  4208  0015DC  6E12               	movwf	i2printf@flag,c
  4209                           
  4210                           ;doprnt.c: 822: }
  4211                           
  4212                           ;doprnt.c: 813: continue;
  4213                           
  4214                           ;doprnt.c: 802: default:
  4215                           
  4216                           ;doprnt.c: 698: case 'i':
  4217                           ;doprnt.c: 699: break;
  4218                           
  4219                           ;doprnt.c: 697: case 'd':
  4220                           
  4221                           ;doprnt.c: 638: goto alldone;
  4222                           
  4223                           ;doprnt.c: 637: case 0:
  4224                           
  4225                           ;doprnt.c: 635: switch(c = *f++) {
  4226  0015DE  C00D  FFF6         	movff	i2printf@f,tblptrl
  4227  0015E2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4228  0015E6  4A0D               	infsnz	i2printf@f,f,c
  4229  0015E8  2A0E               	incf	i2printf@f+1,f,c
  4230  0015EA                     	if	0	;tblptru may be non-zero
  4231  0015EA                     	endif
  4232  0015EA                     	if	0	;tblptru may be non-zero
  4233  0015EA                     	endif
  4234  0015EA  0008               	tblrd		*
  4235  0015EC  CFF5 F016          	movff	tablat,i2printf@c
  4236  0015F0  5016               	movf	i2printf@c,w,c
  4237                           
  4238                           ; Switch size 1, requested type "space"
  4239                           ; Number of cases is 3, Range of values is 0 to 105
  4240                           ; switch strategies available:
  4241                           ; Name         Instructions Cycles
  4242                           ; simple_byte           10     6 (average)
  4243                           ;	Chosen strategy is simple_byte
  4244  0015F2  0A00               	xorlw	0	; case 0
  4245  0015F4  B4D8               	btfsc	status,2,c
  4246  0015F6  0012               	return	
  4247  0015F8  0A64               	xorlw	100	; case 100
  4248  0015FA  B4D8               	btfsc	status,2,c
  4249  0015FC  D003               	goto	i2l341
  4250  0015FE  0A0D               	xorlw	13	; case 105
  4251  001600  A4D8               	btfss	status,2,c
  4252  001602  D060               	goto	i2u103_40
  4253  001604                     i2l341:
  4254                           
  4255                           ;doprnt.c: 1253: {
  4256                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4257  001604  C010  FFD9         	movff	i2printf@ap,fsr2l
  4258  001608  C011  FFDA         	movff	i2printf@ap+1,fsr2h
  4259  00160C  CFDE F014          	movff	postinc2,i2printf@val
  4260  001610  CFDD F015          	movff	postdec2,i2printf@val+1
  4261  001614  0E02               	movlw	2
  4262  001616  2610               	addwf	i2printf@ap,f,c
  4263  001618  0E00               	movlw	0
  4264  00161A  2211               	addwfc	i2printf@ap+1,f,c
  4265                           
  4266                           ;doprnt.c: 1261: if((int)val < 0) {
  4267  00161C  AE15               	btfss	i2printf@val+1,7,c
  4268  00161E  D006               	goto	i2l343
  4269                           
  4270                           ;doprnt.c: 1262: flag |= 0x03;
  4271  001620  0E03               	movlw	3
  4272  001622  1212               	iorwf	i2printf@flag,f,c
  4273                           
  4274                           ;doprnt.c: 1263: val = -val;
  4275  001624  6C14               	negf	i2printf@val,c
  4276  001626  1E15               	comf	i2printf@val+1,f,c
  4277  001628  B0D8               	btfsc	status,0,c
  4278  00162A  2A15               	incf	i2printf@val+1,f,c
  4279  00162C                     i2l343:
  4280                           
  4281                           ;doprnt.c: 1264: }
  4282                           ;doprnt.c: 1266: }
  4283                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4284  00162C  0E01               	movlw	1
  4285  00162E  6E16               	movwf	i2printf@c,c
  4286  001630                     i2l2058:
  4287  001630  0E05               	movlw	5
  4288  001632  1816               	xorwf	i2printf@c,w,c
  4289  001634  B4D8               	btfsc	status,2,c
  4290  001636  D012               	goto	i2u101_40
  4291                           
  4292                           ;doprnt.c: 1306: if(val < dpowers[c])
  4293  001638  5016               	movf	i2printf@c,w,c
  4294  00163A  0D02               	mullw	2
  4295  00163C  0E01               	movlw	low _dpowers
  4296  00163E  24F3               	addwf	prodl,w,c
  4297  001640  6EF6               	movwf	tblptrl,c
  4298  001642  0E10               	movlw	high _dpowers
  4299  001644  20F4               	addwfc	prodh,w,c
  4300  001646  6EF7               	movwf	tblptrh,c
  4301  001648                     	if	0	;There are less than 3 active tblptr bytes
  4302  001648                     	endif
  4303  001648  0009               	tblrd		*+
  4304  00164A  50F5               	movf	tablat,w,c
  4305  00164C  5C14               	subwf	i2printf@val,w,c
  4306  00164E  0009               	tblrd		*+
  4307  001650  50F5               	movf	tablat,w,c
  4308  001652  5815               	subwfb	i2printf@val+1,w,c
  4309  001654  A0D8               	btfss	status,0,c
  4310  001656  D002               	goto	i2u101_40
  4311                           
  4312                           ;doprnt.c: 1307: break;
  4313  001658  2A16               	incf	i2printf@c,f,c
  4314  00165A  D7EA               	goto	i2l2058
  4315  00165C                     i2u101_40:
  4316                           
  4317                           ;doprnt.c: 1422: {
  4318                           ;doprnt.c: 1438: if(flag & 0x03)
  4319  00165C  C012  F00F         	movff	i2printf@flag,??i2_printf
  4320  001660  0E03               	movlw	3
  4321  001662  160F               	andwf	??i2_printf,f,c
  4322  001664  B4D8               	btfsc	status,2,c
  4323  001666  D003               	goto	i2l347
  4324                           
  4325                           ;doprnt.c: 1439: (putch('-') );
  4326  001668  0E2D               	movlw	45
  4327  00166A  EC5E  F00F         	call	i2_putch
  4328  00166E                     i2l347:
  4329                           
  4330                           ;doprnt.c: 1469: }
  4331                           ;doprnt.c: 1472: prec = c;
  4332  00166E  C016  F013         	movff	i2printf@c,i2printf@prec
  4333                           
  4334                           ;doprnt.c: 1474: while(prec--) {
  4335  001672  D024               	goto	i2l348
  4336  001674                     
  4337                           ;doprnt.c: 1478: {
  4338                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4339  001674  5013               	movf	i2printf@prec,w,c
  4340  001676  0D02               	mullw	2
  4341  001678  0E01               	movlw	low _dpowers
  4342  00167A  24F3               	addwf	prodl,w,c
  4343  00167C  6EF6               	movwf	tblptrl,c
  4344  00167E  0E10               	movlw	high _dpowers
  4345  001680  20F4               	addwfc	prodh,w,c
  4346  001682  6EF7               	movwf	tblptrh,c
  4347  001684                     	if	0	;There are less than 3 active tblptr bytes
  4348  001684                     	endif
  4349  001684  0009               	tblrd		*+
  4350  001686  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4351  00168A  000A               	tblrd		*-
  4352  00168C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4353  001690  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4354  001694  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4355  001698  EC23  F00E         	call	i2___lwdiv	;wreg free
  4356  00169C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4357  0016A0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4358  0016A4  0E00               	movlw	0
  4359  0016A6  6E0B               	movwf	i2___lwmod@divisor+1,c
  4360  0016A8  0E0A               	movlw	10
  4361  0016AA  6E0A               	movwf	i2___lwmod@divisor,c
  4362  0016AC  ECBA  F00E         	call	i2___lwmod	;wreg free
  4363  0016B0  5008               	movf	?i2___lwmod,w,c
  4364  0016B2  0F30               	addlw	48
  4365  0016B4  6E16               	movwf	i2printf@c,c
  4366                           
  4367                           ;doprnt.c: 1523: }
  4368                           ;doprnt.c: 1524: (putch(c) );
  4369  0016B6  5016               	movf	i2printf@c,w,c
  4370  0016B8  EC5E  F00F         	call	i2_putch
  4371  0016BC                     i2l348:
  4372  0016BC  0613               	decf	i2printf@prec,f,c
  4373  0016BE  2813               	incf	i2printf@prec,w,c
  4374  0016C0  A4D8               	btfss	status,2,c
  4375  0016C2  D7D8               	goto	i2l349
  4376  0016C4                     i2u103_40:
  4377  0016C4  C00D  FFF6         	movff	i2printf@f,tblptrl
  4378  0016C8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4379  0016CC  4A0D               	infsnz	i2printf@f,f,c
  4380  0016CE  2A0E               	incf	i2printf@f+1,f,c
  4381  0016D0                     	if	0	;tblptru may be non-zero
  4382  0016D0                     	endif
  4383  0016D0                     	if	0	;tblptru may be non-zero
  4384  0016D0                     	endif
  4385  0016D0  0008               	tblrd		*
  4386  0016D2  CFF5 F016          	movff	tablat,i2printf@c
  4387  0016D6  5016               	movf	i2printf@c,w,c
  4388  0016D8  B4D8               	btfsc	status,2,c
  4389  0016DA  0012               	return	
  4390  0016DC  D776               	goto	i2l334
  4391  0016DE                     __end_ofi2_printf:
  4392                           	opt stack 0
  4393                           pclatu	equ	0xFFB
  4394                           pclath	equ	0xFFA
  4395                           tblptru	equ	0xFF8
  4396                           tblptrh	equ	0xFF7
  4397                           tblptrl	equ	0xFF6
  4398                           tablat	equ	0xFF5
  4399                           prodh	equ	0xFF4
  4400                           prodl	equ	0xFF3
  4401                           intcon	equ	0xFF2
  4402                           postinc0	equ	0xFEE
  4403                           fsr0h	equ	0xFEA
  4404                           fsr0l	equ	0xFE9
  4405                           wreg	equ	0xFE8
  4406                           postdec1	equ	0xFE5
  4407                           fsr1h	equ	0xFE2
  4408                           fsr1l	equ	0xFE1
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           
  4415 ;; *************** function i2_putch *****************
  4416 ;; Defined at:
  4417 ;;		line 24 in file "lcd.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  data            1    wreg     unsigned char 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  data            1    2[COMRAM] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;Total ram usage:        1 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    1
  4438 ;; This function calls:
  4439 ;;		i2_lcdNibble
  4440 ;; This function is called by:
  4441 ;;		i2_printf
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           	psect	text25
  4446  001EBC                     __ptext25:
  4447                           	opt stack 0
  4448  001EBC                     i2_putch:
  4449                           	opt stack 23
  4450                           
  4451                           ;incstack = 0
  4452                           ;i2putch@data stored from wreg
  4453  001EBC  6E03               	movwf	i2putch@data,c
  4454                           
  4455                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4456  001EBE  848C               	bsf	3980,2,c	;volatile
  4457                           
  4458                           ;lcd.c: 33: lcdNibble(data);
  4459  001EC0  5003               	movf	i2putch@data,w,c
  4460  001EC2  ECB1  F00B         	call	i2_lcdNibble
  4461                           
  4462                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4463  001EC6  0EA0               	movlw	160
  4464  001EC8                     i2u184_47:
  4465  001EC8  D000               	nop2	
  4466  001ECA  2EE8               	decfsz	wreg,f,c
  4467  001ECC  D7FD               	bra	i2u184_47
  4468  001ECE  0012               	return		;funcret
  4469  001ED0                     __end_ofi2_putch:
  4470                           	opt stack 0
  4471                           pclatu	equ	0xFFB
  4472                           pclath	equ	0xFFA
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           prodh	equ	0xFF4
  4478                           prodl	equ	0xFF3
  4479                           intcon	equ	0xFF2
  4480                           postinc0	equ	0xFEE
  4481                           fsr0h	equ	0xFEA
  4482                           fsr0l	equ	0xFE9
  4483                           wreg	equ	0xFE8
  4484                           postdec1	equ	0xFE5
  4485                           fsr1h	equ	0xFE2
  4486                           fsr1l	equ	0xFE1
  4487                           postinc2	equ	0xFDE
  4488                           postdec2	equ	0xFDD
  4489                           fsr2h	equ	0xFDA
  4490                           fsr2l	equ	0xFD9
  4491                           status	equ	0xFD8
  4492                           
  4493 ;; *************** function i2___lwmod *****************
  4494 ;; Defined at:
  4495 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  dividend        2    7[COMRAM] unsigned int 
  4498 ;;  divisor         2    9[COMRAM] unsigned int 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  2    7[COMRAM] unsigned int 
  4503 ;; Registers used:
  4504 ;;		wreg, status,2, status,0
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;Total ram usage:        5 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		i2_printf
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text26
  4524  001D74                     __ptext26:
  4525                           	opt stack 0
  4526  001D74                     i2___lwmod:
  4527                           	opt stack 24
  4528                           
  4529                           ;incstack = 0
  4530  001D74  500A               	movf	i2___lwmod@divisor,w,c
  4531  001D76  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4532  001D78  B4D8               	btfsc	status,2,c
  4533  001D7A  D018               	goto	i2l771
  4534  001D7C  0E01               	movlw	1
  4535  001D7E  6E0C               	movwf	i2___lwmod@counter,c
  4536  001D80  D004               	goto	i2l766
  4537  001D82  90D8               	bcf	status,0,c
  4538  001D84  360A               	rlcf	i2___lwmod@divisor,f,c
  4539  001D86  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4540  001D88  2A0C               	incf	i2___lwmod@counter,f,c
  4541  001D8A                     i2l766:
  4542  001D8A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4543  001D8C  D7FA               	goto	i2l767
  4544  001D8E                     i2u87_40:
  4545  001D8E  500A               	movf	i2___lwmod@divisor,w,c
  4546  001D90  5C08               	subwf	i2___lwmod@dividend,w,c
  4547  001D92  500B               	movf	i2___lwmod@divisor+1,w,c
  4548  001D94  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4549  001D96  A0D8               	btfss	status,0,c
  4550  001D98  D004               	goto	i2l770
  4551  001D9A  500A               	movf	i2___lwmod@divisor,w,c
  4552  001D9C  5E08               	subwf	i2___lwmod@dividend,f,c
  4553  001D9E  500B               	movf	i2___lwmod@divisor+1,w,c
  4554  001DA0  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4555  001DA2                     i2l770:
  4556  001DA2  90D8               	bcf	status,0,c
  4557  001DA4  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4558  001DA6  320A               	rrcf	i2___lwmod@divisor,f,c
  4559  001DA8  2E0C               	decfsz	i2___lwmod@counter,f,c
  4560  001DAA  D7F1               	goto	i2u87_40
  4561  001DAC                     i2l771:
  4562  001DAC  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4563  001DB0  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4564  001DB4  0012               	return		;funcret
  4565  001DB6                     __end_ofi2___lwmod:
  4566                           	opt stack 0
  4567                           pclatu	equ	0xFFB
  4568                           pclath	equ	0xFFA
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           intcon	equ	0xFF2
  4576                           postinc0	equ	0xFEE
  4577                           fsr0h	equ	0xFEA
  4578                           fsr0l	equ	0xFE9
  4579                           wreg	equ	0xFE8
  4580                           postdec1	equ	0xFE5
  4581                           fsr1h	equ	0xFE2
  4582                           fsr1l	equ	0xFE1
  4583                           postinc2	equ	0xFDE
  4584                           postdec2	equ	0xFDD
  4585                           fsr2h	equ	0xFDA
  4586                           fsr2l	equ	0xFD9
  4587                           status	equ	0xFD8
  4588                           
  4589 ;; *************** function i2___lwdiv *****************
  4590 ;; Defined at:
  4591 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;  dividend        2    0[COMRAM] unsigned int 
  4594 ;;  divisor         2    2[COMRAM] unsigned int 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4597 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  2    0[COMRAM] unsigned int 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2, status,0
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;Total ram usage:        7 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; This function calls:
  4614 ;;		Nothing
  4615 ;; This function is called by:
  4616 ;;		i2_printf
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           	psect	text27
  4621  001C46                     __ptext27:
  4622                           	opt stack 0
  4623  001C46                     i2___lwdiv:
  4624                           	opt stack 24
  4625                           
  4626                           ;incstack = 0
  4627  001C46  0E00               	movlw	0
  4628  001C48  6E06               	movwf	i2___lwdiv@quotient+1,c
  4629  001C4A  0E00               	movlw	0
  4630  001C4C  6E05               	movwf	i2___lwdiv@quotient,c
  4631  001C4E  5003               	movf	i2___lwdiv@divisor,w,c
  4632  001C50  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4633  001C52  B4D8               	btfsc	status,2,c
  4634  001C54  D01C               	goto	i2l761
  4635  001C56  0E01               	movlw	1
  4636  001C58  6E07               	movwf	i2___lwdiv@counter,c
  4637  001C5A  D004               	goto	i2l756
  4638  001C5C  90D8               	bcf	status,0,c
  4639  001C5E  3603               	rlcf	i2___lwdiv@divisor,f,c
  4640  001C60  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4641  001C62  2A07               	incf	i2___lwdiv@counter,f,c
  4642  001C64                     i2l756:
  4643  001C64  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4644  001C66  D7FA               	goto	i2l757
  4645  001C68                     i2u84_40:
  4646  001C68  90D8               	bcf	status,0,c
  4647  001C6A  3605               	rlcf	i2___lwdiv@quotient,f,c
  4648  001C6C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4649  001C6E  5003               	movf	i2___lwdiv@divisor,w,c
  4650  001C70  5C01               	subwf	i2___lwdiv@dividend,w,c
  4651  001C72  5004               	movf	i2___lwdiv@divisor+1,w,c
  4652  001C74  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4653  001C76  A0D8               	btfss	status,0,c
  4654  001C78  D005               	goto	i2l760
  4655  001C7A  5003               	movf	i2___lwdiv@divisor,w,c
  4656  001C7C  5E01               	subwf	i2___lwdiv@dividend,f,c
  4657  001C7E  5004               	movf	i2___lwdiv@divisor+1,w,c
  4658  001C80  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4659  001C82  8005               	bsf	i2___lwdiv@quotient,0,c
  4660  001C84                     i2l760:
  4661  001C84  90D8               	bcf	status,0,c
  4662  001C86  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4663  001C88  3203               	rrcf	i2___lwdiv@divisor,f,c
  4664  001C8A  2E07               	decfsz	i2___lwdiv@counter,f,c
  4665  001C8C  D7ED               	goto	i2u84_40
  4666  001C8E                     i2l761:
  4667  001C8E  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4668  001C92  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4669  001C96  0012               	return		;funcret
  4670  001C98                     __end_ofi2___lwdiv:
  4671                           	opt stack 0
  4672                           pclatu	equ	0xFFB
  4673                           pclath	equ	0xFFA
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           intcon	equ	0xFF2
  4681                           postinc0	equ	0xFEE
  4682                           fsr0h	equ	0xFEA
  4683                           fsr0l	equ	0xFE9
  4684                           wreg	equ	0xFE8
  4685                           postdec1	equ	0xFE5
  4686                           fsr1h	equ	0xFE2
  4687                           fsr1l	equ	0xFE1
  4688                           postinc2	equ	0xFDE
  4689                           postdec2	equ	0xFDD
  4690                           fsr2h	equ	0xFDA
  4691                           fsr2l	equ	0xFD9
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function i2_initLCD *****************
  4695 ;; Defined at:
  4696 ;;		line 60 in file "lcd.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;		None
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;		None
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      void 
  4703 ;; Registers used:
  4704 ;;		wreg, status,2, status,0, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;Total ram usage:        1 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    2
  4717 ;; This function calls:
  4718 ;;		i2_lcdInst
  4719 ;; This function is called by:
  4720 ;;		_interruptHandler
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text28
  4725  001CE4                     __ptext28:
  4726                           	opt stack 0
  4727  001CE4                     i2_initLCD:
  4728                           	opt stack 23
  4729                           
  4730                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  4731                           
  4732                           ;incstack = 0
  4733  001CE4  0E9C               	movlw	156
  4734  001CE6  6E04               	movwf	??i2_initLCD& (0+255),c
  4735  001CE8  0ED7               	movlw	215
  4736  001CEA                     i2u185_47:
  4737  001CEA  2EE8               	decfsz	wreg,f,c
  4738  001CEC  D7FE               	bra	i2u185_47
  4739  001CEE  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  4740  001CF0  D7FC               	bra	i2u185_47
  4741  001CF2  F000               	nop	
  4742                           
  4743                           ;lcd.c: 69: lcdInst(0b00110011);
  4744  001CF4  0E33               	movlw	51
  4745  001CF6  EC68  F00F         	call	i2_lcdInst
  4746                           
  4747                           ;lcd.c: 70: lcdInst(0b00110010);
  4748  001CFA  0E32               	movlw	50
  4749  001CFC  EC68  F00F         	call	i2_lcdInst
  4750                           
  4751                           ;lcd.c: 71: lcdInst(0b00101000);
  4752  001D00  0E28               	movlw	40
  4753  001D02  EC68  F00F         	call	i2_lcdInst
  4754                           
  4755                           ;lcd.c: 72: lcdInst(0b00001111);
  4756  001D06  0E0F               	movlw	15
  4757  001D08  EC68  F00F         	call	i2_lcdInst
  4758                           
  4759                           ;lcd.c: 73: lcdInst(0b00000110);
  4760  001D0C  0E06               	movlw	6
  4761  001D0E  EC68  F00F         	call	i2_lcdInst
  4762                           
  4763                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4764  001D12  0E01               	movlw	1
  4765  001D14  EC68  F00F         	call	i2_lcdInst
  4766  001D18  0E9C               	movlw	156
  4767  001D1A  6E04               	movwf	??i2_initLCD& (0+255),c
  4768  001D1C  0ED7               	movlw	215
  4769  001D1E                     i2u186_47:
  4770  001D1E  2EE8               	decfsz	wreg,f,c
  4771  001D20  D7FE               	bra	i2u186_47
  4772  001D22  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  4773  001D24  D7FC               	bra	i2u186_47
  4774  001D26  F000               	nop	
  4775                           
  4776                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4777  001D28  0E0F               	movlw	15
  4778  001D2A  EC68  F00F         	call	i2_lcdInst
  4779  001D2E  0012               	return		;funcret
  4780  001D30                     __end_ofi2_initLCD:
  4781                           	opt stack 0
  4782                           pclatu	equ	0xFFB
  4783                           pclath	equ	0xFFA
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           intcon	equ	0xFF2
  4791                           postinc0	equ	0xFEE
  4792                           fsr0h	equ	0xFEA
  4793                           fsr0l	equ	0xFE9
  4794                           wreg	equ	0xFE8
  4795                           postdec1	equ	0xFE5
  4796                           fsr1h	equ	0xFE2
  4797                           fsr1l	equ	0xFE1
  4798                           postinc2	equ	0xFDE
  4799                           postdec2	equ	0xFDD
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function i2_lcdInst *****************
  4805 ;; Defined at:
  4806 ;;		line 11 in file "lcd.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  data            1    wreg     unsigned char 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  data            1    2[COMRAM] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      void 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0, cstack
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;Total ram usage:        1 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    1
  4827 ;; This function calls:
  4828 ;;		i2_lcdNibble
  4829 ;; This function is called by:
  4830 ;;		_interruptHandler
  4831 ;;		i2_initLCD
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           	psect	text29
  4836  001ED0                     __ptext29:
  4837                           	opt stack 0
  4838  001ED0                     i2_lcdInst:
  4839                           	opt stack 24
  4840                           
  4841                           ;incstack = 0
  4842                           ;i2lcdInst@data stored from wreg
  4843  001ED0  6E03               	movwf	i2lcdInst@data,c
  4844                           
  4845                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  4846  001ED2  948C               	bcf	3980,2,c	;volatile
  4847                           
  4848                           ;lcd.c: 20: lcdNibble(data);
  4849  001ED4  5003               	movf	i2lcdInst@data,w,c
  4850  001ED6  ECB1  F00B         	call	i2_lcdNibble
  4851                           
  4852                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  4853  001EDA  0EA0               	movlw	160
  4854  001EDC                     i2u187_47:
  4855  001EDC  D000               	nop2	
  4856  001EDE  2EE8               	decfsz	wreg,f,c
  4857  001EE0  D7FD               	bra	i2u187_47
  4858  001EE2  0012               	return		;funcret
  4859  001EE4                     __end_ofi2_lcdInst:
  4860                           	opt stack 0
  4861                           pclatu	equ	0xFFB
  4862                           pclath	equ	0xFFA
  4863                           tblptru	equ	0xFF8
  4864                           tblptrh	equ	0xFF7
  4865                           tblptrl	equ	0xFF6
  4866                           tablat	equ	0xFF5
  4867                           prodh	equ	0xFF4
  4868                           prodl	equ	0xFF3
  4869                           intcon	equ	0xFF2
  4870                           postinc0	equ	0xFEE
  4871                           fsr0h	equ	0xFEA
  4872                           fsr0l	equ	0xFE9
  4873                           wreg	equ	0xFE8
  4874                           postdec1	equ	0xFE5
  4875                           fsr1h	equ	0xFE2
  4876                           fsr1l	equ	0xFE1
  4877                           postinc2	equ	0xFDE
  4878                           postdec2	equ	0xFDD
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function i2_lcdNibble *****************
  4884 ;; Defined at:
  4885 ;;		line 37 in file "lcd.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  data            1    wreg     unsigned char 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;  data            1    1[COMRAM] unsigned char 
  4890 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  1    wreg      void 
  4893 ;; Registers used:
  4894 ;;		wreg, status,2, status,0
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;Total ram usage:        2 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		i2_lcdInst
  4910 ;;		i2_putch
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text30
  4915  001762                     __ptext30:
  4916                           	opt stack 0
  4917  001762                     i2_lcdNibble:
  4918                           	opt stack 23
  4919                           
  4920                           ;incstack = 0
  4921                           ;i2lcdNibble@data stored from wreg
  4922  001762  6E02               	movwf	i2lcdNibble@data,c
  4923                           
  4924                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  4925  001764  5002               	movf	i2lcdNibble@data,w,c
  4926  001766  0BF0               	andlw	240
  4927  001768  6E01               	movwf	i2lcdNibble@temp,c
  4928                           
  4929                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  4930  00176A  508C               	movf	3980,w,c	;volatile
  4931  00176C  0B0F               	andlw	15
  4932  00176E  6E8C               	movwf	3980,c	;volatile
  4933                           
  4934                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  4935  001770  5001               	movf	i2lcdNibble@temp,w,c
  4936  001772  108C               	iorwf	3980,w,c	;volatile
  4937  001774  6E8C               	movwf	3980,c	;volatile
  4938                           
  4939                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4940  001776  0E00               	movlw	0
  4941  001778  BEF2               	btfsc	intcon,7,c	;volatile
  4942  00177A  0E01               	movlw	1
  4943  00177C  6E43               	movwf	_LCDinterruptState,c
  4944  00177E  9EF2               	bcf	intcon,7,c	;volatile
  4945  001780  868C               	bsf	3980,3,c	;volatile
  4946  001782  0E42               	movlw	66
  4947  001784                     i2u188_47:
  4948  001784  2EE8               	decfsz	wreg,f,c
  4949  001786  D7FE               	bra	i2u188_47
  4950  001788  D000               	nop2	
  4951  00178A  968C               	bcf	3980,3,c	;volatile
  4952  00178C  0EA0               	movlw	160
  4953  00178E                     i2u189_47:
  4954  00178E  D000               	nop2	
  4955  001790  2EE8               	decfsz	wreg,f,c
  4956  001792  D7FD               	bra	i2u189_47
  4957  001794  B043               	btfsc	_LCDinterruptState,0,c
  4958  001796  D002               	bra	i2u73_45
  4959  001798  9EF2               	bcf	intcon,7,c	;volatile
  4960  00179A  D001               	bra	i2u73_46
  4961  00179C                     i2u73_45:
  4962  00179C  8EF2               	bsf	intcon,7,c	;volatile
  4963  00179E                     i2u73_46:
  4964                           
  4965                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  4966  00179E  3802               	swapf	i2lcdNibble@data,w,c
  4967  0017A0  0BF0               	andlw	240
  4968  0017A2  6E02               	movwf	i2lcdNibble@data,c
  4969                           
  4970                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  4971  0017A4  5002               	movf	i2lcdNibble@data,w,c
  4972  0017A6  0BF0               	andlw	240
  4973  0017A8  6E01               	movwf	i2lcdNibble@temp,c
  4974                           
  4975                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  4976  0017AA  508C               	movf	3980,w,c	;volatile
  4977  0017AC  0B0F               	andlw	15
  4978  0017AE  6E8C               	movwf	3980,c	;volatile
  4979                           
  4980                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  4981  0017B0  5001               	movf	i2lcdNibble@temp,w,c
  4982  0017B2  108C               	iorwf	3980,w,c	;volatile
  4983  0017B4  6E8C               	movwf	3980,c	;volatile
  4984                           
  4985                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4986  0017B6  0E00               	movlw	0
  4987  0017B8  BEF2               	btfsc	intcon,7,c	;volatile
  4988  0017BA  0E01               	movlw	1
  4989  0017BC  6E43               	movwf	_LCDinterruptState,c
  4990  0017BE  9EF2               	bcf	intcon,7,c	;volatile
  4991  0017C0  868C               	bsf	3980,3,c	;volatile
  4992  0017C2  0E42               	movlw	66
  4993  0017C4                     i2u190_47:
  4994  0017C4  2EE8               	decfsz	wreg,f,c
  4995  0017C6  D7FE               	bra	i2u190_47
  4996  0017C8  D000               	nop2	
  4997  0017CA  968C               	bcf	3980,3,c	;volatile
  4998  0017CC  0EA0               	movlw	160
  4999  0017CE                     i2u191_47:
  5000  0017CE  D000               	nop2	
  5001  0017D0  2EE8               	decfsz	wreg,f,c
  5002  0017D2  D7FD               	bra	i2u191_47
  5003  0017D4  B043               	btfsc	_LCDinterruptState,0,c
  5004  0017D6  D002               	bra	i2u74_45
  5005  0017D8  9EF2               	bcf	intcon,7,c	;volatile
  5006  0017DA  D001               	bra	i2u74_46
  5007  0017DC                     i2u74_45:
  5008  0017DC  8EF2               	bsf	intcon,7,c	;volatile
  5009  0017DE                     i2u74_46:
  5010  0017DE  0012               	return		;funcret
  5011  0017E0                     __end_ofi2_lcdNibble:
  5012                           	opt stack 0
  5013                           pclatu	equ	0xFFB
  5014                           pclath	equ	0xFFA
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           intcon	equ	0xFF2
  5022                           postinc0	equ	0xFEE
  5023                           fsr0h	equ	0xFEA
  5024                           fsr0l	equ	0xFE9
  5025                           wreg	equ	0xFE8
  5026                           postdec1	equ	0xFE5
  5027                           fsr1h	equ	0xFE2
  5028                           fsr1l	equ	0xFE1
  5029                           postinc2	equ	0xFDE
  5030                           postdec2	equ	0xFDD
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           pclatu	equ	0xFFB
  5035                           pclath	equ	0xFFA
  5036                           tblptru	equ	0xFF8
  5037                           tblptrh	equ	0xFF7
  5038                           tblptrl	equ	0xFF6
  5039                           tablat	equ	0xFF5
  5040                           prodh	equ	0xFF4
  5041                           prodl	equ	0xFF3
  5042                           intcon	equ	0xFF2
  5043                           postinc0	equ	0xFEE
  5044                           fsr0h	equ	0xFEA
  5045                           fsr0l	equ	0xFE9
  5046                           wreg	equ	0xFE8
  5047                           postdec1	equ	0xFE5
  5048                           fsr1h	equ	0xFE2
  5049                           fsr1l	equ	0xFE1
  5050                           postinc2	equ	0xFDE
  5051                           postdec2	equ	0xFDD
  5052                           fsr2h	equ	0xFDA
  5053                           fsr2l	equ	0xFD9
  5054                           status	equ	0xFD8
  5055                           
  5056                           	psect	rparam
  5057  0000                     pclatu	equ	0xFFB
  5058                           pclath	equ	0xFFA
  5059                           tblptru	equ	0xFF8
  5060                           tblptrh	equ	0xFF7
  5061                           tblptrl	equ	0xFF6
  5062                           tablat	equ	0xFF5
  5063                           prodh	equ	0xFF4
  5064                           prodl	equ	0xFF3
  5065                           intcon	equ	0xFF2
  5066                           postinc0	equ	0xFEE
  5067                           fsr0h	equ	0xFEA
  5068                           fsr0l	equ	0xFE9
  5069                           wreg	equ	0xFE8
  5070                           postdec1	equ	0xFE5
  5071                           fsr1h	equ	0xFE2
  5072                           fsr1l	equ	0xFE1
  5073                           postinc2	equ	0xFDE
  5074                           postdec2	equ	0xFDD
  5075                           fsr2h	equ	0xFDA
  5076                           fsr2l	equ	0xFD9
  5077                           status	equ	0xFD8
  5078                           
  5079                           	psect	temp
  5080  000058                     btemp:
  5081                           	opt stack 0
  5082  000058                     	ds	1
  5083  0000                     int$flags	set	btemp
  5084  0000                     wtemp6	set	btemp+1
  5085                           pclatu	equ	0xFFB
  5086                           pclath	equ	0xFFA
  5087                           tblptru	equ	0xFF8
  5088                           tblptrh	equ	0xFF7
  5089                           tblptrl	equ	0xFF6
  5090                           tablat	equ	0xFF5
  5091                           prodh	equ	0xFF4
  5092                           prodl	equ	0xFF3
  5093                           intcon	equ	0xFF2
  5094                           postinc0	equ	0xFEE
  5095                           fsr0h	equ	0xFEA
  5096                           fsr0l	equ	0xFE9
  5097                           wreg	equ	0xFE8
  5098                           postdec1	equ	0xFE5
  5099                           fsr1h	equ	0xFE2
  5100                           fsr1l	equ	0xFE1
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8


Data Sizes:
    Strings     100
    Constant    16
    Data        84
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41      87
    BANK0           128     37     101
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_16(CODE[20]), STR_15(CODE[20]), STR_14(CODE[20]), STR_13(CODE[20]), 
		 -> STR_12(CODE[20]), STR_11(CODE[20]), STR_10(CODE[20]), STR_9(CODE[20]), 
		 -> STR_8(CODE[12]), STR_7(CODE[17]), STR_6(CODE[19]), STR_5(CODE[14]), 
		 -> STR_4(CODE[15]), STR_3(CODE[20]), STR_2(CODE[15]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_Bolt_dispense
    _main->_Bolt_remain
    _main->_Nut_dispense
    _main->_Nut_remain
    _main->_Spacer_dispense
    _main->_Spacer_remain
    _main->_Washer_dispense
    _main->_Washer_remain
    _Washer_remain->_printf
    _Washer_dispense->_printf
    _Spacer_remain->_printf
    _Spacer_dispense->_printf
    _Nut_remain->_printf
    _Nut_dispense->_printf
    _I2C_init->_I2C_Master_Init
    _Bolt_remain->_printf
    _Bolt_dispense->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   33483
                                             33 BANK0      4     4      0
                      _Bolt_dispense
                        _Bolt_remain
                           _I2C_init
                       _Nut_dispense
                         _Nut_remain
                    _Spacer_dispense
                      _Spacer_remain
                    _Washer_dispense
                      _Washer_remain
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Washer_remain                                        3     1      2    3699
                                             30 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Washer_dispense                                      3     1      2    3699
                                             30 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Spacer_remain                                        3     1      2    3699
                                             30 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Spacer_dispense                                      3     1      2    3699
                                             30 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Nut_remain                                           3     1      2    3699
                                             30 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Nut_dispense                                         3     1      2    3699
                                             30 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     391
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      90
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _Bolt_remain                                          3     1      2    3699
                                             30 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Bolt_dispense                                        3     1      2    3699
                                             30 BANK0      3     1      2
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    2856
                                             12 BANK0     18     8     10
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_sendData                                         1     1      0     332
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     301
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interruptHandler                                    19    19      0    1346
                                             22 COMRAM    19    19      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            19    17      2    1076
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Bolt_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _Bolt_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _Nut_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _Nut_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _Spacer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _Spacer_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _Washer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _Washer_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     25      65       5       78.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     29      57       1       69.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BC      34        0.0%
DATA                 0      0      BC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Apr  5 18:11:44 2018

                __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l200 1204                          l201 1264  
                        l230 1B68                          l250 1866                          l243 1956  
                        l251 18A0                          l236 1A46                          l244 1990  
                        l341 14DC                          l229 1B2E                          l237 1A80  
                        l334 14A0                          l343 1504                          l335 14B0  
                        l271 18D6                          l264 19C6                          l272 1910  
                        l257 1AB6                          l265 1A00                          l258 1AF0  
                        l347 1546                          l348 159A                          l349 154C  
                        l278 17E6                          l198 1116                          l279 1820  
                        l760 1C32                          l761 1C3C                          l770 1D60  
                        l771 1D6A                          l756 1C12                          l757 1C0A  
                        l766 1D48                          l767 1D40                 __CFG_CPB$OFF 000000  
                        _max 0054                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l2440 1508                         l2688 1214  
                       _ADON 007E10                         STR_1 1011                         STR_2 1049  
                       STR_3 1011                         STR_4 1058                         STR_5 1067  
                       STR_6 1025                         STR_7 1038                         STR_8 102C  
                       STR_9 1011                         u1320 1D4C                         u1400 15A4  
                       u1245 171C                         _LATA 000F89                         u1246 171E  
                       _LATB 000F8A                         u1255 175E                         _LATC 000F8B  
                       u1256 1760                         _LATD 000F8C                         _LATE 000F8D  
                       u1290 1C16                         u1380 1534                         u1607 113C  
                       u1560 1114                         u1617 1220                         u1707 1B40  
                       u1627 12A0                         u1580 1214                         u1717 1E74  
                       u1637 17F8                         u1727 1CA0                         u1647 1878  
                       u1737 1CD4                         u1657 18E8                         u1747 1E8C  
                       u1667 1968                         u1757 1704                         u1677 19D8  
                       u1767 170E                         u1687 1A58                         u1777 1746  
                       u1697 1AC8                         u1787 1750                         _RBIE 007F93  
                       _RBIF 007F90                         _main 1076     __end_of_interruptHandler 1494  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0058             __end_of_I2C_init 1E24  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000              __end_ofi2_putch 1ED0                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  i2_lcdNibble 1762          __end_of_Bolt_remain 1B28  
           __end_of_LCD_LEFT 100C             ?_I2C_Master_Init 00C0             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001                        STR_10 1011  
                      STR_11 1011                        STR_12 1011                        STR_13 1011  
                      STR_14 1011                        STR_15 1011                        STR_16 1011  
            __end_of___lwdiv 1C46              __end_of___lwmod 1D74                        i2l210 137A  
                      i2l211 13B2                        i2l212 13EA                        i2l213 1422  
                      i2l341 1604                        i2l334 15CA                        i2l343 162C  
                      i2l335 15DA                        i2l347 166E                        i2l348 16BC  
                      i2l349 1674                        i2l760 1C84                        i2l761 1C8E  
                      i2l770 1DA2                        i2l771 1DAC                        i2l756 1C64  
                      i2l757 1C5C                        i2l766 1D8A                        i2l767 1D82  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 1E94                _N_spacingTime 002E  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000      __end_of_Washer_dispense 18D0  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 1CE4               __CFG_EBTRB$OFF 000000              __end_of_dpowers 100B  
                      _putch 1E64            _compartment_array 0044                        main@i 00E3  
                      pclath 000FFA                        tablat 000FF5            _LCDinterruptState 0043  
                      status 000FD8                        wtemp6 0059               __CFG_PBADEN$ON 000000  
      __size_of_I2C_sendData 0028             __end_ofi2_printf 16DE           __size_ofi2___lwdiv 0052  
         __size_ofi2___lwmod 0042              __initialization 1B98           __size_ofi2_lcdInst 0014  
               __end_of_main 12AC                   i2printf@ap 0010           __size_ofi2_initLCD 004C  
   __size_of_Spacer_dispense 0078            __end_of_LCD_RIGHT 100D                       ??_main 00E1  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 00C1  
      __end_of_Spacer_remain 1948           ??_I2C_Master_Start 00C1                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 00C3                       _ADRESH 000FC4  
                     _ADRESL 000FC3              i2lcdNibble@data 0002                       ?_putch 0001  
               _I2C_sendData 1E24              Bolt_remain@time 00DE              i2lcdNibble@temp 0001  
                     i2l2058 1630                       i2l2278 1448                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _SSPBUF 000FC9                  _Bolt_remain 1AB0  
             __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000                    ??___lwdiv 00C4  
                  ??___lwmod 00CB                       clear_0 1BDE                    ??_lcdInst 00C2  
                     _printf 1494                    ??_initLCD 00C3                   _Nut_remain 19C0  
               __pdataCOMRAM 0044            __end_ofi2___lwdiv 1C98                 __mediumconst 0000  
          __end_ofi2___lwmod 1DB6                    ?_I2C_init 0001                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8             ?_Washer_dispense 00DE  
          __end_ofi2_lcdInst 1EE4            __end_ofi2_initLCD 1D30                   __accesstop 0080  
    __end_of__initialization 1BE4                ___rparam_used 000001           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                 __pidataBANK0 1DB6           Bolt_dispense@B_max 00DE  
      __end_of_Bolt_dispense 1B98                __end_of_putch 1E7C        __end_of_Washer_remain 1858  
                i2printf@val 0014                _B_spacingTime 0030           __size_of_lcdNibble 0084  
                i2putch@data 0003                   ??_I2C_init 00C4            ??_Spacer_dispense 00E0  
                  ?i2_printf 000D                      ??_putch 00C2            ?_interruptHandler 0001  
         ??_interruptHandler 0017            Washer_remain@time 00DE                 ?i2_lcdNibble 0001  
       Spacer_dispense@S_max 00DE                      ?_printf 00CC                  ?_Nut_remain 00DE  
                 ??i2_printf 000F                      i2u73_45 179C                      i2u73_46 179E  
                    i2u74_45 17DC                      i2u74_46 17DE                      i2u84_40 1C68  
                    i2u87_40 1D8E         lcd@LCDinterruptState 0042                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                      _B_array 00B0  
                    _B_count 0040                      _B_input 0038                      i2_putch 1EBC  
                    _N_array 0090                      _N_count 003E                      _N_input 0036  
          __end_of_lcdNibble 1762                      _S_array 00A0                      _S_count 003C  
                    _S_input 0034                      __Hparam 0000                      __Lparam 0000  
                    _W_array 0080                      _W_count 003A                      _W_input 0032  
                    ___lwdiv 1BF2                ?_Nut_dispense 00DE                      ___lwmod 1D30  
               __psmallconst 1000                      __pcinit 1B98                      __ramtop 1000  
                    _lcdInst 1E7C                      __ptext0 1076                      __ptext1 17E0  
                    __ptext2 1858                      __ptext3 18D0                      __ptext4 1948  
                    __ptext5 19C0                      __ptext6 1A38                      __ptext7 1DF6  
                    __ptext8 1E4C                      __ptext9 1AB0              __size_of_printf 012C  
                    _initLCD 1C98                      _dpowers 1001                    _LCD_RIGHT 100C  
   __size_of_I2C_Master_Init 0018     __size_of_I2C_Master_Wait 0014     __size_of_I2C_Master_Stop 0008  
              _S_spacingTime 002C               __pintcode_body 12AC         end_of_initialization 1BE4  
      __end_of_LCD_SIZE_HORZ 100F        __end_of_LCD_SIZE_VERT 100E                __Lmediumconst 0000  
                    int_func 12AC                 ?_Bolt_remain 00DE    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A          __size_of_Nut_remain 0078                      printf@c 00DD  
                    printf@f 00CC                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE               ??_Nut_dispense 00E0  
                  _PORTBbits 000F81                    _TRISBbits 000F93                    _TRISCbits 000F94  
          __size_of_I2C_init 002E            i2___lwdiv@divisor 0003                    i2___lwdiv 1C46  
                  i2___lwmod 1D74            i2___lwdiv@counter 0007            Nut_dispense@N_max 00DE  
                  i2_lcdInst 1ED0         Washer_dispense@W_max 00DE                    i2_initLCD 1CE4  
     __size_of_Spacer_remain 0078              _Spacer_dispense 1948         __size_ofi2_lcdNibble 007E  
              __pidataCOMRAM 1E94                i2lcdInst@data 0003               __end_of_printf 15C0  
               i2printf@flag 0012                 i2printf@prec 0013          start_initialization 1B98  
                  i2printf@c 0016                    i2printf@f 000D                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 011E            ??_I2C_Master_Init 00C4  
          ??_I2C_Master_Wait 00C0                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 00C1  
           __CFG_OSC$INTIO67 000000     __size_of_Washer_dispense 0078                   ?i2_initLCD 0001  
   I2C_Master_Init@clockFreq 00C0                  __pdataBANK0 0080             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 00D6    __size_of_interruptHandler 148C                 ??_Nut_remain 00E0  
                __pbssCOMRAM 002A                __pcstackBANK0 00C0            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                _Spacer_remain 18D0         __end_of_Nut_dispense 1AB0  
     __size_of_Bolt_dispense 0070                     ?i2_putch 0001       __size_of_Washer_remain 0078  
           _I2C_Master_Start 1EF6             _I2C_Master_Write 1EE4      __end_of_Spacer_dispense 19C0  
           ___lwdiv@dividend 00C0           __end_of_Nut_remain 1A38         __size_of_Bolt_remain 0078  
          __CFG_CCP2MX$PORTC 000000                    __pintcode 0008                    _lcdNibble 16DE  
                   ?___lwdiv 00C0                     ?___lwmod 00C7                     ?_lcdInst 0001  
                   ?_initLCD 0001                  __smallconst 1000                     _I2C_init 1DF6  
             ?_Spacer_remain 00DE             ___lwdiv@quotient 00C5               Nut_remain@time 00DE  
              _W_spacingTime 002A                ?_I2C_sendData 0001                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 0018                     _LCD_LEFT 100B  
                ??i2_lcdInst 0003                     _LATCbits 000F8B                     _LATDbits 000F8C  
                ??i2_initLCD 0004                     i2u101_40 165C                     i2u103_40 16C4  
                   i2u115_40 1304                     i2u116_40 1316                     i2u115_48 1306  
                   i2u117_40 1328                     i2u116_48 1318                     i2u118_40 133A  
                   i2u117_48 132A                     i2u118_48 133C                     i2u180_47 13A6  
                   i2u181_47 13E2                     i2u190_47 17C4                     i2u182_47 1416  
                   i2u191_47 17CE                     i2u183_47 143E                     i2u184_47 1EC8  
                   i2u185_47 1CEA                     i2u186_47 1D1E                     i2u187_47 1EDC  
                   i2u179_47 136E                     i2u188_47 1784                     i2u189_47 178E  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001            ??_Washer_dispense 00E0  
              _Bolt_dispense 1B28                _Washer_remain 17E0                   _ADCON0bits 000FC2  
                 _ADCON2bits 000FC0                lcdNibble@data 00C1                   printf@flag 00D9  
              lcdNibble@temp 00C0                   printf@prec 00DA                     i2_printf 15C0  
             ??_I2C_sendData 00C3               _LCD_HORZ_LIMIT 1010                    copy_data0 1BAC  
                  copy_data1 1BCC             __size_ofi2_putch 0014             ?_Spacer_dispense 00DE  
                   __Hrparam 0000        I2C_sendData@char_data 00C3                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000               ?_Bolt_dispense 00DE            Spacer_remain@time 00DE  
             ?_Washer_remain 00DE             __size_of___lwdiv 0054             __size_of___lwmod 0044  
           _interruptHandler 0008             __size_of_lcdInst 0018              _I2C_Master_Init 1E4C  
           __size_of_initLCD 004C              _I2C_Master_Wait 1EA8        __size_of_Nut_dispense 0078  
            ??_Spacer_remain 00E0              _I2C_Master_Stop 1EEE       __end_of_LCD_HORZ_LIMIT 1011  
            ___lwdiv@divisor 00C2              ___lwdiv@counter 00C4                     __ptext10 1B28  
                   __ptext11 1494                     __ptext20 1EEE                     __ptext12 1E64  
                   __ptext21 1EF6                     __ptext13 1D30                     __ptext30 1762  
                   __ptext22 1EA8                     __ptext14 1BF2                     __ptext15 1C98  
                   __ptext24 15C0                     __ptext16 1E7C                     __ptext25 1EBC  
                   __ptext17 16DE                     __ptext26 1D74                     __ptext18 1E24  
                   __ptext27 1C46                     __ptext19 1EE4                     __ptext28 1CE4  
                   __ptext29 1ED0               _LCD_VERT_LIMIT 100F                __size_of_main 0236  
              ??i2_lcdNibble 0001                  ??_lcdNibble 00C0                     int$flags 0058  
               _Nut_dispense 1A38                    printf@val 00DB  I2C_Master_Write@byteToWrite 00C1  
                  putch@data 00C2     __end_of_I2C_Master_Start 1EFE                  _OSCTUNEbits 000F9B  
   __end_of_I2C_Master_Write 1EEE                   _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1010  
                   intlevel2 0000                _LCD_SIZE_HORZ 100E             ___lwmod@dividend 00C7  
              _LCD_SIZE_VERT 100D                   _OSCCONbits 000FD3              ??_Bolt_dispense 00E0  
            ??_Washer_remain 00E0                     printf@ap 00D7         __end_of_I2C_sendData 1E4C  
    __end_of_I2C_Master_Init 1E64      __end_of_I2C_Master_Wait 1EBC      __end_of_I2C_Master_Stop 1EF6  
                lcdInst@data 00C2                  _spacingTime 0056          __end_ofi2_lcdNibble 17E0  
            ___lwmod@divisor 00C9              ___lwmod@counter 00CB                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5              _Washer_dispense 1858                ??_Bolt_remain 00E0  
