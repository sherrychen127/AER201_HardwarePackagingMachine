

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 30 16:09:32 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _dpowers:
    78                           	opt stack 0
    79  001001  0001               	dw	1
    80  001003  000A               	dw	10
    81  001005  0064               	dw	100
    82  001007  03E8               	dw	1000
    83  001009  2710               	dw	10000
    84  00100B                     __end_of_dpowers:
    85                           	opt stack 0
    86  00100B                     _LCD_LEFT:
    87                           	opt stack 0
    88  00100B  00                 	db	0
    89  00100C                     __end_of_LCD_LEFT:
    90                           	opt stack 0
    91  00100C                     _LCD_RIGHT:
    92                           	opt stack 0
    93  00100C  01                 	db	1
    94  00100D                     __end_of_LCD_RIGHT:
    95                           	opt stack 0
    96  00100D                     _LCD_SIZE_VERT:
    97                           	opt stack 0
    98  00100D  02                 	db	2
    99  00100E                     __end_of_LCD_SIZE_VERT:
   100                           	opt stack 0
   101  00100E                     _LCD_SIZE_HORZ:
   102                           	opt stack 0
   103  00100E  10                 	db	16
   104  00100F                     __end_of_LCD_SIZE_HORZ:
   105                           	opt stack 0
   106  00100F                     _LCD_VERT_LIMIT:
   107                           	opt stack 0
   108  00100F  02                 	db	2
   109  001010                     __end_of_LCD_VERT_LIMIT:
   110                           	opt stack 0
   111  001010                     _LCD_HORZ_LIMIT:
   112                           	opt stack 0
   113  001010  28                 	db	40
   114  001011                     __end_of_LCD_HORZ_LIMIT:
   115                           	opt stack 0
   116  0000                     _SSPBUF	set	4041
   117  0000                     _SSPCON2bits	set	4037
   118  0000                     _SSPADD	set	4040
   119  0000                     _SSPCON2	set	4037
   120  0000                     _SSPCON1	set	4038
   121  0000                     _SSPSTAT	set	4039
   122  0000                     _SSPCON1bits	set	4038
   123  0000                     _ADRESL	set	4035
   124  0000                     _ADRESH	set	4036
   125  0000                     _ADCON0bits	set	4034
   126  0000                     _TRISCbits	set	3988
   127  0000                     _LATCbits	set	3979
   128  0000                     _ADCON2bits	set	4032
   129  0000                     _ADCON1	set	4033
   130  0000                     _ADCON0	set	4034
   131  0000                     _TRISE	set	3990
   132  0000                     _TRISD	set	3989
   133  0000                     _TRISC	set	3988
   134  0000                     _TRISB	set	3987
   135  0000                     _TRISA	set	3986
   136  0000                     _LATE	set	3981
   137  0000                     _LATC	set	3979
   138  0000                     _LATB	set	3978
   139  0000                     _LATA	set	3977
   140  0000                     _OSCTUNEbits	set	3995
   141  0000                     _OSCCONbits	set	4051
   142  0000                     _INTCONbits	set	4082
   143  0000                     _LATD	set	3980
   144  0000                     _LATDbits	set	3980
   145  0000                     _ADON	set	32272
   146  0000                     _RBIF	set	32656
   147  0000                     _RBIE	set	32659
   148  001011                     STR_1:
   149  001011  57                 	db	87	;'W'
   150  001012  5F                 	db	95	;'_'
   151  001013  63                 	db	99	;'c'
   152  001014  6F                 	db	111	;'o'
   153  001015  75                 	db	117	;'u'
   154  001016  6E                 	db	110	;'n'
   155  001017  74                 	db	116	;'t'
   156  001018  3A                 	db	58	;':'
   157  001019  25                 	db	37
   158  00101A  64                 	db	100	;'d'
   159  00101B  00                 	db	0
   160  0000                     
   161                           ; #config settings
   162  00101C  00                 	db	0	; dummy byte at the end
   163  0000                     
   164                           	psect	cinit
   165  00177E                     __pcinit:
   166                           	opt stack 0
   167  00177E                     start_initialization:
   168                           	opt stack 0
   169  00177E                     __initialization:
   170                           	opt stack 0
   171                           
   172                           ; Clear objects allocated to COMRAM (10 bytes)
   173  00177E  EE00  F045         	lfsr	0,__pbssCOMRAM
   174  001782  0E0A               	movlw	10
   175  001784                     clear_0:
   176  001784  6AEE               	clrf	postinc0,c
   177  001786  06E8               	decf	wreg,f,c
   178  001788  E1FD               	bnz	clear_0
   179  00178A                     end_of_initialization:
   180                           	opt stack 0
   181  00178A                     __end_of__initialization:
   182                           	opt stack 0
   183  00178A  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   184  00178C  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   185  00178E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   186  001790  6EF8               	movwf	tblptru,c
   187  001792  0100               	movlb	0
   188  001794  EFB4  F009         	goto	_main	;jump to C main() function
   189                           tblptru	equ	0xFF8
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           
   193                           	psect	bssCOMRAM
   194  000045                     __pbssCOMRAM:
   195                           	opt stack 0
   196  000045                     _W_count:
   197                           	opt stack 0
   198  000045                     	ds	2
   199  000047                     _S_count:
   200                           	opt stack 0
   201  000047                     	ds	2
   202  000049                     _N_count:
   203                           	opt stack 0
   204  000049                     	ds	2
   205  00004B                     _B_count:
   206                           	opt stack 0
   207  00004B                     	ds	2
   208  00004D                     	ds	1
   209  00004E                     _LCDinterruptState:
   210                           	opt stack 0
   211  00004E                     	ds	1
   212                           tblptru	equ	0xFF8
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	cstackCOMRAM
   217  000001                     __pcstackCOMRAM:
   218                           	opt stack 0
   219  000001                     ?_readADC:
   220                           	opt stack 0
   221  000001                     ?i2___lwdiv:
   222                           	opt stack 0
   223  000001                     i2lcdNibble@temp:
   224                           	opt stack 0
   225  000001                     i2___lwdiv@dividend:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x0
   229  000001                     	ds	1
   230  000002                     i2lcdNibble@data:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0x1
   234  000002                     	ds	1
   235  000003                     ??_readADC:
   236  000003                     i2lcdInst@data:
   237                           	opt stack 0
   238  000003                     i2putch@data:
   239                           	opt stack 0
   240  000003                     i2___lwdiv@divisor:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x2
   244  000003                     	ds	1
   245  000004                     ??i2_initLCD:
   246                           
   247                           ; 1 bytes @ 0x3
   248  000004                     	ds	1
   249  000005                     readADC@channel:
   250                           	opt stack 0
   251  000005                     i2___lwdiv@quotient:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x4
   255  000005                     	ds	2
   256  000007                     i2___lwdiv@counter:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x6
   260  000007                     	ds	1
   261  000008                     ?i2___lwmod:
   262                           	opt stack 0
   263  000008                     i2___lwmod@dividend:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x7
   267  000008                     	ds	2
   268  00000A                     i2___lwmod@divisor:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x9
   272  00000A                     	ds	2
   273  00000C                     i2___lwmod@counter:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0xB
   277  00000C                     	ds	1
   278  00000D                     ?i2_printf:
   279                           	opt stack 0
   280  00000D                     i2printf@f:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0xC
   284  00000D                     	ds	4
   285  000011                     ??i2_printf:
   286                           
   287                           ; 1 bytes @ 0x10
   288  000011                     	ds	1
   289  000012                     i2printf@ap:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x11
   293  000012                     	ds	2
   294  000014                     i2printf@flag:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x13
   298  000014                     	ds	1
   299  000015                     i2printf@prec:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x14
   303  000015                     	ds	1
   304  000016                     i2printf@val:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x15
   308  000016                     	ds	2
   309  000018                     i2printf@c:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x17
   313  000018                     	ds	1
   314  000019                     ??_interruptHandler:
   315                           
   316                           ; 1 bytes @ 0x18
   317  000019                     	ds	19
   318  00002C                     ??_I2C_Master_Wait:
   319  00002C                     ?___lwdiv:
   320                           	opt stack 0
   321  00002C                     lcdNibble@temp:
   322                           	opt stack 0
   323  00002C                     ___lwdiv@dividend:
   324                           	opt stack 0
   325  00002C                     I2C_Master_Init@clockFreq:
   326                           	opt stack 0
   327                           
   328                           ; 4 bytes @ 0x2B
   329  00002C                     	ds	1
   330  00002D                     lcdNibble@data:
   331                           	opt stack 0
   332  00002D                     I2C_Master_Write@byteToWrite:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x2C
   336  00002D                     	ds	1
   337  00002E                     lcdInst@data:
   338                           	opt stack 0
   339  00002E                     putch@data:
   340                           	opt stack 0
   341  00002E                     ___lwdiv@divisor:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x2D
   345  00002E                     	ds	1
   346  00002F                     ??_initLCD:
   347  00002F                     I2C_sendData@char_data:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x2E
   351  00002F                     	ds	1
   352  000030                     ___lwdiv@quotient:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x2F
   356  000030                     	ds	2
   357  000032                     ___lwdiv@counter:
   358                           	opt stack 0
   359                           
   360                           ; 1 bytes @ 0x31
   361  000032                     	ds	1
   362  000033                     ?___lwmod:
   363                           	opt stack 0
   364  000033                     ___lwmod@dividend:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x32
   368  000033                     	ds	2
   369  000035                     ___lwmod@divisor:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x34
   373  000035                     	ds	2
   374  000037                     ___lwmod@counter:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x36
   378  000037                     	ds	1
   379  000038                     ?_printf:
   380                           	opt stack 0
   381  000038                     printf@f:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x37
   385  000038                     	ds	4
   386  00003C                     ??_printf:
   387                           
   388                           ; 1 bytes @ 0x3B
   389  00003C                     	ds	1
   390  00003D                     printf@ap:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x3C
   394  00003D                     	ds	2
   395  00003F                     printf@flag:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x3E
   399  00003F                     	ds	1
   400  000040                     printf@prec:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x3F
   404  000040                     	ds	1
   405  000041                     printf@val:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x40
   409  000041                     	ds	2
   410  000043                     printf@c:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x42
   414  000043                     	ds	1
   415  000044                     ??_main:
   416                           
   417                           ; 1 bytes @ 0x43
   418  000044                     	ds	1
   419                           tblptru	equ	0xFF8
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           
   423 ;;
   424 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   425 ;;
   426 ;; *************** function _main *****************
   427 ;; Defined at:
   428 ;;		line 25 in file "main.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;		None
   431 ;; Auto vars:     Size  Location     Type
   432 ;;		None
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;Total ram usage:        1 bytes
   447 ;; Hardware stack levels required when called:    7
   448 ;; This function calls:
   449 ;;		_I2C_init
   450 ;;		_I2C_sendData
   451 ;;		_initLCD
   452 ;;		_lcdInst
   453 ;;		_printf
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text0
   460  001368                     __ptext0:
   461                           	opt stack 0
   462  001368                     _main:
   463                           	opt stack 24
   464                           
   465                           ;main.c: 32: OSCCONbits.IRCF2 = 1;
   466                           
   467                           ;incstack = 0
   468  001368  8CD3               	bsf	4051,6,c	;volatile
   469                           
   470                           ;main.c: 33: OSCCONbits.IRCF1 = 1;
   471  00136A  8AD3               	bsf	4051,5,c	;volatile
   472                           
   473                           ;main.c: 34: OSCCONbits.IRCF0 = 1;
   474  00136C  88D3               	bsf	4051,4,c	;volatile
   475                           
   476                           ;main.c: 35: OSCTUNEbits.PLLEN = 1;
   477  00136E  8C9B               	bsf	3995,6,c	;volatile
   478                           
   479                           ;main.c: 39: LATA = 0x00;
   480  001370  0E00               	movlw	0
   481  001372  6E89               	movwf	3977,c	;volatile
   482                           
   483                           ;main.c: 40: LATB = 0x00;
   484  001374  0E00               	movlw	0
   485  001376  6E8A               	movwf	3978,c	;volatile
   486                           
   487                           ;main.c: 41: LATC = 0x00;
   488  001378  0E00               	movlw	0
   489  00137A  6E8B               	movwf	3979,c	;volatile
   490                           
   491                           ;main.c: 42: LATD = 0x00;
   492  00137C  0E00               	movlw	0
   493  00137E  6E8C               	movwf	3980,c	;volatile
   494                           
   495                           ;main.c: 43: LATE = 0x00;
   496  001380  0E00               	movlw	0
   497  001382  6E8D               	movwf	3981,c	;volatile
   498                           
   499                           ;main.c: 47: TRISA = 0xFF;
   500  001384  6892               	setf	3986,c	;volatile
   501                           
   502                           ;main.c: 48: TRISB = 0xFF;
   503  001386  6893               	setf	3987,c	;volatile
   504                           
   505                           ;main.c: 49: TRISC = 0x00;
   506  001388  0E00               	movlw	0
   507  00138A  6E94               	movwf	3988,c	;volatile
   508                           
   509                           ;main.c: 50: TRISD = 0x00;
   510  00138C  0E00               	movlw	0
   511  00138E  6E95               	movwf	3989,c	;volatile
   512                           
   513                           ;main.c: 51: TRISE = 0x00;
   514  001390  0E00               	movlw	0
   515  001392  6E96               	movwf	3990,c	;volatile
   516                           
   517                           ;main.c: 54: ADCON0 = 0x00;
   518  001394  0E00               	movlw	0
   519  001396  6EC2               	movwf	4034,c	;volatile
   520                           
   521                           ;main.c: 55: ADCON1 = 0b00001111;
   522  001398  0E0F               	movlw	15
   523  00139A  6EC1               	movwf	4033,c	;volatile
   524                           
   525                           ;main.c: 56: ADCON2bits.ADFM = 1;
   526  00139C  8EC0               	bsf	4032,7,c	;volatile
   527                           
   528                           ;main.c: 61: (INTCONbits.GIE = 1);
   529  00139E  8EF2               	bsf	intcon,7,c	;volatile
   530                           
   531                           ;main.c: 62: initLCD();
   532  0013A0  ECF1  F00A         	call	_initLCD	;wreg free
   533                           
   534                           ;main.c: 63: I2C_init();
   535  0013A4  EC99  F00B         	call	_I2C_init	;wreg free
   536                           
   537                           ;main.c: 68: LATCbits.LATC0 = 1;
   538  0013A8  808B               	bsf	3979,0,c	;volatile
   539                           
   540                           ;main.c: 69: TRISCbits.RC0 = 0;
   541  0013AA  9094               	bcf	3988,0,c	;volatile
   542                           
   543                           ;main.c: 72: RBIE = 1;
   544  0013AC  86F2               	bsf	intcon,3,c	;volatile
   545                           
   546                           ;main.c: 76: printf("W_count:%d",W_count);
   547  0013AE  0E11               	movlw	low STR_1
   548  0013B0  6E38               	movwf	printf@f,c
   549  0013B2  0E10               	movlw	high STR_1
   550  0013B4  6E39               	movwf	printf@f+1,c
   551  0013B6  C045  F03A         	movff	_W_count,?_printf+2
   552  0013BA  C046  F03B         	movff	_W_count+1,?_printf+3
   553  0013BE  EC0F  F008         	call	_printf	;wreg free
   554                           
   555                           ;main.c: 77: initLCD();
   556  0013C2  ECF1  F00A         	call	_initLCD	;wreg free
   557                           
   558                           ;main.c: 79: I2C_sendData(11);
   559  0013C6  0E0B               	movlw	11
   560  0013C8  ECAE  F00B         	call	_I2C_sendData
   561  0013CC                     
   562                           ;main.c: 82: printf("W_count:%d",W_count);
   563  0013CC  0E11               	movlw	low STR_1
   564  0013CE  6E38               	movwf	printf@f,c
   565  0013D0  0E10               	movlw	high STR_1
   566  0013D2  6E39               	movwf	printf@f+1,c
   567  0013D4  C045  F03A         	movff	_W_count,?_printf+2
   568  0013D8  C046  F03B         	movff	_W_count+1,?_printf+3
   569  0013DC  EC0F  F008         	call	_printf	;wreg free
   570                           
   571                           ;main.c: 83: if(W_count >= 4){
   572  0013E0  BE46               	btfsc	_W_count+1,7,c
   573  0013E2  D00A               	goto	l153
   574  0013E4  5046               	movf	_W_count+1,w,c
   575  0013E6  E104               	bnz	u770
   576  0013E8  0E04               	movlw	4
   577  0013EA  5C45               	subwf	_W_count,w,c
   578  0013EC  A0D8               	btfss	status,0,c
   579  0013EE  D004               	goto	l153
   580  0013F0                     u770:
   581                           
   582                           ;main.c: 84: I2C_sendData(12);
   583  0013F0  0E0C               	movlw	12
   584  0013F2  ECAE  F00B         	call	_I2C_sendData
   585                           
   586                           ;main.c: 85: break;
   587  0013F6  D00C               	goto	l154
   588  0013F8                     l153:
   589                           
   590                           ;main.c: 86: }
   591                           ;main.c: 87: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   592  0013F8  0E80               	movlw	128
   593  0013FA  ECE2  F00B         	call	_lcdInst
   594  0013FE  0E41               	movlw	65
   595  001400  6E44               	movwf	??_main& (0+255),c
   596  001402  0EEE               	movlw	238
   597  001404                     u807:
   598  001404  2EE8               	decfsz	wreg,f,c
   599  001406  D7FE               	bra	u807
   600  001408  2E44               	decfsz	??_main& (0+255),f,c
   601  00140A  D7FC               	bra	u807
   602  00140C  D000               	nop2	
   603  00140E  D7DE               	goto	l152
   604  001410                     l154:
   605                           
   606                           ;main.c: 88: }
   607                           ;main.c: 89: initLCD();
   608  001410  ECF1  F00A         	call	_initLCD	;wreg free
   609                           
   610                           ;main.c: 90: RBIE = 0;
   611  001414  96F2               	bcf	intcon,3,c	;volatile
   612  001416                     
   613                           ;main.c: 94: printf("W_count:%d",W_count);
   614  001416  0E11               	movlw	low STR_1
   615  001418  6E38               	movwf	printf@f,c
   616  00141A  0E10               	movlw	high STR_1
   617  00141C  6E39               	movwf	printf@f+1,c
   618  00141E  C045  F03A         	movff	_W_count,?_printf+2
   619  001422  C046  F03B         	movff	_W_count+1,?_printf+3
   620  001426  EC0F  F008         	call	_printf	;wreg free
   621                           
   622                           ;main.c: 95: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   623  00142A  0E80               	movlw	128
   624  00142C  ECE2  F00B         	call	_lcdInst
   625  001430  0E41               	movlw	65
   626  001432  6E44               	movwf	??_main& (0+255),c
   627  001434  0EEE               	movlw	238
   628  001436                     u817:
   629  001436  2EE8               	decfsz	wreg,f,c
   630  001438  D7FE               	bra	u817
   631  00143A  2E44               	decfsz	??_main& (0+255),f,c
   632  00143C  D7FC               	bra	u817
   633  00143E  D000               	nop2	
   634  001440  D7EA               	goto	l156
   635  001442                     __end_of_main:
   636                           	opt stack 0
   637                           tblptru	equ	0xFF8
   638                           intcon	equ	0xFF2
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           status	equ	0xFD8
   642                           
   643 ;; *************** function _printf *****************
   644 ;; Defined at:
   645 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;  f               2   55[COMRAM] PTR const unsigned char 
   648 ;;		 -> STR_5(11), STR_4(11), STR_3(11), STR_2(11), 
   649 ;;		 -> STR_1(11), 
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  tmpval          4    0        struct .
   652 ;;  cp              3    0        PTR const unsigned char 
   653 ;;  val             2   64[COMRAM] unsigned int 
   654 ;;  ap              2   60[COMRAM] PTR void [1]
   655 ;;		 -> ?i2_printf(2), ?_printf(2), 
   656 ;;  len             2    0        unsigned int 
   657 ;;  c               1   66[COMRAM] char 
   658 ;;  prec            1   63[COMRAM] char 
   659 ;;  flag            1   62[COMRAM] unsigned char 
   660 ;; Return value:  Size  Location     Type
   661 ;;                  2   55[COMRAM] int 
   662 ;; Registers used:
   663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   670 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   671 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   672 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   673 ;;Total ram usage:       12 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; Hardware stack levels required when called:    6
   676 ;; This function calls:
   677 ;;		___lwdiv
   678 ;;		___lwmod
   679 ;;		_putch
   680 ;; This function is called by:
   681 ;;		_main
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           	psect	text1
   686  00101E                     __ptext1:
   687                           	opt stack 0
   688  00101E                     _printf:
   689                           	opt stack 24
   690                           
   691                           ;doprnt.c: 466: va_list ap;
   692                           ;doprnt.c: 499: signed char c;
   693                           ;doprnt.c: 506: signed char prec;
   694                           ;doprnt.c: 508: unsigned char flag;
   695                           ;doprnt.c: 523: union {
   696                           ;doprnt.c: 524: unsigned long vd;
   697                           ;doprnt.c: 525: double integ;
   698                           ;doprnt.c: 526: } tmpval;
   699                           ;doprnt.c: 528: unsigned int val;
   700                           ;doprnt.c: 529: unsigned len;
   701                           ;doprnt.c: 530: const char * cp;
   702                           ;doprnt.c: 533: *ap = __va_start();
   703                           
   704                           ;incstack = 0
   705  00101E  0E3A               	movlw	low (?_printf+2)
   706  001020  6E3D               	movwf	printf@ap,c
   707  001022  0E00               	movlw	high (?_printf+2)
   708  001024  6E3E               	movwf	printf@ap+1,c
   709                           
   710                           ;doprnt.c: 536: while(c = *f++) {
   711  001026  D07D               	goto	u660
   712  001028                     
   713                           ;doprnt.c: 538: if(c != '%')
   714  001028  0E25               	movlw	37
   715  00102A  1843               	xorwf	printf@c,w,c
   716  00102C  B4D8               	btfsc	status,2,c
   717  00102E  D004               	goto	l231
   718                           
   719                           ;doprnt.c: 540: {
   720                           ;doprnt.c: 541: (putch(c) );
   721  001030  5043               	movf	printf@c,w,c
   722  001032  ECD8  F00B         	call	_putch
   723                           
   724                           ;doprnt.c: 542: continue;
   725  001036  D075               	goto	u660
   726  001038                     l231:
   727                           
   728                           ;doprnt.c: 543: }
   729                           ;doprnt.c: 548: flag = 0;
   730  001038  0E00               	movlw	0
   731  00103A  6E3F               	movwf	printf@flag,c
   732                           
   733                           ;doprnt.c: 822: }
   734                           
   735                           ;doprnt.c: 813: continue;
   736                           
   737                           ;doprnt.c: 802: default:
   738                           
   739                           ;doprnt.c: 698: case 'i':
   740                           ;doprnt.c: 699: break;
   741                           
   742                           ;doprnt.c: 697: case 'd':
   743                           
   744                           ;doprnt.c: 638: goto alldone;
   745                           
   746                           ;doprnt.c: 637: case 0:
   747                           
   748                           ;doprnt.c: 635: switch(c = *f++) {
   749  00103C  C038  FFF6         	movff	printf@f,tblptrl
   750  001040  C039  FFF7         	movff	printf@f+1,tblptrh
   751  001044  4A38               	infsnz	printf@f,f,c
   752  001046  2A39               	incf	printf@f+1,f,c
   753  001048                     	if	0	;tblptru may be non-zero
   754  001048                     	endif
   755  001048                     	if	0	;tblptru may be non-zero
   756  001048                     	endif
   757  001048  0008               	tblrd		*
   758  00104A  CFF5 F043          	movff	tablat,printf@c
   759  00104E  5043               	movf	printf@c,w,c
   760                           
   761                           ; Switch size 1, requested type "space"
   762                           ; Number of cases is 3, Range of values is 0 to 105
   763                           ; switch strategies available:
   764                           ; Name         Instructions Cycles
   765                           ; simple_byte           10     6 (average)
   766                           ;	Chosen strategy is simple_byte
   767  001050  0A00               	xorlw	0	; case 0
   768  001052  B4D8               	btfsc	status,2,c
   769  001054  0012               	return	
   770  001056  0A64               	xorlw	100	; case 100
   771  001058  B4D8               	btfsc	status,2,c
   772  00105A  D003               	goto	l237
   773  00105C  0A0D               	xorlw	13	; case 105
   774  00105E  A4D8               	btfss	status,2,c
   775  001060  D060               	goto	u660
   776  001062                     l237:
   777                           
   778                           ;doprnt.c: 1253: {
   779                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   780  001062  C03D  FFD9         	movff	printf@ap,fsr2l
   781  001066  C03E  FFDA         	movff	printf@ap+1,fsr2h
   782  00106A  CFDE F041          	movff	postinc2,printf@val
   783  00106E  CFDD F042          	movff	postdec2,printf@val+1
   784  001072  0E02               	movlw	2
   785  001074  263D               	addwf	printf@ap,f,c
   786  001076  0E00               	movlw	0
   787  001078  223E               	addwfc	printf@ap+1,f,c
   788                           
   789                           ;doprnt.c: 1261: if((int)val < 0) {
   790  00107A  AE42               	btfss	printf@val+1,7,c
   791  00107C  D006               	goto	l239
   792                           
   793                           ;doprnt.c: 1262: flag |= 0x03;
   794  00107E  0E03               	movlw	3
   795  001080  123F               	iorwf	printf@flag,f,c
   796                           
   797                           ;doprnt.c: 1263: val = -val;
   798  001082  6C41               	negf	printf@val,c
   799  001084  1E42               	comf	printf@val+1,f,c
   800  001086  B0D8               	btfsc	status,0,c
   801  001088  2A42               	incf	printf@val+1,f,c
   802  00108A                     l239:
   803                           
   804                           ;doprnt.c: 1264: }
   805                           ;doprnt.c: 1266: }
   806                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   807  00108A  0E01               	movlw	1
   808  00108C  6E43               	movwf	printf@c,c
   809  00108E                     l1514:
   810  00108E  0E05               	movlw	5
   811  001090  1843               	xorwf	printf@c,w,c
   812  001092  B4D8               	btfsc	status,2,c
   813  001094  D012               	goto	u640
   814                           
   815                           ;doprnt.c: 1306: if(val < dpowers[c])
   816  001096  5043               	movf	printf@c,w,c
   817  001098  0D02               	mullw	2
   818  00109A  0E01               	movlw	low _dpowers
   819  00109C  24F3               	addwf	prodl,w,c
   820  00109E  6EF6               	movwf	tblptrl,c
   821  0010A0  0E10               	movlw	high _dpowers
   822  0010A2  20F4               	addwfc	prodh,w,c
   823  0010A4  6EF7               	movwf	tblptrh,c
   824  0010A6                     	if	0	;There are less than 3 active tblptr bytes
   825  0010A6                     	endif
   826  0010A6  0009               	tblrd		*+
   827  0010A8  50F5               	movf	tablat,w,c
   828  0010AA  5C41               	subwf	printf@val,w,c
   829  0010AC  0009               	tblrd		*+
   830  0010AE  50F5               	movf	tablat,w,c
   831  0010B0  5842               	subwfb	printf@val+1,w,c
   832  0010B2  A0D8               	btfss	status,0,c
   833  0010B4  D002               	goto	u640
   834                           
   835                           ;doprnt.c: 1307: break;
   836  0010B6  2A43               	incf	printf@c,f,c
   837  0010B8  D7EA               	goto	l1514
   838  0010BA                     u640:
   839                           
   840                           ;doprnt.c: 1422: {
   841                           ;doprnt.c: 1438: if(flag & 0x03)
   842  0010BA  C03F  F03C         	movff	printf@flag,??_printf
   843  0010BE  0E03               	movlw	3
   844  0010C0  163C               	andwf	??_printf,f,c
   845  0010C2  B4D8               	btfsc	status,2,c
   846  0010C4  D003               	goto	l243
   847                           
   848                           ;doprnt.c: 1439: (putch('-') );
   849  0010C6  0E2D               	movlw	45
   850  0010C8  ECD8  F00B         	call	_putch
   851  0010CC                     l243:
   852                           
   853                           ;doprnt.c: 1469: }
   854                           ;doprnt.c: 1472: prec = c;
   855  0010CC  C043  F040         	movff	printf@c,printf@prec
   856                           
   857                           ;doprnt.c: 1474: while(prec--) {
   858  0010D0  D024               	goto	l244
   859  0010D2                     
   860                           ;doprnt.c: 1478: {
   861                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   862  0010D2  5040               	movf	printf@prec,w,c
   863  0010D4  0D02               	mullw	2
   864  0010D6  0E01               	movlw	low _dpowers
   865  0010D8  24F3               	addwf	prodl,w,c
   866  0010DA  6EF6               	movwf	tblptrl,c
   867  0010DC  0E10               	movlw	high _dpowers
   868  0010DE  20F4               	addwfc	prodh,w,c
   869  0010E0  6EF7               	movwf	tblptrh,c
   870  0010E2                     	if	0	;There are less than 3 active tblptr bytes
   871  0010E2                     	endif
   872  0010E2  0009               	tblrd		*+
   873  0010E4  CFF5 F02E          	movff	tablat,___lwdiv@divisor
   874  0010E8  000A               	tblrd		*-
   875  0010EA  CFF5 F02F          	movff	tablat,___lwdiv@divisor+1
   876  0010EE  C041  F02C         	movff	printf@val,___lwdiv@dividend
   877  0010F2  C042  F02D         	movff	printf@val+1,___lwdiv@dividend+1
   878  0010F6  EC9F  F00A         	call	___lwdiv	;wreg free
   879  0010FA  C02C  F033         	movff	?___lwdiv,___lwmod@dividend
   880  0010FE  C02D  F034         	movff	?___lwdiv+1,___lwmod@dividend+1
   881  001102  0E00               	movlw	0
   882  001104  6E36               	movwf	___lwmod@divisor+1,c
   883  001106  0E0A               	movlw	10
   884  001108  6E35               	movwf	___lwmod@divisor,c
   885  00110A  EC3D  F00B         	call	___lwmod	;wreg free
   886  00110E  5033               	movf	?___lwmod,w,c
   887  001110  0F30               	addlw	48
   888  001112  6E43               	movwf	printf@c,c
   889                           
   890                           ;doprnt.c: 1523: }
   891                           ;doprnt.c: 1524: (putch(c) );
   892  001114  5043               	movf	printf@c,w,c
   893  001116  ECD8  F00B         	call	_putch
   894  00111A                     l244:
   895  00111A  0640               	decf	printf@prec,f,c
   896  00111C  2840               	incf	printf@prec,w,c
   897  00111E  A4D8               	btfss	status,2,c
   898  001120  D7D8               	goto	l245
   899  001122                     u660:
   900  001122  C038  FFF6         	movff	printf@f,tblptrl
   901  001126  C039  FFF7         	movff	printf@f+1,tblptrh
   902  00112A  4A38               	infsnz	printf@f,f,c
   903  00112C  2A39               	incf	printf@f+1,f,c
   904  00112E                     	if	0	;tblptru may be non-zero
   905  00112E                     	endif
   906  00112E                     	if	0	;tblptru may be non-zero
   907  00112E                     	endif
   908  00112E  0008               	tblrd		*
   909  001130  CFF5 F043          	movff	tablat,printf@c
   910  001134  5043               	movf	printf@c,w,c
   911  001136  B4D8               	btfsc	status,2,c
   912  001138  0012               	return	
   913  00113A  D776               	goto	l230
   914  00113C                     __end_of_printf:
   915                           	opt stack 0
   916                           tblptru	equ	0xFF8
   917                           tblptrh	equ	0xFF7
   918                           tblptrl	equ	0xFF6
   919                           tablat	equ	0xFF5
   920                           prodh	equ	0xFF4
   921                           prodl	equ	0xFF3
   922                           intcon	equ	0xFF2
   923                           postinc0	equ	0xFEE
   924                           wreg	equ	0xFE8
   925                           postinc2	equ	0xFDE
   926                           postdec2	equ	0xFDD
   927                           fsr2h	equ	0xFDA
   928                           fsr2l	equ	0xFD9
   929                           status	equ	0xFD8
   930                           
   931 ;; *************** function _putch *****************
   932 ;; Defined at:
   933 ;;		line 24 in file "lcd.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  data            1    wreg     unsigned char 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  data            1   45[COMRAM] unsigned char 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      void 
   940 ;; Registers used:
   941 ;;		wreg, status,2, status,0, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   950 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;Total ram usage:        1 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; Hardware stack levels required when called:    5
   954 ;; This function calls:
   955 ;;		_lcdNibble
   956 ;; This function is called by:
   957 ;;		_printf
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text2
   962  0017B0                     __ptext2:
   963                           	opt stack 0
   964  0017B0                     _putch:
   965                           	opt stack 24
   966                           
   967                           ;incstack = 0
   968                           ;putch@data stored from wreg
   969  0017B0  6E2E               	movwf	putch@data,c
   970                           
   971                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   972  0017B2  848C               	bsf	3980,2,c	;volatile
   973                           
   974                           ;lcd.c: 33: lcdNibble(data);
   975  0017B4  502E               	movf	putch@data,w,c
   976  0017B6  EC21  F00A         	call	_lcdNibble
   977                           
   978                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   979  0017BA  0EC8               	movlw	200
   980  0017BC                     u827:
   981  0017BC  D000               	nop2	
   982  0017BE  2EE8               	decfsz	wreg,f,c
   983  0017C0  D7FD               	bra	u827
   984  0017C2  0012               	return		;funcret
   985  0017C4                     __end_of_putch:
   986                           	opt stack 0
   987                           tblptru	equ	0xFF8
   988                           tblptrh	equ	0xFF7
   989                           tblptrl	equ	0xFF6
   990                           tablat	equ	0xFF5
   991                           prodh	equ	0xFF4
   992                           prodl	equ	0xFF3
   993                           intcon	equ	0xFF2
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postinc2	equ	0xFDE
   997                           postdec2	equ	0xFDD
   998                           fsr2h	equ	0xFDA
   999                           fsr2l	equ	0xFD9
  1000                           status	equ	0xFD8
  1001                           
  1002 ;; *************** function ___lwmod *****************
  1003 ;; Defined at:
  1004 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  dividend        2   50[COMRAM] unsigned int 
  1007 ;;  divisor         2   52[COMRAM] unsigned int 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  counter         1   54[COMRAM] unsigned char 
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  2   50[COMRAM] unsigned int 
  1012 ;; Registers used:
  1013 ;;		wreg, status,2, status,0
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1019 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1022 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;Total ram usage:        5 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    4
  1026 ;; This function calls:
  1027 ;;		Nothing
  1028 ;; This function is called by:
  1029 ;;		_printf
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text3
  1034  00167A                     __ptext3:
  1035                           	opt stack 0
  1036  00167A                     ___lwmod:
  1037                           	opt stack 25
  1038                           
  1039                           ;incstack = 0
  1040  00167A  5035               	movf	___lwmod@divisor,w,c
  1041  00167C  1036               	iorwf	___lwmod@divisor+1,w,c
  1042  00167E  B4D8               	btfsc	status,2,c
  1043  001680  D018               	goto	l667
  1044  001682  0E01               	movlw	1
  1045  001684  6E37               	movwf	___lwmod@counter,c
  1046  001686  D004               	goto	l662
  1047  001688  90D8               	bcf	status,0,c
  1048  00168A  3635               	rlcf	___lwmod@divisor,f,c
  1049  00168C  3636               	rlcf	___lwmod@divisor+1,f,c
  1050  00168E  2A37               	incf	___lwmod@counter,f,c
  1051  001690                     l662:
  1052  001690  AE36               	btfss	___lwmod@divisor+1,7,c
  1053  001692  D7FA               	goto	l663
  1054  001694                     u520:
  1055  001694  5035               	movf	___lwmod@divisor,w,c
  1056  001696  5C33               	subwf	___lwmod@dividend,w,c
  1057  001698  5036               	movf	___lwmod@divisor+1,w,c
  1058  00169A  5834               	subwfb	___lwmod@dividend+1,w,c
  1059  00169C  A0D8               	btfss	status,0,c
  1060  00169E  D004               	goto	l666
  1061  0016A0  5035               	movf	___lwmod@divisor,w,c
  1062  0016A2  5E33               	subwf	___lwmod@dividend,f,c
  1063  0016A4  5036               	movf	___lwmod@divisor+1,w,c
  1064  0016A6  5A34               	subwfb	___lwmod@dividend+1,f,c
  1065  0016A8                     l666:
  1066  0016A8  90D8               	bcf	status,0,c
  1067  0016AA  3236               	rrcf	___lwmod@divisor+1,f,c
  1068  0016AC  3235               	rrcf	___lwmod@divisor,f,c
  1069  0016AE  2E37               	decfsz	___lwmod@counter,f,c
  1070  0016B0  D7F1               	goto	u520
  1071  0016B2                     l667:
  1072  0016B2  C033  F033         	movff	___lwmod@dividend,?___lwmod
  1073  0016B6  C034  F034         	movff	___lwmod@dividend+1,?___lwmod+1
  1074  0016BA  0012               	return		;funcret
  1075  0016BC                     __end_of___lwmod:
  1076                           	opt stack 0
  1077                           tblptru	equ	0xFF8
  1078                           tblptrh	equ	0xFF7
  1079                           tblptrl	equ	0xFF6
  1080                           tablat	equ	0xFF5
  1081                           prodh	equ	0xFF4
  1082                           prodl	equ	0xFF3
  1083                           intcon	equ	0xFF2
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postinc2	equ	0xFDE
  1087                           postdec2	equ	0xFDD
  1088                           fsr2h	equ	0xFDA
  1089                           fsr2l	equ	0xFD9
  1090                           status	equ	0xFD8
  1091                           
  1092 ;; *************** function ___lwdiv *****************
  1093 ;; Defined at:
  1094 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;  dividend        2   43[COMRAM] unsigned int 
  1097 ;;  divisor         2   45[COMRAM] unsigned int 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  quotient        2   47[COMRAM] unsigned int 
  1100 ;;  counter         1   49[COMRAM] unsigned char 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  2   43[COMRAM] unsigned int 
  1103 ;; Registers used:
  1104 ;;		wreg, status,2, status,0
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1110 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;Total ram usage:        7 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; Hardware stack levels required when called:    4
  1117 ;; This function calls:
  1118 ;;		Nothing
  1119 ;; This function is called by:
  1120 ;;		_printf
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text4
  1125  00153E                     __ptext4:
  1126                           	opt stack 0
  1127  00153E                     ___lwdiv:
  1128                           	opt stack 25
  1129                           
  1130                           ;incstack = 0
  1131  00153E  0E00               	movlw	0
  1132  001540  6E31               	movwf	___lwdiv@quotient+1,c
  1133  001542  0E00               	movlw	0
  1134  001544  6E30               	movwf	___lwdiv@quotient,c
  1135  001546  502E               	movf	___lwdiv@divisor,w,c
  1136  001548  102F               	iorwf	___lwdiv@divisor+1,w,c
  1137  00154A  B4D8               	btfsc	status,2,c
  1138  00154C  D01C               	goto	l657
  1139  00154E  0E01               	movlw	1
  1140  001550  6E32               	movwf	___lwdiv@counter,c
  1141  001552  D004               	goto	l652
  1142  001554  90D8               	bcf	status,0,c
  1143  001556  362E               	rlcf	___lwdiv@divisor,f,c
  1144  001558  362F               	rlcf	___lwdiv@divisor+1,f,c
  1145  00155A  2A32               	incf	___lwdiv@counter,f,c
  1146  00155C                     l652:
  1147  00155C  AE2F               	btfss	___lwdiv@divisor+1,7,c
  1148  00155E  D7FA               	goto	l653
  1149  001560                     u490:
  1150  001560  90D8               	bcf	status,0,c
  1151  001562  3630               	rlcf	___lwdiv@quotient,f,c
  1152  001564  3631               	rlcf	___lwdiv@quotient+1,f,c
  1153  001566  502E               	movf	___lwdiv@divisor,w,c
  1154  001568  5C2C               	subwf	___lwdiv@dividend,w,c
  1155  00156A  502F               	movf	___lwdiv@divisor+1,w,c
  1156  00156C  582D               	subwfb	___lwdiv@dividend+1,w,c
  1157  00156E  A0D8               	btfss	status,0,c
  1158  001570  D005               	goto	l656
  1159  001572  502E               	movf	___lwdiv@divisor,w,c
  1160  001574  5E2C               	subwf	___lwdiv@dividend,f,c
  1161  001576  502F               	movf	___lwdiv@divisor+1,w,c
  1162  001578  5A2D               	subwfb	___lwdiv@dividend+1,f,c
  1163  00157A  8030               	bsf	___lwdiv@quotient,0,c
  1164  00157C                     l656:
  1165  00157C  90D8               	bcf	status,0,c
  1166  00157E  322F               	rrcf	___lwdiv@divisor+1,f,c
  1167  001580  322E               	rrcf	___lwdiv@divisor,f,c
  1168  001582  2E32               	decfsz	___lwdiv@counter,f,c
  1169  001584  D7ED               	goto	u490
  1170  001586                     l657:
  1171  001586  C030  F02C         	movff	___lwdiv@quotient,?___lwdiv
  1172  00158A  C031  F02D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1173  00158E  0012               	return		;funcret
  1174  001590                     __end_of___lwdiv:
  1175                           	opt stack 0
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           prodh	equ	0xFF4
  1181                           prodl	equ	0xFF3
  1182                           intcon	equ	0xFF2
  1183                           postinc0	equ	0xFEE
  1184                           wreg	equ	0xFE8
  1185                           postinc2	equ	0xFDE
  1186                           postdec2	equ	0xFDD
  1187                           fsr2h	equ	0xFDA
  1188                           fsr2l	equ	0xFD9
  1189                           status	equ	0xFD8
  1190                           
  1191 ;; *************** function _initLCD *****************
  1192 ;; Defined at:
  1193 ;;		line 60 in file "lcd.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;		None
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;		None
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		wreg, status,2, status,0, cstack
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;Total ram usage:        1 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; Hardware stack levels required when called:    6
  1214 ;; This function calls:
  1215 ;;		_lcdInst
  1216 ;; This function is called by:
  1217 ;;		_main
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           	psect	text5
  1222  0015E2                     __ptext5:
  1223                           	opt stack 0
  1224  0015E2                     _initLCD:
  1225                           	opt stack 24
  1226                           
  1227                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1228                           
  1229                           ;incstack = 0
  1230  0015E2  0EC3               	movlw	195
  1231  0015E4  6E2F               	movwf	??_initLCD& (0+255),c
  1232  0015E6  0ECD               	movlw	205
  1233  0015E8                     u837:
  1234  0015E8  2EE8               	decfsz	wreg,f,c
  1235  0015EA  D7FE               	bra	u837
  1236  0015EC  2E2F               	decfsz	??_initLCD& (0+255),f,c
  1237  0015EE  D7FC               	bra	u837
  1238  0015F0  F000               	nop	
  1239                           
  1240                           ;lcd.c: 69: lcdInst(0b00110011);
  1241  0015F2  0E33               	movlw	51
  1242  0015F4  ECE2  F00B         	call	_lcdInst
  1243                           
  1244                           ;lcd.c: 70: lcdInst(0b00110010);
  1245  0015F8  0E32               	movlw	50
  1246  0015FA  ECE2  F00B         	call	_lcdInst
  1247                           
  1248                           ;lcd.c: 71: lcdInst(0b00101000);
  1249  0015FE  0E28               	movlw	40
  1250  001600  ECE2  F00B         	call	_lcdInst
  1251                           
  1252                           ;lcd.c: 72: lcdInst(0b00001111);
  1253  001604  0E0F               	movlw	15
  1254  001606  ECE2  F00B         	call	_lcdInst
  1255                           
  1256                           ;lcd.c: 73: lcdInst(0b00000110);
  1257  00160A  0E06               	movlw	6
  1258  00160C  ECE2  F00B         	call	_lcdInst
  1259                           
  1260                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1261  001610  0E01               	movlw	1
  1262  001612  ECE2  F00B         	call	_lcdInst
  1263  001616  0EC3               	movlw	195
  1264  001618  6E2F               	movwf	??_initLCD& (0+255),c
  1265  00161A  0ECD               	movlw	205
  1266  00161C                     u847:
  1267  00161C  2EE8               	decfsz	wreg,f,c
  1268  00161E  D7FE               	bra	u847
  1269  001620  2E2F               	decfsz	??_initLCD& (0+255),f,c
  1270  001622  D7FC               	bra	u847
  1271  001624  F000               	nop	
  1272                           
  1273                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1274  001626  0E0F               	movlw	15
  1275  001628  ECE2  F00B         	call	_lcdInst
  1276  00162C  0012               	return		;funcret
  1277  00162E                     __end_of_initLCD:
  1278                           	opt stack 0
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           prodh	equ	0xFF4
  1284                           prodl	equ	0xFF3
  1285                           intcon	equ	0xFF2
  1286                           postinc0	equ	0xFEE
  1287                           wreg	equ	0xFE8
  1288                           postinc2	equ	0xFDE
  1289                           postdec2	equ	0xFDD
  1290                           fsr2h	equ	0xFDA
  1291                           fsr2l	equ	0xFD9
  1292                           status	equ	0xFD8
  1293                           
  1294 ;; *************** function _lcdInst *****************
  1295 ;; Defined at:
  1296 ;;		line 11 in file "lcd.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  data            1    wreg     unsigned char 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  data            1   45[COMRAM] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg, status,2, status,0, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;Total ram usage:        1 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; Hardware stack levels required when called:    5
  1317 ;; This function calls:
  1318 ;;		_lcdNibble
  1319 ;; This function is called by:
  1320 ;;		_initLCD
  1321 ;;		_main
  1322 ;;		_lcd_set_cursor
  1323 ;;		_lcd_shift_cursor
  1324 ;;		_lcd_shift_display
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text6
  1329  0017C4                     __ptext6:
  1330                           	opt stack 0
  1331  0017C4                     _lcdInst:
  1332                           	opt stack 25
  1333                           
  1334                           ;incstack = 0
  1335                           ;lcdInst@data stored from wreg
  1336  0017C4  6E2E               	movwf	lcdInst@data,c
  1337                           
  1338                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1339  0017C6  948C               	bcf	3980,2,c	;volatile
  1340                           
  1341                           ;lcd.c: 20: lcdNibble(data);
  1342  0017C8  502E               	movf	lcdInst@data,w,c
  1343  0017CA  EC21  F00A         	call	_lcdNibble
  1344                           
  1345                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1346  0017CE  0EC8               	movlw	200
  1347  0017D0                     u857:
  1348  0017D0  D000               	nop2	
  1349  0017D2  2EE8               	decfsz	wreg,f,c
  1350  0017D4  D7FD               	bra	u857
  1351  0017D6  0012               	return		;funcret
  1352  0017D8                     __end_of_lcdInst:
  1353                           	opt stack 0
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           prodh	equ	0xFF4
  1359                           prodl	equ	0xFF3
  1360                           intcon	equ	0xFF2
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           postinc2	equ	0xFDE
  1364                           postdec2	equ	0xFDD
  1365                           fsr2h	equ	0xFDA
  1366                           fsr2l	equ	0xFD9
  1367                           status	equ	0xFD8
  1368                           
  1369 ;; *************** function _lcdNibble *****************
  1370 ;; Defined at:
  1371 ;;		line 37 in file "lcd.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  data            1    wreg     unsigned char 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  data            1   44[COMRAM] unsigned char 
  1376 ;;  temp            1   43[COMRAM] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2, status,0
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;Total ram usage:        2 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    4
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_lcdInst
  1397 ;;		_putch
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           	psect	text7
  1402  001442                     __ptext7:
  1403                           	opt stack 0
  1404  001442                     _lcdNibble:
  1405                           	opt stack 24
  1406                           
  1407                           ;incstack = 0
  1408                           ;lcdNibble@data stored from wreg
  1409  001442  6E2D               	movwf	lcdNibble@data,c
  1410                           
  1411                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1412  001444  502D               	movf	lcdNibble@data,w,c
  1413  001446  0BF0               	andlw	240
  1414  001448  6E2C               	movwf	lcdNibble@temp,c
  1415                           
  1416                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1417  00144A  508C               	movf	3980,w,c	;volatile
  1418  00144C  0B0F               	andlw	15
  1419  00144E  6E8C               	movwf	3980,c	;volatile
  1420                           
  1421                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1422  001450  502C               	movf	lcdNibble@temp,w,c
  1423  001452  108C               	iorwf	3980,w,c	;volatile
  1424  001454  6E8C               	movwf	3980,c	;volatile
  1425                           
  1426                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1427  001456  0E00               	movlw	0
  1428  001458  BEF2               	btfsc	intcon,7,c	;volatile
  1429  00145A  0E01               	movlw	1
  1430  00145C  6E4E               	movwf	_LCDinterruptState,c
  1431  00145E  9EF2               	bcf	intcon,7,c	;volatile
  1432  001460  868C               	bsf	3980,3,c	;volatile
  1433  001462  0E53               	movlw	83
  1434  001464                     u867:
  1435  001464  2EE8               	decfsz	wreg,f,c
  1436  001466  D7FE               	bra	u867
  1437  001468  F000               	nop	
  1438  00146A  968C               	bcf	3980,3,c	;volatile
  1439  00146C  0EC8               	movlw	200
  1440  00146E                     u877:
  1441  00146E  D000               	nop2	
  1442  001470  2EE8               	decfsz	wreg,f,c
  1443  001472  D7FD               	bra	u877
  1444  001474  B04E               	btfsc	_LCDinterruptState,0,c
  1445  001476  D002               	bra	u15
  1446  001478  9EF2               	bcf	intcon,7,c	;volatile
  1447  00147A  D001               	bra	u16
  1448  00147C                     u15:
  1449  00147C  8EF2               	bsf	intcon,7,c	;volatile
  1450  00147E                     u16:
  1451                           
  1452                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1453  00147E  382D               	swapf	lcdNibble@data,w,c
  1454  001480  0BF0               	andlw	240
  1455  001482  6E2D               	movwf	lcdNibble@data,c
  1456                           
  1457                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1458  001484  502D               	movf	lcdNibble@data,w,c
  1459  001486  0BF0               	andlw	240
  1460  001488  6E2C               	movwf	lcdNibble@temp,c
  1461                           
  1462                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1463  00148A  508C               	movf	3980,w,c	;volatile
  1464  00148C  0B0F               	andlw	15
  1465  00148E  6E8C               	movwf	3980,c	;volatile
  1466                           
  1467                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1468  001490  502C               	movf	lcdNibble@temp,w,c
  1469  001492  108C               	iorwf	3980,w,c	;volatile
  1470  001494  6E8C               	movwf	3980,c	;volatile
  1471                           
  1472                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1473  001496  0E00               	movlw	0
  1474  001498  BEF2               	btfsc	intcon,7,c	;volatile
  1475  00149A  0E01               	movlw	1
  1476  00149C  6E4E               	movwf	_LCDinterruptState,c
  1477  00149E  9EF2               	bcf	intcon,7,c	;volatile
  1478  0014A0  868C               	bsf	3980,3,c	;volatile
  1479  0014A2  0E53               	movlw	83
  1480  0014A4                     u887:
  1481  0014A4  2EE8               	decfsz	wreg,f,c
  1482  0014A6  D7FE               	bra	u887
  1483  0014A8  F000               	nop	
  1484  0014AA  968C               	bcf	3980,3,c	;volatile
  1485  0014AC  0EC8               	movlw	200
  1486  0014AE                     u897:
  1487  0014AE  D000               	nop2	
  1488  0014B0  2EE8               	decfsz	wreg,f,c
  1489  0014B2  D7FD               	bra	u897
  1490  0014B4  B04E               	btfsc	_LCDinterruptState,0,c
  1491  0014B6  D002               	bra	u25
  1492  0014B8  9EF2               	bcf	intcon,7,c	;volatile
  1493  0014BA  D001               	bra	u26
  1494  0014BC                     u25:
  1495  0014BC  8EF2               	bsf	intcon,7,c	;volatile
  1496  0014BE                     u26:
  1497  0014BE  0012               	return		;funcret
  1498  0014C0                     __end_of_lcdNibble:
  1499                           	opt stack 0
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           prodh	equ	0xFF4
  1505                           prodl	equ	0xFF3
  1506                           intcon	equ	0xFF2
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           postinc2	equ	0xFDE
  1510                           postdec2	equ	0xFDD
  1511                           fsr2h	equ	0xFDA
  1512                           fsr2l	equ	0xFD9
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _I2C_sendData *****************
  1516 ;; Defined at:
  1517 ;;		line 166 in file "main.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  char_data       1    wreg     unsigned char 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  char_data       1   46[COMRAM] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, status,2, status,0, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;Total ram usage:        1 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    6
  1538 ;; This function calls:
  1539 ;;		_I2C_Master_Start
  1540 ;;		_I2C_Master_Stop
  1541 ;;		_I2C_Master_Write
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	text8
  1548  00175C                     __ptext8:
  1549                           	opt stack 0
  1550  00175C                     _I2C_sendData:
  1551                           	opt stack 24
  1552                           
  1553                           ;incstack = 0
  1554                           ;I2C_sendData@char_data stored from wreg
  1555  00175C  6E2F               	movwf	I2C_sendData@char_data,c
  1556                           
  1557                           ;main.c: 167: I2C_Master_Start();
  1558  00175E  EC12  F00C         	call	_I2C_Master_Start	;wreg free
  1559                           
  1560                           ;main.c: 168: I2C_Master_Write(0b00010000);
  1561  001762  0E00               	movlw	0
  1562  001764  6E2E               	movwf	I2C_Master_Write@byteToWrite+1,c
  1563  001766  0E10               	movlw	16
  1564  001768  6E2D               	movwf	I2C_Master_Write@byteToWrite,c
  1565  00176A  EC09  F00C         	call	_I2C_Master_Write	;wreg free
  1566                           
  1567                           ;main.c: 169: I2C_Master_Write(char_data);
  1568  00176E  C02F  F02D         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  1569  001772  6A2E               	clrf	I2C_Master_Write@byteToWrite+1,c
  1570  001774  EC09  F00C         	call	_I2C_Master_Write	;wreg free
  1571                           
  1572                           ;main.c: 170: I2C_Master_Stop();
  1573  001778  EC0E  F00C         	call	_I2C_Master_Stop	;wreg free
  1574  00177C  0012               	return		;funcret
  1575  00177E                     __end_of_I2C_sendData:
  1576                           	opt stack 0
  1577                           tblptru	equ	0xFF8
  1578                           tblptrh	equ	0xFF7
  1579                           tblptrl	equ	0xFF6
  1580                           tablat	equ	0xFF5
  1581                           prodh	equ	0xFF4
  1582                           prodl	equ	0xFF3
  1583                           intcon	equ	0xFF2
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postinc2	equ	0xFDE
  1587                           postdec2	equ	0xFDD
  1588                           fsr2h	equ	0xFDA
  1589                           fsr2l	equ	0xFD9
  1590                           status	equ	0xFD8
  1591                           
  1592 ;; *************** function _I2C_init *****************
  1593 ;; Defined at:
  1594 ;;		line 160 in file "main.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;		None
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;		None
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg, status,2, status,0, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;Total ram usage:        0 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    6
  1615 ;; This function calls:
  1616 ;;		_I2C_Master_Init
  1617 ;;		_I2C_Master_Start
  1618 ;;		_I2C_Master_Stop
  1619 ;;		_I2C_Master_Write
  1620 ;; This function is called by:
  1621 ;;		_main
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text9
  1626  001732                     __ptext9:
  1627                           	opt stack 0
  1628  001732                     _I2C_init:
  1629                           	opt stack 24
  1630                           
  1631                           ;main.c: 161: I2C_Master_Init(100000);
  1632                           
  1633                           ;incstack = 0
  1634  001732  0EA0               	movlw	160
  1635  001734  6E2C               	movwf	I2C_Master_Init@clockFreq,c
  1636  001736  0E86               	movlw	134
  1637  001738  6E2D               	movwf	I2C_Master_Init@clockFreq+1,c
  1638  00173A  0E01               	movlw	1
  1639  00173C  6E2E               	movwf	I2C_Master_Init@clockFreq+2,c
  1640  00173E  0E00               	movlw	0
  1641  001740  6E2F               	movwf	I2C_Master_Init@clockFreq+3,c
  1642  001742  ECCC  F00B         	call	_I2C_Master_Init	;wreg free
  1643                           
  1644                           ;main.c: 162: I2C_Master_Start();
  1645  001746  EC12  F00C         	call	_I2C_Master_Start	;wreg free
  1646                           
  1647                           ;main.c: 163: I2C_Master_Write(0b00010000);
  1648  00174A  0E00               	movlw	0
  1649  00174C  6E2E               	movwf	I2C_Master_Write@byteToWrite+1,c
  1650  00174E  0E10               	movlw	16
  1651  001750  6E2D               	movwf	I2C_Master_Write@byteToWrite,c
  1652  001752  EC09  F00C         	call	_I2C_Master_Write	;wreg free
  1653                           
  1654                           ;main.c: 164: I2C_Master_Stop();
  1655  001756  EC0E  F00C         	call	_I2C_Master_Stop	;wreg free
  1656  00175A  0012               	return		;funcret
  1657  00175C                     __end_of_I2C_init:
  1658                           	opt stack 0
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           prodh	equ	0xFF4
  1664                           prodl	equ	0xFF3
  1665                           intcon	equ	0xFF2
  1666                           postinc0	equ	0xFEE
  1667                           wreg	equ	0xFE8
  1668                           postinc2	equ	0xFDE
  1669                           postdec2	equ	0xFDD
  1670                           fsr2h	equ	0xFDA
  1671                           fsr2l	equ	0xFD9
  1672                           status	equ	0xFD8
  1673                           
  1674 ;; *************** function _I2C_Master_Write *****************
  1675 ;; Defined at:
  1676 ;;		line 109 in file "I2C.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  byteToWrite     2   44[COMRAM] unsigned int 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;Total ram usage:        2 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    5
  1697 ;; This function calls:
  1698 ;;		_I2C_Master_Wait
  1699 ;; This function is called by:
  1700 ;;		_I2C_init
  1701 ;;		_I2C_sendData
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text10
  1706  001812                     __ptext10:
  1707                           	opt stack 0
  1708  001812                     _I2C_Master_Write:
  1709                           	opt stack 24
  1710                           
  1711                           ;I2C.c: 117: I2C_Master_Wait();
  1712                           
  1713                           ;incstack = 0
  1714  001812  EC00  F00C         	call	_I2C_Master_Wait	;wreg free
  1715                           
  1716                           ;I2C.c: 118: SSPBUF = byteToWrite;
  1717  001816  C02D  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1718  00181A  0012               	return		;funcret
  1719  00181C                     __end_of_I2C_Master_Write:
  1720                           	opt stack 0
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           prodh	equ	0xFF4
  1726                           prodl	equ	0xFF3
  1727                           intcon	equ	0xFF2
  1728                           postinc0	equ	0xFEE
  1729                           wreg	equ	0xFE8
  1730                           postinc2	equ	0xFDE
  1731                           postdec2	equ	0xFDD
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function _I2C_Master_Stop *****************
  1737 ;; Defined at:
  1738 ;;		line 96 in file "I2C.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;		None
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;Total ram usage:        0 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    5
  1759 ;; This function calls:
  1760 ;;		_I2C_Master_Wait
  1761 ;; This function is called by:
  1762 ;;		_I2C_init
  1763 ;;		_I2C_sendData
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text11
  1768  00181C                     __ptext11:
  1769                           	opt stack 0
  1770  00181C                     _I2C_Master_Stop:
  1771                           	opt stack 24
  1772                           
  1773                           ;I2C.c: 105: I2C_Master_Wait();
  1774                           
  1775                           ;incstack = 0
  1776  00181C  EC00  F00C         	call	_I2C_Master_Wait	;wreg free
  1777                           
  1778                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  1779  001820  84C5               	bsf	4037,2,c	;volatile
  1780  001822  0012               	return		;funcret
  1781  001824                     __end_of_I2C_Master_Stop:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           prodh	equ	0xFF4
  1788                           prodl	equ	0xFF3
  1789                           intcon	equ	0xFF2
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _I2C_Master_Start *****************
  1799 ;; Defined at:
  1800 ;;		line 70 in file "I2C.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;		None
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;Total ram usage:        0 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    5
  1821 ;; This function calls:
  1822 ;;		_I2C_Master_Wait
  1823 ;; This function is called by:
  1824 ;;		_I2C_init
  1825 ;;		_I2C_sendData
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text12
  1830  001824                     __ptext12:
  1831                           	opt stack 0
  1832  001824                     _I2C_Master_Start:
  1833                           	opt stack 24
  1834                           
  1835                           ;I2C.c: 79: I2C_Master_Wait();
  1836                           
  1837                           ;incstack = 0
  1838  001824  EC00  F00C         	call	_I2C_Master_Wait	;wreg free
  1839                           
  1840                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  1841  001828  80C5               	bsf	4037,0,c	;volatile
  1842  00182A  0012               	return		;funcret
  1843  00182C                     __end_of_I2C_Master_Start:
  1844                           	opt stack 0
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           prodh	equ	0xFF4
  1850                           prodl	equ	0xFF3
  1851                           intcon	equ	0xFF2
  1852                           postinc0	equ	0xFEE
  1853                           wreg	equ	0xFE8
  1854                           postinc2	equ	0xFDE
  1855                           postdec2	equ	0xFDD
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _I2C_Master_Wait *****************
  1861 ;; Defined at:
  1862 ;;		line 52 in file "I2C.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2, status,0
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1880 ;;Total ram usage:        1 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    4
  1883 ;; This function calls:
  1884 ;;		Nothing
  1885 ;; This function is called by:
  1886 ;;		_I2C_Master_Start
  1887 ;;		_I2C_Master_Stop
  1888 ;;		_I2C_Master_Write
  1889 ;;		_I2C_Master_RepeatedStart
  1890 ;;		_I2C_Master_Read
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text13
  1895  001800                     __ptext13:
  1896                           	opt stack 0
  1897  001800                     _I2C_Master_Wait:
  1898                           	opt stack 24
  1899                           
  1900                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1901                           
  1902                           ;incstack = 0
  1903  001800  B4C7               	btfsc	4039,2,c	;volatile
  1904  001802  D7FE               	goto	_I2C_Master_Wait
  1905  001804  CFC5 F02C          	movff	4037,??_I2C_Master_Wait	;volatile
  1906  001808  0E1F               	movlw	31
  1907  00180A  162C               	andwf	??_I2C_Master_Wait,f,c
  1908  00180C  B4D8               	btfsc	status,2,c
  1909  00180E  0012               	return	
  1910  001810  D7F7               	goto	_I2C_Master_Wait
  1911  001812                     __end_of_I2C_Master_Wait:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon	equ	0xFF2
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postinc2	equ	0xFDE
  1923                           postdec2	equ	0xFDD
  1924                           fsr2h	equ	0xFDA
  1925                           fsr2l	equ	0xFD9
  1926                           status	equ	0xFD8
  1927                           
  1928 ;; *************** function _I2C_Master_Init *****************
  1929 ;; Defined at:
  1930 ;;		line 14 in file "I2C.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;  clockFreq       4   43[COMRAM] const unsigned long 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg, status,2
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;Total ram usage:        4 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    4
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_I2C_init
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text14
  1959  001798                     __ptext14:
  1960                           	opt stack 0
  1961  001798                     _I2C_Master_Init:
  1962                           	opt stack 25
  1963                           
  1964                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1965                           
  1966                           ;incstack = 0
  1967  001798  9AC6               	bcf	4038,5,c	;volatile
  1968                           
  1969                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1970  00179A  8694               	bsf	3988,3,c	;volatile
  1971                           
  1972                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1973  00179C  8894               	bsf	3988,4,c	;volatile
  1974                           
  1975                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1976  00179E  0E80               	movlw	128
  1977  0017A0  6EC7               	movwf	4039,c	;volatile
  1978                           
  1979                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1980  0017A2  0E28               	movlw	40
  1981  0017A4  6EC6               	movwf	4038,c	;volatile
  1982                           
  1983                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1984  0017A6  0E00               	movlw	0
  1985  0017A8  6EC5               	movwf	4037,c	;volatile
  1986                           
  1987                           ;I2C.c: 49: SSPADD = 9600;
  1988  0017AA  0E80               	movlw	128
  1989  0017AC  6EC8               	movwf	4040,c	;volatile
  1990  0017AE  0012               	return		;funcret
  1991  0017B0                     __end_of_I2C_Master_Init:
  1992                           	opt stack 0
  1993                           tblptru	equ	0xFF8
  1994                           tblptrh	equ	0xFF7
  1995                           tblptrl	equ	0xFF6
  1996                           tablat	equ	0xFF5
  1997                           prodh	equ	0xFF4
  1998                           prodl	equ	0xFF3
  1999                           intcon	equ	0xFF2
  2000                           postinc0	equ	0xFEE
  2001                           wreg	equ	0xFE8
  2002                           postinc2	equ	0xFDE
  2003                           postdec2	equ	0xFDD
  2004                           fsr2h	equ	0xFDA
  2005                           fsr2l	equ	0xFD9
  2006                           status	equ	0xFD8
  2007                           
  2008 ;; *************** function _interruptHandler *****************
  2009 ;; Defined at:
  2010 ;;		line 105 in file "main.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;		None
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;		None
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  1    wreg      void 
  2017 ;; Registers used:
  2018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;Total ram usage:       19 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; Hardware stack levels required when called:    3
  2031 ;; This function calls:
  2032 ;;		_readADC
  2033 ;;		i2_initLCD
  2034 ;;		i2_lcdInst
  2035 ;;		i2_printf
  2036 ;; This function is called by:
  2037 ;;		Interrupt level 2
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	intcode
  2042  000008                     __pintcode:
  2043                           	opt stack 0
  2044  000008                     _interruptHandler:
  2045                           	opt stack 24
  2046                           
  2047                           ;incstack = 0
  2048  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2049  00000A  ED2D  F009         	call	int_func,f	;refresh shadow registers
  2050                           tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           tblptrl	equ	0xFF6
  2053                           tablat	equ	0xFF5
  2054                           prodh	equ	0xFF4
  2055                           prodl	equ	0xFF3
  2056                           intcon	equ	0xFF2
  2057                           postinc0	equ	0xFEE
  2058                           wreg	equ	0xFE8
  2059                           postinc2	equ	0xFDE
  2060                           postdec2	equ	0xFDD
  2061                           fsr2h	equ	0xFDA
  2062                           fsr2l	equ	0xFD9
  2063                           status	equ	0xFD8
  2064                           
  2065                           	psect	intcode_body
  2066  00125A                     __pintcode_body:
  2067                           	opt stack 24
  2068  00125A                     int_func:
  2069                           	opt stack 24
  2070  00125A  0006               	pop		; remove dummy address from shadow register refresh
  2071  00125C  CFFA F01A          	movff	pclath,??_interruptHandler+1
  2072  001260  CFFB F01B          	movff	pclatu,??_interruptHandler+2
  2073  001264  CFE9 F01C          	movff	fsr0l,??_interruptHandler+3
  2074  001268  CFEA F01D          	movff	fsr0h,??_interruptHandler+4
  2075  00126C  CFE1 F01E          	movff	fsr1l,??_interruptHandler+5
  2076  001270  CFE2 F01F          	movff	fsr1h,??_interruptHandler+6
  2077  001274  CFD9 F020          	movff	fsr2l,??_interruptHandler+7
  2078  001278  CFDA F021          	movff	fsr2h,??_interruptHandler+8
  2079  00127C  CFF3 F022          	movff	prodl,??_interruptHandler+9
  2080  001280  CFF4 F023          	movff	prodh,??_interruptHandler+10
  2081  001284  CFF6 F024          	movff	tblptrl,??_interruptHandler+11
  2082  001288  CFF7 F025          	movff	tblptrh,??_interruptHandler+12
  2083  00128C  CFF8 F026          	movff	tblptru,??_interruptHandler+13
  2084  001290  CFF5 F027          	movff	tablat,??_interruptHandler+14
  2085  001294  C04F  F028         	movff	btemp,??_interruptHandler+15
  2086  001298  C050  F029         	movff	btemp+1,??_interruptHandler+16
  2087  00129C  C051  F02A         	movff	btemp+2,??_interruptHandler+17
  2088  0012A0  C052  F02B         	movff	btemp+3,??_interruptHandler+18
  2089                           
  2090                           ;main.c: 117: if (RBIF){
  2091  0012A4  A0F2               	btfss	intcon,0,c	;volatile
  2092  0012A6  D03A               	goto	i2l1690
  2093                           
  2094                           ;main.c: 118: initLCD();
  2095  0012A8  EC17  F00B         	call	i2_initLCD	;wreg free
  2096                           
  2097                           ;main.c: 121: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2098  0012AC  0E80               	movlw	128
  2099  0012AE  ECF6  F00B         	call	i2_lcdInst
  2100  0012B2  0E41               	movlw	65
  2101  0012B4  6E19               	movwf	??_interruptHandler& (0+255),c
  2102  0012B6  0EEE               	movlw	238
  2103  0012B8                     i2u90_47:
  2104  0012B8  2EE8               	decfsz	wreg,f,c
  2105  0012BA  D7FE               	bra	i2u90_47
  2106  0012BC  2E19               	decfsz	??_interruptHandler& (0+255),f,c
  2107  0012BE  D7FC               	bra	i2u90_47
  2108  0012C0  D000               	nop2	
  2109                           
  2110                           ;main.c: 123: printf("W_count:%d",W_count);
  2111  0012C2  0E11               	movlw	low STR_1
  2112  0012C4  6E0D               	movwf	i2printf@f,c
  2113  0012C6  0E10               	movlw	high STR_1
  2114  0012C8  6E0E               	movwf	i2printf@f+1,c
  2115  0012CA  C045  F00F         	movff	_W_count,?i2_printf+2
  2116  0012CE  C046  F010         	movff	_W_count+1,?i2_printf+3
  2117  0012D2  EC9E  F008         	call	i2_printf	;wreg free
  2118                           
  2119                           ;main.c: 124: if (readADC(11)<= 250){
  2120  0012D6  0E0B               	movlw	11
  2121  0012D8  EC7F  F00B         	call	_readADC
  2122  0012DC  5002               	movf	?_readADC+1,w,c
  2123  0012DE  E11D               	bnz	i2l1688
  2124  0012E0  0EFB               	movlw	251
  2125  0012E2  5C01               	subwf	?_readADC,w,c
  2126  0012E4  B0D8               	btfsc	status,0,c
  2127  0012E6  D019               	goto	i2l165
  2128                           
  2129                           ;main.c: 126: W_count++;
  2130  0012E8  4A45               	infsnz	_W_count,f,c
  2131  0012EA  2A46               	incf	_W_count+1,f,c
  2132                           
  2133                           ;main.c: 127: initLCD();
  2134  0012EC  EC17  F00B         	call	i2_initLCD	;wreg free
  2135                           
  2136                           ;main.c: 129: printf("W_count:%d",W_count);
  2137  0012F0  0E11               	movlw	low STR_1
  2138  0012F2  6E0D               	movwf	i2printf@f,c
  2139  0012F4  0E10               	movlw	high STR_1
  2140  0012F6  6E0E               	movwf	i2printf@f+1,c
  2141  0012F8  C045  F00F         	movff	_W_count,?i2_printf+2
  2142  0012FC  C046  F010         	movff	_W_count+1,?i2_printf+3
  2143  001300  EC9E  F008         	call	i2_printf	;wreg free
  2144                           
  2145                           ;main.c: 130: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2146  001304  0E80               	movlw	128
  2147  001306  ECF6  F00B         	call	i2_lcdInst
  2148  00130A  0E41               	movlw	65
  2149  00130C  6E19               	movwf	??_interruptHandler& (0+255),c
  2150  00130E  0EEE               	movlw	238
  2151  001310                     i2u91_47:
  2152  001310  2EE8               	decfsz	wreg,f,c
  2153  001312  D7FE               	bra	i2u91_47
  2154  001314  2E19               	decfsz	??_interruptHandler& (0+255),f,c
  2155  001316  D7FC               	bra	i2u91_47
  2156  001318  D000               	nop2	
  2157  00131A                     i2l165:
  2158  00131A                     i2l1688:
  2159                           
  2160                           ;main.c: 131: }
  2161                           ;main.c: 133: RBIF = 0;
  2162  00131A  90F2               	bcf	intcon,0,c	;volatile
  2163  00131C                     i2l1690:
  2164                           
  2165                           ;main.c: 134: return;
  2166  00131C  C02B  F052         	movff	??_interruptHandler+18,btemp+3
  2167  001320  C02A  F051         	movff	??_interruptHandler+17,btemp+2
  2168  001324  C029  F050         	movff	??_interruptHandler+16,btemp+1
  2169  001328  C028  F04F         	movff	??_interruptHandler+15,btemp
  2170  00132C  C027  FFF5         	movff	??_interruptHandler+14,tablat
  2171  001330  C026  FFF8         	movff	??_interruptHandler+13,tblptru
  2172  001334  C025  FFF7         	movff	??_interruptHandler+12,tblptrh
  2173  001338  C024  FFF6         	movff	??_interruptHandler+11,tblptrl
  2174  00133C  C023  FFF4         	movff	??_interruptHandler+10,prodh
  2175  001340  C022  FFF3         	movff	??_interruptHandler+9,prodl
  2176  001344  C021  FFDA         	movff	??_interruptHandler+8,fsr2h
  2177  001348  C020  FFD9         	movff	??_interruptHandler+7,fsr2l
  2178  00134C  C01F  FFE2         	movff	??_interruptHandler+6,fsr1h
  2179  001350  C01E  FFE1         	movff	??_interruptHandler+5,fsr1l
  2180  001354  C01D  FFEA         	movff	??_interruptHandler+4,fsr0h
  2181  001358  C01C  FFE9         	movff	??_interruptHandler+3,fsr0l
  2182  00135C  C01B  FFFB         	movff	??_interruptHandler+2,pclatu
  2183  001360  C01A  FFFA         	movff	??_interruptHandler+1,pclath
  2184  001364  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2185  001366  0011               	retfie		f
  2186  001368                     __end_of_interruptHandler:
  2187                           	opt stack 0
  2188                           pclatu	equ	0xFFB
  2189                           pclath	equ	0xFFA
  2190                           tblptru	equ	0xFF8
  2191                           tblptrh	equ	0xFF7
  2192                           tblptrl	equ	0xFF6
  2193                           tablat	equ	0xFF5
  2194                           prodh	equ	0xFF4
  2195                           prodl	equ	0xFF3
  2196                           intcon	equ	0xFF2
  2197                           postinc0	equ	0xFEE
  2198                           fsr0h	equ	0xFEA
  2199                           fsr0l	equ	0xFE9
  2200                           wreg	equ	0xFE8
  2201                           fsr1h	equ	0xFE2
  2202                           fsr1l	equ	0xFE1
  2203                           postinc2	equ	0xFDE
  2204                           postdec2	equ	0xFDD
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function i2_printf *****************
  2210 ;; Defined at:
  2211 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2214 ;;		 -> STR_5(11), STR_4(11), STR_3(11), STR_2(11), 
  2215 ;;		 -> STR_1(11), 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  printf          4    0        struct .
  2218 ;;  printf          3    0        PTR const unsigned char 
  2219 ;;  printf          2   21[COMRAM] unsigned int 
  2220 ;;  printf          2   17[COMRAM] PTR void [1]
  2221 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2222 ;;  printf          2    0        unsigned int 
  2223 ;;  printf          1   23[COMRAM] char 
  2224 ;;  printf          1   20[COMRAM] char 
  2225 ;;  printf          1   19[COMRAM] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  2   12[COMRAM] int 
  2228 ;; Registers used:
  2229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2235 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;Total ram usage:       12 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    2
  2242 ;; This function calls:
  2243 ;;		i2___lwdiv
  2244 ;;		i2___lwmod
  2245 ;;		i2_putch
  2246 ;; This function is called by:
  2247 ;;		_interruptHandler
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text16
  2252  00113C                     __ptext16:
  2253                           	opt stack 0
  2254  00113C                     i2_printf:
  2255                           	opt stack 24
  2256                           
  2257                           ;doprnt.c: 466: va_list ap;
  2258                           ;doprnt.c: 499: signed char c;
  2259                           ;doprnt.c: 506: signed char prec;
  2260                           ;doprnt.c: 508: unsigned char flag;
  2261                           ;doprnt.c: 523: union {
  2262                           ;doprnt.c: 524: unsigned long vd;
  2263                           ;doprnt.c: 525: double integ;
  2264                           ;doprnt.c: 526: } tmpval;
  2265                           ;doprnt.c: 528: unsigned int val;
  2266                           ;doprnt.c: 529: unsigned len;
  2267                           ;doprnt.c: 530: const char * cp;
  2268                           ;doprnt.c: 533: *ap = __va_start();
  2269                           
  2270                           ;incstack = 0
  2271  00113C  0E0F               	movlw	low (?i2_printf+2)
  2272  00113E  6E12               	movwf	i2printf@ap,c
  2273  001140  0E00               	movlw	high (?i2_printf+2)
  2274  001142  6E13               	movwf	i2printf@ap+1,c
  2275                           
  2276                           ;doprnt.c: 536: while(c = *f++) {
  2277  001144  D07D               	goto	i2u75_40
  2278  001146                     
  2279                           ;doprnt.c: 538: if(c != '%')
  2280  001146  0E25               	movlw	37
  2281  001148  1818               	xorwf	i2printf@c,w,c
  2282  00114A  B4D8               	btfsc	status,2,c
  2283  00114C  D004               	goto	i2l231
  2284                           
  2285                           ;doprnt.c: 540: {
  2286                           ;doprnt.c: 541: (putch(c) );
  2287  00114E  5018               	movf	i2printf@c,w,c
  2288  001150  ECEC  F00B         	call	i2_putch
  2289                           
  2290                           ;doprnt.c: 542: continue;
  2291  001154  D075               	goto	i2u75_40
  2292  001156                     i2l231:
  2293                           
  2294                           ;doprnt.c: 543: }
  2295                           ;doprnt.c: 548: flag = 0;
  2296  001156  0E00               	movlw	0
  2297  001158  6E14               	movwf	i2printf@flag,c
  2298                           
  2299                           ;doprnt.c: 822: }
  2300                           
  2301                           ;doprnt.c: 813: continue;
  2302                           
  2303                           ;doprnt.c: 802: default:
  2304                           
  2305                           ;doprnt.c: 698: case 'i':
  2306                           ;doprnt.c: 699: break;
  2307                           
  2308                           ;doprnt.c: 697: case 'd':
  2309                           
  2310                           ;doprnt.c: 638: goto alldone;
  2311                           
  2312                           ;doprnt.c: 637: case 0:
  2313                           
  2314                           ;doprnt.c: 635: switch(c = *f++) {
  2315  00115A  C00D  FFF6         	movff	i2printf@f,tblptrl
  2316  00115E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2317  001162  4A0D               	infsnz	i2printf@f,f,c
  2318  001164  2A0E               	incf	i2printf@f+1,f,c
  2319  001166                     	if	0	;tblptru may be non-zero
  2320  001166                     	endif
  2321  001166                     	if	0	;tblptru may be non-zero
  2322  001166                     	endif
  2323  001166  0008               	tblrd		*
  2324  001168  CFF5 F018          	movff	tablat,i2printf@c
  2325  00116C  5018               	movf	i2printf@c,w,c
  2326                           
  2327                           ; Switch size 1, requested type "space"
  2328                           ; Number of cases is 3, Range of values is 0 to 105
  2329                           ; switch strategies available:
  2330                           ; Name         Instructions Cycles
  2331                           ; simple_byte           10     6 (average)
  2332                           ;	Chosen strategy is simple_byte
  2333  00116E  0A00               	xorlw	0	; case 0
  2334  001170  B4D8               	btfsc	status,2,c
  2335  001172  0012               	return	
  2336  001174  0A64               	xorlw	100	; case 100
  2337  001176  B4D8               	btfsc	status,2,c
  2338  001178  D003               	goto	i2l237
  2339  00117A  0A0D               	xorlw	13	; case 105
  2340  00117C  A4D8               	btfss	status,2,c
  2341  00117E  D060               	goto	i2u75_40
  2342  001180                     i2l237:
  2343                           
  2344                           ;doprnt.c: 1253: {
  2345                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2346  001180  C012  FFD9         	movff	i2printf@ap,fsr2l
  2347  001184  C013  FFDA         	movff	i2printf@ap+1,fsr2h
  2348  001188  CFDE F016          	movff	postinc2,i2printf@val
  2349  00118C  CFDD F017          	movff	postdec2,i2printf@val+1
  2350  001190  0E02               	movlw	2
  2351  001192  2612               	addwf	i2printf@ap,f,c
  2352  001194  0E00               	movlw	0
  2353  001196  2213               	addwfc	i2printf@ap+1,f,c
  2354                           
  2355                           ;doprnt.c: 1261: if((int)val < 0) {
  2356  001198  AE17               	btfss	i2printf@val+1,7,c
  2357  00119A  D006               	goto	i2l239
  2358                           
  2359                           ;doprnt.c: 1262: flag |= 0x03;
  2360  00119C  0E03               	movlw	3
  2361  00119E  1214               	iorwf	i2printf@flag,f,c
  2362                           
  2363                           ;doprnt.c: 1263: val = -val;
  2364  0011A0  6C16               	negf	i2printf@val,c
  2365  0011A2  1E17               	comf	i2printf@val+1,f,c
  2366  0011A4  B0D8               	btfsc	status,0,c
  2367  0011A6  2A17               	incf	i2printf@val+1,f,c
  2368  0011A8                     i2l239:
  2369                           
  2370                           ;doprnt.c: 1264: }
  2371                           ;doprnt.c: 1266: }
  2372                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2373  0011A8  0E01               	movlw	1
  2374  0011AA  6E18               	movwf	i2printf@c,c
  2375  0011AC                     i2l1592:
  2376  0011AC  0E05               	movlw	5
  2377  0011AE  1818               	xorwf	i2printf@c,w,c
  2378  0011B0  B4D8               	btfsc	status,2,c
  2379  0011B2  D012               	goto	i2u73_40
  2380                           
  2381                           ;doprnt.c: 1306: if(val < dpowers[c])
  2382  0011B4  5018               	movf	i2printf@c,w,c
  2383  0011B6  0D02               	mullw	2
  2384  0011B8  0E01               	movlw	low _dpowers
  2385  0011BA  24F3               	addwf	prodl,w,c
  2386  0011BC  6EF6               	movwf	tblptrl,c
  2387  0011BE  0E10               	movlw	high _dpowers
  2388  0011C0  20F4               	addwfc	prodh,w,c
  2389  0011C2  6EF7               	movwf	tblptrh,c
  2390  0011C4                     	if	0	;There are less than 3 active tblptr bytes
  2391  0011C4                     	endif
  2392  0011C4  0009               	tblrd		*+
  2393  0011C6  50F5               	movf	tablat,w,c
  2394  0011C8  5C16               	subwf	i2printf@val,w,c
  2395  0011CA  0009               	tblrd		*+
  2396  0011CC  50F5               	movf	tablat,w,c
  2397  0011CE  5817               	subwfb	i2printf@val+1,w,c
  2398  0011D0  A0D8               	btfss	status,0,c
  2399  0011D2  D002               	goto	i2u73_40
  2400                           
  2401                           ;doprnt.c: 1307: break;
  2402  0011D4  2A18               	incf	i2printf@c,f,c
  2403  0011D6  D7EA               	goto	i2l1592
  2404  0011D8                     i2u73_40:
  2405                           
  2406                           ;doprnt.c: 1422: {
  2407                           ;doprnt.c: 1438: if(flag & 0x03)
  2408  0011D8  C014  F011         	movff	i2printf@flag,??i2_printf
  2409  0011DC  0E03               	movlw	3
  2410  0011DE  1611               	andwf	??i2_printf,f,c
  2411  0011E0  B4D8               	btfsc	status,2,c
  2412  0011E2  D003               	goto	i2l243
  2413                           
  2414                           ;doprnt.c: 1439: (putch('-') );
  2415  0011E4  0E2D               	movlw	45
  2416  0011E6  ECEC  F00B         	call	i2_putch
  2417  0011EA                     i2l243:
  2418                           
  2419                           ;doprnt.c: 1469: }
  2420                           ;doprnt.c: 1472: prec = c;
  2421  0011EA  C018  F015         	movff	i2printf@c,i2printf@prec
  2422                           
  2423                           ;doprnt.c: 1474: while(prec--) {
  2424  0011EE  D024               	goto	i2l244
  2425  0011F0                     
  2426                           ;doprnt.c: 1478: {
  2427                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2428  0011F0  5015               	movf	i2printf@prec,w,c
  2429  0011F2  0D02               	mullw	2
  2430  0011F4  0E01               	movlw	low _dpowers
  2431  0011F6  24F3               	addwf	prodl,w,c
  2432  0011F8  6EF6               	movwf	tblptrl,c
  2433  0011FA  0E10               	movlw	high _dpowers
  2434  0011FC  20F4               	addwfc	prodh,w,c
  2435  0011FE  6EF7               	movwf	tblptrh,c
  2436  001200                     	if	0	;There are less than 3 active tblptr bytes
  2437  001200                     	endif
  2438  001200  0009               	tblrd		*+
  2439  001202  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2440  001206  000A               	tblrd		*-
  2441  001208  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2442  00120C  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2443  001210  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2444  001214  ECC8  F00A         	call	i2___lwdiv	;wreg free
  2445  001218  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2446  00121C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2447  001220  0E00               	movlw	0
  2448  001222  6E0B               	movwf	i2___lwmod@divisor+1,c
  2449  001224  0E0A               	movlw	10
  2450  001226  6E0A               	movwf	i2___lwmod@divisor,c
  2451  001228  EC5E  F00B         	call	i2___lwmod	;wreg free
  2452  00122C  5008               	movf	?i2___lwmod,w,c
  2453  00122E  0F30               	addlw	48
  2454  001230  6E18               	movwf	i2printf@c,c
  2455                           
  2456                           ;doprnt.c: 1523: }
  2457                           ;doprnt.c: 1524: (putch(c) );
  2458  001232  5018               	movf	i2printf@c,w,c
  2459  001234  ECEC  F00B         	call	i2_putch
  2460  001238                     i2l244:
  2461  001238  0615               	decf	i2printf@prec,f,c
  2462  00123A  2815               	incf	i2printf@prec,w,c
  2463  00123C  A4D8               	btfss	status,2,c
  2464  00123E  D7D8               	goto	i2l245
  2465  001240                     i2u75_40:
  2466  001240  C00D  FFF6         	movff	i2printf@f,tblptrl
  2467  001244  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2468  001248  4A0D               	infsnz	i2printf@f,f,c
  2469  00124A  2A0E               	incf	i2printf@f+1,f,c
  2470  00124C                     	if	0	;tblptru may be non-zero
  2471  00124C                     	endif
  2472  00124C                     	if	0	;tblptru may be non-zero
  2473  00124C                     	endif
  2474  00124C  0008               	tblrd		*
  2475  00124E  CFF5 F018          	movff	tablat,i2printf@c
  2476  001252  5018               	movf	i2printf@c,w,c
  2477  001254  B4D8               	btfsc	status,2,c
  2478  001256  0012               	return	
  2479  001258  D776               	goto	i2l230
  2480  00125A                     __end_ofi2_printf:
  2481                           	opt stack 0
  2482                           pclatu	equ	0xFFB
  2483                           pclath	equ	0xFFA
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           prodh	equ	0xFF4
  2489                           prodl	equ	0xFF3
  2490                           intcon	equ	0xFF2
  2491                           postinc0	equ	0xFEE
  2492                           fsr0h	equ	0xFEA
  2493                           fsr0l	equ	0xFE9
  2494                           wreg	equ	0xFE8
  2495                           fsr1h	equ	0xFE2
  2496                           fsr1l	equ	0xFE1
  2497                           postinc2	equ	0xFDE
  2498                           postdec2	equ	0xFDD
  2499                           fsr2h	equ	0xFDA
  2500                           fsr2l	equ	0xFD9
  2501                           status	equ	0xFD8
  2502                           
  2503 ;; *************** function i2_putch *****************
  2504 ;; Defined at:
  2505 ;;		line 24 in file "lcd.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  data            1    wreg     unsigned char 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  data            1    2[COMRAM] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;Total ram usage:        1 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    1
  2526 ;; This function calls:
  2527 ;;		i2_lcdNibble
  2528 ;; This function is called by:
  2529 ;;		i2_printf
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text17
  2534  0017D8                     __ptext17:
  2535                           	opt stack 0
  2536  0017D8                     i2_putch:
  2537                           	opt stack 24
  2538                           
  2539                           ;incstack = 0
  2540                           ;i2putch@data stored from wreg
  2541  0017D8  6E03               	movwf	i2putch@data,c
  2542                           
  2543                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2544  0017DA  848C               	bsf	3980,2,c	;volatile
  2545                           
  2546                           ;lcd.c: 33: lcdNibble(data);
  2547  0017DC  5003               	movf	i2putch@data,w,c
  2548  0017DE  EC60  F00A         	call	i2_lcdNibble
  2549                           
  2550                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2551  0017E2  0EC8               	movlw	200
  2552  0017E4                     i2u92_47:
  2553  0017E4  D000               	nop2	
  2554  0017E6  2EE8               	decfsz	wreg,f,c
  2555  0017E8  D7FD               	bra	i2u92_47
  2556  0017EA  0012               	return		;funcret
  2557  0017EC                     __end_ofi2_putch:
  2558                           	opt stack 0
  2559                           pclatu	equ	0xFFB
  2560                           pclath	equ	0xFFA
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           prodh	equ	0xFF4
  2566                           prodl	equ	0xFF3
  2567                           intcon	equ	0xFF2
  2568                           postinc0	equ	0xFEE
  2569                           fsr0h	equ	0xFEA
  2570                           fsr0l	equ	0xFE9
  2571                           wreg	equ	0xFE8
  2572                           fsr1h	equ	0xFE2
  2573                           fsr1l	equ	0xFE1
  2574                           postinc2	equ	0xFDE
  2575                           postdec2	equ	0xFDD
  2576                           fsr2h	equ	0xFDA
  2577                           fsr2l	equ	0xFD9
  2578                           status	equ	0xFD8
  2579                           
  2580 ;; *************** function i2___lwmod *****************
  2581 ;; Defined at:
  2582 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  dividend        2    7[COMRAM] unsigned int 
  2585 ;;  divisor         2    9[COMRAM] unsigned int 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  __lwmod         1   11[COMRAM] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  2    7[COMRAM] unsigned int 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2597 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;Total ram usage:        5 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		i2_printf
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text18
  2611  0016BC                     __ptext18:
  2612                           	opt stack 0
  2613  0016BC                     i2___lwmod:
  2614                           	opt stack 25
  2615                           
  2616                           ;incstack = 0
  2617  0016BC  500A               	movf	i2___lwmod@divisor,w,c
  2618  0016BE  100B               	iorwf	i2___lwmod@divisor+1,w,c
  2619  0016C0  B4D8               	btfsc	status,2,c
  2620  0016C2  D018               	goto	i2l667
  2621  0016C4  0E01               	movlw	1
  2622  0016C6  6E0C               	movwf	i2___lwmod@counter,c
  2623  0016C8  D004               	goto	i2l662
  2624  0016CA  90D8               	bcf	status,0,c
  2625  0016CC  360A               	rlcf	i2___lwmod@divisor,f,c
  2626  0016CE  360B               	rlcf	i2___lwmod@divisor+1,f,c
  2627  0016D0  2A0C               	incf	i2___lwmod@counter,f,c
  2628  0016D2                     i2l662:
  2629  0016D2  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  2630  0016D4  D7FA               	goto	i2l663
  2631  0016D6                     i2u58_40:
  2632  0016D6  500A               	movf	i2___lwmod@divisor,w,c
  2633  0016D8  5C08               	subwf	i2___lwmod@dividend,w,c
  2634  0016DA  500B               	movf	i2___lwmod@divisor+1,w,c
  2635  0016DC  5809               	subwfb	i2___lwmod@dividend+1,w,c
  2636  0016DE  A0D8               	btfss	status,0,c
  2637  0016E0  D004               	goto	i2l666
  2638  0016E2  500A               	movf	i2___lwmod@divisor,w,c
  2639  0016E4  5E08               	subwf	i2___lwmod@dividend,f,c
  2640  0016E6  500B               	movf	i2___lwmod@divisor+1,w,c
  2641  0016E8  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  2642  0016EA                     i2l666:
  2643  0016EA  90D8               	bcf	status,0,c
  2644  0016EC  320B               	rrcf	i2___lwmod@divisor+1,f,c
  2645  0016EE  320A               	rrcf	i2___lwmod@divisor,f,c
  2646  0016F0  2E0C               	decfsz	i2___lwmod@counter,f,c
  2647  0016F2  D7F1               	goto	i2u58_40
  2648  0016F4                     i2l667:
  2649  0016F4  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  2650  0016F8  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  2651  0016FC  0012               	return		;funcret
  2652  0016FE                     __end_ofi2___lwmod:
  2653                           	opt stack 0
  2654                           pclatu	equ	0xFFB
  2655                           pclath	equ	0xFFA
  2656                           tblptru	equ	0xFF8
  2657                           tblptrh	equ	0xFF7
  2658                           tblptrl	equ	0xFF6
  2659                           tablat	equ	0xFF5
  2660                           prodh	equ	0xFF4
  2661                           prodl	equ	0xFF3
  2662                           intcon	equ	0xFF2
  2663                           postinc0	equ	0xFEE
  2664                           fsr0h	equ	0xFEA
  2665                           fsr0l	equ	0xFE9
  2666                           wreg	equ	0xFE8
  2667                           fsr1h	equ	0xFE2
  2668                           fsr1l	equ	0xFE1
  2669                           postinc2	equ	0xFDE
  2670                           postdec2	equ	0xFDD
  2671                           fsr2h	equ	0xFDA
  2672                           fsr2l	equ	0xFD9
  2673                           status	equ	0xFD8
  2674                           
  2675 ;; *************** function i2___lwdiv *****************
  2676 ;; Defined at:
  2677 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  dividend        2    0[COMRAM] unsigned int 
  2680 ;;  divisor         2    2[COMRAM] unsigned int 
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  2683 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  2    0[COMRAM] unsigned int 
  2686 ;; Registers used:
  2687 ;;		wreg, status,2, status,0
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2693 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2694 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2696 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;Total ram usage:        7 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; This function calls:
  2700 ;;		Nothing
  2701 ;; This function is called by:
  2702 ;;		i2_printf
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text19
  2707  001590                     __ptext19:
  2708                           	opt stack 0
  2709  001590                     i2___lwdiv:
  2710                           	opt stack 25
  2711                           
  2712                           ;incstack = 0
  2713  001590  0E00               	movlw	0
  2714  001592  6E06               	movwf	i2___lwdiv@quotient+1,c
  2715  001594  0E00               	movlw	0
  2716  001596  6E05               	movwf	i2___lwdiv@quotient,c
  2717  001598  5003               	movf	i2___lwdiv@divisor,w,c
  2718  00159A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  2719  00159C  B4D8               	btfsc	status,2,c
  2720  00159E  D01C               	goto	i2l657
  2721  0015A0  0E01               	movlw	1
  2722  0015A2  6E07               	movwf	i2___lwdiv@counter,c
  2723  0015A4  D004               	goto	i2l652
  2724  0015A6  90D8               	bcf	status,0,c
  2725  0015A8  3603               	rlcf	i2___lwdiv@divisor,f,c
  2726  0015AA  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  2727  0015AC  2A07               	incf	i2___lwdiv@counter,f,c
  2728  0015AE                     i2l652:
  2729  0015AE  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  2730  0015B0  D7FA               	goto	i2l653
  2731  0015B2                     i2u55_40:
  2732  0015B2  90D8               	bcf	status,0,c
  2733  0015B4  3605               	rlcf	i2___lwdiv@quotient,f,c
  2734  0015B6  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  2735  0015B8  5003               	movf	i2___lwdiv@divisor,w,c
  2736  0015BA  5C01               	subwf	i2___lwdiv@dividend,w,c
  2737  0015BC  5004               	movf	i2___lwdiv@divisor+1,w,c
  2738  0015BE  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  2739  0015C0  A0D8               	btfss	status,0,c
  2740  0015C2  D005               	goto	i2l656
  2741  0015C4  5003               	movf	i2___lwdiv@divisor,w,c
  2742  0015C6  5E01               	subwf	i2___lwdiv@dividend,f,c
  2743  0015C8  5004               	movf	i2___lwdiv@divisor+1,w,c
  2744  0015CA  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  2745  0015CC  8005               	bsf	i2___lwdiv@quotient,0,c
  2746  0015CE                     i2l656:
  2747  0015CE  90D8               	bcf	status,0,c
  2748  0015D0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  2749  0015D2  3203               	rrcf	i2___lwdiv@divisor,f,c
  2750  0015D4  2E07               	decfsz	i2___lwdiv@counter,f,c
  2751  0015D6  D7ED               	goto	i2u55_40
  2752  0015D8                     i2l657:
  2753  0015D8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  2754  0015DC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  2755  0015E0  0012               	return		;funcret
  2756  0015E2                     __end_ofi2___lwdiv:
  2757                           	opt stack 0
  2758                           pclatu	equ	0xFFB
  2759                           pclath	equ	0xFFA
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           prodh	equ	0xFF4
  2765                           prodl	equ	0xFF3
  2766                           intcon	equ	0xFF2
  2767                           postinc0	equ	0xFEE
  2768                           fsr0h	equ	0xFEA
  2769                           fsr0l	equ	0xFE9
  2770                           wreg	equ	0xFE8
  2771                           fsr1h	equ	0xFE2
  2772                           fsr1l	equ	0xFE1
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function i2_initLCD *****************
  2780 ;; Defined at:
  2781 ;;		line 60 in file "lcd.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;Total ram usage:        1 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    2
  2802 ;; This function calls:
  2803 ;;		i2_lcdInst
  2804 ;; This function is called by:
  2805 ;;		_interruptHandler
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text20
  2810  00162E                     __ptext20:
  2811                           	opt stack 0
  2812  00162E                     i2_initLCD:
  2813                           	opt stack 24
  2814                           
  2815                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2816                           
  2817                           ;incstack = 0
  2818  00162E  0EC3               	movlw	195
  2819  001630  6E04               	movwf	??i2_initLCD& (0+255),c
  2820  001632  0ECD               	movlw	205
  2821  001634                     i2u93_47:
  2822  001634  2EE8               	decfsz	wreg,f,c
  2823  001636  D7FE               	bra	i2u93_47
  2824  001638  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2825  00163A  D7FC               	bra	i2u93_47
  2826  00163C  F000               	nop	
  2827                           
  2828                           ;lcd.c: 69: lcdInst(0b00110011);
  2829  00163E  0E33               	movlw	51
  2830  001640  ECF6  F00B         	call	i2_lcdInst
  2831                           
  2832                           ;lcd.c: 70: lcdInst(0b00110010);
  2833  001644  0E32               	movlw	50
  2834  001646  ECF6  F00B         	call	i2_lcdInst
  2835                           
  2836                           ;lcd.c: 71: lcdInst(0b00101000);
  2837  00164A  0E28               	movlw	40
  2838  00164C  ECF6  F00B         	call	i2_lcdInst
  2839                           
  2840                           ;lcd.c: 72: lcdInst(0b00001111);
  2841  001650  0E0F               	movlw	15
  2842  001652  ECF6  F00B         	call	i2_lcdInst
  2843                           
  2844                           ;lcd.c: 73: lcdInst(0b00000110);
  2845  001656  0E06               	movlw	6
  2846  001658  ECF6  F00B         	call	i2_lcdInst
  2847                           
  2848                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2849  00165C  0E01               	movlw	1
  2850  00165E  ECF6  F00B         	call	i2_lcdInst
  2851  001662  0EC3               	movlw	195
  2852  001664  6E04               	movwf	??i2_initLCD& (0+255),c
  2853  001666  0ECD               	movlw	205
  2854  001668                     i2u94_47:
  2855  001668  2EE8               	decfsz	wreg,f,c
  2856  00166A  D7FE               	bra	i2u94_47
  2857  00166C  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2858  00166E  D7FC               	bra	i2u94_47
  2859  001670  F000               	nop	
  2860                           
  2861                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2862  001672  0E0F               	movlw	15
  2863  001674  ECF6  F00B         	call	i2_lcdInst
  2864  001678  0012               	return		;funcret
  2865  00167A                     __end_ofi2_initLCD:
  2866                           	opt stack 0
  2867                           pclatu	equ	0xFFB
  2868                           pclath	equ	0xFFA
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           intcon	equ	0xFF2
  2876                           postinc0	equ	0xFEE
  2877                           fsr0h	equ	0xFEA
  2878                           fsr0l	equ	0xFE9
  2879                           wreg	equ	0xFE8
  2880                           fsr1h	equ	0xFE2
  2881                           fsr1l	equ	0xFE1
  2882                           postinc2	equ	0xFDE
  2883                           postdec2	equ	0xFDD
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888 ;; *************** function i2_lcdInst *****************
  2889 ;; Defined at:
  2890 ;;		line 11 in file "lcd.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  data            1    wreg     unsigned char 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  data            1    2[COMRAM] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2, status,0, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;Total ram usage:        1 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    1
  2911 ;; This function calls:
  2912 ;;		i2_lcdNibble
  2913 ;; This function is called by:
  2914 ;;		_interruptHandler
  2915 ;;		i2_initLCD
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text21
  2920  0017EC                     __ptext21:
  2921                           	opt stack 0
  2922  0017EC                     i2_lcdInst:
  2923                           	opt stack 25
  2924                           
  2925                           ;incstack = 0
  2926                           ;i2lcdInst@data stored from wreg
  2927  0017EC  6E03               	movwf	i2lcdInst@data,c
  2928                           
  2929                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2930  0017EE  948C               	bcf	3980,2,c	;volatile
  2931                           
  2932                           ;lcd.c: 20: lcdNibble(data);
  2933  0017F0  5003               	movf	i2lcdInst@data,w,c
  2934  0017F2  EC60  F00A         	call	i2_lcdNibble
  2935                           
  2936                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2937  0017F6  0EC8               	movlw	200
  2938  0017F8                     i2u95_47:
  2939  0017F8  D000               	nop2	
  2940  0017FA  2EE8               	decfsz	wreg,f,c
  2941  0017FC  D7FD               	bra	i2u95_47
  2942  0017FE  0012               	return		;funcret
  2943  001800                     __end_ofi2_lcdInst:
  2944                           	opt stack 0
  2945                           pclatu	equ	0xFFB
  2946                           pclath	equ	0xFFA
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           intcon	equ	0xFF2
  2954                           postinc0	equ	0xFEE
  2955                           fsr0h	equ	0xFEA
  2956                           fsr0l	equ	0xFE9
  2957                           wreg	equ	0xFE8
  2958                           fsr1h	equ	0xFE2
  2959                           fsr1l	equ	0xFE1
  2960                           postinc2	equ	0xFDE
  2961                           postdec2	equ	0xFDD
  2962                           fsr2h	equ	0xFDA
  2963                           fsr2l	equ	0xFD9
  2964                           status	equ	0xFD8
  2965                           
  2966 ;; *************** function i2_lcdNibble *****************
  2967 ;; Defined at:
  2968 ;;		line 37 in file "lcd.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  data            1    wreg     unsigned char 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  data            1    1[COMRAM] unsigned char 
  2973 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2, status,0
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;Total ram usage:        2 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		i2_lcdInst
  2993 ;;		i2_putch
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text22
  2998  0014C0                     __ptext22:
  2999                           	opt stack 0
  3000  0014C0                     i2_lcdNibble:
  3001                           	opt stack 24
  3002                           
  3003                           ;incstack = 0
  3004                           ;i2lcdNibble@data stored from wreg
  3005  0014C0  6E02               	movwf	i2lcdNibble@data,c
  3006                           
  3007                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3008  0014C2  5002               	movf	i2lcdNibble@data,w,c
  3009  0014C4  0BF0               	andlw	240
  3010  0014C6  6E01               	movwf	i2lcdNibble@temp,c
  3011                           
  3012                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3013  0014C8  508C               	movf	3980,w,c	;volatile
  3014  0014CA  0B0F               	andlw	15
  3015  0014CC  6E8C               	movwf	3980,c	;volatile
  3016                           
  3017                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3018  0014CE  5001               	movf	i2lcdNibble@temp,w,c
  3019  0014D0  108C               	iorwf	3980,w,c	;volatile
  3020  0014D2  6E8C               	movwf	3980,c	;volatile
  3021                           
  3022                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3023  0014D4  0E00               	movlw	0
  3024  0014D6  BEF2               	btfsc	intcon,7,c	;volatile
  3025  0014D8  0E01               	movlw	1
  3026  0014DA  6E4E               	movwf	_LCDinterruptState,c
  3027  0014DC  9EF2               	bcf	intcon,7,c	;volatile
  3028  0014DE  868C               	bsf	3980,3,c	;volatile
  3029  0014E0  0E53               	movlw	83
  3030  0014E2                     i2u96_47:
  3031  0014E2  2EE8               	decfsz	wreg,f,c
  3032  0014E4  D7FE               	bra	i2u96_47
  3033  0014E6  F000               	nop	
  3034  0014E8  968C               	bcf	3980,3,c	;volatile
  3035  0014EA  0EC8               	movlw	200
  3036  0014EC                     i2u97_47:
  3037  0014EC  D000               	nop2	
  3038  0014EE  2EE8               	decfsz	wreg,f,c
  3039  0014F0  D7FD               	bra	i2u97_47
  3040  0014F2  B04E               	btfsc	_LCDinterruptState,0,c
  3041  0014F4  D002               	bra	i2u46_45
  3042  0014F6  9EF2               	bcf	intcon,7,c	;volatile
  3043  0014F8  D001               	bra	i2u46_46
  3044  0014FA                     i2u46_45:
  3045  0014FA  8EF2               	bsf	intcon,7,c	;volatile
  3046  0014FC                     i2u46_46:
  3047                           
  3048                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3049  0014FC  3802               	swapf	i2lcdNibble@data,w,c
  3050  0014FE  0BF0               	andlw	240
  3051  001500  6E02               	movwf	i2lcdNibble@data,c
  3052                           
  3053                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3054  001502  5002               	movf	i2lcdNibble@data,w,c
  3055  001504  0BF0               	andlw	240
  3056  001506  6E01               	movwf	i2lcdNibble@temp,c
  3057                           
  3058                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3059  001508  508C               	movf	3980,w,c	;volatile
  3060  00150A  0B0F               	andlw	15
  3061  00150C  6E8C               	movwf	3980,c	;volatile
  3062                           
  3063                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3064  00150E  5001               	movf	i2lcdNibble@temp,w,c
  3065  001510  108C               	iorwf	3980,w,c	;volatile
  3066  001512  6E8C               	movwf	3980,c	;volatile
  3067                           
  3068                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3069  001514  0E00               	movlw	0
  3070  001516  BEF2               	btfsc	intcon,7,c	;volatile
  3071  001518  0E01               	movlw	1
  3072  00151A  6E4E               	movwf	_LCDinterruptState,c
  3073  00151C  9EF2               	bcf	intcon,7,c	;volatile
  3074  00151E  868C               	bsf	3980,3,c	;volatile
  3075  001520  0E53               	movlw	83
  3076  001522                     i2u98_47:
  3077  001522  2EE8               	decfsz	wreg,f,c
  3078  001524  D7FE               	bra	i2u98_47
  3079  001526  F000               	nop	
  3080  001528  968C               	bcf	3980,3,c	;volatile
  3081  00152A  0EC8               	movlw	200
  3082  00152C                     i2u99_47:
  3083  00152C  D000               	nop2	
  3084  00152E  2EE8               	decfsz	wreg,f,c
  3085  001530  D7FD               	bra	i2u99_47
  3086  001532  B04E               	btfsc	_LCDinterruptState,0,c
  3087  001534  D002               	bra	i2u47_45
  3088  001536  9EF2               	bcf	intcon,7,c	;volatile
  3089  001538  D001               	bra	i2u47_46
  3090  00153A                     i2u47_45:
  3091  00153A  8EF2               	bsf	intcon,7,c	;volatile
  3092  00153C                     i2u47_46:
  3093  00153C  0012               	return		;funcret
  3094  00153E                     __end_ofi2_lcdNibble:
  3095                           	opt stack 0
  3096                           pclatu	equ	0xFFB
  3097                           pclath	equ	0xFFA
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           prodh	equ	0xFF4
  3103                           prodl	equ	0xFF3
  3104                           intcon	equ	0xFF2
  3105                           postinc0	equ	0xFEE
  3106                           fsr0h	equ	0xFEA
  3107                           fsr0l	equ	0xFE9
  3108                           wreg	equ	0xFE8
  3109                           fsr1h	equ	0xFE2
  3110                           fsr1l	equ	0xFE1
  3111                           postinc2	equ	0xFDE
  3112                           postdec2	equ	0xFDD
  3113                           fsr2h	equ	0xFDA
  3114                           fsr2l	equ	0xFD9
  3115                           status	equ	0xFD8
  3116                           
  3117 ;; *************** function _readADC *****************
  3118 ;; Defined at:
  3119 ;;		line 143 in file "main.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;  channel         1    wreg     unsigned char 
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  channel         1    4[COMRAM] unsigned char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  2    0[COMRAM] unsigned short 
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3133 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;Total ram usage:        5 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_interruptHandler
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text23
  3147  0016FE                     __ptext23:
  3148                           	opt stack 0
  3149  0016FE                     _readADC:
  3150                           	opt stack 26
  3151                           
  3152                           ;incstack = 0
  3153                           ;readADC@channel stored from wreg
  3154  0016FE  6E05               	movwf	readADC@channel,c
  3155                           
  3156                           ;main.c: 152: ADCON0 = (channel & 0x0F) << 2;
  3157  001700  C005  F003         	movff	readADC@channel,??_readADC
  3158  001704  0E0F               	movlw	15
  3159  001706  1603               	andwf	??_readADC,f,c
  3160  001708  90D8               	bcf	status,0,c
  3161  00170A  3603               	rlcf	??_readADC,f,c
  3162  00170C  90D8               	bcf	status,0,c
  3163  00170E  3403               	rlcf	??_readADC,w,c
  3164  001710  6EC2               	movwf	4034,c	;volatile
  3165                           
  3166                           ;main.c: 153: ADON = 1;
  3167  001712  80C2               	bsf	4034,0,c	;volatile
  3168                           
  3169                           ;main.c: 154: ADCON0bits.GO = 1;
  3170  001714  82C2               	bsf	4034,1,c	;volatile
  3171  001716  B2C2               	btfsc	4034,1,c	;volatile
  3172  001718  D7FE               	goto	i2l170
  3173                           
  3174                           ;main.c: 156: return (ADRESH << 8) | ADRESL;
  3175  00171A  50C3               	movf	4035,w,c	;volatile
  3176  00171C  CFC4 F003          	movff	4036,??_readADC	;volatile
  3177  001720  6A04               	clrf	(??_readADC+1)& (0+255),c
  3178  001722  C003  F004         	movff	??_readADC,??_readADC+1
  3179  001726  6A03               	clrf	??_readADC,c
  3180  001728  1003               	iorwf	??_readADC,w,c
  3181  00172A  6E01               	movwf	?_readADC,c
  3182  00172C  5004               	movf	??_readADC+1,w,c
  3183  00172E  6E02               	movwf	?_readADC+1,c
  3184  001730  0012               	return	
  3185  001732                     __end_of_readADC:
  3186                           	opt stack 0
  3187                           pclatu	equ	0xFFB
  3188                           pclath	equ	0xFFA
  3189                           tblptru	equ	0xFF8
  3190                           tblptrh	equ	0xFF7
  3191                           tblptrl	equ	0xFF6
  3192                           tablat	equ	0xFF5
  3193                           prodh	equ	0xFF4
  3194                           prodl	equ	0xFF3
  3195                           intcon	equ	0xFF2
  3196                           postinc0	equ	0xFEE
  3197                           fsr0h	equ	0xFEA
  3198                           fsr0l	equ	0xFE9
  3199                           wreg	equ	0xFE8
  3200                           fsr1h	equ	0xFE2
  3201                           fsr1l	equ	0xFE1
  3202                           postinc2	equ	0xFDE
  3203                           postdec2	equ	0xFDD
  3204                           fsr2h	equ	0xFDA
  3205                           fsr2l	equ	0xFD9
  3206                           status	equ	0xFD8
  3207                           pclatu	equ	0xFFB
  3208                           pclath	equ	0xFFA
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           intcon	equ	0xFF2
  3216                           postinc0	equ	0xFEE
  3217                           fsr0h	equ	0xFEA
  3218                           fsr0l	equ	0xFE9
  3219                           wreg	equ	0xFE8
  3220                           fsr1h	equ	0xFE2
  3221                           fsr1l	equ	0xFE1
  3222                           postinc2	equ	0xFDE
  3223                           postdec2	equ	0xFDD
  3224                           fsr2h	equ	0xFDA
  3225                           fsr2l	equ	0xFD9
  3226                           status	equ	0xFD8
  3227                           
  3228                           	psect	rparam
  3229  0000                     pclatu	equ	0xFFB
  3230                           pclath	equ	0xFFA
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           prodh	equ	0xFF4
  3236                           prodl	equ	0xFF3
  3237                           intcon	equ	0xFF2
  3238                           postinc0	equ	0xFEE
  3239                           fsr0h	equ	0xFEA
  3240                           fsr0l	equ	0xFE9
  3241                           wreg	equ	0xFE8
  3242                           fsr1h	equ	0xFE2
  3243                           fsr1l	equ	0xFE1
  3244                           postinc2	equ	0xFDE
  3245                           postdec2	equ	0xFDD
  3246                           fsr2h	equ	0xFDA
  3247                           fsr2l	equ	0xFD9
  3248                           status	equ	0xFD8
  3249                           
  3250                           	psect	temp
  3251  00004F                     btemp:
  3252                           	opt stack 0
  3253  00004F                     	ds	1
  3254  0000                     int$flags	set	btemp
  3255  0000                     wtemp6	set	btemp+1
  3256                           pclatu	equ	0xFFB
  3257                           pclath	equ	0xFFA
  3258                           tblptru	equ	0xFF8
  3259                           tblptrh	equ	0xFF7
  3260                           tblptrl	equ	0xFF6
  3261                           tablat	equ	0xFF5
  3262                           prodh	equ	0xFF4
  3263                           prodl	equ	0xFF3
  3264                           intcon	equ	0xFF2
  3265                           postinc0	equ	0xFEE
  3266                           fsr0h	equ	0xFEA
  3267                           fsr0l	equ	0xFE9
  3268                           wreg	equ	0xFE8
  3269                           fsr1h	equ	0xFE2
  3270                           fsr1l	equ	0xFE1
  3271                           postinc2	equ	0xFDE
  3272                           postdec2	equ	0xFDD
  3273                           fsr2h	equ	0xFDA
  3274                           fsr2l	equ	0xFD9
  3275                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    16
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68      78
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[11]), STR_3(CODE[11]), STR_2(CODE[11]), 
		 -> STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2207
                                             67 COMRAM     1     1      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1429
                                             55 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             45 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             50 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             43 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             46 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             45 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             43 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     272
                                             46 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     326
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     250
                                             44 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             43 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      76
                                             43 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    19    19      0    1290
                                             24 COMRAM    19    19      0
                            _readADC
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            21    17      4     998
                                             12 COMRAM    12     8      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   _readADC
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4E      34        0.0%
DATA                 0      0      4E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 30 16:09:32 2018

                         u15 147C                           u16 147E                           u25 14BC  
                         u26 14BE                  __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l230 1028  
                        l231 1038                          l152 13CC                          l153 13F8  
                        l154 1410                          l243 10CC                          l244 111A  
                        l156 1416                          l245 10D2                          l237 1062  
                        l239 108A                          l652 155C                          l653 1554  
                        l662 1690                          l663 1688                          l656 157C  
                        l657 1586                          l666 16A8                          l667 16B2  
               __CFG_CPB$OFF 000000                          u520 1694                          u640 10BA  
                        u490 1560                          u660 1122                          u807 1404  
                        u817 1436                          u770 13F0                          u827 17BC  
                        u837 15E8                          u847 161C                          u857 17D0  
                        u867 1464                          u877 146E                          u887 14A4  
                        u897 14AE                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1514 108E                         _ADON 007E10  
                       STR_1 1011                         STR_2 1011                         STR_3 1011  
                       STR_4 1011                         STR_5 1011                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                         _RBIE 007F93                         _RBIF 007F90  
                       _main 1368     __end_of_interruptHandler 1368                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 004F             __end_of_I2C_init 175C                         prodh 000FF4  
                       prodl 000FF3                         start 000E                __CFG_IESO$OFF 000000  
            __end_ofi2_putch 17EC                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
                i2_lcdNibble 14C0             __end_of_LCD_LEFT 100C             ?_I2C_Master_Init 002C  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lwdiv 1590              __end_of___lwmod 16BC                        i2l230 1146  
                      i2l231 1156                        i2l170 1716                        i2l243 11EA  
                      i2l244 1238                        i2l245 11F0                        i2l237 1180  
                      i2l165 131A                        i2l239 11A8                        i2l652 15AE  
                      i2l653 15A6                        i2l662 16D2                        i2l663 16CA  
                      i2l656 15CE                        i2l657 15D8                        i2l666 16EA  
                      i2l667 16F4                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              __end_of_lcdInst 17D8  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_readADC 1732  
            __end_of_initLCD 162E               __CFG_EBTRB$OFF 000000              __end_of_dpowers 100B  
                      _putch 17B0                        pclath 000FFA                        tablat 000FF5  
          _LCDinterruptState 004E                        status 000FD8                        wtemp6 0050  
             __CFG_PBADEN$ON 000000        __size_of_I2C_sendData 0022             __end_ofi2_printf 125A  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042              __initialization 177E  
         __size_ofi2_lcdInst 0014                 __end_of_main 1442                   i2printf@ap 0012  
         __size_ofi2_initLCD 004C            __end_of_LCD_RIGHT 100D                       ??_main 0044  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 002D  
         ??_I2C_Master_Start 002D                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 002F                       _ADRESH 000FC4                       _ADRESL 000FC3  
            i2lcdNibble@data 0002                       ?_putch 0001                 _I2C_sendData 175C  
            i2lcdNibble@temp 0001                       i2l1592 11AC                       i2l1690 131C  
                     i2l1688 131A                    ??i2_putch 0003                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000  
                  ??___lwdiv 0030                    ??___lwmod 0037                       clear_0 1784  
                  ??_lcdInst 002E                       _printf 101E                    ??_readADC 0003  
                  ??_initLCD 002F            __end_ofi2___lwdiv 15E2                 __mediumconst 0000  
          __end_ofi2___lwmod 16FE                    ?_I2C_init 0001                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8            __end_ofi2_lcdInst 1800  
          __end_ofi2_initLCD 167A                   __accesstop 0080      __end_of__initialization 178A  
              ___rparam_used 000001           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
              __end_of_putch 17C4                  i2printf@val 0016           __size_of_lcdNibble 007E  
                i2putch@data 0003                   ??_I2C_init 0030                    ?i2_printf 000D  
                    ??_putch 002E            ?_interruptHandler 0001           ??_interruptHandler 0019  
               ?i2_lcdNibble 0001                      ?_printf 0038                   ??i2_printf 0011  
                    i2u46_45 14FA                      i2u46_46 14FC                      i2u55_40 15B2  
                    i2u47_45 153A                      i2u47_46 153C                      i2u73_40 11D8  
                    i2u58_40 16D6                      i2u90_47 12B8                      i2u75_40 1240  
                    i2u91_47 1310                      i2u92_47 17E4                      i2u93_47 1634  
                    i2u94_47 1668                      i2u95_47 17F8                      i2u96_47 14E2  
                    i2u97_47 14EC                      i2u98_47 1522                      i2u99_47 152C  
       lcd@LCDinterruptState 004D                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7                      _B_count 004B                      i2_putch 17D8  
                    _N_count 0049            __end_of_lcdNibble 14C0                      _S_count 0047  
                    __Hparam 0000                      __Lparam 0000                      _W_count 0045  
                    ___lwdiv 153E                      ___lwmod 167A                 __psmallconst 1000  
                    __pcinit 177E                      __ramtop 1000                      _lcdInst 17C4  
                    __ptext0 1368                      __ptext1 101E                      __ptext2 17B0  
                    __ptext3 167A                      __ptext4 153E                      __ptext5 15E2  
                    __ptext6 17C4                      __ptext7 1442                      __ptext8 175C  
                    __ptext9 1732              __size_of_printf 011E                      _readADC 16FE  
                    _initLCD 15E2                      _dpowers 1001                    _LCD_RIGHT 100C  
   __size_of_I2C_Master_Init 0018     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
             __pintcode_body 125A         end_of_initialization 178A        __end_of_LCD_SIZE_HORZ 100F  
      __end_of_LCD_SIZE_VERT 100E                __Lmediumconst 0000                      int_func 125A  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A                      printf@c 0043  
                    printf@f 0038                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _TRISCbits 000F94            __size_of_I2C_init 002A  
          i2___lwdiv@divisor 0003                    i2___lwdiv 1590                    i2___lwmod 16BC  
          i2___lwdiv@counter 0007                    i2_lcdInst 17EC                    i2_initLCD 162E  
       __size_ofi2_lcdNibble 007E                i2lcdInst@data 0003               __end_of_printf 113C  
               i2printf@flag 0014                 i2printf@prec 0015          start_initialization 177E  
                  i2printf@c 0018                    i2printf@f 000D                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 011E            ??_I2C_Master_Init 0030  
          ??_I2C_Master_Wait 002C                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 002D  
           __CFG_OSC$INTIO67 000000                   ?i2_initLCD 0001     I2C_Master_Init@clockFreq 002C  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 003C    __size_of_interruptHandler 1360  
                __pbssCOMRAM 0045            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
                   ?i2_putch 0001             _I2C_Master_Start 1824             _I2C_Master_Write 1812  
           ___lwdiv@dividend 002C            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
                  _lcdNibble 1442                     ?___lwdiv 002C                     ?___lwmod 0033  
                   ?_lcdInst 0001                     ?_readADC 0001                     ?_initLCD 0001  
                __smallconst 1000                     _I2C_init 1732             ___lwdiv@quotient 0030  
              ?_I2C_sendData 0001                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0014                     _LCD_LEFT 100B                  ??i2_lcdInst 0003  
                   _LATCbits 000F8B                     _LATDbits 000F8C                  ??i2_initLCD 0004  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001                   _ADCON0bits 000FC2  
                 _ADCON2bits 000FC0                lcdNibble@data 002D                   printf@flag 003F  
              lcdNibble@temp 002C                   printf@prec 0040                     i2_printf 113C  
             ??_I2C_sendData 002F               _LCD_HORZ_LIMIT 1010             __size_ofi2_putch 0014  
                   __Hrparam 0000        I2C_sendData@char_data 002F                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___lwdiv 0052             __size_of___lwmod 0042  
             readADC@channel 0005             _interruptHandler 0008             __size_of_lcdInst 0014  
            _I2C_Master_Init 1798             __size_of_readADC 0034             __size_of_initLCD 004C  
            _I2C_Master_Wait 1800              _I2C_Master_Stop 181C       __end_of_LCD_HORZ_LIMIT 1011  
            ___lwdiv@divisor 002E              ___lwdiv@counter 0032                     __ptext10 1812  
                   __ptext11 181C                     __ptext20 162E                     __ptext12 1824  
                   __ptext21 17EC                     __ptext13 1800                     __ptext22 14C0  
                   __ptext14 1798                     __ptext23 16FE                     __ptext16 113C  
                   __ptext17 17D8                     __ptext18 16BC                     __ptext19 1590  
             _LCD_VERT_LIMIT 100F                __size_of_main 00DA                ??i2_lcdNibble 0001  
                ??_lcdNibble 002C                     int$flags 004F                    printf@val 0041  
I2C_Master_Write@byteToWrite 002D                    putch@data 002E     __end_of_I2C_Master_Start 182C  
                _OSCTUNEbits 000F9B     __end_of_I2C_Master_Write 181C                   _INTCONbits 000FF2  
     __end_of_LCD_VERT_LIMIT 1010                     intlevel2 0000                _LCD_SIZE_HORZ 100E  
           ___lwmod@dividend 0033                _LCD_SIZE_VERT 100D                   _OSCCONbits 000FD3  
                   printf@ap 003D         __end_of_I2C_sendData 177E      __end_of_I2C_Master_Init 17B0  
    __end_of_I2C_Master_Wait 1812      __end_of_I2C_Master_Stop 1824                  lcdInst@data 002E  
        __end_ofi2_lcdNibble 153E              ___lwmod@divisor 0035              ___lwmod@counter 0037  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
