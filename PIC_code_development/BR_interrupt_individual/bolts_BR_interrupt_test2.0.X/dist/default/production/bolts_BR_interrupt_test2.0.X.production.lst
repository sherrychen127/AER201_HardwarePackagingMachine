

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr  2 15:29:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _dpowers:
    78                           	opt stack 0
    79  001001  0001               	dw	1
    80  001003  000A               	dw	10
    81  001005  0064               	dw	100
    82  001007  03E8               	dw	1000
    83  001009  2710               	dw	10000
    84  00100B                     __end_of_dpowers:
    85                           	opt stack 0
    86  00100B                     _LCD_LEFT:
    87                           	opt stack 0
    88  00100B  00                 	db	0
    89  00100C                     __end_of_LCD_LEFT:
    90                           	opt stack 0
    91  00100C                     _LCD_RIGHT:
    92                           	opt stack 0
    93  00100C  01                 	db	1
    94  00100D                     __end_of_LCD_RIGHT:
    95                           	opt stack 0
    96  00100D                     _LCD_SIZE_VERT:
    97                           	opt stack 0
    98  00100D  02                 	db	2
    99  00100E                     __end_of_LCD_SIZE_VERT:
   100                           	opt stack 0
   101  00100E                     _LCD_SIZE_HORZ:
   102                           	opt stack 0
   103  00100E  10                 	db	16
   104  00100F                     __end_of_LCD_SIZE_HORZ:
   105                           	opt stack 0
   106  00100F                     _LCD_VERT_LIMIT:
   107                           	opt stack 0
   108  00100F  02                 	db	2
   109  001010                     __end_of_LCD_VERT_LIMIT:
   110                           	opt stack 0
   111  001010                     _LCD_HORZ_LIMIT:
   112                           	opt stack 0
   113  001010  28                 	db	40
   114  001011                     __end_of_LCD_HORZ_LIMIT:
   115                           	opt stack 0
   116  0000                     _SSPBUF	set	4041
   117  0000                     _SSPCON2bits	set	4037
   118  0000                     _SSPADD	set	4040
   119  0000                     _SSPCON2	set	4037
   120  0000                     _SSPCON1	set	4038
   121  0000                     _SSPSTAT	set	4039
   122  0000                     _SSPCON1bits	set	4038
   123  0000                     _ADRESL	set	4035
   124  0000                     _ADRESH	set	4036
   125  0000                     _ADCON0bits	set	4034
   126  0000                     _PORTBbits	set	3969
   127  0000                     _TRISBbits	set	3987
   128  0000                     _TRISCbits	set	3988
   129  0000                     _LATCbits	set	3979
   130  0000                     _ADCON2bits	set	4032
   131  0000                     _ADCON1	set	4033
   132  0000                     _ADCON0	set	4034
   133  0000                     _TRISE	set	3990
   134  0000                     _TRISD	set	3989
   135  0000                     _TRISC	set	3988
   136  0000                     _TRISB	set	3987
   137  0000                     _TRISA	set	3986
   138  0000                     _LATE	set	3981
   139  0000                     _LATC	set	3979
   140  0000                     _LATB	set	3978
   141  0000                     _LATA	set	3977
   142  0000                     _OSCTUNEbits	set	3995
   143  0000                     _OSCCONbits	set	4051
   144  0000                     _INTCONbits	set	4082
   145  0000                     _LATD	set	3980
   146  0000                     _LATDbits	set	3980
   147  0000                     _ADON	set	32272
   148  0000                     _RBIF	set	32656
   149  0000                     _RBIE	set	32659
   150  001011                     STR_2:
   151  001011  42                 	db	66	;'B'
   152  001012  5F                 	db	95	;'_'
   153  001013  63                 	db	99	;'c'
   154  001014  6F                 	db	111	;'o'
   155  001015  75                 	db	117	;'u'
   156  001016  6E                 	db	110	;'n'
   157  001017  74                 	db	116	;'t'
   158  001018  3A                 	db	58	;':'
   159  001019  25                 	db	37
   160  00101A  64                 	db	100	;'d'
   161  00101B  00                 	db	0
   162  0000                     
   163                           ; #config settings
   164  00101C  00                 	db	0	; dummy byte at the end
   165  0000                     
   166                           	psect	cinit
   167  0016F6                     __pcinit:
   168                           	opt stack 0
   169  0016F6                     start_initialization:
   170                           	opt stack 0
   171  0016F6                     __initialization:
   172                           	opt stack 0
   173                           
   174                           ; Clear objects allocated to COMRAM (10 bytes)
   175  0016F6  EE00  F047         	lfsr	0,__pbssCOMRAM
   176  0016FA  0E0A               	movlw	10
   177  0016FC                     clear_0:
   178  0016FC  6AEE               	clrf	postinc0,c
   179  0016FE  06E8               	decf	wreg,f,c
   180  001700  E1FD               	bnz	clear_0
   181  001702                     end_of_initialization:
   182                           	opt stack 0
   183  001702                     __end_of__initialization:
   184                           	opt stack 0
   185  001702  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   186  001704  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   187  001706  0E00               	movlw	low (__Lmediumconst shr (0+16))
   188  001708  6EF8               	movwf	tblptru,c
   189  00170A  0100               	movlb	0
   190  00170C  EFA1  F009         	goto	_main	;jump to C main() function
   191                           tblptru	equ	0xFF8
   192                           postinc0	equ	0xFEE
   193                           wreg	equ	0xFE8
   194                           
   195                           	psect	bssCOMRAM
   196  000047                     __pbssCOMRAM:
   197                           	opt stack 0
   198  000047                     _W_count:
   199                           	opt stack 0
   200  000047                     	ds	2
   201  000049                     _S_count:
   202                           	opt stack 0
   203  000049                     	ds	2
   204  00004B                     _N_count:
   205                           	opt stack 0
   206  00004B                     	ds	2
   207  00004D                     _B_count:
   208                           	opt stack 0
   209  00004D                     	ds	2
   210  00004F                     	ds	1
   211  000050                     _LCDinterruptState:
   212                           	opt stack 0
   213  000050                     	ds	1
   214                           tblptru	equ	0xFF8
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           
   218                           	psect	cstackBANK0
   219  000080                     __pcstackBANK0:
   220                           	opt stack 0
   221  000080                     main@input:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x0
   225  000080                     	ds	2
   226                           tblptru	equ	0xFF8
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	cstackCOMRAM
   231  000001                     __pcstackCOMRAM:
   232                           	opt stack 0
   233  000001                     ?i2___lwdiv:
   234                           	opt stack 0
   235  000001                     i2lcdNibble@temp:
   236                           	opt stack 0
   237  000001                     i2___lwdiv@dividend:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x0
   241  000001                     	ds	1
   242  000002                     i2lcdNibble@data:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0x1
   246  000002                     	ds	1
   247  000003                     i2lcdInst@data:
   248                           	opt stack 0
   249  000003                     i2putch@data:
   250                           	opt stack 0
   251  000003                     i2___lwdiv@divisor:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x2
   255  000003                     	ds	1
   256  000004                     ??i2_initLCD:
   257                           
   258                           ; 1 bytes @ 0x3
   259  000004                     	ds	1
   260  000005                     i2___lwdiv@quotient:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x4
   264  000005                     	ds	2
   265  000007                     i2___lwdiv@counter:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x6
   269  000007                     	ds	1
   270  000008                     ?i2___lwmod:
   271                           	opt stack 0
   272  000008                     i2___lwmod@dividend:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x7
   276  000008                     	ds	2
   277  00000A                     i2___lwmod@divisor:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x9
   281  00000A                     	ds	2
   282  00000C                     i2___lwmod@counter:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0xB
   286  00000C                     	ds	1
   287  00000D                     ?i2_printf:
   288                           	opt stack 0
   289  00000D                     i2printf@f:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0xC
   293  00000D                     	ds	4
   294  000011                     ??i2_printf:
   295                           
   296                           ; 1 bytes @ 0x10
   297  000011                     	ds	1
   298  000012                     i2printf@ap:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x11
   302  000012                     	ds	2
   303  000014                     i2printf@flag:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x13
   307  000014                     	ds	1
   308  000015                     i2printf@prec:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x14
   312  000015                     	ds	1
   313  000016                     i2printf@val:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x15
   317  000016                     	ds	2
   318  000018                     i2printf@c:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x17
   322  000018                     	ds	1
   323  000019                     ??_interruptHandler:
   324                           
   325                           ; 1 bytes @ 0x18
   326  000019                     	ds	19
   327  00002C                     interruptHandler@input:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x2B
   331  00002C                     	ds	2
   332  00002E                     ??_I2C_Master_Wait:
   333  00002E                     ?___lwdiv:
   334                           	opt stack 0
   335  00002E                     lcdNibble@temp:
   336                           	opt stack 0
   337  00002E                     ___lwdiv@dividend:
   338                           	opt stack 0
   339  00002E                     I2C_Master_Init@clockFreq:
   340                           	opt stack 0
   341                           
   342                           ; 4 bytes @ 0x2D
   343  00002E                     	ds	1
   344  00002F                     lcdNibble@data:
   345                           	opt stack 0
   346  00002F                     I2C_Master_Write@byteToWrite:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x2E
   350  00002F                     	ds	1
   351  000030                     lcdInst@data:
   352                           	opt stack 0
   353  000030                     putch@data:
   354                           	opt stack 0
   355  000030                     ___lwdiv@divisor:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x2F
   359  000030                     	ds	1
   360  000031                     ??_initLCD:
   361  000031                     I2C_sendData@char_data:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x30
   365  000031                     	ds	1
   366  000032                     ___lwdiv@counter:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x31
   370  000032                     	ds	1
   371  000033                     ___lwdiv@quotient:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x32
   375  000033                     	ds	2
   376  000035                     ?___lwmod:
   377                           	opt stack 0
   378  000035                     ___lwmod@dividend:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x34
   382  000035                     	ds	2
   383  000037                     ___lwmod@divisor:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x36
   387  000037                     	ds	2
   388  000039                     ___lwmod@counter:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x38
   392  000039                     	ds	1
   393  00003A                     ?_printf:
   394                           	opt stack 0
   395  00003A                     printf@f:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x39
   399  00003A                     	ds	4
   400  00003E                     ??_printf:
   401                           
   402                           ; 1 bytes @ 0x3D
   403  00003E                     	ds	1
   404  00003F                     printf@ap:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x3E
   408  00003F                     	ds	2
   409  000041                     printf@flag:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x40
   413  000041                     	ds	1
   414  000042                     printf@prec:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x41
   418  000042                     	ds	1
   419  000043                     printf@val:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x42
   423  000043                     	ds	2
   424  000045                     printf@c:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x44
   428  000045                     	ds	1
   429  000046                     ??_main:
   430                           
   431                           ; 1 bytes @ 0x45
   432  000046                     	ds	1
   433                           tblptru	equ	0xFF8
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 28 in file "main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;  input           2    0[BANK0 ] int 
   447 ;; Return value:  Size  Location     Type
   448 ;;                  1    wreg      void 
   449 ;; Registers used:
   450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;Total ram usage:        3 bytes
   461 ;; Hardware stack levels required when called:    7
   462 ;; This function calls:
   463 ;;		_I2C_init
   464 ;;		_I2C_sendData
   465 ;;		_initLCD
   466 ;;		_lcdInst
   467 ;;		_printf
   468 ;; This function is called by:
   469 ;;		Startup code after reset
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text0
   474  001342                     __ptext0:
   475                           	opt stack 0
   476  001342                     _main:
   477                           	opt stack 24
   478                           
   479                           ;main.c: 35: OSCCONbits.IRCF2 = 1;
   480                           
   481                           ;incstack = 0
   482  001342  8CD3               	bsf	4051,6,c	;volatile
   483                           
   484                           ;main.c: 36: OSCCONbits.IRCF1 = 1;
   485  001344  8AD3               	bsf	4051,5,c	;volatile
   486                           
   487                           ;main.c: 37: OSCCONbits.IRCF0 = 1;
   488  001346  88D3               	bsf	4051,4,c	;volatile
   489                           
   490                           ;main.c: 38: OSCCONbits.SCS1 = 1;
   491  001348  82D3               	bsf	4051,1,c	;volatile
   492                           
   493                           ;main.c: 39: OSCTUNEbits.PLLEN = 1;
   494  00134A  8C9B               	bsf	3995,6,c	;volatile
   495                           
   496                           ;main.c: 43: LATA = 0x00;
   497  00134C  0E00               	movlw	0
   498  00134E  6E89               	movwf	3977,c	;volatile
   499                           
   500                           ;main.c: 44: LATB = 0x00;
   501  001350  0E00               	movlw	0
   502  001352  6E8A               	movwf	3978,c	;volatile
   503                           
   504                           ;main.c: 45: LATC = 0x00;
   505  001354  0E00               	movlw	0
   506  001356  6E8B               	movwf	3979,c	;volatile
   507                           
   508                           ;main.c: 46: LATD = 0x00;
   509  001358  0E00               	movlw	0
   510  00135A  6E8C               	movwf	3980,c	;volatile
   511                           
   512                           ;main.c: 47: LATE = 0x00;
   513  00135C  0E00               	movlw	0
   514  00135E  6E8D               	movwf	3981,c	;volatile
   515                           
   516                           ;main.c: 51: TRISA = 0xFF;
   517  001360  6892               	setf	3986,c	;volatile
   518                           
   519                           ;main.c: 52: TRISB = 0xFF;
   520  001362  6893               	setf	3987,c	;volatile
   521                           
   522                           ;main.c: 53: TRISC = 0x00;
   523  001364  0E00               	movlw	0
   524  001366  6E94               	movwf	3988,c	;volatile
   525                           
   526                           ;main.c: 54: TRISD = 0x00;
   527  001368  0E00               	movlw	0
   528  00136A  6E95               	movwf	3989,c	;volatile
   529                           
   530                           ;main.c: 55: TRISE = 0x00;
   531  00136C  0E00               	movlw	0
   532  00136E  6E96               	movwf	3990,c	;volatile
   533                           
   534                           ;main.c: 58: ADCON0 = 0x00;
   535  001370  0E00               	movlw	0
   536  001372  6EC2               	movwf	4034,c	;volatile
   537                           
   538                           ;main.c: 59: ADCON1 = 0b00001111;
   539  001374  0E0F               	movlw	15
   540  001376  6EC1               	movwf	4033,c	;volatile
   541                           
   542                           ;main.c: 60: ADCON2bits.ADFM = 1;
   543  001378  8EC0               	bsf	4032,7,c	;volatile
   544                           
   545                           ;main.c: 65: (INTCONbits.GIE = 1);
   546  00137A  8EF2               	bsf	intcon,7,c	;volatile
   547                           
   548                           ;main.c: 66: initLCD();
   549  00137C  ECC7  F00A         	call	_initLCD	;wreg free
   550                           
   551                           ;main.c: 67: I2C_init();
   552  001380  EC55  F00B         	call	_I2C_init	;wreg free
   553                           
   554                           ;main.c: 72: LATCbits.LATC0 = 1;
   555  001384  808B               	bsf	3979,0,c	;volatile
   556                           
   557                           ;main.c: 73: TRISCbits.RC0 = 0;
   558  001386  9094               	bcf	3988,0,c	;volatile
   559                           
   560                           ;main.c: 76: RBIE = 1;
   561  001388  86F2               	bsf	intcon,3,c	;volatile
   562                           
   563                           ;main.c: 83: initLCD();
   564  00138A  ECC7  F00A         	call	_initLCD	;wreg free
   565                           
   566                           ;main.c: 85: I2C_sendData('5');
   567  00138E  0E35               	movlw	53
   568  001390  EC6A  F00B         	call	_I2C_sendData
   569  001394                     
   570                           ;main.c: 88: TRISBbits.RB5 = 1;
   571  001394  8A93               	bsf	3987,5,c	;volatile
   572                           
   573                           ;main.c: 89: int input = PORTBbits.RB5;
   574  001396  AA81               	btfss	3969,5,c	;volatile
   575  001398  D003               	goto	u1050
   576  00139A  6A46               	clrf	??_main& (0+255),c
   577  00139C  2A46               	incf	??_main& (0+255),f,c
   578  00139E  D001               	goto	u1058
   579  0013A0                     u1050:
   580  0013A0  6A46               	clrf	??_main& (0+255),c
   581  0013A2                     u1058:
   582  0013A2  5046               	movf	??_main,w,c
   583  0013A4  0100               	movlb	0	; () banked
   584  0013A6  6F80               	movwf	main@input& (0+255),b
   585  0013A8  6B81               	clrf	(main@input+1)& (0+255),b
   586                           
   587                           ; BSR set to: 0
   588                           ;main.c: 90: initLCD();
   589  0013AA  ECC7  F00A         	call	_initLCD	;wreg free
   590                           
   591                           ;main.c: 92: printf("%d",B_count);
   592  0013AE  0E19               	movlw	low (STR_2+8)
   593  0013B0  6E3A               	movwf	printf@f,c
   594  0013B2  0E10               	movlw	high (STR_2+8)
   595  0013B4  6E3B               	movwf	printf@f+1,c
   596  0013B6  C04D  F03C         	movff	_B_count,?_printf+2
   597  0013BA  C04E  F03D         	movff	_B_count+1,?_printf+3
   598  0013BE  EC0F  F008         	call	_printf	;wreg free
   599  0013C2  D7E8               	goto	l154
   600  0013C4                     
   601                           ;main.c: 107: printf("B_count:%d",B_count);
   602  0013C4  0E11               	movlw	low STR_2
   603  0013C6  6E3A               	movwf	printf@f,c
   604  0013C8  0E10               	movlw	high STR_2
   605  0013CA  6E3B               	movwf	printf@f+1,c
   606  0013CC  C04D  F03C         	movff	_B_count,?_printf+2
   607  0013D0  C04E  F03D         	movff	_B_count+1,?_printf+3
   608  0013D4  EC0F  F008         	call	_printf	;wreg free
   609                           
   610                           ;main.c: 108: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   611  0013D8  0E80               	movlw	128
   612  0013DA  EC9E  F00B         	call	_lcdInst
   613  0013DE  0E34               	movlw	52
   614  0013E0  6E46               	movwf	??_main& (0+255),c
   615  0013E2  0EF2               	movlw	242
   616  0013E4                     u1077:
   617  0013E4  2EE8               	decfsz	wreg,f,c
   618  0013E6  D7FE               	bra	u1077
   619  0013E8  2E46               	decfsz	??_main& (0+255),f,c
   620  0013EA  D7FC               	bra	u1077
   621  0013EC  D7EB               	goto	l157
   622  0013EE                     __end_of_main:
   623                           	opt stack 0
   624                           tblptru	equ	0xFF8
   625                           intcon	equ	0xFF2
   626                           postinc0	equ	0xFEE
   627                           wreg	equ	0xFE8
   628                           
   629 ;; *************** function _printf *****************
   630 ;; Defined at:
   631 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;  f               2   57[COMRAM] PTR const unsigned char 
   634 ;;		 -> STR_3(3), STR_2(11), STR_1(3), 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  tmpval          4    0        struct .
   637 ;;  cp              3    0        PTR const unsigned char 
   638 ;;  val             2   66[COMRAM] unsigned int 
   639 ;;  ap              2   62[COMRAM] PTR void [1]
   640 ;;		 -> ?i2_printf(2), ?_printf(2), 
   641 ;;  len             2    0        unsigned int 
   642 ;;  c               1   68[COMRAM] char 
   643 ;;  prec            1   65[COMRAM] char 
   644 ;;  flag            1   64[COMRAM] unsigned char 
   645 ;; Return value:  Size  Location     Type
   646 ;;                  2   57[COMRAM] int 
   647 ;; Registers used:
   648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   657 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   658 ;;Total ram usage:       12 bytes
   659 ;; Hardware stack levels used:    1
   660 ;; Hardware stack levels required when called:    6
   661 ;; This function calls:
   662 ;;		___lwdiv
   663 ;;		___lwmod
   664 ;;		_putch
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text1
   671  00101E                     __ptext1:
   672                           	opt stack 0
   673  00101E                     _printf:
   674                           	opt stack 24
   675                           
   676                           ;doprnt.c: 466: va_list ap;
   677                           ;doprnt.c: 499: signed char c;
   678                           ;doprnt.c: 506: signed char prec;
   679                           ;doprnt.c: 508: unsigned char flag;
   680                           ;doprnt.c: 523: union {
   681                           ;doprnt.c: 524: unsigned long vd;
   682                           ;doprnt.c: 525: double integ;
   683                           ;doprnt.c: 526: } tmpval;
   684                           ;doprnt.c: 528: unsigned int val;
   685                           ;doprnt.c: 529: unsigned len;
   686                           ;doprnt.c: 530: const char * cp;
   687                           ;doprnt.c: 533: *ap = __va_start();
   688                           
   689                           ;incstack = 0
   690  00101E  0E3C               	movlw	low (?_printf+2)
   691  001020  6E3F               	movwf	printf@ap,c
   692  001022  0E00               	movlw	high (?_printf+2)
   693  001024  6E40               	movwf	printf@ap+1,c
   694                           
   695                           ;doprnt.c: 536: while(c = *f++) {
   696  001026  D07D               	goto	u970
   697  001028                     
   698                           ;doprnt.c: 538: if(c != '%')
   699  001028  0E25               	movlw	37
   700  00102A  1845               	xorwf	printf@c,w,c
   701  00102C  B4D8               	btfsc	status,2,c
   702  00102E  D004               	goto	l232
   703                           
   704                           ;doprnt.c: 540: {
   705                           ;doprnt.c: 541: (putch(c) );
   706  001030  5045               	movf	printf@c,w,c
   707  001032  EC94  F00B         	call	_putch
   708                           
   709                           ;doprnt.c: 542: continue;
   710  001036  D075               	goto	u970
   711  001038                     l232:
   712                           
   713                           ;doprnt.c: 543: }
   714                           ;doprnt.c: 548: flag = 0;
   715  001038  0E00               	movlw	0
   716  00103A  6E41               	movwf	printf@flag,c
   717                           
   718                           ;doprnt.c: 822: }
   719                           
   720                           ;doprnt.c: 813: continue;
   721                           
   722                           ;doprnt.c: 802: default:
   723                           
   724                           ;doprnt.c: 698: case 'i':
   725                           ;doprnt.c: 699: break;
   726                           
   727                           ;doprnt.c: 697: case 'd':
   728                           
   729                           ;doprnt.c: 638: goto alldone;
   730                           
   731                           ;doprnt.c: 637: case 0:
   732                           
   733                           ;doprnt.c: 635: switch(c = *f++) {
   734  00103C  C03A  FFF6         	movff	printf@f,tblptrl
   735  001040  C03B  FFF7         	movff	printf@f+1,tblptrh
   736  001044  4A3A               	infsnz	printf@f,f,c
   737  001046  2A3B               	incf	printf@f+1,f,c
   738  001048                     	if	0	;tblptru may be non-zero
   739  001048                     	endif
   740  001048                     	if	0	;tblptru may be non-zero
   741  001048                     	endif
   742  001048  0008               	tblrd		*
   743  00104A  CFF5 F045          	movff	tablat,printf@c
   744  00104E  5045               	movf	printf@c,w,c
   745                           
   746                           ; Switch size 1, requested type "space"
   747                           ; Number of cases is 3, Range of values is 0 to 105
   748                           ; switch strategies available:
   749                           ; Name         Instructions Cycles
   750                           ; simple_byte           10     6 (average)
   751                           ;	Chosen strategy is simple_byte
   752  001050  0A00               	xorlw	0	; case 0
   753  001052  B4D8               	btfsc	status,2,c
   754  001054  0012               	return	
   755  001056  0A64               	xorlw	100	; case 100
   756  001058  B4D8               	btfsc	status,2,c
   757  00105A  D003               	goto	l238
   758  00105C  0A0D               	xorlw	13	; case 105
   759  00105E  A4D8               	btfss	status,2,c
   760  001060  D060               	goto	u970
   761  001062                     l238:
   762                           
   763                           ;doprnt.c: 1253: {
   764                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   765  001062  C03F  FFD9         	movff	printf@ap,fsr2l
   766  001066  C040  FFDA         	movff	printf@ap+1,fsr2h
   767  00106A  CFDE F043          	movff	postinc2,printf@val
   768  00106E  CFDD F044          	movff	postdec2,printf@val+1
   769  001072  0E02               	movlw	2
   770  001074  263F               	addwf	printf@ap,f,c
   771  001076  0E00               	movlw	0
   772  001078  2240               	addwfc	printf@ap+1,f,c
   773                           
   774                           ;doprnt.c: 1261: if((int)val < 0) {
   775  00107A  AE44               	btfss	printf@val+1,7,c
   776  00107C  D006               	goto	l240
   777                           
   778                           ;doprnt.c: 1262: flag |= 0x03;
   779  00107E  0E03               	movlw	3
   780  001080  1241               	iorwf	printf@flag,f,c
   781                           
   782                           ;doprnt.c: 1263: val = -val;
   783  001082  6C43               	negf	printf@val,c
   784  001084  1E44               	comf	printf@val+1,f,c
   785  001086  B0D8               	btfsc	status,0,c
   786  001088  2A44               	incf	printf@val+1,f,c
   787  00108A                     l240:
   788                           
   789                           ;doprnt.c: 1264: }
   790                           ;doprnt.c: 1266: }
   791                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   792  00108A  0E01               	movlw	1
   793  00108C  6E45               	movwf	printf@c,c
   794  00108E                     l1825:
   795  00108E  0E05               	movlw	5
   796  001090  1845               	xorwf	printf@c,w,c
   797  001092  B4D8               	btfsc	status,2,c
   798  001094  D012               	goto	u950
   799                           
   800                           ;doprnt.c: 1306: if(val < dpowers[c])
   801  001096  5045               	movf	printf@c,w,c
   802  001098  0D02               	mullw	2
   803  00109A  0E01               	movlw	low _dpowers
   804  00109C  24F3               	addwf	prodl,w,c
   805  00109E  6EF6               	movwf	tblptrl,c
   806  0010A0  0E10               	movlw	high _dpowers
   807  0010A2  20F4               	addwfc	prodh,w,c
   808  0010A4  6EF7               	movwf	tblptrh,c
   809  0010A6                     	if	0	;There are less than 3 active tblptr bytes
   810  0010A6                     	endif
   811  0010A6  0009               	tblrd		*+
   812  0010A8  50F5               	movf	tablat,w,c
   813  0010AA  5C43               	subwf	printf@val,w,c
   814  0010AC  0009               	tblrd		*+
   815  0010AE  50F5               	movf	tablat,w,c
   816  0010B0  5844               	subwfb	printf@val+1,w,c
   817  0010B2  A0D8               	btfss	status,0,c
   818  0010B4  D002               	goto	u950
   819                           
   820                           ;doprnt.c: 1307: break;
   821  0010B6  2A45               	incf	printf@c,f,c
   822  0010B8  D7EA               	goto	l1825
   823  0010BA                     u950:
   824                           
   825                           ;doprnt.c: 1422: {
   826                           ;doprnt.c: 1438: if(flag & 0x03)
   827  0010BA  C041  F03E         	movff	printf@flag,??_printf
   828  0010BE  0E03               	movlw	3
   829  0010C0  163E               	andwf	??_printf,f,c
   830  0010C2  B4D8               	btfsc	status,2,c
   831  0010C4  D003               	goto	l244
   832                           
   833                           ;doprnt.c: 1439: (putch('-') );
   834  0010C6  0E2D               	movlw	45
   835  0010C8  EC94  F00B         	call	_putch
   836  0010CC                     l244:
   837                           
   838                           ;doprnt.c: 1469: }
   839                           ;doprnt.c: 1472: prec = c;
   840  0010CC  C045  F042         	movff	printf@c,printf@prec
   841                           
   842                           ;doprnt.c: 1474: while(prec--) {
   843  0010D0  D024               	goto	l245
   844  0010D2                     
   845                           ;doprnt.c: 1478: {
   846                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   847  0010D2  5042               	movf	printf@prec,w,c
   848  0010D4  0D02               	mullw	2
   849  0010D6  0E01               	movlw	low _dpowers
   850  0010D8  24F3               	addwf	prodl,w,c
   851  0010DA  6EF6               	movwf	tblptrl,c
   852  0010DC  0E10               	movlw	high _dpowers
   853  0010DE  20F4               	addwfc	prodh,w,c
   854  0010E0  6EF7               	movwf	tblptrh,c
   855  0010E2                     	if	0	;There are less than 3 active tblptr bytes
   856  0010E2                     	endif
   857  0010E2  0009               	tblrd		*+
   858  0010E4  CFF5 F030          	movff	tablat,___lwdiv@divisor
   859  0010E8  000A               	tblrd		*-
   860  0010EA  CFF5 F031          	movff	tablat,___lwdiv@divisor+1
   861  0010EE  C043  F02E         	movff	printf@val,___lwdiv@dividend
   862  0010F2  C044  F02F         	movff	printf@val+1,___lwdiv@dividend+1
   863  0010F6  EC75  F00A         	call	___lwdiv	;wreg free
   864  0010FA  C02E  F035         	movff	?___lwdiv,___lwmod@dividend
   865  0010FE  C02F  F036         	movff	?___lwdiv+1,___lwmod@dividend+1
   866  001102  0E00               	movlw	0
   867  001104  6E38               	movwf	___lwmod@divisor+1,c
   868  001106  0E0A               	movlw	10
   869  001108  6E37               	movwf	___lwmod@divisor,c
   870  00110A  EC13  F00B         	call	___lwmod	;wreg free
   871  00110E  5035               	movf	?___lwmod,w,c
   872  001110  0F30               	addlw	48
   873  001112  6E45               	movwf	printf@c,c
   874                           
   875                           ;doprnt.c: 1523: }
   876                           ;doprnt.c: 1524: (putch(c) );
   877  001114  5045               	movf	printf@c,w,c
   878  001116  EC94  F00B         	call	_putch
   879  00111A                     l245:
   880  00111A  0642               	decf	printf@prec,f,c
   881  00111C  2842               	incf	printf@prec,w,c
   882  00111E  A4D8               	btfss	status,2,c
   883  001120  D7D8               	goto	l246
   884  001122                     u970:
   885  001122  C03A  FFF6         	movff	printf@f,tblptrl
   886  001126  C03B  FFF7         	movff	printf@f+1,tblptrh
   887  00112A  4A3A               	infsnz	printf@f,f,c
   888  00112C  2A3B               	incf	printf@f+1,f,c
   889  00112E                     	if	0	;tblptru may be non-zero
   890  00112E                     	endif
   891  00112E                     	if	0	;tblptru may be non-zero
   892  00112E                     	endif
   893  00112E  0008               	tblrd		*
   894  001130  CFF5 F045          	movff	tablat,printf@c
   895  001134  5045               	movf	printf@c,w,c
   896  001136  B4D8               	btfsc	status,2,c
   897  001138  0012               	return	
   898  00113A  D776               	goto	l231
   899  00113C                     __end_of_printf:
   900                           	opt stack 0
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           prodh	equ	0xFF4
   906                           prodl	equ	0xFF3
   907                           intcon	equ	0xFF2
   908                           postinc0	equ	0xFEE
   909                           wreg	equ	0xFE8
   910                           postinc2	equ	0xFDE
   911                           postdec2	equ	0xFDD
   912                           fsr2h	equ	0xFDA
   913                           fsr2l	equ	0xFD9
   914                           status	equ	0xFD8
   915                           
   916 ;; *************** function _putch *****************
   917 ;; Defined at:
   918 ;;		line 24 in file "lcd.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  data            1    wreg     unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  data            1   47[COMRAM] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2, status,0, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   936 ;;Total ram usage:        1 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    5
   939 ;; This function calls:
   940 ;;		_lcdNibble
   941 ;; This function is called by:
   942 ;;		_printf
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text2
   947  001728                     __ptext2:
   948                           	opt stack 0
   949  001728                     _putch:
   950                           	opt stack 24
   951                           
   952                           ;incstack = 0
   953                           ;putch@data stored from wreg
   954  001728  6E30               	movwf	putch@data,c
   955                           
   956                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   957  00172A  848C               	bsf	3980,2,c	;volatile
   958                           
   959                           ;lcd.c: 33: lcdNibble(data);
   960  00172C  5030               	movf	putch@data,w,c
   961  00172E  ECF7  F009         	call	_lcdNibble
   962                           
   963                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
   964  001732  0EA0               	movlw	160
   965  001734                     u1087:
   966  001734  D000               	nop2	
   967  001736  2EE8               	decfsz	wreg,f,c
   968  001738  D7FD               	bra	u1087
   969  00173A  0012               	return		;funcret
   970  00173C                     __end_of_putch:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           prodh	equ	0xFF4
   977                           prodl	equ	0xFF3
   978                           intcon	equ	0xFF2
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           postinc2	equ	0xFDE
   982                           postdec2	equ	0xFDD
   983                           fsr2h	equ	0xFDA
   984                           fsr2l	equ	0xFD9
   985                           status	equ	0xFD8
   986                           
   987 ;; *************** function ___lwmod *****************
   988 ;; Defined at:
   989 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;  dividend        2   52[COMRAM] unsigned int 
   992 ;;  divisor         2   54[COMRAM] unsigned int 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  counter         1   56[COMRAM] unsigned char 
   995 ;; Return value:  Size  Location     Type
   996 ;;                  2   52[COMRAM] unsigned int 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1004 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1007 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1008 ;;Total ram usage:        5 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    4
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_printf
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text3
  1019  001626                     __ptext3:
  1020                           	opt stack 0
  1021  001626                     ___lwmod:
  1022                           	opt stack 25
  1023                           
  1024                           ;incstack = 0
  1025  001626  5037               	movf	___lwmod@divisor,w,c
  1026  001628  1038               	iorwf	___lwmod@divisor+1,w,c
  1027  00162A  B4D8               	btfsc	status,2,c
  1028  00162C  D018               	goto	l668
  1029  00162E  0E01               	movlw	1
  1030  001630  6E39               	movwf	___lwmod@counter,c
  1031  001632  D004               	goto	l663
  1032  001634  90D8               	bcf	status,0,c
  1033  001636  3637               	rlcf	___lwmod@divisor,f,c
  1034  001638  3638               	rlcf	___lwmod@divisor+1,f,c
  1035  00163A  2A39               	incf	___lwmod@counter,f,c
  1036  00163C                     l663:
  1037  00163C  AE38               	btfss	___lwmod@divisor+1,7,c
  1038  00163E  D7FA               	goto	l664
  1039  001640                     u890:
  1040  001640  5037               	movf	___lwmod@divisor,w,c
  1041  001642  5C35               	subwf	___lwmod@dividend,w,c
  1042  001644  5038               	movf	___lwmod@divisor+1,w,c
  1043  001646  5836               	subwfb	___lwmod@dividend+1,w,c
  1044  001648  A0D8               	btfss	status,0,c
  1045  00164A  D004               	goto	l667
  1046  00164C  5037               	movf	___lwmod@divisor,w,c
  1047  00164E  5E35               	subwf	___lwmod@dividend,f,c
  1048  001650  5038               	movf	___lwmod@divisor+1,w,c
  1049  001652  5A36               	subwfb	___lwmod@dividend+1,f,c
  1050  001654                     l667:
  1051  001654  90D8               	bcf	status,0,c
  1052  001656  3238               	rrcf	___lwmod@divisor+1,f,c
  1053  001658  3237               	rrcf	___lwmod@divisor,f,c
  1054  00165A  2E39               	decfsz	___lwmod@counter,f,c
  1055  00165C  D7F1               	goto	u890
  1056  00165E                     l668:
  1057  00165E  C035  F035         	movff	___lwmod@dividend,?___lwmod
  1058  001662  C036  F036         	movff	___lwmod@dividend+1,?___lwmod+1
  1059  001666  0012               	return		;funcret
  1060  001668                     __end_of___lwmod:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           prodh	equ	0xFF4
  1067                           prodl	equ	0xFF3
  1068                           intcon	equ	0xFF2
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           postinc2	equ	0xFDE
  1072                           postdec2	equ	0xFDD
  1073                           fsr2h	equ	0xFDA
  1074                           fsr2l	equ	0xFD9
  1075                           status	equ	0xFD8
  1076                           
  1077 ;; *************** function ___lwdiv *****************
  1078 ;; Defined at:
  1079 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  dividend        2   45[COMRAM] unsigned int 
  1082 ;;  divisor         2   47[COMRAM] unsigned int 
  1083 ;; Auto vars:     Size  Location     Type
  1084 ;;  quotient        2   50[COMRAM] unsigned int 
  1085 ;;  counter         1   49[COMRAM] unsigned char 
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  2   45[COMRAM] unsigned int 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1095 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;Total ram usage:        7 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    4
  1102 ;; This function calls:
  1103 ;;		Nothing
  1104 ;; This function is called by:
  1105 ;;		_printf
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text4
  1110  0014EA                     __ptext4:
  1111                           	opt stack 0
  1112  0014EA                     ___lwdiv:
  1113                           	opt stack 25
  1114                           
  1115                           ;incstack = 0
  1116  0014EA  0E00               	movlw	0
  1117  0014EC  6E34               	movwf	___lwdiv@quotient+1,c
  1118  0014EE  0E00               	movlw	0
  1119  0014F0  6E33               	movwf	___lwdiv@quotient,c
  1120  0014F2  5030               	movf	___lwdiv@divisor,w,c
  1121  0014F4  1031               	iorwf	___lwdiv@divisor+1,w,c
  1122  0014F6  B4D8               	btfsc	status,2,c
  1123  0014F8  D01C               	goto	l658
  1124  0014FA  0E01               	movlw	1
  1125  0014FC  6E32               	movwf	___lwdiv@counter,c
  1126  0014FE  D004               	goto	l653
  1127  001500  90D8               	bcf	status,0,c
  1128  001502  3630               	rlcf	___lwdiv@divisor,f,c
  1129  001504  3631               	rlcf	___lwdiv@divisor+1,f,c
  1130  001506  2A32               	incf	___lwdiv@counter,f,c
  1131  001508                     l653:
  1132  001508  AE31               	btfss	___lwdiv@divisor+1,7,c
  1133  00150A  D7FA               	goto	l654
  1134  00150C                     u860:
  1135  00150C  90D8               	bcf	status,0,c
  1136  00150E  3633               	rlcf	___lwdiv@quotient,f,c
  1137  001510  3634               	rlcf	___lwdiv@quotient+1,f,c
  1138  001512  5030               	movf	___lwdiv@divisor,w,c
  1139  001514  5C2E               	subwf	___lwdiv@dividend,w,c
  1140  001516  5031               	movf	___lwdiv@divisor+1,w,c
  1141  001518  582F               	subwfb	___lwdiv@dividend+1,w,c
  1142  00151A  A0D8               	btfss	status,0,c
  1143  00151C  D005               	goto	l657
  1144  00151E  5030               	movf	___lwdiv@divisor,w,c
  1145  001520  5E2E               	subwf	___lwdiv@dividend,f,c
  1146  001522  5031               	movf	___lwdiv@divisor+1,w,c
  1147  001524  5A2F               	subwfb	___lwdiv@dividend+1,f,c
  1148  001526  8033               	bsf	___lwdiv@quotient,0,c
  1149  001528                     l657:
  1150  001528  90D8               	bcf	status,0,c
  1151  00152A  3231               	rrcf	___lwdiv@divisor+1,f,c
  1152  00152C  3230               	rrcf	___lwdiv@divisor,f,c
  1153  00152E  2E32               	decfsz	___lwdiv@counter,f,c
  1154  001530  D7ED               	goto	u860
  1155  001532                     l658:
  1156  001532  C033  F02E         	movff	___lwdiv@quotient,?___lwdiv
  1157  001536  C034  F02F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1158  00153A  0012               	return		;funcret
  1159  00153C                     __end_of___lwdiv:
  1160                           	opt stack 0
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           prodh	equ	0xFF4
  1166                           prodl	equ	0xFF3
  1167                           intcon	equ	0xFF2
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           postinc2	equ	0xFDE
  1171                           postdec2	equ	0xFDD
  1172                           fsr2h	equ	0xFDA
  1173                           fsr2l	equ	0xFD9
  1174                           status	equ	0xFD8
  1175                           
  1176 ;; *************** function _initLCD *****************
  1177 ;; Defined at:
  1178 ;;		line 60 in file "lcd.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, status,2, status,0, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1194 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1196 ;;Total ram usage:        1 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    6
  1199 ;; This function calls:
  1200 ;;		_lcdInst
  1201 ;; This function is called by:
  1202 ;;		_main
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text5
  1207  00158E                     __ptext5:
  1208                           	opt stack 0
  1209  00158E                     _initLCD:
  1210                           	opt stack 24
  1211                           
  1212                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1213                           
  1214                           ;incstack = 0
  1215  00158E  0E9C               	movlw	156
  1216  001590  6E31               	movwf	??_initLCD& (0+255),c
  1217  001592  0ED7               	movlw	215
  1218  001594                     u1097:
  1219  001594  2EE8               	decfsz	wreg,f,c
  1220  001596  D7FE               	bra	u1097
  1221  001598  2E31               	decfsz	??_initLCD& (0+255),f,c
  1222  00159A  D7FC               	bra	u1097
  1223  00159C  F000               	nop	
  1224                           
  1225                           ;lcd.c: 69: lcdInst(0b00110011);
  1226  00159E  0E33               	movlw	51
  1227  0015A0  EC9E  F00B         	call	_lcdInst
  1228                           
  1229                           ;lcd.c: 70: lcdInst(0b00110010);
  1230  0015A4  0E32               	movlw	50
  1231  0015A6  EC9E  F00B         	call	_lcdInst
  1232                           
  1233                           ;lcd.c: 71: lcdInst(0b00101000);
  1234  0015AA  0E28               	movlw	40
  1235  0015AC  EC9E  F00B         	call	_lcdInst
  1236                           
  1237                           ;lcd.c: 72: lcdInst(0b00001111);
  1238  0015B0  0E0F               	movlw	15
  1239  0015B2  EC9E  F00B         	call	_lcdInst
  1240                           
  1241                           ;lcd.c: 73: lcdInst(0b00000110);
  1242  0015B6  0E06               	movlw	6
  1243  0015B8  EC9E  F00B         	call	_lcdInst
  1244                           
  1245                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1246  0015BC  0E01               	movlw	1
  1247  0015BE  EC9E  F00B         	call	_lcdInst
  1248  0015C2  0E9C               	movlw	156
  1249  0015C4  6E31               	movwf	??_initLCD& (0+255),c
  1250  0015C6  0ED7               	movlw	215
  1251  0015C8                     u1107:
  1252  0015C8  2EE8               	decfsz	wreg,f,c
  1253  0015CA  D7FE               	bra	u1107
  1254  0015CC  2E31               	decfsz	??_initLCD& (0+255),f,c
  1255  0015CE  D7FC               	bra	u1107
  1256  0015D0  F000               	nop	
  1257                           
  1258                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1259  0015D2  0E0F               	movlw	15
  1260  0015D4  EC9E  F00B         	call	_lcdInst
  1261  0015D8  0012               	return		;funcret
  1262  0015DA                     __end_of_initLCD:
  1263                           	opt stack 0
  1264                           tblptru	equ	0xFF8
  1265                           tblptrh	equ	0xFF7
  1266                           tblptrl	equ	0xFF6
  1267                           tablat	equ	0xFF5
  1268                           prodh	equ	0xFF4
  1269                           prodl	equ	0xFF3
  1270                           intcon	equ	0xFF2
  1271                           postinc0	equ	0xFEE
  1272                           wreg	equ	0xFE8
  1273                           postinc2	equ	0xFDE
  1274                           postdec2	equ	0xFDD
  1275                           fsr2h	equ	0xFDA
  1276                           fsr2l	equ	0xFD9
  1277                           status	equ	0xFD8
  1278                           
  1279 ;; *************** function _lcdInst *****************
  1280 ;; Defined at:
  1281 ;;		line 11 in file "lcd.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  data            1    wreg     unsigned char 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  data            1   47[COMRAM] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1299 ;;Total ram usage:        1 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    5
  1302 ;; This function calls:
  1303 ;;		_lcdNibble
  1304 ;; This function is called by:
  1305 ;;		_initLCD
  1306 ;;		_main
  1307 ;;		_lcd_set_cursor
  1308 ;;		_lcd_shift_cursor
  1309 ;;		_lcd_shift_display
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text6
  1314  00173C                     __ptext6:
  1315                           	opt stack 0
  1316  00173C                     _lcdInst:
  1317                           	opt stack 25
  1318                           
  1319                           ;incstack = 0
  1320                           ;lcdInst@data stored from wreg
  1321  00173C  6E30               	movwf	lcdInst@data,c
  1322                           
  1323                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1324  00173E  948C               	bcf	3980,2,c	;volatile
  1325                           
  1326                           ;lcd.c: 20: lcdNibble(data);
  1327  001740  5030               	movf	lcdInst@data,w,c
  1328  001742  ECF7  F009         	call	_lcdNibble
  1329                           
  1330                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1331  001746  0EA0               	movlw	160
  1332  001748                     u1117:
  1333  001748  D000               	nop2	
  1334  00174A  2EE8               	decfsz	wreg,f,c
  1335  00174C  D7FD               	bra	u1117
  1336  00174E  0012               	return		;funcret
  1337  001750                     __end_of_lcdInst:
  1338                           	opt stack 0
  1339                           tblptru	equ	0xFF8
  1340                           tblptrh	equ	0xFF7
  1341                           tblptrl	equ	0xFF6
  1342                           tablat	equ	0xFF5
  1343                           prodh	equ	0xFF4
  1344                           prodl	equ	0xFF3
  1345                           intcon	equ	0xFF2
  1346                           postinc0	equ	0xFEE
  1347                           wreg	equ	0xFE8
  1348                           postinc2	equ	0xFDE
  1349                           postdec2	equ	0xFDD
  1350                           fsr2h	equ	0xFDA
  1351                           fsr2l	equ	0xFD9
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _lcdNibble *****************
  1355 ;; Defined at:
  1356 ;;		line 37 in file "lcd.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  data            1    wreg     unsigned char 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  data            1   46[COMRAM] unsigned char 
  1361 ;;  temp            1   45[COMRAM] unsigned char 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      void 
  1364 ;; Registers used:
  1365 ;;		wreg, status,2, status,0
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;Total ram usage:        2 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    4
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_lcdInst
  1382 ;;		_putch
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text7
  1387  0013EE                     __ptext7:
  1388                           	opt stack 0
  1389  0013EE                     _lcdNibble:
  1390                           	opt stack 24
  1391                           
  1392                           ;incstack = 0
  1393                           ;lcdNibble@data stored from wreg
  1394  0013EE  6E2F               	movwf	lcdNibble@data,c
  1395                           
  1396                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1397  0013F0  502F               	movf	lcdNibble@data,w,c
  1398  0013F2  0BF0               	andlw	240
  1399  0013F4  6E2E               	movwf	lcdNibble@temp,c
  1400                           
  1401                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1402  0013F6  508C               	movf	3980,w,c	;volatile
  1403  0013F8  0B0F               	andlw	15
  1404  0013FA  6E8C               	movwf	3980,c	;volatile
  1405                           
  1406                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1407  0013FC  502E               	movf	lcdNibble@temp,w,c
  1408  0013FE  108C               	iorwf	3980,w,c	;volatile
  1409  001400  6E8C               	movwf	3980,c	;volatile
  1410                           
  1411                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1412  001402  0E00               	movlw	0
  1413  001404  BEF2               	btfsc	intcon,7,c	;volatile
  1414  001406  0E01               	movlw	1
  1415  001408  6E50               	movwf	_LCDinterruptState,c
  1416  00140A  9EF2               	bcf	intcon,7,c	;volatile
  1417  00140C  868C               	bsf	3980,3,c	;volatile
  1418  00140E  0E42               	movlw	66
  1419  001410                     u1127:
  1420  001410  2EE8               	decfsz	wreg,f,c
  1421  001412  D7FE               	bra	u1127
  1422  001414  D000               	nop2	
  1423  001416  968C               	bcf	3980,3,c	;volatile
  1424  001418  0EA0               	movlw	160
  1425  00141A                     u1137:
  1426  00141A  D000               	nop2	
  1427  00141C  2EE8               	decfsz	wreg,f,c
  1428  00141E  D7FD               	bra	u1137
  1429  001420  B050               	btfsc	_LCDinterruptState,0,c
  1430  001422  D002               	bra	u815
  1431  001424  9EF2               	bcf	intcon,7,c	;volatile
  1432  001426  D001               	bra	u816
  1433  001428                     u815:
  1434  001428  8EF2               	bsf	intcon,7,c	;volatile
  1435  00142A                     u816:
  1436                           
  1437                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1438  00142A  382F               	swapf	lcdNibble@data,w,c
  1439  00142C  0BF0               	andlw	240
  1440  00142E  6E2F               	movwf	lcdNibble@data,c
  1441                           
  1442                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1443  001430  502F               	movf	lcdNibble@data,w,c
  1444  001432  0BF0               	andlw	240
  1445  001434  6E2E               	movwf	lcdNibble@temp,c
  1446                           
  1447                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1448  001436  508C               	movf	3980,w,c	;volatile
  1449  001438  0B0F               	andlw	15
  1450  00143A  6E8C               	movwf	3980,c	;volatile
  1451                           
  1452                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1453  00143C  502E               	movf	lcdNibble@temp,w,c
  1454  00143E  108C               	iorwf	3980,w,c	;volatile
  1455  001440  6E8C               	movwf	3980,c	;volatile
  1456                           
  1457                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1458  001442  0E00               	movlw	0
  1459  001444  BEF2               	btfsc	intcon,7,c	;volatile
  1460  001446  0E01               	movlw	1
  1461  001448  6E50               	movwf	_LCDinterruptState,c
  1462  00144A  9EF2               	bcf	intcon,7,c	;volatile
  1463  00144C  868C               	bsf	3980,3,c	;volatile
  1464  00144E  0E42               	movlw	66
  1465  001450                     u1147:
  1466  001450  2EE8               	decfsz	wreg,f,c
  1467  001452  D7FE               	bra	u1147
  1468  001454  D000               	nop2	
  1469  001456  968C               	bcf	3980,3,c	;volatile
  1470  001458  0EA0               	movlw	160
  1471  00145A                     u1157:
  1472  00145A  D000               	nop2	
  1473  00145C  2EE8               	decfsz	wreg,f,c
  1474  00145E  D7FD               	bra	u1157
  1475  001460  B050               	btfsc	_LCDinterruptState,0,c
  1476  001462  D002               	bra	u825
  1477  001464  9EF2               	bcf	intcon,7,c	;volatile
  1478  001466  D001               	bra	u826
  1479  001468                     u825:
  1480  001468  8EF2               	bsf	intcon,7,c	;volatile
  1481  00146A                     u826:
  1482  00146A  0012               	return		;funcret
  1483  00146C                     __end_of_lcdNibble:
  1484                           	opt stack 0
  1485                           tblptru	equ	0xFF8
  1486                           tblptrh	equ	0xFF7
  1487                           tblptrl	equ	0xFF6
  1488                           tablat	equ	0xFF5
  1489                           prodh	equ	0xFF4
  1490                           prodl	equ	0xFF3
  1491                           intcon	equ	0xFF2
  1492                           postinc0	equ	0xFEE
  1493                           wreg	equ	0xFE8
  1494                           postinc2	equ	0xFDE
  1495                           postdec2	equ	0xFDD
  1496                           fsr2h	equ	0xFDA
  1497                           fsr2l	equ	0xFD9
  1498                           status	equ	0xFD8
  1499                           
  1500 ;; *************** function _I2C_sendData *****************
  1501 ;; Defined at:
  1502 ;;		line 195 in file "main.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;  char_data       1    wreg     unsigned char 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  char_data       1   48[COMRAM] unsigned char 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      void 
  1509 ;; Registers used:
  1510 ;;		wreg, status,2, status,0, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;Total ram usage:        1 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    6
  1523 ;; This function calls:
  1524 ;;		_I2C_Master_Start
  1525 ;;		_I2C_Master_Stop
  1526 ;;		_I2C_Master_Write
  1527 ;; This function is called by:
  1528 ;;		_main
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text8
  1533  0016D4                     __ptext8:
  1534                           	opt stack 0
  1535  0016D4                     _I2C_sendData:
  1536                           	opt stack 24
  1537                           
  1538                           ;incstack = 0
  1539                           ;I2C_sendData@char_data stored from wreg
  1540  0016D4  6E31               	movwf	I2C_sendData@char_data,c
  1541                           
  1542                           ;main.c: 196: I2C_Master_Start();
  1543  0016D6  ECCE  F00B         	call	_I2C_Master_Start	;wreg free
  1544                           
  1545                           ;main.c: 197: I2C_Master_Write(0b00010000);
  1546  0016DA  0E00               	movlw	0
  1547  0016DC  6E30               	movwf	I2C_Master_Write@byteToWrite+1,c
  1548  0016DE  0E10               	movlw	16
  1549  0016E0  6E2F               	movwf	I2C_Master_Write@byteToWrite,c
  1550  0016E2  ECC5  F00B         	call	_I2C_Master_Write	;wreg free
  1551                           
  1552                           ;main.c: 198: I2C_Master_Write(char_data);
  1553  0016E6  C031  F02F         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  1554  0016EA  6A30               	clrf	I2C_Master_Write@byteToWrite+1,c
  1555  0016EC  ECC5  F00B         	call	_I2C_Master_Write	;wreg free
  1556                           
  1557                           ;main.c: 199: I2C_Master_Stop();
  1558  0016F0  ECCA  F00B         	call	_I2C_Master_Stop	;wreg free
  1559  0016F4  0012               	return		;funcret
  1560  0016F6                     __end_of_I2C_sendData:
  1561                           	opt stack 0
  1562                           tblptru	equ	0xFF8
  1563                           tblptrh	equ	0xFF7
  1564                           tblptrl	equ	0xFF6
  1565                           tablat	equ	0xFF5
  1566                           prodh	equ	0xFF4
  1567                           prodl	equ	0xFF3
  1568                           intcon	equ	0xFF2
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           postinc2	equ	0xFDE
  1572                           postdec2	equ	0xFDD
  1573                           fsr2h	equ	0xFDA
  1574                           fsr2l	equ	0xFD9
  1575                           status	equ	0xFD8
  1576                           
  1577 ;; *************** function _I2C_init *****************
  1578 ;; Defined at:
  1579 ;;		line 189 in file "main.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;		None
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0, cstack
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;Total ram usage:        0 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    6
  1600 ;; This function calls:
  1601 ;;		_I2C_Master_Init
  1602 ;;		_I2C_Master_Start
  1603 ;;		_I2C_Master_Stop
  1604 ;;		_I2C_Master_Write
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text9
  1611  0016AA                     __ptext9:
  1612                           	opt stack 0
  1613  0016AA                     _I2C_init:
  1614                           	opt stack 24
  1615                           
  1616                           ;main.c: 190: I2C_Master_Init(100000);
  1617                           
  1618                           ;incstack = 0
  1619  0016AA  0EA0               	movlw	160
  1620  0016AC  6E2E               	movwf	I2C_Master_Init@clockFreq,c
  1621  0016AE  0E86               	movlw	134
  1622  0016B0  6E2F               	movwf	I2C_Master_Init@clockFreq+1,c
  1623  0016B2  0E01               	movlw	1
  1624  0016B4  6E30               	movwf	I2C_Master_Init@clockFreq+2,c
  1625  0016B6  0E00               	movlw	0
  1626  0016B8  6E31               	movwf	I2C_Master_Init@clockFreq+3,c
  1627  0016BA  EC88  F00B         	call	_I2C_Master_Init	;wreg free
  1628                           
  1629                           ;main.c: 191: I2C_Master_Start();
  1630  0016BE  ECCE  F00B         	call	_I2C_Master_Start	;wreg free
  1631                           
  1632                           ;main.c: 192: I2C_Master_Write(0b00010000);
  1633  0016C2  0E00               	movlw	0
  1634  0016C4  6E30               	movwf	I2C_Master_Write@byteToWrite+1,c
  1635  0016C6  0E10               	movlw	16
  1636  0016C8  6E2F               	movwf	I2C_Master_Write@byteToWrite,c
  1637  0016CA  ECC5  F00B         	call	_I2C_Master_Write	;wreg free
  1638                           
  1639                           ;main.c: 193: I2C_Master_Stop();
  1640  0016CE  ECCA  F00B         	call	_I2C_Master_Stop	;wreg free
  1641  0016D2  0012               	return		;funcret
  1642  0016D4                     __end_of_I2C_init:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           intcon	equ	0xFF2
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postinc2	equ	0xFDE
  1654                           postdec2	equ	0xFDD
  1655                           fsr2h	equ	0xFDA
  1656                           fsr2l	equ	0xFD9
  1657                           status	equ	0xFD8
  1658                           
  1659 ;; *************** function _I2C_Master_Write *****************
  1660 ;; Defined at:
  1661 ;;		line 109 in file "I2C.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;  byteToWrite     2   46[COMRAM] unsigned int 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2, status,0, cstack
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;Total ram usage:        2 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    5
  1682 ;; This function calls:
  1683 ;;		_I2C_Master_Wait
  1684 ;; This function is called by:
  1685 ;;		_I2C_init
  1686 ;;		_I2C_sendData
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text10
  1691  00178A                     __ptext10:
  1692                           	opt stack 0
  1693  00178A                     _I2C_Master_Write:
  1694                           	opt stack 24
  1695                           
  1696                           ;I2C.c: 117: I2C_Master_Wait();
  1697                           
  1698                           ;incstack = 0
  1699  00178A  ECBC  F00B         	call	_I2C_Master_Wait	;wreg free
  1700                           
  1701                           ;I2C.c: 118: SSPBUF = byteToWrite;
  1702  00178E  C02F  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1703  001792  0012               	return		;funcret
  1704  001794                     __end_of_I2C_Master_Write:
  1705                           	opt stack 0
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           prodh	equ	0xFF4
  1711                           prodl	equ	0xFF3
  1712                           intcon	equ	0xFF2
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postinc2	equ	0xFDE
  1716                           postdec2	equ	0xFDD
  1717                           fsr2h	equ	0xFDA
  1718                           fsr2l	equ	0xFD9
  1719                           status	equ	0xFD8
  1720                           
  1721 ;; *************** function _I2C_Master_Stop *****************
  1722 ;; Defined at:
  1723 ;;		line 96 in file "I2C.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1741 ;;Total ram usage:        0 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    5
  1744 ;; This function calls:
  1745 ;;		_I2C_Master_Wait
  1746 ;; This function is called by:
  1747 ;;		_I2C_init
  1748 ;;		_I2C_sendData
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text11
  1753  001794                     __ptext11:
  1754                           	opt stack 0
  1755  001794                     _I2C_Master_Stop:
  1756                           	opt stack 24
  1757                           
  1758                           ;I2C.c: 105: I2C_Master_Wait();
  1759                           
  1760                           ;incstack = 0
  1761  001794  ECBC  F00B         	call	_I2C_Master_Wait	;wreg free
  1762                           
  1763                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  1764  001798  84C5               	bsf	4037,2,c	;volatile
  1765  00179A  0012               	return		;funcret
  1766  00179C                     __end_of_I2C_Master_Stop:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           prodh	equ	0xFF4
  1773                           prodl	equ	0xFF3
  1774                           intcon	equ	0xFF2
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           postinc2	equ	0xFDE
  1778                           postdec2	equ	0xFDD
  1779                           fsr2h	equ	0xFDA
  1780                           fsr2l	equ	0xFD9
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function _I2C_Master_Start *****************
  1784 ;; Defined at:
  1785 ;;		line 70 in file "I2C.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2, status,0, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;Total ram usage:        0 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    5
  1806 ;; This function calls:
  1807 ;;		_I2C_Master_Wait
  1808 ;; This function is called by:
  1809 ;;		_I2C_init
  1810 ;;		_I2C_sendData
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text12
  1815  00179C                     __ptext12:
  1816                           	opt stack 0
  1817  00179C                     _I2C_Master_Start:
  1818                           	opt stack 24
  1819                           
  1820                           ;I2C.c: 79: I2C_Master_Wait();
  1821                           
  1822                           ;incstack = 0
  1823  00179C  ECBC  F00B         	call	_I2C_Master_Wait	;wreg free
  1824                           
  1825                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  1826  0017A0  80C5               	bsf	4037,0,c	;volatile
  1827  0017A2  0012               	return		;funcret
  1828  0017A4                     __end_of_I2C_Master_Start:
  1829                           	opt stack 0
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           tblptrl	equ	0xFF6
  1833                           tablat	equ	0xFF5
  1834                           prodh	equ	0xFF4
  1835                           prodl	equ	0xFF3
  1836                           intcon	equ	0xFF2
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postinc2	equ	0xFDE
  1840                           postdec2	equ	0xFDD
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _I2C_Master_Wait *****************
  1846 ;; Defined at:
  1847 ;;		line 52 in file "I2C.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;Total ram usage:        1 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    4
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_I2C_Master_Start
  1872 ;;		_I2C_Master_Stop
  1873 ;;		_I2C_Master_Write
  1874 ;;		_I2C_Master_RepeatedStart
  1875 ;;		_I2C_Master_Read
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text13
  1880  001778                     __ptext13:
  1881                           	opt stack 0
  1882  001778                     _I2C_Master_Wait:
  1883                           	opt stack 24
  1884                           
  1885                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1886                           
  1887                           ;incstack = 0
  1888  001778  B4C7               	btfsc	4039,2,c	;volatile
  1889  00177A  D7FE               	goto	_I2C_Master_Wait
  1890  00177C  CFC5 F02E          	movff	4037,??_I2C_Master_Wait	;volatile
  1891  001780  0E1F               	movlw	31
  1892  001782  162E               	andwf	??_I2C_Master_Wait,f,c
  1893  001784  B4D8               	btfsc	status,2,c
  1894  001786  0012               	return	
  1895  001788  D7F7               	goto	_I2C_Master_Wait
  1896  00178A                     __end_of_I2C_Master_Wait:
  1897                           	opt stack 0
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           prodh	equ	0xFF4
  1903                           prodl	equ	0xFF3
  1904                           intcon	equ	0xFF2
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postinc2	equ	0xFDE
  1908                           postdec2	equ	0xFDD
  1909                           fsr2h	equ	0xFDA
  1910                           fsr2l	equ	0xFD9
  1911                           status	equ	0xFD8
  1912                           
  1913 ;; *************** function _I2C_Master_Init *****************
  1914 ;; Defined at:
  1915 ;;		line 14 in file "I2C.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;  clockFreq       4   45[COMRAM] const unsigned long 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1929 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;Total ram usage:        4 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    4
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_I2C_init
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text14
  1944  001710                     __ptext14:
  1945                           	opt stack 0
  1946  001710                     _I2C_Master_Init:
  1947                           	opt stack 25
  1948                           
  1949                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1950                           
  1951                           ;incstack = 0
  1952  001710  9AC6               	bcf	4038,5,c	;volatile
  1953                           
  1954                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1955  001712  8694               	bsf	3988,3,c	;volatile
  1956                           
  1957                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1958  001714  8894               	bsf	3988,4,c	;volatile
  1959                           
  1960                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1961  001716  0E80               	movlw	128
  1962  001718  6EC7               	movwf	4039,c	;volatile
  1963                           
  1964                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1965  00171A  0E28               	movlw	40
  1966  00171C  6EC6               	movwf	4038,c	;volatile
  1967                           
  1968                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1969  00171E  0E00               	movlw	0
  1970  001720  6EC5               	movwf	4037,c	;volatile
  1971                           
  1972                           ;I2C.c: 49: SSPADD = 9600;
  1973  001722  0E80               	movlw	128
  1974  001724  6EC8               	movwf	4040,c	;volatile
  1975  001726  0012               	return		;funcret
  1976  001728                     __end_of_I2C_Master_Init:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           prodh	equ	0xFF4
  1983                           prodl	equ	0xFF3
  1984                           intcon	equ	0xFF2
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           postinc2	equ	0xFDE
  1988                           postdec2	equ	0xFDD
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _interruptHandler *****************
  1994 ;; Defined at:
  1995 ;;		line 118 in file "main.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  input           2   43[COMRAM] int 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;Total ram usage:       21 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    3
  2016 ;; This function calls:
  2017 ;;		i2_initLCD
  2018 ;;		i2_lcdInst
  2019 ;;		i2_printf
  2020 ;; This function is called by:
  2021 ;;		Interrupt level 2
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	intcode
  2026  000008                     __pintcode:
  2027                           	opt stack 0
  2028  000008                     _interruptHandler:
  2029                           	opt stack 24
  2030                           
  2031                           ;incstack = 0
  2032  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2033  00000A  ED2D  F009         	call	int_func,f	;refresh shadow registers
  2034                           tblptru	equ	0xFF8
  2035                           tblptrh	equ	0xFF7
  2036                           tblptrl	equ	0xFF6
  2037                           tablat	equ	0xFF5
  2038                           prodh	equ	0xFF4
  2039                           prodl	equ	0xFF3
  2040                           intcon	equ	0xFF2
  2041                           postinc0	equ	0xFEE
  2042                           wreg	equ	0xFE8
  2043                           postinc2	equ	0xFDE
  2044                           postdec2	equ	0xFDD
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049                           	psect	intcode_body
  2050  00125A                     __pintcode_body:
  2051                           	opt stack 24
  2052  00125A                     int_func:
  2053                           	opt stack 24
  2054  00125A  0006               	pop		; remove dummy address from shadow register refresh
  2055  00125C  CFFA F01A          	movff	pclath,??_interruptHandler+1
  2056  001260  CFFB F01B          	movff	pclatu,??_interruptHandler+2
  2057  001264  CFE9 F01C          	movff	fsr0l,??_interruptHandler+3
  2058  001268  CFEA F01D          	movff	fsr0h,??_interruptHandler+4
  2059  00126C  CFE1 F01E          	movff	fsr1l,??_interruptHandler+5
  2060  001270  CFE2 F01F          	movff	fsr1h,??_interruptHandler+6
  2061  001274  CFD9 F020          	movff	fsr2l,??_interruptHandler+7
  2062  001278  CFDA F021          	movff	fsr2h,??_interruptHandler+8
  2063  00127C  CFF3 F022          	movff	prodl,??_interruptHandler+9
  2064  001280  CFF4 F023          	movff	prodh,??_interruptHandler+10
  2065  001284  CFF6 F024          	movff	tblptrl,??_interruptHandler+11
  2066  001288  CFF7 F025          	movff	tblptrh,??_interruptHandler+12
  2067  00128C  CFF8 F026          	movff	tblptru,??_interruptHandler+13
  2068  001290  CFF5 F027          	movff	tablat,??_interruptHandler+14
  2069  001294  C051  F028         	movff	btemp,??_interruptHandler+15
  2070  001298  C052  F029         	movff	btemp+1,??_interruptHandler+16
  2071  00129C  C053  F02A         	movff	btemp+2,??_interruptHandler+17
  2072  0012A0  C054  F02B         	movff	btemp+3,??_interruptHandler+18
  2073                           
  2074                           ;main.c: 130: if (RBIF){
  2075  0012A4  A0F2               	btfss	intcon,0,c	;volatile
  2076  0012A6  D027               	goto	i2l1665
  2077                           
  2078                           ;main.c: 138: TRISBbits.RB5 = 1;
  2079  0012A8  8A93               	bsf	3987,5,c	;volatile
  2080                           
  2081                           ;main.c: 139: int input = PORTBbits.RB5;
  2082  0012AA  AA81               	btfss	3969,5,c	;volatile
  2083  0012AC  D003               	goto	i2u79_40
  2084  0012AE  6A19               	clrf	??_interruptHandler& (0+255),c
  2085  0012B0  2A19               	incf	??_interruptHandler& (0+255),f,c
  2086  0012B2  D001               	goto	i2u79_48
  2087  0012B4                     i2u79_40:
  2088  0012B4  6A19               	clrf	??_interruptHandler& (0+255),c
  2089  0012B6                     i2u79_48:
  2090  0012B6  5019               	movf	??_interruptHandler,w,c
  2091  0012B8  6E2C               	movwf	interruptHandler@input,c
  2092  0012BA  6A2D               	clrf	interruptHandler@input+1,c
  2093                           
  2094                           ;main.c: 141: if (input == 0){
  2095  0012BC  502C               	movf	interruptHandler@input,w,c
  2096  0012BE  102D               	iorwf	interruptHandler@input+1,w,c
  2097  0012C0  A4D8               	btfss	status,2,c
  2098  0012C2  D018               	goto	i2l166
  2099                           
  2100                           ;main.c: 142: initLCD();
  2101  0012C4  ECED  F00A         	call	i2_initLCD	;wreg free
  2102                           
  2103                           ;main.c: 143: B_count++;
  2104  0012C8  4A4D               	infsnz	_B_count,f,c
  2105  0012CA  2A4E               	incf	_B_count+1,f,c
  2106                           
  2107                           ;main.c: 145: printf("%d",B_count);
  2108  0012CC  0E19               	movlw	low (STR_2+8)
  2109  0012CE  6E0D               	movwf	i2printf@f,c
  2110  0012D0  0E10               	movlw	high (STR_2+8)
  2111  0012D2  6E0E               	movwf	i2printf@f+1,c
  2112  0012D4  C04D  F00F         	movff	_B_count,?i2_printf+2
  2113  0012D8  C04E  F010         	movff	_B_count+1,?i2_printf+3
  2114  0012DC  EC9E  F008         	call	i2_printf	;wreg free
  2115                           
  2116                           ;main.c: 146: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2117  0012E0  0E80               	movlw	128
  2118  0012E2  ECB2  F00B         	call	i2_lcdInst
  2119  0012E6  0E34               	movlw	52
  2120  0012E8  6E19               	movwf	??_interruptHandler& (0+255),c
  2121  0012EA  0EF2               	movlw	242
  2122  0012EC                     i2u116_47:
  2123  0012EC  2EE8               	decfsz	wreg,f,c
  2124  0012EE  D7FE               	bra	i2u116_47
  2125  0012F0  2E19               	decfsz	??_interruptHandler& (0+255),f,c
  2126  0012F2  D7FC               	bra	i2u116_47
  2127  0012F4                     i2l166:
  2128                           
  2129                           ;main.c: 147: }
  2130                           ;main.c: 162: RBIF = 0;
  2131  0012F4  90F2               	bcf	intcon,0,c	;volatile
  2132  0012F6                     i2l1665:
  2133                           
  2134                           ;main.c: 163: return;
  2135  0012F6  C02B  F054         	movff	??_interruptHandler+18,btemp+3
  2136  0012FA  C02A  F053         	movff	??_interruptHandler+17,btemp+2
  2137  0012FE  C029  F052         	movff	??_interruptHandler+16,btemp+1
  2138  001302  C028  F051         	movff	??_interruptHandler+15,btemp
  2139  001306  C027  FFF5         	movff	??_interruptHandler+14,tablat
  2140  00130A  C026  FFF8         	movff	??_interruptHandler+13,tblptru
  2141  00130E  C025  FFF7         	movff	??_interruptHandler+12,tblptrh
  2142  001312  C024  FFF6         	movff	??_interruptHandler+11,tblptrl
  2143  001316  C023  FFF4         	movff	??_interruptHandler+10,prodh
  2144  00131A  C022  FFF3         	movff	??_interruptHandler+9,prodl
  2145  00131E  C021  FFDA         	movff	??_interruptHandler+8,fsr2h
  2146  001322  C020  FFD9         	movff	??_interruptHandler+7,fsr2l
  2147  001326  C01F  FFE2         	movff	??_interruptHandler+6,fsr1h
  2148  00132A  C01E  FFE1         	movff	??_interruptHandler+5,fsr1l
  2149  00132E  C01D  FFEA         	movff	??_interruptHandler+4,fsr0h
  2150  001332  C01C  FFE9         	movff	??_interruptHandler+3,fsr0l
  2151  001336  C01B  FFFB         	movff	??_interruptHandler+2,pclatu
  2152  00133A  C01A  FFFA         	movff	??_interruptHandler+1,pclath
  2153  00133E  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2154  001340  0011               	retfie		f
  2155  001342                     __end_of_interruptHandler:
  2156                           	opt stack 0
  2157                           pclatu	equ	0xFFB
  2158                           pclath	equ	0xFFA
  2159                           tblptru	equ	0xFF8
  2160                           tblptrh	equ	0xFF7
  2161                           tblptrl	equ	0xFF6
  2162                           tablat	equ	0xFF5
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           intcon	equ	0xFF2
  2166                           postinc0	equ	0xFEE
  2167                           fsr0h	equ	0xFEA
  2168                           fsr0l	equ	0xFE9
  2169                           wreg	equ	0xFE8
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           postinc2	equ	0xFDE
  2173                           postdec2	equ	0xFDD
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function i2_printf *****************
  2179 ;; Defined at:
  2180 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2183 ;;		 -> STR_3(3), STR_2(11), STR_1(3), 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  printf          4    0        struct .
  2186 ;;  printf          3    0        PTR const unsigned char 
  2187 ;;  printf          2   21[COMRAM] unsigned int 
  2188 ;;  printf          2   17[COMRAM] PTR void [1]
  2189 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2190 ;;  printf          2    0        unsigned int 
  2191 ;;  printf          1   23[COMRAM] char 
  2192 ;;  printf          1   20[COMRAM] char 
  2193 ;;  printf          1   19[COMRAM] unsigned char 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  2   12[COMRAM] int 
  2196 ;; Registers used:
  2197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;Total ram usage:       12 bytes
  2208 ;; Hardware stack levels used:    1
  2209 ;; Hardware stack levels required when called:    2
  2210 ;; This function calls:
  2211 ;;		i2___lwdiv
  2212 ;;		i2___lwmod
  2213 ;;		i2_putch
  2214 ;; This function is called by:
  2215 ;;		_interruptHandler
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text16
  2220  00113C                     __ptext16:
  2221                           	opt stack 0
  2222  00113C                     i2_printf:
  2223                           	opt stack 24
  2224                           
  2225                           ;doprnt.c: 466: va_list ap;
  2226                           ;doprnt.c: 499: signed char c;
  2227                           ;doprnt.c: 506: signed char prec;
  2228                           ;doprnt.c: 508: unsigned char flag;
  2229                           ;doprnt.c: 523: union {
  2230                           ;doprnt.c: 524: unsigned long vd;
  2231                           ;doprnt.c: 525: double integ;
  2232                           ;doprnt.c: 526: } tmpval;
  2233                           ;doprnt.c: 528: unsigned int val;
  2234                           ;doprnt.c: 529: unsigned len;
  2235                           ;doprnt.c: 530: const char * cp;
  2236                           ;doprnt.c: 533: *ap = __va_start();
  2237                           
  2238                           ;incstack = 0
  2239  00113C  0E0F               	movlw	low (?i2_printf+2)
  2240  00113E  6E12               	movwf	i2printf@ap,c
  2241  001140  0E00               	movlw	high (?i2_printf+2)
  2242  001142  6E13               	movwf	i2printf@ap+1,c
  2243                           
  2244                           ;doprnt.c: 536: while(c = *f++) {
  2245  001144  D07D               	goto	i2u75_40
  2246  001146                     
  2247                           ;doprnt.c: 538: if(c != '%')
  2248  001146  0E25               	movlw	37
  2249  001148  1818               	xorwf	i2printf@c,w,c
  2250  00114A  B4D8               	btfsc	status,2,c
  2251  00114C  D004               	goto	i2l232
  2252                           
  2253                           ;doprnt.c: 540: {
  2254                           ;doprnt.c: 541: (putch(c) );
  2255  00114E  5018               	movf	i2printf@c,w,c
  2256  001150  ECA8  F00B         	call	i2_putch
  2257                           
  2258                           ;doprnt.c: 542: continue;
  2259  001154  D075               	goto	i2u75_40
  2260  001156                     i2l232:
  2261                           
  2262                           ;doprnt.c: 543: }
  2263                           ;doprnt.c: 548: flag = 0;
  2264  001156  0E00               	movlw	0
  2265  001158  6E14               	movwf	i2printf@flag,c
  2266                           
  2267                           ;doprnt.c: 822: }
  2268                           
  2269                           ;doprnt.c: 813: continue;
  2270                           
  2271                           ;doprnt.c: 802: default:
  2272                           
  2273                           ;doprnt.c: 698: case 'i':
  2274                           ;doprnt.c: 699: break;
  2275                           
  2276                           ;doprnt.c: 697: case 'd':
  2277                           
  2278                           ;doprnt.c: 638: goto alldone;
  2279                           
  2280                           ;doprnt.c: 637: case 0:
  2281                           
  2282                           ;doprnt.c: 635: switch(c = *f++) {
  2283  00115A  C00D  FFF6         	movff	i2printf@f,tblptrl
  2284  00115E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2285  001162  4A0D               	infsnz	i2printf@f,f,c
  2286  001164  2A0E               	incf	i2printf@f+1,f,c
  2287  001166                     	if	0	;tblptru may be non-zero
  2288  001166                     	endif
  2289  001166                     	if	0	;tblptru may be non-zero
  2290  001166                     	endif
  2291  001166  0008               	tblrd		*
  2292  001168  CFF5 F018          	movff	tablat,i2printf@c
  2293  00116C  5018               	movf	i2printf@c,w,c
  2294                           
  2295                           ; Switch size 1, requested type "space"
  2296                           ; Number of cases is 3, Range of values is 0 to 105
  2297                           ; switch strategies available:
  2298                           ; Name         Instructions Cycles
  2299                           ; simple_byte           10     6 (average)
  2300                           ;	Chosen strategy is simple_byte
  2301  00116E  0A00               	xorlw	0	; case 0
  2302  001170  B4D8               	btfsc	status,2,c
  2303  001172  0012               	return	
  2304  001174  0A64               	xorlw	100	; case 100
  2305  001176  B4D8               	btfsc	status,2,c
  2306  001178  D003               	goto	i2l238
  2307  00117A  0A0D               	xorlw	13	; case 105
  2308  00117C  A4D8               	btfss	status,2,c
  2309  00117E  D060               	goto	i2u75_40
  2310  001180                     i2l238:
  2311                           
  2312                           ;doprnt.c: 1253: {
  2313                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2314  001180  C012  FFD9         	movff	i2printf@ap,fsr2l
  2315  001184  C013  FFDA         	movff	i2printf@ap+1,fsr2h
  2316  001188  CFDE F016          	movff	postinc2,i2printf@val
  2317  00118C  CFDD F017          	movff	postdec2,i2printf@val+1
  2318  001190  0E02               	movlw	2
  2319  001192  2612               	addwf	i2printf@ap,f,c
  2320  001194  0E00               	movlw	0
  2321  001196  2213               	addwfc	i2printf@ap+1,f,c
  2322                           
  2323                           ;doprnt.c: 1261: if((int)val < 0) {
  2324  001198  AE17               	btfss	i2printf@val+1,7,c
  2325  00119A  D006               	goto	i2l240
  2326                           
  2327                           ;doprnt.c: 1262: flag |= 0x03;
  2328  00119C  0E03               	movlw	3
  2329  00119E  1214               	iorwf	i2printf@flag,f,c
  2330                           
  2331                           ;doprnt.c: 1263: val = -val;
  2332  0011A0  6C16               	negf	i2printf@val,c
  2333  0011A2  1E17               	comf	i2printf@val+1,f,c
  2334  0011A4  B0D8               	btfsc	status,0,c
  2335  0011A6  2A17               	incf	i2printf@val+1,f,c
  2336  0011A8                     i2l240:
  2337                           
  2338                           ;doprnt.c: 1264: }
  2339                           ;doprnt.c: 1266: }
  2340                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2341  0011A8  0E01               	movlw	1
  2342  0011AA  6E18               	movwf	i2printf@c,c
  2343  0011AC                     i2l1575:
  2344  0011AC  0E05               	movlw	5
  2345  0011AE  1818               	xorwf	i2printf@c,w,c
  2346  0011B0  B4D8               	btfsc	status,2,c
  2347  0011B2  D012               	goto	i2u73_40
  2348                           
  2349                           ;doprnt.c: 1306: if(val < dpowers[c])
  2350  0011B4  5018               	movf	i2printf@c,w,c
  2351  0011B6  0D02               	mullw	2
  2352  0011B8  0E01               	movlw	low _dpowers
  2353  0011BA  24F3               	addwf	prodl,w,c
  2354  0011BC  6EF6               	movwf	tblptrl,c
  2355  0011BE  0E10               	movlw	high _dpowers
  2356  0011C0  20F4               	addwfc	prodh,w,c
  2357  0011C2  6EF7               	movwf	tblptrh,c
  2358  0011C4                     	if	0	;There are less than 3 active tblptr bytes
  2359  0011C4                     	endif
  2360  0011C4  0009               	tblrd		*+
  2361  0011C6  50F5               	movf	tablat,w,c
  2362  0011C8  5C16               	subwf	i2printf@val,w,c
  2363  0011CA  0009               	tblrd		*+
  2364  0011CC  50F5               	movf	tablat,w,c
  2365  0011CE  5817               	subwfb	i2printf@val+1,w,c
  2366  0011D0  A0D8               	btfss	status,0,c
  2367  0011D2  D002               	goto	i2u73_40
  2368                           
  2369                           ;doprnt.c: 1307: break;
  2370  0011D4  2A18               	incf	i2printf@c,f,c
  2371  0011D6  D7EA               	goto	i2l1575
  2372  0011D8                     i2u73_40:
  2373                           
  2374                           ;doprnt.c: 1422: {
  2375                           ;doprnt.c: 1438: if(flag & 0x03)
  2376  0011D8  C014  F011         	movff	i2printf@flag,??i2_printf
  2377  0011DC  0E03               	movlw	3
  2378  0011DE  1611               	andwf	??i2_printf,f,c
  2379  0011E0  B4D8               	btfsc	status,2,c
  2380  0011E2  D003               	goto	i2l244
  2381                           
  2382                           ;doprnt.c: 1439: (putch('-') );
  2383  0011E4  0E2D               	movlw	45
  2384  0011E6  ECA8  F00B         	call	i2_putch
  2385  0011EA                     i2l244:
  2386                           
  2387                           ;doprnt.c: 1469: }
  2388                           ;doprnt.c: 1472: prec = c;
  2389  0011EA  C018  F015         	movff	i2printf@c,i2printf@prec
  2390                           
  2391                           ;doprnt.c: 1474: while(prec--) {
  2392  0011EE  D024               	goto	i2l245
  2393  0011F0                     
  2394                           ;doprnt.c: 1478: {
  2395                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2396  0011F0  5015               	movf	i2printf@prec,w,c
  2397  0011F2  0D02               	mullw	2
  2398  0011F4  0E01               	movlw	low _dpowers
  2399  0011F6  24F3               	addwf	prodl,w,c
  2400  0011F8  6EF6               	movwf	tblptrl,c
  2401  0011FA  0E10               	movlw	high _dpowers
  2402  0011FC  20F4               	addwfc	prodh,w,c
  2403  0011FE  6EF7               	movwf	tblptrh,c
  2404  001200                     	if	0	;There are less than 3 active tblptr bytes
  2405  001200                     	endif
  2406  001200  0009               	tblrd		*+
  2407  001202  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2408  001206  000A               	tblrd		*-
  2409  001208  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2410  00120C  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2411  001210  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2412  001214  EC9E  F00A         	call	i2___lwdiv	;wreg free
  2413  001218  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2414  00121C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2415  001220  0E00               	movlw	0
  2416  001222  6E0B               	movwf	i2___lwmod@divisor+1,c
  2417  001224  0E0A               	movlw	10
  2418  001226  6E0A               	movwf	i2___lwmod@divisor,c
  2419  001228  EC34  F00B         	call	i2___lwmod	;wreg free
  2420  00122C  5008               	movf	?i2___lwmod,w,c
  2421  00122E  0F30               	addlw	48
  2422  001230  6E18               	movwf	i2printf@c,c
  2423                           
  2424                           ;doprnt.c: 1523: }
  2425                           ;doprnt.c: 1524: (putch(c) );
  2426  001232  5018               	movf	i2printf@c,w,c
  2427  001234  ECA8  F00B         	call	i2_putch
  2428  001238                     i2l245:
  2429  001238  0615               	decf	i2printf@prec,f,c
  2430  00123A  2815               	incf	i2printf@prec,w,c
  2431  00123C  A4D8               	btfss	status,2,c
  2432  00123E  D7D8               	goto	i2l246
  2433  001240                     i2u75_40:
  2434  001240  C00D  FFF6         	movff	i2printf@f,tblptrl
  2435  001244  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2436  001248  4A0D               	infsnz	i2printf@f,f,c
  2437  00124A  2A0E               	incf	i2printf@f+1,f,c
  2438  00124C                     	if	0	;tblptru may be non-zero
  2439  00124C                     	endif
  2440  00124C                     	if	0	;tblptru may be non-zero
  2441  00124C                     	endif
  2442  00124C  0008               	tblrd		*
  2443  00124E  CFF5 F018          	movff	tablat,i2printf@c
  2444  001252  5018               	movf	i2printf@c,w,c
  2445  001254  B4D8               	btfsc	status,2,c
  2446  001256  0012               	return	
  2447  001258  D776               	goto	i2l231
  2448  00125A                     __end_ofi2_printf:
  2449                           	opt stack 0
  2450                           pclatu	equ	0xFFB
  2451                           pclath	equ	0xFFA
  2452                           tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           prodh	equ	0xFF4
  2457                           prodl	equ	0xFF3
  2458                           intcon	equ	0xFF2
  2459                           postinc0	equ	0xFEE
  2460                           fsr0h	equ	0xFEA
  2461                           fsr0l	equ	0xFE9
  2462                           wreg	equ	0xFE8
  2463                           fsr1h	equ	0xFE2
  2464                           fsr1l	equ	0xFE1
  2465                           postinc2	equ	0xFDE
  2466                           postdec2	equ	0xFDD
  2467                           fsr2h	equ	0xFDA
  2468                           fsr2l	equ	0xFD9
  2469                           status	equ	0xFD8
  2470                           
  2471 ;; *************** function i2_putch *****************
  2472 ;; Defined at:
  2473 ;;		line 24 in file "lcd.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;  data            1    wreg     unsigned char 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;  data            1    2[COMRAM] unsigned char 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2, status,0, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;Total ram usage:        1 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    1
  2494 ;; This function calls:
  2495 ;;		i2_lcdNibble
  2496 ;; This function is called by:
  2497 ;;		i2_printf
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text17
  2502  001750                     __ptext17:
  2503                           	opt stack 0
  2504  001750                     i2_putch:
  2505                           	opt stack 24
  2506                           
  2507                           ;incstack = 0
  2508                           ;i2putch@data stored from wreg
  2509  001750  6E03               	movwf	i2putch@data,c
  2510                           
  2511                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2512  001752  848C               	bsf	3980,2,c	;volatile
  2513                           
  2514                           ;lcd.c: 33: lcdNibble(data);
  2515  001754  5003               	movf	i2putch@data,w,c
  2516  001756  EC36  F00A         	call	i2_lcdNibble
  2517                           
  2518                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2519  00175A  0EA0               	movlw	160
  2520  00175C                     i2u117_47:
  2521  00175C  D000               	nop2	
  2522  00175E  2EE8               	decfsz	wreg,f,c
  2523  001760  D7FD               	bra	i2u117_47
  2524  001762  0012               	return		;funcret
  2525  001764                     __end_ofi2_putch:
  2526                           	opt stack 0
  2527                           pclatu	equ	0xFFB
  2528                           pclath	equ	0xFFA
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           prodh	equ	0xFF4
  2534                           prodl	equ	0xFF3
  2535                           intcon	equ	0xFF2
  2536                           postinc0	equ	0xFEE
  2537                           fsr0h	equ	0xFEA
  2538                           fsr0l	equ	0xFE9
  2539                           wreg	equ	0xFE8
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           postinc2	equ	0xFDE
  2543                           postdec2	equ	0xFDD
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548 ;; *************** function i2___lwmod *****************
  2549 ;; Defined at:
  2550 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  dividend        2    7[COMRAM] unsigned int 
  2553 ;;  divisor         2    9[COMRAM] unsigned int 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  __lwmod         1   11[COMRAM] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  2    7[COMRAM] unsigned int 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2565 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;Total ram usage:        5 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		i2_printf
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text18
  2579  001668                     __ptext18:
  2580                           	opt stack 0
  2581  001668                     i2___lwmod:
  2582                           	opt stack 25
  2583                           
  2584                           ;incstack = 0
  2585  001668  500A               	movf	i2___lwmod@divisor,w,c
  2586  00166A  100B               	iorwf	i2___lwmod@divisor+1,w,c
  2587  00166C  B4D8               	btfsc	status,2,c
  2588  00166E  D018               	goto	i2l668
  2589  001670  0E01               	movlw	1
  2590  001672  6E0C               	movwf	i2___lwmod@counter,c
  2591  001674  D004               	goto	i2l663
  2592  001676  90D8               	bcf	status,0,c
  2593  001678  360A               	rlcf	i2___lwmod@divisor,f,c
  2594  00167A  360B               	rlcf	i2___lwmod@divisor+1,f,c
  2595  00167C  2A0C               	incf	i2___lwmod@counter,f,c
  2596  00167E                     i2l663:
  2597  00167E  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  2598  001680  D7FA               	goto	i2l664
  2599  001682                     i2u59_40:
  2600  001682  500A               	movf	i2___lwmod@divisor,w,c
  2601  001684  5C08               	subwf	i2___lwmod@dividend,w,c
  2602  001686  500B               	movf	i2___lwmod@divisor+1,w,c
  2603  001688  5809               	subwfb	i2___lwmod@dividend+1,w,c
  2604  00168A  A0D8               	btfss	status,0,c
  2605  00168C  D004               	goto	i2l667
  2606  00168E  500A               	movf	i2___lwmod@divisor,w,c
  2607  001690  5E08               	subwf	i2___lwmod@dividend,f,c
  2608  001692  500B               	movf	i2___lwmod@divisor+1,w,c
  2609  001694  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  2610  001696                     i2l667:
  2611  001696  90D8               	bcf	status,0,c
  2612  001698  320B               	rrcf	i2___lwmod@divisor+1,f,c
  2613  00169A  320A               	rrcf	i2___lwmod@divisor,f,c
  2614  00169C  2E0C               	decfsz	i2___lwmod@counter,f,c
  2615  00169E  D7F1               	goto	i2u59_40
  2616  0016A0                     i2l668:
  2617  0016A0  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  2618  0016A4  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  2619  0016A8  0012               	return		;funcret
  2620  0016AA                     __end_ofi2___lwmod:
  2621                           	opt stack 0
  2622                           pclatu	equ	0xFFB
  2623                           pclath	equ	0xFFA
  2624                           tblptru	equ	0xFF8
  2625                           tblptrh	equ	0xFF7
  2626                           tblptrl	equ	0xFF6
  2627                           tablat	equ	0xFF5
  2628                           prodh	equ	0xFF4
  2629                           prodl	equ	0xFF3
  2630                           intcon	equ	0xFF2
  2631                           postinc0	equ	0xFEE
  2632                           fsr0h	equ	0xFEA
  2633                           fsr0l	equ	0xFE9
  2634                           wreg	equ	0xFE8
  2635                           fsr1h	equ	0xFE2
  2636                           fsr1l	equ	0xFE1
  2637                           postinc2	equ	0xFDE
  2638                           postdec2	equ	0xFDD
  2639                           fsr2h	equ	0xFDA
  2640                           fsr2l	equ	0xFD9
  2641                           status	equ	0xFD8
  2642                           
  2643 ;; *************** function i2___lwdiv *****************
  2644 ;; Defined at:
  2645 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  dividend        2    0[COMRAM] unsigned int 
  2648 ;;  divisor         2    2[COMRAM] unsigned int 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  2651 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  2    0[COMRAM] unsigned int 
  2654 ;; Registers used:
  2655 ;;		wreg, status,2, status,0
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2661 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;Total ram usage:        7 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		i2_printf
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text19
  2675  00153C                     __ptext19:
  2676                           	opt stack 0
  2677  00153C                     i2___lwdiv:
  2678                           	opt stack 25
  2679                           
  2680                           ;incstack = 0
  2681  00153C  0E00               	movlw	0
  2682  00153E  6E06               	movwf	i2___lwdiv@quotient+1,c
  2683  001540  0E00               	movlw	0
  2684  001542  6E05               	movwf	i2___lwdiv@quotient,c
  2685  001544  5003               	movf	i2___lwdiv@divisor,w,c
  2686  001546  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  2687  001548  B4D8               	btfsc	status,2,c
  2688  00154A  D01C               	goto	i2l658
  2689  00154C  0E01               	movlw	1
  2690  00154E  6E07               	movwf	i2___lwdiv@counter,c
  2691  001550  D004               	goto	i2l653
  2692  001552  90D8               	bcf	status,0,c
  2693  001554  3603               	rlcf	i2___lwdiv@divisor,f,c
  2694  001556  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  2695  001558  2A07               	incf	i2___lwdiv@counter,f,c
  2696  00155A                     i2l653:
  2697  00155A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  2698  00155C  D7FA               	goto	i2l654
  2699  00155E                     i2u56_40:
  2700  00155E  90D8               	bcf	status,0,c
  2701  001560  3605               	rlcf	i2___lwdiv@quotient,f,c
  2702  001562  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  2703  001564  5003               	movf	i2___lwdiv@divisor,w,c
  2704  001566  5C01               	subwf	i2___lwdiv@dividend,w,c
  2705  001568  5004               	movf	i2___lwdiv@divisor+1,w,c
  2706  00156A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  2707  00156C  A0D8               	btfss	status,0,c
  2708  00156E  D005               	goto	i2l657
  2709  001570  5003               	movf	i2___lwdiv@divisor,w,c
  2710  001572  5E01               	subwf	i2___lwdiv@dividend,f,c
  2711  001574  5004               	movf	i2___lwdiv@divisor+1,w,c
  2712  001576  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  2713  001578  8005               	bsf	i2___lwdiv@quotient,0,c
  2714  00157A                     i2l657:
  2715  00157A  90D8               	bcf	status,0,c
  2716  00157C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  2717  00157E  3203               	rrcf	i2___lwdiv@divisor,f,c
  2718  001580  2E07               	decfsz	i2___lwdiv@counter,f,c
  2719  001582  D7ED               	goto	i2u56_40
  2720  001584                     i2l658:
  2721  001584  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  2722  001588  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  2723  00158C  0012               	return		;funcret
  2724  00158E                     __end_ofi2___lwdiv:
  2725                           	opt stack 0
  2726                           pclatu	equ	0xFFB
  2727                           pclath	equ	0xFFA
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           intcon	equ	0xFF2
  2735                           postinc0	equ	0xFEE
  2736                           fsr0h	equ	0xFEA
  2737                           fsr0l	equ	0xFE9
  2738                           wreg	equ	0xFE8
  2739                           fsr1h	equ	0xFE2
  2740                           fsr1l	equ	0xFE1
  2741                           postinc2	equ	0xFDE
  2742                           postdec2	equ	0xFDD
  2743                           fsr2h	equ	0xFDA
  2744                           fsr2l	equ	0xFD9
  2745                           status	equ	0xFD8
  2746                           
  2747 ;; *************** function i2_initLCD *****************
  2748 ;; Defined at:
  2749 ;;		line 60 in file "lcd.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;		None
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0, cstack
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;Total ram usage:        1 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    2
  2770 ;; This function calls:
  2771 ;;		i2_lcdInst
  2772 ;; This function is called by:
  2773 ;;		_interruptHandler
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text20
  2778  0015DA                     __ptext20:
  2779                           	opt stack 0
  2780  0015DA                     i2_initLCD:
  2781                           	opt stack 24
  2782                           
  2783                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  2784                           
  2785                           ;incstack = 0
  2786  0015DA  0E9C               	movlw	156
  2787  0015DC  6E04               	movwf	??i2_initLCD& (0+255),c
  2788  0015DE  0ED7               	movlw	215
  2789  0015E0                     i2u118_47:
  2790  0015E0  2EE8               	decfsz	wreg,f,c
  2791  0015E2  D7FE               	bra	i2u118_47
  2792  0015E4  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2793  0015E6  D7FC               	bra	i2u118_47
  2794  0015E8  F000               	nop	
  2795                           
  2796                           ;lcd.c: 69: lcdInst(0b00110011);
  2797  0015EA  0E33               	movlw	51
  2798  0015EC  ECB2  F00B         	call	i2_lcdInst
  2799                           
  2800                           ;lcd.c: 70: lcdInst(0b00110010);
  2801  0015F0  0E32               	movlw	50
  2802  0015F2  ECB2  F00B         	call	i2_lcdInst
  2803                           
  2804                           ;lcd.c: 71: lcdInst(0b00101000);
  2805  0015F6  0E28               	movlw	40
  2806  0015F8  ECB2  F00B         	call	i2_lcdInst
  2807                           
  2808                           ;lcd.c: 72: lcdInst(0b00001111);
  2809  0015FC  0E0F               	movlw	15
  2810  0015FE  ECB2  F00B         	call	i2_lcdInst
  2811                           
  2812                           ;lcd.c: 73: lcdInst(0b00000110);
  2813  001602  0E06               	movlw	6
  2814  001604  ECB2  F00B         	call	i2_lcdInst
  2815                           
  2816                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  2817  001608  0E01               	movlw	1
  2818  00160A  ECB2  F00B         	call	i2_lcdInst
  2819  00160E  0E9C               	movlw	156
  2820  001610  6E04               	movwf	??i2_initLCD& (0+255),c
  2821  001612  0ED7               	movlw	215
  2822  001614                     i2u119_47:
  2823  001614  2EE8               	decfsz	wreg,f,c
  2824  001616  D7FE               	bra	i2u119_47
  2825  001618  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2826  00161A  D7FC               	bra	i2u119_47
  2827  00161C  F000               	nop	
  2828                           
  2829                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2830  00161E  0E0F               	movlw	15
  2831  001620  ECB2  F00B         	call	i2_lcdInst
  2832  001624  0012               	return		;funcret
  2833  001626                     __end_ofi2_initLCD:
  2834                           	opt stack 0
  2835                           pclatu	equ	0xFFB
  2836                           pclath	equ	0xFFA
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           postinc0	equ	0xFEE
  2845                           fsr0h	equ	0xFEA
  2846                           fsr0l	equ	0xFE9
  2847                           wreg	equ	0xFE8
  2848                           fsr1h	equ	0xFE2
  2849                           fsr1l	equ	0xFE1
  2850                           postinc2	equ	0xFDE
  2851                           postdec2	equ	0xFDD
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function i2_lcdInst *****************
  2857 ;; Defined at:
  2858 ;;		line 11 in file "lcd.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  data            1    wreg     unsigned char 
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;  data            1    2[COMRAM] unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2, status,0, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;Total ram usage:        1 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    1
  2879 ;; This function calls:
  2880 ;;		i2_lcdNibble
  2881 ;; This function is called by:
  2882 ;;		_interruptHandler
  2883 ;;		i2_initLCD
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text21
  2888  001764                     __ptext21:
  2889                           	opt stack 0
  2890  001764                     i2_lcdInst:
  2891                           	opt stack 25
  2892                           
  2893                           ;incstack = 0
  2894                           ;i2lcdInst@data stored from wreg
  2895  001764  6E03               	movwf	i2lcdInst@data,c
  2896                           
  2897                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2898  001766  948C               	bcf	3980,2,c	;volatile
  2899                           
  2900                           ;lcd.c: 20: lcdNibble(data);
  2901  001768  5003               	movf	i2lcdInst@data,w,c
  2902  00176A  EC36  F00A         	call	i2_lcdNibble
  2903                           
  2904                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2905  00176E  0EA0               	movlw	160
  2906  001770                     i2u120_47:
  2907  001770  D000               	nop2	
  2908  001772  2EE8               	decfsz	wreg,f,c
  2909  001774  D7FD               	bra	i2u120_47
  2910  001776  0012               	return		;funcret
  2911  001778                     __end_ofi2_lcdInst:
  2912                           	opt stack 0
  2913                           pclatu	equ	0xFFB
  2914                           pclath	equ	0xFFA
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           intcon	equ	0xFF2
  2922                           postinc0	equ	0xFEE
  2923                           fsr0h	equ	0xFEA
  2924                           fsr0l	equ	0xFE9
  2925                           wreg	equ	0xFE8
  2926                           fsr1h	equ	0xFE2
  2927                           fsr1l	equ	0xFE1
  2928                           postinc2	equ	0xFDE
  2929                           postdec2	equ	0xFDD
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function i2_lcdNibble *****************
  2935 ;; Defined at:
  2936 ;;		line 37 in file "lcd.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;  data            1    wreg     unsigned char 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  data            1    1[COMRAM] unsigned char 
  2941 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2, status,0
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;Total ram usage:        2 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		i2_lcdInst
  2961 ;;		i2_putch
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text22
  2966  00146C                     __ptext22:
  2967                           	opt stack 0
  2968  00146C                     i2_lcdNibble:
  2969                           	opt stack 24
  2970                           
  2971                           ;incstack = 0
  2972                           ;i2lcdNibble@data stored from wreg
  2973  00146C  6E02               	movwf	i2lcdNibble@data,c
  2974                           
  2975                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2976  00146E  5002               	movf	i2lcdNibble@data,w,c
  2977  001470  0BF0               	andlw	240
  2978  001472  6E01               	movwf	i2lcdNibble@temp,c
  2979                           
  2980                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2981  001474  508C               	movf	3980,w,c	;volatile
  2982  001476  0B0F               	andlw	15
  2983  001478  6E8C               	movwf	3980,c	;volatile
  2984                           
  2985                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2986  00147A  5001               	movf	i2lcdNibble@temp,w,c
  2987  00147C  108C               	iorwf	3980,w,c	;volatile
  2988  00147E  6E8C               	movwf	3980,c	;volatile
  2989                           
  2990                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2991  001480  0E00               	movlw	0
  2992  001482  BEF2               	btfsc	intcon,7,c	;volatile
  2993  001484  0E01               	movlw	1
  2994  001486  6E50               	movwf	_LCDinterruptState,c
  2995  001488  9EF2               	bcf	intcon,7,c	;volatile
  2996  00148A  868C               	bsf	3980,3,c	;volatile
  2997  00148C  0E42               	movlw	66
  2998  00148E                     i2u121_47:
  2999  00148E  2EE8               	decfsz	wreg,f,c
  3000  001490  D7FE               	bra	i2u121_47
  3001  001492  D000               	nop2	
  3002  001494  968C               	bcf	3980,3,c	;volatile
  3003  001496  0EA0               	movlw	160
  3004  001498                     i2u122_47:
  3005  001498  D000               	nop2	
  3006  00149A  2EE8               	decfsz	wreg,f,c
  3007  00149C  D7FD               	bra	i2u122_47
  3008  00149E  B050               	btfsc	_LCDinterruptState,0,c
  3009  0014A0  D002               	bra	i2u47_45
  3010  0014A2  9EF2               	bcf	intcon,7,c	;volatile
  3011  0014A4  D001               	bra	i2u47_46
  3012  0014A6                     i2u47_45:
  3013  0014A6  8EF2               	bsf	intcon,7,c	;volatile
  3014  0014A8                     i2u47_46:
  3015                           
  3016                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3017  0014A8  3802               	swapf	i2lcdNibble@data,w,c
  3018  0014AA  0BF0               	andlw	240
  3019  0014AC  6E02               	movwf	i2lcdNibble@data,c
  3020                           
  3021                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3022  0014AE  5002               	movf	i2lcdNibble@data,w,c
  3023  0014B0  0BF0               	andlw	240
  3024  0014B2  6E01               	movwf	i2lcdNibble@temp,c
  3025                           
  3026                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3027  0014B4  508C               	movf	3980,w,c	;volatile
  3028  0014B6  0B0F               	andlw	15
  3029  0014B8  6E8C               	movwf	3980,c	;volatile
  3030                           
  3031                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3032  0014BA  5001               	movf	i2lcdNibble@temp,w,c
  3033  0014BC  108C               	iorwf	3980,w,c	;volatile
  3034  0014BE  6E8C               	movwf	3980,c	;volatile
  3035                           
  3036                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3037  0014C0  0E00               	movlw	0
  3038  0014C2  BEF2               	btfsc	intcon,7,c	;volatile
  3039  0014C4  0E01               	movlw	1
  3040  0014C6  6E50               	movwf	_LCDinterruptState,c
  3041  0014C8  9EF2               	bcf	intcon,7,c	;volatile
  3042  0014CA  868C               	bsf	3980,3,c	;volatile
  3043  0014CC  0E42               	movlw	66
  3044  0014CE                     i2u123_47:
  3045  0014CE  2EE8               	decfsz	wreg,f,c
  3046  0014D0  D7FE               	bra	i2u123_47
  3047  0014D2  D000               	nop2	
  3048  0014D4  968C               	bcf	3980,3,c	;volatile
  3049  0014D6  0EA0               	movlw	160
  3050  0014D8                     i2u124_47:
  3051  0014D8  D000               	nop2	
  3052  0014DA  2EE8               	decfsz	wreg,f,c
  3053  0014DC  D7FD               	bra	i2u124_47
  3054  0014DE  B050               	btfsc	_LCDinterruptState,0,c
  3055  0014E0  D002               	bra	i2u48_45
  3056  0014E2  9EF2               	bcf	intcon,7,c	;volatile
  3057  0014E4  D001               	bra	i2u48_46
  3058  0014E6                     i2u48_45:
  3059  0014E6  8EF2               	bsf	intcon,7,c	;volatile
  3060  0014E8                     i2u48_46:
  3061  0014E8  0012               	return		;funcret
  3062  0014EA                     __end_ofi2_lcdNibble:
  3063                           	opt stack 0
  3064                           pclatu	equ	0xFFB
  3065                           pclath	equ	0xFFA
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           prodh	equ	0xFF4
  3071                           prodl	equ	0xFF3
  3072                           intcon	equ	0xFF2
  3073                           postinc0	equ	0xFEE
  3074                           fsr0h	equ	0xFEA
  3075                           fsr0l	equ	0xFE9
  3076                           wreg	equ	0xFE8
  3077                           fsr1h	equ	0xFE2
  3078                           fsr1l	equ	0xFE1
  3079                           postinc2	equ	0xFDE
  3080                           postdec2	equ	0xFDD
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           pclatu	equ	0xFFB
  3085                           pclath	equ	0xFFA
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           prodh	equ	0xFF4
  3091                           prodl	equ	0xFF3
  3092                           intcon	equ	0xFF2
  3093                           postinc0	equ	0xFEE
  3094                           fsr0h	equ	0xFEA
  3095                           fsr0l	equ	0xFE9
  3096                           wreg	equ	0xFE8
  3097                           fsr1h	equ	0xFE2
  3098                           fsr1l	equ	0xFE1
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           fsr2h	equ	0xFDA
  3102                           fsr2l	equ	0xFD9
  3103                           status	equ	0xFD8
  3104                           
  3105                           	psect	rparam
  3106  0000                     pclatu	equ	0xFFB
  3107                           pclath	equ	0xFFA
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           prodh	equ	0xFF4
  3113                           prodl	equ	0xFF3
  3114                           intcon	equ	0xFF2
  3115                           postinc0	equ	0xFEE
  3116                           fsr0h	equ	0xFEA
  3117                           fsr0l	equ	0xFE9
  3118                           wreg	equ	0xFE8
  3119                           fsr1h	equ	0xFE2
  3120                           fsr1l	equ	0xFE1
  3121                           postinc2	equ	0xFDE
  3122                           postdec2	equ	0xFDD
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           status	equ	0xFD8
  3126                           
  3127                           	psect	temp
  3128  000051                     btemp:
  3129                           	opt stack 0
  3130  000051                     	ds	1
  3131  0000                     int$flags	set	btemp
  3132  0000                     wtemp6	set	btemp+1
  3133                           pclatu	equ	0xFFB
  3134                           pclath	equ	0xFFA
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           prodh	equ	0xFF4
  3140                           prodl	equ	0xFF3
  3141                           intcon	equ	0xFF2
  3142                           postinc0	equ	0xFEE
  3143                           fsr0h	equ	0xFEA
  3144                           fsr0l	equ	0xFE9
  3145                           wreg	equ	0xFE8
  3146                           fsr1h	equ	0xFE2
  3147                           fsr1l	equ	0xFE1
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    16
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     70      80
    BANK0           128      2       2
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[3]), STR_2(CODE[11]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2762
                                             69 COMRAM     1     1      0
                                              0 BANK0      2     2      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1766
                                             57 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             47 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             52 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             45 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             48 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             47 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             45 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     332
                                             48 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     391
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     301
                                             46 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      90
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    21    21      0    1265
                                             24 COMRAM    21    21      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            21    17      4     972
                                             12 COMRAM    12     8      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2       2       5        1.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     46      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      52      34        0.0%
DATA                 0      0      52       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr  2 15:29:22 2018

                __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l231 1028                          l240 108A  
                        l232 1038                          l154 1394                          l244 10CC  
                        l245 111A                          l157 13C4                          l246 10D2  
                        l238 1062                          l653 1508                          l654 1500  
                        l663 163C                          l664 1634                          l657 1528  
                        l658 1532                          l667 1654                          l668 165E  
               __CFG_CPB$OFF 000000                          u815 1428                          u816 142A  
                        u825 1468                          u826 146A                          u860 150C  
                        u950 10BA                          u890 1640                          u970 1122  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1825 108E                         _ADON 007E10                         STR_1 1019  
                       STR_2 1011                         STR_3 1019                         u1050 13A0  
                       u1107 15C8                         u1117 1748                         u1127 1410  
                       u1137 141A                         u1058 13A2                         u1147 1450  
                       u1157 145A                         u1077 13E4                         _LATA 000F89  
                       _LATB 000F8A                         u1087 1734                         _LATC 000F8B  
                       _LATD 000F8C                         u1097 1594                         _LATE 000F8D  
                       _RBIE 007F93                         _RBIF 007F90                         _main 1342  
   __end_of_interruptHandler 1342                         fsr0h 000FEA                         fsr1h 000FE2  
         i2___lwdiv@quotient 0005                         fsr2h 000FDA                         fsr0l 000FE9  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0051  
           __end_of_I2C_init 16D4                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000              __end_ofi2_putch 1764  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                  i2_lcdNibble 146C  
           __end_of_LCD_LEFT 100C             ?_I2C_Master_Init 002E             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lwdiv 153C  
            __end_of___lwmod 1668                        i2l231 1146                        i2l240 11A8  
                      i2l232 1156                        i2l244 11EA                        i2l245 1238  
                      i2l246 11F0                        i2l238 1180                        i2l166 12F4  
                      i2l653 155A                        i2l654 1552                        i2l663 167E  
                      i2l664 1676                        i2l657 157A                        i2l658 1584  
                      i2l667 1696                        i2l668 16A0                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 1750               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 15DA               __CFG_EBTRB$OFF 000000              __end_of_dpowers 100B  
                      _putch 1728                        pclath 000FFA                        tablat 000FF5  
          _LCDinterruptState 0050                        status 000FD8                        wtemp6 0052  
             __CFG_PBADEN$ON 000000        __size_of_I2C_sendData 0022             __end_ofi2_printf 125A  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042              __initialization 16F6  
         __size_ofi2_lcdInst 0014                 __end_of_main 13EE                   i2printf@ap 0012  
         __size_ofi2_initLCD 004C            __end_of_LCD_RIGHT 100D                       ??_main 0046  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 002F  
         ??_I2C_Master_Start 002F                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0031                       _ADRESH 000FC4                       _ADRESL 000FC3  
            i2lcdNibble@data 0002                       ?_putch 0001                 _I2C_sendData 16D4  
            i2lcdNibble@temp 0001                       i2l1575 11AC                       i2l1665 12F6  
                  ??i2_putch 0003                       _SSPADD 000FC8                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000                    ??___lwdiv 0032  
                  ??___lwmod 0039                       clear_0 16FC                    ??_lcdInst 0030  
                     _printf 101E                    ??_initLCD 0031            __end_ofi2___lwdiv 158E  
               __mediumconst 0000            __end_ofi2___lwmod 16AA                    ?_I2C_init 0001  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
          __end_ofi2_lcdInst 1778            __end_ofi2_initLCD 1626                   __accesstop 0080  
    __end_of__initialization 1702                ___rparam_used 000001           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                __end_of_putch 173C                  i2printf@val 0016  
         __size_of_lcdNibble 007E                  i2putch@data 0003                   ??_I2C_init 0032  
                  ?i2_printf 000D                      ??_putch 0030            ?_interruptHandler 0001  
         ??_interruptHandler 0019                 ?i2_lcdNibble 0001                      ?_printf 003A  
                 ??i2_printf 0011                      i2u47_45 14A6                      i2u47_46 14A8  
                    i2u56_40 155E                      i2u48_45 14E6                      i2u48_46 14E8  
                    i2u73_40 11D8                      i2u59_40 1682                      i2u75_40 1240  
                    i2u79_40 12B4                      i2u79_48 12B6         lcd@LCDinterruptState 004F  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
                    _B_count 004D                      i2_putch 1750                      _N_count 004B  
          __end_of_lcdNibble 146C                      _S_count 0049                      __Hparam 0000  
                    __Lparam 0000                      _W_count 0047                      ___lwdiv 14EA  
                    ___lwmod 1626                 __psmallconst 1000                      __pcinit 16F6  
                    __ramtop 1000                      _lcdInst 173C                      __ptext0 1342  
                    __ptext1 101E                      __ptext2 1728                      __ptext3 1626  
                    __ptext4 14EA                      __ptext5 158E                      __ptext6 173C  
                    __ptext7 13EE                      __ptext8 16D4                      __ptext9 16AA  
            __size_of_printf 011E                      _initLCD 158E                      _dpowers 1001  
                  _LCD_RIGHT 100C     __size_of_I2C_Master_Init 0018     __size_of_I2C_Master_Wait 0012  
   __size_of_I2C_Master_Stop 0008               __pintcode_body 125A         end_of_initialization 1702  
      __end_of_LCD_SIZE_HORZ 100F        __end_of_LCD_SIZE_VERT 100E                __Lmediumconst 0000  
                    int_func 125A    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
                    printf@c 0045                      printf@f 003A                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                    _PORTBbits 000F81  
                  _TRISBbits 000F93                    _TRISCbits 000F94            __size_of_I2C_init 002A  
          i2___lwdiv@divisor 0003                    i2___lwdiv 153C                    i2___lwmod 1668  
          i2___lwdiv@counter 0007                    i2_lcdInst 1764                    i2_initLCD 15DA  
       __size_ofi2_lcdNibble 007E                i2lcdInst@data 0003        interruptHandler@input 002C  
             __end_of_printf 113C                 i2printf@flag 0014                 i2printf@prec 0015  
        start_initialization 16F6                    i2printf@c 0018                    i2printf@f 000D  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008            __size_ofi2_printf 011E  
          ??_I2C_Master_Init 0032            ??_I2C_Master_Wait 002E                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 002F             __CFG_OSC$INTIO67 000000                   ?i2_initLCD 0001  
   I2C_Master_Init@clockFreq 002E             __CFG_LPT1OSC$OFF 000000                     ??_printf 003E  
  __size_of_interruptHandler 133A                  __pbssCOMRAM 0047                __pcstackBANK0 0080  
          i2___lwmod@divisor 000A            i2___lwmod@counter 000C                     ?i2_putch 0001  
           _I2C_Master_Start 179C             _I2C_Master_Write 178A             ___lwdiv@dividend 002E  
          __CFG_CCP2MX$PORTC 000000                    __pintcode 0008                    _lcdNibble 13EE  
                   ?___lwdiv 002E                     ?___lwmod 0035                     ?_lcdInst 0001  
                   ?_initLCD 0001                  __smallconst 1000                     _I2C_init 16AA  
           ___lwdiv@quotient 0033                ?_I2C_sendData 0001                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 0014                     _LCD_LEFT 100B  
                ??i2_lcdInst 0003                     _LATCbits 000F8B                     _LATDbits 000F8C  
                ??i2_initLCD 0004                     i2u120_47 1770                     i2u121_47 148E  
                   i2u122_47 1498                     i2u123_47 14CE                     i2u124_47 14D8  
                   i2u116_47 12EC                     i2u117_47 175C                     i2u118_47 15E0  
                   i2u119_47 1614             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
                 _ADCON0bits 000FC2                   _ADCON2bits 000FC0                lcdNibble@data 002F  
                 printf@flag 0041                lcdNibble@temp 002E                   printf@prec 0042  
                  main@input 0080                     i2_printf 113C               ??_I2C_sendData 0031  
             _LCD_HORZ_LIMIT 1010             __size_ofi2_putch 0014                     __Hrparam 0000  
      I2C_sendData@char_data 0031                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___lwdiv 0052             __size_of___lwmod 0042             _interruptHandler 0008  
           __size_of_lcdInst 0014              _I2C_Master_Init 1710             __size_of_initLCD 004C  
            _I2C_Master_Wait 1778              _I2C_Master_Stop 1794       __end_of_LCD_HORZ_LIMIT 1011  
            ___lwdiv@divisor 0030              ___lwdiv@counter 0032                     __ptext10 178A  
                   __ptext11 1794                     __ptext20 15DA                     __ptext12 179C  
                   __ptext21 1764                     __ptext13 1778                     __ptext22 146C  
                   __ptext14 1710                     __ptext16 113C                     __ptext17 1750  
                   __ptext18 1668                     __ptext19 153C               _LCD_VERT_LIMIT 100F  
              __size_of_main 00AC                ??i2_lcdNibble 0001                  ??_lcdNibble 002E  
                   int$flags 0051                    printf@val 0043  I2C_Master_Write@byteToWrite 002F  
                  putch@data 0030     __end_of_I2C_Master_Start 17A4                  _OSCTUNEbits 000F9B  
   __end_of_I2C_Master_Write 1794                   _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1010  
                   intlevel2 0000                _LCD_SIZE_HORZ 100E             ___lwmod@dividend 0035  
              _LCD_SIZE_VERT 100D                   _OSCCONbits 000FD3                     printf@ap 003F  
       __end_of_I2C_sendData 16F6      __end_of_I2C_Master_Init 1728      __end_of_I2C_Master_Wait 178A  
    __end_of_I2C_Master_Stop 179C                  lcdInst@data 0030          __end_ofi2_lcdNibble 14EA  
            ___lwmod@divisor 0037              ___lwmod@counter 0039                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5  
