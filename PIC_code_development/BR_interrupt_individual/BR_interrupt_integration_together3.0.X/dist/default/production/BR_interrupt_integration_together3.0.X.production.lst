

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr  2 22:06:25 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  00190A                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _W_input
    80  00190A  0001               	dw	1
    81                           
    82                           ;initializer for _S_input
    83  00190C  0001               	dw	1
    84                           
    85                           ;initializer for _N_input
    86  00190E  0001               	dw	1
    87                           
    88                           ;initializer for _B_input
    89  001910  0001               	dw	1
    90                           
    91                           	psect	smallconst
    92  001000                     __psmallconst:
    93                           	opt stack 0
    94  001000  00                 	db	0
    95  001001                     _dpowers:
    96                           	opt stack 0
    97  001001  0001               	dw	1
    98  001003  000A               	dw	10
    99  001005  0064               	dw	100
   100  001007  03E8               	dw	1000
   101  001009  2710               	dw	10000
   102  00100B                     __end_of_dpowers:
   103                           	opt stack 0
   104  00100B                     _LCD_LEFT:
   105                           	opt stack 0
   106  00100B  00                 	db	0
   107  00100C                     __end_of_LCD_LEFT:
   108                           	opt stack 0
   109  00100C                     _LCD_RIGHT:
   110                           	opt stack 0
   111  00100C  01                 	db	1
   112  00100D                     __end_of_LCD_RIGHT:
   113                           	opt stack 0
   114  00100D                     _LCD_SIZE_VERT:
   115                           	opt stack 0
   116  00100D  02                 	db	2
   117  00100E                     __end_of_LCD_SIZE_VERT:
   118                           	opt stack 0
   119  00100E                     _LCD_SIZE_HORZ:
   120                           	opt stack 0
   121  00100E  10                 	db	16
   122  00100F                     __end_of_LCD_SIZE_HORZ:
   123                           	opt stack 0
   124  00100F                     _LCD_VERT_LIMIT:
   125                           	opt stack 0
   126  00100F  02                 	db	2
   127  001010                     __end_of_LCD_VERT_LIMIT:
   128                           	opt stack 0
   129  001010                     _LCD_HORZ_LIMIT:
   130                           	opt stack 0
   131  001010  28                 	db	40
   132  001011                     __end_of_LCD_HORZ_LIMIT:
   133                           	opt stack 0
   134  0000                     _SSPBUF	set	4041
   135  0000                     _SSPCON2bits	set	4037
   136  0000                     _SSPADD	set	4040
   137  0000                     _SSPCON2	set	4037
   138  0000                     _SSPCON1	set	4038
   139  0000                     _SSPSTAT	set	4039
   140  0000                     _SSPCON1bits	set	4038
   141  0000                     _ADRESL	set	4035
   142  0000                     _ADRESH	set	4036
   143  0000                     _ADCON0bits	set	4034
   144  0000                     _PORTBbits	set	3969
   145  0000                     _TRISBbits	set	3987
   146  0000                     _TRISCbits	set	3988
   147  0000                     _LATCbits	set	3979
   148  0000                     _ADCON2bits	set	4032
   149  0000                     _ADCON1	set	4033
   150  0000                     _ADCON0	set	4034
   151  0000                     _TRISE	set	3990
   152  0000                     _TRISD	set	3989
   153  0000                     _TRISC	set	3988
   154  0000                     _TRISB	set	3987
   155  0000                     _TRISA	set	3986
   156  0000                     _LATE	set	3981
   157  0000                     _LATC	set	3979
   158  0000                     _LATB	set	3978
   159  0000                     _LATA	set	3977
   160  0000                     _OSCTUNEbits	set	3995
   161  0000                     _OSCCONbits	set	4051
   162  0000                     _INTCONbits	set	4082
   163  0000                     _LATD	set	3980
   164  0000                     _LATDbits	set	3980
   165  0000                     _ADON	set	32272
   166  0000                     _RBIF	set	32656
   167  0000                     _RBIE	set	32659
   168  001011                     STR_1:
   169  001011  42                 	db	66	;'B'
   170  001012  3A                 	db	58	;':'
   171  001013  25                 	db	37
   172  001014  64                 	db	100	;'d'
   173  001015  2C                 	db	44
   174  001016  4E                 	db	78	;'N'
   175  001017  3A                 	db	58	;':'
   176  001018  25                 	db	37
   177  001019  64                 	db	100	;'d'
   178  00101A  2C                 	db	44
   179  00101B  53                 	db	83	;'S'
   180  00101C  3A                 	db	58	;':'
   181  00101D  25                 	db	37
   182  00101E  64                 	db	100	;'d'
   183  00101F  2C                 	db	44
   184  001020  57                 	db	87	;'W'
   185  001021  3A                 	db	58	;':'
   186  001022  25                 	db	37
   187  001023  64                 	db	100	;'d'
   188  001024  00                 	db	0
   189  001025                     STR_5:
   190  001025  77                 	db	119	;'w'
   191  001026  61                 	db	97	;'a'
   192  001027  73                 	db	115	;'s'
   193  001028  68                 	db	104	;'h'
   194  001029  65                 	db	101	;'e'
   195  00102A  72                 	db	114	;'r'
   196  00102B  5F                 	db	95	;'_'
   197  00102C  69                 	db	105	;'i'
   198  00102D  6E                 	db	110	;'n'
   199  00102E  74                 	db	116	;'t'
   200  00102F  65                 	db	101	;'e'
   201  001030  72                 	db	114	;'r'
   202  001031  72                 	db	114	;'r'
   203  001032  75                 	db	117	;'u'
   204  001033  70                 	db	112	;'p'
   205  001034  74                 	db	116	;'t'
   206  001035  00                 	db	0
   207  001036                     STR_4:
   208  001036  62                 	db	98	;'b'
   209  001037  6F                 	db	111	;'o'
   210  001038  6C                 	db	108	;'l'
   211  001039  74                 	db	116	;'t'
   212  00103A  5F                 	db	95	;'_'
   213  00103B  69                 	db	105	;'i'
   214  00103C  6E                 	db	110	;'n'
   215  00103D  74                 	db	116	;'t'
   216  00103E  65                 	db	101	;'e'
   217  00103F  72                 	db	114	;'r'
   218  001040  72                 	db	114	;'r'
   219  001041  75                 	db	117	;'u'
   220  001042  70                 	db	112	;'p'
   221  001043  74                 	db	116	;'t'
   222  001044  00                 	db	0
   223  001045                     STR_6:
   224  001045  69                 	db	105	;'i'
   225  001046  6E                 	db	110	;'n'
   226  001047  74                 	db	116	;'t'
   227  001048  65                 	db	101	;'e'
   228  001049  72                 	db	114	;'r'
   229  00104A  72                 	db	114	;'r'
   230  00104B  75                 	db	117	;'u'
   231  00104C  70                 	db	112	;'p'
   232  00104D  74                 	db	116	;'t'
   233  00104E  65                 	db	101	;'e'
   234  00104F  64                 	db	100	;'d'
   235  001050  00                 	db	0
   236  0000                     
   237                           ; #config settings
   238  001051  00                 	db	0	; dummy byte at the end
   239  0000                     
   240                           	psect	cinit
   241  001800                     __pcinit:
   242                           	opt stack 0
   243  001800                     start_initialization:
   244                           	opt stack 0
   245  001800                     __initialization:
   246                           	opt stack 0
   247                           
   248                           ; Initialize objects allocated to COMRAM (8 bytes)
   249                           ; load TBLPTR registers with __pidataCOMRAM
   250  001800  0E0A               	movlw	low __pidataCOMRAM
   251  001802  6EF6               	movwf	tblptrl,c
   252  001804  0E19               	movlw	high __pidataCOMRAM
   253  001806  6EF7               	movwf	tblptrh,c
   254  001808  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   255  00180A  6EF8               	movwf	tblptru,c
   256  00180C  EE00  F04C         	lfsr	0,__pdataCOMRAM
   257  001810  EE10 F008          	lfsr	1,8
   258  001814                     copy_data0:
   259  001814  0009               	tblrd		*+
   260  001816  CFF5 FFEE          	movff	tablat,postinc0
   261  00181A  50E5               	movf	postdec1,w,c
   262  00181C  50E1               	movf	fsr1l,w,c
   263  00181E  E1FA               	bnz	copy_data0
   264                           
   265                           ; Clear objects allocated to COMRAM (10 bytes)
   266  001820  EE00  F042         	lfsr	0,__pbssCOMRAM
   267  001824  0E0A               	movlw	10
   268  001826                     clear_0:
   269  001826  6AEE               	clrf	postinc0,c
   270  001828  06E8               	decf	wreg,f,c
   271  00182A  E1FD               	bnz	clear_0
   272  00182C                     end_of_initialization:
   273                           	opt stack 0
   274  00182C                     __end_of__initialization:
   275                           	opt stack 0
   276  00182C  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   277  00182E  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   278  001830  0E00               	movlw	low (__Lmediumconst shr (0+16))
   279  001832  6EF8               	movwf	tblptru,c
   280  001834  0100               	movlb	0
   281  001836  EF29  F008         	goto	_main	;jump to C main() function
   282                           tblptru	equ	0xFF8
   283                           tblptrh	equ	0xFF7
   284                           tblptrl	equ	0xFF6
   285                           tablat	equ	0xFF5
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           postdec1	equ	0xFE5
   289                           fsr1l	equ	0xFE1
   290                           
   291                           	psect	bssCOMRAM
   292  000042                     __pbssCOMRAM:
   293                           	opt stack 0
   294  000042                     _W_count:
   295                           	opt stack 0
   296  000042                     	ds	2
   297  000044                     _S_count:
   298                           	opt stack 0
   299  000044                     	ds	2
   300  000046                     _N_count:
   301                           	opt stack 0
   302  000046                     	ds	2
   303  000048                     _B_count:
   304                           	opt stack 0
   305  000048                     	ds	2
   306  00004A                     	ds	1
   307  00004B                     _LCDinterruptState:
   308                           	opt stack 0
   309  00004B                     	ds	1
   310                           tblptru	equ	0xFF8
   311                           tblptrh	equ	0xFF7
   312                           tblptrl	equ	0xFF6
   313                           tablat	equ	0xFF5
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           postdec1	equ	0xFE5
   317                           fsr1l	equ	0xFE1
   318                           
   319                           	psect	dataCOMRAM
   320  00004C                     __pdataCOMRAM:
   321                           	opt stack 0
   322  00004C                     _W_input:
   323                           	opt stack 0
   324  00004C                     	ds	2
   325  00004E                     _S_input:
   326                           	opt stack 0
   327  00004E                     	ds	2
   328  000050                     _N_input:
   329                           	opt stack 0
   330  000050                     	ds	2
   331  000052                     _B_input:
   332                           	opt stack 0
   333  000052                     	ds	2
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           postdec1	equ	0xFE5
   341                           fsr1l	equ	0xFE1
   342                           
   343                           	psect	cstackBANK0
   344  000080                     __pcstackBANK0:
   345                           	opt stack 0
   346  000080                     printf@ap:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x0
   350  000080                     	ds	2
   351  000082                     printf@flag:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x2
   355  000082                     	ds	1
   356  000083                     printf@prec:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x3
   360  000083                     	ds	1
   361  000084                     printf@val:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x4
   365  000084                     	ds	2
   366  000086                     printf@c:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x6
   370  000086                     	ds	1
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           postdec1	equ	0xFE5
   378                           fsr1l	equ	0xFE1
   379                           
   380                           	psect	cstackCOMRAM
   381  000001                     __pcstackCOMRAM:
   382                           	opt stack 0
   383  000001                     ?i2___lwdiv:
   384                           	opt stack 0
   385  000001                     i2lcdNibble@temp:
   386                           	opt stack 0
   387  000001                     i2___lwdiv@dividend:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x0
   391  000001                     	ds	1
   392  000002                     i2lcdNibble@data:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x1
   396  000002                     	ds	1
   397  000003                     i2lcdInst@data:
   398                           	opt stack 0
   399  000003                     i2putch@data:
   400                           	opt stack 0
   401  000003                     i2___lwdiv@divisor:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x2
   405  000003                     	ds	1
   406  000004                     ??i2_initLCD:
   407                           
   408                           ; 1 bytes @ 0x3
   409  000004                     	ds	1
   410  000005                     i2___lwdiv@quotient:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x4
   414  000005                     	ds	2
   415  000007                     i2___lwdiv@counter:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0x6
   419  000007                     	ds	1
   420  000008                     ?i2___lwmod:
   421                           	opt stack 0
   422  000008                     i2___lwmod@dividend:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x7
   426  000008                     	ds	2
   427  00000A                     i2___lwmod@divisor:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x9
   431  00000A                     	ds	2
   432  00000C                     i2___lwmod@counter:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0xB
   436  00000C                     	ds	1
   437  00000D                     ?i2_printf:
   438                           	opt stack 0
   439  00000D                     i2printf@f:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0xC
   443  00000D                     	ds	2
   444  00000F                     ??i2_printf:
   445                           
   446                           ; 1 bytes @ 0xE
   447  00000F                     	ds	1
   448  000010                     i2printf@ap:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0xF
   452  000010                     	ds	2
   453  000012                     i2printf@flag:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x11
   457  000012                     	ds	1
   458  000013                     i2printf@prec:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x12
   462  000013                     	ds	1
   463  000014                     i2printf@val:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x13
   467  000014                     	ds	2
   468  000016                     i2printf@c:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x15
   472  000016                     	ds	1
   473  000017                     ??_interruptHandler:
   474                           
   475                           ; 1 bytes @ 0x16
   476  000017                     	ds	19
   477  00002A                     ??_I2C_Master_Wait:
   478  00002A                     ?___lwdiv:
   479                           	opt stack 0
   480  00002A                     lcdNibble@temp:
   481                           	opt stack 0
   482  00002A                     ___lwdiv@dividend:
   483                           	opt stack 0
   484  00002A                     I2C_Master_Init@clockFreq:
   485                           	opt stack 0
   486                           
   487                           ; 4 bytes @ 0x29
   488  00002A                     	ds	1
   489  00002B                     lcdNibble@data:
   490                           	opt stack 0
   491  00002B                     I2C_Master_Write@byteToWrite:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x2A
   495  00002B                     	ds	1
   496  00002C                     lcdInst@data:
   497                           	opt stack 0
   498  00002C                     putch@data:
   499                           	opt stack 0
   500  00002C                     ___lwdiv@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x2B
   504  00002C                     	ds	1
   505  00002D                     ??_initLCD:
   506  00002D                     I2C_sendData@char_data:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x2C
   510  00002D                     	ds	1
   511  00002E                     ___lwdiv@counter:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x2D
   515  00002E                     	ds	1
   516  00002F                     ___lwdiv@quotient:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x2E
   520  00002F                     	ds	2
   521  000031                     ?___lwmod:
   522                           	opt stack 0
   523  000031                     ___lwmod@dividend:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x30
   527  000031                     	ds	2
   528  000033                     ___lwmod@divisor:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x32
   532  000033                     	ds	2
   533  000035                     ___lwmod@counter:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x34
   537  000035                     	ds	1
   538  000036                     ?_printf:
   539                           	opt stack 0
   540  000036                     printf@f:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x35
   544  000036                     	ds	10
   545  000040                     ??_printf:
   546                           
   547                           ; 1 bytes @ 0x3F
   548  000040                     	ds	1
   549  000041                     ??_main:
   550                           
   551                           ; 1 bytes @ 0x40
   552  000041                     	ds	1
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1l	equ	0xFE1
   561                           
   562 ;;
   563 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   564 ;;
   565 ;; *************** function _main *****************
   566 ;; Defined at:
   567 ;;		line 33 in file "main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   583 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   584 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;Total ram usage:        1 bytes
   586 ;; Hardware stack levels required when called:    7
   587 ;; This function calls:
   588 ;;		_I2C_init
   589 ;;		_I2C_sendData
   590 ;;		_initLCD
   591 ;;		_lcdInst
   592 ;;		_printf
   593 ;; This function is called by:
   594 ;;		Startup code after reset
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text0
   599  001052                     __ptext0:
   600                           	opt stack 0
   601  001052                     _main:
   602                           	opt stack 24
   603                           
   604                           ;main.c: 40: OSCCONbits.IRCF2 = 1;
   605                           
   606                           ;incstack = 0
   607  001052  8CD3               	bsf	4051,6,c	;volatile
   608                           
   609                           ;main.c: 41: OSCCONbits.IRCF1 = 1;
   610  001054  8AD3               	bsf	4051,5,c	;volatile
   611                           
   612                           ;main.c: 42: OSCCONbits.IRCF0 = 1;
   613  001056  88D3               	bsf	4051,4,c	;volatile
   614                           
   615                           ;main.c: 43: OSCCONbits.SCS1 = 1;
   616  001058  82D3               	bsf	4051,1,c	;volatile
   617                           
   618                           ;main.c: 44: OSCTUNEbits.PLLEN = 1;
   619  00105A  8C9B               	bsf	3995,6,c	;volatile
   620                           
   621                           ;main.c: 48: LATA = 0x00;
   622  00105C  0E00               	movlw	0
   623  00105E  6E89               	movwf	3977,c	;volatile
   624                           
   625                           ;main.c: 49: LATB = 0x00;
   626  001060  0E00               	movlw	0
   627  001062  6E8A               	movwf	3978,c	;volatile
   628                           
   629                           ;main.c: 50: LATC = 0x00;
   630  001064  0E00               	movlw	0
   631  001066  6E8B               	movwf	3979,c	;volatile
   632                           
   633                           ;main.c: 51: LATD = 0x00;
   634  001068  0E00               	movlw	0
   635  00106A  6E8C               	movwf	3980,c	;volatile
   636                           
   637                           ;main.c: 52: LATE = 0x00;
   638  00106C  0E00               	movlw	0
   639  00106E  6E8D               	movwf	3981,c	;volatile
   640                           
   641                           ;main.c: 56: TRISA = 0xFF;
   642  001070  6892               	setf	3986,c	;volatile
   643                           
   644                           ;main.c: 57: TRISB = 0xFF;
   645  001072  6893               	setf	3987,c	;volatile
   646                           
   647                           ;main.c: 58: TRISC = 0x00;
   648  001074  0E00               	movlw	0
   649  001076  6E94               	movwf	3988,c	;volatile
   650                           
   651                           ;main.c: 59: TRISD = 0x00;
   652  001078  0E00               	movlw	0
   653  00107A  6E95               	movwf	3989,c	;volatile
   654                           
   655                           ;main.c: 60: TRISE = 0x00;
   656  00107C  0E00               	movlw	0
   657  00107E  6E96               	movwf	3990,c	;volatile
   658                           
   659                           ;main.c: 63: ADCON0 = 0x00;
   660  001080  0E00               	movlw	0
   661  001082  6EC2               	movwf	4034,c	;volatile
   662                           
   663                           ;main.c: 64: ADCON1 = 0b00001111;
   664  001084  0E0F               	movlw	15
   665  001086  6EC1               	movwf	4033,c	;volatile
   666                           
   667                           ;main.c: 65: ADCON2bits.ADFM = 1;
   668  001088  8EC0               	bsf	4032,7,c	;volatile
   669                           
   670                           ;main.c: 70: (INTCONbits.GIE = 1);
   671  00108A  8EF2               	bsf	intcon,7,c	;volatile
   672                           
   673                           ;main.c: 71: initLCD();
   674  00108C  EC72  F00B         	call	_initLCD	;wreg free
   675                           
   676                           ;main.c: 72: I2C_init();
   677  001090  EC1D  F00C         	call	_I2C_init	;wreg free
   678                           
   679                           ;main.c: 76: LATCbits.LATC0 = 1;
   680  001094  808B               	bsf	3979,0,c	;volatile
   681                           
   682                           ;main.c: 77: TRISCbits.RC0 = 0;
   683  001096  9094               	bcf	3988,0,c	;volatile
   684                           
   685                           ;main.c: 80: RBIE = 1;
   686  001098  86F2               	bsf	intcon,3,c	;volatile
   687                           
   688                           ;main.c: 83: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   689  00109A  0E11               	movlw	low STR_1
   690  00109C  6E36               	movwf	printf@f,c
   691  00109E  0E10               	movlw	high STR_1
   692  0010A0  6E37               	movwf	printf@f+1,c
   693  0010A2  C048  F038         	movff	_B_count,?_printf+2
   694  0010A6  C049  F039         	movff	_B_count+1,?_printf+3
   695  0010AA  C046  F03A         	movff	_N_count,?_printf+4
   696  0010AE  C047  F03B         	movff	_N_count+1,?_printf+5
   697  0010B2  C044  F03C         	movff	_S_count,?_printf+6
   698  0010B6  C045  F03D         	movff	_S_count+1,?_printf+7
   699  0010BA  C042  F03E         	movff	_W_count,?_printf+8
   700  0010BE  C043  F03F         	movff	_W_count+1,?_printf+9
   701  0010C2  EC7E  F009         	call	_printf	;wreg free
   702                           
   703                           ;main.c: 84: initLCD();
   704  0010C6  EC72  F00B         	call	_initLCD	;wreg free
   705                           
   706                           ;main.c: 88: TRISBbits.RB5 = 1;
   707  0010CA  8A93               	bsf	3987,5,c	;volatile
   708                           
   709                           ;main.c: 89: TRISBbits.RB7 = 1;
   710  0010CC  8E93               	bsf	3987,7,c	;volatile
   711                           
   712                           ;main.c: 90: TRISBbits.RB4 = 1;
   713  0010CE  8893               	bsf	3987,4,c	;volatile
   714                           
   715                           ;main.c: 92: I2C_sendData('5');
   716  0010D0  0E35               	movlw	53
   717  0010D2  EC32  F00C         	call	_I2C_sendData
   718                           
   719                           ;main.c: 94: _delay((unsigned long)((10)*(32000000/4000.0)));
   720  0010D6  0E68               	movlw	104
   721  0010D8  6E41               	movwf	??_main& (0+255),c
   722  0010DA  0EE4               	movlw	228
   723  0010DC                     u1117:
   724  0010DC  2EE8               	decfsz	wreg,f,c
   725  0010DE  D7FE               	bra	u1117
   726  0010E0  2E41               	decfsz	??_main& (0+255),f,c
   727  0010E2  D7FC               	bra	u1117
   728  0010E4  D000               	nop2	
   729                           
   730                           ;main.c: 95: I2C_sendData(11);
   731  0010E6  0E0B               	movlw	11
   732  0010E8  EC32  F00C         	call	_I2C_sendData
   733                           
   734                           ;main.c: 96: _delay((unsigned long)((10)*(32000000/4000.0)));
   735  0010EC  0E68               	movlw	104
   736  0010EE  6E41               	movwf	??_main& (0+255),c
   737  0010F0  0EE4               	movlw	228
   738  0010F2                     u1127:
   739  0010F2  2EE8               	decfsz	wreg,f,c
   740  0010F4  D7FE               	bra	u1127
   741  0010F6  2E41               	decfsz	??_main& (0+255),f,c
   742  0010F8  D7FC               	bra	u1127
   743  0010FA  D000               	nop2	
   744                           
   745                           ;main.c: 97: B_count = 0;
   746  0010FC  0E00               	movlw	0
   747  0010FE  6E49               	movwf	_B_count+1,c
   748  001100  0E00               	movlw	0
   749  001102  6E48               	movwf	_B_count,c
   750  001104                     
   751                           ;main.c: 99: initLCD();
   752  001104  EC72  F00B         	call	_initLCD	;wreg free
   753                           
   754                           ;main.c: 100: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   755  001108  0E80               	movlw	128
   756  00110A  EC59  F00C         	call	_lcdInst
   757  00110E  0E34               	movlw	52
   758  001110  6E41               	movwf	??_main& (0+255),c
   759  001112  0EF2               	movlw	242
   760  001114                     u1137:
   761  001114  2EE8               	decfsz	wreg,f,c
   762  001116  D7FE               	bra	u1137
   763  001118  2E41               	decfsz	??_main& (0+255),f,c
   764  00111A  D7FC               	bra	u1137
   765                           
   766                           ;main.c: 101: if (B_count >= 4){
   767  00111C  BE49               	btfsc	_B_count+1,7,c
   768  00111E  D009               	goto	l163
   769  001120  5049               	movf	_B_count+1,w,c
   770  001122  E104               	bnz	u1090
   771  001124  0E04               	movlw	4
   772  001126  5C48               	subwf	_B_count,w,c
   773  001128  A0D8               	btfss	status,0,c
   774  00112A  D003               	goto	l163
   775  00112C                     u1090:
   776                           
   777                           ;main.c: 102: I2C_sendData('6');
   778  00112C  0E36               	movlw	54
   779  00112E  EC32  F00C         	call	_I2C_sendData
   780  001132                     l163:
   781                           
   782                           ;main.c: 104: }
   783                           ;main.c: 105: if (W_count >= 4){
   784  001132  BE43               	btfsc	_W_count+1,7,c
   785  001134  D009               	goto	l164
   786  001136  5043               	movf	_W_count+1,w,c
   787  001138  E104               	bnz	u1100
   788  00113A  0E04               	movlw	4
   789  00113C  5C42               	subwf	_W_count,w,c
   790  00113E  A0D8               	btfss	status,0,c
   791  001140  D003               	goto	l164
   792  001142                     u1100:
   793                           
   794                           ;main.c: 106: I2C_sendData(12);
   795  001142  0E0C               	movlw	12
   796  001144  EC32  F00C         	call	_I2C_sendData
   797  001148                     l164:
   798                           
   799                           ;main.c: 108: }
   800                           ;main.c: 109: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   801  001148  0E11               	movlw	low STR_1
   802  00114A  6E36               	movwf	printf@f,c
   803  00114C  0E10               	movlw	high STR_1
   804  00114E  6E37               	movwf	printf@f+1,c
   805  001150  C048  F038         	movff	_B_count,?_printf+2
   806  001154  C049  F039         	movff	_B_count+1,?_printf+3
   807  001158  C046  F03A         	movff	_N_count,?_printf+4
   808  00115C  C047  F03B         	movff	_N_count+1,?_printf+5
   809  001160  C044  F03C         	movff	_S_count,?_printf+6
   810  001164  C045  F03D         	movff	_S_count+1,?_printf+7
   811  001168  C042  F03E         	movff	_W_count,?_printf+8
   812  00116C  C043  F03F         	movff	_W_count+1,?_printf+9
   813  001170  EC7E  F009         	call	_printf	;wreg free
   814  001174  D7C7               	goto	l162
   815  001176                     
   816                           ;main.c: 118: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   817  001176  0E11               	movlw	low STR_1
   818  001178  6E36               	movwf	printf@f,c
   819  00117A  0E10               	movlw	high STR_1
   820  00117C  6E37               	movwf	printf@f+1,c
   821  00117E  C048  F038         	movff	_B_count,?_printf+2
   822  001182  C049  F039         	movff	_B_count+1,?_printf+3
   823  001186  C046  F03A         	movff	_N_count,?_printf+4
   824  00118A  C047  F03B         	movff	_N_count+1,?_printf+5
   825  00118E  C044  F03C         	movff	_S_count,?_printf+6
   826  001192  C045  F03D         	movff	_S_count+1,?_printf+7
   827  001196  C042  F03E         	movff	_W_count,?_printf+8
   828  00119A  C043  F03F         	movff	_W_count+1,?_printf+9
   829  00119E  EC7E  F009         	call	_printf	;wreg free
   830                           
   831                           ;main.c: 119: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   832  0011A2  0E80               	movlw	128
   833  0011A4  EC59  F00C         	call	_lcdInst
   834  0011A8  0E34               	movlw	52
   835  0011AA  6E41               	movwf	??_main& (0+255),c
   836  0011AC  0EF2               	movlw	242
   837  0011AE                     u1147:
   838  0011AE  2EE8               	decfsz	wreg,f,c
   839  0011B0  D7FE               	bra	u1147
   840  0011B2  2E41               	decfsz	??_main& (0+255),f,c
   841  0011B4  D7FC               	bra	u1147
   842  0011B6  D7DF               	goto	l167
   843  0011B8                     __end_of_main:
   844                           	opt stack 0
   845                           tblptru	equ	0xFF8
   846                           tblptrh	equ	0xFF7
   847                           tblptrl	equ	0xFF6
   848                           tablat	equ	0xFF5
   849                           intcon	equ	0xFF2
   850                           postinc0	equ	0xFEE
   851                           wreg	equ	0xFE8
   852                           postdec1	equ	0xFE5
   853                           fsr1l	equ	0xFE1
   854                           status	equ	0xFD8
   855                           
   856 ;; *************** function _printf *****************
   857 ;; Defined at:
   858 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;  f               2   53[COMRAM] PTR const unsigned char 
   861 ;;		 -> STR_6(12), STR_5(17), STR_4(15), STR_3(20), 
   862 ;;		 -> STR_2(20), STR_1(20), 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  tmpval          4    0        struct .
   865 ;;  cp              3    0        PTR const unsigned char 
   866 ;;  val             2    4[BANK0 ] unsigned int 
   867 ;;  ap              2    0[BANK0 ] PTR void [1]
   868 ;;		 -> ?i2_printf(2), ?_printf(2), 
   869 ;;  len             2    0        unsigned int 
   870 ;;  c               1    6[BANK0 ] char 
   871 ;;  prec            1    3[BANK0 ] char 
   872 ;;  flag            1    2[BANK0 ] unsigned char 
   873 ;; Return value:  Size  Location     Type
   874 ;;                  2   53[COMRAM] int 
   875 ;; Registers used:
   876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   882 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;      Totals:        11       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;Total ram usage:       18 bytes
   887 ;; Hardware stack levels used:    1
   888 ;; Hardware stack levels required when called:    6
   889 ;; This function calls:
   890 ;;		___lwdiv
   891 ;;		___lwmod
   892 ;;		_putch
   893 ;; This function is called by:
   894 ;;		_main
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text1
   899  0012FC                     __ptext1:
   900                           	opt stack 0
   901  0012FC                     _printf:
   902                           	opt stack 24
   903                           
   904                           ;doprnt.c: 466: va_list ap;
   905                           ;doprnt.c: 499: signed char c;
   906                           ;doprnt.c: 506: signed char prec;
   907                           ;doprnt.c: 508: unsigned char flag;
   908                           ;doprnt.c: 523: union {
   909                           ;doprnt.c: 524: unsigned long vd;
   910                           ;doprnt.c: 525: double integ;
   911                           ;doprnt.c: 526: } tmpval;
   912                           ;doprnt.c: 528: unsigned int val;
   913                           ;doprnt.c: 529: unsigned len;
   914                           ;doprnt.c: 530: const char * cp;
   915                           ;doprnt.c: 533: *ap = __va_start();
   916                           
   917                           ;incstack = 0
   918  0012FC  0E38               	movlw	low (?_printf+2)
   919  0012FE  0100               	movlb	0	; () banked
   920  001300  6F80               	movwf	printf@ap& (0+255),b
   921  001302  0E00               	movlw	high (?_printf+2)
   922  001304  6F81               	movwf	(printf@ap+1)& (0+255),b
   923                           
   924                           ;doprnt.c: 536: while(c = *f++) {
   925  001306  D081               	goto	u1010
   926  001308                     
   927                           ; BSR set to: 0
   928                           ;doprnt.c: 538: if(c != '%')
   929                           
   930                           ; BSR set to: 0
   931  001308  0E25               	movlw	37
   932  00130A  1986               	xorwf	printf@c& (0+255),w,b
   933  00130C  B4D8               	btfsc	status,2,c
   934  00130E  D004               	goto	l243
   935                           
   936                           ; BSR set to: 0
   937                           ;doprnt.c: 540: {
   938                           ;doprnt.c: 541: (putch(c) );
   939  001310  5186               	movf	printf@c& (0+255),w,b
   940  001312  EC4F  F00C         	call	_putch
   941                           
   942                           ;doprnt.c: 542: continue;
   943  001316  D079               	goto	u1010
   944  001318                     l243:
   945                           
   946                           ;doprnt.c: 543: }
   947                           ;doprnt.c: 548: flag = 0;
   948  001318  0E00               	movlw	0
   949  00131A  0100               	movlb	0	; () banked
   950  00131C  6F82               	movwf	printf@flag& (0+255),b
   951                           
   952                           ; BSR set to: 0
   953                           
   954                           ; BSR set to: 0
   955                           
   956                           ; BSR set to: 0
   957                           ;doprnt.c: 822: }
   958                           
   959                           ; BSR set to: 0
   960                           ;doprnt.c: 813: continue;
   961                           
   962                           ;doprnt.c: 802: default:
   963                           
   964                           ; BSR set to: 0
   965                           ;doprnt.c: 698: case 'i':
   966                           ;doprnt.c: 699: break;
   967                           
   968                           ; BSR set to: 0
   969                           
   970                           ;doprnt.c: 697: case 'd':
   971                           
   972                           ; BSR set to: 0
   973                           ;doprnt.c: 638: goto alldone;
   974                           
   975                           ;doprnt.c: 637: case 0:
   976                           
   977                           ;doprnt.c: 635: switch(c = *f++) {
   978  00131E  C036  FFF6         	movff	printf@f,tblptrl
   979  001322  C037  FFF7         	movff	printf@f+1,tblptrh
   980  001326  4A36               	infsnz	printf@f,f,c
   981  001328  2A37               	incf	printf@f+1,f,c
   982  00132A                     	if	0	;tblptru may be non-zero
   983  00132A                     	endif
   984  00132A                     	if	0	;tblptru may be non-zero
   985  00132A                     	endif
   986  00132A  0008               	tblrd		*
   987  00132C  CFF5 F086          	movff	tablat,printf@c
   988  001330  5186               	movf	printf@c& (0+255),w,b
   989                           
   990                           ; Switch size 1, requested type "space"
   991                           ; Number of cases is 3, Range of values is 0 to 105
   992                           ; switch strategies available:
   993                           ; Name         Instructions Cycles
   994                           ; simple_byte           10     6 (average)
   995                           ;	Chosen strategy is simple_byte
   996  001332  0A00               	xorlw	0	; case 0
   997  001334  B4D8               	btfsc	status,2,c
   998  001336  0012               	return	
   999  001338  0A64               	xorlw	100	; case 100
  1000  00133A  B4D8               	btfsc	status,2,c
  1001  00133C  D003               	goto	l249
  1002  00133E  0A0D               	xorlw	13	; case 105
  1003  001340  A4D8               	btfss	status,2,c
  1004  001342  D063               	goto	u1010
  1005  001344                     l249:
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;doprnt.c: 1253: {
  1009                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1010                           
  1011                           ; BSR set to: 0
  1012  001344  C080  FFD9         	movff	printf@ap,fsr2l
  1013  001348  C081  FFDA         	movff	printf@ap+1,fsr2h
  1014  00134C  CFDE F084          	movff	postinc2,printf@val
  1015  001350  CFDD F085          	movff	postdec2,printf@val+1
  1016                           
  1017                           ; BSR set to: 0
  1018  001354  0E02               	movlw	2
  1019  001356  2780               	addwf	printf@ap& (0+255),f,b
  1020  001358  0E00               	movlw	0
  1021  00135A  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;doprnt.c: 1261: if((int)val < 0) {
  1025  00135C  AF85               	btfss	(printf@val+1)& (0+255),7,b
  1026  00135E  D006               	goto	l251
  1027                           
  1028                           ; BSR set to: 0
  1029                           ;doprnt.c: 1262: flag |= 0x03;
  1030  001360  0E03               	movlw	3
  1031  001362  1382               	iorwf	printf@flag& (0+255),f,b
  1032                           
  1033                           ; BSR set to: 0
  1034                           ;doprnt.c: 1263: val = -val;
  1035  001364  6D84               	negf	printf@val& (0+255),b
  1036  001366  1F85               	comf	(printf@val+1)& (0+255),f,b
  1037  001368  B0D8               	btfsc	status,0,c
  1038  00136A  2B85               	incf	(printf@val+1)& (0+255),f,b
  1039  00136C                     l251:
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;doprnt.c: 1264: }
  1043                           ;doprnt.c: 1266: }
  1044                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1045                           
  1046                           ; BSR set to: 0
  1047  00136C  0E01               	movlw	1
  1048  00136E  6F86               	movwf	printf@c& (0+255),b
  1049  001370                     l1894:
  1050                           
  1051                           ; BSR set to: 0
  1052  001370  0E05               	movlw	5
  1053  001372  1986               	xorwf	printf@c& (0+255),w,b
  1054  001374  B4D8               	btfsc	status,2,c
  1055  001376  D012               	goto	u990
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;doprnt.c: 1306: if(val < dpowers[c])
  1059                           
  1060                           ; BSR set to: 0
  1061                           
  1062                           ; BSR set to: 0
  1063  001378  5186               	movf	printf@c& (0+255),w,b
  1064  00137A  0D02               	mullw	2
  1065  00137C  0E01               	movlw	low _dpowers
  1066  00137E  24F3               	addwf	prodl,w,c
  1067  001380  6EF6               	movwf	tblptrl,c
  1068  001382  0E10               	movlw	high _dpowers
  1069  001384  20F4               	addwfc	prodh,w,c
  1070  001386  6EF7               	movwf	tblptrh,c
  1071  001388                     	if	0	;There are less than 3 active tblptr bytes
  1072  001388                     	endif
  1073  001388  0009               	tblrd		*+
  1074  00138A  50F5               	movf	tablat,w,c
  1075  00138C  5D84               	subwf	printf@val& (0+255),w,b
  1076  00138E  0009               	tblrd		*+
  1077  001390  50F5               	movf	tablat,w,c
  1078  001392  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1079  001394  A0D8               	btfss	status,0,c
  1080  001396  D002               	goto	u990
  1081                           
  1082                           ; BSR set to: 0
  1083                           
  1084                           ; BSR set to: 0
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;doprnt.c: 1307: break;
  1088  001398  2B86               	incf	printf@c& (0+255),f,b
  1089  00139A  D7EA               	goto	l1894
  1090  00139C                     u990:
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;doprnt.c: 1422: {
  1094                           ;doprnt.c: 1438: if(flag & 0x03)
  1095                           
  1096                           ; BSR set to: 0
  1097  00139C  C082  F040         	movff	printf@flag,??_printf
  1098  0013A0  0E03               	movlw	3
  1099  0013A2  1640               	andwf	??_printf,f,c
  1100  0013A4  B4D8               	btfsc	status,2,c
  1101  0013A6  D003               	goto	l255
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;doprnt.c: 1439: (putch('-') );
  1105  0013A8  0E2D               	movlw	45
  1106  0013AA  EC4F  F00C         	call	_putch
  1107  0013AE                     l255:
  1108                           
  1109                           ;doprnt.c: 1469: }
  1110                           ;doprnt.c: 1472: prec = c;
  1111  0013AE  C086  F083         	movff	printf@c,printf@prec
  1112                           
  1113                           ;doprnt.c: 1474: while(prec--) {
  1114  0013B2  D026               	goto	l256
  1115  0013B4                     
  1116                           ;doprnt.c: 1478: {
  1117                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1118  0013B4  0100               	movlb	0	; () banked
  1119  0013B6  5183               	movf	printf@prec& (0+255),w,b
  1120  0013B8  0D02               	mullw	2
  1121  0013BA  0E01               	movlw	low _dpowers
  1122  0013BC  24F3               	addwf	prodl,w,c
  1123  0013BE  6EF6               	movwf	tblptrl,c
  1124  0013C0  0E10               	movlw	high _dpowers
  1125  0013C2  20F4               	addwfc	prodh,w,c
  1126  0013C4  6EF7               	movwf	tblptrh,c
  1127  0013C6                     	if	0	;There are less than 3 active tblptr bytes
  1128  0013C6                     	endif
  1129  0013C6  0009               	tblrd		*+
  1130  0013C8  CFF5 F02C          	movff	tablat,___lwdiv@divisor
  1131  0013CC  000A               	tblrd		*-
  1132  0013CE  CFF5 F02D          	movff	tablat,___lwdiv@divisor+1
  1133  0013D2  C084  F02A         	movff	printf@val,___lwdiv@dividend
  1134  0013D6  C085  F02B         	movff	printf@val+1,___lwdiv@dividend+1
  1135  0013DA  EC20  F00B         	call	___lwdiv	;wreg free
  1136  0013DE  C02A  F031         	movff	?___lwdiv,___lwmod@dividend
  1137  0013E2  C02B  F032         	movff	?___lwdiv+1,___lwmod@dividend+1
  1138  0013E6  0E00               	movlw	0
  1139  0013E8  6E34               	movwf	___lwmod@divisor+1,c
  1140  0013EA  0E0A               	movlw	10
  1141  0013EC  6E33               	movwf	___lwmod@divisor,c
  1142  0013EE  ECBE  F00B         	call	___lwmod	;wreg free
  1143  0013F2  5031               	movf	?___lwmod,w,c
  1144  0013F4  0F30               	addlw	48
  1145  0013F6  0100               	movlb	0	; () banked
  1146  0013F8  6F86               	movwf	printf@c& (0+255),b
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;doprnt.c: 1523: }
  1150                           ;doprnt.c: 1524: (putch(c) );
  1151  0013FA  5186               	movf	printf@c& (0+255),w,b
  1152  0013FC  EC4F  F00C         	call	_putch
  1153  001400                     l256:
  1154  001400  0100               	movlb	0	; () banked
  1155  001402  0783               	decf	printf@prec& (0+255),f,b
  1156  001404  2983               	incf	printf@prec& (0+255),w,b
  1157  001406  A4D8               	btfss	status,2,c
  1158  001408  D7D5               	goto	l257
  1159  00140A                     u1010:
  1160                           
  1161                           ; BSR set to: 0
  1162                           
  1163                           ; BSR set to: 0
  1164  00140A  C036  FFF6         	movff	printf@f,tblptrl
  1165  00140E  C037  FFF7         	movff	printf@f+1,tblptrh
  1166  001412  4A36               	infsnz	printf@f,f,c
  1167  001414  2A37               	incf	printf@f+1,f,c
  1168  001416                     	if	0	;tblptru may be non-zero
  1169  001416                     	endif
  1170  001416                     	if	0	;tblptru may be non-zero
  1171  001416                     	endif
  1172  001416  0008               	tblrd		*
  1173  001418  CFF5 F086          	movff	tablat,printf@c
  1174  00141C  0100               	movlb	0	; () banked
  1175  00141E  5186               	movf	printf@c& (0+255),w,b
  1176  001420  B4D8               	btfsc	status,2,c
  1177  001422  0012               	return	
  1178  001424  D771               	goto	l242
  1179  001426                     __end_of_printf:
  1180                           	opt stack 0
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           prodh	equ	0xFF4
  1186                           prodl	equ	0xFF3
  1187                           intcon	equ	0xFF2
  1188                           postinc0	equ	0xFEE
  1189                           wreg	equ	0xFE8
  1190                           postdec1	equ	0xFE5
  1191                           fsr1l	equ	0xFE1
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           fsr2h	equ	0xFDA
  1195                           fsr2l	equ	0xFD9
  1196                           status	equ	0xFD8
  1197                           
  1198 ;; *************** function _putch *****************
  1199 ;; Defined at:
  1200 ;;		line 24 in file "lcd.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  data            1    wreg     unsigned char 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  data            1   43[COMRAM] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1217 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;Total ram usage:        1 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    5
  1221 ;; This function calls:
  1222 ;;		_lcdNibble
  1223 ;; This function is called by:
  1224 ;;		_printf
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text2
  1229  00189E                     __ptext2:
  1230                           	opt stack 0
  1231  00189E                     _putch:
  1232                           	opt stack 24
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;incstack = 0
  1236                           ;putch@data stored from wreg
  1237  00189E  6E2C               	movwf	putch@data,c
  1238                           
  1239                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1240  0018A0  848C               	bsf	3980,2,c	;volatile
  1241                           
  1242                           ;lcd.c: 33: lcdNibble(data);
  1243  0018A2  502C               	movf	putch@data,w,c
  1244  0018A4  ECA2  F00A         	call	_lcdNibble
  1245                           
  1246                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1247  0018A8  0EA0               	movlw	160
  1248  0018AA                     u1157:
  1249  0018AA  D000               	nop2	
  1250  0018AC  2EE8               	decfsz	wreg,f,c
  1251  0018AE  D7FD               	bra	u1157
  1252  0018B0  0012               	return		;funcret
  1253  0018B2                     __end_of_putch:
  1254                           	opt stack 0
  1255                           tblptru	equ	0xFF8
  1256                           tblptrh	equ	0xFF7
  1257                           tblptrl	equ	0xFF6
  1258                           tablat	equ	0xFF5
  1259                           prodh	equ	0xFF4
  1260                           prodl	equ	0xFF3
  1261                           intcon	equ	0xFF2
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1l	equ	0xFE1
  1266                           postinc2	equ	0xFDE
  1267                           postdec2	equ	0xFDD
  1268                           fsr2h	equ	0xFDA
  1269                           fsr2l	equ	0xFD9
  1270                           status	equ	0xFD8
  1271                           
  1272 ;; *************** function ___lwmod *****************
  1273 ;; Defined at:
  1274 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  dividend        2   48[COMRAM] unsigned int 
  1277 ;;  divisor         2   50[COMRAM] unsigned int 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  counter         1   52[COMRAM] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  2   48[COMRAM] unsigned int 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1289 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;Total ram usage:        5 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    4
  1296 ;; This function calls:
  1297 ;;		Nothing
  1298 ;; This function is called by:
  1299 ;;		_printf
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           	psect	text3
  1304  00177C                     __ptext3:
  1305                           	opt stack 0
  1306  00177C                     ___lwmod:
  1307                           	opt stack 25
  1308                           
  1309                           ;incstack = 0
  1310  00177C  5033               	movf	___lwmod@divisor,w,c
  1311  00177E  1034               	iorwf	___lwmod@divisor+1,w,c
  1312  001780  B4D8               	btfsc	status,2,c
  1313  001782  D018               	goto	l679
  1314  001784  0E01               	movlw	1
  1315  001786  6E35               	movwf	___lwmod@counter,c
  1316  001788  D004               	goto	l674
  1317  00178A  90D8               	bcf	status,0,c
  1318  00178C  3633               	rlcf	___lwmod@divisor,f,c
  1319  00178E  3634               	rlcf	___lwmod@divisor+1,f,c
  1320  001790  2A35               	incf	___lwmod@counter,f,c
  1321  001792                     l674:
  1322  001792  AE34               	btfss	___lwmod@divisor+1,7,c
  1323  001794  D7FA               	goto	l675
  1324  001796                     u930:
  1325  001796  5033               	movf	___lwmod@divisor,w,c
  1326  001798  5C31               	subwf	___lwmod@dividend,w,c
  1327  00179A  5034               	movf	___lwmod@divisor+1,w,c
  1328  00179C  5832               	subwfb	___lwmod@dividend+1,w,c
  1329  00179E  A0D8               	btfss	status,0,c
  1330  0017A0  D004               	goto	l678
  1331  0017A2  5033               	movf	___lwmod@divisor,w,c
  1332  0017A4  5E31               	subwf	___lwmod@dividend,f,c
  1333  0017A6  5034               	movf	___lwmod@divisor+1,w,c
  1334  0017A8  5A32               	subwfb	___lwmod@dividend+1,f,c
  1335  0017AA                     l678:
  1336  0017AA  90D8               	bcf	status,0,c
  1337  0017AC  3234               	rrcf	___lwmod@divisor+1,f,c
  1338  0017AE  3233               	rrcf	___lwmod@divisor,f,c
  1339  0017B0  2E35               	decfsz	___lwmod@counter,f,c
  1340  0017B2  D7F1               	goto	u930
  1341  0017B4                     l679:
  1342  0017B4  C031  F031         	movff	___lwmod@dividend,?___lwmod
  1343  0017B8  C032  F032         	movff	___lwmod@dividend+1,?___lwmod+1
  1344  0017BC  0012               	return		;funcret
  1345  0017BE                     __end_of___lwmod:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           prodh	equ	0xFF4
  1352                           prodl	equ	0xFF3
  1353                           intcon	equ	0xFF2
  1354                           postinc0	equ	0xFEE
  1355                           wreg	equ	0xFE8
  1356                           postdec1	equ	0xFE5
  1357                           fsr1l	equ	0xFE1
  1358                           postinc2	equ	0xFDE
  1359                           postdec2	equ	0xFDD
  1360                           fsr2h	equ	0xFDA
  1361                           fsr2l	equ	0xFD9
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function ___lwdiv *****************
  1365 ;; Defined at:
  1366 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  dividend        2   41[COMRAM] unsigned int 
  1369 ;;  divisor         2   43[COMRAM] unsigned int 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  quotient        2   46[COMRAM] unsigned int 
  1372 ;;  counter         1   45[COMRAM] unsigned char 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  2   41[COMRAM] unsigned int 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1382 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;Total ram usage:        7 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    4
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_printf
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text4
  1397  001640                     __ptext4:
  1398                           	opt stack 0
  1399  001640                     ___lwdiv:
  1400                           	opt stack 25
  1401                           
  1402                           ;incstack = 0
  1403  001640  0E00               	movlw	0
  1404  001642  6E30               	movwf	___lwdiv@quotient+1,c
  1405  001644  0E00               	movlw	0
  1406  001646  6E2F               	movwf	___lwdiv@quotient,c
  1407  001648  502C               	movf	___lwdiv@divisor,w,c
  1408  00164A  102D               	iorwf	___lwdiv@divisor+1,w,c
  1409  00164C  B4D8               	btfsc	status,2,c
  1410  00164E  D01C               	goto	l669
  1411  001650  0E01               	movlw	1
  1412  001652  6E2E               	movwf	___lwdiv@counter,c
  1413  001654  D004               	goto	l664
  1414  001656  90D8               	bcf	status,0,c
  1415  001658  362C               	rlcf	___lwdiv@divisor,f,c
  1416  00165A  362D               	rlcf	___lwdiv@divisor+1,f,c
  1417  00165C  2A2E               	incf	___lwdiv@counter,f,c
  1418  00165E                     l664:
  1419  00165E  AE2D               	btfss	___lwdiv@divisor+1,7,c
  1420  001660  D7FA               	goto	l665
  1421  001662                     u900:
  1422  001662  90D8               	bcf	status,0,c
  1423  001664  362F               	rlcf	___lwdiv@quotient,f,c
  1424  001666  3630               	rlcf	___lwdiv@quotient+1,f,c
  1425  001668  502C               	movf	___lwdiv@divisor,w,c
  1426  00166A  5C2A               	subwf	___lwdiv@dividend,w,c
  1427  00166C  502D               	movf	___lwdiv@divisor+1,w,c
  1428  00166E  582B               	subwfb	___lwdiv@dividend+1,w,c
  1429  001670  A0D8               	btfss	status,0,c
  1430  001672  D005               	goto	l668
  1431  001674  502C               	movf	___lwdiv@divisor,w,c
  1432  001676  5E2A               	subwf	___lwdiv@dividend,f,c
  1433  001678  502D               	movf	___lwdiv@divisor+1,w,c
  1434  00167A  5A2B               	subwfb	___lwdiv@dividend+1,f,c
  1435  00167C  802F               	bsf	___lwdiv@quotient,0,c
  1436  00167E                     l668:
  1437  00167E  90D8               	bcf	status,0,c
  1438  001680  322D               	rrcf	___lwdiv@divisor+1,f,c
  1439  001682  322C               	rrcf	___lwdiv@divisor,f,c
  1440  001684  2E2E               	decfsz	___lwdiv@counter,f,c
  1441  001686  D7ED               	goto	u900
  1442  001688                     l669:
  1443  001688  C02F  F02A         	movff	___lwdiv@quotient,?___lwdiv
  1444  00168C  C030  F02B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1445  001690  0012               	return		;funcret
  1446  001692                     __end_of___lwdiv:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           prodh	equ	0xFF4
  1453                           prodl	equ	0xFF3
  1454                           intcon	equ	0xFF2
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           postinc2	equ	0xFDE
  1460                           postdec2	equ	0xFDD
  1461                           fsr2h	equ	0xFDA
  1462                           fsr2l	equ	0xFD9
  1463                           status	equ	0xFD8
  1464                           
  1465 ;; *************** function _initLCD *****************
  1466 ;; Defined at:
  1467 ;;		line 60 in file "lcd.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;		None
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;		None
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2, status,0, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1483 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;Total ram usage:        1 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    6
  1488 ;; This function calls:
  1489 ;;		_lcdInst
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text5
  1496  0016E4                     __ptext5:
  1497                           	opt stack 0
  1498  0016E4                     _initLCD:
  1499                           	opt stack 24
  1500                           
  1501                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1502                           
  1503                           ;incstack = 0
  1504  0016E4  0E9C               	movlw	156
  1505  0016E6  6E2D               	movwf	??_initLCD& (0+255),c
  1506  0016E8  0ED7               	movlw	215
  1507  0016EA                     u1167:
  1508  0016EA  2EE8               	decfsz	wreg,f,c
  1509  0016EC  D7FE               	bra	u1167
  1510  0016EE  2E2D               	decfsz	??_initLCD& (0+255),f,c
  1511  0016F0  D7FC               	bra	u1167
  1512  0016F2  F000               	nop	
  1513                           
  1514                           ;lcd.c: 69: lcdInst(0b00110011);
  1515  0016F4  0E33               	movlw	51
  1516  0016F6  EC59  F00C         	call	_lcdInst
  1517                           
  1518                           ;lcd.c: 70: lcdInst(0b00110010);
  1519  0016FA  0E32               	movlw	50
  1520  0016FC  EC59  F00C         	call	_lcdInst
  1521                           
  1522                           ;lcd.c: 71: lcdInst(0b00101000);
  1523  001700  0E28               	movlw	40
  1524  001702  EC59  F00C         	call	_lcdInst
  1525                           
  1526                           ;lcd.c: 72: lcdInst(0b00001111);
  1527  001706  0E0F               	movlw	15
  1528  001708  EC59  F00C         	call	_lcdInst
  1529                           
  1530                           ;lcd.c: 73: lcdInst(0b00000110);
  1531  00170C  0E06               	movlw	6
  1532  00170E  EC59  F00C         	call	_lcdInst
  1533                           
  1534                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1535  001712  0E01               	movlw	1
  1536  001714  EC59  F00C         	call	_lcdInst
  1537  001718  0E9C               	movlw	156
  1538  00171A  6E2D               	movwf	??_initLCD& (0+255),c
  1539  00171C  0ED7               	movlw	215
  1540  00171E                     u1177:
  1541  00171E  2EE8               	decfsz	wreg,f,c
  1542  001720  D7FE               	bra	u1177
  1543  001722  2E2D               	decfsz	??_initLCD& (0+255),f,c
  1544  001724  D7FC               	bra	u1177
  1545  001726  F000               	nop	
  1546                           
  1547                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1548  001728  0E0F               	movlw	15
  1549  00172A  EC59  F00C         	call	_lcdInst
  1550  00172E  0012               	return		;funcret
  1551  001730                     __end_of_initLCD:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           prodh	equ	0xFF4
  1558                           prodl	equ	0xFF3
  1559                           intcon	equ	0xFF2
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           postdec1	equ	0xFE5
  1563                           fsr1l	equ	0xFE1
  1564                           postinc2	equ	0xFDE
  1565                           postdec2	equ	0xFDD
  1566                           fsr2h	equ	0xFDA
  1567                           fsr2l	equ	0xFD9
  1568                           status	equ	0xFD8
  1569                           
  1570 ;; *************** function _lcdInst *****************
  1571 ;; Defined at:
  1572 ;;		line 11 in file "lcd.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  data            1    wreg     unsigned char 
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  data            1   43[COMRAM] unsigned char 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, status,2, status,0, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;Total ram usage:        1 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    5
  1593 ;; This function calls:
  1594 ;;		_lcdNibble
  1595 ;; This function is called by:
  1596 ;;		_initLCD
  1597 ;;		_main
  1598 ;;		_lcd_set_cursor
  1599 ;;		_lcd_shift_cursor
  1600 ;;		_lcd_shift_display
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text6
  1605  0018B2                     __ptext6:
  1606                           	opt stack 0
  1607  0018B2                     _lcdInst:
  1608                           	opt stack 25
  1609                           
  1610                           ;incstack = 0
  1611                           ;lcdInst@data stored from wreg
  1612  0018B2  6E2C               	movwf	lcdInst@data,c
  1613                           
  1614                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1615  0018B4  948C               	bcf	3980,2,c	;volatile
  1616                           
  1617                           ;lcd.c: 20: lcdNibble(data);
  1618  0018B6  502C               	movf	lcdInst@data,w,c
  1619  0018B8  ECA2  F00A         	call	_lcdNibble
  1620                           
  1621                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1622  0018BC  0EA0               	movlw	160
  1623  0018BE                     u1187:
  1624  0018BE  D000               	nop2	
  1625  0018C0  2EE8               	decfsz	wreg,f,c
  1626  0018C2  D7FD               	bra	u1187
  1627  0018C4  0012               	return		;funcret
  1628  0018C6                     __end_of_lcdInst:
  1629                           	opt stack 0
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           prodh	equ	0xFF4
  1635                           prodl	equ	0xFF3
  1636                           intcon	equ	0xFF2
  1637                           postinc0	equ	0xFEE
  1638                           wreg	equ	0xFE8
  1639                           postdec1	equ	0xFE5
  1640                           fsr1l	equ	0xFE1
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function _lcdNibble *****************
  1648 ;; Defined at:
  1649 ;;		line 37 in file "lcd.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  data            1    wreg     unsigned char 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  data            1   42[COMRAM] unsigned char 
  1654 ;;  temp            1   41[COMRAM] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;Total ram usage:        2 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    4
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_lcdInst
  1675 ;;		_putch
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text7
  1680  001544                     __ptext7:
  1681                           	opt stack 0
  1682  001544                     _lcdNibble:
  1683                           	opt stack 24
  1684                           
  1685                           ;incstack = 0
  1686                           ;lcdNibble@data stored from wreg
  1687  001544  6E2B               	movwf	lcdNibble@data,c
  1688                           
  1689                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1690  001546  502B               	movf	lcdNibble@data,w,c
  1691  001548  0BF0               	andlw	240
  1692  00154A  6E2A               	movwf	lcdNibble@temp,c
  1693                           
  1694                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1695  00154C  508C               	movf	3980,w,c	;volatile
  1696  00154E  0B0F               	andlw	15
  1697  001550  6E8C               	movwf	3980,c	;volatile
  1698                           
  1699                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1700  001552  502A               	movf	lcdNibble@temp,w,c
  1701  001554  108C               	iorwf	3980,w,c	;volatile
  1702  001556  6E8C               	movwf	3980,c	;volatile
  1703                           
  1704                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1705  001558  0E00               	movlw	0
  1706  00155A  BEF2               	btfsc	intcon,7,c	;volatile
  1707  00155C  0E01               	movlw	1
  1708  00155E  6E4B               	movwf	_LCDinterruptState,c
  1709  001560  9EF2               	bcf	intcon,7,c	;volatile
  1710  001562  868C               	bsf	3980,3,c	;volatile
  1711  001564  0E42               	movlw	66
  1712  001566                     u1197:
  1713  001566  2EE8               	decfsz	wreg,f,c
  1714  001568  D7FE               	bra	u1197
  1715  00156A  D000               	nop2	
  1716  00156C  968C               	bcf	3980,3,c	;volatile
  1717  00156E  0EA0               	movlw	160
  1718  001570                     u1207:
  1719  001570  D000               	nop2	
  1720  001572  2EE8               	decfsz	wreg,f,c
  1721  001574  D7FD               	bra	u1207
  1722  001576  B04B               	btfsc	_LCDinterruptState,0,c
  1723  001578  D002               	bra	u875
  1724  00157A  9EF2               	bcf	intcon,7,c	;volatile
  1725  00157C  D001               	bra	u876
  1726  00157E                     u875:
  1727  00157E  8EF2               	bsf	intcon,7,c	;volatile
  1728  001580                     u876:
  1729                           
  1730                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1731  001580  382B               	swapf	lcdNibble@data,w,c
  1732  001582  0BF0               	andlw	240
  1733  001584  6E2B               	movwf	lcdNibble@data,c
  1734                           
  1735                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1736  001586  502B               	movf	lcdNibble@data,w,c
  1737  001588  0BF0               	andlw	240
  1738  00158A  6E2A               	movwf	lcdNibble@temp,c
  1739                           
  1740                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1741  00158C  508C               	movf	3980,w,c	;volatile
  1742  00158E  0B0F               	andlw	15
  1743  001590  6E8C               	movwf	3980,c	;volatile
  1744                           
  1745                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1746  001592  502A               	movf	lcdNibble@temp,w,c
  1747  001594  108C               	iorwf	3980,w,c	;volatile
  1748  001596  6E8C               	movwf	3980,c	;volatile
  1749                           
  1750                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1751  001598  0E00               	movlw	0
  1752  00159A  BEF2               	btfsc	intcon,7,c	;volatile
  1753  00159C  0E01               	movlw	1
  1754  00159E  6E4B               	movwf	_LCDinterruptState,c
  1755  0015A0  9EF2               	bcf	intcon,7,c	;volatile
  1756  0015A2  868C               	bsf	3980,3,c	;volatile
  1757  0015A4  0E42               	movlw	66
  1758  0015A6                     u1217:
  1759  0015A6  2EE8               	decfsz	wreg,f,c
  1760  0015A8  D7FE               	bra	u1217
  1761  0015AA  D000               	nop2	
  1762  0015AC  968C               	bcf	3980,3,c	;volatile
  1763  0015AE  0EA0               	movlw	160
  1764  0015B0                     u1227:
  1765  0015B0  D000               	nop2	
  1766  0015B2  2EE8               	decfsz	wreg,f,c
  1767  0015B4  D7FD               	bra	u1227
  1768  0015B6  B04B               	btfsc	_LCDinterruptState,0,c
  1769  0015B8  D002               	bra	u885
  1770  0015BA  9EF2               	bcf	intcon,7,c	;volatile
  1771  0015BC  D001               	bra	u886
  1772  0015BE                     u885:
  1773  0015BE  8EF2               	bsf	intcon,7,c	;volatile
  1774  0015C0                     u886:
  1775  0015C0  0012               	return		;funcret
  1776  0015C2                     __end_of_lcdNibble:
  1777                           	opt stack 0
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           intcon	equ	0xFF2
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1l	equ	0xFE1
  1789                           postinc2	equ	0xFDE
  1790                           postdec2	equ	0xFDD
  1791                           fsr2h	equ	0xFDA
  1792                           fsr2l	equ	0xFD9
  1793                           status	equ	0xFD8
  1794                           
  1795 ;; *************** function _I2C_sendData *****************
  1796 ;; Defined at:
  1797 ;;		line 214 in file "main.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;  char_data       1    wreg     unsigned char 
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;  char_data       1   44[COMRAM] unsigned char 
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2, status,0, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;Total ram usage:        1 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    6
  1818 ;; This function calls:
  1819 ;;		_I2C_Master_Start
  1820 ;;		_I2C_Master_Stop
  1821 ;;		_I2C_Master_Write
  1822 ;; This function is called by:
  1823 ;;		_main
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text8
  1828  001864                     __ptext8:
  1829                           	opt stack 0
  1830  001864                     _I2C_sendData:
  1831                           	opt stack 24
  1832                           
  1833                           ;incstack = 0
  1834                           ;I2C_sendData@char_data stored from wreg
  1835  001864  6E2D               	movwf	I2C_sendData@char_data,c
  1836                           
  1837                           ;main.c: 215: I2C_Master_Start();
  1838  001866  EC8D  F00C         	call	_I2C_Master_Start	;wreg free
  1839                           
  1840                           ;main.c: 216: I2C_Master_Write(0b00010000);
  1841  00186A  0E00               	movlw	0
  1842  00186C  6E2C               	movwf	I2C_Master_Write@byteToWrite+1,c
  1843  00186E  0E10               	movlw	16
  1844  001870  6E2B               	movwf	I2C_Master_Write@byteToWrite,c
  1845  001872  EC80  F00C         	call	_I2C_Master_Write	;wreg free
  1846                           
  1847                           ;main.c: 217: I2C_Master_Write(char_data);
  1848  001876  C02D  F02B         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  1849  00187A  6A2C               	clrf	I2C_Master_Write@byteToWrite+1,c
  1850  00187C  EC80  F00C         	call	_I2C_Master_Write	;wreg free
  1851                           
  1852                           ;main.c: 218: I2C_Master_Stop();
  1853  001880  EC89  F00C         	call	_I2C_Master_Stop	;wreg free
  1854  001884  0012               	return		;funcret
  1855  001886                     __end_of_I2C_sendData:
  1856                           	opt stack 0
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           prodh	equ	0xFF4
  1862                           prodl	equ	0xFF3
  1863                           intcon	equ	0xFF2
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postdec1	equ	0xFE5
  1867                           fsr1l	equ	0xFE1
  1868                           postinc2	equ	0xFDE
  1869                           postdec2	equ	0xFDD
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _I2C_init *****************
  1875 ;; Defined at:
  1876 ;;		line 208 in file "main.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2, status,0, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    6
  1897 ;; This function calls:
  1898 ;;		_I2C_Master_Init
  1899 ;;		_I2C_Master_Start
  1900 ;;		_I2C_Master_Stop
  1901 ;;		_I2C_Master_Write
  1902 ;; This function is called by:
  1903 ;;		_main
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text9
  1908  00183A                     __ptext9:
  1909                           	opt stack 0
  1910  00183A                     _I2C_init:
  1911                           	opt stack 24
  1912                           
  1913                           ;main.c: 209: I2C_Master_Init(100000);
  1914                           
  1915                           ;incstack = 0
  1916  00183A  0EA0               	movlw	160
  1917  00183C  6E2A               	movwf	I2C_Master_Init@clockFreq,c
  1918  00183E  0E86               	movlw	134
  1919  001840  6E2B               	movwf	I2C_Master_Init@clockFreq+1,c
  1920  001842  0E01               	movlw	1
  1921  001844  6E2C               	movwf	I2C_Master_Init@clockFreq+2,c
  1922  001846  0E00               	movlw	0
  1923  001848  6E2D               	movwf	I2C_Master_Init@clockFreq+3,c
  1924  00184A  EC43  F00C         	call	_I2C_Master_Init	;wreg free
  1925                           
  1926                           ;main.c: 210: I2C_Master_Start();
  1927  00184E  EC8D  F00C         	call	_I2C_Master_Start	;wreg free
  1928                           
  1929                           ;main.c: 211: I2C_Master_Write(0b00010000);
  1930  001852  0E00               	movlw	0
  1931  001854  6E2C               	movwf	I2C_Master_Write@byteToWrite+1,c
  1932  001856  0E10               	movlw	16
  1933  001858  6E2B               	movwf	I2C_Master_Write@byteToWrite,c
  1934  00185A  EC80  F00C         	call	_I2C_Master_Write	;wreg free
  1935                           
  1936                           ;main.c: 212: I2C_Master_Stop();
  1937  00185E  EC89  F00C         	call	_I2C_Master_Stop	;wreg free
  1938  001862  0012               	return		;funcret
  1939  001864                     __end_of_I2C_init:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           prodh	equ	0xFF4
  1946                           prodl	equ	0xFF3
  1947                           intcon	equ	0xFF2
  1948                           postinc0	equ	0xFEE
  1949                           wreg	equ	0xFE8
  1950                           postdec1	equ	0xFE5
  1951                           fsr1l	equ	0xFE1
  1952                           postinc2	equ	0xFDE
  1953                           postdec2	equ	0xFDD
  1954                           fsr2h	equ	0xFDA
  1955                           fsr2l	equ	0xFD9
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function _I2C_Master_Write *****************
  1959 ;; Defined at:
  1960 ;;		line 109 in file "I2C.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;  byteToWrite     2   42[COMRAM] unsigned int 
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      void 
  1967 ;; Registers used:
  1968 ;;		wreg, status,2, status,0, cstack
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;Total ram usage:        2 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    5
  1981 ;; This function calls:
  1982 ;;		_I2C_Master_Wait
  1983 ;; This function is called by:
  1984 ;;		_I2C_init
  1985 ;;		_I2C_sendData
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text10
  1990  001900                     __ptext10:
  1991                           	opt stack 0
  1992  001900                     _I2C_Master_Write:
  1993                           	opt stack 24
  1994                           
  1995                           ;I2C.c: 117: I2C_Master_Wait();
  1996                           
  1997                           ;incstack = 0
  1998  001900  EC77  F00C         	call	_I2C_Master_Wait	;wreg free
  1999                           
  2000                           ;I2C.c: 118: SSPBUF = byteToWrite;
  2001  001904  C02B  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2002  001908  0012               	return		;funcret
  2003  00190A                     __end_of_I2C_Master_Write:
  2004                           	opt stack 0
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           prodh	equ	0xFF4
  2010                           prodl	equ	0xFF3
  2011                           intcon	equ	0xFF2
  2012                           postinc0	equ	0xFEE
  2013                           wreg	equ	0xFE8
  2014                           postdec1	equ	0xFE5
  2015                           fsr1l	equ	0xFE1
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _I2C_Master_Stop *****************
  2023 ;; Defined at:
  2024 ;;		line 96 in file "I2C.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0, cstack
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;Total ram usage:        0 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    5
  2045 ;; This function calls:
  2046 ;;		_I2C_Master_Wait
  2047 ;; This function is called by:
  2048 ;;		_I2C_init
  2049 ;;		_I2C_sendData
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text11
  2054  001912                     __ptext11:
  2055                           	opt stack 0
  2056  001912                     _I2C_Master_Stop:
  2057                           	opt stack 24
  2058                           
  2059                           ;I2C.c: 105: I2C_Master_Wait();
  2060                           
  2061                           ;incstack = 0
  2062  001912  EC77  F00C         	call	_I2C_Master_Wait	;wreg free
  2063                           
  2064                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  2065  001916  84C5               	bsf	4037,2,c	;volatile
  2066  001918  0012               	return		;funcret
  2067  00191A                     __end_of_I2C_Master_Stop:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           prodh	equ	0xFF4
  2074                           prodl	equ	0xFF3
  2075                           intcon	equ	0xFF2
  2076                           postinc0	equ	0xFEE
  2077                           wreg	equ	0xFE8
  2078                           postdec1	equ	0xFE5
  2079                           fsr1l	equ	0xFE1
  2080                           postinc2	equ	0xFDE
  2081                           postdec2	equ	0xFDD
  2082                           fsr2h	equ	0xFDA
  2083                           fsr2l	equ	0xFD9
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function _I2C_Master_Start *****************
  2087 ;; Defined at:
  2088 ;;		line 70 in file "I2C.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2, status,0, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    5
  2109 ;; This function calls:
  2110 ;;		_I2C_Master_Wait
  2111 ;; This function is called by:
  2112 ;;		_I2C_init
  2113 ;;		_I2C_sendData
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text12
  2118  00191A                     __ptext12:
  2119                           	opt stack 0
  2120  00191A                     _I2C_Master_Start:
  2121                           	opt stack 24
  2122                           
  2123                           ;I2C.c: 79: I2C_Master_Wait();
  2124                           
  2125                           ;incstack = 0
  2126  00191A  EC77  F00C         	call	_I2C_Master_Wait	;wreg free
  2127                           
  2128                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  2129  00191E  80C5               	bsf	4037,0,c	;volatile
  2130  001920  0012               	return		;funcret
  2131  001922                     __end_of_I2C_Master_Start:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           intcon	equ	0xFF2
  2140                           postinc0	equ	0xFEE
  2141                           wreg	equ	0xFE8
  2142                           postdec1	equ	0xFE5
  2143                           fsr1l	equ	0xFE1
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _I2C_Master_Wait *****************
  2151 ;; Defined at:
  2152 ;;		line 52 in file "I2C.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;		None
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      void 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;Total ram usage:        1 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    4
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_I2C_Master_Start
  2177 ;;		_I2C_Master_Stop
  2178 ;;		_I2C_Master_Write
  2179 ;;		_I2C_Master_RepeatedStart
  2180 ;;		_I2C_Master_Read
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text13
  2185  0018EE                     __ptext13:
  2186                           	opt stack 0
  2187  0018EE                     _I2C_Master_Wait:
  2188                           	opt stack 24
  2189                           
  2190                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2191                           
  2192                           ;incstack = 0
  2193  0018EE  B4C7               	btfsc	4039,2,c	;volatile
  2194  0018F0  D7FE               	goto	_I2C_Master_Wait
  2195  0018F2  CFC5 F02A          	movff	4037,??_I2C_Master_Wait	;volatile
  2196  0018F6  0E1F               	movlw	31
  2197  0018F8  162A               	andwf	??_I2C_Master_Wait,f,c
  2198  0018FA  B4D8               	btfsc	status,2,c
  2199  0018FC  0012               	return	
  2200  0018FE  D7F7               	goto	_I2C_Master_Wait
  2201  001900                     __end_of_I2C_Master_Wait:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           prodh	equ	0xFF4
  2208                           prodl	equ	0xFF3
  2209                           intcon	equ	0xFF2
  2210                           postinc0	equ	0xFEE
  2211                           wreg	equ	0xFE8
  2212                           postdec1	equ	0xFE5
  2213                           fsr1l	equ	0xFE1
  2214                           postinc2	equ	0xFDE
  2215                           postdec2	equ	0xFDD
  2216                           fsr2h	equ	0xFDA
  2217                           fsr2l	equ	0xFD9
  2218                           status	equ	0xFD8
  2219                           
  2220 ;; *************** function _I2C_Master_Init *****************
  2221 ;; Defined at:
  2222 ;;		line 14 in file "I2C.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  clockFreq       4   41[COMRAM] const unsigned long 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      void 
  2229 ;; Registers used:
  2230 ;;		wreg, status,2
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;Total ram usage:        4 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    4
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_I2C_init
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text14
  2251  001886                     __ptext14:
  2252                           	opt stack 0
  2253  001886                     _I2C_Master_Init:
  2254                           	opt stack 25
  2255                           
  2256                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2257                           
  2258                           ;incstack = 0
  2259  001886  9AC6               	bcf	4038,5,c	;volatile
  2260                           
  2261                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2262  001888  8694               	bsf	3988,3,c	;volatile
  2263                           
  2264                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2265  00188A  8894               	bsf	3988,4,c	;volatile
  2266                           
  2267                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2268  00188C  0E80               	movlw	128
  2269  00188E  6EC7               	movwf	4039,c	;volatile
  2270                           
  2271                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2272  001890  0E28               	movlw	40
  2273  001892  6EC6               	movwf	4038,c	;volatile
  2274                           
  2275                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2276  001894  0E00               	movlw	0
  2277  001896  6EC5               	movwf	4037,c	;volatile
  2278                           
  2279                           ;I2C.c: 49: SSPADD = 9600;
  2280  001898  0E80               	movlw	128
  2281  00189A  6EC8               	movwf	4040,c	;volatile
  2282  00189C  0012               	return		;funcret
  2283  00189E                     __end_of_I2C_Master_Init:
  2284                           	opt stack 0
  2285                           tblptru	equ	0xFF8
  2286                           tblptrh	equ	0xFF7
  2287                           tblptrl	equ	0xFF6
  2288                           tablat	equ	0xFF5
  2289                           prodh	equ	0xFF4
  2290                           prodl	equ	0xFF3
  2291                           intcon	equ	0xFF2
  2292                           postinc0	equ	0xFEE
  2293                           wreg	equ	0xFE8
  2294                           postdec1	equ	0xFE5
  2295                           fsr1l	equ	0xFE1
  2296                           postinc2	equ	0xFDE
  2297                           postdec2	equ	0xFDD
  2298                           fsr2h	equ	0xFDA
  2299                           fsr2l	equ	0xFD9
  2300                           status	equ	0xFD8
  2301                           
  2302 ;; *************** function _interruptHandler *****************
  2303 ;; Defined at:
  2304 ;;		line 129 in file "main.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  1    wreg      void 
  2311 ;; Registers used:
  2312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;Total ram usage:       19 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    3
  2325 ;; This function calls:
  2326 ;;		i2_initLCD
  2327 ;;		i2_lcdInst
  2328 ;;		i2_printf
  2329 ;; This function is called by:
  2330 ;;		Interrupt level 2
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	intcode
  2335  000008                     __pintcode:
  2336                           	opt stack 0
  2337  000008                     _interruptHandler:
  2338                           	opt stack 24
  2339                           
  2340                           ;incstack = 0
  2341  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2342  00000A  EDDC  F008         	call	int_func,f	;refresh shadow registers
  2343                           tblptru	equ	0xFF8
  2344                           tblptrh	equ	0xFF7
  2345                           tblptrl	equ	0xFF6
  2346                           tablat	equ	0xFF5
  2347                           prodh	equ	0xFF4
  2348                           prodl	equ	0xFF3
  2349                           intcon	equ	0xFF2
  2350                           postinc0	equ	0xFEE
  2351                           wreg	equ	0xFE8
  2352                           postdec1	equ	0xFE5
  2353                           fsr1l	equ	0xFE1
  2354                           postinc2	equ	0xFDE
  2355                           postdec2	equ	0xFDD
  2356                           fsr2h	equ	0xFDA
  2357                           fsr2l	equ	0xFD9
  2358                           status	equ	0xFD8
  2359                           
  2360                           	psect	intcode_body
  2361  0011B8                     __pintcode_body:
  2362                           	opt stack 24
  2363  0011B8                     int_func:
  2364                           	opt stack 24
  2365  0011B8  0006               	pop		; remove dummy address from shadow register refresh
  2366  0011BA  CFFA F018          	movff	pclath,??_interruptHandler+1
  2367  0011BE  CFFB F019          	movff	pclatu,??_interruptHandler+2
  2368  0011C2  CFE9 F01A          	movff	fsr0l,??_interruptHandler+3
  2369  0011C6  CFEA F01B          	movff	fsr0h,??_interruptHandler+4
  2370  0011CA  CFE1 F01C          	movff	fsr1l,??_interruptHandler+5
  2371  0011CE  CFE2 F01D          	movff	fsr1h,??_interruptHandler+6
  2372  0011D2  CFD9 F01E          	movff	fsr2l,??_interruptHandler+7
  2373  0011D6  CFDA F01F          	movff	fsr2h,??_interruptHandler+8
  2374  0011DA  CFF3 F020          	movff	prodl,??_interruptHandler+9
  2375  0011DE  CFF4 F021          	movff	prodh,??_interruptHandler+10
  2376  0011E2  CFF6 F022          	movff	tblptrl,??_interruptHandler+11
  2377  0011E6  CFF7 F023          	movff	tblptrh,??_interruptHandler+12
  2378  0011EA  CFF8 F024          	movff	tblptru,??_interruptHandler+13
  2379  0011EE  CFF5 F025          	movff	tablat,??_interruptHandler+14
  2380  0011F2  C054  F026         	movff	btemp,??_interruptHandler+15
  2381  0011F6  C055  F027         	movff	btemp+1,??_interruptHandler+16
  2382  0011FA  C056  F028         	movff	btemp+2,??_interruptHandler+17
  2383  0011FE  C057  F029         	movff	btemp+3,??_interruptHandler+18
  2384                           
  2385                           ;main.c: 133: if (RBIF){
  2386  001202  A0F2               	btfss	intcon,0,c	;volatile
  2387  001204  D055               	goto	i2l1764
  2388                           
  2389                           ;main.c: 135: B_input = PORTBbits.RB5;
  2390  001206  AA81               	btfss	3969,5,c	;volatile
  2391  001208  D003               	goto	i2u83_40
  2392  00120A  6A17               	clrf	??_interruptHandler& (0+255),c
  2393  00120C  2A17               	incf	??_interruptHandler& (0+255),f,c
  2394  00120E  D001               	goto	i2u83_48
  2395  001210                     i2u83_40:
  2396  001210  6A17               	clrf	??_interruptHandler& (0+255),c
  2397  001212                     i2u83_48:
  2398  001212  5017               	movf	??_interruptHandler,w,c
  2399  001214  6E52               	movwf	_B_input,c
  2400  001216  6A53               	clrf	_B_input+1,c
  2401                           
  2402                           ;main.c: 139: W_input = PORTBbits.RB7;
  2403  001218  AE81               	btfss	3969,7,c	;volatile
  2404  00121A  D003               	goto	i2u84_40
  2405  00121C  6A17               	clrf	??_interruptHandler& (0+255),c
  2406  00121E  2A17               	incf	??_interruptHandler& (0+255),f,c
  2407  001220  D001               	goto	i2u84_48
  2408  001222                     i2u84_40:
  2409  001222  6A17               	clrf	??_interruptHandler& (0+255),c
  2410  001224                     i2u84_48:
  2411  001224  5017               	movf	??_interruptHandler,w,c
  2412  001226  6E4C               	movwf	_W_input,c
  2413  001228  6A4D               	clrf	_W_input+1,c
  2414                           
  2415                           ;main.c: 142: if (B_input == 1){
  2416  00122A  0452               	decf	_B_input,w,c
  2417  00122C  1053               	iorwf	_B_input+1,w,c
  2418  00122E  A4D8               	btfss	status,2,c
  2419  001230  D014               	goto	i2l176
  2420                           
  2421                           ;main.c: 143: initLCD();
  2422  001232  EC98  F00B         	call	i2_initLCD	;wreg free
  2423                           
  2424                           ;main.c: 144: printf("bolt_interrupt");
  2425  001236  0E36               	movlw	low STR_4
  2426  001238  6E0D               	movwf	i2printf@f,c
  2427  00123A  0E10               	movlw	high STR_4
  2428  00123C  6E0E               	movwf	i2printf@f+1,c
  2429  00123E  EC13  F00A         	call	i2_printf	;wreg free
  2430                           
  2431                           ;main.c: 145: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2432  001242  0E80               	movlw	128
  2433  001244  EC6D  F00C         	call	i2_lcdInst
  2434  001248  0E34               	movlw	52
  2435  00124A  6E17               	movwf	??_interruptHandler& (0+255),c
  2436  00124C  0EF2               	movlw	242
  2437  00124E                     i2u123_47:
  2438  00124E  2EE8               	decfsz	wreg,f,c
  2439  001250  D7FE               	bra	i2u123_47
  2440  001252  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  2441  001254  D7FC               	bra	i2u123_47
  2442                           
  2443                           ;main.c: 146: B_count++;
  2444  001256  4A48               	infsnz	_B_count,f,c
  2445  001258  2A49               	incf	_B_count+1,f,c
  2446  00125A                     i2l176:
  2447                           
  2448                           ;main.c: 148: }
  2449                           ;main.c: 165: if (W_input == 1){
  2450  00125A  044C               	decf	_W_input,w,c
  2451  00125C  104D               	iorwf	_W_input+1,w,c
  2452  00125E  A4D8               	btfss	status,2,c
  2453  001260  D014               	goto	i2l177
  2454                           
  2455                           ;main.c: 166: initLCD();
  2456  001262  EC98  F00B         	call	i2_initLCD	;wreg free
  2457                           
  2458                           ;main.c: 167: printf("washer_interrupt");
  2459  001266  0E25               	movlw	low STR_5
  2460  001268  6E0D               	movwf	i2printf@f,c
  2461  00126A  0E10               	movlw	high STR_5
  2462  00126C  6E0E               	movwf	i2printf@f+1,c
  2463  00126E  EC13  F00A         	call	i2_printf	;wreg free
  2464                           
  2465                           ;main.c: 168: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2466  001272  0E80               	movlw	128
  2467  001274  EC6D  F00C         	call	i2_lcdInst
  2468  001278  0E34               	movlw	52
  2469  00127A  6E17               	movwf	??_interruptHandler& (0+255),c
  2470  00127C  0EF2               	movlw	242
  2471  00127E                     i2u124_47:
  2472  00127E  2EE8               	decfsz	wreg,f,c
  2473  001280  D7FE               	bra	i2u124_47
  2474  001282  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  2475  001284  D7FC               	bra	i2u124_47
  2476                           
  2477                           ;main.c: 169: W_count++;
  2478  001286  4A42               	infsnz	_W_count,f,c
  2479  001288  2A43               	incf	_W_count+1,f,c
  2480  00128A                     i2l177:
  2481                           
  2482                           ;main.c: 172: }
  2483                           ;main.c: 173: initLCD();
  2484  00128A  EC98  F00B         	call	i2_initLCD	;wreg free
  2485                           
  2486                           ;main.c: 174: printf("interrupted");
  2487  00128E  0E45               	movlw	low STR_6
  2488  001290  6E0D               	movwf	i2printf@f,c
  2489  001292  0E10               	movlw	high STR_6
  2490  001294  6E0E               	movwf	i2printf@f+1,c
  2491  001296  EC13  F00A         	call	i2_printf	;wreg free
  2492                           
  2493                           ;main.c: 175: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2494  00129A  0E80               	movlw	128
  2495  00129C  EC6D  F00C         	call	i2_lcdInst
  2496  0012A0  0E34               	movlw	52
  2497  0012A2  6E17               	movwf	??_interruptHandler& (0+255),c
  2498  0012A4  0EF2               	movlw	242
  2499  0012A6                     i2u125_47:
  2500  0012A6  2EE8               	decfsz	wreg,f,c
  2501  0012A8  D7FE               	bra	i2u125_47
  2502  0012AA  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  2503  0012AC  D7FC               	bra	i2u125_47
  2504                           
  2505                           ;main.c: 181: RBIF = 0;
  2506  0012AE  90F2               	bcf	intcon,0,c	;volatile
  2507  0012B0                     i2l1764:
  2508                           
  2509                           ;main.c: 182: return;
  2510  0012B0  C029  F057         	movff	??_interruptHandler+18,btemp+3
  2511  0012B4  C028  F056         	movff	??_interruptHandler+17,btemp+2
  2512  0012B8  C027  F055         	movff	??_interruptHandler+16,btemp+1
  2513  0012BC  C026  F054         	movff	??_interruptHandler+15,btemp
  2514  0012C0  C025  FFF5         	movff	??_interruptHandler+14,tablat
  2515  0012C4  C024  FFF8         	movff	??_interruptHandler+13,tblptru
  2516  0012C8  C023  FFF7         	movff	??_interruptHandler+12,tblptrh
  2517  0012CC  C022  FFF6         	movff	??_interruptHandler+11,tblptrl
  2518  0012D0  C021  FFF4         	movff	??_interruptHandler+10,prodh
  2519  0012D4  C020  FFF3         	movff	??_interruptHandler+9,prodl
  2520  0012D8  C01F  FFDA         	movff	??_interruptHandler+8,fsr2h
  2521  0012DC  C01E  FFD9         	movff	??_interruptHandler+7,fsr2l
  2522  0012E0  C01D  FFE2         	movff	??_interruptHandler+6,fsr1h
  2523  0012E4  C01C  FFE1         	movff	??_interruptHandler+5,fsr1l
  2524  0012E8  C01B  FFEA         	movff	??_interruptHandler+4,fsr0h
  2525  0012EC  C01A  FFE9         	movff	??_interruptHandler+3,fsr0l
  2526  0012F0  C019  FFFB         	movff	??_interruptHandler+2,pclatu
  2527  0012F4  C018  FFFA         	movff	??_interruptHandler+1,pclath
  2528  0012F8  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2529  0012FA  0011               	retfie		f
  2530  0012FC                     __end_of_interruptHandler:
  2531                           	opt stack 0
  2532                           pclatu	equ	0xFFB
  2533                           pclath	equ	0xFFA
  2534                           tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           prodh	equ	0xFF4
  2539                           prodl	equ	0xFF3
  2540                           intcon	equ	0xFF2
  2541                           postinc0	equ	0xFEE
  2542                           fsr0h	equ	0xFEA
  2543                           fsr0l	equ	0xFE9
  2544                           wreg	equ	0xFE8
  2545                           postdec1	equ	0xFE5
  2546                           fsr1h	equ	0xFE2
  2547                           fsr1l	equ	0xFE1
  2548                           postinc2	equ	0xFDE
  2549                           postdec2	equ	0xFDD
  2550                           fsr2h	equ	0xFDA
  2551                           fsr2l	equ	0xFD9
  2552                           status	equ	0xFD8
  2553                           
  2554 ;; *************** function i2_printf *****************
  2555 ;; Defined at:
  2556 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2559 ;;		 -> STR_6(12), STR_5(17), STR_4(15), STR_3(20), 
  2560 ;;		 -> STR_2(20), STR_1(20), 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  printf          4    0        struct .
  2563 ;;  printf          3    0        PTR const unsigned char 
  2564 ;;  printf          2   19[COMRAM] unsigned int 
  2565 ;;  printf          2   15[COMRAM] PTR void [1]
  2566 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2567 ;;  printf          2    0        unsigned int 
  2568 ;;  printf          1   21[COMRAM] char 
  2569 ;;  printf          1   18[COMRAM] char 
  2570 ;;  printf          1   17[COMRAM] unsigned char 
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  2   12[COMRAM] int 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2580 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2581 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2582 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;Total ram usage:       10 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    2
  2587 ;; This function calls:
  2588 ;;		i2___lwdiv
  2589 ;;		i2___lwmod
  2590 ;;		i2_putch
  2591 ;; This function is called by:
  2592 ;;		_interruptHandler
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text16
  2597  001426                     __ptext16:
  2598                           	opt stack 0
  2599  001426                     i2_printf:
  2600                           	opt stack 24
  2601                           
  2602                           ;doprnt.c: 466: va_list ap;
  2603                           ;doprnt.c: 499: signed char c;
  2604                           ;doprnt.c: 506: signed char prec;
  2605                           ;doprnt.c: 508: unsigned char flag;
  2606                           ;doprnt.c: 523: union {
  2607                           ;doprnt.c: 524: unsigned long vd;
  2608                           ;doprnt.c: 525: double integ;
  2609                           ;doprnt.c: 526: } tmpval;
  2610                           ;doprnt.c: 528: unsigned int val;
  2611                           ;doprnt.c: 529: unsigned len;
  2612                           ;doprnt.c: 530: const char * cp;
  2613                           ;doprnt.c: 533: *ap = __va_start();
  2614                           
  2615                           ;incstack = 0
  2616  001426  0E0F               	movlw	low (?i2_printf+2)
  2617  001428  6E10               	movwf	i2printf@ap,c
  2618  00142A  0E00               	movlw	high (?i2_printf+2)
  2619  00142C  6E11               	movwf	i2printf@ap+1,c
  2620                           
  2621                           ;doprnt.c: 536: while(c = *f++) {
  2622  00142E  D07D               	goto	i2u78_40
  2623  001430                     
  2624                           ;doprnt.c: 538: if(c != '%')
  2625  001430  0E25               	movlw	37
  2626  001432  1816               	xorwf	i2printf@c,w,c
  2627  001434  B4D8               	btfsc	status,2,c
  2628  001436  D004               	goto	i2l243
  2629                           
  2630                           ;doprnt.c: 540: {
  2631                           ;doprnt.c: 541: (putch(c) );
  2632  001438  5016               	movf	i2printf@c,w,c
  2633  00143A  EC63  F00C         	call	i2_putch
  2634                           
  2635                           ;doprnt.c: 542: continue;
  2636  00143E  D075               	goto	i2u78_40
  2637  001440                     i2l243:
  2638                           
  2639                           ;doprnt.c: 543: }
  2640                           ;doprnt.c: 548: flag = 0;
  2641  001440  0E00               	movlw	0
  2642  001442  6E12               	movwf	i2printf@flag,c
  2643                           
  2644                           ;doprnt.c: 822: }
  2645                           
  2646                           ;doprnt.c: 813: continue;
  2647                           
  2648                           ;doprnt.c: 802: default:
  2649                           
  2650                           ;doprnt.c: 698: case 'i':
  2651                           ;doprnt.c: 699: break;
  2652                           
  2653                           ;doprnt.c: 697: case 'd':
  2654                           
  2655                           ;doprnt.c: 638: goto alldone;
  2656                           
  2657                           ;doprnt.c: 637: case 0:
  2658                           
  2659                           ;doprnt.c: 635: switch(c = *f++) {
  2660  001444  C00D  FFF6         	movff	i2printf@f,tblptrl
  2661  001448  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2662  00144C  4A0D               	infsnz	i2printf@f,f,c
  2663  00144E  2A0E               	incf	i2printf@f+1,f,c
  2664  001450                     	if	0	;tblptru may be non-zero
  2665  001450                     	endif
  2666  001450                     	if	0	;tblptru may be non-zero
  2667  001450                     	endif
  2668  001450  0008               	tblrd		*
  2669  001452  CFF5 F016          	movff	tablat,i2printf@c
  2670  001456  5016               	movf	i2printf@c,w,c
  2671                           
  2672                           ; Switch size 1, requested type "space"
  2673                           ; Number of cases is 3, Range of values is 0 to 105
  2674                           ; switch strategies available:
  2675                           ; Name         Instructions Cycles
  2676                           ; simple_byte           10     6 (average)
  2677                           ;	Chosen strategy is simple_byte
  2678  001458  0A00               	xorlw	0	; case 0
  2679  00145A  B4D8               	btfsc	status,2,c
  2680  00145C  0012               	return	
  2681  00145E  0A64               	xorlw	100	; case 100
  2682  001460  B4D8               	btfsc	status,2,c
  2683  001462  D003               	goto	i2l249
  2684  001464  0A0D               	xorlw	13	; case 105
  2685  001466  A4D8               	btfss	status,2,c
  2686  001468  D060               	goto	i2u78_40
  2687  00146A                     i2l249:
  2688                           
  2689                           ;doprnt.c: 1253: {
  2690                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2691  00146A  C010  FFD9         	movff	i2printf@ap,fsr2l
  2692  00146E  C011  FFDA         	movff	i2printf@ap+1,fsr2h
  2693  001472  CFDE F014          	movff	postinc2,i2printf@val
  2694  001476  CFDD F015          	movff	postdec2,i2printf@val+1
  2695  00147A  0E02               	movlw	2
  2696  00147C  2610               	addwf	i2printf@ap,f,c
  2697  00147E  0E00               	movlw	0
  2698  001480  2211               	addwfc	i2printf@ap+1,f,c
  2699                           
  2700                           ;doprnt.c: 1261: if((int)val < 0) {
  2701  001482  AE15               	btfss	i2printf@val+1,7,c
  2702  001484  D006               	goto	i2l251
  2703                           
  2704                           ;doprnt.c: 1262: flag |= 0x03;
  2705  001486  0E03               	movlw	3
  2706  001488  1212               	iorwf	i2printf@flag,f,c
  2707                           
  2708                           ;doprnt.c: 1263: val = -val;
  2709  00148A  6C14               	negf	i2printf@val,c
  2710  00148C  1E15               	comf	i2printf@val+1,f,c
  2711  00148E  B0D8               	btfsc	status,0,c
  2712  001490  2A15               	incf	i2printf@val+1,f,c
  2713  001492                     i2l251:
  2714                           
  2715                           ;doprnt.c: 1264: }
  2716                           ;doprnt.c: 1266: }
  2717                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2718  001492  0E01               	movlw	1
  2719  001494  6E16               	movwf	i2printf@c,c
  2720  001496                     i2l1630:
  2721  001496  0E05               	movlw	5
  2722  001498  1816               	xorwf	i2printf@c,w,c
  2723  00149A  B4D8               	btfsc	status,2,c
  2724  00149C  D012               	goto	i2u76_40
  2725                           
  2726                           ;doprnt.c: 1306: if(val < dpowers[c])
  2727  00149E  5016               	movf	i2printf@c,w,c
  2728  0014A0  0D02               	mullw	2
  2729  0014A2  0E01               	movlw	low _dpowers
  2730  0014A4  24F3               	addwf	prodl,w,c
  2731  0014A6  6EF6               	movwf	tblptrl,c
  2732  0014A8  0E10               	movlw	high _dpowers
  2733  0014AA  20F4               	addwfc	prodh,w,c
  2734  0014AC  6EF7               	movwf	tblptrh,c
  2735  0014AE                     	if	0	;There are less than 3 active tblptr bytes
  2736  0014AE                     	endif
  2737  0014AE  0009               	tblrd		*+
  2738  0014B0  50F5               	movf	tablat,w,c
  2739  0014B2  5C14               	subwf	i2printf@val,w,c
  2740  0014B4  0009               	tblrd		*+
  2741  0014B6  50F5               	movf	tablat,w,c
  2742  0014B8  5815               	subwfb	i2printf@val+1,w,c
  2743  0014BA  A0D8               	btfss	status,0,c
  2744  0014BC  D002               	goto	i2u76_40
  2745                           
  2746                           ;doprnt.c: 1307: break;
  2747  0014BE  2A16               	incf	i2printf@c,f,c
  2748  0014C0  D7EA               	goto	i2l1630
  2749  0014C2                     i2u76_40:
  2750                           
  2751                           ;doprnt.c: 1422: {
  2752                           ;doprnt.c: 1438: if(flag & 0x03)
  2753  0014C2  C012  F00F         	movff	i2printf@flag,??i2_printf
  2754  0014C6  0E03               	movlw	3
  2755  0014C8  160F               	andwf	??i2_printf,f,c
  2756  0014CA  B4D8               	btfsc	status,2,c
  2757  0014CC  D003               	goto	i2l255
  2758                           
  2759                           ;doprnt.c: 1439: (putch('-') );
  2760  0014CE  0E2D               	movlw	45
  2761  0014D0  EC63  F00C         	call	i2_putch
  2762  0014D4                     i2l255:
  2763                           
  2764                           ;doprnt.c: 1469: }
  2765                           ;doprnt.c: 1472: prec = c;
  2766  0014D4  C016  F013         	movff	i2printf@c,i2printf@prec
  2767                           
  2768                           ;doprnt.c: 1474: while(prec--) {
  2769  0014D8  D024               	goto	i2l256
  2770  0014DA                     
  2771                           ;doprnt.c: 1478: {
  2772                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2773  0014DA  5013               	movf	i2printf@prec,w,c
  2774  0014DC  0D02               	mullw	2
  2775  0014DE  0E01               	movlw	low _dpowers
  2776  0014E0  24F3               	addwf	prodl,w,c
  2777  0014E2  6EF6               	movwf	tblptrl,c
  2778  0014E4  0E10               	movlw	high _dpowers
  2779  0014E6  20F4               	addwfc	prodh,w,c
  2780  0014E8  6EF7               	movwf	tblptrh,c
  2781  0014EA                     	if	0	;There are less than 3 active tblptr bytes
  2782  0014EA                     	endif
  2783  0014EA  0009               	tblrd		*+
  2784  0014EC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2785  0014F0  000A               	tblrd		*-
  2786  0014F2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2787  0014F6  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2788  0014FA  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2789  0014FE  EC49  F00B         	call	i2___lwdiv	;wreg free
  2790  001502  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2791  001506  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2792  00150A  0E00               	movlw	0
  2793  00150C  6E0B               	movwf	i2___lwmod@divisor+1,c
  2794  00150E  0E0A               	movlw	10
  2795  001510  6E0A               	movwf	i2___lwmod@divisor,c
  2796  001512  ECDF  F00B         	call	i2___lwmod	;wreg free
  2797  001516  5008               	movf	?i2___lwmod,w,c
  2798  001518  0F30               	addlw	48
  2799  00151A  6E16               	movwf	i2printf@c,c
  2800                           
  2801                           ;doprnt.c: 1523: }
  2802                           ;doprnt.c: 1524: (putch(c) );
  2803  00151C  5016               	movf	i2printf@c,w,c
  2804  00151E  EC63  F00C         	call	i2_putch
  2805  001522                     i2l256:
  2806  001522  0613               	decf	i2printf@prec,f,c
  2807  001524  2813               	incf	i2printf@prec,w,c
  2808  001526  A4D8               	btfss	status,2,c
  2809  001528  D7D8               	goto	i2l257
  2810  00152A                     i2u78_40:
  2811  00152A  C00D  FFF6         	movff	i2printf@f,tblptrl
  2812  00152E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2813  001532  4A0D               	infsnz	i2printf@f,f,c
  2814  001534  2A0E               	incf	i2printf@f+1,f,c
  2815  001536                     	if	0	;tblptru may be non-zero
  2816  001536                     	endif
  2817  001536                     	if	0	;tblptru may be non-zero
  2818  001536                     	endif
  2819  001536  0008               	tblrd		*
  2820  001538  CFF5 F016          	movff	tablat,i2printf@c
  2821  00153C  5016               	movf	i2printf@c,w,c
  2822  00153E  B4D8               	btfsc	status,2,c
  2823  001540  0012               	return	
  2824  001542  D776               	goto	i2l242
  2825  001544                     __end_ofi2_printf:
  2826                           	opt stack 0
  2827                           pclatu	equ	0xFFB
  2828                           pclath	equ	0xFFA
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           prodh	equ	0xFF4
  2834                           prodl	equ	0xFF3
  2835                           intcon	equ	0xFF2
  2836                           postinc0	equ	0xFEE
  2837                           fsr0h	equ	0xFEA
  2838                           fsr0l	equ	0xFE9
  2839                           wreg	equ	0xFE8
  2840                           postdec1	equ	0xFE5
  2841                           fsr1h	equ	0xFE2
  2842                           fsr1l	equ	0xFE1
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function i2_putch *****************
  2850 ;; Defined at:
  2851 ;;		line 24 in file "lcd.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  data            1    wreg     unsigned char 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  data            1    2[COMRAM] unsigned char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, status,2, status,0, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;Total ram usage:        1 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    1
  2872 ;; This function calls:
  2873 ;;		i2_lcdNibble
  2874 ;; This function is called by:
  2875 ;;		i2_printf
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text17
  2880  0018C6                     __ptext17:
  2881                           	opt stack 0
  2882  0018C6                     i2_putch:
  2883                           	opt stack 24
  2884                           
  2885                           ;incstack = 0
  2886                           ;i2putch@data stored from wreg
  2887  0018C6  6E03               	movwf	i2putch@data,c
  2888                           
  2889                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2890  0018C8  848C               	bsf	3980,2,c	;volatile
  2891                           
  2892                           ;lcd.c: 33: lcdNibble(data);
  2893  0018CA  5003               	movf	i2putch@data,w,c
  2894  0018CC  ECE1  F00A         	call	i2_lcdNibble
  2895                           
  2896                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2897  0018D0  0EA0               	movlw	160
  2898  0018D2                     i2u126_47:
  2899  0018D2  D000               	nop2	
  2900  0018D4  2EE8               	decfsz	wreg,f,c
  2901  0018D6  D7FD               	bra	i2u126_47
  2902  0018D8  0012               	return		;funcret
  2903  0018DA                     __end_ofi2_putch:
  2904                           	opt stack 0
  2905                           pclatu	equ	0xFFB
  2906                           pclath	equ	0xFFA
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           postinc0	equ	0xFEE
  2915                           fsr0h	equ	0xFEA
  2916                           fsr0l	equ	0xFE9
  2917                           wreg	equ	0xFE8
  2918                           postdec1	equ	0xFE5
  2919                           fsr1h	equ	0xFE2
  2920                           fsr1l	equ	0xFE1
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function i2___lwmod *****************
  2928 ;; Defined at:
  2929 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  dividend        2    7[COMRAM] unsigned int 
  2932 ;;  divisor         2    9[COMRAM] unsigned int 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  __lwmod         1   11[COMRAM] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  2    7[COMRAM] unsigned int 
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, status,0
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;Total ram usage:        5 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		i2_printf
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text18
  2958  0017BE                     __ptext18:
  2959                           	opt stack 0
  2960  0017BE                     i2___lwmod:
  2961                           	opt stack 25
  2962                           
  2963                           ;incstack = 0
  2964  0017BE  500A               	movf	i2___lwmod@divisor,w,c
  2965  0017C0  100B               	iorwf	i2___lwmod@divisor+1,w,c
  2966  0017C2  B4D8               	btfsc	status,2,c
  2967  0017C4  D018               	goto	i2l679
  2968  0017C6  0E01               	movlw	1
  2969  0017C8  6E0C               	movwf	i2___lwmod@counter,c
  2970  0017CA  D004               	goto	i2l674
  2971  0017CC  90D8               	bcf	status,0,c
  2972  0017CE  360A               	rlcf	i2___lwmod@divisor,f,c
  2973  0017D0  360B               	rlcf	i2___lwmod@divisor+1,f,c
  2974  0017D2  2A0C               	incf	i2___lwmod@counter,f,c
  2975  0017D4                     i2l674:
  2976  0017D4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  2977  0017D6  D7FA               	goto	i2l675
  2978  0017D8                     i2u62_40:
  2979  0017D8  500A               	movf	i2___lwmod@divisor,w,c
  2980  0017DA  5C08               	subwf	i2___lwmod@dividend,w,c
  2981  0017DC  500B               	movf	i2___lwmod@divisor+1,w,c
  2982  0017DE  5809               	subwfb	i2___lwmod@dividend+1,w,c
  2983  0017E0  A0D8               	btfss	status,0,c
  2984  0017E2  D004               	goto	i2l678
  2985  0017E4  500A               	movf	i2___lwmod@divisor,w,c
  2986  0017E6  5E08               	subwf	i2___lwmod@dividend,f,c
  2987  0017E8  500B               	movf	i2___lwmod@divisor+1,w,c
  2988  0017EA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  2989  0017EC                     i2l678:
  2990  0017EC  90D8               	bcf	status,0,c
  2991  0017EE  320B               	rrcf	i2___lwmod@divisor+1,f,c
  2992  0017F0  320A               	rrcf	i2___lwmod@divisor,f,c
  2993  0017F2  2E0C               	decfsz	i2___lwmod@counter,f,c
  2994  0017F4  D7F1               	goto	i2u62_40
  2995  0017F6                     i2l679:
  2996  0017F6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  2997  0017FA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  2998  0017FE  0012               	return		;funcret
  2999  001800                     __end_ofi2___lwmod:
  3000                           	opt stack 0
  3001                           pclatu	equ	0xFFB
  3002                           pclath	equ	0xFFA
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           prodh	equ	0xFF4
  3008                           prodl	equ	0xFF3
  3009                           intcon	equ	0xFF2
  3010                           postinc0	equ	0xFEE
  3011                           fsr0h	equ	0xFEA
  3012                           fsr0l	equ	0xFE9
  3013                           wreg	equ	0xFE8
  3014                           postdec1	equ	0xFE5
  3015                           fsr1h	equ	0xFE2
  3016                           fsr1l	equ	0xFE1
  3017                           postinc2	equ	0xFDE
  3018                           postdec2	equ	0xFDD
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function i2___lwdiv *****************
  3024 ;; Defined at:
  3025 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  dividend        2    0[COMRAM] unsigned int 
  3028 ;;  divisor         2    2[COMRAM] unsigned int 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3031 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  2    0[COMRAM] unsigned int 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;Total ram usage:        7 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		i2_printf
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text19
  3055  001692                     __ptext19:
  3056                           	opt stack 0
  3057  001692                     i2___lwdiv:
  3058                           	opt stack 25
  3059                           
  3060                           ;incstack = 0
  3061  001692  0E00               	movlw	0
  3062  001694  6E06               	movwf	i2___lwdiv@quotient+1,c
  3063  001696  0E00               	movlw	0
  3064  001698  6E05               	movwf	i2___lwdiv@quotient,c
  3065  00169A  5003               	movf	i2___lwdiv@divisor,w,c
  3066  00169C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  3067  00169E  B4D8               	btfsc	status,2,c
  3068  0016A0  D01C               	goto	i2l669
  3069  0016A2  0E01               	movlw	1
  3070  0016A4  6E07               	movwf	i2___lwdiv@counter,c
  3071  0016A6  D004               	goto	i2l664
  3072  0016A8  90D8               	bcf	status,0,c
  3073  0016AA  3603               	rlcf	i2___lwdiv@divisor,f,c
  3074  0016AC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  3075  0016AE  2A07               	incf	i2___lwdiv@counter,f,c
  3076  0016B0                     i2l664:
  3077  0016B0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  3078  0016B2  D7FA               	goto	i2l665
  3079  0016B4                     i2u59_40:
  3080  0016B4  90D8               	bcf	status,0,c
  3081  0016B6  3605               	rlcf	i2___lwdiv@quotient,f,c
  3082  0016B8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  3083  0016BA  5003               	movf	i2___lwdiv@divisor,w,c
  3084  0016BC  5C01               	subwf	i2___lwdiv@dividend,w,c
  3085  0016BE  5004               	movf	i2___lwdiv@divisor+1,w,c
  3086  0016C0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  3087  0016C2  A0D8               	btfss	status,0,c
  3088  0016C4  D005               	goto	i2l668
  3089  0016C6  5003               	movf	i2___lwdiv@divisor,w,c
  3090  0016C8  5E01               	subwf	i2___lwdiv@dividend,f,c
  3091  0016CA  5004               	movf	i2___lwdiv@divisor+1,w,c
  3092  0016CC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  3093  0016CE  8005               	bsf	i2___lwdiv@quotient,0,c
  3094  0016D0                     i2l668:
  3095  0016D0  90D8               	bcf	status,0,c
  3096  0016D2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  3097  0016D4  3203               	rrcf	i2___lwdiv@divisor,f,c
  3098  0016D6  2E07               	decfsz	i2___lwdiv@counter,f,c
  3099  0016D8  D7ED               	goto	i2u59_40
  3100  0016DA                     i2l669:
  3101  0016DA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  3102  0016DE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  3103  0016E2  0012               	return		;funcret
  3104  0016E4                     __end_ofi2___lwdiv:
  3105                           	opt stack 0
  3106                           pclatu	equ	0xFFB
  3107                           pclath	equ	0xFFA
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           prodh	equ	0xFF4
  3113                           prodl	equ	0xFF3
  3114                           intcon	equ	0xFF2
  3115                           postinc0	equ	0xFEE
  3116                           fsr0h	equ	0xFEA
  3117                           fsr0l	equ	0xFE9
  3118                           wreg	equ	0xFE8
  3119                           postdec1	equ	0xFE5
  3120                           fsr1h	equ	0xFE2
  3121                           fsr1l	equ	0xFE1
  3122                           postinc2	equ	0xFDE
  3123                           postdec2	equ	0xFDD
  3124                           fsr2h	equ	0xFDA
  3125                           fsr2l	equ	0xFD9
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function i2_initLCD *****************
  3129 ;; Defined at:
  3130 ;;		line 60 in file "lcd.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  1    wreg      void 
  3137 ;; Registers used:
  3138 ;;		wreg, status,2, status,0, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;Total ram usage:        1 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    2
  3151 ;; This function calls:
  3152 ;;		i2_lcdInst
  3153 ;; This function is called by:
  3154 ;;		_interruptHandler
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text20
  3159  001730                     __ptext20:
  3160                           	opt stack 0
  3161  001730                     i2_initLCD:
  3162                           	opt stack 24
  3163                           
  3164                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  3165                           
  3166                           ;incstack = 0
  3167  001730  0E9C               	movlw	156
  3168  001732  6E04               	movwf	??i2_initLCD& (0+255),c
  3169  001734  0ED7               	movlw	215
  3170  001736                     i2u127_47:
  3171  001736  2EE8               	decfsz	wreg,f,c
  3172  001738  D7FE               	bra	i2u127_47
  3173  00173A  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3174  00173C  D7FC               	bra	i2u127_47
  3175  00173E  F000               	nop	
  3176                           
  3177                           ;lcd.c: 69: lcdInst(0b00110011);
  3178  001740  0E33               	movlw	51
  3179  001742  EC6D  F00C         	call	i2_lcdInst
  3180                           
  3181                           ;lcd.c: 70: lcdInst(0b00110010);
  3182  001746  0E32               	movlw	50
  3183  001748  EC6D  F00C         	call	i2_lcdInst
  3184                           
  3185                           ;lcd.c: 71: lcdInst(0b00101000);
  3186  00174C  0E28               	movlw	40
  3187  00174E  EC6D  F00C         	call	i2_lcdInst
  3188                           
  3189                           ;lcd.c: 72: lcdInst(0b00001111);
  3190  001752  0E0F               	movlw	15
  3191  001754  EC6D  F00C         	call	i2_lcdInst
  3192                           
  3193                           ;lcd.c: 73: lcdInst(0b00000110);
  3194  001758  0E06               	movlw	6
  3195  00175A  EC6D  F00C         	call	i2_lcdInst
  3196                           
  3197                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3198  00175E  0E01               	movlw	1
  3199  001760  EC6D  F00C         	call	i2_lcdInst
  3200  001764  0E9C               	movlw	156
  3201  001766  6E04               	movwf	??i2_initLCD& (0+255),c
  3202  001768  0ED7               	movlw	215
  3203  00176A                     i2u128_47:
  3204  00176A  2EE8               	decfsz	wreg,f,c
  3205  00176C  D7FE               	bra	i2u128_47
  3206  00176E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3207  001770  D7FC               	bra	i2u128_47
  3208  001772  F000               	nop	
  3209                           
  3210                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3211  001774  0E0F               	movlw	15
  3212  001776  EC6D  F00C         	call	i2_lcdInst
  3213  00177A  0012               	return		;funcret
  3214  00177C                     __end_ofi2_initLCD:
  3215                           	opt stack 0
  3216                           pclatu	equ	0xFFB
  3217                           pclath	equ	0xFFA
  3218                           tblptru	equ	0xFF8
  3219                           tblptrh	equ	0xFF7
  3220                           tblptrl	equ	0xFF6
  3221                           tablat	equ	0xFF5
  3222                           prodh	equ	0xFF4
  3223                           prodl	equ	0xFF3
  3224                           intcon	equ	0xFF2
  3225                           postinc0	equ	0xFEE
  3226                           fsr0h	equ	0xFEA
  3227                           fsr0l	equ	0xFE9
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           fsr1h	equ	0xFE2
  3231                           fsr1l	equ	0xFE1
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function i2_lcdInst *****************
  3239 ;; Defined at:
  3240 ;;		line 11 in file "lcd.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  data            1    wreg     unsigned char 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  data            1    2[COMRAM] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;Total ram usage:        1 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    1
  3261 ;; This function calls:
  3262 ;;		i2_lcdNibble
  3263 ;; This function is called by:
  3264 ;;		_interruptHandler
  3265 ;;		i2_initLCD
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text21
  3270  0018DA                     __ptext21:
  3271                           	opt stack 0
  3272  0018DA                     i2_lcdInst:
  3273                           	opt stack 25
  3274                           
  3275                           ;incstack = 0
  3276                           ;i2lcdInst@data stored from wreg
  3277  0018DA  6E03               	movwf	i2lcdInst@data,c
  3278                           
  3279                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  3280  0018DC  948C               	bcf	3980,2,c	;volatile
  3281                           
  3282                           ;lcd.c: 20: lcdNibble(data);
  3283  0018DE  5003               	movf	i2lcdInst@data,w,c
  3284  0018E0  ECE1  F00A         	call	i2_lcdNibble
  3285                           
  3286                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3287  0018E4  0EA0               	movlw	160
  3288  0018E6                     i2u129_47:
  3289  0018E6  D000               	nop2	
  3290  0018E8  2EE8               	decfsz	wreg,f,c
  3291  0018EA  D7FD               	bra	i2u129_47
  3292  0018EC  0012               	return		;funcret
  3293  0018EE                     __end_ofi2_lcdInst:
  3294                           	opt stack 0
  3295                           pclatu	equ	0xFFB
  3296                           pclath	equ	0xFFA
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           postinc0	equ	0xFEE
  3305                           fsr0h	equ	0xFEA
  3306                           fsr0l	equ	0xFE9
  3307                           wreg	equ	0xFE8
  3308                           postdec1	equ	0xFE5
  3309                           fsr1h	equ	0xFE2
  3310                           fsr1l	equ	0xFE1
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function i2_lcdNibble *****************
  3318 ;; Defined at:
  3319 ;;		line 37 in file "lcd.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  data            1    wreg     unsigned char 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  data            1    1[COMRAM] unsigned char 
  3324 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      void 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;Total ram usage:        2 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		i2_lcdInst
  3344 ;;		i2_putch
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text22
  3349  0015C2                     __ptext22:
  3350                           	opt stack 0
  3351  0015C2                     i2_lcdNibble:
  3352                           	opt stack 24
  3353                           
  3354                           ;incstack = 0
  3355                           ;i2lcdNibble@data stored from wreg
  3356  0015C2  6E02               	movwf	i2lcdNibble@data,c
  3357                           
  3358                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3359  0015C4  5002               	movf	i2lcdNibble@data,w,c
  3360  0015C6  0BF0               	andlw	240
  3361  0015C8  6E01               	movwf	i2lcdNibble@temp,c
  3362                           
  3363                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3364  0015CA  508C               	movf	3980,w,c	;volatile
  3365  0015CC  0B0F               	andlw	15
  3366  0015CE  6E8C               	movwf	3980,c	;volatile
  3367                           
  3368                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3369  0015D0  5001               	movf	i2lcdNibble@temp,w,c
  3370  0015D2  108C               	iorwf	3980,w,c	;volatile
  3371  0015D4  6E8C               	movwf	3980,c	;volatile
  3372                           
  3373                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3374  0015D6  0E00               	movlw	0
  3375  0015D8  BEF2               	btfsc	intcon,7,c	;volatile
  3376  0015DA  0E01               	movlw	1
  3377  0015DC  6E4B               	movwf	_LCDinterruptState,c
  3378  0015DE  9EF2               	bcf	intcon,7,c	;volatile
  3379  0015E0  868C               	bsf	3980,3,c	;volatile
  3380  0015E2  0E42               	movlw	66
  3381  0015E4                     i2u130_47:
  3382  0015E4  2EE8               	decfsz	wreg,f,c
  3383  0015E6  D7FE               	bra	i2u130_47
  3384  0015E8  D000               	nop2	
  3385  0015EA  968C               	bcf	3980,3,c	;volatile
  3386  0015EC  0EA0               	movlw	160
  3387  0015EE                     i2u131_47:
  3388  0015EE  D000               	nop2	
  3389  0015F0  2EE8               	decfsz	wreg,f,c
  3390  0015F2  D7FD               	bra	i2u131_47
  3391  0015F4  B04B               	btfsc	_LCDinterruptState,0,c
  3392  0015F6  D002               	bra	i2u50_45
  3393  0015F8  9EF2               	bcf	intcon,7,c	;volatile
  3394  0015FA  D001               	bra	i2u50_46
  3395  0015FC                     i2u50_45:
  3396  0015FC  8EF2               	bsf	intcon,7,c	;volatile
  3397  0015FE                     i2u50_46:
  3398                           
  3399                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3400  0015FE  3802               	swapf	i2lcdNibble@data,w,c
  3401  001600  0BF0               	andlw	240
  3402  001602  6E02               	movwf	i2lcdNibble@data,c
  3403                           
  3404                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3405  001604  5002               	movf	i2lcdNibble@data,w,c
  3406  001606  0BF0               	andlw	240
  3407  001608  6E01               	movwf	i2lcdNibble@temp,c
  3408                           
  3409                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3410  00160A  508C               	movf	3980,w,c	;volatile
  3411  00160C  0B0F               	andlw	15
  3412  00160E  6E8C               	movwf	3980,c	;volatile
  3413                           
  3414                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3415  001610  5001               	movf	i2lcdNibble@temp,w,c
  3416  001612  108C               	iorwf	3980,w,c	;volatile
  3417  001614  6E8C               	movwf	3980,c	;volatile
  3418                           
  3419                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3420  001616  0E00               	movlw	0
  3421  001618  BEF2               	btfsc	intcon,7,c	;volatile
  3422  00161A  0E01               	movlw	1
  3423  00161C  6E4B               	movwf	_LCDinterruptState,c
  3424  00161E  9EF2               	bcf	intcon,7,c	;volatile
  3425  001620  868C               	bsf	3980,3,c	;volatile
  3426  001622  0E42               	movlw	66
  3427  001624                     i2u132_47:
  3428  001624  2EE8               	decfsz	wreg,f,c
  3429  001626  D7FE               	bra	i2u132_47
  3430  001628  D000               	nop2	
  3431  00162A  968C               	bcf	3980,3,c	;volatile
  3432  00162C  0EA0               	movlw	160
  3433  00162E                     i2u133_47:
  3434  00162E  D000               	nop2	
  3435  001630  2EE8               	decfsz	wreg,f,c
  3436  001632  D7FD               	bra	i2u133_47
  3437  001634  B04B               	btfsc	_LCDinterruptState,0,c
  3438  001636  D002               	bra	i2u51_45
  3439  001638  9EF2               	bcf	intcon,7,c	;volatile
  3440  00163A  D001               	bra	i2u51_46
  3441  00163C                     i2u51_45:
  3442  00163C  8EF2               	bsf	intcon,7,c	;volatile
  3443  00163E                     i2u51_46:
  3444  00163E  0012               	return		;funcret
  3445  001640                     __end_ofi2_lcdNibble:
  3446                           	opt stack 0
  3447                           pclatu	equ	0xFFB
  3448                           pclath	equ	0xFFA
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           intcon	equ	0xFF2
  3456                           postinc0	equ	0xFEE
  3457                           fsr0h	equ	0xFEA
  3458                           fsr0l	equ	0xFE9
  3459                           wreg	equ	0xFE8
  3460                           postdec1	equ	0xFE5
  3461                           fsr1h	equ	0xFE2
  3462                           fsr1l	equ	0xFE1
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           pclatu	equ	0xFFB
  3469                           pclath	equ	0xFFA
  3470                           tblptru	equ	0xFF8
  3471                           tblptrh	equ	0xFF7
  3472                           tblptrl	equ	0xFF6
  3473                           tablat	equ	0xFF5
  3474                           prodh	equ	0xFF4
  3475                           prodl	equ	0xFF3
  3476                           intcon	equ	0xFF2
  3477                           postinc0	equ	0xFEE
  3478                           fsr0h	equ	0xFEA
  3479                           fsr0l	equ	0xFE9
  3480                           wreg	equ	0xFE8
  3481                           postdec1	equ	0xFE5
  3482                           fsr1h	equ	0xFE2
  3483                           fsr1l	equ	0xFE1
  3484                           postinc2	equ	0xFDE
  3485                           postdec2	equ	0xFDD
  3486                           fsr2h	equ	0xFDA
  3487                           fsr2l	equ	0xFD9
  3488                           status	equ	0xFD8
  3489                           
  3490                           	psect	rparam
  3491  0000                     pclatu	equ	0xFFB
  3492                           pclath	equ	0xFFA
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           postinc0	equ	0xFEE
  3501                           fsr0h	equ	0xFEA
  3502                           fsr0l	equ	0xFE9
  3503                           wreg	equ	0xFE8
  3504                           postdec1	equ	0xFE5
  3505                           fsr1h	equ	0xFE2
  3506                           fsr1l	equ	0xFE1
  3507                           postinc2	equ	0xFDE
  3508                           postdec2	equ	0xFDD
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513                           	psect	temp
  3514  000054                     btemp:
  3515                           	opt stack 0
  3516  000054                     	ds	1
  3517  0000                     int$flags	set	btemp
  3518  0000                     wtemp6	set	btemp+1
  3519                           pclatu	equ	0xFFB
  3520                           pclath	equ	0xFFA
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           postinc0	equ	0xFEE
  3529                           fsr0h	equ	0xFEA
  3530                           fsr0l	equ	0xFE9
  3531                           wreg	equ	0xFE8
  3532                           postdec1	equ	0xFE5
  3533                           fsr1h	equ	0xFE2
  3534                           fsr1l	equ	0xFE1
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8


Data Sizes:
    Strings     64
    Constant    16
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65      83
    BANK0           128      7       7
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[12]), STR_5(CODE[17]), STR_4(CODE[15]), STR_3(CODE[20]), 
		 -> STR_2(CODE[20]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2834
                                             64 COMRAM     1     1      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    1966
                                             53 COMRAM    11     1     10
                                              0 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             43 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             48 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             41 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             44 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             43 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             41 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     272
                                             44 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     326
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     250
                                             42 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             41 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      76
                                             41 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    19    19      0    1294
                                             22 COMRAM    19    19      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            19    17      2    1024
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7       7       5        5.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      53       1       65.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5A      34        0.0%
DATA                 0      0      5A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr  2 22:06:25 2018

                __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l242 1308                          l162 1104  
                        l251 136C                          l243 1318                          l163 1132  
                        l164 1148                          l255 13AE                          l167 1176  
                        l256 1400                          l257 13B4                          l249 1344  
                        l664 165E                          l665 1656                          l674 1792  
                        l675 178A                          l668 167E                          l669 1688  
                        l678 17AA                          l679 17B4                 __CFG_CPB$OFF 000000  
                        u900 1662                          u930 1796                          u875 157E  
                        u876 1580                          u885 15BE                          u886 15C0  
                        u990 139C                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1894 1370                         _ADON 007E10  
                       STR_1 1011                         STR_2 1011                         STR_3 1011  
                       STR_4 1036                         STR_5 1025                         STR_6 1045  
                       u1010 140A                         u1100 1142                         u1117 10DC  
                       u1207 1570                         u1127 10F2                         u1217 15A6  
                       u1137 1114                         u1090 112C                         u1227 15B0  
                       u1147 11AE                         u1157 18AA                         _LATA 000F89  
                       _LATB 000F8A                         u1167 16EA                         _LATC 000F8B  
                       _LATD 000F8C                         u1177 171E                         _LATE 000F8D  
                       u1187 18BE                         u1197 1566                         _RBIE 007F93  
                       _RBIF 007F90                         _main 1052     __end_of_interruptHandler 12FC  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0054             __end_of_I2C_init 1864  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000              __end_ofi2_putch 18DA                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  i2_lcdNibble 15C2             __end_of_LCD_LEFT 100C  
           ?_I2C_Master_Init 002A             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_main 0001              __end_of___lwdiv 1692              __end_of___lwmod 17BE  
                      i2l242 1430                        i2l251 1492                        i2l243 1440  
                      i2l255 14D4                        i2l256 1522                        i2l176 125A  
                      i2l257 14DA                        i2l249 146A                        i2l177 128A  
                      i2l664 16B0                        i2l665 16A8                        i2l674 17D4  
                      i2l675 17CC                        i2l668 16D0                        i2l669 16DA  
                      i2l678 17EC                        i2l679 17F6                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 18C6               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 1730               __CFG_EBTRB$OFF 000000              __end_of_dpowers 100B  
                      _putch 189E                        pclath 000FFA                        tablat 000FF5  
          _LCDinterruptState 004B                        status 000FD8                        wtemp6 0055  
             __CFG_PBADEN$ON 000000        __size_of_I2C_sendData 0022             __end_ofi2_printf 1544  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042              __initialization 1800  
         __size_ofi2_lcdInst 0014                 __end_of_main 11B8                   i2printf@ap 0010  
         __size_ofi2_initLCD 004C            __end_of_LCD_RIGHT 100D                       ??_main 0041  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 002B  
         ??_I2C_Master_Start 002B                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 002D                       _ADRESH 000FC4                       _ADRESL 000FC3  
            i2lcdNibble@data 0002                       ?_putch 0001                 _I2C_sendData 1864  
            i2lcdNibble@temp 0001                       i2l1630 1496                       i2l1764 12B0  
                  ??i2_putch 0003                       _SSPADD 000FC8                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000                    ??___lwdiv 002E  
                  ??___lwmod 0035                       clear_0 1826                    ??_lcdInst 002C  
                     _printf 12FC                    ??_initLCD 002D                 __pdataCOMRAM 004C  
          __end_ofi2___lwdiv 16E4                 __mediumconst 0000            __end_ofi2___lwmod 1800  
                  ?_I2C_init 0001                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8            __end_ofi2_lcdInst 18EE            __end_ofi2_initLCD 177C  
                 __accesstop 0080      __end_of__initialization 182C                ___rparam_used 000001  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                __end_of_putch 18B2  
                i2printf@val 0014           __size_of_lcdNibble 007E                  i2putch@data 0003  
                 ??_I2C_init 002E                    ?i2_printf 000D                      ??_putch 002C  
          ?_interruptHandler 0001           ??_interruptHandler 0017                 ?i2_lcdNibble 0001  
                    ?_printf 0036                      i2u50_45 15FC                      i2u50_46 15FE  
                    i2u51_45 163C                      i2u51_46 163E                   ??i2_printf 000F  
                    i2u62_40 17D8                      i2u59_40 16B4                      i2u83_40 1210  
                    i2u76_40 14C2                      i2u84_40 1222                      i2u83_48 1212  
                    i2u84_48 1224                      i2u78_40 152A         lcd@LCDinterruptState 004A  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
                    _B_count 0048                      _B_input 0052                      i2_putch 18C6  
                    _N_count 0046                      _N_input 0050            __end_of_lcdNibble 15C2  
                    _S_count 0044                      _S_input 004E                      __Hparam 0000  
                    __Lparam 0000                      _W_count 0042                      _W_input 004C  
                    ___lwdiv 1640                      ___lwmod 177C                 __psmallconst 1000  
                    __pcinit 1800                      __ramtop 1000                      _lcdInst 18B2  
                    __ptext0 1052                      __ptext1 12FC                      __ptext2 189E  
                    __ptext3 177C                      __ptext4 1640                      __ptext5 16E4  
                    __ptext6 18B2                      __ptext7 1544                      __ptext8 1864  
                    __ptext9 183A              __size_of_printf 012A                      _initLCD 16E4  
                    _dpowers 1001                    _LCD_RIGHT 100C     __size_of_I2C_Master_Init 0018  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008               __pintcode_body 11B8  
       end_of_initialization 182C        __end_of_LCD_SIZE_HORZ 100F        __end_of_LCD_SIZE_VERT 100E  
              __Lmediumconst 0000                      int_func 11B8    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A                      printf@c 0086                      printf@f 0036  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81                    _TRISBbits 000F93  
                  _TRISCbits 000F94            __size_of_I2C_init 002A            i2___lwdiv@divisor 0003  
                  i2___lwdiv 1692                    i2___lwmod 17BE            i2___lwdiv@counter 0007  
                  i2_lcdInst 18DA                    i2_initLCD 1730         __size_ofi2_lcdNibble 007E  
              __pidataCOMRAM 190A                i2lcdInst@data 0003               __end_of_printf 1426  
               i2printf@flag 0012                 i2printf@prec 0013          start_initialization 1800  
                  i2printf@c 0016                    i2printf@f 000D                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 011E            ??_I2C_Master_Init 002E  
          ??_I2C_Master_Wait 002A                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 002B  
           __CFG_OSC$INTIO67 000000                   ?i2_initLCD 0001     I2C_Master_Init@clockFreq 002A  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 0040    __size_of_interruptHandler 12F4  
                __pbssCOMRAM 0042                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                     ?i2_putch 0001             _I2C_Master_Start 191A  
           _I2C_Master_Write 1900             ___lwdiv@dividend 002A            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                    _lcdNibble 1544                     ?___lwdiv 002A  
                   ?___lwmod 0031                     ?_lcdInst 0001                     ?_initLCD 0001  
                __smallconst 1000                     _I2C_init 183A             ___lwdiv@quotient 002F  
              ?_I2C_sendData 0001                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0014                     _LCD_LEFT 100B                  ??i2_lcdInst 0003  
                   _LATCbits 000F8B                     _LATDbits 000F8C                  ??i2_initLCD 0004  
                   i2u130_47 15E4                     i2u131_47 15EE                     i2u123_47 124E  
                   i2u132_47 1624                     i2u124_47 127E                     i2u133_47 162E  
                   i2u125_47 12A6                     i2u126_47 18D2                     i2u127_47 1736  
                   i2u128_47 176A                     i2u129_47 18E6             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001                   _ADCON0bits 000FC2                   _ADCON2bits 000FC0  
              lcdNibble@data 002B                   printf@flag 0082                lcdNibble@temp 002A  
                 printf@prec 0083                     i2_printf 1426               ??_I2C_sendData 002D  
             _LCD_HORZ_LIMIT 1010                    copy_data0 1814             __size_ofi2_putch 0014  
                   __Hrparam 0000        I2C_sendData@char_data 002D                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___lwdiv 0052             __size_of___lwmod 0042  
           _interruptHandler 0008             __size_of_lcdInst 0014              _I2C_Master_Init 1886  
           __size_of_initLCD 004C              _I2C_Master_Wait 18EE              _I2C_Master_Stop 1912  
     __end_of_LCD_HORZ_LIMIT 1011              ___lwdiv@divisor 002C              ___lwdiv@counter 002E  
                   __ptext10 1900                     __ptext11 1912                     __ptext20 1730  
                   __ptext12 191A                     __ptext21 18DA                     __ptext13 18EE  
                   __ptext22 15C2                     __ptext14 1886                     __ptext16 1426  
                   __ptext17 18C6                     __ptext18 17BE                     __ptext19 1692  
             _LCD_VERT_LIMIT 100F                __size_of_main 0166                ??i2_lcdNibble 0001  
                ??_lcdNibble 002A                     int$flags 0054                    printf@val 0084  
I2C_Master_Write@byteToWrite 002B                    putch@data 002C     __end_of_I2C_Master_Start 1922  
                _OSCTUNEbits 000F9B     __end_of_I2C_Master_Write 190A                   _INTCONbits 000FF2  
     __end_of_LCD_VERT_LIMIT 1010                     intlevel2 0000                _LCD_SIZE_HORZ 100E  
           ___lwmod@dividend 0031                _LCD_SIZE_VERT 100D                   _OSCCONbits 000FD3  
                   printf@ap 0080         __end_of_I2C_sendData 1886      __end_of_I2C_Master_Init 189E  
    __end_of_I2C_Master_Wait 1900      __end_of_I2C_Master_Stop 191A                  lcdInst@data 002C  
        __end_ofi2_lcdNibble 1640              ___lwmod@divisor 0033              ___lwmod@counter 0035  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
