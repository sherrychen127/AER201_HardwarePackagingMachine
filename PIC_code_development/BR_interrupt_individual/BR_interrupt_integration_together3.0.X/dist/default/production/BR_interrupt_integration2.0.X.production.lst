

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr  2 15:24:58 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  0019F2                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _W_input
    80  0019F2  0001               	dw	1
    81                           
    82                           ;initializer for _S_input
    83  0019F4  0001               	dw	1
    84                           
    85                           ;initializer for _N_input
    86  0019F6  0001               	dw	1
    87                           
    88                           ;initializer for _B_input
    89  0019F8  0001               	dw	1
    90                           
    91                           	psect	smallconst
    92  001000                     __psmallconst:
    93                           	opt stack 0
    94  001000  00                 	db	0
    95  001001                     _dpowers:
    96                           	opt stack 0
    97  001001  0001               	dw	1
    98  001003  000A               	dw	10
    99  001005  0064               	dw	100
   100  001007  03E8               	dw	1000
   101  001009  2710               	dw	10000
   102  00100B                     __end_of_dpowers:
   103                           	opt stack 0
   104  00100B                     _LCD_LEFT:
   105                           	opt stack 0
   106  00100B  00                 	db	0
   107  00100C                     __end_of_LCD_LEFT:
   108                           	opt stack 0
   109  00100C                     _LCD_RIGHT:
   110                           	opt stack 0
   111  00100C  01                 	db	1
   112  00100D                     __end_of_LCD_RIGHT:
   113                           	opt stack 0
   114  00100D                     _LCD_SIZE_VERT:
   115                           	opt stack 0
   116  00100D  02                 	db	2
   117  00100E                     __end_of_LCD_SIZE_VERT:
   118                           	opt stack 0
   119  00100E                     _LCD_SIZE_HORZ:
   120                           	opt stack 0
   121  00100E  10                 	db	16
   122  00100F                     __end_of_LCD_SIZE_HORZ:
   123                           	opt stack 0
   124  00100F                     _LCD_VERT_LIMIT:
   125                           	opt stack 0
   126  00100F  02                 	db	2
   127  001010                     __end_of_LCD_VERT_LIMIT:
   128                           	opt stack 0
   129  001010                     _LCD_HORZ_LIMIT:
   130                           	opt stack 0
   131  001010  28                 	db	40
   132  001011                     __end_of_LCD_HORZ_LIMIT:
   133                           	opt stack 0
   134  0000                     _SSPBUF	set	4041
   135  0000                     _SSPCON2bits	set	4037
   136  0000                     _SSPADD	set	4040
   137  0000                     _SSPCON2	set	4037
   138  0000                     _SSPCON1	set	4038
   139  0000                     _SSPSTAT	set	4039
   140  0000                     _SSPCON1bits	set	4038
   141  0000                     _ADRESL	set	4035
   142  0000                     _ADRESH	set	4036
   143  0000                     _ADCON0bits	set	4034
   144  0000                     _PORTBbits	set	3969
   145  0000                     _TRISBbits	set	3987
   146  0000                     _TRISCbits	set	3988
   147  0000                     _LATCbits	set	3979
   148  0000                     _ADCON2bits	set	4032
   149  0000                     _ADCON1	set	4033
   150  0000                     _ADCON0	set	4034
   151  0000                     _TRISE	set	3990
   152  0000                     _TRISD	set	3989
   153  0000                     _TRISC	set	3988
   154  0000                     _TRISB	set	3987
   155  0000                     _TRISA	set	3986
   156  0000                     _LATE	set	3981
   157  0000                     _LATC	set	3979
   158  0000                     _LATB	set	3978
   159  0000                     _LATA	set	3977
   160  0000                     _OSCTUNEbits	set	3995
   161  0000                     _OSCCONbits	set	4051
   162  0000                     _INTCONbits	set	4082
   163  0000                     _LATD	set	3980
   164  0000                     _LATDbits	set	3980
   165  0000                     _ADON	set	32272
   166  0000                     _RBIF	set	32656
   167  0000                     _RBIE	set	32659
   168  001011                     STR_1:
   169  001011  42                 	db	66	;'B'
   170  001012  3A                 	db	58	;':'
   171  001013  25                 	db	37
   172  001014  64                 	db	100	;'d'
   173  001015  2C                 	db	44
   174  001016  4E                 	db	78	;'N'
   175  001017  3A                 	db	58	;':'
   176  001018  25                 	db	37
   177  001019  64                 	db	100	;'d'
   178  00101A  2C                 	db	44
   179  00101B  53                 	db	83	;'S'
   180  00101C  3A                 	db	58	;':'
   181  00101D  25                 	db	37
   182  00101E  64                 	db	100	;'d'
   183  00101F  2C                 	db	44
   184  001020  57                 	db	87	;'W'
   185  001021  3A                 	db	58	;':'
   186  001022  25                 	db	37
   187  001023  64                 	db	100	;'d'
   188  001024  00                 	db	0
   189  001025                     STR_8:
   190  001025  77                 	db	119	;'w'
   191  001026  61                 	db	97	;'a'
   192  001027  73                 	db	115	;'s'
   193  001028  68                 	db	104	;'h'
   194  001029  65                 	db	101	;'e'
   195  00102A  72                 	db	114	;'r'
   196  00102B  5F                 	db	95	;'_'
   197  00102C  69                 	db	105	;'i'
   198  00102D  6E                 	db	110	;'n'
   199  00102E  74                 	db	116	;'t'
   200  00102F  65                 	db	101	;'e'
   201  001030  72                 	db	114	;'r'
   202  001031  72                 	db	114	;'r'
   203  001032  75                 	db	117	;'u'
   204  001033  70                 	db	112	;'p'
   205  001034  74                 	db	116	;'t'
   206  001035  00                 	db	0
   207  001036                     STR_6:
   208  001036  62                 	db	98	;'b'
   209  001037  6F                 	db	111	;'o'
   210  001038  6C                 	db	108	;'l'
   211  001039  74                 	db	116	;'t'
   212  00103A  5F                 	db	95	;'_'
   213  00103B  69                 	db	105	;'i'
   214  00103C  6E                 	db	110	;'n'
   215  00103D  74                 	db	116	;'t'
   216  00103E  65                 	db	101	;'e'
   217  00103F  72                 	db	114	;'r'
   218  001040  72                 	db	114	;'r'
   219  001041  75                 	db	117	;'u'
   220  001042  70                 	db	112	;'p'
   221  001043  74                 	db	116	;'t'
   222  001044  00                 	db	0
   223  001045                     STR_7:
   224  001045  6E                 	db	110	;'n'
   225  001046  75                 	db	117	;'u'
   226  001047  74                 	db	116	;'t'
   227  001048  5F                 	db	95	;'_'
   228  001049  69                 	db	105	;'i'
   229  00104A  6E                 	db	110	;'n'
   230  00104B  74                 	db	116	;'t'
   231  00104C  65                 	db	101	;'e'
   232  00104D  72                 	db	114	;'r'
   233  00104E  72                 	db	114	;'r'
   234  00104F  75                 	db	117	;'u'
   235  001050  70                 	db	112	;'p'
   236  001051  74                 	db	116	;'t'
   237  001052  00                 	db	0
   238  001053                     STR_9:
   239  001053  69                 	db	105	;'i'
   240  001054  6E                 	db	110	;'n'
   241  001055  74                 	db	116	;'t'
   242  001056  65                 	db	101	;'e'
   243  001057  72                 	db	114	;'r'
   244  001058  72                 	db	114	;'r'
   245  001059  75                 	db	117	;'u'
   246  00105A  70                 	db	112	;'p'
   247  00105B  74                 	db	116	;'t'
   248  00105C  65                 	db	101	;'e'
   249  00105D  64                 	db	100	;'d'
   250  00105E  00                 	db	0
   251  0000                     
   252                           ; #config settings
   253  00105F  00                 	db	0	; dummy byte at the end
   254  0000                     
   255                           	psect	cinit
   256  0018E8                     __pcinit:
   257                           	opt stack 0
   258  0018E8                     start_initialization:
   259                           	opt stack 0
   260  0018E8                     __initialization:
   261                           	opt stack 0
   262                           
   263                           ; Initialize objects allocated to COMRAM (8 bytes)
   264                           ; load TBLPTR registers with __pidataCOMRAM
   265  0018E8  0EF2               	movlw	low __pidataCOMRAM
   266  0018EA  6EF6               	movwf	tblptrl,c
   267  0018EC  0E19               	movlw	high __pidataCOMRAM
   268  0018EE  6EF7               	movwf	tblptrh,c
   269  0018F0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   270  0018F2  6EF8               	movwf	tblptru,c
   271  0018F4  EE00  F04C         	lfsr	0,__pdataCOMRAM
   272  0018F8  EE10 F008          	lfsr	1,8
   273  0018FC                     copy_data0:
   274  0018FC  0009               	tblrd		*+
   275  0018FE  CFF5 FFEE          	movff	tablat,postinc0
   276  001902  50E5               	movf	postdec1,w,c
   277  001904  50E1               	movf	fsr1l,w,c
   278  001906  E1FA               	bnz	copy_data0
   279                           
   280                           ; Clear objects allocated to COMRAM (10 bytes)
   281  001908  EE00  F042         	lfsr	0,__pbssCOMRAM
   282  00190C  0E0A               	movlw	10
   283  00190E                     clear_0:
   284  00190E  6AEE               	clrf	postinc0,c
   285  001910  06E8               	decf	wreg,f,c
   286  001912  E1FD               	bnz	clear_0
   287  001914                     end_of_initialization:
   288                           	opt stack 0
   289  001914                     __end_of__initialization:
   290                           	opt stack 0
   291  001914  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   292  001916  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   293  001918  0E00               	movlw	low (__Lmediumconst shr (0+16))
   294  00191A  6EF8               	movwf	tblptru,c
   295  00191C  0100               	movlb	0
   296  00191E  EF30  F008         	goto	_main	;jump to C main() function
   297                           tblptru	equ	0xFF8
   298                           tblptrh	equ	0xFF7
   299                           tblptrl	equ	0xFF6
   300                           tablat	equ	0xFF5
   301                           postinc0	equ	0xFEE
   302                           wreg	equ	0xFE8
   303                           postdec1	equ	0xFE5
   304                           fsr1l	equ	0xFE1
   305                           
   306                           	psect	bssCOMRAM
   307  000042                     __pbssCOMRAM:
   308                           	opt stack 0
   309  000042                     _W_count:
   310                           	opt stack 0
   311  000042                     	ds	2
   312  000044                     _S_count:
   313                           	opt stack 0
   314  000044                     	ds	2
   315  000046                     _N_count:
   316                           	opt stack 0
   317  000046                     	ds	2
   318  000048                     _B_count:
   319                           	opt stack 0
   320  000048                     	ds	2
   321  00004A                     	ds	1
   322  00004B                     _LCDinterruptState:
   323                           	opt stack 0
   324  00004B                     	ds	1
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           postdec1	equ	0xFE5
   332                           fsr1l	equ	0xFE1
   333                           
   334                           	psect	dataCOMRAM
   335  00004C                     __pdataCOMRAM:
   336                           	opt stack 0
   337  00004C                     _W_input:
   338                           	opt stack 0
   339  00004C                     	ds	2
   340  00004E                     _S_input:
   341                           	opt stack 0
   342  00004E                     	ds	2
   343  000050                     _N_input:
   344                           	opt stack 0
   345  000050                     	ds	2
   346  000052                     _B_input:
   347                           	opt stack 0
   348  000052                     	ds	2
   349                           tblptru	equ	0xFF8
   350                           tblptrh	equ	0xFF7
   351                           tblptrl	equ	0xFF6
   352                           tablat	equ	0xFF5
   353                           postinc0	equ	0xFEE
   354                           wreg	equ	0xFE8
   355                           postdec1	equ	0xFE5
   356                           fsr1l	equ	0xFE1
   357                           
   358                           	psect	cstackBANK0
   359  000080                     __pcstackBANK0:
   360                           	opt stack 0
   361  000080                     printf@ap:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x0
   365  000080                     	ds	2
   366  000082                     printf@flag:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x2
   370  000082                     	ds	1
   371  000083                     printf@prec:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x3
   375  000083                     	ds	1
   376  000084                     printf@val:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x4
   380  000084                     	ds	2
   381  000086                     printf@c:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x6
   385  000086                     	ds	1
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	cstackCOMRAM
   396  000001                     __pcstackCOMRAM:
   397                           	opt stack 0
   398  000001                     ?i2___lwdiv:
   399                           	opt stack 0
   400  000001                     i2lcdNibble@temp:
   401                           	opt stack 0
   402  000001                     i2___lwdiv@dividend:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x0
   406  000001                     	ds	1
   407  000002                     i2lcdNibble@data:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x1
   411  000002                     	ds	1
   412  000003                     i2lcdInst@data:
   413                           	opt stack 0
   414  000003                     i2putch@data:
   415                           	opt stack 0
   416  000003                     i2___lwdiv@divisor:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x2
   420  000003                     	ds	1
   421  000004                     ??i2_initLCD:
   422                           
   423                           ; 1 bytes @ 0x3
   424  000004                     	ds	1
   425  000005                     i2___lwdiv@quotient:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x4
   429  000005                     	ds	2
   430  000007                     i2___lwdiv@counter:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x6
   434  000007                     	ds	1
   435  000008                     ?i2___lwmod:
   436                           	opt stack 0
   437  000008                     i2___lwmod@dividend:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x7
   441  000008                     	ds	2
   442  00000A                     i2___lwmod@divisor:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x9
   446  00000A                     	ds	2
   447  00000C                     i2___lwmod@counter:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0xB
   451  00000C                     	ds	1
   452  00000D                     ?i2_printf:
   453                           	opt stack 0
   454  00000D                     i2printf@f:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0xC
   458  00000D                     	ds	2
   459  00000F                     ??i2_printf:
   460                           
   461                           ; 1 bytes @ 0xE
   462  00000F                     	ds	1
   463  000010                     i2printf@ap:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0xF
   467  000010                     	ds	2
   468  000012                     i2printf@flag:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x11
   472  000012                     	ds	1
   473  000013                     i2printf@prec:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x12
   477  000013                     	ds	1
   478  000014                     i2printf@val:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x13
   482  000014                     	ds	2
   483  000016                     i2printf@c:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x15
   487  000016                     	ds	1
   488  000017                     ??_interruptHandler:
   489                           
   490                           ; 1 bytes @ 0x16
   491  000017                     	ds	19
   492  00002A                     ??_I2C_Master_Wait:
   493  00002A                     ?___lwdiv:
   494                           	opt stack 0
   495  00002A                     lcdNibble@temp:
   496                           	opt stack 0
   497  00002A                     ___lwdiv@dividend:
   498                           	opt stack 0
   499  00002A                     I2C_Master_Init@clockFreq:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x29
   503  00002A                     	ds	1
   504  00002B                     lcdNibble@data:
   505                           	opt stack 0
   506  00002B                     I2C_Master_Write@byteToWrite:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x2A
   510  00002B                     	ds	1
   511  00002C                     lcdInst@data:
   512                           	opt stack 0
   513  00002C                     putch@data:
   514                           	opt stack 0
   515  00002C                     ___lwdiv@divisor:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x2B
   519  00002C                     	ds	1
   520  00002D                     ??_initLCD:
   521  00002D                     I2C_sendData@char_data:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2C
   525  00002D                     	ds	1
   526  00002E                     ___lwdiv@counter:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x2D
   530  00002E                     	ds	1
   531  00002F                     ___lwdiv@quotient:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x2E
   535  00002F                     	ds	2
   536  000031                     ?___lwmod:
   537                           	opt stack 0
   538  000031                     ___lwmod@dividend:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x30
   542  000031                     	ds	2
   543  000033                     ___lwmod@divisor:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x32
   547  000033                     	ds	2
   548  000035                     ___lwmod@counter:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x34
   552  000035                     	ds	1
   553  000036                     ?_printf:
   554                           	opt stack 0
   555  000036                     printf@f:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x35
   559  000036                     	ds	10
   560  000040                     ??_printf:
   561                           
   562                           ; 1 bytes @ 0x3F
   563  000040                     	ds	1
   564  000041                     ??_main:
   565                           
   566                           ; 1 bytes @ 0x40
   567  000041                     	ds	1
   568                           tblptru	equ	0xFF8
   569                           tblptrh	equ	0xFF7
   570                           tblptrl	equ	0xFF6
   571                           tablat	equ	0xFF5
   572                           postinc0	equ	0xFEE
   573                           wreg	equ	0xFE8
   574                           postdec1	equ	0xFE5
   575                           fsr1l	equ	0xFE1
   576                           
   577 ;;
   578 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   579 ;;
   580 ;; *************** function _main *****************
   581 ;; Defined at:
   582 ;;		line 32 in file "main.c"
   583 ;; Parameters:    Size  Location     Type
   584 ;;		None
   585 ;; Auto vars:     Size  Location     Type
   586 ;;		None
   587 ;; Return value:  Size  Location     Type
   588 ;;                  1    wreg      void 
   589 ;; Registers used:
   590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   598 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   599 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   600 ;;Total ram usage:        1 bytes
   601 ;; Hardware stack levels required when called:    7
   602 ;; This function calls:
   603 ;;		_I2C_init
   604 ;;		_I2C_sendData
   605 ;;		_initLCD
   606 ;;		_lcdInst
   607 ;;		_printf
   608 ;; This function is called by:
   609 ;;		Startup code after reset
   610 ;; This function uses a non-reentrant model
   611 ;;
   612                           
   613                           	psect	text0
   614  001060                     __ptext0:
   615                           	opt stack 0
   616  001060                     _main:
   617                           	opt stack 24
   618                           
   619                           ;main.c: 39: OSCCONbits.IRCF2 = 1;
   620                           
   621                           ;incstack = 0
   622  001060  8CD3               	bsf	4051,6,c	;volatile
   623                           
   624                           ;main.c: 40: OSCCONbits.IRCF1 = 1;
   625  001062  8AD3               	bsf	4051,5,c	;volatile
   626                           
   627                           ;main.c: 41: OSCCONbits.IRCF0 = 1;
   628  001064  88D3               	bsf	4051,4,c	;volatile
   629                           
   630                           ;main.c: 42: OSCCONbits.SCS1 = 1;
   631  001066  82D3               	bsf	4051,1,c	;volatile
   632                           
   633                           ;main.c: 43: OSCTUNEbits.PLLEN = 1;
   634  001068  8C9B               	bsf	3995,6,c	;volatile
   635                           
   636                           ;main.c: 47: LATA = 0x00;
   637  00106A  0E00               	movlw	0
   638  00106C  6E89               	movwf	3977,c	;volatile
   639                           
   640                           ;main.c: 48: LATB = 0x00;
   641  00106E  0E00               	movlw	0
   642  001070  6E8A               	movwf	3978,c	;volatile
   643                           
   644                           ;main.c: 49: LATC = 0x00;
   645  001072  0E00               	movlw	0
   646  001074  6E8B               	movwf	3979,c	;volatile
   647                           
   648                           ;main.c: 50: LATD = 0x00;
   649  001076  0E00               	movlw	0
   650  001078  6E8C               	movwf	3980,c	;volatile
   651                           
   652                           ;main.c: 51: LATE = 0x00;
   653  00107A  0E00               	movlw	0
   654  00107C  6E8D               	movwf	3981,c	;volatile
   655                           
   656                           ;main.c: 55: TRISA = 0xFF;
   657  00107E  6892               	setf	3986,c	;volatile
   658                           
   659                           ;main.c: 56: TRISB = 0xFF;
   660  001080  6893               	setf	3987,c	;volatile
   661                           
   662                           ;main.c: 57: TRISC = 0x00;
   663  001082  0E00               	movlw	0
   664  001084  6E94               	movwf	3988,c	;volatile
   665                           
   666                           ;main.c: 58: TRISD = 0x00;
   667  001086  0E00               	movlw	0
   668  001088  6E95               	movwf	3989,c	;volatile
   669                           
   670                           ;main.c: 59: TRISE = 0x00;
   671  00108A  0E00               	movlw	0
   672  00108C  6E96               	movwf	3990,c	;volatile
   673                           
   674                           ;main.c: 62: ADCON0 = 0x00;
   675  00108E  0E00               	movlw	0
   676  001090  6EC2               	movwf	4034,c	;volatile
   677                           
   678                           ;main.c: 63: ADCON1 = 0b00001111;
   679  001092  0E0F               	movlw	15
   680  001094  6EC1               	movwf	4033,c	;volatile
   681                           
   682                           ;main.c: 64: ADCON2bits.ADFM = 1;
   683  001096  8EC0               	bsf	4032,7,c	;volatile
   684                           
   685                           ;main.c: 69: (INTCONbits.GIE = 1);
   686  001098  8EF2               	bsf	intcon,7,c	;volatile
   687                           
   688                           ;main.c: 70: initLCD();
   689  00109A  ECE6  F00B         	call	_initLCD	;wreg free
   690                           
   691                           ;main.c: 71: I2C_init();
   692  00109E  EC91  F00C         	call	_I2C_init	;wreg free
   693                           
   694                           ;main.c: 75: LATCbits.LATC0 = 1;
   695  0010A2  808B               	bsf	3979,0,c	;volatile
   696                           
   697                           ;main.c: 76: TRISCbits.RC0 = 0;
   698  0010A4  9094               	bcf	3988,0,c	;volatile
   699                           
   700                           ;main.c: 79: RBIE = 1;
   701  0010A6  86F2               	bsf	intcon,3,c	;volatile
   702                           
   703                           ;main.c: 82: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   704  0010A8  0E11               	movlw	low STR_1
   705  0010AA  6E36               	movwf	printf@f,c
   706  0010AC  0E10               	movlw	high STR_1
   707  0010AE  6E37               	movwf	printf@f+1,c
   708  0010B0  C048  F038         	movff	_B_count,?_printf+2
   709  0010B4  C049  F039         	movff	_B_count+1,?_printf+3
   710  0010B8  C046  F03A         	movff	_N_count,?_printf+4
   711  0010BC  C047  F03B         	movff	_N_count+1,?_printf+5
   712  0010C0  C044  F03C         	movff	_S_count,?_printf+6
   713  0010C4  C045  F03D         	movff	_S_count+1,?_printf+7
   714  0010C8  C042  F03E         	movff	_W_count,?_printf+8
   715  0010CC  C043  F03F         	movff	_W_count+1,?_printf+9
   716  0010D0  ECF2  F009         	call	_printf	;wreg free
   717                           
   718                           ;main.c: 83: initLCD();
   719  0010D4  ECE6  F00B         	call	_initLCD	;wreg free
   720                           
   721                           ;main.c: 173: TRISBbits.RB5 = 1;
   722  0010D8  8A93               	bsf	3987,5,c	;volatile
   723                           
   724                           ;main.c: 174: TRISBbits.RB7 = 1;
   725  0010DA  8E93               	bsf	3987,7,c	;volatile
   726                           
   727                           ;main.c: 175: TRISBbits.RB4 = 1;
   728  0010DC  8893               	bsf	3987,4,c	;volatile
   729                           
   730                           ;main.c: 177: I2C_sendData('5');
   731  0010DE  0E35               	movlw	53
   732  0010E0  ECA6  F00C         	call	_I2C_sendData
   733  0010E4                     
   734                           ;main.c: 181: initLCD();
   735  0010E4  ECE6  F00B         	call	_initLCD	;wreg free
   736                           
   737                           ;main.c: 182: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   738  0010E8  0E80               	movlw	128
   739  0010EA  ECCD  F00C         	call	_lcdInst
   740  0010EE  0E34               	movlw	52
   741  0010F0  6E41               	movwf	??_main& (0+255),c
   742  0010F2  0EF2               	movlw	242
   743  0010F4                     u1187:
   744  0010F4  2EE8               	decfsz	wreg,f,c
   745  0010F6  D7FE               	bra	u1187
   746  0010F8  2E41               	decfsz	??_main& (0+255),f,c
   747  0010FA  D7FC               	bra	u1187
   748                           
   749                           ;main.c: 183: if (B_count >= 4){
   750  0010FC  BE49               	btfsc	_B_count+1,7,c
   751  0010FE  D00A               	goto	l163
   752  001100  5049               	movf	_B_count+1,w,c
   753  001102  E104               	bnz	u1150
   754  001104  0E04               	movlw	4
   755  001106  5C48               	subwf	_B_count,w,c
   756  001108  A0D8               	btfss	status,0,c
   757  00110A  D004               	goto	l163
   758  00110C                     u1150:
   759                           
   760                           ;main.c: 184: I2C_sendData('6');
   761  00110C  0E36               	movlw	54
   762  00110E  ECA6  F00C         	call	_I2C_sendData
   763                           
   764                           ;main.c: 185: break;
   765  001112  D017               	goto	l164
   766  001114                     l163:
   767                           
   768                           ;main.c: 186: }
   769                           ;main.c: 187: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   770  001114  0E11               	movlw	low STR_1
   771  001116  6E36               	movwf	printf@f,c
   772  001118  0E10               	movlw	high STR_1
   773  00111A  6E37               	movwf	printf@f+1,c
   774  00111C  C048  F038         	movff	_B_count,?_printf+2
   775  001120  C049  F039         	movff	_B_count+1,?_printf+3
   776  001124  C046  F03A         	movff	_N_count,?_printf+4
   777  001128  C047  F03B         	movff	_N_count+1,?_printf+5
   778  00112C  C044  F03C         	movff	_S_count,?_printf+6
   779  001130  C045  F03D         	movff	_S_count+1,?_printf+7
   780  001134  C042  F03E         	movff	_W_count,?_printf+8
   781  001138  C043  F03F         	movff	_W_count+1,?_printf+9
   782  00113C  ECF2  F009         	call	_printf	;wreg free
   783  001140  D7D1               	goto	l162
   784  001142                     l164:
   785                           
   786                           ;main.c: 188: }
   787                           ;main.c: 190: I2C_sendData(11);
   788  001142  0E0B               	movlw	11
   789  001144  ECA6  F00C         	call	_I2C_sendData
   790                           
   791                           ;main.c: 191: W_count = 0;
   792  001148  0E00               	movlw	0
   793  00114A  6E43               	movwf	_W_count+1,c
   794  00114C  0E00               	movlw	0
   795  00114E  6E42               	movwf	_W_count,c
   796  001150                     
   797                           ;main.c: 193: initLCD();
   798  001150  ECE6  F00B         	call	_initLCD	;wreg free
   799                           
   800                           ;main.c: 194: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   801  001154  0E80               	movlw	128
   802  001156  ECCD  F00C         	call	_lcdInst
   803  00115A  0E34               	movlw	52
   804  00115C  6E41               	movwf	??_main& (0+255),c
   805  00115E  0EF2               	movlw	242
   806  001160                     u1197:
   807  001160  2EE8               	decfsz	wreg,f,c
   808  001162  D7FE               	bra	u1197
   809  001164  2E41               	decfsz	??_main& (0+255),f,c
   810  001166  D7FC               	bra	u1197
   811                           
   812                           ;main.c: 195: if (W_count >= 4){
   813  001168  BE43               	btfsc	_W_count+1,7,c
   814  00116A  D00A               	goto	l167
   815  00116C  5043               	movf	_W_count+1,w,c
   816  00116E  E104               	bnz	u1160
   817  001170  0E04               	movlw	4
   818  001172  5C42               	subwf	_W_count,w,c
   819  001174  A0D8               	btfss	status,0,c
   820  001176  D004               	goto	l167
   821  001178                     u1160:
   822                           
   823                           ;main.c: 196: I2C_sendData(12);
   824  001178  0E0C               	movlw	12
   825  00117A  ECA6  F00C         	call	_I2C_sendData
   826                           
   827                           ;main.c: 197: break;
   828  00117E  D017               	goto	l168
   829  001180                     l167:
   830                           
   831                           ;main.c: 198: }
   832                           ;main.c: 199: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   833  001180  0E11               	movlw	low STR_1
   834  001182  6E36               	movwf	printf@f,c
   835  001184  0E10               	movlw	high STR_1
   836  001186  6E37               	movwf	printf@f+1,c
   837  001188  C048  F038         	movff	_B_count,?_printf+2
   838  00118C  C049  F039         	movff	_B_count+1,?_printf+3
   839  001190  C046  F03A         	movff	_N_count,?_printf+4
   840  001194  C047  F03B         	movff	_N_count+1,?_printf+5
   841  001198  C044  F03C         	movff	_S_count,?_printf+6
   842  00119C  C045  F03D         	movff	_S_count+1,?_printf+7
   843  0011A0  C042  F03E         	movff	_W_count,?_printf+8
   844  0011A4  C043  F03F         	movff	_W_count+1,?_printf+9
   845  0011A8  ECF2  F009         	call	_printf	;wreg free
   846  0011AC  D7D1               	goto	l166
   847  0011AE                     l168:
   848                           
   849                           ;main.c: 200: }
   850                           ;main.c: 203: I2C_sendData('7');
   851  0011AE  0E37               	movlw	55
   852  0011B0  ECA6  F00C         	call	_I2C_sendData
   853                           
   854                           ;main.c: 204: N_count = 0;
   855  0011B4  0E00               	movlw	0
   856  0011B6  6E47               	movwf	_N_count+1,c
   857  0011B8  0E00               	movlw	0
   858  0011BA  6E46               	movwf	_N_count,c
   859  0011BC                     
   860                           ;main.c: 206: initLCD();
   861  0011BC  ECE6  F00B         	call	_initLCD	;wreg free
   862                           
   863                           ;main.c: 207: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   864  0011C0  0E80               	movlw	128
   865  0011C2  ECCD  F00C         	call	_lcdInst
   866  0011C6  0E34               	movlw	52
   867  0011C8  6E41               	movwf	??_main& (0+255),c
   868  0011CA  0EF2               	movlw	242
   869  0011CC                     u1207:
   870  0011CC  2EE8               	decfsz	wreg,f,c
   871  0011CE  D7FE               	bra	u1207
   872  0011D0  2E41               	decfsz	??_main& (0+255),f,c
   873  0011D2  D7FC               	bra	u1207
   874                           
   875                           ;main.c: 208: if (N_count >= 4){
   876  0011D4  BE47               	btfsc	_N_count+1,7,c
   877  0011D6  D00A               	goto	l171
   878  0011D8  5047               	movf	_N_count+1,w,c
   879  0011DA  E104               	bnz	u1170
   880  0011DC  0E04               	movlw	4
   881  0011DE  5C46               	subwf	_N_count,w,c
   882  0011E0  A0D8               	btfss	status,0,c
   883  0011E2  D004               	goto	l171
   884  0011E4                     u1170:
   885                           
   886                           ;main.c: 209: I2C_sendData('8');
   887  0011E4  0E38               	movlw	56
   888  0011E6  ECA6  F00C         	call	_I2C_sendData
   889                           
   890                           ;main.c: 210: break;
   891  0011EA  D017               	goto	l172
   892  0011EC                     l171:
   893                           
   894                           ;main.c: 211: }
   895                           ;main.c: 212: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   896  0011EC  0E11               	movlw	low STR_1
   897  0011EE  6E36               	movwf	printf@f,c
   898  0011F0  0E10               	movlw	high STR_1
   899  0011F2  6E37               	movwf	printf@f+1,c
   900  0011F4  C048  F038         	movff	_B_count,?_printf+2
   901  0011F8  C049  F039         	movff	_B_count+1,?_printf+3
   902  0011FC  C046  F03A         	movff	_N_count,?_printf+4
   903  001200  C047  F03B         	movff	_N_count+1,?_printf+5
   904  001204  C044  F03C         	movff	_S_count,?_printf+6
   905  001208  C045  F03D         	movff	_S_count+1,?_printf+7
   906  00120C  C042  F03E         	movff	_W_count,?_printf+8
   907  001210  C043  F03F         	movff	_W_count+1,?_printf+9
   908  001214  ECF2  F009         	call	_printf	;wreg free
   909  001218  D7D1               	goto	l170
   910  00121A                     l172:
   911                           
   912                           ;main.c: 213: }
   913                           ;main.c: 216: initLCD();
   914  00121A  ECE6  F00B         	call	_initLCD	;wreg free
   915                           
   916                           ;main.c: 217: RBIE = 0;
   917  00121E  96F2               	bcf	intcon,3,c	;volatile
   918  001220                     
   919                           ;main.c: 221: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   920  001220  0E11               	movlw	low STR_1
   921  001222  6E36               	movwf	printf@f,c
   922  001224  0E10               	movlw	high STR_1
   923  001226  6E37               	movwf	printf@f+1,c
   924  001228  C048  F038         	movff	_B_count,?_printf+2
   925  00122C  C049  F039         	movff	_B_count+1,?_printf+3
   926  001230  C046  F03A         	movff	_N_count,?_printf+4
   927  001234  C047  F03B         	movff	_N_count+1,?_printf+5
   928  001238  C044  F03C         	movff	_S_count,?_printf+6
   929  00123C  C045  F03D         	movff	_S_count+1,?_printf+7
   930  001240  C042  F03E         	movff	_W_count,?_printf+8
   931  001244  C043  F03F         	movff	_W_count+1,?_printf+9
   932  001248  ECF2  F009         	call	_printf	;wreg free
   933                           
   934                           ;main.c: 222: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   935  00124C  0E80               	movlw	128
   936  00124E  ECCD  F00C         	call	_lcdInst
   937  001252  0E34               	movlw	52
   938  001254  6E41               	movwf	??_main& (0+255),c
   939  001256  0EF2               	movlw	242
   940  001258                     u1217:
   941  001258  2EE8               	decfsz	wreg,f,c
   942  00125A  D7FE               	bra	u1217
   943  00125C  2E41               	decfsz	??_main& (0+255),f,c
   944  00125E  D7FC               	bra	u1217
   945  001260  D7DF               	goto	l174
   946  001262                     __end_of_main:
   947                           	opt stack 0
   948                           tblptru	equ	0xFF8
   949                           tblptrh	equ	0xFF7
   950                           tblptrl	equ	0xFF6
   951                           tablat	equ	0xFF5
   952                           intcon	equ	0xFF2
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           postdec1	equ	0xFE5
   956                           fsr1l	equ	0xFE1
   957                           status	equ	0xFD8
   958                           
   959 ;; *************** function _printf *****************
   960 ;; Defined at:
   961 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  f               2   53[COMRAM] PTR const unsigned char 
   964 ;;		 -> STR_9(12), STR_8(17), STR_7(14), STR_6(15), 
   965 ;;		 -> STR_5(20), STR_4(20), STR_3(20), STR_2(20), 
   966 ;;		 -> STR_1(20), 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  tmpval          4    0        struct .
   969 ;;  cp              3    0        PTR const unsigned char 
   970 ;;  val             2    4[BANK0 ] unsigned int 
   971 ;;  ap              2    0[BANK0 ] PTR void [1]
   972 ;;		 -> ?i2_printf(2), ?_printf(2), 
   973 ;;  len             2    0        unsigned int 
   974 ;;  c               1    6[BANK0 ] char 
   975 ;;  prec            1    3[BANK0 ] char 
   976 ;;  flag            1    2[BANK0 ] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  2   53[COMRAM] int 
   979 ;; Registers used:
   980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   986 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Totals:        11       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;Total ram usage:       18 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:    6
   993 ;; This function calls:
   994 ;;		___lwdiv
   995 ;;		___lwmod
   996 ;;		_putch
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text1
  1003  0013E4                     __ptext1:
  1004                           	opt stack 0
  1005  0013E4                     _printf:
  1006                           	opt stack 24
  1007                           
  1008                           ;doprnt.c: 466: va_list ap;
  1009                           ;doprnt.c: 499: signed char c;
  1010                           ;doprnt.c: 506: signed char prec;
  1011                           ;doprnt.c: 508: unsigned char flag;
  1012                           ;doprnt.c: 523: union {
  1013                           ;doprnt.c: 524: unsigned long vd;
  1014                           ;doprnt.c: 525: double integ;
  1015                           ;doprnt.c: 526: } tmpval;
  1016                           ;doprnt.c: 528: unsigned int val;
  1017                           ;doprnt.c: 529: unsigned len;
  1018                           ;doprnt.c: 530: const char * cp;
  1019                           ;doprnt.c: 533: *ap = __va_start();
  1020                           
  1021                           ;incstack = 0
  1022  0013E4  0E38               	movlw	low (?_printf+2)
  1023  0013E6  0100               	movlb	0	; () banked
  1024  0013E8  6F80               	movwf	printf@ap& (0+255),b
  1025  0013EA  0E00               	movlw	high (?_printf+2)
  1026  0013EC  6F81               	movwf	(printf@ap+1)& (0+255),b
  1027                           
  1028                           ;doprnt.c: 536: while(c = *f++) {
  1029  0013EE  D081               	goto	u1070
  1030  0013F0                     
  1031                           ; BSR set to: 0
  1032                           ;doprnt.c: 538: if(c != '%')
  1033                           
  1034                           ; BSR set to: 0
  1035  0013F0  0E25               	movlw	37
  1036  0013F2  1986               	xorwf	printf@c& (0+255),w,b
  1037  0013F4  B4D8               	btfsc	status,2,c
  1038  0013F6  D004               	goto	l251
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;doprnt.c: 540: {
  1042                           ;doprnt.c: 541: (putch(c) );
  1043  0013F8  5186               	movf	printf@c& (0+255),w,b
  1044  0013FA  ECC3  F00C         	call	_putch
  1045                           
  1046                           ;doprnt.c: 542: continue;
  1047  0013FE  D079               	goto	u1070
  1048  001400                     l251:
  1049                           
  1050                           ;doprnt.c: 543: }
  1051                           ;doprnt.c: 548: flag = 0;
  1052  001400  0E00               	movlw	0
  1053  001402  0100               	movlb	0	; () banked
  1054  001404  6F82               	movwf	printf@flag& (0+255),b
  1055                           
  1056                           ; BSR set to: 0
  1057                           
  1058                           ; BSR set to: 0
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;doprnt.c: 822: }
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;doprnt.c: 813: continue;
  1065                           
  1066                           ;doprnt.c: 802: default:
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;doprnt.c: 698: case 'i':
  1070                           ;doprnt.c: 699: break;
  1071                           
  1072                           ; BSR set to: 0
  1073                           
  1074                           ;doprnt.c: 697: case 'd':
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;doprnt.c: 638: goto alldone;
  1078                           
  1079                           ;doprnt.c: 637: case 0:
  1080                           
  1081                           ;doprnt.c: 635: switch(c = *f++) {
  1082  001406  C036  FFF6         	movff	printf@f,tblptrl
  1083  00140A  C037  FFF7         	movff	printf@f+1,tblptrh
  1084  00140E  4A36               	infsnz	printf@f,f,c
  1085  001410  2A37               	incf	printf@f+1,f,c
  1086  001412                     	if	0	;tblptru may be non-zero
  1087  001412                     	endif
  1088  001412                     	if	0	;tblptru may be non-zero
  1089  001412                     	endif
  1090  001412  0008               	tblrd		*
  1091  001414  CFF5 F086          	movff	tablat,printf@c
  1092  001418  5186               	movf	printf@c& (0+255),w,b
  1093                           
  1094                           ; Switch size 1, requested type "space"
  1095                           ; Number of cases is 3, Range of values is 0 to 105
  1096                           ; switch strategies available:
  1097                           ; Name         Instructions Cycles
  1098                           ; simple_byte           10     6 (average)
  1099                           ;	Chosen strategy is simple_byte
  1100  00141A  0A00               	xorlw	0	; case 0
  1101  00141C  B4D8               	btfsc	status,2,c
  1102  00141E  0012               	return	
  1103  001420  0A64               	xorlw	100	; case 100
  1104  001422  B4D8               	btfsc	status,2,c
  1105  001424  D003               	goto	l257
  1106  001426  0A0D               	xorlw	13	; case 105
  1107  001428  A4D8               	btfss	status,2,c
  1108  00142A  D063               	goto	u1070
  1109  00142C                     l257:
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;doprnt.c: 1253: {
  1113                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1114                           
  1115                           ; BSR set to: 0
  1116  00142C  C080  FFD9         	movff	printf@ap,fsr2l
  1117  001430  C081  FFDA         	movff	printf@ap+1,fsr2h
  1118  001434  CFDE F084          	movff	postinc2,printf@val
  1119  001438  CFDD F085          	movff	postdec2,printf@val+1
  1120                           
  1121                           ; BSR set to: 0
  1122  00143C  0E02               	movlw	2
  1123  00143E  2780               	addwf	printf@ap& (0+255),f,b
  1124  001440  0E00               	movlw	0
  1125  001442  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;doprnt.c: 1261: if((int)val < 0) {
  1129  001444  AF85               	btfss	(printf@val+1)& (0+255),7,b
  1130  001446  D006               	goto	l259
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;doprnt.c: 1262: flag |= 0x03;
  1134  001448  0E03               	movlw	3
  1135  00144A  1382               	iorwf	printf@flag& (0+255),f,b
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;doprnt.c: 1263: val = -val;
  1139  00144C  6D84               	negf	printf@val& (0+255),b
  1140  00144E  1F85               	comf	(printf@val+1)& (0+255),f,b
  1141  001450  B0D8               	btfsc	status,0,c
  1142  001452  2B85               	incf	(printf@val+1)& (0+255),f,b
  1143  001454                     l259:
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;doprnt.c: 1264: }
  1147                           ;doprnt.c: 1266: }
  1148                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1149                           
  1150                           ; BSR set to: 0
  1151  001454  0E01               	movlw	1
  1152  001456  6F86               	movwf	printf@c& (0+255),b
  1153  001458                     l1962:
  1154                           
  1155                           ; BSR set to: 0
  1156  001458  0E05               	movlw	5
  1157  00145A  1986               	xorwf	printf@c& (0+255),w,b
  1158  00145C  B4D8               	btfsc	status,2,c
  1159  00145E  D012               	goto	u1050
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;doprnt.c: 1306: if(val < dpowers[c])
  1163                           
  1164                           ; BSR set to: 0
  1165                           
  1166                           ; BSR set to: 0
  1167  001460  5186               	movf	printf@c& (0+255),w,b
  1168  001462  0D02               	mullw	2
  1169  001464  0E01               	movlw	low _dpowers
  1170  001466  24F3               	addwf	prodl,w,c
  1171  001468  6EF6               	movwf	tblptrl,c
  1172  00146A  0E10               	movlw	high _dpowers
  1173  00146C  20F4               	addwfc	prodh,w,c
  1174  00146E  6EF7               	movwf	tblptrh,c
  1175  001470                     	if	0	;There are less than 3 active tblptr bytes
  1176  001470                     	endif
  1177  001470  0009               	tblrd		*+
  1178  001472  50F5               	movf	tablat,w,c
  1179  001474  5D84               	subwf	printf@val& (0+255),w,b
  1180  001476  0009               	tblrd		*+
  1181  001478  50F5               	movf	tablat,w,c
  1182  00147A  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1183  00147C  A0D8               	btfss	status,0,c
  1184  00147E  D002               	goto	u1050
  1185                           
  1186                           ; BSR set to: 0
  1187                           
  1188                           ; BSR set to: 0
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;doprnt.c: 1307: break;
  1192  001480  2B86               	incf	printf@c& (0+255),f,b
  1193  001482  D7EA               	goto	l1962
  1194  001484                     u1050:
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;doprnt.c: 1422: {
  1198                           ;doprnt.c: 1438: if(flag & 0x03)
  1199                           
  1200                           ; BSR set to: 0
  1201  001484  C082  F040         	movff	printf@flag,??_printf
  1202  001488  0E03               	movlw	3
  1203  00148A  1640               	andwf	??_printf,f,c
  1204  00148C  B4D8               	btfsc	status,2,c
  1205  00148E  D003               	goto	l263
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;doprnt.c: 1439: (putch('-') );
  1209  001490  0E2D               	movlw	45
  1210  001492  ECC3  F00C         	call	_putch
  1211  001496                     l263:
  1212                           
  1213                           ;doprnt.c: 1469: }
  1214                           ;doprnt.c: 1472: prec = c;
  1215  001496  C086  F083         	movff	printf@c,printf@prec
  1216                           
  1217                           ;doprnt.c: 1474: while(prec--) {
  1218  00149A  D026               	goto	l264
  1219  00149C                     
  1220                           ;doprnt.c: 1478: {
  1221                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1222  00149C  0100               	movlb	0	; () banked
  1223  00149E  5183               	movf	printf@prec& (0+255),w,b
  1224  0014A0  0D02               	mullw	2
  1225  0014A2  0E01               	movlw	low _dpowers
  1226  0014A4  24F3               	addwf	prodl,w,c
  1227  0014A6  6EF6               	movwf	tblptrl,c
  1228  0014A8  0E10               	movlw	high _dpowers
  1229  0014AA  20F4               	addwfc	prodh,w,c
  1230  0014AC  6EF7               	movwf	tblptrh,c
  1231  0014AE                     	if	0	;There are less than 3 active tblptr bytes
  1232  0014AE                     	endif
  1233  0014AE  0009               	tblrd		*+
  1234  0014B0  CFF5 F02C          	movff	tablat,___lwdiv@divisor
  1235  0014B4  000A               	tblrd		*-
  1236  0014B6  CFF5 F02D          	movff	tablat,___lwdiv@divisor+1
  1237  0014BA  C084  F02A         	movff	printf@val,___lwdiv@dividend
  1238  0014BE  C085  F02B         	movff	printf@val+1,___lwdiv@dividend+1
  1239  0014C2  EC94  F00B         	call	___lwdiv	;wreg free
  1240  0014C6  C02A  F031         	movff	?___lwdiv,___lwmod@dividend
  1241  0014CA  C02B  F032         	movff	?___lwdiv+1,___lwmod@dividend+1
  1242  0014CE  0E00               	movlw	0
  1243  0014D0  6E34               	movwf	___lwmod@divisor+1,c
  1244  0014D2  0E0A               	movlw	10
  1245  0014D4  6E33               	movwf	___lwmod@divisor,c
  1246  0014D6  EC32  F00C         	call	___lwmod	;wreg free
  1247  0014DA  5031               	movf	?___lwmod,w,c
  1248  0014DC  0F30               	addlw	48
  1249  0014DE  0100               	movlb	0	; () banked
  1250  0014E0  6F86               	movwf	printf@c& (0+255),b
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;doprnt.c: 1523: }
  1254                           ;doprnt.c: 1524: (putch(c) );
  1255  0014E2  5186               	movf	printf@c& (0+255),w,b
  1256  0014E4  ECC3  F00C         	call	_putch
  1257  0014E8                     l264:
  1258  0014E8  0100               	movlb	0	; () banked
  1259  0014EA  0783               	decf	printf@prec& (0+255),f,b
  1260  0014EC  2983               	incf	printf@prec& (0+255),w,b
  1261  0014EE  A4D8               	btfss	status,2,c
  1262  0014F0  D7D5               	goto	l265
  1263  0014F2                     u1070:
  1264                           
  1265                           ; BSR set to: 0
  1266                           
  1267                           ; BSR set to: 0
  1268  0014F2  C036  FFF6         	movff	printf@f,tblptrl
  1269  0014F6  C037  FFF7         	movff	printf@f+1,tblptrh
  1270  0014FA  4A36               	infsnz	printf@f,f,c
  1271  0014FC  2A37               	incf	printf@f+1,f,c
  1272  0014FE                     	if	0	;tblptru may be non-zero
  1273  0014FE                     	endif
  1274  0014FE                     	if	0	;tblptru may be non-zero
  1275  0014FE                     	endif
  1276  0014FE  0008               	tblrd		*
  1277  001500  CFF5 F086          	movff	tablat,printf@c
  1278  001504  0100               	movlb	0	; () banked
  1279  001506  5186               	movf	printf@c& (0+255),w,b
  1280  001508  B4D8               	btfsc	status,2,c
  1281  00150A  0012               	return	
  1282  00150C  D771               	goto	l250
  1283  00150E                     __end_of_printf:
  1284                           	opt stack 0
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           prodh	equ	0xFF4
  1290                           prodl	equ	0xFF3
  1291                           intcon	equ	0xFF2
  1292                           postinc0	equ	0xFEE
  1293                           wreg	equ	0xFE8
  1294                           postdec1	equ	0xFE5
  1295                           fsr1l	equ	0xFE1
  1296                           postinc2	equ	0xFDE
  1297                           postdec2	equ	0xFDD
  1298                           fsr2h	equ	0xFDA
  1299                           fsr2l	equ	0xFD9
  1300                           status	equ	0xFD8
  1301                           
  1302 ;; *************** function _putch *****************
  1303 ;; Defined at:
  1304 ;;		line 24 in file "lcd.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  data            1    wreg     unsigned char 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  data            1   43[COMRAM] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;Total ram usage:        1 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    5
  1325 ;; This function calls:
  1326 ;;		_lcdNibble
  1327 ;; This function is called by:
  1328 ;;		_printf
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text2
  1333  001986                     __ptext2:
  1334                           	opt stack 0
  1335  001986                     _putch:
  1336                           	opt stack 24
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;incstack = 0
  1340                           ;putch@data stored from wreg
  1341  001986  6E2C               	movwf	putch@data,c
  1342                           
  1343                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1344  001988  848C               	bsf	3980,2,c	;volatile
  1345                           
  1346                           ;lcd.c: 33: lcdNibble(data);
  1347  00198A  502C               	movf	putch@data,w,c
  1348  00198C  EC16  F00B         	call	_lcdNibble
  1349                           
  1350                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1351  001990  0EA0               	movlw	160
  1352  001992                     u1227:
  1353  001992  D000               	nop2	
  1354  001994  2EE8               	decfsz	wreg,f,c
  1355  001996  D7FD               	bra	u1227
  1356  001998  0012               	return		;funcret
  1357  00199A                     __end_of_putch:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           prodh	equ	0xFF4
  1364                           prodl	equ	0xFF3
  1365                           intcon	equ	0xFF2
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           postdec1	equ	0xFE5
  1369                           fsr1l	equ	0xFE1
  1370                           postinc2	equ	0xFDE
  1371                           postdec2	equ	0xFDD
  1372                           fsr2h	equ	0xFDA
  1373                           fsr2l	equ	0xFD9
  1374                           status	equ	0xFD8
  1375                           
  1376 ;; *************** function ___lwmod *****************
  1377 ;; Defined at:
  1378 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  dividend        2   48[COMRAM] unsigned int 
  1381 ;;  divisor         2   50[COMRAM] unsigned int 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  counter         1   52[COMRAM] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  2   48[COMRAM] unsigned int 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1393 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;Total ram usage:        5 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    4
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_printf
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text3
  1408  001864                     __ptext3:
  1409                           	opt stack 0
  1410  001864                     ___lwmod:
  1411                           	opt stack 25
  1412                           
  1413                           ;incstack = 0
  1414  001864  5033               	movf	___lwmod@divisor,w,c
  1415  001866  1034               	iorwf	___lwmod@divisor+1,w,c
  1416  001868  B4D8               	btfsc	status,2,c
  1417  00186A  D018               	goto	l687
  1418  00186C  0E01               	movlw	1
  1419  00186E  6E35               	movwf	___lwmod@counter,c
  1420  001870  D004               	goto	l682
  1421  001872  90D8               	bcf	status,0,c
  1422  001874  3633               	rlcf	___lwmod@divisor,f,c
  1423  001876  3634               	rlcf	___lwmod@divisor+1,f,c
  1424  001878  2A35               	incf	___lwmod@counter,f,c
  1425  00187A                     l682:
  1426  00187A  AE34               	btfss	___lwmod@divisor+1,7,c
  1427  00187C  D7FA               	goto	l683
  1428  00187E                     u990:
  1429  00187E  5033               	movf	___lwmod@divisor,w,c
  1430  001880  5C31               	subwf	___lwmod@dividend,w,c
  1431  001882  5034               	movf	___lwmod@divisor+1,w,c
  1432  001884  5832               	subwfb	___lwmod@dividend+1,w,c
  1433  001886  A0D8               	btfss	status,0,c
  1434  001888  D004               	goto	l686
  1435  00188A  5033               	movf	___lwmod@divisor,w,c
  1436  00188C  5E31               	subwf	___lwmod@dividend,f,c
  1437  00188E  5034               	movf	___lwmod@divisor+1,w,c
  1438  001890  5A32               	subwfb	___lwmod@dividend+1,f,c
  1439  001892                     l686:
  1440  001892  90D8               	bcf	status,0,c
  1441  001894  3234               	rrcf	___lwmod@divisor+1,f,c
  1442  001896  3233               	rrcf	___lwmod@divisor,f,c
  1443  001898  2E35               	decfsz	___lwmod@counter,f,c
  1444  00189A  D7F1               	goto	u990
  1445  00189C                     l687:
  1446  00189C  C031  F031         	movff	___lwmod@dividend,?___lwmod
  1447  0018A0  C032  F032         	movff	___lwmod@dividend+1,?___lwmod+1
  1448  0018A4  0012               	return		;funcret
  1449  0018A6                     __end_of___lwmod:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           prodh	equ	0xFF4
  1456                           prodl	equ	0xFF3
  1457                           intcon	equ	0xFF2
  1458                           postinc0	equ	0xFEE
  1459                           wreg	equ	0xFE8
  1460                           postdec1	equ	0xFE5
  1461                           fsr1l	equ	0xFE1
  1462                           postinc2	equ	0xFDE
  1463                           postdec2	equ	0xFDD
  1464                           fsr2h	equ	0xFDA
  1465                           fsr2l	equ	0xFD9
  1466                           status	equ	0xFD8
  1467                           
  1468 ;; *************** function ___lwdiv *****************
  1469 ;; Defined at:
  1470 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  dividend        2   41[COMRAM] unsigned int 
  1473 ;;  divisor         2   43[COMRAM] unsigned int 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  quotient        2   46[COMRAM] unsigned int 
  1476 ;;  counter         1   45[COMRAM] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  2   41[COMRAM] unsigned int 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2, status,0
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;Total ram usage:        7 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    4
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_printf
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text4
  1501  001728                     __ptext4:
  1502                           	opt stack 0
  1503  001728                     ___lwdiv:
  1504                           	opt stack 25
  1505                           
  1506                           ;incstack = 0
  1507  001728  0E00               	movlw	0
  1508  00172A  6E30               	movwf	___lwdiv@quotient+1,c
  1509  00172C  0E00               	movlw	0
  1510  00172E  6E2F               	movwf	___lwdiv@quotient,c
  1511  001730  502C               	movf	___lwdiv@divisor,w,c
  1512  001732  102D               	iorwf	___lwdiv@divisor+1,w,c
  1513  001734  B4D8               	btfsc	status,2,c
  1514  001736  D01C               	goto	l677
  1515  001738  0E01               	movlw	1
  1516  00173A  6E2E               	movwf	___lwdiv@counter,c
  1517  00173C  D004               	goto	l672
  1518  00173E  90D8               	bcf	status,0,c
  1519  001740  362C               	rlcf	___lwdiv@divisor,f,c
  1520  001742  362D               	rlcf	___lwdiv@divisor+1,f,c
  1521  001744  2A2E               	incf	___lwdiv@counter,f,c
  1522  001746                     l672:
  1523  001746  AE2D               	btfss	___lwdiv@divisor+1,7,c
  1524  001748  D7FA               	goto	l673
  1525  00174A                     u960:
  1526  00174A  90D8               	bcf	status,0,c
  1527  00174C  362F               	rlcf	___lwdiv@quotient,f,c
  1528  00174E  3630               	rlcf	___lwdiv@quotient+1,f,c
  1529  001750  502C               	movf	___lwdiv@divisor,w,c
  1530  001752  5C2A               	subwf	___lwdiv@dividend,w,c
  1531  001754  502D               	movf	___lwdiv@divisor+1,w,c
  1532  001756  582B               	subwfb	___lwdiv@dividend+1,w,c
  1533  001758  A0D8               	btfss	status,0,c
  1534  00175A  D005               	goto	l676
  1535  00175C  502C               	movf	___lwdiv@divisor,w,c
  1536  00175E  5E2A               	subwf	___lwdiv@dividend,f,c
  1537  001760  502D               	movf	___lwdiv@divisor+1,w,c
  1538  001762  5A2B               	subwfb	___lwdiv@dividend+1,f,c
  1539  001764  802F               	bsf	___lwdiv@quotient,0,c
  1540  001766                     l676:
  1541  001766  90D8               	bcf	status,0,c
  1542  001768  322D               	rrcf	___lwdiv@divisor+1,f,c
  1543  00176A  322C               	rrcf	___lwdiv@divisor,f,c
  1544  00176C  2E2E               	decfsz	___lwdiv@counter,f,c
  1545  00176E  D7ED               	goto	u960
  1546  001770                     l677:
  1547  001770  C02F  F02A         	movff	___lwdiv@quotient,?___lwdiv
  1548  001774  C030  F02B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1549  001778  0012               	return		;funcret
  1550  00177A                     __end_of___lwdiv:
  1551                           	opt stack 0
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           prodh	equ	0xFF4
  1557                           prodl	equ	0xFF3
  1558                           intcon	equ	0xFF2
  1559                           postinc0	equ	0xFEE
  1560                           wreg	equ	0xFE8
  1561                           postdec1	equ	0xFE5
  1562                           fsr1l	equ	0xFE1
  1563                           postinc2	equ	0xFDE
  1564                           postdec2	equ	0xFDD
  1565                           fsr2h	equ	0xFDA
  1566                           fsr2l	equ	0xFD9
  1567                           status	equ	0xFD8
  1568                           
  1569 ;; *************** function _initLCD *****************
  1570 ;; Defined at:
  1571 ;;		line 60 in file "lcd.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;		None
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;		None
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, status,2, status,0, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;Total ram usage:        1 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    6
  1592 ;; This function calls:
  1593 ;;		_lcdInst
  1594 ;; This function is called by:
  1595 ;;		_main
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text5
  1600  0017CC                     __ptext5:
  1601                           	opt stack 0
  1602  0017CC                     _initLCD:
  1603                           	opt stack 24
  1604                           
  1605                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1606                           
  1607                           ;incstack = 0
  1608  0017CC  0E9C               	movlw	156
  1609  0017CE  6E2D               	movwf	??_initLCD& (0+255),c
  1610  0017D0  0ED7               	movlw	215
  1611  0017D2                     u1237:
  1612  0017D2  2EE8               	decfsz	wreg,f,c
  1613  0017D4  D7FE               	bra	u1237
  1614  0017D6  2E2D               	decfsz	??_initLCD& (0+255),f,c
  1615  0017D8  D7FC               	bra	u1237
  1616  0017DA  F000               	nop	
  1617                           
  1618                           ;lcd.c: 69: lcdInst(0b00110011);
  1619  0017DC  0E33               	movlw	51
  1620  0017DE  ECCD  F00C         	call	_lcdInst
  1621                           
  1622                           ;lcd.c: 70: lcdInst(0b00110010);
  1623  0017E2  0E32               	movlw	50
  1624  0017E4  ECCD  F00C         	call	_lcdInst
  1625                           
  1626                           ;lcd.c: 71: lcdInst(0b00101000);
  1627  0017E8  0E28               	movlw	40
  1628  0017EA  ECCD  F00C         	call	_lcdInst
  1629                           
  1630                           ;lcd.c: 72: lcdInst(0b00001111);
  1631  0017EE  0E0F               	movlw	15
  1632  0017F0  ECCD  F00C         	call	_lcdInst
  1633                           
  1634                           ;lcd.c: 73: lcdInst(0b00000110);
  1635  0017F4  0E06               	movlw	6
  1636  0017F6  ECCD  F00C         	call	_lcdInst
  1637                           
  1638                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1639  0017FA  0E01               	movlw	1
  1640  0017FC  ECCD  F00C         	call	_lcdInst
  1641  001800  0E9C               	movlw	156
  1642  001802  6E2D               	movwf	??_initLCD& (0+255),c
  1643  001804  0ED7               	movlw	215
  1644  001806                     u1247:
  1645  001806  2EE8               	decfsz	wreg,f,c
  1646  001808  D7FE               	bra	u1247
  1647  00180A  2E2D               	decfsz	??_initLCD& (0+255),f,c
  1648  00180C  D7FC               	bra	u1247
  1649  00180E  F000               	nop	
  1650                           
  1651                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1652  001810  0E0F               	movlw	15
  1653  001812  ECCD  F00C         	call	_lcdInst
  1654  001816  0012               	return		;funcret
  1655  001818                     __end_of_initLCD:
  1656                           	opt stack 0
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           prodh	equ	0xFF4
  1662                           prodl	equ	0xFF3
  1663                           intcon	equ	0xFF2
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           postdec1	equ	0xFE5
  1667                           fsr1l	equ	0xFE1
  1668                           postinc2	equ	0xFDE
  1669                           postdec2	equ	0xFDD
  1670                           fsr2h	equ	0xFDA
  1671                           fsr2l	equ	0xFD9
  1672                           status	equ	0xFD8
  1673                           
  1674 ;; *************** function _lcdInst *****************
  1675 ;; Defined at:
  1676 ;;		line 11 in file "lcd.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  data            1    wreg     unsigned char 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  data            1   43[COMRAM] unsigned char 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;Total ram usage:        1 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    5
  1697 ;; This function calls:
  1698 ;;		_lcdNibble
  1699 ;; This function is called by:
  1700 ;;		_initLCD
  1701 ;;		_main
  1702 ;;		_lcd_set_cursor
  1703 ;;		_lcd_shift_cursor
  1704 ;;		_lcd_shift_display
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text6
  1709  00199A                     __ptext6:
  1710                           	opt stack 0
  1711  00199A                     _lcdInst:
  1712                           	opt stack 25
  1713                           
  1714                           ;incstack = 0
  1715                           ;lcdInst@data stored from wreg
  1716  00199A  6E2C               	movwf	lcdInst@data,c
  1717                           
  1718                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1719  00199C  948C               	bcf	3980,2,c	;volatile
  1720                           
  1721                           ;lcd.c: 20: lcdNibble(data);
  1722  00199E  502C               	movf	lcdInst@data,w,c
  1723  0019A0  EC16  F00B         	call	_lcdNibble
  1724                           
  1725                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1726  0019A4  0EA0               	movlw	160
  1727  0019A6                     u1257:
  1728  0019A6  D000               	nop2	
  1729  0019A8  2EE8               	decfsz	wreg,f,c
  1730  0019AA  D7FD               	bra	u1257
  1731  0019AC  0012               	return		;funcret
  1732  0019AE                     __end_of_lcdInst:
  1733                           	opt stack 0
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           prodh	equ	0xFF4
  1739                           prodl	equ	0xFF3
  1740                           intcon	equ	0xFF2
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           postdec1	equ	0xFE5
  1744                           fsr1l	equ	0xFE1
  1745                           postinc2	equ	0xFDE
  1746                           postdec2	equ	0xFDD
  1747                           fsr2h	equ	0xFDA
  1748                           fsr2l	equ	0xFD9
  1749                           status	equ	0xFD8
  1750                           
  1751 ;; *************** function _lcdNibble *****************
  1752 ;; Defined at:
  1753 ;;		line 37 in file "lcd.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  data            1    wreg     unsigned char 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  data            1   42[COMRAM] unsigned char 
  1758 ;;  temp            1   41[COMRAM] unsigned char 
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg, status,2, status,0
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;Total ram usage:        2 bytes
  1773 ;; Hardware stack levels used:    1
  1774 ;; Hardware stack levels required when called:    4
  1775 ;; This function calls:
  1776 ;;		Nothing
  1777 ;; This function is called by:
  1778 ;;		_lcdInst
  1779 ;;		_putch
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text7
  1784  00162C                     __ptext7:
  1785                           	opt stack 0
  1786  00162C                     _lcdNibble:
  1787                           	opt stack 24
  1788                           
  1789                           ;incstack = 0
  1790                           ;lcdNibble@data stored from wreg
  1791  00162C  6E2B               	movwf	lcdNibble@data,c
  1792                           
  1793                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1794  00162E  502B               	movf	lcdNibble@data,w,c
  1795  001630  0BF0               	andlw	240
  1796  001632  6E2A               	movwf	lcdNibble@temp,c
  1797                           
  1798                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1799  001634  508C               	movf	3980,w,c	;volatile
  1800  001636  0B0F               	andlw	15
  1801  001638  6E8C               	movwf	3980,c	;volatile
  1802                           
  1803                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1804  00163A  502A               	movf	lcdNibble@temp,w,c
  1805  00163C  108C               	iorwf	3980,w,c	;volatile
  1806  00163E  6E8C               	movwf	3980,c	;volatile
  1807                           
  1808                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1809  001640  0E00               	movlw	0
  1810  001642  BEF2               	btfsc	intcon,7,c	;volatile
  1811  001644  0E01               	movlw	1
  1812  001646  6E4B               	movwf	_LCDinterruptState,c
  1813  001648  9EF2               	bcf	intcon,7,c	;volatile
  1814  00164A  868C               	bsf	3980,3,c	;volatile
  1815  00164C  0E42               	movlw	66
  1816  00164E                     u1267:
  1817  00164E  2EE8               	decfsz	wreg,f,c
  1818  001650  D7FE               	bra	u1267
  1819  001652  D000               	nop2	
  1820  001654  968C               	bcf	3980,3,c	;volatile
  1821  001656  0EA0               	movlw	160
  1822  001658                     u1277:
  1823  001658  D000               	nop2	
  1824  00165A  2EE8               	decfsz	wreg,f,c
  1825  00165C  D7FD               	bra	u1277
  1826  00165E  B04B               	btfsc	_LCDinterruptState,0,c
  1827  001660  D002               	bra	u935
  1828  001662  9EF2               	bcf	intcon,7,c	;volatile
  1829  001664  D001               	bra	u936
  1830  001666                     u935:
  1831  001666  8EF2               	bsf	intcon,7,c	;volatile
  1832  001668                     u936:
  1833                           
  1834                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1835  001668  382B               	swapf	lcdNibble@data,w,c
  1836  00166A  0BF0               	andlw	240
  1837  00166C  6E2B               	movwf	lcdNibble@data,c
  1838                           
  1839                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1840  00166E  502B               	movf	lcdNibble@data,w,c
  1841  001670  0BF0               	andlw	240
  1842  001672  6E2A               	movwf	lcdNibble@temp,c
  1843                           
  1844                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1845  001674  508C               	movf	3980,w,c	;volatile
  1846  001676  0B0F               	andlw	15
  1847  001678  6E8C               	movwf	3980,c	;volatile
  1848                           
  1849                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1850  00167A  502A               	movf	lcdNibble@temp,w,c
  1851  00167C  108C               	iorwf	3980,w,c	;volatile
  1852  00167E  6E8C               	movwf	3980,c	;volatile
  1853                           
  1854                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1855  001680  0E00               	movlw	0
  1856  001682  BEF2               	btfsc	intcon,7,c	;volatile
  1857  001684  0E01               	movlw	1
  1858  001686  6E4B               	movwf	_LCDinterruptState,c
  1859  001688  9EF2               	bcf	intcon,7,c	;volatile
  1860  00168A  868C               	bsf	3980,3,c	;volatile
  1861  00168C  0E42               	movlw	66
  1862  00168E                     u1287:
  1863  00168E  2EE8               	decfsz	wreg,f,c
  1864  001690  D7FE               	bra	u1287
  1865  001692  D000               	nop2	
  1866  001694  968C               	bcf	3980,3,c	;volatile
  1867  001696  0EA0               	movlw	160
  1868  001698                     u1297:
  1869  001698  D000               	nop2	
  1870  00169A  2EE8               	decfsz	wreg,f,c
  1871  00169C  D7FD               	bra	u1297
  1872  00169E  B04B               	btfsc	_LCDinterruptState,0,c
  1873  0016A0  D002               	bra	u945
  1874  0016A2  9EF2               	bcf	intcon,7,c	;volatile
  1875  0016A4  D001               	bra	u946
  1876  0016A6                     u945:
  1877  0016A6  8EF2               	bsf	intcon,7,c	;volatile
  1878  0016A8                     u946:
  1879  0016A8  0012               	return		;funcret
  1880  0016AA                     __end_of_lcdNibble:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           prodh	equ	0xFF4
  1887                           prodl	equ	0xFF3
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           postinc2	equ	0xFDE
  1894                           postdec2	equ	0xFDD
  1895                           fsr2h	equ	0xFDA
  1896                           fsr2l	equ	0xFD9
  1897                           status	equ	0xFD8
  1898                           
  1899 ;; *************** function _I2C_sendData *****************
  1900 ;; Defined at:
  1901 ;;		line 331 in file "main.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;  char_data       1    wreg     unsigned char 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  char_data       1   44[COMRAM] unsigned char 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2, status,0, cstack
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;Total ram usage:        1 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    6
  1922 ;; This function calls:
  1923 ;;		_I2C_Master_Start
  1924 ;;		_I2C_Master_Stop
  1925 ;;		_I2C_Master_Write
  1926 ;; This function is called by:
  1927 ;;		_main
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text8
  1932  00194C                     __ptext8:
  1933                           	opt stack 0
  1934  00194C                     _I2C_sendData:
  1935                           	opt stack 24
  1936                           
  1937                           ;incstack = 0
  1938                           ;I2C_sendData@char_data stored from wreg
  1939  00194C  6E2D               	movwf	I2C_sendData@char_data,c
  1940                           
  1941                           ;main.c: 332: I2C_Master_Start();
  1942  00194E  EC01  F00D         	call	_I2C_Master_Start	;wreg free
  1943                           
  1944                           ;main.c: 333: I2C_Master_Write(0b00010000);
  1945  001952  0E00               	movlw	0
  1946  001954  6E2C               	movwf	I2C_Master_Write@byteToWrite+1,c
  1947  001956  0E10               	movlw	16
  1948  001958  6E2B               	movwf	I2C_Master_Write@byteToWrite,c
  1949  00195A  ECF4  F00C         	call	_I2C_Master_Write	;wreg free
  1950                           
  1951                           ;main.c: 334: I2C_Master_Write(char_data);
  1952  00195E  C02D  F02B         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  1953  001962  6A2C               	clrf	I2C_Master_Write@byteToWrite+1,c
  1954  001964  ECF4  F00C         	call	_I2C_Master_Write	;wreg free
  1955                           
  1956                           ;main.c: 335: I2C_Master_Stop();
  1957  001968  ECFD  F00C         	call	_I2C_Master_Stop	;wreg free
  1958  00196C  0012               	return		;funcret
  1959  00196E                     __end_of_I2C_sendData:
  1960                           	opt stack 0
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           prodh	equ	0xFF4
  1966                           prodl	equ	0xFF3
  1967                           intcon	equ	0xFF2
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postdec1	equ	0xFE5
  1971                           fsr1l	equ	0xFE1
  1972                           postinc2	equ	0xFDE
  1973                           postdec2	equ	0xFDD
  1974                           fsr2h	equ	0xFDA
  1975                           fsr2l	equ	0xFD9
  1976                           status	equ	0xFD8
  1977                           
  1978 ;; *************** function _I2C_init *****************
  1979 ;; Defined at:
  1980 ;;		line 325 in file "main.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;		None
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  1    wreg      void 
  1987 ;; Registers used:
  1988 ;;		wreg, status,2, status,0, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;Total ram usage:        0 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    6
  2001 ;; This function calls:
  2002 ;;		_I2C_Master_Init
  2003 ;;		_I2C_Master_Start
  2004 ;;		_I2C_Master_Stop
  2005 ;;		_I2C_Master_Write
  2006 ;; This function is called by:
  2007 ;;		_main
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           	psect	text9
  2012  001922                     __ptext9:
  2013                           	opt stack 0
  2014  001922                     _I2C_init:
  2015                           	opt stack 24
  2016                           
  2017                           ;main.c: 326: I2C_Master_Init(100000);
  2018                           
  2019                           ;incstack = 0
  2020  001922  0EA0               	movlw	160
  2021  001924  6E2A               	movwf	I2C_Master_Init@clockFreq,c
  2022  001926  0E86               	movlw	134
  2023  001928  6E2B               	movwf	I2C_Master_Init@clockFreq+1,c
  2024  00192A  0E01               	movlw	1
  2025  00192C  6E2C               	movwf	I2C_Master_Init@clockFreq+2,c
  2026  00192E  0E00               	movlw	0
  2027  001930  6E2D               	movwf	I2C_Master_Init@clockFreq+3,c
  2028  001932  ECB7  F00C         	call	_I2C_Master_Init	;wreg free
  2029                           
  2030                           ;main.c: 327: I2C_Master_Start();
  2031  001936  EC01  F00D         	call	_I2C_Master_Start	;wreg free
  2032                           
  2033                           ;main.c: 328: I2C_Master_Write(0b00010000);
  2034  00193A  0E00               	movlw	0
  2035  00193C  6E2C               	movwf	I2C_Master_Write@byteToWrite+1,c
  2036  00193E  0E10               	movlw	16
  2037  001940  6E2B               	movwf	I2C_Master_Write@byteToWrite,c
  2038  001942  ECF4  F00C         	call	_I2C_Master_Write	;wreg free
  2039                           
  2040                           ;main.c: 329: I2C_Master_Stop();
  2041  001946  ECFD  F00C         	call	_I2C_Master_Stop	;wreg free
  2042  00194A  0012               	return		;funcret
  2043  00194C                     __end_of_I2C_init:
  2044                           	opt stack 0
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           prodh	equ	0xFF4
  2050                           prodl	equ	0xFF3
  2051                           intcon	equ	0xFF2
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postdec1	equ	0xFE5
  2055                           fsr1l	equ	0xFE1
  2056                           postinc2	equ	0xFDE
  2057                           postdec2	equ	0xFDD
  2058                           fsr2h	equ	0xFDA
  2059                           fsr2l	equ	0xFD9
  2060                           status	equ	0xFD8
  2061                           
  2062 ;; *************** function _I2C_Master_Write *****************
  2063 ;; Defined at:
  2064 ;;		line 109 in file "I2C.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;  byteToWrite     2   42[COMRAM] unsigned int 
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;		None
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2078 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;Total ram usage:        2 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    5
  2085 ;; This function calls:
  2086 ;;		_I2C_Master_Wait
  2087 ;; This function is called by:
  2088 ;;		_I2C_init
  2089 ;;		_I2C_sendData
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text10
  2094  0019E8                     __ptext10:
  2095                           	opt stack 0
  2096  0019E8                     _I2C_Master_Write:
  2097                           	opt stack 24
  2098                           
  2099                           ;I2C.c: 117: I2C_Master_Wait();
  2100                           
  2101                           ;incstack = 0
  2102  0019E8  ECEB  F00C         	call	_I2C_Master_Wait	;wreg free
  2103                           
  2104                           ;I2C.c: 118: SSPBUF = byteToWrite;
  2105  0019EC  C02B  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2106  0019F0  0012               	return		;funcret
  2107  0019F2                     __end_of_I2C_Master_Write:
  2108                           	opt stack 0
  2109                           tblptru	equ	0xFF8
  2110                           tblptrh	equ	0xFF7
  2111                           tblptrl	equ	0xFF6
  2112                           tablat	equ	0xFF5
  2113                           prodh	equ	0xFF4
  2114                           prodl	equ	0xFF3
  2115                           intcon	equ	0xFF2
  2116                           postinc0	equ	0xFEE
  2117                           wreg	equ	0xFE8
  2118                           postdec1	equ	0xFE5
  2119                           fsr1l	equ	0xFE1
  2120                           postinc2	equ	0xFDE
  2121                           postdec2	equ	0xFDD
  2122                           fsr2h	equ	0xFDA
  2123                           fsr2l	equ	0xFD9
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _I2C_Master_Stop *****************
  2127 ;; Defined at:
  2128 ;;		line 96 in file "I2C.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, status,0, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;Total ram usage:        0 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    5
  2149 ;; This function calls:
  2150 ;;		_I2C_Master_Wait
  2151 ;; This function is called by:
  2152 ;;		_I2C_init
  2153 ;;		_I2C_sendData
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text11
  2158  0019FA                     __ptext11:
  2159                           	opt stack 0
  2160  0019FA                     _I2C_Master_Stop:
  2161                           	opt stack 24
  2162                           
  2163                           ;I2C.c: 105: I2C_Master_Wait();
  2164                           
  2165                           ;incstack = 0
  2166  0019FA  ECEB  F00C         	call	_I2C_Master_Wait	;wreg free
  2167                           
  2168                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  2169  0019FE  84C5               	bsf	4037,2,c	;volatile
  2170  001A00  0012               	return		;funcret
  2171  001A02                     __end_of_I2C_Master_Stop:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           prodh	equ	0xFF4
  2178                           prodl	equ	0xFF3
  2179                           intcon	equ	0xFF2
  2180                           postinc0	equ	0xFEE
  2181                           wreg	equ	0xFE8
  2182                           postdec1	equ	0xFE5
  2183                           fsr1l	equ	0xFE1
  2184                           postinc2	equ	0xFDE
  2185                           postdec2	equ	0xFDD
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _I2C_Master_Start *****************
  2191 ;; Defined at:
  2192 ;;		line 70 in file "I2C.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;		None
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, status,2, status,0, cstack
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;Total ram usage:        0 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    5
  2213 ;; This function calls:
  2214 ;;		_I2C_Master_Wait
  2215 ;; This function is called by:
  2216 ;;		_I2C_init
  2217 ;;		_I2C_sendData
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text12
  2222  001A02                     __ptext12:
  2223                           	opt stack 0
  2224  001A02                     _I2C_Master_Start:
  2225                           	opt stack 24
  2226                           
  2227                           ;I2C.c: 79: I2C_Master_Wait();
  2228                           
  2229                           ;incstack = 0
  2230  001A02  ECEB  F00C         	call	_I2C_Master_Wait	;wreg free
  2231                           
  2232                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  2233  001A06  80C5               	bsf	4037,0,c	;volatile
  2234  001A08  0012               	return		;funcret
  2235  001A0A                     __end_of_I2C_Master_Start:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           tblptrh	equ	0xFF7
  2239                           tblptrl	equ	0xFF6
  2240                           tablat	equ	0xFF5
  2241                           prodh	equ	0xFF4
  2242                           prodl	equ	0xFF3
  2243                           intcon	equ	0xFF2
  2244                           postinc0	equ	0xFEE
  2245                           wreg	equ	0xFE8
  2246                           postdec1	equ	0xFE5
  2247                           fsr1l	equ	0xFE1
  2248                           postinc2	equ	0xFDE
  2249                           postdec2	equ	0xFDD
  2250                           fsr2h	equ	0xFDA
  2251                           fsr2l	equ	0xFD9
  2252                           status	equ	0xFD8
  2253                           
  2254 ;; *************** function _I2C_Master_Wait *****************
  2255 ;; Defined at:
  2256 ;;		line 52 in file "I2C.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;		None
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;		None
  2261 ;; Return value:  Size  Location     Type
  2262 ;;                  1    wreg      void 
  2263 ;; Registers used:
  2264 ;;		wreg, status,2, status,0
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2274 ;;Total ram usage:        1 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; Hardware stack levels required when called:    4
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_I2C_Master_Start
  2281 ;;		_I2C_Master_Stop
  2282 ;;		_I2C_Master_Write
  2283 ;;		_I2C_Master_RepeatedStart
  2284 ;;		_I2C_Master_Read
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text13
  2289  0019D6                     __ptext13:
  2290                           	opt stack 0
  2291  0019D6                     _I2C_Master_Wait:
  2292                           	opt stack 24
  2293                           
  2294                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2295                           
  2296                           ;incstack = 0
  2297  0019D6  B4C7               	btfsc	4039,2,c	;volatile
  2298  0019D8  D7FE               	goto	_I2C_Master_Wait
  2299  0019DA  CFC5 F02A          	movff	4037,??_I2C_Master_Wait	;volatile
  2300  0019DE  0E1F               	movlw	31
  2301  0019E0  162A               	andwf	??_I2C_Master_Wait,f,c
  2302  0019E2  B4D8               	btfsc	status,2,c
  2303  0019E4  0012               	return	
  2304  0019E6  D7F7               	goto	_I2C_Master_Wait
  2305  0019E8                     __end_of_I2C_Master_Wait:
  2306                           	opt stack 0
  2307                           tblptru	equ	0xFF8
  2308                           tblptrh	equ	0xFF7
  2309                           tblptrl	equ	0xFF6
  2310                           tablat	equ	0xFF5
  2311                           prodh	equ	0xFF4
  2312                           prodl	equ	0xFF3
  2313                           intcon	equ	0xFF2
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           postdec1	equ	0xFE5
  2317                           fsr1l	equ	0xFE1
  2318                           postinc2	equ	0xFDE
  2319                           postdec2	equ	0xFDD
  2320                           fsr2h	equ	0xFDA
  2321                           fsr2l	equ	0xFD9
  2322                           status	equ	0xFD8
  2323                           
  2324 ;; *************** function _I2C_Master_Init *****************
  2325 ;; Defined at:
  2326 ;;		line 14 in file "I2C.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;  clockFreq       4   41[COMRAM] const unsigned long 
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;		None
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		wreg, status,2
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;Total ram usage:        4 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    4
  2347 ;; This function calls:
  2348 ;;		Nothing
  2349 ;; This function is called by:
  2350 ;;		_I2C_init
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text14
  2355  00196E                     __ptext14:
  2356                           	opt stack 0
  2357  00196E                     _I2C_Master_Init:
  2358                           	opt stack 25
  2359                           
  2360                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2361                           
  2362                           ;incstack = 0
  2363  00196E  9AC6               	bcf	4038,5,c	;volatile
  2364                           
  2365                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2366  001970  8694               	bsf	3988,3,c	;volatile
  2367                           
  2368                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2369  001972  8894               	bsf	3988,4,c	;volatile
  2370                           
  2371                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2372  001974  0E80               	movlw	128
  2373  001976  6EC7               	movwf	4039,c	;volatile
  2374                           
  2375                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2376  001978  0E28               	movlw	40
  2377  00197A  6EC6               	movwf	4038,c	;volatile
  2378                           
  2379                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2380  00197C  0E00               	movlw	0
  2381  00197E  6EC5               	movwf	4037,c	;volatile
  2382                           
  2383                           ;I2C.c: 49: SSPADD = 9600;
  2384  001980  0E80               	movlw	128
  2385  001982  6EC8               	movwf	4040,c	;volatile
  2386  001984  0012               	return		;funcret
  2387  001986                     __end_of_I2C_Master_Init:
  2388                           	opt stack 0
  2389                           tblptru	equ	0xFF8
  2390                           tblptrh	equ	0xFF7
  2391                           tblptrl	equ	0xFF6
  2392                           tablat	equ	0xFF5
  2393                           prodh	equ	0xFF4
  2394                           prodl	equ	0xFF3
  2395                           intcon	equ	0xFF2
  2396                           postinc0	equ	0xFEE
  2397                           wreg	equ	0xFE8
  2398                           postdec1	equ	0xFE5
  2399                           fsr1l	equ	0xFE1
  2400                           postinc2	equ	0xFDE
  2401                           postdec2	equ	0xFDD
  2402                           fsr2h	equ	0xFDA
  2403                           fsr2l	equ	0xFD9
  2404                           status	equ	0xFD8
  2405                           
  2406 ;; *************** function _interruptHandler *****************
  2407 ;; Defined at:
  2408 ;;		line 232 in file "main.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;		None
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;		None
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;Total ram usage:       19 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    3
  2429 ;; This function calls:
  2430 ;;		i2_initLCD
  2431 ;;		i2_lcdInst
  2432 ;;		i2_printf
  2433 ;; This function is called by:
  2434 ;;		Interrupt level 2
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	intcode
  2439  000008                     __pintcode:
  2440                           	opt stack 0
  2441  000008                     _interruptHandler:
  2442                           	opt stack 24
  2443                           
  2444                           ;incstack = 0
  2445  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2446  00000A  ED31  F009         	call	int_func,f	;refresh shadow registers
  2447                           tblptru	equ	0xFF8
  2448                           tblptrh	equ	0xFF7
  2449                           tblptrl	equ	0xFF6
  2450                           tablat	equ	0xFF5
  2451                           prodh	equ	0xFF4
  2452                           prodl	equ	0xFF3
  2453                           intcon	equ	0xFF2
  2454                           postinc0	equ	0xFEE
  2455                           wreg	equ	0xFE8
  2456                           postdec1	equ	0xFE5
  2457                           fsr1l	equ	0xFE1
  2458                           postinc2	equ	0xFDE
  2459                           postdec2	equ	0xFDD
  2460                           fsr2h	equ	0xFDA
  2461                           fsr2l	equ	0xFD9
  2462                           status	equ	0xFD8
  2463                           
  2464                           	psect	intcode_body
  2465  001262                     __pintcode_body:
  2466                           	opt stack 24
  2467  001262                     int_func:
  2468                           	opt stack 24
  2469  001262  0006               	pop		; remove dummy address from shadow register refresh
  2470  001264  CFFA F018          	movff	pclath,??_interruptHandler+1
  2471  001268  CFFB F019          	movff	pclatu,??_interruptHandler+2
  2472  00126C  CFE9 F01A          	movff	fsr0l,??_interruptHandler+3
  2473  001270  CFEA F01B          	movff	fsr0h,??_interruptHandler+4
  2474  001274  CFE1 F01C          	movff	fsr1l,??_interruptHandler+5
  2475  001278  CFE2 F01D          	movff	fsr1h,??_interruptHandler+6
  2476  00127C  CFD9 F01E          	movff	fsr2l,??_interruptHandler+7
  2477  001280  CFDA F01F          	movff	fsr2h,??_interruptHandler+8
  2478  001284  CFF3 F020          	movff	prodl,??_interruptHandler+9
  2479  001288  CFF4 F021          	movff	prodh,??_interruptHandler+10
  2480  00128C  CFF6 F022          	movff	tblptrl,??_interruptHandler+11
  2481  001290  CFF7 F023          	movff	tblptrh,??_interruptHandler+12
  2482  001294  CFF8 F024          	movff	tblptru,??_interruptHandler+13
  2483  001298  CFF5 F025          	movff	tablat,??_interruptHandler+14
  2484  00129C  C054  F026         	movff	btemp,??_interruptHandler+15
  2485  0012A0  C055  F027         	movff	btemp+1,??_interruptHandler+16
  2486  0012A4  C056  F028         	movff	btemp+2,??_interruptHandler+17
  2487  0012A8  C057  F029         	movff	btemp+3,??_interruptHandler+18
  2488                           
  2489                           ;main.c: 244: if (RBIF){
  2490  0012AC  A0F2               	btfss	intcon,0,c	;volatile
  2491  0012AE  D074               	goto	i2l1832
  2492                           
  2493                           ;main.c: 246: B_input = PORTBbits.RB5;
  2494  0012B0  AA81               	btfss	3969,5,c	;volatile
  2495  0012B2  D003               	goto	i2u87_40
  2496  0012B4  6A17               	clrf	??_interruptHandler& (0+255),c
  2497  0012B6  2A17               	incf	??_interruptHandler& (0+255),f,c
  2498  0012B8  D001               	goto	i2u87_48
  2499  0012BA                     i2u87_40:
  2500  0012BA  6A17               	clrf	??_interruptHandler& (0+255),c
  2501  0012BC                     i2u87_48:
  2502  0012BC  5017               	movf	??_interruptHandler,w,c
  2503  0012BE  6E52               	movwf	_B_input,c
  2504  0012C0  6A53               	clrf	_B_input+1,c
  2505                           
  2506                           ;main.c: 249: N_input = PORTBbits.RB4;
  2507  0012C2  A881               	btfss	3969,4,c	;volatile
  2508  0012C4  D003               	goto	i2u88_40
  2509  0012C6  6A17               	clrf	??_interruptHandler& (0+255),c
  2510  0012C8  2A17               	incf	??_interruptHandler& (0+255),f,c
  2511  0012CA  D001               	goto	i2u88_48
  2512  0012CC                     i2u88_40:
  2513  0012CC  6A17               	clrf	??_interruptHandler& (0+255),c
  2514  0012CE                     i2u88_48:
  2515  0012CE  5017               	movf	??_interruptHandler,w,c
  2516  0012D0  6E50               	movwf	_N_input,c
  2517  0012D2  6A51               	clrf	_N_input+1,c
  2518                           
  2519                           ;main.c: 255: W_input = PORTBbits.RB7;
  2520  0012D4  AE81               	btfss	3969,7,c	;volatile
  2521  0012D6  D003               	goto	i2u89_40
  2522  0012D8  6A17               	clrf	??_interruptHandler& (0+255),c
  2523  0012DA  2A17               	incf	??_interruptHandler& (0+255),f,c
  2524  0012DC  D001               	goto	i2u89_48
  2525  0012DE                     i2u89_40:
  2526  0012DE  6A17               	clrf	??_interruptHandler& (0+255),c
  2527  0012E0                     i2u89_48:
  2528  0012E0  5017               	movf	??_interruptHandler,w,c
  2529  0012E2  6E4C               	movwf	_W_input,c
  2530  0012E4  6A4D               	clrf	_W_input+1,c
  2531                           
  2532                           ;main.c: 259: if (B_input == 0){
  2533  0012E6  5052               	movf	_B_input,w,c
  2534  0012E8  1053               	iorwf	_B_input+1,w,c
  2535  0012EA  A4D8               	btfss	status,2,c
  2536  0012EC  D014               	goto	i2l183
  2537                           
  2538                           ;main.c: 260: initLCD();
  2539  0012EE  EC0C  F00C         	call	i2_initLCD	;wreg free
  2540                           
  2541                           ;main.c: 261: printf("bolt_interrupt");
  2542  0012F2  0E36               	movlw	low STR_6
  2543  0012F4  6E0D               	movwf	i2printf@f,c
  2544  0012F6  0E10               	movlw	high STR_6
  2545  0012F8  6E0E               	movwf	i2printf@f+1,c
  2546  0012FA  EC87  F00A         	call	i2_printf	;wreg free
  2547                           
  2548                           ;main.c: 262: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2549  0012FE  0E80               	movlw	128
  2550  001300  ECE1  F00C         	call	i2_lcdInst
  2551  001304  0E34               	movlw	52
  2552  001306  6E17               	movwf	??_interruptHandler& (0+255),c
  2553  001308  0EF2               	movlw	242
  2554  00130A                     i2u130_47:
  2555  00130A  2EE8               	decfsz	wreg,f,c
  2556  00130C  D7FE               	bra	i2u130_47
  2557  00130E  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  2558  001310  D7FC               	bra	i2u130_47
  2559                           
  2560                           ;main.c: 263: B_count++;
  2561  001312  4A48               	infsnz	_B_count,f,c
  2562  001314  2A49               	incf	_B_count+1,f,c
  2563  001316                     i2l183:
  2564                           
  2565                           ;main.c: 265: }
  2566                           ;main.c: 268: if (N_input == 0){
  2567  001316  5050               	movf	_N_input,w,c
  2568  001318  1051               	iorwf	_N_input+1,w,c
  2569  00131A  A4D8               	btfss	status,2,c
  2570  00131C  D014               	goto	i2l184
  2571                           
  2572                           ;main.c: 269: initLCD();
  2573  00131E  EC0C  F00C         	call	i2_initLCD	;wreg free
  2574                           
  2575                           ;main.c: 270: printf("nut_interrupt");
  2576  001322  0E45               	movlw	low STR_7
  2577  001324  6E0D               	movwf	i2printf@f,c
  2578  001326  0E10               	movlw	high STR_7
  2579  001328  6E0E               	movwf	i2printf@f+1,c
  2580  00132A  EC87  F00A         	call	i2_printf	;wreg free
  2581                           
  2582                           ;main.c: 271: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2583  00132E  0E80               	movlw	128
  2584  001330  ECE1  F00C         	call	i2_lcdInst
  2585  001334  0E34               	movlw	52
  2586  001336  6E17               	movwf	??_interruptHandler& (0+255),c
  2587  001338  0EF2               	movlw	242
  2588  00133A                     i2u131_47:
  2589  00133A  2EE8               	decfsz	wreg,f,c
  2590  00133C  D7FE               	bra	i2u131_47
  2591  00133E  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  2592  001340  D7FC               	bra	i2u131_47
  2593                           
  2594                           ;main.c: 272: N_count++;
  2595  001342  4A46               	infsnz	_N_count,f,c
  2596  001344  2A47               	incf	_N_count+1,f,c
  2597  001346                     i2l184:
  2598                           
  2599                           ;main.c: 273: }
  2600                           ;main.c: 282: if (W_input == 0){
  2601  001346  504C               	movf	_W_input,w,c
  2602  001348  104D               	iorwf	_W_input+1,w,c
  2603  00134A  A4D8               	btfss	status,2,c
  2604  00134C  D012               	goto	i2l185
  2605                           
  2606                           ;main.c: 284: printf("washer_interrupt");
  2607  00134E  0E25               	movlw	low STR_8
  2608  001350  6E0D               	movwf	i2printf@f,c
  2609  001352  0E10               	movlw	high STR_8
  2610  001354  6E0E               	movwf	i2printf@f+1,c
  2611  001356  EC87  F00A         	call	i2_printf	;wreg free
  2612                           
  2613                           ;main.c: 285: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2614  00135A  0E80               	movlw	128
  2615  00135C  ECE1  F00C         	call	i2_lcdInst
  2616  001360  0E34               	movlw	52
  2617  001362  6E17               	movwf	??_interruptHandler& (0+255),c
  2618  001364  0EF2               	movlw	242
  2619  001366                     i2u132_47:
  2620  001366  2EE8               	decfsz	wreg,f,c
  2621  001368  D7FE               	bra	i2u132_47
  2622  00136A  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  2623  00136C  D7FC               	bra	i2u132_47
  2624                           
  2625                           ;main.c: 286: W_count++;
  2626  00136E  4A42               	infsnz	_W_count,f,c
  2627  001370  2A43               	incf	_W_count+1,f,c
  2628  001372                     i2l185:
  2629                           
  2630                           ;main.c: 289: }
  2631                           ;main.c: 290: initLCD();
  2632  001372  EC0C  F00C         	call	i2_initLCD	;wreg free
  2633                           
  2634                           ;main.c: 291: printf("interrupted");
  2635  001376  0E53               	movlw	low STR_9
  2636  001378  6E0D               	movwf	i2printf@f,c
  2637  00137A  0E10               	movlw	high STR_9
  2638  00137C  6E0E               	movwf	i2printf@f+1,c
  2639  00137E  EC87  F00A         	call	i2_printf	;wreg free
  2640                           
  2641                           ;main.c: 292: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2642  001382  0E80               	movlw	128
  2643  001384  ECE1  F00C         	call	i2_lcdInst
  2644  001388  0E34               	movlw	52
  2645  00138A  6E17               	movwf	??_interruptHandler& (0+255),c
  2646  00138C  0EF2               	movlw	242
  2647  00138E                     i2u133_47:
  2648  00138E  2EE8               	decfsz	wreg,f,c
  2649  001390  D7FE               	bra	i2u133_47
  2650  001392  2E17               	decfsz	??_interruptHandler& (0+255),f,c
  2651  001394  D7FC               	bra	i2u133_47
  2652                           
  2653                           ;main.c: 298: RBIF = 0;
  2654  001396  90F2               	bcf	intcon,0,c	;volatile
  2655  001398                     i2l1832:
  2656                           
  2657                           ;main.c: 299: return;
  2658  001398  C029  F057         	movff	??_interruptHandler+18,btemp+3
  2659  00139C  C028  F056         	movff	??_interruptHandler+17,btemp+2
  2660  0013A0  C027  F055         	movff	??_interruptHandler+16,btemp+1
  2661  0013A4  C026  F054         	movff	??_interruptHandler+15,btemp
  2662  0013A8  C025  FFF5         	movff	??_interruptHandler+14,tablat
  2663  0013AC  C024  FFF8         	movff	??_interruptHandler+13,tblptru
  2664  0013B0  C023  FFF7         	movff	??_interruptHandler+12,tblptrh
  2665  0013B4  C022  FFF6         	movff	??_interruptHandler+11,tblptrl
  2666  0013B8  C021  FFF4         	movff	??_interruptHandler+10,prodh
  2667  0013BC  C020  FFF3         	movff	??_interruptHandler+9,prodl
  2668  0013C0  C01F  FFDA         	movff	??_interruptHandler+8,fsr2h
  2669  0013C4  C01E  FFD9         	movff	??_interruptHandler+7,fsr2l
  2670  0013C8  C01D  FFE2         	movff	??_interruptHandler+6,fsr1h
  2671  0013CC  C01C  FFE1         	movff	??_interruptHandler+5,fsr1l
  2672  0013D0  C01B  FFEA         	movff	??_interruptHandler+4,fsr0h
  2673  0013D4  C01A  FFE9         	movff	??_interruptHandler+3,fsr0l
  2674  0013D8  C019  FFFB         	movff	??_interruptHandler+2,pclatu
  2675  0013DC  C018  FFFA         	movff	??_interruptHandler+1,pclath
  2676  0013E0  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2677  0013E2  0011               	retfie		f
  2678  0013E4                     __end_of_interruptHandler:
  2679                           	opt stack 0
  2680                           pclatu	equ	0xFFB
  2681                           pclath	equ	0xFFA
  2682                           tblptru	equ	0xFF8
  2683                           tblptrh	equ	0xFF7
  2684                           tblptrl	equ	0xFF6
  2685                           tablat	equ	0xFF5
  2686                           prodh	equ	0xFF4
  2687                           prodl	equ	0xFF3
  2688                           intcon	equ	0xFF2
  2689                           postinc0	equ	0xFEE
  2690                           fsr0h	equ	0xFEA
  2691                           fsr0l	equ	0xFE9
  2692                           wreg	equ	0xFE8
  2693                           postdec1	equ	0xFE5
  2694                           fsr1h	equ	0xFE2
  2695                           fsr1l	equ	0xFE1
  2696                           postinc2	equ	0xFDE
  2697                           postdec2	equ	0xFDD
  2698                           fsr2h	equ	0xFDA
  2699                           fsr2l	equ	0xFD9
  2700                           status	equ	0xFD8
  2701                           
  2702 ;; *************** function i2_printf *****************
  2703 ;; Defined at:
  2704 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2707 ;;		 -> STR_9(12), STR_8(17), STR_7(14), STR_6(15), 
  2708 ;;		 -> STR_5(20), STR_4(20), STR_3(20), STR_2(20), 
  2709 ;;		 -> STR_1(20), 
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  printf          4    0        struct .
  2712 ;;  printf          3    0        PTR const unsigned char 
  2713 ;;  printf          2   19[COMRAM] unsigned int 
  2714 ;;  printf          2   15[COMRAM] PTR void [1]
  2715 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2716 ;;  printf          2    0        unsigned int 
  2717 ;;  printf          1   21[COMRAM] char 
  2718 ;;  printf          1   18[COMRAM] char 
  2719 ;;  printf          1   17[COMRAM] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  2   12[COMRAM] int 
  2722 ;; Registers used:
  2723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2729 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;Total ram usage:       10 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    2
  2736 ;; This function calls:
  2737 ;;		i2___lwdiv
  2738 ;;		i2___lwmod
  2739 ;;		i2_putch
  2740 ;; This function is called by:
  2741 ;;		_interruptHandler
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text16
  2746  00150E                     __ptext16:
  2747                           	opt stack 0
  2748  00150E                     i2_printf:
  2749                           	opt stack 24
  2750                           
  2751                           ;doprnt.c: 466: va_list ap;
  2752                           ;doprnt.c: 499: signed char c;
  2753                           ;doprnt.c: 506: signed char prec;
  2754                           ;doprnt.c: 508: unsigned char flag;
  2755                           ;doprnt.c: 523: union {
  2756                           ;doprnt.c: 524: unsigned long vd;
  2757                           ;doprnt.c: 525: double integ;
  2758                           ;doprnt.c: 526: } tmpval;
  2759                           ;doprnt.c: 528: unsigned int val;
  2760                           ;doprnt.c: 529: unsigned len;
  2761                           ;doprnt.c: 530: const char * cp;
  2762                           ;doprnt.c: 533: *ap = __va_start();
  2763                           
  2764                           ;incstack = 0
  2765  00150E  0E0F               	movlw	low (?i2_printf+2)
  2766  001510  6E10               	movwf	i2printf@ap,c
  2767  001512  0E00               	movlw	high (?i2_printf+2)
  2768  001514  6E11               	movwf	i2printf@ap+1,c
  2769                           
  2770                           ;doprnt.c: 536: while(c = *f++) {
  2771  001516  D07D               	goto	i2u81_40
  2772  001518                     
  2773                           ;doprnt.c: 538: if(c != '%')
  2774  001518  0E25               	movlw	37
  2775  00151A  1816               	xorwf	i2printf@c,w,c
  2776  00151C  B4D8               	btfsc	status,2,c
  2777  00151E  D004               	goto	i2l251
  2778                           
  2779                           ;doprnt.c: 540: {
  2780                           ;doprnt.c: 541: (putch(c) );
  2781  001520  5016               	movf	i2printf@c,w,c
  2782  001522  ECD7  F00C         	call	i2_putch
  2783                           
  2784                           ;doprnt.c: 542: continue;
  2785  001526  D075               	goto	i2u81_40
  2786  001528                     i2l251:
  2787                           
  2788                           ;doprnt.c: 543: }
  2789                           ;doprnt.c: 548: flag = 0;
  2790  001528  0E00               	movlw	0
  2791  00152A  6E12               	movwf	i2printf@flag,c
  2792                           
  2793                           ;doprnt.c: 822: }
  2794                           
  2795                           ;doprnt.c: 813: continue;
  2796                           
  2797                           ;doprnt.c: 802: default:
  2798                           
  2799                           ;doprnt.c: 698: case 'i':
  2800                           ;doprnt.c: 699: break;
  2801                           
  2802                           ;doprnt.c: 697: case 'd':
  2803                           
  2804                           ;doprnt.c: 638: goto alldone;
  2805                           
  2806                           ;doprnt.c: 637: case 0:
  2807                           
  2808                           ;doprnt.c: 635: switch(c = *f++) {
  2809  00152C  C00D  FFF6         	movff	i2printf@f,tblptrl
  2810  001530  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2811  001534  4A0D               	infsnz	i2printf@f,f,c
  2812  001536  2A0E               	incf	i2printf@f+1,f,c
  2813  001538                     	if	0	;tblptru may be non-zero
  2814  001538                     	endif
  2815  001538                     	if	0	;tblptru may be non-zero
  2816  001538                     	endif
  2817  001538  0008               	tblrd		*
  2818  00153A  CFF5 F016          	movff	tablat,i2printf@c
  2819  00153E  5016               	movf	i2printf@c,w,c
  2820                           
  2821                           ; Switch size 1, requested type "space"
  2822                           ; Number of cases is 3, Range of values is 0 to 105
  2823                           ; switch strategies available:
  2824                           ; Name         Instructions Cycles
  2825                           ; simple_byte           10     6 (average)
  2826                           ;	Chosen strategy is simple_byte
  2827  001540  0A00               	xorlw	0	; case 0
  2828  001542  B4D8               	btfsc	status,2,c
  2829  001544  0012               	return	
  2830  001546  0A64               	xorlw	100	; case 100
  2831  001548  B4D8               	btfsc	status,2,c
  2832  00154A  D003               	goto	i2l257
  2833  00154C  0A0D               	xorlw	13	; case 105
  2834  00154E  A4D8               	btfss	status,2,c
  2835  001550  D060               	goto	i2u81_40
  2836  001552                     i2l257:
  2837                           
  2838                           ;doprnt.c: 1253: {
  2839                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2840  001552  C010  FFD9         	movff	i2printf@ap,fsr2l
  2841  001556  C011  FFDA         	movff	i2printf@ap+1,fsr2h
  2842  00155A  CFDE F014          	movff	postinc2,i2printf@val
  2843  00155E  CFDD F015          	movff	postdec2,i2printf@val+1
  2844  001562  0E02               	movlw	2
  2845  001564  2610               	addwf	i2printf@ap,f,c
  2846  001566  0E00               	movlw	0
  2847  001568  2211               	addwfc	i2printf@ap+1,f,c
  2848                           
  2849                           ;doprnt.c: 1261: if((int)val < 0) {
  2850  00156A  AE15               	btfss	i2printf@val+1,7,c
  2851  00156C  D006               	goto	i2l259
  2852                           
  2853                           ;doprnt.c: 1262: flag |= 0x03;
  2854  00156E  0E03               	movlw	3
  2855  001570  1212               	iorwf	i2printf@flag,f,c
  2856                           
  2857                           ;doprnt.c: 1263: val = -val;
  2858  001572  6C14               	negf	i2printf@val,c
  2859  001574  1E15               	comf	i2printf@val+1,f,c
  2860  001576  B0D8               	btfsc	status,0,c
  2861  001578  2A15               	incf	i2printf@val+1,f,c
  2862  00157A                     i2l259:
  2863                           
  2864                           ;doprnt.c: 1264: }
  2865                           ;doprnt.c: 1266: }
  2866                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2867  00157A  0E01               	movlw	1
  2868  00157C  6E16               	movwf	i2printf@c,c
  2869  00157E                     i2l1668:
  2870  00157E  0E05               	movlw	5
  2871  001580  1816               	xorwf	i2printf@c,w,c
  2872  001582  B4D8               	btfsc	status,2,c
  2873  001584  D012               	goto	i2u79_40
  2874                           
  2875                           ;doprnt.c: 1306: if(val < dpowers[c])
  2876  001586  5016               	movf	i2printf@c,w,c
  2877  001588  0D02               	mullw	2
  2878  00158A  0E01               	movlw	low _dpowers
  2879  00158C  24F3               	addwf	prodl,w,c
  2880  00158E  6EF6               	movwf	tblptrl,c
  2881  001590  0E10               	movlw	high _dpowers
  2882  001592  20F4               	addwfc	prodh,w,c
  2883  001594  6EF7               	movwf	tblptrh,c
  2884  001596                     	if	0	;There are less than 3 active tblptr bytes
  2885  001596                     	endif
  2886  001596  0009               	tblrd		*+
  2887  001598  50F5               	movf	tablat,w,c
  2888  00159A  5C14               	subwf	i2printf@val,w,c
  2889  00159C  0009               	tblrd		*+
  2890  00159E  50F5               	movf	tablat,w,c
  2891  0015A0  5815               	subwfb	i2printf@val+1,w,c
  2892  0015A2  A0D8               	btfss	status,0,c
  2893  0015A4  D002               	goto	i2u79_40
  2894                           
  2895                           ;doprnt.c: 1307: break;
  2896  0015A6  2A16               	incf	i2printf@c,f,c
  2897  0015A8  D7EA               	goto	i2l1668
  2898  0015AA                     i2u79_40:
  2899                           
  2900                           ;doprnt.c: 1422: {
  2901                           ;doprnt.c: 1438: if(flag & 0x03)
  2902  0015AA  C012  F00F         	movff	i2printf@flag,??i2_printf
  2903  0015AE  0E03               	movlw	3
  2904  0015B0  160F               	andwf	??i2_printf,f,c
  2905  0015B2  B4D8               	btfsc	status,2,c
  2906  0015B4  D003               	goto	i2l263
  2907                           
  2908                           ;doprnt.c: 1439: (putch('-') );
  2909  0015B6  0E2D               	movlw	45
  2910  0015B8  ECD7  F00C         	call	i2_putch
  2911  0015BC                     i2l263:
  2912                           
  2913                           ;doprnt.c: 1469: }
  2914                           ;doprnt.c: 1472: prec = c;
  2915  0015BC  C016  F013         	movff	i2printf@c,i2printf@prec
  2916                           
  2917                           ;doprnt.c: 1474: while(prec--) {
  2918  0015C0  D024               	goto	i2l264
  2919  0015C2                     
  2920                           ;doprnt.c: 1478: {
  2921                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2922  0015C2  5013               	movf	i2printf@prec,w,c
  2923  0015C4  0D02               	mullw	2
  2924  0015C6  0E01               	movlw	low _dpowers
  2925  0015C8  24F3               	addwf	prodl,w,c
  2926  0015CA  6EF6               	movwf	tblptrl,c
  2927  0015CC  0E10               	movlw	high _dpowers
  2928  0015CE  20F4               	addwfc	prodh,w,c
  2929  0015D0  6EF7               	movwf	tblptrh,c
  2930  0015D2                     	if	0	;There are less than 3 active tblptr bytes
  2931  0015D2                     	endif
  2932  0015D2  0009               	tblrd		*+
  2933  0015D4  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2934  0015D8  000A               	tblrd		*-
  2935  0015DA  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2936  0015DE  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2937  0015E2  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2938  0015E6  ECBD  F00B         	call	i2___lwdiv	;wreg free
  2939  0015EA  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2940  0015EE  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2941  0015F2  0E00               	movlw	0
  2942  0015F4  6E0B               	movwf	i2___lwmod@divisor+1,c
  2943  0015F6  0E0A               	movlw	10
  2944  0015F8  6E0A               	movwf	i2___lwmod@divisor,c
  2945  0015FA  EC53  F00C         	call	i2___lwmod	;wreg free
  2946  0015FE  5008               	movf	?i2___lwmod,w,c
  2947  001600  0F30               	addlw	48
  2948  001602  6E16               	movwf	i2printf@c,c
  2949                           
  2950                           ;doprnt.c: 1523: }
  2951                           ;doprnt.c: 1524: (putch(c) );
  2952  001604  5016               	movf	i2printf@c,w,c
  2953  001606  ECD7  F00C         	call	i2_putch
  2954  00160A                     i2l264:
  2955  00160A  0613               	decf	i2printf@prec,f,c
  2956  00160C  2813               	incf	i2printf@prec,w,c
  2957  00160E  A4D8               	btfss	status,2,c
  2958  001610  D7D8               	goto	i2l265
  2959  001612                     i2u81_40:
  2960  001612  C00D  FFF6         	movff	i2printf@f,tblptrl
  2961  001616  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2962  00161A  4A0D               	infsnz	i2printf@f,f,c
  2963  00161C  2A0E               	incf	i2printf@f+1,f,c
  2964  00161E                     	if	0	;tblptru may be non-zero
  2965  00161E                     	endif
  2966  00161E                     	if	0	;tblptru may be non-zero
  2967  00161E                     	endif
  2968  00161E  0008               	tblrd		*
  2969  001620  CFF5 F016          	movff	tablat,i2printf@c
  2970  001624  5016               	movf	i2printf@c,w,c
  2971  001626  B4D8               	btfsc	status,2,c
  2972  001628  0012               	return	
  2973  00162A  D776               	goto	i2l250
  2974  00162C                     __end_ofi2_printf:
  2975                           	opt stack 0
  2976                           pclatu	equ	0xFFB
  2977                           pclath	equ	0xFFA
  2978                           tblptru	equ	0xFF8
  2979                           tblptrh	equ	0xFF7
  2980                           tblptrl	equ	0xFF6
  2981                           tablat	equ	0xFF5
  2982                           prodh	equ	0xFF4
  2983                           prodl	equ	0xFF3
  2984                           intcon	equ	0xFF2
  2985                           postinc0	equ	0xFEE
  2986                           fsr0h	equ	0xFEA
  2987                           fsr0l	equ	0xFE9
  2988                           wreg	equ	0xFE8
  2989                           postdec1	equ	0xFE5
  2990                           fsr1h	equ	0xFE2
  2991                           fsr1l	equ	0xFE1
  2992                           postinc2	equ	0xFDE
  2993                           postdec2	equ	0xFDD
  2994                           fsr2h	equ	0xFDA
  2995                           fsr2l	equ	0xFD9
  2996                           status	equ	0xFD8
  2997                           
  2998 ;; *************** function i2_putch *****************
  2999 ;; Defined at:
  3000 ;;		line 24 in file "lcd.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  data            1    wreg     unsigned char 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  data            1    2[COMRAM] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;Total ram usage:        1 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    1
  3021 ;; This function calls:
  3022 ;;		i2_lcdNibble
  3023 ;; This function is called by:
  3024 ;;		i2_printf
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text17
  3029  0019AE                     __ptext17:
  3030                           	opt stack 0
  3031  0019AE                     i2_putch:
  3032                           	opt stack 24
  3033                           
  3034                           ;incstack = 0
  3035                           ;i2putch@data stored from wreg
  3036  0019AE  6E03               	movwf	i2putch@data,c
  3037                           
  3038                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3039  0019B0  848C               	bsf	3980,2,c	;volatile
  3040                           
  3041                           ;lcd.c: 33: lcdNibble(data);
  3042  0019B2  5003               	movf	i2putch@data,w,c
  3043  0019B4  EC55  F00B         	call	i2_lcdNibble
  3044                           
  3045                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3046  0019B8  0EA0               	movlw	160
  3047  0019BA                     i2u134_47:
  3048  0019BA  D000               	nop2	
  3049  0019BC  2EE8               	decfsz	wreg,f,c
  3050  0019BE  D7FD               	bra	i2u134_47
  3051  0019C0  0012               	return		;funcret
  3052  0019C2                     __end_ofi2_putch:
  3053                           	opt stack 0
  3054                           pclatu	equ	0xFFB
  3055                           pclath	equ	0xFFA
  3056                           tblptru	equ	0xFF8
  3057                           tblptrh	equ	0xFF7
  3058                           tblptrl	equ	0xFF6
  3059                           tablat	equ	0xFF5
  3060                           prodh	equ	0xFF4
  3061                           prodl	equ	0xFF3
  3062                           intcon	equ	0xFF2
  3063                           postinc0	equ	0xFEE
  3064                           fsr0h	equ	0xFEA
  3065                           fsr0l	equ	0xFE9
  3066                           wreg	equ	0xFE8
  3067                           postdec1	equ	0xFE5
  3068                           fsr1h	equ	0xFE2
  3069                           fsr1l	equ	0xFE1
  3070                           postinc2	equ	0xFDE
  3071                           postdec2	equ	0xFDD
  3072                           fsr2h	equ	0xFDA
  3073                           fsr2l	equ	0xFD9
  3074                           status	equ	0xFD8
  3075                           
  3076 ;; *************** function i2___lwmod *****************
  3077 ;; Defined at:
  3078 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  dividend        2    7[COMRAM] unsigned int 
  3081 ;;  divisor         2    9[COMRAM] unsigned int 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  __lwmod         1   11[COMRAM] unsigned char 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  2    7[COMRAM] unsigned int 
  3086 ;; Registers used:
  3087 ;;		wreg, status,2, status,0
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3093 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;Total ram usage:        5 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		i2_printf
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text18
  3107  0018A6                     __ptext18:
  3108                           	opt stack 0
  3109  0018A6                     i2___lwmod:
  3110                           	opt stack 25
  3111                           
  3112                           ;incstack = 0
  3113  0018A6  500A               	movf	i2___lwmod@divisor,w,c
  3114  0018A8  100B               	iorwf	i2___lwmod@divisor+1,w,c
  3115  0018AA  B4D8               	btfsc	status,2,c
  3116  0018AC  D018               	goto	i2l687
  3117  0018AE  0E01               	movlw	1
  3118  0018B0  6E0C               	movwf	i2___lwmod@counter,c
  3119  0018B2  D004               	goto	i2l682
  3120  0018B4  90D8               	bcf	status,0,c
  3121  0018B6  360A               	rlcf	i2___lwmod@divisor,f,c
  3122  0018B8  360B               	rlcf	i2___lwmod@divisor+1,f,c
  3123  0018BA  2A0C               	incf	i2___lwmod@counter,f,c
  3124  0018BC                     i2l682:
  3125  0018BC  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  3126  0018BE  D7FA               	goto	i2l683
  3127  0018C0                     i2u65_40:
  3128  0018C0  500A               	movf	i2___lwmod@divisor,w,c
  3129  0018C2  5C08               	subwf	i2___lwmod@dividend,w,c
  3130  0018C4  500B               	movf	i2___lwmod@divisor+1,w,c
  3131  0018C6  5809               	subwfb	i2___lwmod@dividend+1,w,c
  3132  0018C8  A0D8               	btfss	status,0,c
  3133  0018CA  D004               	goto	i2l686
  3134  0018CC  500A               	movf	i2___lwmod@divisor,w,c
  3135  0018CE  5E08               	subwf	i2___lwmod@dividend,f,c
  3136  0018D0  500B               	movf	i2___lwmod@divisor+1,w,c
  3137  0018D2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  3138  0018D4                     i2l686:
  3139  0018D4  90D8               	bcf	status,0,c
  3140  0018D6  320B               	rrcf	i2___lwmod@divisor+1,f,c
  3141  0018D8  320A               	rrcf	i2___lwmod@divisor,f,c
  3142  0018DA  2E0C               	decfsz	i2___lwmod@counter,f,c
  3143  0018DC  D7F1               	goto	i2u65_40
  3144  0018DE                     i2l687:
  3145  0018DE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  3146  0018E2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  3147  0018E6  0012               	return		;funcret
  3148  0018E8                     __end_ofi2___lwmod:
  3149                           	opt stack 0
  3150                           pclatu	equ	0xFFB
  3151                           pclath	equ	0xFFA
  3152                           tblptru	equ	0xFF8
  3153                           tblptrh	equ	0xFF7
  3154                           tblptrl	equ	0xFF6
  3155                           tablat	equ	0xFF5
  3156                           prodh	equ	0xFF4
  3157                           prodl	equ	0xFF3
  3158                           intcon	equ	0xFF2
  3159                           postinc0	equ	0xFEE
  3160                           fsr0h	equ	0xFEA
  3161                           fsr0l	equ	0xFE9
  3162                           wreg	equ	0xFE8
  3163                           postdec1	equ	0xFE5
  3164                           fsr1h	equ	0xFE2
  3165                           fsr1l	equ	0xFE1
  3166                           postinc2	equ	0xFDE
  3167                           postdec2	equ	0xFDD
  3168                           fsr2h	equ	0xFDA
  3169                           fsr2l	equ	0xFD9
  3170                           status	equ	0xFD8
  3171                           
  3172 ;; *************** function i2___lwdiv *****************
  3173 ;; Defined at:
  3174 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  dividend        2    0[COMRAM] unsigned int 
  3177 ;;  divisor         2    2[COMRAM] unsigned int 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3180 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  2    0[COMRAM] unsigned int 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3190 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;Total ram usage:        7 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; This function calls:
  3197 ;;		Nothing
  3198 ;; This function is called by:
  3199 ;;		i2_printf
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text19
  3204  00177A                     __ptext19:
  3205                           	opt stack 0
  3206  00177A                     i2___lwdiv:
  3207                           	opt stack 25
  3208                           
  3209                           ;incstack = 0
  3210  00177A  0E00               	movlw	0
  3211  00177C  6E06               	movwf	i2___lwdiv@quotient+1,c
  3212  00177E  0E00               	movlw	0
  3213  001780  6E05               	movwf	i2___lwdiv@quotient,c
  3214  001782  5003               	movf	i2___lwdiv@divisor,w,c
  3215  001784  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  3216  001786  B4D8               	btfsc	status,2,c
  3217  001788  D01C               	goto	i2l677
  3218  00178A  0E01               	movlw	1
  3219  00178C  6E07               	movwf	i2___lwdiv@counter,c
  3220  00178E  D004               	goto	i2l672
  3221  001790  90D8               	bcf	status,0,c
  3222  001792  3603               	rlcf	i2___lwdiv@divisor,f,c
  3223  001794  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  3224  001796  2A07               	incf	i2___lwdiv@counter,f,c
  3225  001798                     i2l672:
  3226  001798  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  3227  00179A  D7FA               	goto	i2l673
  3228  00179C                     i2u62_40:
  3229  00179C  90D8               	bcf	status,0,c
  3230  00179E  3605               	rlcf	i2___lwdiv@quotient,f,c
  3231  0017A0  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  3232  0017A2  5003               	movf	i2___lwdiv@divisor,w,c
  3233  0017A4  5C01               	subwf	i2___lwdiv@dividend,w,c
  3234  0017A6  5004               	movf	i2___lwdiv@divisor+1,w,c
  3235  0017A8  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  3236  0017AA  A0D8               	btfss	status,0,c
  3237  0017AC  D005               	goto	i2l676
  3238  0017AE  5003               	movf	i2___lwdiv@divisor,w,c
  3239  0017B0  5E01               	subwf	i2___lwdiv@dividend,f,c
  3240  0017B2  5004               	movf	i2___lwdiv@divisor+1,w,c
  3241  0017B4  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  3242  0017B6  8005               	bsf	i2___lwdiv@quotient,0,c
  3243  0017B8                     i2l676:
  3244  0017B8  90D8               	bcf	status,0,c
  3245  0017BA  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  3246  0017BC  3203               	rrcf	i2___lwdiv@divisor,f,c
  3247  0017BE  2E07               	decfsz	i2___lwdiv@counter,f,c
  3248  0017C0  D7ED               	goto	i2u62_40
  3249  0017C2                     i2l677:
  3250  0017C2  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  3251  0017C6  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  3252  0017CA  0012               	return		;funcret
  3253  0017CC                     __end_ofi2___lwdiv:
  3254                           	opt stack 0
  3255                           pclatu	equ	0xFFB
  3256                           pclath	equ	0xFFA
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           postinc0	equ	0xFEE
  3265                           fsr0h	equ	0xFEA
  3266                           fsr0l	equ	0xFE9
  3267                           wreg	equ	0xFE8
  3268                           postdec1	equ	0xFE5
  3269                           fsr1h	equ	0xFE2
  3270                           fsr1l	equ	0xFE1
  3271                           postinc2	equ	0xFDE
  3272                           postdec2	equ	0xFDD
  3273                           fsr2h	equ	0xFDA
  3274                           fsr2l	equ	0xFD9
  3275                           status	equ	0xFD8
  3276                           
  3277 ;; *************** function i2_initLCD *****************
  3278 ;; Defined at:
  3279 ;;		line 60 in file "lcd.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;		None
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;		None
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      void 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;Total ram usage:        1 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    2
  3300 ;; This function calls:
  3301 ;;		i2_lcdInst
  3302 ;; This function is called by:
  3303 ;;		_interruptHandler
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text20
  3308  001818                     __ptext20:
  3309                           	opt stack 0
  3310  001818                     i2_initLCD:
  3311                           	opt stack 24
  3312                           
  3313                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  3314                           
  3315                           ;incstack = 0
  3316  001818  0E9C               	movlw	156
  3317  00181A  6E04               	movwf	??i2_initLCD& (0+255),c
  3318  00181C  0ED7               	movlw	215
  3319  00181E                     i2u135_47:
  3320  00181E  2EE8               	decfsz	wreg,f,c
  3321  001820  D7FE               	bra	i2u135_47
  3322  001822  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3323  001824  D7FC               	bra	i2u135_47
  3324  001826  F000               	nop	
  3325                           
  3326                           ;lcd.c: 69: lcdInst(0b00110011);
  3327  001828  0E33               	movlw	51
  3328  00182A  ECE1  F00C         	call	i2_lcdInst
  3329                           
  3330                           ;lcd.c: 70: lcdInst(0b00110010);
  3331  00182E  0E32               	movlw	50
  3332  001830  ECE1  F00C         	call	i2_lcdInst
  3333                           
  3334                           ;lcd.c: 71: lcdInst(0b00101000);
  3335  001834  0E28               	movlw	40
  3336  001836  ECE1  F00C         	call	i2_lcdInst
  3337                           
  3338                           ;lcd.c: 72: lcdInst(0b00001111);
  3339  00183A  0E0F               	movlw	15
  3340  00183C  ECE1  F00C         	call	i2_lcdInst
  3341                           
  3342                           ;lcd.c: 73: lcdInst(0b00000110);
  3343  001840  0E06               	movlw	6
  3344  001842  ECE1  F00C         	call	i2_lcdInst
  3345                           
  3346                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3347  001846  0E01               	movlw	1
  3348  001848  ECE1  F00C         	call	i2_lcdInst
  3349  00184C  0E9C               	movlw	156
  3350  00184E  6E04               	movwf	??i2_initLCD& (0+255),c
  3351  001850  0ED7               	movlw	215
  3352  001852                     i2u136_47:
  3353  001852  2EE8               	decfsz	wreg,f,c
  3354  001854  D7FE               	bra	i2u136_47
  3355  001856  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3356  001858  D7FC               	bra	i2u136_47
  3357  00185A  F000               	nop	
  3358                           
  3359                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3360  00185C  0E0F               	movlw	15
  3361  00185E  ECE1  F00C         	call	i2_lcdInst
  3362  001862  0012               	return		;funcret
  3363  001864                     __end_ofi2_initLCD:
  3364                           	opt stack 0
  3365                           pclatu	equ	0xFFB
  3366                           pclath	equ	0xFFA
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           intcon	equ	0xFF2
  3374                           postinc0	equ	0xFEE
  3375                           fsr0h	equ	0xFEA
  3376                           fsr0l	equ	0xFE9
  3377                           wreg	equ	0xFE8
  3378                           postdec1	equ	0xFE5
  3379                           fsr1h	equ	0xFE2
  3380                           fsr1l	equ	0xFE1
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function i2_lcdInst *****************
  3388 ;; Defined at:
  3389 ;;		line 11 in file "lcd.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;  data            1    wreg     unsigned char 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  data            1    2[COMRAM] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;Total ram usage:        1 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    1
  3410 ;; This function calls:
  3411 ;;		i2_lcdNibble
  3412 ;; This function is called by:
  3413 ;;		_interruptHandler
  3414 ;;		i2_initLCD
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text21
  3419  0019C2                     __ptext21:
  3420                           	opt stack 0
  3421  0019C2                     i2_lcdInst:
  3422                           	opt stack 25
  3423                           
  3424                           ;incstack = 0
  3425                           ;i2lcdInst@data stored from wreg
  3426  0019C2  6E03               	movwf	i2lcdInst@data,c
  3427                           
  3428                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  3429  0019C4  948C               	bcf	3980,2,c	;volatile
  3430                           
  3431                           ;lcd.c: 20: lcdNibble(data);
  3432  0019C6  5003               	movf	i2lcdInst@data,w,c
  3433  0019C8  EC55  F00B         	call	i2_lcdNibble
  3434                           
  3435                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3436  0019CC  0EA0               	movlw	160
  3437  0019CE                     i2u137_47:
  3438  0019CE  D000               	nop2	
  3439  0019D0  2EE8               	decfsz	wreg,f,c
  3440  0019D2  D7FD               	bra	i2u137_47
  3441  0019D4  0012               	return		;funcret
  3442  0019D6                     __end_ofi2_lcdInst:
  3443                           	opt stack 0
  3444                           pclatu	equ	0xFFB
  3445                           pclath	equ	0xFFA
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           intcon	equ	0xFF2
  3453                           postinc0	equ	0xFEE
  3454                           fsr0h	equ	0xFEA
  3455                           fsr0l	equ	0xFE9
  3456                           wreg	equ	0xFE8
  3457                           postdec1	equ	0xFE5
  3458                           fsr1h	equ	0xFE2
  3459                           fsr1l	equ	0xFE1
  3460                           postinc2	equ	0xFDE
  3461                           postdec2	equ	0xFDD
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function i2_lcdNibble *****************
  3467 ;; Defined at:
  3468 ;;		line 37 in file "lcd.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  data            1    wreg     unsigned char 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  data            1    1[COMRAM] unsigned char 
  3473 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;Total ram usage:        2 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; This function calls:
  3490 ;;		Nothing
  3491 ;; This function is called by:
  3492 ;;		i2_lcdInst
  3493 ;;		i2_putch
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text22
  3498  0016AA                     __ptext22:
  3499                           	opt stack 0
  3500  0016AA                     i2_lcdNibble:
  3501                           	opt stack 24
  3502                           
  3503                           ;incstack = 0
  3504                           ;i2lcdNibble@data stored from wreg
  3505  0016AA  6E02               	movwf	i2lcdNibble@data,c
  3506                           
  3507                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3508  0016AC  5002               	movf	i2lcdNibble@data,w,c
  3509  0016AE  0BF0               	andlw	240
  3510  0016B0  6E01               	movwf	i2lcdNibble@temp,c
  3511                           
  3512                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3513  0016B2  508C               	movf	3980,w,c	;volatile
  3514  0016B4  0B0F               	andlw	15
  3515  0016B6  6E8C               	movwf	3980,c	;volatile
  3516                           
  3517                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3518  0016B8  5001               	movf	i2lcdNibble@temp,w,c
  3519  0016BA  108C               	iorwf	3980,w,c	;volatile
  3520  0016BC  6E8C               	movwf	3980,c	;volatile
  3521                           
  3522                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3523  0016BE  0E00               	movlw	0
  3524  0016C0  BEF2               	btfsc	intcon,7,c	;volatile
  3525  0016C2  0E01               	movlw	1
  3526  0016C4  6E4B               	movwf	_LCDinterruptState,c
  3527  0016C6  9EF2               	bcf	intcon,7,c	;volatile
  3528  0016C8  868C               	bsf	3980,3,c	;volatile
  3529  0016CA  0E42               	movlw	66
  3530  0016CC                     i2u138_47:
  3531  0016CC  2EE8               	decfsz	wreg,f,c
  3532  0016CE  D7FE               	bra	i2u138_47
  3533  0016D0  D000               	nop2	
  3534  0016D2  968C               	bcf	3980,3,c	;volatile
  3535  0016D4  0EA0               	movlw	160
  3536  0016D6                     i2u139_47:
  3537  0016D6  D000               	nop2	
  3538  0016D8  2EE8               	decfsz	wreg,f,c
  3539  0016DA  D7FD               	bra	i2u139_47
  3540  0016DC  B04B               	btfsc	_LCDinterruptState,0,c
  3541  0016DE  D002               	bra	i2u53_45
  3542  0016E0  9EF2               	bcf	intcon,7,c	;volatile
  3543  0016E2  D001               	bra	i2u53_46
  3544  0016E4                     i2u53_45:
  3545  0016E4  8EF2               	bsf	intcon,7,c	;volatile
  3546  0016E6                     i2u53_46:
  3547                           
  3548                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3549  0016E6  3802               	swapf	i2lcdNibble@data,w,c
  3550  0016E8  0BF0               	andlw	240
  3551  0016EA  6E02               	movwf	i2lcdNibble@data,c
  3552                           
  3553                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3554  0016EC  5002               	movf	i2lcdNibble@data,w,c
  3555  0016EE  0BF0               	andlw	240
  3556  0016F0  6E01               	movwf	i2lcdNibble@temp,c
  3557                           
  3558                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3559  0016F2  508C               	movf	3980,w,c	;volatile
  3560  0016F4  0B0F               	andlw	15
  3561  0016F6  6E8C               	movwf	3980,c	;volatile
  3562                           
  3563                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3564  0016F8  5001               	movf	i2lcdNibble@temp,w,c
  3565  0016FA  108C               	iorwf	3980,w,c	;volatile
  3566  0016FC  6E8C               	movwf	3980,c	;volatile
  3567                           
  3568                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3569  0016FE  0E00               	movlw	0
  3570  001700  BEF2               	btfsc	intcon,7,c	;volatile
  3571  001702  0E01               	movlw	1
  3572  001704  6E4B               	movwf	_LCDinterruptState,c
  3573  001706  9EF2               	bcf	intcon,7,c	;volatile
  3574  001708  868C               	bsf	3980,3,c	;volatile
  3575  00170A  0E42               	movlw	66
  3576  00170C                     i2u140_47:
  3577  00170C  2EE8               	decfsz	wreg,f,c
  3578  00170E  D7FE               	bra	i2u140_47
  3579  001710  D000               	nop2	
  3580  001712  968C               	bcf	3980,3,c	;volatile
  3581  001714  0EA0               	movlw	160
  3582  001716                     i2u141_47:
  3583  001716  D000               	nop2	
  3584  001718  2EE8               	decfsz	wreg,f,c
  3585  00171A  D7FD               	bra	i2u141_47
  3586  00171C  B04B               	btfsc	_LCDinterruptState,0,c
  3587  00171E  D002               	bra	i2u54_45
  3588  001720  9EF2               	bcf	intcon,7,c	;volatile
  3589  001722  D001               	bra	i2u54_46
  3590  001724                     i2u54_45:
  3591  001724  8EF2               	bsf	intcon,7,c	;volatile
  3592  001726                     i2u54_46:
  3593  001726  0012               	return		;funcret
  3594  001728                     __end_ofi2_lcdNibble:
  3595                           	opt stack 0
  3596                           pclatu	equ	0xFFB
  3597                           pclath	equ	0xFFA
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           intcon	equ	0xFF2
  3605                           postinc0	equ	0xFEE
  3606                           fsr0h	equ	0xFEA
  3607                           fsr0l	equ	0xFE9
  3608                           wreg	equ	0xFE8
  3609                           postdec1	equ	0xFE5
  3610                           fsr1h	equ	0xFE2
  3611                           fsr1l	equ	0xFE1
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           fsr2h	equ	0xFDA
  3615                           fsr2l	equ	0xFD9
  3616                           status	equ	0xFD8
  3617                           pclatu	equ	0xFFB
  3618                           pclath	equ	0xFFA
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           postinc0	equ	0xFEE
  3627                           fsr0h	equ	0xFEA
  3628                           fsr0l	equ	0xFE9
  3629                           wreg	equ	0xFE8
  3630                           postdec1	equ	0xFE5
  3631                           fsr1h	equ	0xFE2
  3632                           fsr1l	equ	0xFE1
  3633                           postinc2	equ	0xFDE
  3634                           postdec2	equ	0xFDD
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639                           	psect	rparam
  3640  0000                     pclatu	equ	0xFFB
  3641                           pclath	equ	0xFFA
  3642                           tblptru	equ	0xFF8
  3643                           tblptrh	equ	0xFF7
  3644                           tblptrl	equ	0xFF6
  3645                           tablat	equ	0xFF5
  3646                           prodh	equ	0xFF4
  3647                           prodl	equ	0xFF3
  3648                           intcon	equ	0xFF2
  3649                           postinc0	equ	0xFEE
  3650                           fsr0h	equ	0xFEA
  3651                           fsr0l	equ	0xFE9
  3652                           wreg	equ	0xFE8
  3653                           postdec1	equ	0xFE5
  3654                           fsr1h	equ	0xFE2
  3655                           fsr1l	equ	0xFE1
  3656                           postinc2	equ	0xFDE
  3657                           postdec2	equ	0xFDD
  3658                           fsr2h	equ	0xFDA
  3659                           fsr2l	equ	0xFD9
  3660                           status	equ	0xFD8
  3661                           
  3662                           	psect	temp
  3663  000054                     btemp:
  3664                           	opt stack 0
  3665  000054                     	ds	1
  3666  0000                     int$flags	set	btemp
  3667  0000                     wtemp6	set	btemp+1
  3668                           pclatu	equ	0xFFB
  3669                           pclath	equ	0xFFA
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           postinc0	equ	0xFEE
  3678                           fsr0h	equ	0xFEA
  3679                           fsr0l	equ	0xFE9
  3680                           wreg	equ	0xFE8
  3681                           postdec1	equ	0xFE5
  3682                           fsr1h	equ	0xFE2
  3683                           fsr1l	equ	0xFE1
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8


Data Sizes:
    Strings     78
    Constant    16
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65      83
    BANK0           128      7       7
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_9(CODE[12]), STR_8(CODE[17]), STR_7(CODE[14]), STR_6(CODE[15]), 
		 -> STR_5(CODE[20]), STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[20]), 
		 -> STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3069
                                             64 COMRAM     1     1      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    2201
                                             53 COMRAM    11     1     10
                                              0 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             43 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             48 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             41 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             44 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             43 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             41 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     272
                                             44 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     326
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     250
                                             42 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             41 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      76
                                             41 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    19    19      0    1320
                                             22 COMRAM    19    19      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            19    17      2    1050
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7       7       5        5.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      53       1       65.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5A      34        0.0%
DATA                 0      0      5A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr  2 15:24:58 2018

                __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l250 13F0                          l170 11BC  
                        l162 10E4                          l251 1400                          l171 11EC  
                        l163 1114                          l172 121A                          l164 1142  
                        l174 1220                          l166 1150                          l263 1496  
                        l167 1180                          l264 14E8                          l168 11AE  
                        l265 149C                          l257 142C                          l259 1454  
                        l672 1746                          l673 173E                          l682 187A  
                        l683 1872                          l676 1766                          l677 1770  
                        l686 1892                          l687 189C                 __CFG_CPB$OFF 000000  
                        u935 1666                          u936 1668                          u960 174A  
                        u945 16A6                          u946 16A8                          u990 187E  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1962 1458                         _ADON 007E10                         STR_1 1011  
                       STR_2 1011                         STR_3 1011                         STR_4 1011  
                       STR_5 1011                         STR_6 1036                         STR_7 1045  
                       STR_8 1025                         STR_9 1053                         u1050 1484  
                       u1070 14F2                         u1150 110C                         u1207 11CC  
                       u1160 1178                         u1217 1258                         u1170 11E4  
                       u1227 1992                         u1237 17D2                         _LATA 000F89  
                       _LATB 000F8A                         u1247 1806                         _LATC 000F8B  
                       _LATD 000F8C                         u1257 19A6                         _LATE 000F8D  
                       u1267 164E                         u1187 10F4                         u1277 1658  
                       u1197 1160                         u1287 168E                         u1297 1698  
                       _RBIE 007F93                         _RBIF 007F90                         _main 1060  
   __end_of_interruptHandler 13E4                         fsr0h 000FEA                         fsr1h 000FE2  
         i2___lwdiv@quotient 0005                         fsr2h 000FDA                         fsr0l 000FE9  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0054  
           __end_of_I2C_init 194C                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000              __end_ofi2_putch 19C2  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                  i2_lcdNibble 16AA  
           __end_of_LCD_LEFT 100C             ?_I2C_Master_Init 002A             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lwdiv 177A  
            __end_of___lwmod 18A6                        i2l250 1518                        i2l251 1528  
                      i2l263 15BC                        i2l183 1316                        i2l264 160A  
                      i2l184 1346                        i2l265 15C2                        i2l257 1552  
                      i2l185 1372                        i2l259 157A                        i2l672 1798  
                      i2l673 1790                        i2l682 18BC                        i2l683 18B4  
                      i2l676 17B8                        i2l677 17C2                        i2l686 18D4  
                      i2l687 18DE                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              __end_of_lcdInst 19AE  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 1818  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 100B                        _putch 1986  
                      pclath 000FFA                        tablat 000FF5            _LCDinterruptState 004B  
                      status 000FD8                        wtemp6 0055               __CFG_PBADEN$ON 000000  
      __size_of_I2C_sendData 0022             __end_ofi2_printf 162C           __size_ofi2___lwdiv 0052  
         __size_ofi2___lwmod 0042              __initialization 18E8           __size_ofi2_lcdInst 0014  
               __end_of_main 1262                   i2printf@ap 0010           __size_ofi2_initLCD 004C  
          __end_of_LCD_RIGHT 100D                       ??_main 0041                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 002B           ??_I2C_Master_Start 002B  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 002D  
                     _ADRESH 000FC4                       _ADRESL 000FC3              i2lcdNibble@data 0002  
                     ?_putch 0001                 _I2C_sendData 194C              i2lcdNibble@temp 0001  
                     i2l1832 1398                       i2l1668 157E                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
             __CFG_STVREN$ON 000000                    ??___lwdiv 002E                    ??___lwmod 0035  
                     clear_0 190E                    ??_lcdInst 002C                       _printf 13E4  
                  ??_initLCD 002D                 __pdataCOMRAM 004C            __end_ofi2___lwdiv 17CC  
               __mediumconst 0000            __end_ofi2___lwmod 18E8                    ?_I2C_init 0001  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
          __end_ofi2_lcdInst 19D6            __end_ofi2_initLCD 1864                   __accesstop 0080  
    __end_of__initialization 1914                ___rparam_used 000001           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                __end_of_putch 199A                  i2printf@val 0014  
         __size_of_lcdNibble 007E                  i2putch@data 0003                   ??_I2C_init 002E  
                  ?i2_printf 000D                      ??_putch 002C            ?_interruptHandler 0001  
         ??_interruptHandler 0017                 ?i2_lcdNibble 0001                      ?_printf 0036  
                 ??i2_printf 000F                      i2u53_45 16E4                      i2u53_46 16E6  
                    i2u62_40 179C                      i2u54_45 1724                      i2u54_46 1726  
                    i2u65_40 18C0                      i2u81_40 1612                      i2u79_40 15AA  
                    i2u87_40 12BA                      i2u88_40 12CC                      i2u87_48 12BC  
                    i2u89_40 12DE                      i2u88_48 12CE                      i2u89_48 12E0  
       lcd@LCDinterruptState 004A                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7                      _B_count 0048                      _B_input 0052  
                    i2_putch 19AE                      _N_count 0046                      _N_input 0050  
          __end_of_lcdNibble 16AA                      _S_count 0044                      _S_input 004E  
                    __Hparam 0000                      __Lparam 0000                      _W_count 0042  
                    _W_input 004C                      ___lwdiv 1728                      ___lwmod 1864  
               __psmallconst 1000                      __pcinit 18E8                      __ramtop 1000  
                    _lcdInst 199A                      __ptext0 1060                      __ptext1 13E4  
                    __ptext2 1986                      __ptext3 1864                      __ptext4 1728  
                    __ptext5 17CC                      __ptext6 199A                      __ptext7 162C  
                    __ptext8 194C                      __ptext9 1922              __size_of_printf 012A  
                    _initLCD 17CC                      _dpowers 1001                    _LCD_RIGHT 100C  
   __size_of_I2C_Master_Init 0018     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
             __pintcode_body 1262         end_of_initialization 1914        __end_of_LCD_SIZE_HORZ 100F  
      __end_of_LCD_SIZE_VERT 100E                __Lmediumconst 0000                      int_func 1262  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A                      printf@c 0086  
                    printf@f 0036                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                    _PORTBbits 000F81  
                  _TRISBbits 000F93                    _TRISCbits 000F94            __size_of_I2C_init 002A  
          i2___lwdiv@divisor 0003                    i2___lwdiv 177A                    i2___lwmod 18A6  
          i2___lwdiv@counter 0007                    i2_lcdInst 19C2                    i2_initLCD 1818  
       __size_ofi2_lcdNibble 007E                __pidataCOMRAM 19F2                i2lcdInst@data 0003  
             __end_of_printf 150E                 i2printf@flag 0012                 i2printf@prec 0013  
        start_initialization 18E8                    i2printf@c 0016                    i2printf@f 000D  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008            __size_ofi2_printf 011E  
          ??_I2C_Master_Init 002E            ??_I2C_Master_Wait 002A                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 002B             __CFG_OSC$INTIO67 000000                   ?i2_initLCD 0001  
   I2C_Master_Init@clockFreq 002A             __CFG_LPT1OSC$OFF 000000                     ??_printf 0040  
  __size_of_interruptHandler 13DC                  __pbssCOMRAM 0042                __pcstackBANK0 0080  
          i2___lwmod@divisor 000A            i2___lwmod@counter 000C                     ?i2_putch 0001  
           _I2C_Master_Start 1A02             _I2C_Master_Write 19E8             ___lwdiv@dividend 002A  
          __CFG_CCP2MX$PORTC 000000                    __pintcode 0008                    _lcdNibble 162C  
                   ?___lwdiv 002A                     ?___lwmod 0031                     ?_lcdInst 0001  
                   ?_initLCD 0001                  __smallconst 1000                     _I2C_init 1922  
           ___lwdiv@quotient 002F                ?_I2C_sendData 0001                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 0014                     _LCD_LEFT 100B  
                ??i2_lcdInst 0003                     _LATCbits 000F8B                     _LATDbits 000F8C  
                ??i2_initLCD 0004                     i2u130_47 130A                     i2u131_47 133A  
                   i2u140_47 170C                     i2u132_47 1366                     i2u141_47 1716  
                   i2u133_47 138E                     i2u134_47 19BA                     i2u135_47 181E  
                   i2u136_47 1852                     i2u137_47 19CE                     i2u138_47 16CC  
                   i2u139_47 16D6             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
                 _ADCON0bits 000FC2                   _ADCON2bits 000FC0                lcdNibble@data 002B  
                 printf@flag 0082                lcdNibble@temp 002A                   printf@prec 0083  
                   i2_printf 150E               ??_I2C_sendData 002D               _LCD_HORZ_LIMIT 1010  
                  copy_data0 18FC             __size_ofi2_putch 0014                     __Hrparam 0000  
      I2C_sendData@char_data 002D                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___lwdiv 0052             __size_of___lwmod 0042             _interruptHandler 0008  
           __size_of_lcdInst 0014              _I2C_Master_Init 196E             __size_of_initLCD 004C  
            _I2C_Master_Wait 19D6              _I2C_Master_Stop 19FA       __end_of_LCD_HORZ_LIMIT 1011  
            ___lwdiv@divisor 002C              ___lwdiv@counter 002E                     __ptext10 19E8  
                   __ptext11 19FA                     __ptext20 1818                     __ptext12 1A02  
                   __ptext21 19C2                     __ptext13 19D6                     __ptext22 16AA  
                   __ptext14 196E                     __ptext16 150E                     __ptext17 19AE  
                   __ptext18 18A6                     __ptext19 177A               _LCD_VERT_LIMIT 100F  
              __size_of_main 0202                ??i2_lcdNibble 0001                  ??_lcdNibble 002A  
                   int$flags 0054                    printf@val 0084  I2C_Master_Write@byteToWrite 002B  
                  putch@data 002C     __end_of_I2C_Master_Start 1A0A                  _OSCTUNEbits 000F9B  
   __end_of_I2C_Master_Write 19F2                   _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1010  
                   intlevel2 0000                _LCD_SIZE_HORZ 100E             ___lwmod@dividend 0031  
              _LCD_SIZE_VERT 100D                   _OSCCONbits 000FD3                     printf@ap 0080  
       __end_of_I2C_sendData 196E      __end_of_I2C_Master_Init 1986      __end_of_I2C_Master_Wait 19E8  
    __end_of_I2C_Master_Stop 1A02                  lcdInst@data 002C          __end_ofi2_lcdNibble 1728  
            ___lwmod@divisor 0033              ___lwmod@counter 0035                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5  
