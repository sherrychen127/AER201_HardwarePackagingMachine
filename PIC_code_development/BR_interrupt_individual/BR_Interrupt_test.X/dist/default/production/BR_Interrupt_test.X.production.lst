

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 30 16:01:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4620 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	smallconst
    68  001000                     __psmallconst:
    69                           	opt stack 0
    70  001000  00                 	db	0
    71  001001                     _keys:
    72                           	opt stack 0
    73  001001  31                 	db	49
    74  001002  32                 	db	50
    75  001003  33                 	db	51
    76  001004  41                 	db	65
    77  001005  34                 	db	52
    78  001006  35                 	db	53
    79  001007  36                 	db	54
    80  001008  42                 	db	66
    81  001009  37                 	db	55
    82  00100A  38                 	db	56
    83  00100B  39                 	db	57
    84  00100C  43                 	db	67
    85  00100D  2A                 	db	42
    86  00100E  30                 	db	48
    87  00100F  23                 	db	35
    88  001010  44                 	db	68
    89  001011  00                 	db	0
    90  001012                     __end_of_keys:
    91                           	opt stack 0
    92  001012                     _dpowers:
    93                           	opt stack 0
    94  001012  0001               	dw	1
    95  001014  000A               	dw	10
    96  001016  0064               	dw	100
    97  001018  03E8               	dw	1000
    98  00101A  2710               	dw	10000
    99  00101C                     __end_of_dpowers:
   100                           	opt stack 0
   101  00101C                     _LCD_LEFT:
   102                           	opt stack 0
   103  00101C  00                 	db	0
   104  00101D                     __end_of_LCD_LEFT:
   105                           	opt stack 0
   106  00101D                     _LCD_RIGHT:
   107                           	opt stack 0
   108  00101D  01                 	db	1
   109  00101E                     __end_of_LCD_RIGHT:
   110                           	opt stack 0
   111  00101E                     _LCD_SIZE_VERT:
   112                           	opt stack 0
   113  00101E  02                 	db	2
   114  00101F                     __end_of_LCD_SIZE_VERT:
   115                           	opt stack 0
   116  00101F                     _LCD_SIZE_HORZ:
   117                           	opt stack 0
   118  00101F  10                 	db	16
   119  001020                     __end_of_LCD_SIZE_HORZ:
   120                           	opt stack 0
   121  001020                     _LCD_VERT_LIMIT:
   122                           	opt stack 0
   123  001020  02                 	db	2
   124  001021                     __end_of_LCD_VERT_LIMIT:
   125                           	opt stack 0
   126  001021                     _LCD_HORZ_LIMIT:
   127                           	opt stack 0
   128  001021  28                 	db	40
   129  001022                     __end_of_LCD_HORZ_LIMIT:
   130                           	opt stack 0
   131  0000                     _LATDbits	set	3980
   132  0000                     _ADRESL	set	4035
   133  0000                     _ADRESH	set	4036
   134  0000                     _ADCON0bits	set	4034
   135  0000                     _PORTB	set	3969
   136  0000                     _TRISCbits	set	3988
   137  0000                     _LATCbits	set	3979
   138  0000                     _INTCONbits	set	4082
   139  0000                     _ADCON2bits	set	4032
   140  0000                     _ADCON1	set	4033
   141  0000                     _ADCON0	set	4034
   142  0000                     _TRISE	set	3990
   143  0000                     _TRISD	set	3989
   144  0000                     _TRISC	set	3988
   145  0000                     _TRISB	set	3987
   146  0000                     _TRISA	set	3986
   147  0000                     _LATE	set	3981
   148  0000                     _LATD	set	3980
   149  0000                     _LATC	set	3979
   150  0000                     _LATB	set	3978
   151  0000                     _LATA	set	3977
   152  0000                     _OSCCON	set	4051
   153  0000                     _ADON	set	32272
   154  0000                     _RBIF	set	32656
   155  0000                     _INT1IF	set	32640
   156  001022                     STR_3:
   157  001022  57                 	db	87	;'W'
   158  001023  5F                 	db	95	;'_'
   159  001024  63                 	db	99	;'c'
   160  001025  6F                 	db	111	;'o'
   161  001026  75                 	db	117	;'u'
   162  001027  6E                 	db	110	;'n'
   163  001028  74                 	db	116	;'t'
   164  001029  3A                 	db	58	;':'
   165  00102A  25                 	db	37
   166  00102B  64                 	db	100	;'d'
   167  00102C  00                 	db	0
   168  0000                     
   169                           ; #config settings
   170  00102D  00                 	db	0	; dummy byte at the end
   171  0000                     
   172                           	psect	cinit
   173  001734                     __pcinit:
   174                           	opt stack 0
   175  001734                     start_initialization:
   176                           	opt stack 0
   177  001734                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to COMRAM (4 bytes)
   181  001734  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   182  001736  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   183  001738  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   184  00173A  6A46               	clrf	__pbssCOMRAM& (0+255),c
   185  00173C                     end_of_initialization:
   186                           	opt stack 0
   187  00173C                     __end_of__initialization:
   188                           	opt stack 0
   189  00173C  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   190  00173E  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   191  001740  0E00               	movlw	low (__Lmediumconst shr (0+16))
   192  001742  6EF8               	movwf	tblptru,c
   193  001744  0100               	movlb	0
   194  001746  EFC7  F009         	goto	_main	;jump to C main() function
   195                           tblptru	equ	0xFF8
   196                           
   197                           	psect	bssCOMRAM
   198  000046                     __pbssCOMRAM:
   199                           	opt stack 0
   200  000046                     _W_count:
   201                           	opt stack 0
   202  000046                     	ds	2
   203  000048                     lcd@LCDinterruptState:
   204                           	opt stack 0
   205  000048                     	ds	1
   206  000049                     	ds	1
   207                           tblptru	equ	0xFF8
   208                           
   209                           	psect	cstackCOMRAM
   210  000001                     __pcstackCOMRAM:
   211                           	opt stack 0
   212  000001                     ?i2_readADC:
   213                           	opt stack 0
   214  000001                     ?i2___lwdiv:
   215                           	opt stack 0
   216  000001                     i2lcdNibble@temp:
   217                           	opt stack 0
   218  000001                     i2___lwdiv@dividend:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x0
   222  000001                     	ds	1
   223  000002                     i2lcdNibble@data:
   224                           	opt stack 0
   225                           
   226                           ; 1 bytes @ 0x1
   227  000002                     	ds	1
   228  000003                     ??i2_readADC:
   229  000003                     i2lcdInst@data:
   230                           	opt stack 0
   231  000003                     i2putch@data:
   232                           	opt stack 0
   233  000003                     i2___lwdiv@divisor:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x2
   237  000003                     	ds	1
   238  000004                     ??i2_initLCD:
   239                           
   240                           ; 1 bytes @ 0x3
   241  000004                     	ds	1
   242  000005                     i2readADC@channel:
   243                           	opt stack 0
   244  000005                     i2___lwdiv@quotient:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x4
   248  000005                     	ds	2
   249  000007                     i2___lwdiv@counter:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x6
   253  000007                     	ds	1
   254  000008                     ?i2___lwmod:
   255                           	opt stack 0
   256  000008                     i2___lwmod@dividend:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x7
   260  000008                     	ds	2
   261  00000A                     i2___lwmod@divisor:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x9
   265  00000A                     	ds	2
   266  00000C                     i2___lwmod@counter:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0xB
   270  00000C                     	ds	1
   271  00000D                     ?i2_printf:
   272                           	opt stack 0
   273  00000D                     i2printf@f:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0xC
   277  00000D                     	ds	4
   278  000011                     ??i2_printf:
   279                           
   280                           ; 1 bytes @ 0x10
   281  000011                     	ds	1
   282  000012                     i2printf@ap:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x11
   286  000012                     	ds	2
   287  000014                     i2printf@flag:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x13
   291  000014                     	ds	1
   292  000015                     i2printf@prec:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x14
   296  000015                     	ds	1
   297  000016                     i2printf@val:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x15
   301  000016                     	ds	2
   302  000018                     i2printf@c:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x17
   306  000018                     	ds	1
   307  000019                     ??_interruptHandler:
   308                           
   309                           ; 1 bytes @ 0x18
   310  000019                     	ds	19
   311  00002C                     interruptHandler@keypress:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x2B
   315  00002C                     	ds	1
   316  00002D                     ?_readADC:
   317                           	opt stack 0
   318  00002D                     ?___lwdiv:
   319                           	opt stack 0
   320  00002D                     lcdNibble@temp:
   321                           	opt stack 0
   322  00002D                     ___lwdiv@dividend:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x2C
   326  00002D                     	ds	1
   327  00002E                     lcdNibble@data:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x2D
   331  00002E                     	ds	1
   332  00002F                     ??_readADC:
   333  00002F                     lcdInst@data:
   334                           	opt stack 0
   335  00002F                     putch@data:
   336                           	opt stack 0
   337  00002F                     ___lwdiv@divisor:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x2E
   341  00002F                     	ds	1
   342  000030                     ??_initLCD:
   343                           
   344                           ; 1 bytes @ 0x2F
   345  000030                     	ds	1
   346  000031                     readADC@channel:
   347                           	opt stack 0
   348  000031                     ___lwdiv@quotient:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x30
   352  000031                     	ds	2
   353  000033                     ___lwdiv@counter:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x32
   357  000033                     	ds	1
   358  000034                     ?___lwmod:
   359                           	opt stack 0
   360  000034                     ___lwmod@dividend:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x33
   364  000034                     	ds	2
   365  000036                     ___lwmod@divisor:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x35
   369  000036                     	ds	2
   370  000038                     ___lwmod@counter:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x37
   374  000038                     	ds	1
   375  000039                     ?_printf:
   376                           	opt stack 0
   377  000039                     printf@f:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x38
   381  000039                     	ds	4
   382  00003D                     ??_printf:
   383                           
   384                           ; 1 bytes @ 0x3C
   385  00003D                     	ds	1
   386  00003E                     printf@ap:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x3D
   390  00003E                     	ds	2
   391  000040                     printf@flag:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x3F
   395  000040                     	ds	1
   396  000041                     printf@prec:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x40
   400  000041                     	ds	1
   401  000042                     printf@val:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x41
   405  000042                     	ds	2
   406  000044                     printf@c:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x43
   410  000044                     	ds	1
   411  000045                     ??_main:
   412                           
   413                           ; 1 bytes @ 0x44
   414  000045                     	ds	1
   415                           tblptru	equ	0xFF8
   416                           
   417 ;;
   418 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   419 ;;
   420 ;; *************** function _main *****************
   421 ;; Defined at:
   422 ;;		line 31 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;		None
   425 ;; Auto vars:     Size  Location     Type
   426 ;;		None
   427 ;; Return value:  Size  Location     Type
   428 ;;                  1    wreg      void 
   429 ;; Registers used:
   430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : 0/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;Total ram usage:        1 bytes
   441 ;; Hardware stack levels required when called:    7
   442 ;; This function calls:
   443 ;;		_initLCD
   444 ;;		_lcdInst
   445 ;;		_printf
   446 ;;		_readADC
   447 ;; This function is called by:
   448 ;;		Startup code after reset
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           
   452                           	psect	text0
   453  00138E                     __ptext0:
   454                           	opt stack 0
   455  00138E                     _main:
   456                           	opt stack 24
   457                           
   458                           ;main.c: 34: OSCCON = 0xF2;
   459                           
   460                           ;incstack = 0
   461  00138E  0EF2               	movlw	242
   462  001390  6ED3               	movwf	4051,c	;volatile
   463                           
   464                           ;main.c: 45: LATA = 0x00;
   465  001392  0E00               	movlw	0
   466  001394  6E89               	movwf	3977,c	;volatile
   467                           
   468                           ;main.c: 46: LATB = 0x00;
   469  001396  0E00               	movlw	0
   470  001398  6E8A               	movwf	3978,c	;volatile
   471                           
   472                           ;main.c: 47: LATC = 0x00;
   473  00139A  0E00               	movlw	0
   474  00139C  6E8B               	movwf	3979,c	;volatile
   475                           
   476                           ;main.c: 48: LATD = 0x00;
   477  00139E  0E00               	movlw	0
   478  0013A0  6E8C               	movwf	3980,c	;volatile
   479                           
   480                           ;main.c: 49: LATE = 0x00;
   481  0013A2  0E00               	movlw	0
   482  0013A4  6E8D               	movwf	3981,c	;volatile
   483                           
   484                           ;main.c: 53: TRISA = 0xFF;
   485  0013A6  6892               	setf	3986,c	;volatile
   486                           
   487                           ;main.c: 54: TRISB = 0xFF;
   488  0013A8  6893               	setf	3987,c	;volatile
   489                           
   490                           ;main.c: 55: TRISC = 0x00;
   491  0013AA  0E00               	movlw	0
   492  0013AC  6E94               	movwf	3988,c	;volatile
   493                           
   494                           ;main.c: 56: TRISD = 0x00;
   495  0013AE  0E00               	movlw	0
   496  0013B0  6E95               	movwf	3989,c	;volatile
   497                           
   498                           ;main.c: 57: TRISE = 0x00;
   499  0013B2  0E00               	movlw	0
   500  0013B4  6E96               	movwf	3990,c	;volatile
   501                           
   502                           ;main.c: 60: ADCON0 = 0x00;
   503  0013B6  0E00               	movlw	0
   504  0013B8  6EC2               	movwf	4034,c	;volatile
   505                           
   506                           ;main.c: 61: ADCON1 = 0b00001111;
   507  0013BA  0E0F               	movlw	15
   508  0013BC  6EC1               	movwf	4033,c	;volatile
   509                           
   510                           ;main.c: 62: ADCON2bits.ADFM = 1;
   511  0013BE  8EC0               	bsf	4032,7,c	;volatile
   512                           
   513                           ;main.c: 66: (INTCONbits.GIE = 1);
   514  0013C0  8EF2               	bsf	intcon,7,c	;volatile
   515                           
   516                           ;main.c: 69: initLCD();
   517  0013C2  ECD8  F00A         	call	_initLCD	;wreg free
   518                           
   519                           ;main.c: 73: LATCbits.LATC0 = 1;
   520  0013C6  808B               	bsf	3979,0,c	;volatile
   521                           
   522                           ;main.c: 74: TRISCbits.RC0 = 0;
   523  0013C8  9094               	bcf	3988,0,c	;volatile
   524  0013CA                     
   525                           ;main.c: 78: if (readADC(11)<320){
   526  0013CA  0E0B               	movlw	11
   527  0013CC  EC66  F00B         	call	_readADC
   528  0013D0  0E40               	movlw	64
   529  0013D2  5C2D               	subwf	?_readADC,w,c
   530  0013D4  0E01               	movlw	1
   531  0013D6  582E               	subwfb	?_readADC+1,w,c
   532  0013D8  B0D8               	btfsc	status,0,c
   533  0013DA  D002               	goto	l84
   534                           
   535                           ;main.c: 79: W_count++;
   536  0013DC  4A46               	infsnz	_W_count,f,c
   537  0013DE  2A47               	incf	_W_count+1,f,c
   538  0013E0                     l84:
   539                           
   540                           ;main.c: 81: }
   541                           ;main.c: 82: initLCD();
   542  0013E0  ECD8  F00A         	call	_initLCD	;wreg free
   543                           
   544                           ;main.c: 83: printf("%d",W_count);
   545  0013E4  0E2A               	movlw	low (STR_3+8)
   546  0013E6  6E39               	movwf	printf@f,c
   547  0013E8  0E10               	movlw	high (STR_3+8)
   548  0013EA  6E3A               	movwf	printf@f+1,c
   549  0013EC  C046  F03B         	movff	_W_count,?_printf+2
   550  0013F0  C047  F03C         	movff	_W_count+1,?_printf+3
   551  0013F4  ECA9  F008         	call	_printf	;wreg free
   552                           
   553                           ;main.c: 84: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   554  0013F8  0E80               	movlw	128
   555  0013FA  ECAF  F00B         	call	_lcdInst
   556  0013FE  0E41               	movlw	65
   557  001400  6E45               	movwf	??_main& (0+255),c
   558  001402  0EEE               	movlw	238
   559  001404                     u817:
   560  001404  2EE8               	decfsz	wreg,f,c
   561  001406  D7FE               	bra	u817
   562  001408  2E45               	decfsz	??_main& (0+255),f,c
   563  00140A  D7FC               	bra	u817
   564  00140C  D000               	nop2	
   565  00140E  D7DD               	goto	l83
   566  001410                     __end_of_main:
   567                           	opt stack 0
   568                           tblptru	equ	0xFF8
   569                           intcon	equ	0xFF2
   570                           wreg	equ	0xFE8
   571                           status	equ	0xFD8
   572                           
   573 ;; *************** function _readADC *****************
   574 ;; Defined at:
   575 ;;		line 162 in file "main.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;  channel         1    wreg     unsigned char 
   578 ;; Auto vars:     Size  Location     Type
   579 ;;  channel         1   48[COMRAM] unsigned char 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  2   44[COMRAM] unsigned short 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;Total ram usage:        5 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; Hardware stack levels required when called:    4
   596 ;; This function calls:
   597 ;;		Nothing
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text1
   604  0016CC                     __ptext1:
   605                           	opt stack 0
   606  0016CC                     _readADC:
   607                           	opt stack 26
   608                           
   609                           ;incstack = 0
   610                           ;readADC@channel stored from wreg
   611  0016CC  6E31               	movwf	readADC@channel,c
   612                           
   613                           ;main.c: 171: ADCON0 = (channel & 0x0F) << 2;
   614  0016CE  C031  F02F         	movff	readADC@channel,??_readADC
   615  0016D2  0E0F               	movlw	15
   616  0016D4  162F               	andwf	??_readADC,f,c
   617  0016D6  90D8               	bcf	status,0,c
   618  0016D8  362F               	rlcf	??_readADC,f,c
   619  0016DA  90D8               	bcf	status,0,c
   620  0016DC  342F               	rlcf	??_readADC,w,c
   621  0016DE  6EC2               	movwf	4034,c	;volatile
   622                           
   623                           ;main.c: 172: ADON = 1;
   624  0016E0  80C2               	bsf	4034,0,c	;volatile
   625                           
   626                           ;main.c: 173: ADCON0bits.GO = 1;
   627  0016E2  82C2               	bsf	4034,1,c	;volatile
   628  0016E4  B2C2               	btfsc	4034,1,c	;volatile
   629  0016E6  D7FE               	goto	l99
   630                           
   631                           ;main.c: 175: return (ADRESH << 8) | ADRESL;
   632  0016E8  50C3               	movf	4035,w,c	;volatile
   633  0016EA  CFC4 F02F          	movff	4036,??_readADC	;volatile
   634  0016EE  6A30               	clrf	(??_readADC+1)& (0+255),c
   635  0016F0  C02F  F030         	movff	??_readADC,??_readADC+1
   636  0016F4  6A2F               	clrf	??_readADC,c
   637  0016F6  102F               	iorwf	??_readADC,w,c
   638  0016F8  6E2D               	movwf	?_readADC,c
   639  0016FA  5030               	movf	??_readADC+1,w,c
   640  0016FC  6E2E               	movwf	?_readADC+1,c
   641  0016FE  0012               	return	
   642  001700                     __end_of_readADC:
   643                           	opt stack 0
   644                           tblptru	equ	0xFF8
   645                           intcon	equ	0xFF2
   646                           wreg	equ	0xFE8
   647                           status	equ	0xFD8
   648                           
   649 ;; *************** function _printf *****************
   650 ;; Defined at:
   651 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;  f               2   56[COMRAM] PTR const unsigned char 
   654 ;;		 -> STR_4(11), STR_3(11), STR_2(3), STR_1(3), 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  tmpval          4    0        struct .
   657 ;;  cp              3    0        PTR const unsigned char 
   658 ;;  val             2   65[COMRAM] unsigned int 
   659 ;;  ap              2   61[COMRAM] PTR void [1]
   660 ;;		 -> ?i2_printf(2), ?_printf(2), 
   661 ;;  len             2    0        unsigned int 
   662 ;;  c               1   67[COMRAM] char 
   663 ;;  prec            1   64[COMRAM] char 
   664 ;;  flag            1   63[COMRAM] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  2   56[COMRAM] int 
   667 ;; Registers used:
   668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   675 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   678 ;;Total ram usage:       12 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    6
   681 ;; This function calls:
   682 ;;		___lwdiv
   683 ;;		___lwmod
   684 ;;		_putch
   685 ;; This function is called by:
   686 ;;		_main
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text2
   691  001152                     __ptext2:
   692                           	opt stack 0
   693  001152                     _printf:
   694                           	opt stack 24
   695                           
   696                           ;doprnt.c: 466: va_list ap;
   697                           ;doprnt.c: 499: signed char c;
   698                           ;doprnt.c: 506: signed char prec;
   699                           ;doprnt.c: 508: unsigned char flag;
   700                           ;doprnt.c: 523: union {
   701                           ;doprnt.c: 524: unsigned long vd;
   702                           ;doprnt.c: 525: double integ;
   703                           ;doprnt.c: 526: } tmpval;
   704                           ;doprnt.c: 528: unsigned int val;
   705                           ;doprnt.c: 529: unsigned len;
   706                           ;doprnt.c: 530: const char * cp;
   707                           ;doprnt.c: 533: *ap = __va_start();
   708                           
   709                           ;incstack = 0
   710  001152  0E3B               	movlw	low (?_printf+2)
   711  001154  6E3E               	movwf	printf@ap,c
   712  001156  0E00               	movlw	high (?_printf+2)
   713  001158  6E3F               	movwf	printf@ap+1,c
   714                           
   715                           ;doprnt.c: 536: while(c = *f++) {
   716  00115A  D07D               	goto	u660
   717  00115C                     
   718                           ;doprnt.c: 538: if(c != '%')
   719  00115C  0E25               	movlw	37
   720  00115E  1844               	xorwf	printf@c,w,c
   721  001160  B4D8               	btfsc	status,2,c
   722  001162  D004               	goto	l169
   723                           
   724                           ;doprnt.c: 540: {
   725                           ;doprnt.c: 541: (putch(c) );
   726  001164  5044               	movf	printf@c,w,c
   727  001166  ECA5  F00B         	call	_putch
   728                           
   729                           ;doprnt.c: 542: continue;
   730  00116A  D075               	goto	u660
   731  00116C                     l169:
   732                           
   733                           ;doprnt.c: 543: }
   734                           ;doprnt.c: 548: flag = 0;
   735  00116C  0E00               	movlw	0
   736  00116E  6E40               	movwf	printf@flag,c
   737                           
   738                           ;doprnt.c: 822: }
   739                           
   740                           ;doprnt.c: 813: continue;
   741                           
   742                           ;doprnt.c: 802: default:
   743                           
   744                           ;doprnt.c: 698: case 'i':
   745                           ;doprnt.c: 699: break;
   746                           
   747                           ;doprnt.c: 697: case 'd':
   748                           
   749                           ;doprnt.c: 638: goto alldone;
   750                           
   751                           ;doprnt.c: 637: case 0:
   752                           
   753                           ;doprnt.c: 635: switch(c = *f++) {
   754  001170  C039  FFF6         	movff	printf@f,tblptrl
   755  001174  C03A  FFF7         	movff	printf@f+1,tblptrh
   756  001178  4A39               	infsnz	printf@f,f,c
   757  00117A  2A3A               	incf	printf@f+1,f,c
   758  00117C                     	if	0	;tblptru may be non-zero
   759  00117C                     	endif
   760  00117C                     	if	0	;tblptru may be non-zero
   761  00117C                     	endif
   762  00117C  0008               	tblrd		*
   763  00117E  CFF5 F044          	movff	tablat,printf@c
   764  001182  5044               	movf	printf@c,w,c
   765                           
   766                           ; Switch size 1, requested type "space"
   767                           ; Number of cases is 3, Range of values is 0 to 105
   768                           ; switch strategies available:
   769                           ; Name         Instructions Cycles
   770                           ; simple_byte           10     6 (average)
   771                           ;	Chosen strategy is simple_byte
   772  001184  0A00               	xorlw	0	; case 0
   773  001186  B4D8               	btfsc	status,2,c
   774  001188  0012               	return	
   775  00118A  0A64               	xorlw	100	; case 100
   776  00118C  B4D8               	btfsc	status,2,c
   777  00118E  D003               	goto	l175
   778  001190  0A0D               	xorlw	13	; case 105
   779  001192  A4D8               	btfss	status,2,c
   780  001194  D060               	goto	u660
   781  001196                     l175:
   782                           
   783                           ;doprnt.c: 1253: {
   784                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   785  001196  C03E  FFD9         	movff	printf@ap,fsr2l
   786  00119A  C03F  FFDA         	movff	printf@ap+1,fsr2h
   787  00119E  CFDE F042          	movff	postinc2,printf@val
   788  0011A2  CFDD F043          	movff	postdec2,printf@val+1
   789  0011A6  0E02               	movlw	2
   790  0011A8  263E               	addwf	printf@ap,f,c
   791  0011AA  0E00               	movlw	0
   792  0011AC  223F               	addwfc	printf@ap+1,f,c
   793                           
   794                           ;doprnt.c: 1261: if((int)val < 0) {
   795  0011AE  AE43               	btfss	printf@val+1,7,c
   796  0011B0  D006               	goto	l177
   797                           
   798                           ;doprnt.c: 1262: flag |= 0x03;
   799  0011B2  0E03               	movlw	3
   800  0011B4  1240               	iorwf	printf@flag,f,c
   801                           
   802                           ;doprnt.c: 1263: val = -val;
   803  0011B6  6C42               	negf	printf@val,c
   804  0011B8  1E43               	comf	printf@val+1,f,c
   805  0011BA  B0D8               	btfsc	status,0,c
   806  0011BC  2A43               	incf	printf@val+1,f,c
   807  0011BE                     l177:
   808                           
   809                           ;doprnt.c: 1264: }
   810                           ;doprnt.c: 1266: }
   811                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   812  0011BE  0E01               	movlw	1
   813  0011C0  6E44               	movwf	printf@c,c
   814  0011C2                     l1400:
   815  0011C2  0E05               	movlw	5
   816  0011C4  1844               	xorwf	printf@c,w,c
   817  0011C6  B4D8               	btfsc	status,2,c
   818  0011C8  D012               	goto	u640
   819                           
   820                           ;doprnt.c: 1306: if(val < dpowers[c])
   821  0011CA  5044               	movf	printf@c,w,c
   822  0011CC  0D02               	mullw	2
   823  0011CE  0E12               	movlw	low _dpowers
   824  0011D0  24F3               	addwf	prodl,w,c
   825  0011D2  6EF6               	movwf	tblptrl,c
   826  0011D4  0E10               	movlw	high _dpowers
   827  0011D6  20F4               	addwfc	prodh,w,c
   828  0011D8  6EF7               	movwf	tblptrh,c
   829  0011DA                     	if	0	;There are less than 3 active tblptr bytes
   830  0011DA                     	endif
   831  0011DA  0009               	tblrd		*+
   832  0011DC  50F5               	movf	tablat,w,c
   833  0011DE  5C42               	subwf	printf@val,w,c
   834  0011E0  0009               	tblrd		*+
   835  0011E2  50F5               	movf	tablat,w,c
   836  0011E4  5843               	subwfb	printf@val+1,w,c
   837  0011E6  A0D8               	btfss	status,0,c
   838  0011E8  D002               	goto	u640
   839                           
   840                           ;doprnt.c: 1307: break;
   841  0011EA  2A44               	incf	printf@c,f,c
   842  0011EC  D7EA               	goto	l1400
   843  0011EE                     u640:
   844                           
   845                           ;doprnt.c: 1422: {
   846                           ;doprnt.c: 1438: if(flag & 0x03)
   847  0011EE  C040  F03D         	movff	printf@flag,??_printf
   848  0011F2  0E03               	movlw	3
   849  0011F4  163D               	andwf	??_printf,f,c
   850  0011F6  B4D8               	btfsc	status,2,c
   851  0011F8  D003               	goto	l181
   852                           
   853                           ;doprnt.c: 1439: (putch('-') );
   854  0011FA  0E2D               	movlw	45
   855  0011FC  ECA5  F00B         	call	_putch
   856  001200                     l181:
   857                           
   858                           ;doprnt.c: 1469: }
   859                           ;doprnt.c: 1472: prec = c;
   860  001200  C044  F041         	movff	printf@c,printf@prec
   861                           
   862                           ;doprnt.c: 1474: while(prec--) {
   863  001204  D024               	goto	l182
   864  001206                     
   865                           ;doprnt.c: 1478: {
   866                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   867  001206  5041               	movf	printf@prec,w,c
   868  001208  0D02               	mullw	2
   869  00120A  0E12               	movlw	low _dpowers
   870  00120C  24F3               	addwf	prodl,w,c
   871  00120E  6EF6               	movwf	tblptrl,c
   872  001210  0E10               	movlw	high _dpowers
   873  001212  20F4               	addwfc	prodh,w,c
   874  001214  6EF7               	movwf	tblptrh,c
   875  001216                     	if	0	;There are less than 3 active tblptr bytes
   876  001216                     	endif
   877  001216  0009               	tblrd		*+
   878  001218  CFF5 F02F          	movff	tablat,___lwdiv@divisor
   879  00121C  000A               	tblrd		*-
   880  00121E  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
   881  001222  C042  F02D         	movff	printf@val,___lwdiv@dividend
   882  001226  C043  F02E         	movff	printf@val+1,___lwdiv@dividend+1
   883  00122A  EC86  F00A         	call	___lwdiv	;wreg free
   884  00122E  C02D  F034         	movff	?___lwdiv,___lwmod@dividend
   885  001232  C02E  F035         	movff	?___lwdiv+1,___lwmod@dividend+1
   886  001236  0E00               	movlw	0
   887  001238  6E37               	movwf	___lwmod@divisor+1,c
   888  00123A  0E0A               	movlw	10
   889  00123C  6E36               	movwf	___lwmod@divisor,c
   890  00123E  EC24  F00B         	call	___lwmod	;wreg free
   891  001242  5034               	movf	?___lwmod,w,c
   892  001244  0F30               	addlw	48
   893  001246  6E44               	movwf	printf@c,c
   894                           
   895                           ;doprnt.c: 1523: }
   896                           ;doprnt.c: 1524: (putch(c) );
   897  001248  5044               	movf	printf@c,w,c
   898  00124A  ECA5  F00B         	call	_putch
   899  00124E                     l182:
   900  00124E  0641               	decf	printf@prec,f,c
   901  001250  2841               	incf	printf@prec,w,c
   902  001252  A4D8               	btfss	status,2,c
   903  001254  D7D8               	goto	l183
   904  001256                     u660:
   905  001256  C039  FFF6         	movff	printf@f,tblptrl
   906  00125A  C03A  FFF7         	movff	printf@f+1,tblptrh
   907  00125E  4A39               	infsnz	printf@f,f,c
   908  001260  2A3A               	incf	printf@f+1,f,c
   909  001262                     	if	0	;tblptru may be non-zero
   910  001262                     	endif
   911  001262                     	if	0	;tblptru may be non-zero
   912  001262                     	endif
   913  001262  0008               	tblrd		*
   914  001264  CFF5 F044          	movff	tablat,printf@c
   915  001268  5044               	movf	printf@c,w,c
   916  00126A  B4D8               	btfsc	status,2,c
   917  00126C  0012               	return	
   918  00126E  D776               	goto	l168
   919  001270                     __end_of_printf:
   920                           	opt stack 0
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           prodh	equ	0xFF4
   926                           prodl	equ	0xFF3
   927                           intcon	equ	0xFF2
   928                           wreg	equ	0xFE8
   929                           postinc2	equ	0xFDE
   930                           postdec2	equ	0xFDD
   931                           fsr2h	equ	0xFDA
   932                           fsr2l	equ	0xFD9
   933                           status	equ	0xFD8
   934                           
   935 ;; *************** function _putch *****************
   936 ;; Defined at:
   937 ;;		line 24 in file "lcd.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  data            1    wreg     unsigned char 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  data            1   46[COMRAM] unsigned char 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, status,2, status,0, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;Total ram usage:        1 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    5
   958 ;; This function calls:
   959 ;;		_lcdNibble
   960 ;; This function is called by:
   961 ;;		_printf
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           	psect	text3
   966  00174A                     __ptext3:
   967                           	opt stack 0
   968  00174A                     _putch:
   969                           	opt stack 24
   970                           
   971                           ;incstack = 0
   972                           ;putch@data stored from wreg
   973  00174A  6E2F               	movwf	putch@data,c
   974                           
   975                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   976  00174C  848C               	bsf	3980,2,c	;volatile
   977                           
   978                           ;lcd.c: 33: lcdNibble(data);
   979  00174E  502F               	movf	putch@data,w,c
   980  001750  EC08  F00A         	call	_lcdNibble
   981                           
   982                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   983  001754  0EC8               	movlw	200
   984  001756                     u827:
   985  001756  D000               	nop2	
   986  001758  2EE8               	decfsz	wreg,f,c
   987  00175A  D7FD               	bra	u827
   988  00175C  0012               	return		;funcret
   989  00175E                     __end_of_putch:
   990                           	opt stack 0
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           prodh	equ	0xFF4
   996                           prodl	equ	0xFF3
   997                           intcon	equ	0xFF2
   998                           wreg	equ	0xFE8
   999                           postinc2	equ	0xFDE
  1000                           postdec2	equ	0xFDD
  1001                           fsr2h	equ	0xFDA
  1002                           fsr2l	equ	0xFD9
  1003                           status	equ	0xFD8
  1004                           
  1005 ;; *************** function ___lwmod *****************
  1006 ;; Defined at:
  1007 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;  dividend        2   51[COMRAM] unsigned int 
  1010 ;;  divisor         2   53[COMRAM] unsigned int 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  counter         1   55[COMRAM] unsigned char 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  2   51[COMRAM] unsigned int 
  1015 ;; Registers used:
  1016 ;;		wreg, status,2, status,0
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1022 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;Total ram usage:        5 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    4
  1029 ;; This function calls:
  1030 ;;		Nothing
  1031 ;; This function is called by:
  1032 ;;		_printf
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text4
  1037  001648                     __ptext4:
  1038                           	opt stack 0
  1039  001648                     ___lwmod:
  1040                           	opt stack 25
  1041                           
  1042                           ;incstack = 0
  1043  001648  5036               	movf	___lwmod@divisor,w,c
  1044  00164A  1037               	iorwf	___lwmod@divisor+1,w,c
  1045  00164C  B4D8               	btfsc	status,2,c
  1046  00164E  D018               	goto	l605
  1047  001650  0E01               	movlw	1
  1048  001652  6E38               	movwf	___lwmod@counter,c
  1049  001654  D004               	goto	l600
  1050  001656  90D8               	bcf	status,0,c
  1051  001658  3636               	rlcf	___lwmod@divisor,f,c
  1052  00165A  3637               	rlcf	___lwmod@divisor+1,f,c
  1053  00165C  2A38               	incf	___lwmod@counter,f,c
  1054  00165E                     l600:
  1055  00165E  AE37               	btfss	___lwmod@divisor+1,7,c
  1056  001660  D7FA               	goto	l601
  1057  001662                     u510:
  1058  001662  5036               	movf	___lwmod@divisor,w,c
  1059  001664  5C34               	subwf	___lwmod@dividend,w,c
  1060  001666  5037               	movf	___lwmod@divisor+1,w,c
  1061  001668  5835               	subwfb	___lwmod@dividend+1,w,c
  1062  00166A  A0D8               	btfss	status,0,c
  1063  00166C  D004               	goto	l604
  1064  00166E  5036               	movf	___lwmod@divisor,w,c
  1065  001670  5E34               	subwf	___lwmod@dividend,f,c
  1066  001672  5037               	movf	___lwmod@divisor+1,w,c
  1067  001674  5A35               	subwfb	___lwmod@dividend+1,f,c
  1068  001676                     l604:
  1069  001676  90D8               	bcf	status,0,c
  1070  001678  3237               	rrcf	___lwmod@divisor+1,f,c
  1071  00167A  3236               	rrcf	___lwmod@divisor,f,c
  1072  00167C  2E38               	decfsz	___lwmod@counter,f,c
  1073  00167E  D7F1               	goto	u510
  1074  001680                     l605:
  1075  001680  C034  F034         	movff	___lwmod@dividend,?___lwmod
  1076  001684  C035  F035         	movff	___lwmod@dividend+1,?___lwmod+1
  1077  001688  0012               	return		;funcret
  1078  00168A                     __end_of___lwmod:
  1079                           	opt stack 0
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           prodh	equ	0xFF4
  1085                           prodl	equ	0xFF3
  1086                           intcon	equ	0xFF2
  1087                           wreg	equ	0xFE8
  1088                           postinc2	equ	0xFDE
  1089                           postdec2	equ	0xFDD
  1090                           fsr2h	equ	0xFDA
  1091                           fsr2l	equ	0xFD9
  1092                           status	equ	0xFD8
  1093                           
  1094 ;; *************** function ___lwdiv *****************
  1095 ;; Defined at:
  1096 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;  dividend        2   44[COMRAM] unsigned int 
  1099 ;;  divisor         2   46[COMRAM] unsigned int 
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;  quotient        2   48[COMRAM] unsigned int 
  1102 ;;  counter         1   50[COMRAM] unsigned char 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  2   44[COMRAM] unsigned int 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1112 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1115 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;Total ram usage:        7 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    4
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_printf
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text5
  1127  00150C                     __ptext5:
  1128                           	opt stack 0
  1129  00150C                     ___lwdiv:
  1130                           	opt stack 25
  1131                           
  1132                           ;incstack = 0
  1133  00150C  0E00               	movlw	0
  1134  00150E  6E32               	movwf	___lwdiv@quotient+1,c
  1135  001510  0E00               	movlw	0
  1136  001512  6E31               	movwf	___lwdiv@quotient,c
  1137  001514  502F               	movf	___lwdiv@divisor,w,c
  1138  001516  1030               	iorwf	___lwdiv@divisor+1,w,c
  1139  001518  B4D8               	btfsc	status,2,c
  1140  00151A  D01C               	goto	l595
  1141  00151C  0E01               	movlw	1
  1142  00151E  6E33               	movwf	___lwdiv@counter,c
  1143  001520  D004               	goto	l590
  1144  001522  90D8               	bcf	status,0,c
  1145  001524  362F               	rlcf	___lwdiv@divisor,f,c
  1146  001526  3630               	rlcf	___lwdiv@divisor+1,f,c
  1147  001528  2A33               	incf	___lwdiv@counter,f,c
  1148  00152A                     l590:
  1149  00152A  AE30               	btfss	___lwdiv@divisor+1,7,c
  1150  00152C  D7FA               	goto	l591
  1151  00152E                     u480:
  1152  00152E  90D8               	bcf	status,0,c
  1153  001530  3631               	rlcf	___lwdiv@quotient,f,c
  1154  001532  3632               	rlcf	___lwdiv@quotient+1,f,c
  1155  001534  502F               	movf	___lwdiv@divisor,w,c
  1156  001536  5C2D               	subwf	___lwdiv@dividend,w,c
  1157  001538  5030               	movf	___lwdiv@divisor+1,w,c
  1158  00153A  582E               	subwfb	___lwdiv@dividend+1,w,c
  1159  00153C  A0D8               	btfss	status,0,c
  1160  00153E  D005               	goto	l594
  1161  001540  502F               	movf	___lwdiv@divisor,w,c
  1162  001542  5E2D               	subwf	___lwdiv@dividend,f,c
  1163  001544  5030               	movf	___lwdiv@divisor+1,w,c
  1164  001546  5A2E               	subwfb	___lwdiv@dividend+1,f,c
  1165  001548  8031               	bsf	___lwdiv@quotient,0,c
  1166  00154A                     l594:
  1167  00154A  90D8               	bcf	status,0,c
  1168  00154C  3230               	rrcf	___lwdiv@divisor+1,f,c
  1169  00154E  322F               	rrcf	___lwdiv@divisor,f,c
  1170  001550  2E33               	decfsz	___lwdiv@counter,f,c
  1171  001552  D7ED               	goto	u480
  1172  001554                     l595:
  1173  001554  C031  F02D         	movff	___lwdiv@quotient,?___lwdiv
  1174  001558  C032  F02E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1175  00155C  0012               	return		;funcret
  1176  00155E                     __end_of___lwdiv:
  1177                           	opt stack 0
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           prodh	equ	0xFF4
  1183                           prodl	equ	0xFF3
  1184                           intcon	equ	0xFF2
  1185                           wreg	equ	0xFE8
  1186                           postinc2	equ	0xFDE
  1187                           postdec2	equ	0xFDD
  1188                           fsr2h	equ	0xFDA
  1189                           fsr2l	equ	0xFD9
  1190                           status	equ	0xFD8
  1191                           
  1192 ;; *************** function _initLCD *****************
  1193 ;; Defined at:
  1194 ;;		line 60 in file "lcd.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1212 ;;Total ram usage:        1 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    6
  1215 ;; This function calls:
  1216 ;;		_lcdInst
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text6
  1223  0015B0                     __ptext6:
  1224                           	opt stack 0
  1225  0015B0                     _initLCD:
  1226                           	opt stack 24
  1227                           
  1228                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1229                           
  1230                           ;incstack = 0
  1231  0015B0  0EC3               	movlw	195
  1232  0015B2  6E30               	movwf	??_initLCD& (0+255),c
  1233  0015B4  0ECD               	movlw	205
  1234  0015B6                     u837:
  1235  0015B6  2EE8               	decfsz	wreg,f,c
  1236  0015B8  D7FE               	bra	u837
  1237  0015BA  2E30               	decfsz	??_initLCD& (0+255),f,c
  1238  0015BC  D7FC               	bra	u837
  1239  0015BE  F000               	nop	
  1240                           
  1241                           ;lcd.c: 69: lcdInst(0b00110011);
  1242  0015C0  0E33               	movlw	51
  1243  0015C2  ECAF  F00B         	call	_lcdInst
  1244                           
  1245                           ;lcd.c: 70: lcdInst(0b00110010);
  1246  0015C6  0E32               	movlw	50
  1247  0015C8  ECAF  F00B         	call	_lcdInst
  1248                           
  1249                           ;lcd.c: 71: lcdInst(0b00101000);
  1250  0015CC  0E28               	movlw	40
  1251  0015CE  ECAF  F00B         	call	_lcdInst
  1252                           
  1253                           ;lcd.c: 72: lcdInst(0b00001111);
  1254  0015D2  0E0F               	movlw	15
  1255  0015D4  ECAF  F00B         	call	_lcdInst
  1256                           
  1257                           ;lcd.c: 73: lcdInst(0b00000110);
  1258  0015D8  0E06               	movlw	6
  1259  0015DA  ECAF  F00B         	call	_lcdInst
  1260                           
  1261                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1262  0015DE  0E01               	movlw	1
  1263  0015E0  ECAF  F00B         	call	_lcdInst
  1264  0015E4  0EC3               	movlw	195
  1265  0015E6  6E30               	movwf	??_initLCD& (0+255),c
  1266  0015E8  0ECD               	movlw	205
  1267  0015EA                     u847:
  1268  0015EA  2EE8               	decfsz	wreg,f,c
  1269  0015EC  D7FE               	bra	u847
  1270  0015EE  2E30               	decfsz	??_initLCD& (0+255),f,c
  1271  0015F0  D7FC               	bra	u847
  1272  0015F2  F000               	nop	
  1273                           
  1274                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1275  0015F4  0E0F               	movlw	15
  1276  0015F6  ECAF  F00B         	call	_lcdInst
  1277  0015FA  0012               	return		;funcret
  1278  0015FC                     __end_of_initLCD:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           prodh	equ	0xFF4
  1285                           prodl	equ	0xFF3
  1286                           intcon	equ	0xFF2
  1287                           wreg	equ	0xFE8
  1288                           postinc2	equ	0xFDE
  1289                           postdec2	equ	0xFDD
  1290                           fsr2h	equ	0xFDA
  1291                           fsr2l	equ	0xFD9
  1292                           status	equ	0xFD8
  1293                           
  1294 ;; *************** function _lcdInst *****************
  1295 ;; Defined at:
  1296 ;;		line 11 in file "lcd.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  data            1    wreg     unsigned char 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  data            1   46[COMRAM] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg, status,2, status,0, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;Total ram usage:        1 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; Hardware stack levels required when called:    5
  1317 ;; This function calls:
  1318 ;;		_lcdNibble
  1319 ;; This function is called by:
  1320 ;;		_main
  1321 ;;		_initLCD
  1322 ;;		_lcd_set_cursor
  1323 ;;		_lcd_shift_cursor
  1324 ;;		_lcd_shift_display
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text7
  1329  00175E                     __ptext7:
  1330                           	opt stack 0
  1331  00175E                     _lcdInst:
  1332                           	opt stack 25
  1333                           
  1334                           ;incstack = 0
  1335                           ;lcdInst@data stored from wreg
  1336  00175E  6E2F               	movwf	lcdInst@data,c
  1337                           
  1338                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1339  001760  948C               	bcf	3980,2,c	;volatile
  1340                           
  1341                           ;lcd.c: 20: lcdNibble(data);
  1342  001762  502F               	movf	lcdInst@data,w,c
  1343  001764  EC08  F00A         	call	_lcdNibble
  1344                           
  1345                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1346  001768  0EC8               	movlw	200
  1347  00176A                     u857:
  1348  00176A  D000               	nop2	
  1349  00176C  2EE8               	decfsz	wreg,f,c
  1350  00176E  D7FD               	bra	u857
  1351  001770  0012               	return		;funcret
  1352  001772                     __end_of_lcdInst:
  1353                           	opt stack 0
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           prodh	equ	0xFF4
  1359                           prodl	equ	0xFF3
  1360                           intcon	equ	0xFF2
  1361                           wreg	equ	0xFE8
  1362                           postinc2	equ	0xFDE
  1363                           postdec2	equ	0xFDD
  1364                           fsr2h	equ	0xFDA
  1365                           fsr2l	equ	0xFD9
  1366                           status	equ	0xFD8
  1367                           
  1368 ;; *************** function _lcdNibble *****************
  1369 ;; Defined at:
  1370 ;;		line 37 in file "lcd.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  data            1    wreg     unsigned char 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  data            1   45[COMRAM] unsigned char 
  1375 ;;  temp            1   44[COMRAM] unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;Total ram usage:        2 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    4
  1392 ;; This function calls:
  1393 ;;		Nothing
  1394 ;; This function is called by:
  1395 ;;		_lcdInst
  1396 ;;		_putch
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text8
  1401  001410                     __ptext8:
  1402                           	opt stack 0
  1403  001410                     _lcdNibble:
  1404                           	opt stack 24
  1405                           
  1406                           ;incstack = 0
  1407                           ;lcdNibble@data stored from wreg
  1408  001410  6E2E               	movwf	lcdNibble@data,c
  1409                           
  1410                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1411  001412  502E               	movf	lcdNibble@data,w,c
  1412  001414  0BF0               	andlw	240
  1413  001416  6E2D               	movwf	lcdNibble@temp,c
  1414                           
  1415                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1416  001418  508C               	movf	3980,w,c	;volatile
  1417  00141A  0B0F               	andlw	15
  1418  00141C  6E8C               	movwf	3980,c	;volatile
  1419                           
  1420                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1421  00141E  502D               	movf	lcdNibble@temp,w,c
  1422  001420  108C               	iorwf	3980,w,c	;volatile
  1423  001422  6E8C               	movwf	3980,c	;volatile
  1424                           
  1425                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1426  001424  0E00               	movlw	0
  1427  001426  BEF2               	btfsc	intcon,7,c	;volatile
  1428  001428  0E01               	movlw	1
  1429  00142A  6E48               	movwf	lcd@LCDinterruptState,c
  1430  00142C  9EF2               	bcf	intcon,7,c	;volatile
  1431  00142E  868C               	bsf	3980,3,c	;volatile
  1432  001430  0E53               	movlw	83
  1433  001432                     u867:
  1434  001432  2EE8               	decfsz	wreg,f,c
  1435  001434  D7FE               	bra	u867
  1436  001436  F000               	nop	
  1437  001438  968C               	bcf	3980,3,c	;volatile
  1438  00143A  0EC8               	movlw	200
  1439  00143C                     u877:
  1440  00143C  D000               	nop2	
  1441  00143E  2EE8               	decfsz	wreg,f,c
  1442  001440  D7FD               	bra	u877
  1443  001442  B048               	btfsc	lcd@LCDinterruptState,0,c
  1444  001444  D002               	bra	u15
  1445  001446  9EF2               	bcf	intcon,7,c	;volatile
  1446  001448  D001               	bra	u16
  1447  00144A                     u15:
  1448  00144A  8EF2               	bsf	intcon,7,c	;volatile
  1449  00144C                     u16:
  1450                           
  1451                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1452  00144C  382E               	swapf	lcdNibble@data,w,c
  1453  00144E  0BF0               	andlw	240
  1454  001450  6E2E               	movwf	lcdNibble@data,c
  1455                           
  1456                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1457  001452  502E               	movf	lcdNibble@data,w,c
  1458  001454  0BF0               	andlw	240
  1459  001456  6E2D               	movwf	lcdNibble@temp,c
  1460                           
  1461                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1462  001458  508C               	movf	3980,w,c	;volatile
  1463  00145A  0B0F               	andlw	15
  1464  00145C  6E8C               	movwf	3980,c	;volatile
  1465                           
  1466                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1467  00145E  502D               	movf	lcdNibble@temp,w,c
  1468  001460  108C               	iorwf	3980,w,c	;volatile
  1469  001462  6E8C               	movwf	3980,c	;volatile
  1470                           
  1471                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1472  001464  0E00               	movlw	0
  1473  001466  BEF2               	btfsc	intcon,7,c	;volatile
  1474  001468  0E01               	movlw	1
  1475  00146A  6E48               	movwf	lcd@LCDinterruptState,c
  1476  00146C  9EF2               	bcf	intcon,7,c	;volatile
  1477  00146E  868C               	bsf	3980,3,c	;volatile
  1478  001470  0E53               	movlw	83
  1479  001472                     u887:
  1480  001472  2EE8               	decfsz	wreg,f,c
  1481  001474  D7FE               	bra	u887
  1482  001476  F000               	nop	
  1483  001478  968C               	bcf	3980,3,c	;volatile
  1484  00147A  0EC8               	movlw	200
  1485  00147C                     u897:
  1486  00147C  D000               	nop2	
  1487  00147E  2EE8               	decfsz	wreg,f,c
  1488  001480  D7FD               	bra	u897
  1489  001482  B048               	btfsc	lcd@LCDinterruptState,0,c
  1490  001484  D002               	bra	u25
  1491  001486  9EF2               	bcf	intcon,7,c	;volatile
  1492  001488  D001               	bra	u26
  1493  00148A                     u25:
  1494  00148A  8EF2               	bsf	intcon,7,c	;volatile
  1495  00148C                     u26:
  1496  00148C  0012               	return		;funcret
  1497  00148E                     __end_of_lcdNibble:
  1498                           	opt stack 0
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           intcon	equ	0xFF2
  1506                           wreg	equ	0xFE8
  1507                           postinc2	equ	0xFDE
  1508                           postdec2	equ	0xFDD
  1509                           fsr2h	equ	0xFDA
  1510                           fsr2l	equ	0xFD9
  1511                           status	equ	0xFD8
  1512                           
  1513 ;; *************** function _interruptHandler *****************
  1514 ;; Defined at:
  1515 ;;		line 119 in file "main.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  keypress        1   43[COMRAM] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;Total ram usage:       20 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    3
  1536 ;; This function calls:
  1537 ;;		i2_initLCD
  1538 ;;		i2_lcdInst
  1539 ;;		i2_printf
  1540 ;;		i2_putch
  1541 ;;		i2_readADC
  1542 ;; This function is called by:
  1543 ;;		Interrupt level 2
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	intcode
  1548  000008                     __pintcode:
  1549                           	opt stack 0
  1550  000008                     _interruptHandler:
  1551                           	opt stack 24
  1552                           
  1553                           ;incstack = 0
  1554  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1555  00000A  ED17  F008         	call	int_func,f	;refresh shadow registers
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           prodh	equ	0xFF4
  1561                           prodl	equ	0xFF3
  1562                           intcon	equ	0xFF2
  1563                           wreg	equ	0xFE8
  1564                           postinc2	equ	0xFDE
  1565                           postdec2	equ	0xFDD
  1566                           fsr2h	equ	0xFDA
  1567                           fsr2l	equ	0xFD9
  1568                           status	equ	0xFD8
  1569                           
  1570                           	psect	intcode_body
  1571  00102E                     __pintcode_body:
  1572                           	opt stack 24
  1573  00102E                     int_func:
  1574                           	opt stack 24
  1575  00102E  0006               	pop		; remove dummy address from shadow register refresh
  1576  001030  CFFA F01A          	movff	pclath,??_interruptHandler+1
  1577  001034  CFFB F01B          	movff	pclatu,??_interruptHandler+2
  1578  001038  CFE9 F01C          	movff	fsr0l,??_interruptHandler+3
  1579  00103C  CFEA F01D          	movff	fsr0h,??_interruptHandler+4
  1580  001040  CFE1 F01E          	movff	fsr1l,??_interruptHandler+5
  1581  001044  CFE2 F01F          	movff	fsr1h,??_interruptHandler+6
  1582  001048  CFD9 F020          	movff	fsr2l,??_interruptHandler+7
  1583  00104C  CFDA F021          	movff	fsr2h,??_interruptHandler+8
  1584  001050  CFF3 F022          	movff	prodl,??_interruptHandler+9
  1585  001054  CFF4 F023          	movff	prodh,??_interruptHandler+10
  1586  001058  CFF6 F024          	movff	tblptrl,??_interruptHandler+11
  1587  00105C  CFF7 F025          	movff	tblptrh,??_interruptHandler+12
  1588  001060  CFF8 F026          	movff	tblptru,??_interruptHandler+13
  1589  001064  CFF5 F027          	movff	tablat,??_interruptHandler+14
  1590  001068  C04A  F028         	movff	btemp,??_interruptHandler+15
  1591  00106C  C04B  F029         	movff	btemp+1,??_interruptHandler+16
  1592  001070  C04C  F02A         	movff	btemp+2,??_interruptHandler+17
  1593  001074  C04D  F02B         	movff	btemp+3,??_interruptHandler+18
  1594                           
  1595                           ;main.c: 130: if(INT1IF){
  1596  001078  A0F0               	btfss	intcon3,0,c	;volatile
  1597  00107A  D01F               	goto	i2l92
  1598                           
  1599                           ;main.c: 134: lcdInst(0xC0);;
  1600  00107C  0EC0               	movlw	192
  1601  00107E  ECC3  F00B         	call	i2_lcdInst
  1602                           
  1603                           ;main.c: 135: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1604  001082  3881               	swapf	3969,w,c	;volatile
  1605  001084  0B0F               	andlw	15
  1606  001086  0B0F               	andlw	15
  1607  001088  6E2C               	movwf	interruptHandler@keypress,c
  1608                           
  1609                           ;main.c: 136: putch(keys[keypress]);
  1610  00108A  502C               	movf	interruptHandler@keypress,w,c
  1611  00108C  0D01               	mullw	1
  1612  00108E  0E01               	movlw	low _keys
  1613  001090  24F3               	addwf	prodl,w,c
  1614  001092  6EF6               	movwf	tblptrl,c
  1615  001094  0E10               	movlw	high _keys
  1616  001096  20F4               	addwfc	prodh,w,c
  1617  001098  6EF7               	movwf	tblptrh,c
  1618  00109A                     	if	0	;There are less than 3 active tblptr bytes
  1619  00109A                     	endif
  1620  00109A  0008               	tblrd		*
  1621  00109C  50F5               	movf	tablat,w,c
  1622  00109E  ECB9  F00B         	call	i2_putch
  1623                           
  1624                           ;main.c: 137: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1625  0010A2  0E80               	movlw	128
  1626  0010A4  ECC3  F00B         	call	i2_lcdInst
  1627  0010A8  0E41               	movlw	65
  1628  0010AA  6E19               	movwf	??_interruptHandler& (0+255),c
  1629  0010AC  0EEE               	movlw	238
  1630  0010AE                     i2u90_47:
  1631  0010AE  2EE8               	decfsz	wreg,f,c
  1632  0010B0  D7FE               	bra	i2u90_47
  1633  0010B2  2E19               	decfsz	??_interruptHandler& (0+255),f,c
  1634  0010B4  D7FC               	bra	i2u90_47
  1635  0010B6  D000               	nop2	
  1636                           
  1637                           ;main.c: 139: INT1IF = 0;
  1638  0010B8  90F0               	bcf	intcon3,0,c	;volatile
  1639  0010BA                     i2l92:
  1640                           
  1641                           ;main.c: 140: }
  1642                           ;main.c: 142: if (RBIF){
  1643  0010BA  A0F2               	btfss	intcon,0,c	;volatile
  1644  0010BC  D024               	goto	i2l93
  1645                           
  1646                           ;main.c: 143: initLCD();
  1647  0010BE  ECFE  F00A         	call	i2_initLCD	;wreg free
  1648                           
  1649                           ;main.c: 144: printf("W_count:%d",W_count);
  1650  0010C2  0E22               	movlw	low STR_3
  1651  0010C4  6E0D               	movwf	i2printf@f,c
  1652  0010C6  0E10               	movlw	high STR_3
  1653  0010C8  6E0E               	movwf	i2printf@f+1,c
  1654  0010CA  C046  F00F         	movff	_W_count,?i2_printf+2
  1655  0010CE  C047  F010         	movff	_W_count+1,?i2_printf+3
  1656  0010D2  EC38  F009         	call	i2_printf	;wreg free
  1657                           
  1658                           ;main.c: 147: if (readADC(11)<= 300){
  1659  0010D6  0E0B               	movlw	11
  1660  0010D8  EC80  F00B         	call	i2_readADC
  1661  0010DC  0E2D               	movlw	45
  1662  0010DE  5C01               	subwf	?i2_readADC,w,c
  1663  0010E0  0E01               	movlw	1
  1664  0010E2  5802               	subwfb	?i2_readADC+1,w,c
  1665  0010E4  B0D8               	btfsc	status,0,c
  1666  0010E6  D00E               	goto	i2l94
  1667                           
  1668                           ;main.c: 148: W_count++;
  1669  0010E8  4A46               	infsnz	_W_count,f,c
  1670  0010EA  2A47               	incf	_W_count+1,f,c
  1671                           
  1672                           ;main.c: 149: initLCD();
  1673  0010EC  ECFE  F00A         	call	i2_initLCD	;wreg free
  1674                           
  1675                           ;main.c: 151: printf("W_count:%d",W_count);
  1676  0010F0  0E22               	movlw	low STR_3
  1677  0010F2  6E0D               	movwf	i2printf@f,c
  1678  0010F4  0E10               	movlw	high STR_3
  1679  0010F6  6E0E               	movwf	i2printf@f+1,c
  1680  0010F8  C046  F00F         	movff	_W_count,?i2_printf+2
  1681  0010FC  C047  F010         	movff	_W_count+1,?i2_printf+3
  1682  001100  EC38  F009         	call	i2_printf	;wreg free
  1683  001104                     i2l94:
  1684                           
  1685                           ;main.c: 154: }
  1686                           ;main.c: 155: RBIF = 0;
  1687  001104  90F2               	bcf	intcon,0,c	;volatile
  1688  001106                     i2l93:
  1689  001106  C02B  F04D         	movff	??_interruptHandler+18,btemp+3
  1690  00110A  C02A  F04C         	movff	??_interruptHandler+17,btemp+2
  1691  00110E  C029  F04B         	movff	??_interruptHandler+16,btemp+1
  1692  001112  C028  F04A         	movff	??_interruptHandler+15,btemp
  1693  001116  C027  FFF5         	movff	??_interruptHandler+14,tablat
  1694  00111A  C026  FFF8         	movff	??_interruptHandler+13,tblptru
  1695  00111E  C025  FFF7         	movff	??_interruptHandler+12,tblptrh
  1696  001122  C024  FFF6         	movff	??_interruptHandler+11,tblptrl
  1697  001126  C023  FFF4         	movff	??_interruptHandler+10,prodh
  1698  00112A  C022  FFF3         	movff	??_interruptHandler+9,prodl
  1699  00112E  C021  FFDA         	movff	??_interruptHandler+8,fsr2h
  1700  001132  C020  FFD9         	movff	??_interruptHandler+7,fsr2l
  1701  001136  C01F  FFE2         	movff	??_interruptHandler+6,fsr1h
  1702  00113A  C01E  FFE1         	movff	??_interruptHandler+5,fsr1l
  1703  00113E  C01D  FFEA         	movff	??_interruptHandler+4,fsr0h
  1704  001142  C01C  FFE9         	movff	??_interruptHandler+3,fsr0l
  1705  001146  C01B  FFFB         	movff	??_interruptHandler+2,pclatu
  1706  00114A  C01A  FFFA         	movff	??_interruptHandler+1,pclath
  1707  00114E  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1708  001150  0011               	retfie		f
  1709  001152                     __end_of_interruptHandler:
  1710                           	opt stack 0
  1711                           pclatu	equ	0xFFB
  1712                           pclath	equ	0xFFA
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           intcon	equ	0xFF2
  1720                           intcon3	equ	0xFF0
  1721                           fsr0h	equ	0xFEA
  1722                           fsr0l	equ	0xFE9
  1723                           wreg	equ	0xFE8
  1724                           fsr1h	equ	0xFE2
  1725                           fsr1l	equ	0xFE1
  1726                           postinc2	equ	0xFDE
  1727                           postdec2	equ	0xFDD
  1728                           fsr2h	equ	0xFDA
  1729                           fsr2l	equ	0xFD9
  1730                           status	equ	0xFD8
  1731                           
  1732 ;; *************** function i2_readADC *****************
  1733 ;; Defined at:
  1734 ;;		line 162 in file "main.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;  channel         1    wreg     unsigned char 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  channel         1    4[COMRAM] unsigned char 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  2    0[COMRAM] unsigned short 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2, status,0
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1748 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;Total ram usage:        5 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_interruptHandler
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text10
  1762  001700                     __ptext10:
  1763                           	opt stack 0
  1764  001700                     i2_readADC:
  1765                           	opt stack 26
  1766                           
  1767                           ;incstack = 0
  1768                           ;i2readADC@channel stored from wreg
  1769  001700  6E05               	movwf	i2readADC@channel,c
  1770                           
  1771                           ;main.c: 171: ADCON0 = (channel & 0x0F) << 2;
  1772  001702  C005  F003         	movff	i2readADC@channel,??i2_readADC
  1773  001706  0E0F               	movlw	15
  1774  001708  1603               	andwf	??i2_readADC,f,c
  1775  00170A  90D8               	bcf	status,0,c
  1776  00170C  3603               	rlcf	??i2_readADC,f,c
  1777  00170E  90D8               	bcf	status,0,c
  1778  001710  3403               	rlcf	??i2_readADC,w,c
  1779  001712  6EC2               	movwf	4034,c	;volatile
  1780                           
  1781                           ;main.c: 172: ADON = 1;
  1782  001714  80C2               	bsf	4034,0,c	;volatile
  1783                           
  1784                           ;main.c: 173: ADCON0bits.GO = 1;
  1785  001716  82C2               	bsf	4034,1,c	;volatile
  1786  001718  B2C2               	btfsc	4034,1,c	;volatile
  1787  00171A  D7FE               	goto	i2l99
  1788                           
  1789                           ;main.c: 175: return (ADRESH << 8) | ADRESL;
  1790  00171C  50C3               	movf	4035,w,c	;volatile
  1791  00171E  CFC4 F003          	movff	4036,??i2_readADC	;volatile
  1792  001722  6A04               	clrf	(??i2_readADC+1)& (0+255),c
  1793  001724  C003  F004         	movff	??i2_readADC,??i2_readADC+1
  1794  001728  6A03               	clrf	??i2_readADC,c
  1795  00172A  1003               	iorwf	??i2_readADC,w,c
  1796  00172C  6E01               	movwf	?i2_readADC,c
  1797  00172E  5004               	movf	??i2_readADC+1,w,c
  1798  001730  6E02               	movwf	?i2_readADC+1,c
  1799  001732  0012               	return	
  1800  001734                     __end_ofi2_readADC:
  1801                           	opt stack 0
  1802                           pclatu	equ	0xFFB
  1803                           pclath	equ	0xFFA
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           prodh	equ	0xFF4
  1809                           prodl	equ	0xFF3
  1810                           intcon	equ	0xFF2
  1811                           intcon3	equ	0xFF0
  1812                           fsr0h	equ	0xFEA
  1813                           fsr0l	equ	0xFE9
  1814                           wreg	equ	0xFE8
  1815                           fsr1h	equ	0xFE2
  1816                           fsr1l	equ	0xFE1
  1817                           postinc2	equ	0xFDE
  1818                           postdec2	equ	0xFDD
  1819                           fsr2h	equ	0xFDA
  1820                           fsr2l	equ	0xFD9
  1821                           status	equ	0xFD8
  1822                           
  1823 ;; *************** function i2_printf *****************
  1824 ;; Defined at:
  1825 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1828 ;;		 -> STR_4(11), STR_3(11), STR_2(3), STR_1(3), 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  printf          4    0        struct .
  1831 ;;  printf          3    0        PTR const unsigned char 
  1832 ;;  printf          2   21[COMRAM] unsigned int 
  1833 ;;  printf          2   17[COMRAM] PTR void [1]
  1834 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1835 ;;  printf          2    0        unsigned int 
  1836 ;;  printf          1   23[COMRAM] char 
  1837 ;;  printf          1   20[COMRAM] char 
  1838 ;;  printf          1   19[COMRAM] unsigned char 
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  2   12[COMRAM] int 
  1841 ;; Registers used:
  1842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;Total ram usage:       12 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    2
  1855 ;; This function calls:
  1856 ;;		i2___lwdiv
  1857 ;;		i2___lwmod
  1858 ;;		i2_putch
  1859 ;; This function is called by:
  1860 ;;		_interruptHandler
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text11
  1865  001270                     __ptext11:
  1866                           	opt stack 0
  1867  001270                     i2_printf:
  1868                           	opt stack 24
  1869                           
  1870                           ;doprnt.c: 466: va_list ap;
  1871                           ;doprnt.c: 499: signed char c;
  1872                           ;doprnt.c: 506: signed char prec;
  1873                           ;doprnt.c: 508: unsigned char flag;
  1874                           ;doprnt.c: 523: union {
  1875                           ;doprnt.c: 524: unsigned long vd;
  1876                           ;doprnt.c: 525: double integ;
  1877                           ;doprnt.c: 526: } tmpval;
  1878                           ;doprnt.c: 528: unsigned int val;
  1879                           ;doprnt.c: 529: unsigned len;
  1880                           ;doprnt.c: 530: const char * cp;
  1881                           ;doprnt.c: 533: *ap = __va_start();
  1882                           
  1883                           ;incstack = 0
  1884  001270  0E0F               	movlw	low (?i2_printf+2)
  1885  001272  6E12               	movwf	i2printf@ap,c
  1886  001274  0E00               	movlw	high (?i2_printf+2)
  1887  001276  6E13               	movwf	i2printf@ap+1,c
  1888                           
  1889                           ;doprnt.c: 536: while(c = *f++) {
  1890  001278  D07D               	goto	i2u75_40
  1891  00127A                     
  1892                           ;doprnt.c: 538: if(c != '%')
  1893  00127A  0E25               	movlw	37
  1894  00127C  1818               	xorwf	i2printf@c,w,c
  1895  00127E  B4D8               	btfsc	status,2,c
  1896  001280  D004               	goto	i2l169
  1897                           
  1898                           ;doprnt.c: 540: {
  1899                           ;doprnt.c: 541: (putch(c) );
  1900  001282  5018               	movf	i2printf@c,w,c
  1901  001284  ECB9  F00B         	call	i2_putch
  1902                           
  1903                           ;doprnt.c: 542: continue;
  1904  001288  D075               	goto	i2u75_40
  1905  00128A                     i2l169:
  1906                           
  1907                           ;doprnt.c: 543: }
  1908                           ;doprnt.c: 548: flag = 0;
  1909  00128A  0E00               	movlw	0
  1910  00128C  6E14               	movwf	i2printf@flag,c
  1911                           
  1912                           ;doprnt.c: 822: }
  1913                           
  1914                           ;doprnt.c: 813: continue;
  1915                           
  1916                           ;doprnt.c: 802: default:
  1917                           
  1918                           ;doprnt.c: 698: case 'i':
  1919                           ;doprnt.c: 699: break;
  1920                           
  1921                           ;doprnt.c: 697: case 'd':
  1922                           
  1923                           ;doprnt.c: 638: goto alldone;
  1924                           
  1925                           ;doprnt.c: 637: case 0:
  1926                           
  1927                           ;doprnt.c: 635: switch(c = *f++) {
  1928  00128E  C00D  FFF6         	movff	i2printf@f,tblptrl
  1929  001292  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  1930  001296  4A0D               	infsnz	i2printf@f,f,c
  1931  001298  2A0E               	incf	i2printf@f+1,f,c
  1932  00129A                     	if	0	;tblptru may be non-zero
  1933  00129A                     	endif
  1934  00129A                     	if	0	;tblptru may be non-zero
  1935  00129A                     	endif
  1936  00129A  0008               	tblrd		*
  1937  00129C  CFF5 F018          	movff	tablat,i2printf@c
  1938  0012A0  5018               	movf	i2printf@c,w,c
  1939                           
  1940                           ; Switch size 1, requested type "space"
  1941                           ; Number of cases is 3, Range of values is 0 to 105
  1942                           ; switch strategies available:
  1943                           ; Name         Instructions Cycles
  1944                           ; simple_byte           10     6 (average)
  1945                           ;	Chosen strategy is simple_byte
  1946  0012A2  0A00               	xorlw	0	; case 0
  1947  0012A4  B4D8               	btfsc	status,2,c
  1948  0012A6  0012               	return	
  1949  0012A8  0A64               	xorlw	100	; case 100
  1950  0012AA  B4D8               	btfsc	status,2,c
  1951  0012AC  D003               	goto	i2l175
  1952  0012AE  0A0D               	xorlw	13	; case 105
  1953  0012B0  A4D8               	btfss	status,2,c
  1954  0012B2  D060               	goto	i2u75_40
  1955  0012B4                     i2l175:
  1956                           
  1957                           ;doprnt.c: 1253: {
  1958                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1959  0012B4  C012  FFD9         	movff	i2printf@ap,fsr2l
  1960  0012B8  C013  FFDA         	movff	i2printf@ap+1,fsr2h
  1961  0012BC  CFDE F016          	movff	postinc2,i2printf@val
  1962  0012C0  CFDD F017          	movff	postdec2,i2printf@val+1
  1963  0012C4  0E02               	movlw	2
  1964  0012C6  2612               	addwf	i2printf@ap,f,c
  1965  0012C8  0E00               	movlw	0
  1966  0012CA  2213               	addwfc	i2printf@ap+1,f,c
  1967                           
  1968                           ;doprnt.c: 1261: if((int)val < 0) {
  1969  0012CC  AE17               	btfss	i2printf@val+1,7,c
  1970  0012CE  D006               	goto	i2l177
  1971                           
  1972                           ;doprnt.c: 1262: flag |= 0x03;
  1973  0012D0  0E03               	movlw	3
  1974  0012D2  1214               	iorwf	i2printf@flag,f,c
  1975                           
  1976                           ;doprnt.c: 1263: val = -val;
  1977  0012D4  6C16               	negf	i2printf@val,c
  1978  0012D6  1E17               	comf	i2printf@val+1,f,c
  1979  0012D8  B0D8               	btfsc	status,0,c
  1980  0012DA  2A17               	incf	i2printf@val+1,f,c
  1981  0012DC                     i2l177:
  1982                           
  1983                           ;doprnt.c: 1264: }
  1984                           ;doprnt.c: 1266: }
  1985                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1986  0012DC  0E01               	movlw	1
  1987  0012DE  6E18               	movwf	i2printf@c,c
  1988  0012E0                     i2l1476:
  1989  0012E0  0E05               	movlw	5
  1990  0012E2  1818               	xorwf	i2printf@c,w,c
  1991  0012E4  B4D8               	btfsc	status,2,c
  1992  0012E6  D012               	goto	i2u73_40
  1993                           
  1994                           ;doprnt.c: 1306: if(val < dpowers[c])
  1995  0012E8  5018               	movf	i2printf@c,w,c
  1996  0012EA  0D02               	mullw	2
  1997  0012EC  0E12               	movlw	low _dpowers
  1998  0012EE  24F3               	addwf	prodl,w,c
  1999  0012F0  6EF6               	movwf	tblptrl,c
  2000  0012F2  0E10               	movlw	high _dpowers
  2001  0012F4  20F4               	addwfc	prodh,w,c
  2002  0012F6  6EF7               	movwf	tblptrh,c
  2003  0012F8                     	if	0	;There are less than 3 active tblptr bytes
  2004  0012F8                     	endif
  2005  0012F8  0009               	tblrd		*+
  2006  0012FA  50F5               	movf	tablat,w,c
  2007  0012FC  5C16               	subwf	i2printf@val,w,c
  2008  0012FE  0009               	tblrd		*+
  2009  001300  50F5               	movf	tablat,w,c
  2010  001302  5817               	subwfb	i2printf@val+1,w,c
  2011  001304  A0D8               	btfss	status,0,c
  2012  001306  D002               	goto	i2u73_40
  2013                           
  2014                           ;doprnt.c: 1307: break;
  2015  001308  2A18               	incf	i2printf@c,f,c
  2016  00130A  D7EA               	goto	i2l1476
  2017  00130C                     i2u73_40:
  2018                           
  2019                           ;doprnt.c: 1422: {
  2020                           ;doprnt.c: 1438: if(flag & 0x03)
  2021  00130C  C014  F011         	movff	i2printf@flag,??i2_printf
  2022  001310  0E03               	movlw	3
  2023  001312  1611               	andwf	??i2_printf,f,c
  2024  001314  B4D8               	btfsc	status,2,c
  2025  001316  D003               	goto	i2l181
  2026                           
  2027                           ;doprnt.c: 1439: (putch('-') );
  2028  001318  0E2D               	movlw	45
  2029  00131A  ECB9  F00B         	call	i2_putch
  2030  00131E                     i2l181:
  2031                           
  2032                           ;doprnt.c: 1469: }
  2033                           ;doprnt.c: 1472: prec = c;
  2034  00131E  C018  F015         	movff	i2printf@c,i2printf@prec
  2035                           
  2036                           ;doprnt.c: 1474: while(prec--) {
  2037  001322  D024               	goto	i2l182
  2038  001324                     
  2039                           ;doprnt.c: 1478: {
  2040                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2041  001324  5015               	movf	i2printf@prec,w,c
  2042  001326  0D02               	mullw	2
  2043  001328  0E12               	movlw	low _dpowers
  2044  00132A  24F3               	addwf	prodl,w,c
  2045  00132C  6EF6               	movwf	tblptrl,c
  2046  00132E  0E10               	movlw	high _dpowers
  2047  001330  20F4               	addwfc	prodh,w,c
  2048  001332  6EF7               	movwf	tblptrh,c
  2049  001334                     	if	0	;There are less than 3 active tblptr bytes
  2050  001334                     	endif
  2051  001334  0009               	tblrd		*+
  2052  001336  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2053  00133A  000A               	tblrd		*-
  2054  00133C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2055  001340  C016  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2056  001344  C017  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2057  001348  ECAF  F00A         	call	i2___lwdiv	;wreg free
  2058  00134C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2059  001350  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2060  001354  0E00               	movlw	0
  2061  001356  6E0B               	movwf	i2___lwmod@divisor+1,c
  2062  001358  0E0A               	movlw	10
  2063  00135A  6E0A               	movwf	i2___lwmod@divisor,c
  2064  00135C  EC45  F00B         	call	i2___lwmod	;wreg free
  2065  001360  5008               	movf	?i2___lwmod,w,c
  2066  001362  0F30               	addlw	48
  2067  001364  6E18               	movwf	i2printf@c,c
  2068                           
  2069                           ;doprnt.c: 1523: }
  2070                           ;doprnt.c: 1524: (putch(c) );
  2071  001366  5018               	movf	i2printf@c,w,c
  2072  001368  ECB9  F00B         	call	i2_putch
  2073  00136C                     i2l182:
  2074  00136C  0615               	decf	i2printf@prec,f,c
  2075  00136E  2815               	incf	i2printf@prec,w,c
  2076  001370  A4D8               	btfss	status,2,c
  2077  001372  D7D8               	goto	i2l183
  2078  001374                     i2u75_40:
  2079  001374  C00D  FFF6         	movff	i2printf@f,tblptrl
  2080  001378  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2081  00137C  4A0D               	infsnz	i2printf@f,f,c
  2082  00137E  2A0E               	incf	i2printf@f+1,f,c
  2083  001380                     	if	0	;tblptru may be non-zero
  2084  001380                     	endif
  2085  001380                     	if	0	;tblptru may be non-zero
  2086  001380                     	endif
  2087  001380  0008               	tblrd		*
  2088  001382  CFF5 F018          	movff	tablat,i2printf@c
  2089  001386  5018               	movf	i2printf@c,w,c
  2090  001388  B4D8               	btfsc	status,2,c
  2091  00138A  0012               	return	
  2092  00138C  D776               	goto	i2l168
  2093  00138E                     __end_ofi2_printf:
  2094                           	opt stack 0
  2095                           pclatu	equ	0xFFB
  2096                           pclath	equ	0xFFA
  2097                           tblptru	equ	0xFF8
  2098                           tblptrh	equ	0xFF7
  2099                           tblptrl	equ	0xFF6
  2100                           tablat	equ	0xFF5
  2101                           prodh	equ	0xFF4
  2102                           prodl	equ	0xFF3
  2103                           intcon	equ	0xFF2
  2104                           intcon3	equ	0xFF0
  2105                           fsr0h	equ	0xFEA
  2106                           fsr0l	equ	0xFE9
  2107                           wreg	equ	0xFE8
  2108                           fsr1h	equ	0xFE2
  2109                           fsr1l	equ	0xFE1
  2110                           postinc2	equ	0xFDE
  2111                           postdec2	equ	0xFDD
  2112                           fsr2h	equ	0xFDA
  2113                           fsr2l	equ	0xFD9
  2114                           status	equ	0xFD8
  2115                           
  2116 ;; *************** function i2_putch *****************
  2117 ;; Defined at:
  2118 ;;		line 24 in file "lcd.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  data            1    wreg     unsigned char 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  data            1    2[COMRAM] unsigned char 
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  1    wreg      void 
  2125 ;; Registers used:
  2126 ;;		wreg, status,2, status,0, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;Total ram usage:        1 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    1
  2139 ;; This function calls:
  2140 ;;		i2_lcdNibble
  2141 ;; This function is called by:
  2142 ;;		_interruptHandler
  2143 ;;		i2_printf
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text12
  2148  001772                     __ptext12:
  2149                           	opt stack 0
  2150  001772                     i2_putch:
  2151                           	opt stack 25
  2152                           
  2153                           ;incstack = 0
  2154                           ;i2putch@data stored from wreg
  2155  001772  6E03               	movwf	i2putch@data,c
  2156                           
  2157                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2158  001774  848C               	bsf	3980,2,c	;volatile
  2159                           
  2160                           ;lcd.c: 33: lcdNibble(data);
  2161  001776  5003               	movf	i2putch@data,w,c
  2162  001778  EC47  F00A         	call	i2_lcdNibble
  2163                           
  2164                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2165  00177C  0EC8               	movlw	200
  2166  00177E                     i2u91_47:
  2167  00177E  D000               	nop2	
  2168  001780  2EE8               	decfsz	wreg,f,c
  2169  001782  D7FD               	bra	i2u91_47
  2170  001784  0012               	return		;funcret
  2171  001786                     __end_ofi2_putch:
  2172                           	opt stack 0
  2173                           pclatu	equ	0xFFB
  2174                           pclath	equ	0xFFA
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           intcon3	equ	0xFF0
  2183                           fsr0h	equ	0xFEA
  2184                           fsr0l	equ	0xFE9
  2185                           wreg	equ	0xFE8
  2186                           fsr1h	equ	0xFE2
  2187                           fsr1l	equ	0xFE1
  2188                           postinc2	equ	0xFDE
  2189                           postdec2	equ	0xFDD
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function i2___lwmod *****************
  2195 ;; Defined at:
  2196 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  dividend        2    7[COMRAM] unsigned int 
  2199 ;;  divisor         2    9[COMRAM] unsigned int 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  __lwmod         1   11[COMRAM] unsigned char 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  2    7[COMRAM] unsigned int 
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2211 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;Total ram usage:        5 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; This function calls:
  2218 ;;		Nothing
  2219 ;; This function is called by:
  2220 ;;		i2_printf
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text13
  2225  00168A                     __ptext13:
  2226                           	opt stack 0
  2227  00168A                     i2___lwmod:
  2228                           	opt stack 25
  2229                           
  2230                           ;incstack = 0
  2231  00168A  500A               	movf	i2___lwmod@divisor,w,c
  2232  00168C  100B               	iorwf	i2___lwmod@divisor+1,w,c
  2233  00168E  B4D8               	btfsc	status,2,c
  2234  001690  D018               	goto	i2l605
  2235  001692  0E01               	movlw	1
  2236  001694  6E0C               	movwf	i2___lwmod@counter,c
  2237  001696  D004               	goto	i2l600
  2238  001698  90D8               	bcf	status,0,c
  2239  00169A  360A               	rlcf	i2___lwmod@divisor,f,c
  2240  00169C  360B               	rlcf	i2___lwmod@divisor+1,f,c
  2241  00169E  2A0C               	incf	i2___lwmod@counter,f,c
  2242  0016A0                     i2l600:
  2243  0016A0  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  2244  0016A2  D7FA               	goto	i2l601
  2245  0016A4                     i2u57_40:
  2246  0016A4  500A               	movf	i2___lwmod@divisor,w,c
  2247  0016A6  5C08               	subwf	i2___lwmod@dividend,w,c
  2248  0016A8  500B               	movf	i2___lwmod@divisor+1,w,c
  2249  0016AA  5809               	subwfb	i2___lwmod@dividend+1,w,c
  2250  0016AC  A0D8               	btfss	status,0,c
  2251  0016AE  D004               	goto	i2l604
  2252  0016B0  500A               	movf	i2___lwmod@divisor,w,c
  2253  0016B2  5E08               	subwf	i2___lwmod@dividend,f,c
  2254  0016B4  500B               	movf	i2___lwmod@divisor+1,w,c
  2255  0016B6  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  2256  0016B8                     i2l604:
  2257  0016B8  90D8               	bcf	status,0,c
  2258  0016BA  320B               	rrcf	i2___lwmod@divisor+1,f,c
  2259  0016BC  320A               	rrcf	i2___lwmod@divisor,f,c
  2260  0016BE  2E0C               	decfsz	i2___lwmod@counter,f,c
  2261  0016C0  D7F1               	goto	i2u57_40
  2262  0016C2                     i2l605:
  2263  0016C2  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  2264  0016C6  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  2265  0016CA  0012               	return		;funcret
  2266  0016CC                     __end_ofi2___lwmod:
  2267                           	opt stack 0
  2268                           pclatu	equ	0xFFB
  2269                           pclath	equ	0xFFA
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           intcon	equ	0xFF2
  2277                           intcon3	equ	0xFF0
  2278                           fsr0h	equ	0xFEA
  2279                           fsr0l	equ	0xFE9
  2280                           wreg	equ	0xFE8
  2281                           fsr1h	equ	0xFE2
  2282                           fsr1l	equ	0xFE1
  2283                           postinc2	equ	0xFDE
  2284                           postdec2	equ	0xFDD
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function i2___lwdiv *****************
  2290 ;; Defined at:
  2291 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  dividend        2    0[COMRAM] unsigned int 
  2294 ;;  divisor         2    2[COMRAM] unsigned int 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  2297 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  2    0[COMRAM] unsigned int 
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2307 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;Total ram usage:        7 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		i2_printf
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text14
  2321  00155E                     __ptext14:
  2322                           	opt stack 0
  2323  00155E                     i2___lwdiv:
  2324                           	opt stack 25
  2325                           
  2326                           ;incstack = 0
  2327  00155E  0E00               	movlw	0
  2328  001560  6E06               	movwf	i2___lwdiv@quotient+1,c
  2329  001562  0E00               	movlw	0
  2330  001564  6E05               	movwf	i2___lwdiv@quotient,c
  2331  001566  5003               	movf	i2___lwdiv@divisor,w,c
  2332  001568  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  2333  00156A  B4D8               	btfsc	status,2,c
  2334  00156C  D01C               	goto	i2l595
  2335  00156E  0E01               	movlw	1
  2336  001570  6E07               	movwf	i2___lwdiv@counter,c
  2337  001572  D004               	goto	i2l590
  2338  001574  90D8               	bcf	status,0,c
  2339  001576  3603               	rlcf	i2___lwdiv@divisor,f,c
  2340  001578  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  2341  00157A  2A07               	incf	i2___lwdiv@counter,f,c
  2342  00157C                     i2l590:
  2343  00157C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  2344  00157E  D7FA               	goto	i2l591
  2345  001580                     i2u54_40:
  2346  001580  90D8               	bcf	status,0,c
  2347  001582  3605               	rlcf	i2___lwdiv@quotient,f,c
  2348  001584  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  2349  001586  5003               	movf	i2___lwdiv@divisor,w,c
  2350  001588  5C01               	subwf	i2___lwdiv@dividend,w,c
  2351  00158A  5004               	movf	i2___lwdiv@divisor+1,w,c
  2352  00158C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  2353  00158E  A0D8               	btfss	status,0,c
  2354  001590  D005               	goto	i2l594
  2355  001592  5003               	movf	i2___lwdiv@divisor,w,c
  2356  001594  5E01               	subwf	i2___lwdiv@dividend,f,c
  2357  001596  5004               	movf	i2___lwdiv@divisor+1,w,c
  2358  001598  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  2359  00159A  8005               	bsf	i2___lwdiv@quotient,0,c
  2360  00159C                     i2l594:
  2361  00159C  90D8               	bcf	status,0,c
  2362  00159E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  2363  0015A0  3203               	rrcf	i2___lwdiv@divisor,f,c
  2364  0015A2  2E07               	decfsz	i2___lwdiv@counter,f,c
  2365  0015A4  D7ED               	goto	i2u54_40
  2366  0015A6                     i2l595:
  2367  0015A6  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  2368  0015AA  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  2369  0015AE  0012               	return		;funcret
  2370  0015B0                     __end_ofi2___lwdiv:
  2371                           	opt stack 0
  2372                           pclatu	equ	0xFFB
  2373                           pclath	equ	0xFFA
  2374                           tblptru	equ	0xFF8
  2375                           tblptrh	equ	0xFF7
  2376                           tblptrl	equ	0xFF6
  2377                           tablat	equ	0xFF5
  2378                           prodh	equ	0xFF4
  2379                           prodl	equ	0xFF3
  2380                           intcon	equ	0xFF2
  2381                           intcon3	equ	0xFF0
  2382                           fsr0h	equ	0xFEA
  2383                           fsr0l	equ	0xFE9
  2384                           wreg	equ	0xFE8
  2385                           fsr1h	equ	0xFE2
  2386                           fsr1l	equ	0xFE1
  2387                           postinc2	equ	0xFDE
  2388                           postdec2	equ	0xFDD
  2389                           fsr2h	equ	0xFDA
  2390                           fsr2l	equ	0xFD9
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function i2_initLCD *****************
  2394 ;; Defined at:
  2395 ;;		line 60 in file "lcd.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, status,2, status,0, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;Total ram usage:        1 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    2
  2416 ;; This function calls:
  2417 ;;		i2_lcdInst
  2418 ;; This function is called by:
  2419 ;;		_interruptHandler
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text15
  2424  0015FC                     __ptext15:
  2425                           	opt stack 0
  2426  0015FC                     i2_initLCD:
  2427                           	opt stack 24
  2428                           
  2429                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  2430                           
  2431                           ;incstack = 0
  2432  0015FC  0EC3               	movlw	195
  2433  0015FE  6E04               	movwf	??i2_initLCD& (0+255),c
  2434  001600  0ECD               	movlw	205
  2435  001602                     i2u92_47:
  2436  001602  2EE8               	decfsz	wreg,f,c
  2437  001604  D7FE               	bra	i2u92_47
  2438  001606  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2439  001608  D7FC               	bra	i2u92_47
  2440  00160A  F000               	nop	
  2441                           
  2442                           ;lcd.c: 69: lcdInst(0b00110011);
  2443  00160C  0E33               	movlw	51
  2444  00160E  ECC3  F00B         	call	i2_lcdInst
  2445                           
  2446                           ;lcd.c: 70: lcdInst(0b00110010);
  2447  001612  0E32               	movlw	50
  2448  001614  ECC3  F00B         	call	i2_lcdInst
  2449                           
  2450                           ;lcd.c: 71: lcdInst(0b00101000);
  2451  001618  0E28               	movlw	40
  2452  00161A  ECC3  F00B         	call	i2_lcdInst
  2453                           
  2454                           ;lcd.c: 72: lcdInst(0b00001111);
  2455  00161E  0E0F               	movlw	15
  2456  001620  ECC3  F00B         	call	i2_lcdInst
  2457                           
  2458                           ;lcd.c: 73: lcdInst(0b00000110);
  2459  001624  0E06               	movlw	6
  2460  001626  ECC3  F00B         	call	i2_lcdInst
  2461                           
  2462                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2463  00162A  0E01               	movlw	1
  2464  00162C  ECC3  F00B         	call	i2_lcdInst
  2465  001630  0EC3               	movlw	195
  2466  001632  6E04               	movwf	??i2_initLCD& (0+255),c
  2467  001634  0ECD               	movlw	205
  2468  001636                     i2u93_47:
  2469  001636  2EE8               	decfsz	wreg,f,c
  2470  001638  D7FE               	bra	i2u93_47
  2471  00163A  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  2472  00163C  D7FC               	bra	i2u93_47
  2473  00163E  F000               	nop	
  2474                           
  2475                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2476  001640  0E0F               	movlw	15
  2477  001642  ECC3  F00B         	call	i2_lcdInst
  2478  001646  0012               	return		;funcret
  2479  001648                     __end_ofi2_initLCD:
  2480                           	opt stack 0
  2481                           pclatu	equ	0xFFB
  2482                           pclath	equ	0xFFA
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           intcon	equ	0xFF2
  2490                           intcon3	equ	0xFF0
  2491                           fsr0h	equ	0xFEA
  2492                           fsr0l	equ	0xFE9
  2493                           wreg	equ	0xFE8
  2494                           fsr1h	equ	0xFE2
  2495                           fsr1l	equ	0xFE1
  2496                           postinc2	equ	0xFDE
  2497                           postdec2	equ	0xFDD
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function i2_lcdInst *****************
  2503 ;; Defined at:
  2504 ;;		line 11 in file "lcd.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  data            1    wreg     unsigned char 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  data            1    2[COMRAM] unsigned char 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;Total ram usage:        1 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    1
  2525 ;; This function calls:
  2526 ;;		i2_lcdNibble
  2527 ;; This function is called by:
  2528 ;;		_interruptHandler
  2529 ;;		i2_initLCD
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text16
  2534  001786                     __ptext16:
  2535                           	opt stack 0
  2536  001786                     i2_lcdInst:
  2537                           	opt stack 25
  2538                           
  2539                           ;incstack = 0
  2540                           ;i2lcdInst@data stored from wreg
  2541  001786  6E03               	movwf	i2lcdInst@data,c
  2542                           
  2543                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2544  001788  948C               	bcf	3980,2,c	;volatile
  2545                           
  2546                           ;lcd.c: 20: lcdNibble(data);
  2547  00178A  5003               	movf	i2lcdInst@data,w,c
  2548  00178C  EC47  F00A         	call	i2_lcdNibble
  2549                           
  2550                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2551  001790  0EC8               	movlw	200
  2552  001792                     i2u94_47:
  2553  001792  D000               	nop2	
  2554  001794  2EE8               	decfsz	wreg,f,c
  2555  001796  D7FD               	bra	i2u94_47
  2556  001798  0012               	return		;funcret
  2557  00179A                     __end_ofi2_lcdInst:
  2558                           	opt stack 0
  2559                           pclatu	equ	0xFFB
  2560                           pclath	equ	0xFFA
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           prodh	equ	0xFF4
  2566                           prodl	equ	0xFF3
  2567                           intcon	equ	0xFF2
  2568                           intcon3	equ	0xFF0
  2569                           fsr0h	equ	0xFEA
  2570                           fsr0l	equ	0xFE9
  2571                           wreg	equ	0xFE8
  2572                           fsr1h	equ	0xFE2
  2573                           fsr1l	equ	0xFE1
  2574                           postinc2	equ	0xFDE
  2575                           postdec2	equ	0xFDD
  2576                           fsr2h	equ	0xFDA
  2577                           fsr2l	equ	0xFD9
  2578                           status	equ	0xFD8
  2579                           
  2580 ;; *************** function i2_lcdNibble *****************
  2581 ;; Defined at:
  2582 ;;		line 37 in file "lcd.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  data            1    wreg     unsigned char 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  data            1    1[COMRAM] unsigned char 
  2587 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;Total ram usage:        2 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		i2_lcdInst
  2607 ;;		i2_putch
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text17
  2612  00148E                     __ptext17:
  2613                           	opt stack 0
  2614  00148E                     i2_lcdNibble:
  2615                           	opt stack 25
  2616                           
  2617                           ;incstack = 0
  2618                           ;i2lcdNibble@data stored from wreg
  2619  00148E  6E02               	movwf	i2lcdNibble@data,c
  2620                           
  2621                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2622  001490  5002               	movf	i2lcdNibble@data,w,c
  2623  001492  0BF0               	andlw	240
  2624  001494  6E01               	movwf	i2lcdNibble@temp,c
  2625                           
  2626                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2627  001496  508C               	movf	3980,w,c	;volatile
  2628  001498  0B0F               	andlw	15
  2629  00149A  6E8C               	movwf	3980,c	;volatile
  2630                           
  2631                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2632  00149C  5001               	movf	i2lcdNibble@temp,w,c
  2633  00149E  108C               	iorwf	3980,w,c	;volatile
  2634  0014A0  6E8C               	movwf	3980,c	;volatile
  2635                           
  2636                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2637  0014A2  0E00               	movlw	0
  2638  0014A4  BEF2               	btfsc	intcon,7,c	;volatile
  2639  0014A6  0E01               	movlw	1
  2640  0014A8  6E48               	movwf	lcd@LCDinterruptState,c
  2641  0014AA  9EF2               	bcf	intcon,7,c	;volatile
  2642  0014AC  868C               	bsf	3980,3,c	;volatile
  2643  0014AE  0E53               	movlw	83
  2644  0014B0                     i2u95_47:
  2645  0014B0  2EE8               	decfsz	wreg,f,c
  2646  0014B2  D7FE               	bra	i2u95_47
  2647  0014B4  F000               	nop	
  2648  0014B6  968C               	bcf	3980,3,c	;volatile
  2649  0014B8  0EC8               	movlw	200
  2650  0014BA                     i2u96_47:
  2651  0014BA  D000               	nop2	
  2652  0014BC  2EE8               	decfsz	wreg,f,c
  2653  0014BE  D7FD               	bra	i2u96_47
  2654  0014C0  B048               	btfsc	lcd@LCDinterruptState,0,c
  2655  0014C2  D002               	bra	i2u45_45
  2656  0014C4  9EF2               	bcf	intcon,7,c	;volatile
  2657  0014C6  D001               	bra	i2u45_46
  2658  0014C8                     i2u45_45:
  2659  0014C8  8EF2               	bsf	intcon,7,c	;volatile
  2660  0014CA                     i2u45_46:
  2661                           
  2662                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2663  0014CA  3802               	swapf	i2lcdNibble@data,w,c
  2664  0014CC  0BF0               	andlw	240
  2665  0014CE  6E02               	movwf	i2lcdNibble@data,c
  2666                           
  2667                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2668  0014D0  5002               	movf	i2lcdNibble@data,w,c
  2669  0014D2  0BF0               	andlw	240
  2670  0014D4  6E01               	movwf	i2lcdNibble@temp,c
  2671                           
  2672                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2673  0014D6  508C               	movf	3980,w,c	;volatile
  2674  0014D8  0B0F               	andlw	15
  2675  0014DA  6E8C               	movwf	3980,c	;volatile
  2676                           
  2677                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2678  0014DC  5001               	movf	i2lcdNibble@temp,w,c
  2679  0014DE  108C               	iorwf	3980,w,c	;volatile
  2680  0014E0  6E8C               	movwf	3980,c	;volatile
  2681                           
  2682                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2683  0014E2  0E00               	movlw	0
  2684  0014E4  BEF2               	btfsc	intcon,7,c	;volatile
  2685  0014E6  0E01               	movlw	1
  2686  0014E8  6E48               	movwf	lcd@LCDinterruptState,c
  2687  0014EA  9EF2               	bcf	intcon,7,c	;volatile
  2688  0014EC  868C               	bsf	3980,3,c	;volatile
  2689  0014EE  0E53               	movlw	83
  2690  0014F0                     i2u97_47:
  2691  0014F0  2EE8               	decfsz	wreg,f,c
  2692  0014F2  D7FE               	bra	i2u97_47
  2693  0014F4  F000               	nop	
  2694  0014F6  968C               	bcf	3980,3,c	;volatile
  2695  0014F8  0EC8               	movlw	200
  2696  0014FA                     i2u98_47:
  2697  0014FA  D000               	nop2	
  2698  0014FC  2EE8               	decfsz	wreg,f,c
  2699  0014FE  D7FD               	bra	i2u98_47
  2700  001500  B048               	btfsc	lcd@LCDinterruptState,0,c
  2701  001502  D002               	bra	i2u46_45
  2702  001504  9EF2               	bcf	intcon,7,c	;volatile
  2703  001506  D001               	bra	i2u46_46
  2704  001508                     i2u46_45:
  2705  001508  8EF2               	bsf	intcon,7,c	;volatile
  2706  00150A                     i2u46_46:
  2707  00150A  0012               	return		;funcret
  2708  00150C                     __end_ofi2_lcdNibble:
  2709                           	opt stack 0
  2710                           pclatu	equ	0xFFB
  2711                           pclath	equ	0xFFA
  2712                           tblptru	equ	0xFF8
  2713                           tblptrh	equ	0xFF7
  2714                           tblptrl	equ	0xFF6
  2715                           tablat	equ	0xFF5
  2716                           prodh	equ	0xFF4
  2717                           prodl	equ	0xFF3
  2718                           intcon	equ	0xFF2
  2719                           intcon3	equ	0xFF0
  2720                           fsr0h	equ	0xFEA
  2721                           fsr0l	equ	0xFE9
  2722                           wreg	equ	0xFE8
  2723                           fsr1h	equ	0xFE2
  2724                           fsr1l	equ	0xFE1
  2725                           postinc2	equ	0xFDE
  2726                           postdec2	equ	0xFDD
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           pclatu	equ	0xFFB
  2731                           pclath	equ	0xFFA
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           prodh	equ	0xFF4
  2737                           prodl	equ	0xFF3
  2738                           intcon	equ	0xFF2
  2739                           intcon3	equ	0xFF0
  2740                           fsr0h	equ	0xFEA
  2741                           fsr0l	equ	0xFE9
  2742                           wreg	equ	0xFE8
  2743                           fsr1h	equ	0xFE2
  2744                           fsr1l	equ	0xFE1
  2745                           postinc2	equ	0xFDE
  2746                           postdec2	equ	0xFDD
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751                           	psect	rparam
  2752  0000                     pclatu	equ	0xFFB
  2753                           pclath	equ	0xFFA
  2754                           tblptru	equ	0xFF8
  2755                           tblptrh	equ	0xFF7
  2756                           tblptrl	equ	0xFF6
  2757                           tablat	equ	0xFF5
  2758                           prodh	equ	0xFF4
  2759                           prodl	equ	0xFF3
  2760                           intcon	equ	0xFF2
  2761                           intcon3	equ	0xFF0
  2762                           fsr0h	equ	0xFEA
  2763                           fsr0l	equ	0xFE9
  2764                           wreg	equ	0xFE8
  2765                           fsr1h	equ	0xFE2
  2766                           fsr1l	equ	0xFE1
  2767                           postinc2	equ	0xFDE
  2768                           postdec2	equ	0xFDD
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773                           	psect	temp
  2774  00004A                     btemp:
  2775                           	opt stack 0
  2776  00004A                     	ds	1
  2777  0000                     int$flags	set	btemp
  2778  0000                     wtemp6	set	btemp+1
  2779                           pclatu	equ	0xFFB
  2780                           pclath	equ	0xFFA
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           prodh	equ	0xFF4
  2786                           prodl	equ	0xFF3
  2787                           intcon	equ	0xFF2
  2788                           intcon3	equ	0xFF0
  2789                           fsr0h	equ	0xFEA
  2790                           fsr0l	equ	0xFE9
  2791                           wreg	equ	0xFE8
  2792                           fsr1h	equ	0xFE2
  2793                           fsr1l	equ	0xFE1
  2794                           postinc2	equ	0xFDE
  2795                           postdec2	equ	0xFDD
  2796                           fsr2h	equ	0xFDA
  2797                           fsr2l	equ	0xFD9
  2798                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    33
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69      73
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[11]), STR_3(CODE[11]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1555
                                             68 COMRAM     1     1      0
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                             44 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1353
                                             56 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             51 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             44 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             47 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             44 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    20    20      0    1448
                                             24 COMRAM    20    20      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
                          i2_readADC
 ---------------------------------------------------------------------------------
 (5) i2_readADC                                            5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            21    17      4     998
                                             12 COMRAM    12     8      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble
   i2_putch
     i2_lcdNibble
   i2_readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      49       1       57.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      49      34        0.0%
DATA                 0      0      49       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 30 16:01:01 2018

                       l83 13CA                         l84 13E0                         l99 16E4  
                       u15 144A                         u16 144C                         u25 148A  
                       u26 148C                __CFG_CPD$ON 000000         i2___lwdiv@dividend 0001  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                        l181 1200  
                      l182 124E                        l183 1206                        l175 1196  
                      l600 165E                        l168 115C                        l601 1656  
                      l177 11BE                        l169 116C                        l604 1676  
                      l605 1680                        l590 152A                        l591 1522  
                      l594 154A                        l595 1554               __CFG_CPB$OFF 000000  
                      u510 1662                        u480 152E                        u640 11EE  
                      u660 1256                        u817 1404                        u827 1756  
                      u837 15B6                        u847 15EA                        u857 176A  
                      u867 1432                        u877 143C                        u887 1472  
                      u897 147C                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1400 11C2                       _ADON 007E10  
                     STR_1 102A                       STR_2 102A                       STR_3 1022  
                     STR_4 1022                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     _RBIF 007F90                       i2l92 10BA                       i2l93 1106  
                     i2l94 1104                       i2l99 1718                       _main 138E  
 __end_of_interruptHandler 1152                       _keys 1001                       fsr0h 000FEA  
                     fsr1h 000FE2         i2___lwdiv@quotient 0005                       fsr2h 000FDA  
                     fsr0l 000FE9                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 004A                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000            __end_ofi2_putch 1786  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                i2_lcdNibble 148E  
         __end_of_LCD_LEFT 101D                      ?_main 0001            __end_of___lwdiv 155E  
          __end_of___lwmod 168A                      i2l181 131E                      i2l182 136C  
                    i2l183 1324                      i2l175 12B4                      i2l600 16A0  
                    i2l168 127A                      i2l601 1698                      i2l177 12DC  
                    i2l169 128A                      i2l604 16B8                      i2l605 16C2  
                    i2l590 157C                      i2l591 1574                      i2l594 159C  
                    i2l595 15A6                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 1772             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 1700            __end_of_initLCD 15FC             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers 101C                      _putch 174A                      pclath 000FFA  
                    tablat 000FF5          _LCDinterruptState 0049                      status 000FD8  
                    wtemp6 004B             __CFG_PBADEN$ON 000000           __end_ofi2_printf 138E  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042            __initialization 1734  
       __size_ofi2_lcdInst 0014               __end_of_main 1410               __end_of_keys 1012  
               i2printf@ap 0012         __size_ofi2_readADC 0034         __size_ofi2_initLCD 004C  
           __CFG_OSC$HSPLL 000000          __end_of_LCD_RIGHT 101E                     ??_main 0045  
            __activetblptr 000002                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _ADRESH 000FC4                     _ADRESL 000FC3            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IF 007F80  
                   i2l1476 12E0                     _OSCCON 000FD3                  ??i2_putch 0003  
           __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000                  ??___lwdiv 0031  
                ??___lwmod 0038                  ??_lcdInst 002F                     _printf 1152  
                ??_readADC 002F                  ??_initLCD 0030          __end_ofi2___lwdiv 15B0  
             __mediumconst 0000          __end_ofi2___lwmod 16CC                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8          __end_ofi2_lcdInst 179A  
        __end_ofi2_readADC 1734          __end_ofi2_initLCD 1648                 __accesstop 0080  
  __end_of__initialization 173C              ___rparam_used 000001         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001              __end_of_putch 175E                i2printf@val 0016  
       __size_of_lcdNibble 007E                i2putch@data 0003                  ?i2_printf 000D  
                  ??_putch 002F          ?_interruptHandler 0001         ??_interruptHandler 0019  
             ?i2_lcdNibble 0001                    ?_printf 0039                 ??i2_printf 0011  
                  i2u45_45 14C8                    i2u45_46 14CA                    i2u54_40 1580  
                  i2u46_45 1508                    i2u46_46 150A                    i2u57_40 16A4  
                  i2u73_40 130C                    i2u90_47 10AE                    i2u75_40 1374  
                  i2u91_47 177E                    i2u92_47 1602                    i2u93_47 1636  
                  i2u94_47 1792                    i2u95_47 14B0                    i2u96_47 14BA  
                  i2u97_47 14F0                    i2u98_47 14FA       lcd@LCDinterruptState 0048  
                  i2_putch 1772          __end_of_lcdNibble 148E                    __Hparam 0000  
                  __Lparam 0000                    _W_count 0046                    ___lwdiv 150C  
                  ___lwmod 1648               __psmallconst 1000   interruptHandler@keypress 002C  
                  __pcinit 1734                    __ramtop 1000                    _lcdInst 175E  
                  __ptext0 138E                    __ptext1 16CC                    __ptext2 1152  
                  __ptext3 174A                    __ptext4 1648                    __ptext5 150C  
                  __ptext6 15B0                    __ptext7 175E                    __ptext8 1410  
          __size_of_printf 011E                    _readADC 16CC                    _initLCD 15B0  
                  _dpowers 1012                  _LCD_RIGHT 101D             __pintcode_body 102E  
     end_of_initialization 173C      __end_of_LCD_SIZE_HORZ 1020      __end_of_LCD_SIZE_VERT 101F  
            __Lmediumconst 0000                    int_func 102E                    printf@c 0044  
                  printf@f 0039                    postdec2 000FDD                    postinc2 000FDE  
                _TRISCbits 000F94          i2___lwdiv@divisor 0003                  i2___lwdiv 155E  
                i2___lwmod 168A          i2___lwdiv@counter 0007                  i2_lcdInst 1786  
                i2_readADC 1700                  i2_initLCD 15FC       __size_ofi2_lcdNibble 007E  
            i2lcdInst@data 0003             __end_of_printf 1270               i2printf@flag 0014  
             i2printf@prec 0015        start_initialization 1734                  i2printf@c 0018  
                i2printf@f 000D                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 011E                 ?i2_lcdInst 0001                 ?i2_readADC 0001  
               ?i2_initLCD 0001           __CFG_LPT1OSC$OFF 000000                   ??_printf 003D  
__size_of_interruptHandler 114A                __pbssCOMRAM 0046          i2___lwmod@divisor 000A  
        i2___lwmod@counter 000C                   ?i2_putch 0001           i2readADC@channel 0005  
         ___lwdiv@dividend 002D          __CFG_CCP2MX$PORTC 000000                  __pintcode 0008  
                _lcdNibble 1410                   ?___lwdiv 002D                   ?___lwmod 0034  
                 ?_lcdInst 0001                   ?_readADC 002D                   ?_initLCD 0001  
              __smallconst 1000           ___lwdiv@quotient 0031                ??i2___lwdiv 0005  
              ??i2___lwmod 000C             __size_of_putch 0014                   _LCD_LEFT 101C  
              ??i2_lcdInst 0003                   _LATCbits 000F8B                   _LATDbits 000F8C  
              ??i2_readADC 0003                ??i2_initLCD 0004           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001                 _ADCON0bits 000FC2                 _ADCON2bits 000FC0  
            lcdNibble@data 002E                 printf@flag 0040              lcdNibble@temp 002D  
               printf@prec 0041                   i2_printf 1270             _LCD_HORZ_LIMIT 1021  
         __size_ofi2_putch 0014                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000           __size_of___lwdiv 0052           __size_of___lwmod 0042  
           readADC@channel 0031           _interruptHandler 0008           __size_of_lcdInst 0014  
         __size_of_readADC 0034           __size_of_initLCD 004C     __end_of_LCD_HORZ_LIMIT 1022  
          ___lwdiv@divisor 002F            ___lwdiv@counter 0033                   __ptext10 1700  
                 __ptext11 1270                   __ptext12 1772                   __ptext13 168A  
                 __ptext14 155E                   __ptext15 15FC                   __ptext16 1786  
                 __ptext17 148E             _LCD_VERT_LIMIT 1020              __size_of_main 0082  
            ??i2_lcdNibble 0001                ??_lcdNibble 002D                   int$flags 004A  
                printf@val 0042                  putch@data 002F                 _INTCONbits 000FF2  
   __end_of_LCD_VERT_LIMIT 1021                   intlevel2 0000              _LCD_SIZE_HORZ 101F  
         ___lwmod@dividend 0034              _LCD_SIZE_VERT 101E                   printf@ap 003E  
              lcdInst@data 002F        __end_ofi2_lcdNibble 150C            ___lwmod@divisor 0036  
          ___lwmod@counter 0038  
