

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 17:52:41 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  001710                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _max
    71  001710  0004               	dw	4
    72                           
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _keys:
    78                           	opt stack 0
    79  001001  31                 	db	49
    80  001002  32                 	db	50
    81  001003  33                 	db	51
    82  001004  41                 	db	65
    83  001005  34                 	db	52
    84  001006  35                 	db	53
    85  001007  36                 	db	54
    86  001008  42                 	db	66
    87  001009  37                 	db	55
    88  00100A  38                 	db	56
    89  00100B  39                 	db	57
    90  00100C  43                 	db	67
    91  00100D  2A                 	db	42
    92  00100E  30                 	db	48
    93  00100F  23                 	db	35
    94  001010  44                 	db	68
    95  001011  00                 	db	0
    96  001012                     __end_of_keys:
    97                           	opt stack 0
    98  001012                     _dpowers:
    99                           	opt stack 0
   100  001012  0001               	dw	1
   101  001014  000A               	dw	10
   102  001016  0064               	dw	100
   103  001018  03E8               	dw	1000
   104  00101A  2710               	dw	10000
   105  00101C                     __end_of_dpowers:
   106                           	opt stack 0
   107  00101C                     _array:
   108                           	opt stack 0
   109  00101C  31                 	db	49
   110  00101D  30                 	db	48
   111  00101E  00                 	db	0
   112  00101F                     __end_of_array:
   113                           	opt stack 0
   114  00101F                     _LCD_LEFT:
   115                           	opt stack 0
   116  00101F  00                 	db	0
   117  001020                     __end_of_LCD_LEFT:
   118                           	opt stack 0
   119  001020                     _LCD_RIGHT:
   120                           	opt stack 0
   121  001020  01                 	db	1
   122  001021                     __end_of_LCD_RIGHT:
   123                           	opt stack 0
   124  001021                     _LCD_SIZE_VERT:
   125                           	opt stack 0
   126  001021  02                 	db	2
   127  001022                     __end_of_LCD_SIZE_VERT:
   128                           	opt stack 0
   129  001022                     _LCD_SIZE_HORZ:
   130                           	opt stack 0
   131  001022  10                 	db	16
   132  001023                     __end_of_LCD_SIZE_HORZ:
   133                           	opt stack 0
   134  001023                     _LCD_VERT_LIMIT:
   135                           	opt stack 0
   136  001023  02                 	db	2
   137  001024                     __end_of_LCD_VERT_LIMIT:
   138                           	opt stack 0
   139  001024                     _LCD_HORZ_LIMIT:
   140                           	opt stack 0
   141  001024  28                 	db	40
   142  001025                     __end_of_LCD_HORZ_LIMIT:
   143                           	opt stack 0
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON2bits	set	4037
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _TRISCbits	set	3988
   151  0000                     _SSPCON1bits	set	4038
   152  0000                     _INTCONbits	set	4082
   153  0000                     _TRISDbits	set	3989
   154  0000                     _LATDbits	set	3980
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADRESL	set	4035
   157  0000                     _ADCON0bits	set	4034
   158  0000                     _ADCON2bits	set	4032
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON0	set	4034
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _LATE	set	3981
   167  0000                     _LATD	set	3980
   168  0000                     _LATC	set	3979
   169  0000                     _LATB	set	3978
   170  0000                     _LATA	set	3977
   171  0000                     _OSCTUNEbits	set	3995
   172  0000                     _OSCCONbits	set	4051
   173  0000                     _ADON	set	32272
   174  001025                     STR_7:
   175  001025  72                 	db	114	;'r'
   176  001026  65                 	db	101	;'e'
   177  001027  6D                 	db	109	;'m'
   178  001028  61                 	db	97	;'a'
   179  001029  69                 	db	105	;'i'
   180  00102A  6E                 	db	110	;'n'
   181  00102B  20                 	db	32
   182  00102C  4E                 	db	78	;'N'
   183  00102D  75                 	db	117	;'u'
   184  00102E  74                 	db	116	;'t'
   185  00102F  73                 	db	115	;'s'
   186  001030  3A                 	db	58	;':'
   187  001031  25                 	db	37
   188  001032  64                 	db	100	;'d'
   189  001033  00                 	db	0
   190  001034                     STR_3:
   191  001034  64                 	db	100	;'d'
   192  001035  6F                 	db	111	;'o'
   193  001036  6E                 	db	110	;'n'
   194  001037  65                 	db	101	;'e'
   195  001038  00                 	db	0
   196  0000                     
   197                           ; #config settings
   198  001039  00                 	db	0	; dummy byte at the end
   199  0000                     
   200                           	psect	cinit
   201  00168E                     __pcinit:
   202                           	opt stack 0
   203  00168E                     start_initialization:
   204                           	opt stack 0
   205  00168E                     __initialization:
   206                           	opt stack 0
   207                           
   208                           ; Initialize objects allocated to COMRAM (2 bytes)
   209                           ; load TBLPTR registers with __pidataCOMRAM
   210  00168E  0E10               	movlw	low __pidataCOMRAM
   211  001690  6EF6               	movwf	tblptrl,c
   212  001692  0E17               	movlw	high __pidataCOMRAM
   213  001694  6EF7               	movwf	tblptrh,c
   214  001696  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   215  001698  6EF8               	movwf	tblptru,c
   216  00169A  0009               	tblrd		*+	;fetch initializer
   217  00169C  CFF5 F02A          	movff	tablat,__pdataCOMRAM
   218  0016A0  0009               	tblrd		*+	;fetch initializer
   219  0016A2  CFF5 F02B          	movff	tablat,__pdataCOMRAM+1
   220                           
   221                           ; Clear objects allocated to COMRAM (15 bytes)
   222  0016A6  EE00  F01B         	lfsr	0,__pbssCOMRAM
   223  0016AA  0E0F               	movlw	15
   224  0016AC                     clear_0:
   225  0016AC  6AEE               	clrf	postinc0,c
   226  0016AE  06E8               	decf	wreg,f,c
   227  0016B0  E1FD               	bnz	clear_0
   228  0016B2                     end_of_initialization:
   229                           	opt stack 0
   230  0016B2                     __end_of__initialization:
   231                           	opt stack 0
   232  0016B2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   233  0016B4  6EF8               	movwf	tblptru,c
   234  0016B6  0100               	movlb	0
   235  0016B8  EF1D  F008         	goto	_main	;jump to C main() function
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           
   243                           	psect	bssCOMRAM
   244  00001B                     __pbssCOMRAM:
   245                           	opt stack 0
   246  00001B                     _i:
   247                           	opt stack 0
   248  00001B                     	ds	2
   249  00001D                     _analog_result:
   250                           	opt stack 0
   251  00001D                     	ds	2
   252  00001F                     _W_spacingTime:
   253                           	opt stack 0
   254  00001F                     	ds	2
   255  000021                     _W_remain:
   256                           	opt stack 0
   257  000021                     	ds	2
   258  000023                     _W_counter:
   259                           	opt stack 0
   260  000023                     	ds	2
   261  000025                     _state:
   262                           	opt stack 0
   263  000025                     	ds	2
   264  000027                     lcd@LCDinterruptState:
   265                           	opt stack 0
   266  000027                     	ds	1
   267  000028                     _I2Cdata:
   268                           	opt stack 0
   269  000028                     	ds	1
   270  000029                     	ds	1
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278                           	psect	dataCOMRAM
   279  00002A                     __pdataCOMRAM:
   280                           	opt stack 0
   281  00002A                     _max:
   282                           	opt stack 0
   283  00002A                     	ds	2
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	cstackCOMRAM
   292  000001                     __pcstackCOMRAM:
   293                           	opt stack 0
   294  000001                     ??_I2C_Master_Wait:
   295  000001                     ?_readADC:
   296                           	opt stack 0
   297  000001                     ?___lwdiv:
   298                           	opt stack 0
   299  000001                     ?___lldiv:
   300                           	opt stack 0
   301  000001                     lcdNibble@temp:
   302                           	opt stack 0
   303  000001                     ___lwdiv@dividend:
   304                           	opt stack 0
   305  000001                     ___lldiv@dividend:
   306                           	opt stack 0
   307                           
   308                           ; 4 bytes @ 0x0
   309  000001                     	ds	1
   310  000002                     lcdNibble@data:
   311                           	opt stack 0
   312  000002                     I2C_Master_Write@byteToWrite:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x1
   316  000002                     	ds	1
   317  000003                     ??_readADC:
   318  000003                     lcdInst@data:
   319                           	opt stack 0
   320  000003                     putch@data:
   321                           	opt stack 0
   322  000003                     ___lwdiv@divisor:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x2
   326  000003                     	ds	1
   327  000004                     ??_initLCD:
   328  000004                     
   329                           ; 1 bytes @ 0x3
   330  000004                     	ds	1
   331  000005                     readADC@channel:
   332                           	opt stack 0
   333  000005                     ___lwdiv@quotient:
   334                           	opt stack 0
   335  000005                     ___lldiv@divisor:
   336                           	opt stack 0
   337                           
   338                           ; 4 bytes @ 0x4
   339  000005                     	ds	2
   340  000007                     ___lwdiv@counter:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0x6
   344  000007                     	ds	1
   345  000008                     ?___lwmod:
   346                           	opt stack 0
   347  000008                     ___lwmod@dividend:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x7
   351  000008                     	ds	1
   352  000009                     ___lldiv@quotient:
   353                           	opt stack 0
   354                           
   355                           ; 4 bytes @ 0x8
   356  000009                     	ds	1
   357  00000A                     ___lwmod@divisor:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x9
   361  00000A                     	ds	2
   362  00000C                     ___lwmod@counter:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0xB
   366  00000C                     	ds	1
   367  00000D                     ?_printf:
   368                           	opt stack 0
   369  00000D                     ___lldiv@counter:
   370                           	opt stack 0
   371  00000D                     printf@f:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0xC
   375  00000D                     	ds	1
   376  00000E                     I2C_Master_Init@clockFreq:
   377                           	opt stack 0
   378                           
   379                           ; 4 bytes @ 0xD
   380  00000E                     	ds	3
   381  000011                     ??_printf:
   382                           
   383                           ; 1 bytes @ 0x10
   384  000011                     	ds	1
   385  000012                     ??_I2C_Master_Init:
   386  000012                     printf@ap:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x11
   390  000012                     	ds	2
   391  000014                     printf@flag:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x13
   395  000014                     	ds	1
   396  000015                     printf@prec:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x14
   400  000015                     	ds	1
   401  000016                     printf@val:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x15
   405  000016                     	ds	2
   406  000018                     printf@c:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x17
   410  000018                     	ds	1
   411  000019                     ??_main:
   412                           
   413                           ; 1 bytes @ 0x18
   414  000019                     	ds	2
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           
   422 ;;
   423 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   424 ;;
   425 ;; *************** function _main *****************
   426 ;; Defined at:
   427 ;;		line 66 in file "main.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;		None
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      void 
   434 ;; Registers used:
   435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : 0/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   443 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;Total ram usage:        2 bytes
   446 ;; Hardware stack levels required when called:    3
   447 ;; This function calls:
   448 ;;		_I2C_Master_Init
   449 ;;		_I2C_Master_Start
   450 ;;		_I2C_Master_Stop
   451 ;;		_I2C_Master_Write
   452 ;;		_initLCD
   453 ;;		_lcdInst
   454 ;;		_motorStart_3
   455 ;;		_motorStop_3
   456 ;;		_printf
   457 ;;		_readADC
   458 ;; This function is called by:
   459 ;;		Startup code after reset
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text0
   464  00103A                     __ptext0:
   465                           	opt stack 0
   466  00103A                     _main:
   467                           	opt stack 28
   468                           
   469                           ;main.c: 69: OSCCONbits.IRCF2 = 1;
   470                           
   471                           ;incstack = 0
   472  00103A  8CD3               	bsf	4051,6,c	;volatile
   473                           
   474                           ;main.c: 70: OSCCONbits.IRCF1 = 1;
   475  00103C  8AD3               	bsf	4051,5,c	;volatile
   476                           
   477                           ;main.c: 71: OSCCONbits.IRCF0 = 1;
   478  00103E  88D3               	bsf	4051,4,c	;volatile
   479                           
   480                           ;main.c: 72: OSCTUNEbits.PLLEN = 1;
   481  001040  8C9B               	bsf	3995,6,c	;volatile
   482                           
   483                           ;main.c: 77: LATA = 0x00;
   484  001042  0E00               	movlw	0
   485  001044  6E89               	movwf	3977,c	;volatile
   486                           
   487                           ;main.c: 78: LATB = 0x00;
   488  001046  0E00               	movlw	0
   489  001048  6E8A               	movwf	3978,c	;volatile
   490                           
   491                           ;main.c: 79: LATC = 0x00;
   492  00104A  0E00               	movlw	0
   493  00104C  6E8B               	movwf	3979,c	;volatile
   494                           
   495                           ;main.c: 80: LATD = 0x00;
   496  00104E  0E00               	movlw	0
   497  001050  6E8C               	movwf	3980,c	;volatile
   498                           
   499                           ;main.c: 81: LATE = 0x00;
   500  001052  0E00               	movlw	0
   501  001054  6E8D               	movwf	3981,c	;volatile
   502                           
   503                           ;main.c: 85: TRISA = 0xFF;
   504  001056  6892               	setf	3986,c	;volatile
   505                           
   506                           ;main.c: 86: TRISB = 0xFF;
   507  001058  6893               	setf	3987,c	;volatile
   508                           
   509                           ;main.c: 87: TRISC = 0x00;
   510  00105A  0E00               	movlw	0
   511  00105C  6E94               	movwf	3988,c	;volatile
   512                           
   513                           ;main.c: 91: TRISD = 0x00;
   514  00105E  0E00               	movlw	0
   515  001060  6E95               	movwf	3989,c	;volatile
   516                           
   517                           ;main.c: 92: TRISE = 0x00;
   518  001062  0E00               	movlw	0
   519  001064  6E96               	movwf	3990,c	;volatile
   520                           
   521                           ;main.c: 95: ADCON0 = 0x00;
   522  001066  0E00               	movlw	0
   523  001068  6EC2               	movwf	4034,c	;volatile
   524                           
   525                           ;main.c: 96: ADCON1 = 0x0B;
   526  00106A  0E0B               	movlw	11
   527  00106C  6EC1               	movwf	4033,c	;volatile
   528                           
   529                           ;main.c: 97: ADCON2bits.ADFM = 1;
   530  00106E  8EC0               	bsf	4032,7,c	;volatile
   531                           
   532                           ;main.c: 101: initLCD();
   533  001070  EC9A  F00A         	call	_initLCD	;wreg free
   534                           
   535                           ;main.c: 104: I2C_Master_Init(100000);
   536  001074  0EA0               	movlw	160
   537  001076  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   538  001078  0E86               	movlw	134
   539  00107A  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   540  00107C  0E01               	movlw	1
   541  00107E  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   542  001080  0E00               	movlw	0
   543  001082  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   544  001084  EC43  F00A         	call	_I2C_Master_Init	;wreg free
   545                           
   546                           ;main.c: 105: I2C_Master_Start();
   547  001088  EC84  F00B         	call	_I2C_Master_Start	;wreg free
   548                           
   549                           ;main.c: 106: I2C_Master_Write(0b00010000);
   550  00108C  0E00               	movlw	0
   551  00108E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   552  001090  0E10               	movlw	16
   553  001092  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   554  001094  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
   555                           
   556                           ;main.c: 107: I2C_Master_Stop();
   557  001098  EC80  F00B         	call	_I2C_Master_Stop	;wreg free
   558  00109C                     
   559                           ;main.c: 112: I2C_Master_Start();
   560  00109C  EC84  F00B         	call	_I2C_Master_Start	;wreg free
   561                           
   562                           ;main.c: 113: I2C_Master_Write(0b00010000);
   563  0010A0  0E00               	movlw	0
   564  0010A2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   565  0010A4  0E10               	movlw	16
   566  0010A6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   567  0010A8  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
   568                           
   569                           ;main.c: 114: I2C_Master_Write(11);
   570  0010AC  0E00               	movlw	0
   571  0010AE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   572  0010B0  0E0B               	movlw	11
   573  0010B2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   574  0010B4  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
   575                           
   576                           ;main.c: 115: I2C_Master_Stop();
   577  0010B8  EC80  F00B         	call	_I2C_Master_Stop	;wreg free
   578  0010BC  D7EF               	goto	l103
   579                           
   580                           ;main.c: 127: _delay((unsigned long)((100)*(32000000/4000.0)));
   581                           
   582                           ;main.c: 126: printf("%d",W_counter);
   583                           
   584                           ;main.c: 116: }
   585                           ;main.c: 125: initLCD();
   586  0010BE  0E05               	movlw	5
   587  0010C0  6E1A               	movwf	(??_main+1)& (0+255),c
   588  0010C2  0E0F               	movlw	15
   589  0010C4  6E19               	movwf	??_main& (0+255),c
   590  0010C6  0EF1               	movlw	241
   591  0010C8                     u647:
   592  0010C8  2EE8               	decfsz	wreg,f,c
   593  0010CA  D7FE               	bra	u647
   594  0010CC  2E19               	decfsz	??_main& (0+255),f,c
   595  0010CE  D7FC               	bra	u647
   596  0010D0  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   597  0010D2  D7FA               	bra	u647
   598  0010D4  F000               	nop	
   599  0010D6                     l1515:
   600                           
   601                           ;main.c: 130: if (W_counter >= max){
   602  0010D6  502A               	movf	_max,w,c
   603  0010D8  5C23               	subwf	_W_counter,w,c
   604  0010DA  5024               	movf	_W_counter+1,w,c
   605  0010DC  0A80               	xorlw	128
   606  0010DE  6E19               	movwf	??_main& (0+255),c
   607  0010E0  502B               	movf	_max+1,w,c
   608  0010E2  0A80               	xorlw	128
   609  0010E4  5819               	subwfb	??_main& (0+255),w,c
   610  0010E6  A0D8               	btfss	status,0,c
   611  0010E8  D014               	goto	l107
   612                           
   613                           ;main.c: 131: W_counter = 0;
   614  0010EA  0E00               	movlw	0
   615  0010EC  6E24               	movwf	_W_counter+1,c
   616  0010EE  0E00               	movlw	0
   617  0010F0  6E23               	movwf	_W_counter,c
   618                           
   619                           ;main.c: 132: I2C_Master_Start();
   620  0010F2  EC84  F00B         	call	_I2C_Master_Start	;wreg free
   621                           
   622                           ;main.c: 133: I2C_Master_Write(0b00010000);
   623  0010F6  0E00               	movlw	0
   624  0010F8  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   625  0010FA  0E10               	movlw	16
   626  0010FC  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   627  0010FE  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
   628                           
   629                           ;main.c: 134: I2C_Master_Write(12);
   630  001102  0E00               	movlw	0
   631  001104  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   632  001106  0E0C               	movlw	12
   633  001108  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   634  00110A  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
   635                           
   636                           ;main.c: 135: I2C_Master_Stop();
   637  00110E  EC80  F00B         	call	_I2C_Master_Stop	;wreg free
   638  001112                     l107:
   639                           
   640                           ;main.c: 138: }
   641                           ;main.c: 139: if (readADC(3)<=250 ){
   642  001112  0E03               	movlw	3
   643  001114  EC2B  F00B         	call	_readADC
   644  001118  5002               	movf	?_readADC+1,w,c
   645  00111A  E1DD               	bnz	l1515
   646  00111C  0EFB               	movlw	251
   647  00111E  5C01               	subwf	?_readADC,w,c
   648  001120  B0D8               	btfsc	status,0,c
   649  001122  D7D9               	goto	l106
   650                           
   651                           ;main.c: 141: W_counter ++;
   652  001124  4A23               	infsnz	_W_counter,f,c
   653  001126  2A24               	incf	_W_counter+1,f,c
   654                           
   655                           ;main.c: 142: initLCD();
   656  001128  EC9A  F00A         	call	_initLCD	;wreg free
   657                           
   658                           ;main.c: 143: printf("%d", W_counter);
   659  00112C  0E31               	movlw	low (STR_7+12)
   660  00112E  6E0D               	movwf	printf@f,c
   661  001130  0E10               	movlw	high (STR_7+12)
   662  001132  6E0E               	movwf	printf@f+1,c
   663  001134  C023  F00F         	movff	_W_counter,?_printf+2
   664  001138  C024  F010         	movff	_W_counter+1,?_printf+3
   665  00113C  EC34  F009         	call	_printf	;wreg free
   666  001140  D7CA               	goto	l106
   667                           
   668                           ;main.c: 153: _delay((unsigned long)((800)*(32000000/4000.0)));
   669                           
   670                           ;main.c: 152: printf("done");
   671                           
   672                           ;main.c: 145: }
   673                           ;main.c: 148: }
   674                           ;main.c: 151: initLCD();
   675  001142  0E21               	movlw	33
   676  001144  6E1A               	movwf	(??_main+1)& (0+255),c
   677  001146  0E78               	movlw	120
   678  001148  6E19               	movwf	??_main& (0+255),c
   679  00114A  0E98               	movlw	152
   680  00114C                     u657:
   681  00114C  2EE8               	decfsz	wreg,f,c
   682  00114E  D7FE               	bra	u657
   683  001150  2E19               	decfsz	??_main& (0+255),f,c
   684  001152  D7FC               	bra	u657
   685  001154  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   686  001156  D7FA               	bra	u657
   687  001158  D000               	nop2	
   688                           
   689                           ;main.c: 160: I2C_Master_Start();
   690  00115A  EC84  F00B         	call	_I2C_Master_Start	;wreg free
   691                           
   692                           ;main.c: 161: I2C_Master_Write(0b00010000);
   693  00115E  0E00               	movlw	0
   694  001160  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   695  001162  0E10               	movlw	16
   696  001164  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   697  001166  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
   698                           
   699                           ;main.c: 162: I2C_Master_Write('2');
   700  00116A  0E00               	movlw	0
   701  00116C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   702  00116E  0E32               	movlw	50
   703  001170  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   704  001172  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
   705                           
   706                           ;main.c: 163: I2C_Master_Stop();
   707  001176  EC80  F00B         	call	_I2C_Master_Stop	;wreg free
   708                           
   709                           ;main.c: 166: initLCD();
   710  00117A  EC9A  F00A         	call	_initLCD	;wreg free
   711                           
   712                           ;main.c: 167: motorStart_3();
   713  00117E  ECE5  F00A         	call	_motorStart_3	;wreg free
   714                           
   715                           ;main.c: 169: W_spacingTime = 0;
   716  001182  0E00               	movlw	0
   717  001184  6E20               	movwf	_W_spacingTime+1,c
   718  001186  0E00               	movlw	0
   719  001188  6E1F               	movwf	_W_spacingTime,c
   720                           
   721                           ;main.c: 170: initLCD();
   722  00118A  EC9A  F00A         	call	_initLCD	;wreg free
   723                           
   724                           ;main.c: 171: printf("%d", W_remain);
   725  00118E  0E31               	movlw	low (STR_7+12)
   726  001190  6E0D               	movwf	printf@f,c
   727  001192  0E10               	movlw	high (STR_7+12)
   728  001194  6E0E               	movwf	printf@f+1,c
   729  001196  C021  F00F         	movff	_W_remain,?_printf+2
   730  00119A  C022  F010         	movff	_W_remain+1,?_printf+3
   731  00119E  EC34  F009         	call	_printf	;wreg free
   732  0011A2                     
   733                           ;main.c: 174: if (W_spacingTime >= 30000){
   734  0011A2  BE20               	btfsc	_W_spacingTime+1,7,c
   735  0011A4  D009               	goto	l112
   736  0011A6  0E30               	movlw	48
   737  0011A8  5C1F               	subwf	_W_spacingTime,w,c
   738  0011AA  0E75               	movlw	117
   739  0011AC  5820               	subwfb	_W_spacingTime+1,w,c
   740  0011AE  A0D8               	btfss	status,0,c
   741  0011B0  D003               	goto	l112
   742                           
   743                           ;main.c: 175: motorStop_3();
   744  0011B2  ECC0  F00A         	call	_motorStop_3	;wreg free
   745                           
   746                           ;main.c: 176: break;
   747  0011B6  D03F               	goto	l113
   748  0011B8                     l112:
   749                           
   750                           ;main.c: 177: }
   751                           ;main.c: 179: if (readADC(3)<=250 ){
   752  0011B8  0E03               	movlw	3
   753  0011BA  EC2B  F00B         	call	_readADC
   754  0011BE  5002               	movf	?_readADC+1,w,c
   755  0011C0  E11E               	bnz	l1575
   756  0011C2  0EFB               	movlw	251
   757  0011C4  5C01               	subwf	?_readADC,w,c
   758  0011C6  B0D8               	btfsc	status,0,c
   759  0011C8  D01A               	goto	l114
   760                           
   761                           ;main.c: 181: W_remain ++;
   762  0011CA  4A21               	infsnz	_W_remain,f,c
   763  0011CC  2A22               	incf	_W_remain+1,f,c
   764                           
   765                           ;main.c: 182: initLCD();
   766  0011CE  EC9A  F00A         	call	_initLCD	;wreg free
   767                           
   768                           ;main.c: 183: printf("%d", W_remain);
   769  0011D2  0E31               	movlw	low (STR_7+12)
   770  0011D4  6E0D               	movwf	printf@f,c
   771  0011D6  0E10               	movlw	high (STR_7+12)
   772  0011D8  6E0E               	movwf	printf@f+1,c
   773  0011DA  C021  F00F         	movff	_W_remain,?_printf+2
   774  0011DE  C022  F010         	movff	_W_remain+1,?_printf+3
   775  0011E2  EC34  F009         	call	_printf	;wreg free
   776                           
   777                           ;main.c: 184: _delay((unsigned long)((1)*(32000000/4000.0)));
   778  0011E6  0E0B               	movlw	11
   779  0011E8  6E19               	movwf	??_main& (0+255),c
   780  0011EA  0E62               	movlw	98
   781  0011EC                     u667:
   782  0011EC  2EE8               	decfsz	wreg,f,c
   783  0011EE  D7FE               	bra	u667
   784  0011F0  2E19               	decfsz	??_main& (0+255),f,c
   785  0011F2  D7FC               	bra	u667
   786  0011F4  D000               	nop2	
   787                           
   788                           ;main.c: 185: W_spacingTime = 0;
   789  0011F6  0E00               	movlw	0
   790  0011F8  6E20               	movwf	_W_spacingTime+1,c
   791  0011FA  0E00               	movlw	0
   792  0011FC  6E1F               	movwf	_W_spacingTime,c
   793  0011FE                     l114:
   794  0011FE                     l1575:
   795                           
   796                           ;main.c: 187: }
   797                           ;main.c: 194: lcdInst(0xC0);;
   798  0011FE  0EC0               	movlw	192
   799  001200  EC68  F00B         	call	_lcdInst
   800                           
   801                           ;main.c: 195: printf("%d",W_spacingTime);
   802  001204  0E31               	movlw	low (STR_7+12)
   803  001206  6E0D               	movwf	printf@f,c
   804  001208  0E10               	movlw	high (STR_7+12)
   805  00120A  6E0E               	movwf	printf@f+1,c
   806  00120C  C01F  F00F         	movff	_W_spacingTime,?_printf+2
   807  001210  C020  F010         	movff	_W_spacingTime+1,?_printf+3
   808  001214  EC34  F009         	call	_printf	;wreg free
   809                           
   810                           ;main.c: 197: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   811  001218  0E80               	movlw	128
   812  00121A  EC68  F00B         	call	_lcdInst
   813  00121E  0E34               	movlw	52
   814  001220  6E19               	movwf	??_main& (0+255),c
   815  001222  0EF2               	movlw	242
   816  001224                     u677:
   817  001224  2EE8               	decfsz	wreg,f,c
   818  001226  D7FE               	bra	u677
   819  001228  2E19               	decfsz	??_main& (0+255),f,c
   820  00122A  D7FC               	bra	u677
   821                           
   822                           ;main.c: 200: W_spacingTime +=200;
   823  00122C  0EC8               	movlw	200
   824  00122E  261F               	addwf	_W_spacingTime,f,c
   825  001230  0E00               	movlw	0
   826  001232  2220               	addwfc	_W_spacingTime+1,f,c
   827  001234  D7B6               	goto	l111
   828  001236                     l113:
   829                           
   830                           ;main.c: 208: initLCD();
   831                           
   832                           ;main.c: 203: }
   833                           ;main.c: 207: while(1){
   834  001236  EC9A  F00A         	call	_initLCD	;wreg free
   835                           
   836                           ;main.c: 209: printf("remain Nuts:%d",W_remain);
   837  00123A  0E25               	movlw	low STR_7
   838  00123C  6E0D               	movwf	printf@f,c
   839  00123E  0E10               	movlw	high STR_7
   840  001240  6E0E               	movwf	printf@f+1,c
   841  001242  C021  F00F         	movff	_W_remain,?_printf+2
   842  001246  C022  F010         	movff	_W_remain+1,?_printf+3
   843  00124A  EC34  F009         	call	_printf	;wreg free
   844                           
   845                           ;main.c: 210: _delay((unsigned long)((1000)*(32000000/4000.0)));
   846  00124E  0E29               	movlw	41
   847  001250  6E1A               	movwf	(??_main+1)& (0+255),c
   848  001252  0E96               	movlw	150
   849  001254  6E19               	movwf	??_main& (0+255),c
   850  001256  0E7F               	movlw	127
   851  001258                     u687:
   852  001258  2EE8               	decfsz	wreg,f,c
   853  00125A  D7FE               	bra	u687
   854  00125C  2E19               	decfsz	??_main& (0+255),f,c
   855  00125E  D7FC               	bra	u687
   856  001260  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   857  001262  D7FA               	bra	u687
   858  001264  F000               	nop	
   859  001266  D7E7               	goto	l113
   860  001268                     __end_of_main:
   861                           	opt stack 0
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           status	equ	0xFD8
   869                           
   870 ;; *************** function _readADC *****************
   871 ;; Defined at:
   872 ;;		line 215 in file "main.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;  channel         1    wreg     unsigned char 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  channel         1    4[COMRAM] unsigned char 
   877 ;; Return value:  Size  Location     Type
   878 ;;                  2    0[COMRAM] unsigned short 
   879 ;; Registers used:
   880 ;;		wreg, status,2, status,0
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   886 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   887 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   888 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   889 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   890 ;;Total ram usage:        5 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		_main
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text1
   900  001656                     __ptext1:
   901                           	opt stack 0
   902  001656                     _readADC:
   903                           	opt stack 30
   904                           
   905                           ;incstack = 0
   906                           ;readADC@channel stored from wreg
   907  001656  6E05               	movwf	readADC@channel,c
   908                           
   909                           ;main.c: 224: ADCON0 = (channel & 0x0F) << 2;
   910  001658  C005  F003         	movff	readADC@channel,??_readADC
   911  00165C  0E0F               	movlw	15
   912  00165E  1603               	andwf	??_readADC,f,c
   913  001660  90D8               	bcf	status,0,c
   914  001662  3603               	rlcf	??_readADC,f,c
   915  001664  90D8               	bcf	status,0,c
   916  001666  3403               	rlcf	??_readADC,w,c
   917  001668  6EC2               	movwf	4034,c	;volatile
   918                           
   919                           ;main.c: 225: ADON = 1;
   920  00166A  80C2               	bsf	4034,0,c	;volatile
   921                           
   922                           ;main.c: 226: ADCON0bits.GO = 1;
   923  00166C  82C2               	bsf	4034,1,c	;volatile
   924  00166E  B2C2               	btfsc	4034,1,c	;volatile
   925  001670  D7FE               	goto	l123
   926                           
   927                           ;main.c: 228: analog_result = ADRESL + (ADRESH*256);
   928  001672  50C4               	movf	4036,w,c	;volatile
   929  001674  6E04               	movwf	(??_readADC+1)& (0+255),c
   930  001676  6A03               	clrf	??_readADC& (0+255),c
   931  001678  50C3               	movf	4035,w,c	;volatile
   932  00167A  2403               	addwf	??_readADC,w,c
   933  00167C  6E1D               	movwf	_analog_result,c
   934  00167E  0E00               	movlw	0
   935  001680  2004               	addwfc	??_readADC+1,w,c
   936  001682  6E1E               	movwf	_analog_result+1,c
   937                           
   938                           ;main.c: 229: return analog_result;
   939  001684  C01D  F001         	movff	_analog_result,?_readADC
   940  001688  C01E  F002         	movff	_analog_result+1,?_readADC+1
   941  00168C  0012               	return	
   942  00168E                     __end_of_readADC:
   943                           	opt stack 0
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           status	equ	0xFD8
   951                           
   952 ;; *************** function _printf *****************
   953 ;; Defined at:
   954 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;  f               2   12[COMRAM] PTR const unsigned char 
   957 ;;		 -> STR_7(15), STR_6(3), STR_5(3), STR_4(3), 
   958 ;;		 -> STR_3(5), STR_2(3), STR_1(3), 
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  tmpval          4    0        struct .
   961 ;;  cp              3    0        PTR const unsigned char 
   962 ;;  val             2   21[COMRAM] unsigned int 
   963 ;;  ap              2   17[COMRAM] PTR void [1]
   964 ;;		 -> ?_printf(2), 
   965 ;;  len             2    0        unsigned int 
   966 ;;  c               1   23[COMRAM] char 
   967 ;;  prec            1   20[COMRAM] char 
   968 ;;  flag            1   19[COMRAM] unsigned char 
   969 ;; Return value:  Size  Location     Type
   970 ;;                  2   12[COMRAM] int 
   971 ;; Registers used:
   972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   973 ;; Tracked objects:
   974 ;;		On entry : 0/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   978 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   979 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   980 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   982 ;;Total ram usage:       12 bytes
   983 ;; Hardware stack levels used:    1
   984 ;; Hardware stack levels required when called:    2
   985 ;; This function calls:
   986 ;;		___lwdiv
   987 ;;		___lwmod
   988 ;;		_putch
   989 ;; This function is called by:
   990 ;;		_main
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           	psect	text2
   995  001268                     __ptext2:
   996                           	opt stack 0
   997  001268                     _printf:
   998                           	opt stack 28
   999                           
  1000                           ;doprnt.c: 466: va_list ap;
  1001                           ;doprnt.c: 499: signed char c;
  1002                           ;doprnt.c: 506: signed char prec;
  1003                           ;doprnt.c: 508: unsigned char flag;
  1004                           ;doprnt.c: 523: union {
  1005                           ;doprnt.c: 524: unsigned long vd;
  1006                           ;doprnt.c: 525: double integ;
  1007                           ;doprnt.c: 526: } tmpval;
  1008                           ;doprnt.c: 528: unsigned int val;
  1009                           ;doprnt.c: 529: unsigned len;
  1010                           ;doprnt.c: 530: const char * cp;
  1011                           ;doprnt.c: 533: *ap = __va_start();
  1012                           
  1013                           ;incstack = 0
  1014  001268  0E0F               	movlw	low (?_printf+2)
  1015  00126A  6E12               	movwf	printf@ap,c
  1016  00126C  0E00               	movlw	high (?_printf+2)
  1017  00126E  6E13               	movwf	printf@ap+1,c
  1018                           
  1019                           ;doprnt.c: 536: while(c = *f++) {
  1020  001270  D07D               	goto	u570
  1021  001272                     
  1022                           ;doprnt.c: 538: if(c != '%')
  1023  001272  0E25               	movlw	37
  1024  001274  1818               	xorwf	printf@c,w,c
  1025  001276  B4D8               	btfsc	status,2,c
  1026  001278  D004               	goto	l272
  1027                           
  1028                           ;doprnt.c: 540: {
  1029                           ;doprnt.c: 541: (putch(c) );
  1030  00127A  5018               	movf	printf@c,w,c
  1031  00127C  EC5E  F00B         	call	_putch
  1032                           
  1033                           ;doprnt.c: 542: continue;
  1034  001280  D075               	goto	u570
  1035  001282                     l272:
  1036                           
  1037                           ;doprnt.c: 543: }
  1038                           ;doprnt.c: 548: flag = 0;
  1039  001282  0E00               	movlw	0
  1040  001284  6E14               	movwf	printf@flag,c
  1041                           
  1042                           ;doprnt.c: 822: }
  1043                           
  1044                           ;doprnt.c: 813: continue;
  1045                           
  1046                           ;doprnt.c: 802: default:
  1047                           
  1048                           ;doprnt.c: 698: case 'i':
  1049                           ;doprnt.c: 699: break;
  1050                           
  1051                           ;doprnt.c: 697: case 'd':
  1052                           
  1053                           ;doprnt.c: 638: goto alldone;
  1054                           
  1055                           ;doprnt.c: 637: case 0:
  1056                           
  1057                           ;doprnt.c: 635: switch(c = *f++) {
  1058  001286  C00D  FFF6         	movff	printf@f,tblptrl
  1059  00128A  C00E  FFF7         	movff	printf@f+1,tblptrh
  1060  00128E  4A0D               	infsnz	printf@f,f,c
  1061  001290  2A0E               	incf	printf@f+1,f,c
  1062  001292                     	if	0	;tblptru may be non-zero
  1063  001292                     	endif
  1064  001292                     	if	0	;tblptru may be non-zero
  1065  001292                     	endif
  1066  001292  0008               	tblrd		*
  1067  001294  CFF5 F018          	movff	tablat,printf@c
  1068  001298  5018               	movf	printf@c,w,c
  1069                           
  1070                           ; Switch size 1, requested type "space"
  1071                           ; Number of cases is 3, Range of values is 0 to 105
  1072                           ; switch strategies available:
  1073                           ; Name         Instructions Cycles
  1074                           ; simple_byte           10     6 (average)
  1075                           ;	Chosen strategy is simple_byte
  1076  00129A  0A00               	xorlw	0	; case 0
  1077  00129C  B4D8               	btfsc	status,2,c
  1078  00129E  0012               	return	
  1079  0012A0  0A64               	xorlw	100	; case 100
  1080  0012A2  B4D8               	btfsc	status,2,c
  1081  0012A4  D003               	goto	l278
  1082  0012A6  0A0D               	xorlw	13	; case 105
  1083  0012A8  A4D8               	btfss	status,2,c
  1084  0012AA  D060               	goto	u570
  1085  0012AC                     l278:
  1086                           
  1087                           ;doprnt.c: 1253: {
  1088                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1089  0012AC  C012  FFD9         	movff	printf@ap,fsr2l
  1090  0012B0  C013  FFDA         	movff	printf@ap+1,fsr2h
  1091  0012B4  CFDE F016          	movff	postinc2,printf@val
  1092  0012B8  CFDD F017          	movff	postdec2,printf@val+1
  1093  0012BC  0E02               	movlw	2
  1094  0012BE  2612               	addwf	printf@ap,f,c
  1095  0012C0  0E00               	movlw	0
  1096  0012C2  2213               	addwfc	printf@ap+1,f,c
  1097                           
  1098                           ;doprnt.c: 1261: if((int)val < 0) {
  1099  0012C4  AE17               	btfss	printf@val+1,7,c
  1100  0012C6  D006               	goto	l280
  1101                           
  1102                           ;doprnt.c: 1262: flag |= 0x03;
  1103  0012C8  0E03               	movlw	3
  1104  0012CA  1214               	iorwf	printf@flag,f,c
  1105                           
  1106                           ;doprnt.c: 1263: val = -val;
  1107  0012CC  6C16               	negf	printf@val,c
  1108  0012CE  1E17               	comf	printf@val+1,f,c
  1109  0012D0  B0D8               	btfsc	status,0,c
  1110  0012D2  2A17               	incf	printf@val+1,f,c
  1111  0012D4                     l280:
  1112                           
  1113                           ;doprnt.c: 1264: }
  1114                           ;doprnt.c: 1266: }
  1115                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1116  0012D4  0E01               	movlw	1
  1117  0012D6  6E18               	movwf	printf@c,c
  1118  0012D8                     l1439:
  1119  0012D8  0E05               	movlw	5
  1120  0012DA  1818               	xorwf	printf@c,w,c
  1121  0012DC  B4D8               	btfsc	status,2,c
  1122  0012DE  D012               	goto	u550
  1123                           
  1124                           ;doprnt.c: 1306: if(val < dpowers[c])
  1125  0012E0  5018               	movf	printf@c,w,c
  1126  0012E2  0D02               	mullw	2
  1127  0012E4  0E12               	movlw	low _dpowers
  1128  0012E6  24F3               	addwf	prodl,w,c
  1129  0012E8  6EF6               	movwf	tblptrl,c
  1130  0012EA  0E10               	movlw	high _dpowers
  1131  0012EC  20F4               	addwfc	prodh,w,c
  1132  0012EE  6EF7               	movwf	tblptrh,c
  1133  0012F0                     	if	0	;There are less than 3 active tblptr bytes
  1134  0012F0                     	endif
  1135  0012F0  0009               	tblrd		*+
  1136  0012F2  50F5               	movf	tablat,w,c
  1137  0012F4  5C16               	subwf	printf@val,w,c
  1138  0012F6  0009               	tblrd		*+
  1139  0012F8  50F5               	movf	tablat,w,c
  1140  0012FA  5817               	subwfb	printf@val+1,w,c
  1141  0012FC  A0D8               	btfss	status,0,c
  1142  0012FE  D002               	goto	u550
  1143                           
  1144                           ;doprnt.c: 1307: break;
  1145  001300  2A18               	incf	printf@c,f,c
  1146  001302  D7EA               	goto	l1439
  1147  001304                     u550:
  1148                           
  1149                           ;doprnt.c: 1422: {
  1150                           ;doprnt.c: 1438: if(flag & 0x03)
  1151  001304  C014  F011         	movff	printf@flag,??_printf
  1152  001308  0E03               	movlw	3
  1153  00130A  1611               	andwf	??_printf,f,c
  1154  00130C  B4D8               	btfsc	status,2,c
  1155  00130E  D003               	goto	l284
  1156                           
  1157                           ;doprnt.c: 1439: (putch('-') );
  1158  001310  0E2D               	movlw	45
  1159  001312  EC5E  F00B         	call	_putch
  1160  001316                     l284:
  1161                           
  1162                           ;doprnt.c: 1469: }
  1163                           ;doprnt.c: 1472: prec = c;
  1164  001316  C018  F015         	movff	printf@c,printf@prec
  1165                           
  1166                           ;doprnt.c: 1474: while(prec--) {
  1167  00131A  D024               	goto	l285
  1168  00131C                     
  1169                           ;doprnt.c: 1478: {
  1170                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1171  00131C  5015               	movf	printf@prec,w,c
  1172  00131E  0D02               	mullw	2
  1173  001320  0E12               	movlw	low _dpowers
  1174  001322  24F3               	addwf	prodl,w,c
  1175  001324  6EF6               	movwf	tblptrl,c
  1176  001326  0E10               	movlw	high _dpowers
  1177  001328  20F4               	addwfc	prodh,w,c
  1178  00132A  6EF7               	movwf	tblptrh,c
  1179  00132C                     	if	0	;There are less than 3 active tblptr bytes
  1180  00132C                     	endif
  1181  00132C  0009               	tblrd		*+
  1182  00132E  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1183  001332  000A               	tblrd		*-
  1184  001334  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1185  001338  C016  F001         	movff	printf@val,___lwdiv@dividend
  1186  00133C  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1187  001340  EC71  F00A         	call	___lwdiv	;wreg free
  1188  001344  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1189  001348  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1190  00134C  0E00               	movlw	0
  1191  00134E  6E0B               	movwf	___lwmod@divisor+1,c
  1192  001350  0E0A               	movlw	10
  1193  001352  6E0A               	movwf	___lwmod@divisor,c
  1194  001354  EC0A  F00B         	call	___lwmod	;wreg free
  1195  001358  5008               	movf	?___lwmod,w,c
  1196  00135A  0F30               	addlw	48
  1197  00135C  6E18               	movwf	printf@c,c
  1198                           
  1199                           ;doprnt.c: 1523: }
  1200                           ;doprnt.c: 1524: (putch(c) );
  1201  00135E  5018               	movf	printf@c,w,c
  1202  001360  EC5E  F00B         	call	_putch
  1203  001364                     l285:
  1204  001364  0615               	decf	printf@prec,f,c
  1205  001366  2815               	incf	printf@prec,w,c
  1206  001368  A4D8               	btfss	status,2,c
  1207  00136A  D7D8               	goto	l286
  1208  00136C                     u570:
  1209  00136C  C00D  FFF6         	movff	printf@f,tblptrl
  1210  001370  C00E  FFF7         	movff	printf@f+1,tblptrh
  1211  001374  4A0D               	infsnz	printf@f,f,c
  1212  001376  2A0E               	incf	printf@f+1,f,c
  1213  001378                     	if	0	;tblptru may be non-zero
  1214  001378                     	endif
  1215  001378                     	if	0	;tblptru may be non-zero
  1216  001378                     	endif
  1217  001378  0008               	tblrd		*
  1218  00137A  CFF5 F018          	movff	tablat,printf@c
  1219  00137E  5018               	movf	printf@c,w,c
  1220  001380  B4D8               	btfsc	status,2,c
  1221  001382  0012               	return	
  1222  001384  D776               	goto	l271
  1223  001386                     __end_of_printf:
  1224                           	opt stack 0
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           tblptrl	equ	0xFF6
  1228                           tablat	equ	0xFF5
  1229                           prodh	equ	0xFF4
  1230                           prodl	equ	0xFF3
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           postinc2	equ	0xFDE
  1234                           postdec2	equ	0xFDD
  1235                           fsr2h	equ	0xFDA
  1236                           fsr2l	equ	0xFD9
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _putch *****************
  1240 ;; Defined at:
  1241 ;;		line 24 in file "lcd.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  data            1    wreg     unsigned char 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  data            1    2[COMRAM] unsigned char 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, status,2, status,0, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;Total ram usage:        1 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    1
  1262 ;; This function calls:
  1263 ;;		_lcdNibble
  1264 ;; This function is called by:
  1265 ;;		_printf
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text3
  1270  0016BC                     __ptext3:
  1271                           	opt stack 0
  1272  0016BC                     _putch:
  1273                           	opt stack 28
  1274                           
  1275                           ;incstack = 0
  1276                           ;putch@data stored from wreg
  1277  0016BC  6E03               	movwf	putch@data,c
  1278                           
  1279                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1280  0016BE  848C               	bsf	3980,2,c	;volatile
  1281                           
  1282                           ;lcd.c: 33: lcdNibble(data);
  1283  0016C0  5003               	movf	putch@data,w,c
  1284  0016C2  EC04  F00A         	call	_lcdNibble
  1285                           
  1286                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1287  0016C6  0EA0               	movlw	160
  1288  0016C8                     u697:
  1289  0016C8  D000               	nop2	
  1290  0016CA  2EE8               	decfsz	wreg,f,c
  1291  0016CC  D7FD               	bra	u697
  1292  0016CE  0012               	return		;funcret
  1293  0016D0                     __end_of_putch:
  1294                           	opt stack 0
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           prodh	equ	0xFF4
  1300                           prodl	equ	0xFF3
  1301                           postinc0	equ	0xFEE
  1302                           wreg	equ	0xFE8
  1303                           postinc2	equ	0xFDE
  1304                           postdec2	equ	0xFDD
  1305                           fsr2h	equ	0xFDA
  1306                           fsr2l	equ	0xFD9
  1307                           status	equ	0xFD8
  1308                           
  1309 ;; *************** function ___lwmod *****************
  1310 ;; Defined at:
  1311 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  dividend        2    7[COMRAM] unsigned int 
  1314 ;;  divisor         2    9[COMRAM] unsigned int 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  counter         1   11[COMRAM] unsigned char 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  2    7[COMRAM] unsigned int 
  1319 ;; Registers used:
  1320 ;;		wreg, status,2, status,0
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1326 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1327 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1329 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;Total ram usage:        5 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_printf
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text4
  1340  001614                     __ptext4:
  1341                           	opt stack 0
  1342  001614                     ___lwmod:
  1343                           	opt stack 29
  1344                           
  1345                           ;incstack = 0
  1346  001614  500A               	movf	___lwmod@divisor,w,c
  1347  001616  100B               	iorwf	___lwmod@divisor+1,w,c
  1348  001618  B4D8               	btfsc	status,2,c
  1349  00161A  D018               	goto	l708
  1350  00161C  0E01               	movlw	1
  1351  00161E  6E0C               	movwf	___lwmod@counter,c
  1352  001620  D004               	goto	l703
  1353  001622  90D8               	bcf	status,0,c
  1354  001624  360A               	rlcf	___lwmod@divisor,f,c
  1355  001626  360B               	rlcf	___lwmod@divisor+1,f,c
  1356  001628  2A0C               	incf	___lwmod@counter,f,c
  1357  00162A                     l703:
  1358  00162A  AE0B               	btfss	___lwmod@divisor+1,7,c
  1359  00162C  D7FA               	goto	l704
  1360  00162E                     u490:
  1361  00162E  500A               	movf	___lwmod@divisor,w,c
  1362  001630  5C08               	subwf	___lwmod@dividend,w,c
  1363  001632  500B               	movf	___lwmod@divisor+1,w,c
  1364  001634  5809               	subwfb	___lwmod@dividend+1,w,c
  1365  001636  A0D8               	btfss	status,0,c
  1366  001638  D004               	goto	l707
  1367  00163A  500A               	movf	___lwmod@divisor,w,c
  1368  00163C  5E08               	subwf	___lwmod@dividend,f,c
  1369  00163E  500B               	movf	___lwmod@divisor+1,w,c
  1370  001640  5A09               	subwfb	___lwmod@dividend+1,f,c
  1371  001642                     l707:
  1372  001642  90D8               	bcf	status,0,c
  1373  001644  320B               	rrcf	___lwmod@divisor+1,f,c
  1374  001646  320A               	rrcf	___lwmod@divisor,f,c
  1375  001648  2E0C               	decfsz	___lwmod@counter,f,c
  1376  00164A  D7F1               	goto	u490
  1377  00164C                     l708:
  1378  00164C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1379  001650  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1380  001654  0012               	return		;funcret
  1381  001656                     __end_of___lwmod:
  1382                           	opt stack 0
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           prodh	equ	0xFF4
  1388                           prodl	equ	0xFF3
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postinc2	equ	0xFDE
  1392                           postdec2	equ	0xFDD
  1393                           fsr2h	equ	0xFDA
  1394                           fsr2l	equ	0xFD9
  1395                           status	equ	0xFD8
  1396                           
  1397 ;; *************** function ___lwdiv *****************
  1398 ;; Defined at:
  1399 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  dividend        2    0[COMRAM] unsigned int 
  1402 ;;  divisor         2    2[COMRAM] unsigned int 
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  quotient        2    4[COMRAM] unsigned int 
  1405 ;;  counter         1    6[COMRAM] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  2    0[COMRAM] unsigned int 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;Total ram usage:        7 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; This function calls:
  1422 ;;		Nothing
  1423 ;; This function is called by:
  1424 ;;		_printf
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text5
  1429  0014E2                     __ptext5:
  1430                           	opt stack 0
  1431  0014E2                     ___lwdiv:
  1432                           	opt stack 29
  1433                           
  1434                           ;incstack = 0
  1435  0014E2  0E00               	movlw	0
  1436  0014E4  6E06               	movwf	___lwdiv@quotient+1,c
  1437  0014E6  0E00               	movlw	0
  1438  0014E8  6E05               	movwf	___lwdiv@quotient,c
  1439  0014EA  5003               	movf	___lwdiv@divisor,w,c
  1440  0014EC  1004               	iorwf	___lwdiv@divisor+1,w,c
  1441  0014EE  B4D8               	btfsc	status,2,c
  1442  0014F0  D01C               	goto	l698
  1443  0014F2  0E01               	movlw	1
  1444  0014F4  6E07               	movwf	___lwdiv@counter,c
  1445  0014F6  D004               	goto	l693
  1446  0014F8  90D8               	bcf	status,0,c
  1447  0014FA  3603               	rlcf	___lwdiv@divisor,f,c
  1448  0014FC  3604               	rlcf	___lwdiv@divisor+1,f,c
  1449  0014FE  2A07               	incf	___lwdiv@counter,f,c
  1450  001500                     l693:
  1451  001500  AE04               	btfss	___lwdiv@divisor+1,7,c
  1452  001502  D7FA               	goto	l694
  1453  001504                     u460:
  1454  001504  90D8               	bcf	status,0,c
  1455  001506  3605               	rlcf	___lwdiv@quotient,f,c
  1456  001508  3606               	rlcf	___lwdiv@quotient+1,f,c
  1457  00150A  5003               	movf	___lwdiv@divisor,w,c
  1458  00150C  5C01               	subwf	___lwdiv@dividend,w,c
  1459  00150E  5004               	movf	___lwdiv@divisor+1,w,c
  1460  001510  5802               	subwfb	___lwdiv@dividend+1,w,c
  1461  001512  A0D8               	btfss	status,0,c
  1462  001514  D005               	goto	l697
  1463  001516  5003               	movf	___lwdiv@divisor,w,c
  1464  001518  5E01               	subwf	___lwdiv@dividend,f,c
  1465  00151A  5004               	movf	___lwdiv@divisor+1,w,c
  1466  00151C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1467  00151E  8005               	bsf	___lwdiv@quotient,0,c
  1468  001520                     l697:
  1469  001520  90D8               	bcf	status,0,c
  1470  001522  3204               	rrcf	___lwdiv@divisor+1,f,c
  1471  001524  3203               	rrcf	___lwdiv@divisor,f,c
  1472  001526  2E07               	decfsz	___lwdiv@counter,f,c
  1473  001528  D7ED               	goto	u460
  1474  00152A                     l698:
  1475  00152A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1476  00152E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1477  001532  0012               	return		;funcret
  1478  001534                     __end_of___lwdiv:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           tblptrh	equ	0xFF7
  1482                           tblptrl	equ	0xFF6
  1483                           tablat	equ	0xFF5
  1484                           prodh	equ	0xFF4
  1485                           prodl	equ	0xFF3
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           postinc2	equ	0xFDE
  1489                           postdec2	equ	0xFDD
  1490                           fsr2h	equ	0xFDA
  1491                           fsr2l	equ	0xFD9
  1492                           status	equ	0xFD8
  1493                           
  1494 ;; *************** function _motorStop_3 *****************
  1495 ;; Defined at:
  1496 ;;		line 341 in file "main.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;		None
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;		None
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, status,2, status,0, cstack
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;Total ram usage:        0 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    2
  1517 ;; This function calls:
  1518 ;;		_I2C_Master_Init
  1519 ;;		_I2C_Master_Start
  1520 ;;		_I2C_Master_Stop
  1521 ;;		_I2C_Master_Write
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text6
  1528  001580                     __ptext6:
  1529                           	opt stack 0
  1530  001580                     _motorStop_3:
  1531                           	opt stack 28
  1532                           
  1533                           ;main.c: 342: I2C_Master_Init(100000);
  1534                           
  1535                           ;incstack = 0
  1536  001580  0EA0               	movlw	160
  1537  001582  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1538  001584  0E86               	movlw	134
  1539  001586  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1540  001588  0E01               	movlw	1
  1541  00158A  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1542  00158C  0E00               	movlw	0
  1543  00158E  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1544  001590  EC43  F00A         	call	_I2C_Master_Init	;wreg free
  1545                           
  1546                           ;main.c: 343: I2C_Master_Start();
  1547  001594  EC84  F00B         	call	_I2C_Master_Start	;wreg free
  1548                           
  1549                           ;main.c: 345: I2C_Master_Write(0b00010000);
  1550  001598  0E00               	movlw	0
  1551  00159A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1552  00159C  0E10               	movlw	16
  1553  00159E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1554  0015A0  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
  1555                           
  1556                           ;main.c: 346: I2C_Master_Stop();
  1557  0015A4  EC80  F00B         	call	_I2C_Master_Stop	;wreg free
  1558                           
  1559                           ;main.c: 349: I2C_Master_Start();
  1560  0015A8  EC84  F00B         	call	_I2C_Master_Start	;wreg free
  1561                           
  1562                           ;main.c: 350: I2C_Master_Write(0b00010000);
  1563  0015AC  0E00               	movlw	0
  1564  0015AE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1565  0015B0  0E10               	movlw	16
  1566  0015B2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1567  0015B4  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
  1568                           
  1569                           ;main.c: 351: I2C_Master_Write('0');
  1570  0015B8  0E00               	movlw	0
  1571  0015BA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1572  0015BC  0E30               	movlw	48
  1573  0015BE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1574  0015C0  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
  1575                           
  1576                           ;main.c: 352: I2C_Master_Stop();
  1577  0015C4  EC80  F00B         	call	_I2C_Master_Stop	;wreg free
  1578  0015C8  0012               	return		;funcret
  1579  0015CA                     __end_of_motorStop_3:
  1580                           	opt stack 0
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           prodh	equ	0xFF4
  1586                           prodl	equ	0xFF3
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           postinc2	equ	0xFDE
  1590                           postdec2	equ	0xFDD
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function _motorStart_3 *****************
  1596 ;; Defined at:
  1597 ;;		line 327 in file "main.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		wreg, status,2, status,0, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;Total ram usage:        0 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    2
  1618 ;; This function calls:
  1619 ;;		_I2C_Master_Init
  1620 ;;		_I2C_Master_Start
  1621 ;;		_I2C_Master_Stop
  1622 ;;		_I2C_Master_Write
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text7
  1629  0015CA                     __ptext7:
  1630                           	opt stack 0
  1631  0015CA                     _motorStart_3:
  1632                           	opt stack 28
  1633                           
  1634                           ;main.c: 328: I2C_Master_Init(100000);
  1635                           
  1636                           ;incstack = 0
  1637  0015CA  0EA0               	movlw	160
  1638  0015CC  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1639  0015CE  0E86               	movlw	134
  1640  0015D0  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1641  0015D2  0E01               	movlw	1
  1642  0015D4  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1643  0015D6  0E00               	movlw	0
  1644  0015D8  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1645  0015DA  EC43  F00A         	call	_I2C_Master_Init	;wreg free
  1646                           
  1647                           ;main.c: 329: I2C_Master_Start();
  1648  0015DE  EC84  F00B         	call	_I2C_Master_Start	;wreg free
  1649                           
  1650                           ;main.c: 331: I2C_Master_Write(0b00010000);
  1651  0015E2  0E00               	movlw	0
  1652  0015E4  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1653  0015E6  0E10               	movlw	16
  1654  0015E8  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1655  0015EA  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
  1656                           
  1657                           ;main.c: 332: I2C_Master_Stop();
  1658  0015EE  EC80  F00B         	call	_I2C_Master_Stop	;wreg free
  1659                           
  1660                           ;main.c: 335: I2C_Master_Start();
  1661  0015F2  EC84  F00B         	call	_I2C_Master_Start	;wreg free
  1662                           
  1663                           ;main.c: 336: I2C_Master_Write(0b00010000);
  1664  0015F6  0E00               	movlw	0
  1665  0015F8  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1666  0015FA  0E10               	movlw	16
  1667  0015FC  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1668  0015FE  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
  1669                           
  1670                           ;main.c: 337: I2C_Master_Write('9');
  1671  001602  0E00               	movlw	0
  1672  001604  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1673  001606  0E39               	movlw	57
  1674  001608  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1675  00160A  EC7B  F00B         	call	_I2C_Master_Write	;wreg free
  1676                           
  1677                           ;main.c: 338: I2C_Master_Stop();
  1678  00160E  EC80  F00B         	call	_I2C_Master_Stop	;wreg free
  1679  001612  0012               	return		;funcret
  1680  001614                     __end_of_motorStart_3:
  1681                           	opt stack 0
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           prodh	equ	0xFF4
  1687                           prodl	equ	0xFF3
  1688                           postinc0	equ	0xFEE
  1689                           wreg	equ	0xFE8
  1690                           postinc2	equ	0xFDE
  1691                           postdec2	equ	0xFDD
  1692                           fsr2h	equ	0xFDA
  1693                           fsr2l	equ	0xFD9
  1694                           status	equ	0xFD8
  1695                           
  1696 ;; *************** function _I2C_Master_Write *****************
  1697 ;; Defined at:
  1698 ;;		line 108 in file "I2C.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;		None
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2, status,0, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1716 ;;Total ram usage:        2 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:    1
  1719 ;; This function calls:
  1720 ;;		_I2C_Master_Wait
  1721 ;; This function is called by:
  1722 ;;		_main
  1723 ;;		_motorStart_3
  1724 ;;		_motorStop_3
  1725 ;;		_motorStart_0
  1726 ;;		_motorStop_0
  1727 ;;		_motorStart_1
  1728 ;;		_motorStop_1
  1729 ;;		_motorStart_2
  1730 ;;		_motorStop_2
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text8
  1735  0016F6                     __ptext8:
  1736                           	opt stack 0
  1737  0016F6                     _I2C_Master_Write:
  1738                           	opt stack 28
  1739                           
  1740                           ;I2C.c: 116: I2C_Master_Wait();
  1741                           
  1742                           ;incstack = 0
  1743  0016F6  EC72  F00B         	call	_I2C_Master_Wait	;wreg free
  1744                           
  1745                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1746  0016FA  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1747  0016FE  0012               	return		;funcret
  1748  001700                     __end_of_I2C_Master_Write:
  1749                           	opt stack 0
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           prodh	equ	0xFF4
  1755                           prodl	equ	0xFF3
  1756                           postinc0	equ	0xFEE
  1757                           wreg	equ	0xFE8
  1758                           postinc2	equ	0xFDE
  1759                           postdec2	equ	0xFDD
  1760                           fsr2h	equ	0xFDA
  1761                           fsr2l	equ	0xFD9
  1762                           status	equ	0xFD8
  1763                           
  1764 ;; *************** function _I2C_Master_Stop *****************
  1765 ;; Defined at:
  1766 ;;		line 95 in file "I2C.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;Total ram usage:        0 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    1
  1787 ;; This function calls:
  1788 ;;		_I2C_Master_Wait
  1789 ;; This function is called by:
  1790 ;;		_main
  1791 ;;		_motorStart_3
  1792 ;;		_motorStop_3
  1793 ;;		_motorStart_0
  1794 ;;		_motorStop_0
  1795 ;;		_motorStart_1
  1796 ;;		_motorStop_1
  1797 ;;		_motorStart_2
  1798 ;;		_motorStop_2
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text9
  1803  001700                     __ptext9:
  1804                           	opt stack 0
  1805  001700                     _I2C_Master_Stop:
  1806                           	opt stack 28
  1807                           
  1808                           ;I2C.c: 104: I2C_Master_Wait();
  1809                           
  1810                           ;incstack = 0
  1811  001700  EC72  F00B         	call	_I2C_Master_Wait	;wreg free
  1812                           
  1813                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1814  001704  84C5               	bsf	4037,2,c	;volatile
  1815  001706  0012               	return		;funcret
  1816  001708                     __end_of_I2C_Master_Stop:
  1817                           	opt stack 0
  1818                           tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           prodh	equ	0xFF4
  1823                           prodl	equ	0xFF3
  1824                           postinc0	equ	0xFEE
  1825                           wreg	equ	0xFE8
  1826                           postinc2	equ	0xFDE
  1827                           postdec2	equ	0xFDD
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function _I2C_Master_Start *****************
  1833 ;; Defined at:
  1834 ;;		line 69 in file "I2C.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0, cstack
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;Total ram usage:        0 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    1
  1855 ;; This function calls:
  1856 ;;		_I2C_Master_Wait
  1857 ;; This function is called by:
  1858 ;;		_main
  1859 ;;		_motorStart_3
  1860 ;;		_motorStop_3
  1861 ;;		_motorStart_0
  1862 ;;		_motorStop_0
  1863 ;;		_motorStart_1
  1864 ;;		_motorStop_1
  1865 ;;		_motorStart_2
  1866 ;;		_motorStop_2
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           	psect	text10
  1871  001708                     __ptext10:
  1872                           	opt stack 0
  1873  001708                     _I2C_Master_Start:
  1874                           	opt stack 28
  1875                           
  1876                           ;I2C.c: 78: I2C_Master_Wait();
  1877                           
  1878                           ;incstack = 0
  1879  001708  EC72  F00B         	call	_I2C_Master_Wait	;wreg free
  1880                           
  1881                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1882  00170C  80C5               	bsf	4037,0,c	;volatile
  1883  00170E  0012               	return		;funcret
  1884  001710                     __end_of_I2C_Master_Start:
  1885                           	opt stack 0
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           prodh	equ	0xFF4
  1891                           prodl	equ	0xFF3
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postinc2	equ	0xFDE
  1895                           postdec2	equ	0xFDD
  1896                           fsr2h	equ	0xFDA
  1897                           fsr2l	equ	0xFD9
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _I2C_Master_Wait *****************
  1901 ;; Defined at:
  1902 ;;		line 51 in file "I2C.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2, status,0
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;Total ram usage:        1 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_I2C_Master_Start
  1926 ;;		_I2C_Master_Stop
  1927 ;;		_I2C_Master_Write
  1928 ;;		_I2C_Master_RepeatedStart
  1929 ;;		_I2C_Master_Read
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text11
  1934  0016E4                     __ptext11:
  1935                           	opt stack 0
  1936  0016E4                     _I2C_Master_Wait:
  1937                           	opt stack 28
  1938                           
  1939                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1940                           
  1941                           ;incstack = 0
  1942  0016E4  B4C7               	btfsc	4039,2,c	;volatile
  1943  0016E6  D7FE               	goto	_I2C_Master_Wait
  1944  0016E8  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1945  0016EC  0E1F               	movlw	31
  1946  0016EE  1601               	andwf	??_I2C_Master_Wait,f,c
  1947  0016F0  B4D8               	btfsc	status,2,c
  1948  0016F2  0012               	return	
  1949  0016F4  D7F7               	goto	_I2C_Master_Wait
  1950  0016F6                     __end_of_I2C_Master_Wait:
  1951                           	opt stack 0
  1952                           tblptru	equ	0xFF8
  1953                           tblptrh	equ	0xFF7
  1954                           tblptrl	equ	0xFF6
  1955                           tablat	equ	0xFF5
  1956                           prodh	equ	0xFF4
  1957                           prodl	equ	0xFF3
  1958                           postinc0	equ	0xFEE
  1959                           wreg	equ	0xFE8
  1960                           postinc2	equ	0xFDE
  1961                           postdec2	equ	0xFDD
  1962                           fsr2h	equ	0xFDA
  1963                           fsr2l	equ	0xFD9
  1964                           status	equ	0xFD8
  1965                           
  1966 ;; *************** function _I2C_Master_Init *****************
  1967 ;; Defined at:
  1968 ;;		line 14 in file "I2C.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;		None
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  1    wreg      void 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;Total ram usage:        8 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    1
  1989 ;; This function calls:
  1990 ;;		___lldiv
  1991 ;; This function is called by:
  1992 ;;		_main
  1993 ;;		_motorStart_3
  1994 ;;		_motorStop_3
  1995 ;;		_motorStart_0
  1996 ;;		_motorStop_0
  1997 ;;		_motorStart_1
  1998 ;;		_motorStop_1
  1999 ;;		_motorStart_2
  2000 ;;		_motorStop_2
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text12
  2005  001486                     __ptext12:
  2006                           	opt stack 0
  2007  001486                     _I2C_Master_Init:
  2008                           	opt stack 28
  2009                           
  2010                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2011                           
  2012                           ;incstack = 0
  2013  001486  9AC6               	bcf	4038,5,c	;volatile
  2014                           
  2015                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2016  001488  8694               	bsf	3988,3,c	;volatile
  2017                           
  2018                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2019  00148A  8894               	bsf	3988,4,c	;volatile
  2020                           
  2021                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2022  00148C  0E80               	movlw	128
  2023  00148E  6EC7               	movwf	4039,c	;volatile
  2024                           
  2025                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2026  001490  0E28               	movlw	40
  2027  001492  6EC6               	movwf	4038,c	;volatile
  2028                           
  2029                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2030  001494  0E00               	movlw	0
  2031  001496  6EC5               	movwf	4037,c	;volatile
  2032                           
  2033                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
  2034  001498  0E00               	movlw	0
  2035  00149A  6E01               	movwf	___lldiv@dividend,c
  2036  00149C  0E48               	movlw	72
  2037  00149E  6E02               	movwf	___lldiv@dividend+1,c
  2038  0014A0  0EE8               	movlw	232
  2039  0014A2  6E03               	movwf	___lldiv@dividend+2,c
  2040  0014A4  0E01               	movlw	1
  2041  0014A6  6E04               	movwf	___lldiv@dividend+3,c
  2042  0014A8  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  2043  0014AC  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  2044  0014B0  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  2045  0014B4  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  2046  0014B8  0E02               	movlw	2
  2047  0014BA                     u445:
  2048  0014BA  90D8               	bcf	status,0,c
  2049  0014BC  3612               	rlcf	??_I2C_Master_Init,f,c
  2050  0014BE  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2051  0014C0  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2052  0014C2  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2053  0014C4  2EE8               	decfsz	wreg,f,c
  2054  0014C6  D7F9               	goto	u445
  2055  0014C8  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2056  0014CC  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2057  0014D0  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2058  0014D4  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2059  0014D8  ECC3  F009         	call	___lldiv	;wreg free
  2060  0014DC  0401               	decf	?___lldiv,w,c
  2061  0014DE  6EC8               	movwf	4040,c	;volatile
  2062  0014E0  0012               	return		;funcret
  2063  0014E2                     __end_of_I2C_Master_Init:
  2064                           	opt stack 0
  2065                           tblptru	equ	0xFF8
  2066                           tblptrh	equ	0xFF7
  2067                           tblptrl	equ	0xFF6
  2068                           tablat	equ	0xFF5
  2069                           prodh	equ	0xFF4
  2070                           prodl	equ	0xFF3
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           postinc2	equ	0xFDE
  2074                           postdec2	equ	0xFDD
  2075                           fsr2h	equ	0xFDA
  2076                           fsr2l	equ	0xFD9
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function ___lldiv *****************
  2080 ;; Defined at:
  2081 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;  dividend        4    0[COMRAM] unsigned long 
  2084 ;;  divisor         4    4[COMRAM] unsigned long 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  quotient        4    8[COMRAM] unsigned long 
  2087 ;;  counter         1   12[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  4    0[COMRAM] unsigned long 
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2097 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;Total ram usage:       13 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_I2C_Master_Init
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text13
  2111  001386                     __ptext13:
  2112                           	opt stack 0
  2113  001386                     ___lldiv:
  2114                           	opt stack 28
  2115                           
  2116                           ;incstack = 0
  2117  001386  0E00               	movlw	0
  2118  001388  6E09               	movwf	___lldiv@quotient,c
  2119  00138A  0E00               	movlw	0
  2120  00138C  6E0A               	movwf	___lldiv@quotient+1,c
  2121  00138E  0E00               	movlw	0
  2122  001390  6E0B               	movwf	___lldiv@quotient+2,c
  2123  001392  0E00               	movlw	0
  2124  001394  6E0C               	movwf	___lldiv@quotient+3,c
  2125  001396  5005               	movf	___lldiv@divisor,w,c
  2126  001398  1006               	iorwf	___lldiv@divisor+1,w,c
  2127  00139A  1007               	iorwf	___lldiv@divisor+2,w,c
  2128  00139C  1008               	iorwf	___lldiv@divisor+3,w,c
  2129  00139E  B4D8               	btfsc	status,2,c
  2130  0013A0  D02A               	goto	l645
  2131  0013A2  0E01               	movlw	1
  2132  0013A4  6E0D               	movwf	___lldiv@counter,c
  2133  0013A6  D006               	goto	l640
  2134  0013A8  90D8               	bcf	status,0,c
  2135  0013AA  3605               	rlcf	___lldiv@divisor,f,c
  2136  0013AC  3606               	rlcf	___lldiv@divisor+1,f,c
  2137  0013AE  3607               	rlcf	___lldiv@divisor+2,f,c
  2138  0013B0  3608               	rlcf	___lldiv@divisor+3,f,c
  2139  0013B2  2A0D               	incf	___lldiv@counter,f,c
  2140  0013B4                     l640:
  2141  0013B4  AE08               	btfss	___lldiv@divisor+3,7,c
  2142  0013B6  D7F8               	goto	l641
  2143  0013B8                     u420:
  2144  0013B8  90D8               	bcf	status,0,c
  2145  0013BA  3609               	rlcf	___lldiv@quotient,f,c
  2146  0013BC  360A               	rlcf	___lldiv@quotient+1,f,c
  2147  0013BE  360B               	rlcf	___lldiv@quotient+2,f,c
  2148  0013C0  360C               	rlcf	___lldiv@quotient+3,f,c
  2149  0013C2  5005               	movf	___lldiv@divisor,w,c
  2150  0013C4  5C01               	subwf	___lldiv@dividend,w,c
  2151  0013C6  5006               	movf	___lldiv@divisor+1,w,c
  2152  0013C8  5802               	subwfb	___lldiv@dividend+1,w,c
  2153  0013CA  5007               	movf	___lldiv@divisor+2,w,c
  2154  0013CC  5803               	subwfb	___lldiv@dividend+2,w,c
  2155  0013CE  5008               	movf	___lldiv@divisor+3,w,c
  2156  0013D0  5804               	subwfb	___lldiv@dividend+3,w,c
  2157  0013D2  A0D8               	btfss	status,0,c
  2158  0013D4  D009               	goto	l644
  2159  0013D6  5005               	movf	___lldiv@divisor,w,c
  2160  0013D8  5E01               	subwf	___lldiv@dividend,f,c
  2161  0013DA  5006               	movf	___lldiv@divisor+1,w,c
  2162  0013DC  5A02               	subwfb	___lldiv@dividend+1,f,c
  2163  0013DE  5007               	movf	___lldiv@divisor+2,w,c
  2164  0013E0  5A03               	subwfb	___lldiv@dividend+2,f,c
  2165  0013E2  5008               	movf	___lldiv@divisor+3,w,c
  2166  0013E4  5A04               	subwfb	___lldiv@dividend+3,f,c
  2167  0013E6  8009               	bsf	___lldiv@quotient,0,c
  2168  0013E8                     l644:
  2169  0013E8  90D8               	bcf	status,0,c
  2170  0013EA  3208               	rrcf	___lldiv@divisor+3,f,c
  2171  0013EC  3207               	rrcf	___lldiv@divisor+2,f,c
  2172  0013EE  3206               	rrcf	___lldiv@divisor+1,f,c
  2173  0013F0  3205               	rrcf	___lldiv@divisor,f,c
  2174  0013F2  2E0D               	decfsz	___lldiv@counter,f,c
  2175  0013F4  D7E1               	goto	u420
  2176  0013F6                     l645:
  2177  0013F6  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2178  0013FA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2179  0013FE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2180  001402  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2181  001406  0012               	return		;funcret
  2182  001408                     __end_of___lldiv:
  2183                           	opt stack 0
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           postinc0	equ	0xFEE
  2191                           wreg	equ	0xFE8
  2192                           postinc2	equ	0xFDE
  2193                           postdec2	equ	0xFDD
  2194                           fsr2h	equ	0xFDA
  2195                           fsr2l	equ	0xFD9
  2196                           status	equ	0xFD8
  2197                           
  2198 ;; *************** function _initLCD *****************
  2199 ;; Defined at:
  2200 ;;		line 60 in file "lcd.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;		None
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		wreg, status,2, status,0, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;Total ram usage:        1 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    2
  2221 ;; This function calls:
  2222 ;;		_lcdInst
  2223 ;; This function is called by:
  2224 ;;		_main
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           	psect	text14
  2229  001534                     __ptext14:
  2230                           	opt stack 0
  2231  001534                     _initLCD:
  2232                           	opt stack 28
  2233                           
  2234                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  2235                           
  2236                           ;incstack = 0
  2237  001534  0E9C               	movlw	156
  2238  001536  6E04               	movwf	??_initLCD& (0+255),c
  2239  001538  0ED7               	movlw	215
  2240  00153A                     u707:
  2241  00153A  2EE8               	decfsz	wreg,f,c
  2242  00153C  D7FE               	bra	u707
  2243  00153E  2E04               	decfsz	??_initLCD& (0+255),f,c
  2244  001540  D7FC               	bra	u707
  2245  001542  F000               	nop	
  2246                           
  2247                           ;lcd.c: 69: lcdInst(0b00110011);
  2248  001544  0E33               	movlw	51
  2249  001546  EC68  F00B         	call	_lcdInst
  2250                           
  2251                           ;lcd.c: 70: lcdInst(0b00110010);
  2252  00154A  0E32               	movlw	50
  2253  00154C  EC68  F00B         	call	_lcdInst
  2254                           
  2255                           ;lcd.c: 71: lcdInst(0b00101000);
  2256  001550  0E28               	movlw	40
  2257  001552  EC68  F00B         	call	_lcdInst
  2258                           
  2259                           ;lcd.c: 72: lcdInst(0b00001111);
  2260  001556  0E0F               	movlw	15
  2261  001558  EC68  F00B         	call	_lcdInst
  2262                           
  2263                           ;lcd.c: 73: lcdInst(0b00000110);
  2264  00155C  0E06               	movlw	6
  2265  00155E  EC68  F00B         	call	_lcdInst
  2266                           
  2267                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  2268  001562  0E01               	movlw	1
  2269  001564  EC68  F00B         	call	_lcdInst
  2270  001568  0E9C               	movlw	156
  2271  00156A  6E04               	movwf	??_initLCD& (0+255),c
  2272  00156C  0ED7               	movlw	215
  2273  00156E                     u717:
  2274  00156E  2EE8               	decfsz	wreg,f,c
  2275  001570  D7FE               	bra	u717
  2276  001572  2E04               	decfsz	??_initLCD& (0+255),f,c
  2277  001574  D7FC               	bra	u717
  2278  001576  F000               	nop	
  2279                           
  2280                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2281  001578  0E0F               	movlw	15
  2282  00157A  EC68  F00B         	call	_lcdInst
  2283  00157E  0012               	return		;funcret
  2284  001580                     __end_of_initLCD:
  2285                           	opt stack 0
  2286                           tblptru	equ	0xFF8
  2287                           tblptrh	equ	0xFF7
  2288                           tblptrl	equ	0xFF6
  2289                           tablat	equ	0xFF5
  2290                           prodh	equ	0xFF4
  2291                           prodl	equ	0xFF3
  2292                           postinc0	equ	0xFEE
  2293                           wreg	equ	0xFE8
  2294                           postinc2	equ	0xFDE
  2295                           postdec2	equ	0xFDD
  2296                           fsr2h	equ	0xFDA
  2297                           fsr2l	equ	0xFD9
  2298                           status	equ	0xFD8
  2299                           
  2300 ;; *************** function _lcdInst *****************
  2301 ;; Defined at:
  2302 ;;		line 11 in file "lcd.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  data            1    wreg     unsigned char 
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  data            1    2[COMRAM] unsigned char 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, status,2, status,0, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;Total ram usage:        1 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    1
  2323 ;; This function calls:
  2324 ;;		_lcdNibble
  2325 ;; This function is called by:
  2326 ;;		_main
  2327 ;;		_initLCD
  2328 ;;		_lcd_set_cursor
  2329 ;;		_lcd_shift_cursor
  2330 ;;		_lcd_shift_display
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text15
  2335  0016D0                     __ptext15:
  2336                           	opt stack 0
  2337  0016D0                     _lcdInst:
  2338                           	opt stack 29
  2339                           
  2340                           ;incstack = 0
  2341                           ;lcdInst@data stored from wreg
  2342  0016D0  6E03               	movwf	lcdInst@data,c
  2343                           
  2344                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  2345  0016D2  948C               	bcf	3980,2,c	;volatile
  2346                           
  2347                           ;lcd.c: 20: lcdNibble(data);
  2348  0016D4  5003               	movf	lcdInst@data,w,c
  2349  0016D6  EC04  F00A         	call	_lcdNibble
  2350                           
  2351                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2352  0016DA  0EA0               	movlw	160
  2353  0016DC                     u727:
  2354  0016DC  D000               	nop2	
  2355  0016DE  2EE8               	decfsz	wreg,f,c
  2356  0016E0  D7FD               	bra	u727
  2357  0016E2  0012               	return		;funcret
  2358  0016E4                     __end_of_lcdInst:
  2359                           	opt stack 0
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           prodh	equ	0xFF4
  2365                           prodl	equ	0xFF3
  2366                           postinc0	equ	0xFEE
  2367                           wreg	equ	0xFE8
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _lcdNibble *****************
  2375 ;; Defined at:
  2376 ;;		line 37 in file "lcd.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  data            1    wreg     unsigned char 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  data            1    1[COMRAM] unsigned char 
  2381 ;;  temp            1    0[COMRAM] unsigned char 
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, status,0
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;Total ram usage:        2 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_lcdInst
  2401 ;;		_putch
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text16
  2406  001408                     __ptext16:
  2407                           	opt stack 0
  2408  001408                     _lcdNibble:
  2409                           	opt stack 28
  2410                           
  2411                           ;incstack = 0
  2412                           ;lcdNibble@data stored from wreg
  2413  001408  6E02               	movwf	lcdNibble@data,c
  2414                           
  2415                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2416  00140A  5002               	movf	lcdNibble@data,w,c
  2417  00140C  0BF0               	andlw	240
  2418  00140E  6E01               	movwf	lcdNibble@temp,c
  2419                           
  2420                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2421  001410  508C               	movf	3980,w,c	;volatile
  2422  001412  0B0F               	andlw	15
  2423  001414  6E8C               	movwf	3980,c	;volatile
  2424                           
  2425                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2426  001416  5001               	movf	lcdNibble@temp,w,c
  2427  001418  108C               	iorwf	3980,w,c	;volatile
  2428  00141A  6E8C               	movwf	3980,c	;volatile
  2429                           
  2430                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2431  00141C  0E00               	movlw	0
  2432  00141E  BEF2               	btfsc	intcon,7,c	;volatile
  2433  001420  0E01               	movlw	1
  2434  001422  6E27               	movwf	lcd@LCDinterruptState,c
  2435  001424  9EF2               	bcf	intcon,7,c	;volatile
  2436  001426  868C               	bsf	3980,3,c	;volatile
  2437  001428  0E42               	movlw	66
  2438  00142A                     u737:
  2439  00142A  2EE8               	decfsz	wreg,f,c
  2440  00142C  D7FE               	bra	u737
  2441  00142E  D000               	nop2	
  2442  001430  968C               	bcf	3980,3,c	;volatile
  2443  001432  0EA0               	movlw	160
  2444  001434                     u747:
  2445  001434  D000               	nop2	
  2446  001436  2EE8               	decfsz	wreg,f,c
  2447  001438  D7FD               	bra	u747
  2448  00143A  B027               	btfsc	lcd@LCDinterruptState,0,c
  2449  00143C  D002               	bra	u15
  2450  00143E  9EF2               	bcf	intcon,7,c	;volatile
  2451  001440  D001               	bra	u16
  2452  001442                     u15:
  2453  001442  8EF2               	bsf	intcon,7,c	;volatile
  2454  001444                     u16:
  2455                           
  2456                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2457  001444  3802               	swapf	lcdNibble@data,w,c
  2458  001446  0BF0               	andlw	240
  2459  001448  6E02               	movwf	lcdNibble@data,c
  2460                           
  2461                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2462  00144A  5002               	movf	lcdNibble@data,w,c
  2463  00144C  0BF0               	andlw	240
  2464  00144E  6E01               	movwf	lcdNibble@temp,c
  2465                           
  2466                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2467  001450  508C               	movf	3980,w,c	;volatile
  2468  001452  0B0F               	andlw	15
  2469  001454  6E8C               	movwf	3980,c	;volatile
  2470                           
  2471                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2472  001456  5001               	movf	lcdNibble@temp,w,c
  2473  001458  108C               	iorwf	3980,w,c	;volatile
  2474  00145A  6E8C               	movwf	3980,c	;volatile
  2475                           
  2476                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2477  00145C  0E00               	movlw	0
  2478  00145E  BEF2               	btfsc	intcon,7,c	;volatile
  2479  001460  0E01               	movlw	1
  2480  001462  6E27               	movwf	lcd@LCDinterruptState,c
  2481  001464  9EF2               	bcf	intcon,7,c	;volatile
  2482  001466  868C               	bsf	3980,3,c	;volatile
  2483  001468  0E42               	movlw	66
  2484  00146A                     u757:
  2485  00146A  2EE8               	decfsz	wreg,f,c
  2486  00146C  D7FE               	bra	u757
  2487  00146E  D000               	nop2	
  2488  001470  968C               	bcf	3980,3,c	;volatile
  2489  001472  0EA0               	movlw	160
  2490  001474                     u767:
  2491  001474  D000               	nop2	
  2492  001476  2EE8               	decfsz	wreg,f,c
  2493  001478  D7FD               	bra	u767
  2494  00147A  B027               	btfsc	lcd@LCDinterruptState,0,c
  2495  00147C  D002               	bra	u25
  2496  00147E  9EF2               	bcf	intcon,7,c	;volatile
  2497  001480  D001               	bra	u26
  2498  001482                     u25:
  2499  001482  8EF2               	bsf	intcon,7,c	;volatile
  2500  001484                     u26:
  2501  001484  0012               	return		;funcret
  2502  001486                     __end_of_lcdNibble:
  2503                           	opt stack 0
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           postinc0	equ	0xFEE
  2512                           wreg	equ	0xFE8
  2513                           postinc2	equ	0xFDE
  2514                           postdec2	equ	0xFDD
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           prodh	equ	0xFF4
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           postinc0	equ	0xFEE
  2526                           wreg	equ	0xFE8
  2527                           postinc2	equ	0xFDE
  2528                           postdec2	equ	0xFDD
  2529                           fsr2h	equ	0xFDA
  2530                           fsr2l	equ	0xFD9
  2531                           status	equ	0xFD8
  2532                           
  2533                           	psect	rparam
  2534  0000                     tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           prodh	equ	0xFF4
  2539                           prodl	equ	0xFF3
  2540                           intcon	equ	0xFF2
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    36
    Data        2
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      43
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[15]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 
		 -> STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_3->_I2C_Master_Init
    _motorStart_3->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12029
                                             24 COMRAM     2     2      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                       _motorStart_3
                        _motorStop_3
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1633
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_3                                          0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_3                                         0     0      0    3398
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2378
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1020
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      2B       1       33.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      34        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 17:52:41 2018

                          _i 001B                           u15 1442                           u16 1444  
                         u25 1482                           u26 1484                  __CFG_CPD$ON 000000  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l111 11A2  
                        l103 109C                          l112 11B8                          l113 1236  
                        l114 11FE                          l106 10D6                          l123 166E  
                        l107 1112                          l271 1272                          l280 12D4  
                        l272 1282                          l284 1316                          l285 1364  
                        l286 131C                          l278 12AC                          l703 162A  
                        l640 13B4                          l704 1622                          l641 13A8  
                        l707 1642                          l644 13E8                          l708 164C  
                        l645 13F6                          l693 1500                          l694 14F8  
                        l697 1520                          l698 152A                 __CFG_CPB$OFF 000000  
                        u420 13B8                          u460 1504                          u445 14BA  
                        u550 1304                          u490 162E                          u570 136C  
                        u707 153A                          u717 156E                          u727 16DC  
                        u647 10C8                          u737 142A                          u657 114C  
                        u747 1434                          u667 11EC                          u757 146A  
                        u677 1224                          u767 1474                          u687 1258  
                        u697 16C8                          _max 002A                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1515 10D6  
                       l1439 12D8                         l1575 11FE                         _ADON 007E10  
                       STR_1 1031                         STR_2 1031                         STR_3 1034  
                       STR_4 1031                         STR_5 1031                         STR_6 1031  
                       STR_7 1025                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       _main 103A                         _keys 1001                         fsr2h 000FDA  
                       fsr2l 000FD9                         prodh 000FF4                         prodl 000FF3  
                       start 0000                __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000  
               ___param_bank 000000             __end_of_LCD_LEFT 1020             ?_I2C_Master_Init 000E  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lldiv 1408              __end_of___lwdiv 1534              __end_of___lwmod 1656  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 16E4               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_readADC 168E              __end_of_initLCD 1580  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C                        _array 101C  
                      _state 0025                        _putch 16BC                        tablat 000FF5  
          _LCDinterruptState 0029                        status 000FD8               __CFG_PBADEN$ON 000000  
            __initialization 168E                 __end_of_main 1268                 __end_of_keys 1012  
          __end_of_LCD_RIGHT 1021                       ??_main 0019                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0004  
                     _ADRESH 000FC4                       _ADRESL 000FC3                       ?_putch 0001  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
             __CFG_STVREN$ON 000000                    ??___lldiv 0009                    ??___lwdiv 0005  
                  ??___lwmod 000C                       clear_0 16AC                 ?_motorStop_3 0001  
                  ??_lcdInst 0003                       _printf 1268                    ??_readADC 0003  
                  ??_initLCD 0004                 __pdataCOMRAM 002A                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                 __accesstop 0080      __end_of__initialization 16B2                ___rparam_used 000001  
             __pcstackCOMRAM 0001                __end_of_array 101F                __end_of_putch 16D0  
         __size_of_lcdNibble 007E                      ??_putch 0003                      _I2Cdata 0028  
                    ?_printf 000D         lcd@LCDinterruptState 0027                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 1486  
                    __Hparam 0000                      __Lparam 0000                      ___lldiv 1386  
                    ___lwdiv 14E2                      ___lwmod 1614                 __psmallconst 1000  
                    __pcinit 168E                      __ramtop 1000                      _lcdInst 16D0  
                    __ptext0 103A                      __ptext1 1656                      __ptext2 1268  
                    __ptext3 16BC                      __ptext4 1614                      __ptext5 14E2  
                    __ptext6 1580                      __ptext7 15CA                      __ptext8 16F6  
                    __ptext9 1700              __size_of_printf 011E                      _readADC 1656  
                    _initLCD 1534         __size_of_motorStop_3 004A                      _dpowers 1012  
              ?_motorStart_3 0001                    _LCD_RIGHT 1020     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008         end_of_initialization 16B2  
      __end_of_LCD_SIZE_HORZ 1023        __end_of_LCD_SIZE_VERT 1022                __Lmediumconst 0000  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                      printf@c 0018                      printf@f 000D  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
             ??_motorStart_3 0016                    _TRISCbits 000F94                    _TRISDbits 000F95  
              __pidataCOMRAM 1710               __end_of_printf 1386          start_initialization 168E  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002  
           __CFG_OSC$INTIO67 000000                    _W_counter 0023     I2C_Master_Init@clockFreq 000E  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 0011                _analog_result 001D  
                __pbssCOMRAM 001B             _I2C_Master_Start 1708             _I2C_Master_Write 16F6  
       __end_of_motorStart_3 1614             ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000  
                  _lcdNibble 1408                     ?___lldiv 0001                     ?___lwdiv 0001  
                   ?___lwmod 0008                     ?_lcdInst 0001                     ?_readADC 0001  
                   ?_initLCD 0001                  __smallconst 1000             ___lwdiv@quotient 0005  
              _W_spacingTime 001F               __size_of_putch 0014                     _LCD_LEFT 101F  
                   _LATDbits 000F8C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
              ??_motorStop_3 0016                   _ADCON0bits 000FC2                   _ADCON2bits 000FC0  
              lcdNibble@data 0002                   printf@flag 0014                lcdNibble@temp 0001  
                 printf@prec 0015               _LCD_HORZ_LIMIT 1024                     __Hrparam 0000  
                   __Lrparam 0000                     _W_remain 0021           __CFG_BOREN$SBORDIS 000000  
           __size_of___lldiv 0082             __size_of___lwdiv 0052             __size_of___lwmod 0042  
             readADC@channel 0005             __size_of_lcdInst 0014              _I2C_Master_Init 1486  
           __size_of_readADC 0038             __size_of_initLCD 004C              _I2C_Master_Wait 16E4  
            _I2C_Master_Stop 1700       __end_of_LCD_HORZ_LIMIT 1025          __end_of_motorStop_3 15CA  
            ___lwdiv@divisor 0003              ___lwdiv@counter 0007                     __ptext10 1708  
                   __ptext11 16E4                     __ptext12 1486                     __ptext13 1386  
                   __ptext14 1534                     __ptext15 16D0                     __ptext16 1408  
             _LCD_VERT_LIMIT 1023        __size_of_motorStart_3 004A                __size_of_main 022E  
                ??_lcdNibble 0001                    printf@val 0016  I2C_Master_Write@byteToWrite 0002  
                  putch@data 0003     __end_of_I2C_Master_Start 1710                  _OSCTUNEbits 000F9B  
   __end_of_I2C_Master_Write 1700                   _INTCONbits 000FF2                 _motorStart_3 15CA  
     __end_of_LCD_VERT_LIMIT 1024                _LCD_SIZE_HORZ 1022             ___lwmod@dividend 0008  
              _LCD_SIZE_VERT 1021             ___lldiv@dividend 0001                   _OSCCONbits 000FD3  
                   printf@ap 0012      __end_of_I2C_Master_Init 14E2      __end_of_I2C_Master_Wait 16F6  
    __end_of_I2C_Master_Stop 1708                  lcdInst@data 0003                  _motorStop_3 1580  
           ___lldiv@quotient 0009              ___lwmod@divisor 000A              ___lwmod@counter 000C  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
