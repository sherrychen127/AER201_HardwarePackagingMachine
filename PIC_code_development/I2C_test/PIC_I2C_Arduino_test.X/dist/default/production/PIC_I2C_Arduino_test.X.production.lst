

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 12:33:51 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4620 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  0015B4                     __pidataCOMRAM:
    66                           	opt stack 0
    67                           
    68                           ;initializer for _max
    69  0015B4  0004               	dw	4
    70                           
    71                           	psect	smallconst
    72  001000                     __psmallconst:
    73                           	opt stack 0
    74  001000  00                 	db	0
    75  001001                     _keys:
    76                           	opt stack 0
    77  001001  31                 	db	49
    78  001002  32                 	db	50
    79  001003  33                 	db	51
    80  001004  41                 	db	65
    81  001005  34                 	db	52
    82  001006  35                 	db	53
    83  001007  36                 	db	54
    84  001008  42                 	db	66
    85  001009  37                 	db	55
    86  00100A  38                 	db	56
    87  00100B  39                 	db	57
    88  00100C  43                 	db	67
    89  00100D  2A                 	db	42
    90  00100E  30                 	db	48
    91  00100F  23                 	db	35
    92  001010  44                 	db	68
    93  001011  00                 	db	0
    94  001012                     __end_of_keys:
    95                           	opt stack 0
    96  001012                     _dpowers:
    97                           	opt stack 0
    98  001012  0001               	dw	1
    99  001014  000A               	dw	10
   100  001016  0064               	dw	100
   101  001018  03E8               	dw	1000
   102  00101A  2710               	dw	10000
   103  00101C                     __end_of_dpowers:
   104                           	opt stack 0
   105  00101C                     _array:
   106                           	opt stack 0
   107  00101C  31                 	db	49
   108  00101D  30                 	db	48
   109  00101E  00                 	db	0
   110  00101F                     __end_of_array:
   111                           	opt stack 0
   112  00101F                     _LCD_LEFT:
   113                           	opt stack 0
   114  00101F  00                 	db	0
   115  001020                     __end_of_LCD_LEFT:
   116                           	opt stack 0
   117  001020                     _LCD_RIGHT:
   118                           	opt stack 0
   119  001020  01                 	db	1
   120  001021                     __end_of_LCD_RIGHT:
   121                           	opt stack 0
   122  001021                     _LCD_SIZE_VERT:
   123                           	opt stack 0
   124  001021  02                 	db	2
   125  001022                     __end_of_LCD_SIZE_VERT:
   126                           	opt stack 0
   127  001022                     _LCD_SIZE_HORZ:
   128                           	opt stack 0
   129  001022  10                 	db	16
   130  001023                     __end_of_LCD_SIZE_HORZ:
   131                           	opt stack 0
   132  001023                     _LCD_VERT_LIMIT:
   133                           	opt stack 0
   134  001023  02                 	db	2
   135  001024                     __end_of_LCD_VERT_LIMIT:
   136                           	opt stack 0
   137  001024                     _LCD_HORZ_LIMIT:
   138                           	opt stack 0
   139  001024  28                 	db	40
   140  001025                     __end_of_LCD_HORZ_LIMIT:
   141                           	opt stack 0
   142  0000                     _SSPBUF	set	4041
   143  0000                     _SSPCON2bits	set	4037
   144  0000                     _SSPADD	set	4040
   145  0000                     _SSPCON2	set	4037
   146  0000                     _SSPCON1	set	4038
   147  0000                     _SSPSTAT	set	4039
   148  0000                     _SSPCON1bits	set	4038
   149  0000                     _TRISDbits	set	3989
   150  0000                     _LATDbits	set	3980
   151  0000                     _TRISCbits	set	3988
   152  0000                     _LATCbits	set	3979
   153  0000                     _ADRESH	set	4036
   154  0000                     _ADRESL	set	4035
   155  0000                     _ADCON0bits	set	4034
   156  0000                     _INTCONbits	set	4082
   157  0000                     _ADCON1	set	4033
   158  0000                     _ADCON0	set	4034
   159  0000                     _TRISE	set	3990
   160  0000                     _TRISD	set	3989
   161  0000                     _TRISC	set	3988
   162  0000                     _TRISB	set	3987
   163  0000                     _TRISA	set	3986
   164  0000                     _LATE	set	3981
   165  0000                     _LATD	set	3980
   166  0000                     _LATC	set	3979
   167  0000                     _LATB	set	3978
   168  0000                     _LATA	set	3977
   169  0000                     _ADON	set	32272
   170  0000                     _INT1IE	set	32643
   171  001025                     STR_4:
   172  001025  57                 	db	87	;'W'
   173  001026  61                 	db	97	;'a'
   174  001027  73                 	db	115	;'s'
   175  001028  68                 	db	104	;'h'
   176  001029  65                 	db	101	;'e'
   177  00102A  72                 	db	114	;'r'
   178  00102B  73                 	db	115	;'s'
   179  00102C  3A                 	db	58	;':'
   180  00102D  25                 	db	37
   181  00102E  64                 	db	100	;'d'
   182  00102F  00                 	db	0
   183  001030                     STR_3:
   184  001030  53                 	db	83	;'S'
   185  001031  70                 	db	112	;'p'
   186  001032  61                 	db	97	;'a'
   187  001033  63                 	db	99	;'c'
   188  001034  65                 	db	101	;'e'
   189  001035  72                 	db	114	;'r'
   190  001036  3A                 	db	58	;':'
   191  001037  25                 	db	37
   192  001038  64                 	db	100	;'d'
   193  001039  00                 	db	0
   194  00103A                     STR_1:
   195  00103A  42                 	db	66	;'B'
   196  00103B  6F                 	db	111	;'o'
   197  00103C  6C                 	db	108	;'l'
   198  00103D  74                 	db	116	;'t'
   199  00103E  73                 	db	115	;'s'
   200  00103F  3A                 	db	58	;':'
   201  001040  25                 	db	37
   202  001041  64                 	db	100	;'d'
   203  001042  00                 	db	0
   204  001043                     STR_2:
   205  001043  4E                 	db	78	;'N'
   206  001044  75                 	db	117	;'u'
   207  001045  74                 	db	116	;'t'
   208  001046  73                 	db	115	;'s'
   209  001047  3A                 	db	58	;':'
   210  001048  25                 	db	37
   211  001049  64                 	db	100	;'d'
   212  00104A  00                 	db	0
   213                           
   214                           ; #config settings
   215  00104B  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  001530                     __pcinit:
   219                           	opt stack 0
   220  001530                     start_initialization:
   221                           	opt stack 0
   222  001530                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Initialize objects allocated to COMRAM (2 bytes)
   226                           ; load TBLPTR registers with __pidataCOMRAM
   227  001530  0EB4               	movlw	low __pidataCOMRAM
   228  001532  6EF6               	movwf	tblptrl,c
   229  001534  0E15               	movlw	high __pidataCOMRAM
   230  001536  6EF7               	movwf	tblptrh,c
   231  001538  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   232  00153A  6EF8               	movwf	tblptru,c
   233  00153C  0009               	tblrd		*+	;fetch initializer
   234  00153E  CFF5 F02E          	movff	tablat,__pdataCOMRAM
   235  001542  0009               	tblrd		*+	;fetch initializer
   236  001544  CFF5 F02F          	movff	tablat,__pdataCOMRAM+1
   237                           
   238                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   239  001548  6A30               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   240                           
   241                           ; Clear objects allocated to COMRAM (18 bytes)
   242  00154A  EE00  F01C         	lfsr	0,__pbssCOMRAM
   243  00154E  0E12               	movlw	18
   244  001550                     clear_0:
   245  001550  6AEE               	clrf	postinc0,c
   246  001552  06E8               	decf	wreg,f,c
   247  001554  E1FD               	bnz	clear_0
   248  001556                     end_of_initialization:
   249                           	opt stack 0
   250  001556                     __end_of__initialization:
   251                           	opt stack 0
   252  001556  0E00               	movlw	low (__Lmediumconst shr (0+16))
   253  001558  6EF8               	movwf	tblptru,c
   254  00155A  0100               	movlb	0
   255  00155C  EF26  F008         	goto	_main	;jump to C main() function
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	bitbssCOMRAM
   264  000180                     __pbitbssCOMRAM:
   265                           	opt stack 0
   266  000180                     main@SEND:
   267                           	opt stack 0
   268  000180                     	ds	1
   269                           tblptru	equ	0xFF8
   270                           tblptrh	equ	0xFF7
   271                           tblptrl	equ	0xFF6
   272                           tablat	equ	0xFF5
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
   275                           
   276                           	psect	bssCOMRAM
   277  00001C                     __pbssCOMRAM:
   278                           	opt stack 0
   279  00001C                     _i:
   280                           	opt stack 0
   281  00001C                     	ds	2
   282  00001E                     _analog_result:
   283                           	opt stack 0
   284  00001E                     	ds	2
   285  000020                     _B_remain:
   286                           	opt stack 0
   287  000020                     	ds	2
   288  000022                     _W_counter:
   289                           	opt stack 0
   290  000022                     	ds	2
   291  000024                     _S_counter:
   292                           	opt stack 0
   293  000024                     	ds	2
   294  000026                     _N_counter:
   295                           	opt stack 0
   296  000026                     	ds	2
   297  000028                     _B_counter:
   298                           	opt stack 0
   299  000028                     	ds	2
   300  00002A                     _state:
   301                           	opt stack 0
   302  00002A                     	ds	2
   303  00002C                     lcd@LCDinterruptState:
   304                           	opt stack 0
   305  00002C                     	ds	1
   306  00002D                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	dataCOMRAM
   315  00002E                     __pdataCOMRAM:
   316                           	opt stack 0
   317  00002E                     _max:
   318                           	opt stack 0
   319  00002E                     	ds	2
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           
   327                           	psect	cstackCOMRAM
   328  000001                     __pcstackCOMRAM:
   329                           	opt stack 0
   330  000001                     ??_I2C_Master_Wait:
   331  000001                     ?___lwdiv:
   332                           	opt stack 0
   333  000001                     ?___lldiv:
   334                           	opt stack 0
   335  000001                     lcdNibble@temp:
   336                           	opt stack 0
   337  000001                     ___lwdiv@dividend:
   338                           	opt stack 0
   339  000001                     ___lldiv@dividend:
   340                           	opt stack 0
   341                           
   342                           ; 4 bytes @ 0x0
   343  000001                     	ds	1
   344  000002                     lcdNibble@data:
   345                           	opt stack 0
   346  000002                     I2C_Master_Write@byteToWrite:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x1
   350  000002                     	ds	1
   351  000003                     lcdInst@data:
   352                           	opt stack 0
   353  000003                     putch@data:
   354                           	opt stack 0
   355  000003                     ___lwdiv@divisor:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x2
   359  000003                     	ds	1
   360  000004                     ??_initLCD:
   361  000004                     
   362                           ; 1 bytes @ 0x3
   363  000004                     	ds	1
   364  000005                     ___lwdiv@quotient:
   365                           	opt stack 0
   366  000005                     ___lldiv@divisor:
   367                           	opt stack 0
   368                           
   369                           ; 4 bytes @ 0x4
   370  000005                     	ds	2
   371  000007                     ___lwdiv@counter:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x6
   375  000007                     	ds	1
   376  000008                     ?___lwmod:
   377                           	opt stack 0
   378  000008                     ___lwmod@dividend:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x7
   382  000008                     	ds	1
   383  000009                     ___lldiv@quotient:
   384                           	opt stack 0
   385                           
   386                           ; 4 bytes @ 0x8
   387  000009                     	ds	1
   388  00000A                     ___lwmod@divisor:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x9
   392  00000A                     	ds	2
   393  00000C                     ___lwmod@counter:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0xB
   397  00000C                     	ds	1
   398  00000D                     ?_printf:
   399                           	opt stack 0
   400  00000D                     ___lldiv@counter:
   401                           	opt stack 0
   402  00000D                     printf@f:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0xC
   406  00000D                     	ds	1
   407  00000E                     I2C_Master_Init@clockFreq:
   408                           	opt stack 0
   409                           
   410                           ; 4 bytes @ 0xD
   411  00000E                     	ds	3
   412  000011                     ??_printf:
   413                           
   414                           ; 1 bytes @ 0x10
   415  000011                     	ds	1
   416  000012                     ??_I2C_Master_Init:
   417  000012                     printf@ap:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x11
   421  000012                     	ds	2
   422  000014                     printf@flag:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x13
   426  000014                     	ds	1
   427  000015                     printf@prec:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x14
   431  000015                     	ds	1
   432  000016                     printf@val:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x15
   436  000016                     	ds	2
   437  000018                     printf@c:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x17
   441  000018                     	ds	1
   442  000019                     ??_main:
   443                           
   444                           ; 1 bytes @ 0x18
   445  000019                     	ds	2
   446  00001B                     main@counter:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x1A
   450  00001B                     	ds	1
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           
   458 ;;
   459 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   460 ;;
   461 ;; *************** function _main *****************
   462 ;; Defined at:
   463 ;;		line 94 in file "main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;  mem             3    0        unsigned char [3]
   468 ;;  counter         1   26[COMRAM] unsigned char 
   469 ;;  data            1    0        unsigned char 
   470 ;;  keypress        1    0        unsigned char 
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   483 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   484 ;;Total ram usage:        3 bytes
   485 ;; Hardware stack levels required when called:    3
   486 ;; This function calls:
   487 ;;		_I2C_Master_Init
   488 ;;		_I2C_Master_Start
   489 ;;		_I2C_Master_Stop
   490 ;;		_I2C_Master_Write
   491 ;;		_initLCD
   492 ;;		_printf
   493 ;; This function is called by:
   494 ;;		Startup code after reset
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text0
   499  00104C                     __ptext0:
   500                           	opt stack 0
   501  00104C                     _main:
   502                           	opt stack 28
   503                           
   504                           ;main.c: 100: LATA = 0x00;
   505                           
   506                           ;incstack = 0
   507  00104C  0E00               	movlw	0
   508  00104E  6E89               	movwf	3977,c	;volatile
   509                           
   510                           ;main.c: 101: LATB = 0x00;
   511  001050  0E00               	movlw	0
   512  001052  6E8A               	movwf	3978,c	;volatile
   513                           
   514                           ;main.c: 102: LATC = 0x00;
   515  001054  0E00               	movlw	0
   516  001056  6E8B               	movwf	3979,c	;volatile
   517                           
   518                           ;main.c: 103: LATD = 0x00;
   519  001058  0E00               	movlw	0
   520  00105A  6E8C               	movwf	3980,c	;volatile
   521                           
   522                           ;main.c: 104: LATE = 0x00;
   523  00105C  0E00               	movlw	0
   524  00105E  6E8D               	movwf	3981,c	;volatile
   525                           
   526                           ;main.c: 108: TRISA = 0xFF;
   527  001060  6892               	setf	3986,c	;volatile
   528                           
   529                           ;main.c: 109: TRISB = 0xFF;
   530  001062  6893               	setf	3987,c	;volatile
   531                           
   532                           ;main.c: 110: TRISC = 0b10000000;
   533  001064  0E80               	movlw	128
   534  001066  6E94               	movwf	3988,c	;volatile
   535                           
   536                           ;main.c: 114: TRISD = 0x00;
   537  001068  0E00               	movlw	0
   538  00106A  6E95               	movwf	3989,c	;volatile
   539                           
   540                           ;main.c: 115: TRISE = 0x00;
   541  00106C  0E00               	movlw	0
   542  00106E  6E96               	movwf	3990,c	;volatile
   543                           
   544                           ;main.c: 118: ADCON0 = 0x00;
   545  001070  0E00               	movlw	0
   546  001072  6EC2               	movwf	4034,c	;volatile
   547                           
   548                           ;main.c: 119: ADCON1 = 0b00001111;
   549  001074  0E0F               	movlw	15
   550  001076  6EC1               	movwf	4033,c	;volatile
   551                           
   552                           ;main.c: 123: initLCD();
   553  001078  EC51  F00A         	call	_initLCD	;wreg free
   554                           
   555                           ;main.c: 126: I2C_Master_Init(100000);
   556  00107C  0EA0               	movlw	160
   557  00107E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
   558  001080  0E86               	movlw	134
   559  001082  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
   560  001084  0E01               	movlw	1
   561  001086  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
   562  001088  0E00               	movlw	0
   563  00108A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
   564  00108C  ECFA  F009         	call	_I2C_Master_Init	;wreg free
   565                           
   566                           ;main.c: 127: I2C_Master_Start();
   567  001090  ECD6  F00A         	call	_I2C_Master_Start	;wreg free
   568                           
   569                           ;main.c: 134: I2C_Master_Write(0b00010000);
   570  001094  0E00               	movlw	0
   571  001096  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   572  001098  0E10               	movlw	16
   573  00109A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   574  00109C  ECCD  F00A         	call	_I2C_Master_Write	;wreg free
   575                           
   576                           ;main.c: 135: I2C_Master_Stop();
   577  0010A0  ECD2  F00A         	call	_I2C_Master_Stop	;wreg free
   578                           
   579                           ;main.c: 138: unsigned char mem[3];
   580                           ;main.c: 139: unsigned char counter = 0;
   581  0010A4  0E00               	movlw	0
   582  0010A6  6E1B               	movwf	main@counter,c
   583                           
   584                           ;main.c: 140: unsigned char keypress;
   585                           ;main.c: 141: unsigned char data;
   586                           ;main.c: 142: static bit SEND;
   587                           ;main.c: 143: SEND = 1;
   588  0010A8  8030               	bsf	main@SEND/(0+8),main@SEND& (0+7),c
   589                           
   590                           ;main.c: 153: I2C_Master_Start();
   591  0010AA  ECD6  F00A         	call	_I2C_Master_Start	;wreg free
   592                           
   593                           ;main.c: 154: I2C_Master_Write(0b00010000);
   594  0010AE  0E00               	movlw	0
   595  0010B0  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   596  0010B2  0E10               	movlw	16
   597  0010B4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   598  0010B6  ECCD  F00A         	call	_I2C_Master_Write	;wreg free
   599                           
   600                           ;main.c: 155: I2C_Master_Write(14);
   601  0010BA  0E00               	movlw	0
   602  0010BC  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   603  0010BE  0E0E               	movlw	14
   604  0010C0  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   605  0010C2  ECCD  F00A         	call	_I2C_Master_Write	;wreg free
   606                           
   607                           ;main.c: 156: I2C_Master_Stop();
   608  0010C6  ECD2  F00A         	call	_I2C_Master_Stop	;wreg free
   609                           
   610                           ;main.c: 160: INT1IE = 1;
   611  0010CA  86F0               	bsf	intcon3,3,c	;volatile
   612                           
   613                           ;main.c: 161: (INTCONbits.GIE = 1);
   614  0010CC  8EF2               	bsf	intcon,7,c	;volatile
   615                           
   616                           ;main.c: 164: initLCD();
   617  0010CE  EC51  F00A         	call	_initLCD	;wreg free
   618                           
   619                           ;main.c: 165: _delay((unsigned long)((4000)*(40000000/4000.0)));
   620  0010D2  0ECB               	movlw	203
   621  0010D4  6E1A               	movwf	(??_main+1)& (0+255),c
   622  0010D6  0EEC               	movlw	236
   623  0010D8  6E19               	movwf	??_main& (0+255),c
   624  0010DA  0E84               	movlw	132
   625  0010DC                     u557:
   626  0010DC  2EE8               	decfsz	wreg,f,c
   627  0010DE  D7FE               	bra	u557
   628  0010E0  2E19               	decfsz	??_main& (0+255),f,c
   629  0010E2  D7FC               	bra	u557
   630  0010E4  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   631  0010E6  D7FA               	bra	u557
   632  0010E8  D000               	nop2	
   633                           
   634                           ;main.c: 166: _delay((unsigned long)((4000)*(40000000/4000.0)));
   635  0010EA  0ECB               	movlw	203
   636  0010EC  6E1A               	movwf	(??_main+1)& (0+255),c
   637  0010EE  0EEC               	movlw	236
   638  0010F0  6E19               	movwf	??_main& (0+255),c
   639  0010F2  0E84               	movlw	132
   640  0010F4                     u567:
   641  0010F4  2EE8               	decfsz	wreg,f,c
   642  0010F6  D7FE               	bra	u567
   643  0010F8  2E19               	decfsz	??_main& (0+255),f,c
   644  0010FA  D7FC               	bra	u567
   645  0010FC  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   646  0010FE  D7FA               	bra	u567
   647  001100  D000               	nop2	
   648                           
   649                           ;main.c: 167: _delay((unsigned long)((4000)*(40000000/4000.0)));
   650  001102  0ECB               	movlw	203
   651  001104  6E1A               	movwf	(??_main+1)& (0+255),c
   652  001106  0EEC               	movlw	236
   653  001108  6E19               	movwf	??_main& (0+255),c
   654  00110A  0E84               	movlw	132
   655  00110C                     u577:
   656  00110C  2EE8               	decfsz	wreg,f,c
   657  00110E  D7FE               	bra	u577
   658  001110  2E19               	decfsz	??_main& (0+255),f,c
   659  001112  D7FC               	bra	u577
   660  001114  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   661  001116  D7FA               	bra	u577
   662  001118  D000               	nop2	
   663                           
   664                           ;main.c: 202: initLCD();
   665  00111A  EC51  F00A         	call	_initLCD	;wreg free
   666                           
   667                           ;main.c: 203: printf("Bolts:%d",B_counter);
   668  00111E  0E3A               	movlw	low STR_1
   669  001120  6E0D               	movwf	printf@f,c
   670  001122  0E10               	movlw	high STR_1
   671  001124  6E0E               	movwf	printf@f+1,c
   672  001126  C028  F00F         	movff	_B_counter,?_printf+2
   673  00112A  C029  F010         	movff	_B_counter+1,?_printf+3
   674  00112E  ECEB  F008         	call	_printf	;wreg free
   675                           
   676                           ;main.c: 204: _delay((unsigned long)((1000)*(40000000/4000.0)));
   677  001132  0E33               	movlw	51
   678  001134  6E1A               	movwf	(??_main+1)& (0+255),c
   679  001136  0EBB               	movlw	187
   680  001138  6E19               	movwf	??_main& (0+255),c
   681  00113A  0EE0               	movlw	224
   682  00113C                     u587:
   683  00113C  2EE8               	decfsz	wreg,f,c
   684  00113E  D7FE               	bra	u587
   685  001140  2E19               	decfsz	??_main& (0+255),f,c
   686  001142  D7FC               	bra	u587
   687  001144  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   688  001146  D7FA               	bra	u587
   689                           
   690                           ;main.c: 206: initLCD();
   691  001148  EC51  F00A         	call	_initLCD	;wreg free
   692                           
   693                           ;main.c: 207: printf("Nuts:%d",N_counter);
   694  00114C  0E43               	movlw	low STR_2
   695  00114E  6E0D               	movwf	printf@f,c
   696  001150  0E10               	movlw	high STR_2
   697  001152  6E0E               	movwf	printf@f+1,c
   698  001154  C026  F00F         	movff	_N_counter,?_printf+2
   699  001158  C027  F010         	movff	_N_counter+1,?_printf+3
   700  00115C  ECEB  F008         	call	_printf	;wreg free
   701                           
   702                           ;main.c: 208: _delay((unsigned long)((1000)*(40000000/4000.0)));
   703  001160  0E33               	movlw	51
   704  001162  6E1A               	movwf	(??_main+1)& (0+255),c
   705  001164  0EBB               	movlw	187
   706  001166  6E19               	movwf	??_main& (0+255),c
   707  001168  0EE0               	movlw	224
   708  00116A                     u597:
   709  00116A  2EE8               	decfsz	wreg,f,c
   710  00116C  D7FE               	bra	u597
   711  00116E  2E19               	decfsz	??_main& (0+255),f,c
   712  001170  D7FC               	bra	u597
   713  001172  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   714  001174  D7FA               	bra	u597
   715                           
   716                           ;main.c: 210: initLCD();
   717  001176  EC51  F00A         	call	_initLCD	;wreg free
   718                           
   719                           ;main.c: 211: printf("Spacer:%d",S_counter);
   720  00117A  0E30               	movlw	low STR_3
   721  00117C  6E0D               	movwf	printf@f,c
   722  00117E  0E10               	movlw	high STR_3
   723  001180  6E0E               	movwf	printf@f+1,c
   724  001182  C024  F00F         	movff	_S_counter,?_printf+2
   725  001186  C025  F010         	movff	_S_counter+1,?_printf+3
   726  00118A  ECEB  F008         	call	_printf	;wreg free
   727                           
   728                           ;main.c: 212: _delay((unsigned long)((1000)*(40000000/4000.0)));
   729  00118E  0E33               	movlw	51
   730  001190  6E1A               	movwf	(??_main+1)& (0+255),c
   731  001192  0EBB               	movlw	187
   732  001194  6E19               	movwf	??_main& (0+255),c
   733  001196  0EE0               	movlw	224
   734  001198                     u607:
   735  001198  2EE8               	decfsz	wreg,f,c
   736  00119A  D7FE               	bra	u607
   737  00119C  2E19               	decfsz	??_main& (0+255),f,c
   738  00119E  D7FC               	bra	u607
   739  0011A0  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   740  0011A2  D7FA               	bra	u607
   741                           
   742                           ;main.c: 214: initLCD();
   743  0011A4  EC51  F00A         	call	_initLCD	;wreg free
   744                           
   745                           ;main.c: 215: printf("Washers:%d",W_counter);
   746  0011A8  0E25               	movlw	low STR_4
   747  0011AA  6E0D               	movwf	printf@f,c
   748  0011AC  0E10               	movlw	high STR_4
   749  0011AE  6E0E               	movwf	printf@f+1,c
   750  0011B0  C022  F00F         	movff	_W_counter,?_printf+2
   751  0011B4  C023  F010         	movff	_W_counter+1,?_printf+3
   752  0011B8  ECEB  F008         	call	_printf	;wreg free
   753                           
   754                           ;main.c: 216: _delay((unsigned long)((1000)*(40000000/4000.0)));
   755  0011BC  0E33               	movlw	51
   756  0011BE  6E1A               	movwf	(??_main+1)& (0+255),c
   757  0011C0  0EBB               	movlw	187
   758  0011C2  6E19               	movwf	??_main& (0+255),c
   759  0011C4  0EE0               	movlw	224
   760  0011C6                     u617:
   761  0011C6  2EE8               	decfsz	wreg,f,c
   762  0011C8  D7FE               	bra	u617
   763  0011CA  2E19               	decfsz	??_main& (0+255),f,c
   764  0011CC  D7FC               	bra	u617
   765  0011CE  2E1A               	decfsz	(??_main+1)& (0+255),f,c
   766  0011D0  D7FA               	bra	u617
   767  0011D2  EF00  F000         	goto	start
   768  0011D6                     __end_of_main:
   769                           	opt stack 0
   770                           tblptru	equ	0xFF8
   771                           tblptrh	equ	0xFF7
   772                           tblptrl	equ	0xFF6
   773                           tablat	equ	0xFF5
   774                           intcon	equ	0xFF2
   775                           intcon3	equ	0xFF0
   776                           postinc0	equ	0xFEE
   777                           wreg	equ	0xFE8
   778                           
   779 ;; *************** function _printf *****************
   780 ;; Defined at:
   781 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  f               2   12[COMRAM] PTR const unsigned char 
   784 ;;		 -> STR_4(11), STR_3(10), STR_2(8), STR_1(9), 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  tmpval          4    0        struct .
   787 ;;  cp              3    0        PTR const unsigned char 
   788 ;;  val             2   21[COMRAM] unsigned int 
   789 ;;  ap              2   17[COMRAM] PTR void [1]
   790 ;;		 -> ?_printf(2), 
   791 ;;  len             2    0        unsigned int 
   792 ;;  c               1   23[COMRAM] char 
   793 ;;  prec            1   20[COMRAM] char 
   794 ;;  flag            1   19[COMRAM] unsigned char 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  2   12[COMRAM] int 
   797 ;; Registers used:
   798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   804 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   805 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   807 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   808 ;;Total ram usage:       12 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    2
   811 ;; This function calls:
   812 ;;		___lwdiv
   813 ;;		___lwmod
   814 ;;		_putch
   815 ;; This function is called by:
   816 ;;		_main
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text1
   821  0011D6                     __ptext1:
   822                           	opt stack 0
   823  0011D6                     _printf:
   824                           	opt stack 28
   825                           
   826                           ;doprnt.c: 466: va_list ap;
   827                           ;doprnt.c: 499: signed char c;
   828                           ;doprnt.c: 506: signed char prec;
   829                           ;doprnt.c: 508: unsigned char flag;
   830                           ;doprnt.c: 523: union {
   831                           ;doprnt.c: 524: unsigned long vd;
   832                           ;doprnt.c: 525: double integ;
   833                           ;doprnt.c: 526: } tmpval;
   834                           ;doprnt.c: 528: unsigned int val;
   835                           ;doprnt.c: 529: unsigned len;
   836                           ;doprnt.c: 530: const char * cp;
   837                           ;doprnt.c: 533: *ap = __va_start();
   838                           
   839                           ;incstack = 0
   840  0011D6  0E0F               	movlw	low (?_printf+2)
   841  0011D8  6E12               	movwf	printf@ap,c
   842  0011DA  0E00               	movlw	high (?_printf+2)
   843  0011DC  6E13               	movwf	printf@ap+1,c
   844                           
   845                           ;doprnt.c: 536: while(c = *f++) {
   846  0011DE  D07D               	goto	u530
   847  0011E0                     
   848                           ;doprnt.c: 538: if(c != '%')
   849  0011E0  0E25               	movlw	37
   850  0011E2  1818               	xorwf	printf@c,w,c
   851  0011E4  B4D8               	btfsc	status,2,c
   852  0011E6  D004               	goto	l254
   853                           
   854                           ;doprnt.c: 540: {
   855                           ;doprnt.c: 541: (putch(c) );
   856  0011E8  5018               	movf	printf@c,w,c
   857  0011EA  ECB0  F00A         	call	_putch
   858                           
   859                           ;doprnt.c: 542: continue;
   860  0011EE  D075               	goto	u530
   861  0011F0                     l254:
   862                           
   863                           ;doprnt.c: 543: }
   864                           ;doprnt.c: 548: flag = 0;
   865  0011F0  0E00               	movlw	0
   866  0011F2  6E14               	movwf	printf@flag,c
   867                           
   868                           ;doprnt.c: 822: }
   869                           
   870                           ;doprnt.c: 813: continue;
   871                           
   872                           ;doprnt.c: 802: default:
   873                           
   874                           ;doprnt.c: 698: case 'i':
   875                           ;doprnt.c: 699: break;
   876                           
   877                           ;doprnt.c: 697: case 'd':
   878                           
   879                           ;doprnt.c: 638: goto alldone;
   880                           
   881                           ;doprnt.c: 637: case 0:
   882                           
   883                           ;doprnt.c: 635: switch(c = *f++) {
   884  0011F4  C00D  FFF6         	movff	printf@f,tblptrl
   885  0011F8  C00E  FFF7         	movff	printf@f+1,tblptrh
   886  0011FC  4A0D               	infsnz	printf@f,f,c
   887  0011FE  2A0E               	incf	printf@f+1,f,c
   888  001200                     	if	0	;tblptru may be non-zero
   889  001200                     	endif
   890  001200                     	if	0	;tblptru may be non-zero
   891  001200                     	endif
   892  001200  0008               	tblrd		*
   893  001202  CFF5 F018          	movff	tablat,printf@c
   894  001206  5018               	movf	printf@c,w,c
   895                           
   896                           ; Switch size 1, requested type "space"
   897                           ; Number of cases is 3, Range of values is 0 to 105
   898                           ; switch strategies available:
   899                           ; Name         Instructions Cycles
   900                           ; simple_byte           10     6 (average)
   901                           ;	Chosen strategy is simple_byte
   902  001208  0A00               	xorlw	0	; case 0
   903  00120A  B4D8               	btfsc	status,2,c
   904  00120C  0012               	return	
   905  00120E  0A64               	xorlw	100	; case 100
   906  001210  B4D8               	btfsc	status,2,c
   907  001212  D003               	goto	l260
   908  001214  0A0D               	xorlw	13	; case 105
   909  001216  A4D8               	btfss	status,2,c
   910  001218  D060               	goto	u530
   911  00121A                     l260:
   912                           
   913                           ;doprnt.c: 1253: {
   914                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   915  00121A  C012  FFD9         	movff	printf@ap,fsr2l
   916  00121E  C013  FFDA         	movff	printf@ap+1,fsr2h
   917  001222  CFDE F016          	movff	postinc2,printf@val
   918  001226  CFDD F017          	movff	postdec2,printf@val+1
   919  00122A  0E02               	movlw	2
   920  00122C  2612               	addwf	printf@ap,f,c
   921  00122E  0E00               	movlw	0
   922  001230  2213               	addwfc	printf@ap+1,f,c
   923                           
   924                           ;doprnt.c: 1261: if((int)val < 0) {
   925  001232  AE17               	btfss	printf@val+1,7,c
   926  001234  D006               	goto	l262
   927                           
   928                           ;doprnt.c: 1262: flag |= 0x03;
   929  001236  0E03               	movlw	3
   930  001238  1214               	iorwf	printf@flag,f,c
   931                           
   932                           ;doprnt.c: 1263: val = -val;
   933  00123A  6C16               	negf	printf@val,c
   934  00123C  1E17               	comf	printf@val+1,f,c
   935  00123E  B0D8               	btfsc	status,0,c
   936  001240  2A17               	incf	printf@val+1,f,c
   937  001242                     l262:
   938                           
   939                           ;doprnt.c: 1264: }
   940                           ;doprnt.c: 1266: }
   941                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   942  001242  0E01               	movlw	1
   943  001244  6E18               	movwf	printf@c,c
   944  001246                     l1379:
   945  001246  0E05               	movlw	5
   946  001248  1818               	xorwf	printf@c,w,c
   947  00124A  B4D8               	btfsc	status,2,c
   948  00124C  D012               	goto	u510
   949                           
   950                           ;doprnt.c: 1306: if(val < dpowers[c])
   951  00124E  5018               	movf	printf@c,w,c
   952  001250  0D02               	mullw	2
   953  001252  0E12               	movlw	low _dpowers
   954  001254  24F3               	addwf	prodl,w,c
   955  001256  6EF6               	movwf	tblptrl,c
   956  001258  0E10               	movlw	high _dpowers
   957  00125A  20F4               	addwfc	prodh,w,c
   958  00125C  6EF7               	movwf	tblptrh,c
   959  00125E                     	if	0	;There are less than 3 active tblptr bytes
   960  00125E                     	endif
   961  00125E  0009               	tblrd		*+
   962  001260  50F5               	movf	tablat,w,c
   963  001262  5C16               	subwf	printf@val,w,c
   964  001264  0009               	tblrd		*+
   965  001266  50F5               	movf	tablat,w,c
   966  001268  5817               	subwfb	printf@val+1,w,c
   967  00126A  A0D8               	btfss	status,0,c
   968  00126C  D002               	goto	u510
   969                           
   970                           ;doprnt.c: 1307: break;
   971  00126E  2A18               	incf	printf@c,f,c
   972  001270  D7EA               	goto	l1379
   973  001272                     u510:
   974                           
   975                           ;doprnt.c: 1422: {
   976                           ;doprnt.c: 1438: if(flag & 0x03)
   977  001272  C014  F011         	movff	printf@flag,??_printf
   978  001276  0E03               	movlw	3
   979  001278  1611               	andwf	??_printf,f,c
   980  00127A  B4D8               	btfsc	status,2,c
   981  00127C  D003               	goto	l266
   982                           
   983                           ;doprnt.c: 1439: (putch('-') );
   984  00127E  0E2D               	movlw	45
   985  001280  ECB0  F00A         	call	_putch
   986  001284                     l266:
   987                           
   988                           ;doprnt.c: 1469: }
   989                           ;doprnt.c: 1472: prec = c;
   990  001284  C018  F015         	movff	printf@c,printf@prec
   991                           
   992                           ;doprnt.c: 1474: while(prec--) {
   993  001288  D024               	goto	l267
   994  00128A                     
   995                           ;doprnt.c: 1478: {
   996                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   997  00128A  5015               	movf	printf@prec,w,c
   998  00128C  0D02               	mullw	2
   999  00128E  0E12               	movlw	low _dpowers
  1000  001290  24F3               	addwf	prodl,w,c
  1001  001292  6EF6               	movwf	tblptrl,c
  1002  001294  0E10               	movlw	high _dpowers
  1003  001296  20F4               	addwfc	prodh,w,c
  1004  001298  6EF7               	movwf	tblptrh,c
  1005  00129A                     	if	0	;There are less than 3 active tblptr bytes
  1006  00129A                     	endif
  1007  00129A  0009               	tblrd		*+
  1008  00129C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1009  0012A0  000A               	tblrd		*-
  1010  0012A2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1011  0012A6  C016  F001         	movff	printf@val,___lwdiv@dividend
  1012  0012AA  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  1013  0012AE  EC28  F00A         	call	___lwdiv	;wreg free
  1014  0012B2  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1015  0012B6  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1016  0012BA  0E00               	movlw	0
  1017  0012BC  6E0B               	movwf	___lwmod@divisor+1,c
  1018  0012BE  0E0A               	movlw	10
  1019  0012C0  6E0A               	movwf	___lwmod@divisor,c
  1020  0012C2  EC77  F00A         	call	___lwmod	;wreg free
  1021  0012C6  5008               	movf	?___lwmod,w,c
  1022  0012C8  0F30               	addlw	48
  1023  0012CA  6E18               	movwf	printf@c,c
  1024                           
  1025                           ;doprnt.c: 1523: }
  1026                           ;doprnt.c: 1524: (putch(c) );
  1027  0012CC  5018               	movf	printf@c,w,c
  1028  0012CE  ECB0  F00A         	call	_putch
  1029  0012D2                     l267:
  1030  0012D2  0615               	decf	printf@prec,f,c
  1031  0012D4  2815               	incf	printf@prec,w,c
  1032  0012D6  A4D8               	btfss	status,2,c
  1033  0012D8  D7D8               	goto	l268
  1034  0012DA                     u530:
  1035  0012DA  C00D  FFF6         	movff	printf@f,tblptrl
  1036  0012DE  C00E  FFF7         	movff	printf@f+1,tblptrh
  1037  0012E2  4A0D               	infsnz	printf@f,f,c
  1038  0012E4  2A0E               	incf	printf@f+1,f,c
  1039  0012E6                     	if	0	;tblptru may be non-zero
  1040  0012E6                     	endif
  1041  0012E6                     	if	0	;tblptru may be non-zero
  1042  0012E6                     	endif
  1043  0012E6  0008               	tblrd		*
  1044  0012E8  CFF5 F018          	movff	tablat,printf@c
  1045  0012EC  5018               	movf	printf@c,w,c
  1046  0012EE  B4D8               	btfsc	status,2,c
  1047  0012F0  0012               	return	
  1048  0012F2  D776               	goto	l253
  1049  0012F4                     __end_of_printf:
  1050                           	opt stack 0
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           prodh	equ	0xFF4
  1056                           prodl	equ	0xFF3
  1057                           intcon	equ	0xFF2
  1058                           intcon3	equ	0xFF0
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           postinc2	equ	0xFDE
  1062                           postdec2	equ	0xFDD
  1063                           fsr2h	equ	0xFDA
  1064                           fsr2l	equ	0xFD9
  1065                           status	equ	0xFD8
  1066                           
  1067 ;; *************** function _putch *****************
  1068 ;; Defined at:
  1069 ;;		line 24 in file "lcd.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;  data            1    wreg     unsigned char 
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;  data            1    2[COMRAM] unsigned char 
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, status,2, status,0, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;Total ram usage:        1 bytes
  1088 ;; Hardware stack levels used:    1
  1089 ;; Hardware stack levels required when called:    1
  1090 ;; This function calls:
  1091 ;;		_lcdNibble
  1092 ;; This function is called by:
  1093 ;;		_printf
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text2
  1098  001560                     __ptext2:
  1099                           	opt stack 0
  1100  001560                     _putch:
  1101                           	opt stack 28
  1102                           
  1103                           ;incstack = 0
  1104                           ;putch@data stored from wreg
  1105  001560  6E03               	movwf	putch@data,c
  1106                           
  1107                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1108  001562  848C               	bsf	3980,2,c	;volatile
  1109                           
  1110                           ;lcd.c: 33: lcdNibble(data);
  1111  001564  5003               	movf	putch@data,w,c
  1112  001566  ECBB  F009         	call	_lcdNibble
  1113                           
  1114                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1115  00156A  0EC8               	movlw	200
  1116  00156C                     u627:
  1117  00156C  D000               	nop2	
  1118  00156E  2EE8               	decfsz	wreg,f,c
  1119  001570  D7FD               	bra	u627
  1120  001572  0012               	return		;funcret
  1121  001574                     __end_of_putch:
  1122                           	opt stack 0
  1123                           tblptru	equ	0xFF8
  1124                           tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           tablat	equ	0xFF5
  1127                           prodh	equ	0xFF4
  1128                           prodl	equ	0xFF3
  1129                           intcon	equ	0xFF2
  1130                           intcon3	equ	0xFF0
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           postinc2	equ	0xFDE
  1134                           postdec2	equ	0xFDD
  1135                           fsr2h	equ	0xFDA
  1136                           fsr2l	equ	0xFD9
  1137                           status	equ	0xFD8
  1138                           
  1139 ;; *************** function ___lwmod *****************
  1140 ;; Defined at:
  1141 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  dividend        2    7[COMRAM] unsigned int 
  1144 ;;  divisor         2    9[COMRAM] unsigned int 
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;  counter         1   11[COMRAM] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  2    7[COMRAM] unsigned int 
  1149 ;; Registers used:
  1150 ;;		wreg, status,2, status,0
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1156 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1160 ;;Total ram usage:        5 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_printf
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text3
  1170  0014EE                     __ptext3:
  1171                           	opt stack 0
  1172  0014EE                     ___lwmod:
  1173                           	opt stack 29
  1174                           
  1175                           ;incstack = 0
  1176  0014EE  500A               	movf	___lwmod@divisor,w,c
  1177  0014F0  100B               	iorwf	___lwmod@divisor+1,w,c
  1178  0014F2  B4D8               	btfsc	status,2,c
  1179  0014F4  D018               	goto	l690
  1180  0014F6  0E01               	movlw	1
  1181  0014F8  6E0C               	movwf	___lwmod@counter,c
  1182  0014FA  D004               	goto	l685
  1183  0014FC  90D8               	bcf	status,0,c
  1184  0014FE  360A               	rlcf	___lwmod@divisor,f,c
  1185  001500  360B               	rlcf	___lwmod@divisor+1,f,c
  1186  001502  2A0C               	incf	___lwmod@counter,f,c
  1187  001504                     l685:
  1188  001504  AE0B               	btfss	___lwmod@divisor+1,7,c
  1189  001506  D7FA               	goto	l686
  1190  001508                     u440:
  1191  001508  500A               	movf	___lwmod@divisor,w,c
  1192  00150A  5C08               	subwf	___lwmod@dividend,w,c
  1193  00150C  500B               	movf	___lwmod@divisor+1,w,c
  1194  00150E  5809               	subwfb	___lwmod@dividend+1,w,c
  1195  001510  A0D8               	btfss	status,0,c
  1196  001512  D004               	goto	l689
  1197  001514  500A               	movf	___lwmod@divisor,w,c
  1198  001516  5E08               	subwf	___lwmod@dividend,f,c
  1199  001518  500B               	movf	___lwmod@divisor+1,w,c
  1200  00151A  5A09               	subwfb	___lwmod@dividend+1,f,c
  1201  00151C                     l689:
  1202  00151C  90D8               	bcf	status,0,c
  1203  00151E  320B               	rrcf	___lwmod@divisor+1,f,c
  1204  001520  320A               	rrcf	___lwmod@divisor,f,c
  1205  001522  2E0C               	decfsz	___lwmod@counter,f,c
  1206  001524  D7F1               	goto	u440
  1207  001526                     l690:
  1208  001526  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1209  00152A  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1210  00152E  0012               	return		;funcret
  1211  001530                     __end_of___lwmod:
  1212                           	opt stack 0
  1213                           tblptru	equ	0xFF8
  1214                           tblptrh	equ	0xFF7
  1215                           tblptrl	equ	0xFF6
  1216                           tablat	equ	0xFF5
  1217                           prodh	equ	0xFF4
  1218                           prodl	equ	0xFF3
  1219                           intcon	equ	0xFF2
  1220                           intcon3	equ	0xFF0
  1221                           postinc0	equ	0xFEE
  1222                           wreg	equ	0xFE8
  1223                           postinc2	equ	0xFDE
  1224                           postdec2	equ	0xFDD
  1225                           fsr2h	equ	0xFDA
  1226                           fsr2l	equ	0xFD9
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function ___lwdiv *****************
  1230 ;; Defined at:
  1231 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;  dividend        2    0[COMRAM] unsigned int 
  1234 ;;  divisor         2    2[COMRAM] unsigned int 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  quotient        2    4[COMRAM] unsigned int 
  1237 ;;  counter         1    6[COMRAM] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  2    0[COMRAM] unsigned int 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;Total ram usage:        7 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; This function calls:
  1254 ;;		Nothing
  1255 ;; This function is called by:
  1256 ;;		_printf
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text4
  1261  001450                     __ptext4:
  1262                           	opt stack 0
  1263  001450                     ___lwdiv:
  1264                           	opt stack 29
  1265                           
  1266                           ;incstack = 0
  1267  001450  0E00               	movlw	0
  1268  001452  6E06               	movwf	___lwdiv@quotient+1,c
  1269  001454  0E00               	movlw	0
  1270  001456  6E05               	movwf	___lwdiv@quotient,c
  1271  001458  5003               	movf	___lwdiv@divisor,w,c
  1272  00145A  1004               	iorwf	___lwdiv@divisor+1,w,c
  1273  00145C  B4D8               	btfsc	status,2,c
  1274  00145E  D01C               	goto	l680
  1275  001460  0E01               	movlw	1
  1276  001462  6E07               	movwf	___lwdiv@counter,c
  1277  001464  D004               	goto	l675
  1278  001466  90D8               	bcf	status,0,c
  1279  001468  3603               	rlcf	___lwdiv@divisor,f,c
  1280  00146A  3604               	rlcf	___lwdiv@divisor+1,f,c
  1281  00146C  2A07               	incf	___lwdiv@counter,f,c
  1282  00146E                     l675:
  1283  00146E  AE04               	btfss	___lwdiv@divisor+1,7,c
  1284  001470  D7FA               	goto	l676
  1285  001472                     u410:
  1286  001472  90D8               	bcf	status,0,c
  1287  001474  3605               	rlcf	___lwdiv@quotient,f,c
  1288  001476  3606               	rlcf	___lwdiv@quotient+1,f,c
  1289  001478  5003               	movf	___lwdiv@divisor,w,c
  1290  00147A  5C01               	subwf	___lwdiv@dividend,w,c
  1291  00147C  5004               	movf	___lwdiv@divisor+1,w,c
  1292  00147E  5802               	subwfb	___lwdiv@dividend+1,w,c
  1293  001480  A0D8               	btfss	status,0,c
  1294  001482  D005               	goto	l679
  1295  001484  5003               	movf	___lwdiv@divisor,w,c
  1296  001486  5E01               	subwf	___lwdiv@dividend,f,c
  1297  001488  5004               	movf	___lwdiv@divisor+1,w,c
  1298  00148A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1299  00148C  8005               	bsf	___lwdiv@quotient,0,c
  1300  00148E                     l679:
  1301  00148E  90D8               	bcf	status,0,c
  1302  001490  3204               	rrcf	___lwdiv@divisor+1,f,c
  1303  001492  3203               	rrcf	___lwdiv@divisor,f,c
  1304  001494  2E07               	decfsz	___lwdiv@counter,f,c
  1305  001496  D7ED               	goto	u410
  1306  001498                     l680:
  1307  001498  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1308  00149C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1309  0014A0  0012               	return		;funcret
  1310  0014A2                     __end_of___lwdiv:
  1311                           	opt stack 0
  1312                           tblptru	equ	0xFF8
  1313                           tblptrh	equ	0xFF7
  1314                           tblptrl	equ	0xFF6
  1315                           tablat	equ	0xFF5
  1316                           prodh	equ	0xFF4
  1317                           prodl	equ	0xFF3
  1318                           intcon	equ	0xFF2
  1319                           intcon3	equ	0xFF0
  1320                           postinc0	equ	0xFEE
  1321                           wreg	equ	0xFE8
  1322                           postinc2	equ	0xFDE
  1323                           postdec2	equ	0xFDD
  1324                           fsr2h	equ	0xFDA
  1325                           fsr2l	equ	0xFD9
  1326                           status	equ	0xFD8
  1327                           
  1328 ;; *************** function _initLCD *****************
  1329 ;; Defined at:
  1330 ;;		line 60 in file "lcd.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;                  1    wreg      void 
  1337 ;; Registers used:
  1338 ;;		wreg, status,2, status,0, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;Total ram usage:        1 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:    2
  1351 ;; This function calls:
  1352 ;;		_lcdInst
  1353 ;; This function is called by:
  1354 ;;		_main
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text5
  1359  0014A2                     __ptext5:
  1360                           	opt stack 0
  1361  0014A2                     _initLCD:
  1362                           	opt stack 28
  1363                           
  1364                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1365                           
  1366                           ;incstack = 0
  1367  0014A2  0EC3               	movlw	195
  1368  0014A4  6E04               	movwf	??_initLCD& (0+255),c
  1369  0014A6  0ECD               	movlw	205
  1370  0014A8                     u637:
  1371  0014A8  2EE8               	decfsz	wreg,f,c
  1372  0014AA  D7FE               	bra	u637
  1373  0014AC  2E04               	decfsz	??_initLCD& (0+255),f,c
  1374  0014AE  D7FC               	bra	u637
  1375  0014B0  F000               	nop	
  1376                           
  1377                           ;lcd.c: 69: lcdInst(0b00110011);
  1378  0014B2  0E33               	movlw	51
  1379  0014B4  ECBA  F00A         	call	_lcdInst
  1380                           
  1381                           ;lcd.c: 70: lcdInst(0b00110010);
  1382  0014B8  0E32               	movlw	50
  1383  0014BA  ECBA  F00A         	call	_lcdInst
  1384                           
  1385                           ;lcd.c: 71: lcdInst(0b00101000);
  1386  0014BE  0E28               	movlw	40
  1387  0014C0  ECBA  F00A         	call	_lcdInst
  1388                           
  1389                           ;lcd.c: 72: lcdInst(0b00001111);
  1390  0014C4  0E0F               	movlw	15
  1391  0014C6  ECBA  F00A         	call	_lcdInst
  1392                           
  1393                           ;lcd.c: 73: lcdInst(0b00000110);
  1394  0014CA  0E06               	movlw	6
  1395  0014CC  ECBA  F00A         	call	_lcdInst
  1396                           
  1397                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1398  0014D0  0E01               	movlw	1
  1399  0014D2  ECBA  F00A         	call	_lcdInst
  1400  0014D6  0EC3               	movlw	195
  1401  0014D8  6E04               	movwf	??_initLCD& (0+255),c
  1402  0014DA  0ECD               	movlw	205
  1403  0014DC                     u647:
  1404  0014DC  2EE8               	decfsz	wreg,f,c
  1405  0014DE  D7FE               	bra	u647
  1406  0014E0  2E04               	decfsz	??_initLCD& (0+255),f,c
  1407  0014E2  D7FC               	bra	u647
  1408  0014E4  F000               	nop	
  1409                           
  1410                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1411  0014E6  0E0F               	movlw	15
  1412  0014E8  ECBA  F00A         	call	_lcdInst
  1413  0014EC  0012               	return		;funcret
  1414  0014EE                     __end_of_initLCD:
  1415                           	opt stack 0
  1416                           tblptru	equ	0xFF8
  1417                           tblptrh	equ	0xFF7
  1418                           tblptrl	equ	0xFF6
  1419                           tablat	equ	0xFF5
  1420                           prodh	equ	0xFF4
  1421                           prodl	equ	0xFF3
  1422                           intcon	equ	0xFF2
  1423                           intcon3	equ	0xFF0
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           postinc2	equ	0xFDE
  1427                           postdec2	equ	0xFDD
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _lcdInst *****************
  1433 ;; Defined at:
  1434 ;;		line 11 in file "lcd.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  data            1    wreg     unsigned char 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  data            1    2[COMRAM] unsigned char 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      void 
  1441 ;; Registers used:
  1442 ;;		wreg, status,2, status,0, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1452 ;;Total ram usage:        1 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    1
  1455 ;; This function calls:
  1456 ;;		_lcdNibble
  1457 ;; This function is called by:
  1458 ;;		_initLCD
  1459 ;;		_lcd_set_cursor
  1460 ;;		_lcd_shift_cursor
  1461 ;;		_lcd_shift_display
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text6
  1466  001574                     __ptext6:
  1467                           	opt stack 0
  1468  001574                     _lcdInst:
  1469                           	opt stack 28
  1470                           
  1471                           ;incstack = 0
  1472                           ;lcdInst@data stored from wreg
  1473  001574  6E03               	movwf	lcdInst@data,c
  1474                           
  1475                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1476  001576  948C               	bcf	3980,2,c	;volatile
  1477                           
  1478                           ;lcd.c: 20: lcdNibble(data);
  1479  001578  5003               	movf	lcdInst@data,w,c
  1480  00157A  ECBB  F009         	call	_lcdNibble
  1481                           
  1482                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1483  00157E  0EC8               	movlw	200
  1484  001580                     u657:
  1485  001580  D000               	nop2	
  1486  001582  2EE8               	decfsz	wreg,f,c
  1487  001584  D7FD               	bra	u657
  1488  001586  0012               	return		;funcret
  1489  001588                     __end_of_lcdInst:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           prodh	equ	0xFF4
  1496                           prodl	equ	0xFF3
  1497                           intcon	equ	0xFF2
  1498                           intcon3	equ	0xFF0
  1499                           postinc0	equ	0xFEE
  1500                           wreg	equ	0xFE8
  1501                           postinc2	equ	0xFDE
  1502                           postdec2	equ	0xFDD
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _lcdNibble *****************
  1508 ;; Defined at:
  1509 ;;		line 37 in file "lcd.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  data            1    wreg     unsigned char 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  data            1    1[COMRAM] unsigned char 
  1514 ;;  temp            1    0[COMRAM] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;Total ram usage:        2 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_lcdInst
  1534 ;;		_putch
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text7
  1539  001376                     __ptext7:
  1540                           	opt stack 0
  1541  001376                     _lcdNibble:
  1542                           	opt stack 28
  1543                           
  1544                           ;incstack = 0
  1545                           ;lcdNibble@data stored from wreg
  1546  001376  6E02               	movwf	lcdNibble@data,c
  1547                           
  1548                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1549  001378  5002               	movf	lcdNibble@data,w,c
  1550  00137A  0BF0               	andlw	240
  1551  00137C  6E01               	movwf	lcdNibble@temp,c
  1552                           
  1553                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1554  00137E  508C               	movf	3980,w,c	;volatile
  1555  001380  0B0F               	andlw	15
  1556  001382  6E8C               	movwf	3980,c	;volatile
  1557                           
  1558                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1559  001384  5001               	movf	lcdNibble@temp,w,c
  1560  001386  108C               	iorwf	3980,w,c	;volatile
  1561  001388  6E8C               	movwf	3980,c	;volatile
  1562                           
  1563                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1564  00138A  0E00               	movlw	0
  1565  00138C  BEF2               	btfsc	intcon,7,c	;volatile
  1566  00138E  0E01               	movlw	1
  1567  001390  6E2C               	movwf	lcd@LCDinterruptState,c
  1568  001392  9EF2               	bcf	intcon,7,c	;volatile
  1569  001394  868C               	bsf	3980,3,c	;volatile
  1570  001396  0E53               	movlw	83
  1571  001398                     u667:
  1572  001398  2EE8               	decfsz	wreg,f,c
  1573  00139A  D7FE               	bra	u667
  1574  00139C  F000               	nop	
  1575  00139E  968C               	bcf	3980,3,c	;volatile
  1576  0013A0  0EC8               	movlw	200
  1577  0013A2                     u677:
  1578  0013A2  D000               	nop2	
  1579  0013A4  2EE8               	decfsz	wreg,f,c
  1580  0013A6  D7FD               	bra	u677
  1581  0013A8  B02C               	btfsc	lcd@LCDinterruptState,0,c
  1582  0013AA  D002               	bra	u15
  1583  0013AC  9EF2               	bcf	intcon,7,c	;volatile
  1584  0013AE  D001               	bra	u16
  1585  0013B0                     u15:
  1586  0013B0  8EF2               	bsf	intcon,7,c	;volatile
  1587  0013B2                     u16:
  1588                           
  1589                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1590  0013B2  3802               	swapf	lcdNibble@data,w,c
  1591  0013B4  0BF0               	andlw	240
  1592  0013B6  6E02               	movwf	lcdNibble@data,c
  1593                           
  1594                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1595  0013B8  5002               	movf	lcdNibble@data,w,c
  1596  0013BA  0BF0               	andlw	240
  1597  0013BC  6E01               	movwf	lcdNibble@temp,c
  1598                           
  1599                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1600  0013BE  508C               	movf	3980,w,c	;volatile
  1601  0013C0  0B0F               	andlw	15
  1602  0013C2  6E8C               	movwf	3980,c	;volatile
  1603                           
  1604                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1605  0013C4  5001               	movf	lcdNibble@temp,w,c
  1606  0013C6  108C               	iorwf	3980,w,c	;volatile
  1607  0013C8  6E8C               	movwf	3980,c	;volatile
  1608                           
  1609                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1610  0013CA  0E00               	movlw	0
  1611  0013CC  BEF2               	btfsc	intcon,7,c	;volatile
  1612  0013CE  0E01               	movlw	1
  1613  0013D0  6E2C               	movwf	lcd@LCDinterruptState,c
  1614  0013D2  9EF2               	bcf	intcon,7,c	;volatile
  1615  0013D4  868C               	bsf	3980,3,c	;volatile
  1616  0013D6  0E53               	movlw	83
  1617  0013D8                     u687:
  1618  0013D8  2EE8               	decfsz	wreg,f,c
  1619  0013DA  D7FE               	bra	u687
  1620  0013DC  F000               	nop	
  1621  0013DE  968C               	bcf	3980,3,c	;volatile
  1622  0013E0  0EC8               	movlw	200
  1623  0013E2                     u697:
  1624  0013E2  D000               	nop2	
  1625  0013E4  2EE8               	decfsz	wreg,f,c
  1626  0013E6  D7FD               	bra	u697
  1627  0013E8  B02C               	btfsc	lcd@LCDinterruptState,0,c
  1628  0013EA  D002               	bra	u25
  1629  0013EC  9EF2               	bcf	intcon,7,c	;volatile
  1630  0013EE  D001               	bra	u26
  1631  0013F0                     u25:
  1632  0013F0  8EF2               	bsf	intcon,7,c	;volatile
  1633  0013F2                     u26:
  1634  0013F2  0012               	return		;funcret
  1635  0013F4                     __end_of_lcdNibble:
  1636                           	opt stack 0
  1637                           tblptru	equ	0xFF8
  1638                           tblptrh	equ	0xFF7
  1639                           tblptrl	equ	0xFF6
  1640                           tablat	equ	0xFF5
  1641                           prodh	equ	0xFF4
  1642                           prodl	equ	0xFF3
  1643                           intcon	equ	0xFF2
  1644                           intcon3	equ	0xFF0
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postinc2	equ	0xFDE
  1648                           postdec2	equ	0xFDD
  1649                           fsr2h	equ	0xFDA
  1650                           fsr2l	equ	0xFD9
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function _I2C_Master_Write *****************
  1654 ;; Defined at:
  1655 ;;		line 108 in file "I2C.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1669 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;Total ram usage:        2 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    1
  1676 ;; This function calls:
  1677 ;;		_I2C_Master_Wait
  1678 ;; This function is called by:
  1679 ;;		_main
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text8
  1684  00159A                     __ptext8:
  1685                           	opt stack 0
  1686  00159A                     _I2C_Master_Write:
  1687                           	opt stack 29
  1688                           
  1689                           ;I2C.c: 116: I2C_Master_Wait();
  1690                           
  1691                           ;incstack = 0
  1692  00159A  ECC4  F00A         	call	_I2C_Master_Wait	;wreg free
  1693                           
  1694                           ;I2C.c: 117: SSPBUF = byteToWrite;
  1695  00159E  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  1696  0015A2  0012               	return		;funcret
  1697  0015A4                     __end_of_I2C_Master_Write:
  1698                           	opt stack 0
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           prodh	equ	0xFF4
  1704                           prodl	equ	0xFF3
  1705                           intcon	equ	0xFF2
  1706                           intcon3	equ	0xFF0
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postinc2	equ	0xFDE
  1710                           postdec2	equ	0xFDD
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _I2C_Master_Stop *****************
  1716 ;; Defined at:
  1717 ;;		line 95 in file "I2C.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;Total ram usage:        0 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    1
  1738 ;; This function calls:
  1739 ;;		_I2C_Master_Wait
  1740 ;; This function is called by:
  1741 ;;		_main
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text9
  1746  0015A4                     __ptext9:
  1747                           	opt stack 0
  1748  0015A4                     _I2C_Master_Stop:
  1749                           	opt stack 29
  1750                           
  1751                           ;I2C.c: 104: I2C_Master_Wait();
  1752                           
  1753                           ;incstack = 0
  1754  0015A4  ECC4  F00A         	call	_I2C_Master_Wait	;wreg free
  1755                           
  1756                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  1757  0015A8  84C5               	bsf	4037,2,c	;volatile
  1758  0015AA  0012               	return		;funcret
  1759  0015AC                     __end_of_I2C_Master_Stop:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           prodh	equ	0xFF4
  1766                           prodl	equ	0xFF3
  1767                           intcon	equ	0xFF2
  1768                           intcon3	equ	0xFF0
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postinc2	equ	0xFDE
  1772                           postdec2	equ	0xFDD
  1773                           fsr2h	equ	0xFDA
  1774                           fsr2l	equ	0xFD9
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _I2C_Master_Start *****************
  1778 ;; Defined at:
  1779 ;;		line 69 in file "I2C.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2, status,0, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;Total ram usage:        0 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    1
  1800 ;; This function calls:
  1801 ;;		_I2C_Master_Wait
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text10
  1808  0015AC                     __ptext10:
  1809                           	opt stack 0
  1810  0015AC                     _I2C_Master_Start:
  1811                           	opt stack 29
  1812                           
  1813                           ;I2C.c: 78: I2C_Master_Wait();
  1814                           
  1815                           ;incstack = 0
  1816  0015AC  ECC4  F00A         	call	_I2C_Master_Wait	;wreg free
  1817                           
  1818                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  1819  0015B0  80C5               	bsf	4037,0,c	;volatile
  1820  0015B2  0012               	return		;funcret
  1821  0015B4                     __end_of_I2C_Master_Start:
  1822                           	opt stack 0
  1823                           tblptru	equ	0xFF8
  1824                           tblptrh	equ	0xFF7
  1825                           tblptrl	equ	0xFF6
  1826                           tablat	equ	0xFF5
  1827                           prodh	equ	0xFF4
  1828                           prodl	equ	0xFF3
  1829                           intcon	equ	0xFF2
  1830                           intcon3	equ	0xFF0
  1831                           postinc0	equ	0xFEE
  1832                           wreg	equ	0xFE8
  1833                           postinc2	equ	0xFDE
  1834                           postdec2	equ	0xFDD
  1835                           fsr2h	equ	0xFDA
  1836                           fsr2l	equ	0xFD9
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _I2C_Master_Wait *****************
  1840 ;; Defined at:
  1841 ;;		line 51 in file "I2C.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;		None
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;		None
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  1    wreg      void 
  1848 ;; Registers used:
  1849 ;;		wreg, status,2, status,0
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;Total ram usage:        1 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_I2C_Master_Start
  1865 ;;		_I2C_Master_Stop
  1866 ;;		_I2C_Master_Write
  1867 ;;		_I2C_Master_RepeatedStart
  1868 ;;		_I2C_Master_Read
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text11
  1873  001588                     __ptext11:
  1874                           	opt stack 0
  1875  001588                     _I2C_Master_Wait:
  1876                           	opt stack 29
  1877                           
  1878                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1879                           
  1880                           ;incstack = 0
  1881  001588  B4C7               	btfsc	4039,2,c	;volatile
  1882  00158A  D7FE               	goto	_I2C_Master_Wait
  1883  00158C  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1884  001590  0E1F               	movlw	31
  1885  001592  1601               	andwf	??_I2C_Master_Wait,f,c
  1886  001594  B4D8               	btfsc	status,2,c
  1887  001596  0012               	return	
  1888  001598  D7F7               	goto	_I2C_Master_Wait
  1889  00159A                     __end_of_I2C_Master_Wait:
  1890                           	opt stack 0
  1891                           tblptru	equ	0xFF8
  1892                           tblptrh	equ	0xFF7
  1893                           tblptrl	equ	0xFF6
  1894                           tablat	equ	0xFF5
  1895                           prodh	equ	0xFF4
  1896                           prodl	equ	0xFF3
  1897                           intcon	equ	0xFF2
  1898                           intcon3	equ	0xFF0
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postinc2	equ	0xFDE
  1902                           postdec2	equ	0xFDD
  1903                           fsr2h	equ	0xFDA
  1904                           fsr2l	equ	0xFD9
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _I2C_Master_Init *****************
  1908 ;; Defined at:
  1909 ;;		line 14 in file "I2C.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1923 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;Total ram usage:        8 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    1
  1930 ;; This function calls:
  1931 ;;		___lldiv
  1932 ;; This function is called by:
  1933 ;;		_main
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text12
  1938  0013F4                     __ptext12:
  1939                           	opt stack 0
  1940  0013F4                     _I2C_Master_Init:
  1941                           	opt stack 29
  1942                           
  1943                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  1944                           
  1945                           ;incstack = 0
  1946  0013F4  9AC6               	bcf	4038,5,c	;volatile
  1947                           
  1948                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  1949  0013F6  8694               	bsf	3988,3,c	;volatile
  1950                           
  1951                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  1952  0013F8  8894               	bsf	3988,4,c	;volatile
  1953                           
  1954                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  1955  0013FA  0E80               	movlw	128
  1956  0013FC  6EC7               	movwf	4039,c	;volatile
  1957                           
  1958                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  1959  0013FE  0E28               	movlw	40
  1960  001400  6EC6               	movwf	4038,c	;volatile
  1961                           
  1962                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  1963  001402  0E00               	movlw	0
  1964  001404  6EC5               	movwf	4037,c	;volatile
  1965                           
  1966                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  1967  001406  0E00               	movlw	0
  1968  001408  6E01               	movwf	___lldiv@dividend,c
  1969  00140A  0E5A               	movlw	90
  1970  00140C  6E02               	movwf	___lldiv@dividend+1,c
  1971  00140E  0E62               	movlw	98
  1972  001410  6E03               	movwf	___lldiv@dividend+2,c
  1973  001412  0E02               	movlw	2
  1974  001414  6E04               	movwf	___lldiv@dividend+3,c
  1975  001416  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  1976  00141A  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  1977  00141E  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  1978  001422  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  1979  001426  0E02               	movlw	2
  1980  001428                     u465:
  1981  001428  90D8               	bcf	status,0,c
  1982  00142A  3612               	rlcf	??_I2C_Master_Init,f,c
  1983  00142C  3613               	rlcf	??_I2C_Master_Init+1,f,c
  1984  00142E  3614               	rlcf	??_I2C_Master_Init+2,f,c
  1985  001430  3615               	rlcf	??_I2C_Master_Init+3,f,c
  1986  001432  2EE8               	decfsz	wreg,f,c
  1987  001434  D7F9               	goto	u465
  1988  001436  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  1989  00143A  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  1990  00143E  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  1991  001442  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  1992  001446  EC7A  F009         	call	___lldiv	;wreg free
  1993  00144A  0401               	decf	?___lldiv,w,c
  1994  00144C  6EC8               	movwf	4040,c	;volatile
  1995  00144E  0012               	return		;funcret
  1996  001450                     __end_of_I2C_Master_Init:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           prodh	equ	0xFF4
  2003                           prodl	equ	0xFF3
  2004                           intcon	equ	0xFF2
  2005                           intcon3	equ	0xFF0
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           postinc2	equ	0xFDE
  2009                           postdec2	equ	0xFDD
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function ___lldiv *****************
  2015 ;; Defined at:
  2016 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  dividend        4    0[COMRAM] unsigned long 
  2019 ;;  divisor         4    4[COMRAM] unsigned long 
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;  quotient        4    8[COMRAM] unsigned long 
  2022 ;;  counter         1   12[COMRAM] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  4    0[COMRAM] unsigned long 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2032 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;Total ram usage:       13 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_I2C_Master_Init
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text13
  2046  0012F4                     __ptext13:
  2047                           	opt stack 0
  2048  0012F4                     ___lldiv:
  2049                           	opt stack 29
  2050                           
  2051                           ;incstack = 0
  2052  0012F4  0E00               	movlw	0
  2053  0012F6  6E09               	movwf	___lldiv@quotient,c
  2054  0012F8  0E00               	movlw	0
  2055  0012FA  6E0A               	movwf	___lldiv@quotient+1,c
  2056  0012FC  0E00               	movlw	0
  2057  0012FE  6E0B               	movwf	___lldiv@quotient+2,c
  2058  001300  0E00               	movlw	0
  2059  001302  6E0C               	movwf	___lldiv@quotient+3,c
  2060  001304  5005               	movf	___lldiv@divisor,w,c
  2061  001306  1006               	iorwf	___lldiv@divisor+1,w,c
  2062  001308  1007               	iorwf	___lldiv@divisor+2,w,c
  2063  00130A  1008               	iorwf	___lldiv@divisor+3,w,c
  2064  00130C  B4D8               	btfsc	status,2,c
  2065  00130E  D02A               	goto	l627
  2066  001310  0E01               	movlw	1
  2067  001312  6E0D               	movwf	___lldiv@counter,c
  2068  001314  D006               	goto	l622
  2069  001316  90D8               	bcf	status,0,c
  2070  001318  3605               	rlcf	___lldiv@divisor,f,c
  2071  00131A  3606               	rlcf	___lldiv@divisor+1,f,c
  2072  00131C  3607               	rlcf	___lldiv@divisor+2,f,c
  2073  00131E  3608               	rlcf	___lldiv@divisor+3,f,c
  2074  001320  2A0D               	incf	___lldiv@counter,f,c
  2075  001322                     l622:
  2076  001322  AE08               	btfss	___lldiv@divisor+3,7,c
  2077  001324  D7F8               	goto	l623
  2078  001326                     u380:
  2079  001326  90D8               	bcf	status,0,c
  2080  001328  3609               	rlcf	___lldiv@quotient,f,c
  2081  00132A  360A               	rlcf	___lldiv@quotient+1,f,c
  2082  00132C  360B               	rlcf	___lldiv@quotient+2,f,c
  2083  00132E  360C               	rlcf	___lldiv@quotient+3,f,c
  2084  001330  5005               	movf	___lldiv@divisor,w,c
  2085  001332  5C01               	subwf	___lldiv@dividend,w,c
  2086  001334  5006               	movf	___lldiv@divisor+1,w,c
  2087  001336  5802               	subwfb	___lldiv@dividend+1,w,c
  2088  001338  5007               	movf	___lldiv@divisor+2,w,c
  2089  00133A  5803               	subwfb	___lldiv@dividend+2,w,c
  2090  00133C  5008               	movf	___lldiv@divisor+3,w,c
  2091  00133E  5804               	subwfb	___lldiv@dividend+3,w,c
  2092  001340  A0D8               	btfss	status,0,c
  2093  001342  D009               	goto	l626
  2094  001344  5005               	movf	___lldiv@divisor,w,c
  2095  001346  5E01               	subwf	___lldiv@dividend,f,c
  2096  001348  5006               	movf	___lldiv@divisor+1,w,c
  2097  00134A  5A02               	subwfb	___lldiv@dividend+1,f,c
  2098  00134C  5007               	movf	___lldiv@divisor+2,w,c
  2099  00134E  5A03               	subwfb	___lldiv@dividend+2,f,c
  2100  001350  5008               	movf	___lldiv@divisor+3,w,c
  2101  001352  5A04               	subwfb	___lldiv@dividend+3,f,c
  2102  001354  8009               	bsf	___lldiv@quotient,0,c
  2103  001356                     l626:
  2104  001356  90D8               	bcf	status,0,c
  2105  001358  3208               	rrcf	___lldiv@divisor+3,f,c
  2106  00135A  3207               	rrcf	___lldiv@divisor+2,f,c
  2107  00135C  3206               	rrcf	___lldiv@divisor+1,f,c
  2108  00135E  3205               	rrcf	___lldiv@divisor,f,c
  2109  001360  2E0D               	decfsz	___lldiv@counter,f,c
  2110  001362  D7E1               	goto	u380
  2111  001364                     l627:
  2112  001364  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2113  001368  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2114  00136C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2115  001370  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2116  001374  0012               	return		;funcret
  2117  001376                     __end_of___lldiv:
  2118                           	opt stack 0
  2119                           tblptru	equ	0xFF8
  2120                           tblptrh	equ	0xFF7
  2121                           tblptrl	equ	0xFF6
  2122                           tablat	equ	0xFF5
  2123                           prodh	equ	0xFF4
  2124                           prodl	equ	0xFF3
  2125                           intcon	equ	0xFF2
  2126                           intcon3	equ	0xFF0
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           postinc2	equ	0xFDE
  2130                           postdec2	equ	0xFDD
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           tblptru	equ	0xFF8
  2135                           tblptrh	equ	0xFF7
  2136                           tblptrl	equ	0xFF6
  2137                           tablat	equ	0xFF5
  2138                           prodh	equ	0xFF4
  2139                           prodl	equ	0xFF3
  2140                           intcon	equ	0xFF2
  2141                           intcon3	equ	0xFF0
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150                           	psect	rparam
  2151  0000                     tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           intcon	equ	0xFF2
  2158                           intcon3	equ	0xFF0
  2159                           postinc0	equ	0xFEE
  2160                           wreg	equ	0xFE8
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8


Data Sizes:
    Strings     38
    Constant    36
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      48
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[11]), STR_3(CODE[10]), STR_2(CODE[8]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    2158
                                             24 COMRAM     3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1405
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     250
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       1       0        0.8%
COMRAM              7F     1B      30       1       37.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      30      34        0.0%
DATA                 0      0      30       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 12:33:51 2018

                          _i 001C                           u15 13B0                           u16 13B2  
                         u25 13F0                           u26 13F2                  __CFG_CPD$ON 000000  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l260 121A  
                        l253 11E0                          l262 1242                          l254 11F0  
                        l266 1284                          l267 12D2                          l268 128A  
                        l622 1322                          l623 1316                          l626 1356  
                        l627 1364                          l680 1498                          l690 1526  
                        l675 146E                          l676 1466                          l685 1504  
                        l686 14FC                          l679 148E                          l689 151C  
               __CFG_CPB$OFF 000000                          u410 1472                          u510 1272  
                        u440 1508                          u530 12DA                          u380 1326  
                        u607 1198                          u465 1428                          u617 11C6  
                        u627 156C                          u637 14A8                          u557 10DC  
                        u647 14DC                          u567 10F4                          u657 1580  
                        u577 110C                          u667 1398                          u587 113C  
                        u677 13A2                          u597 116A                          u687 13D8  
                        u697 13E2                          _max 002E                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1379 1246  
                       _ADON 007E10                         STR_1 103A                         STR_2 1043  
                       STR_3 1030                         STR_4 1025                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                  main@counter 001B                         _main 104C  
                       _keys 1001                         fsr2h 000FDA                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT 1020             ?_I2C_Master_Init 000E             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lldiv 1376  
            __end_of___lwdiv 14A2              __end_of___lwmod 1530                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 1588               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 14EE               __CFG_EBTRB$OFF 000000              __end_of_dpowers 101C  
                      _array 101C                        _state 002A                        _putch 1560  
             __pbitbssCOMRAM 0180                        tablat 000FF5            _LCDinterruptState 002D  
                      status 000FD8               __CFG_PBADEN$ON 000000              __initialization 1530  
               __end_of_main 11D6                 __end_of_keys 1012               __CFG_OSC$HSPLL 000000  
          __end_of_LCD_RIGHT 1021                       ??_main 0019                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0004  
                     _ADRESH 000FC4                       _ADRESL 000FC3                       ?_putch 0001  
                     _INT1IE 007F83                       _SSPADD 000FC8                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000               __CFG_STVREN$ON 000000                    ??___lldiv 0009  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 1550  
                  ??_lcdInst 0003                       _printf 11D6                    ??_initLCD 0004  
               __pdataCOMRAM 002E                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 1556                ___rparam_used 000001               __pcstackCOMRAM 0001  
              __end_of_array 101F                __end_of_putch 1574           __size_of_lcdNibble 007E  
                    ??_putch 0003                      ?_printf 000D         lcd@LCDinterruptState 002C  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
          __end_of_lcdNibble 13F4                      __Hparam 0000                      __Lparam 0000  
                    ___lldiv 12F4                      ___lwdiv 1450                      ___lwmod 14EE  
               __psmallconst 1000                      __pcinit 1530                      __ramtop 1000  
                    _lcdInst 1574                      __ptext0 104C                      __ptext1 11D6  
                    __ptext2 1560                      __ptext3 14EE                      __ptext4 1450  
                    __ptext5 14A2                      __ptext6 1574                      __ptext7 1376  
                    __ptext8 159A                      __ptext9 15A4              __size_of_printf 011E  
                    _initLCD 14A2                      _dpowers 1012                    _LCD_RIGHT 1020  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
       end_of_initialization 1556        __end_of_LCD_SIZE_HORZ 1023        __end_of_LCD_SIZE_VERT 1022  
              __Lmediumconst 0000    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                      printf@c 0018  
                    printf@f 000D                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _TRISCbits 000F94                    _TRISDbits 000F95  
                  _B_counter 0028                __pidataCOMRAM 15B4               __end_of_printf 12F4  
                  _N_counter 0026          start_initialization 1530                    _S_counter 0024  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002  
                  _W_counter 0022     I2C_Master_Init@clockFreq 000E             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 0011                _analog_result 001E                  __pbssCOMRAM 001C  
           _I2C_Master_Start 15AC             _I2C_Master_Write 159A             ___lwdiv@dividend 0001  
          __CFG_CCP2MX$PORTC 000000                    _lcdNibble 1376                     ?___lldiv 0001  
                   ?___lwdiv 0001                     ?___lwmod 0008                     ?_lcdInst 0001  
                   ?_initLCD 0001                  __smallconst 1000             ___lwdiv@quotient 0005  
             __size_of_putch 0014                     _LCD_LEFT 101F                     _LATCbits 000F8B  
                   _LATDbits 000F8C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
                 _ADCON0bits 000FC2                lcdNibble@data 0002                     _B_remain 0020  
                 printf@flag 0014                lcdNibble@temp 0001                   printf@prec 0015  
             _LCD_HORZ_LIMIT 1024                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082             __size_of___lwdiv 0052  
           __size_of___lwmod 0042             __size_of_lcdInst 0014              _I2C_Master_Init 13F4  
           __size_of_initLCD 004C              _I2C_Master_Wait 1588              _I2C_Master_Stop 15A4  
     __end_of_LCD_HORZ_LIMIT 1025              ___lwdiv@divisor 0003              ___lwdiv@counter 0007  
                   __ptext10 15AC                     __ptext11 1588                     __ptext12 13F4  
                   __ptext13 12F4               _LCD_VERT_LIMIT 1023                __size_of_main 018A  
                ??_lcdNibble 0001                     main@SEND 0180                    printf@val 0016  
I2C_Master_Write@byteToWrite 0002                    putch@data 0003     __end_of_I2C_Master_Start 15B4  
   __end_of_I2C_Master_Write 15A4                   _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1024  
              _LCD_SIZE_HORZ 1022             ___lwmod@dividend 0008                _LCD_SIZE_VERT 1021  
           ___lldiv@dividend 0001                     printf@ap 0012      __end_of_I2C_Master_Init 1450  
    __end_of_I2C_Master_Wait 159A      __end_of_I2C_Master_Stop 15AC                  lcdInst@data 0003  
           ___lldiv@quotient 0009              ___lwmod@divisor 000A              ___lwmod@counter 000C  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
