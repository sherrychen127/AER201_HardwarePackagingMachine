

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 30 23:52:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4620 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	idataCOMRAM
    77  001A50                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _W_input
    81  001A50  0001               	dw	1
    82                           
    83                           ;initializer for _S_input
    84  001A52  0001               	dw	1
    85                           
    86                           ;initializer for _N_input
    87  001A54  0001               	dw	1
    88                           
    89                           ;initializer for _B_input
    90  001A56  0001               	dw	1
    91                           
    92                           	psect	smallconst
    93  001000                     __psmallconst:
    94                           	opt stack 0
    95  001000  00                 	db	0
    96  001001                     _dpowers:
    97                           	opt stack 0
    98  001001  0001               	dw	1
    99  001003  000A               	dw	10
   100  001005  0064               	dw	100
   101  001007  03E8               	dw	1000
   102  001009  2710               	dw	10000
   103  00100B                     __end_of_dpowers:
   104                           	opt stack 0
   105  00100B                     _LCD_LEFT:
   106                           	opt stack 0
   107  00100B  00                 	db	0
   108  00100C                     __end_of_LCD_LEFT:
   109                           	opt stack 0
   110  00100C                     _LCD_RIGHT:
   111                           	opt stack 0
   112  00100C  01                 	db	1
   113  00100D                     __end_of_LCD_RIGHT:
   114                           	opt stack 0
   115  00100D                     _LCD_SIZE_VERT:
   116                           	opt stack 0
   117  00100D  02                 	db	2
   118  00100E                     __end_of_LCD_SIZE_VERT:
   119                           	opt stack 0
   120  00100E                     _LCD_SIZE_HORZ:
   121                           	opt stack 0
   122  00100E  10                 	db	16
   123  00100F                     __end_of_LCD_SIZE_HORZ:
   124                           	opt stack 0
   125  00100F                     _LCD_VERT_LIMIT:
   126                           	opt stack 0
   127  00100F  02                 	db	2
   128  001010                     __end_of_LCD_VERT_LIMIT:
   129                           	opt stack 0
   130  001010                     _LCD_HORZ_LIMIT:
   131                           	opt stack 0
   132  001010  28                 	db	40
   133  001011                     __end_of_LCD_HORZ_LIMIT:
   134                           	opt stack 0
   135  0000                     _SSPBUF	set	4041
   136  0000                     _SSPCON2bits	set	4037
   137  0000                     _SSPADD	set	4040
   138  0000                     _SSPCON2	set	4037
   139  0000                     _SSPCON1	set	4038
   140  0000                     _SSPSTAT	set	4039
   141  0000                     _SSPCON1bits	set	4038
   142  0000                     _ADRESL	set	4035
   143  0000                     _ADRESH	set	4036
   144  0000                     _ADCON0bits	set	4034
   145  0000                     _PORTBbits	set	3969
   146  0000                     _TRISBbits	set	3987
   147  0000                     _TRISCbits	set	3988
   148  0000                     _LATCbits	set	3979
   149  0000                     _ADCON2bits	set	4032
   150  0000                     _ADCON1	set	4033
   151  0000                     _ADCON0	set	4034
   152  0000                     _TRISE	set	3990
   153  0000                     _TRISD	set	3989
   154  0000                     _TRISC	set	3988
   155  0000                     _TRISB	set	3987
   156  0000                     _TRISA	set	3986
   157  0000                     _LATE	set	3981
   158  0000                     _LATC	set	3979
   159  0000                     _LATB	set	3978
   160  0000                     _LATA	set	3977
   161  0000                     _OSCTUNEbits	set	3995
   162  0000                     _OSCCON	set	4051
   163  0000                     _INTCONbits	set	4082
   164  0000                     _LATD	set	3980
   165  0000                     _LATDbits	set	3980
   166  0000                     _ADON	set	32272
   167  0000                     _RBIF	set	32656
   168  0000                     _RBIE	set	32659
   169  001011                     STR_1:
   170  001011  42                 	db	66	;'B'
   171  001012  3A                 	db	58	;':'
   172  001013  25                 	db	37
   173  001014  64                 	db	100	;'d'
   174  001015  2C                 	db	44
   175  001016  4E                 	db	78	;'N'
   176  001017  3A                 	db	58	;':'
   177  001018  25                 	db	37
   178  001019  64                 	db	100	;'d'
   179  00101A  2C                 	db	44
   180  00101B  53                 	db	83	;'S'
   181  00101C  3A                 	db	58	;':'
   182  00101D  25                 	db	37
   183  00101E  64                 	db	100	;'d'
   184  00101F  2C                 	db	44
   185  001020  57                 	db	87	;'W'
   186  001021  3A                 	db	58	;':'
   187  001022  25                 	db	37
   188  001023  64                 	db	100	;'d'
   189  001024  00                 	db	0
   190  0000                     
   191                           ; #config settings
   192  001025  00                 	db	0	; dummy byte at the end
   193  0000                     
   194                           	psect	cinit
   195  001912                     __pcinit:
   196                           	opt stack 0
   197  001912                     start_initialization:
   198                           	opt stack 0
   199  001912                     __initialization:
   200                           	opt stack 0
   201                           
   202                           ; Initialize objects allocated to COMRAM (8 bytes)
   203                           ; load TBLPTR registers with __pidataCOMRAM
   204  001912  0E50               	movlw	low __pidataCOMRAM
   205  001914  6EF6               	movwf	tblptrl,c
   206  001916  0E1A               	movlw	high __pidataCOMRAM
   207  001918  6EF7               	movwf	tblptrh,c
   208  00191A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   209  00191C  6EF8               	movwf	tblptru,c
   210  00191E  EE00  F046         	lfsr	0,__pdataCOMRAM
   211  001922  EE10 F008          	lfsr	1,8
   212  001926                     copy_data0:
   213  001926  0009               	tblrd		*+
   214  001928  CFF5 FFEE          	movff	tablat,postinc0
   215  00192C  50E5               	movf	postdec1,w,c
   216  00192E  50E1               	movf	fsr1l,w,c
   217  001930  E1FA               	bnz	copy_data0
   218                           
   219                           ; Clear objects allocated to COMRAM (10 bytes)
   220  001932  EE00  F03C         	lfsr	0,__pbssCOMRAM
   221  001936  0E0A               	movlw	10
   222  001938                     clear_0:
   223  001938  6AEE               	clrf	postinc0,c
   224  00193A  06E8               	decf	wreg,f,c
   225  00193C  E1FD               	bnz	clear_0
   226  00193E                     end_of_initialization:
   227                           	opt stack 0
   228  00193E                     __end_of__initialization:
   229                           	opt stack 0
   230  00193E  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   231  001940  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   232  001942  0E00               	movlw	low (__Lmediumconst shr (0+16))
   233  001944  6EF8               	movwf	tblptru,c
   234  001946  0100               	movlb	0
   235  001948  EF13  F008         	goto	_main	;jump to C main() function
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           postdec1	equ	0xFE5
   243                           fsr1l	equ	0xFE1
   244                           
   245                           	psect	bssCOMRAM
   246  00003C                     __pbssCOMRAM:
   247                           	opt stack 0
   248  00003C                     _W_count:
   249                           	opt stack 0
   250  00003C                     	ds	2
   251  00003E                     _S_count:
   252                           	opt stack 0
   253  00003E                     	ds	2
   254  000040                     _N_count:
   255                           	opt stack 0
   256  000040                     	ds	2
   257  000042                     _B_count:
   258                           	opt stack 0
   259  000042                     	ds	2
   260  000044                     	ds	1
   261  000045                     _LCDinterruptState:
   262                           	opt stack 0
   263  000045                     	ds	1
   264                           tblptru	equ	0xFF8
   265                           tblptrh	equ	0xFF7
   266                           tblptrl	equ	0xFF6
   267                           tablat	equ	0xFF5
   268                           postinc0	equ	0xFEE
   269                           wreg	equ	0xFE8
   270                           postdec1	equ	0xFE5
   271                           fsr1l	equ	0xFE1
   272                           
   273                           	psect	dataCOMRAM
   274  000046                     __pdataCOMRAM:
   275                           	opt stack 0
   276  000046                     _W_input:
   277                           	opt stack 0
   278  000046                     	ds	2
   279  000048                     _S_input:
   280                           	opt stack 0
   281  000048                     	ds	2
   282  00004A                     _N_input:
   283                           	opt stack 0
   284  00004A                     	ds	2
   285  00004C                     _B_input:
   286                           	opt stack 0
   287  00004C                     	ds	2
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           postdec1	equ	0xFE5
   295                           fsr1l	equ	0xFE1
   296                           
   297                           	psect	cstackBANK0
   298  000080                     __pcstackBANK0:
   299                           	opt stack 0
   300  000080                     ?___lwmod:
   301                           	opt stack 0
   302  000080                     ___lwmod@dividend:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x0
   306  000080                     	ds	2
   307  000082                     ___lwmod@divisor:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x2
   311  000082                     	ds	2
   312  000084                     ?_printf:
   313                           	opt stack 0
   314  000084                     printf@f:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x4
   318  000084                     	ds	10
   319  00008E                     printf@ap:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xE
   323  00008E                     	ds	2
   324  000090                     printf@flag:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x10
   328  000090                     	ds	1
   329  000091                     printf@prec:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0x11
   333  000091                     	ds	1
   334  000092                     printf@val:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x12
   338  000092                     	ds	2
   339  000094                     printf@c:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x14
   343  000094                     	ds	1
   344                           tblptru	equ	0xFF8
   345                           tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           postinc0	equ	0xFEE
   349                           wreg	equ	0xFE8
   350                           postdec1	equ	0xFE5
   351                           fsr1l	equ	0xFE1
   352                           
   353                           	psect	cstackCOMRAM
   354  000001                     __pcstackCOMRAM:
   355                           	opt stack 0
   356  000001                     ?i2___lwdiv:
   357                           	opt stack 0
   358  000001                     i2lcdNibble@temp:
   359                           	opt stack 0
   360  000001                     i2___lwdiv@dividend:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x0
   364  000001                     	ds	1
   365  000002                     i2lcdNibble@data:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x1
   369  000002                     	ds	1
   370  000003                     i2lcdInst@data:
   371                           	opt stack 0
   372  000003                     i2putch@data:
   373                           	opt stack 0
   374  000003                     i2___lwdiv@divisor:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x2
   378  000003                     	ds	1
   379  000004                     ??i2_initLCD:
   380                           
   381                           ; 1 bytes @ 0x3
   382  000004                     	ds	1
   383  000005                     i2___lwdiv@quotient:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x4
   387  000005                     	ds	2
   388  000007                     i2___lwdiv@counter:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x6
   392  000007                     	ds	1
   393  000008                     ?i2___lwmod:
   394                           	opt stack 0
   395  000008                     i2___lwmod@dividend:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x7
   399  000008                     	ds	2
   400  00000A                     i2___lwmod@divisor:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x9
   404  00000A                     	ds	2
   405  00000C                     i2___lwmod@counter:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0xB
   409  00000C                     	ds	1
   410  00000D                     ?i2_printf:
   411                           	opt stack 0
   412  00000D                     i2printf@f:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0xC
   416  00000D                     	ds	10
   417  000017                     ??i2_printf:
   418                           
   419                           ; 1 bytes @ 0x16
   420  000017                     	ds	1
   421  000018                     i2printf@ap:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x17
   425  000018                     	ds	2
   426  00001A                     i2printf@flag:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x19
   430  00001A                     	ds	1
   431  00001B                     i2printf@prec:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x1A
   435  00001B                     	ds	1
   436  00001C                     i2printf@val:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x1B
   440  00001C                     	ds	2
   441  00001E                     i2printf@c:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1D
   445  00001E                     	ds	1
   446  00001F                     ??_interruptHandler:
   447                           
   448                           ; 1 bytes @ 0x1E
   449  00001F                     	ds	19
   450  000032                     ??_I2C_Master_Wait:
   451  000032                     ?_readADC:
   452                           	opt stack 0
   453  000032                     ?___lwdiv:
   454                           	opt stack 0
   455  000032                     lcdNibble@temp:
   456                           	opt stack 0
   457  000032                     ___lwdiv@dividend:
   458                           	opt stack 0
   459  000032                     I2C_Master_Init@clockFreq:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x31
   463  000032                     	ds	1
   464  000033                     lcdNibble@data:
   465                           	opt stack 0
   466  000033                     I2C_Master_Write@byteToWrite:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x32
   470  000033                     	ds	1
   471  000034                     ??_readADC:
   472  000034                     lcdInst@data:
   473                           	opt stack 0
   474  000034                     putch@data:
   475                           	opt stack 0
   476  000034                     ___lwdiv@divisor:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x33
   480  000034                     	ds	1
   481  000035                     ??_initLCD:
   482  000035                     I2C_sendData@char_data:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x34
   486  000035                     	ds	1
   487  000036                     readADC@channel:
   488                           	opt stack 0
   489  000036                     ___lwdiv@quotient:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x35
   493  000036                     	ds	2
   494  000038                     ___lwdiv@counter:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x37
   498  000038                     	ds	1
   499  000039                     ___lwmod@counter:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x38
   503  000039                     	ds	1
   504  00003A                     ??_printf:
   505                           
   506                           ; 1 bytes @ 0x39
   507  00003A                     	ds	1
   508  00003B                     ??_main:
   509                           
   510                           ; 1 bytes @ 0x3A
   511  00003B                     	ds	1
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postdec1	equ	0xFE5
   519                           fsr1l	equ	0xFE1
   520                           
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 32 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;Total ram usage:        1 bytes
   545 ;; Hardware stack levels required when called:    7
   546 ;; This function calls:
   547 ;;		_I2C_init
   548 ;;		_I2C_sendData
   549 ;;		_initLCD
   550 ;;		_lcdInst
   551 ;;		_printf
   552 ;;		_readADC
   553 ;; This function is called by:
   554 ;;		Startup code after reset
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text0
   559  001026                     __ptext0:
   560                           	opt stack 0
   561  001026                     _main:
   562                           	opt stack 24
   563                           
   564                           ;main.c: 36: OSCCON = 0xE2;
   565                           
   566                           ;incstack = 0
   567  001026  0EE2               	movlw	226
   568  001028  6ED3               	movwf	4051,c	;volatile
   569                           
   570                           ;main.c: 43: OSCTUNEbits.PLLEN = 1;
   571  00102A  8C9B               	bsf	3995,6,c	;volatile
   572                           
   573                           ;main.c: 47: LATA = 0x00;
   574  00102C  0E00               	movlw	0
   575  00102E  6E89               	movwf	3977,c	;volatile
   576                           
   577                           ;main.c: 48: LATB = 0x00;
   578  001030  0E00               	movlw	0
   579  001032  6E8A               	movwf	3978,c	;volatile
   580                           
   581                           ;main.c: 49: LATC = 0x00;
   582  001034  0E00               	movlw	0
   583  001036  6E8B               	movwf	3979,c	;volatile
   584                           
   585                           ;main.c: 50: LATD = 0x00;
   586  001038  0E00               	movlw	0
   587  00103A  6E8C               	movwf	3980,c	;volatile
   588                           
   589                           ;main.c: 51: LATE = 0x00;
   590  00103C  0E00               	movlw	0
   591  00103E  6E8D               	movwf	3981,c	;volatile
   592                           
   593                           ;main.c: 55: TRISA = 0xFF;
   594  001040  6892               	setf	3986,c	;volatile
   595                           
   596                           ;main.c: 56: TRISB = 0xFF;
   597  001042  6893               	setf	3987,c	;volatile
   598                           
   599                           ;main.c: 57: TRISC = 0x00;
   600  001044  0E00               	movlw	0
   601  001046  6E94               	movwf	3988,c	;volatile
   602                           
   603                           ;main.c: 58: TRISD = 0x00;
   604  001048  0E00               	movlw	0
   605  00104A  6E95               	movwf	3989,c	;volatile
   606                           
   607                           ;main.c: 59: TRISE = 0x00;
   608  00104C  0E00               	movlw	0
   609  00104E  6E96               	movwf	3990,c	;volatile
   610                           
   611                           ;main.c: 62: ADCON0 = 0x00;
   612  001050  0E00               	movlw	0
   613  001052  6EC2               	movwf	4034,c	;volatile
   614                           
   615                           ;main.c: 63: ADCON1 = 0b00001111;
   616  001054  0E0F               	movlw	15
   617  001056  6EC1               	movwf	4033,c	;volatile
   618                           
   619                           ;main.c: 64: ADCON2bits.ADFM = 1;
   620  001058  8EC0               	bsf	4032,7,c	;volatile
   621                           
   622                           ;main.c: 69: (INTCONbits.GIE = 1);
   623  00105A  8EF2               	bsf	intcon,7,c	;volatile
   624                           
   625                           ;main.c: 70: initLCD();
   626  00105C  ECFA  F00B         	call	_initLCD	;wreg free
   627                           
   628                           ;main.c: 71: I2C_init();
   629  001060  ECC0  F00C         	call	_I2C_init	;wreg free
   630                           
   631                           ;main.c: 75: LATCbits.LATC0 = 1;
   632  001064  808B               	bsf	3979,0,c	;volatile
   633                           
   634                           ;main.c: 76: TRISCbits.RC0 = 0;
   635  001066  9094               	bcf	3988,0,c	;volatile
   636                           
   637                           ;main.c: 82: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   638  001068  0E11               	movlw	low STR_1
   639  00106A  0100               	movlb	0	; () banked
   640  00106C  6F84               	movwf	printf@f& (0+255),b
   641  00106E  0E10               	movlw	high STR_1
   642  001070  6F85               	movwf	(printf@f+1)& (0+255),b
   643  001072  C042  F086         	movff	_B_count,?_printf+2
   644  001076  C043  F087         	movff	_B_count+1,?_printf+3
   645  00107A  C040  F088         	movff	_N_count,?_printf+4
   646  00107E  C041  F089         	movff	_N_count+1,?_printf+5
   647  001082  C03E  F08A         	movff	_S_count,?_printf+6
   648  001086  C03F  F08B         	movff	_S_count+1,?_printf+7
   649  00108A  C03C  F08C         	movff	_W_count,?_printf+8
   650  00108E  C03D  F08D         	movff	_W_count+1,?_printf+9
   651  001092  EC05  F00A         	call	_printf	;wreg free
   652                           
   653                           ;main.c: 83: initLCD();
   654  001096  ECFA  F00B         	call	_initLCD	;wreg free
   655                           
   656                           ;main.c: 87: I2C_sendData('5');
   657  00109A  0E35               	movlw	53
   658  00109C  ECD5  F00C         	call	_I2C_sendData
   659  0010A0                     
   660                           ;main.c: 93: initLCD();
   661  0010A0  ECFA  F00B         	call	_initLCD	;wreg free
   662                           
   663                           ;main.c: 94: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   664  0010A4  0E11               	movlw	low STR_1
   665  0010A6  0100               	movlb	0	; () banked
   666  0010A8  6F84               	movwf	printf@f& (0+255),b
   667  0010AA  0E10               	movlw	high STR_1
   668  0010AC  6F85               	movwf	(printf@f+1)& (0+255),b
   669  0010AE  C042  F086         	movff	_B_count,?_printf+2
   670  0010B2  C043  F087         	movff	_B_count+1,?_printf+3
   671  0010B6  C040  F088         	movff	_N_count,?_printf+4
   672  0010BA  C041  F089         	movff	_N_count+1,?_printf+5
   673  0010BE  C03E  F08A         	movff	_S_count,?_printf+6
   674  0010C2  C03F  F08B         	movff	_S_count+1,?_printf+7
   675  0010C6  C03C  F08C         	movff	_W_count,?_printf+8
   676  0010CA  C03D  F08D         	movff	_W_count+1,?_printf+9
   677  0010CE  EC05  F00A         	call	_printf	;wreg free
   678                           
   679                           ;main.c: 95: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   680  0010D2  0E80               	movlw	128
   681  0010D4  ECFC  F00C         	call	_lcdInst
   682  0010D8  0E34               	movlw	52
   683  0010DA  6E3B               	movwf	??_main& (0+255),c
   684  0010DC  0EF2               	movlw	242
   685  0010DE                     u1417:
   686  0010DE  2EE8               	decfsz	wreg,f,c
   687  0010E0  D7FE               	bra	u1417
   688  0010E2  2E3B               	decfsz	??_main& (0+255),f,c
   689  0010E4  D7FC               	bra	u1417
   690                           
   691                           ;main.c: 99: if (B_count>=4){
   692  0010E6  BE43               	btfsc	_B_count+1,7,c
   693  0010E8  D009               	goto	l165
   694  0010EA  5043               	movf	_B_count+1,w,c
   695  0010EC  E104               	bnz	u1310
   696  0010EE  0E04               	movlw	4
   697  0010F0  5C42               	subwf	_B_count,w,c
   698  0010F2  A0D8               	btfss	status,0,c
   699  0010F4  D003               	goto	l165
   700  0010F6                     u1310:
   701                           
   702                           ;main.c: 100: I2C_sendData('6');
   703  0010F6  0E36               	movlw	54
   704  0010F8  ECD5  F00C         	call	_I2C_sendData
   705  0010FC                     l165:
   706                           
   707                           ;main.c: 102: }
   708                           ;main.c: 104: if (readADC(0)<=250){
   709  0010FC  0E00               	movlw	0
   710  0010FE  ECA6  F00C         	call	_readADC
   711  001102  5033               	movf	?_readADC+1,w,c
   712  001104  E106               	bnz	l2083
   713  001106  0EFB               	movlw	251
   714  001108  5C32               	subwf	?_readADC,w,c
   715  00110A  B0D8               	btfsc	status,0,c
   716  00110C  D002               	goto	l166
   717                           
   718                           ;main.c: 105: B_count ++;
   719  00110E  4A42               	infsnz	_B_count,f,c
   720  001110  2A43               	incf	_B_count+1,f,c
   721  001112                     l166:
   722  001112                     l2083:
   723                           
   724                           ;main.c: 106: }
   725                           ;main.c: 107: _delay((unsigned long)((10)*(32000000/4000.0)));
   726  001112  0E68               	movlw	104
   727  001114  6E3B               	movwf	??_main& (0+255),c
   728  001116  0EE4               	movlw	228
   729  001118                     u1427:
   730  001118  2EE8               	decfsz	wreg,f,c
   731  00111A  D7FE               	bra	u1427
   732  00111C  2E3B               	decfsz	??_main& (0+255),f,c
   733  00111E  D7FC               	bra	u1427
   734  001120  D000               	nop2	
   735  001122  D7BE               	goto	l164
   736  001124                     l2087:
   737                           
   738                           ;main.c: 122: if (N_count>=4){
   739  001124  BE41               	btfsc	_N_count+1,7,c
   740  001126  D00A               	goto	l170
   741  001128  5041               	movf	_N_count+1,w,c
   742  00112A  E104               	bnz	u1330
   743  00112C  0E04               	movlw	4
   744  00112E  5C40               	subwf	_N_count,w,c
   745  001130  A0D8               	btfss	status,0,c
   746  001132  D004               	goto	l170
   747  001134                     u1330:
   748                           
   749                           ;main.c: 123: I2C_sendData('8');
   750  001134  0E38               	movlw	56
   751  001136  ECD5  F00C         	call	_I2C_sendData
   752                           
   753                           ;main.c: 124: break;
   754  00113A  D00C               	goto	l171
   755  00113C                     l170:
   756                           
   757                           ;main.c: 125: }
   758                           ;main.c: 126: if (readADC(1)<=250){
   759  00113C  0E01               	movlw	1
   760  00113E  ECA6  F00C         	call	_readADC
   761  001142  5033               	movf	?_readADC+1,w,c
   762  001144  E1EF               	bnz	l2087
   763  001146  0EFB               	movlw	251
   764  001148  5C32               	subwf	?_readADC,w,c
   765  00114A  B0D8               	btfsc	status,0,c
   766  00114C  D7EB               	goto	l169
   767                           
   768                           ;main.c: 127: N_count++;
   769  00114E  4A40               	infsnz	_N_count,f,c
   770  001150  2A41               	incf	_N_count+1,f,c
   771  001152  D7E8               	goto	l169
   772  001154                     l171:
   773                           
   774                           ;main.c: 128: }
   775                           ;main.c: 131: }
   776                           ;main.c: 134: I2C_sendData('9');
   777  001154  0E39               	movlw	57
   778  001156  ECD5  F00C         	call	_I2C_sendData
   779  00115A                     
   780                           ;main.c: 136: TRISBbits.RB6 = 1;
   781  00115A  8C93               	bsf	3987,6,c	;volatile
   782                           
   783                           ;main.c: 137: S_input = PORTBbits.RB6;
   784  00115C  AC81               	btfss	3969,6,c	;volatile
   785  00115E  D003               	goto	u1350
   786  001160  6A3B               	clrf	??_main& (0+255),c
   787  001162  2A3B               	incf	??_main& (0+255),f,c
   788  001164  D001               	goto	u1358
   789  001166                     u1350:
   790  001166  6A3B               	clrf	??_main& (0+255),c
   791  001168                     u1358:
   792  001168  503B               	movf	??_main,w,c
   793  00116A  6E48               	movwf	_S_input,c
   794  00116C  6A49               	clrf	_S_input+1,c
   795                           
   796                           ;main.c: 138: initLCD();
   797  00116E  ECFA  F00B         	call	_initLCD	;wreg free
   798                           
   799                           ;main.c: 139: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   800  001172  0E11               	movlw	low STR_1
   801  001174  0100               	movlb	0	; () banked
   802  001176  6F84               	movwf	printf@f& (0+255),b
   803  001178  0E10               	movlw	high STR_1
   804  00117A  6F85               	movwf	(printf@f+1)& (0+255),b
   805  00117C  C042  F086         	movff	_B_count,?_printf+2
   806  001180  C043  F087         	movff	_B_count+1,?_printf+3
   807  001184  C040  F088         	movff	_N_count,?_printf+4
   808  001188  C041  F089         	movff	_N_count+1,?_printf+5
   809  00118C  C03E  F08A         	movff	_S_count,?_printf+6
   810  001190  C03F  F08B         	movff	_S_count+1,?_printf+7
   811  001194  C03C  F08C         	movff	_W_count,?_printf+8
   812  001198  C03D  F08D         	movff	_W_count+1,?_printf+9
   813  00119C  EC05  F00A         	call	_printf	;wreg free
   814                           
   815                           ;main.c: 140: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   816  0011A0  0E80               	movlw	128
   817  0011A2  ECFC  F00C         	call	_lcdInst
   818  0011A6  0E34               	movlw	52
   819  0011A8  6E3B               	movwf	??_main& (0+255),c
   820  0011AA  0EF2               	movlw	242
   821  0011AC                     u1437:
   822  0011AC  2EE8               	decfsz	wreg,f,c
   823  0011AE  D7FE               	bra	u1437
   824  0011B0  2E3B               	decfsz	??_main& (0+255),f,c
   825  0011B2  D7FC               	bra	u1437
   826                           
   827                           ;main.c: 141: if (S_count>=4){
   828  0011B4  BE3F               	btfsc	_S_count+1,7,c
   829  0011B6  D00A               	goto	l175
   830  0011B8  503F               	movf	_S_count+1,w,c
   831  0011BA  E104               	bnz	u1360
   832  0011BC  0E04               	movlw	4
   833  0011BE  5C3E               	subwf	_S_count,w,c
   834  0011C0  A0D8               	btfss	status,0,c
   835  0011C2  D004               	goto	l175
   836  0011C4                     u1360:
   837                           
   838                           ;main.c: 142: I2C_sendData(12);
   839  0011C4  0E0C               	movlw	12
   840  0011C6  ECD5  F00C         	call	_I2C_sendData
   841                           
   842                           ;main.c: 143: break;
   843  0011CA  D007               	goto	l176
   844  0011CC                     l175:
   845                           
   846                           ;main.c: 144: }
   847                           ;main.c: 146: if (S_input ==0){
   848  0011CC  5048               	movf	_S_input,w,c
   849  0011CE  1049               	iorwf	_S_input+1,w,c
   850  0011D0  A4D8               	btfss	status,2,c
   851  0011D2  D7C3               	goto	l174
   852                           
   853                           ;main.c: 147: S_count ++;
   854  0011D4  4A3E               	infsnz	_S_count,f,c
   855  0011D6  2A3F               	incf	_S_count+1,f,c
   856  0011D8  D7C0               	goto	l174
   857  0011DA                     l176:
   858                           
   859                           ;main.c: 148: }
   860                           ;main.c: 149: }
   861                           ;main.c: 153: I2C_sendData(11);
   862  0011DA  0E0B               	movlw	11
   863  0011DC  ECD5  F00C         	call	_I2C_sendData
   864  0011E0                     
   865                           ;main.c: 156: TRISBbits.RB7 = 1;
   866  0011E0  8E93               	bsf	3987,7,c	;volatile
   867                           
   868                           ;main.c: 157: W_input = PORTBbits.RB7;
   869  0011E2  AE81               	btfss	3969,7,c	;volatile
   870  0011E4  D003               	goto	u1380
   871  0011E6  6A3B               	clrf	??_main& (0+255),c
   872  0011E8  2A3B               	incf	??_main& (0+255),f,c
   873  0011EA  D001               	goto	u1388
   874  0011EC                     u1380:
   875  0011EC  6A3B               	clrf	??_main& (0+255),c
   876  0011EE                     u1388:
   877  0011EE  503B               	movf	??_main,w,c
   878  0011F0  6E46               	movwf	_W_input,c
   879  0011F2  6A47               	clrf	_W_input+1,c
   880                           
   881                           ;main.c: 158: initLCD();
   882  0011F4  ECFA  F00B         	call	_initLCD	;wreg free
   883                           
   884                           ;main.c: 159: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   885  0011F8  0E11               	movlw	low STR_1
   886  0011FA  0100               	movlb	0	; () banked
   887  0011FC  6F84               	movwf	printf@f& (0+255),b
   888  0011FE  0E10               	movlw	high STR_1
   889  001200  6F85               	movwf	(printf@f+1)& (0+255),b
   890  001202  C042  F086         	movff	_B_count,?_printf+2
   891  001206  C043  F087         	movff	_B_count+1,?_printf+3
   892  00120A  C040  F088         	movff	_N_count,?_printf+4
   893  00120E  C041  F089         	movff	_N_count+1,?_printf+5
   894  001212  C03E  F08A         	movff	_S_count,?_printf+6
   895  001216  C03F  F08B         	movff	_S_count+1,?_printf+7
   896  00121A  C03C  F08C         	movff	_W_count,?_printf+8
   897  00121E  C03D  F08D         	movff	_W_count+1,?_printf+9
   898  001222  EC05  F00A         	call	_printf	;wreg free
   899                           
   900                           ;main.c: 160: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   901  001226  0E80               	movlw	128
   902  001228  ECFC  F00C         	call	_lcdInst
   903  00122C  0E34               	movlw	52
   904  00122E  6E3B               	movwf	??_main& (0+255),c
   905  001230  0EF2               	movlw	242
   906  001232                     u1447:
   907  001232  2EE8               	decfsz	wreg,f,c
   908  001234  D7FE               	bra	u1447
   909  001236  2E3B               	decfsz	??_main& (0+255),f,c
   910  001238  D7FC               	bra	u1447
   911                           
   912                           ;main.c: 161: if (W_count>=4){
   913  00123A  BE3D               	btfsc	_W_count+1,7,c
   914  00123C  D00A               	goto	l180
   915  00123E  503D               	movf	_W_count+1,w,c
   916  001240  E104               	bnz	u1390
   917  001242  0E04               	movlw	4
   918  001244  5C3C               	subwf	_W_count,w,c
   919  001246  A0D8               	btfss	status,0,c
   920  001248  D004               	goto	l180
   921  00124A                     u1390:
   922                           
   923                           ;main.c: 162: I2C_sendData(12);
   924  00124A  0E0C               	movlw	12
   925  00124C  ECD5  F00C         	call	_I2C_sendData
   926                           
   927                           ;main.c: 163: break;
   928  001250  D007               	goto	l181
   929  001252                     l180:
   930                           
   931                           ;main.c: 164: }
   932                           ;main.c: 165: if (W_input == 0){
   933  001252  5046               	movf	_W_input,w,c
   934  001254  1047               	iorwf	_W_input+1,w,c
   935  001256  A4D8               	btfss	status,2,c
   936  001258  D7C3               	goto	l179
   937                           
   938                           ;main.c: 166: W_count++;
   939  00125A  4A3C               	infsnz	_W_count,f,c
   940  00125C  2A3D               	incf	_W_count+1,f,c
   941  00125E  D7C0               	goto	l179
   942  001260                     l181:
   943                           
   944                           ;main.c: 167: }
   945                           ;main.c: 168: }
   946                           ;main.c: 206: initLCD();
   947  001260  ECFA  F00B         	call	_initLCD	;wreg free
   948                           
   949                           ;main.c: 207: RBIE = 0;
   950  001264  96F2               	bcf	intcon,3,c	;volatile
   951  001266                     
   952                           ;main.c: 211: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   953  001266  0E11               	movlw	low STR_1
   954  001268  0100               	movlb	0	; () banked
   955  00126A  6F84               	movwf	printf@f& (0+255),b
   956  00126C  0E10               	movlw	high STR_1
   957  00126E  6F85               	movwf	(printf@f+1)& (0+255),b
   958  001270  C042  F086         	movff	_B_count,?_printf+2
   959  001274  C043  F087         	movff	_B_count+1,?_printf+3
   960  001278  C040  F088         	movff	_N_count,?_printf+4
   961  00127C  C041  F089         	movff	_N_count+1,?_printf+5
   962  001280  C03E  F08A         	movff	_S_count,?_printf+6
   963  001284  C03F  F08B         	movff	_S_count+1,?_printf+7
   964  001288  C03C  F08C         	movff	_W_count,?_printf+8
   965  00128C  C03D  F08D         	movff	_W_count+1,?_printf+9
   966  001290  EC05  F00A         	call	_printf	;wreg free
   967                           
   968                           ;main.c: 212: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   969  001294  0E80               	movlw	128
   970  001296  ECFC  F00C         	call	_lcdInst
   971  00129A  0E34               	movlw	52
   972  00129C  6E3B               	movwf	??_main& (0+255),c
   973  00129E  0EF2               	movlw	242
   974  0012A0                     u1457:
   975  0012A0  2EE8               	decfsz	wreg,f,c
   976  0012A2  D7FE               	bra	u1457
   977  0012A4  2E3B               	decfsz	??_main& (0+255),f,c
   978  0012A6  D7FC               	bra	u1457
   979  0012A8  D7DE               	goto	l184
   980  0012AA                     __end_of_main:
   981                           	opt stack 0
   982                           tblptru	equ	0xFF8
   983                           tblptrh	equ	0xFF7
   984                           tblptrl	equ	0xFF6
   985                           tablat	equ	0xFF5
   986                           intcon	equ	0xFF2
   987                           postinc0	equ	0xFEE
   988                           wreg	equ	0xFE8
   989                           postdec1	equ	0xFE5
   990                           fsr1l	equ	0xFE1
   991                           status	equ	0xFD8
   992                           
   993 ;; *************** function _readADC *****************
   994 ;; Defined at:
   995 ;;		line 297 in file "main.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  channel         1    wreg     unsigned char 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  channel         1   53[COMRAM] unsigned char 
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  2   49[COMRAM] unsigned short 
  1002 ;; Registers used:
  1003 ;;		wreg, status,2, status,0
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1009 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1012 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1013 ;;Total ram usage:        5 bytes
  1014 ;; Hardware stack levels used:    1
  1015 ;; Hardware stack levels required when called:    4
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           	psect	text1
  1024  00194C                     __ptext1:
  1025                           	opt stack 0
  1026  00194C                     _readADC:
  1027                           	opt stack 26
  1028                           
  1029                           ;incstack = 0
  1030                           ;readADC@channel stored from wreg
  1031  00194C  6E36               	movwf	readADC@channel,c
  1032                           
  1033                           ;main.c: 306: ADCON0 = (channel & 0x0F) << 2;
  1034  00194E  C036  F034         	movff	readADC@channel,??_readADC
  1035  001952  0E0F               	movlw	15
  1036  001954  1634               	andwf	??_readADC,f,c
  1037  001956  90D8               	bcf	status,0,c
  1038  001958  3634               	rlcf	??_readADC,f,c
  1039  00195A  90D8               	bcf	status,0,c
  1040  00195C  3434               	rlcf	??_readADC,w,c
  1041  00195E  6EC2               	movwf	4034,c	;volatile
  1042                           
  1043                           ;main.c: 307: ADON = 1;
  1044  001960  80C2               	bsf	4034,0,c	;volatile
  1045                           
  1046                           ;main.c: 308: ADCON0bits.GO = 1;
  1047  001962  82C2               	bsf	4034,1,c	;volatile
  1048  001964  B2C2               	btfsc	4034,1,c	;volatile
  1049  001966  D7FE               	goto	l201
  1050                           
  1051                           ;main.c: 310: return (ADRESH << 8) | ADRESL;
  1052  001968  50C3               	movf	4035,w,c	;volatile
  1053  00196A  CFC4 F034          	movff	4036,??_readADC	;volatile
  1054  00196E  6A35               	clrf	(??_readADC+1)& (0+255),c
  1055  001970  C034  F035         	movff	??_readADC,??_readADC+1
  1056  001974  6A34               	clrf	??_readADC,c
  1057  001976  1034               	iorwf	??_readADC,w,c
  1058  001978  6E32               	movwf	?_readADC,c
  1059  00197A  5035               	movf	??_readADC+1,w,c
  1060  00197C  6E33               	movwf	?_readADC+1,c
  1061  00197E  0012               	return	
  1062  001980                     __end_of_readADC:
  1063                           	opt stack 0
  1064                           tblptru	equ	0xFF8
  1065                           tblptrh	equ	0xFF7
  1066                           tblptrl	equ	0xFF6
  1067                           tablat	equ	0xFF5
  1068                           intcon	equ	0xFF2
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           postdec1	equ	0xFE5
  1072                           fsr1l	equ	0xFE1
  1073                           status	equ	0xFD8
  1074                           
  1075 ;; *************** function _printf *****************
  1076 ;; Defined at:
  1077 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;  f               2    4[BANK0 ] PTR const unsigned char 
  1080 ;;		 -> STR_6(20), STR_5(20), STR_4(20), STR_3(20), 
  1081 ;;		 -> STR_2(20), STR_1(20), 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  tmpval          4    0        struct .
  1084 ;;  cp              3    0        PTR const unsigned char 
  1085 ;;  val             2   18[BANK0 ] unsigned int 
  1086 ;;  ap              2   14[BANK0 ] PTR void [1]
  1087 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1088 ;;  len             2    0        unsigned int 
  1089 ;;  c               1   20[BANK0 ] char 
  1090 ;;  prec            1   17[BANK0 ] char 
  1091 ;;  flag            1   16[BANK0 ] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  2    4[BANK0 ] int 
  1094 ;; Registers used:
  1095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1101 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1102 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1104 ;;      Totals:         1      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1105 ;;Total ram usage:       18 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    6
  1108 ;; This function calls:
  1109 ;;		___lwdiv
  1110 ;;		___lwmod
  1111 ;;		_putch
  1112 ;; This function is called by:
  1113 ;;		_main
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           	psect	text2
  1118  00140A                     __ptext2:
  1119                           	opt stack 0
  1120  00140A                     _printf:
  1121                           	opt stack 24
  1122                           
  1123                           ;doprnt.c: 466: va_list ap;
  1124                           ;doprnt.c: 499: signed char c;
  1125                           ;doprnt.c: 506: signed char prec;
  1126                           ;doprnt.c: 508: unsigned char flag;
  1127                           ;doprnt.c: 523: union {
  1128                           ;doprnt.c: 524: unsigned long vd;
  1129                           ;doprnt.c: 525: double integ;
  1130                           ;doprnt.c: 526: } tmpval;
  1131                           ;doprnt.c: 528: unsigned int val;
  1132                           ;doprnt.c: 529: unsigned len;
  1133                           ;doprnt.c: 530: const char * cp;
  1134                           ;doprnt.c: 533: *ap = __va_start();
  1135                           
  1136                           ;incstack = 0
  1137  00140A  0E86               	movlw	low (?_printf+2)
  1138  00140C  0100               	movlb	0	; () banked
  1139  00140E  6F8E               	movwf	printf@ap& (0+255),b
  1140  001410  0E00               	movlw	high (?_printf+2)
  1141  001412  6F8F               	movwf	(printf@ap+1)& (0+255),b
  1142                           
  1143                           ;doprnt.c: 536: while(c = *f++) {
  1144  001414  D082               	goto	u1290
  1145  001416                     
  1146                           ; BSR set to: 0
  1147                           ;doprnt.c: 538: if(c != '%')
  1148                           
  1149                           ; BSR set to: 0
  1150  001416  0E25               	movlw	37
  1151  001418  1994               	xorwf	printf@c& (0+255),w,b
  1152  00141A  B4D8               	btfsc	status,2,c
  1153  00141C  D004               	goto	l262
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;doprnt.c: 540: {
  1157                           ;doprnt.c: 541: (putch(c) );
  1158  00141E  5194               	movf	printf@c& (0+255),w,b
  1159  001420  ECF2  F00C         	call	_putch
  1160                           
  1161                           ;doprnt.c: 542: continue;
  1162  001424  D07A               	goto	u1290
  1163  001426                     l262:
  1164                           
  1165                           ;doprnt.c: 543: }
  1166                           ;doprnt.c: 548: flag = 0;
  1167  001426  0E00               	movlw	0
  1168  001428  0100               	movlb	0	; () banked
  1169  00142A  6F90               	movwf	printf@flag& (0+255),b
  1170                           
  1171                           ; BSR set to: 0
  1172                           
  1173                           ; BSR set to: 0
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;doprnt.c: 822: }
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;doprnt.c: 813: continue;
  1180                           
  1181                           ;doprnt.c: 802: default:
  1182                           
  1183                           ; BSR set to: 0
  1184                           ;doprnt.c: 698: case 'i':
  1185                           ;doprnt.c: 699: break;
  1186                           
  1187                           ; BSR set to: 0
  1188                           
  1189                           ;doprnt.c: 697: case 'd':
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;doprnt.c: 638: goto alldone;
  1193                           
  1194                           ;doprnt.c: 637: case 0:
  1195                           
  1196                           ;doprnt.c: 635: switch(c = *f++) {
  1197  00142C  C084  FFF6         	movff	printf@f,tblptrl
  1198  001430  C085  FFF7         	movff	printf@f+1,tblptrh
  1199  001434  4B84               	infsnz	printf@f& (0+255),f,b
  1200  001436  2B85               	incf	(printf@f+1)& (0+255),f,b
  1201  001438                     	if	0	;tblptru may be non-zero
  1202  001438                     	endif
  1203  001438                     	if	0	;tblptru may be non-zero
  1204  001438                     	endif
  1205  001438  0008               	tblrd		*
  1206  00143A  CFF5 F094          	movff	tablat,printf@c
  1207  00143E  5194               	movf	printf@c& (0+255),w,b
  1208                           
  1209                           ; Switch size 1, requested type "space"
  1210                           ; Number of cases is 3, Range of values is 0 to 105
  1211                           ; switch strategies available:
  1212                           ; Name         Instructions Cycles
  1213                           ; simple_byte           10     6 (average)
  1214                           ;	Chosen strategy is simple_byte
  1215  001440  0A00               	xorlw	0	; case 0
  1216  001442  B4D8               	btfsc	status,2,c
  1217  001444  0012               	return	
  1218  001446  0A64               	xorlw	100	; case 100
  1219  001448  B4D8               	btfsc	status,2,c
  1220  00144A  D003               	goto	l268
  1221  00144C  0A0D               	xorlw	13	; case 105
  1222  00144E  A4D8               	btfss	status,2,c
  1223  001450  D064               	goto	u1290
  1224  001452                     l268:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;doprnt.c: 1253: {
  1228                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1229                           
  1230                           ; BSR set to: 0
  1231  001452  C08E  FFD9         	movff	printf@ap,fsr2l
  1232  001456  C08F  FFDA         	movff	printf@ap+1,fsr2h
  1233  00145A  CFDE F092          	movff	postinc2,printf@val
  1234  00145E  CFDD F093          	movff	postdec2,printf@val+1
  1235                           
  1236                           ; BSR set to: 0
  1237  001462  0E02               	movlw	2
  1238  001464  278E               	addwf	printf@ap& (0+255),f,b
  1239  001466  0E00               	movlw	0
  1240  001468  238F               	addwfc	(printf@ap+1)& (0+255),f,b
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;doprnt.c: 1261: if((int)val < 0) {
  1244  00146A  AF93               	btfss	(printf@val+1)& (0+255),7,b
  1245  00146C  D006               	goto	l270
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;doprnt.c: 1262: flag |= 0x03;
  1249  00146E  0E03               	movlw	3
  1250  001470  1390               	iorwf	printf@flag& (0+255),f,b
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;doprnt.c: 1263: val = -val;
  1254  001472  6D92               	negf	printf@val& (0+255),b
  1255  001474  1F93               	comf	(printf@val+1)& (0+255),f,b
  1256  001476  B0D8               	btfsc	status,0,c
  1257  001478  2B93               	incf	(printf@val+1)& (0+255),f,b
  1258  00147A                     l270:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;doprnt.c: 1264: }
  1262                           ;doprnt.c: 1266: }
  1263                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1264                           
  1265                           ; BSR set to: 0
  1266  00147A  0E01               	movlw	1
  1267  00147C  6F94               	movwf	printf@c& (0+255),b
  1268  00147E                     l2017:
  1269                           
  1270                           ; BSR set to: 0
  1271  00147E  0E05               	movlw	5
  1272  001480  1994               	xorwf	printf@c& (0+255),w,b
  1273  001482  B4D8               	btfsc	status,2,c
  1274  001484  D012               	goto	u1270
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;doprnt.c: 1306: if(val < dpowers[c])
  1278                           
  1279                           ; BSR set to: 0
  1280                           
  1281                           ; BSR set to: 0
  1282  001486  5194               	movf	printf@c& (0+255),w,b
  1283  001488  0D02               	mullw	2
  1284  00148A  0E01               	movlw	low _dpowers
  1285  00148C  24F3               	addwf	prodl,w,c
  1286  00148E  6EF6               	movwf	tblptrl,c
  1287  001490  0E10               	movlw	high _dpowers
  1288  001492  20F4               	addwfc	prodh,w,c
  1289  001494  6EF7               	movwf	tblptrh,c
  1290  001496                     	if	0	;There are less than 3 active tblptr bytes
  1291  001496                     	endif
  1292  001496  0009               	tblrd		*+
  1293  001498  50F5               	movf	tablat,w,c
  1294  00149A  5D92               	subwf	printf@val& (0+255),w,b
  1295  00149C  0009               	tblrd		*+
  1296  00149E  50F5               	movf	tablat,w,c
  1297  0014A0  5993               	subwfb	(printf@val+1)& (0+255),w,b
  1298  0014A2  A0D8               	btfss	status,0,c
  1299  0014A4  D002               	goto	u1270
  1300                           
  1301                           ; BSR set to: 0
  1302                           
  1303                           ; BSR set to: 0
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;doprnt.c: 1307: break;
  1307  0014A6  2B94               	incf	printf@c& (0+255),f,b
  1308  0014A8  D7EA               	goto	l2017
  1309  0014AA                     u1270:
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;doprnt.c: 1422: {
  1313                           ;doprnt.c: 1438: if(flag & 0x03)
  1314                           
  1315                           ; BSR set to: 0
  1316  0014AA  C090  F03A         	movff	printf@flag,??_printf
  1317  0014AE  0E03               	movlw	3
  1318  0014B0  163A               	andwf	??_printf,f,c
  1319  0014B2  B4D8               	btfsc	status,2,c
  1320  0014B4  D003               	goto	l274
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;doprnt.c: 1439: (putch('-') );
  1324  0014B6  0E2D               	movlw	45
  1325  0014B8  ECF2  F00C         	call	_putch
  1326  0014BC                     l274:
  1327                           
  1328                           ;doprnt.c: 1469: }
  1329                           ;doprnt.c: 1472: prec = c;
  1330  0014BC  C094  F091         	movff	printf@c,printf@prec
  1331                           
  1332                           ;doprnt.c: 1474: while(prec--) {
  1333  0014C0  D027               	goto	l275
  1334  0014C2                     
  1335                           ;doprnt.c: 1478: {
  1336                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1337  0014C2  0100               	movlb	0	; () banked
  1338  0014C4  5191               	movf	printf@prec& (0+255),w,b
  1339  0014C6  0D02               	mullw	2
  1340  0014C8  0E01               	movlw	low _dpowers
  1341  0014CA  24F3               	addwf	prodl,w,c
  1342  0014CC  6EF6               	movwf	tblptrl,c
  1343  0014CE  0E10               	movlw	high _dpowers
  1344  0014D0  20F4               	addwfc	prodh,w,c
  1345  0014D2  6EF7               	movwf	tblptrh,c
  1346  0014D4                     	if	0	;There are less than 3 active tblptr bytes
  1347  0014D4                     	endif
  1348  0014D4  0009               	tblrd		*+
  1349  0014D6  CFF5 F034          	movff	tablat,___lwdiv@divisor
  1350  0014DA  000A               	tblrd		*-
  1351  0014DC  CFF5 F035          	movff	tablat,___lwdiv@divisor+1
  1352  0014E0  C092  F032         	movff	printf@val,___lwdiv@dividend
  1353  0014E4  C093  F033         	movff	printf@val+1,___lwdiv@dividend+1
  1354  0014E8  ECA8  F00B         	call	___lwdiv	;wreg free
  1355  0014EC  C032  F080         	movff	?___lwdiv,___lwmod@dividend
  1356  0014F0  C033  F081         	movff	?___lwdiv+1,___lwmod@dividend+1
  1357  0014F4  0E00               	movlw	0
  1358  0014F6  0100               	movlb	0	; () banked
  1359  0014F8  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  1360  0014FA  0E0A               	movlw	10
  1361  0014FC  6F82               	movwf	___lwmod@divisor& (0+255),b
  1362  0014FE  EC46  F00C         	call	___lwmod	;wreg free
  1363  001502  0100               	movlb	0	; () banked
  1364  001504  5180               	movf	?___lwmod& (0+255),w,b
  1365  001506  0F30               	addlw	48
  1366  001508  6F94               	movwf	printf@c& (0+255),b
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;doprnt.c: 1523: }
  1370                           ;doprnt.c: 1524: (putch(c) );
  1371  00150A  5194               	movf	printf@c& (0+255),w,b
  1372  00150C  ECF2  F00C         	call	_putch
  1373  001510                     l275:
  1374  001510  0100               	movlb	0	; () banked
  1375  001512  0791               	decf	printf@prec& (0+255),f,b
  1376  001514  2991               	incf	printf@prec& (0+255),w,b
  1377  001516  A4D8               	btfss	status,2,c
  1378  001518  D7D4               	goto	l276
  1379  00151A                     u1290:
  1380                           
  1381                           ; BSR set to: 0
  1382                           
  1383                           ; BSR set to: 0
  1384  00151A  C084  FFF6         	movff	printf@f,tblptrl
  1385  00151E  C085  FFF7         	movff	printf@f+1,tblptrh
  1386  001522  0100               	movlb	0	; () banked
  1387  001524  4B84               	infsnz	printf@f& (0+255),f,b
  1388  001526  2B85               	incf	(printf@f+1)& (0+255),f,b
  1389  001528                     	if	0	;tblptru may be non-zero
  1390  001528                     	endif
  1391  001528                     	if	0	;tblptru may be non-zero
  1392  001528                     	endif
  1393  001528  0008               	tblrd		*
  1394  00152A  CFF5 F094          	movff	tablat,printf@c
  1395  00152E  5194               	movf	printf@c& (0+255),w,b
  1396  001530  B4D8               	btfsc	status,2,c
  1397  001532  0012               	return	
  1398  001534  D770               	goto	l261
  1399  001536                     __end_of_printf:
  1400                           	opt stack 0
  1401                           tblptru	equ	0xFF8
  1402                           tblptrh	equ	0xFF7
  1403                           tblptrl	equ	0xFF6
  1404                           tablat	equ	0xFF5
  1405                           prodh	equ	0xFF4
  1406                           prodl	equ	0xFF3
  1407                           intcon	equ	0xFF2
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           postdec1	equ	0xFE5
  1411                           fsr1l	equ	0xFE1
  1412                           postinc2	equ	0xFDE
  1413                           postdec2	equ	0xFDD
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function _putch *****************
  1419 ;; Defined at:
  1420 ;;		line 24 in file "lcd.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  data            1    wreg     unsigned char 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  data            1   51[COMRAM] unsigned char 
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2, status,0, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1438 ;;Total ram usage:        1 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    5
  1441 ;; This function calls:
  1442 ;;		_lcdNibble
  1443 ;; This function is called by:
  1444 ;;		_printf
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text3
  1449  0019E4                     __ptext3:
  1450                           	opt stack 0
  1451  0019E4                     _putch:
  1452                           	opt stack 24
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;incstack = 0
  1456                           ;putch@data stored from wreg
  1457  0019E4  6E34               	movwf	putch@data,c
  1458                           
  1459                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1460  0019E6  848C               	bsf	3980,2,c	;volatile
  1461                           
  1462                           ;lcd.c: 33: lcdNibble(data);
  1463  0019E8  5034               	movf	putch@data,w,c
  1464  0019EA  EC2A  F00B         	call	_lcdNibble
  1465                           
  1466                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1467  0019EE  0EA0               	movlw	160
  1468  0019F0                     u1467:
  1469  0019F0  D000               	nop2	
  1470  0019F2  2EE8               	decfsz	wreg,f,c
  1471  0019F4  D7FD               	bra	u1467
  1472  0019F6  0012               	return		;funcret
  1473  0019F8                     __end_of_putch:
  1474                           	opt stack 0
  1475                           tblptru	equ	0xFF8
  1476                           tblptrh	equ	0xFF7
  1477                           tblptrl	equ	0xFF6
  1478                           tablat	equ	0xFF5
  1479                           prodh	equ	0xFF4
  1480                           prodl	equ	0xFF3
  1481                           intcon	equ	0xFF2
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1l	equ	0xFE1
  1486                           postinc2	equ	0xFDE
  1487                           postdec2	equ	0xFDD
  1488                           fsr2h	equ	0xFDA
  1489                           fsr2l	equ	0xFD9
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function ___lwmod *****************
  1493 ;; Defined at:
  1494 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  dividend        2    0[BANK0 ] unsigned int 
  1497 ;;  divisor         2    2[BANK0 ] unsigned int 
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  counter         1   56[COMRAM] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  2    0[BANK0 ] unsigned int 
  1502 ;; Registers used:
  1503 ;;		wreg, status,2, status,0
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1509 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;Total ram usage:        5 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    4
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_printf
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text4
  1524  00188C                     __ptext4:
  1525                           	opt stack 0
  1526  00188C                     ___lwmod:
  1527                           	opt stack 25
  1528                           
  1529                           ;incstack = 0
  1530  00188C  0100               	movlb	0	; () banked
  1531  00188E  5182               	movf	___lwmod@divisor& (0+255),w,b
  1532  001890  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1533  001892  B4D8               	btfsc	status,2,c
  1534  001894  D018               	goto	l698
  1535                           
  1536                           ; BSR set to: 0
  1537  001896  0E01               	movlw	1
  1538  001898  6E39               	movwf	___lwmod@counter,c
  1539  00189A  D004               	goto	l693
  1540  00189C                     
  1541                           ; BSR set to: 0
  1542                           
  1543                           ; BSR set to: 0
  1544  00189C  90D8               	bcf	status,0,c
  1545  00189E  3782               	rlcf	___lwmod@divisor& (0+255),f,b
  1546  0018A0  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1547  0018A2  2A39               	incf	___lwmod@counter,f,c
  1548  0018A4                     l693:
  1549                           
  1550                           ; BSR set to: 0
  1551                           
  1552                           ; BSR set to: 0
  1553  0018A4  AF83               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1554  0018A6  D7FA               	goto	l694
  1555  0018A8                     u1210:
  1556                           
  1557                           ; BSR set to: 0
  1558                           
  1559                           ; BSR set to: 0
  1560                           
  1561                           ; BSR set to: 0
  1562  0018A8  5182               	movf	___lwmod@divisor& (0+255),w,b
  1563  0018AA  5D80               	subwf	___lwmod@dividend& (0+255),w,b
  1564  0018AC  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1565  0018AE  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1566  0018B0  A0D8               	btfss	status,0,c
  1567  0018B2  D004               	goto	l697
  1568                           
  1569                           ; BSR set to: 0
  1570  0018B4  5182               	movf	___lwmod@divisor& (0+255),w,b
  1571  0018B6  5F80               	subwf	___lwmod@dividend& (0+255),f,b
  1572  0018B8  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1573  0018BA  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1574  0018BC                     l697:
  1575                           
  1576                           ; BSR set to: 0
  1577                           
  1578                           ; BSR set to: 0
  1579  0018BC  90D8               	bcf	status,0,c
  1580  0018BE  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1581  0018C0  3382               	rrcf	___lwmod@divisor& (0+255),f,b
  1582                           
  1583                           ; BSR set to: 0
  1584  0018C2  2E39               	decfsz	___lwmod@counter,f,c
  1585  0018C4  D7F1               	goto	u1210
  1586  0018C6                     l698:
  1587                           
  1588                           ; BSR set to: 0
  1589                           
  1590                           ; BSR set to: 0
  1591  0018C6  C080  F080         	movff	___lwmod@dividend,?___lwmod
  1592  0018CA  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
  1593                           
  1594                           ; BSR set to: 0
  1595  0018CE  0012               	return		;funcret
  1596  0018D0                     __end_of___lwmod:
  1597                           	opt stack 0
  1598                           tblptru	equ	0xFF8
  1599                           tblptrh	equ	0xFF7
  1600                           tblptrl	equ	0xFF6
  1601                           tablat	equ	0xFF5
  1602                           prodh	equ	0xFF4
  1603                           prodl	equ	0xFF3
  1604                           intcon	equ	0xFF2
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postdec1	equ	0xFE5
  1608                           fsr1l	equ	0xFE1
  1609                           postinc2	equ	0xFDE
  1610                           postdec2	equ	0xFDD
  1611                           fsr2h	equ	0xFDA
  1612                           fsr2l	equ	0xFD9
  1613                           status	equ	0xFD8
  1614                           
  1615 ;; *************** function ___lwdiv *****************
  1616 ;; Defined at:
  1617 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  dividend        2   49[COMRAM] unsigned int 
  1620 ;;  divisor         2   51[COMRAM] unsigned int 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  quotient        2   53[COMRAM] unsigned int 
  1623 ;;  counter         1   55[COMRAM] unsigned char 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  2   49[COMRAM] unsigned int 
  1626 ;; Registers used:
  1627 ;;		wreg, status,2, status,0
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1634 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1636 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;Total ram usage:        7 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; Hardware stack levels required when called:    4
  1640 ;; This function calls:
  1641 ;;		Nothing
  1642 ;; This function is called by:
  1643 ;;		_printf
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text5
  1648  001750                     __ptext5:
  1649                           	opt stack 0
  1650  001750                     ___lwdiv:
  1651                           	opt stack 25
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;incstack = 0
  1655  001750  0E00               	movlw	0
  1656  001752  6E37               	movwf	___lwdiv@quotient+1,c
  1657  001754  0E00               	movlw	0
  1658  001756  6E36               	movwf	___lwdiv@quotient,c
  1659  001758  5034               	movf	___lwdiv@divisor,w,c
  1660  00175A  1035               	iorwf	___lwdiv@divisor+1,w,c
  1661  00175C  B4D8               	btfsc	status,2,c
  1662  00175E  D01C               	goto	l688
  1663  001760  0E01               	movlw	1
  1664  001762  6E38               	movwf	___lwdiv@counter,c
  1665  001764  D004               	goto	l683
  1666  001766  90D8               	bcf	status,0,c
  1667  001768  3634               	rlcf	___lwdiv@divisor,f,c
  1668  00176A  3635               	rlcf	___lwdiv@divisor+1,f,c
  1669  00176C  2A38               	incf	___lwdiv@counter,f,c
  1670  00176E                     l683:
  1671  00176E  AE35               	btfss	___lwdiv@divisor+1,7,c
  1672  001770  D7FA               	goto	l684
  1673  001772                     u670:
  1674  001772  90D8               	bcf	status,0,c
  1675  001774  3636               	rlcf	___lwdiv@quotient,f,c
  1676  001776  3637               	rlcf	___lwdiv@quotient+1,f,c
  1677  001778  5034               	movf	___lwdiv@divisor,w,c
  1678  00177A  5C32               	subwf	___lwdiv@dividend,w,c
  1679  00177C  5035               	movf	___lwdiv@divisor+1,w,c
  1680  00177E  5833               	subwfb	___lwdiv@dividend+1,w,c
  1681  001780  A0D8               	btfss	status,0,c
  1682  001782  D005               	goto	l687
  1683  001784  5034               	movf	___lwdiv@divisor,w,c
  1684  001786  5E32               	subwf	___lwdiv@dividend,f,c
  1685  001788  5035               	movf	___lwdiv@divisor+1,w,c
  1686  00178A  5A33               	subwfb	___lwdiv@dividend+1,f,c
  1687  00178C  8036               	bsf	___lwdiv@quotient,0,c
  1688  00178E                     l687:
  1689  00178E  90D8               	bcf	status,0,c
  1690  001790  3235               	rrcf	___lwdiv@divisor+1,f,c
  1691  001792  3234               	rrcf	___lwdiv@divisor,f,c
  1692  001794  2E38               	decfsz	___lwdiv@counter,f,c
  1693  001796  D7ED               	goto	u670
  1694  001798                     l688:
  1695  001798  C036  F032         	movff	___lwdiv@quotient,?___lwdiv
  1696  00179C  C037  F033         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1697  0017A0  0012               	return		;funcret
  1698  0017A2                     __end_of___lwdiv:
  1699                           	opt stack 0
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           prodh	equ	0xFF4
  1705                           prodl	equ	0xFF3
  1706                           intcon	equ	0xFF2
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1l	equ	0xFE1
  1711                           postinc2	equ	0xFDE
  1712                           postdec2	equ	0xFDD
  1713                           fsr2h	equ	0xFDA
  1714                           fsr2l	equ	0xFD9
  1715                           status	equ	0xFD8
  1716                           
  1717 ;; *************** function _initLCD *****************
  1718 ;; Defined at:
  1719 ;;		line 60 in file "lcd.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0, cstack
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1737 ;;Total ram usage:        1 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    6
  1740 ;; This function calls:
  1741 ;;		_lcdInst
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text6
  1748  0017F4                     __ptext6:
  1749                           	opt stack 0
  1750  0017F4                     _initLCD:
  1751                           	opt stack 24
  1752                           
  1753                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1754                           
  1755                           ;incstack = 0
  1756  0017F4  0E9C               	movlw	156
  1757  0017F6  6E35               	movwf	??_initLCD& (0+255),c
  1758  0017F8  0ED7               	movlw	215
  1759  0017FA                     u1477:
  1760  0017FA  2EE8               	decfsz	wreg,f,c
  1761  0017FC  D7FE               	bra	u1477
  1762  0017FE  2E35               	decfsz	??_initLCD& (0+255),f,c
  1763  001800  D7FC               	bra	u1477
  1764  001802  F000               	nop	
  1765                           
  1766                           ;lcd.c: 69: lcdInst(0b00110011);
  1767  001804  0E33               	movlw	51
  1768  001806  ECFC  F00C         	call	_lcdInst
  1769                           
  1770                           ;lcd.c: 70: lcdInst(0b00110010);
  1771  00180A  0E32               	movlw	50
  1772  00180C  ECFC  F00C         	call	_lcdInst
  1773                           
  1774                           ;lcd.c: 71: lcdInst(0b00101000);
  1775  001810  0E28               	movlw	40
  1776  001812  ECFC  F00C         	call	_lcdInst
  1777                           
  1778                           ;lcd.c: 72: lcdInst(0b00001111);
  1779  001816  0E0F               	movlw	15
  1780  001818  ECFC  F00C         	call	_lcdInst
  1781                           
  1782                           ;lcd.c: 73: lcdInst(0b00000110);
  1783  00181C  0E06               	movlw	6
  1784  00181E  ECFC  F00C         	call	_lcdInst
  1785                           
  1786                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1787  001822  0E01               	movlw	1
  1788  001824  ECFC  F00C         	call	_lcdInst
  1789  001828  0E9C               	movlw	156
  1790  00182A  6E35               	movwf	??_initLCD& (0+255),c
  1791  00182C  0ED7               	movlw	215
  1792  00182E                     u1487:
  1793  00182E  2EE8               	decfsz	wreg,f,c
  1794  001830  D7FE               	bra	u1487
  1795  001832  2E35               	decfsz	??_initLCD& (0+255),f,c
  1796  001834  D7FC               	bra	u1487
  1797  001836  F000               	nop	
  1798                           
  1799                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1800  001838  0E0F               	movlw	15
  1801  00183A  ECFC  F00C         	call	_lcdInst
  1802  00183E  0012               	return		;funcret
  1803  001840                     __end_of_initLCD:
  1804                           	opt stack 0
  1805                           tblptru	equ	0xFF8
  1806                           tblptrh	equ	0xFF7
  1807                           tblptrl	equ	0xFF6
  1808                           tablat	equ	0xFF5
  1809                           prodh	equ	0xFF4
  1810                           prodl	equ	0xFF3
  1811                           intcon	equ	0xFF2
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1l	equ	0xFE1
  1816                           postinc2	equ	0xFDE
  1817                           postdec2	equ	0xFDD
  1818                           fsr2h	equ	0xFDA
  1819                           fsr2l	equ	0xFD9
  1820                           status	equ	0xFD8
  1821                           
  1822 ;; *************** function _lcdInst *****************
  1823 ;; Defined at:
  1824 ;;		line 11 in file "lcd.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  data            1    wreg     unsigned char 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  data            1   51[COMRAM] unsigned char 
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  1    wreg      void 
  1831 ;; Registers used:
  1832 ;;		wreg, status,2, status,0, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;Total ram usage:        1 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    5
  1845 ;; This function calls:
  1846 ;;		_lcdNibble
  1847 ;; This function is called by:
  1848 ;;		_initLCD
  1849 ;;		_main
  1850 ;;		_lcd_set_cursor
  1851 ;;		_lcd_shift_cursor
  1852 ;;		_lcd_shift_display
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text7
  1857  0019F8                     __ptext7:
  1858                           	opt stack 0
  1859  0019F8                     _lcdInst:
  1860                           	opt stack 25
  1861                           
  1862                           ;incstack = 0
  1863                           ;lcdInst@data stored from wreg
  1864  0019F8  6E34               	movwf	lcdInst@data,c
  1865                           
  1866                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1867  0019FA  948C               	bcf	3980,2,c	;volatile
  1868                           
  1869                           ;lcd.c: 20: lcdNibble(data);
  1870  0019FC  5034               	movf	lcdInst@data,w,c
  1871  0019FE  EC2A  F00B         	call	_lcdNibble
  1872                           
  1873                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1874  001A02  0EA0               	movlw	160
  1875  001A04                     u1497:
  1876  001A04  D000               	nop2	
  1877  001A06  2EE8               	decfsz	wreg,f,c
  1878  001A08  D7FD               	bra	u1497
  1879  001A0A  0012               	return		;funcret
  1880  001A0C                     __end_of_lcdInst:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           prodh	equ	0xFF4
  1887                           prodl	equ	0xFF3
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           postinc2	equ	0xFDE
  1894                           postdec2	equ	0xFDD
  1895                           fsr2h	equ	0xFDA
  1896                           fsr2l	equ	0xFD9
  1897                           status	equ	0xFD8
  1898                           
  1899 ;; *************** function _lcdNibble *****************
  1900 ;; Defined at:
  1901 ;;		line 37 in file "lcd.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;  data            1    wreg     unsigned char 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  data            1   50[COMRAM] unsigned char 
  1906 ;;  temp            1   49[COMRAM] unsigned char 
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2, status,0
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;Total ram usage:        2 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    4
  1923 ;; This function calls:
  1924 ;;		Nothing
  1925 ;; This function is called by:
  1926 ;;		_lcdInst
  1927 ;;		_putch
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text8
  1932  001654                     __ptext8:
  1933                           	opt stack 0
  1934  001654                     _lcdNibble:
  1935                           	opt stack 24
  1936                           
  1937                           ;incstack = 0
  1938                           ;lcdNibble@data stored from wreg
  1939  001654  6E33               	movwf	lcdNibble@data,c
  1940                           
  1941                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1942  001656  5033               	movf	lcdNibble@data,w,c
  1943  001658  0BF0               	andlw	240
  1944  00165A  6E32               	movwf	lcdNibble@temp,c
  1945                           
  1946                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1947  00165C  508C               	movf	3980,w,c	;volatile
  1948  00165E  0B0F               	andlw	15
  1949  001660  6E8C               	movwf	3980,c	;volatile
  1950                           
  1951                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1952  001662  5032               	movf	lcdNibble@temp,w,c
  1953  001664  108C               	iorwf	3980,w,c	;volatile
  1954  001666  6E8C               	movwf	3980,c	;volatile
  1955                           
  1956                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1957  001668  0E00               	movlw	0
  1958  00166A  BEF2               	btfsc	intcon,7,c	;volatile
  1959  00166C  0E01               	movlw	1
  1960  00166E  6E45               	movwf	_LCDinterruptState,c
  1961  001670  9EF2               	bcf	intcon,7,c	;volatile
  1962  001672  868C               	bsf	3980,3,c	;volatile
  1963  001674  0E42               	movlw	66
  1964  001676                     u1507:
  1965  001676  2EE8               	decfsz	wreg,f,c
  1966  001678  D7FE               	bra	u1507
  1967  00167A  D000               	nop2	
  1968  00167C  968C               	bcf	3980,3,c	;volatile
  1969  00167E  0EA0               	movlw	160
  1970  001680                     u1517:
  1971  001680  D000               	nop2	
  1972  001682  2EE8               	decfsz	wreg,f,c
  1973  001684  D7FD               	bra	u1517
  1974  001686  B045               	btfsc	_LCDinterruptState,0,c
  1975  001688  D002               	bra	u625
  1976  00168A  9EF2               	bcf	intcon,7,c	;volatile
  1977  00168C  D001               	bra	u626
  1978  00168E                     u625:
  1979  00168E  8EF2               	bsf	intcon,7,c	;volatile
  1980  001690                     u626:
  1981                           
  1982                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1983  001690  3833               	swapf	lcdNibble@data,w,c
  1984  001692  0BF0               	andlw	240
  1985  001694  6E33               	movwf	lcdNibble@data,c
  1986                           
  1987                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1988  001696  5033               	movf	lcdNibble@data,w,c
  1989  001698  0BF0               	andlw	240
  1990  00169A  6E32               	movwf	lcdNibble@temp,c
  1991                           
  1992                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1993  00169C  508C               	movf	3980,w,c	;volatile
  1994  00169E  0B0F               	andlw	15
  1995  0016A0  6E8C               	movwf	3980,c	;volatile
  1996                           
  1997                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1998  0016A2  5032               	movf	lcdNibble@temp,w,c
  1999  0016A4  108C               	iorwf	3980,w,c	;volatile
  2000  0016A6  6E8C               	movwf	3980,c	;volatile
  2001                           
  2002                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2003  0016A8  0E00               	movlw	0
  2004  0016AA  BEF2               	btfsc	intcon,7,c	;volatile
  2005  0016AC  0E01               	movlw	1
  2006  0016AE  6E45               	movwf	_LCDinterruptState,c
  2007  0016B0  9EF2               	bcf	intcon,7,c	;volatile
  2008  0016B2  868C               	bsf	3980,3,c	;volatile
  2009  0016B4  0E42               	movlw	66
  2010  0016B6                     u1527:
  2011  0016B6  2EE8               	decfsz	wreg,f,c
  2012  0016B8  D7FE               	bra	u1527
  2013  0016BA  D000               	nop2	
  2014  0016BC  968C               	bcf	3980,3,c	;volatile
  2015  0016BE  0EA0               	movlw	160
  2016  0016C0                     u1537:
  2017  0016C0  D000               	nop2	
  2018  0016C2  2EE8               	decfsz	wreg,f,c
  2019  0016C4  D7FD               	bra	u1537
  2020  0016C6  B045               	btfsc	_LCDinterruptState,0,c
  2021  0016C8  D002               	bra	u635
  2022  0016CA  9EF2               	bcf	intcon,7,c	;volatile
  2023  0016CC  D001               	bra	u636
  2024  0016CE                     u635:
  2025  0016CE  8EF2               	bsf	intcon,7,c	;volatile
  2026  0016D0                     u636:
  2027  0016D0  0012               	return		;funcret
  2028  0016D2                     __end_of_lcdNibble:
  2029                           	opt stack 0
  2030                           tblptru	equ	0xFF8
  2031                           tblptrh	equ	0xFF7
  2032                           tblptrl	equ	0xFF6
  2033                           tablat	equ	0xFF5
  2034                           prodh	equ	0xFF4
  2035                           prodl	equ	0xFF3
  2036                           intcon	equ	0xFF2
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           postdec1	equ	0xFE5
  2040                           fsr1l	equ	0xFE1
  2041                           postinc2	equ	0xFDE
  2042                           postdec2	equ	0xFDD
  2043                           fsr2h	equ	0xFDA
  2044                           fsr2l	equ	0xFD9
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function _I2C_sendData *****************
  2048 ;; Defined at:
  2049 ;;		line 320 in file "main.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;  char_data       1    wreg     unsigned char 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  char_data       1   52[COMRAM] unsigned char 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      void 
  2056 ;; Registers used:
  2057 ;;		wreg, status,2, status,0, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;Total ram usage:        1 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    6
  2070 ;; This function calls:
  2071 ;;		_I2C_Master_Start
  2072 ;;		_I2C_Master_Stop
  2073 ;;		_I2C_Master_Write
  2074 ;; This function is called by:
  2075 ;;		_main
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text9
  2080  0019AA                     __ptext9:
  2081                           	opt stack 0
  2082  0019AA                     _I2C_sendData:
  2083                           	opt stack 24
  2084                           
  2085                           ;incstack = 0
  2086                           ;I2C_sendData@char_data stored from wreg
  2087  0019AA  6E35               	movwf	I2C_sendData@char_data,c
  2088                           
  2089                           ;main.c: 321: I2C_Master_Start();
  2090  0019AC  EC30  F00D         	call	_I2C_Master_Start	;wreg free
  2091                           
  2092                           ;main.c: 322: I2C_Master_Write(0b00010000);
  2093  0019B0  0E00               	movlw	0
  2094  0019B2  6E34               	movwf	I2C_Master_Write@byteToWrite+1,c
  2095  0019B4  0E10               	movlw	16
  2096  0019B6  6E33               	movwf	I2C_Master_Write@byteToWrite,c
  2097  0019B8  EC23  F00D         	call	_I2C_Master_Write	;wreg free
  2098                           
  2099                           ;main.c: 323: I2C_Master_Write(char_data);
  2100  0019BC  C035  F033         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  2101  0019C0  6A34               	clrf	I2C_Master_Write@byteToWrite+1,c
  2102  0019C2  EC23  F00D         	call	_I2C_Master_Write	;wreg free
  2103                           
  2104                           ;main.c: 324: I2C_Master_Stop();
  2105  0019C6  EC2C  F00D         	call	_I2C_Master_Stop	;wreg free
  2106  0019CA  0012               	return		;funcret
  2107  0019CC                     __end_of_I2C_sendData:
  2108                           	opt stack 0
  2109                           tblptru	equ	0xFF8
  2110                           tblptrh	equ	0xFF7
  2111                           tblptrl	equ	0xFF6
  2112                           tablat	equ	0xFF5
  2113                           prodh	equ	0xFF4
  2114                           prodl	equ	0xFF3
  2115                           intcon	equ	0xFF2
  2116                           postinc0	equ	0xFEE
  2117                           wreg	equ	0xFE8
  2118                           postdec1	equ	0xFE5
  2119                           fsr1l	equ	0xFE1
  2120                           postinc2	equ	0xFDE
  2121                           postdec2	equ	0xFDD
  2122                           fsr2h	equ	0xFDA
  2123                           fsr2l	equ	0xFD9
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _I2C_init *****************
  2127 ;; Defined at:
  2128 ;;		line 314 in file "main.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, status,0, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;Total ram usage:        0 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    6
  2149 ;; This function calls:
  2150 ;;		_I2C_Master_Init
  2151 ;;		_I2C_Master_Start
  2152 ;;		_I2C_Master_Stop
  2153 ;;		_I2C_Master_Write
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text10
  2160  001980                     __ptext10:
  2161                           	opt stack 0
  2162  001980                     _I2C_init:
  2163                           	opt stack 24
  2164                           
  2165                           ;main.c: 315: I2C_Master_Init(100000);
  2166                           
  2167                           ;incstack = 0
  2168  001980  0EA0               	movlw	160
  2169  001982  6E32               	movwf	I2C_Master_Init@clockFreq,c
  2170  001984  0E86               	movlw	134
  2171  001986  6E33               	movwf	I2C_Master_Init@clockFreq+1,c
  2172  001988  0E01               	movlw	1
  2173  00198A  6E34               	movwf	I2C_Master_Init@clockFreq+2,c
  2174  00198C  0E00               	movlw	0
  2175  00198E  6E35               	movwf	I2C_Master_Init@clockFreq+3,c
  2176  001990  ECE6  F00C         	call	_I2C_Master_Init	;wreg free
  2177                           
  2178                           ;main.c: 316: I2C_Master_Start();
  2179  001994  EC30  F00D         	call	_I2C_Master_Start	;wreg free
  2180                           
  2181                           ;main.c: 317: I2C_Master_Write(0b00010000);
  2182  001998  0E00               	movlw	0
  2183  00199A  6E34               	movwf	I2C_Master_Write@byteToWrite+1,c
  2184  00199C  0E10               	movlw	16
  2185  00199E  6E33               	movwf	I2C_Master_Write@byteToWrite,c
  2186  0019A0  EC23  F00D         	call	_I2C_Master_Write	;wreg free
  2187                           
  2188                           ;main.c: 318: I2C_Master_Stop();
  2189  0019A4  EC2C  F00D         	call	_I2C_Master_Stop	;wreg free
  2190  0019A8  0012               	return		;funcret
  2191  0019AA                     __end_of_I2C_init:
  2192                           	opt stack 0
  2193                           tblptru	equ	0xFF8
  2194                           tblptrh	equ	0xFF7
  2195                           tblptrl	equ	0xFF6
  2196                           tablat	equ	0xFF5
  2197                           prodh	equ	0xFF4
  2198                           prodl	equ	0xFF3
  2199                           intcon	equ	0xFF2
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           postdec1	equ	0xFE5
  2203                           fsr1l	equ	0xFE1
  2204                           postinc2	equ	0xFDE
  2205                           postdec2	equ	0xFDD
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _I2C_Master_Write *****************
  2211 ;; Defined at:
  2212 ;;		line 109 in file "I2C.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  byteToWrite     2   50[COMRAM] unsigned int 
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;		None
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      void 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2, status,0, cstack
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2226 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;Total ram usage:        2 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    5
  2233 ;; This function calls:
  2234 ;;		_I2C_Master_Wait
  2235 ;; This function is called by:
  2236 ;;		_I2C_init
  2237 ;;		_I2C_sendData
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text11
  2242  001A46                     __ptext11:
  2243                           	opt stack 0
  2244  001A46                     _I2C_Master_Write:
  2245                           	opt stack 24
  2246                           
  2247                           ;I2C.c: 117: I2C_Master_Wait();
  2248                           
  2249                           ;incstack = 0
  2250  001A46  EC1A  F00D         	call	_I2C_Master_Wait	;wreg free
  2251                           
  2252                           ;I2C.c: 118: SSPBUF = byteToWrite;
  2253  001A4A  C033  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2254  001A4E  0012               	return		;funcret
  2255  001A50                     __end_of_I2C_Master_Write:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           intcon	equ	0xFF2
  2264                           postinc0	equ	0xFEE
  2265                           wreg	equ	0xFE8
  2266                           postdec1	equ	0xFE5
  2267                           fsr1l	equ	0xFE1
  2268                           postinc2	equ	0xFDE
  2269                           postdec2	equ	0xFDD
  2270                           fsr2h	equ	0xFDA
  2271                           fsr2l	equ	0xFD9
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _I2C_Master_Stop *****************
  2275 ;; Defined at:
  2276 ;;		line 96 in file "I2C.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;		None
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;		None
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;Total ram usage:        0 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    5
  2297 ;; This function calls:
  2298 ;;		_I2C_Master_Wait
  2299 ;; This function is called by:
  2300 ;;		_I2C_init
  2301 ;;		_I2C_sendData
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text12
  2306  001A58                     __ptext12:
  2307                           	opt stack 0
  2308  001A58                     _I2C_Master_Stop:
  2309                           	opt stack 24
  2310                           
  2311                           ;I2C.c: 105: I2C_Master_Wait();
  2312                           
  2313                           ;incstack = 0
  2314  001A58  EC1A  F00D         	call	_I2C_Master_Wait	;wreg free
  2315                           
  2316                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  2317  001A5C  84C5               	bsf	4037,2,c	;volatile
  2318  001A5E  0012               	return		;funcret
  2319  001A60                     __end_of_I2C_Master_Stop:
  2320                           	opt stack 0
  2321                           tblptru	equ	0xFF8
  2322                           tblptrh	equ	0xFF7
  2323                           tblptrl	equ	0xFF6
  2324                           tablat	equ	0xFF5
  2325                           prodh	equ	0xFF4
  2326                           prodl	equ	0xFF3
  2327                           intcon	equ	0xFF2
  2328                           postinc0	equ	0xFEE
  2329                           wreg	equ	0xFE8
  2330                           postdec1	equ	0xFE5
  2331                           fsr1l	equ	0xFE1
  2332                           postinc2	equ	0xFDE
  2333                           postdec2	equ	0xFDD
  2334                           fsr2h	equ	0xFDA
  2335                           fsr2l	equ	0xFD9
  2336                           status	equ	0xFD8
  2337                           
  2338 ;; *************** function _I2C_Master_Start *****************
  2339 ;; Defined at:
  2340 ;;		line 70 in file "I2C.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;		None
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;		None
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;Total ram usage:        0 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    5
  2361 ;; This function calls:
  2362 ;;		_I2C_Master_Wait
  2363 ;; This function is called by:
  2364 ;;		_I2C_init
  2365 ;;		_I2C_sendData
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text13
  2370  001A60                     __ptext13:
  2371                           	opt stack 0
  2372  001A60                     _I2C_Master_Start:
  2373                           	opt stack 24
  2374                           
  2375                           ;I2C.c: 79: I2C_Master_Wait();
  2376                           
  2377                           ;incstack = 0
  2378  001A60  EC1A  F00D         	call	_I2C_Master_Wait	;wreg free
  2379                           
  2380                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  2381  001A64  80C5               	bsf	4037,0,c	;volatile
  2382  001A66  0012               	return		;funcret
  2383  001A68                     __end_of_I2C_Master_Start:
  2384                           	opt stack 0
  2385                           tblptru	equ	0xFF8
  2386                           tblptrh	equ	0xFF7
  2387                           tblptrl	equ	0xFF6
  2388                           tablat	equ	0xFF5
  2389                           prodh	equ	0xFF4
  2390                           prodl	equ	0xFF3
  2391                           intcon	equ	0xFF2
  2392                           postinc0	equ	0xFEE
  2393                           wreg	equ	0xFE8
  2394                           postdec1	equ	0xFE5
  2395                           fsr1l	equ	0xFE1
  2396                           postinc2	equ	0xFDE
  2397                           postdec2	equ	0xFDD
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _I2C_Master_Wait *****************
  2403 ;; Defined at:
  2404 ;;		line 52 in file "I2C.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      void 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;Total ram usage:        1 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    4
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_I2C_Master_Start
  2429 ;;		_I2C_Master_Stop
  2430 ;;		_I2C_Master_Write
  2431 ;;		_I2C_Master_RepeatedStart
  2432 ;;		_I2C_Master_Read
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           	psect	text14
  2437  001A34                     __ptext14:
  2438                           	opt stack 0
  2439  001A34                     _I2C_Master_Wait:
  2440                           	opt stack 24
  2441                           
  2442                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2443                           
  2444                           ;incstack = 0
  2445  001A34  B4C7               	btfsc	4039,2,c	;volatile
  2446  001A36  D7FE               	goto	_I2C_Master_Wait
  2447  001A38  CFC5 F032          	movff	4037,??_I2C_Master_Wait	;volatile
  2448  001A3C  0E1F               	movlw	31
  2449  001A3E  1632               	andwf	??_I2C_Master_Wait,f,c
  2450  001A40  B4D8               	btfsc	status,2,c
  2451  001A42  0012               	return	
  2452  001A44  D7F7               	goto	_I2C_Master_Wait
  2453  001A46                     __end_of_I2C_Master_Wait:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           prodh	equ	0xFF4
  2460                           prodl	equ	0xFF3
  2461                           intcon	equ	0xFF2
  2462                           postinc0	equ	0xFEE
  2463                           wreg	equ	0xFE8
  2464                           postdec1	equ	0xFE5
  2465                           fsr1l	equ	0xFE1
  2466                           postinc2	equ	0xFDE
  2467                           postdec2	equ	0xFDD
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _I2C_Master_Init *****************
  2473 ;; Defined at:
  2474 ;;		line 14 in file "I2C.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  clockFreq       4   49[COMRAM] const unsigned long 
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, status,2
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;Total ram usage:        4 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    4
  2495 ;; This function calls:
  2496 ;;		Nothing
  2497 ;; This function is called by:
  2498 ;;		_I2C_init
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text15
  2503  0019CC                     __ptext15:
  2504                           	opt stack 0
  2505  0019CC                     _I2C_Master_Init:
  2506                           	opt stack 25
  2507                           
  2508                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2509                           
  2510                           ;incstack = 0
  2511  0019CC  9AC6               	bcf	4038,5,c	;volatile
  2512                           
  2513                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2514  0019CE  8694               	bsf	3988,3,c	;volatile
  2515                           
  2516                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2517  0019D0  8894               	bsf	3988,4,c	;volatile
  2518                           
  2519                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2520  0019D2  0E80               	movlw	128
  2521  0019D4  6EC7               	movwf	4039,c	;volatile
  2522                           
  2523                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2524  0019D6  0E28               	movlw	40
  2525  0019D8  6EC6               	movwf	4038,c	;volatile
  2526                           
  2527                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2528  0019DA  0E00               	movlw	0
  2529  0019DC  6EC5               	movwf	4037,c	;volatile
  2530                           
  2531                           ;I2C.c: 49: SSPADD = 9600;
  2532  0019DE  0E80               	movlw	128
  2533  0019E0  6EC8               	movwf	4040,c	;volatile
  2534  0019E2  0012               	return		;funcret
  2535  0019E4                     __end_of_I2C_Master_Init:
  2536                           	opt stack 0
  2537                           tblptru	equ	0xFF8
  2538                           tblptrh	equ	0xFF7
  2539                           tblptrl	equ	0xFF6
  2540                           tablat	equ	0xFF5
  2541                           prodh	equ	0xFF4
  2542                           prodl	equ	0xFF3
  2543                           intcon	equ	0xFF2
  2544                           postinc0	equ	0xFEE
  2545                           wreg	equ	0xFE8
  2546                           postdec1	equ	0xFE5
  2547                           fsr1l	equ	0xFE1
  2548                           postinc2	equ	0xFDE
  2549                           postdec2	equ	0xFDD
  2550                           fsr2h	equ	0xFDA
  2551                           fsr2l	equ	0xFD9
  2552                           status	equ	0xFD8
  2553                           
  2554 ;; *************** function _interruptHandler *****************
  2555 ;; Defined at:
  2556 ;;		line 222 in file "main.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;		None
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;		None
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      void 
  2563 ;; Registers used:
  2564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2572 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;Total ram usage:       19 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    3
  2577 ;; This function calls:
  2578 ;;		i2_initLCD
  2579 ;;		i2_lcdInst
  2580 ;;		i2_printf
  2581 ;; This function is called by:
  2582 ;;		Interrupt level 2
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	intcode
  2587  000008                     __pintcode:
  2588                           	opt stack 0
  2589  000008                     _interruptHandler:
  2590                           	opt stack 24
  2591                           
  2592                           ;incstack = 0
  2593  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2594  00000A  ED55  F009         	call	int_func,f	;refresh shadow registers
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           prodh	equ	0xFF4
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           postinc0	equ	0xFEE
  2603                           wreg	equ	0xFE8
  2604                           postdec1	equ	0xFE5
  2605                           fsr1l	equ	0xFE1
  2606                           postinc2	equ	0xFDE
  2607                           postdec2	equ	0xFDD
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612                           	psect	intcode_body
  2613  0012AA                     __pintcode_body:
  2614                           	opt stack 24
  2615  0012AA                     int_func:
  2616                           	opt stack 24
  2617  0012AA  0006               	pop		; remove dummy address from shadow register refresh
  2618  0012AC  CFFA F020          	movff	pclath,??_interruptHandler+1
  2619  0012B0  CFFB F021          	movff	pclatu,??_interruptHandler+2
  2620  0012B4  CFE9 F022          	movff	fsr0l,??_interruptHandler+3
  2621  0012B8  CFEA F023          	movff	fsr0h,??_interruptHandler+4
  2622  0012BC  CFE1 F024          	movff	fsr1l,??_interruptHandler+5
  2623  0012C0  CFE2 F025          	movff	fsr1h,??_interruptHandler+6
  2624  0012C4  CFD9 F026          	movff	fsr2l,??_interruptHandler+7
  2625  0012C8  CFDA F027          	movff	fsr2h,??_interruptHandler+8
  2626  0012CC  CFF3 F028          	movff	prodl,??_interruptHandler+9
  2627  0012D0  CFF4 F029          	movff	prodh,??_interruptHandler+10
  2628  0012D4  CFF6 F02A          	movff	tblptrl,??_interruptHandler+11
  2629  0012D8  CFF7 F02B          	movff	tblptrh,??_interruptHandler+12
  2630  0012DC  CFF8 F02C          	movff	tblptru,??_interruptHandler+13
  2631  0012E0  CFF5 F02D          	movff	tablat,??_interruptHandler+14
  2632  0012E4  C04E  F02E         	movff	btemp,??_interruptHandler+15
  2633  0012E8  C04F  F02F         	movff	btemp+1,??_interruptHandler+16
  2634  0012EC  C050  F030         	movff	btemp+2,??_interruptHandler+17
  2635  0012F0  C051  F031         	movff	btemp+3,??_interruptHandler+18
  2636                           
  2637                           ;main.c: 234: if (RBIF){
  2638  0012F4  A0F2               	btfss	intcon,0,c	;volatile
  2639  0012F6  D063               	goto	i2l1975
  2640                           
  2641                           ;main.c: 242: TRISBbits.RB5 = 1;
  2642  0012F8  8A93               	bsf	3987,5,c	;volatile
  2643                           
  2644                           ;main.c: 243: B_input = PORTBbits.RB5;
  2645  0012FA  AA81               	btfss	3969,5,c	;volatile
  2646  0012FC  D003               	goto	i2u112_40
  2647  0012FE  6A1F               	clrf	??_interruptHandler& (0+255),c
  2648  001300  2A1F               	incf	??_interruptHandler& (0+255),f,c
  2649  001302  D001               	goto	i2u112_48
  2650  001304                     i2u112_40:
  2651  001304  6A1F               	clrf	??_interruptHandler& (0+255),c
  2652  001306                     i2u112_48:
  2653  001306  501F               	movf	??_interruptHandler,w,c
  2654  001308  6E4C               	movwf	_B_input,c
  2655  00130A  6A4D               	clrf	_B_input+1,c
  2656                           
  2657                           ;main.c: 245: TRISBbits.RB4 = 1;
  2658  00130C  8893               	bsf	3987,4,c	;volatile
  2659                           
  2660                           ;main.c: 246: N_input = PORTBbits.RB4;
  2661  00130E  A881               	btfss	3969,4,c	;volatile
  2662  001310  D003               	goto	i2u113_40
  2663  001312  6A1F               	clrf	??_interruptHandler& (0+255),c
  2664  001314  2A1F               	incf	??_interruptHandler& (0+255),f,c
  2665  001316  D001               	goto	i2u113_48
  2666  001318                     i2u113_40:
  2667  001318  6A1F               	clrf	??_interruptHandler& (0+255),c
  2668  00131A                     i2u113_48:
  2669  00131A  501F               	movf	??_interruptHandler,w,c
  2670  00131C  6E4A               	movwf	_N_input,c
  2671  00131E  6A4B               	clrf	_N_input+1,c
  2672                           
  2673                           ;main.c: 248: TRISBbits.RB6 = 1;
  2674  001320  8C93               	bsf	3987,6,c	;volatile
  2675                           
  2676                           ;main.c: 249: S_input = PORTBbits.RB6;
  2677  001322  AC81               	btfss	3969,6,c	;volatile
  2678  001324  D003               	goto	i2u114_40
  2679  001326  6A1F               	clrf	??_interruptHandler& (0+255),c
  2680  001328  2A1F               	incf	??_interruptHandler& (0+255),f,c
  2681  00132A  D001               	goto	i2u114_48
  2682  00132C                     i2u114_40:
  2683  00132C  6A1F               	clrf	??_interruptHandler& (0+255),c
  2684  00132E                     i2u114_48:
  2685  00132E  501F               	movf	??_interruptHandler,w,c
  2686  001330  6E48               	movwf	_S_input,c
  2687  001332  6A49               	clrf	_S_input+1,c
  2688                           
  2689                           ;main.c: 251: TRISBbits.RB7 = 1;
  2690  001334  8E93               	bsf	3987,7,c	;volatile
  2691                           
  2692                           ;main.c: 252: W_input = PORTBbits.RB7;
  2693  001336  AE81               	btfss	3969,7,c	;volatile
  2694  001338  D003               	goto	i2u115_40
  2695  00133A  6A1F               	clrf	??_interruptHandler& (0+255),c
  2696  00133C  2A1F               	incf	??_interruptHandler& (0+255),f,c
  2697  00133E  D001               	goto	i2u115_48
  2698  001340                     i2u115_40:
  2699  001340  6A1F               	clrf	??_interruptHandler& (0+255),c
  2700  001342                     i2u115_48:
  2701  001342  501F               	movf	??_interruptHandler,w,c
  2702  001344  6E46               	movwf	_W_input,c
  2703  001346  6A47               	clrf	_W_input+1,c
  2704                           
  2705                           ;main.c: 256: if (B_input == 0){
  2706  001348  504C               	movf	_B_input,w,c
  2707  00134A  104D               	iorwf	_B_input+1,w,c
  2708  00134C  A4D8               	btfss	status,2,c
  2709  00134E  D002               	goto	i2l193
  2710                           
  2711                           ;main.c: 258: B_count++;
  2712  001350  4A42               	infsnz	_B_count,f,c
  2713  001352  2A43               	incf	_B_count+1,f,c
  2714  001354                     i2l193:
  2715                           
  2716                           ;main.c: 261: }
  2717                           ;main.c: 264: if (N_input == 0){
  2718  001354  504A               	movf	_N_input,w,c
  2719  001356  104B               	iorwf	_N_input+1,w,c
  2720  001358  A4D8               	btfss	status,2,c
  2721  00135A  D002               	goto	i2l194
  2722                           
  2723                           ;main.c: 265: N_count++;
  2724  00135C  4A40               	infsnz	_N_count,f,c
  2725  00135E  2A41               	incf	_N_count+1,f,c
  2726  001360                     i2l194:
  2727                           
  2728                           ;main.c: 266: }
  2729                           ;main.c: 268: if (S_input == 0){
  2730  001360  5048               	movf	_S_input,w,c
  2731  001362  1049               	iorwf	_S_input+1,w,c
  2732  001364  A4D8               	btfss	status,2,c
  2733  001366  D002               	goto	i2l195
  2734                           
  2735                           ;main.c: 270: S_count++;
  2736  001368  4A3E               	infsnz	_S_count,f,c
  2737  00136A  2A3F               	incf	_S_count+1,f,c
  2738  00136C                     i2l195:
  2739                           
  2740                           ;main.c: 273: }
  2741                           ;main.c: 275: if (W_input == 0){
  2742  00136C  5046               	movf	_W_input,w,c
  2743  00136E  1047               	iorwf	_W_input+1,w,c
  2744  001370  A4D8               	btfss	status,2,c
  2745  001372  D002               	goto	i2l196
  2746                           
  2747                           ;main.c: 277: W_count++;
  2748  001374  4A3C               	infsnz	_W_count,f,c
  2749  001376  2A3D               	incf	_W_count+1,f,c
  2750  001378                     i2l196:
  2751                           
  2752                           ;main.c: 280: }
  2753                           ;main.c: 282: initLCD();
  2754  001378  EC20  F00C         	call	i2_initLCD	;wreg free
  2755                           
  2756                           ;main.c: 283: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  2757  00137C  0E11               	movlw	low STR_1
  2758  00137E  6E0D               	movwf	i2printf@f,c
  2759  001380  0E10               	movlw	high STR_1
  2760  001382  6E0E               	movwf	i2printf@f+1,c
  2761  001384  C042  F00F         	movff	_B_count,?i2_printf+2
  2762  001388  C043  F010         	movff	_B_count+1,?i2_printf+3
  2763  00138C  C040  F011         	movff	_N_count,?i2_printf+4
  2764  001390  C041  F012         	movff	_N_count+1,?i2_printf+5
  2765  001394  C03E  F013         	movff	_S_count,?i2_printf+6
  2766  001398  C03F  F014         	movff	_S_count+1,?i2_printf+7
  2767  00139C  C03C  F015         	movff	_W_count,?i2_printf+8
  2768  0013A0  C03D  F016         	movff	_W_count+1,?i2_printf+9
  2769  0013A4  EC9B  F00A         	call	i2_printf	;wreg free
  2770                           
  2771                           ;main.c: 284: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2772  0013A8  0E80               	movlw	128
  2773  0013AA  EC10  F00D         	call	i2_lcdInst
  2774  0013AE  0E34               	movlw	52
  2775  0013B0  6E1F               	movwf	??_interruptHandler& (0+255),c
  2776  0013B2  0EF2               	movlw	242
  2777  0013B4                     i2u154_47:
  2778  0013B4  2EE8               	decfsz	wreg,f,c
  2779  0013B6  D7FE               	bra	i2u154_47
  2780  0013B8  2E1F               	decfsz	??_interruptHandler& (0+255),f,c
  2781  0013BA  D7FC               	bra	i2u154_47
  2782                           
  2783                           ;main.c: 287: RBIF = 0;
  2784  0013BC  90F2               	bcf	intcon,0,c	;volatile
  2785  0013BE                     i2l1975:
  2786                           
  2787                           ;main.c: 288: return;
  2788  0013BE  C031  F051         	movff	??_interruptHandler+18,btemp+3
  2789  0013C2  C030  F050         	movff	??_interruptHandler+17,btemp+2
  2790  0013C6  C02F  F04F         	movff	??_interruptHandler+16,btemp+1
  2791  0013CA  C02E  F04E         	movff	??_interruptHandler+15,btemp
  2792  0013CE  C02D  FFF5         	movff	??_interruptHandler+14,tablat
  2793  0013D2  C02C  FFF8         	movff	??_interruptHandler+13,tblptru
  2794  0013D6  C02B  FFF7         	movff	??_interruptHandler+12,tblptrh
  2795  0013DA  C02A  FFF6         	movff	??_interruptHandler+11,tblptrl
  2796  0013DE  C029  FFF4         	movff	??_interruptHandler+10,prodh
  2797  0013E2  C028  FFF3         	movff	??_interruptHandler+9,prodl
  2798  0013E6  C027  FFDA         	movff	??_interruptHandler+8,fsr2h
  2799  0013EA  C026  FFD9         	movff	??_interruptHandler+7,fsr2l
  2800  0013EE  C025  FFE2         	movff	??_interruptHandler+6,fsr1h
  2801  0013F2  C024  FFE1         	movff	??_interruptHandler+5,fsr1l
  2802  0013F6  C023  FFEA         	movff	??_interruptHandler+4,fsr0h
  2803  0013FA  C022  FFE9         	movff	??_interruptHandler+3,fsr0l
  2804  0013FE  C021  FFFB         	movff	??_interruptHandler+2,pclatu
  2805  001402  C020  FFFA         	movff	??_interruptHandler+1,pclath
  2806  001406  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2807  001408  0011               	retfie		f
  2808  00140A                     __end_of_interruptHandler:
  2809                           	opt stack 0
  2810                           pclatu	equ	0xFFB
  2811                           pclath	equ	0xFFA
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           prodh	equ	0xFF4
  2817                           prodl	equ	0xFF3
  2818                           intcon	equ	0xFF2
  2819                           postinc0	equ	0xFEE
  2820                           fsr0h	equ	0xFEA
  2821                           fsr0l	equ	0xFE9
  2822                           wreg	equ	0xFE8
  2823                           postdec1	equ	0xFE5
  2824                           fsr1h	equ	0xFE2
  2825                           fsr1l	equ	0xFE1
  2826                           postinc2	equ	0xFDE
  2827                           postdec2	equ	0xFDD
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function i2_printf *****************
  2833 ;; Defined at:
  2834 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2837 ;;		 -> STR_6(20), STR_5(20), STR_4(20), STR_3(20), 
  2838 ;;		 -> STR_2(20), STR_1(20), 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  printf          4    0        struct .
  2841 ;;  printf          3    0        PTR const unsigned char 
  2842 ;;  printf          2   27[COMRAM] unsigned int 
  2843 ;;  printf          2   23[COMRAM] PTR void [1]
  2844 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2845 ;;  printf          2    0        unsigned int 
  2846 ;;  printf          1   29[COMRAM] char 
  2847 ;;  printf          1   26[COMRAM] char 
  2848 ;;  printf          1   25[COMRAM] unsigned char 
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  2   12[COMRAM] int 
  2851 ;; Registers used:
  2852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2858 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;Total ram usage:       18 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; Hardware stack levels required when called:    2
  2865 ;; This function calls:
  2866 ;;		i2___lwdiv
  2867 ;;		i2___lwmod
  2868 ;;		i2_putch
  2869 ;; This function is called by:
  2870 ;;		_interruptHandler
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text17
  2875  001536                     __ptext17:
  2876                           	opt stack 0
  2877  001536                     i2_printf:
  2878                           	opt stack 24
  2879                           
  2880                           ;doprnt.c: 466: va_list ap;
  2881                           ;doprnt.c: 499: signed char c;
  2882                           ;doprnt.c: 506: signed char prec;
  2883                           ;doprnt.c: 508: unsigned char flag;
  2884                           ;doprnt.c: 523: union {
  2885                           ;doprnt.c: 524: unsigned long vd;
  2886                           ;doprnt.c: 525: double integ;
  2887                           ;doprnt.c: 526: } tmpval;
  2888                           ;doprnt.c: 528: unsigned int val;
  2889                           ;doprnt.c: 529: unsigned len;
  2890                           ;doprnt.c: 530: const char * cp;
  2891                           ;doprnt.c: 533: *ap = __va_start();
  2892                           
  2893                           ;incstack = 0
  2894  001536  0E0F               	movlw	low (?i2_printf+2)
  2895  001538  6E18               	movwf	i2printf@ap,c
  2896  00153A  0E00               	movlw	high (?i2_printf+2)
  2897  00153C  6E19               	movwf	i2printf@ap+1,c
  2898                           
  2899                           ;doprnt.c: 536: while(c = *f++) {
  2900  00153E  D07D               	goto	i2u93_40
  2901  001540                     
  2902                           ;doprnt.c: 538: if(c != '%')
  2903  001540  0E25               	movlw	37
  2904  001542  181E               	xorwf	i2printf@c,w,c
  2905  001544  B4D8               	btfsc	status,2,c
  2906  001546  D004               	goto	i2l262
  2907                           
  2908                           ;doprnt.c: 540: {
  2909                           ;doprnt.c: 541: (putch(c) );
  2910  001548  501E               	movf	i2printf@c,w,c
  2911  00154A  EC06  F00D         	call	i2_putch
  2912                           
  2913                           ;doprnt.c: 542: continue;
  2914  00154E  D075               	goto	i2u93_40
  2915  001550                     i2l262:
  2916                           
  2917                           ;doprnt.c: 543: }
  2918                           ;doprnt.c: 548: flag = 0;
  2919  001550  0E00               	movlw	0
  2920  001552  6E1A               	movwf	i2printf@flag,c
  2921                           
  2922                           ;doprnt.c: 822: }
  2923                           
  2924                           ;doprnt.c: 813: continue;
  2925                           
  2926                           ;doprnt.c: 802: default:
  2927                           
  2928                           ;doprnt.c: 698: case 'i':
  2929                           ;doprnt.c: 699: break;
  2930                           
  2931                           ;doprnt.c: 697: case 'd':
  2932                           
  2933                           ;doprnt.c: 638: goto alldone;
  2934                           
  2935                           ;doprnt.c: 637: case 0:
  2936                           
  2937                           ;doprnt.c: 635: switch(c = *f++) {
  2938  001554  C00D  FFF6         	movff	i2printf@f,tblptrl
  2939  001558  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2940  00155C  4A0D               	infsnz	i2printf@f,f,c
  2941  00155E  2A0E               	incf	i2printf@f+1,f,c
  2942  001560                     	if	0	;tblptru may be non-zero
  2943  001560                     	endif
  2944  001560                     	if	0	;tblptru may be non-zero
  2945  001560                     	endif
  2946  001560  0008               	tblrd		*
  2947  001562  CFF5 F01E          	movff	tablat,i2printf@c
  2948  001566  501E               	movf	i2printf@c,w,c
  2949                           
  2950                           ; Switch size 1, requested type "space"
  2951                           ; Number of cases is 3, Range of values is 0 to 105
  2952                           ; switch strategies available:
  2953                           ; Name         Instructions Cycles
  2954                           ; simple_byte           10     6 (average)
  2955                           ;	Chosen strategy is simple_byte
  2956  001568  0A00               	xorlw	0	; case 0
  2957  00156A  B4D8               	btfsc	status,2,c
  2958  00156C  0012               	return	
  2959  00156E  0A64               	xorlw	100	; case 100
  2960  001570  B4D8               	btfsc	status,2,c
  2961  001572  D003               	goto	i2l268
  2962  001574  0A0D               	xorlw	13	; case 105
  2963  001576  A4D8               	btfss	status,2,c
  2964  001578  D060               	goto	i2u93_40
  2965  00157A                     i2l268:
  2966                           
  2967                           ;doprnt.c: 1253: {
  2968                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2969  00157A  C018  FFD9         	movff	i2printf@ap,fsr2l
  2970  00157E  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  2971  001582  CFDE F01C          	movff	postinc2,i2printf@val
  2972  001586  CFDD F01D          	movff	postdec2,i2printf@val+1
  2973  00158A  0E02               	movlw	2
  2974  00158C  2618               	addwf	i2printf@ap,f,c
  2975  00158E  0E00               	movlw	0
  2976  001590  2219               	addwfc	i2printf@ap+1,f,c
  2977                           
  2978                           ;doprnt.c: 1261: if((int)val < 0) {
  2979  001592  AE1D               	btfss	i2printf@val+1,7,c
  2980  001594  D006               	goto	i2l270
  2981                           
  2982                           ;doprnt.c: 1262: flag |= 0x03;
  2983  001596  0E03               	movlw	3
  2984  001598  121A               	iorwf	i2printf@flag,f,c
  2985                           
  2986                           ;doprnt.c: 1263: val = -val;
  2987  00159A  6C1C               	negf	i2printf@val,c
  2988  00159C  1E1D               	comf	i2printf@val+1,f,c
  2989  00159E  B0D8               	btfsc	status,0,c
  2990  0015A0  2A1D               	incf	i2printf@val+1,f,c
  2991  0015A2                     i2l270:
  2992                           
  2993                           ;doprnt.c: 1264: }
  2994                           ;doprnt.c: 1266: }
  2995                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2996  0015A2  0E01               	movlw	1
  2997  0015A4  6E1E               	movwf	i2printf@c,c
  2998  0015A6                     i2l1763:
  2999  0015A6  0E05               	movlw	5
  3000  0015A8  181E               	xorwf	i2printf@c,w,c
  3001  0015AA  B4D8               	btfsc	status,2,c
  3002  0015AC  D012               	goto	i2u91_40
  3003                           
  3004                           ;doprnt.c: 1306: if(val < dpowers[c])
  3005  0015AE  501E               	movf	i2printf@c,w,c
  3006  0015B0  0D02               	mullw	2
  3007  0015B2  0E01               	movlw	low _dpowers
  3008  0015B4  24F3               	addwf	prodl,w,c
  3009  0015B6  6EF6               	movwf	tblptrl,c
  3010  0015B8  0E10               	movlw	high _dpowers
  3011  0015BA  20F4               	addwfc	prodh,w,c
  3012  0015BC  6EF7               	movwf	tblptrh,c
  3013  0015BE                     	if	0	;There are less than 3 active tblptr bytes
  3014  0015BE                     	endif
  3015  0015BE  0009               	tblrd		*+
  3016  0015C0  50F5               	movf	tablat,w,c
  3017  0015C2  5C1C               	subwf	i2printf@val,w,c
  3018  0015C4  0009               	tblrd		*+
  3019  0015C6  50F5               	movf	tablat,w,c
  3020  0015C8  581D               	subwfb	i2printf@val+1,w,c
  3021  0015CA  A0D8               	btfss	status,0,c
  3022  0015CC  D002               	goto	i2u91_40
  3023                           
  3024                           ;doprnt.c: 1307: break;
  3025  0015CE  2A1E               	incf	i2printf@c,f,c
  3026  0015D0  D7EA               	goto	i2l1763
  3027  0015D2                     i2u91_40:
  3028                           
  3029                           ;doprnt.c: 1422: {
  3030                           ;doprnt.c: 1438: if(flag & 0x03)
  3031  0015D2  C01A  F017         	movff	i2printf@flag,??i2_printf
  3032  0015D6  0E03               	movlw	3
  3033  0015D8  1617               	andwf	??i2_printf,f,c
  3034  0015DA  B4D8               	btfsc	status,2,c
  3035  0015DC  D003               	goto	i2l274
  3036                           
  3037                           ;doprnt.c: 1439: (putch('-') );
  3038  0015DE  0E2D               	movlw	45
  3039  0015E0  EC06  F00D         	call	i2_putch
  3040  0015E4                     i2l274:
  3041                           
  3042                           ;doprnt.c: 1469: }
  3043                           ;doprnt.c: 1472: prec = c;
  3044  0015E4  C01E  F01B         	movff	i2printf@c,i2printf@prec
  3045                           
  3046                           ;doprnt.c: 1474: while(prec--) {
  3047  0015E8  D024               	goto	i2l275
  3048  0015EA                     
  3049                           ;doprnt.c: 1478: {
  3050                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3051  0015EA  501B               	movf	i2printf@prec,w,c
  3052  0015EC  0D02               	mullw	2
  3053  0015EE  0E01               	movlw	low _dpowers
  3054  0015F0  24F3               	addwf	prodl,w,c
  3055  0015F2  6EF6               	movwf	tblptrl,c
  3056  0015F4  0E10               	movlw	high _dpowers
  3057  0015F6  20F4               	addwfc	prodh,w,c
  3058  0015F8  6EF7               	movwf	tblptrh,c
  3059  0015FA                     	if	0	;There are less than 3 active tblptr bytes
  3060  0015FA                     	endif
  3061  0015FA  0009               	tblrd		*+
  3062  0015FC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3063  001600  000A               	tblrd		*-
  3064  001602  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3065  001606  C01C  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3066  00160A  C01D  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3067  00160E  ECD1  F00B         	call	i2___lwdiv	;wreg free
  3068  001612  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  3069  001616  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  3070  00161A  0E00               	movlw	0
  3071  00161C  6E0B               	movwf	i2___lwmod@divisor+1,c
  3072  00161E  0E0A               	movlw	10
  3073  001620  6E0A               	movwf	i2___lwmod@divisor,c
  3074  001622  EC68  F00C         	call	i2___lwmod	;wreg free
  3075  001626  5008               	movf	?i2___lwmod,w,c
  3076  001628  0F30               	addlw	48
  3077  00162A  6E1E               	movwf	i2printf@c,c
  3078                           
  3079                           ;doprnt.c: 1523: }
  3080                           ;doprnt.c: 1524: (putch(c) );
  3081  00162C  501E               	movf	i2printf@c,w,c
  3082  00162E  EC06  F00D         	call	i2_putch
  3083  001632                     i2l275:
  3084  001632  061B               	decf	i2printf@prec,f,c
  3085  001634  281B               	incf	i2printf@prec,w,c
  3086  001636  A4D8               	btfss	status,2,c
  3087  001638  D7D8               	goto	i2l276
  3088  00163A                     i2u93_40:
  3089  00163A  C00D  FFF6         	movff	i2printf@f,tblptrl
  3090  00163E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3091  001642  4A0D               	infsnz	i2printf@f,f,c
  3092  001644  2A0E               	incf	i2printf@f+1,f,c
  3093  001646                     	if	0	;tblptru may be non-zero
  3094  001646                     	endif
  3095  001646                     	if	0	;tblptru may be non-zero
  3096  001646                     	endif
  3097  001646  0008               	tblrd		*
  3098  001648  CFF5 F01E          	movff	tablat,i2printf@c
  3099  00164C  501E               	movf	i2printf@c,w,c
  3100  00164E  B4D8               	btfsc	status,2,c
  3101  001650  0012               	return	
  3102  001652  D776               	goto	i2l261
  3103  001654                     __end_ofi2_printf:
  3104                           	opt stack 0
  3105                           pclatu	equ	0xFFB
  3106                           pclath	equ	0xFFA
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           intcon	equ	0xFF2
  3114                           postinc0	equ	0xFEE
  3115                           fsr0h	equ	0xFEA
  3116                           fsr0l	equ	0xFE9
  3117                           wreg	equ	0xFE8
  3118                           postdec1	equ	0xFE5
  3119                           fsr1h	equ	0xFE2
  3120                           fsr1l	equ	0xFE1
  3121                           postinc2	equ	0xFDE
  3122                           postdec2	equ	0xFDD
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           status	equ	0xFD8
  3126                           
  3127 ;; *************** function i2_putch *****************
  3128 ;; Defined at:
  3129 ;;		line 24 in file "lcd.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  data            1    wreg     unsigned char 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  data            1    2[COMRAM] unsigned char 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  1    wreg      void 
  3136 ;; Registers used:
  3137 ;;		wreg, status,2, status,0, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;Total ram usage:        1 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    1
  3150 ;; This function calls:
  3151 ;;		i2_lcdNibble
  3152 ;; This function is called by:
  3153 ;;		i2_printf
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text18
  3158  001A0C                     __ptext18:
  3159                           	opt stack 0
  3160  001A0C                     i2_putch:
  3161                           	opt stack 24
  3162                           
  3163                           ;incstack = 0
  3164                           ;i2putch@data stored from wreg
  3165  001A0C  6E03               	movwf	i2putch@data,c
  3166                           
  3167                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3168  001A0E  848C               	bsf	3980,2,c	;volatile
  3169                           
  3170                           ;lcd.c: 33: lcdNibble(data);
  3171  001A10  5003               	movf	i2putch@data,w,c
  3172  001A12  EC69  F00B         	call	i2_lcdNibble
  3173                           
  3174                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3175  001A16  0EA0               	movlw	160
  3176  001A18                     i2u155_47:
  3177  001A18  D000               	nop2	
  3178  001A1A  2EE8               	decfsz	wreg,f,c
  3179  001A1C  D7FD               	bra	i2u155_47
  3180  001A1E  0012               	return		;funcret
  3181  001A20                     __end_ofi2_putch:
  3182                           	opt stack 0
  3183                           pclatu	equ	0xFFB
  3184                           pclath	equ	0xFFA
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           intcon	equ	0xFF2
  3192                           postinc0	equ	0xFEE
  3193                           fsr0h	equ	0xFEA
  3194                           fsr0l	equ	0xFE9
  3195                           wreg	equ	0xFE8
  3196                           postdec1	equ	0xFE5
  3197                           fsr1h	equ	0xFE2
  3198                           fsr1l	equ	0xFE1
  3199                           postinc2	equ	0xFDE
  3200                           postdec2	equ	0xFDD
  3201                           fsr2h	equ	0xFDA
  3202                           fsr2l	equ	0xFD9
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function i2___lwmod *****************
  3206 ;; Defined at:
  3207 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  dividend        2    7[COMRAM] unsigned int 
  3210 ;;  divisor         2    9[COMRAM] unsigned int 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  __lwmod         1   11[COMRAM] unsigned char 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  2    7[COMRAM] unsigned int 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2, status,0
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3222 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;Total ram usage:        5 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; This function calls:
  3229 ;;		Nothing
  3230 ;; This function is called by:
  3231 ;;		i2_printf
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text19
  3236  0018D0                     __ptext19:
  3237                           	opt stack 0
  3238  0018D0                     i2___lwmod:
  3239                           	opt stack 25
  3240                           
  3241                           ;incstack = 0
  3242  0018D0  500A               	movf	i2___lwmod@divisor,w,c
  3243  0018D2  100B               	iorwf	i2___lwmod@divisor+1,w,c
  3244  0018D4  B4D8               	btfsc	status,2,c
  3245  0018D6  D018               	goto	i2l698
  3246  0018D8  0E01               	movlw	1
  3247  0018DA  6E0C               	movwf	i2___lwmod@counter,c
  3248  0018DC  D004               	goto	i2l693
  3249  0018DE  90D8               	bcf	status,0,c
  3250  0018E0  360A               	rlcf	i2___lwmod@divisor,f,c
  3251  0018E2  360B               	rlcf	i2___lwmod@divisor+1,f,c
  3252  0018E4  2A0C               	incf	i2___lwmod@counter,f,c
  3253  0018E6                     i2l693:
  3254  0018E6  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  3255  0018E8  D7FA               	goto	i2l694
  3256  0018EA                     i2u76_40:
  3257  0018EA  500A               	movf	i2___lwmod@divisor,w,c
  3258  0018EC  5C08               	subwf	i2___lwmod@dividend,w,c
  3259  0018EE  500B               	movf	i2___lwmod@divisor+1,w,c
  3260  0018F0  5809               	subwfb	i2___lwmod@dividend+1,w,c
  3261  0018F2  A0D8               	btfss	status,0,c
  3262  0018F4  D004               	goto	i2l697
  3263  0018F6  500A               	movf	i2___lwmod@divisor,w,c
  3264  0018F8  5E08               	subwf	i2___lwmod@dividend,f,c
  3265  0018FA  500B               	movf	i2___lwmod@divisor+1,w,c
  3266  0018FC  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  3267  0018FE                     i2l697:
  3268  0018FE  90D8               	bcf	status,0,c
  3269  001900  320B               	rrcf	i2___lwmod@divisor+1,f,c
  3270  001902  320A               	rrcf	i2___lwmod@divisor,f,c
  3271  001904  2E0C               	decfsz	i2___lwmod@counter,f,c
  3272  001906  D7F1               	goto	i2u76_40
  3273  001908                     i2l698:
  3274  001908  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  3275  00190C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  3276  001910  0012               	return		;funcret
  3277  001912                     __end_ofi2___lwmod:
  3278                           	opt stack 0
  3279                           pclatu	equ	0xFFB
  3280                           pclath	equ	0xFFA
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           prodh	equ	0xFF4
  3286                           prodl	equ	0xFF3
  3287                           intcon	equ	0xFF2
  3288                           postinc0	equ	0xFEE
  3289                           fsr0h	equ	0xFEA
  3290                           fsr0l	equ	0xFE9
  3291                           wreg	equ	0xFE8
  3292                           postdec1	equ	0xFE5
  3293                           fsr1h	equ	0xFE2
  3294                           fsr1l	equ	0xFE1
  3295                           postinc2	equ	0xFDE
  3296                           postdec2	equ	0xFDD
  3297                           fsr2h	equ	0xFDA
  3298                           fsr2l	equ	0xFD9
  3299                           status	equ	0xFD8
  3300                           
  3301 ;; *************** function i2___lwdiv *****************
  3302 ;; Defined at:
  3303 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  dividend        2    0[COMRAM] unsigned int 
  3306 ;;  divisor         2    2[COMRAM] unsigned int 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3309 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  2    0[COMRAM] unsigned int 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;Total ram usage:        7 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		i2_printf
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text20
  3333  0017A2                     __ptext20:
  3334                           	opt stack 0
  3335  0017A2                     i2___lwdiv:
  3336                           	opt stack 25
  3337                           
  3338                           ;incstack = 0
  3339  0017A2  0E00               	movlw	0
  3340  0017A4  6E06               	movwf	i2___lwdiv@quotient+1,c
  3341  0017A6  0E00               	movlw	0
  3342  0017A8  6E05               	movwf	i2___lwdiv@quotient,c
  3343  0017AA  5003               	movf	i2___lwdiv@divisor,w,c
  3344  0017AC  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  3345  0017AE  B4D8               	btfsc	status,2,c
  3346  0017B0  D01C               	goto	i2l688
  3347  0017B2  0E01               	movlw	1
  3348  0017B4  6E07               	movwf	i2___lwdiv@counter,c
  3349  0017B6  D004               	goto	i2l683
  3350  0017B8  90D8               	bcf	status,0,c
  3351  0017BA  3603               	rlcf	i2___lwdiv@divisor,f,c
  3352  0017BC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  3353  0017BE  2A07               	incf	i2___lwdiv@counter,f,c
  3354  0017C0                     i2l683:
  3355  0017C0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  3356  0017C2  D7FA               	goto	i2l684
  3357  0017C4                     i2u73_40:
  3358  0017C4  90D8               	bcf	status,0,c
  3359  0017C6  3605               	rlcf	i2___lwdiv@quotient,f,c
  3360  0017C8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  3361  0017CA  5003               	movf	i2___lwdiv@divisor,w,c
  3362  0017CC  5C01               	subwf	i2___lwdiv@dividend,w,c
  3363  0017CE  5004               	movf	i2___lwdiv@divisor+1,w,c
  3364  0017D0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  3365  0017D2  A0D8               	btfss	status,0,c
  3366  0017D4  D005               	goto	i2l687
  3367  0017D6  5003               	movf	i2___lwdiv@divisor,w,c
  3368  0017D8  5E01               	subwf	i2___lwdiv@dividend,f,c
  3369  0017DA  5004               	movf	i2___lwdiv@divisor+1,w,c
  3370  0017DC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  3371  0017DE  8005               	bsf	i2___lwdiv@quotient,0,c
  3372  0017E0                     i2l687:
  3373  0017E0  90D8               	bcf	status,0,c
  3374  0017E2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  3375  0017E4  3203               	rrcf	i2___lwdiv@divisor,f,c
  3376  0017E6  2E07               	decfsz	i2___lwdiv@counter,f,c
  3377  0017E8  D7ED               	goto	i2u73_40
  3378  0017EA                     i2l688:
  3379  0017EA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  3380  0017EE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  3381  0017F2  0012               	return		;funcret
  3382  0017F4                     __end_ofi2___lwdiv:
  3383                           	opt stack 0
  3384                           pclatu	equ	0xFFB
  3385                           pclath	equ	0xFFA
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           intcon	equ	0xFF2
  3393                           postinc0	equ	0xFEE
  3394                           fsr0h	equ	0xFEA
  3395                           fsr0l	equ	0xFE9
  3396                           wreg	equ	0xFE8
  3397                           postdec1	equ	0xFE5
  3398                           fsr1h	equ	0xFE2
  3399                           fsr1l	equ	0xFE1
  3400                           postinc2	equ	0xFDE
  3401                           postdec2	equ	0xFDD
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function i2_initLCD *****************
  3407 ;; Defined at:
  3408 ;;		line 60 in file "lcd.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;Total ram usage:        1 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    2
  3429 ;; This function calls:
  3430 ;;		i2_lcdInst
  3431 ;; This function is called by:
  3432 ;;		_interruptHandler
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text21
  3437  001840                     __ptext21:
  3438                           	opt stack 0
  3439  001840                     i2_initLCD:
  3440                           	opt stack 24
  3441                           
  3442                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  3443                           
  3444                           ;incstack = 0
  3445  001840  0E9C               	movlw	156
  3446  001842  6E04               	movwf	??i2_initLCD& (0+255),c
  3447  001844  0ED7               	movlw	215
  3448  001846                     i2u156_47:
  3449  001846  2EE8               	decfsz	wreg,f,c
  3450  001848  D7FE               	bra	i2u156_47
  3451  00184A  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3452  00184C  D7FC               	bra	i2u156_47
  3453  00184E  F000               	nop	
  3454                           
  3455                           ;lcd.c: 69: lcdInst(0b00110011);
  3456  001850  0E33               	movlw	51
  3457  001852  EC10  F00D         	call	i2_lcdInst
  3458                           
  3459                           ;lcd.c: 70: lcdInst(0b00110010);
  3460  001856  0E32               	movlw	50
  3461  001858  EC10  F00D         	call	i2_lcdInst
  3462                           
  3463                           ;lcd.c: 71: lcdInst(0b00101000);
  3464  00185C  0E28               	movlw	40
  3465  00185E  EC10  F00D         	call	i2_lcdInst
  3466                           
  3467                           ;lcd.c: 72: lcdInst(0b00001111);
  3468  001862  0E0F               	movlw	15
  3469  001864  EC10  F00D         	call	i2_lcdInst
  3470                           
  3471                           ;lcd.c: 73: lcdInst(0b00000110);
  3472  001868  0E06               	movlw	6
  3473  00186A  EC10  F00D         	call	i2_lcdInst
  3474                           
  3475                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3476  00186E  0E01               	movlw	1
  3477  001870  EC10  F00D         	call	i2_lcdInst
  3478  001874  0E9C               	movlw	156
  3479  001876  6E04               	movwf	??i2_initLCD& (0+255),c
  3480  001878  0ED7               	movlw	215
  3481  00187A                     i2u157_47:
  3482  00187A  2EE8               	decfsz	wreg,f,c
  3483  00187C  D7FE               	bra	i2u157_47
  3484  00187E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3485  001880  D7FC               	bra	i2u157_47
  3486  001882  F000               	nop	
  3487                           
  3488                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3489  001884  0E0F               	movlw	15
  3490  001886  EC10  F00D         	call	i2_lcdInst
  3491  00188A  0012               	return		;funcret
  3492  00188C                     __end_ofi2_initLCD:
  3493                           	opt stack 0
  3494                           pclatu	equ	0xFFB
  3495                           pclath	equ	0xFFA
  3496                           tblptru	equ	0xFF8
  3497                           tblptrh	equ	0xFF7
  3498                           tblptrl	equ	0xFF6
  3499                           tablat	equ	0xFF5
  3500                           prodh	equ	0xFF4
  3501                           prodl	equ	0xFF3
  3502                           intcon	equ	0xFF2
  3503                           postinc0	equ	0xFEE
  3504                           fsr0h	equ	0xFEA
  3505                           fsr0l	equ	0xFE9
  3506                           wreg	equ	0xFE8
  3507                           postdec1	equ	0xFE5
  3508                           fsr1h	equ	0xFE2
  3509                           fsr1l	equ	0xFE1
  3510                           postinc2	equ	0xFDE
  3511                           postdec2	equ	0xFDD
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function i2_lcdInst *****************
  3517 ;; Defined at:
  3518 ;;		line 11 in file "lcd.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  data            1    wreg     unsigned char 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  data            1    2[COMRAM] unsigned char 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;Total ram usage:        1 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    1
  3539 ;; This function calls:
  3540 ;;		i2_lcdNibble
  3541 ;; This function is called by:
  3542 ;;		_interruptHandler
  3543 ;;		i2_initLCD
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           	psect	text22
  3548  001A20                     __ptext22:
  3549                           	opt stack 0
  3550  001A20                     i2_lcdInst:
  3551                           	opt stack 25
  3552                           
  3553                           ;incstack = 0
  3554                           ;i2lcdInst@data stored from wreg
  3555  001A20  6E03               	movwf	i2lcdInst@data,c
  3556                           
  3557                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  3558  001A22  948C               	bcf	3980,2,c	;volatile
  3559                           
  3560                           ;lcd.c: 20: lcdNibble(data);
  3561  001A24  5003               	movf	i2lcdInst@data,w,c
  3562  001A26  EC69  F00B         	call	i2_lcdNibble
  3563                           
  3564                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3565  001A2A  0EA0               	movlw	160
  3566  001A2C                     i2u158_47:
  3567  001A2C  D000               	nop2	
  3568  001A2E  2EE8               	decfsz	wreg,f,c
  3569  001A30  D7FD               	bra	i2u158_47
  3570  001A32  0012               	return		;funcret
  3571  001A34                     __end_ofi2_lcdInst:
  3572                           	opt stack 0
  3573                           pclatu	equ	0xFFB
  3574                           pclath	equ	0xFFA
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           intcon	equ	0xFF2
  3582                           postinc0	equ	0xFEE
  3583                           fsr0h	equ	0xFEA
  3584                           fsr0l	equ	0xFE9
  3585                           wreg	equ	0xFE8
  3586                           postdec1	equ	0xFE5
  3587                           fsr1h	equ	0xFE2
  3588                           fsr1l	equ	0xFE1
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function i2_lcdNibble *****************
  3596 ;; Defined at:
  3597 ;;		line 37 in file "lcd.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  data            1    wreg     unsigned char 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  data            1    1[COMRAM] unsigned char 
  3602 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;Total ram usage:        2 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; This function calls:
  3619 ;;		Nothing
  3620 ;; This function is called by:
  3621 ;;		i2_lcdInst
  3622 ;;		i2_putch
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text23
  3627  0016D2                     __ptext23:
  3628                           	opt stack 0
  3629  0016D2                     i2_lcdNibble:
  3630                           	opt stack 24
  3631                           
  3632                           ;incstack = 0
  3633                           ;i2lcdNibble@data stored from wreg
  3634  0016D2  6E02               	movwf	i2lcdNibble@data,c
  3635                           
  3636                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3637  0016D4  5002               	movf	i2lcdNibble@data,w,c
  3638  0016D6  0BF0               	andlw	240
  3639  0016D8  6E01               	movwf	i2lcdNibble@temp,c
  3640                           
  3641                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3642  0016DA  508C               	movf	3980,w,c	;volatile
  3643  0016DC  0B0F               	andlw	15
  3644  0016DE  6E8C               	movwf	3980,c	;volatile
  3645                           
  3646                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3647  0016E0  5001               	movf	i2lcdNibble@temp,w,c
  3648  0016E2  108C               	iorwf	3980,w,c	;volatile
  3649  0016E4  6E8C               	movwf	3980,c	;volatile
  3650                           
  3651                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3652  0016E6  0E00               	movlw	0
  3653  0016E8  BEF2               	btfsc	intcon,7,c	;volatile
  3654  0016EA  0E01               	movlw	1
  3655  0016EC  6E45               	movwf	_LCDinterruptState,c
  3656  0016EE  9EF2               	bcf	intcon,7,c	;volatile
  3657  0016F0  868C               	bsf	3980,3,c	;volatile
  3658  0016F2  0E42               	movlw	66
  3659  0016F4                     i2u159_47:
  3660  0016F4  2EE8               	decfsz	wreg,f,c
  3661  0016F6  D7FE               	bra	i2u159_47
  3662  0016F8  D000               	nop2	
  3663  0016FA  968C               	bcf	3980,3,c	;volatile
  3664  0016FC  0EA0               	movlw	160
  3665  0016FE                     i2u160_47:
  3666  0016FE  D000               	nop2	
  3667  001700  2EE8               	decfsz	wreg,f,c
  3668  001702  D7FD               	bra	i2u160_47
  3669  001704  B045               	btfsc	_LCDinterruptState,0,c
  3670  001706  D002               	bra	i2u64_45
  3671  001708  9EF2               	bcf	intcon,7,c	;volatile
  3672  00170A  D001               	bra	i2u64_46
  3673  00170C                     i2u64_45:
  3674  00170C  8EF2               	bsf	intcon,7,c	;volatile
  3675  00170E                     i2u64_46:
  3676                           
  3677                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3678  00170E  3802               	swapf	i2lcdNibble@data,w,c
  3679  001710  0BF0               	andlw	240
  3680  001712  6E02               	movwf	i2lcdNibble@data,c
  3681                           
  3682                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3683  001714  5002               	movf	i2lcdNibble@data,w,c
  3684  001716  0BF0               	andlw	240
  3685  001718  6E01               	movwf	i2lcdNibble@temp,c
  3686                           
  3687                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3688  00171A  508C               	movf	3980,w,c	;volatile
  3689  00171C  0B0F               	andlw	15
  3690  00171E  6E8C               	movwf	3980,c	;volatile
  3691                           
  3692                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3693  001720  5001               	movf	i2lcdNibble@temp,w,c
  3694  001722  108C               	iorwf	3980,w,c	;volatile
  3695  001724  6E8C               	movwf	3980,c	;volatile
  3696                           
  3697                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3698  001726  0E00               	movlw	0
  3699  001728  BEF2               	btfsc	intcon,7,c	;volatile
  3700  00172A  0E01               	movlw	1
  3701  00172C  6E45               	movwf	_LCDinterruptState,c
  3702  00172E  9EF2               	bcf	intcon,7,c	;volatile
  3703  001730  868C               	bsf	3980,3,c	;volatile
  3704  001732  0E42               	movlw	66
  3705  001734                     i2u161_47:
  3706  001734  2EE8               	decfsz	wreg,f,c
  3707  001736  D7FE               	bra	i2u161_47
  3708  001738  D000               	nop2	
  3709  00173A  968C               	bcf	3980,3,c	;volatile
  3710  00173C  0EA0               	movlw	160
  3711  00173E                     i2u162_47:
  3712  00173E  D000               	nop2	
  3713  001740  2EE8               	decfsz	wreg,f,c
  3714  001742  D7FD               	bra	i2u162_47
  3715  001744  B045               	btfsc	_LCDinterruptState,0,c
  3716  001746  D002               	bra	i2u65_45
  3717  001748  9EF2               	bcf	intcon,7,c	;volatile
  3718  00174A  D001               	bra	i2u65_46
  3719  00174C                     i2u65_45:
  3720  00174C  8EF2               	bsf	intcon,7,c	;volatile
  3721  00174E                     i2u65_46:
  3722  00174E  0012               	return		;funcret
  3723  001750                     __end_ofi2_lcdNibble:
  3724                           	opt stack 0
  3725                           pclatu	equ	0xFFB
  3726                           pclath	equ	0xFFA
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           intcon	equ	0xFF2
  3734                           postinc0	equ	0xFEE
  3735                           fsr0h	equ	0xFEA
  3736                           fsr0l	equ	0xFE9
  3737                           wreg	equ	0xFE8
  3738                           postdec1	equ	0xFE5
  3739                           fsr1h	equ	0xFE2
  3740                           fsr1l	equ	0xFE1
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           pclatu	equ	0xFFB
  3747                           pclath	equ	0xFFA
  3748                           tblptru	equ	0xFF8
  3749                           tblptrh	equ	0xFF7
  3750                           tblptrl	equ	0xFF6
  3751                           tablat	equ	0xFF5
  3752                           prodh	equ	0xFF4
  3753                           prodl	equ	0xFF3
  3754                           intcon	equ	0xFF2
  3755                           postinc0	equ	0xFEE
  3756                           fsr0h	equ	0xFEA
  3757                           fsr0l	equ	0xFE9
  3758                           wreg	equ	0xFE8
  3759                           postdec1	equ	0xFE5
  3760                           fsr1h	equ	0xFE2
  3761                           fsr1l	equ	0xFE1
  3762                           postinc2	equ	0xFDE
  3763                           postdec2	equ	0xFDD
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768                           	psect	rparam
  3769  0000                     pclatu	equ	0xFFB
  3770                           pclath	equ	0xFFA
  3771                           tblptru	equ	0xFF8
  3772                           tblptrh	equ	0xFF7
  3773                           tblptrl	equ	0xFF6
  3774                           tablat	equ	0xFF5
  3775                           prodh	equ	0xFF4
  3776                           prodl	equ	0xFF3
  3777                           intcon	equ	0xFF2
  3778                           postinc0	equ	0xFEE
  3779                           fsr0h	equ	0xFEA
  3780                           fsr0l	equ	0xFE9
  3781                           wreg	equ	0xFE8
  3782                           postdec1	equ	0xFE5
  3783                           fsr1h	equ	0xFE2
  3784                           fsr1l	equ	0xFE1
  3785                           postinc2	equ	0xFDE
  3786                           postdec2	equ	0xFDD
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791                           	psect	temp
  3792  00004E                     btemp:
  3793                           	opt stack 0
  3794  00004E                     	ds	1
  3795  0000                     int$flags	set	btemp
  3796  0000                     wtemp6	set	btemp+1
  3797                           pclatu	equ	0xFFB
  3798                           pclath	equ	0xFFA
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           postinc0	equ	0xFEE
  3807                           fsr0h	equ	0xFEA
  3808                           fsr0l	equ	0xFE9
  3809                           wreg	equ	0xFE8
  3810                           postdec1	equ	0xFE5
  3811                           fsr1h	equ	0xFE2
  3812                           fsr1l	equ	0xFE1
  3813                           postinc2	equ	0xFDE
  3814                           postdec2	equ	0xFDD
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    16
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      77
    BANK0           128     21      21
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[20]), STR_5(CODE[20]), STR_4(CODE[20]), STR_3(CODE[20]), 
		 -> STR_2(CODE[20]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2819
                                             58 COMRAM     1     1      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                             49 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    1929
                                             57 COMRAM     1     1      0
                                              4 BANK0     17     7     10
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             51 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             56 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             49 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             52 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             51 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             49 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     272
                                             52 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     326
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     250
                                             50 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             49 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      76
                                             49 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    19    19      0    1242
                                             30 COMRAM    19    19      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            27    17     10     972
                                             12 COMRAM    18     8     10
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      15       5       16.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      4D       1       61.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      62      34        0.0%
DATA                 0      0      62       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 30 23:52:16 2018

                __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l201 1964                          l170 113C  
                        l171 1154                          l180 1252                          l164 10A0  
                        l261 1416                          l181 1260                          l165 10FC  
                        l270 147A                          l262 1426                          l174 115A  
                        l166 1112                          l175 11CC                          l184 1266  
                        l176 11DA                          l169 1124                          l274 14BC  
                        l275 1510                          l179 11E0                          l276 14C2  
                        l268 1452                          l683 176E                          l684 1766  
                        l693 18A4                          l694 189C                          l687 178E  
                        l688 1798                          l697 18BC                          l698 18C6  
               __CFG_CPB$OFF 000000                          u625 168E                          u626 1690  
                        u635 16CE                          u636 16D0                          u670 1772  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l2017 147E                         l2083 1112                         l2087 1124  
                       _ADON 007E10                         STR_1 1011                         STR_2 1011  
                       STR_3 1011                         STR_4 1011                         STR_5 1011  
                       STR_6 1011                         u1210 18A8                         u1310 10F6  
                       u1330 1134                         _LATA 000F89                         u1270 14AA  
                       u1350 1166                         _LATB 000F8A                         _LATC 000F8B  
                       u1360 11C4                         _LATD 000F8C                         u1417 10DE  
                       _LATE 000F8D                         u1290 151A                         u1507 1676  
                       u1427 1118                         u1380 11EC                         u1517 1680  
                       u1437 11AC                         u1390 124A                         u1358 1168  
                       u1527 16B6                         u1447 1232                         u1537 16C0  
                       u1457 12A0                         u1467 19F0                         u1388 11EE  
                       u1477 17FA                         u1487 182E                         u1497 1A04  
                       _RBIE 007F93                         _RBIF 007F90                         _main 1026  
   __end_of_interruptHandler 140A                         fsr0h 000FEA                         fsr1h 000FE2  
         i2___lwdiv@quotient 0005                         fsr2h 000FDA                         fsr0l 000FE9  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 004E  
           __end_of_I2C_init 19AA                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000              __end_ofi2_putch 1A20  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                  i2_lcdNibble 16D2  
           __end_of_LCD_LEFT 100C             ?_I2C_Master_Init 0032             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001              __end_of___lwdiv 17A2  
            __end_of___lwmod 18D0                        i2l261 1540                        i2l270 15A2  
                      i2l262 1550                        i2l193 1354                        i2l274 15E4  
                      i2l194 1360                        i2l275 1632                        i2l195 136C  
                      i2l276 15EA                        i2l268 157A                        i2l196 1378  
                      i2l683 17C0                        i2l684 17B8                        i2l693 18E6  
                      i2l694 18DE                        i2l687 17E0                        i2l688 17EA  
                      i2l697 18FE                        i2l698 1908                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 1A0C               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_readADC 1980              __end_of_initLCD 1840               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 100B                        _putch 19E4                        pclath 000FFA  
                      tablat 000FF5            _LCDinterruptState 0045                        status 000FD8  
                      wtemp6 004F               __CFG_PBADEN$ON 000000        __size_of_I2C_sendData 0022  
           __end_ofi2_printf 1654           __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042  
            __initialization 1912           __size_ofi2_lcdInst 0014                 __end_of_main 12AA  
                 i2printf@ap 0018           __size_ofi2_initLCD 004C            __end_of_LCD_RIGHT 100D  
                     ??_main 003B                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0033           ??_I2C_Master_Start 0033                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0035                       _ADRESH 000FC4  
                     _ADRESL 000FC3              i2lcdNibble@data 0002                       ?_putch 0001  
               _I2C_sendData 19AA              i2lcdNibble@temp 0001                       i2l1763 15A6  
                     i2l1975 13BE                       _OSCCON 000FD3                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
             __CFG_STVREN$ON 000000                    ??___lwdiv 0036                    ??___lwmod 0039  
                     clear_0 1938                    ??_lcdInst 0034                       _printf 140A  
                  ??_readADC 0034                    ??_initLCD 0035                 __pdataCOMRAM 0046  
          __end_ofi2___lwdiv 17F4                 __mediumconst 0000            __end_ofi2___lwmod 1912  
                  ?_I2C_init 0001                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8            __end_ofi2_lcdInst 1A34            __end_ofi2_initLCD 188C  
                 __accesstop 0080      __end_of__initialization 193E                ___rparam_used 000001  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                __end_of_putch 19F8  
                i2printf@val 001C           __size_of_lcdNibble 007E                  i2putch@data 0003  
                 ??_I2C_init 0036                    ?i2_printf 000D                      ??_putch 0034  
          ?_interruptHandler 0001           ??_interruptHandler 001F                 ?i2_lcdNibble 0001  
                    ?_printf 0084                   ??i2_printf 0017                      i2u64_45 170C  
                    i2u64_46 170E                      i2u73_40 17C4                      i2u65_45 174C  
                    i2u65_46 174E                      i2u91_40 15D2                      i2u76_40 18EA  
                    i2u93_40 163A         lcd@LCDinterruptState 0044                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                      _B_count 0042  
                    _B_input 004C                      i2_putch 1A0C                      _N_count 0040  
                    _N_input 004A            __end_of_lcdNibble 16D2                      _S_count 003E  
                    _S_input 0048                      __Hparam 0000                      __Lparam 0000  
                    _W_count 003C                      _W_input 0046                      ___lwdiv 1750  
                    ___lwmod 188C                 __psmallconst 1000                      __pcinit 1912  
                    __ramtop 1000                      _lcdInst 19F8                      __ptext0 1026  
                    __ptext1 194C                      __ptext2 140A                      __ptext3 19E4  
                    __ptext4 188C                      __ptext5 1750                      __ptext6 17F4  
                    __ptext7 19F8                      __ptext8 1654                      __ptext9 19AA  
            __size_of_printf 012C                      _readADC 194C                      _initLCD 17F4  
                    _dpowers 1001                    _LCD_RIGHT 100C     __size_of_I2C_Master_Init 0018  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008               __pintcode_body 12AA  
       end_of_initialization 193E        __end_of_LCD_SIZE_HORZ 100F        __end_of_LCD_SIZE_VERT 100E  
              __Lmediumconst 0000                      int_func 12AA    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A                      printf@c 0094                      printf@f 0084  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81                    _TRISBbits 000F93  
                  _TRISCbits 000F94            __size_of_I2C_init 002A            i2___lwdiv@divisor 0003  
                  i2___lwdiv 17A2                    i2___lwmod 18D0            i2___lwdiv@counter 0007  
                  i2_lcdInst 1A20                    i2_initLCD 1840         __size_ofi2_lcdNibble 007E  
              __pidataCOMRAM 1A50                i2lcdInst@data 0003               __end_of_printf 1536  
               i2printf@flag 001A                 i2printf@prec 001B          start_initialization 1912  
                  i2printf@c 001E                    i2printf@f 000D                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 011E            ??_I2C_Master_Init 0036  
          ??_I2C_Master_Wait 0032                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 0033  
           __CFG_OSC$INTIO67 000000                   ?i2_initLCD 0001     I2C_Master_Init@clockFreq 0032  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 003A    __size_of_interruptHandler 1402  
                __pbssCOMRAM 003C                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                     ?i2_putch 0001             _I2C_Master_Start 1A60  
           _I2C_Master_Write 1A46             ___lwdiv@dividend 0032            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                    _lcdNibble 1654                     ?___lwdiv 0032  
                   ?___lwmod 0080                     ?_lcdInst 0001                     ?_readADC 0032  
                   ?_initLCD 0001                  __smallconst 1000                     _I2C_init 1980  
           ___lwdiv@quotient 0036                ?_I2C_sendData 0001                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 0014                     _LCD_LEFT 100B  
                ??i2_lcdInst 0003                     _LATCbits 000F8B                     _LATDbits 000F8C  
                ??i2_initLCD 0004                     i2u112_40 1304                     i2u113_40 1318  
                   i2u112_48 1306                     i2u114_40 132C                     i2u113_48 131A  
                   i2u115_40 1340                     i2u114_48 132E                     i2u115_48 1342  
                   i2u160_47 16FE                     i2u161_47 1734                     i2u162_47 173E  
                   i2u154_47 13B4                     i2u155_47 1A18                     i2u156_47 1846  
                   i2u157_47 187A                     i2u158_47 1A2C                     i2u159_47 16F4  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001                   _ADCON0bits 000FC2  
                 _ADCON2bits 000FC0                lcdNibble@data 0033                   printf@flag 0090  
              lcdNibble@temp 0032                   printf@prec 0091                     i2_printf 1536  
             ??_I2C_sendData 0035               _LCD_HORZ_LIMIT 1010                    copy_data0 1926  
           __size_ofi2_putch 0014                     __Hrparam 0000        I2C_sendData@char_data 0035  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000             __size_of___lwdiv 0052  
           __size_of___lwmod 0044               readADC@channel 0036             _interruptHandler 0008  
           __size_of_lcdInst 0014              _I2C_Master_Init 19CC             __size_of_readADC 0034  
           __size_of_initLCD 004C              _I2C_Master_Wait 1A34              _I2C_Master_Stop 1A58  
     __end_of_LCD_HORZ_LIMIT 1011              ___lwdiv@divisor 0034              ___lwdiv@counter 0038  
                   __ptext10 1980                     __ptext11 1A46                     __ptext20 17A2  
                   __ptext12 1A58                     __ptext21 1840                     __ptext13 1A60  
                   __ptext22 1A20                     __ptext14 1A34                     __ptext23 16D2  
                   __ptext15 19CC                     __ptext17 1536                     __ptext18 1A0C  
                   __ptext19 18D0               _LCD_VERT_LIMIT 100F                __size_of_main 0284  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0032                     int$flags 004E  
                  printf@val 0092  I2C_Master_Write@byteToWrite 0033                    putch@data 0034  
   __end_of_I2C_Master_Start 1A68                  _OSCTUNEbits 000F9B     __end_of_I2C_Master_Write 1A50  
                 _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1010                     intlevel2 0000  
              _LCD_SIZE_HORZ 100E             ___lwmod@dividend 0080                _LCD_SIZE_VERT 100D  
                   printf@ap 008E         __end_of_I2C_sendData 19CC      __end_of_I2C_Master_Init 19E4  
    __end_of_I2C_Master_Wait 1A46      __end_of_I2C_Master_Stop 1A60                  lcdInst@data 0034  
        __end_ofi2_lcdNibble 1750              ___lwmod@divisor 0082              ___lwmod@counter 0039  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
