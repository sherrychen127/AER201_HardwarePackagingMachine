

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 30 23:11:40 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  0019E0                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _W_input
    80  0019E0  0001               	dw	1
    81                           
    82                           ;initializer for _S_input
    83  0019E2  0001               	dw	1
    84                           
    85                           ;initializer for _N_input
    86  0019E4  0001               	dw	1
    87                           
    88                           ;initializer for _B_input
    89  0019E6  0001               	dw	1
    90                           
    91                           	psect	smallconst
    92  001000                     __psmallconst:
    93                           	opt stack 0
    94  001000  00                 	db	0
    95  001001                     _dpowers:
    96                           	opt stack 0
    97  001001  0001               	dw	1
    98  001003  000A               	dw	10
    99  001005  0064               	dw	100
   100  001007  03E8               	dw	1000
   101  001009  2710               	dw	10000
   102  00100B                     __end_of_dpowers:
   103                           	opt stack 0
   104  00100B                     _LCD_LEFT:
   105                           	opt stack 0
   106  00100B  00                 	db	0
   107  00100C                     __end_of_LCD_LEFT:
   108                           	opt stack 0
   109  00100C                     _LCD_RIGHT:
   110                           	opt stack 0
   111  00100C  01                 	db	1
   112  00100D                     __end_of_LCD_RIGHT:
   113                           	opt stack 0
   114  00100D                     _LCD_SIZE_VERT:
   115                           	opt stack 0
   116  00100D  02                 	db	2
   117  00100E                     __end_of_LCD_SIZE_VERT:
   118                           	opt stack 0
   119  00100E                     _LCD_SIZE_HORZ:
   120                           	opt stack 0
   121  00100E  10                 	db	16
   122  00100F                     __end_of_LCD_SIZE_HORZ:
   123                           	opt stack 0
   124  00100F                     _LCD_VERT_LIMIT:
   125                           	opt stack 0
   126  00100F  02                 	db	2
   127  001010                     __end_of_LCD_VERT_LIMIT:
   128                           	opt stack 0
   129  001010                     _LCD_HORZ_LIMIT:
   130                           	opt stack 0
   131  001010  28                 	db	40
   132  001011                     __end_of_LCD_HORZ_LIMIT:
   133                           	opt stack 0
   134  0000                     _SSPBUF	set	4041
   135  0000                     _SSPCON2bits	set	4037
   136  0000                     _SSPADD	set	4040
   137  0000                     _SSPCON2	set	4037
   138  0000                     _SSPCON1	set	4038
   139  0000                     _SSPSTAT	set	4039
   140  0000                     _SSPCON1bits	set	4038
   141  0000                     _ADRESL	set	4035
   142  0000                     _ADRESH	set	4036
   143  0000                     _ADCON0bits	set	4034
   144  0000                     _PORTBbits	set	3969
   145  0000                     _TRISBbits	set	3987
   146  0000                     _TRISCbits	set	3988
   147  0000                     _LATCbits	set	3979
   148  0000                     _ADCON2bits	set	4032
   149  0000                     _ADCON1	set	4033
   150  0000                     _ADCON0	set	4034
   151  0000                     _TRISE	set	3990
   152  0000                     _TRISD	set	3989
   153  0000                     _TRISC	set	3988
   154  0000                     _TRISB	set	3987
   155  0000                     _TRISA	set	3986
   156  0000                     _LATE	set	3981
   157  0000                     _LATC	set	3979
   158  0000                     _LATB	set	3978
   159  0000                     _LATA	set	3977
   160  0000                     _OSCTUNEbits	set	3995
   161  0000                     _OSCCON	set	4051
   162  0000                     _INTCONbits	set	4082
   163  0000                     _LATD	set	3980
   164  0000                     _LATDbits	set	3980
   165  0000                     _ADON	set	32272
   166  0000                     _RBIF	set	32656
   167  0000                     _RBIE	set	32659
   168  001011                     STR_1:
   169  001011  42                 	db	66	;'B'
   170  001012  3A                 	db	58	;':'
   171  001013  25                 	db	37
   172  001014  64                 	db	100	;'d'
   173  001015  2C                 	db	44
   174  001016  4E                 	db	78	;'N'
   175  001017  3A                 	db	58	;':'
   176  001018  25                 	db	37
   177  001019  64                 	db	100	;'d'
   178  00101A  2C                 	db	44
   179  00101B  53                 	db	83	;'S'
   180  00101C  3A                 	db	58	;':'
   181  00101D  25                 	db	37
   182  00101E  64                 	db	100	;'d'
   183  00101F  2C                 	db	44
   184  001020  57                 	db	87	;'W'
   185  001021  3A                 	db	58	;':'
   186  001022  25                 	db	37
   187  001023  64                 	db	100	;'d'
   188  001024  00                 	db	0
   189  0000                     
   190                           ; #config settings
   191  001025  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  0018D6                     __pcinit:
   195                           	opt stack 0
   196  0018D6                     start_initialization:
   197                           	opt stack 0
   198  0018D6                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Initialize objects allocated to COMRAM (8 bytes)
   202                           ; load TBLPTR registers with __pidataCOMRAM
   203  0018D6  0EE0               	movlw	low __pidataCOMRAM
   204  0018D8  6EF6               	movwf	tblptrl,c
   205  0018DA  0E19               	movlw	high __pidataCOMRAM
   206  0018DC  6EF7               	movwf	tblptrh,c
   207  0018DE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   208  0018E0  6EF8               	movwf	tblptru,c
   209  0018E2  EE00  F046         	lfsr	0,__pdataCOMRAM
   210  0018E6  EE10 F008          	lfsr	1,8
   211  0018EA                     copy_data0:
   212  0018EA  0009               	tblrd		*+
   213  0018EC  CFF5 FFEE          	movff	tablat,postinc0
   214  0018F0  50E5               	movf	postdec1,w,c
   215  0018F2  50E1               	movf	fsr1l,w,c
   216  0018F4  E1FA               	bnz	copy_data0
   217                           
   218                           ; Clear objects allocated to COMRAM (10 bytes)
   219  0018F6  EE00  F03C         	lfsr	0,__pbssCOMRAM
   220  0018FA  0E0A               	movlw	10
   221  0018FC                     clear_0:
   222  0018FC  6AEE               	clrf	postinc0,c
   223  0018FE  06E8               	decf	wreg,f,c
   224  001900  E1FD               	bnz	clear_0
   225  001902                     end_of_initialization:
   226                           	opt stack 0
   227  001902                     __end_of__initialization:
   228                           	opt stack 0
   229  001902  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   230  001904  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   231  001906  0E00               	movlw	low (__Lmediumconst shr (0+16))
   232  001908  6EF8               	movwf	tblptru,c
   233  00190A  0100               	movlb	0
   234  00190C  EF13  F008         	goto	_main	;jump to C main() function
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           postdec1	equ	0xFE5
   242                           fsr1l	equ	0xFE1
   243                           
   244                           	psect	bssCOMRAM
   245  00003C                     __pbssCOMRAM:
   246                           	opt stack 0
   247  00003C                     _W_count:
   248                           	opt stack 0
   249  00003C                     	ds	2
   250  00003E                     _S_count:
   251                           	opt stack 0
   252  00003E                     	ds	2
   253  000040                     _N_count:
   254                           	opt stack 0
   255  000040                     	ds	2
   256  000042                     _B_count:
   257                           	opt stack 0
   258  000042                     	ds	2
   259  000044                     	ds	1
   260  000045                     _LCDinterruptState:
   261                           	opt stack 0
   262  000045                     	ds	1
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	dataCOMRAM
   273  000046                     __pdataCOMRAM:
   274                           	opt stack 0
   275  000046                     _W_input:
   276                           	opt stack 0
   277  000046                     	ds	2
   278  000048                     _S_input:
   279                           	opt stack 0
   280  000048                     	ds	2
   281  00004A                     _N_input:
   282                           	opt stack 0
   283  00004A                     	ds	2
   284  00004C                     _B_input:
   285                           	opt stack 0
   286  00004C                     	ds	2
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	cstackBANK0
   297  000080                     __pcstackBANK0:
   298                           	opt stack 0
   299  000080                     ?___lwmod:
   300                           	opt stack 0
   301  000080                     ___lwmod@dividend:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x0
   305  000080                     	ds	2
   306  000082                     ___lwmod@divisor:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310  000082                     	ds	2
   311  000084                     ?_printf:
   312                           	opt stack 0
   313  000084                     printf@f:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x4
   317  000084                     	ds	10
   318  00008E                     printf@ap:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0xE
   322  00008E                     	ds	2
   323  000090                     printf@flag:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x10
   327  000090                     	ds	1
   328  000091                     printf@prec:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x11
   332  000091                     	ds	1
   333  000092                     printf@val:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x12
   337  000092                     	ds	2
   338  000094                     printf@c:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0x14
   342  000094                     	ds	1
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           postdec1	equ	0xFE5
   350                           fsr1l	equ	0xFE1
   351                           
   352                           	psect	cstackCOMRAM
   353  000001                     __pcstackCOMRAM:
   354                           	opt stack 0
   355  000001                     ?i2___lwdiv:
   356                           	opt stack 0
   357  000001                     i2lcdNibble@temp:
   358                           	opt stack 0
   359  000001                     i2___lwdiv@dividend:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x0
   363  000001                     	ds	1
   364  000002                     i2lcdNibble@data:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x1
   368  000002                     	ds	1
   369  000003                     i2lcdInst@data:
   370                           	opt stack 0
   371  000003                     i2putch@data:
   372                           	opt stack 0
   373  000003                     i2___lwdiv@divisor:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x2
   377  000003                     	ds	1
   378  000004                     ??i2_initLCD:
   379                           
   380                           ; 1 bytes @ 0x3
   381  000004                     	ds	1
   382  000005                     i2___lwdiv@quotient:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x4
   386  000005                     	ds	2
   387  000007                     i2___lwdiv@counter:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x6
   391  000007                     	ds	1
   392  000008                     ?i2___lwmod:
   393                           	opt stack 0
   394  000008                     i2___lwmod@dividend:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x7
   398  000008                     	ds	2
   399  00000A                     i2___lwmod@divisor:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x9
   403  00000A                     	ds	2
   404  00000C                     i2___lwmod@counter:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0xB
   408  00000C                     	ds	1
   409  00000D                     ?i2_printf:
   410                           	opt stack 0
   411  00000D                     i2printf@f:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xC
   415  00000D                     	ds	10
   416  000017                     ??i2_printf:
   417                           
   418                           ; 1 bytes @ 0x16
   419  000017                     	ds	1
   420  000018                     i2printf@ap:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x17
   424  000018                     	ds	2
   425  00001A                     i2printf@flag:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x19
   429  00001A                     	ds	1
   430  00001B                     i2printf@prec:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x1A
   434  00001B                     	ds	1
   435  00001C                     i2printf@val:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x1B
   439  00001C                     	ds	2
   440  00001E                     i2printf@c:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x1D
   444  00001E                     	ds	1
   445  00001F                     ??_interruptHandler:
   446                           
   447                           ; 1 bytes @ 0x1E
   448  00001F                     	ds	19
   449  000032                     ??_I2C_Master_Wait:
   450  000032                     ?___lwdiv:
   451                           	opt stack 0
   452  000032                     lcdNibble@temp:
   453                           	opt stack 0
   454  000032                     ___lwdiv@dividend:
   455                           	opt stack 0
   456  000032                     I2C_Master_Init@clockFreq:
   457                           	opt stack 0
   458                           
   459                           ; 4 bytes @ 0x31
   460  000032                     	ds	1
   461  000033                     lcdNibble@data:
   462                           	opt stack 0
   463  000033                     I2C_Master_Write@byteToWrite:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x32
   467  000033                     	ds	1
   468  000034                     lcdInst@data:
   469                           	opt stack 0
   470  000034                     putch@data:
   471                           	opt stack 0
   472  000034                     ___lwdiv@divisor:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x33
   476  000034                     	ds	1
   477  000035                     ??_initLCD:
   478  000035                     I2C_sendData@char_data:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x34
   482  000035                     	ds	1
   483  000036                     ___lwdiv@quotient:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x35
   487  000036                     	ds	2
   488  000038                     ___lwdiv@counter:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x37
   492  000038                     	ds	1
   493  000039                     ___lwmod@counter:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x38
   497  000039                     	ds	1
   498  00003A                     ??_printf:
   499                           
   500                           ; 1 bytes @ 0x39
   501  00003A                     	ds	1
   502  00003B                     ??_main:
   503                           
   504                           ; 1 bytes @ 0x3A
   505  00003B                     	ds	1
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1l	equ	0xFE1
   514                           
   515 ;;
   516 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   517 ;;
   518 ;; *************** function _main *****************
   519 ;; Defined at:
   520 ;;		line 32 in file "main.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;		None
   523 ;; Auto vars:     Size  Location     Type
   524 ;;		None
   525 ;; Return value:  Size  Location     Type
   526 ;;                  1    wreg      void 
   527 ;; Registers used:
   528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : 0/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   537 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   538 ;;Total ram usage:        1 bytes
   539 ;; Hardware stack levels required when called:    7
   540 ;; This function calls:
   541 ;;		_I2C_init
   542 ;;		_I2C_sendData
   543 ;;		_initLCD
   544 ;;		_lcdInst
   545 ;;		_printf
   546 ;; This function is called by:
   547 ;;		Startup code after reset
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text0
   552  001026                     __ptext0:
   553                           	opt stack 0
   554  001026                     _main:
   555                           	opt stack 24
   556                           
   557                           ;main.c: 36: OSCCON = 0xF2;
   558                           
   559                           ;incstack = 0
   560  001026  0EF2               	movlw	242
   561  001028  6ED3               	movwf	4051,c	;volatile
   562                           
   563                           ;main.c: 43: OSCTUNEbits.PLLEN = 1;
   564  00102A  8C9B               	bsf	3995,6,c	;volatile
   565                           
   566                           ;main.c: 47: LATA = 0x00;
   567  00102C  0E00               	movlw	0
   568  00102E  6E89               	movwf	3977,c	;volatile
   569                           
   570                           ;main.c: 48: LATB = 0x00;
   571  001030  0E00               	movlw	0
   572  001032  6E8A               	movwf	3978,c	;volatile
   573                           
   574                           ;main.c: 49: LATC = 0x00;
   575  001034  0E00               	movlw	0
   576  001036  6E8B               	movwf	3979,c	;volatile
   577                           
   578                           ;main.c: 50: LATD = 0x00;
   579  001038  0E00               	movlw	0
   580  00103A  6E8C               	movwf	3980,c	;volatile
   581                           
   582                           ;main.c: 51: LATE = 0x00;
   583  00103C  0E00               	movlw	0
   584  00103E  6E8D               	movwf	3981,c	;volatile
   585                           
   586                           ;main.c: 55: TRISA = 0xFF;
   587  001040  6892               	setf	3986,c	;volatile
   588                           
   589                           ;main.c: 56: TRISB = 0xFF;
   590  001042  6893               	setf	3987,c	;volatile
   591                           
   592                           ;main.c: 57: TRISC = 0x00;
   593  001044  0E00               	movlw	0
   594  001046  6E94               	movwf	3988,c	;volatile
   595                           
   596                           ;main.c: 58: TRISD = 0x00;
   597  001048  0E00               	movlw	0
   598  00104A  6E95               	movwf	3989,c	;volatile
   599                           
   600                           ;main.c: 59: TRISE = 0x00;
   601  00104C  0E00               	movlw	0
   602  00104E  6E96               	movwf	3990,c	;volatile
   603                           
   604                           ;main.c: 62: ADCON0 = 0x00;
   605  001050  0E00               	movlw	0
   606  001052  6EC2               	movwf	4034,c	;volatile
   607                           
   608                           ;main.c: 63: ADCON1 = 0b00001111;
   609  001054  0E0F               	movlw	15
   610  001056  6EC1               	movwf	4033,c	;volatile
   611                           
   612                           ;main.c: 64: ADCON2bits.ADFM = 1;
   613  001058  8EC0               	bsf	4032,7,c	;volatile
   614                           
   615                           ;main.c: 69: (INTCONbits.GIE = 1);
   616  00105A  8EF2               	bsf	intcon,7,c	;volatile
   617                           
   618                           ;main.c: 70: initLCD();
   619  00105C  ECDC  F00B         	call	_initLCD	;wreg free
   620                           
   621                           ;main.c: 71: I2C_init();
   622  001060  EC88  F00C         	call	_I2C_init	;wreg free
   623                           
   624                           ;main.c: 75: LATCbits.LATC0 = 1;
   625  001064  808B               	bsf	3979,0,c	;volatile
   626                           
   627                           ;main.c: 76: TRISCbits.RC0 = 0;
   628  001066  9094               	bcf	3988,0,c	;volatile
   629                           
   630                           ;main.c: 79: RBIE = 1;
   631  001068  86F2               	bsf	intcon,3,c	;volatile
   632                           
   633                           ;main.c: 82: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   634  00106A  0E11               	movlw	low STR_1
   635  00106C  0100               	movlb	0	; () banked
   636  00106E  6F84               	movwf	printf@f& (0+255),b
   637  001070  0E10               	movlw	high STR_1
   638  001072  6F85               	movwf	(printf@f+1)& (0+255),b
   639  001074  C042  F086         	movff	_B_count,?_printf+2
   640  001078  C043  F087         	movff	_B_count+1,?_printf+3
   641  00107C  C040  F088         	movff	_N_count,?_printf+4
   642  001080  C041  F089         	movff	_N_count+1,?_printf+5
   643  001084  C03E  F08A         	movff	_S_count,?_printf+6
   644  001088  C03F  F08B         	movff	_S_count+1,?_printf+7
   645  00108C  C03C  F08C         	movff	_W_count,?_printf+8
   646  001090  C03D  F08D         	movff	_W_count+1,?_printf+9
   647  001094  ECE7  F009         	call	_printf	;wreg free
   648                           
   649                           ;main.c: 83: initLCD();
   650  001098  ECDC  F00B         	call	_initLCD	;wreg free
   651                           
   652                           ;main.c: 87: I2C_sendData('5');
   653  00109C  0E35               	movlw	53
   654  00109E  EC9D  F00C         	call	_I2C_sendData
   655  0010A2                     
   656                           ;main.c: 89: initLCD();
   657  0010A2  ECDC  F00B         	call	_initLCD	;wreg free
   658                           
   659                           ;main.c: 90: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   660  0010A6  0E11               	movlw	low STR_1
   661  0010A8  0100               	movlb	0	; () banked
   662  0010AA  6F84               	movwf	printf@f& (0+255),b
   663  0010AC  0E10               	movlw	high STR_1
   664  0010AE  6F85               	movwf	(printf@f+1)& (0+255),b
   665  0010B0  C042  F086         	movff	_B_count,?_printf+2
   666  0010B4  C043  F087         	movff	_B_count+1,?_printf+3
   667  0010B8  C040  F088         	movff	_N_count,?_printf+4
   668  0010BC  C041  F089         	movff	_N_count+1,?_printf+5
   669  0010C0  C03E  F08A         	movff	_S_count,?_printf+6
   670  0010C4  C03F  F08B         	movff	_S_count+1,?_printf+7
   671  0010C8  C03C  F08C         	movff	_W_count,?_printf+8
   672  0010CC  C03D  F08D         	movff	_W_count+1,?_printf+9
   673  0010D0  ECE7  F009         	call	_printf	;wreg free
   674                           
   675                           ;main.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   676  0010D4  0E80               	movlw	128
   677  0010D6  ECC4  F00C         	call	_lcdInst
   678  0010DA  0E34               	movlw	52
   679  0010DC  6E3B               	movwf	??_main& (0+255),c
   680  0010DE  0EF2               	movlw	242
   681  0010E0                     u1227:
   682  0010E0  2EE8               	decfsz	wreg,f,c
   683  0010E2  D7FE               	bra	u1227
   684  0010E4  2E3B               	decfsz	??_main& (0+255),f,c
   685  0010E6  D7FC               	bra	u1227
   686                           
   687                           ;main.c: 93: if (B_count>=4){
   688  0010E8  BE43               	btfsc	_B_count+1,7,c
   689  0010EA  D7DB               	goto	l162
   690  0010EC  5043               	movf	_B_count+1,w,c
   691  0010EE  E104               	bnz	u1180
   692  0010F0  0E04               	movlw	4
   693  0010F2  5C42               	subwf	_B_count,w,c
   694  0010F4  A0D8               	btfss	status,0,c
   695  0010F6  D7D5               	goto	l162
   696  0010F8                     u1180:
   697                           
   698                           ;main.c: 94: I2C_sendData('6');
   699  0010F8  0E36               	movlw	54
   700  0010FA  EC9D  F00C         	call	_I2C_sendData
   701                           
   702                           ;main.c: 96: }
   703                           ;main.c: 97: }
   704                           ;main.c: 101: I2C_sendData('7');
   705                           
   706                           ;main.c: 95: break;
   707  0010FE  0E37               	movlw	55
   708  001100  EC9D  F00C         	call	_I2C_sendData
   709  001104                     l166:
   710                           
   711                           ;main.c: 103: initLCD();
   712  001104  ECDC  F00B         	call	_initLCD	;wreg free
   713                           
   714                           ;main.c: 104: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   715  001108  0E11               	movlw	low STR_1
   716  00110A  0100               	movlb	0	; () banked
   717  00110C  6F84               	movwf	printf@f& (0+255),b
   718  00110E  0E10               	movlw	high STR_1
   719  001110  6F85               	movwf	(printf@f+1)& (0+255),b
   720  001112  C042  F086         	movff	_B_count,?_printf+2
   721  001116  C043  F087         	movff	_B_count+1,?_printf+3
   722  00111A  C040  F088         	movff	_N_count,?_printf+4
   723  00111E  C041  F089         	movff	_N_count+1,?_printf+5
   724  001122  C03E  F08A         	movff	_S_count,?_printf+6
   725  001126  C03F  F08B         	movff	_S_count+1,?_printf+7
   726  00112A  C03C  F08C         	movff	_W_count,?_printf+8
   727  00112E  C03D  F08D         	movff	_W_count+1,?_printf+9
   728  001132  ECE7  F009         	call	_printf	;wreg free
   729                           
   730                           ;main.c: 105: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   731  001136  0E80               	movlw	128
   732  001138  ECC4  F00C         	call	_lcdInst
   733  00113C  0E34               	movlw	52
   734  00113E  6E3B               	movwf	??_main& (0+255),c
   735  001140  0EF2               	movlw	242
   736  001142                     u1237:
   737  001142  2EE8               	decfsz	wreg,f,c
   738  001144  D7FE               	bra	u1237
   739  001146  2E3B               	decfsz	??_main& (0+255),f,c
   740  001148  D7FC               	bra	u1237
   741                           
   742                           ;main.c: 107: if (N_count>=4){
   743  00114A  BE41               	btfsc	_N_count+1,7,c
   744  00114C  D7DB               	goto	l166
   745  00114E  5041               	movf	_N_count+1,w,c
   746  001150  E104               	bnz	u1190
   747  001152  0E04               	movlw	4
   748  001154  5C40               	subwf	_N_count,w,c
   749  001156  A0D8               	btfss	status,0,c
   750  001158  D7D5               	goto	l166
   751  00115A                     u1190:
   752                           
   753                           ;main.c: 108: I2C_sendData('8');
   754  00115A  0E38               	movlw	56
   755  00115C  EC9D  F00C         	call	_I2C_sendData
   756                           
   757                           ;main.c: 110: }
   758                           ;main.c: 111: }
   759                           ;main.c: 113: I2C_sendData('9');
   760                           
   761                           ;main.c: 109: break;
   762  001160  0E39               	movlw	57
   763  001162  EC9D  F00C         	call	_I2C_sendData
   764  001166                     l170:
   765                           
   766                           ;main.c: 115: initLCD();
   767  001166  ECDC  F00B         	call	_initLCD	;wreg free
   768                           
   769                           ;main.c: 116: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   770  00116A  0E11               	movlw	low STR_1
   771  00116C  0100               	movlb	0	; () banked
   772  00116E  6F84               	movwf	printf@f& (0+255),b
   773  001170  0E10               	movlw	high STR_1
   774  001172  6F85               	movwf	(printf@f+1)& (0+255),b
   775  001174  C042  F086         	movff	_B_count,?_printf+2
   776  001178  C043  F087         	movff	_B_count+1,?_printf+3
   777  00117C  C040  F088         	movff	_N_count,?_printf+4
   778  001180  C041  F089         	movff	_N_count+1,?_printf+5
   779  001184  C03E  F08A         	movff	_S_count,?_printf+6
   780  001188  C03F  F08B         	movff	_S_count+1,?_printf+7
   781  00118C  C03C  F08C         	movff	_W_count,?_printf+8
   782  001190  C03D  F08D         	movff	_W_count+1,?_printf+9
   783  001194  ECE7  F009         	call	_printf	;wreg free
   784                           
   785                           ;main.c: 117: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   786  001198  0E80               	movlw	128
   787  00119A  ECC4  F00C         	call	_lcdInst
   788  00119E  0E34               	movlw	52
   789  0011A0  6E3B               	movwf	??_main& (0+255),c
   790  0011A2  0EF2               	movlw	242
   791  0011A4                     u1247:
   792  0011A4  2EE8               	decfsz	wreg,f,c
   793  0011A6  D7FE               	bra	u1247
   794  0011A8  2E3B               	decfsz	??_main& (0+255),f,c
   795  0011AA  D7FC               	bra	u1247
   796                           
   797                           ;main.c: 118: if (S_count>=4){
   798  0011AC  BE3F               	btfsc	_S_count+1,7,c
   799  0011AE  D7DB               	goto	l170
   800  0011B0  503F               	movf	_S_count+1,w,c
   801  0011B2  E104               	bnz	u1200
   802  0011B4  0E04               	movlw	4
   803  0011B6  5C3E               	subwf	_S_count,w,c
   804  0011B8  A0D8               	btfss	status,0,c
   805  0011BA  D7D5               	goto	l170
   806  0011BC                     u1200:
   807                           
   808                           ;main.c: 119: I2C_sendData(12);
   809  0011BC  0E0C               	movlw	12
   810  0011BE  EC9D  F00C         	call	_I2C_sendData
   811                           
   812                           ;main.c: 121: }
   813                           ;main.c: 122: }
   814                           ;main.c: 126: I2C_sendData(11);
   815                           
   816                           ;main.c: 120: break;
   817  0011C2  0E0B               	movlw	11
   818  0011C4  EC9D  F00C         	call	_I2C_sendData
   819  0011C8                     l174:
   820                           
   821                           ;main.c: 129: initLCD();
   822  0011C8  ECDC  F00B         	call	_initLCD	;wreg free
   823                           
   824                           ;main.c: 130: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   825  0011CC  0E11               	movlw	low STR_1
   826  0011CE  0100               	movlb	0	; () banked
   827  0011D0  6F84               	movwf	printf@f& (0+255),b
   828  0011D2  0E10               	movlw	high STR_1
   829  0011D4  6F85               	movwf	(printf@f+1)& (0+255),b
   830  0011D6  C042  F086         	movff	_B_count,?_printf+2
   831  0011DA  C043  F087         	movff	_B_count+1,?_printf+3
   832  0011DE  C040  F088         	movff	_N_count,?_printf+4
   833  0011E2  C041  F089         	movff	_N_count+1,?_printf+5
   834  0011E6  C03E  F08A         	movff	_S_count,?_printf+6
   835  0011EA  C03F  F08B         	movff	_S_count+1,?_printf+7
   836  0011EE  C03C  F08C         	movff	_W_count,?_printf+8
   837  0011F2  C03D  F08D         	movff	_W_count+1,?_printf+9
   838  0011F6  ECE7  F009         	call	_printf	;wreg free
   839                           
   840                           ;main.c: 131: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   841  0011FA  0E80               	movlw	128
   842  0011FC  ECC4  F00C         	call	_lcdInst
   843  001200  0E34               	movlw	52
   844  001202  6E3B               	movwf	??_main& (0+255),c
   845  001204  0EF2               	movlw	242
   846  001206                     u1257:
   847  001206  2EE8               	decfsz	wreg,f,c
   848  001208  D7FE               	bra	u1257
   849  00120A  2E3B               	decfsz	??_main& (0+255),f,c
   850  00120C  D7FC               	bra	u1257
   851                           
   852                           ;main.c: 132: if (W_count>=4){
   853  00120E  BE3D               	btfsc	_W_count+1,7,c
   854  001210  D7DB               	goto	l174
   855  001212  503D               	movf	_W_count+1,w,c
   856  001214  E104               	bnz	u1210
   857  001216  0E04               	movlw	4
   858  001218  5C3C               	subwf	_W_count,w,c
   859  00121A  A0D8               	btfss	status,0,c
   860  00121C  D7D5               	goto	l174
   861  00121E                     u1210:
   862                           
   863                           ;main.c: 133: I2C_sendData(12);
   864  00121E  0E0C               	movlw	12
   865  001220  EC9D  F00C         	call	_I2C_sendData
   866                           
   867                           ;main.c: 135: }
   868                           ;main.c: 136: }
   869                           ;main.c: 174: initLCD();
   870                           
   871                           ;main.c: 134: break;
   872  001224  ECDC  F00B         	call	_initLCD	;wreg free
   873                           
   874                           ;main.c: 175: RBIE = 0;
   875  001228  96F2               	bcf	intcon,3,c	;volatile
   876  00122A                     
   877                           ;main.c: 179: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
   878  00122A  0E11               	movlw	low STR_1
   879  00122C  0100               	movlb	0	; () banked
   880  00122E  6F84               	movwf	printf@f& (0+255),b
   881  001230  0E10               	movlw	high STR_1
   882  001232  6F85               	movwf	(printf@f+1)& (0+255),b
   883  001234  C042  F086         	movff	_B_count,?_printf+2
   884  001238  C043  F087         	movff	_B_count+1,?_printf+3
   885  00123C  C040  F088         	movff	_N_count,?_printf+4
   886  001240  C041  F089         	movff	_N_count+1,?_printf+5
   887  001244  C03E  F08A         	movff	_S_count,?_printf+6
   888  001248  C03F  F08B         	movff	_S_count+1,?_printf+7
   889  00124C  C03C  F08C         	movff	_W_count,?_printf+8
   890  001250  C03D  F08D         	movff	_W_count+1,?_printf+9
   891  001254  ECE7  F009         	call	_printf	;wreg free
   892                           
   893                           ;main.c: 180: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
   894  001258  0E80               	movlw	128
   895  00125A  ECC4  F00C         	call	_lcdInst
   896  00125E  0E34               	movlw	52
   897  001260  6E3B               	movwf	??_main& (0+255),c
   898  001262  0EF2               	movlw	242
   899  001264                     u1267:
   900  001264  2EE8               	decfsz	wreg,f,c
   901  001266  D7FE               	bra	u1267
   902  001268  2E3B               	decfsz	??_main& (0+255),f,c
   903  00126A  D7FC               	bra	u1267
   904  00126C  D7DE               	goto	l178
   905  00126E                     __end_of_main:
   906                           	opt stack 0
   907                           tblptru	equ	0xFF8
   908                           tblptrh	equ	0xFF7
   909                           tblptrl	equ	0xFF6
   910                           tablat	equ	0xFF5
   911                           intcon	equ	0xFF2
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           postdec1	equ	0xFE5
   915                           fsr1l	equ	0xFE1
   916                           status	equ	0xFD8
   917                           
   918 ;; *************** function _printf *****************
   919 ;; Defined at:
   920 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  f               2    4[BANK0 ] PTR const unsigned char 
   923 ;;		 -> STR_7(20), STR_6(20), STR_5(20), STR_4(20), 
   924 ;;		 -> STR_3(20), STR_2(20), STR_1(20), 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  tmpval          4    0        struct .
   927 ;;  cp              3    0        PTR const unsigned char 
   928 ;;  val             2   18[BANK0 ] unsigned int 
   929 ;;  ap              2   14[BANK0 ] PTR void [1]
   930 ;;		 -> ?i2_printf(2), ?_printf(2), 
   931 ;;  len             2    0        unsigned int 
   932 ;;  c               1   20[BANK0 ] char 
   933 ;;  prec            1   17[BANK0 ] char 
   934 ;;  flag            1   16[BANK0 ] unsigned char 
   935 ;; Return value:  Size  Location     Type
   936 ;;                  2    4[BANK0 ] int 
   937 ;; Registers used:
   938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   944 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   947 ;;      Totals:         1      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   948 ;;Total ram usage:       18 bytes
   949 ;; Hardware stack levels used:    1
   950 ;; Hardware stack levels required when called:    6
   951 ;; This function calls:
   952 ;;		___lwdiv
   953 ;;		___lwmod
   954 ;;		_putch
   955 ;; This function is called by:
   956 ;;		_main
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           	psect	text1
   961  0013CE                     __ptext1:
   962                           	opt stack 0
   963  0013CE                     _printf:
   964                           	opt stack 24
   965                           
   966                           ;doprnt.c: 466: va_list ap;
   967                           ;doprnt.c: 499: signed char c;
   968                           ;doprnt.c: 506: signed char prec;
   969                           ;doprnt.c: 508: unsigned char flag;
   970                           ;doprnt.c: 523: union {
   971                           ;doprnt.c: 524: unsigned long vd;
   972                           ;doprnt.c: 525: double integ;
   973                           ;doprnt.c: 526: } tmpval;
   974                           ;doprnt.c: 528: unsigned int val;
   975                           ;doprnt.c: 529: unsigned len;
   976                           ;doprnt.c: 530: const char * cp;
   977                           ;doprnt.c: 533: *ap = __va_start();
   978                           
   979                           ;incstack = 0
   980  0013CE  0E86               	movlw	low (?_printf+2)
   981  0013D0  0100               	movlb	0	; () banked
   982  0013D2  6F8E               	movwf	printf@ap& (0+255),b
   983  0013D4  0E00               	movlw	high (?_printf+2)
   984  0013D6  6F8F               	movwf	(printf@ap+1)& (0+255),b
   985                           
   986                           ;doprnt.c: 536: while(c = *f++) {
   987  0013D8  D082               	goto	u1160
   988  0013DA                     
   989                           ; BSR set to: 0
   990                           ;doprnt.c: 538: if(c != '%')
   991                           
   992                           ; BSR set to: 0
   993  0013DA  0E25               	movlw	37
   994  0013DC  1994               	xorwf	printf@c& (0+255),w,b
   995  0013DE  B4D8               	btfsc	status,2,c
   996  0013E0  D004               	goto	l256
   997                           
   998                           ; BSR set to: 0
   999                           ;doprnt.c: 540: {
  1000                           ;doprnt.c: 541: (putch(c) );
  1001  0013E2  5194               	movf	printf@c& (0+255),w,b
  1002  0013E4  ECBA  F00C         	call	_putch
  1003                           
  1004                           ;doprnt.c: 542: continue;
  1005  0013E8  D07A               	goto	u1160
  1006  0013EA                     l256:
  1007                           
  1008                           ;doprnt.c: 543: }
  1009                           ;doprnt.c: 548: flag = 0;
  1010  0013EA  0E00               	movlw	0
  1011  0013EC  0100               	movlb	0	; () banked
  1012  0013EE  6F90               	movwf	printf@flag& (0+255),b
  1013                           
  1014                           ; BSR set to: 0
  1015                           
  1016                           ; BSR set to: 0
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;doprnt.c: 822: }
  1020                           
  1021                           ; BSR set to: 0
  1022                           ;doprnt.c: 813: continue;
  1023                           
  1024                           ;doprnt.c: 802: default:
  1025                           
  1026                           ; BSR set to: 0
  1027                           ;doprnt.c: 698: case 'i':
  1028                           ;doprnt.c: 699: break;
  1029                           
  1030                           ; BSR set to: 0
  1031                           
  1032                           ;doprnt.c: 697: case 'd':
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;doprnt.c: 638: goto alldone;
  1036                           
  1037                           ;doprnt.c: 637: case 0:
  1038                           
  1039                           ;doprnt.c: 635: switch(c = *f++) {
  1040  0013F0  C084  FFF6         	movff	printf@f,tblptrl
  1041  0013F4  C085  FFF7         	movff	printf@f+1,tblptrh
  1042  0013F8  4B84               	infsnz	printf@f& (0+255),f,b
  1043  0013FA  2B85               	incf	(printf@f+1)& (0+255),f,b
  1044  0013FC                     	if	0	;tblptru may be non-zero
  1045  0013FC                     	endif
  1046  0013FC                     	if	0	;tblptru may be non-zero
  1047  0013FC                     	endif
  1048  0013FC  0008               	tblrd		*
  1049  0013FE  CFF5 F094          	movff	tablat,printf@c
  1050  001402  5194               	movf	printf@c& (0+255),w,b
  1051                           
  1052                           ; Switch size 1, requested type "space"
  1053                           ; Number of cases is 3, Range of values is 0 to 105
  1054                           ; switch strategies available:
  1055                           ; Name         Instructions Cycles
  1056                           ; simple_byte           10     6 (average)
  1057                           ;	Chosen strategy is simple_byte
  1058  001404  0A00               	xorlw	0	; case 0
  1059  001406  B4D8               	btfsc	status,2,c
  1060  001408  0012               	return	
  1061  00140A  0A64               	xorlw	100	; case 100
  1062  00140C  B4D8               	btfsc	status,2,c
  1063  00140E  D003               	goto	l262
  1064  001410  0A0D               	xorlw	13	; case 105
  1065  001412  A4D8               	btfss	status,2,c
  1066  001414  D064               	goto	u1160
  1067  001416                     l262:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;doprnt.c: 1253: {
  1071                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1072                           
  1073                           ; BSR set to: 0
  1074  001416  C08E  FFD9         	movff	printf@ap,fsr2l
  1075  00141A  C08F  FFDA         	movff	printf@ap+1,fsr2h
  1076  00141E  CFDE F092          	movff	postinc2,printf@val
  1077  001422  CFDD F093          	movff	postdec2,printf@val+1
  1078                           
  1079                           ; BSR set to: 0
  1080  001426  0E02               	movlw	2
  1081  001428  278E               	addwf	printf@ap& (0+255),f,b
  1082  00142A  0E00               	movlw	0
  1083  00142C  238F               	addwfc	(printf@ap+1)& (0+255),f,b
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;doprnt.c: 1261: if((int)val < 0) {
  1087  00142E  AF93               	btfss	(printf@val+1)& (0+255),7,b
  1088  001430  D006               	goto	l264
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;doprnt.c: 1262: flag |= 0x03;
  1092  001432  0E03               	movlw	3
  1093  001434  1390               	iorwf	printf@flag& (0+255),f,b
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;doprnt.c: 1263: val = -val;
  1097  001436  6D92               	negf	printf@val& (0+255),b
  1098  001438  1F93               	comf	(printf@val+1)& (0+255),f,b
  1099  00143A  B0D8               	btfsc	status,0,c
  1100  00143C  2B93               	incf	(printf@val+1)& (0+255),f,b
  1101  00143E                     l264:
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;doprnt.c: 1264: }
  1105                           ;doprnt.c: 1266: }
  1106                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1107                           
  1108                           ; BSR set to: 0
  1109  00143E  0E01               	movlw	1
  1110  001440  6F94               	movwf	printf@c& (0+255),b
  1111  001442                     l1961:
  1112                           
  1113                           ; BSR set to: 0
  1114  001442  0E05               	movlw	5
  1115  001444  1994               	xorwf	printf@c& (0+255),w,b
  1116  001446  B4D8               	btfsc	status,2,c
  1117  001448  D012               	goto	u1140
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;doprnt.c: 1306: if(val < dpowers[c])
  1121                           
  1122                           ; BSR set to: 0
  1123                           
  1124                           ; BSR set to: 0
  1125  00144A  5194               	movf	printf@c& (0+255),w,b
  1126  00144C  0D02               	mullw	2
  1127  00144E  0E01               	movlw	low _dpowers
  1128  001450  24F3               	addwf	prodl,w,c
  1129  001452  6EF6               	movwf	tblptrl,c
  1130  001454  0E10               	movlw	high _dpowers
  1131  001456  20F4               	addwfc	prodh,w,c
  1132  001458  6EF7               	movwf	tblptrh,c
  1133  00145A                     	if	0	;There are less than 3 active tblptr bytes
  1134  00145A                     	endif
  1135  00145A  0009               	tblrd		*+
  1136  00145C  50F5               	movf	tablat,w,c
  1137  00145E  5D92               	subwf	printf@val& (0+255),w,b
  1138  001460  0009               	tblrd		*+
  1139  001462  50F5               	movf	tablat,w,c
  1140  001464  5993               	subwfb	(printf@val+1)& (0+255),w,b
  1141  001466  A0D8               	btfss	status,0,c
  1142  001468  D002               	goto	u1140
  1143                           
  1144                           ; BSR set to: 0
  1145                           
  1146                           ; BSR set to: 0
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;doprnt.c: 1307: break;
  1150  00146A  2B94               	incf	printf@c& (0+255),f,b
  1151  00146C  D7EA               	goto	l1961
  1152  00146E                     u1140:
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;doprnt.c: 1422: {
  1156                           ;doprnt.c: 1438: if(flag & 0x03)
  1157                           
  1158                           ; BSR set to: 0
  1159  00146E  C090  F03A         	movff	printf@flag,??_printf
  1160  001472  0E03               	movlw	3
  1161  001474  163A               	andwf	??_printf,f,c
  1162  001476  B4D8               	btfsc	status,2,c
  1163  001478  D003               	goto	l268
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;doprnt.c: 1439: (putch('-') );
  1167  00147A  0E2D               	movlw	45
  1168  00147C  ECBA  F00C         	call	_putch
  1169  001480                     l268:
  1170                           
  1171                           ;doprnt.c: 1469: }
  1172                           ;doprnt.c: 1472: prec = c;
  1173  001480  C094  F091         	movff	printf@c,printf@prec
  1174                           
  1175                           ;doprnt.c: 1474: while(prec--) {
  1176  001484  D027               	goto	l269
  1177  001486                     
  1178                           ;doprnt.c: 1478: {
  1179                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1180  001486  0100               	movlb	0	; () banked
  1181  001488  5191               	movf	printf@prec& (0+255),w,b
  1182  00148A  0D02               	mullw	2
  1183  00148C  0E01               	movlw	low _dpowers
  1184  00148E  24F3               	addwf	prodl,w,c
  1185  001490  6EF6               	movwf	tblptrl,c
  1186  001492  0E10               	movlw	high _dpowers
  1187  001494  20F4               	addwfc	prodh,w,c
  1188  001496  6EF7               	movwf	tblptrh,c
  1189  001498                     	if	0	;There are less than 3 active tblptr bytes
  1190  001498                     	endif
  1191  001498  0009               	tblrd		*+
  1192  00149A  CFF5 F034          	movff	tablat,___lwdiv@divisor
  1193  00149E  000A               	tblrd		*-
  1194  0014A0  CFF5 F035          	movff	tablat,___lwdiv@divisor+1
  1195  0014A4  C092  F032         	movff	printf@val,___lwdiv@dividend
  1196  0014A8  C093  F033         	movff	printf@val+1,___lwdiv@dividend+1
  1197  0014AC  EC8A  F00B         	call	___lwdiv	;wreg free
  1198  0014B0  C032  F080         	movff	?___lwdiv,___lwmod@dividend
  1199  0014B4  C033  F081         	movff	?___lwdiv+1,___lwmod@dividend+1
  1200  0014B8  0E00               	movlw	0
  1201  0014BA  0100               	movlb	0	; () banked
  1202  0014BC  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  1203  0014BE  0E0A               	movlw	10
  1204  0014C0  6F82               	movwf	___lwmod@divisor& (0+255),b
  1205  0014C2  EC28  F00C         	call	___lwmod	;wreg free
  1206  0014C6  0100               	movlb	0	; () banked
  1207  0014C8  5180               	movf	?___lwmod& (0+255),w,b
  1208  0014CA  0F30               	addlw	48
  1209  0014CC  6F94               	movwf	printf@c& (0+255),b
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;doprnt.c: 1523: }
  1213                           ;doprnt.c: 1524: (putch(c) );
  1214  0014CE  5194               	movf	printf@c& (0+255),w,b
  1215  0014D0  ECBA  F00C         	call	_putch
  1216  0014D4                     l269:
  1217  0014D4  0100               	movlb	0	; () banked
  1218  0014D6  0791               	decf	printf@prec& (0+255),f,b
  1219  0014D8  2991               	incf	printf@prec& (0+255),w,b
  1220  0014DA  A4D8               	btfss	status,2,c
  1221  0014DC  D7D4               	goto	l270
  1222  0014DE                     u1160:
  1223                           
  1224                           ; BSR set to: 0
  1225                           
  1226                           ; BSR set to: 0
  1227  0014DE  C084  FFF6         	movff	printf@f,tblptrl
  1228  0014E2  C085  FFF7         	movff	printf@f+1,tblptrh
  1229  0014E6  0100               	movlb	0	; () banked
  1230  0014E8  4B84               	infsnz	printf@f& (0+255),f,b
  1231  0014EA  2B85               	incf	(printf@f+1)& (0+255),f,b
  1232  0014EC                     	if	0	;tblptru may be non-zero
  1233  0014EC                     	endif
  1234  0014EC                     	if	0	;tblptru may be non-zero
  1235  0014EC                     	endif
  1236  0014EC  0008               	tblrd		*
  1237  0014EE  CFF5 F094          	movff	tablat,printf@c
  1238  0014F2  5194               	movf	printf@c& (0+255),w,b
  1239  0014F4  B4D8               	btfsc	status,2,c
  1240  0014F6  0012               	return	
  1241  0014F8  D770               	goto	l255
  1242  0014FA                     __end_of_printf:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           prodh	equ	0xFF4
  1249                           prodl	equ	0xFF3
  1250                           intcon	equ	0xFF2
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           postdec1	equ	0xFE5
  1254                           fsr1l	equ	0xFE1
  1255                           postinc2	equ	0xFDE
  1256                           postdec2	equ	0xFDD
  1257                           fsr2h	equ	0xFDA
  1258                           fsr2l	equ	0xFD9
  1259                           status	equ	0xFD8
  1260                           
  1261 ;; *************** function _putch *****************
  1262 ;; Defined at:
  1263 ;;		line 24 in file "lcd.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  data            1    wreg     unsigned char 
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;  data            1   51[COMRAM] unsigned char 
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, status,2, status,0, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1278 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;Total ram usage:        1 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    5
  1284 ;; This function calls:
  1285 ;;		_lcdNibble
  1286 ;; This function is called by:
  1287 ;;		_printf
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text2
  1292  001974                     __ptext2:
  1293                           	opt stack 0
  1294  001974                     _putch:
  1295                           	opt stack 24
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;incstack = 0
  1299                           ;putch@data stored from wreg
  1300  001974  6E34               	movwf	putch@data,c
  1301                           
  1302                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1303  001976  848C               	bsf	3980,2,c	;volatile
  1304                           
  1305                           ;lcd.c: 33: lcdNibble(data);
  1306  001978  5034               	movf	putch@data,w,c
  1307  00197A  EC0C  F00B         	call	_lcdNibble
  1308                           
  1309                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1310  00197E  0EA0               	movlw	160
  1311  001980                     u1277:
  1312  001980  D000               	nop2	
  1313  001982  2EE8               	decfsz	wreg,f,c
  1314  001984  D7FD               	bra	u1277
  1315  001986  0012               	return		;funcret
  1316  001988                     __end_of_putch:
  1317                           	opt stack 0
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           prodh	equ	0xFF4
  1323                           prodl	equ	0xFF3
  1324                           intcon	equ	0xFF2
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           postdec1	equ	0xFE5
  1328                           fsr1l	equ	0xFE1
  1329                           postinc2	equ	0xFDE
  1330                           postdec2	equ	0xFDD
  1331                           fsr2h	equ	0xFDA
  1332                           fsr2l	equ	0xFD9
  1333                           status	equ	0xFD8
  1334                           
  1335 ;; *************** function ___lwmod *****************
  1336 ;; Defined at:
  1337 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  dividend        2    0[BANK0 ] unsigned int 
  1340 ;;  divisor         2    2[BANK0 ] unsigned int 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  counter         1   56[COMRAM] unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  2    0[BANK0 ] unsigned int 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2, status,0
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1352 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;Total ram usage:        5 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    4
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_printf
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text3
  1367  001850                     __ptext3:
  1368                           	opt stack 0
  1369  001850                     ___lwmod:
  1370                           	opt stack 25
  1371                           
  1372                           ;incstack = 0
  1373  001850  0100               	movlb	0	; () banked
  1374  001852  5182               	movf	___lwmod@divisor& (0+255),w,b
  1375  001854  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1376  001856  B4D8               	btfsc	status,2,c
  1377  001858  D018               	goto	l692
  1378                           
  1379                           ; BSR set to: 0
  1380  00185A  0E01               	movlw	1
  1381  00185C  6E39               	movwf	___lwmod@counter,c
  1382  00185E  D004               	goto	l687
  1383  001860                     
  1384                           ; BSR set to: 0
  1385                           
  1386                           ; BSR set to: 0
  1387  001860  90D8               	bcf	status,0,c
  1388  001862  3782               	rlcf	___lwmod@divisor& (0+255),f,b
  1389  001864  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1390  001866  2A39               	incf	___lwmod@counter,f,c
  1391  001868                     l687:
  1392                           
  1393                           ; BSR set to: 0
  1394                           
  1395                           ; BSR set to: 0
  1396  001868  AF83               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1397  00186A  D7FA               	goto	l688
  1398  00186C                     u1080:
  1399                           
  1400                           ; BSR set to: 0
  1401                           
  1402                           ; BSR set to: 0
  1403                           
  1404                           ; BSR set to: 0
  1405  00186C  5182               	movf	___lwmod@divisor& (0+255),w,b
  1406  00186E  5D80               	subwf	___lwmod@dividend& (0+255),w,b
  1407  001870  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1408  001872  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1409  001874  A0D8               	btfss	status,0,c
  1410  001876  D004               	goto	l691
  1411                           
  1412                           ; BSR set to: 0
  1413  001878  5182               	movf	___lwmod@divisor& (0+255),w,b
  1414  00187A  5F80               	subwf	___lwmod@dividend& (0+255),f,b
  1415  00187C  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1416  00187E  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1417  001880                     l691:
  1418                           
  1419                           ; BSR set to: 0
  1420                           
  1421                           ; BSR set to: 0
  1422  001880  90D8               	bcf	status,0,c
  1423  001882  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1424  001884  3382               	rrcf	___lwmod@divisor& (0+255),f,b
  1425                           
  1426                           ; BSR set to: 0
  1427  001886  2E39               	decfsz	___lwmod@counter,f,c
  1428  001888  D7F1               	goto	u1080
  1429  00188A                     l692:
  1430                           
  1431                           ; BSR set to: 0
  1432                           
  1433                           ; BSR set to: 0
  1434  00188A  C080  F080         	movff	___lwmod@dividend,?___lwmod
  1435  00188E  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
  1436                           
  1437                           ; BSR set to: 0
  1438  001892  0012               	return		;funcret
  1439  001894                     __end_of___lwmod:
  1440                           	opt stack 0
  1441                           tblptru	equ	0xFF8
  1442                           tblptrh	equ	0xFF7
  1443                           tblptrl	equ	0xFF6
  1444                           tablat	equ	0xFF5
  1445                           prodh	equ	0xFF4
  1446                           prodl	equ	0xFF3
  1447                           intcon	equ	0xFF2
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           postdec1	equ	0xFE5
  1451                           fsr1l	equ	0xFE1
  1452                           postinc2	equ	0xFDE
  1453                           postdec2	equ	0xFDD
  1454                           fsr2h	equ	0xFDA
  1455                           fsr2l	equ	0xFD9
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function ___lwdiv *****************
  1459 ;; Defined at:
  1460 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  dividend        2   49[COMRAM] unsigned int 
  1463 ;;  divisor         2   51[COMRAM] unsigned int 
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  quotient        2   53[COMRAM] unsigned int 
  1466 ;;  counter         1   55[COMRAM] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  2   49[COMRAM] unsigned int 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1476 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1477 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1480 ;;Total ram usage:        7 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    4
  1483 ;; This function calls:
  1484 ;;		Nothing
  1485 ;; This function is called by:
  1486 ;;		_printf
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text4
  1491  001714                     __ptext4:
  1492                           	opt stack 0
  1493  001714                     ___lwdiv:
  1494                           	opt stack 25
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;incstack = 0
  1498  001714  0E00               	movlw	0
  1499  001716  6E37               	movwf	___lwdiv@quotient+1,c
  1500  001718  0E00               	movlw	0
  1501  00171A  6E36               	movwf	___lwdiv@quotient,c
  1502  00171C  5034               	movf	___lwdiv@divisor,w,c
  1503  00171E  1035               	iorwf	___lwdiv@divisor+1,w,c
  1504  001720  B4D8               	btfsc	status,2,c
  1505  001722  D01C               	goto	l682
  1506  001724  0E01               	movlw	1
  1507  001726  6E38               	movwf	___lwdiv@counter,c
  1508  001728  D004               	goto	l677
  1509  00172A  90D8               	bcf	status,0,c
  1510  00172C  3634               	rlcf	___lwdiv@divisor,f,c
  1511  00172E  3635               	rlcf	___lwdiv@divisor+1,f,c
  1512  001730  2A38               	incf	___lwdiv@counter,f,c
  1513  001732                     l677:
  1514  001732  AE35               	btfss	___lwdiv@divisor+1,7,c
  1515  001734  D7FA               	goto	l678
  1516  001736                     u610:
  1517  001736  90D8               	bcf	status,0,c
  1518  001738  3636               	rlcf	___lwdiv@quotient,f,c
  1519  00173A  3637               	rlcf	___lwdiv@quotient+1,f,c
  1520  00173C  5034               	movf	___lwdiv@divisor,w,c
  1521  00173E  5C32               	subwf	___lwdiv@dividend,w,c
  1522  001740  5035               	movf	___lwdiv@divisor+1,w,c
  1523  001742  5833               	subwfb	___lwdiv@dividend+1,w,c
  1524  001744  A0D8               	btfss	status,0,c
  1525  001746  D005               	goto	l681
  1526  001748  5034               	movf	___lwdiv@divisor,w,c
  1527  00174A  5E32               	subwf	___lwdiv@dividend,f,c
  1528  00174C  5035               	movf	___lwdiv@divisor+1,w,c
  1529  00174E  5A33               	subwfb	___lwdiv@dividend+1,f,c
  1530  001750  8036               	bsf	___lwdiv@quotient,0,c
  1531  001752                     l681:
  1532  001752  90D8               	bcf	status,0,c
  1533  001754  3235               	rrcf	___lwdiv@divisor+1,f,c
  1534  001756  3234               	rrcf	___lwdiv@divisor,f,c
  1535  001758  2E38               	decfsz	___lwdiv@counter,f,c
  1536  00175A  D7ED               	goto	u610
  1537  00175C                     l682:
  1538  00175C  C036  F032         	movff	___lwdiv@quotient,?___lwdiv
  1539  001760  C037  F033         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1540  001764  0012               	return		;funcret
  1541  001766                     __end_of___lwdiv:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           prodh	equ	0xFF4
  1548                           prodl	equ	0xFF3
  1549                           intcon	equ	0xFF2
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           fsr1l	equ	0xFE1
  1554                           postinc2	equ	0xFDE
  1555                           postdec2	equ	0xFDD
  1556                           fsr2h	equ	0xFDA
  1557                           fsr2l	equ	0xFD9
  1558                           status	equ	0xFD8
  1559                           
  1560 ;; *************** function _initLCD *****************
  1561 ;; Defined at:
  1562 ;;		line 60 in file "lcd.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;		None
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;Total ram usage:        1 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    6
  1583 ;; This function calls:
  1584 ;;		_lcdInst
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text5
  1591  0017B8                     __ptext5:
  1592                           	opt stack 0
  1593  0017B8                     _initLCD:
  1594                           	opt stack 24
  1595                           
  1596                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  1597                           
  1598                           ;incstack = 0
  1599  0017B8  0E9C               	movlw	156
  1600  0017BA  6E35               	movwf	??_initLCD& (0+255),c
  1601  0017BC  0ED7               	movlw	215
  1602  0017BE                     u1287:
  1603  0017BE  2EE8               	decfsz	wreg,f,c
  1604  0017C0  D7FE               	bra	u1287
  1605  0017C2  2E35               	decfsz	??_initLCD& (0+255),f,c
  1606  0017C4  D7FC               	bra	u1287
  1607  0017C6  F000               	nop	
  1608                           
  1609                           ;lcd.c: 69: lcdInst(0b00110011);
  1610  0017C8  0E33               	movlw	51
  1611  0017CA  ECC4  F00C         	call	_lcdInst
  1612                           
  1613                           ;lcd.c: 70: lcdInst(0b00110010);
  1614  0017CE  0E32               	movlw	50
  1615  0017D0  ECC4  F00C         	call	_lcdInst
  1616                           
  1617                           ;lcd.c: 71: lcdInst(0b00101000);
  1618  0017D4  0E28               	movlw	40
  1619  0017D6  ECC4  F00C         	call	_lcdInst
  1620                           
  1621                           ;lcd.c: 72: lcdInst(0b00001111);
  1622  0017DA  0E0F               	movlw	15
  1623  0017DC  ECC4  F00C         	call	_lcdInst
  1624                           
  1625                           ;lcd.c: 73: lcdInst(0b00000110);
  1626  0017E0  0E06               	movlw	6
  1627  0017E2  ECC4  F00C         	call	_lcdInst
  1628                           
  1629                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  1630  0017E6  0E01               	movlw	1
  1631  0017E8  ECC4  F00C         	call	_lcdInst
  1632  0017EC  0E9C               	movlw	156
  1633  0017EE  6E35               	movwf	??_initLCD& (0+255),c
  1634  0017F0  0ED7               	movlw	215
  1635  0017F2                     u1297:
  1636  0017F2  2EE8               	decfsz	wreg,f,c
  1637  0017F4  D7FE               	bra	u1297
  1638  0017F6  2E35               	decfsz	??_initLCD& (0+255),f,c
  1639  0017F8  D7FC               	bra	u1297
  1640  0017FA  F000               	nop	
  1641                           
  1642                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1643  0017FC  0E0F               	movlw	15
  1644  0017FE  ECC4  F00C         	call	_lcdInst
  1645  001802  0012               	return		;funcret
  1646  001804                     __end_of_initLCD:
  1647                           	opt stack 0
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           prodh	equ	0xFF4
  1653                           prodl	equ	0xFF3
  1654                           intcon	equ	0xFF2
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           postinc2	equ	0xFDE
  1660                           postdec2	equ	0xFDD
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _lcdInst *****************
  1666 ;; Defined at:
  1667 ;;		line 11 in file "lcd.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  data            1    wreg     unsigned char 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  data            1   51[COMRAM] unsigned char 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;Total ram usage:        1 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    5
  1688 ;; This function calls:
  1689 ;;		_lcdNibble
  1690 ;; This function is called by:
  1691 ;;		_initLCD
  1692 ;;		_main
  1693 ;;		_lcd_set_cursor
  1694 ;;		_lcd_shift_cursor
  1695 ;;		_lcd_shift_display
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text6
  1700  001988                     __ptext6:
  1701                           	opt stack 0
  1702  001988                     _lcdInst:
  1703                           	opt stack 25
  1704                           
  1705                           ;incstack = 0
  1706                           ;lcdInst@data stored from wreg
  1707  001988  6E34               	movwf	lcdInst@data,c
  1708                           
  1709                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1710  00198A  948C               	bcf	3980,2,c	;volatile
  1711                           
  1712                           ;lcd.c: 20: lcdNibble(data);
  1713  00198C  5034               	movf	lcdInst@data,w,c
  1714  00198E  EC0C  F00B         	call	_lcdNibble
  1715                           
  1716                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1717  001992  0EA0               	movlw	160
  1718  001994                     u1307:
  1719  001994  D000               	nop2	
  1720  001996  2EE8               	decfsz	wreg,f,c
  1721  001998  D7FD               	bra	u1307
  1722  00199A  0012               	return		;funcret
  1723  00199C                     __end_of_lcdInst:
  1724                           	opt stack 0
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           prodh	equ	0xFF4
  1730                           prodl	equ	0xFF3
  1731                           intcon	equ	0xFF2
  1732                           postinc0	equ	0xFEE
  1733                           wreg	equ	0xFE8
  1734                           postdec1	equ	0xFE5
  1735                           fsr1l	equ	0xFE1
  1736                           postinc2	equ	0xFDE
  1737                           postdec2	equ	0xFDD
  1738                           fsr2h	equ	0xFDA
  1739                           fsr2l	equ	0xFD9
  1740                           status	equ	0xFD8
  1741                           
  1742 ;; *************** function _lcdNibble *****************
  1743 ;; Defined at:
  1744 ;;		line 37 in file "lcd.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  data            1    wreg     unsigned char 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  data            1   50[COMRAM] unsigned char 
  1749 ;;  temp            1   49[COMRAM] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, status,2, status,0
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1762 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1763 ;;Total ram usage:        2 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    4
  1766 ;; This function calls:
  1767 ;;		Nothing
  1768 ;; This function is called by:
  1769 ;;		_lcdInst
  1770 ;;		_putch
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text7
  1775  001618                     __ptext7:
  1776                           	opt stack 0
  1777  001618                     _lcdNibble:
  1778                           	opt stack 24
  1779                           
  1780                           ;incstack = 0
  1781                           ;lcdNibble@data stored from wreg
  1782  001618  6E33               	movwf	lcdNibble@data,c
  1783                           
  1784                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  1785  00161A  5033               	movf	lcdNibble@data,w,c
  1786  00161C  0BF0               	andlw	240
  1787  00161E  6E32               	movwf	lcdNibble@temp,c
  1788                           
  1789                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  1790  001620  508C               	movf	3980,w,c	;volatile
  1791  001622  0B0F               	andlw	15
  1792  001624  6E8C               	movwf	3980,c	;volatile
  1793                           
  1794                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  1795  001626  5032               	movf	lcdNibble@temp,w,c
  1796  001628  108C               	iorwf	3980,w,c	;volatile
  1797  00162A  6E8C               	movwf	3980,c	;volatile
  1798                           
  1799                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1800  00162C  0E00               	movlw	0
  1801  00162E  BEF2               	btfsc	intcon,7,c	;volatile
  1802  001630  0E01               	movlw	1
  1803  001632  6E45               	movwf	_LCDinterruptState,c
  1804  001634  9EF2               	bcf	intcon,7,c	;volatile
  1805  001636  868C               	bsf	3980,3,c	;volatile
  1806  001638  0E42               	movlw	66
  1807  00163A                     u1317:
  1808  00163A  2EE8               	decfsz	wreg,f,c
  1809  00163C  D7FE               	bra	u1317
  1810  00163E  D000               	nop2	
  1811  001640  968C               	bcf	3980,3,c	;volatile
  1812  001642  0EA0               	movlw	160
  1813  001644                     u1327:
  1814  001644  D000               	nop2	
  1815  001646  2EE8               	decfsz	wreg,f,c
  1816  001648  D7FD               	bra	u1327
  1817  00164A  B045               	btfsc	_LCDinterruptState,0,c
  1818  00164C  D002               	bra	u565
  1819  00164E  9EF2               	bcf	intcon,7,c	;volatile
  1820  001650  D001               	bra	u566
  1821  001652                     u565:
  1822  001652  8EF2               	bsf	intcon,7,c	;volatile
  1823  001654                     u566:
  1824                           
  1825                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  1826  001654  3833               	swapf	lcdNibble@data,w,c
  1827  001656  0BF0               	andlw	240
  1828  001658  6E33               	movwf	lcdNibble@data,c
  1829                           
  1830                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  1831  00165A  5033               	movf	lcdNibble@data,w,c
  1832  00165C  0BF0               	andlw	240
  1833  00165E  6E32               	movwf	lcdNibble@temp,c
  1834                           
  1835                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  1836  001660  508C               	movf	3980,w,c	;volatile
  1837  001662  0B0F               	andlw	15
  1838  001664  6E8C               	movwf	3980,c	;volatile
  1839                           
  1840                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  1841  001666  5032               	movf	lcdNibble@temp,w,c
  1842  001668  108C               	iorwf	3980,w,c	;volatile
  1843  00166A  6E8C               	movwf	3980,c	;volatile
  1844                           
  1845                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  1846  00166C  0E00               	movlw	0
  1847  00166E  BEF2               	btfsc	intcon,7,c	;volatile
  1848  001670  0E01               	movlw	1
  1849  001672  6E45               	movwf	_LCDinterruptState,c
  1850  001674  9EF2               	bcf	intcon,7,c	;volatile
  1851  001676  868C               	bsf	3980,3,c	;volatile
  1852  001678  0E42               	movlw	66
  1853  00167A                     u1337:
  1854  00167A  2EE8               	decfsz	wreg,f,c
  1855  00167C  D7FE               	bra	u1337
  1856  00167E  D000               	nop2	
  1857  001680  968C               	bcf	3980,3,c	;volatile
  1858  001682  0EA0               	movlw	160
  1859  001684                     u1347:
  1860  001684  D000               	nop2	
  1861  001686  2EE8               	decfsz	wreg,f,c
  1862  001688  D7FD               	bra	u1347
  1863  00168A  B045               	btfsc	_LCDinterruptState,0,c
  1864  00168C  D002               	bra	u575
  1865  00168E  9EF2               	bcf	intcon,7,c	;volatile
  1866  001690  D001               	bra	u576
  1867  001692                     u575:
  1868  001692  8EF2               	bsf	intcon,7,c	;volatile
  1869  001694                     u576:
  1870  001694  0012               	return		;funcret
  1871  001696                     __end_of_lcdNibble:
  1872                           	opt stack 0
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           prodh	equ	0xFF4
  1878                           prodl	equ	0xFF3
  1879                           intcon	equ	0xFF2
  1880                           postinc0	equ	0xFEE
  1881                           wreg	equ	0xFE8
  1882                           postdec1	equ	0xFE5
  1883                           fsr1l	equ	0xFE1
  1884                           postinc2	equ	0xFDE
  1885                           postdec2	equ	0xFDD
  1886                           fsr2h	equ	0xFDA
  1887                           fsr2l	equ	0xFD9
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _I2C_sendData *****************
  1891 ;; Defined at:
  1892 ;;		line 288 in file "main.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  char_data       1    wreg     unsigned char 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  char_data       1   52[COMRAM] unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      void 
  1899 ;; Registers used:
  1900 ;;		wreg, status,2, status,0, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;Total ram usage:        1 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    6
  1913 ;; This function calls:
  1914 ;;		_I2C_Master_Start
  1915 ;;		_I2C_Master_Stop
  1916 ;;		_I2C_Master_Write
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text8
  1923  00193A                     __ptext8:
  1924                           	opt stack 0
  1925  00193A                     _I2C_sendData:
  1926                           	opt stack 24
  1927                           
  1928                           ;incstack = 0
  1929                           ;I2C_sendData@char_data stored from wreg
  1930  00193A  6E35               	movwf	I2C_sendData@char_data,c
  1931                           
  1932                           ;main.c: 289: I2C_Master_Start();
  1933  00193C  ECF8  F00C         	call	_I2C_Master_Start	;wreg free
  1934                           
  1935                           ;main.c: 290: I2C_Master_Write(0b00010000);
  1936  001940  0E00               	movlw	0
  1937  001942  6E34               	movwf	I2C_Master_Write@byteToWrite+1,c
  1938  001944  0E10               	movlw	16
  1939  001946  6E33               	movwf	I2C_Master_Write@byteToWrite,c
  1940  001948  ECEB  F00C         	call	_I2C_Master_Write	;wreg free
  1941                           
  1942                           ;main.c: 291: I2C_Master_Write(char_data);
  1943  00194C  C035  F033         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  1944  001950  6A34               	clrf	I2C_Master_Write@byteToWrite+1,c
  1945  001952  ECEB  F00C         	call	_I2C_Master_Write	;wreg free
  1946                           
  1947                           ;main.c: 292: I2C_Master_Stop();
  1948  001956  ECF4  F00C         	call	_I2C_Master_Stop	;wreg free
  1949  00195A  0012               	return		;funcret
  1950  00195C                     __end_of_I2C_sendData:
  1951                           	opt stack 0
  1952                           tblptru	equ	0xFF8
  1953                           tblptrh	equ	0xFF7
  1954                           tblptrl	equ	0xFF6
  1955                           tablat	equ	0xFF5
  1956                           prodh	equ	0xFF4
  1957                           prodl	equ	0xFF3
  1958                           intcon	equ	0xFF2
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           postdec1	equ	0xFE5
  1962                           fsr1l	equ	0xFE1
  1963                           postinc2	equ	0xFDE
  1964                           postdec2	equ	0xFDD
  1965                           fsr2h	equ	0xFDA
  1966                           fsr2l	equ	0xFD9
  1967                           status	equ	0xFD8
  1968                           
  1969 ;; *************** function _I2C_init *****************
  1970 ;; Defined at:
  1971 ;;		line 282 in file "main.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;Total ram usage:        0 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    6
  1992 ;; This function calls:
  1993 ;;		_I2C_Master_Init
  1994 ;;		_I2C_Master_Start
  1995 ;;		_I2C_Master_Stop
  1996 ;;		_I2C_Master_Write
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text9
  2003  001910                     __ptext9:
  2004                           	opt stack 0
  2005  001910                     _I2C_init:
  2006                           	opt stack 24
  2007                           
  2008                           ;main.c: 283: I2C_Master_Init(100000);
  2009                           
  2010                           ;incstack = 0
  2011  001910  0EA0               	movlw	160
  2012  001912  6E32               	movwf	I2C_Master_Init@clockFreq,c
  2013  001914  0E86               	movlw	134
  2014  001916  6E33               	movwf	I2C_Master_Init@clockFreq+1,c
  2015  001918  0E01               	movlw	1
  2016  00191A  6E34               	movwf	I2C_Master_Init@clockFreq+2,c
  2017  00191C  0E00               	movlw	0
  2018  00191E  6E35               	movwf	I2C_Master_Init@clockFreq+3,c
  2019  001920  ECAE  F00C         	call	_I2C_Master_Init	;wreg free
  2020                           
  2021                           ;main.c: 284: I2C_Master_Start();
  2022  001924  ECF8  F00C         	call	_I2C_Master_Start	;wreg free
  2023                           
  2024                           ;main.c: 285: I2C_Master_Write(0b00010000);
  2025  001928  0E00               	movlw	0
  2026  00192A  6E34               	movwf	I2C_Master_Write@byteToWrite+1,c
  2027  00192C  0E10               	movlw	16
  2028  00192E  6E33               	movwf	I2C_Master_Write@byteToWrite,c
  2029  001930  ECEB  F00C         	call	_I2C_Master_Write	;wreg free
  2030                           
  2031                           ;main.c: 286: I2C_Master_Stop();
  2032  001934  ECF4  F00C         	call	_I2C_Master_Stop	;wreg free
  2033  001938  0012               	return		;funcret
  2034  00193A                     __end_of_I2C_init:
  2035                           	opt stack 0
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           prodh	equ	0xFF4
  2041                           prodl	equ	0xFF3
  2042                           intcon	equ	0xFF2
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           postdec1	equ	0xFE5
  2046                           fsr1l	equ	0xFE1
  2047                           postinc2	equ	0xFDE
  2048                           postdec2	equ	0xFDD
  2049                           fsr2h	equ	0xFDA
  2050                           fsr2l	equ	0xFD9
  2051                           status	equ	0xFD8
  2052                           
  2053 ;; *************** function _I2C_Master_Write *****************
  2054 ;; Defined at:
  2055 ;;		line 109 in file "I2C.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  byteToWrite     2   50[COMRAM] unsigned int 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, status,2, status,0, cstack
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2069 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;Total ram usage:        2 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    5
  2076 ;; This function calls:
  2077 ;;		_I2C_Master_Wait
  2078 ;; This function is called by:
  2079 ;;		_I2C_init
  2080 ;;		_I2C_sendData
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text10
  2085  0019D6                     __ptext10:
  2086                           	opt stack 0
  2087  0019D6                     _I2C_Master_Write:
  2088                           	opt stack 24
  2089                           
  2090                           ;I2C.c: 117: I2C_Master_Wait();
  2091                           
  2092                           ;incstack = 0
  2093  0019D6  ECE2  F00C         	call	_I2C_Master_Wait	;wreg free
  2094                           
  2095                           ;I2C.c: 118: SSPBUF = byteToWrite;
  2096  0019DA  C033  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2097  0019DE  0012               	return		;funcret
  2098  0019E0                     __end_of_I2C_Master_Write:
  2099                           	opt stack 0
  2100                           tblptru	equ	0xFF8
  2101                           tblptrh	equ	0xFF7
  2102                           tblptrl	equ	0xFF6
  2103                           tablat	equ	0xFF5
  2104                           prodh	equ	0xFF4
  2105                           prodl	equ	0xFF3
  2106                           intcon	equ	0xFF2
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postdec1	equ	0xFE5
  2110                           fsr1l	equ	0xFE1
  2111                           postinc2	equ	0xFDE
  2112                           postdec2	equ	0xFDD
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8
  2116                           
  2117 ;; *************** function _I2C_Master_Stop *****************
  2118 ;; Defined at:
  2119 ;;		line 96 in file "I2C.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;Total ram usage:        0 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    5
  2140 ;; This function calls:
  2141 ;;		_I2C_Master_Wait
  2142 ;; This function is called by:
  2143 ;;		_I2C_init
  2144 ;;		_I2C_sendData
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           	psect	text11
  2149  0019E8                     __ptext11:
  2150                           	opt stack 0
  2151  0019E8                     _I2C_Master_Stop:
  2152                           	opt stack 24
  2153                           
  2154                           ;I2C.c: 105: I2C_Master_Wait();
  2155                           
  2156                           ;incstack = 0
  2157  0019E8  ECE2  F00C         	call	_I2C_Master_Wait	;wreg free
  2158                           
  2159                           ;I2C.c: 106: SSPCON2bits.PEN = 1;
  2160  0019EC  84C5               	bsf	4037,2,c	;volatile
  2161  0019EE  0012               	return		;funcret
  2162  0019F0                     __end_of_I2C_Master_Stop:
  2163                           	opt stack 0
  2164                           tblptru	equ	0xFF8
  2165                           tblptrh	equ	0xFF7
  2166                           tblptrl	equ	0xFF6
  2167                           tablat	equ	0xFF5
  2168                           prodh	equ	0xFF4
  2169                           prodl	equ	0xFF3
  2170                           intcon	equ	0xFF2
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           postdec1	equ	0xFE5
  2174                           fsr1l	equ	0xFE1
  2175                           postinc2	equ	0xFDE
  2176                           postdec2	equ	0xFDD
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181 ;; *************** function _I2C_Master_Start *****************
  2182 ;; Defined at:
  2183 ;;		line 70 in file "I2C.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;Total ram usage:        0 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    5
  2204 ;; This function calls:
  2205 ;;		_I2C_Master_Wait
  2206 ;; This function is called by:
  2207 ;;		_I2C_init
  2208 ;;		_I2C_sendData
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text12
  2213  0019F0                     __ptext12:
  2214                           	opt stack 0
  2215  0019F0                     _I2C_Master_Start:
  2216                           	opt stack 24
  2217                           
  2218                           ;I2C.c: 79: I2C_Master_Wait();
  2219                           
  2220                           ;incstack = 0
  2221  0019F0  ECE2  F00C         	call	_I2C_Master_Wait	;wreg free
  2222                           
  2223                           ;I2C.c: 80: SSPCON2bits.SEN = 1;
  2224  0019F4  80C5               	bsf	4037,0,c	;volatile
  2225  0019F6  0012               	return		;funcret
  2226  0019F8                     __end_of_I2C_Master_Start:
  2227                           	opt stack 0
  2228                           tblptru	equ	0xFF8
  2229                           tblptrh	equ	0xFF7
  2230                           tblptrl	equ	0xFF6
  2231                           tablat	equ	0xFF5
  2232                           prodh	equ	0xFF4
  2233                           prodl	equ	0xFF3
  2234                           intcon	equ	0xFF2
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           postdec1	equ	0xFE5
  2238                           fsr1l	equ	0xFE1
  2239                           postinc2	equ	0xFDE
  2240                           postdec2	equ	0xFDD
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _I2C_Master_Wait *****************
  2246 ;; Defined at:
  2247 ;;		line 52 in file "I2C.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;		None
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg, status,2, status,0
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;Total ram usage:        1 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    4
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_I2C_Master_Start
  2272 ;;		_I2C_Master_Stop
  2273 ;;		_I2C_Master_Write
  2274 ;;		_I2C_Master_RepeatedStart
  2275 ;;		_I2C_Master_Read
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text13
  2280  0019C4                     __ptext13:
  2281                           	opt stack 0
  2282  0019C4                     _I2C_Master_Wait:
  2283                           	opt stack 24
  2284                           
  2285                           ;I2C.c: 67: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2286                           
  2287                           ;incstack = 0
  2288  0019C4  B4C7               	btfsc	4039,2,c	;volatile
  2289  0019C6  D7FE               	goto	_I2C_Master_Wait
  2290  0019C8  CFC5 F032          	movff	4037,??_I2C_Master_Wait	;volatile
  2291  0019CC  0E1F               	movlw	31
  2292  0019CE  1632               	andwf	??_I2C_Master_Wait,f,c
  2293  0019D0  B4D8               	btfsc	status,2,c
  2294  0019D2  0012               	return	
  2295  0019D4  D7F7               	goto	_I2C_Master_Wait
  2296  0019D6                     __end_of_I2C_Master_Wait:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           prodh	equ	0xFF4
  2303                           prodl	equ	0xFF3
  2304                           intcon	equ	0xFF2
  2305                           postinc0	equ	0xFEE
  2306                           wreg	equ	0xFE8
  2307                           postdec1	equ	0xFE5
  2308                           fsr1l	equ	0xFE1
  2309                           postinc2	equ	0xFDE
  2310                           postdec2	equ	0xFDD
  2311                           fsr2h	equ	0xFDA
  2312                           fsr2l	equ	0xFD9
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _I2C_Master_Init *****************
  2316 ;; Defined at:
  2317 ;;		line 14 in file "I2C.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  clockFreq       4   49[COMRAM] const unsigned long 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg, status,2
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;Total ram usage:        4 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    4
  2338 ;; This function calls:
  2339 ;;		Nothing
  2340 ;; This function is called by:
  2341 ;;		_I2C_init
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text14
  2346  00195C                     __ptext14:
  2347                           	opt stack 0
  2348  00195C                     _I2C_Master_Init:
  2349                           	opt stack 25
  2350                           
  2351                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2352                           
  2353                           ;incstack = 0
  2354  00195C  9AC6               	bcf	4038,5,c	;volatile
  2355                           
  2356                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2357  00195E  8694               	bsf	3988,3,c	;volatile
  2358                           
  2359                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2360  001960  8894               	bsf	3988,4,c	;volatile
  2361                           
  2362                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2363  001962  0E80               	movlw	128
  2364  001964  6EC7               	movwf	4039,c	;volatile
  2365                           
  2366                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2367  001966  0E28               	movlw	40
  2368  001968  6EC6               	movwf	4038,c	;volatile
  2369                           
  2370                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2371  00196A  0E00               	movlw	0
  2372  00196C  6EC5               	movwf	4037,c	;volatile
  2373                           
  2374                           ;I2C.c: 49: SSPADD = 9600;
  2375  00196E  0E80               	movlw	128
  2376  001970  6EC8               	movwf	4040,c	;volatile
  2377  001972  0012               	return		;funcret
  2378  001974                     __end_of_I2C_Master_Init:
  2379                           	opt stack 0
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           postdec1	equ	0xFE5
  2390                           fsr1l	equ	0xFE1
  2391                           postinc2	equ	0xFDE
  2392                           postdec2	equ	0xFDD
  2393                           fsr2h	equ	0xFDA
  2394                           fsr2l	equ	0xFD9
  2395                           status	equ	0xFD8
  2396                           
  2397 ;; *************** function _interruptHandler *****************
  2398 ;; Defined at:
  2399 ;;		line 190 in file "main.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Temps:         19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;Total ram usage:       19 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    3
  2420 ;; This function calls:
  2421 ;;		i2_initLCD
  2422 ;;		i2_lcdInst
  2423 ;;		i2_printf
  2424 ;; This function is called by:
  2425 ;;		Interrupt level 2
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	intcode
  2430  000008                     __pintcode:
  2431                           	opt stack 0
  2432  000008                     _interruptHandler:
  2433                           	opt stack 24
  2434                           
  2435                           ;incstack = 0
  2436  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2437  00000A  ED37  F009         	call	int_func,f	;refresh shadow registers
  2438                           tblptru	equ	0xFF8
  2439                           tblptrh	equ	0xFF7
  2440                           tblptrl	equ	0xFF6
  2441                           tablat	equ	0xFF5
  2442                           prodh	equ	0xFF4
  2443                           prodl	equ	0xFF3
  2444                           intcon	equ	0xFF2
  2445                           postinc0	equ	0xFEE
  2446                           wreg	equ	0xFE8
  2447                           postdec1	equ	0xFE5
  2448                           fsr1l	equ	0xFE1
  2449                           postinc2	equ	0xFDE
  2450                           postdec2	equ	0xFDD
  2451                           fsr2h	equ	0xFDA
  2452                           fsr2l	equ	0xFD9
  2453                           status	equ	0xFD8
  2454                           
  2455                           	psect	intcode_body
  2456  00126E                     __pintcode_body:
  2457                           	opt stack 24
  2458  00126E                     int_func:
  2459                           	opt stack 24
  2460  00126E  0006               	pop		; remove dummy address from shadow register refresh
  2461  001270  CFFA F020          	movff	pclath,??_interruptHandler+1
  2462  001274  CFFB F021          	movff	pclatu,??_interruptHandler+2
  2463  001278  CFE9 F022          	movff	fsr0l,??_interruptHandler+3
  2464  00127C  CFEA F023          	movff	fsr0h,??_interruptHandler+4
  2465  001280  CFE1 F024          	movff	fsr1l,??_interruptHandler+5
  2466  001284  CFE2 F025          	movff	fsr1h,??_interruptHandler+6
  2467  001288  CFD9 F026          	movff	fsr2l,??_interruptHandler+7
  2468  00128C  CFDA F027          	movff	fsr2h,??_interruptHandler+8
  2469  001290  CFF3 F028          	movff	prodl,??_interruptHandler+9
  2470  001294  CFF4 F029          	movff	prodh,??_interruptHandler+10
  2471  001298  CFF6 F02A          	movff	tblptrl,??_interruptHandler+11
  2472  00129C  CFF7 F02B          	movff	tblptrh,??_interruptHandler+12
  2473  0012A0  CFF8 F02C          	movff	tblptru,??_interruptHandler+13
  2474  0012A4  CFF5 F02D          	movff	tablat,??_interruptHandler+14
  2475  0012A8  C04E  F02E         	movff	btemp,??_interruptHandler+15
  2476  0012AC  C04F  F02F         	movff	btemp+1,??_interruptHandler+16
  2477  0012B0  C050  F030         	movff	btemp+2,??_interruptHandler+17
  2478  0012B4  C051  F031         	movff	btemp+3,??_interruptHandler+18
  2479                           
  2480                           ;main.c: 202: if (RBIF){
  2481  0012B8  A0F2               	btfss	intcon,0,c	;volatile
  2482  0012BA  D063               	goto	i2l1919
  2483                           
  2484                           ;main.c: 210: TRISBbits.RB5 = 1;
  2485  0012BC  8A93               	bsf	3987,5,c	;volatile
  2486                           
  2487                           ;main.c: 211: B_input = PORTBbits.RB5;
  2488  0012BE  AA81               	btfss	3969,5,c	;volatile
  2489  0012C0  D003               	goto	i2u99_40
  2490  0012C2  6A1F               	clrf	??_interruptHandler& (0+255),c
  2491  0012C4  2A1F               	incf	??_interruptHandler& (0+255),f,c
  2492  0012C6  D001               	goto	i2u99_48
  2493  0012C8                     i2u99_40:
  2494  0012C8  6A1F               	clrf	??_interruptHandler& (0+255),c
  2495  0012CA                     i2u99_48:
  2496  0012CA  501F               	movf	??_interruptHandler,w,c
  2497  0012CC  6E4C               	movwf	_B_input,c
  2498  0012CE  6A4D               	clrf	_B_input+1,c
  2499                           
  2500                           ;main.c: 213: TRISBbits.RB4 = 1;
  2501  0012D0  8893               	bsf	3987,4,c	;volatile
  2502                           
  2503                           ;main.c: 214: N_input = PORTBbits.RB4;
  2504  0012D2  A881               	btfss	3969,4,c	;volatile
  2505  0012D4  D003               	goto	i2u100_40
  2506  0012D6  6A1F               	clrf	??_interruptHandler& (0+255),c
  2507  0012D8  2A1F               	incf	??_interruptHandler& (0+255),f,c
  2508  0012DA  D001               	goto	i2u100_48
  2509  0012DC                     i2u100_40:
  2510  0012DC  6A1F               	clrf	??_interruptHandler& (0+255),c
  2511  0012DE                     i2u100_48:
  2512  0012DE  501F               	movf	??_interruptHandler,w,c
  2513  0012E0  6E4A               	movwf	_N_input,c
  2514  0012E2  6A4B               	clrf	_N_input+1,c
  2515                           
  2516                           ;main.c: 216: TRISBbits.RB6 = 1;
  2517  0012E4  8C93               	bsf	3987,6,c	;volatile
  2518                           
  2519                           ;main.c: 217: S_input = PORTBbits.RB6;
  2520  0012E6  AC81               	btfss	3969,6,c	;volatile
  2521  0012E8  D003               	goto	i2u101_40
  2522  0012EA  6A1F               	clrf	??_interruptHandler& (0+255),c
  2523  0012EC  2A1F               	incf	??_interruptHandler& (0+255),f,c
  2524  0012EE  D001               	goto	i2u101_48
  2525  0012F0                     i2u101_40:
  2526  0012F0  6A1F               	clrf	??_interruptHandler& (0+255),c
  2527  0012F2                     i2u101_48:
  2528  0012F2  501F               	movf	??_interruptHandler,w,c
  2529  0012F4  6E48               	movwf	_S_input,c
  2530  0012F6  6A49               	clrf	_S_input+1,c
  2531                           
  2532                           ;main.c: 219: TRISBbits.RB7 = 1;
  2533  0012F8  8E93               	bsf	3987,7,c	;volatile
  2534                           
  2535                           ;main.c: 220: W_input = PORTBbits.RB7;
  2536  0012FA  AE81               	btfss	3969,7,c	;volatile
  2537  0012FC  D003               	goto	i2u102_40
  2538  0012FE  6A1F               	clrf	??_interruptHandler& (0+255),c
  2539  001300  2A1F               	incf	??_interruptHandler& (0+255),f,c
  2540  001302  D001               	goto	i2u102_48
  2541  001304                     i2u102_40:
  2542  001304  6A1F               	clrf	??_interruptHandler& (0+255),c
  2543  001306                     i2u102_48:
  2544  001306  501F               	movf	??_interruptHandler,w,c
  2545  001308  6E46               	movwf	_W_input,c
  2546  00130A  6A47               	clrf	_W_input+1,c
  2547                           
  2548                           ;main.c: 224: if (B_input == 0){
  2549  00130C  504C               	movf	_B_input,w,c
  2550  00130E  104D               	iorwf	_B_input+1,w,c
  2551  001310  A4D8               	btfss	status,2,c
  2552  001312  D002               	goto	i2l187
  2553                           
  2554                           ;main.c: 226: B_count++;
  2555  001314  4A42               	infsnz	_B_count,f,c
  2556  001316  2A43               	incf	_B_count+1,f,c
  2557  001318                     i2l187:
  2558                           
  2559                           ;main.c: 229: }
  2560                           ;main.c: 232: if (N_input == 0){
  2561  001318  504A               	movf	_N_input,w,c
  2562  00131A  104B               	iorwf	_N_input+1,w,c
  2563  00131C  A4D8               	btfss	status,2,c
  2564  00131E  D002               	goto	i2l188
  2565                           
  2566                           ;main.c: 233: N_count++;
  2567  001320  4A40               	infsnz	_N_count,f,c
  2568  001322  2A41               	incf	_N_count+1,f,c
  2569  001324                     i2l188:
  2570                           
  2571                           ;main.c: 234: }
  2572                           ;main.c: 236: if (S_input == 0){
  2573  001324  5048               	movf	_S_input,w,c
  2574  001326  1049               	iorwf	_S_input+1,w,c
  2575  001328  A4D8               	btfss	status,2,c
  2576  00132A  D002               	goto	i2l189
  2577                           
  2578                           ;main.c: 238: S_count++;
  2579  00132C  4A3E               	infsnz	_S_count,f,c
  2580  00132E  2A3F               	incf	_S_count+1,f,c
  2581  001330                     i2l189:
  2582                           
  2583                           ;main.c: 241: }
  2584                           ;main.c: 243: if (W_input == 0){
  2585  001330  5046               	movf	_W_input,w,c
  2586  001332  1047               	iorwf	_W_input+1,w,c
  2587  001334  A4D8               	btfss	status,2,c
  2588  001336  D002               	goto	i2l190
  2589                           
  2590                           ;main.c: 245: W_count++;
  2591  001338  4A3C               	infsnz	_W_count,f,c
  2592  00133A  2A3D               	incf	_W_count+1,f,c
  2593  00133C                     i2l190:
  2594                           
  2595                           ;main.c: 248: }
  2596                           ;main.c: 250: initLCD();
  2597  00133C  EC02  F00C         	call	i2_initLCD	;wreg free
  2598                           
  2599                           ;main.c: 251: printf("B:%d,N:%d,S:%d,W:%d",B_count,N_count,S_count,W_count);
  2600  001340  0E11               	movlw	low STR_1
  2601  001342  6E0D               	movwf	i2printf@f,c
  2602  001344  0E10               	movlw	high STR_1
  2603  001346  6E0E               	movwf	i2printf@f+1,c
  2604  001348  C042  F00F         	movff	_B_count,?i2_printf+2
  2605  00134C  C043  F010         	movff	_B_count+1,?i2_printf+3
  2606  001350  C040  F011         	movff	_N_count,?i2_printf+4
  2607  001354  C041  F012         	movff	_N_count+1,?i2_printf+5
  2608  001358  C03E  F013         	movff	_S_count,?i2_printf+6
  2609  00135C  C03F  F014         	movff	_S_count+1,?i2_printf+7
  2610  001360  C03C  F015         	movff	_W_count,?i2_printf+8
  2611  001364  C03D  F016         	movff	_W_count+1,?i2_printf+9
  2612  001368  EC7D  F00A         	call	i2_printf	;wreg free
  2613                           
  2614                           ;main.c: 252: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2615  00136C  0E80               	movlw	128
  2616  00136E  ECD8  F00C         	call	i2_lcdInst
  2617  001372  0E34               	movlw	52
  2618  001374  6E1F               	movwf	??_interruptHandler& (0+255),c
  2619  001376  0EF2               	movlw	242
  2620  001378                     i2u135_47:
  2621  001378  2EE8               	decfsz	wreg,f,c
  2622  00137A  D7FE               	bra	i2u135_47
  2623  00137C  2E1F               	decfsz	??_interruptHandler& (0+255),f,c
  2624  00137E  D7FC               	bra	i2u135_47
  2625                           
  2626                           ;main.c: 255: RBIF = 0;
  2627  001380  90F2               	bcf	intcon,0,c	;volatile
  2628  001382                     i2l1919:
  2629                           
  2630                           ;main.c: 256: return;
  2631  001382  C031  F051         	movff	??_interruptHandler+18,btemp+3
  2632  001386  C030  F050         	movff	??_interruptHandler+17,btemp+2
  2633  00138A  C02F  F04F         	movff	??_interruptHandler+16,btemp+1
  2634  00138E  C02E  F04E         	movff	??_interruptHandler+15,btemp
  2635  001392  C02D  FFF5         	movff	??_interruptHandler+14,tablat
  2636  001396  C02C  FFF8         	movff	??_interruptHandler+13,tblptru
  2637  00139A  C02B  FFF7         	movff	??_interruptHandler+12,tblptrh
  2638  00139E  C02A  FFF6         	movff	??_interruptHandler+11,tblptrl
  2639  0013A2  C029  FFF4         	movff	??_interruptHandler+10,prodh
  2640  0013A6  C028  FFF3         	movff	??_interruptHandler+9,prodl
  2641  0013AA  C027  FFDA         	movff	??_interruptHandler+8,fsr2h
  2642  0013AE  C026  FFD9         	movff	??_interruptHandler+7,fsr2l
  2643  0013B2  C025  FFE2         	movff	??_interruptHandler+6,fsr1h
  2644  0013B6  C024  FFE1         	movff	??_interruptHandler+5,fsr1l
  2645  0013BA  C023  FFEA         	movff	??_interruptHandler+4,fsr0h
  2646  0013BE  C022  FFE9         	movff	??_interruptHandler+3,fsr0l
  2647  0013C2  C021  FFFB         	movff	??_interruptHandler+2,pclatu
  2648  0013C6  C020  FFFA         	movff	??_interruptHandler+1,pclath
  2649  0013CA  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2650  0013CC  0011               	retfie		f
  2651  0013CE                     __end_of_interruptHandler:
  2652                           	opt stack 0
  2653                           pclatu	equ	0xFFB
  2654                           pclath	equ	0xFFA
  2655                           tblptru	equ	0xFF8
  2656                           tblptrh	equ	0xFF7
  2657                           tblptrl	equ	0xFF6
  2658                           tablat	equ	0xFF5
  2659                           prodh	equ	0xFF4
  2660                           prodl	equ	0xFF3
  2661                           intcon	equ	0xFF2
  2662                           postinc0	equ	0xFEE
  2663                           fsr0h	equ	0xFEA
  2664                           fsr0l	equ	0xFE9
  2665                           wreg	equ	0xFE8
  2666                           postdec1	equ	0xFE5
  2667                           fsr1h	equ	0xFE2
  2668                           fsr1l	equ	0xFE1
  2669                           postinc2	equ	0xFDE
  2670                           postdec2	equ	0xFDD
  2671                           fsr2h	equ	0xFDA
  2672                           fsr2l	equ	0xFD9
  2673                           status	equ	0xFD8
  2674                           
  2675 ;; *************** function i2_printf *****************
  2676 ;; Defined at:
  2677 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2680 ;;		 -> STR_7(20), STR_6(20), STR_5(20), STR_4(20), 
  2681 ;;		 -> STR_3(20), STR_2(20), STR_1(20), 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  printf          4    0        struct .
  2684 ;;  printf          3    0        PTR const unsigned char 
  2685 ;;  printf          2   27[COMRAM] unsigned int 
  2686 ;;  printf          2   23[COMRAM] PTR void [1]
  2687 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2688 ;;  printf          2    0        unsigned int 
  2689 ;;  printf          1   29[COMRAM] char 
  2690 ;;  printf          1   26[COMRAM] char 
  2691 ;;  printf          1   25[COMRAM] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  2   12[COMRAM] int 
  2694 ;; Registers used:
  2695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2701 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;Total ram usage:       18 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    2
  2708 ;; This function calls:
  2709 ;;		i2___lwdiv
  2710 ;;		i2___lwmod
  2711 ;;		i2_putch
  2712 ;; This function is called by:
  2713 ;;		_interruptHandler
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text16
  2718  0014FA                     __ptext16:
  2719                           	opt stack 0
  2720  0014FA                     i2_printf:
  2721                           	opt stack 24
  2722                           
  2723                           ;doprnt.c: 466: va_list ap;
  2724                           ;doprnt.c: 499: signed char c;
  2725                           ;doprnt.c: 506: signed char prec;
  2726                           ;doprnt.c: 508: unsigned char flag;
  2727                           ;doprnt.c: 523: union {
  2728                           ;doprnt.c: 524: unsigned long vd;
  2729                           ;doprnt.c: 525: double integ;
  2730                           ;doprnt.c: 526: } tmpval;
  2731                           ;doprnt.c: 528: unsigned int val;
  2732                           ;doprnt.c: 529: unsigned len;
  2733                           ;doprnt.c: 530: const char * cp;
  2734                           ;doprnt.c: 533: *ap = __va_start();
  2735                           
  2736                           ;incstack = 0
  2737  0014FA  0E0F               	movlw	low (?i2_printf+2)
  2738  0014FC  6E18               	movwf	i2printf@ap,c
  2739  0014FE  0E00               	movlw	high (?i2_printf+2)
  2740  001500  6E19               	movwf	i2printf@ap+1,c
  2741                           
  2742                           ;doprnt.c: 536: while(c = *f++) {
  2743  001502  D07D               	goto	i2u86_40
  2744  001504                     
  2745                           ;doprnt.c: 538: if(c != '%')
  2746  001504  0E25               	movlw	37
  2747  001506  181E               	xorwf	i2printf@c,w,c
  2748  001508  B4D8               	btfsc	status,2,c
  2749  00150A  D004               	goto	i2l256
  2750                           
  2751                           ;doprnt.c: 540: {
  2752                           ;doprnt.c: 541: (putch(c) );
  2753  00150C  501E               	movf	i2printf@c,w,c
  2754  00150E  ECCE  F00C         	call	i2_putch
  2755                           
  2756                           ;doprnt.c: 542: continue;
  2757  001512  D075               	goto	i2u86_40
  2758  001514                     i2l256:
  2759                           
  2760                           ;doprnt.c: 543: }
  2761                           ;doprnt.c: 548: flag = 0;
  2762  001514  0E00               	movlw	0
  2763  001516  6E1A               	movwf	i2printf@flag,c
  2764                           
  2765                           ;doprnt.c: 822: }
  2766                           
  2767                           ;doprnt.c: 813: continue;
  2768                           
  2769                           ;doprnt.c: 802: default:
  2770                           
  2771                           ;doprnt.c: 698: case 'i':
  2772                           ;doprnt.c: 699: break;
  2773                           
  2774                           ;doprnt.c: 697: case 'd':
  2775                           
  2776                           ;doprnt.c: 638: goto alldone;
  2777                           
  2778                           ;doprnt.c: 637: case 0:
  2779                           
  2780                           ;doprnt.c: 635: switch(c = *f++) {
  2781  001518  C00D  FFF6         	movff	i2printf@f,tblptrl
  2782  00151C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2783  001520  4A0D               	infsnz	i2printf@f,f,c
  2784  001522  2A0E               	incf	i2printf@f+1,f,c
  2785  001524                     	if	0	;tblptru may be non-zero
  2786  001524                     	endif
  2787  001524                     	if	0	;tblptru may be non-zero
  2788  001524                     	endif
  2789  001524  0008               	tblrd		*
  2790  001526  CFF5 F01E          	movff	tablat,i2printf@c
  2791  00152A  501E               	movf	i2printf@c,w,c
  2792                           
  2793                           ; Switch size 1, requested type "space"
  2794                           ; Number of cases is 3, Range of values is 0 to 105
  2795                           ; switch strategies available:
  2796                           ; Name         Instructions Cycles
  2797                           ; simple_byte           10     6 (average)
  2798                           ;	Chosen strategy is simple_byte
  2799  00152C  0A00               	xorlw	0	; case 0
  2800  00152E  B4D8               	btfsc	status,2,c
  2801  001530  0012               	return	
  2802  001532  0A64               	xorlw	100	; case 100
  2803  001534  B4D8               	btfsc	status,2,c
  2804  001536  D003               	goto	i2l262
  2805  001538  0A0D               	xorlw	13	; case 105
  2806  00153A  A4D8               	btfss	status,2,c
  2807  00153C  D060               	goto	i2u86_40
  2808  00153E                     i2l262:
  2809                           
  2810                           ;doprnt.c: 1253: {
  2811                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2812  00153E  C018  FFD9         	movff	i2printf@ap,fsr2l
  2813  001542  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  2814  001546  CFDE F01C          	movff	postinc2,i2printf@val
  2815  00154A  CFDD F01D          	movff	postdec2,i2printf@val+1
  2816  00154E  0E02               	movlw	2
  2817  001550  2618               	addwf	i2printf@ap,f,c
  2818  001552  0E00               	movlw	0
  2819  001554  2219               	addwfc	i2printf@ap+1,f,c
  2820                           
  2821                           ;doprnt.c: 1261: if((int)val < 0) {
  2822  001556  AE1D               	btfss	i2printf@val+1,7,c
  2823  001558  D006               	goto	i2l264
  2824                           
  2825                           ;doprnt.c: 1262: flag |= 0x03;
  2826  00155A  0E03               	movlw	3
  2827  00155C  121A               	iorwf	i2printf@flag,f,c
  2828                           
  2829                           ;doprnt.c: 1263: val = -val;
  2830  00155E  6C1C               	negf	i2printf@val,c
  2831  001560  1E1D               	comf	i2printf@val+1,f,c
  2832  001562  B0D8               	btfsc	status,0,c
  2833  001564  2A1D               	incf	i2printf@val+1,f,c
  2834  001566                     i2l264:
  2835                           
  2836                           ;doprnt.c: 1264: }
  2837                           ;doprnt.c: 1266: }
  2838                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2839  001566  0E01               	movlw	1
  2840  001568  6E1E               	movwf	i2printf@c,c
  2841  00156A                     i2l1727:
  2842  00156A  0E05               	movlw	5
  2843  00156C  181E               	xorwf	i2printf@c,w,c
  2844  00156E  B4D8               	btfsc	status,2,c
  2845  001570  D012               	goto	i2u84_40
  2846                           
  2847                           ;doprnt.c: 1306: if(val < dpowers[c])
  2848  001572  501E               	movf	i2printf@c,w,c
  2849  001574  0D02               	mullw	2
  2850  001576  0E01               	movlw	low _dpowers
  2851  001578  24F3               	addwf	prodl,w,c
  2852  00157A  6EF6               	movwf	tblptrl,c
  2853  00157C  0E10               	movlw	high _dpowers
  2854  00157E  20F4               	addwfc	prodh,w,c
  2855  001580  6EF7               	movwf	tblptrh,c
  2856  001582                     	if	0	;There are less than 3 active tblptr bytes
  2857  001582                     	endif
  2858  001582  0009               	tblrd		*+
  2859  001584  50F5               	movf	tablat,w,c
  2860  001586  5C1C               	subwf	i2printf@val,w,c
  2861  001588  0009               	tblrd		*+
  2862  00158A  50F5               	movf	tablat,w,c
  2863  00158C  581D               	subwfb	i2printf@val+1,w,c
  2864  00158E  A0D8               	btfss	status,0,c
  2865  001590  D002               	goto	i2u84_40
  2866                           
  2867                           ;doprnt.c: 1307: break;
  2868  001592  2A1E               	incf	i2printf@c,f,c
  2869  001594  D7EA               	goto	i2l1727
  2870  001596                     i2u84_40:
  2871                           
  2872                           ;doprnt.c: 1422: {
  2873                           ;doprnt.c: 1438: if(flag & 0x03)
  2874  001596  C01A  F017         	movff	i2printf@flag,??i2_printf
  2875  00159A  0E03               	movlw	3
  2876  00159C  1617               	andwf	??i2_printf,f,c
  2877  00159E  B4D8               	btfsc	status,2,c
  2878  0015A0  D003               	goto	i2l268
  2879                           
  2880                           ;doprnt.c: 1439: (putch('-') );
  2881  0015A2  0E2D               	movlw	45
  2882  0015A4  ECCE  F00C         	call	i2_putch
  2883  0015A8                     i2l268:
  2884                           
  2885                           ;doprnt.c: 1469: }
  2886                           ;doprnt.c: 1472: prec = c;
  2887  0015A8  C01E  F01B         	movff	i2printf@c,i2printf@prec
  2888                           
  2889                           ;doprnt.c: 1474: while(prec--) {
  2890  0015AC  D024               	goto	i2l269
  2891  0015AE                     
  2892                           ;doprnt.c: 1478: {
  2893                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2894  0015AE  501B               	movf	i2printf@prec,w,c
  2895  0015B0  0D02               	mullw	2
  2896  0015B2  0E01               	movlw	low _dpowers
  2897  0015B4  24F3               	addwf	prodl,w,c
  2898  0015B6  6EF6               	movwf	tblptrl,c
  2899  0015B8  0E10               	movlw	high _dpowers
  2900  0015BA  20F4               	addwfc	prodh,w,c
  2901  0015BC  6EF7               	movwf	tblptrh,c
  2902  0015BE                     	if	0	;There are less than 3 active tblptr bytes
  2903  0015BE                     	endif
  2904  0015BE  0009               	tblrd		*+
  2905  0015C0  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  2906  0015C4  000A               	tblrd		*-
  2907  0015C6  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  2908  0015CA  C01C  F001         	movff	i2printf@val,i2___lwdiv@dividend
  2909  0015CE  C01D  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  2910  0015D2  ECB3  F00B         	call	i2___lwdiv	;wreg free
  2911  0015D6  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  2912  0015DA  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  2913  0015DE  0E00               	movlw	0
  2914  0015E0  6E0B               	movwf	i2___lwmod@divisor+1,c
  2915  0015E2  0E0A               	movlw	10
  2916  0015E4  6E0A               	movwf	i2___lwmod@divisor,c
  2917  0015E6  EC4A  F00C         	call	i2___lwmod	;wreg free
  2918  0015EA  5008               	movf	?i2___lwmod,w,c
  2919  0015EC  0F30               	addlw	48
  2920  0015EE  6E1E               	movwf	i2printf@c,c
  2921                           
  2922                           ;doprnt.c: 1523: }
  2923                           ;doprnt.c: 1524: (putch(c) );
  2924  0015F0  501E               	movf	i2printf@c,w,c
  2925  0015F2  ECCE  F00C         	call	i2_putch
  2926  0015F6                     i2l269:
  2927  0015F6  061B               	decf	i2printf@prec,f,c
  2928  0015F8  281B               	incf	i2printf@prec,w,c
  2929  0015FA  A4D8               	btfss	status,2,c
  2930  0015FC  D7D8               	goto	i2l270
  2931  0015FE                     i2u86_40:
  2932  0015FE  C00D  FFF6         	movff	i2printf@f,tblptrl
  2933  001602  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  2934  001606  4A0D               	infsnz	i2printf@f,f,c
  2935  001608  2A0E               	incf	i2printf@f+1,f,c
  2936  00160A                     	if	0	;tblptru may be non-zero
  2937  00160A                     	endif
  2938  00160A                     	if	0	;tblptru may be non-zero
  2939  00160A                     	endif
  2940  00160A  0008               	tblrd		*
  2941  00160C  CFF5 F01E          	movff	tablat,i2printf@c
  2942  001610  501E               	movf	i2printf@c,w,c
  2943  001612  B4D8               	btfsc	status,2,c
  2944  001614  0012               	return	
  2945  001616  D776               	goto	i2l255
  2946  001618                     __end_ofi2_printf:
  2947                           	opt stack 0
  2948                           pclatu	equ	0xFFB
  2949                           pclath	equ	0xFFA
  2950                           tblptru	equ	0xFF8
  2951                           tblptrh	equ	0xFF7
  2952                           tblptrl	equ	0xFF6
  2953                           tablat	equ	0xFF5
  2954                           prodh	equ	0xFF4
  2955                           prodl	equ	0xFF3
  2956                           intcon	equ	0xFF2
  2957                           postinc0	equ	0xFEE
  2958                           fsr0h	equ	0xFEA
  2959                           fsr0l	equ	0xFE9
  2960                           wreg	equ	0xFE8
  2961                           postdec1	equ	0xFE5
  2962                           fsr1h	equ	0xFE2
  2963                           fsr1l	equ	0xFE1
  2964                           postinc2	equ	0xFDE
  2965                           postdec2	equ	0xFDD
  2966                           fsr2h	equ	0xFDA
  2967                           fsr2l	equ	0xFD9
  2968                           status	equ	0xFD8
  2969                           
  2970 ;; *************** function i2_putch *****************
  2971 ;; Defined at:
  2972 ;;		line 24 in file "lcd.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  data            1    wreg     unsigned char 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  data            1    2[COMRAM] unsigned char 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg, status,2, status,0, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;Total ram usage:        1 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    1
  2993 ;; This function calls:
  2994 ;;		i2_lcdNibble
  2995 ;; This function is called by:
  2996 ;;		i2_printf
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text17
  3001  00199C                     __ptext17:
  3002                           	opt stack 0
  3003  00199C                     i2_putch:
  3004                           	opt stack 24
  3005                           
  3006                           ;incstack = 0
  3007                           ;i2putch@data stored from wreg
  3008  00199C  6E03               	movwf	i2putch@data,c
  3009                           
  3010                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3011  00199E  848C               	bsf	3980,2,c	;volatile
  3012                           
  3013                           ;lcd.c: 33: lcdNibble(data);
  3014  0019A0  5003               	movf	i2putch@data,w,c
  3015  0019A2  EC4B  F00B         	call	i2_lcdNibble
  3016                           
  3017                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3018  0019A6  0EA0               	movlw	160
  3019  0019A8                     i2u136_47:
  3020  0019A8  D000               	nop2	
  3021  0019AA  2EE8               	decfsz	wreg,f,c
  3022  0019AC  D7FD               	bra	i2u136_47
  3023  0019AE  0012               	return		;funcret
  3024  0019B0                     __end_ofi2_putch:
  3025                           	opt stack 0
  3026                           pclatu	equ	0xFFB
  3027                           pclath	equ	0xFFA
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodh	equ	0xFF4
  3033                           prodl	equ	0xFF3
  3034                           intcon	equ	0xFF2
  3035                           postinc0	equ	0xFEE
  3036                           fsr0h	equ	0xFEA
  3037                           fsr0l	equ	0xFE9
  3038                           wreg	equ	0xFE8
  3039                           postdec1	equ	0xFE5
  3040                           fsr1h	equ	0xFE2
  3041                           fsr1l	equ	0xFE1
  3042                           postinc2	equ	0xFDE
  3043                           postdec2	equ	0xFDD
  3044                           fsr2h	equ	0xFDA
  3045                           fsr2l	equ	0xFD9
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function i2___lwmod *****************
  3049 ;; Defined at:
  3050 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  dividend        2    7[COMRAM] unsigned int 
  3053 ;;  divisor         2    9[COMRAM] unsigned int 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  __lwmod         1   11[COMRAM] unsigned char 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  2    7[COMRAM] unsigned int 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2, status,0
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3065 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;Total ram usage:        5 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		i2_printf
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text18
  3079  001894                     __ptext18:
  3080                           	opt stack 0
  3081  001894                     i2___lwmod:
  3082                           	opt stack 25
  3083                           
  3084                           ;incstack = 0
  3085  001894  500A               	movf	i2___lwmod@divisor,w,c
  3086  001896  100B               	iorwf	i2___lwmod@divisor+1,w,c
  3087  001898  B4D8               	btfsc	status,2,c
  3088  00189A  D018               	goto	i2l692
  3089  00189C  0E01               	movlw	1
  3090  00189E  6E0C               	movwf	i2___lwmod@counter,c
  3091  0018A0  D004               	goto	i2l687
  3092  0018A2  90D8               	bcf	status,0,c
  3093  0018A4  360A               	rlcf	i2___lwmod@divisor,f,c
  3094  0018A6  360B               	rlcf	i2___lwmod@divisor+1,f,c
  3095  0018A8  2A0C               	incf	i2___lwmod@counter,f,c
  3096  0018AA                     i2l687:
  3097  0018AA  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  3098  0018AC  D7FA               	goto	i2l688
  3099  0018AE                     i2u70_40:
  3100  0018AE  500A               	movf	i2___lwmod@divisor,w,c
  3101  0018B0  5C08               	subwf	i2___lwmod@dividend,w,c
  3102  0018B2  500B               	movf	i2___lwmod@divisor+1,w,c
  3103  0018B4  5809               	subwfb	i2___lwmod@dividend+1,w,c
  3104  0018B6  A0D8               	btfss	status,0,c
  3105  0018B8  D004               	goto	i2l691
  3106  0018BA  500A               	movf	i2___lwmod@divisor,w,c
  3107  0018BC  5E08               	subwf	i2___lwmod@dividend,f,c
  3108  0018BE  500B               	movf	i2___lwmod@divisor+1,w,c
  3109  0018C0  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  3110  0018C2                     i2l691:
  3111  0018C2  90D8               	bcf	status,0,c
  3112  0018C4  320B               	rrcf	i2___lwmod@divisor+1,f,c
  3113  0018C6  320A               	rrcf	i2___lwmod@divisor,f,c
  3114  0018C8  2E0C               	decfsz	i2___lwmod@counter,f,c
  3115  0018CA  D7F1               	goto	i2u70_40
  3116  0018CC                     i2l692:
  3117  0018CC  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  3118  0018D0  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  3119  0018D4  0012               	return		;funcret
  3120  0018D6                     __end_ofi2___lwmod:
  3121                           	opt stack 0
  3122                           pclatu	equ	0xFFB
  3123                           pclath	equ	0xFFA
  3124                           tblptru	equ	0xFF8
  3125                           tblptrh	equ	0xFF7
  3126                           tblptrl	equ	0xFF6
  3127                           tablat	equ	0xFF5
  3128                           prodh	equ	0xFF4
  3129                           prodl	equ	0xFF3
  3130                           intcon	equ	0xFF2
  3131                           postinc0	equ	0xFEE
  3132                           fsr0h	equ	0xFEA
  3133                           fsr0l	equ	0xFE9
  3134                           wreg	equ	0xFE8
  3135                           postdec1	equ	0xFE5
  3136                           fsr1h	equ	0xFE2
  3137                           fsr1l	equ	0xFE1
  3138                           postinc2	equ	0xFDE
  3139                           postdec2	equ	0xFDD
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function i2___lwdiv *****************
  3145 ;; Defined at:
  3146 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  dividend        2    0[COMRAM] unsigned int 
  3149 ;;  divisor         2    2[COMRAM] unsigned int 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3152 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  2    0[COMRAM] unsigned int 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2, status,0
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;Total ram usage:        7 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		i2_printf
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text19
  3176  001766                     __ptext19:
  3177                           	opt stack 0
  3178  001766                     i2___lwdiv:
  3179                           	opt stack 25
  3180                           
  3181                           ;incstack = 0
  3182  001766  0E00               	movlw	0
  3183  001768  6E06               	movwf	i2___lwdiv@quotient+1,c
  3184  00176A  0E00               	movlw	0
  3185  00176C  6E05               	movwf	i2___lwdiv@quotient,c
  3186  00176E  5003               	movf	i2___lwdiv@divisor,w,c
  3187  001770  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  3188  001772  B4D8               	btfsc	status,2,c
  3189  001774  D01C               	goto	i2l682
  3190  001776  0E01               	movlw	1
  3191  001778  6E07               	movwf	i2___lwdiv@counter,c
  3192  00177A  D004               	goto	i2l677
  3193  00177C  90D8               	bcf	status,0,c
  3194  00177E  3603               	rlcf	i2___lwdiv@divisor,f,c
  3195  001780  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  3196  001782  2A07               	incf	i2___lwdiv@counter,f,c
  3197  001784                     i2l677:
  3198  001784  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  3199  001786  D7FA               	goto	i2l678
  3200  001788                     i2u67_40:
  3201  001788  90D8               	bcf	status,0,c
  3202  00178A  3605               	rlcf	i2___lwdiv@quotient,f,c
  3203  00178C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  3204  00178E  5003               	movf	i2___lwdiv@divisor,w,c
  3205  001790  5C01               	subwf	i2___lwdiv@dividend,w,c
  3206  001792  5004               	movf	i2___lwdiv@divisor+1,w,c
  3207  001794  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  3208  001796  A0D8               	btfss	status,0,c
  3209  001798  D005               	goto	i2l681
  3210  00179A  5003               	movf	i2___lwdiv@divisor,w,c
  3211  00179C  5E01               	subwf	i2___lwdiv@dividend,f,c
  3212  00179E  5004               	movf	i2___lwdiv@divisor+1,w,c
  3213  0017A0  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  3214  0017A2  8005               	bsf	i2___lwdiv@quotient,0,c
  3215  0017A4                     i2l681:
  3216  0017A4  90D8               	bcf	status,0,c
  3217  0017A6  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  3218  0017A8  3203               	rrcf	i2___lwdiv@divisor,f,c
  3219  0017AA  2E07               	decfsz	i2___lwdiv@counter,f,c
  3220  0017AC  D7ED               	goto	i2u67_40
  3221  0017AE                     i2l682:
  3222  0017AE  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  3223  0017B2  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  3224  0017B6  0012               	return		;funcret
  3225  0017B8                     __end_ofi2___lwdiv:
  3226                           	opt stack 0
  3227                           pclatu	equ	0xFFB
  3228                           pclath	equ	0xFFA
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           intcon	equ	0xFF2
  3236                           postinc0	equ	0xFEE
  3237                           fsr0h	equ	0xFEA
  3238                           fsr0l	equ	0xFE9
  3239                           wreg	equ	0xFE8
  3240                           postdec1	equ	0xFE5
  3241                           fsr1h	equ	0xFE2
  3242                           fsr1l	equ	0xFE1
  3243                           postinc2	equ	0xFDE
  3244                           postdec2	equ	0xFDD
  3245                           fsr2h	equ	0xFDA
  3246                           fsr2l	equ	0xFD9
  3247                           status	equ	0xFD8
  3248                           
  3249 ;; *************** function i2_initLCD *****************
  3250 ;; Defined at:
  3251 ;;		line 60 in file "lcd.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;		None
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;		None
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, status,2, status,0, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;Total ram usage:        1 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    2
  3272 ;; This function calls:
  3273 ;;		i2_lcdInst
  3274 ;; This function is called by:
  3275 ;;		_interruptHandler
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text20
  3280  001804                     __ptext20:
  3281                           	opt stack 0
  3282  001804                     i2_initLCD:
  3283                           	opt stack 24
  3284                           
  3285                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  3286                           
  3287                           ;incstack = 0
  3288  001804  0E9C               	movlw	156
  3289  001806  6E04               	movwf	??i2_initLCD& (0+255),c
  3290  001808  0ED7               	movlw	215
  3291  00180A                     i2u137_47:
  3292  00180A  2EE8               	decfsz	wreg,f,c
  3293  00180C  D7FE               	bra	i2u137_47
  3294  00180E  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3295  001810  D7FC               	bra	i2u137_47
  3296  001812  F000               	nop	
  3297                           
  3298                           ;lcd.c: 69: lcdInst(0b00110011);
  3299  001814  0E33               	movlw	51
  3300  001816  ECD8  F00C         	call	i2_lcdInst
  3301                           
  3302                           ;lcd.c: 70: lcdInst(0b00110010);
  3303  00181A  0E32               	movlw	50
  3304  00181C  ECD8  F00C         	call	i2_lcdInst
  3305                           
  3306                           ;lcd.c: 71: lcdInst(0b00101000);
  3307  001820  0E28               	movlw	40
  3308  001822  ECD8  F00C         	call	i2_lcdInst
  3309                           
  3310                           ;lcd.c: 72: lcdInst(0b00001111);
  3311  001826  0E0F               	movlw	15
  3312  001828  ECD8  F00C         	call	i2_lcdInst
  3313                           
  3314                           ;lcd.c: 73: lcdInst(0b00000110);
  3315  00182C  0E06               	movlw	6
  3316  00182E  ECD8  F00C         	call	i2_lcdInst
  3317                           
  3318                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  3319  001832  0E01               	movlw	1
  3320  001834  ECD8  F00C         	call	i2_lcdInst
  3321  001838  0E9C               	movlw	156
  3322  00183A  6E04               	movwf	??i2_initLCD& (0+255),c
  3323  00183C  0ED7               	movlw	215
  3324  00183E                     i2u138_47:
  3325  00183E  2EE8               	decfsz	wreg,f,c
  3326  001840  D7FE               	bra	i2u138_47
  3327  001842  2E04               	decfsz	??i2_initLCD& (0+255),f,c
  3328  001844  D7FC               	bra	i2u138_47
  3329  001846  F000               	nop	
  3330                           
  3331                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3332  001848  0E0F               	movlw	15
  3333  00184A  ECD8  F00C         	call	i2_lcdInst
  3334  00184E  0012               	return		;funcret
  3335  001850                     __end_ofi2_initLCD:
  3336                           	opt stack 0
  3337                           pclatu	equ	0xFFB
  3338                           pclath	equ	0xFFA
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           postinc0	equ	0xFEE
  3347                           fsr0h	equ	0xFEA
  3348                           fsr0l	equ	0xFE9
  3349                           wreg	equ	0xFE8
  3350                           postdec1	equ	0xFE5
  3351                           fsr1h	equ	0xFE2
  3352                           fsr1l	equ	0xFE1
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function i2_lcdInst *****************
  3360 ;; Defined at:
  3361 ;;		line 11 in file "lcd.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  data            1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  data            1    2[COMRAM] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      void 
  3368 ;; Registers used:
  3369 ;;		wreg, status,2, status,0, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;Total ram usage:        1 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    1
  3382 ;; This function calls:
  3383 ;;		i2_lcdNibble
  3384 ;; This function is called by:
  3385 ;;		_interruptHandler
  3386 ;;		i2_initLCD
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text21
  3391  0019B0                     __ptext21:
  3392                           	opt stack 0
  3393  0019B0                     i2_lcdInst:
  3394                           	opt stack 25
  3395                           
  3396                           ;incstack = 0
  3397                           ;i2lcdInst@data stored from wreg
  3398  0019B0  6E03               	movwf	i2lcdInst@data,c
  3399                           
  3400                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  3401  0019B2  948C               	bcf	3980,2,c	;volatile
  3402                           
  3403                           ;lcd.c: 20: lcdNibble(data);
  3404  0019B4  5003               	movf	i2lcdInst@data,w,c
  3405  0019B6  EC4B  F00B         	call	i2_lcdNibble
  3406                           
  3407                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3408  0019BA  0EA0               	movlw	160
  3409  0019BC                     i2u139_47:
  3410  0019BC  D000               	nop2	
  3411  0019BE  2EE8               	decfsz	wreg,f,c
  3412  0019C0  D7FD               	bra	i2u139_47
  3413  0019C2  0012               	return		;funcret
  3414  0019C4                     __end_ofi2_lcdInst:
  3415                           	opt stack 0
  3416                           pclatu	equ	0xFFB
  3417                           pclath	equ	0xFFA
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           intcon	equ	0xFF2
  3425                           postinc0	equ	0xFEE
  3426                           fsr0h	equ	0xFEA
  3427                           fsr0l	equ	0xFE9
  3428                           wreg	equ	0xFE8
  3429                           postdec1	equ	0xFE5
  3430                           fsr1h	equ	0xFE2
  3431                           fsr1l	equ	0xFE1
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function i2_lcdNibble *****************
  3439 ;; Defined at:
  3440 ;;		line 37 in file "lcd.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  data            1    wreg     unsigned char 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  data            1    1[COMRAM] unsigned char 
  3445 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;Total ram usage:        2 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		i2_lcdInst
  3465 ;;		i2_putch
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text22
  3470  001696                     __ptext22:
  3471                           	opt stack 0
  3472  001696                     i2_lcdNibble:
  3473                           	opt stack 24
  3474                           
  3475                           ;incstack = 0
  3476                           ;i2lcdNibble@data stored from wreg
  3477  001696  6E02               	movwf	i2lcdNibble@data,c
  3478                           
  3479                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3480  001698  5002               	movf	i2lcdNibble@data,w,c
  3481  00169A  0BF0               	andlw	240
  3482  00169C  6E01               	movwf	i2lcdNibble@temp,c
  3483                           
  3484                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3485  00169E  508C               	movf	3980,w,c	;volatile
  3486  0016A0  0B0F               	andlw	15
  3487  0016A2  6E8C               	movwf	3980,c	;volatile
  3488                           
  3489                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3490  0016A4  5001               	movf	i2lcdNibble@temp,w,c
  3491  0016A6  108C               	iorwf	3980,w,c	;volatile
  3492  0016A8  6E8C               	movwf	3980,c	;volatile
  3493                           
  3494                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3495  0016AA  0E00               	movlw	0
  3496  0016AC  BEF2               	btfsc	intcon,7,c	;volatile
  3497  0016AE  0E01               	movlw	1
  3498  0016B0  6E45               	movwf	_LCDinterruptState,c
  3499  0016B2  9EF2               	bcf	intcon,7,c	;volatile
  3500  0016B4  868C               	bsf	3980,3,c	;volatile
  3501  0016B6  0E42               	movlw	66
  3502  0016B8                     i2u140_47:
  3503  0016B8  2EE8               	decfsz	wreg,f,c
  3504  0016BA  D7FE               	bra	i2u140_47
  3505  0016BC  D000               	nop2	
  3506  0016BE  968C               	bcf	3980,3,c	;volatile
  3507  0016C0  0EA0               	movlw	160
  3508  0016C2                     i2u141_47:
  3509  0016C2  D000               	nop2	
  3510  0016C4  2EE8               	decfsz	wreg,f,c
  3511  0016C6  D7FD               	bra	i2u141_47
  3512  0016C8  B045               	btfsc	_LCDinterruptState,0,c
  3513  0016CA  D002               	bra	i2u58_45
  3514  0016CC  9EF2               	bcf	intcon,7,c	;volatile
  3515  0016CE  D001               	bra	i2u58_46
  3516  0016D0                     i2u58_45:
  3517  0016D0  8EF2               	bsf	intcon,7,c	;volatile
  3518  0016D2                     i2u58_46:
  3519                           
  3520                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3521  0016D2  3802               	swapf	i2lcdNibble@data,w,c
  3522  0016D4  0BF0               	andlw	240
  3523  0016D6  6E02               	movwf	i2lcdNibble@data,c
  3524                           
  3525                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3526  0016D8  5002               	movf	i2lcdNibble@data,w,c
  3527  0016DA  0BF0               	andlw	240
  3528  0016DC  6E01               	movwf	i2lcdNibble@temp,c
  3529                           
  3530                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3531  0016DE  508C               	movf	3980,w,c	;volatile
  3532  0016E0  0B0F               	andlw	15
  3533  0016E2  6E8C               	movwf	3980,c	;volatile
  3534                           
  3535                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3536  0016E4  5001               	movf	i2lcdNibble@temp,w,c
  3537  0016E6  108C               	iorwf	3980,w,c	;volatile
  3538  0016E8  6E8C               	movwf	3980,c	;volatile
  3539                           
  3540                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3541  0016EA  0E00               	movlw	0
  3542  0016EC  BEF2               	btfsc	intcon,7,c	;volatile
  3543  0016EE  0E01               	movlw	1
  3544  0016F0  6E45               	movwf	_LCDinterruptState,c
  3545  0016F2  9EF2               	bcf	intcon,7,c	;volatile
  3546  0016F4  868C               	bsf	3980,3,c	;volatile
  3547  0016F6  0E42               	movlw	66
  3548  0016F8                     i2u142_47:
  3549  0016F8  2EE8               	decfsz	wreg,f,c
  3550  0016FA  D7FE               	bra	i2u142_47
  3551  0016FC  D000               	nop2	
  3552  0016FE  968C               	bcf	3980,3,c	;volatile
  3553  001700  0EA0               	movlw	160
  3554  001702                     i2u143_47:
  3555  001702  D000               	nop2	
  3556  001704  2EE8               	decfsz	wreg,f,c
  3557  001706  D7FD               	bra	i2u143_47
  3558  001708  B045               	btfsc	_LCDinterruptState,0,c
  3559  00170A  D002               	bra	i2u59_45
  3560  00170C  9EF2               	bcf	intcon,7,c	;volatile
  3561  00170E  D001               	bra	i2u59_46
  3562  001710                     i2u59_45:
  3563  001710  8EF2               	bsf	intcon,7,c	;volatile
  3564  001712                     i2u59_46:
  3565  001712  0012               	return		;funcret
  3566  001714                     __end_ofi2_lcdNibble:
  3567                           	opt stack 0
  3568                           pclatu	equ	0xFFB
  3569                           pclath	equ	0xFFA
  3570                           tblptru	equ	0xFF8
  3571                           tblptrh	equ	0xFF7
  3572                           tblptrl	equ	0xFF6
  3573                           tablat	equ	0xFF5
  3574                           prodh	equ	0xFF4
  3575                           prodl	equ	0xFF3
  3576                           intcon	equ	0xFF2
  3577                           postinc0	equ	0xFEE
  3578                           fsr0h	equ	0xFEA
  3579                           fsr0l	equ	0xFE9
  3580                           wreg	equ	0xFE8
  3581                           postdec1	equ	0xFE5
  3582                           fsr1h	equ	0xFE2
  3583                           fsr1l	equ	0xFE1
  3584                           postinc2	equ	0xFDE
  3585                           postdec2	equ	0xFDD
  3586                           fsr2h	equ	0xFDA
  3587                           fsr2l	equ	0xFD9
  3588                           status	equ	0xFD8
  3589                           pclatu	equ	0xFFB
  3590                           pclath	equ	0xFFA
  3591                           tblptru	equ	0xFF8
  3592                           tblptrh	equ	0xFF7
  3593                           tblptrl	equ	0xFF6
  3594                           tablat	equ	0xFF5
  3595                           prodh	equ	0xFF4
  3596                           prodl	equ	0xFF3
  3597                           intcon	equ	0xFF2
  3598                           postinc0	equ	0xFEE
  3599                           fsr0h	equ	0xFEA
  3600                           fsr0l	equ	0xFE9
  3601                           wreg	equ	0xFE8
  3602                           postdec1	equ	0xFE5
  3603                           fsr1h	equ	0xFE2
  3604                           fsr1l	equ	0xFE1
  3605                           postinc2	equ	0xFDE
  3606                           postdec2	equ	0xFDD
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611                           	psect	rparam
  3612  0000                     pclatu	equ	0xFFB
  3613                           pclath	equ	0xFFA
  3614                           tblptru	equ	0xFF8
  3615                           tblptrh	equ	0xFF7
  3616                           tblptrl	equ	0xFF6
  3617                           tablat	equ	0xFF5
  3618                           prodh	equ	0xFF4
  3619                           prodl	equ	0xFF3
  3620                           intcon	equ	0xFF2
  3621                           postinc0	equ	0xFEE
  3622                           fsr0h	equ	0xFEA
  3623                           fsr0l	equ	0xFE9
  3624                           wreg	equ	0xFE8
  3625                           postdec1	equ	0xFE5
  3626                           fsr1h	equ	0xFE2
  3627                           fsr1l	equ	0xFE1
  3628                           postinc2	equ	0xFDE
  3629                           postdec2	equ	0xFDD
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634                           	psect	temp
  3635  00004E                     btemp:
  3636                           	opt stack 0
  3637  00004E                     	ds	1
  3638  0000                     int$flags	set	btemp
  3639  0000                     wtemp6	set	btemp+1
  3640                           pclatu	equ	0xFFB
  3641                           pclath	equ	0xFFA
  3642                           tblptru	equ	0xFF8
  3643                           tblptrh	equ	0xFF7
  3644                           tblptrl	equ	0xFF6
  3645                           tablat	equ	0xFF5
  3646                           prodh	equ	0xFF4
  3647                           prodl	equ	0xFF3
  3648                           intcon	equ	0xFF2
  3649                           postinc0	equ	0xFEE
  3650                           fsr0h	equ	0xFEA
  3651                           fsr0l	equ	0xFE9
  3652                           wreg	equ	0xFE8
  3653                           postdec1	equ	0xFE5
  3654                           fsr1h	equ	0xFE2
  3655                           fsr1l	equ	0xFE1
  3656                           postinc2	equ	0xFDE
  3657                           postdec2	equ	0xFDD
  3658                           fsr2h	equ	0xFDA
  3659                           fsr2l	equ	0xFD9
  3660                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    16
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      77
    BANK0           128     21      21
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_7(CODE[20]), STR_6(CODE[20]), STR_5(CODE[20]), STR_4(CODE[20]), 
		 -> STR_3(CODE[20]), STR_2(CODE[20]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_sendData->_I2C_Master_Write
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2887
                                             58 COMRAM     1     1      0
                           _I2C_init
                       _I2C_sendData
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    17     10    2019
                                             57 COMRAM     1     1      0
                                              4 BANK0     17     7     10
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             51 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             56 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             49 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             52 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             51 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             49 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0     272
                                             52 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0     326
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     250
                                             50 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             49 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      4     0      4      76
                                             49 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    19    19      0    1242
                                             30 COMRAM    19    19      0
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            27    17     10     972
                                             12 COMRAM    18     8     10
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
     _I2C_Master_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      15       5       16.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      4D       1       61.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      62      34        0.0%
DATA                 0      0      62       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 30 23:11:40 2018

                __CFG_CPD$ON 000000           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l170 1166                          l162 10A2  
                        l270 1486                          l262 1416                          l174 11C8  
                        l166 1104                          l255 13DA                          l264 143E  
                        l256 13EA                          l178 122A                          l268 1480  
                        l269 14D4                          l681 1752                          l682 175C  
                        l691 1880                          l692 188A                          l677 1732  
                        l678 172A                          l687 1868                          l688 1860  
               __CFG_CPB$OFF 000000                          u610 1736                          u565 1652  
                        u566 1654                          u575 1692                          u576 1694  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1961 1442                         _ADON 007E10                         STR_1 1011  
                       STR_2 1011                         STR_3 1011                         STR_4 1011  
                       STR_5 1011                         STR_6 1011                         STR_7 1011  
                       u1200 11BC                         u1210 121E                         u1140 146E  
                       u1080 186C                         u1160 14DE                         u1307 1994  
                       u1227 10E0                         u1180 10F8                         u1317 163A  
                       u1237 1142                         _LATA 000F89                         u1190 115A  
                       _LATB 000F8A                         u1327 1644                         u1247 11A4  
                       _LATC 000F8B                         _LATD 000F8C                         u1337 167A  
                       u1257 1206                         _LATE 000F8D                         u1347 1684  
                       u1267 1264                         u1277 1980                         u1287 17BE  
                       u1297 17F2                         _RBIE 007F93                         _RBIF 007F90  
                       _main 1026     __end_of_interruptHandler 13CE                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 004E             __end_of_I2C_init 193A                         prodh 000FF4  
                       prodl 000FF3                         start 000E                __CFG_IESO$OFF 000000  
            __end_ofi2_putch 19B0                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
                i2_lcdNibble 1696             __end_of_LCD_LEFT 100C             ?_I2C_Master_Init 0032  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
            __end_of___lwdiv 1766              __end_of___lwmod 1894                        i2l270 15AE  
                      i2l262 153E                        i2l190 133C                        i2l255 1504  
                      i2l264 1566                        i2l256 1514                        i2l187 1318  
                      i2l268 15A8                        i2l188 1324                        i2l269 15F6  
                      i2l189 1330                        i2l681 17A4                        i2l682 17AE  
                      i2l691 18C2                        i2l692 18CC                        i2l677 1784  
                      i2l678 177C                        i2l687 18AA                        i2l688 18A2  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 199C               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 1804               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 100B                        _putch 1974                        pclath 000FFA  
                      tablat 000FF5            _LCDinterruptState 0045                        status 000FD8  
                      wtemp6 004F               __CFG_PBADEN$ON 000000        __size_of_I2C_sendData 0022  
           __end_ofi2_printf 1618           __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042  
            __initialization 18D6           __size_ofi2_lcdInst 0014                 __end_of_main 126E  
                 i2printf@ap 0018           __size_ofi2_initLCD 004C            __end_of_LCD_RIGHT 100D  
                     ??_main 003B                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0033           ??_I2C_Master_Start 0033                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0035                       _ADRESH 000FC4  
                     _ADRESL 000FC3              i2lcdNibble@data 0002                       ?_putch 0001  
               _I2C_sendData 193A              i2lcdNibble@temp 0001                       i2l1727 156A  
                     i2l1919 1382                       _OSCCON 000FD3                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
             __CFG_STVREN$ON 000000                    ??___lwdiv 0036                    ??___lwmod 0039  
                     clear_0 18FC                    ??_lcdInst 0034                       _printf 13CE  
                  ??_initLCD 0035                 __pdataCOMRAM 0046            __end_ofi2___lwdiv 17B8  
               __mediumconst 0000            __end_ofi2___lwmod 18D6                    ?_I2C_init 0001  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
          __end_ofi2_lcdInst 19C4            __end_ofi2_initLCD 1850                   __accesstop 0080  
    __end_of__initialization 1902                ___rparam_used 000001           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                __end_of_putch 1988                  i2printf@val 001C  
         __size_of_lcdNibble 007E                  i2putch@data 0003                   ??_I2C_init 0036  
                  ?i2_printf 000D                      ??_putch 0034            ?_interruptHandler 0001  
         ??_interruptHandler 001F                 ?i2_lcdNibble 0001                      ?_printf 0084  
                 ??i2_printf 0017                      i2u70_40 18AE                      i2u58_45 16D0  
                    i2u58_46 16D2                      i2u67_40 1788                      i2u59_45 1710  
                    i2u59_46 1712                      i2u84_40 1596                      i2u86_40 15FE  
                    i2u99_40 12C8                      i2u99_48 12CA         lcd@LCDinterruptState 0044  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
                    _B_count 0042                      _B_input 004C                      i2_putch 199C  
                    _N_count 0040                      _N_input 004A            __end_of_lcdNibble 1696  
                    _S_count 003E                      _S_input 0048                      __Hparam 0000  
                    __Lparam 0000                      _W_count 003C                      _W_input 0046  
                    ___lwdiv 1714                      ___lwmod 1850                 __psmallconst 1000  
                    __pcinit 18D6                      __ramtop 1000                      _lcdInst 1988  
                    __ptext0 1026                      __ptext1 13CE                      __ptext2 1974  
                    __ptext3 1850                      __ptext4 1714                      __ptext5 17B8  
                    __ptext6 1988                      __ptext7 1618                      __ptext8 193A  
                    __ptext9 1910              __size_of_printf 012C                      _initLCD 17B8  
                    _dpowers 1001                    _LCD_RIGHT 100C     __size_of_I2C_Master_Init 0018  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008               __pintcode_body 126E  
       end_of_initialization 1902        __end_of_LCD_SIZE_HORZ 100F        __end_of_LCD_SIZE_VERT 100E  
              __Lmediumconst 0000                      int_func 126E    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A                      printf@c 0094                      printf@f 0084  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81                    _TRISBbits 000F93  
                  _TRISCbits 000F94            __size_of_I2C_init 002A            i2___lwdiv@divisor 0003  
                  i2___lwdiv 1766                    i2___lwmod 1894            i2___lwdiv@counter 0007  
                  i2_lcdInst 19B0                    i2_initLCD 1804         __size_ofi2_lcdNibble 007E  
              __pidataCOMRAM 19E0                i2lcdInst@data 0003               __end_of_printf 14FA  
               i2printf@flag 001A                 i2printf@prec 001B          start_initialization 18D6  
                  i2printf@c 001E                    i2printf@f 000D                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 011E            ??_I2C_Master_Init 0036  
          ??_I2C_Master_Wait 0032                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 0033  
           __CFG_OSC$INTIO67 000000                   ?i2_initLCD 0001     I2C_Master_Init@clockFreq 0032  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 003A    __size_of_interruptHandler 13C6  
                __pbssCOMRAM 003C                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                     ?i2_putch 0001             _I2C_Master_Start 19F0  
           _I2C_Master_Write 19D6             ___lwdiv@dividend 0032            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                    _lcdNibble 1618                     ?___lwdiv 0032  
                   ?___lwmod 0080                     ?_lcdInst 0001                     ?_initLCD 0001  
                __smallconst 1000                     _I2C_init 1910             ___lwdiv@quotient 0036  
              ?_I2C_sendData 0001                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0014                     _LCD_LEFT 100B                  ??i2_lcdInst 0003  
                   _LATCbits 000F8B                     _LATDbits 000F8C                  ??i2_initLCD 0004  
                   i2u100_40 12DC                     i2u101_40 12F0                     i2u100_48 12DE  
                   i2u102_40 1304                     i2u101_48 12F2                     i2u102_48 1306  
                   i2u140_47 16B8                     i2u141_47 16C2                     i2u142_47 16F8  
                   i2u143_47 1702                     i2u135_47 1378                     i2u136_47 19A8  
                   i2u137_47 180A                     i2u138_47 183E                     i2u139_47 19BC  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001                   _ADCON0bits 000FC2  
                 _ADCON2bits 000FC0                lcdNibble@data 0033                   printf@flag 0090  
              lcdNibble@temp 0032                   printf@prec 0091                     i2_printf 14FA  
             ??_I2C_sendData 0035               _LCD_HORZ_LIMIT 1010                    copy_data0 18EA  
           __size_ofi2_putch 0014                     __Hrparam 0000        I2C_sendData@char_data 0035  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000             __size_of___lwdiv 0052  
           __size_of___lwmod 0044             _interruptHandler 0008             __size_of_lcdInst 0014  
            _I2C_Master_Init 195C             __size_of_initLCD 004C              _I2C_Master_Wait 19C4  
            _I2C_Master_Stop 19E8       __end_of_LCD_HORZ_LIMIT 1011              ___lwdiv@divisor 0034  
            ___lwdiv@counter 0038                     __ptext10 19D6                     __ptext11 19E8  
                   __ptext20 1804                     __ptext12 19F0                     __ptext21 19B0  
                   __ptext13 19C4                     __ptext22 1696                     __ptext14 195C  
                   __ptext16 14FA                     __ptext17 199C                     __ptext18 1894  
                   __ptext19 1766               _LCD_VERT_LIMIT 100F                __size_of_main 0248  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0032                     int$flags 004E  
                  printf@val 0092  I2C_Master_Write@byteToWrite 0033                    putch@data 0034  
   __end_of_I2C_Master_Start 19F8                  _OSCTUNEbits 000F9B     __end_of_I2C_Master_Write 19E0  
                 _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT 1010                     intlevel2 0000  
              _LCD_SIZE_HORZ 100E             ___lwmod@dividend 0080                _LCD_SIZE_VERT 100D  
                   printf@ap 008E         __end_of_I2C_sendData 195C      __end_of_I2C_Master_Init 1974  
    __end_of_I2C_Master_Wait 19D6      __end_of_I2C_Master_Stop 19F0                  lcdInst@data 0034  
        __end_ofi2_lcdNibble 1714              ___lwmod@divisor 0082              ___lwmod@counter 0039  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
