

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 26 23:57:53 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 1.45
    70                           ; Generated 16/11/2017 GMT
    71                           ; 
    72                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4620 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataBANK0
   105  003DF6                     __pidataBANK0:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _close_handle
   109  003DF6  0E                 	db	14
   110                           
   111                           ;initializer for _servo_ramp
   112  003DF7  0D                 	db	13
   113                           
   114                           ;initializer for _motorStop_3
   115  003DF8  0C                 	db	12
   116                           
   117                           ;initializer for _motorStart_3
   118  003DF9  0B                 	db	11
   119                           
   120                           ;initializer for _motorStop_2
   121  003DFA  0A                 	db	10
   122                           
   123                           ;initializer for _motorStart_2
   124  003DFB  39                 	db	57
   125                           
   126                           ;initializer for _motorStop_1
   127  003DFC  38                 	db	56
   128                           
   129                           ;initializer for _motorStart_1
   130  003DFD  37                 	db	55
   131                           
   132                           ;initializer for _motorStop_0
   133  003DFE  36                 	db	54
   134                           
   135                           ;initializer for _motorStart_0
   136  003DFF  35                 	db	53
   137                           
   138                           ;initializer for _S_dispense
   139  003E00  34                 	db	52
   140                           
   141                           ;initializer for _N_dispense
   142  003E01  33                 	db	51
   143                           
   144                           ;initializer for _B_dispense
   145  003E02  32                 	db	50
   146                           
   147                           ;initializer for _rotate_1compartment
   148  003E03  31                 	db	49
   149                           
   150                           ;initializer for _rotate_gear
   151  003E04  30                 	db	48
   152                           
   153                           	psect	idataBANK1
   154  003E05                     __pidataBANK1:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _W_max
   158  003E05  0004               	dw	4
   159                           
   160                           ;initializer for _S_max
   161  003E07  0004               	dw	4
   162                           
   163                           ;initializer for _N_max
   164  003E09  0004               	dw	4
   165                           
   166                           ;initializer for _B_max
   167  003E0B  0004               	dw	4
   168                           
   169                           ;initializer for _init_position
   170  003E0D  0005               	dw	5
   171                           
   172                           	psect	mediumconst
   173  00FD18                     __pmediumconst:
   174                           	opt stack 0
   175  00FD18  00                 	db	0
   176  00FD19                     _keys:
   177                           	opt stack 0
   178  00FD19  31                 	db	49
   179  00FD1A  32                 	db	50
   180  00FD1B  33                 	db	51
   181  00FD1C  41                 	db	65
   182  00FD1D  34                 	db	52
   183  00FD1E  35                 	db	53
   184  00FD1F  36                 	db	54
   185  00FD20  42                 	db	66
   186  00FD21  37                 	db	55
   187  00FD22  38                 	db	56
   188  00FD23  39                 	db	57
   189  00FD24  43                 	db	67
   190  00FD25  2A                 	db	42
   191  00FD26  30                 	db	48
   192  00FD27  23                 	db	35
   193  00FD28  44                 	db	68
   194  00FD29  00                 	db	0
   195  00FD2A                     __end_of_keys:
   196                           	opt stack 0
   197  00FD2A                     _dpowers:
   198                           	opt stack 0
   199  00FD2A  0001               	dw	1
   200  00FD2C  000A               	dw	10
   201  00FD2E  0064               	dw	100
   202  00FD30  03E8               	dw	1000
   203  00FD32  2710               	dw	10000
   204  00FD34                     __end_of_dpowers:
   205                           	opt stack 0
   206  00FD34                     _hexpowers:
   207                           	opt stack 0
   208  00FD34  0001               	dw	1
   209  00FD36  0010               	dw	16
   210  00FD38  0100               	dw	256
   211  00FD3A  1000               	dw	4096
   212  00FD3C                     __end_of_hexpowers:
   213                           	opt stack 0
   214  00FD3C                     _happynewyear:
   215                           	opt stack 0
   216  00FD3C  45                 	db	69
   217  00FD3D  14                 	db	20
   218  00FD3E  14                 	db	20
   219  00FD3F  00                 	db	0
   220  00FD40  11                 	db	17
   221  00FD41  03                 	db	3
   222  00FD42  18                 	db	24
   223  00FD43                     __end_of_happynewyear:
   224                           	opt stack 0
   225  00FD43                     _array:
   226                           	opt stack 0
   227  00FD43  30                 	db	48
   228  00FD44  31                 	db	49
   229  00FD45  00                 	db	0
   230  00FD46                     __end_of_array:
   231                           	opt stack 0
   232  00FD46                     _LCD_LEFT:
   233                           	opt stack 0
   234  00FD46  00                 	db	0
   235  00FD47                     __end_of_LCD_LEFT:
   236                           	opt stack 0
   237  00FD47                     _LCD_RIGHT:
   238                           	opt stack 0
   239  00FD47  01                 	db	1
   240  00FD48                     __end_of_LCD_RIGHT:
   241                           	opt stack 0
   242  00FD48                     _LCD_SIZE_VERT:
   243                           	opt stack 0
   244  00FD48  02                 	db	2
   245  00FD49                     __end_of_LCD_SIZE_VERT:
   246                           	opt stack 0
   247  00FD49                     _LCD_SIZE_HORZ:
   248                           	opt stack 0
   249  00FD49  10                 	db	16
   250  00FD4A                     __end_of_LCD_SIZE_HORZ:
   251                           	opt stack 0
   252  00FD4A                     _LCD_VERT_LIMIT:
   253                           	opt stack 0
   254  00FD4A  02                 	db	2
   255  00FD4B                     __end_of_LCD_VERT_LIMIT:
   256                           	opt stack 0
   257  00FD4B                     _LCD_HORZ_LIMIT:
   258                           	opt stack 0
   259  00FD4B  28                 	db	40
   260  00FD4C                     __end_of_LCD_HORZ_LIMIT:
   261                           	opt stack 0
   262  00FD4C                     _strs:
   263                           	opt stack 0
   264  00FD4C  42                 	db	66
   265  00FD4D  00                 	db	0
   266  00FD4E  00                 	db	0
   267  00FD4F  00                 	db	0
   268  00FD50  00                 	db	0
   269  00FD51  4E                 	db	78
   270  00FD52  00                 	db	0
   271  00FD53  00                 	db	0
   272  00FD54  00                 	db	0
   273  00FD55  00                 	db	0
   274  00FD56  53                 	db	83
   275  00FD57  00                 	db	0
   276  00FD58  00                 	db	0
   277  00FD59  00                 	db	0
   278  00FD5A  00                 	db	0
   279  00FD5B  57                 	db	87
   280  00FD5C  00                 	db	0
   281  00FD5D  00                 	db	0
   282  00FD5E  00                 	db	0
   283  00FD5F  00                 	db	0
   284  00FD60  42                 	db	66
   285  00FD61  4E                 	db	78
   286  00FD62  00                 	db	0
   287  00FD63  00                 	db	0
   288  00FD64  00                 	db	0
   289  00FD65  42                 	db	66
   290  00FD66  53                 	db	83
   291  00FD67  00                 	db	0
   292  00FD68  00                 	db	0
   293  00FD69  00                 	db	0
   294  00FD6A  42                 	db	66
   295  00FD6B  57                 	db	87
   296  00FD6C  00                 	db	0
   297  00FD6D  00                 	db	0
   298  00FD6E  00                 	db	0
   299  00FD6F  42                 	db	66
   300  00FD70  42                 	db	66
   301  00FD71  4E                 	db	78
   302  00FD72  00                 	db	0
   303  00FD73  00                 	db	0
   304  00FD74  42                 	db	66
   305  00FD75  42                 	db	66
   306  00FD76  53                 	db	83
   307  00FD77  00                 	db	0
   308  00FD78  00                 	db	0
   309  00FD79  42                 	db	66
   310  00FD7A  42                 	db	66
   311  00FD7B  57                 	db	87
   312  00FD7C  00                 	db	0
   313  00FD7D  00                 	db	0
   314  00FD7E  42                 	db	66
   315  00FD7F  4E                 	db	78
   316  00FD80  57                 	db	87
   317  00FD81  00                 	db	0
   318  00FD82  00                 	db	0
   319  00FD83  42                 	db	66
   320  00FD84  53                 	db	83
   321  00FD85  57                 	db	87
   322  00FD86  00                 	db	0
   323  00FD87  00                 	db	0
   324  00FD88  42                 	db	66
   325  00FD89  57                 	db	87
   326  00FD8A  57                 	db	87
   327  00FD8B  00                 	db	0
   328  00FD8C  00                 	db	0
   329  00FD8D  42                 	db	66
   330  00FD8E  4E                 	db	78
   331  00FD8F  57                 	db	87
   332  00FD90  57                 	db	87
   333  00FD91  00                 	db	0
   334  00FD92  42                 	db	66
   335  00FD93  53                 	db	83
   336  00FD94  57                 	db	87
   337  00FD95  57                 	db	87
   338  00FD96  00                 	db	0
   339  00FD97  42                 	db	66
   340  00FD98  42                 	db	66
   341  00FD99  53                 	db	83
   342  00FD9A  57                 	db	87
   343  00FD9B  00                 	db	0
   344  00FD9C  42                 	db	66
   345  00FD9D  42                 	db	66
   346  00FD9E  4E                 	db	78
   347  00FD9F  57                 	db	87
   348  00FDA0  00                 	db	0
   349  00FDA1  42                 	db	66
   350  00FDA2  4E                 	db	78
   351  00FDA3  4E                 	db	78
   352  00FDA4  57                 	db	87
   353  00FDA5  00                 	db	0
   354  00FDA6  42                 	db	66
   355  00FDA7  4E                 	db	78
   356  00FDA8  4E                 	db	78
   357  00FDA9  4E                 	db	78
   358  00FDAA  00                 	db	0
   359  00FDAB  42                 	db	66
   360  00FDAC  57                 	db	87
   361  00FDAD  57                 	db	87
   362  00FDAE  57                 	db	87
   363  00FDAF  00                 	db	0
   364  00FDB0                     __end_of_strs:
   365                           	opt stack 0
   366  0000                     _SSPBUF	set	4041
   367  0000                     _SSPCON2bits	set	4037
   368  0000                     _SSPADD	set	4040
   369  0000                     _SSPCON2	set	4037
   370  0000                     _SSPCON1	set	4038
   371  0000                     _SSPSTAT	set	4039
   372  0000                     _TRISCbits	set	3988
   373  0000                     _SSPCON1bits	set	4038
   374  0000                     _PORTAbits	set	3968
   375  0000                     _TRISAbits	set	3986
   376  0000                     _TRISDbits	set	3989
   377  0000                     _ADRESL	set	4035
   378  0000                     _ADRESH	set	4036
   379  0000                     _ADCON0bits	set	4034
   380  0000                     _PORTB	set	3969
   381  0000                     _ADCON1	set	4033
   382  0000                     _ADCON0	set	4034
   383  0000                     _TRISE	set	3990
   384  0000                     _TRISD	set	3989
   385  0000                     _TRISC	set	3988
   386  0000                     _TRISB	set	3987
   387  0000                     _TRISA	set	3986
   388  0000                     _LATE	set	3981
   389  0000                     _LATC	set	3979
   390  0000                     _LATB	set	3978
   391  0000                     _LATA	set	3977
   392  0000                     _INTCONbits	set	4082
   393  0000                     _LATD	set	3980
   394  0000                     _LATDbits	set	3980
   395  0000                     _ADON	set	32272
   396  0000                     _INT1IF	set	32640
   397  0000                     _INT1IE	set	32643
   398  00FDB0                     STR_34:
   399  00FDB0  53                 	db	83	;'S'
   400  00FDB1  70                 	db	112	;'p'
   401  00FDB2  61                 	db	97	;'a'
   402  00FDB3  63                 	db	99	;'c'
   403  00FDB4  65                 	db	101	;'e'
   404  00FDB5  72                 	db	114	;'r'
   405  00FDB6  20                 	db	32
   406  00FDB7  64                 	db	100	;'d'
   407  00FDB8  69                 	db	105	;'i'
   408  00FDB9  73                 	db	115	;'s'
   409  00FDBA  70                 	db	112	;'p'
   410  00FDBB  65                 	db	101	;'e'
   411  00FDBC  6E                 	db	110	;'n'
   412  00FDBD  73                 	db	115	;'s'
   413  00FDBE  65                 	db	101	;'e'
   414  00FDBF  64                 	db	100	;'d'
   415  00FDC0  3A                 	db	58	;':'
   416  00FDC1  25                 	db	37
   417  00FDC2  64                 	db	100	;'d'
   418  00FDC3  00                 	db	0
   419  00FDC4                     STR_37:
   420  00FDC4  57                 	db	87	;'W'
   421  00FDC5  61                 	db	97	;'a'
   422  00FDC6  73                 	db	115	;'s'
   423  00FDC7  68                 	db	104	;'h'
   424  00FDC8  65                 	db	101	;'e'
   425  00FDC9  72                 	db	114	;'r'
   426  00FDCA  20                 	db	32
   427  00FDCB  64                 	db	100	;'d'
   428  00FDCC  69                 	db	105	;'i'
   429  00FDCD  73                 	db	115	;'s'
   430  00FDCE  70                 	db	112	;'p'
   431  00FDCF  65                 	db	101	;'e'
   432  00FDD0  6E                 	db	110	;'n'
   433  00FDD1  73                 	db	115	;'s'
   434  00FDD2  65                 	db	101	;'e'
   435  00FDD3  64                 	db	100	;'d'
   436  00FDD4  3A                 	db	58	;':'
   437  00FDD5  25                 	db	37
   438  00FDD6  64                 	db	100	;'d'
   439  00FDD7  00                 	db	0
   440  00FDD8                     STR_28:
   441  00FDD8  62                 	db	98	;'b'
   442  00FDD9  6F                 	db	111	;'o'
   443  00FDDA  6C                 	db	108	;'l'
   444  00FDDB  74                 	db	116	;'t'
   445  00FDDC  73                 	db	115	;'s'
   446  00FDDD  20                 	db	32
   447  00FDDE  64                 	db	100	;'d'
   448  00FDDF  69                 	db	105	;'i'
   449  00FDE0  73                 	db	115	;'s'
   450  00FDE1  70                 	db	112	;'p'
   451  00FDE2  65                 	db	101	;'e'
   452  00FDE3  6E                 	db	110	;'n'
   453  00FDE4  73                 	db	115	;'s'
   454  00FDE5  65                 	db	101	;'e'
   455  00FDE6  64                 	db	100	;'d'
   456  00FDE7  3A                 	db	58	;':'
   457  00FDE8  25                 	db	37
   458  00FDE9  64                 	db	100	;'d'
   459  00FDEA  00                 	db	0
   460  00FDEB                     STR_44:
   461  00FDEB  20                 	db	32
   462  00FDEC  32                 	db	50	;'2'
   463  00FDED  3A                 	db	58	;':'
   464  00FDEE  20                 	db	32
   465  00FDEF  4F                 	db	79	;'O'
   466  00FDF0  70                 	db	112	;'p'
   467  00FDF1  65                 	db	101	;'e'
   468  00FDF2  72                 	db	114	;'r'
   469  00FDF3  61                 	db	97	;'a'
   470  00FDF4  74                 	db	116	;'t'
   471  00FDF5  69                 	db	105	;'i'
   472  00FDF6  6F                 	db	111	;'o'
   473  00FDF7  6E                 	db	110	;'n'
   474  00FDF8  20                 	db	32
   475  00FDF9  54                 	db	84	;'T'
   476  00FDFA  69                 	db	105	;'i'
   477  00FDFB  6D                 	db	109	;'m'
   478  00FDFC  65                 	db	101	;'e'
   479  00FDFD  00                 	db	0
   480  00FDFE                     STR_31:
   481  00FDFE  6E                 	db	110	;'n'
   482  00FDFF  75                 	db	117	;'u'
   483  00FE00  74                 	db	116	;'t'
   484  00FE01  73                 	db	115	;'s'
   485  00FE02  20                 	db	32
   486  00FE03  64                 	db	100	;'d'
   487  00FE04  69                 	db	105	;'i'
   488  00FE05  73                 	db	115	;'s'
   489  00FE06  70                 	db	112	;'p'
   490  00FE07  65                 	db	101	;'e'
   491  00FE08  6E                 	db	110	;'n'
   492  00FE09  73                 	db	115	;'s'
   493  00FE0A  65                 	db	101	;'e'
   494  00FE0B  64                 	db	100	;'d'
   495  00FE0C  3A                 	db	58	;':'
   496  00FE0D  25                 	db	37
   497  00FE0E  64                 	db	100	;'d'
   498  00FE0F  00                 	db	0
   499  00FE10                     STR_89:
   500  00FE10  30                 	db	48	;'0'
   501  00FE11  31                 	db	49	;'1'
   502  00FE12  32                 	db	50	;'2'
   503  00FE13  33                 	db	51	;'3'
   504  00FE14  34                 	db	52	;'4'
   505  00FE15  35                 	db	53	;'5'
   506  00FE16  36                 	db	54	;'6'
   507  00FE17  37                 	db	55	;'7'
   508  00FE18  38                 	db	56	;'8'
   509  00FE19  39                 	db	57	;'9'
   510  00FE1A  61                 	db	97	;'a'
   511  00FE1B  62                 	db	98	;'b'
   512  00FE1C  63                 	db	99	;'c'
   513  00FE1D  64                 	db	100	;'d'
   514  00FE1E  65                 	db	101	;'e'
   515  00FE1F  66                 	db	102	;'f'
   516  00FE20  00                 	db	0
   517  00FE21                     STR_40:
   518  00FE21  53                 	db	83	;'S'
   519  00FE22  70                 	db	112	;'p'
   520  00FE23  61                 	db	97	;'a'
   521  00FE24  63                 	db	99	;'c'
   522  00FE25  65                 	db	101	;'e'
   523  00FE26  72                 	db	114	;'r'
   524  00FE27  5F                 	db	95	;'_'
   525  00FE28  72                 	db	114	;'r'
   526  00FE29  65                 	db	101	;'e'
   527  00FE2A  6D                 	db	109	;'m'
   528  00FE2B  61                 	db	97	;'a'
   529  00FE2C  69                 	db	105	;'i'
   530  00FE2D  6E                 	db	110	;'n'
   531  00FE2E  3A                 	db	58	;':'
   532  00FE2F  25                 	db	37
   533  00FE30  64                 	db	100	;'d'
   534  00FE31  00                 	db	0
   535  00FE32                     STR_41:
   536  00FE32  57                 	db	87	;'W'
   537  00FE33  61                 	db	97	;'a'
   538  00FE34  73                 	db	115	;'s'
   539  00FE35  68                 	db	104	;'h'
   540  00FE36  65                 	db	101	;'e'
   541  00FE37  72                 	db	114	;'r'
   542  00FE38  5F                 	db	95	;'_'
   543  00FE39  72                 	db	114	;'r'
   544  00FE3A  65                 	db	101	;'e'
   545  00FE3B  6D                 	db	109	;'m'
   546  00FE3C  61                 	db	97	;'a'
   547  00FE3D  69                 	db	105	;'i'
   548  00FE3E  6E                 	db	110	;'n'
   549  00FE3F  3A                 	db	58	;':'
   550  00FE40  25                 	db	37
   551  00FE41  64                 	db	100	;'d'
   552  00FE42  00                 	db	0
   553  00FE43                     STR_8:
   554  00FE43  61                 	db	97	;'a'
   555  00FE44  73                 	db	115	;'s'
   556  00FE45  73                 	db	115	;'s'
   557  00FE46  65                 	db	101	;'e'
   558  00FE47  6D                 	db	109	;'m'
   559  00FE48  62                 	db	98	;'b'
   560  00FE49  6C                 	db	108	;'l'
   561  00FE4A  79                 	db	121	;'y'
   562  00FE4B  20                 	db	32
   563  00FE4C  73                 	db	115	;'s'
   564  00FE4D  74                 	db	116	;'t'
   565  00FE4E  65                 	db	101	;'e'
   566  00FE4F  70                 	db	112	;'p'
   567  00FE50  3A                 	db	58	;':'
   568  00FE51  25                 	db	37
   569  00FE52  64                 	db	100	;'d'
   570  00FE53  00                 	db	0
   571  00FE54                     STR_43:
   572  00FE54  31                 	db	49	;'1'
   573  00FE55  3A                 	db	58	;':'
   574  00FE56  20                 	db	32
   575  00FE57  44                 	db	68	;'D'
   576  00FE58  61                 	db	97	;'a'
   577  00FE59  74                 	db	116	;'t'
   578  00FE5A  65                 	db	101	;'e'
   579  00FE5B  20                 	db	32
   580  00FE5C  61                 	db	97	;'a'
   581  00FE5D  6E                 	db	110	;'n'
   582  00FE5E  64                 	db	100	;'d'
   583  00FE5F  20                 	db	32
   584  00FE60  54                 	db	84	;'T'
   585  00FE61  69                 	db	105	;'i'
   586  00FE62  6D                 	db	109	;'m'
   587  00FE63  65                 	db	101	;'e'
   588  00FE64  00                 	db	0
   589  00FE65                     STR_50:
   590  00FE65  6F                 	db	111	;'o'
   591  00FE66  70                 	db	112	;'p'
   592  00FE67  65                 	db	101	;'e'
   593  00FE68  72                 	db	114	;'r'
   594  00FE69  61                 	db	97	;'a'
   595  00FE6A  74                 	db	116	;'t'
   596  00FE6B  69                 	db	105	;'i'
   597  00FE6C  6F                 	db	111	;'o'
   598  00FE6D  6E                 	db	110	;'n'
   599  00FE6E  20                 	db	32
   600  00FE6F  74                 	db	116	;'t'
   601  00FE70  69                 	db	105	;'i'
   602  00FE71  6D                 	db	109	;'m'
   603  00FE72  65                 	db	101	;'e'
   604  00FE73  3A                 	db	58	;':'
   605  00FE74  00                 	db	0
   606  00FE75                     STR_1:
   607  00FE75  31                 	db	49	;'1'
   608  00FE76  3A                 	db	58	;':'
   609  00FE77  64                 	db	100	;'d'
   610  00FE78  61                 	db	97	;'a'
   611  00FE79  74                 	db	116	;'t'
   612  00FE7A  65                 	db	101	;'e'
   613  00FE7B  20                 	db	32
   614  00FE7C  61                 	db	97	;'a'
   615  00FE7D  6E                 	db	110	;'n'
   616  00FE7E  64                 	db	100	;'d'
   617  00FE7F  20                 	db	32
   618  00FE80  74                 	db	116	;'t'
   619  00FE81  69                 	db	105	;'i'
   620  00FE82  6D                 	db	109	;'m'
   621  00FE83  65                 	db	101	;'e'
   622  00FE84  00                 	db	0
   623  00FE85                     STR_24:
   624  00FE85  73                 	db	115	;'s'
   625  00FE86  74                 	db	116	;'t'
   626  00FE87  61                 	db	97	;'a'
   627  00FE88  72                 	db	114	;'r'
   628  00FE89  74                 	db	116	;'t'
   629  00FE8A  20                 	db	32
   630  00FE8B  6F                 	db	111	;'o'
   631  00FE8C  70                 	db	112	;'p'
   632  00FE8D  65                 	db	101	;'e'
   633  00FE8E  72                 	db	114	;'r'
   634  00FE8F  61                 	db	97	;'a'
   635  00FE90  74                 	db	116	;'t'
   636  00FE91  69                 	db	105	;'i'
   637  00FE92  6F                 	db	111	;'o'
   638  00FE93  6E                 	db	110	;'n'
   639  00FE94  00                 	db	0
   640  00FE95                     STR_52:
   641  00FE95  57                 	db	87	;'W'
   642  00FE96  72                 	db	114	;'r'
   643  00FE97  6F                 	db	111	;'o'
   644  00FE98  6E                 	db	110	;'n'
   645  00FE99  67                 	db	103	;'g'
   646  00FE9A  20                 	db	32
   647  00FE9B  6E                 	db	110	;'n'
   648  00FE9C  75                 	db	117	;'u'
   649  00FE9D  6D                 	db	109	;'m'
   650  00FE9E  62                 	db	98	;'b'
   651  00FE9F  65                 	db	101	;'e'
   652  00FEA0  72                 	db	114	;'r'
   653  00FEA1  21                 	db	33
   654  00FEA2  20                 	db	32
   655  00FEA3  00                 	db	0
   656  00FEA4                     STR_3:
   657  00FEA4  61                 	db	97	;'a'
   658  00FEA5  73                 	db	115	;'s'
   659  00FEA6  73                 	db	115	;'s'
   660  00FEA7  65                 	db	101	;'e'
   661  00FEA8  6D                 	db	109	;'m'
   662  00FEA9  62                 	db	98	;'b'
   663  00FEAA  6C                 	db	108	;'l'
   664  00FEAB  79                 	db	121	;'y'
   665  00FEAC  20                 	db	32
   666  00FEAD  73                 	db	115	;'s'
   667  00FEAE  74                 	db	116	;'t'
   668  00FEAF  65                 	db	101	;'e'
   669  00FEB0  70                 	db	112	;'p'
   670  00FEB1  3A                 	db	58	;':'
   671  00FEB2  00                 	db	0
   672  00FEB3                     STR_38:
   673  00FEB3  42                 	db	66	;'B'
   674  00FEB4  6F                 	db	111	;'o'
   675  00FEB5  6C                 	db	108	;'l'
   676  00FEB6  74                 	db	116	;'t'
   677  00FEB7  5F                 	db	95	;'_'
   678  00FEB8  72                 	db	114	;'r'
   679  00FEB9  65                 	db	101	;'e'
   680  00FEBA  6D                 	db	109	;'m'
   681  00FEBB  61                 	db	97	;'a'
   682  00FEBC  69                 	db	105	;'i'
   683  00FEBD  6E                 	db	110	;'n'
   684  00FEBE  3A                 	db	58	;':'
   685  00FEBF  25                 	db	37
   686  00FEC0  64                 	db	100	;'d'
   687  00FEC1  00                 	db	0
   688  00FEC2                     STR_46:
   689  00FEC2  25                 	db	37
   690  00FEC3  30                 	db	48	;'0'
   691  00FEC4  32                 	db	50	;'2'
   692  00FEC5  78                 	db	120	;'x'
   693  00FEC6  2F                 	db	47
   694  00FEC7  25                 	db	37
   695  00FEC8  30                 	db	48	;'0'
   696  00FEC9  32                 	db	50	;'2'
   697  00FECA  78                 	db	120	;'x'
   698  00FECB  2F                 	db	47
   699  00FECC  25                 	db	37
   700  00FECD  30                 	db	48	;'0'
   701  00FECE  32                 	db	50	;'2'
   702  00FECF  78                 	db	120	;'x'
   703  00FED0  00                 	db	0
   704  00FED1                     STR_47:
   705  00FED1  25                 	db	37
   706  00FED2  30                 	db	48	;'0'
   707  00FED3  32                 	db	50	;'2'
   708  00FED4  78                 	db	120	;'x'
   709  00FED5  3A                 	db	58	;':'
   710  00FED6  25                 	db	37
   711  00FED7  30                 	db	48	;'0'
   712  00FED8  32                 	db	50	;'2'
   713  00FED9  78                 	db	120	;'x'
   714  00FEDA  3A                 	db	58	;':'
   715  00FEDB  25                 	db	37
   716  00FEDC  30                 	db	48	;'0'
   717  00FEDD  32                 	db	50	;'2'
   718  00FEDE  78                 	db	120	;'x'
   719  00FEDF  00                 	db	0
   720  00FEE0                     STR_4:
   721  00FEE0  66                 	db	102	;'f'
   722  00FEE1  61                 	db	97	;'a'
   723  00FEE2  73                 	db	115	;'s'
   724  00FEE3  74                 	db	116	;'t'
   725  00FEE4  65                 	db	101	;'e'
   726  00FEE5  6E                 	db	110	;'n'
   727  00FEE6  65                 	db	101	;'e'
   728  00FEE7  72                 	db	114	;'r'
   729  00FEE8  20                 	db	32
   730  00FEE9  73                 	db	115	;'s'
   731  00FEEA  65                 	db	101	;'e'
   732  00FEEB  74                 	db	116	;'t'
   733  00FEEC  3A                 	db	58	;':'
   734  00FEED  00                 	db	0
   735  00FEEE                     STR_39:
   736  00FEEE  4E                 	db	78	;'N'
   737  00FEEF  75                 	db	117	;'u'
   738  00FEF0  74                 	db	116	;'t'
   739  00FEF1  5F                 	db	95	;'_'
   740  00FEF2  72                 	db	114	;'r'
   741  00FEF3  65                 	db	101	;'e'
   742  00FEF4  6D                 	db	109	;'m'
   743  00FEF5  61                 	db	97	;'a'
   744  00FEF6  69                 	db	105	;'i'
   745  00FEF7  6E                 	db	110	;'n'
   746  00FEF8  3A                 	db	58	;':'
   747  00FEF9  25                 	db	37
   748  00FEFA  64                 	db	100	;'d'
   749  00FEFB  00                 	db	0
   750  00FEFC                     STR_2:
   751  00FEFC  32                 	db	50	;'2'
   752  00FEFD  3A                 	db	58	;':'
   753  00FEFE  69                 	db	105	;'i'
   754  00FEFF  6E                 	db	110	;'n'
   755  00FF00  73                 	db	115	;'s'
   756  00FF01  74                 	db	116	;'t'
   757  00FF02  72                 	db	114	;'r'
   758  00FF03  75                 	db	117	;'u'
   759  00FF04  63                 	db	99	;'c'
   760  00FF05  74                 	db	116	;'t'
   761  00FF06  69                 	db	105	;'i'
   762  00FF07  6F                 	db	111	;'o'
   763  00FF08  6E                 	db	110	;'n'
   764  00FF09  00                 	db	0
   765  00FF0A                     STR_26:
   766  00FF0A  42                 	db	66	;'B'
   767  00FF0B  5F                 	db	95	;'_'
   768  00FF0C  63                 	db	99	;'c'
   769  00FF0D  6F                 	db	111	;'o'
   770  00FF0E  75                 	db	117	;'u'
   771  00FF0F  6E                 	db	110	;'n'
   772  00FF10  74                 	db	116	;'t'
   773  00FF11  65                 	db	101	;'e'
   774  00FF12  72                 	db	114	;'r'
   775  00FF13  3A                 	db	58	;':'
   776  00FF14  25                 	db	37
   777  00FF15  64                 	db	100	;'d'
   778  00FF16  00                 	db	0
   779  00FF17                     STR_29:
   780  00FF17  4E                 	db	78	;'N'
   781  00FF18  5F                 	db	95	;'_'
   782  00FF19  63                 	db	99	;'c'
   783  00FF1A  6F                 	db	111	;'o'
   784  00FF1B  75                 	db	117	;'u'
   785  00FF1C  6E                 	db	110	;'n'
   786  00FF1D  74                 	db	116	;'t'
   787  00FF1E  65                 	db	101	;'e'
   788  00FF1F  72                 	db	114	;'r'
   789  00FF20  3A                 	db	58	;':'
   790  00FF21  25                 	db	37
   791  00FF22  64                 	db	100	;'d'
   792  00FF23  00                 	db	0
   793  00FF24                     STR_32:
   794  00FF24  53                 	db	83	;'S'
   795  00FF25  5F                 	db	95	;'_'
   796  00FF26  63                 	db	99	;'c'
   797  00FF27  6F                 	db	111	;'o'
   798  00FF28  75                 	db	117	;'u'
   799  00FF29  6E                 	db	110	;'n'
   800  00FF2A  74                 	db	116	;'t'
   801  00FF2B  65                 	db	101	;'e'
   802  00FF2C  72                 	db	114	;'r'
   803  00FF2D  3A                 	db	58	;':'
   804  00FF2E  25                 	db	37
   805  00FF2F  64                 	db	100	;'d'
   806  00FF30  00                 	db	0
   807  00FF31                     STR_51:
   808  00FF31  25                 	db	37
   809  00FF32  64                 	db	100	;'d'
   810  00FF33  6D                 	db	109	;'m'
   811  00FF34  69                 	db	105	;'i'
   812  00FF35  6E                 	db	110	;'n'
   813  00FF36  20                 	db	32
   814  00FF37  25                 	db	37
   815  00FF38  64                 	db	100	;'d'
   816  00FF39  73                 	db	115	;'s'
   817  00FF3A  65                 	db	101	;'e'
   818  00FF3B  63                 	db	99	;'c'
   819  00FF3C  73                 	db	115	;'s'
   820  00FF3D  00                 	db	0
   821  00FF3E                     STR_25:
   822  00FF3E  43                 	db	67	;'C'
   823  00FF3F  30                 	db	48	;'0'
   824  00FF40  20                 	db	32
   825  00FF41  69                 	db	105	;'i'
   826  00FF42  73                 	db	115	;'s'
   827  00FF43  20                 	db	32
   828  00FF44  66                 	db	102	;'f'
   829  00FF45  6F                 	db	111	;'o'
   830  00FF46  75                 	db	117	;'u'
   831  00FF47  6E                 	db	110	;'n'
   832  00FF48  64                 	db	100	;'d'
   833  00FF49  00                 	db	0
   834  00FF4A                     STR_42:
   835  00FF4A  79                 	db	121	;'y'
   836  00FF4B  6F                 	db	111	;'o'
   837  00FF4C  75                 	db	117	;'u'
   838  00FF4D  27                 	db	39
   839  00FF4E  72                 	db	114	;'r'
   840  00FF4F  65                 	db	101	;'e'
   841  00FF50  20                 	db	32
   842  00FF51  64                 	db	100	;'d'
   843  00FF52  6F                 	db	111	;'o'
   844  00FF53  6E                 	db	110	;'n'
   845  00FF54  65                 	db	101	;'e'
   846  00FF55  00                 	db	0
   847  00FF56                     STR_65:
   848  00FF56  57                 	db	87	;'W'
   849  00FF57  72                 	db	114	;'r'
   850  00FF58  6F                 	db	111	;'o'
   851  00FF59  6E                 	db	110	;'n'
   852  00FF5A  67                 	db	103	;'g'
   853  00FF5B  20                 	db	32
   854  00FF5C  69                 	db	105	;'i'
   855  00FF5D  6E                 	db	110	;'n'
   856  00FF5E  70                 	db	112	;'p'
   857  00FF5F  75                 	db	117	;'u'
   858  00FF60  74                 	db	116	;'t'
   859  00FF61  00                 	db	0
   860  00FF62                     STR_60:
   861  00FF62  77                 	db	119	;'w'
   862  00FF63  72                 	db	114	;'r'
   863  00FF64  6F                 	db	111	;'o'
   864  00FF65  6E                 	db	110	;'n'
   865  00FF66  67                 	db	103	;'g'
   866  00FF67  20                 	db	32
   867  00FF68  73                 	db	115	;'s'
   868  00FF69  65                 	db	101	;'e'
   869  00FF6A  74                 	db	116	;'t'
   870  00FF6B  21                 	db	33
   871  00FF6C  00                 	db	0
   872  00FF6D                     STR_27:
   873  00FF6D  42                 	db	66	;'B'
   874  00FF6E  5F                 	db	95	;'_'
   875  00FF6F  63                 	db	99	;'c'
   876  00FF70  6F                 	db	111	;'o'
   877  00FF71  75                 	db	117	;'u'
   878  00FF72  6E                 	db	110	;'n'
   879  00FF73  74                 	db	116	;'t'
   880  00FF74  3A                 	db	58	;':'
   881  00FF75  25                 	db	37
   882  00FF76  64                 	db	100	;'d'
   883  00FF77  00                 	db	0
   884  00FF78                     STR_45:
   885  00FF78  33                 	db	51	;'3'
   886  00FF79  3A                 	db	58	;':'
   887  00FF7A  73                 	db	115	;'s'
   888  00FF7B  75                 	db	117	;'u'
   889  00FF7C  6D                 	db	109	;'m'
   890  00FF7D  6D                 	db	109	;'m'
   891  00FF7E  61                 	db	97	;'a'
   892  00FF7F  72                 	db	114	;'r'
   893  00FF80  79                 	db	121	;'y'
   894  00FF81  00                 	db	0
   895  00FF82                     STR_57:
   896  00FF82  63                 	db	99	;'c'
   897  00FF83  6F                 	db	111	;'o'
   898  00FF84  72                 	db	114	;'r'
   899  00FF85  72                 	db	114	;'r'
   900  00FF86  65                 	db	101	;'e'
   901  00FF87  63                 	db	99	;'c'
   902  00FF88  74                 	db	116	;'t'
   903  00FF89  21                 	db	33
   904  00FF8A  00                 	db	0
   905  00FF8B                     STR_66:
   906  00FF8B  54                 	db	84	;'T'
   907  00FF8C  4F                 	db	79	;'O'
   908  00FF8D  4F                 	db	79	;'O'
   909  00FF8E  20                 	db	32
   910  00FF8F  4D                 	db	77	;'M'
   911  00FF90  41                 	db	65	;'A'
   912  00FF91  4E                 	db	78	;'N'
   913  00FF92  59                 	db	89	;'Y'
   914  00FF93  00                 	db	0
   915  00FF94                     STR_6:
   916  00FF94  6E                 	db	110	;'n'
   917  00FF95  75                 	db	117	;'u'
   918  00FF96  6D                 	db	109	;'m'
   919  00FF97  62                 	db	98	;'b'
   920  00FF98  65                 	db	101	;'e'
   921  00FF99  72                 	db	114	;'r'
   922  00FF9A  3A                 	db	58	;':'
   923  00FF9B  00                 	db	0
   924  00FF9C                     STR_88:
   925  00FF9C  28                 	db	40
   926  00FF9D  6E                 	db	110	;'n'
   927  00FF9E  75                 	db	117	;'u'
   928  00FF9F  6C                 	db	108	;'l'
   929  00FFA0  6C                 	db	108	;'l'
   930  00FFA1  29                 	db	41
   931  00FFA2  00                 	db	0
   932  00FFA3                     STR_63:
   933  00FFA3  77                 	db	119	;'w'
   934  00FFA4  72                 	db	114	;'r'
   935  00FFA5  6F                 	db	111	;'o'
   936  00FFA6  6E                 	db	110	;'n'
   937  00FFA7  67                 	db	103	;'g'
   938  00FFA8  21                 	db	33
   939  00FFA9  00                 	db	0
   940  00FFAA                     STR_7:
   941  00FFAA  44                 	db	68	;'D'
   942  00FFAB  6F                 	db	111	;'o'
   943  00FFAC  6E                 	db	110	;'n'
   944  00FFAD  65                 	db	101	;'e'
   945  00FFAE  21                 	db	33
   946  00FFAF  00                 	db	0
   947  00FFB0                     STR_86:
   948  00FFB0  42                 	db	66	;'B'
   949  00FFB1  4E                 	db	78	;'N'
   950  00FFB2  4E                 	db	78	;'N'
   951  00FFB3  4E                 	db	78	;'N'
   952  00FFB4  00                 	db	0
   953  00FFB5                     STR_84:
   954  00FFB5  42                 	db	66	;'B'
   955  00FFB6  42                 	db	66	;'B'
   956  00FFB7  4E                 	db	78	;'N'
   957  00FFB8  57                 	db	87	;'W'
   958  00FFB9  00                 	db	0
   959  00FFBA                     STR_85:
   960  00FFBA  42                 	db	66	;'B'
   961  00FFBB  4E                 	db	78	;'N'
   962  00FFBC  4E                 	db	78	;'N'
   963  00FFBD  57                 	db	87	;'W'
   964  00FFBE  00                 	db	0
   965  00FFBF                     STR_83:
   966  00FFBF  42                 	db	66	;'B'
   967  00FFC0  42                 	db	66	;'B'
   968  00FFC1  53                 	db	83	;'S'
   969  00FFC2  57                 	db	87	;'W'
   970  00FFC3  00                 	db	0
   971  00FFC4                     STR_81:
   972  00FFC4  42                 	db	66	;'B'
   973  00FFC5  4E                 	db	78	;'N'
   974  00FFC6  57                 	db	87	;'W'
   975  00FFC7  57                 	db	87	;'W'
   976  00FFC8  00                 	db	0
   977  00FFC9                     STR_82:
   978  00FFC9  42                 	db	66	;'B'
   979  00FFCA  53                 	db	83	;'S'
   980  00FFCB  57                 	db	87	;'W'
   981  00FFCC  57                 	db	87	;'W'
   982  00FFCD  00                 	db	0
   983  00FFCE                     STR_87:
   984  00FFCE  42                 	db	66	;'B'
   985  00FFCF  57                 	db	87	;'W'
   986  00FFD0  57                 	db	87	;'W'
   987  00FFD1  57                 	db	87	;'W'
   988  00FFD2  00                 	db	0
   989  00FFD3                     STR_9:
   990  00FFD3  73                 	db	115	;'s'
   991  00FFD4  74                 	db	116	;'t'
   992  00FFD5  65                 	db	101	;'e'
   993  00FFD6  70                 	db	112	;'p'
   994  00FFD7  00                 	db	0
   995  00FFD8                     STR_75:
   996  00FFD8  42                 	db	66	;'B'
   997  00FFD9  42                 	db	66	;'B'
   998  00FFDA  4E                 	db	78	;'N'
   999  00FFDB  00                 	db	0
  1000  00FFDC                     STR_76:
  1001  00FFDC  42                 	db	66	;'B'
  1002  00FFDD  42                 	db	66	;'B'
  1003  00FFDE  53                 	db	83	;'S'
  1004  00FFDF  00                 	db	0
  1005  00FFE0                     STR_77:
  1006  00FFE0  42                 	db	66	;'B'
  1007  00FFE1  42                 	db	66	;'B'
  1008  00FFE2  57                 	db	87	;'W'
  1009  00FFE3  00                 	db	0
  1010  00FFE4                     STR_80:
  1011  00FFE4  42                 	db	66	;'B'
  1012  00FFE5  57                 	db	87	;'W'
  1013  00FFE6  57                 	db	87	;'W'
  1014  00FFE7  00                 	db	0
  1015  00FFE8                     STR_16:
  1016  00FFE8  20                 	db	32
  1017  00FFE9  42                 	db	66	;'B'
  1018  00FFEA  3A                 	db	58	;':'
  1019  00FFEB  00                 	db	0
  1020  00FFEC                     STR_18:
  1021  00FFEC  20                 	db	32
  1022  00FFED  4E                 	db	78	;'N'
  1023  00FFEE  3A                 	db	58	;':'
  1024  00FFEF  00                 	db	0
  1025  00FFF0                     STR_20:
  1026  00FFF0  20                 	db	32
  1027  00FFF1  53                 	db	83	;'S'
  1028  00FFF2  3A                 	db	58	;':'
  1029  00FFF3  00                 	db	0
  1030  00FFF4                     STR_22:
  1031  00FFF4  20                 	db	32
  1032  00FFF5  57                 	db	87	;'W'
  1033  00FFF6  3A                 	db	58	;':'
  1034  00FFF7  00                 	db	0
  1035  00FFF8                     STR_5:
  1036  00FFF8  25                 	db	37
  1037  00FFF9  73                 	db	115	;'s'
  1038  00FFFA  00                 	db	0
  1039  00FFFB                     STR_13:
  1040  00FFFB  2C                 	db	44
  1041  00FFFC  00                 	db	0
  1042  00FFFD                     STR_53:
  1043  00FFFD  42                 	db	66	;'B'
  1044  00FFFE  00                 	db	0
  1045  0000                     
  1046                           ; #config settings
  1047  00FFFF  00                 	db	0	; dummy byte at the end
  1048  0000                     
  1049                           	psect	cinit
  1050  0037FA                     __pcinit:
  1051                           	opt stack 0
  1052  0037FA                     start_initialization:
  1053                           	opt stack 0
  1054  0037FA                     __initialization:
  1055                           	opt stack 0
  1056                           
  1057                           ; Initialize objects allocated to BANK1 (10 bytes)
  1058                           ; load TBLPTR registers with __pidataBANK1
  1059  0037FA  0E05               	movlw	low __pidataBANK1
  1060  0037FC  6EF6               	movwf	tblptrl,c
  1061  0037FE  0E3E               	movlw	high __pidataBANK1
  1062  003800  6EF7               	movwf	tblptrh,c
  1063  003802  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1064  003804  6EF8               	movwf	tblptru,c
  1065  003806  EE01  F0C7         	lfsr	0,__pdataBANK1
  1066  00380A  EE10 F00A          	lfsr	1,10
  1067  00380E                     copy_data0:
  1068  00380E  0009               	tblrd		*+
  1069  003810  CFF5 FFEE          	movff	tablat,postinc0
  1070  003814  50E5               	movf	postdec1,w,c
  1071  003816  50E1               	movf	fsr1l,w,c
  1072  003818  E1FA               	bnz	copy_data0
  1073                           
  1074                           ; Initialize objects allocated to BANK0 (15 bytes)
  1075                           ; load TBLPTR registers with __pidataBANK0
  1076  00381A  0EF6               	movlw	low __pidataBANK0
  1077  00381C  6EF6               	movwf	tblptrl,c
  1078  00381E  0E3D               	movlw	high __pidataBANK0
  1079  003820  6EF7               	movwf	tblptrh,c
  1080  003822  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1081  003824  6EF8               	movwf	tblptru,c
  1082  003826  EE00  F0F1         	lfsr	0,__pdataBANK0
  1083  00382A  EE10 F00F          	lfsr	1,15
  1084  00382E                     copy_data1:
  1085  00382E  0009               	tblrd		*+
  1086  003830  CFF5 FFEE          	movff	tablat,postinc0
  1087  003834  50E5               	movf	postdec1,w,c
  1088  003836  50E1               	movf	fsr1l,w,c
  1089  003838  E1FA               	bnz	copy_data1
  1090                           
  1091                           ; Clear objects allocated to BANK2 (200 bytes)
  1092  00383A  EE02  F000         	lfsr	0,__pbssBANK2
  1093  00383E  0EC8               	movlw	200
  1094  003840                     clear_0:
  1095  003840  6AEE               	clrf	postinc0,c
  1096  003842  06E8               	decf	wreg,f,c
  1097  003844  E1FD               	bnz	clear_0
  1098                           
  1099                           ; Clear objects allocated to BANK1 (199 bytes)
  1100  003846  EE01  F000         	lfsr	0,__pbssBANK1
  1101  00384A  0EC7               	movlw	199
  1102  00384C                     clear_1:
  1103  00384C  6AEE               	clrf	postinc0,c
  1104  00384E  06E8               	decf	wreg,f,c
  1105  003850  E1FD               	bnz	clear_1
  1106                           
  1107                           ; Clear objects allocated to BANK0 (72 bytes)
  1108  003852  EE00  F080         	lfsr	0,__pbssBANK0
  1109  003856  0E48               	movlw	72
  1110  003858                     clear_2:
  1111  003858  6AEE               	clrf	postinc0,c
  1112  00385A  06E8               	decf	wreg,f,c
  1113  00385C  E1FD               	bnz	clear_2
  1114                           
  1115                           ; Clear objects allocated to COMRAM (61 bytes)
  1116  00385E  EE00  F042         	lfsr	0,__pbssCOMRAM
  1117  003862  0E3D               	movlw	61
  1118  003864                     clear_3:
  1119  003864  6AEE               	clrf	postinc0,c
  1120  003866  06E8               	decf	wreg,f,c
  1121  003868  E1FD               	bnz	clear_3
  1122  00386A                     end_of_initialization:
  1123                           	opt stack 0
  1124  00386A                     __end_of__initialization:
  1125                           	opt stack 0
  1126  00386A  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1127  00386C  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1128  00386E  0100               	movlb	0
  1129  003870  EF31  F007         	goto	_main	;jump to C main() function
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           postdec1	equ	0xFE5
  1137                           fsr1l	equ	0xFE1
  1138                           
  1139                           	psect	bssCOMRAM
  1140  000042                     __pbssCOMRAM:
  1141                           	opt stack 0
  1142  000042                     _compartment_number:
  1143                           	opt stack 0
  1144  000042                     	ds	16
  1145  000052                     _time:
  1146                           	opt stack 0
  1147  000052                     	ds	7
  1148  000059                     _sec_initial:
  1149                           	opt stack 0
  1150  000059                     	ds	2
  1151  00005B                     _min_initial:
  1152                           	opt stack 0
  1153  00005B                     	ds	2
  1154  00005D                     _hr_initial:
  1155                           	opt stack 0
  1156  00005D                     	ds	2
  1157  00005F                     _W:
  1158                           	opt stack 0
  1159  00005F                     	ds	2
  1160  000061                     _S:
  1161                           	opt stack 0
  1162  000061                     	ds	2
  1163  000063                     _N:
  1164                           	opt stack 0
  1165  000063                     	ds	2
  1166  000065                     _B:
  1167                           	opt stack 0
  1168  000065                     	ds	2
  1169  000067                     _prev_state:
  1170                           	opt stack 0
  1171  000067                     	ds	2
  1172  000069                     _total_number:
  1173                           	opt stack 0
  1174  000069                     	ds	2
  1175  00006B                     _valid:
  1176                           	opt stack 0
  1177  00006B                     	ds	2
  1178  00006D                     _counter_step:
  1179                           	opt stack 0
  1180  00006D                     	ds	2
  1181  00006F                     _counter:
  1182                           	opt stack 0
  1183  00006F                     	ds	2
  1184  000071                     _operationTime:
  1185                           	opt stack 0
  1186  000071                     	ds	2
  1187  000073                     _operation:
  1188                           	opt stack 0
  1189  000073                     	ds	2
  1190  000075                     _j:
  1191                           	opt stack 0
  1192  000075                     	ds	1
  1193  000076                     _temp:
  1194                           	opt stack 0
  1195  000076                     	ds	1
  1196  000077                     	ds	1
  1197  000078                     _current_set2:
  1198                           	opt stack 0
  1199  000078                     	ds	5
  1200  00007D                     _number:
  1201                           	opt stack 0
  1202  00007D                     	ds	2
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           postdec1	equ	0xFE5
  1210                           fsr1l	equ	0xFE1
  1211                           
  1212                           	psect	bssBANK0
  1213  000080                     __pbssBANK0:
  1214                           	opt stack 0
  1215  000080                     _compartment_array:
  1216                           	opt stack 0
  1217  000080                     	ds	16
  1218  000090                     _final_time:
  1219                           	opt stack 0
  1220  000090                     	ds	2
  1221  000092                     _sec_final:
  1222                           	opt stack 0
  1223  000092                     	ds	2
  1224  000094                     _min_final:
  1225                           	opt stack 0
  1226  000094                     	ds	2
  1227  000096                     _hr_final:
  1228                           	opt stack 0
  1229  000096                     	ds	2
  1230  000098                     _initial_time:
  1231                           	opt stack 0
  1232  000098                     	ds	2
  1233  00009A                     _W_remain:
  1234                           	opt stack 0
  1235  00009A                     	ds	2
  1236  00009C                     _S_remain:
  1237                           	opt stack 0
  1238  00009C                     	ds	2
  1239  00009E                     _N_remain:
  1240                           	opt stack 0
  1241  00009E                     	ds	2
  1242  0000A0                     _B_remain:
  1243                           	opt stack 0
  1244  0000A0                     	ds	2
  1245  0000A2                     _W_counter:
  1246                           	opt stack 0
  1247  0000A2                     	ds	2
  1248  0000A4                     _N_counter:
  1249                           	opt stack 0
  1250  0000A4                     	ds	2
  1251  0000A6                     _S_counter:
  1252                           	opt stack 0
  1253  0000A6                     	ds	2
  1254  0000A8                     _B_counter:
  1255                           	opt stack 0
  1256  0000A8                     	ds	2
  1257  0000AA                     _assembly_step:
  1258                           	opt stack 0
  1259  0000AA                     	ds	2
  1260  0000AC                     _state:
  1261                           	opt stack 0
  1262  0000AC                     	ds	2
  1263  0000AE                     _compartment_pos:
  1264                           	opt stack 0
  1265  0000AE                     	ds	2
  1266  0000B0                     _prev:
  1267                           	opt stack 0
  1268  0000B0                     	ds	2
  1269  0000B2                     _gear_counter:
  1270                           	opt stack 0
  1271  0000B2                     	ds	2
  1272  0000B4                     _operation_done:
  1273                           	opt stack 0
  1274  0000B4                     	ds	2
  1275  0000B6                     _change_mode:
  1276                           	opt stack 0
  1277  0000B6                     	ds	2
  1278  0000B8                     _mode:
  1279                           	opt stack 0
  1280  0000B8                     	ds	2
  1281  0000BA                     _white_tape:
  1282                           	opt stack 0
  1283  0000BA                     	ds	2
  1284  0000BC                     _i:
  1285                           	opt stack 0
  1286  0000BC                     	ds	2
  1287  0000BE                     _angle:
  1288                           	opt stack 0
  1289  0000BE                     	ds	2
  1290  0000C0                     _nuts_data:
  1291                           	opt stack 0
  1292  0000C0                     	ds	1
  1293  0000C1                     _openHandle_data:
  1294                           	opt stack 0
  1295  0000C1                     	ds	1
  1296  0000C2                     _LCDinterruptState:
  1297                           	opt stack 0
  1298  0000C2                     	ds	1
  1299  0000C3                     _current_set:
  1300                           	opt stack 0
  1301  0000C3                     	ds	5
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postdec1	equ	0xFE5
  1309                           fsr1l	equ	0xFE1
  1310                           
  1311                           	psect	dataBANK0
  1312  0000F1                     __pdataBANK0:
  1313                           	opt stack 0
  1314  0000F1                     _close_handle:
  1315                           	opt stack 0
  1316  0000F1                     	ds	1
  1317  0000F2                     _servo_ramp:
  1318                           	opt stack 0
  1319  0000F2                     	ds	1
  1320  0000F3                     _motorStop_3:
  1321                           	opt stack 0
  1322  0000F3                     	ds	1
  1323  0000F4                     _motorStart_3:
  1324                           	opt stack 0
  1325  0000F4                     	ds	1
  1326  0000F5                     _motorStop_2:
  1327                           	opt stack 0
  1328  0000F5                     	ds	1
  1329  0000F6                     _motorStart_2:
  1330                           	opt stack 0
  1331  0000F6                     	ds	1
  1332  0000F7                     _motorStop_1:
  1333                           	opt stack 0
  1334  0000F7                     	ds	1
  1335  0000F8                     _motorStart_1:
  1336                           	opt stack 0
  1337  0000F8                     	ds	1
  1338  0000F9                     _motorStop_0:
  1339                           	opt stack 0
  1340  0000F9                     	ds	1
  1341  0000FA                     _motorStart_0:
  1342                           	opt stack 0
  1343  0000FA                     	ds	1
  1344  0000FB                     _S_dispense:
  1345                           	opt stack 0
  1346  0000FB                     	ds	1
  1347  0000FC                     _N_dispense:
  1348                           	opt stack 0
  1349  0000FC                     	ds	1
  1350  0000FD                     _B_dispense:
  1351                           	opt stack 0
  1352  0000FD                     	ds	1
  1353  0000FE                     _rotate_1compartment:
  1354                           	opt stack 0
  1355  0000FE                     	ds	1
  1356  0000FF                     _rotate_gear:
  1357                           	opt stack 0
  1358  0000FF                     	ds	1
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           postinc0	equ	0xFEE
  1364                           wreg	equ	0xFE8
  1365                           postdec1	equ	0xFE5
  1366                           fsr1l	equ	0xFE1
  1367                           
  1368                           	psect	bssBANK1
  1369  000100                     __pbssBANK1:
  1370                           	opt stack 0
  1371  000100                     _W_array:
  1372                           	opt stack 0
  1373  000100                     	ds	16
  1374  000110                     _N_array:
  1375                           	opt stack 0
  1376  000110                     	ds	16
  1377  000120                     _S_array:
  1378                           	opt stack 0
  1379  000120                     	ds	16
  1380  000130                     _B_array:
  1381                           	opt stack 0
  1382  000130                     	ds	16
  1383  000140                     _prev_number:
  1384                           	opt stack 0
  1385  000140                     	ds	16
  1386  000150                     _final_number:
  1387                           	opt stack 0
  1388  000150                     	ds	16
  1389  000160                     _W_done:
  1390                           	opt stack 0
  1391  000160                     	ds	2
  1392  000162                     _S_done:
  1393                           	opt stack 0
  1394  000162                     	ds	2
  1395  000164                     _N_done:
  1396                           	opt stack 0
  1397  000164                     	ds	2
  1398  000166                     _B_done:
  1399                           	opt stack 0
  1400  000166                     	ds	2
  1401  000168                     _W_spacingTime:
  1402                           	opt stack 0
  1403  000168                     	ds	2
  1404  00016A                     _S_spacingTime:
  1405                           	opt stack 0
  1406  00016A                     	ds	2
  1407  00016C                     _N_spacingTime:
  1408                           	opt stack 0
  1409  00016C                     	ds	2
  1410  00016E                     _B_spacingTime:
  1411                           	opt stack 0
  1412  00016E                     	ds	2
  1413  000170                     _error:
  1414                           	opt stack 0
  1415  000170                     	ds	2
  1416  000172                     _prev_set:
  1417                           	opt stack 0
  1418  000172                     	ds	40
  1419  00019A                     _final_set:
  1420                           	opt stack 0
  1421  00019A                     	ds	40
  1422  0001C2                     _temp_set:
  1423                           	opt stack 0
  1424  0001C2                     	ds	5
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           postdec1	equ	0xFE5
  1432                           fsr1l	equ	0xFE1
  1433                           
  1434                           	psect	dataBANK1
  1435  0001C7                     __pdataBANK1:
  1436                           	opt stack 0
  1437  0001C7                     _W_max:
  1438                           	opt stack 0
  1439  0001C7                     	ds	2
  1440  0001C9                     _S_max:
  1441                           	opt stack 0
  1442  0001C9                     	ds	2
  1443  0001CB                     _N_max:
  1444                           	opt stack 0
  1445  0001CB                     	ds	2
  1446  0001CD                     _B_max:
  1447                           	opt stack 0
  1448  0001CD                     	ds	2
  1449  0001CF                     _init_position:
  1450                           	opt stack 0
  1451  0001CF                     	ds	2
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           postdec1	equ	0xFE5
  1459                           fsr1l	equ	0xFE1
  1460                           
  1461                           	psect	bssBANK2
  1462  000200                     __pbssBANK2:
  1463                           	opt stack 0
  1464  000200                     _fastener:
  1465                           	opt stack 0
  1466  000200                     	ds	200
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           
  1476                           	psect	cstackBANK0
  1477  0000C8                     __pcstackBANK0:
  1478                           	opt stack 0
  1479  0000C8                     ??_isdigit:
  1480  0000C8                     ??_I2C_Master_Wait:
  1481  0000C8                     ?_readADC:
  1482                           	opt stack 0
  1483  0000C8                     ?___awdiv:
  1484                           	opt stack 0
  1485  0000C8                     ?___lwdiv:
  1486                           	opt stack 0
  1487  0000C8                     lcdNibble@temp:
  1488                           	opt stack 0
  1489  0000C8                     ___awdiv@dividend:
  1490                           	opt stack 0
  1491  0000C8                     ___lwdiv@dividend:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x0
  1495  0000C8                     	ds	1
  1496  0000C9                     lcdNibble@data:
  1497                           	opt stack 0
  1498  0000C9                     I2C_Master_Read@ackBit:
  1499                           	opt stack 0
  1500  0000C9                     _isdigit$1280:
  1501                           	opt stack 0
  1502  0000C9                     I2C_Master_Write@byteToWrite:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x1
  1506  0000C9                     	ds	1
  1507  0000CA                     ??_readADC:
  1508  0000CA                     lcdInst@data:
  1509                           	opt stack 0
  1510  0000CA                     putch@data:
  1511                           	opt stack 0
  1512  0000CA                     I2C_Master_Read@receivedByte:
  1513                           	opt stack 0
  1514  0000CA                     isdigit@c:
  1515                           	opt stack 0
  1516  0000CA                     ___awdiv@divisor:
  1517                           	opt stack 0
  1518  0000CA                     ___lwdiv@divisor:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x2
  1522  0000CA                     	ds	1
  1523  0000CB                     ??_initLCD:
  1524  0000CB                     I2C_sendData@char_data:
  1525                           	opt stack 0
  1526                           
  1527                           ; 1 bytes @ 0x3
  1528  0000CB                     	ds	1
  1529  0000CC                     readADC@channel:
  1530                           	opt stack 0
  1531  0000CC                     ___awdiv@counter:
  1532                           	opt stack 0
  1533  0000CC                     ___lwdiv@quotient:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x4
  1537  0000CC                     	ds	1
  1538  0000CD                     ___awdiv@sign:
  1539                           	opt stack 0
  1540                           
  1541                           ; 1 bytes @ 0x5
  1542  0000CD                     	ds	1
  1543  0000CE                     ___lwdiv@counter:
  1544                           	opt stack 0
  1545  0000CE                     ___awdiv@quotient:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x6
  1549  0000CE                     	ds	1
  1550  0000CF                     ?___lwmod:
  1551                           	opt stack 0
  1552  0000CF                     ___lwmod@dividend:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x7
  1556  0000CF                     	ds	1
  1557  0000D0                     ?___wmul:
  1558                           	opt stack 0
  1559  0000D0                     ___wmul@multiplier:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x8
  1563  0000D0                     	ds	1
  1564  0000D1                     ___lwmod@divisor:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x9
  1568  0000D1                     	ds	1
  1569  0000D2                     ___wmul@multiplicand:
  1570                           	opt stack 0
  1571                           
  1572                           ; 2 bytes @ 0xA
  1573  0000D2                     	ds	1
  1574  0000D3                     ___lwmod@counter:
  1575                           	opt stack 0
  1576                           
  1577                           ; 1 bytes @ 0xB
  1578  0000D3                     	ds	1
  1579  0000D4                     ___wmul@product:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0xC
  1583  0000D4                     	ds	2
  1584  0000D6                     ??_get_RTC_initial:
  1585  0000D6                     ??_get_RTC_final:
  1586  0000D6                     ?_printf:
  1587                           	opt stack 0
  1588  0000D6                     printf@f:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0xE
  1592  0000D6                     	ds	4
  1593  0000DA                     ??_printf:
  1594                           
  1595                           ; 1 bytes @ 0x12
  1596  0000DA                     	ds	4
  1597  0000DE                     printf@idx:
  1598                           	opt stack 0
  1599                           
  1600                           ; 1 bytes @ 0x16
  1601  0000DE                     	ds	1
  1602  0000DF                     printf@prec:
  1603                           	opt stack 0
  1604                           
  1605                           ; 1 bytes @ 0x17
  1606  0000DF                     	ds	1
  1607  0000E0                     printf@cp:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x18
  1611  0000E0                     	ds	2
  1612  0000E2                     printf@ap:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x1A
  1616  0000E2                     	ds	2
  1617  0000E4                     printf@len:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x1C
  1621  0000E4                     	ds	2
  1622  0000E6                     printf@val:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x1E
  1626  0000E6                     	ds	2
  1627  0000E8                     printf@flag:
  1628                           	opt stack 0
  1629                           
  1630                           ; 1 bytes @ 0x20
  1631  0000E8                     	ds	1
  1632  0000E9                     printf@width:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x21
  1636  0000E9                     	ds	2
  1637  0000EB                     printf@c:
  1638                           	opt stack 0
  1639                           
  1640                           ; 1 bytes @ 0x23
  1641  0000EB                     	ds	1
  1642  0000EC                     ??_main:
  1643                           
  1644                           ; 1 bytes @ 0x24
  1645  0000EC                     	ds	3
  1646  0000EF                     _main$1669:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x27
  1650  0000EF                     	ds	2
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           
  1660                           	psect	cstackCOMRAM
  1661  000001                     __pcstackCOMRAM:
  1662                           	opt stack 0
  1663  000001                     ??i2_I2C_Master_Wait:
  1664  000001                     ??i2_isdigit:
  1665  000001                     ?_check:
  1666                           	opt stack 0
  1667  000001                     ?_strcmp:
  1668                           	opt stack 0
  1669  000001                     ?___awmod:
  1670                           	opt stack 0
  1671  000001                     ?i2___wmul:
  1672                           	opt stack 0
  1673  000001                     ?i2___awdiv:
  1674                           	opt stack 0
  1675  000001                     ?i2___lwdiv:
  1676                           	opt stack 0
  1677  000001                     ?___lldiv:
  1678                           	opt stack 0
  1679  000001                     i2lcdNibble@temp:
  1680                           	opt stack 0
  1681  000001                     generate_compartment_array@step:
  1682                           	opt stack 0
  1683  000001                     ___awmod@dividend:
  1684                           	opt stack 0
  1685  000001                     strcat@to:
  1686                           	opt stack 0
  1687  000001                     strcmp@s1:
  1688                           	opt stack 0
  1689  000001                     i2___wmul@multiplier:
  1690                           	opt stack 0
  1691  000001                     i2___awdiv@dividend:
  1692                           	opt stack 0
  1693  000001                     i2___lwdiv@dividend:
  1694                           	opt stack 0
  1695  000001                     ___lldiv@dividend:
  1696                           	opt stack 0
  1697                           
  1698                           ; 4 bytes @ 0x0
  1699  000001                     	ds	1
  1700  000002                     i2lcdNibble@data:
  1701                           	opt stack 0
  1702  000002                     i2I2C_Master_Read@ackBit:
  1703                           	opt stack 0
  1704  000002                     i2_isdigit$1280:
  1705                           	opt stack 0
  1706  000002                     i2I2C_Master_Write@byteToWrite:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0x1
  1710  000002                     	ds	1
  1711  000003                     ??_generate_compartment_array:
  1712  000003                     i2lcdInst@data:
  1713                           	opt stack 0
  1714  000003                     i2putch@data:
  1715                           	opt stack 0
  1716  000003                     i2I2C_Master_Read@receivedByte:
  1717                           	opt stack 0
  1718  000003                     i2isdigit@c:
  1719                           	opt stack 0
  1720  000003                     ___awmod@divisor:
  1721                           	opt stack 0
  1722  000003                     strcat@from:
  1723                           	opt stack 0
  1724  000003                     strcmp@s2:
  1725                           	opt stack 0
  1726  000003                     i2___wmul@multiplicand:
  1727                           	opt stack 0
  1728  000003                     i2___awdiv@divisor:
  1729                           	opt stack 0
  1730  000003                     i2___lwdiv@divisor:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x2
  1734  000003                     	ds	1
  1735  000004                     ??i2_initLCD:
  1736  000004                     
  1737                           ; 1 bytes @ 0x3
  1738  000004                     	ds	1
  1739  000005                     ??_strcmp:
  1740  000005                     ___awmod@counter:
  1741                           	opt stack 0
  1742  000005                     i2___awdiv@counter:
  1743                           	opt stack 0
  1744  000005                     strcat@cp:
  1745                           	opt stack 0
  1746  000005                     i2___wmul@product:
  1747                           	opt stack 0
  1748  000005                     i2___lwdiv@quotient:
  1749                           	opt stack 0
  1750  000005                     ___lldiv@divisor:
  1751                           	opt stack 0
  1752                           
  1753                           ; 4 bytes @ 0x4
  1754  000005                     	ds	1
  1755  000006                     ___awmod@sign:
  1756                           	opt stack 0
  1757  000006                     strcmp@r:
  1758                           	opt stack 0
  1759  000006                     i2___awdiv@sign:
  1760                           	opt stack 0
  1761                           
  1762                           ; 1 bytes @ 0x5
  1763  000006                     	ds	1
  1764  000007                     ??_is_valid:
  1765  000007                     ?_strncmp:
  1766                           	opt stack 0
  1767  000007                     i2___lwdiv@counter:
  1768                           	opt stack 0
  1769  000007                     strcpy@to:
  1770                           	opt stack 0
  1771  000007                     strncmp@s1:
  1772                           	opt stack 0
  1773  000007                     i2___awdiv@quotient:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x6
  1777  000007                     	ds	1
  1778  000008                     ?i2___lwmod:
  1779                           	opt stack 0
  1780  000008                     i2___lwmod@dividend:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x7
  1784  000008                     	ds	1
  1785  000009                     strcpy@from:
  1786                           	opt stack 0
  1787  000009                     strncmp@s2:
  1788                           	opt stack 0
  1789  000009                     ___lldiv@quotient:
  1790                           	opt stack 0
  1791                           
  1792                           ; 4 bytes @ 0x8
  1793  000009                     	ds	1
  1794  00000A                     i2___lwmod@divisor:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x9
  1798  00000A                     	ds	1
  1799  00000B                     strcpy@cp:
  1800                           	opt stack 0
  1801  00000B                     strncmp@len:
  1802                           	opt stack 0
  1803                           
  1804                           ; 2 bytes @ 0xA
  1805  00000B                     	ds	1
  1806  00000C                     i2___lwmod@counter:
  1807                           	opt stack 0
  1808                           
  1809                           ; 1 bytes @ 0xB
  1810  00000C                     	ds	1
  1811  00000D                     ??_strncmp:
  1812  00000D                     ?i2_printf:
  1813                           	opt stack 0
  1814  00000D                     ___lldiv@counter:
  1815                           	opt stack 0
  1816  00000D                     i2printf@f:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0xC
  1820  00000D                     	ds	1
  1821  00000E                     I2C_Master_Init@clockFreq:
  1822                           	opt stack 0
  1823                           
  1824                           ; 4 bytes @ 0xD
  1825  00000E                     	ds	4
  1826  000012                     ??_I2C_Master_Init:
  1827                           
  1828                           ; 1 bytes @ 0x11
  1829  000012                     	ds	3
  1830  000015                     ??i2_printf:
  1831                           
  1832                           ; 1 bytes @ 0x14
  1833  000015                     	ds	4
  1834  000019                     i2printf@idx:
  1835                           	opt stack 0
  1836                           
  1837                           ; 1 bytes @ 0x18
  1838  000019                     	ds	1
  1839  00001A                     i2printf@prec:
  1840                           	opt stack 0
  1841                           
  1842                           ; 1 bytes @ 0x19
  1843  00001A                     	ds	1
  1844  00001B                     i2printf@cp:
  1845                           	opt stack 0
  1846                           
  1847                           ; 2 bytes @ 0x1A
  1848  00001B                     	ds	2
  1849  00001D                     i2printf@ap:
  1850                           	opt stack 0
  1851                           
  1852                           ; 2 bytes @ 0x1C
  1853  00001D                     	ds	2
  1854  00001F                     i2printf@len:
  1855                           	opt stack 0
  1856                           
  1857                           ; 2 bytes @ 0x1E
  1858  00001F                     	ds	2
  1859  000021                     i2printf@val:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x20
  1863  000021                     	ds	2
  1864  000023                     i2printf@flag:
  1865                           	opt stack 0
  1866                           
  1867                           ; 1 bytes @ 0x22
  1868  000023                     	ds	1
  1869  000024                     i2printf@width:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x23
  1873  000024                     	ds	2
  1874  000026                     i2printf@c:
  1875                           	opt stack 0
  1876                           
  1877                           ; 1 bytes @ 0x25
  1878  000026                     	ds	1
  1879  000027                     ??_interruptHandler:
  1880                           
  1881                           ; 1 bytes @ 0x26
  1882  000027                     	ds	23
  1883  00003E                     interruptHandler@i:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x3D
  1887  00003E                     	ds	2
  1888  000040                     interruptHandler@keypress:
  1889                           	opt stack 0
  1890                           
  1891                           ; 1 bytes @ 0x3F
  1892  000040                     	ds	1
  1893  000041                     interruptHandler@temp:
  1894                           	opt stack 0
  1895                           
  1896                           ; 1 bytes @ 0x40
  1897  000041                     	ds	1
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           postdec1	equ	0xFE5
  1905                           fsr1l	equ	0xFE1
  1906                           
  1907 ;;
  1908 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1909 ;;
  1910 ;; *************** function _main *****************
  1911 ;; Defined at:
  1912 ;;		line 65 in file "main.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;		None
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;		None
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;Total ram usage:        5 bytes
  1931 ;; Hardware stack levels required when called:    7
  1932 ;; This function calls:
  1933 ;;		_I2C_Master_Read
  1934 ;;		_I2C_Master_Start
  1935 ;;		_I2C_Master_Stop
  1936 ;;		_I2C_Master_Write
  1937 ;;		_I2C_sendData
  1938 ;;		___wmul
  1939 ;;		_get_RTC_final
  1940 ;;		_get_RTC_initial
  1941 ;;		_initLCD
  1942 ;;		_initialize
  1943 ;;		_lcdInst
  1944 ;;		_printf
  1945 ;;		_readADC
  1946 ;; This function is called by:
  1947 ;;		Startup code after reset
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text0
  1952  000E62                     __ptext0:
  1953                           	opt stack 0
  1954  000E62                     _main:
  1955                           	opt stack 24
  1956                           
  1957                           ;main.c: 74: LATA = 0x00;
  1958                           
  1959                           ;incstack = 0
  1960  000E62  0E00               	movlw	0
  1961  000E64  6E89               	movwf	3977,c	;volatile
  1962                           
  1963                           ;main.c: 75: LATB = 0x00;
  1964  000E66  0E00               	movlw	0
  1965  000E68  6E8A               	movwf	3978,c	;volatile
  1966                           
  1967                           ;main.c: 76: LATC = 0x00;
  1968  000E6A  0E00               	movlw	0
  1969  000E6C  6E8B               	movwf	3979,c	;volatile
  1970                           
  1971                           ;main.c: 77: LATD = 0x00;
  1972  000E6E  0E00               	movlw	0
  1973  000E70  6E8C               	movwf	3980,c	;volatile
  1974                           
  1975                           ;main.c: 78: LATE = 0x00;
  1976  000E72  0E00               	movlw	0
  1977  000E74  6E8D               	movwf	3981,c	;volatile
  1978                           
  1979                           ;main.c: 82: TRISA = 0xFF;
  1980  000E76  6892               	setf	3986,c	;volatile
  1981                           
  1982                           ;main.c: 83: TRISB = 0xFF;
  1983  000E78  6893               	setf	3987,c	;volatile
  1984                           
  1985                           ;main.c: 84: TRISC = 0x00;
  1986  000E7A  0E00               	movlw	0
  1987  000E7C  6E94               	movwf	3988,c	;volatile
  1988                           
  1989                           ;main.c: 85: TRISD = 0x00;
  1990  000E7E  0E00               	movlw	0
  1991  000E80  6E95               	movwf	3989,c	;volatile
  1992                           
  1993                           ;main.c: 86: TRISE = 0x00;
  1994  000E82  0E00               	movlw	0
  1995  000E84  6E96               	movwf	3990,c	;volatile
  1996                           
  1997                           ;main.c: 89: ADCON0 = 0x00;
  1998  000E86  0E00               	movlw	0
  1999  000E88  6EC2               	movwf	4034,c	;volatile
  2000                           
  2001                           ;main.c: 90: ADCON1 = 0b00001111;
  2002  000E8A  0E0F               	movlw	15
  2003  000E8C  6EC1               	movwf	4033,c	;volatile
  2004                           
  2005                           ;main.c: 93: INT1IE = 1;
  2006  000E8E  86F0               	bsf	intcon3,3,c	;volatile
  2007                           
  2008                           ;main.c: 94: (INTCONbits.GIE = 1);
  2009  000E90  8EF2               	bsf	intcon,7,c	;volatile
  2010                           
  2011                           ;main.c: 97: initLCD();
  2012  000E92  EC25  F01D         	call	_initLCD	;wreg free
  2013  000E96                     
  2014                           ;main.c: 102: if (mode == 0){
  2015  000E96  0100               	movlb	0	; () banked
  2016  000E98  51B8               	movf	_mode& (0+255),w,b
  2017  000E9A  11B9               	iorwf	(_mode+1)& (0+255),w,b
  2018  000E9C  A4D8               	btfss	status,2,c
  2019  000E9E  D032               	goto	l342
  2020  000EA0                     u3930:
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;main.c: 104: printf("1:date and time");
  2024                           
  2025                           ; BSR set to: 0
  2026                           
  2027                           ;main.c: 103: while(1){
  2028  000EA0  0E75               	movlw	low STR_1
  2029  000EA2  6FD6               	movwf	printf@f& (0+255),b
  2030  000EA4  0EFE               	movlw	high STR_1
  2031  000EA6  6FD7               	movwf	(printf@f+1)& (0+255),b
  2032  000EA8  EC2F  F013         	call	_printf	;wreg free
  2033                           
  2034                           ;main.c: 105: lcdInst(0xC0);;
  2035  000EAC  0EC0               	movlw	192
  2036  000EAE  ECC8  F01E         	call	_lcdInst
  2037                           
  2038                           ;main.c: 106: printf("2:instruction");
  2039  000EB2  0EFC               	movlw	low STR_2
  2040  000EB4  0100               	movlb	0	; () banked
  2041  000EB6  6FD6               	movwf	printf@f& (0+255),b
  2042  000EB8  0EFE               	movlw	high STR_2
  2043  000EBA  6FD7               	movwf	(printf@f+1)& (0+255),b
  2044  000EBC  EC2F  F013         	call	_printf	;wreg free
  2045                           
  2046                           ;main.c: 107: _delay((unsigned long)((300)*(40000000/4000.0)));
  2047  000EC0  0E10               	movlw	16
  2048  000EC2  0100               	movlb	0	; () banked
  2049  000EC4  6FED               	movwf	(??_main+1)& (0+255),b
  2050  000EC6  0E39               	movlw	57
  2051  000EC8  6FEC               	movwf	??_main& (0+255),b
  2052  000ECA  0E0D               	movlw	13
  2053  000ECC                     u4787:
  2054  000ECC  2EE8               	decfsz	wreg,f,c
  2055  000ECE  D7FE               	bra	u4787
  2056  000ED0  2FEC               	decfsz	??_main& (0+255),f,b
  2057  000ED2  D7FC               	bra	u4787
  2058  000ED4  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2059  000ED6  D7FA               	bra	u4787
  2060  000ED8  D000               	nop2	
  2061                           
  2062                           ;main.c: 108: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2063  000EDA  0E80               	movlw	128
  2064  000EDC  ECC8  F01E         	call	_lcdInst
  2065  000EE0  0E41               	movlw	65
  2066  000EE2  0100               	movlb	0	; () banked
  2067  000EE4  6FEC               	movwf	??_main& (0+255),b
  2068  000EE6  0EEE               	movlw	238
  2069  000EE8                     u4797:
  2070  000EE8  2EE8               	decfsz	wreg,f,c
  2071  000EEA  D7FE               	bra	u4797
  2072  000EEC  2FEC               	decfsz	??_main& (0+255),f,b
  2073  000EEE  D7FC               	bra	u4797
  2074  000EF0  F000               	nop	
  2075                           
  2076                           ;main.c: 109: if (change_mode == 1){
  2077  000EF2  0100               	movlb	0	; () banked
  2078  000EF4  05B6               	decf	_change_mode& (0+255),w,b
  2079  000EF6  11B7               	iorwf	(_change_mode+1)& (0+255),w,b
  2080  000EF8  A4D8               	btfss	status,2,c
  2081  000EFA  D7D2               	goto	u3930
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;main.c: 110: mode = 1;
  2085  000EFC  0E00               	movlw	0
  2086  000EFE  6FB9               	movwf	(_mode+1)& (0+255),b
  2087  000F00  0E01               	movlw	1
  2088  000F02  6FB8               	movwf	_mode& (0+255),b
  2089  000F04                     l342:
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 112: }
  2093                           ;main.c: 113: }
  2094                           ;main.c: 115: }
  2095                           ;main.c: 118: if (mode == 1){
  2096                           
  2097                           ; BSR set to: 0
  2098                           
  2099                           ; BSR set to: 0
  2100  000F04  05B8               	decf	_mode& (0+255),w,b
  2101  000F06  11B9               	iorwf	(_mode+1)& (0+255),w,b
  2102  000F08  A4D8               	btfss	status,2,c
  2103  000F0A  D1E5               	goto	l355
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;main.c: 120: initLCD();
  2107  000F0C  EC25  F01D         	call	_initLCD	;wreg free
  2108  000F10                     
  2109                           ;main.c: 123: if (state == 0){
  2110  000F10  0100               	movlb	0	; () banked
  2111  000F12  51AC               	movf	_state& (0+255),w,b
  2112  000F14  11AD               	iorwf	(_state+1)& (0+255),w,b
  2113  000F16  A4D8               	btfss	status,2,c
  2114  000F18  D023               	goto	l346
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;main.c: 125: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2118  000F1A  0E80               	movlw	128
  2119  000F1C  ECC8  F01E         	call	_lcdInst
  2120  000F20  0E41               	movlw	65
  2121  000F22  0100               	movlb	0	; () banked
  2122  000F24  6FEC               	movwf	??_main& (0+255),b
  2123  000F26  0EEE               	movlw	238
  2124  000F28                     u4807:
  2125  000F28  2EE8               	decfsz	wreg,f,c
  2126  000F2A  D7FE               	bra	u4807
  2127  000F2C  2FEC               	decfsz	??_main& (0+255),f,b
  2128  000F2E  D7FC               	bra	u4807
  2129  000F30  F000               	nop	
  2130                           
  2131                           ;main.c: 126: printf("assembly step:");
  2132  000F32  0EA4               	movlw	low STR_3
  2133  000F34  0100               	movlb	0	; () banked
  2134  000F36  6FD6               	movwf	printf@f& (0+255),b
  2135  000F38  0EFE               	movlw	high STR_3
  2136  000F3A  6FD7               	movwf	(printf@f+1)& (0+255),b
  2137  000F3C  EC2F  F013         	call	_printf	;wreg free
  2138                           
  2139                           ;main.c: 127: _delay((unsigned long)((500)*(40000000/4000.0)));
  2140  000F40  0E1A               	movlw	26
  2141  000F42  0100               	movlb	0	; () banked
  2142  000F44  6FED               	movwf	(??_main+1)& (0+255),b
  2143  000F46  0E5E               	movlw	94
  2144  000F48  6FEC               	movwf	??_main& (0+255),b
  2145  000F4A  0E6E               	movlw	110
  2146  000F4C                     u4817:
  2147  000F4C  2EE8               	decfsz	wreg,f,c
  2148  000F4E  D7FE               	bra	u4817
  2149  000F50  2FEC               	decfsz	??_main& (0+255),f,b
  2150  000F52  D7FC               	bra	u4817
  2151  000F54  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2152  000F56  D7FA               	bra	u4817
  2153  000F58  F000               	nop	
  2154                           
  2155                           ;main.c: 128: lcdInst(0xC0);;
  2156  000F5A  0EC0               	movlw	192
  2157  000F5C  ECC8  F01E         	call	_lcdInst
  2158  000F60                     l346:
  2159                           
  2160                           ;main.c: 129: }
  2161                           ;main.c: 130: if (state ==1){
  2162  000F60  0100               	movlb	0	; () banked
  2163  000F62  05AC               	decf	_state& (0+255),w,b
  2164  000F64  11AD               	iorwf	(_state+1)& (0+255),w,b
  2165  000F66  A4D8               	btfss	status,2,c
  2166  000F68  D024               	goto	l347
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;main.c: 131: initLCD();
  2170  000F6A  EC25  F01D         	call	_initLCD	;wreg free
  2171                           
  2172                           ;main.c: 132: printf("fastener set:");
  2173  000F6E  0EE0               	movlw	low STR_4
  2174  000F70  0100               	movlb	0	; () banked
  2175  000F72  6FD6               	movwf	printf@f& (0+255),b
  2176  000F74  0EFE               	movlw	high STR_4
  2177  000F76  6FD7               	movwf	(printf@f+1)& (0+255),b
  2178  000F78  EC2F  F013         	call	_printf	;wreg free
  2179                           
  2180                           ;main.c: 133: lcdInst(0xC0);;
  2181  000F7C  0EC0               	movlw	192
  2182  000F7E  ECC8  F01E         	call	_lcdInst
  2183                           
  2184                           ;main.c: 134: printf("%s",current_set);
  2185  000F82  0EF8               	movlw	low STR_5
  2186  000F84  0100               	movlb	0	; () banked
  2187  000F86  6FD6               	movwf	printf@f& (0+255),b
  2188  000F88  0EFF               	movlw	high STR_5
  2189  000F8A  6FD7               	movwf	(printf@f+1)& (0+255),b
  2190  000F8C  0EC3               	movlw	low _current_set
  2191  000F8E  6FD8               	movwf	(?_printf+2)& (0+255),b
  2192  000F90  0E00               	movlw	high _current_set
  2193  000F92  6FD9               	movwf	(?_printf+3)& (0+255),b
  2194  000F94  EC2F  F013         	call	_printf	;wreg free
  2195                           
  2196                           ;main.c: 135: _delay((unsigned long)((500)*(40000000/4000.0)));
  2197  000F98  0E1A               	movlw	26
  2198  000F9A  0100               	movlb	0	; () banked
  2199  000F9C  6FED               	movwf	(??_main+1)& (0+255),b
  2200  000F9E  0E5E               	movlw	94
  2201  000FA0  6FEC               	movwf	??_main& (0+255),b
  2202  000FA2  0E6E               	movlw	110
  2203  000FA4                     u4827:
  2204  000FA4  2EE8               	decfsz	wreg,f,c
  2205  000FA6  D7FE               	bra	u4827
  2206  000FA8  2FEC               	decfsz	??_main& (0+255),f,b
  2207  000FAA  D7FC               	bra	u4827
  2208  000FAC  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2209  000FAE  D7FA               	bra	u4827
  2210  000FB0  F000               	nop	
  2211  000FB2                     l347:
  2212                           
  2213                           ;main.c: 136: }
  2214                           ;main.c: 138: if (state == 2){
  2215  000FB2  0E02               	movlw	2
  2216  000FB4  0100               	movlb	0	; () banked
  2217  000FB6  19AC               	xorwf	_state& (0+255),w,b
  2218  000FB8  11AD               	iorwf	(_state+1)& (0+255),w,b
  2219  000FBA  A4D8               	btfss	status,2,c
  2220  000FBC  D016               	goto	l348
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;main.c: 139: initLCD();
  2224  000FBE  EC25  F01D         	call	_initLCD	;wreg free
  2225                           
  2226                           ;main.c: 140: printf("number:");
  2227  000FC2  0E94               	movlw	low STR_6
  2228  000FC4  0100               	movlb	0	; () banked
  2229  000FC6  6FD6               	movwf	printf@f& (0+255),b
  2230  000FC8  0EFF               	movlw	high STR_6
  2231  000FCA  6FD7               	movwf	(printf@f+1)& (0+255),b
  2232  000FCC  EC2F  F013         	call	_printf	;wreg free
  2233                           
  2234                           ;main.c: 141: _delay((unsigned long)((500)*(40000000/4000.0)));
  2235  000FD0  0E1A               	movlw	26
  2236  000FD2  0100               	movlb	0	; () banked
  2237  000FD4  6FED               	movwf	(??_main+1)& (0+255),b
  2238  000FD6  0E5E               	movlw	94
  2239  000FD8  6FEC               	movwf	??_main& (0+255),b
  2240  000FDA  0E6E               	movlw	110
  2241  000FDC                     u4837:
  2242  000FDC  2EE8               	decfsz	wreg,f,c
  2243  000FDE  D7FE               	bra	u4837
  2244  000FE0  2FEC               	decfsz	??_main& (0+255),f,b
  2245  000FE2  D7FC               	bra	u4837
  2246  000FE4  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2247  000FE6  D7FA               	bra	u4837
  2248  000FE8  F000               	nop	
  2249  000FEA                     l348:
  2250                           
  2251                           ;main.c: 142: }
  2252                           ;main.c: 144: if (state == 3){
  2253  000FEA  0E03               	movlw	3
  2254  000FEC  0100               	movlb	0	; () banked
  2255  000FEE  19AC               	xorwf	_state& (0+255),w,b
  2256  000FF0  11AD               	iorwf	(_state+1)& (0+255),w,b
  2257  000FF2  A4D8               	btfss	status,2,c
  2258  000FF4  D78D               	goto	l345
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;main.c: 145: initLCD();
  2262  000FF6  EC25  F01D         	call	_initLCD	;wreg free
  2263                           
  2264                           ;main.c: 146: printf("Done!");
  2265  000FFA  0EAA               	movlw	low STR_7
  2266  000FFC  0100               	movlb	0	; () banked
  2267  000FFE  6FD6               	movwf	printf@f& (0+255),b
  2268  001000  0EFF               	movlw	high STR_7
  2269  001002  6FD7               	movwf	(printf@f+1)& (0+255),b
  2270  001004  EC2F  F013         	call	_printf	;wreg free
  2271                           
  2272                           ;main.c: 147: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2273  001008  0E33               	movlw	51
  2274  00100A  0100               	movlb	0	; () banked
  2275  00100C  6FED               	movwf	(??_main+1)& (0+255),b
  2276  00100E  0EBB               	movlw	187
  2277  001010  6FEC               	movwf	??_main& (0+255),b
  2278  001012  0EDF               	movlw	223
  2279  001014                     u4847:
  2280  001014  2EE8               	decfsz	wreg,f,c
  2281  001016  D7FE               	bra	u4847
  2282  001018  2FEC               	decfsz	??_main& (0+255),f,b
  2283  00101A  D7FC               	bra	u4847
  2284  00101C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2285  00101E  D7FA               	bra	u4847
  2286  001020  D000               	nop2	
  2287                           
  2288                           ;main.c: 148: initLCD();
  2289  001022  EC25  F01D         	call	_initLCD	;wreg free
  2290                           
  2291                           ;main.c: 149: printf("assembly step:%d",assembly_step);
  2292  001026  0E43               	movlw	low STR_8
  2293  001028  0100               	movlb	0	; () banked
  2294  00102A  6FD6               	movwf	printf@f& (0+255),b
  2295  00102C  0EFE               	movlw	high STR_8
  2296  00102E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2297  001030  C0AA  F0D8         	movff	_assembly_step,?_printf+2
  2298  001034  C0AB  F0D9         	movff	_assembly_step+1,?_printf+3
  2299  001038  EC2F  F013         	call	_printf	;wreg free
  2300                           
  2301                           ;main.c: 150: _delay((unsigned long)((600)*(40000000/4000.0)));
  2302  00103C  0E1F               	movlw	31
  2303  00103E  0100               	movlb	0	; () banked
  2304  001040  6FED               	movwf	(??_main+1)& (0+255),b
  2305  001042  0E71               	movlw	113
  2306  001044  6FEC               	movwf	??_main& (0+255),b
  2307  001046  0E1E               	movlw	30
  2308  001048                     u4857:
  2309  001048  2EE8               	decfsz	wreg,f,c
  2310  00104A  D7FE               	bra	u4857
  2311  00104C  2FEC               	decfsz	??_main& (0+255),f,b
  2312  00104E  D7FC               	bra	u4857
  2313  001050  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2314  001052  D7FA               	bra	u4857
  2315  001054  F000               	nop	
  2316                           
  2317                           ;main.c: 151: for ( i=0; i<assembly_step; i++){
  2318  001056  0E00               	movlw	0
  2319  001058  0100               	movlb	0	; () banked
  2320  00105A  6FBD               	movwf	(_i+1)& (0+255),b
  2321  00105C  0E00               	movlw	0
  2322  00105E  6FBC               	movwf	_i& (0+255),b
  2323  001060  D074               	goto	l350
  2324  001062                     
  2325                           ; BSR set to: 0
  2326                           ;main.c: 153: initLCD();
  2327                           
  2328                           ; BSR set to: 0
  2329  001062  EC25  F01D         	call	_initLCD	;wreg free
  2330                           
  2331                           ;main.c: 155: printf("step");
  2332  001066  0ED3               	movlw	low STR_9
  2333  001068  0100               	movlb	0	; () banked
  2334  00106A  6FD6               	movwf	printf@f& (0+255),b
  2335  00106C  0EFF               	movlw	high STR_9
  2336  00106E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2337  001070  EC2F  F013         	call	_printf	;wreg free
  2338                           
  2339                           ;main.c: 156: printf("%d", i+1);
  2340  001074  0EC1               	movlw	low (STR_34+17)
  2341  001076  0100               	movlb	0	; () banked
  2342  001078  6FD6               	movwf	printf@f& (0+255),b
  2343  00107A  0EFD               	movlw	high (STR_34+17)
  2344  00107C  6FD7               	movwf	(printf@f+1)& (0+255),b
  2345  00107E  0E01               	movlw	1
  2346  001080  25BC               	addwf	_i& (0+255),w,b
  2347  001082  6FD8               	movwf	(?_printf+2)& (0+255),b
  2348  001084  0E00               	movlw	0
  2349  001086  21BD               	addwfc	(_i+1)& (0+255),w,b
  2350  001088  6FD9               	movwf	(?_printf+3)& (0+255),b
  2351  00108A  EC2F  F013         	call	_printf	;wreg free
  2352                           
  2353                           ;main.c: 157: printf(":");
  2354  00108E  0EEA               	movlw	low (STR_16+2)
  2355  001090  0100               	movlb	0	; () banked
  2356  001092  6FD6               	movwf	printf@f& (0+255),b
  2357  001094  0EFF               	movlw	high (STR_16+2)
  2358  001096  6FD7               	movwf	(printf@f+1)& (0+255),b
  2359  001098  EC2F  F013         	call	_printf	;wreg free
  2360                           
  2361                           ;main.c: 158: printf("%s", final_set[i]);
  2362  00109C  C0BC  F0D0         	movff	_i,___wmul@multiplier
  2363  0010A0  C0BD  F0D1         	movff	_i+1,___wmul@multiplier+1
  2364  0010A4  0E00               	movlw	0
  2365  0010A6  0100               	movlb	0	; () banked
  2366  0010A8  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2367  0010AA  0E05               	movlw	5
  2368  0010AC  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  2369  0010AE  EC4F  F01E         	call	___wmul	;wreg free
  2370  0010B2  0E9A               	movlw	low _final_set
  2371  0010B4  0100               	movlb	0	; () banked
  2372  0010B6  25D0               	addwf	?___wmul& (0+255),w,b
  2373  0010B8  6FEF               	movwf	_main$1669& (0+255),b
  2374  0010BA  0E01               	movlw	high _final_set
  2375  0010BC  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  2376  0010BE  6FF0               	movwf	(_main$1669+1)& (0+255),b
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;main.c: 158: printf("%s", final_set[i]);
  2380  0010C0  0EF8               	movlw	low STR_5
  2381  0010C2  6FD6               	movwf	printf@f& (0+255),b
  2382  0010C4  0EFF               	movlw	high STR_5
  2383  0010C6  6FD7               	movwf	(printf@f+1)& (0+255),b
  2384  0010C8  C0EF  F0D8         	movff	_main$1669,?_printf+2
  2385  0010CC  C0F0  F0D9         	movff	_main$1669+1,?_printf+3
  2386  0010D0  EC2F  F013         	call	_printf	;wreg free
  2387                           
  2388                           ;main.c: 159: printf(",");
  2389  0010D4  0EFB               	movlw	low STR_13
  2390  0010D6  0100               	movlb	0	; () banked
  2391  0010D8  6FD6               	movwf	printf@f& (0+255),b
  2392  0010DA  0EFF               	movlw	high STR_13
  2393  0010DC  6FD7               	movwf	(printf@f+1)& (0+255),b
  2394  0010DE  EC2F  F013         	call	_printf	;wreg free
  2395                           
  2396                           ;main.c: 160: printf("%d",final_number[i]);
  2397  0010E2  0EC1               	movlw	low (STR_34+17)
  2398  0010E4  0100               	movlb	0	; () banked
  2399  0010E6  6FD6               	movwf	printf@f& (0+255),b
  2400  0010E8  0EFD               	movlw	high (STR_34+17)
  2401  0010EA  6FD7               	movwf	(printf@f+1)& (0+255),b
  2402  0010EC  90D8               	bcf	status,0,c
  2403  0010EE  35BC               	rlcf	_i& (0+255),w,b
  2404  0010F0  6ED9               	movwf	fsr2l,c
  2405  0010F2  35BD               	rlcf	(_i+1)& (0+255),w,b
  2406  0010F4  6EDA               	movwf	fsr2h,c
  2407  0010F6  0E50               	movlw	low _final_number
  2408  0010F8  26D9               	addwf	fsr2l,f,c
  2409  0010FA  0E01               	movlw	high _final_number
  2410  0010FC  22DA               	addwfc	fsr2h,f,c
  2411  0010FE  CFDE F0D8          	movff	postinc2,?_printf+2
  2412  001102  CFDD F0D9          	movff	postdec2,?_printf+3
  2413  001106  EC2F  F013         	call	_printf	;wreg free
  2414                           
  2415                           ;main.c: 161: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2416  00110A  0E33               	movlw	51
  2417  00110C  0100               	movlb	0	; () banked
  2418  00110E  6FED               	movwf	(??_main+1)& (0+255),b
  2419  001110  0EBB               	movlw	187
  2420  001112  6FEC               	movwf	??_main& (0+255),b
  2421  001114  0EDF               	movlw	223
  2422  001116                     u4867:
  2423  001116  2EE8               	decfsz	wreg,f,c
  2424  001118  D7FE               	bra	u4867
  2425  00111A  2FEC               	decfsz	??_main& (0+255),f,b
  2426  00111C  D7FC               	bra	u4867
  2427  00111E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2428  001120  D7FA               	bra	u4867
  2429  001122  D000               	nop2	
  2430                           
  2431                           ;main.c: 162: lcdInst(0xC0);;
  2432  001124  0EC0               	movlw	192
  2433  001126  ECC8  F01E         	call	_lcdInst
  2434                           
  2435                           ;main.c: 166: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2436  00112A  0E33               	movlw	51
  2437  00112C  0100               	movlb	0	; () banked
  2438  00112E  6FED               	movwf	(??_main+1)& (0+255),b
  2439  001130  0EBB               	movlw	187
  2440  001132  6FEC               	movwf	??_main& (0+255),b
  2441  001134  0EDF               	movlw	223
  2442  001136                     u4877:
  2443  001136  2EE8               	decfsz	wreg,f,c
  2444  001138  D7FE               	bra	u4877
  2445  00113A  2FEC               	decfsz	??_main& (0+255),f,b
  2446  00113C  D7FC               	bra	u4877
  2447  00113E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2448  001140  D7FA               	bra	u4877
  2449  001142  D000               	nop2	
  2450  001144  0100               	movlb	0	; () banked
  2451  001146  4BBC               	infsnz	_i& (0+255),f,b
  2452  001148  2BBD               	incf	(_i+1)& (0+255),f,b
  2453  00114A                     l350:
  2454                           
  2455                           ; BSR set to: 0
  2456                           
  2457                           ; BSR set to: 0
  2458  00114A  51AA               	movf	_assembly_step& (0+255),w,b
  2459  00114C  5DBC               	subwf	_i& (0+255),w,b
  2460  00114E  51AB               	movf	(_assembly_step+1)& (0+255),w,b
  2461  001150  59BD               	subwfb	(_i+1)& (0+255),w,b
  2462  001152  A0D8               	btfss	status,0,c
  2463  001154  D786               	goto	l351
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;main.c: 168: }
  2467                           ;main.c: 170: for (i = 0; i<8; i++){
  2468                           
  2469                           ; BSR set to: 0
  2470  001156  0E00               	movlw	0
  2471  001158  6FBD               	movwf	(_i+1)& (0+255),b
  2472  00115A  0E00               	movlw	0
  2473  00115C  6FBC               	movwf	_i& (0+255),b
  2474                           
  2475                           ; BSR set to: 0
  2476  00115E  51BD               	movf	(_i+1)& (0+255),w,b
  2477  001160  E105               	bnz	u4010
  2478  001162  0E08               	movlw	8
  2479  001164  5DBC               	subwf	_i& (0+255),w,b
  2480  001166  B0D8               	btfsc	status,0,c
  2481  001168  D09A               	goto	u4020
  2482  00116A  D001               	goto	l353
  2483  00116C                     u4010:
  2484                           
  2485                           ; BSR set to: 0
  2486  00116C  D098               	goto	u4020
  2487  00116E                     l353:
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;main.c: 171: initLCD();
  2491                           
  2492                           ; BSR set to: 0
  2493  00116E  EC25  F01D         	call	_initLCD	;wreg free
  2494                           
  2495                           ;main.c: 172: printf("%d",compartment_array[i]);
  2496  001172  0EC1               	movlw	low (STR_34+17)
  2497  001174  0100               	movlb	0	; () banked
  2498  001176  6FD6               	movwf	printf@f& (0+255),b
  2499  001178  0EFD               	movlw	high (STR_34+17)
  2500  00117A  6FD7               	movwf	(printf@f+1)& (0+255),b
  2501  00117C  90D8               	bcf	status,0,c
  2502  00117E  35BC               	rlcf	_i& (0+255),w,b
  2503  001180  6ED9               	movwf	fsr2l,c
  2504  001182  35BD               	rlcf	(_i+1)& (0+255),w,b
  2505  001184  6EDA               	movwf	fsr2h,c
  2506  001186  0E80               	movlw	low _compartment_array
  2507  001188  26D9               	addwf	fsr2l,f,c
  2508  00118A  0E00               	movlw	high _compartment_array
  2509  00118C  22DA               	addwfc	fsr2h,f,c
  2510  00118E  CFDE F0D8          	movff	postinc2,?_printf+2
  2511  001192  CFDD F0D9          	movff	postdec2,?_printf+3
  2512  001196  EC2F  F013         	call	_printf	;wreg free
  2513                           
  2514                           ;main.c: 173: printf(" B:");
  2515  00119A  0EE8               	movlw	low STR_16
  2516  00119C  0100               	movlb	0	; () banked
  2517  00119E  6FD6               	movwf	printf@f& (0+255),b
  2518  0011A0  0EFF               	movlw	high STR_16
  2519  0011A2  6FD7               	movwf	(printf@f+1)& (0+255),b
  2520  0011A4  EC2F  F013         	call	_printf	;wreg free
  2521                           
  2522                           ;main.c: 174: printf("%d",B_array[i]);
  2523  0011A8  0EC1               	movlw	low (STR_34+17)
  2524  0011AA  0100               	movlb	0	; () banked
  2525  0011AC  6FD6               	movwf	printf@f& (0+255),b
  2526  0011AE  0EFD               	movlw	high (STR_34+17)
  2527  0011B0  6FD7               	movwf	(printf@f+1)& (0+255),b
  2528  0011B2  90D8               	bcf	status,0,c
  2529  0011B4  35BC               	rlcf	_i& (0+255),w,b
  2530  0011B6  6ED9               	movwf	fsr2l,c
  2531  0011B8  35BD               	rlcf	(_i+1)& (0+255),w,b
  2532  0011BA  6EDA               	movwf	fsr2h,c
  2533  0011BC  0E30               	movlw	low _B_array
  2534  0011BE  26D9               	addwf	fsr2l,f,c
  2535  0011C0  0E01               	movlw	high _B_array
  2536  0011C2  22DA               	addwfc	fsr2h,f,c
  2537  0011C4  CFDE F0D8          	movff	postinc2,?_printf+2
  2538  0011C8  CFDD F0D9          	movff	postdec2,?_printf+3
  2539  0011CC  EC2F  F013         	call	_printf	;wreg free
  2540                           
  2541                           ;main.c: 175: printf(" N:");
  2542  0011D0  0EEC               	movlw	low STR_18
  2543  0011D2  0100               	movlb	0	; () banked
  2544  0011D4  6FD6               	movwf	printf@f& (0+255),b
  2545  0011D6  0EFF               	movlw	high STR_18
  2546  0011D8  6FD7               	movwf	(printf@f+1)& (0+255),b
  2547  0011DA  EC2F  F013         	call	_printf	;wreg free
  2548                           
  2549                           ;main.c: 176: printf("%d",N_array[i]);
  2550  0011DE  0EC1               	movlw	low (STR_34+17)
  2551  0011E0  0100               	movlb	0	; () banked
  2552  0011E2  6FD6               	movwf	printf@f& (0+255),b
  2553  0011E4  0EFD               	movlw	high (STR_34+17)
  2554  0011E6  6FD7               	movwf	(printf@f+1)& (0+255),b
  2555  0011E8  90D8               	bcf	status,0,c
  2556  0011EA  35BC               	rlcf	_i& (0+255),w,b
  2557  0011EC  6ED9               	movwf	fsr2l,c
  2558  0011EE  35BD               	rlcf	(_i+1)& (0+255),w,b
  2559  0011F0  6EDA               	movwf	fsr2h,c
  2560  0011F2  0E10               	movlw	low _N_array
  2561  0011F4  26D9               	addwf	fsr2l,f,c
  2562  0011F6  0E01               	movlw	high _N_array
  2563  0011F8  22DA               	addwfc	fsr2h,f,c
  2564  0011FA  CFDE F0D8          	movff	postinc2,?_printf+2
  2565  0011FE  CFDD F0D9          	movff	postdec2,?_printf+3
  2566  001202  EC2F  F013         	call	_printf	;wreg free
  2567                           
  2568                           ;main.c: 177: printf(" S:");
  2569  001206  0EF0               	movlw	low STR_20
  2570  001208  0100               	movlb	0	; () banked
  2571  00120A  6FD6               	movwf	printf@f& (0+255),b
  2572  00120C  0EFF               	movlw	high STR_20
  2573  00120E  6FD7               	movwf	(printf@f+1)& (0+255),b
  2574  001210  EC2F  F013         	call	_printf	;wreg free
  2575                           
  2576                           ;main.c: 178: printf("%d",S_array[i]);
  2577  001214  0EC1               	movlw	low (STR_34+17)
  2578  001216  0100               	movlb	0	; () banked
  2579  001218  6FD6               	movwf	printf@f& (0+255),b
  2580  00121A  0EFD               	movlw	high (STR_34+17)
  2581  00121C  6FD7               	movwf	(printf@f+1)& (0+255),b
  2582  00121E  90D8               	bcf	status,0,c
  2583  001220  35BC               	rlcf	_i& (0+255),w,b
  2584  001222  6ED9               	movwf	fsr2l,c
  2585  001224  35BD               	rlcf	(_i+1)& (0+255),w,b
  2586  001226  6EDA               	movwf	fsr2h,c
  2587  001228  0E20               	movlw	low _S_array
  2588  00122A  26D9               	addwf	fsr2l,f,c
  2589  00122C  0E01               	movlw	high _S_array
  2590  00122E  22DA               	addwfc	fsr2h,f,c
  2591  001230  CFDE F0D8          	movff	postinc2,?_printf+2
  2592  001234  CFDD F0D9          	movff	postdec2,?_printf+3
  2593  001238  EC2F  F013         	call	_printf	;wreg free
  2594                           
  2595                           ;main.c: 179: printf(" W:");
  2596  00123C  0EF4               	movlw	low STR_22
  2597  00123E  0100               	movlb	0	; () banked
  2598  001240  6FD6               	movwf	printf@f& (0+255),b
  2599  001242  0EFF               	movlw	high STR_22
  2600  001244  6FD7               	movwf	(printf@f+1)& (0+255),b
  2601  001246  EC2F  F013         	call	_printf	;wreg free
  2602                           
  2603                           ;main.c: 180: printf("%d",W_array[i]);
  2604  00124A  0EC1               	movlw	low (STR_34+17)
  2605  00124C  0100               	movlb	0	; () banked
  2606  00124E  6FD6               	movwf	printf@f& (0+255),b
  2607  001250  0EFD               	movlw	high (STR_34+17)
  2608  001252  6FD7               	movwf	(printf@f+1)& (0+255),b
  2609  001254  90D8               	bcf	status,0,c
  2610  001256  35BC               	rlcf	_i& (0+255),w,b
  2611  001258  6ED9               	movwf	fsr2l,c
  2612  00125A  35BD               	rlcf	(_i+1)& (0+255),w,b
  2613  00125C  6EDA               	movwf	fsr2h,c
  2614  00125E  0E00               	movlw	low _W_array
  2615  001260  26D9               	addwf	fsr2l,f,c
  2616  001262  0E01               	movlw	high _W_array
  2617  001264  22DA               	addwfc	fsr2h,f,c
  2618  001266  CFDE F0D8          	movff	postinc2,?_printf+2
  2619  00126A  CFDD F0D9          	movff	postdec2,?_printf+3
  2620  00126E  EC2F  F013         	call	_printf	;wreg free
  2621                           
  2622                           ;main.c: 181: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2623  001272  0E33               	movlw	51
  2624  001274  0100               	movlb	0	; () banked
  2625  001276  6FED               	movwf	(??_main+1)& (0+255),b
  2626  001278  0EBB               	movlw	187
  2627  00127A  6FEC               	movwf	??_main& (0+255),b
  2628  00127C  0EDF               	movlw	223
  2629  00127E                     u4887:
  2630  00127E  2EE8               	decfsz	wreg,f,c
  2631  001280  D7FE               	bra	u4887
  2632  001282  2FEC               	decfsz	??_main& (0+255),f,b
  2633  001284  D7FC               	bra	u4887
  2634  001286  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2635  001288  D7FA               	bra	u4887
  2636  00128A  D000               	nop2	
  2637                           
  2638                           ;main.c: 182: lcdInst(0xC0);;
  2639  00128C  0EC0               	movlw	192
  2640  00128E  ECC8  F01E         	call	_lcdInst
  2641  001292  0100               	movlb	0	; () banked
  2642  001294  4BBC               	infsnz	_i& (0+255),f,b
  2643  001296  2BBD               	incf	(_i+1)& (0+255),f,b
  2644                           
  2645                           ; BSR set to: 0
  2646  001298  51BD               	movf	(_i+1)& (0+255),w,b
  2647  00129A  E101               	bnz	l5012
  2648  00129C  D762               	goto	L1
  2649  00129E                     u4020:
  2650  00129E                     l5012:
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;main.c: 184: }
  2654                           ;main.c: 185: initLCD();
  2655  00129E  EC25  F01D         	call	_initLCD	;wreg free
  2656                           
  2657                           ;main.c: 186: printf("start operation");
  2658  0012A2  0E85               	movlw	low STR_24
  2659  0012A4  0100               	movlb	0	; () banked
  2660  0012A6  6FD6               	movwf	printf@f& (0+255),b
  2661  0012A8  0EFE               	movlw	high STR_24
  2662  0012AA  6FD7               	movwf	(printf@f+1)& (0+255),b
  2663  0012AC  EC2F  F013         	call	_printf	;wreg free
  2664                           
  2665                           ;main.c: 187: _delay((unsigned long)((700)*(40000000/4000.0)));
  2666  0012B0  0E24               	movlw	36
  2667  0012B2  0100               	movlb	0	; () banked
  2668  0012B4  6FED               	movwf	(??_main+1)& (0+255),b
  2669  0012B6  0E83               	movlw	131
  2670  0012B8  6FEC               	movwf	??_main& (0+255),b
  2671  0012BA  0ECF               	movlw	207
  2672  0012BC                     u4897:
  2673  0012BC  2EE8               	decfsz	wreg,f,c
  2674  0012BE  D7FE               	bra	u4897
  2675  0012C0  2FEC               	decfsz	??_main& (0+255),f,b
  2676  0012C2  D7FC               	bra	u4897
  2677  0012C4  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2678  0012C6  D7FA               	bra	u4897
  2679                           
  2680                           ;main.c: 194: get_RTC_initial();
  2681  0012C8  EC3B  F019         	call	_get_RTC_initial	;wreg free
  2682                           
  2683                           ;main.c: 200: mode = 2;
  2684  0012CC  0E00               	movlw	0
  2685  0012CE  0100               	movlb	0	; () banked
  2686  0012D0  6FB9               	movwf	(_mode+1)& (0+255),b
  2687  0012D2  0E02               	movlw	2
  2688  0012D4  6FB8               	movwf	_mode& (0+255),b
  2689  0012D6                     l355:
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;main.c: 203: }
  2693                           ;main.c: 205: }
  2694                           ;main.c: 206: }
  2695                           ;main.c: 218: if (mode == 2){
  2696                           
  2697                           ; BSR set to: 0
  2698                           
  2699                           ; BSR set to: 0
  2700  0012D6  0E02               	movlw	2
  2701  0012D8  19B8               	xorwf	_mode& (0+255),w,b
  2702  0012DA  11B9               	iorwf	(_mode+1)& (0+255),w,b
  2703  0012DC  A4D8               	btfss	status,2,c
  2704  0012DE  D5DB               	goto	l338
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 219: (INTCONbits.GIE = 0);
  2708  0012E0  9EF2               	bcf	intcon,7,c	;volatile
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;main.c: 220: initLCD();
  2712  0012E2  EC25  F01D         	call	_initLCD	;wreg free
  2713                           
  2714                           ;main.c: 222: I2C_sendData(rotate_gear);
  2715  0012E6  0100               	movlb	0	; () banked
  2716  0012E8  51FF               	movf	_rotate_gear& (0+255),w,b
  2717  0012EA  EC63  F01E         	call	_I2C_sendData
  2718  0012EE                     l358:
  2719                           
  2720                           ;main.c: 228: I2C_Master_Start();
  2721  0012EE  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  2722                           
  2723                           ;main.c: 229: I2C_Master_Write(0b00010001);
  2724  0012F2  0E00               	movlw	0
  2725  0012F4  0100               	movlb	0	; () banked
  2726  0012F6  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2727  0012F8  0E11               	movlw	17
  2728  0012FA  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2729  0012FC  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  2730                           
  2731                           ;main.c: 230: openHandle_data = I2C_Master_Read(1);
  2732  001300  0E01               	movlw	1
  2733  001302  EC3A  F01E         	call	_I2C_Master_Read
  2734  001306  0100               	movlb	0	; () banked
  2735  001308  6FC1               	movwf	_openHandle_data& (0+255),b
  2736                           
  2737                           ;main.c: 231: I2C_Master_Stop();
  2738  00130A  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  2739                           
  2740                           ;main.c: 233: if (openHandle_data == '0'){
  2741  00130E  0E30               	movlw	48
  2742  001310  0100               	movlb	0	; () banked
  2743  001312  19C1               	xorwf	_openHandle_data& (0+255),w,b
  2744  001314  A4D8               	btfss	status,2,c
  2745  001316  D7EB               	goto	l358
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 234: initLCD();
  2749  001318  EC25  F01D         	call	_initLCD	;wreg free
  2750                           
  2751                           ;main.c: 235: printf("C0 is found");
  2752  00131C  0E3E               	movlw	low STR_25
  2753  00131E  0100               	movlb	0	; () banked
  2754  001320  6FD6               	movwf	printf@f& (0+255),b
  2755  001322  0EFF               	movlw	high STR_25
  2756  001324  6FD7               	movwf	(printf@f+1)& (0+255),b
  2757  001326  EC2F  F013         	call	_printf	;wreg free
  2758                           
  2759                           ;main.c: 236: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2760  00132A  0E80               	movlw	128
  2761  00132C  ECC8  F01E         	call	_lcdInst
  2762  001330  0E41               	movlw	65
  2763  001332  0100               	movlb	0	; () banked
  2764  001334  6FEC               	movwf	??_main& (0+255),b
  2765  001336  0EEE               	movlw	238
  2766  001338                     u4907:
  2767  001338  2EE8               	decfsz	wreg,f,c
  2768  00133A  D7FE               	bra	u4907
  2769  00133C  2FEC               	decfsz	??_main& (0+255),f,b
  2770  00133E  D7FC               	bra	u4907
  2771  001340  F000               	nop	
  2772                           
  2773                           ;main.c: 237: _delay((unsigned long)((100)*(40000000/4000.0)));
  2774  001342  0E06               	movlw	6
  2775  001344  0100               	movlb	0	; () banked
  2776  001346  6FED               	movwf	(??_main+1)& (0+255),b
  2777  001348  0E13               	movlw	19
  2778  00134A  6FEC               	movwf	??_main& (0+255),b
  2779  00134C  0EAD               	movlw	173
  2780  00134E                     u4917:
  2781  00134E  2EE8               	decfsz	wreg,f,c
  2782  001350  D7FE               	bra	u4917
  2783  001352  2FEC               	decfsz	??_main& (0+255),f,b
  2784  001354  D7FC               	bra	u4917
  2785  001356  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2786  001358  D7FA               	bra	u4917
  2787  00135A  D000               	nop2	
  2788                           
  2789                           ;main.c: 239: }
  2790                           ;main.c: 240: }
  2791                           ;main.c: 243: i = 0;
  2792                           
  2793                           ;main.c: 238: break;
  2794  00135C  0E00               	movlw	0
  2795  00135E  0100               	movlb	0	; () banked
  2796  001360  6FBD               	movwf	(_i+1)& (0+255),b
  2797  001362  0E00               	movlw	0
  2798  001364  6FBC               	movwf	_i& (0+255),b
  2799                           
  2800                           ;main.c: 244: while (i<7){
  2801  001366  D232               	goto	l365
  2802  001368                     
  2803                           ; BSR set to: 0
  2804                           ;main.c: 245: if (compartment_pos == 8){
  2805                           
  2806                           ; BSR set to: 0
  2807  001368  0E08               	movlw	8
  2808  00136A  19AE               	xorwf	_compartment_pos& (0+255),w,b
  2809  00136C  11AF               	iorwf	(_compartment_pos+1)& (0+255),w,b
  2810  00136E  A4D8               	btfss	status,2,c
  2811  001370  D004               	goto	l364
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 246: compartment_pos = 0;
  2815  001372  0E00               	movlw	0
  2816  001374  6FAF               	movwf	(_compartment_pos+1)& (0+255),b
  2817  001376  0E00               	movlw	0
  2818  001378  6FAE               	movwf	_compartment_pos& (0+255),b
  2819  00137A                     l364:
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;main.c: 247: }
  2823                           ;main.c: 248: if (compartment_array[compartment_pos] != 0){
  2824                           
  2825                           ; BSR set to: 0
  2826  00137A  90D8               	bcf	status,0,c
  2827  00137C  35AE               	rlcf	_compartment_pos& (0+255),w,b
  2828  00137E  6ED9               	movwf	fsr2l,c
  2829  001380  35AF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2830  001382  6EDA               	movwf	fsr2h,c
  2831  001384  0E80               	movlw	low _compartment_array
  2832  001386  26D9               	addwf	fsr2l,f,c
  2833  001388  0E00               	movlw	high _compartment_array
  2834  00138A  22DA               	addwfc	fsr2h,f,c
  2835  00138C  50DE               	movf	postinc2,w,c
  2836  00138E  10DE               	iorwf	postinc2,w,c
  2837  001390  B4D8               	btfsc	status,2,c
  2838  001392  D21C               	goto	l365
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;main.c: 252: initLCD();
  2842  001394  EC25  F01D         	call	_initLCD	;wreg free
  2843                           
  2844                           ;main.c: 253: printf("B_counter:%d",B_counter);
  2845  001398  0E0A               	movlw	low STR_26
  2846  00139A  0100               	movlb	0	; () banked
  2847  00139C  6FD6               	movwf	printf@f& (0+255),b
  2848  00139E  0EFF               	movlw	high STR_26
  2849  0013A0  6FD7               	movwf	(printf@f+1)& (0+255),b
  2850  0013A2  C0A8  F0D8         	movff	_B_counter,?_printf+2
  2851  0013A6  C0A9  F0D9         	movff	_B_counter+1,?_printf+3
  2852  0013AA  EC2F  F013         	call	_printf	;wreg free
  2853                           
  2854                           ;main.c: 255: I2C_sendData(B_dispense);
  2855  0013AE  0100               	movlb	0	; () banked
  2856  0013B0  51FD               	movf	_B_dispense& (0+255),w,b
  2857  0013B2  EC63  F01E         	call	_I2C_sendData
  2858                           
  2859                           ;main.c: 256: I2C_sendData(motorStart_0);
  2860  0013B6  0100               	movlb	0	; () banked
  2861  0013B8  51FA               	movf	_motorStart_0& (0+255),w,b
  2862  0013BA  EC63  F01E         	call	_I2C_sendData
  2863  0013BE                     
  2864                           ;main.c: 258: if (B_counter >= B_array[compartment_pos]){
  2865  0013BE  90D8               	bcf	status,0,c
  2866  0013C0  0100               	movlb	0	; () banked
  2867  0013C2  35AE               	rlcf	_compartment_pos& (0+255),w,b
  2868  0013C4  6ED9               	movwf	fsr2l,c
  2869  0013C6  35AF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  2870  0013C8  6EDA               	movwf	fsr2h,c
  2871  0013CA  0E30               	movlw	low _B_array
  2872  0013CC  26D9               	addwf	fsr2l,f,c
  2873  0013CE  0E01               	movlw	high _B_array
  2874  0013D0  22DA               	addwfc	fsr2h,f,c
  2875  0013D2  50DE               	movf	postinc2,w,c
  2876  0013D4  5DA8               	subwf	_B_counter& (0+255),w,b
  2877  0013D6  51A9               	movf	(_B_counter+1)& (0+255),w,b
  2878  0013D8  0A80               	xorlw	128
  2879  0013DA  6FEE               	movwf	(??_main+2)& (0+255),b
  2880  0013DC  50DE               	movf	postinc2,w,c
  2881  0013DE  0A80               	xorlw	128
  2882  0013E0  59EE               	subwfb	(??_main+2)& (0+255),w,b
  2883  0013E2  A0D8               	btfss	status,0,c
  2884  0013E4  D004               	goto	l367
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;main.c: 259: I2C_sendData(motorStop_0);
  2888  0013E6  51F9               	movf	_motorStop_0& (0+255),w,b
  2889  0013E8  EC63  F01E         	call	_I2C_sendData
  2890                           
  2891                           ;main.c: 260: break;
  2892  0013EC  D029               	goto	l368
  2893  0013EE                     l367:
  2894                           
  2895                           ;main.c: 261: }
  2896                           ;main.c: 264: I2C_Master_Start();
  2897  0013EE  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  2898                           
  2899                           ;main.c: 265: I2C_Master_Write(0b00010001);
  2900  0013F2  0E00               	movlw	0
  2901  0013F4  0100               	movlb	0	; () banked
  2902  0013F6  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  2903  0013F8  0E11               	movlw	17
  2904  0013FA  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  2905  0013FC  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  2906                           
  2907                           ;main.c: 266: nuts_data = I2C_Master_Read(1);
  2908  001400  0E01               	movlw	1
  2909  001402  EC3A  F01E         	call	_I2C_Master_Read
  2910  001406  0100               	movlb	0	; () banked
  2911  001408  6FC0               	movwf	_nuts_data& (0+255),b
  2912                           
  2913                           ;main.c: 267: I2C_Master_Stop();
  2914  00140A  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  2915                           
  2916                           ;main.c: 268: if (nuts_data == '2'){
  2917  00140E  0E32               	movlw	50
  2918  001410  0100               	movlb	0	; () banked
  2919  001412  19C0               	xorwf	_nuts_data& (0+255),w,b
  2920  001414  A4D8               	btfss	status,2,c
  2921  001416  D7D3               	goto	l366
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;main.c: 269: B_counter ++;
  2925  001418  4BA8               	infsnz	_B_counter& (0+255),f,b
  2926  00141A  2BA9               	incf	(_B_counter+1)& (0+255),f,b
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;main.c: 270: initLCD();
  2930  00141C  EC25  F01D         	call	_initLCD	;wreg free
  2931                           
  2932                           ;main.c: 271: printf("B_count:%d", B_counter);
  2933  001420  0E6D               	movlw	low STR_27
  2934  001422  0100               	movlb	0	; () banked
  2935  001424  6FD6               	movwf	printf@f& (0+255),b
  2936  001426  0EFF               	movlw	high STR_27
  2937  001428  6FD7               	movwf	(printf@f+1)& (0+255),b
  2938  00142A  C0A8  F0D8         	movff	_B_counter,?_printf+2
  2939  00142E  C0A9  F0D9         	movff	_B_counter+1,?_printf+3
  2940  001432  EC2F  F013         	call	_printf	;wreg free
  2941                           
  2942                           ;main.c: 273: I2C_sendData(B_dispense);
  2943  001436  0100               	movlb	0	; () banked
  2944  001438  51FD               	movf	_B_dispense& (0+255),w,b
  2945  00143A  EC63  F01E         	call	_I2C_sendData
  2946  00143E  D7BF               	goto	l366
  2947  001440                     l368:
  2948                           
  2949                           ;main.c: 274: }
  2950                           ;main.c: 275: }
  2951                           ;main.c: 278: initLCD();
  2952  001440  EC25  F01D         	call	_initLCD	;wreg free
  2953                           
  2954                           ;main.c: 280: printf("bolts dispensed:%d",B_counter);
  2955  001444  0ED8               	movlw	low STR_28
  2956  001446  0100               	movlb	0	; () banked
  2957  001448  6FD6               	movwf	printf@f& (0+255),b
  2958  00144A  0EFD               	movlw	high STR_28
  2959  00144C  6FD7               	movwf	(printf@f+1)& (0+255),b
  2960  00144E  C0A8  F0D8         	movff	_B_counter,?_printf+2
  2961  001452  C0A9  F0D9         	movff	_B_counter+1,?_printf+3
  2962  001456  EC2F  F013         	call	_printf	;wreg free
  2963                           
  2964                           ;main.c: 281: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2965  00145A  0E33               	movlw	51
  2966  00145C  0100               	movlb	0	; () banked
  2967  00145E  6FED               	movwf	(??_main+1)& (0+255),b
  2968  001460  0EBB               	movlw	187
  2969  001462  6FEC               	movwf	??_main& (0+255),b
  2970  001464  0EDF               	movlw	223
  2971  001466                     u4927:
  2972  001466  2EE8               	decfsz	wreg,f,c
  2973  001468  D7FE               	bra	u4927
  2974  00146A  2FEC               	decfsz	??_main& (0+255),f,b
  2975  00146C  D7FC               	bra	u4927
  2976  00146E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  2977  001470  D7FA               	bra	u4927
  2978  001472  D000               	nop2	
  2979                           
  2980                           ;main.c: 282: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2981  001474  0E80               	movlw	128
  2982  001476  ECC8  F01E         	call	_lcdInst
  2983  00147A  0E41               	movlw	65
  2984  00147C  0100               	movlb	0	; () banked
  2985  00147E  6FEC               	movwf	??_main& (0+255),b
  2986  001480  0EEE               	movlw	238
  2987  001482                     u4937:
  2988  001482  2EE8               	decfsz	wreg,f,c
  2989  001484  D7FE               	bra	u4937
  2990  001486  2FEC               	decfsz	??_main& (0+255),f,b
  2991  001488  D7FC               	bra	u4937
  2992  00148A  F000               	nop	
  2993                           
  2994                           ;main.c: 283: B_counter = 0;
  2995  00148C  0E00               	movlw	0
  2996  00148E  0100               	movlb	0	; () banked
  2997  001490  6FA9               	movwf	(_B_counter+1)& (0+255),b
  2998  001492  0E00               	movlw	0
  2999  001494  6FA8               	movwf	_B_counter& (0+255),b
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;main.c: 291: initLCD();
  3003  001496  EC25  F01D         	call	_initLCD	;wreg free
  3004                           
  3005                           ;main.c: 292: printf("N_counter:%d",N_counter);
  3006  00149A  0E17               	movlw	low STR_29
  3007  00149C  0100               	movlb	0	; () banked
  3008  00149E  6FD6               	movwf	printf@f& (0+255),b
  3009  0014A0  0EFF               	movlw	high STR_29
  3010  0014A2  6FD7               	movwf	(printf@f+1)& (0+255),b
  3011  0014A4  C0A4  F0D8         	movff	_N_counter,?_printf+2
  3012  0014A8  C0A5  F0D9         	movff	_N_counter+1,?_printf+3
  3013  0014AC  EC2F  F013         	call	_printf	;wreg free
  3014                           
  3015                           ;main.c: 293: I2C_sendData(N_dispense);
  3016  0014B0  0100               	movlb	0	; () banked
  3017  0014B2  51FC               	movf	_N_dispense& (0+255),w,b
  3018  0014B4  EC63  F01E         	call	_I2C_sendData
  3019  0014B8                     
  3020                           ;main.c: 295: I2C_sendData(motorStart_1);
  3021  0014B8  0100               	movlb	0	; () banked
  3022  0014BA  51F8               	movf	_motorStart_1& (0+255),w,b
  3023  0014BC  EC63  F01E         	call	_I2C_sendData
  3024                           
  3025                           ;main.c: 296: if (N_counter >= N_array[compartment_pos]){
  3026  0014C0  90D8               	bcf	status,0,c
  3027  0014C2  0100               	movlb	0	; () banked
  3028  0014C4  35AE               	rlcf	_compartment_pos& (0+255),w,b
  3029  0014C6  6ED9               	movwf	fsr2l,c
  3030  0014C8  35AF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3031  0014CA  6EDA               	movwf	fsr2h,c
  3032  0014CC  0E10               	movlw	low _N_array
  3033  0014CE  26D9               	addwf	fsr2l,f,c
  3034  0014D0  0E01               	movlw	high _N_array
  3035  0014D2  22DA               	addwfc	fsr2h,f,c
  3036  0014D4  50DE               	movf	postinc2,w,c
  3037  0014D6  5DA4               	subwf	_N_counter& (0+255),w,b
  3038  0014D8  51A5               	movf	(_N_counter+1)& (0+255),w,b
  3039  0014DA  0A80               	xorlw	128
  3040  0014DC  6FEE               	movwf	(??_main+2)& (0+255),b
  3041  0014DE  50DE               	movf	postinc2,w,c
  3042  0014E0  0A80               	xorlw	128
  3043  0014E2  59EE               	subwfb	(??_main+2)& (0+255),w,b
  3044  0014E4  A0D8               	btfss	status,0,c
  3045  0014E6  D004               	goto	l372
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;main.c: 297: I2C_sendData(motorStop_1);
  3049  0014E8  51F7               	movf	_motorStop_1& (0+255),w,b
  3050  0014EA  EC63  F01E         	call	_I2C_sendData
  3051                           
  3052                           ;main.c: 298: break;
  3053  0014EE  D029               	goto	l373
  3054  0014F0                     l372:
  3055                           
  3056                           ;main.c: 299: }
  3057                           ;main.c: 302: I2C_Master_Start();
  3058  0014F0  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  3059                           
  3060                           ;main.c: 303: I2C_Master_Write(0b00010001);
  3061  0014F4  0E00               	movlw	0
  3062  0014F6  0100               	movlb	0	; () banked
  3063  0014F8  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3064  0014FA  0E11               	movlw	17
  3065  0014FC  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3066  0014FE  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  3067                           
  3068                           ;main.c: 304: nuts_data = I2C_Master_Read(1);
  3069  001502  0E01               	movlw	1
  3070  001504  EC3A  F01E         	call	_I2C_Master_Read
  3071  001508  0100               	movlb	0	; () banked
  3072  00150A  6FC0               	movwf	_nuts_data& (0+255),b
  3073                           
  3074                           ;main.c: 305: I2C_Master_Stop();
  3075  00150C  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  3076                           
  3077                           ;main.c: 306: if (nuts_data == '3'){
  3078  001510  0E33               	movlw	51
  3079  001512  0100               	movlb	0	; () banked
  3080  001514  19C0               	xorwf	_nuts_data& (0+255),w,b
  3081  001516  A4D8               	btfss	status,2,c
  3082  001518  D7CF               	goto	l371
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;main.c: 307: N_counter ++;
  3086  00151A  4BA4               	infsnz	_N_counter& (0+255),f,b
  3087  00151C  2BA5               	incf	(_N_counter+1)& (0+255),f,b
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;main.c: 309: initLCD();
  3091  00151E  EC25  F01D         	call	_initLCD	;wreg free
  3092                           
  3093                           ;main.c: 310: printf("%d", N_counter);
  3094  001522  0EC1               	movlw	low (STR_34+17)
  3095  001524  0100               	movlb	0	; () banked
  3096  001526  6FD6               	movwf	printf@f& (0+255),b
  3097  001528  0EFD               	movlw	high (STR_34+17)
  3098  00152A  6FD7               	movwf	(printf@f+1)& (0+255),b
  3099  00152C  C0A4  F0D8         	movff	_N_counter,?_printf+2
  3100  001530  C0A5  F0D9         	movff	_N_counter+1,?_printf+3
  3101  001534  EC2F  F013         	call	_printf	;wreg free
  3102                           
  3103                           ;main.c: 313: I2C_sendData(N_dispense);
  3104  001538  0100               	movlb	0	; () banked
  3105  00153A  51FC               	movf	_N_dispense& (0+255),w,b
  3106  00153C  EC63  F01E         	call	_I2C_sendData
  3107  001540  D7BB               	goto	l371
  3108  001542                     l373:
  3109                           
  3110                           ;main.c: 314: }
  3111                           ;main.c: 315: }
  3112                           ;main.c: 318: initLCD();
  3113  001542  EC25  F01D         	call	_initLCD	;wreg free
  3114                           
  3115                           ;main.c: 320: printf("nuts dispensed:%d",N_counter);
  3116  001546  0EFE               	movlw	low STR_31
  3117  001548  0100               	movlb	0	; () banked
  3118  00154A  6FD6               	movwf	printf@f& (0+255),b
  3119  00154C  0EFD               	movlw	high STR_31
  3120  00154E  6FD7               	movwf	(printf@f+1)& (0+255),b
  3121  001550  C0A4  F0D8         	movff	_N_counter,?_printf+2
  3122  001554  C0A5  F0D9         	movff	_N_counter+1,?_printf+3
  3123  001558  EC2F  F013         	call	_printf	;wreg free
  3124                           
  3125                           ;main.c: 321: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3126  00155C  0E33               	movlw	51
  3127  00155E  0100               	movlb	0	; () banked
  3128  001560  6FED               	movwf	(??_main+1)& (0+255),b
  3129  001562  0EBB               	movlw	187
  3130  001564  6FEC               	movwf	??_main& (0+255),b
  3131  001566  0EDF               	movlw	223
  3132  001568                     u4947:
  3133  001568  2EE8               	decfsz	wreg,f,c
  3134  00156A  D7FE               	bra	u4947
  3135  00156C  2FEC               	decfsz	??_main& (0+255),f,b
  3136  00156E  D7FC               	bra	u4947
  3137  001570  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3138  001572  D7FA               	bra	u4947
  3139  001574  D000               	nop2	
  3140                           
  3141                           ;main.c: 322: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3142  001576  0E80               	movlw	128
  3143  001578  ECC8  F01E         	call	_lcdInst
  3144  00157C  0E41               	movlw	65
  3145  00157E  0100               	movlb	0	; () banked
  3146  001580  6FEC               	movwf	??_main& (0+255),b
  3147  001582  0EEE               	movlw	238
  3148  001584                     u4957:
  3149  001584  2EE8               	decfsz	wreg,f,c
  3150  001586  D7FE               	bra	u4957
  3151  001588  2FEC               	decfsz	??_main& (0+255),f,b
  3152  00158A  D7FC               	bra	u4957
  3153  00158C  F000               	nop	
  3154                           
  3155                           ;main.c: 323: N_counter = 0;
  3156  00158E  0E00               	movlw	0
  3157  001590  0100               	movlb	0	; () banked
  3158  001592  6FA5               	movwf	(_N_counter+1)& (0+255),b
  3159  001594  0E00               	movlw	0
  3160  001596  6FA4               	movwf	_N_counter& (0+255),b
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;main.c: 330: initLCD();
  3164  001598  EC25  F01D         	call	_initLCD	;wreg free
  3165                           
  3166                           ;main.c: 331: printf("S_counter:%d",S_counter);
  3167  00159C  0E24               	movlw	low STR_32
  3168  00159E  0100               	movlb	0	; () banked
  3169  0015A0  6FD6               	movwf	printf@f& (0+255),b
  3170  0015A2  0EFF               	movlw	high STR_32
  3171  0015A4  6FD7               	movwf	(printf@f+1)& (0+255),b
  3172  0015A6  C0A6  F0D8         	movff	_S_counter,?_printf+2
  3173  0015AA  C0A7  F0D9         	movff	_S_counter+1,?_printf+3
  3174  0015AE  EC2F  F013         	call	_printf	;wreg free
  3175                           
  3176                           ;main.c: 332: I2C_sendData(S_dispense);
  3177  0015B2  0100               	movlb	0	; () banked
  3178  0015B4  51FB               	movf	_S_dispense& (0+255),w,b
  3179  0015B6  EC63  F01E         	call	_I2C_sendData
  3180                           
  3181                           ;main.c: 333: I2C_sendData(motorStart_2);
  3182  0015BA  0100               	movlb	0	; () banked
  3183  0015BC  51F6               	movf	_motorStart_2& (0+255),w,b
  3184  0015BE  EC63  F01E         	call	_I2C_sendData
  3185  0015C2                     
  3186                           ;main.c: 335: if (S_counter >= S_array[compartment_pos]){
  3187  0015C2  90D8               	bcf	status,0,c
  3188  0015C4  0100               	movlb	0	; () banked
  3189  0015C6  35AE               	rlcf	_compartment_pos& (0+255),w,b
  3190  0015C8  6ED9               	movwf	fsr2l,c
  3191  0015CA  35AF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3192  0015CC  6EDA               	movwf	fsr2h,c
  3193  0015CE  0E20               	movlw	low _S_array
  3194  0015D0  26D9               	addwf	fsr2l,f,c
  3195  0015D2  0E01               	movlw	high _S_array
  3196  0015D4  22DA               	addwfc	fsr2h,f,c
  3197  0015D6  50DE               	movf	postinc2,w,c
  3198  0015D8  5DA6               	subwf	_S_counter& (0+255),w,b
  3199  0015DA  51A7               	movf	(_S_counter+1)& (0+255),w,b
  3200  0015DC  0A80               	xorlw	128
  3201  0015DE  6FEE               	movwf	(??_main+2)& (0+255),b
  3202  0015E0  50DE               	movf	postinc2,w,c
  3203  0015E2  0A80               	xorlw	128
  3204  0015E4  59EE               	subwfb	(??_main+2)& (0+255),w,b
  3205  0015E6  A0D8               	btfss	status,0,c
  3206  0015E8  D004               	goto	l377
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 336: I2C_sendData(motorStop_2);
  3210  0015EA  51F5               	movf	_motorStop_2& (0+255),w,b
  3211  0015EC  EC63  F01E         	call	_I2C_sendData
  3212                           
  3213                           ;main.c: 337: break;
  3214  0015F0  D029               	goto	l378
  3215  0015F2                     l377:
  3216                           
  3217                           ;main.c: 338: }
  3218                           ;main.c: 341: I2C_Master_Start();
  3219  0015F2  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  3220                           
  3221                           ;main.c: 342: I2C_Master_Write(0b00010001);
  3222  0015F6  0E00               	movlw	0
  3223  0015F8  0100               	movlb	0	; () banked
  3224  0015FA  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3225  0015FC  0E11               	movlw	17
  3226  0015FE  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3227  001600  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  3228                           
  3229                           ;main.c: 343: nuts_data = I2C_Master_Read(1);
  3230  001604  0E01               	movlw	1
  3231  001606  EC3A  F01E         	call	_I2C_Master_Read
  3232  00160A  0100               	movlb	0	; () banked
  3233  00160C  6FC0               	movwf	_nuts_data& (0+255),b
  3234                           
  3235                           ;main.c: 344: I2C_Master_Stop();
  3236  00160E  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  3237                           
  3238                           ;main.c: 345: if (nuts_data == '4'){
  3239  001612  0E34               	movlw	52
  3240  001614  0100               	movlb	0	; () banked
  3241  001616  19C0               	xorwf	_nuts_data& (0+255),w,b
  3242  001618  A4D8               	btfss	status,2,c
  3243  00161A  D7D3               	goto	l376
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 346: S_counter ++;
  3247  00161C  4BA6               	infsnz	_S_counter& (0+255),f,b
  3248  00161E  2BA7               	incf	(_S_counter+1)& (0+255),f,b
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;main.c: 348: initLCD();
  3252  001620  EC25  F01D         	call	_initLCD	;wreg free
  3253                           
  3254                           ;main.c: 349: printf("%d", S_counter);
  3255  001624  0EC1               	movlw	low (STR_34+17)
  3256  001626  0100               	movlb	0	; () banked
  3257  001628  6FD6               	movwf	printf@f& (0+255),b
  3258  00162A  0EFD               	movlw	high (STR_34+17)
  3259  00162C  6FD7               	movwf	(printf@f+1)& (0+255),b
  3260  00162E  C0A6  F0D8         	movff	_S_counter,?_printf+2
  3261  001632  C0A7  F0D9         	movff	_S_counter+1,?_printf+3
  3262  001636  EC2F  F013         	call	_printf	;wreg free
  3263                           
  3264                           ;main.c: 352: I2C_sendData(S_dispense);
  3265  00163A  0100               	movlb	0	; () banked
  3266  00163C  51FB               	movf	_S_dispense& (0+255),w,b
  3267  00163E  EC63  F01E         	call	_I2C_sendData
  3268  001642  D7BF               	goto	l376
  3269  001644                     l378:
  3270                           
  3271                           ;main.c: 354: }
  3272                           ;main.c: 355: }
  3273                           ;main.c: 358: initLCD();
  3274  001644  EC25  F01D         	call	_initLCD	;wreg free
  3275                           
  3276                           ;main.c: 360: printf("Spacer dispensed:%d",S_counter);
  3277  001648  0EB0               	movlw	low STR_34
  3278  00164A  0100               	movlb	0	; () banked
  3279  00164C  6FD6               	movwf	printf@f& (0+255),b
  3280  00164E  0EFD               	movlw	high STR_34
  3281  001650  6FD7               	movwf	(printf@f+1)& (0+255),b
  3282  001652  C0A6  F0D8         	movff	_S_counter,?_printf+2
  3283  001656  C0A7  F0D9         	movff	_S_counter+1,?_printf+3
  3284  00165A  EC2F  F013         	call	_printf	;wreg free
  3285                           
  3286                           ;main.c: 361: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3287  00165E  0E33               	movlw	51
  3288  001660  0100               	movlb	0	; () banked
  3289  001662  6FED               	movwf	(??_main+1)& (0+255),b
  3290  001664  0EBB               	movlw	187
  3291  001666  6FEC               	movwf	??_main& (0+255),b
  3292  001668  0EDF               	movlw	223
  3293  00166A                     u4967:
  3294  00166A  2EE8               	decfsz	wreg,f,c
  3295  00166C  D7FE               	bra	u4967
  3296  00166E  2FEC               	decfsz	??_main& (0+255),f,b
  3297  001670  D7FC               	bra	u4967
  3298  001672  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3299  001674  D7FA               	bra	u4967
  3300  001676  D000               	nop2	
  3301                           
  3302                           ;main.c: 362: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3303  001678  0E80               	movlw	128
  3304  00167A  ECC8  F01E         	call	_lcdInst
  3305  00167E  0E41               	movlw	65
  3306  001680  0100               	movlb	0	; () banked
  3307  001682  6FEC               	movwf	??_main& (0+255),b
  3308  001684  0EEE               	movlw	238
  3309  001686                     u4977:
  3310  001686  2EE8               	decfsz	wreg,f,c
  3311  001688  D7FE               	bra	u4977
  3312  00168A  2FEC               	decfsz	??_main& (0+255),f,b
  3313  00168C  D7FC               	bra	u4977
  3314  00168E  F000               	nop	
  3315                           
  3316                           ;main.c: 363: S_counter = 0;
  3317  001690  0E00               	movlw	0
  3318  001692  0100               	movlb	0	; () banked
  3319  001694  6FA7               	movwf	(_S_counter+1)& (0+255),b
  3320  001696  0E00               	movlw	0
  3321  001698  6FA6               	movwf	_S_counter& (0+255),b
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 369: initLCD();
  3325  00169A  EC25  F01D         	call	_initLCD	;wreg free
  3326                           
  3327                           ;main.c: 370: printf("%d",W_counter);
  3328  00169E  0EC1               	movlw	low (STR_34+17)
  3329  0016A0  0100               	movlb	0	; () banked
  3330  0016A2  6FD6               	movwf	printf@f& (0+255),b
  3331  0016A4  0EFD               	movlw	high (STR_34+17)
  3332  0016A6  6FD7               	movwf	(printf@f+1)& (0+255),b
  3333  0016A8  C0A2  F0D8         	movff	_W_counter,?_printf+2
  3334  0016AC  C0A3  F0D9         	movff	_W_counter+1,?_printf+3
  3335  0016B0  EC2F  F013         	call	_printf	;wreg free
  3336                           
  3337                           ;main.c: 371: _delay((unsigned long)((50)*(40000000/4000.0)));
  3338  0016B4  0E03               	movlw	3
  3339  0016B6  0100               	movlb	0	; () banked
  3340  0016B8  6FED               	movwf	(??_main+1)& (0+255),b
  3341  0016BA  0E8A               	movlw	138
  3342  0016BC  6FEC               	movwf	??_main& (0+255),b
  3343  0016BE  0E55               	movlw	85
  3344  0016C0                     u4987:
  3345  0016C0  2EE8               	decfsz	wreg,f,c
  3346  0016C2  D7FE               	bra	u4987
  3347  0016C4  2FEC               	decfsz	??_main& (0+255),f,b
  3348  0016C6  D7FC               	bra	u4987
  3349  0016C8  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3350  0016CA  D7FA               	bra	u4987
  3351  0016CC  D000               	nop2	
  3352                           
  3353                           ;main.c: 372: I2C_sendData(motorStart_3);
  3354  0016CE  0100               	movlb	0	; () banked
  3355  0016D0  51F4               	movf	_motorStart_3& (0+255),w,b
  3356  0016D2  EC63  F01E         	call	_I2C_sendData
  3357  0016D6                     l5164:
  3358                           
  3359                           ;main.c: 376: if (W_counter == W_array[compartment_pos]){
  3360  0016D6  90D8               	bcf	status,0,c
  3361  0016D8  0100               	movlb	0	; () banked
  3362  0016DA  35AE               	rlcf	_compartment_pos& (0+255),w,b
  3363  0016DC  6ED9               	movwf	fsr2l,c
  3364  0016DE  35AF               	rlcf	(_compartment_pos+1)& (0+255),w,b
  3365  0016E0  6EDA               	movwf	fsr2h,c
  3366  0016E2  0E00               	movlw	low _W_array
  3367  0016E4  26D9               	addwf	fsr2l,f,c
  3368  0016E6  0E01               	movlw	high _W_array
  3369  0016E8  22DA               	addwfc	fsr2h,f,c
  3370  0016EA  51A2               	movf	_W_counter& (0+255),w,b
  3371  0016EC  18DE               	xorwf	postinc2,w,c
  3372  0016EE  E108               	bnz	l5168
  3373  0016F0  51A3               	movf	(_W_counter+1)& (0+255),w,b
  3374  0016F2  18DE               	xorwf	postinc2,w,c
  3375  0016F4  A4D8               	btfss	status,2,c
  3376  0016F6  D004               	goto	l382
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 377: I2C_sendData(motorStop_3);
  3380  0016F8  51F3               	movf	_motorStop_3& (0+255),w,b
  3381  0016FA  EC63  F01E         	call	_I2C_sendData
  3382                           
  3383                           ;main.c: 378: break;
  3384  0016FE  D027               	goto	l383
  3385  001700                     l382:
  3386  001700                     l5168:
  3387                           
  3388                           ;main.c: 379: }
  3389                           ;main.c: 380: if (readADC(3)<=250 ){
  3390  001700  0E03               	movlw	3
  3391  001702  EC1D  F01E         	call	_readADC
  3392  001706  0100               	movlb	0	; () banked
  3393  001708  51C9               	movf	(?_readADC+1)& (0+255),w,b
  3394  00170A  E1E5               	bnz	l5164
  3395  00170C  0EFB               	movlw	251
  3396  00170E  5DC8               	subwf	?_readADC& (0+255),w,b
  3397  001710  B0D8               	btfsc	status,0,c
  3398  001712  D7E1               	goto	l381
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;main.c: 382: W_counter ++;
  3402  001714  4BA2               	infsnz	_W_counter& (0+255),f,b
  3403  001716  2BA3               	incf	(_W_counter+1)& (0+255),f,b
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;main.c: 383: initLCD();
  3407  001718  EC25  F01D         	call	_initLCD	;wreg free
  3408                           
  3409                           ;main.c: 384: printf("%d", W_counter);
  3410  00171C  0EC1               	movlw	low (STR_34+17)
  3411  00171E  0100               	movlb	0	; () banked
  3412  001720  6FD6               	movwf	printf@f& (0+255),b
  3413  001722  0EFD               	movlw	high (STR_34+17)
  3414  001724  6FD7               	movwf	(printf@f+1)& (0+255),b
  3415  001726  C0A2  F0D8         	movff	_W_counter,?_printf+2
  3416  00172A  C0A3  F0D9         	movff	_W_counter+1,?_printf+3
  3417  00172E  EC2F  F013         	call	_printf	;wreg free
  3418                           
  3419                           ;main.c: 385: _delay((unsigned long)((50)*(40000000/4000.0)));
  3420  001732  0E03               	movlw	3
  3421  001734  0100               	movlb	0	; () banked
  3422  001736  6FED               	movwf	(??_main+1)& (0+255),b
  3423  001738  0E8A               	movlw	138
  3424  00173A  6FEC               	movwf	??_main& (0+255),b
  3425  00173C  0E55               	movlw	85
  3426  00173E                     u4997:
  3427  00173E  2EE8               	decfsz	wreg,f,c
  3428  001740  D7FE               	bra	u4997
  3429  001742  2FEC               	decfsz	??_main& (0+255),f,b
  3430  001744  D7FC               	bra	u4997
  3431  001746  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3432  001748  D7FA               	bra	u4997
  3433  00174A  D000               	nop2	
  3434  00174C  D7C4               	goto	l381
  3435  00174E                     l383:
  3436                           
  3437                           ;main.c: 386: }
  3438                           ;main.c: 388: }
  3439                           ;main.c: 390: initLCD();
  3440  00174E  EC25  F01D         	call	_initLCD	;wreg free
  3441                           
  3442                           ;main.c: 392: printf("Washer dispensed:%d",W_counter);
  3443  001752  0EC4               	movlw	low STR_37
  3444  001754  0100               	movlb	0	; () banked
  3445  001756  6FD6               	movwf	printf@f& (0+255),b
  3446  001758  0EFD               	movlw	high STR_37
  3447  00175A  6FD7               	movwf	(printf@f+1)& (0+255),b
  3448  00175C  C0A2  F0D8         	movff	_W_counter,?_printf+2
  3449  001760  C0A3  F0D9         	movff	_W_counter+1,?_printf+3
  3450  001764  EC2F  F013         	call	_printf	;wreg free
  3451                           
  3452                           ;main.c: 393: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3453  001768  0E33               	movlw	51
  3454  00176A  0100               	movlb	0	; () banked
  3455  00176C  6FED               	movwf	(??_main+1)& (0+255),b
  3456  00176E  0EBB               	movlw	187
  3457  001770  6FEC               	movwf	??_main& (0+255),b
  3458  001772  0EDF               	movlw	223
  3459  001774                     u5007:
  3460  001774  2EE8               	decfsz	wreg,f,c
  3461  001776  D7FE               	bra	u5007
  3462  001778  2FEC               	decfsz	??_main& (0+255),f,b
  3463  00177A  D7FC               	bra	u5007
  3464  00177C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3465  00177E  D7FA               	bra	u5007
  3466  001780  D000               	nop2	
  3467                           
  3468                           ;main.c: 394: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3469  001782  0E80               	movlw	128
  3470  001784  ECC8  F01E         	call	_lcdInst
  3471  001788  0E41               	movlw	65
  3472  00178A  0100               	movlb	0	; () banked
  3473  00178C  6FEC               	movwf	??_main& (0+255),b
  3474  00178E  0EEE               	movlw	238
  3475  001790                     u5017:
  3476  001790  2EE8               	decfsz	wreg,f,c
  3477  001792  D7FE               	bra	u5017
  3478  001794  2FEC               	decfsz	??_main& (0+255),f,b
  3479  001796  D7FC               	bra	u5017
  3480  001798  F000               	nop	
  3481                           
  3482                           ;main.c: 395: W_counter = 0;
  3483  00179A  0E00               	movlw	0
  3484  00179C  0100               	movlb	0	; () banked
  3485  00179E  6FA3               	movwf	(_W_counter+1)& (0+255),b
  3486  0017A0  0E00               	movlw	0
  3487  0017A2  6FA2               	movwf	_W_counter& (0+255),b
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;main.c: 400: I2C_sendData(rotate_1compartment);
  3491  0017A4  51FE               	movf	_rotate_1compartment& (0+255),w,b
  3492  0017A6  EC63  F01E         	call	_I2C_sendData
  3493                           
  3494                           ;main.c: 403: B_counter = 0;
  3495  0017AA  0E00               	movlw	0
  3496  0017AC  0100               	movlb	0	; () banked
  3497  0017AE  6FA9               	movwf	(_B_counter+1)& (0+255),b
  3498  0017B0  0E00               	movlw	0
  3499  0017B2  6FA8               	movwf	_B_counter& (0+255),b
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;main.c: 404: N_counter = 0;
  3503  0017B4  0E00               	movlw	0
  3504  0017B6  6FA5               	movwf	(_N_counter+1)& (0+255),b
  3505  0017B8  0E00               	movlw	0
  3506  0017BA  6FA4               	movwf	_N_counter& (0+255),b
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;main.c: 405: S_counter = 0;
  3510  0017BC  0E00               	movlw	0
  3511  0017BE  6FA7               	movwf	(_S_counter+1)& (0+255),b
  3512  0017C0  0E00               	movlw	0
  3513  0017C2  6FA6               	movwf	_S_counter& (0+255),b
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;main.c: 406: W_counter = 0;
  3517  0017C4  0E00               	movlw	0
  3518  0017C6  6FA3               	movwf	(_W_counter+1)& (0+255),b
  3519  0017C8  0E00               	movlw	0
  3520  0017CA  6FA2               	movwf	_W_counter& (0+255),b
  3521  0017CC                     l365:
  3522                           
  3523                           ; BSR set to: 0
  3524                           
  3525                           ; BSR set to: 0
  3526                           
  3527                           ; BSR set to: 0
  3528  0017CC  51BD               	movf	(_i+1)& (0+255),w,b
  3529  0017CE  E104               	bnz	l5202
  3530  0017D0  0E07               	movlw	7
  3531  0017D2  5DBC               	subwf	_i& (0+255),w,b
  3532  0017D4  A0D8               	btfss	status,0,c
  3533  0017D6  D5C8               	goto	l363
  3534  0017D8                     l5202:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;main.c: 408: }
  3538                           ;main.c: 409: }
  3539                           ;main.c: 417: I2C_sendData(servo_ramp);
  3540  0017D8  51F2               	movf	_servo_ramp& (0+255),w,b
  3541  0017DA  EC63  F01E         	call	_I2C_sendData
  3542                           
  3543                           ;main.c: 431: I2C_sendData(close_handle);
  3544  0017DE  0100               	movlb	0	; () banked
  3545  0017E0  51F1               	movf	_close_handle& (0+255),w,b
  3546  0017E2  EC63  F01E         	call	_I2C_sendData
  3547                           
  3548                           ;main.c: 516: get_RTC_final();
  3549  0017E6  ECD4  F019         	call	_get_RTC_final	;wreg free
  3550                           
  3551                           ;main.c: 518: printf("Bolt_remain:%d",B_remain);
  3552  0017EA  0EB3               	movlw	low STR_38
  3553  0017EC  0100               	movlb	0	; () banked
  3554  0017EE  6FD6               	movwf	printf@f& (0+255),b
  3555  0017F0  0EFE               	movlw	high STR_38
  3556  0017F2  6FD7               	movwf	(printf@f+1)& (0+255),b
  3557  0017F4  C0A0  F0D8         	movff	_B_remain,?_printf+2
  3558  0017F8  C0A1  F0D9         	movff	_B_remain+1,?_printf+3
  3559  0017FC  EC2F  F013         	call	_printf	;wreg free
  3560                           
  3561                           ;main.c: 519: _delay((unsigned long)((300)*(40000000/4000.0)));
  3562  001800  0E10               	movlw	16
  3563  001802  0100               	movlb	0	; () banked
  3564  001804  6FED               	movwf	(??_main+1)& (0+255),b
  3565  001806  0E39               	movlw	57
  3566  001808  6FEC               	movwf	??_main& (0+255),b
  3567  00180A  0E0D               	movlw	13
  3568  00180C                     u5027:
  3569  00180C  2EE8               	decfsz	wreg,f,c
  3570  00180E  D7FE               	bra	u5027
  3571  001810  2FEC               	decfsz	??_main& (0+255),f,b
  3572  001812  D7FC               	bra	u5027
  3573  001814  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3574  001816  D7FA               	bra	u5027
  3575  001818  D000               	nop2	
  3576                           
  3577                           ;main.c: 520: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3578  00181A  0E01               	movlw	1
  3579  00181C  ECC8  F01E         	call	_lcdInst
  3580  001820  0EC3               	movlw	195
  3581  001822  0100               	movlb	0	; () banked
  3582  001824  6FEC               	movwf	??_main& (0+255),b
  3583  001826  0ECD               	movlw	205
  3584  001828                     u5037:
  3585  001828  2EE8               	decfsz	wreg,f,c
  3586  00182A  D7FE               	bra	u5037
  3587  00182C  2FEC               	decfsz	??_main& (0+255),f,b
  3588  00182E  D7FC               	bra	u5037
  3589                           
  3590                           ;main.c: 521: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3591  001830  0E80               	movlw	128
  3592  001832  ECC8  F01E         	call	_lcdInst
  3593  001836  0E41               	movlw	65
  3594  001838  0100               	movlb	0	; () banked
  3595  00183A  6FEC               	movwf	??_main& (0+255),b
  3596  00183C  0EEE               	movlw	238
  3597  00183E                     u5047:
  3598  00183E  2EE8               	decfsz	wreg,f,c
  3599  001840  D7FE               	bra	u5047
  3600  001842  2FEC               	decfsz	??_main& (0+255),f,b
  3601  001844  D7FC               	bra	u5047
  3602  001846  F000               	nop	
  3603                           
  3604                           ;main.c: 522: printf("Nut_remain:%d",N_remain);
  3605  001848  0EEE               	movlw	low STR_39
  3606  00184A  0100               	movlb	0	; () banked
  3607  00184C  6FD6               	movwf	printf@f& (0+255),b
  3608  00184E  0EFE               	movlw	high STR_39
  3609  001850  6FD7               	movwf	(printf@f+1)& (0+255),b
  3610  001852  C09E  F0D8         	movff	_N_remain,?_printf+2
  3611  001856  C09F  F0D9         	movff	_N_remain+1,?_printf+3
  3612  00185A  EC2F  F013         	call	_printf	;wreg free
  3613                           
  3614                           ;main.c: 523: _delay((unsigned long)((300)*(40000000/4000.0)));
  3615  00185E  0E10               	movlw	16
  3616  001860  0100               	movlb	0	; () banked
  3617  001862  6FED               	movwf	(??_main+1)& (0+255),b
  3618  001864  0E39               	movlw	57
  3619  001866  6FEC               	movwf	??_main& (0+255),b
  3620  001868  0E0D               	movlw	13
  3621  00186A                     u5057:
  3622  00186A  2EE8               	decfsz	wreg,f,c
  3623  00186C  D7FE               	bra	u5057
  3624  00186E  2FEC               	decfsz	??_main& (0+255),f,b
  3625  001870  D7FC               	bra	u5057
  3626  001872  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3627  001874  D7FA               	bra	u5057
  3628  001876  D000               	nop2	
  3629                           
  3630                           ;main.c: 524: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3631  001878  0E01               	movlw	1
  3632  00187A  ECC8  F01E         	call	_lcdInst
  3633  00187E  0EC3               	movlw	195
  3634  001880  0100               	movlb	0	; () banked
  3635  001882  6FEC               	movwf	??_main& (0+255),b
  3636  001884  0ECD               	movlw	205
  3637  001886                     u5067:
  3638  001886  2EE8               	decfsz	wreg,f,c
  3639  001888  D7FE               	bra	u5067
  3640  00188A  2FEC               	decfsz	??_main& (0+255),f,b
  3641  00188C  D7FC               	bra	u5067
  3642                           
  3643                           ;main.c: 525: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3644  00188E  0E80               	movlw	128
  3645  001890  ECC8  F01E         	call	_lcdInst
  3646  001894  0E41               	movlw	65
  3647  001896  0100               	movlb	0	; () banked
  3648  001898  6FEC               	movwf	??_main& (0+255),b
  3649  00189A  0EEE               	movlw	238
  3650  00189C                     u5077:
  3651  00189C  2EE8               	decfsz	wreg,f,c
  3652  00189E  D7FE               	bra	u5077
  3653  0018A0  2FEC               	decfsz	??_main& (0+255),f,b
  3654  0018A2  D7FC               	bra	u5077
  3655  0018A4  F000               	nop	
  3656                           
  3657                           ;main.c: 526: printf("Spacer_remain:%d",S_remain);
  3658  0018A6  0E21               	movlw	low STR_40
  3659  0018A8  0100               	movlb	0	; () banked
  3660  0018AA  6FD6               	movwf	printf@f& (0+255),b
  3661  0018AC  0EFE               	movlw	high STR_40
  3662  0018AE  6FD7               	movwf	(printf@f+1)& (0+255),b
  3663  0018B0  C09C  F0D8         	movff	_S_remain,?_printf+2
  3664  0018B4  C09D  F0D9         	movff	_S_remain+1,?_printf+3
  3665  0018B8  EC2F  F013         	call	_printf	;wreg free
  3666                           
  3667                           ;main.c: 527: _delay((unsigned long)((300)*(40000000/4000.0)));
  3668  0018BC  0E10               	movlw	16
  3669  0018BE  0100               	movlb	0	; () banked
  3670  0018C0  6FED               	movwf	(??_main+1)& (0+255),b
  3671  0018C2  0E39               	movlw	57
  3672  0018C4  6FEC               	movwf	??_main& (0+255),b
  3673  0018C6  0E0D               	movlw	13
  3674  0018C8                     u5087:
  3675  0018C8  2EE8               	decfsz	wreg,f,c
  3676  0018CA  D7FE               	bra	u5087
  3677  0018CC  2FEC               	decfsz	??_main& (0+255),f,b
  3678  0018CE  D7FC               	bra	u5087
  3679  0018D0  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3680  0018D2  D7FA               	bra	u5087
  3681  0018D4  D000               	nop2	
  3682                           
  3683                           ;main.c: 528: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3684  0018D6  0E01               	movlw	1
  3685  0018D8  ECC8  F01E         	call	_lcdInst
  3686  0018DC  0EC3               	movlw	195
  3687  0018DE  0100               	movlb	0	; () banked
  3688  0018E0  6FEC               	movwf	??_main& (0+255),b
  3689  0018E2  0ECD               	movlw	205
  3690  0018E4                     u5097:
  3691  0018E4  2EE8               	decfsz	wreg,f,c
  3692  0018E6  D7FE               	bra	u5097
  3693  0018E8  2FEC               	decfsz	??_main& (0+255),f,b
  3694  0018EA  D7FC               	bra	u5097
  3695                           
  3696                           ;main.c: 529: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3697  0018EC  0E80               	movlw	128
  3698  0018EE  ECC8  F01E         	call	_lcdInst
  3699  0018F2  0E41               	movlw	65
  3700  0018F4  0100               	movlb	0	; () banked
  3701  0018F6  6FEC               	movwf	??_main& (0+255),b
  3702  0018F8  0EEE               	movlw	238
  3703  0018FA                     u5107:
  3704  0018FA  2EE8               	decfsz	wreg,f,c
  3705  0018FC  D7FE               	bra	u5107
  3706  0018FE  2FEC               	decfsz	??_main& (0+255),f,b
  3707  001900  D7FC               	bra	u5107
  3708  001902  F000               	nop	
  3709                           
  3710                           ;main.c: 530: printf("Washer_remain:%d",W_remain);
  3711  001904  0E32               	movlw	low STR_41
  3712  001906  0100               	movlb	0	; () banked
  3713  001908  6FD6               	movwf	printf@f& (0+255),b
  3714  00190A  0EFE               	movlw	high STR_41
  3715  00190C  6FD7               	movwf	(printf@f+1)& (0+255),b
  3716  00190E  C09A  F0D8         	movff	_W_remain,?_printf+2
  3717  001912  C09B  F0D9         	movff	_W_remain+1,?_printf+3
  3718  001916  EC2F  F013         	call	_printf	;wreg free
  3719                           
  3720                           ;main.c: 531: _delay((unsigned long)((300)*(40000000/4000.0)));
  3721  00191A  0E10               	movlw	16
  3722  00191C  0100               	movlb	0	; () banked
  3723  00191E  6FED               	movwf	(??_main+1)& (0+255),b
  3724  001920  0E39               	movlw	57
  3725  001922  6FEC               	movwf	??_main& (0+255),b
  3726  001924  0E0D               	movlw	13
  3727  001926                     u5117:
  3728  001926  2EE8               	decfsz	wreg,f,c
  3729  001928  D7FE               	bra	u5117
  3730  00192A  2FEC               	decfsz	??_main& (0+255),f,b
  3731  00192C  D7FC               	bra	u5117
  3732  00192E  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3733  001930  D7FA               	bra	u5117
  3734  001932  D000               	nop2	
  3735                           
  3736                           ;main.c: 532: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3737  001934  0E01               	movlw	1
  3738  001936  ECC8  F01E         	call	_lcdInst
  3739  00193A  0EC3               	movlw	195
  3740  00193C  0100               	movlb	0	; () banked
  3741  00193E  6FEC               	movwf	??_main& (0+255),b
  3742  001940  0ECD               	movlw	205
  3743  001942                     u5127:
  3744  001942  2EE8               	decfsz	wreg,f,c
  3745  001944  D7FE               	bra	u5127
  3746  001946  2FEC               	decfsz	??_main& (0+255),f,b
  3747  001948  D7FC               	bra	u5127
  3748                           
  3749                           ;main.c: 533: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3750  00194A  0E80               	movlw	128
  3751  00194C  ECC8  F01E         	call	_lcdInst
  3752  001950  0E41               	movlw	65
  3753  001952  0100               	movlb	0	; () banked
  3754  001954  6FEC               	movwf	??_main& (0+255),b
  3755  001956  0EEE               	movlw	238
  3756  001958                     u5137:
  3757  001958  2EE8               	decfsz	wreg,f,c
  3758  00195A  D7FE               	bra	u5137
  3759  00195C  2FEC               	decfsz	??_main& (0+255),f,b
  3760  00195E  D7FC               	bra	u5137
  3761  001960  F000               	nop	
  3762                           
  3763                           ;main.c: 534: printf("you're done");
  3764  001962  0E4A               	movlw	low STR_42
  3765  001964  0100               	movlb	0	; () banked
  3766  001966  6FD6               	movwf	printf@f& (0+255),b
  3767  001968  0EFF               	movlw	high STR_42
  3768  00196A  6FD7               	movwf	(printf@f+1)& (0+255),b
  3769  00196C  EC2F  F013         	call	_printf	;wreg free
  3770                           
  3771                           ;main.c: 535: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3772  001970  0E33               	movlw	51
  3773  001972  0100               	movlb	0	; () banked
  3774  001974  6FED               	movwf	(??_main+1)& (0+255),b
  3775  001976  0EBB               	movlw	187
  3776  001978  6FEC               	movwf	??_main& (0+255),b
  3777  00197A  0EDF               	movlw	223
  3778  00197C                     u5147:
  3779  00197C  2EE8               	decfsz	wreg,f,c
  3780  00197E  D7FE               	bra	u5147
  3781  001980  2FEC               	decfsz	??_main& (0+255),f,b
  3782  001982  D7FC               	bra	u5147
  3783  001984  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3784  001986  D7FA               	bra	u5147
  3785  001988  D000               	nop2	
  3786                           
  3787                           ;main.c: 536: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3788  00198A  0E80               	movlw	128
  3789  00198C  ECC8  F01E         	call	_lcdInst
  3790  001990  0E41               	movlw	65
  3791  001992  0100               	movlb	0	; () banked
  3792  001994  6FEC               	movwf	??_main& (0+255),b
  3793  001996  0EEE               	movlw	238
  3794  001998                     u5157:
  3795  001998  2EE8               	decfsz	wreg,f,c
  3796  00199A  D7FE               	bra	u5157
  3797  00199C  2FEC               	decfsz	??_main& (0+255),f,b
  3798  00199E  D7FC               	bra	u5157
  3799  0019A0  F000               	nop	
  3800  0019A2                     
  3801                           ;main.c: 560: (INTCONbits.GIE = 1);
  3802  0019A2  8EF2               	bsf	intcon,7,c	;volatile
  3803                           
  3804                           ;main.c: 561: operation = 1;
  3805  0019A4  0E00               	movlw	0
  3806  0019A6  6E74               	movwf	_operation+1,c
  3807  0019A8  0E01               	movlw	1
  3808  0019AA  6E73               	movwf	_operation,c
  3809                           
  3810                           ;main.c: 562: printf("1: Date and Time");
  3811  0019AC  0E54               	movlw	low STR_43
  3812  0019AE  0100               	movlb	0	; () banked
  3813  0019B0  6FD6               	movwf	printf@f& (0+255),b
  3814  0019B2  0EFE               	movlw	high STR_43
  3815  0019B4  6FD7               	movwf	(printf@f+1)& (0+255),b
  3816  0019B6  EC2F  F013         	call	_printf	;wreg free
  3817                           
  3818                           ;main.c: 563: lcdInst(0xC0);;
  3819  0019BA  0EC0               	movlw	192
  3820  0019BC  ECC8  F01E         	call	_lcdInst
  3821                           
  3822                           ;main.c: 564: printf(" 2: Operation Time");
  3823  0019C0  0EEB               	movlw	low STR_44
  3824  0019C2  0100               	movlb	0	; () banked
  3825  0019C4  6FD6               	movwf	printf@f& (0+255),b
  3826  0019C6  0EFD               	movlw	high STR_44
  3827  0019C8  6FD7               	movwf	(printf@f+1)& (0+255),b
  3828  0019CA  EC2F  F013         	call	_printf	;wreg free
  3829                           
  3830                           ;main.c: 565: _delay((unsigned long)((600)*(40000000/4000.0)));
  3831  0019CE  0E1F               	movlw	31
  3832  0019D0  0100               	movlb	0	; () banked
  3833  0019D2  6FED               	movwf	(??_main+1)& (0+255),b
  3834  0019D4  0E71               	movlw	113
  3835  0019D6  6FEC               	movwf	??_main& (0+255),b
  3836  0019D8  0E1E               	movlw	30
  3837  0019DA                     u5167:
  3838  0019DA  2EE8               	decfsz	wreg,f,c
  3839  0019DC  D7FE               	bra	u5167
  3840  0019DE  2FEC               	decfsz	??_main& (0+255),f,b
  3841  0019E0  D7FC               	bra	u5167
  3842  0019E2  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3843  0019E4  D7FA               	bra	u5167
  3844  0019E6  F000               	nop	
  3845                           
  3846                           ;main.c: 566: initLCD();
  3847  0019E8  EC25  F01D         	call	_initLCD	;wreg free
  3848                           
  3849                           ;main.c: 567: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3850  0019EC  0E80               	movlw	128
  3851  0019EE  ECC8  F01E         	call	_lcdInst
  3852  0019F2  0E41               	movlw	65
  3853  0019F4  0100               	movlb	0	; () banked
  3854  0019F6  6FEC               	movwf	??_main& (0+255),b
  3855  0019F8  0EEE               	movlw	238
  3856  0019FA                     u5177:
  3857  0019FA  2EE8               	decfsz	wreg,f,c
  3858  0019FC  D7FE               	bra	u5177
  3859  0019FE  2FEC               	decfsz	??_main& (0+255),f,b
  3860  001A00  D7FC               	bra	u5177
  3861  001A02  F000               	nop	
  3862                           
  3863                           ;main.c: 568: printf("3:summary");
  3864  001A04  0E78               	movlw	low STR_45
  3865  001A06  0100               	movlb	0	; () banked
  3866  001A08  6FD6               	movwf	printf@f& (0+255),b
  3867  001A0A  0EFF               	movlw	high STR_45
  3868  001A0C  6FD7               	movwf	(printf@f+1)& (0+255),b
  3869  001A0E  EC2F  F013         	call	_printf	;wreg free
  3870                           
  3871                           ;main.c: 569: lcdInst(0xC0);;
  3872  001A12  0EC0               	movlw	192
  3873  001A14  ECC8  F01E         	call	_lcdInst
  3874                           
  3875                           ;main.c: 571: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3876  001A18  0E33               	movlw	51
  3877  001A1A  0100               	movlb	0	; () banked
  3878  001A1C  6FED               	movwf	(??_main+1)& (0+255),b
  3879  001A1E  0EBB               	movlw	187
  3880  001A20  6FEC               	movwf	??_main& (0+255),b
  3881  001A22  0EDF               	movlw	223
  3882  001A24                     u5187:
  3883  001A24  2EE8               	decfsz	wreg,f,c
  3884  001A26  D7FE               	bra	u5187
  3885  001A28  2FEC               	decfsz	??_main& (0+255),f,b
  3886  001A2A  D7FC               	bra	u5187
  3887  001A2C  2FED               	decfsz	(??_main+1)& (0+255),f,b
  3888  001A2E  D7FA               	bra	u5187
  3889  001A30  D000               	nop2	
  3890                           
  3891                           ;main.c: 572: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3892  001A32  0E80               	movlw	128
  3893  001A34  ECC8  F01E         	call	_lcdInst
  3894  001A38  0E41               	movlw	65
  3895  001A3A  0100               	movlb	0	; () banked
  3896  001A3C  6FEC               	movwf	??_main& (0+255),b
  3897  001A3E  0EEE               	movlw	238
  3898  001A40                     u5197:
  3899  001A40  2EE8               	decfsz	wreg,f,c
  3900  001A42  D7FE               	bra	u5197
  3901  001A44  2FEC               	decfsz	??_main& (0+255),f,b
  3902  001A46  D7FC               	bra	u5197
  3903  001A48  F000               	nop	
  3904                           
  3905                           ;main.c: 574: if(operation_done == 1){
  3906  001A4A  0100               	movlb	0	; () banked
  3907  001A4C  05B4               	decf	_operation_done& (0+255),w,b
  3908  001A4E  11B5               	iorwf	(_operation_done+1)& (0+255),w,b
  3909  001A50  A4D8               	btfss	status,2,c
  3910  001A52  D7A7               	goto	l387
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;main.c: 576: }
  3914                           ;main.c: 577: }
  3915                           ;main.c: 578: initialize();
  3916                           
  3917                           ; BSR set to: 0
  3918                           
  3919                           ; BSR set to: 0
  3920                           
  3921                           ; BSR set to: 0
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;main.c: 575: break;
  3925  001A54  EC96  F018         	call	_initialize	;wreg free
  3926                           
  3927                           ;main.c: 579: mode = 0;
  3928  001A58  0E00               	movlw	0
  3929  001A5A  0100               	movlb	0	; () banked
  3930  001A5C  6FB9               	movwf	(_mode+1)& (0+255),b
  3931  001A5E  0E00               	movlw	0
  3932  001A60  6FB8               	movwf	_mode& (0+255),b
  3933                           
  3934                           ; BSR set to: 0
  3935                           
  3936                           ; BSR set to: 0
  3937  001A62  EF4B  F007         	goto	l338
  3938  001A66                     __end_of_main:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           intcon	equ	0xFF2
  3945                           intcon3	equ	0xFF0
  3946                           postinc0	equ	0xFEE
  3947                           wreg	equ	0xFE8
  3948                           postdec1	equ	0xFE5
  3949                           fsr1l	equ	0xFE1
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function _readADC *****************
  3957 ;; Defined at:
  3958 ;;		line 1060 in file "main.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  channel         1    wreg     unsigned char 
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;  channel         1    4[BANK0 ] unsigned char 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  2    0[BANK0 ] unsigned short 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2, status,0
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3972 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;Total ram usage:        5 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    4
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;;		_count_gear
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text1
  3988  003C3A                     __ptext1:
  3989                           	opt stack 0
  3990  003C3A                     _readADC:
  3991                           	opt stack 26
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;incstack = 0
  3995                           ;readADC@channel stored from wreg
  3996  003C3A  0100               	movlb	0	; () banked
  3997  003C3C  6FCC               	movwf	readADC@channel& (0+255),b
  3998                           
  3999                           ;main.c: 1069: ADCON0 = (channel & 0x0F) << 2;
  4000  003C3E  C0CC  F0CA         	movff	readADC@channel,??_readADC
  4001  003C42  0E0F               	movlw	15
  4002  003C44  0100               	movlb	0	; () banked
  4003  003C46  17CA               	andwf	??_readADC& (0+255),f,b
  4004  003C48  90D8               	bcf	status,0,c
  4005  003C4A  37CA               	rlcf	??_readADC& (0+255),f,b
  4006  003C4C  90D8               	bcf	status,0,c
  4007  003C4E  35CA               	rlcf	??_readADC& (0+255),w,b
  4008  003C50  6EC2               	movwf	4034,c	;volatile
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;main.c: 1070: ADON = 1;
  4012  003C52  80C2               	bsf	4034,0,c	;volatile
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;main.c: 1071: ADCON0bits.GO = 1;
  4016  003C54  82C2               	bsf	4034,1,c	;volatile
  4017  003C56                     
  4018                           ; BSR set to: 0
  4019  003C56  B2C2               	btfsc	4034,1,c	;volatile
  4020  003C58  D7FE               	goto	l465
  4021                           
  4022                           ;main.c: 1073: return (ADRESH << 8) | ADRESL;
  4023  003C5A  50C3               	movf	4035,w,c	;volatile
  4024  003C5C  CFC4 F0CA          	movff	4036,??_readADC	;volatile
  4025  003C60  0100               	movlb	0	; () banked
  4026  003C62  6BCB               	clrf	(??_readADC+1)& (0+255),b
  4027  003C64  C0CA  F0CB         	movff	??_readADC,??_readADC+1
  4028  003C68  6BCA               	clrf	??_readADC& (0+255),b
  4029  003C6A  11CA               	iorwf	??_readADC& (0+255),w,b
  4030  003C6C  6FC8               	movwf	?_readADC& (0+255),b
  4031  003C6E  51CB               	movf	(??_readADC+1)& (0+255),w,b
  4032  003C70  6FC9               	movwf	(?_readADC+1)& (0+255),b
  4033  003C72  0012               	return	
  4034  003C74                     __end_of_readADC:
  4035                           	opt stack 0
  4036                           tblptru	equ	0xFF8
  4037                           tblptrh	equ	0xFF7
  4038                           tblptrl	equ	0xFF6
  4039                           tablat	equ	0xFF5
  4040                           intcon	equ	0xFF2
  4041                           intcon3	equ	0xFF0
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           postdec1	equ	0xFE5
  4045                           fsr1l	equ	0xFE1
  4046                           postinc2	equ	0xFDE
  4047                           postdec2	equ	0xFDD
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           
  4052 ;; *************** function _printf *****************
  4053 ;; Defined at:
  4054 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4057 ;;		 -> STR_67(3), STR_66(9), STR_65(12), STR_63(7), 
  4058 ;;		 -> STR_61(3), STR_60(11), STR_58(3), STR_57(9), 
  4059 ;;		 -> STR_52(15), STR_51(13), STR_50(16), STR_49(15), 
  4060 ;;		 -> STR_48(15), STR_47(15), STR_46(15), STR_45(10), 
  4061 ;;		 -> STR_44(19), STR_43(17), STR_42(12), STR_41(17), 
  4062 ;;		 -> STR_40(17), STR_39(14), STR_38(15), STR_37(20), 
  4063 ;;		 -> STR_36(3), STR_35(3), STR_34(20), STR_33(3), 
  4064 ;;		 -> STR_32(13), STR_31(18), STR_30(3), STR_29(13), 
  4065 ;;		 -> STR_28(19), STR_27(11), STR_26(13), STR_25(12), 
  4066 ;;		 -> STR_24(16), STR_23(3), STR_22(4), STR_21(3), 
  4067 ;;		 -> STR_20(4), STR_19(3), STR_18(4), STR_17(3), 
  4068 ;;		 -> STR_16(4), STR_15(3), STR_14(3), STR_13(2), 
  4069 ;;		 -> STR_12(3), STR_11(2), STR_10(3), STR_9(5), 
  4070 ;;		 -> STR_8(17), STR_7(6), STR_6(8), STR_5(3), 
  4071 ;;		 -> STR_4(14), STR_3(15), STR_2(14), STR_1(16), 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  idx             1   22[BANK0 ] unsigned char 
  4074 ;;  tmpval          4    0        struct .
  4075 ;;  width           2   33[BANK0 ] int 
  4076 ;;  val             2   30[BANK0 ] unsigned int 
  4077 ;;  len             2   28[BANK0 ] unsigned int 
  4078 ;;  ap              2   26[BANK0 ] PTR void [1]
  4079 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4080 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  4081 ;;		 -> STR_88(7), number(2), final_set(40), current_set(5), 
  4082 ;;  c               1   35[BANK0 ] char 
  4083 ;;  flag            1   32[BANK0 ] unsigned char 
  4084 ;;  prec            1   23[BANK0 ] char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2   14[BANK0 ] int 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4094 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;Total ram usage:       22 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    6
  4101 ;; This function calls:
  4102 ;;		___lwdiv
  4103 ;;		___lwmod
  4104 ;;		___wmul
  4105 ;;		_isdigit
  4106 ;;		_putch
  4107 ;; This function is called by:
  4108 ;;		_main
  4109 ;;		_count_gear
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text2
  4114  00265E                     __ptext2:
  4115                           	opt stack 0
  4116  00265E                     _printf:
  4117                           	opt stack 24
  4118                           
  4119                           ;doprnt.c: 466: va_list ap;
  4120                           ;doprnt.c: 499: signed char c;
  4121                           ;doprnt.c: 501: int width;
  4122                           ;doprnt.c: 506: signed char prec;
  4123                           ;doprnt.c: 508: unsigned char flag;
  4124                           ;doprnt.c: 523: union {
  4125                           ;doprnt.c: 524: unsigned long vd;
  4126                           ;doprnt.c: 525: double integ;
  4127                           ;doprnt.c: 526: } tmpval;
  4128                           ;doprnt.c: 528: unsigned int val;
  4129                           ;doprnt.c: 529: unsigned len;
  4130                           ;doprnt.c: 530: const char * cp;
  4131                           ;doprnt.c: 533: *ap = __va_start();
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;incstack = 0
  4135  00265E  0ED8               	movlw	low (?_printf+2)
  4136  002660  0100               	movlb	0	; () banked
  4137  002662  6FE2               	movwf	printf@ap& (0+255),b
  4138  002664  0E00               	movlw	high (?_printf+2)
  4139  002666  6FE3               	movwf	(printf@ap+1)& (0+255),b
  4140                           
  4141                           ;doprnt.c: 536: while(c = *f++) {
  4142  002668  D20F               	goto	u3020
  4143  00266A                     
  4144                           ; BSR set to: 0
  4145                           ;doprnt.c: 538: if(c != '%')
  4146                           
  4147                           ; BSR set to: 0
  4148  00266A  0E25               	movlw	37
  4149  00266C  19EB               	xorwf	printf@c& (0+255),w,b
  4150  00266E  B4D8               	btfsc	status,2,c
  4151  002670  D004               	goto	l816
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;doprnt.c: 540: {
  4155                           ;doprnt.c: 541: (putch(c) );
  4156  002672  51EB               	movf	printf@c& (0+255),w,b
  4157  002674  ECBC  F01E         	call	_putch
  4158                           
  4159                           ;doprnt.c: 542: continue;
  4160  002678  D207               	goto	u3020
  4161  00267A                     l816:
  4162                           
  4163                           ;doprnt.c: 543: }
  4164                           ;doprnt.c: 546: width = 0;
  4165  00267A  0E00               	movlw	0
  4166  00267C  0100               	movlb	0	; () banked
  4167  00267E  6FEA               	movwf	(printf@width+1)& (0+255),b
  4168  002680  0E00               	movlw	0
  4169  002682  6FE9               	movwf	printf@width& (0+255),b
  4170                           
  4171                           ;doprnt.c: 548: flag = 0;
  4172  002684  0E00               	movlw	0
  4173  002686  6FE8               	movwf	printf@flag& (0+255),b
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;doprnt.c: 551: switch(*f) {
  4177                           
  4178                           ;doprnt.c: 550: for(;;) {
  4179  002688  D004               	goto	l818
  4180  00268A                     
  4181                           ;doprnt.c: 580: flag |= 0x04;
  4182                           
  4183                           ; BSR set to: 0
  4184  00268A  0100               	movlb	0	; () banked
  4185  00268C  85E8               	bsf	printf@flag& (0+255),2,b
  4186                           
  4187                           ;doprnt.c: 581: f++;
  4188  00268E  4BD6               	infsnz	printf@f& (0+255),f,b
  4189  002690  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4190  002692                     l818:
  4191                           
  4192                           ; BSR set to: 0
  4193  002692  C0D6  FFF6         	movff	printf@f,tblptrl
  4194  002696  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4195  00269A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4196  00269A  6AF8               	clrf	tblptru,c
  4197  00269C                     	endif
  4198  00269C                     	if	0	;tblptru may be non-zero
  4199  00269C                     	endif
  4200  00269C  0008               	tblrd		*
  4201  00269E  50F5               	movf	tablat,w,c
  4202                           
  4203                           ; Switch size 1, requested type "space"
  4204                           ; Number of cases is 1, Range of values is 48 to 48
  4205                           ; switch strategies available:
  4206                           ; Name         Instructions Cycles
  4207                           ; simple_byte            4     3 (average)
  4208                           ;	Chosen strategy is simple_byte
  4209  0026A0  0A30               	xorlw	48	; case 48
  4210  0026A2  B4D8               	btfsc	status,2,c
  4211  0026A4  D7F2               	goto	l819
  4212                           
  4213                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4214                           
  4215                           ;doprnt.c: 586: }
  4216                           
  4217                           ;doprnt.c: 585: break;
  4218  0026A6  C0D6  FFF6         	movff	printf@f,tblptrl
  4219  0026AA  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4220  0026AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4221  0026AE  6AF8               	clrf	tblptru,c
  4222  0026B0                     	endif
  4223  0026B0                     	if	0	;tblptru may be non-zero
  4224  0026B0                     	endif
  4225  0026B0  0008               	tblrd		*
  4226  0026B2  50F5               	movf	tablat,w,c
  4227  0026B4  EC9C  F01E         	call	_isdigit
  4228  0026B8  A0D8               	btfss	status,0,c
  4229  0026BA  D0AE               	goto	l826
  4230                           
  4231                           ;doprnt.c: 598: width = 0;
  4232  0026BC  0E00               	movlw	0
  4233  0026BE  0100               	movlb	0	; () banked
  4234  0026C0  6FEA               	movwf	(printf@width+1)& (0+255),b
  4235  0026C2  0E00               	movlw	0
  4236  0026C4  6FE9               	movwf	printf@width& (0+255),b
  4237  0026C6                     
  4238                           ;doprnt.c: 600: width *= 10;
  4239                           
  4240                           ; BSR set to: 0
  4241  0026C6  C0E9  F0D0         	movff	printf@width,___wmul@multiplier
  4242  0026CA  C0EA  F0D1         	movff	printf@width+1,___wmul@multiplier+1
  4243  0026CE  0E00               	movlw	0
  4244  0026D0  0100               	movlb	0	; () banked
  4245  0026D2  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4246  0026D4  0E0A               	movlw	10
  4247  0026D6  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  4248  0026D8  EC4F  F01E         	call	___wmul	;wreg free
  4249  0026DC  C0D0  F0E9         	movff	?___wmul,printf@width
  4250  0026E0  C0D1  F0EA         	movff	?___wmul+1,printf@width+1
  4251                           
  4252                           ;doprnt.c: 601: width += *f++ - '0';
  4253  0026E4  0ED0               	movlw	208
  4254  0026E6  0100               	movlb	0	; () banked
  4255  0026E8  6FDA               	movwf	??_printf& (0+255),b
  4256  0026EA  0EFF               	movlw	255
  4257  0026EC  6FDB               	movwf	(??_printf+1)& (0+255),b
  4258  0026EE  C0D6  FFF6         	movff	printf@f,tblptrl
  4259  0026F2  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4260  0026F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4261  0026F6  6AF8               	clrf	tblptru,c
  4262  0026F8                     	endif
  4263  0026F8                     	if	0	;tblptru may be non-zero
  4264  0026F8                     	endif
  4265  0026F8  0008               	tblrd		*
  4266  0026FA  50F5               	movf	tablat,w,c
  4267  0026FC  6FDC               	movwf	(??_printf+2)& (0+255),b
  4268  0026FE  6BDD               	clrf	(??_printf+3)& (0+255),b
  4269  002700  51DA               	movf	??_printf& (0+255),w,b
  4270  002702  27DC               	addwf	(??_printf+2)& (0+255),f,b
  4271  002704  51DB               	movf	(??_printf+1)& (0+255),w,b
  4272  002706  23DD               	addwfc	(??_printf+3)& (0+255),f,b
  4273  002708  51DC               	movf	(??_printf+2)& (0+255),w,b
  4274  00270A  27E9               	addwf	printf@width& (0+255),f,b
  4275  00270C  51DD               	movf	(??_printf+3)& (0+255),w,b
  4276  00270E  23EA               	addwfc	(printf@width+1)& (0+255),f,b
  4277                           
  4278                           ; BSR set to: 0
  4279  002710  4BD6               	infsnz	printf@f& (0+255),f,b
  4280  002712  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4284  002714  C0D6  FFF6         	movff	printf@f,tblptrl
  4285  002718  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4286  00271C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4287  00271C  6AF8               	clrf	tblptru,c
  4288  00271E                     	endif
  4289  00271E                     	if	0	;tblptru may be non-zero
  4290  00271E                     	endif
  4291  00271E  0008               	tblrd		*
  4292  002720  50F5               	movf	tablat,w,c
  4293  002722  EC9C  F01E         	call	_isdigit
  4294  002726  A0D8               	btfss	status,0,c
  4295  002728  D077               	goto	l826
  4296  00272A  D7CD               	goto	l824
  4297  00272C                     
  4298                           ;doprnt.c: 721: flag |= 0x80;
  4299  00272C  0100               	movlb	0	; () banked
  4300  00272E  8FE8               	bsf	printf@flag& (0+255),7,b
  4301                           
  4302                           ;doprnt.c: 723: break;
  4303  002730  D08F               	goto	l831
  4304  002732                     
  4305                           ; BSR set to: 0
  4306                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4307                           
  4308                           ; BSR set to: 0
  4309  002732  C0E2  FFD9         	movff	printf@ap,fsr2l
  4310  002736  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  4311  00273A  CFDE F0E0          	movff	postinc2,printf@cp
  4312  00273E  CFDD F0E1          	movff	postdec2,printf@cp+1
  4313                           
  4314                           ; BSR set to: 0
  4315  002742  0E02               	movlw	2
  4316  002744  27E2               	addwf	printf@ap& (0+255),f,b
  4317  002746  0E00               	movlw	0
  4318  002748  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;doprnt.c: 740: if(!cp)
  4322  00274A  51E0               	movf	printf@cp& (0+255),w,b
  4323  00274C  11E1               	iorwf	(printf@cp+1)& (0+255),w,b
  4324  00274E  A4D8               	btfss	status,2,c
  4325  002750  D004               	goto	l834
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;doprnt.c: 741: cp = "(null)";
  4329  002752  0E9C               	movlw	low STR_88
  4330  002754  6FE0               	movwf	printf@cp& (0+255),b
  4331  002756  0EFF               	movlw	high STR_88
  4332  002758  6FE1               	movwf	(printf@cp+1)& (0+255),b
  4333  00275A                     l834:
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;doprnt.c: 745: len = 0;
  4337                           
  4338                           ; BSR set to: 0
  4339  00275A  0E00               	movlw	0
  4340  00275C  6FE5               	movwf	(printf@len+1)& (0+255),b
  4341  00275E  0E00               	movlw	0
  4342  002760  6FE4               	movwf	printf@len& (0+255),b
  4343                           
  4344                           ;doprnt.c: 746: while(cp[len])
  4345  002762  D003               	goto	l835
  4346  002764                     
  4347                           ;doprnt.c: 747: len++;
  4348                           
  4349                           ; BSR set to: 0
  4350  002764  0100               	movlb	0	; () banked
  4351  002766  4BE4               	infsnz	printf@len& (0+255),f,b
  4352  002768  2BE5               	incf	(printf@len+1)& (0+255),f,b
  4353  00276A                     l835:
  4354                           
  4355                           ; BSR set to: 0
  4356                           
  4357                           ; BSR set to: 0
  4358  00276A  51E4               	movf	printf@len& (0+255),w,b
  4359  00276C  25E0               	addwf	printf@cp& (0+255),w,b
  4360  00276E  6FDA               	movwf	??_printf& (0+255),b
  4361  002770  51E5               	movf	(printf@len+1)& (0+255),w,b
  4362  002772  21E1               	addwfc	(printf@cp+1)& (0+255),w,b
  4363  002774  6FDB               	movwf	(??_printf+1)& (0+255),b
  4364  002776  C0DA  FFF6         	movff	??_printf,tblptrl
  4365  00277A  C0DB  FFF7         	movff	??_printf+1,tblptrh
  4366  00277E  0E00               	movlw	low (__mediumconst shr (0+16))
  4367  002780  6EF8               	movwf	tblptru,c
  4368  002782  0E0F               	movlw	(high __ramtop+-1)
  4369  002784  64F7               	cpfsgt	tblptrh,c
  4370  002786  D003               	bra	u2787
  4371  002788  0008               	tblrd		*
  4372  00278A  50F5               	movf	tablat,w,c
  4373  00278C  D005               	bra	u2780
  4374  00278E                     u2787:
  4375  00278E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4376  002792  CFF7 FFEA          	movff	tblptrh,fsr0h
  4377  002796  50EF               	movf	indf0,w,c
  4378  002798                     u2780:
  4379  002798  0900               	iorlw	0
  4380  00279A  A4D8               	btfss	status,2,c
  4381  00279C  D7E3               	goto	l836
  4382                           
  4383                           ;doprnt.c: 757: if(width > len)
  4384  00279E  0100               	movlb	0	; () banked
  4385  0027A0  51E9               	movf	printf@width& (0+255),w,b
  4386  0027A2  5DE4               	subwf	printf@len& (0+255),w,b
  4387  0027A4  51EA               	movf	(printf@width+1)& (0+255),w,b
  4388  0027A6  59E5               	subwfb	(printf@len+1)& (0+255),w,b
  4389  0027A8  B0D8               	btfsc	status,0,c
  4390  0027AA  D005               	goto	l838
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;doprnt.c: 758: width -= len;
  4394  0027AC  51E4               	movf	printf@len& (0+255),w,b
  4395  0027AE  5FE9               	subwf	printf@width& (0+255),f,b
  4396  0027B0  51E5               	movf	(printf@len+1)& (0+255),w,b
  4397  0027B2  5BEA               	subwfb	(printf@width+1)& (0+255),f,b
  4398  0027B4  D008               	goto	l840
  4399  0027B6                     l838:
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;doprnt.c: 759: else
  4403                           ;doprnt.c: 760: width = 0;
  4404                           
  4405                           ; BSR set to: 0
  4406  0027B6  0E00               	movlw	0
  4407  0027B8  6FEA               	movwf	(printf@width+1)& (0+255),b
  4408  0027BA  0E00               	movlw	0
  4409  0027BC  6FE9               	movwf	printf@width& (0+255),b
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;doprnt.c: 764: while(width--)
  4413  0027BE  D003               	goto	l840
  4414  0027C0                     l4068:
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;doprnt.c: 765: (putch(' ') );
  4418  0027C0  0E20               	movlw	32
  4419  0027C2  ECBC  F01E         	call	_putch
  4420  0027C6                     l840:
  4421  0027C6  0100               	movlb	0	; () banked
  4422  0027C8  07E9               	decf	printf@width& (0+255),f,b
  4423  0027CA  A0D8               	btfss	status,0,c
  4424  0027CC  07EA               	decf	(printf@width+1)& (0+255),f,b
  4425  0027CE  29E9               	incf	printf@width& (0+255),w,b
  4426  0027D0  E1F7               	bnz	l4068
  4427  0027D2  29EA               	incf	(printf@width+1)& (0+255),w,b
  4428  0027D4  B4D8               	btfsc	status,2,c
  4429  0027D6  D017               	goto	l843
  4430  0027D8  D7F3               	goto	l841
  4431  0027DA                     l4072:
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;doprnt.c: 768: (putch(*cp++) );
  4435  0027DA  C0E0  FFF6         	movff	printf@cp,tblptrl
  4436  0027DE  C0E1  FFF7         	movff	printf@cp+1,tblptrh
  4437  0027E2  0E00               	movlw	low (__mediumconst shr (0+16))
  4438  0027E4  6EF8               	movwf	tblptru,c
  4439  0027E6  0E0F               	movlw	(high __ramtop+-1)
  4440  0027E8  64F7               	cpfsgt	tblptrh,c
  4441  0027EA  D003               	bra	u2827
  4442  0027EC  0008               	tblrd		*
  4443  0027EE  50F5               	movf	tablat,w,c
  4444  0027F0  D005               	bra	u2820
  4445  0027F2                     u2827:
  4446  0027F2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4447  0027F6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4448  0027FA  50EF               	movf	indf0,w,c
  4449  0027FC                     u2820:
  4450  0027FC  ECBC  F01E         	call	_putch
  4451  002800  0100               	movlb	0	; () banked
  4452  002802  4BE0               	infsnz	printf@cp& (0+255),f,b
  4453  002804  2BE1               	incf	(printf@cp+1)& (0+255),f,b
  4454  002806                     l843:
  4455                           
  4456                           ; BSR set to: 0
  4457                           
  4458                           ; BSR set to: 0
  4459  002806  07E4               	decf	printf@len& (0+255),f,b
  4460  002808  A0D8               	btfss	status,0,c
  4461  00280A  07E5               	decf	(printf@len+1)& (0+255),f,b
  4462  00280C  29E4               	incf	printf@len& (0+255),w,b
  4463  00280E  E1E5               	bnz	l4072
  4464  002810  29E5               	incf	(printf@len+1)& (0+255),w,b
  4465  002812  B4D8               	btfsc	status,2,c
  4466  002814  D139               	goto	u3020
  4467  002816  D7E1               	goto	l844
  4468  002818                     l826:
  4469                           
  4470                           ; BSR set to: 0
  4471  002818  C0D6  FFF6         	movff	printf@f,tblptrl
  4472  00281C  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4473  002820  0100               	movlb	0	; () banked
  4474  002822  4BD6               	infsnz	printf@f& (0+255),f,b
  4475  002824  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4476  002826                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4477  002826  6AF8               	clrf	tblptru,c
  4478  002828                     	endif
  4479  002828                     	if	0	;tblptru may be non-zero
  4480  002828                     	endif
  4481  002828  0008               	tblrd		*
  4482  00282A  CFF5 F0EB          	movff	tablat,printf@c
  4483  00282E  51EB               	movf	printf@c& (0+255),w,b
  4484                           
  4485                           ; Switch size 1, requested type "space"
  4486                           ; Number of cases is 5, Range of values is 0 to 120
  4487                           ; switch strategies available:
  4488                           ; Name         Instructions Cycles
  4489                           ; simple_byte           16     9 (average)
  4490                           ;	Chosen strategy is simple_byte
  4491  002830  0A00               	xorlw	0	; case 0
  4492  002832  B4D8               	btfsc	status,2,c
  4493  002834  0012               	return	
  4494  002836  0A64               	xorlw	100	; case 100
  4495  002838  B4D8               	btfsc	status,2,c
  4496  00283A  D00A               	goto	l831
  4497  00283C  0A0D               	xorlw	13	; case 105
  4498  00283E  B4D8               	btfsc	status,2,c
  4499  002840  D007               	goto	l831
  4500  002842  0A1A               	xorlw	26	; case 115
  4501  002844  B4D8               	btfsc	status,2,c
  4502  002846  D775               	goto	l833
  4503  002848  0A0B               	xorlw	11	; case 120
  4504  00284A  B4D8               	btfsc	status,2,c
  4505  00284C  D76F               	goto	l832
  4506  00284E  D11C               	goto	u3020
  4507  002850                     l831:
  4508                           
  4509                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4510  002850  0100               	movlb	0	; () banked
  4511  002852  BFE8               	btfsc	printf@flag& (0+255),7,b
  4512  002854  D015               	goto	l847
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;doprnt.c: 1253: {
  4516                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4517  002856  C0E2  FFD9         	movff	printf@ap,fsr2l
  4518  00285A  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  4519  00285E  CFDE F0E6          	movff	postinc2,printf@val
  4520  002862  CFDD F0E7          	movff	postdec2,printf@val+1
  4521                           
  4522                           ; BSR set to: 0
  4523  002866  0E02               	movlw	2
  4524  002868  27E2               	addwf	printf@ap& (0+255),f,b
  4525  00286A  0E00               	movlw	0
  4526  00286C  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;doprnt.c: 1261: if((int)val < 0) {
  4530  00286E  AFE7               	btfss	(printf@val+1)& (0+255),7,b
  4531  002870  D04A               	goto	l850
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;doprnt.c: 1262: flag |= 0x03;
  4535  002872  0E03               	movlw	3
  4536  002874  13E8               	iorwf	printf@flag& (0+255),f,b
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;doprnt.c: 1263: val = -val;
  4540  002876  6DE6               	negf	printf@val& (0+255),b
  4541  002878  1FE7               	comf	(printf@val+1)& (0+255),f,b
  4542  00287A  B0D8               	btfsc	status,0,c
  4543  00287C  2BE7               	incf	(printf@val+1)& (0+255),f,b
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;doprnt.c: 1264: }
  4547                           ;doprnt.c: 1266: }
  4548  00287E  D043               	goto	l850
  4549  002880                     l847:
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;doprnt.c: 1268: else
  4553                           ;doprnt.c: 1273: {
  4554                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4555                           
  4556                           ; BSR set to: 0
  4557  002880  C0E2  FFD9         	movff	printf@ap,fsr2l
  4558  002884  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  4559  002888  CFDE F0E6          	movff	postinc2,printf@val
  4560  00288C  CFDD F0E7          	movff	postdec2,printf@val+1
  4561                           
  4562                           ; BSR set to: 0
  4563  002890  0E02               	movlw	2
  4564  002892  27E2               	addwf	printf@ap& (0+255),f,b
  4565  002894  0E00               	movlw	0
  4566  002896  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;doprnt.c: 1287: }
  4570                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4571  002898  D036               	goto	l850
  4572  00289A                     
  4573                           ; BSR set to: 0
  4574                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4575                           
  4576                           ; BSR set to: 0
  4577  00289A  0E01               	movlw	1
  4578  00289C  6FEB               	movwf	printf@c& (0+255),b
  4579  00289E                     l4098:
  4580                           
  4581                           ; BSR set to: 0
  4582  00289E  0E05               	movlw	5
  4583  0028A0  19EB               	xorwf	printf@c& (0+255),w,b
  4584  0028A2  B4D8               	btfsc	status,2,c
  4585  0028A4  D038               	goto	l855
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;doprnt.c: 1306: if(val < dpowers[c])
  4589                           
  4590                           ; BSR set to: 0
  4591                           
  4592                           ; BSR set to: 0
  4593  0028A6  51EB               	movf	printf@c& (0+255),w,b
  4594  0028A8  0D02               	mullw	2
  4595  0028AA  0E2A               	movlw	low _dpowers
  4596  0028AC  24F3               	addwf	prodl,w,c
  4597  0028AE  6EF6               	movwf	tblptrl,c
  4598  0028B0  0EFD               	movlw	high _dpowers
  4599  0028B2  20F4               	addwfc	prodh,w,c
  4600  0028B4  6EF7               	movwf	tblptrh,c
  4601  0028B6                     	if	1	;There are 3 active tblptr bytes
  4602  0028B6  6AF8               	clrf	tblptru,c
  4603  0028B8  0E00               	movlw	low (__mediumconst shr (0+16))
  4604  0028BA  22F8               	addwfc	tblptru,f,c
  4605  0028BC                     	endif
  4606  0028BC  0009               	tblrd		*+
  4607  0028BE  50F5               	movf	tablat,w,c
  4608  0028C0  5DE6               	subwf	printf@val& (0+255),w,b
  4609  0028C2  0009               	tblrd		*+
  4610  0028C4  50F5               	movf	tablat,w,c
  4611  0028C6  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  4612  0028C8  A0D8               	btfss	status,0,c
  4613  0028CA  D025               	goto	l855
  4614                           
  4615                           ; BSR set to: 0
  4616                           
  4617                           ; BSR set to: 0
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;doprnt.c: 1307: break;
  4621  0028CC  2BEB               	incf	printf@c& (0+255),f,b
  4622  0028CE  D7E7               	goto	l4098
  4623  0028D0                     
  4624                           ; BSR set to: 0
  4625                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4626                           
  4627                           ; BSR set to: 0
  4628  0028D0  0E01               	movlw	1
  4629  0028D2  6FEB               	movwf	printf@c& (0+255),b
  4630  0028D4                     l4112:
  4631                           
  4632                           ; BSR set to: 0
  4633  0028D4  0E04               	movlw	4
  4634  0028D6  19EB               	xorwf	printf@c& (0+255),w,b
  4635  0028D8  B4D8               	btfsc	status,2,c
  4636  0028DA  D01D               	goto	l855
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644  0028DC  51EB               	movf	printf@c& (0+255),w,b
  4645  0028DE  0D02               	mullw	2
  4646  0028E0  0E34               	movlw	low _hexpowers
  4647  0028E2  24F3               	addwf	prodl,w,c
  4648  0028E4  6EF6               	movwf	tblptrl,c
  4649  0028E6  0EFD               	movlw	high _hexpowers
  4650  0028E8  20F4               	addwfc	prodh,w,c
  4651  0028EA  6EF7               	movwf	tblptrh,c
  4652  0028EC                     	if	1	;There are 3 active tblptr bytes
  4653  0028EC  6AF8               	clrf	tblptru,c
  4654  0028EE  0E00               	movlw	low (__mediumconst shr (0+16))
  4655  0028F0  22F8               	addwfc	tblptru,f,c
  4656  0028F2                     	endif
  4657  0028F2  0009               	tblrd		*+
  4658  0028F4  50F5               	movf	tablat,w,c
  4659  0028F6  5DE6               	subwf	printf@val& (0+255),w,b
  4660  0028F8  0009               	tblrd		*+
  4661  0028FA  50F5               	movf	tablat,w,c
  4662  0028FC  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  4663  0028FE  A0D8               	btfss	status,0,c
  4664  002900  D00A               	goto	l855
  4665                           
  4666                           ; BSR set to: 0
  4667                           
  4668                           ; BSR set to: 0
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 1318: break;
  4672  002902  2BEB               	incf	printf@c& (0+255),f,b
  4673  002904  D7E7               	goto	l4112
  4674  002906                     l850:
  4675                           
  4676                           ; BSR set to: 0
  4677                           
  4678                           ; BSR set to: 0
  4679  002906  51E8               	movf	printf@flag& (0+255),w,b
  4680  002908  0B80               	andlw	128
  4681                           
  4682                           ; Switch size 1, requested type "space"
  4683                           ; Number of cases is 2, Range of values is 0 to 128
  4684                           ; switch strategies available:
  4685                           ; Name         Instructions Cycles
  4686                           ; simple_byte            7     4 (average)
  4687                           ;	Chosen strategy is simple_byte
  4688  00290A  0A00               	xorlw	0	; case 0
  4689  00290C  B4D8               	btfsc	status,2,c
  4690  00290E  D7C5               	goto	l851
  4691  002910  0A80               	xorlw	128	; case 128
  4692  002912  B4D8               	btfsc	status,2,c
  4693  002914  D7DD               	goto	l856
  4694  002916                     l855:
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4698                           
  4699                           ; BSR set to: 0
  4700  002916  51E9               	movf	printf@width& (0+255),w,b
  4701  002918  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  4702  00291A  B4D8               	btfsc	status,2,c
  4703  00291C  D009               	goto	l860
  4704                           
  4705                           ; BSR set to: 0
  4706  00291E  C0E8  F0DA         	movff	printf@flag,??_printf
  4707  002922  0E03               	movlw	3
  4708  002924  17DA               	andwf	??_printf& (0+255),f,b
  4709  002926  B4D8               	btfsc	status,2,c
  4710  002928  D003               	goto	l860
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;doprnt.c: 1346: width--;
  4714  00292A  07E9               	decf	printf@width& (0+255),f,b
  4715  00292C  A0D8               	btfss	status,0,c
  4716  00292E  07EA               	decf	(printf@width+1)& (0+255),f,b
  4717  002930                     l860:
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;doprnt.c: 1381: if(width > c)
  4721                           
  4722                           ; BSR set to: 0
  4723  002930  0E80               	movlw	128
  4724  002932  BFEB               	btfsc	printf@c& (0+255),7,b
  4725  002934  0E7F               	movlw	127
  4726  002936  6FDA               	movwf	??_printf& (0+255),b
  4727  002938  51E9               	movf	printf@width& (0+255),w,b
  4728  00293A  5DEB               	subwf	printf@c& (0+255),w,b
  4729  00293C  51EA               	movf	(printf@width+1)& (0+255),w,b
  4730  00293E  0A80               	xorlw	128
  4731  002940  59DA               	subwfb	??_printf& (0+255),w,b
  4732  002942  B0D8               	btfsc	status,0,c
  4733  002944  D007               	goto	l861
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;doprnt.c: 1382: width -= c;
  4737  002946  51EB               	movf	printf@c& (0+255),w,b
  4738  002948  5FE9               	subwf	printf@width& (0+255),f,b
  4739  00294A  0E00               	movlw	0
  4740  00294C  BFEB               	btfsc	printf@c& (0+255),7,b
  4741  00294E  0EFF               	movlw	255
  4742  002950  5BEA               	subwfb	(printf@width+1)& (0+255),f,b
  4743  002952  D004               	goto	l862
  4744  002954                     l861:
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;doprnt.c: 1383: else
  4748                           ;doprnt.c: 1384: width = 0;
  4749                           
  4750                           ; BSR set to: 0
  4751  002954  0E00               	movlw	0
  4752  002956  6FEA               	movwf	(printf@width+1)& (0+255),b
  4753  002958  0E00               	movlw	0
  4754  00295A  6FE9               	movwf	printf@width& (0+255),b
  4755  00295C                     l862:
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;doprnt.c: 1387: if(flag & 0x04) {
  4759                           
  4760                           ; BSR set to: 0
  4761  00295C  A5E8               	btfss	printf@flag& (0+255),2,b
  4762  00295E  D016               	goto	l863
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;doprnt.c: 1392: if(flag & 0x03)
  4766  002960  C0E8  F0DA         	movff	printf@flag,??_printf
  4767  002964  0E03               	movlw	3
  4768  002966  17DA               	andwf	??_printf& (0+255),f,b
  4769  002968  B4D8               	btfsc	status,2,c
  4770  00296A  D003               	goto	l864
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;doprnt.c: 1393: (putch('-') );
  4774  00296C  0E2D               	movlw	45
  4775  00296E  ECBC  F01E         	call	_putch
  4776  002972                     l864:
  4777                           
  4778                           ;doprnt.c: 1415: if(width)
  4779  002972  0100               	movlb	0	; () banked
  4780  002974  51E9               	movf	printf@width& (0+255),w,b
  4781  002976  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  4782  002978  B4D8               	btfsc	status,2,c
  4783  00297A  D020               	goto	l872
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;doprnt.c: 1417: (putch('0') );
  4787                           
  4788                           ; BSR set to: 0
  4789                           
  4790                           ;doprnt.c: 1416: do
  4791  00297C  0E30               	movlw	48
  4792  00297E  ECBC  F01E         	call	_putch
  4793                           
  4794                           ;doprnt.c: 1418: while(--width);
  4795  002982  0100               	movlb	0	; () banked
  4796  002984  07E9               	decf	printf@width& (0+255),f,b
  4797  002986  A0D8               	btfss	status,0,c
  4798  002988  07EA               	decf	(printf@width+1)& (0+255),f,b
  4799  00298A  D7F4               	goto	L10
  4800  00298C                     l863:
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;doprnt.c: 1422: {
  4804                           ;doprnt.c: 1424: if(width
  4805                           ;doprnt.c: 1428: )
  4806                           
  4807                           ; BSR set to: 0
  4808  00298C  51E9               	movf	printf@width& (0+255),w,b
  4809  00298E  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  4810  002990  B4D8               	btfsc	status,2,c
  4811  002992  D00B               	goto	u3000
  4812  002994                     u2990:
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;doprnt.c: 1430: (putch(' ') );
  4816                           
  4817                           ; BSR set to: 0
  4818                           
  4819                           ;doprnt.c: 1429: do
  4820  002994  0E20               	movlw	32
  4821  002996  ECBC  F01E         	call	_putch
  4822                           
  4823                           ;doprnt.c: 1431: while(--width);
  4824  00299A  0100               	movlb	0	; () banked
  4825  00299C  07E9               	decf	printf@width& (0+255),f,b
  4826  00299E  A0D8               	btfss	status,0,c
  4827  0029A0  07EA               	decf	(printf@width+1)& (0+255),f,b
  4828  0029A2  51E9               	movf	printf@width& (0+255),w,b
  4829  0029A4  11EA               	iorwf	(printf@width+1)& (0+255),w,b
  4830  0029A6  A4D8               	btfss	status,2,c
  4831  0029A8  D7F5               	goto	u2990
  4832  0029AA                     u3000:
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;doprnt.c: 1438: if(flag & 0x03)
  4836                           
  4837                           ; BSR set to: 0
  4838                           
  4839                           ; BSR set to: 0
  4840  0029AA  C0E8  F0DA         	movff	printf@flag,??_printf
  4841  0029AE  0E03               	movlw	3
  4842  0029B0  17DA               	andwf	??_printf& (0+255),f,b
  4843  0029B2  B4D8               	btfsc	status,2,c
  4844  0029B4  D003               	goto	l872
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;doprnt.c: 1439: (putch('-') );
  4848  0029B6  0E2D               	movlw	45
  4849  0029B8  ECBC  F01E         	call	_putch
  4850  0029BC                     l872:
  4851                           
  4852                           ;doprnt.c: 1469: }
  4853                           ;doprnt.c: 1472: prec = c;
  4854  0029BC  C0EB  F0DF         	movff	printf@c,printf@prec
  4855                           
  4856                           ;doprnt.c: 1474: while(prec--) {
  4857  0029C0  D05E               	goto	l873
  4858  0029C2                     
  4859                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4860  0029C2  0100               	movlb	0	; () banked
  4861  0029C4  51DF               	movf	printf@prec& (0+255),w,b
  4862  0029C6  0D02               	mullw	2
  4863  0029C8  0E2A               	movlw	low _dpowers
  4864  0029CA  24F3               	addwf	prodl,w,c
  4865  0029CC  6EF6               	movwf	tblptrl,c
  4866  0029CE  0EFD               	movlw	high _dpowers
  4867  0029D0  20F4               	addwfc	prodh,w,c
  4868  0029D2  6EF7               	movwf	tblptrh,c
  4869  0029D4                     	if	1	;There are 3 active tblptr bytes
  4870  0029D4  6AF8               	clrf	tblptru,c
  4871  0029D6  0E00               	movlw	low (__mediumconst shr (0+16))
  4872  0029D8  22F8               	addwfc	tblptru,f,c
  4873  0029DA                     	endif
  4874  0029DA  0009               	tblrd		*+
  4875  0029DC  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  4876  0029E0  000A               	tblrd		*-
  4877  0029E2  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  4878  0029E6  C0E6  F0C8         	movff	printf@val,___lwdiv@dividend
  4879  0029EA  C0E7  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  4880  0029EE  ECD2  F01C         	call	___lwdiv	;wreg free
  4881  0029F2  C0C8  F0CF         	movff	?___lwdiv,___lwmod@dividend
  4882  0029F6  C0C9  F0D0         	movff	?___lwdiv+1,___lwmod@dividend+1
  4883  0029FA  0E00               	movlw	0
  4884  0029FC  0100               	movlb	0	; () banked
  4885  0029FE  6FD2               	movwf	(___lwmod@divisor+1)& (0+255),b
  4886  002A00  0E0A               	movlw	10
  4887  002A02  6FD1               	movwf	___lwmod@divisor& (0+255),b
  4888  002A04  ECB9  F01D         	call	___lwmod	;wreg free
  4889  002A08  0100               	movlb	0	; () banked
  4890  002A0A  51CF               	movf	?___lwmod& (0+255),w,b
  4891  002A0C  0F30               	addlw	48
  4892  002A0E  6FEB               	movwf	printf@c& (0+255),b
  4893                           
  4894                           ;doprnt.c: 1491: break;
  4895  002A10  D033               	goto	l877
  4896  002A12                     
  4897                           ; BSR set to: 0
  4898                           ;doprnt.c: 1499: {
  4899                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4900                           
  4901                           ; BSR set to: 0
  4902  002A12  C0E6  F0C8         	movff	printf@val,___lwdiv@dividend
  4903  002A16  C0E7  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  4904  002A1A  51DF               	movf	printf@prec& (0+255),w,b
  4905  002A1C  0D02               	mullw	2
  4906  002A1E  0E34               	movlw	low _hexpowers
  4907  002A20  24F3               	addwf	prodl,w,c
  4908  002A22  6EF6               	movwf	tblptrl,c
  4909  002A24  0EFD               	movlw	high _hexpowers
  4910  002A26  20F4               	addwfc	prodh,w,c
  4911  002A28  6EF7               	movwf	tblptrh,c
  4912  002A2A                     	if	1	;There are 3 active tblptr bytes
  4913  002A2A  6AF8               	clrf	tblptru,c
  4914  002A2C  0E00               	movlw	low (__mediumconst shr (0+16))
  4915  002A2E  22F8               	addwfc	tblptru,f,c
  4916  002A30                     	endif
  4917  002A30  0009               	tblrd		*+
  4918  002A32  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  4919  002A36  000A               	tblrd		*-
  4920  002A38  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  4921  002A3C  ECD2  F01C         	call	___lwdiv	;wreg free
  4922  002A40  0100               	movlb	0	; () banked
  4923  002A42  51C8               	movf	?___lwdiv& (0+255),w,b
  4924  002A44  0B0F               	andlw	15
  4925  002A46  6FDE               	movwf	printf@idx& (0+255),b
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4929  002A48  51DE               	movf	printf@idx& (0+255),w,b
  4930  002A4A  0D01               	mullw	1
  4931  002A4C  0E10               	movlw	low STR_89
  4932  002A4E  24F3               	addwf	prodl,w,c
  4933  002A50  6EF6               	movwf	tblptrl,c
  4934  002A52  0EFE               	movlw	high STR_89
  4935  002A54  20F4               	addwfc	prodh,w,c
  4936  002A56  6EF7               	movwf	tblptrh,c
  4937  002A58                     	if	1	;There are 3 active tblptr bytes
  4938  002A58  6AF8               	clrf	tblptru,c
  4939  002A5A  0E00               	movlw	low (__mediumconst shr (0+16))
  4940  002A5C  22F8               	addwfc	tblptru,f,c
  4941  002A5E                     	endif
  4942  002A5E  0008               	tblrd		*
  4943  002A60  CFF5 F0EB          	movff	tablat,printf@c
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;doprnt.c: 1523: }
  4947                           
  4948                           ;doprnt.c: 1508: }
  4949                           ;doprnt.c: 1510: break;
  4950  002A64  D009               	goto	l877
  4951  002A66                     
  4952                           ; BSR set to: 0
  4953  002A66  0100               	movlb	0	; () banked
  4954  002A68  51E8               	movf	printf@flag& (0+255),w,b
  4955  002A6A  0B80               	andlw	128
  4956                           
  4957                           ; Switch size 1, requested type "space"
  4958                           ; Number of cases is 2, Range of values is 0 to 128
  4959                           ; switch strategies available:
  4960                           ; Name         Instructions Cycles
  4961                           ; simple_byte            7     4 (average)
  4962                           ;	Chosen strategy is simple_byte
  4963  002A6C  0A00               	xorlw	0	; case 0
  4964  002A6E  B4D8               	btfsc	status,2,c
  4965  002A70  D7A8               	goto	l876
  4966  002A72  0A80               	xorlw	128	; case 128
  4967  002A74  B4D8               	btfsc	status,2,c
  4968  002A76  D7CD               	goto	l878
  4969  002A78                     l877:
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;doprnt.c: 1524: (putch(c) );
  4973                           
  4974                           ; BSR set to: 0
  4975  002A78  51EB               	movf	printf@c& (0+255),w,b
  4976  002A7A  ECBC  F01E         	call	_putch
  4977  002A7E                     l873:
  4978  002A7E  0100               	movlb	0	; () banked
  4979  002A80  07DF               	decf	printf@prec& (0+255),f,b
  4980  002A82  29DF               	incf	printf@prec& (0+255),w,b
  4981  002A84  A4D8               	btfss	status,2,c
  4982  002A86  D7EF               	goto	l875
  4983  002A88                     u3020:
  4984                           
  4985                           ; BSR set to: 0
  4986                           
  4987                           ; BSR set to: 0
  4988  002A88  C0D6  FFF6         	movff	printf@f,tblptrl
  4989  002A8C  C0D7  FFF7         	movff	printf@f+1,tblptrh
  4990  002A90  0100               	movlb	0	; () banked
  4991  002A92  4BD6               	infsnz	printf@f& (0+255),f,b
  4992  002A94  2BD7               	incf	(printf@f+1)& (0+255),f,b
  4993  002A96                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4994  002A96  6AF8               	clrf	tblptru,c
  4995  002A98                     	endif
  4996  002A98                     	if	0	;tblptru may be non-zero
  4997  002A98                     	endif
  4998  002A98  0008               	tblrd		*
  4999  002A9A  CFF5 F0EB          	movff	tablat,printf@c
  5000  002A9E  51EB               	movf	printf@c& (0+255),w,b
  5001  002AA0  B4D8               	btfsc	status,2,c
  5002  002AA2  0012               	return	
  5003  002AA4  D5E2               	goto	l815
  5004  002AA6                     __end_of_printf:
  5005                           	opt stack 0
  5006                           tblptru	equ	0xFF8
  5007                           tblptrh	equ	0xFF7
  5008                           tblptrl	equ	0xFF6
  5009                           tablat	equ	0xFF5
  5010                           prodh	equ	0xFF4
  5011                           prodl	equ	0xFF3
  5012                           intcon	equ	0xFF2
  5013                           intcon3	equ	0xFF0
  5014                           indf0	equ	0xFEF
  5015                           postinc0	equ	0xFEE
  5016                           fsr0h	equ	0xFEA
  5017                           fsr0l	equ	0xFE9
  5018                           wreg	equ	0xFE8
  5019                           postdec1	equ	0xFE5
  5020                           fsr1l	equ	0xFE1
  5021                           postinc2	equ	0xFDE
  5022                           postdec2	equ	0xFDD
  5023                           fsr2h	equ	0xFDA
  5024                           fsr2l	equ	0xFD9
  5025                           status	equ	0xFD8
  5026                           
  5027 ;; *************** function _putch *****************
  5028 ;; Defined at:
  5029 ;;		line 24 in file "lcd.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;  data            1    wreg     unsigned char 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  data            1    2[BANK0 ] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  1    wreg      void 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;Total ram usage:        1 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    5
  5050 ;; This function calls:
  5051 ;;		_lcdNibble
  5052 ;; This function is called by:
  5053 ;;		_printf
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           	psect	text3
  5058  003D78                     __ptext3:
  5059                           	opt stack 0
  5060  003D78                     _putch:
  5061                           	opt stack 24
  5062                           
  5063                           ;incstack = 0
  5064                           ;putch@data stored from wreg
  5065  003D78  0100               	movlb	0	; () banked
  5066  003D7A  6FCA               	movwf	putch@data& (0+255),b
  5067                           
  5068                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5069  003D7C  848C               	bsf	3980,2,c	;volatile
  5070                           
  5071                           ;lcd.c: 33: lcdNibble(data);
  5072  003D7E  0100               	movlb	0	; () banked
  5073  003D80  51CA               	movf	putch@data& (0+255),w,b
  5074  003D82  EC6D  F01A         	call	_lcdNibble
  5075                           
  5076                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5077  003D86  0EC8               	movlw	200
  5078  003D88                     u5207:
  5079  003D88  D000               	nop2	
  5080  003D8A  2EE8               	decfsz	wreg,f,c
  5081  003D8C  D7FD               	bra	u5207
  5082  003D8E  0012               	return		;funcret
  5083  003D90                     __end_of_putch:
  5084                           	opt stack 0
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           intcon	equ	0xFF2
  5092                           intcon3	equ	0xFF0
  5093                           indf0	equ	0xFEF
  5094                           postinc0	equ	0xFEE
  5095                           fsr0h	equ	0xFEA
  5096                           fsr0l	equ	0xFE9
  5097                           wreg	equ	0xFE8
  5098                           postdec1	equ	0xFE5
  5099                           fsr1l	equ	0xFE1
  5100                           postinc2	equ	0xFDE
  5101                           postdec2	equ	0xFDD
  5102                           fsr2h	equ	0xFDA
  5103                           fsr2l	equ	0xFD9
  5104                           status	equ	0xFD8
  5105                           
  5106 ;; *************** function _isdigit *****************
  5107 ;; Defined at:
  5108 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  c               1    wreg     unsigned char 
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;  c               1    2[BANK0 ] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;		None               void
  5115 ;; Registers used:
  5116 ;;		wreg, status,2, status,0
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;Total ram usage:        3 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:    4
  5129 ;; This function calls:
  5130 ;;		Nothing
  5131 ;; This function is called by:
  5132 ;;		_printf
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           	psect	text4
  5137  003D38                     __ptext4:
  5138                           	opt stack 0
  5139  003D38                     _isdigit:
  5140                           	opt stack 25
  5141                           
  5142                           ;incstack = 0
  5143                           ;isdigit@c stored from wreg
  5144  003D38  0100               	movlb	0	; () banked
  5145  003D3A  6FCA               	movwf	isdigit@c& (0+255),b
  5146  003D3C  0E00               	movlw	0
  5147  003D3E  0100               	movlb	0	; () banked
  5148  003D40  6FC9               	movwf	_isdigit$1280& (0+255),b
  5149                           
  5150                           ; BSR set to: 0
  5151  003D42  0E3A               	movlw	58
  5152  003D44  61CA               	cpfslt	isdigit@c& (0+255),b
  5153  003D46  D005               	goto	l1211
  5154                           
  5155                           ; BSR set to: 0
  5156  003D48  0E2F               	movlw	47
  5157  003D4A  65CA               	cpfsgt	isdigit@c& (0+255),b
  5158  003D4C  D002               	goto	l1211
  5159                           
  5160                           ; BSR set to: 0
  5161  003D4E  0E01               	movlw	1
  5162  003D50  6FC9               	movwf	_isdigit$1280& (0+255),b
  5163  003D52                     l1211:
  5164                           
  5165                           ; BSR set to: 0
  5166                           
  5167                           ; BSR set to: 0
  5168  003D52  C0C9  F0C8         	movff	_isdigit$1280,??_isdigit
  5169  003D56  31C8               	rrcf	??_isdigit& (0+255),w,b
  5170  003D58  0012               	return	
  5171  003D5A                     __end_of_isdigit:
  5172                           	opt stack 0
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           intcon3	equ	0xFF0
  5181                           indf0	equ	0xFEF
  5182                           postinc0	equ	0xFEE
  5183                           fsr0h	equ	0xFEA
  5184                           fsr0l	equ	0xFE9
  5185                           wreg	equ	0xFE8
  5186                           postdec1	equ	0xFE5
  5187                           fsr1l	equ	0xFE1
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194 ;; *************** function ___lwmod *****************
  5195 ;; Defined at:
  5196 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  dividend        2    7[BANK0 ] unsigned int 
  5199 ;;  divisor         2    9[BANK0 ] unsigned int 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  counter         1   11[BANK0 ] unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  2    7[BANK0 ] unsigned int 
  5204 ;; Registers used:
  5205 ;;		wreg, status,2, status,0
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5211 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;Total ram usage:        5 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    4
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_printf
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text5
  5226  003B72                     __ptext5:
  5227                           	opt stack 0
  5228  003B72                     ___lwmod:
  5229                           	opt stack 25
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;incstack = 0
  5233  003B72  0100               	movlb	0	; () banked
  5234  003B74  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5235  003B76  11D2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5236  003B78  B4D8               	btfsc	status,2,c
  5237  003B7A  D018               	goto	l1305
  5238                           
  5239                           ; BSR set to: 0
  5240  003B7C  0E01               	movlw	1
  5241  003B7E  6FD3               	movwf	___lwmod@counter& (0+255),b
  5242  003B80  D004               	goto	l1300
  5243  003B82                     
  5244                           ; BSR set to: 0
  5245                           
  5246                           ; BSR set to: 0
  5247  003B82  90D8               	bcf	status,0,c
  5248  003B84  37D1               	rlcf	___lwmod@divisor& (0+255),f,b
  5249  003B86  37D2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5250  003B88  2BD3               	incf	___lwmod@counter& (0+255),f,b
  5251  003B8A                     l1300:
  5252                           
  5253                           ; BSR set to: 0
  5254                           
  5255                           ; BSR set to: 0
  5256  003B8A  AFD2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5257  003B8C  D7FA               	goto	l1301
  5258  003B8E                     u2620:
  5259                           
  5260                           ; BSR set to: 0
  5261                           
  5262                           ; BSR set to: 0
  5263                           
  5264                           ; BSR set to: 0
  5265  003B8E  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5266  003B90  5DCF               	subwf	___lwmod@dividend& (0+255),w,b
  5267  003B92  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5268  003B94  59D0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5269  003B96  A0D8               	btfss	status,0,c
  5270  003B98  D004               	goto	l1304
  5271                           
  5272                           ; BSR set to: 0
  5273  003B9A  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5274  003B9C  5FCF               	subwf	___lwmod@dividend& (0+255),f,b
  5275  003B9E  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5276  003BA0  5BD0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5277  003BA2                     l1304:
  5278                           
  5279                           ; BSR set to: 0
  5280                           
  5281                           ; BSR set to: 0
  5282  003BA2  90D8               	bcf	status,0,c
  5283  003BA4  33D2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5284  003BA6  33D1               	rrcf	___lwmod@divisor& (0+255),f,b
  5285                           
  5286                           ; BSR set to: 0
  5287  003BA8  2FD3               	decfsz	___lwmod@counter& (0+255),f,b
  5288  003BAA  D7F1               	goto	u2620
  5289  003BAC                     l1305:
  5290                           
  5291                           ; BSR set to: 0
  5292                           
  5293                           ; BSR set to: 0
  5294  003BAC  C0CF  F0CF         	movff	___lwmod@dividend,?___lwmod
  5295  003BB0  C0D0  F0D0         	movff	___lwmod@dividend+1,?___lwmod+1
  5296                           
  5297                           ; BSR set to: 0
  5298  003BB4  0012               	return		;funcret
  5299  003BB6                     __end_of___lwmod:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           intcon3	equ	0xFF0
  5309                           indf0	equ	0xFEF
  5310                           postinc0	equ	0xFEE
  5311                           fsr0h	equ	0xFEA
  5312                           fsr0l	equ	0xFE9
  5313                           wreg	equ	0xFE8
  5314                           postdec1	equ	0xFE5
  5315                           fsr1l	equ	0xFE1
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function ___lwdiv *****************
  5323 ;; Defined at:
  5324 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;  dividend        2    0[BANK0 ] unsigned int 
  5327 ;;  divisor         2    2[BANK0 ] unsigned int 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  quotient        2    4[BANK0 ] unsigned int 
  5330 ;;  counter         1    6[BANK0 ] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  2    0[BANK0 ] unsigned int 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5340 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;Total ram usage:        7 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    4
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_printf
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text6
  5355  0039A4                     __ptext6:
  5356                           	opt stack 0
  5357  0039A4                     ___lwdiv:
  5358                           	opt stack 25
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;incstack = 0
  5362  0039A4  0E00               	movlw	0
  5363  0039A6  0100               	movlb	0	; () banked
  5364  0039A8  6FCD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5365  0039AA  0E00               	movlw	0
  5366  0039AC  6FCC               	movwf	___lwdiv@quotient& (0+255),b
  5367                           
  5368                           ; BSR set to: 0
  5369  0039AE  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5370  0039B0  11CB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5371  0039B2  B4D8               	btfsc	status,2,c
  5372  0039B4  D01C               	goto	l1295
  5373                           
  5374                           ; BSR set to: 0
  5375  0039B6  0E01               	movlw	1
  5376  0039B8  6FCE               	movwf	___lwdiv@counter& (0+255),b
  5377  0039BA  D004               	goto	l1290
  5378  0039BC                     
  5379                           ; BSR set to: 0
  5380                           
  5381                           ; BSR set to: 0
  5382  0039BC  90D8               	bcf	status,0,c
  5383  0039BE  37CA               	rlcf	___lwdiv@divisor& (0+255),f,b
  5384  0039C0  37CB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5385  0039C2  2BCE               	incf	___lwdiv@counter& (0+255),f,b
  5386  0039C4                     l1290:
  5387                           
  5388                           ; BSR set to: 0
  5389                           
  5390                           ; BSR set to: 0
  5391  0039C4  AFCB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5392  0039C6  D7FA               	goto	l1291
  5393  0039C8                     u2590:
  5394                           
  5395                           ; BSR set to: 0
  5396                           
  5397                           ; BSR set to: 0
  5398                           
  5399                           ; BSR set to: 0
  5400  0039C8  90D8               	bcf	status,0,c
  5401  0039CA  37CC               	rlcf	___lwdiv@quotient& (0+255),f,b
  5402  0039CC  37CD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5403                           
  5404                           ; BSR set to: 0
  5405  0039CE  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5406  0039D0  5DC8               	subwf	___lwdiv@dividend& (0+255),w,b
  5407  0039D2  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5408  0039D4  59C9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5409  0039D6  A0D8               	btfss	status,0,c
  5410  0039D8  D005               	goto	l1294
  5411                           
  5412                           ; BSR set to: 0
  5413  0039DA  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5414  0039DC  5FC8               	subwf	___lwdiv@dividend& (0+255),f,b
  5415  0039DE  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5416  0039E0  5BC9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5417                           
  5418                           ; BSR set to: 0
  5419  0039E2  81CC               	bsf	___lwdiv@quotient& (0+255),0,b
  5420  0039E4                     l1294:
  5421                           
  5422                           ; BSR set to: 0
  5423                           
  5424                           ; BSR set to: 0
  5425  0039E4  90D8               	bcf	status,0,c
  5426  0039E6  33CB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5427  0039E8  33CA               	rrcf	___lwdiv@divisor& (0+255),f,b
  5428                           
  5429                           ; BSR set to: 0
  5430  0039EA  2FCE               	decfsz	___lwdiv@counter& (0+255),f,b
  5431  0039EC  D7ED               	goto	u2590
  5432  0039EE                     l1295:
  5433                           
  5434                           ; BSR set to: 0
  5435                           
  5436                           ; BSR set to: 0
  5437  0039EE  C0CC  F0C8         	movff	___lwdiv@quotient,?___lwdiv
  5438  0039F2  C0CD  F0C9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5439                           
  5440                           ; BSR set to: 0
  5441  0039F6  0012               	return		;funcret
  5442  0039F8                     __end_of___lwdiv:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           intcon3	equ	0xFF0
  5452                           indf0	equ	0xFEF
  5453                           postinc0	equ	0xFEE
  5454                           fsr0h	equ	0xFEA
  5455                           fsr0l	equ	0xFE9
  5456                           wreg	equ	0xFE8
  5457                           postdec1	equ	0xFE5
  5458                           fsr1l	equ	0xFE1
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _initialize *****************
  5466 ;; Defined at:
  5467 ;;		line 1025 in file "main.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      void 
  5474 ;; Registers used:
  5475 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;Total ram usage:        0 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    4
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_main
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text7
  5496  00312C                     __ptext7:
  5497                           	opt stack 0
  5498  00312C                     _initialize:
  5499                           	opt stack 26
  5500                           
  5501                           ;main.c: 1026: white_tape = 0;
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;incstack = 0
  5505  00312C  0E00               	movlw	0
  5506  00312E  0100               	movlb	0	; () banked
  5507  003130  6FBB               	movwf	(_white_tape+1)& (0+255),b
  5508  003132  0E00               	movlw	0
  5509  003134  6FBA               	movwf	_white_tape& (0+255),b
  5510                           
  5511                           ;main.c: 1027: mode = 0;
  5512  003136  0E00               	movlw	0
  5513  003138  6FB9               	movwf	(_mode+1)& (0+255),b
  5514  00313A  0E00               	movlw	0
  5515  00313C  6FB8               	movwf	_mode& (0+255),b
  5516                           
  5517                           ;main.c: 1028: state = 0;
  5518  00313E  0E00               	movlw	0
  5519  003140  6FAD               	movwf	(_state+1)& (0+255),b
  5520  003142  0E00               	movlw	0
  5521  003144  6FAC               	movwf	_state& (0+255),b
  5522                           
  5523                           ;main.c: 1029: assembly_step = 0;
  5524  003146  0E00               	movlw	0
  5525  003148  6FAB               	movwf	(_assembly_step+1)& (0+255),b
  5526  00314A  0E00               	movlw	0
  5527  00314C  6FAA               	movwf	_assembly_step& (0+255),b
  5528                           
  5529                           ;main.c: 1030: counter_step = 0;
  5530  00314E  0E00               	movlw	0
  5531  003150  6E6E               	movwf	_counter_step+1,c
  5532  003152  0E00               	movlw	0
  5533  003154  6E6D               	movwf	_counter_step,c
  5534                           
  5535                           ;main.c: 1032: valid = 0;
  5536  003156  0E00               	movlw	0
  5537  003158  6E6C               	movwf	_valid+1,c
  5538  00315A  0E00               	movlw	0
  5539  00315C  6E6B               	movwf	_valid,c
  5540                           
  5541                           ;main.c: 1033: number = 0;
  5542  00315E  0E00               	movlw	0
  5543  003160  6E7E               	movwf	_number+1,c
  5544  003162  0E00               	movlw	0
  5545  003164  6E7D               	movwf	_number,c
  5546                           
  5547                           ;main.c: 1034: total_number=0;
  5548  003166  0E00               	movlw	0
  5549  003168  6E6A               	movwf	_total_number+1,c
  5550  00316A  0E00               	movlw	0
  5551  00316C  6E69               	movwf	_total_number,c
  5552                           
  5553                           ;main.c: 1036: B=0,N=0,S=0,W=0;
  5554  00316E  0E00               	movlw	0
  5555  003170  6E66               	movwf	_B+1,c
  5556  003172  0E00               	movlw	0
  5557  003174  6E65               	movwf	_B,c
  5558  003176  0E00               	movlw	0
  5559  003178  6E64               	movwf	_N+1,c
  5560  00317A  0E00               	movlw	0
  5561  00317C  6E63               	movwf	_N,c
  5562  00317E  0E00               	movlw	0
  5563  003180  6E62               	movwf	_S+1,c
  5564  003182  0E00               	movlw	0
  5565  003184  6E61               	movwf	_S,c
  5566  003186  0E00               	movlw	0
  5567  003188  6E60               	movwf	_W+1,c
  5568  00318A  0E00               	movlw	0
  5569  00318C  6E5F               	movwf	_W,c
  5570                           
  5571                           ;main.c: 1038: B_counter= 0;
  5572  00318E  0E00               	movlw	0
  5573  003190  6FA9               	movwf	(_B_counter+1)& (0+255),b
  5574  003192  0E00               	movlw	0
  5575  003194  6FA8               	movwf	_B_counter& (0+255),b
  5576                           
  5577                           ;main.c: 1039: S_counter= 0;
  5578  003196  0E00               	movlw	0
  5579  003198  6FA7               	movwf	(_S_counter+1)& (0+255),b
  5580  00319A  0E00               	movlw	0
  5581  00319C  6FA6               	movwf	_S_counter& (0+255),b
  5582                           
  5583                           ;main.c: 1040: N_counter= 0;
  5584  00319E  0E00               	movlw	0
  5585  0031A0  6FA5               	movwf	(_N_counter+1)& (0+255),b
  5586  0031A2  0E00               	movlw	0
  5587  0031A4  6FA4               	movwf	_N_counter& (0+255),b
  5588                           
  5589                           ;main.c: 1041: W_counter= 0;
  5590  0031A6  0E00               	movlw	0
  5591  0031A8  6FA3               	movwf	(_W_counter+1)& (0+255),b
  5592  0031AA  0E00               	movlw	0
  5593  0031AC  6FA2               	movwf	_W_counter& (0+255),b
  5594                           
  5595                           ;main.c: 1044: initial_time = 0;
  5596  0031AE  0E00               	movlw	0
  5597  0031B0  6F99               	movwf	(_initial_time+1)& (0+255),b
  5598  0031B2  0E00               	movlw	0
  5599  0031B4  6F98               	movwf	_initial_time& (0+255),b
  5600                           
  5601                           ;main.c: 1045: final_time = 0;
  5602  0031B6  0E00               	movlw	0
  5603  0031B8  6F91               	movwf	(_final_time+1)& (0+255),b
  5604  0031BA  0E00               	movlw	0
  5605  0031BC  6F90               	movwf	_final_time& (0+255),b
  5606                           
  5607                           ;main.c: 1047: for (i=0;i<8;i++){
  5608  0031BE  0E00               	movlw	0
  5609  0031C0  6FBD               	movwf	(_i+1)& (0+255),b
  5610  0031C2  0E00               	movlw	0
  5611  0031C4  6FBC               	movwf	_i& (0+255),b
  5612  0031C6                     l4238:
  5613                           
  5614                           ; BSR set to: 0
  5615  0031C6  51BD               	movf	(_i+1)& (0+255),w,b
  5616  0031C8  E155               	bnz	l461
  5617  0031CA  0E08               	movlw	8
  5618  0031CC  5DBC               	subwf	_i& (0+255),w,b
  5619  0031CE  B0D8               	btfsc	status,0,c
  5620  0031D0  0012               	return	
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;main.c: 1048: compartment_array[i] = 0;
  5624                           
  5625                           ; BSR set to: 0
  5626                           
  5627                           ; BSR set to: 0
  5628  0031D2  90D8               	bcf	status,0,c
  5629  0031D4  35BC               	rlcf	_i& (0+255),w,b
  5630  0031D6  6ED9               	movwf	fsr2l,c
  5631  0031D8  35BD               	rlcf	(_i+1)& (0+255),w,b
  5632  0031DA  6EDA               	movwf	fsr2h,c
  5633  0031DC  0E80               	movlw	low _compartment_array
  5634  0031DE  26D9               	addwf	fsr2l,f,c
  5635  0031E0  0E00               	movlw	high _compartment_array
  5636  0031E2  22DA               	addwfc	fsr2h,f,c
  5637  0031E4  0E00               	movlw	0
  5638  0031E6  6EDE               	movwf	postinc2,c
  5639  0031E8  0E00               	movlw	0
  5640  0031EA  6EDD               	movwf	postdec2,c
  5641                           
  5642                           ;main.c: 1049: compartment_number[i] = 0;
  5643  0031EC  90D8               	bcf	status,0,c
  5644  0031EE  35BC               	rlcf	_i& (0+255),w,b
  5645  0031F0  6ED9               	movwf	fsr2l,c
  5646  0031F2  35BD               	rlcf	(_i+1)& (0+255),w,b
  5647  0031F4  6EDA               	movwf	fsr2h,c
  5648  0031F6  0E42               	movlw	low _compartment_number
  5649  0031F8  26D9               	addwf	fsr2l,f,c
  5650  0031FA  0E00               	movlw	high _compartment_number
  5651  0031FC  22DA               	addwfc	fsr2h,f,c
  5652  0031FE  0E00               	movlw	0
  5653  003200  6EDE               	movwf	postinc2,c
  5654  003202  0E00               	movlw	0
  5655  003204  6EDD               	movwf	postdec2,c
  5656                           
  5657                           ;main.c: 1050: B_array[i] = 0;
  5658  003206  90D8               	bcf	status,0,c
  5659  003208  35BC               	rlcf	_i& (0+255),w,b
  5660  00320A  6ED9               	movwf	fsr2l,c
  5661  00320C  35BD               	rlcf	(_i+1)& (0+255),w,b
  5662  00320E  6EDA               	movwf	fsr2h,c
  5663  003210  0E30               	movlw	low _B_array
  5664  003212  26D9               	addwf	fsr2l,f,c
  5665  003214  0E01               	movlw	high _B_array
  5666  003216  22DA               	addwfc	fsr2h,f,c
  5667  003218  0E00               	movlw	0
  5668  00321A  6EDE               	movwf	postinc2,c
  5669  00321C  0E00               	movlw	0
  5670  00321E  6EDD               	movwf	postdec2,c
  5671                           
  5672                           ;main.c: 1051: N_array[i] = 0;
  5673  003220  90D8               	bcf	status,0,c
  5674  003222  35BC               	rlcf	_i& (0+255),w,b
  5675  003224  6ED9               	movwf	fsr2l,c
  5676  003226  35BD               	rlcf	(_i+1)& (0+255),w,b
  5677  003228  6EDA               	movwf	fsr2h,c
  5678  00322A  0E10               	movlw	low _N_array
  5679  00322C  26D9               	addwf	fsr2l,f,c
  5680  00322E  0E01               	movlw	high _N_array
  5681  003230  22DA               	addwfc	fsr2h,f,c
  5682  003232  0E00               	movlw	0
  5683  003234  6EDE               	movwf	postinc2,c
  5684  003236  0E00               	movlw	0
  5685  003238  6EDD               	movwf	postdec2,c
  5686                           
  5687                           ;main.c: 1052: S_array[i] = 0;
  5688  00323A  90D8               	bcf	status,0,c
  5689  00323C  35BC               	rlcf	_i& (0+255),w,b
  5690  00323E  6ED9               	movwf	fsr2l,c
  5691  003240  35BD               	rlcf	(_i+1)& (0+255),w,b
  5692  003242  6EDA               	movwf	fsr2h,c
  5693  003244  0E20               	movlw	low _S_array
  5694  003246  26D9               	addwf	fsr2l,f,c
  5695  003248  0E01               	movlw	high _S_array
  5696  00324A  22DA               	addwfc	fsr2h,f,c
  5697  00324C  0E00               	movlw	0
  5698  00324E  6EDE               	movwf	postinc2,c
  5699  003250  0E00               	movlw	0
  5700  003252  6EDD               	movwf	postdec2,c
  5701                           
  5702                           ;main.c: 1053: W_array[i] = 0;
  5703  003254  90D8               	bcf	status,0,c
  5704  003256  35BC               	rlcf	_i& (0+255),w,b
  5705  003258  6ED9               	movwf	fsr2l,c
  5706  00325A  35BD               	rlcf	(_i+1)& (0+255),w,b
  5707  00325C  6EDA               	movwf	fsr2h,c
  5708  00325E  0E00               	movlw	low _W_array
  5709  003260  26D9               	addwf	fsr2l,f,c
  5710  003262  0E01               	movlw	high _W_array
  5711  003264  22DA               	addwfc	fsr2h,f,c
  5712  003266  0E00               	movlw	0
  5713  003268  6EDE               	movwf	postinc2,c
  5714  00326A  0E00               	movlw	0
  5715  00326C  6EDD               	movwf	postdec2,c
  5716                           
  5717                           ; BSR set to: 0
  5718  00326E  4BBC               	infsnz	_i& (0+255),f,b
  5719  003270  2BBD               	incf	(_i+1)& (0+255),f,b
  5720  003272  D7A9               	goto	l4238
  5721  003274                     l461:
  5722                           
  5723                           ; BSR set to: 0
  5724  003274  0012               	return		;funcret
  5725  003276                     __end_of_initialize:
  5726                           	opt stack 0
  5727                           tblptru	equ	0xFF8
  5728                           tblptrh	equ	0xFF7
  5729                           tblptrl	equ	0xFF6
  5730                           tablat	equ	0xFF5
  5731                           prodh	equ	0xFF4
  5732                           prodl	equ	0xFF3
  5733                           intcon	equ	0xFF2
  5734                           intcon3	equ	0xFF0
  5735                           indf0	equ	0xFEF
  5736                           postinc0	equ	0xFEE
  5737                           fsr0h	equ	0xFEA
  5738                           fsr0l	equ	0xFE9
  5739                           wreg	equ	0xFE8
  5740                           postdec1	equ	0xFE5
  5741                           fsr1l	equ	0xFE1
  5742                           postinc2	equ	0xFDE
  5743                           postdec2	equ	0xFDD
  5744                           fsr2h	equ	0xFDA
  5745                           fsr2l	equ	0xFD9
  5746                           status	equ	0xFD8
  5747                           
  5748 ;; *************** function _initLCD *****************
  5749 ;; Defined at:
  5750 ;;		line 60 in file "lcd.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;		None
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;		None
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  1    wreg      void 
  5757 ;; Registers used:
  5758 ;;		wreg, status,2, status,0, cstack
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;Total ram usage:        1 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:    6
  5771 ;; This function calls:
  5772 ;;		_lcdInst
  5773 ;; This function is called by:
  5774 ;;		_main
  5775 ;;		_count_gear
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text8
  5780  003A4A                     __ptext8:
  5781                           	opt stack 0
  5782  003A4A                     _initLCD:
  5783                           	opt stack 24
  5784                           
  5785                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;incstack = 0
  5789  003A4A  0EC3               	movlw	195
  5790  003A4C  0100               	movlb	0	; () banked
  5791  003A4E  6FCB               	movwf	??_initLCD& (0+255),b
  5792  003A50  0ECD               	movlw	205
  5793  003A52                     u5217:
  5794  003A52  2EE8               	decfsz	wreg,f,c
  5795  003A54  D7FE               	bra	u5217
  5796  003A56  2FCB               	decfsz	??_initLCD& (0+255),f,b
  5797  003A58  D7FC               	bra	u5217
  5798                           
  5799                           ;lcd.c: 69: lcdInst(0b00110011);
  5800  003A5A  0E33               	movlw	51
  5801  003A5C  ECC8  F01E         	call	_lcdInst
  5802                           
  5803                           ;lcd.c: 70: lcdInst(0b00110010);
  5804  003A60  0E32               	movlw	50
  5805  003A62  ECC8  F01E         	call	_lcdInst
  5806                           
  5807                           ;lcd.c: 71: lcdInst(0b00101000);
  5808  003A66  0E28               	movlw	40
  5809  003A68  ECC8  F01E         	call	_lcdInst
  5810                           
  5811                           ;lcd.c: 72: lcdInst(0b00001111);
  5812  003A6C  0E0F               	movlw	15
  5813  003A6E  ECC8  F01E         	call	_lcdInst
  5814                           
  5815                           ;lcd.c: 73: lcdInst(0b00000110);
  5816  003A72  0E06               	movlw	6
  5817  003A74  ECC8  F01E         	call	_lcdInst
  5818                           
  5819                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5820  003A78  0E01               	movlw	1
  5821  003A7A  ECC8  F01E         	call	_lcdInst
  5822  003A7E  0EC3               	movlw	195
  5823  003A80  0100               	movlb	0	; () banked
  5824  003A82  6FCB               	movwf	??_initLCD& (0+255),b
  5825  003A84  0ECD               	movlw	205
  5826  003A86                     u5227:
  5827  003A86  2EE8               	decfsz	wreg,f,c
  5828  003A88  D7FE               	bra	u5227
  5829  003A8A  2FCB               	decfsz	??_initLCD& (0+255),f,b
  5830  003A8C  D7FC               	bra	u5227
  5831                           
  5832                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5833  003A8E  0E0F               	movlw	15
  5834  003A90  ECC8  F01E         	call	_lcdInst
  5835  003A94  0012               	return		;funcret
  5836  003A96                     __end_of_initLCD:
  5837                           	opt stack 0
  5838                           tblptru	equ	0xFF8
  5839                           tblptrh	equ	0xFF7
  5840                           tblptrl	equ	0xFF6
  5841                           tablat	equ	0xFF5
  5842                           prodh	equ	0xFF4
  5843                           prodl	equ	0xFF3
  5844                           intcon	equ	0xFF2
  5845                           intcon3	equ	0xFF0
  5846                           indf0	equ	0xFEF
  5847                           postinc0	equ	0xFEE
  5848                           fsr0h	equ	0xFEA
  5849                           fsr0l	equ	0xFE9
  5850                           wreg	equ	0xFE8
  5851                           postdec1	equ	0xFE5
  5852                           fsr1l	equ	0xFE1
  5853                           postinc2	equ	0xFDE
  5854                           postdec2	equ	0xFDD
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _lcdInst *****************
  5860 ;; Defined at:
  5861 ;;		line 11 in file "lcd.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  data            1    wreg     unsigned char 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  data            1    2[BANK0 ] unsigned char 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;Total ram usage:        1 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    5
  5882 ;; This function calls:
  5883 ;;		_lcdNibble
  5884 ;; This function is called by:
  5885 ;;		_initLCD
  5886 ;;		_main
  5887 ;;		_lcd_set_cursor
  5888 ;;		_lcd_shift_cursor
  5889 ;;		_lcd_shift_display
  5890 ;;		_count_gear
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text9
  5895  003D90                     __ptext9:
  5896                           	opt stack 0
  5897  003D90                     _lcdInst:
  5898                           	opt stack 25
  5899                           
  5900                           ;incstack = 0
  5901                           ;lcdInst@data stored from wreg
  5902  003D90  0100               	movlb	0	; () banked
  5903  003D92  6FCA               	movwf	lcdInst@data& (0+255),b
  5904                           
  5905                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5906  003D94  948C               	bcf	3980,2,c	;volatile
  5907                           
  5908                           ;lcd.c: 20: lcdNibble(data);
  5909  003D96  0100               	movlb	0	; () banked
  5910  003D98  51CA               	movf	lcdInst@data& (0+255),w,b
  5911  003D9A  EC6D  F01A         	call	_lcdNibble
  5912                           
  5913                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5914  003D9E  0EC8               	movlw	200
  5915  003DA0                     u5237:
  5916  003DA0  D000               	nop2	
  5917  003DA2  2EE8               	decfsz	wreg,f,c
  5918  003DA4  D7FD               	bra	u5237
  5919  003DA6  0012               	return		;funcret
  5920  003DA8                     __end_of_lcdInst:
  5921                           	opt stack 0
  5922                           tblptru	equ	0xFF8
  5923                           tblptrh	equ	0xFF7
  5924                           tblptrl	equ	0xFF6
  5925                           tablat	equ	0xFF5
  5926                           prodh	equ	0xFF4
  5927                           prodl	equ	0xFF3
  5928                           intcon	equ	0xFF2
  5929                           intcon3	equ	0xFF0
  5930                           indf0	equ	0xFEF
  5931                           postinc0	equ	0xFEE
  5932                           fsr0h	equ	0xFEA
  5933                           fsr0l	equ	0xFE9
  5934                           wreg	equ	0xFE8
  5935                           postdec1	equ	0xFE5
  5936                           fsr1l	equ	0xFE1
  5937                           postinc2	equ	0xFDE
  5938                           postdec2	equ	0xFDD
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function _lcdNibble *****************
  5944 ;; Defined at:
  5945 ;;		line 37 in file "lcd.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  data            1    wreg     unsigned char 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  data            1    1[BANK0 ] unsigned char 
  5950 ;;  temp            1    0[BANK0 ] unsigned char 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;Total ram usage:        2 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    4
  5967 ;; This function calls:
  5968 ;;		Nothing
  5969 ;; This function is called by:
  5970 ;;		_lcdInst
  5971 ;;		_putch
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text10
  5976  0034DA                     __ptext10:
  5977                           	opt stack 0
  5978  0034DA                     _lcdNibble:
  5979                           	opt stack 24
  5980                           
  5981                           ;incstack = 0
  5982                           ;lcdNibble@data stored from wreg
  5983  0034DA  0100               	movlb	0	; () banked
  5984  0034DC  6FC9               	movwf	lcdNibble@data& (0+255),b
  5985                           
  5986                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  5987  0034DE  0100               	movlb	0	; () banked
  5988  0034E0  51C9               	movf	lcdNibble@data& (0+255),w,b
  5989  0034E2  0BF0               	andlw	240
  5990  0034E4  6FC8               	movwf	lcdNibble@temp& (0+255),b
  5991                           
  5992                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  5993  0034E6  508C               	movf	3980,w,c	;volatile
  5994  0034E8  0B0F               	andlw	15
  5995  0034EA  6E8C               	movwf	3980,c	;volatile
  5996                           
  5997                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  5998  0034EC  51C8               	movf	lcdNibble@temp& (0+255),w,b
  5999  0034EE  108C               	iorwf	3980,w,c	;volatile
  6000  0034F0  6E8C               	movwf	3980,c	;volatile
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6004  0034F2  0E00               	movlw	0
  6005  0034F4  BEF2               	btfsc	intcon,7,c	;volatile
  6006  0034F6  0E01               	movlw	1
  6007  0034F8  6FC2               	movwf	_LCDinterruptState& (0+255),b
  6008                           
  6009                           ; BSR set to: 0
  6010  0034FA  9EF2               	bcf	intcon,7,c	;volatile
  6011                           
  6012                           ; BSR set to: 0
  6013  0034FC  868C               	bsf	3980,3,c	;volatile
  6014                           
  6015                           ; BSR set to: 0
  6016  0034FE  0E53               	movlw	83
  6017  003500                     u5247:
  6018  003500  2EE8               	decfsz	wreg,f,c
  6019  003502  D7FE               	bra	u5247
  6020  003504  F000               	nop	
  6021  003506  968C               	bcf	3980,3,c	;volatile
  6022  003508  0EC8               	movlw	200
  6023  00350A                     u5257:
  6024  00350A  D000               	nop2	
  6025  00350C  2EE8               	decfsz	wreg,f,c
  6026  00350E  D7FD               	bra	u5257
  6027  003510  0100               	movlb	0	; () banked
  6028  003512  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
  6029  003514  D002               	bra	u2385
  6030  003516  9EF2               	bcf	intcon,7,c	;volatile
  6031  003518  D001               	bra	u2386
  6032  00351A                     u2385:
  6033  00351A  8EF2               	bsf	intcon,7,c	;volatile
  6034  00351C                     u2386:
  6035                           
  6036                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  6037  00351C  0100               	movlb	0	; () banked
  6038  00351E  39C9               	swapf	lcdNibble@data& (0+255),w,b
  6039  003520  0BF0               	andlw	240
  6040  003522  6FC9               	movwf	lcdNibble@data& (0+255),b
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  6044  003524  51C9               	movf	lcdNibble@data& (0+255),w,b
  6045  003526  0BF0               	andlw	240
  6046  003528  6FC8               	movwf	lcdNibble@temp& (0+255),b
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  6050  00352A  508C               	movf	3980,w,c	;volatile
  6051  00352C  0B0F               	andlw	15
  6052  00352E  6E8C               	movwf	3980,c	;volatile
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  6056  003530  51C8               	movf	lcdNibble@temp& (0+255),w,b
  6057  003532  108C               	iorwf	3980,w,c	;volatile
  6058  003534  6E8C               	movwf	3980,c	;volatile
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6062  003536  0E00               	movlw	0
  6063  003538  BEF2               	btfsc	intcon,7,c	;volatile
  6064  00353A  0E01               	movlw	1
  6065  00353C  6FC2               	movwf	_LCDinterruptState& (0+255),b
  6066                           
  6067                           ; BSR set to: 0
  6068  00353E  9EF2               	bcf	intcon,7,c	;volatile
  6069                           
  6070                           ; BSR set to: 0
  6071  003540  868C               	bsf	3980,3,c	;volatile
  6072                           
  6073                           ; BSR set to: 0
  6074  003542  0E53               	movlw	83
  6075  003544                     u5267:
  6076  003544  2EE8               	decfsz	wreg,f,c
  6077  003546  D7FE               	bra	u5267
  6078  003548  F000               	nop	
  6079  00354A  968C               	bcf	3980,3,c	;volatile
  6080  00354C  0EC8               	movlw	200
  6081  00354E                     u5277:
  6082  00354E  D000               	nop2	
  6083  003550  2EE8               	decfsz	wreg,f,c
  6084  003552  D7FD               	bra	u5277
  6085  003554  0100               	movlb	0	; () banked
  6086  003556  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
  6087  003558  D002               	bra	u2395
  6088  00355A  9EF2               	bcf	intcon,7,c	;volatile
  6089  00355C  D001               	bra	u2396
  6090  00355E                     u2395:
  6091  00355E  8EF2               	bsf	intcon,7,c	;volatile
  6092  003560                     u2396:
  6093  003560  0012               	return		;funcret
  6094  003562                     __end_of_lcdNibble:
  6095                           	opt stack 0
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           prodh	equ	0xFF4
  6101                           prodl	equ	0xFF3
  6102                           intcon	equ	0xFF2
  6103                           intcon3	equ	0xFF0
  6104                           indf0	equ	0xFEF
  6105                           postinc0	equ	0xFEE
  6106                           fsr0h	equ	0xFEA
  6107                           fsr0l	equ	0xFE9
  6108                           wreg	equ	0xFE8
  6109                           postdec1	equ	0xFE5
  6110                           fsr1l	equ	0xFE1
  6111                           postinc2	equ	0xFDE
  6112                           postdec2	equ	0xFDD
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117 ;; *************** function _get_RTC_initial *****************
  6118 ;; Defined at:
  6119 ;;		line 1159 in file "main.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;		None
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      void 
  6126 ;; Registers used:
  6127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;Total ram usage:        1 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    6
  6140 ;; This function calls:
  6141 ;;		_I2C_Master_Read
  6142 ;;		_I2C_Master_Start
  6143 ;;		_I2C_Master_Stop
  6144 ;;		_I2C_Master_Write
  6145 ;;		___awdiv
  6146 ;;		___wmul
  6147 ;; This function is called by:
  6148 ;;		_main
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           	psect	text11
  6153  003276                     __ptext11:
  6154                           	opt stack 0
  6155  003276                     _get_RTC_initial:
  6156                           	opt stack 24
  6157                           
  6158                           ;main.c: 1161: I2C_Master_Start();
  6159                           
  6160                           ;incstack = 0
  6161  003276  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  6162                           
  6163                           ;main.c: 1162: I2C_Master_Write(0b11010000);
  6164  00327A  0E00               	movlw	0
  6165  00327C  0100               	movlb	0	; () banked
  6166  00327E  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6167  003280  0ED0               	movlw	208
  6168  003282  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6169  003284  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  6170                           
  6171                           ;main.c: 1163: I2C_Master_Write(0x00);
  6172  003288  0E00               	movlw	0
  6173  00328A  0100               	movlb	0	; () banked
  6174  00328C  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6175  00328E  0E00               	movlw	0
  6176  003290  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6177  003292  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  6178                           
  6179                           ;main.c: 1164: I2C_Master_Stop();
  6180  003296  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  6181                           
  6182                           ;main.c: 1167: I2C_Master_Start();
  6183  00329A  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  6184                           
  6185                           ;main.c: 1168: I2C_Master_Write(0b11010001);
  6186  00329E  0E00               	movlw	0
  6187  0032A0  0100               	movlb	0	; () banked
  6188  0032A2  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6189  0032A4  0ED1               	movlw	209
  6190  0032A6  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6191  0032A8  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  6192                           
  6193                           ;main.c: 1169: for(i = 0; i < 6; i++){
  6194  0032AC  0E00               	movlw	0
  6195  0032AE  0100               	movlb	0	; () banked
  6196  0032B0  6FBD               	movwf	(_i+1)& (0+255),b
  6197  0032B2  0E00               	movlw	0
  6198  0032B4  6FBC               	movwf	_i& (0+255),b
  6199  0032B6                     l4184:
  6200                           
  6201                           ; BSR set to: 0
  6202  0032B6  51BD               	movf	(_i+1)& (0+255),w,b
  6203  0032B8  E112               	bnz	l4194
  6204  0032BA  0E06               	movlw	6
  6205  0032BC  5DBC               	subwf	_i& (0+255),w,b
  6206  0032BE  B0D8               	btfsc	status,0,c
  6207  0032C0  D00E               	goto	u3050
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;main.c: 1170: time[i] = I2C_Master_Read(0);
  6211                           
  6212                           ; BSR set to: 0
  6213                           
  6214                           ; BSR set to: 0
  6215  0032C2  0E52               	movlw	low _time
  6216  0032C4  25BC               	addwf	_i& (0+255),w,b
  6217  0032C6  6ED9               	movwf	fsr2l,c
  6218  0032C8  0E00               	movlw	high _time
  6219  0032CA  21BD               	addwfc	(_i+1)& (0+255),w,b
  6220  0032CC  6EDA               	movwf	fsr2h,c
  6221  0032CE  0E00               	movlw	0
  6222  0032D0  EC3A  F01E         	call	_I2C_Master_Read
  6223  0032D4  6EDF               	movwf	indf2,c
  6224  0032D6  0100               	movlb	0	; () banked
  6225  0032D8  4BBC               	infsnz	_i& (0+255),f,b
  6226  0032DA  2BBD               	incf	(_i+1)& (0+255),f,b
  6227  0032DC  D7EC               	goto	l4184
  6228  0032DE                     u3050:
  6229  0032DE                     l4194:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;main.c: 1171: }
  6233                           ;main.c: 1172: time[6] = I2C_Master_Read(1);
  6234  0032DE  0E01               	movlw	1
  6235  0032E0  EC3A  F01E         	call	_I2C_Master_Read
  6236  0032E4  6E58               	movwf	_time+6,c
  6237                           
  6238                           ;main.c: 1173: I2C_Master_Stop();
  6239  0032E6  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  6240                           
  6241                           ;main.c: 1175: hr_initial = time[2]/16*10+time[2]%16;
  6242  0032EA  C054  F0D6         	movff	_time+2,??_get_RTC_initial
  6243  0032EE  0E0F               	movlw	15
  6244  0032F0  0100               	movlb	0	; () banked
  6245  0032F2  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6246  0032F4  0E00               	movlw	0
  6247  0032F6  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6248  0032F8  0E10               	movlw	16
  6249  0032FA  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6250  0032FC  C054  F0C8         	movff	_time+2,___awdiv@dividend
  6251  003300  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6252  003302  ECB1  F01A         	call	___awdiv	;wreg free
  6253  003306  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6254  00330A  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6255  00330E  0E00               	movlw	0
  6256  003310  0100               	movlb	0	; () banked
  6257  003312  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6258  003314  0E0A               	movlw	10
  6259  003316  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6260  003318  EC4F  F01E         	call	___wmul	;wreg free
  6261  00331C  0100               	movlb	0	; () banked
  6262  00331E  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6263  003320  25D0               	addwf	?___wmul& (0+255),w,b
  6264  003322  6E5D               	movwf	_hr_initial,c
  6265  003324  0E00               	movlw	0
  6266  003326  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6267  003328  6E5E               	movwf	_hr_initial+1,c
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;main.c: 1176: min_initial = time[1]/16*10 + time[1]%16;
  6271  00332A  C053  F0D6         	movff	_time+1,??_get_RTC_initial
  6272  00332E  0E0F               	movlw	15
  6273  003330  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6274  003332  0E00               	movlw	0
  6275  003334  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6276  003336  0E10               	movlw	16
  6277  003338  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6278  00333A  C053  F0C8         	movff	_time+1,___awdiv@dividend
  6279  00333E  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6280  003340  ECB1  F01A         	call	___awdiv	;wreg free
  6281  003344  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6282  003348  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6283  00334C  0E00               	movlw	0
  6284  00334E  0100               	movlb	0	; () banked
  6285  003350  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6286  003352  0E0A               	movlw	10
  6287  003354  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6288  003356  EC4F  F01E         	call	___wmul	;wreg free
  6289  00335A  0100               	movlb	0	; () banked
  6290  00335C  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6291  00335E  25D0               	addwf	?___wmul& (0+255),w,b
  6292  003360  6E5B               	movwf	_min_initial,c
  6293  003362  0E00               	movlw	0
  6294  003364  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6295  003366  6E5C               	movwf	_min_initial+1,c
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;main.c: 1177: sec_initial = time[0]/16*10 +time[0]%16;
  6299  003368  C052  F0D6         	movff	_time,??_get_RTC_initial
  6300  00336C  0E0F               	movlw	15
  6301  00336E  17D6               	andwf	??_get_RTC_initial& (0+255),f,b
  6302  003370  0E00               	movlw	0
  6303  003372  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6304  003374  0E10               	movlw	16
  6305  003376  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6306  003378  C052  F0C8         	movff	_time,___awdiv@dividend
  6307  00337C  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6308  00337E  ECB1  F01A         	call	___awdiv	;wreg free
  6309  003382  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6310  003386  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6311  00338A  0E00               	movlw	0
  6312  00338C  0100               	movlb	0	; () banked
  6313  00338E  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6314  003390  0E0A               	movlw	10
  6315  003392  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6316  003394  EC4F  F01E         	call	___wmul	;wreg free
  6317  003398  0100               	movlb	0	; () banked
  6318  00339A  51D6               	movf	??_get_RTC_initial& (0+255),w,b
  6319  00339C  25D0               	addwf	?___wmul& (0+255),w,b
  6320  00339E  6E59               	movwf	_sec_initial,c
  6321  0033A0  0E00               	movlw	0
  6322  0033A2  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6323  0033A4  6E5A               	movwf	_sec_initial+1,c
  6324                           
  6325                           ; BSR set to: 0
  6326  0033A6  0012               	return		;funcret
  6327  0033A8                     __end_of_get_RTC_initial:
  6328                           	opt stack 0
  6329                           tblptru	equ	0xFF8
  6330                           tblptrh	equ	0xFF7
  6331                           tblptrl	equ	0xFF6
  6332                           tablat	equ	0xFF5
  6333                           prodh	equ	0xFF4
  6334                           prodl	equ	0xFF3
  6335                           intcon	equ	0xFF2
  6336                           intcon3	equ	0xFF0
  6337                           indf0	equ	0xFEF
  6338                           postinc0	equ	0xFEE
  6339                           fsr0h	equ	0xFEA
  6340                           fsr0l	equ	0xFE9
  6341                           wreg	equ	0xFE8
  6342                           postdec1	equ	0xFE5
  6343                           fsr1l	equ	0xFE1
  6344                           indf2	equ	0xFDF
  6345                           postinc2	equ	0xFDE
  6346                           postdec2	equ	0xFDD
  6347                           fsr2h	equ	0xFDA
  6348                           fsr2l	equ	0xFD9
  6349                           status	equ	0xFD8
  6350                           
  6351 ;; *************** function _get_RTC_final *****************
  6352 ;; Defined at:
  6353 ;;		line 1180 in file "main.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;		None
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;		None
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      void 
  6360 ;; Registers used:
  6361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;Total ram usage:        1 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    6
  6374 ;; This function calls:
  6375 ;;		_I2C_Master_Read
  6376 ;;		_I2C_Master_Start
  6377 ;;		_I2C_Master_Stop
  6378 ;;		_I2C_Master_Write
  6379 ;;		___awdiv
  6380 ;;		___wmul
  6381 ;; This function is called by:
  6382 ;;		_main
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           	psect	text12
  6387  0033A8                     __ptext12:
  6388                           	opt stack 0
  6389  0033A8                     _get_RTC_final:
  6390                           	opt stack 24
  6391                           
  6392                           ;main.c: 1181: I2C_Master_Start();
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;incstack = 0
  6396  0033A8  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  6397                           
  6398                           ;main.c: 1182: I2C_Master_Write(0b11010000);
  6399  0033AC  0E00               	movlw	0
  6400  0033AE  0100               	movlb	0	; () banked
  6401  0033B0  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6402  0033B2  0ED0               	movlw	208
  6403  0033B4  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6404  0033B6  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  6405                           
  6406                           ;main.c: 1183: I2C_Master_Write(0x00);
  6407  0033BA  0E00               	movlw	0
  6408  0033BC  0100               	movlb	0	; () banked
  6409  0033BE  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6410  0033C0  0E00               	movlw	0
  6411  0033C2  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6412  0033C4  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  6413                           
  6414                           ;main.c: 1184: I2C_Master_Stop();
  6415  0033C8  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  6416                           
  6417                           ;main.c: 1187: I2C_Master_Start();
  6418  0033CC  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  6419                           
  6420                           ;main.c: 1188: I2C_Master_Write(0b11010001);
  6421  0033D0  0E00               	movlw	0
  6422  0033D2  0100               	movlb	0	; () banked
  6423  0033D4  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  6424  0033D6  0ED1               	movlw	209
  6425  0033D8  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  6426  0033DA  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  6427                           
  6428                           ;main.c: 1189: for(i = 0; i < 6; i++){
  6429  0033DE  0E00               	movlw	0
  6430  0033E0  0100               	movlb	0	; () banked
  6431  0033E2  6FBD               	movwf	(_i+1)& (0+255),b
  6432  0033E4  0E00               	movlw	0
  6433  0033E6  6FBC               	movwf	_i& (0+255),b
  6434  0033E8                     l4218:
  6435                           
  6436                           ; BSR set to: 0
  6437  0033E8  51BD               	movf	(_i+1)& (0+255),w,b
  6438  0033EA  E112               	bnz	l4228
  6439  0033EC  0E06               	movlw	6
  6440  0033EE  5DBC               	subwf	_i& (0+255),w,b
  6441  0033F0  B0D8               	btfsc	status,0,c
  6442  0033F2  D00E               	goto	u3080
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;main.c: 1190: time[i] = I2C_Master_Read(0);
  6446                           
  6447                           ; BSR set to: 0
  6448                           
  6449                           ; BSR set to: 0
  6450  0033F4  0E52               	movlw	low _time
  6451  0033F6  25BC               	addwf	_i& (0+255),w,b
  6452  0033F8  6ED9               	movwf	fsr2l,c
  6453  0033FA  0E00               	movlw	high _time
  6454  0033FC  21BD               	addwfc	(_i+1)& (0+255),w,b
  6455  0033FE  6EDA               	movwf	fsr2h,c
  6456  003400  0E00               	movlw	0
  6457  003402  EC3A  F01E         	call	_I2C_Master_Read
  6458  003406  6EDF               	movwf	indf2,c
  6459  003408  0100               	movlb	0	; () banked
  6460  00340A  4BBC               	infsnz	_i& (0+255),f,b
  6461  00340C  2BBD               	incf	(_i+1)& (0+255),f,b
  6462  00340E  D7EC               	goto	l4218
  6463  003410                     u3080:
  6464  003410                     l4228:
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;main.c: 1191: }
  6468                           ;main.c: 1192: time[6] = I2C_Master_Read(1);
  6469  003410  0E01               	movlw	1
  6470  003412  EC3A  F01E         	call	_I2C_Master_Read
  6471  003416  6E58               	movwf	_time+6,c
  6472                           
  6473                           ;main.c: 1193: I2C_Master_Stop();
  6474  003418  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  6475                           
  6476                           ;main.c: 1195: hr_final = time[2]/16*10+time[2]%16;
  6477  00341C  C054  F0D6         	movff	_time+2,??_get_RTC_final
  6478  003420  0E0F               	movlw	15
  6479  003422  0100               	movlb	0	; () banked
  6480  003424  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  6481  003426  0E00               	movlw	0
  6482  003428  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6483  00342A  0E10               	movlw	16
  6484  00342C  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6485  00342E  C054  F0C8         	movff	_time+2,___awdiv@dividend
  6486  003432  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6487  003434  ECB1  F01A         	call	___awdiv	;wreg free
  6488  003438  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6489  00343C  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6490  003440  0E00               	movlw	0
  6491  003442  0100               	movlb	0	; () banked
  6492  003444  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6493  003446  0E0A               	movlw	10
  6494  003448  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6495  00344A  EC4F  F01E         	call	___wmul	;wreg free
  6496  00344E  0100               	movlb	0	; () banked
  6497  003450  51D6               	movf	??_get_RTC_final& (0+255),w,b
  6498  003452  25D0               	addwf	?___wmul& (0+255),w,b
  6499  003454  6F96               	movwf	_hr_final& (0+255),b
  6500  003456  0E00               	movlw	0
  6501  003458  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6502  00345A  6F97               	movwf	(_hr_final+1)& (0+255),b
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;main.c: 1196: min_final = time[1]/16*10 + time[1]%16;
  6506  00345C  C053  F0D6         	movff	_time+1,??_get_RTC_final
  6507  003460  0E0F               	movlw	15
  6508  003462  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  6509  003464  0E00               	movlw	0
  6510  003466  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6511  003468  0E10               	movlw	16
  6512  00346A  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6513  00346C  C053  F0C8         	movff	_time+1,___awdiv@dividend
  6514  003470  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6515  003472  ECB1  F01A         	call	___awdiv	;wreg free
  6516  003476  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6517  00347A  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6518  00347E  0E00               	movlw	0
  6519  003480  0100               	movlb	0	; () banked
  6520  003482  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6521  003484  0E0A               	movlw	10
  6522  003486  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6523  003488  EC4F  F01E         	call	___wmul	;wreg free
  6524  00348C  0100               	movlb	0	; () banked
  6525  00348E  51D6               	movf	??_get_RTC_final& (0+255),w,b
  6526  003490  25D0               	addwf	?___wmul& (0+255),w,b
  6527  003492  6F94               	movwf	_min_final& (0+255),b
  6528  003494  0E00               	movlw	0
  6529  003496  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6530  003498  6F95               	movwf	(_min_final+1)& (0+255),b
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;main.c: 1197: sec_final = time[0]/16*10 + time[0]%16;
  6534  00349A  C052  F0D6         	movff	_time,??_get_RTC_final
  6535  00349E  0E0F               	movlw	15
  6536  0034A0  17D6               	andwf	??_get_RTC_final& (0+255),f,b
  6537  0034A2  0E00               	movlw	0
  6538  0034A4  6FCB               	movwf	(___awdiv@divisor+1)& (0+255),b
  6539  0034A6  0E10               	movlw	16
  6540  0034A8  6FCA               	movwf	___awdiv@divisor& (0+255),b
  6541  0034AA  C052  F0C8         	movff	_time,___awdiv@dividend
  6542  0034AE  6BC9               	clrf	(___awdiv@dividend+1)& (0+255),b
  6543  0034B0  ECB1  F01A         	call	___awdiv	;wreg free
  6544  0034B4  C0C8  F0D0         	movff	?___awdiv,___wmul@multiplier
  6545  0034B8  C0C9  F0D1         	movff	?___awdiv+1,___wmul@multiplier+1
  6546  0034BC  0E00               	movlw	0
  6547  0034BE  0100               	movlb	0	; () banked
  6548  0034C0  6FD3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6549  0034C2  0E0A               	movlw	10
  6550  0034C4  6FD2               	movwf	___wmul@multiplicand& (0+255),b
  6551  0034C6  EC4F  F01E         	call	___wmul	;wreg free
  6552  0034CA  0100               	movlb	0	; () banked
  6553  0034CC  51D6               	movf	??_get_RTC_final& (0+255),w,b
  6554  0034CE  25D0               	addwf	?___wmul& (0+255),w,b
  6555  0034D0  6F92               	movwf	_sec_final& (0+255),b
  6556  0034D2  0E00               	movlw	0
  6557  0034D4  21D1               	addwfc	(?___wmul+1)& (0+255),w,b
  6558  0034D6  6F93               	movwf	(_sec_final+1)& (0+255),b
  6559                           
  6560                           ; BSR set to: 0
  6561  0034D8  0012               	return		;funcret
  6562  0034DA                     __end_of_get_RTC_final:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           intcon3	equ	0xFF0
  6572                           indf0	equ	0xFEF
  6573                           postinc0	equ	0xFEE
  6574                           fsr0h	equ	0xFEA
  6575                           fsr0l	equ	0xFE9
  6576                           wreg	equ	0xFE8
  6577                           postdec1	equ	0xFE5
  6578                           fsr1l	equ	0xFE1
  6579                           indf2	equ	0xFDF
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           fsr2h	equ	0xFDA
  6583                           fsr2l	equ	0xFD9
  6584                           status	equ	0xFD8
  6585                           
  6586 ;; *************** function ___wmul *****************
  6587 ;; Defined at:
  6588 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  multiplier      2    8[BANK0 ] unsigned int 
  6591 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  product         2   12[BANK0 ] unsigned int 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  2    8[BANK0 ] unsigned int 
  6596 ;; Registers used:
  6597 ;;		wreg, status,2, status,0, prodl, prodh
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6603 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;Total ram usage:        6 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    4
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_main
  6614 ;;		_get_RTC_initial
  6615 ;;		_get_RTC_final
  6616 ;;		_printf
  6617 ;;		_store_prev
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text13
  6622  003C9E                     __ptext13:
  6623                           	opt stack 0
  6624  003C9E                     ___wmul:
  6625                           	opt stack 25
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;incstack = 0
  6629  003C9E  0100               	movlb	0	; () banked
  6630  003CA0  51D0               	movf	___wmul@multiplier& (0+255),w,b
  6631  003CA2  03D2               	mulwf	___wmul@multiplicand& (0+255),b
  6632  003CA4  CFF3 F0D4          	movff	prodl,___wmul@product
  6633  003CA8  CFF4 F0D5          	movff	prodh,___wmul@product+1
  6634  003CAC  51D0               	movf	___wmul@multiplier& (0+255),w,b
  6635  003CAE  03D3               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6636  003CB0  50F3               	movf	prodl,w,c
  6637  003CB2  27D5               	addwf	(___wmul@product+1)& (0+255),f,b
  6638  003CB4  51D1               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6639  003CB6  03D2               	mulwf	___wmul@multiplicand& (0+255),b
  6640  003CB8  50F3               	movf	prodl,w,c
  6641  003CBA  27D5               	addwf	(___wmul@product+1)& (0+255),f,b
  6642                           
  6643                           ; BSR set to: 0
  6644  003CBC  C0D4  F0D0         	movff	___wmul@product,?___wmul
  6645  003CC0  C0D5  F0D1         	movff	___wmul@product+1,?___wmul+1
  6646  003CC4  0012               	return	
  6647  003CC6                     __end_of___wmul:
  6648                           	opt stack 0
  6649                           tblptru	equ	0xFF8
  6650                           tblptrh	equ	0xFF7
  6651                           tblptrl	equ	0xFF6
  6652                           tablat	equ	0xFF5
  6653                           prodh	equ	0xFF4
  6654                           prodl	equ	0xFF3
  6655                           intcon	equ	0xFF2
  6656                           intcon3	equ	0xFF0
  6657                           indf0	equ	0xFEF
  6658                           postinc0	equ	0xFEE
  6659                           fsr0h	equ	0xFEA
  6660                           fsr0l	equ	0xFE9
  6661                           wreg	equ	0xFE8
  6662                           postdec1	equ	0xFE5
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function ___awdiv *****************
  6672 ;; Defined at:
  6673 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  dividend        2    0[BANK0 ] int 
  6676 ;;  divisor         2    2[BANK0 ] int 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  quotient        2    6[BANK0 ] int 
  6679 ;;  sign            1    5[BANK0 ] unsigned char 
  6680 ;;  counter         1    4[BANK0 ] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  2    0[BANK0 ] int 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6690 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;Total ram usage:        8 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    4
  6697 ;; This function calls:
  6698 ;;		Nothing
  6699 ;; This function is called by:
  6700 ;;		_get_RTC_initial
  6701 ;;		_get_RTC_final
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text14
  6706  003562                     __ptext14:
  6707                           	opt stack 0
  6708  003562                     ___awdiv:
  6709                           	opt stack 25
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;incstack = 0
  6713  003562  0E00               	movlw	0
  6714  003564  0100               	movlb	0	; () banked
  6715  003566  6FCD               	movwf	___awdiv@sign& (0+255),b
  6716                           
  6717                           ; BSR set to: 0
  6718  003568  AFCB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6719  00356A  D006               	goto	l1049
  6720                           
  6721                           ; BSR set to: 0
  6722  00356C  6DCA               	negf	___awdiv@divisor& (0+255),b
  6723  00356E  1FCB               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6724  003570  B0D8               	btfsc	status,0,c
  6725  003572  2BCB               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6726                           
  6727                           ; BSR set to: 0
  6728  003574  0E01               	movlw	1
  6729  003576  6FCD               	movwf	___awdiv@sign& (0+255),b
  6730  003578                     l1049:
  6731                           
  6732                           ; BSR set to: 0
  6733                           
  6734                           ; BSR set to: 0
  6735  003578  AFC9               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6736  00357A  D006               	goto	l1050
  6737                           
  6738                           ; BSR set to: 0
  6739  00357C  6DC8               	negf	___awdiv@dividend& (0+255),b
  6740  00357E  1FC9               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6741  003580  B0D8               	btfsc	status,0,c
  6742  003582  2BC9               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6743                           
  6744                           ; BSR set to: 0
  6745  003584  0E01               	movlw	1
  6746  003586  1BCD               	xorwf	___awdiv@sign& (0+255),f,b
  6747  003588                     l1050:
  6748                           
  6749                           ; BSR set to: 0
  6750                           
  6751                           ; BSR set to: 0
  6752  003588  0E00               	movlw	0
  6753  00358A  6FCF               	movwf	(___awdiv@quotient+1)& (0+255),b
  6754  00358C  0E00               	movlw	0
  6755  00358E  6FCE               	movwf	___awdiv@quotient& (0+255),b
  6756                           
  6757                           ; BSR set to: 0
  6758  003590  51CA               	movf	___awdiv@divisor& (0+255),w,b
  6759  003592  11CB               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6760  003594  B4D8               	btfsc	status,2,c
  6761  003596  D01C               	goto	l1057
  6762                           
  6763                           ; BSR set to: 0
  6764  003598  0E01               	movlw	1
  6765  00359A  6FCC               	movwf	___awdiv@counter& (0+255),b
  6766  00359C  D004               	goto	l1052
  6767  00359E                     
  6768                           ; BSR set to: 0
  6769                           
  6770                           ; BSR set to: 0
  6771  00359E  90D8               	bcf	status,0,c
  6772  0035A0  37CA               	rlcf	___awdiv@divisor& (0+255),f,b
  6773  0035A2  37CB               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6774  0035A4  2BCC               	incf	___awdiv@counter& (0+255),f,b
  6775  0035A6                     l1052:
  6776                           
  6777                           ; BSR set to: 0
  6778                           
  6779                           ; BSR set to: 0
  6780  0035A6  AFCB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6781  0035A8  D7FA               	goto	l1053
  6782  0035AA                     u2520:
  6783                           
  6784                           ; BSR set to: 0
  6785                           
  6786                           ; BSR set to: 0
  6787                           
  6788                           ; BSR set to: 0
  6789  0035AA  90D8               	bcf	status,0,c
  6790  0035AC  37CE               	rlcf	___awdiv@quotient& (0+255),f,b
  6791  0035AE  37CF               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6792                           
  6793                           ; BSR set to: 0
  6794  0035B0  51CA               	movf	___awdiv@divisor& (0+255),w,b
  6795  0035B2  5DC8               	subwf	___awdiv@dividend& (0+255),w,b
  6796  0035B4  51CB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6797  0035B6  59C9               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6798  0035B8  A0D8               	btfss	status,0,c
  6799  0035BA  D005               	goto	l1056
  6800                           
  6801                           ; BSR set to: 0
  6802  0035BC  51CA               	movf	___awdiv@divisor& (0+255),w,b
  6803  0035BE  5FC8               	subwf	___awdiv@dividend& (0+255),f,b
  6804  0035C0  51CB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6805  0035C2  5BC9               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6806                           
  6807                           ; BSR set to: 0
  6808  0035C4  81CE               	bsf	___awdiv@quotient& (0+255),0,b
  6809  0035C6                     l1056:
  6810                           
  6811                           ; BSR set to: 0
  6812                           
  6813                           ; BSR set to: 0
  6814  0035C6  90D8               	bcf	status,0,c
  6815  0035C8  33CB               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6816  0035CA  33CA               	rrcf	___awdiv@divisor& (0+255),f,b
  6817                           
  6818                           ; BSR set to: 0
  6819  0035CC  2FCC               	decfsz	___awdiv@counter& (0+255),f,b
  6820  0035CE  D7ED               	goto	u2520
  6821  0035D0                     l1057:
  6822                           
  6823                           ; BSR set to: 0
  6824                           
  6825                           ; BSR set to: 0
  6826                           
  6827                           ; BSR set to: 0
  6828  0035D0  51CD               	movf	___awdiv@sign& (0+255),w,b
  6829  0035D2  B4D8               	btfsc	status,2,c
  6830  0035D4  D004               	goto	l1058
  6831                           
  6832                           ; BSR set to: 0
  6833  0035D6  6DCE               	negf	___awdiv@quotient& (0+255),b
  6834  0035D8  1FCF               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6835  0035DA  B0D8               	btfsc	status,0,c
  6836  0035DC  2BCF               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6837  0035DE                     l1058:
  6838                           
  6839                           ; BSR set to: 0
  6840                           
  6841                           ; BSR set to: 0
  6842  0035DE  C0CE  F0C8         	movff	___awdiv@quotient,?___awdiv
  6843  0035E2  C0CF  F0C9         	movff	___awdiv@quotient+1,?___awdiv+1
  6844  0035E6  0012               	return	
  6845  0035E8                     __end_of___awdiv:
  6846                           	opt stack 0
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           prodh	equ	0xFF4
  6852                           prodl	equ	0xFF3
  6853                           intcon	equ	0xFF2
  6854                           intcon3	equ	0xFF0
  6855                           indf0	equ	0xFEF
  6856                           postinc0	equ	0xFEE
  6857                           fsr0h	equ	0xFEA
  6858                           fsr0l	equ	0xFE9
  6859                           wreg	equ	0xFE8
  6860                           postdec1	equ	0xFE5
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           fsr2h	equ	0xFDA
  6866                           fsr2l	equ	0xFD9
  6867                           status	equ	0xFD8
  6868                           
  6869 ;; *************** function _I2C_Master_Read *****************
  6870 ;; Defined at:
  6871 ;;		line 120 in file "I2C.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  ackBit          1    wreg     unsigned char 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  ackBit          1    1[BANK0 ] unsigned char 
  6876 ;;  receivedByte    1    2[BANK0 ] unsigned char 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  1    wreg      unsigned char 
  6879 ;; Registers used:
  6880 ;;		wreg, status,2, status,0, cstack
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;Total ram usage:        2 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    5
  6893 ;; This function calls:
  6894 ;;		_I2C_Master_Wait
  6895 ;; This function is called by:
  6896 ;;		_main
  6897 ;;		_get_RTC_initial
  6898 ;;		_get_RTC_final
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text15
  6903  003C74                     __ptext15:
  6904                           	opt stack 0
  6905  003C74                     _I2C_Master_Read:
  6906                           	opt stack 24
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;incstack = 0
  6910                           ;I2C_Master_Read@ackBit stored from wreg
  6911  003C74  0100               	movlb	0	; () banked
  6912  003C76  6FC9               	movwf	I2C_Master_Read@ackBit& (0+255),b
  6913                           
  6914                           ;I2C.c: 130: unsigned char receivedByte;
  6915                           ;I2C.c: 132: I2C_Master_Wait();
  6916  003C78  ECD4  F01E         	call	_I2C_Master_Wait	;wreg free
  6917                           
  6918                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  6919  003C7C  86C5               	bsf	4037,3,c	;volatile
  6920                           
  6921                           ;I2C.c: 135: I2C_Master_Wait();
  6922  003C7E  ECD4  F01E         	call	_I2C_Master_Wait	;wreg free
  6923                           
  6924                           ;I2C.c: 136: receivedByte = SSPBUF;
  6925  003C82  CFC9 F0CA          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  6926                           
  6927                           ;I2C.c: 138: I2C_Master_Wait();
  6928  003C86  ECD4  F01E         	call	_I2C_Master_Wait	;wreg free
  6929                           
  6930                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  6931  003C8A  0100               	movlb	0	; () banked
  6932  003C8C  B1C9               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
  6933  003C8E  D002               	bra	u2445
  6934  003C90  9AC5               	bcf	4037,5,c	;volatile
  6935  003C92  D001               	bra	u2446
  6936  003C94                     u2445:
  6937  003C94  8AC5               	bsf	4037,5,c	;volatile
  6938  003C96                     u2446:
  6939                           
  6940                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  6941  003C96  88C5               	bsf	4037,4,c	;volatile
  6942                           
  6943                           ;I2C.c: 142: return receivedByte;
  6944  003C98  0100               	movlb	0	; () banked
  6945  003C9A  51CA               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
  6946  003C9C  0012               	return	
  6947  003C9E                     __end_of_I2C_Master_Read:
  6948                           	opt stack 0
  6949                           tblptru	equ	0xFF8
  6950                           tblptrh	equ	0xFF7
  6951                           tblptrl	equ	0xFF6
  6952                           tablat	equ	0xFF5
  6953                           prodh	equ	0xFF4
  6954                           prodl	equ	0xFF3
  6955                           intcon	equ	0xFF2
  6956                           intcon3	equ	0xFF0
  6957                           indf0	equ	0xFEF
  6958                           postinc0	equ	0xFEE
  6959                           fsr0h	equ	0xFEA
  6960                           fsr0l	equ	0xFE9
  6961                           wreg	equ	0xFE8
  6962                           postdec1	equ	0xFE5
  6963                           fsr1l	equ	0xFE1
  6964                           indf2	equ	0xFDF
  6965                           postinc2	equ	0xFDE
  6966                           postdec2	equ	0xFDD
  6967                           fsr2h	equ	0xFDA
  6968                           fsr2l	equ	0xFD9
  6969                           status	equ	0xFD8
  6970                           
  6971 ;; *************** function _I2C_sendData *****************
  6972 ;; Defined at:
  6973 ;;		line 1203 in file "main.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  char_data       1    wreg     unsigned char 
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;  char_data       1    3[BANK0 ] unsigned char 
  6978 ;; Return value:  Size  Location     Type
  6979 ;;                  1    wreg      void 
  6980 ;; Registers used:
  6981 ;;		wreg, status,2, status,0, cstack
  6982 ;; Tracked objects:
  6983 ;;		On entry : 0/0
  6984 ;;		On exit  : 0/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;Total ram usage:        1 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; Hardware stack levels required when called:    6
  6994 ;; This function calls:
  6995 ;;		_I2C_Master_Start
  6996 ;;		_I2C_Master_Stop
  6997 ;;		_I2C_Master_Write
  6998 ;; This function is called by:
  6999 ;;		_main
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           	psect	text16
  7004  003CC6                     __ptext16:
  7005                           	opt stack 0
  7006  003CC6                     _I2C_sendData:
  7007                           	opt stack 24
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;incstack = 0
  7011                           ;I2C_sendData@char_data stored from wreg
  7012  003CC6  0100               	movlb	0	; () banked
  7013  003CC8  6FCB               	movwf	I2C_sendData@char_data& (0+255),b
  7014                           
  7015                           ;main.c: 1204: I2C_Master_Start();
  7016  003CCA  EC16  F01F         	call	_I2C_Master_Start	;wreg free
  7017                           
  7018                           ;main.c: 1205: I2C_Master_Write(0b00010000);
  7019  003CCE  0E00               	movlw	0
  7020  003CD0  0100               	movlb	0	; () banked
  7021  003CD2  6FCA               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  7022  003CD4  0E10               	movlw	16
  7023  003CD6  6FC9               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  7024  003CD8  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  7025                           
  7026                           ;main.c: 1206: I2C_Master_Write(char_data);
  7027  003CDC  C0CB  F0C9         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
  7028  003CE0  0100               	movlb	0	; () banked
  7029  003CE2  6BCA               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  7030  003CE4  EC08  F01F         	call	_I2C_Master_Write	;wreg free
  7031                           
  7032                           ;main.c: 1207: I2C_Master_Stop();
  7033  003CE8  EC12  F01F         	call	_I2C_Master_Stop	;wreg free
  7034  003CEC  0012               	return		;funcret
  7035  003CEE                     __end_of_I2C_sendData:
  7036                           	opt stack 0
  7037                           tblptru	equ	0xFF8
  7038                           tblptrh	equ	0xFF7
  7039                           tblptrl	equ	0xFF6
  7040                           tablat	equ	0xFF5
  7041                           prodh	equ	0xFF4
  7042                           prodl	equ	0xFF3
  7043                           intcon	equ	0xFF2
  7044                           intcon3	equ	0xFF0
  7045                           indf0	equ	0xFEF
  7046                           postinc0	equ	0xFEE
  7047                           fsr0h	equ	0xFEA
  7048                           fsr0l	equ	0xFE9
  7049                           wreg	equ	0xFE8
  7050                           postdec1	equ	0xFE5
  7051                           fsr1l	equ	0xFE1
  7052                           indf2	equ	0xFDF
  7053                           postinc2	equ	0xFDE
  7054                           postdec2	equ	0xFDD
  7055                           fsr2h	equ	0xFDA
  7056                           fsr2l	equ	0xFD9
  7057                           status	equ	0xFD8
  7058                           
  7059 ;; *************** function _I2C_Master_Write *****************
  7060 ;; Defined at:
  7061 ;;		line 108 in file "I2C.c"
  7062 ;; Parameters:    Size  Location     Type
  7063 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;		None
  7066 ;; Return value:  Size  Location     Type
  7067 ;;                  1    wreg      void 
  7068 ;; Registers used:
  7069 ;;		wreg, status,2, status,0, cstack
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7075 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;Total ram usage:        2 bytes
  7080 ;; Hardware stack levels used:    1
  7081 ;; Hardware stack levels required when called:    5
  7082 ;; This function calls:
  7083 ;;		_I2C_Master_Wait
  7084 ;; This function is called by:
  7085 ;;		_main
  7086 ;;		_get_RTC_initial
  7087 ;;		_get_RTC_final
  7088 ;;		_I2C_sendData
  7089 ;;		_initRamp
  7090 ;;		_ramp_Rotate
  7091 ;;		_RTC_setTime
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text17
  7096  003E10                     __ptext17:
  7097                           	opt stack 0
  7098  003E10                     _I2C_Master_Write:
  7099                           	opt stack 24
  7100                           
  7101                           ;I2C.c: 116: I2C_Master_Wait();
  7102                           
  7103                           ;incstack = 0
  7104  003E10  ECD4  F01E         	call	_I2C_Master_Wait	;wreg free
  7105                           
  7106                           ;I2C.c: 117: SSPBUF = byteToWrite;
  7107  003E14  C0C9  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  7108  003E18  0012               	return		;funcret
  7109  003E1A                     __end_of_I2C_Master_Write:
  7110                           	opt stack 0
  7111                           tblptru	equ	0xFF8
  7112                           tblptrh	equ	0xFF7
  7113                           tblptrl	equ	0xFF6
  7114                           tablat	equ	0xFF5
  7115                           prodh	equ	0xFF4
  7116                           prodl	equ	0xFF3
  7117                           intcon	equ	0xFF2
  7118                           intcon3	equ	0xFF0
  7119                           indf0	equ	0xFEF
  7120                           postinc0	equ	0xFEE
  7121                           fsr0h	equ	0xFEA
  7122                           fsr0l	equ	0xFE9
  7123                           wreg	equ	0xFE8
  7124                           postdec1	equ	0xFE5
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _I2C_Master_Stop *****************
  7134 ;; Defined at:
  7135 ;;		line 95 in file "I2C.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;		None
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  1    wreg      void 
  7142 ;; Registers used:
  7143 ;;		wreg, status,2, status,0, cstack
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;Total ram usage:        0 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:    5
  7156 ;; This function calls:
  7157 ;;		_I2C_Master_Wait
  7158 ;; This function is called by:
  7159 ;;		_main
  7160 ;;		_get_RTC_initial
  7161 ;;		_get_RTC_final
  7162 ;;		_I2C_sendData
  7163 ;;		_initRamp
  7164 ;;		_ramp_Rotate
  7165 ;;		_RTC_setTime
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text18
  7170  003E24                     __ptext18:
  7171                           	opt stack 0
  7172  003E24                     _I2C_Master_Stop:
  7173                           	opt stack 24
  7174                           
  7175                           ;I2C.c: 104: I2C_Master_Wait();
  7176                           
  7177                           ;incstack = 0
  7178  003E24  ECD4  F01E         	call	_I2C_Master_Wait	;wreg free
  7179                           
  7180                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  7181  003E28  84C5               	bsf	4037,2,c	;volatile
  7182  003E2A  0012               	return		;funcret
  7183  003E2C                     __end_of_I2C_Master_Stop:
  7184                           	opt stack 0
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           prodh	equ	0xFF4
  7190                           prodl	equ	0xFF3
  7191                           intcon	equ	0xFF2
  7192                           intcon3	equ	0xFF0
  7193                           indf0	equ	0xFEF
  7194                           postinc0	equ	0xFEE
  7195                           fsr0h	equ	0xFEA
  7196                           fsr0l	equ	0xFE9
  7197                           wreg	equ	0xFE8
  7198                           postdec1	equ	0xFE5
  7199                           fsr1l	equ	0xFE1
  7200                           indf2	equ	0xFDF
  7201                           postinc2	equ	0xFDE
  7202                           postdec2	equ	0xFDD
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8
  7206                           
  7207 ;; *************** function _I2C_Master_Start *****************
  7208 ;; Defined at:
  7209 ;;		line 69 in file "I2C.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;		None
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;		None
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  1    wreg      void 
  7216 ;; Registers used:
  7217 ;;		wreg, status,2, status,0, cstack
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;Total ram usage:        0 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:    5
  7230 ;; This function calls:
  7231 ;;		_I2C_Master_Wait
  7232 ;; This function is called by:
  7233 ;;		_main
  7234 ;;		_get_RTC_initial
  7235 ;;		_get_RTC_final
  7236 ;;		_I2C_sendData
  7237 ;;		_initRamp
  7238 ;;		_ramp_Rotate
  7239 ;;		_RTC_setTime
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           	psect	text19
  7244  003E2C                     __ptext19:
  7245                           	opt stack 0
  7246  003E2C                     _I2C_Master_Start:
  7247                           	opt stack 24
  7248                           
  7249                           ;I2C.c: 78: I2C_Master_Wait();
  7250                           
  7251                           ;incstack = 0
  7252  003E2C  ECD4  F01E         	call	_I2C_Master_Wait	;wreg free
  7253                           
  7254                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  7255  003E30  80C5               	bsf	4037,0,c	;volatile
  7256  003E32  0012               	return		;funcret
  7257  003E34                     __end_of_I2C_Master_Start:
  7258                           	opt stack 0
  7259                           tblptru	equ	0xFF8
  7260                           tblptrh	equ	0xFF7
  7261                           tblptrl	equ	0xFF6
  7262                           tablat	equ	0xFF5
  7263                           prodh	equ	0xFF4
  7264                           prodl	equ	0xFF3
  7265                           intcon	equ	0xFF2
  7266                           intcon3	equ	0xFF0
  7267                           indf0	equ	0xFEF
  7268                           postinc0	equ	0xFEE
  7269                           fsr0h	equ	0xFEA
  7270                           fsr0l	equ	0xFE9
  7271                           wreg	equ	0xFE8
  7272                           postdec1	equ	0xFE5
  7273                           fsr1l	equ	0xFE1
  7274                           indf2	equ	0xFDF
  7275                           postinc2	equ	0xFDE
  7276                           postdec2	equ	0xFDD
  7277                           fsr2h	equ	0xFDA
  7278                           fsr2l	equ	0xFD9
  7279                           status	equ	0xFD8
  7280                           
  7281 ;; *************** function _I2C_Master_Wait *****************
  7282 ;; Defined at:
  7283 ;;		line 51 in file "I2C.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      void 
  7290 ;; Registers used:
  7291 ;;		wreg, status,2, status,0
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;Total ram usage:        1 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:    4
  7304 ;; This function calls:
  7305 ;;		Nothing
  7306 ;; This function is called by:
  7307 ;;		_I2C_Master_Start
  7308 ;;		_I2C_Master_Stop
  7309 ;;		_I2C_Master_Write
  7310 ;;		_I2C_Master_Read
  7311 ;;		_I2C_Master_RepeatedStart
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text20
  7316  003DA8                     __ptext20:
  7317                           	opt stack 0
  7318  003DA8                     _I2C_Master_Wait:
  7319                           	opt stack 24
  7320                           
  7321                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  7322                           
  7323                           ;incstack = 0
  7324  003DA8  B4C7               	btfsc	4039,2,c	;volatile
  7325  003DAA  D7FE               	goto	_I2C_Master_Wait
  7326  003DAC  CFC5 F0C8          	movff	4037,??_I2C_Master_Wait	;volatile
  7327  003DB0  0E1F               	movlw	31
  7328  003DB2  0100               	movlb	0	; () banked
  7329  003DB4  17C8               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7330  003DB6  B4D8               	btfsc	status,2,c
  7331  003DB8  0012               	return	
  7332  003DBA  D7F6               	goto	_I2C_Master_Wait
  7333  003DBC                     __end_of_I2C_Master_Wait:
  7334                           	opt stack 0
  7335                           tblptru	equ	0xFF8
  7336                           tblptrh	equ	0xFF7
  7337                           tblptrl	equ	0xFF6
  7338                           tablat	equ	0xFF5
  7339                           prodh	equ	0xFF4
  7340                           prodl	equ	0xFF3
  7341                           intcon	equ	0xFF2
  7342                           intcon3	equ	0xFF0
  7343                           indf0	equ	0xFEF
  7344                           postinc0	equ	0xFEE
  7345                           fsr0h	equ	0xFEA
  7346                           fsr0l	equ	0xFE9
  7347                           wreg	equ	0xFE8
  7348                           postdec1	equ	0xFE5
  7349                           fsr1l	equ	0xFE1
  7350                           indf2	equ	0xFDF
  7351                           postinc2	equ	0xFDE
  7352                           postdec2	equ	0xFDD
  7353                           fsr2h	equ	0xFDA
  7354                           fsr2l	equ	0xFD9
  7355                           status	equ	0xFD8
  7356                           
  7357 ;; *************** function _interruptHandler *****************
  7358 ;; Defined at:
  7359 ;;		line 589 in file "main.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  i               2   61[COMRAM] int 
  7364 ;;  temp            1   64[COMRAM] unsigned char 
  7365 ;;  keypress        1   63[COMRAM] unsigned char 
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7378 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;Total ram usage:       27 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    3
  7382 ;; This function calls:
  7383 ;;		_I2C_Master_Init
  7384 ;;		___awmod
  7385 ;;		_check
  7386 ;;		_generate_compartment_array
  7387 ;;		_is_valid
  7388 ;;		_strcat
  7389 ;;		_strcpy
  7390 ;;		_strncmp
  7391 ;;		i2_I2C_Master_Read
  7392 ;;		i2_I2C_Master_Start
  7393 ;;		i2_I2C_Master_Stop
  7394 ;;		i2_I2C_Master_Write
  7395 ;;		i2___awdiv
  7396 ;;		i2___wmul
  7397 ;;		i2_initLCD
  7398 ;;		i2_lcdInst
  7399 ;;		i2_printf
  7400 ;;		i2_putch
  7401 ;; This function is called by:
  7402 ;;		Interrupt level 2
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           	psect	intcode
  7407  000008                     __pintcode:
  7408                           	opt stack 0
  7409  000008                     _interruptHandler:
  7410                           	opt stack 24
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;incstack = 0
  7414  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7415  00000A  ED33  F00D         	call	int_func,f	;refresh shadow registers
  7416                           tblptru	equ	0xFF8
  7417                           tblptrh	equ	0xFF7
  7418                           tblptrl	equ	0xFF6
  7419                           tablat	equ	0xFF5
  7420                           prodh	equ	0xFF4
  7421                           prodl	equ	0xFF3
  7422                           intcon	equ	0xFF2
  7423                           intcon3	equ	0xFF0
  7424                           indf0	equ	0xFEF
  7425                           postinc0	equ	0xFEE
  7426                           fsr0h	equ	0xFEA
  7427                           fsr0l	equ	0xFE9
  7428                           wreg	equ	0xFE8
  7429                           postdec1	equ	0xFE5
  7430                           fsr1l	equ	0xFE1
  7431                           indf2	equ	0xFDF
  7432                           postinc2	equ	0xFDE
  7433                           postdec2	equ	0xFDD
  7434                           fsr2h	equ	0xFDA
  7435                           fsr2l	equ	0xFD9
  7436                           status	equ	0xFD8
  7437                           
  7438                           	psect	intcode_body
  7439  001A66                     __pintcode_body:
  7440                           	opt stack 24
  7441  001A66                     int_func:
  7442                           	opt stack 24
  7443  001A66  0006               	pop		; remove dummy address from shadow register refresh
  7444  001A68  CFFA F02C          	movff	pclath,??_interruptHandler+5
  7445  001A6C  CFFB F02D          	movff	pclatu,??_interruptHandler+6
  7446  001A70  CFE9 F02E          	movff	fsr0l,??_interruptHandler+7
  7447  001A74  CFEA F02F          	movff	fsr0h,??_interruptHandler+8
  7448  001A78  CFE1 F030          	movff	fsr1l,??_interruptHandler+9
  7449  001A7C  CFE2 F031          	movff	fsr1h,??_interruptHandler+10
  7450  001A80  CFD9 F032          	movff	fsr2l,??_interruptHandler+11
  7451  001A84  CFDA F033          	movff	fsr2h,??_interruptHandler+12
  7452  001A88  CFF3 F034          	movff	prodl,??_interruptHandler+13
  7453  001A8C  CFF4 F035          	movff	prodh,??_interruptHandler+14
  7454  001A90  CFF6 F036          	movff	tblptrl,??_interruptHandler+15
  7455  001A94  CFF7 F037          	movff	tblptrh,??_interruptHandler+16
  7456  001A98  CFF8 F038          	movff	tblptru,??_interruptHandler+17
  7457  001A9C  CFF5 F039          	movff	tablat,??_interruptHandler+18
  7458  001AA0  C07F  F03A         	movff	btemp,??_interruptHandler+19
  7459  001AA4  C080  F03B         	movff	btemp+1,??_interruptHandler+20
  7460  001AA8  C081  F03C         	movff	btemp+2,??_interruptHandler+21
  7461  001AAC  C082  F03D         	movff	btemp+3,??_interruptHandler+22
  7462                           
  7463                           ;main.c: 600: if(INT1IF){
  7464  001AB0  A0F0               	btfss	intcon3,0,c	;volatile
  7465  001AB2  EF09  F013         	goto	i2l5692
  7466                           
  7467                           ;main.c: 606: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7468  001AB6  3881               	swapf	3969,w,c	;volatile
  7469  001AB8  0B0F               	andlw	15
  7470  001ABA  0B0F               	andlw	15
  7471  001ABC  6E40               	movwf	interruptHandler@keypress,c
  7472                           
  7473                           ;main.c: 608: char temp = keys[keypress];
  7474  001ABE  5040               	movf	interruptHandler@keypress,w,c
  7475  001AC0  0D01               	mullw	1
  7476  001AC2  0E19               	movlw	low _keys
  7477  001AC4  24F3               	addwf	prodl,w,c
  7478  001AC6  6EF6               	movwf	tblptrl,c
  7479  001AC8  0EFD               	movlw	high _keys
  7480  001ACA  20F4               	addwfc	prodh,w,c
  7481  001ACC  6EF7               	movwf	tblptrh,c
  7482  001ACE                     	if	1	;There are 3 active tblptr bytes
  7483  001ACE  6AF8               	clrf	tblptru,c
  7484  001AD0  0E00               	movlw	low (__mediumconst shr (0+16))
  7485  001AD2  22F8               	addwfc	tblptru,f,c
  7486  001AD4                     	endif
  7487  001AD4  0008               	tblrd		*
  7488  001AD6  CFF5 F041          	movff	tablat,interruptHandler@temp
  7489                           
  7490                           ;main.c: 611: if(temp == 'A'){
  7491  001ADA  0E41               	movlw	65
  7492  001ADC  1841               	xorwf	interruptHandler@temp,w,c
  7493  001ADE  A4D8               	btfss	status,2,c
  7494  001AE0  D006               	goto	i2l399
  7495                           
  7496                           ;main.c: 612: state = prev_state;
  7497  001AE2  C067  F0AC         	movff	_prev_state,_state
  7498  001AE6  C068  F0AD         	movff	_prev_state+1,_state+1
  7499  001AEA  EF08  F013         	goto	i2l5690
  7500  001AEE                     i2l399:
  7501                           
  7502                           ;main.c: 615: }
  7503                           ;main.c: 618: if (change_mode == 0){
  7504  001AEE  0100               	movlb	0	; () banked
  7505  001AF0  51B6               	movf	_change_mode& (0+255),w,b
  7506  001AF2  11B7               	iorwf	(_change_mode+1)& (0+255),w,b
  7507  001AF4  A4D8               	btfss	status,2,c
  7508  001AF6  D09D               	goto	i2l407
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;main.c: 622: if (temp == '1'){
  7512  001AF8  0E31               	movlw	49
  7513  001AFA  1841               	xorwf	interruptHandler@temp,w,c
  7514  001AFC  A4D8               	btfss	status,2,c
  7515  001AFE  D08B               	goto	i2l402
  7516                           
  7517                           ; BSR set to: 0
  7518                           ;main.c: 624: initLCD();
  7519  001B00  EC4B  F01D         	call	i2_initLCD	;wreg free
  7520                           
  7521                           ;main.c: 625: for (i = 0; i <3; i++){
  7522  001B04  0E00               	movlw	0
  7523  001B06  0100               	movlb	0	; () banked
  7524  001B08  6FBD               	movwf	(_i+1)& (0+255),b
  7525  001B0A  0E00               	movlw	0
  7526  001B0C  6FBC               	movwf	_i& (0+255),b
  7527                           
  7528                           ; BSR set to: 0
  7529  001B0E  51BD               	movf	(_i+1)& (0+255),w,b
  7530  001B10  E101               	bnz	i2u421_40
  7531  001B12  D07B               	goto	L2
  7532  001B14                     i2u421_40:
  7533                           
  7534                           ; BSR set to: 0
  7535  001B14  EF08  F013         	goto	i2l5690
  7536  001B18                     
  7537                           ; BSR set to: 0
  7538                           ;main.c: 626: I2C_Master_Init(100000);
  7539                           
  7540                           ; BSR set to: 0
  7541  001B18  0EA0               	movlw	160
  7542  001B1A  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  7543  001B1C  0E86               	movlw	134
  7544  001B1E  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  7545  001B20  0E01               	movlw	1
  7546  001B22  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  7547  001B24  0E00               	movlw	0
  7548  001B26  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  7549  001B28  ECA4  F01C         	call	_I2C_Master_Init	;wreg free
  7550                           
  7551                           ;main.c: 627: I2C_Master_Start();
  7552  001B2C  EC1E  F01F         	call	i2_I2C_Master_Start	;wreg free
  7553                           
  7554                           ;main.c: 628: I2C_Master_Write(0b11010000);
  7555  001B30  0E00               	movlw	0
  7556  001B32  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7557  001B34  0ED0               	movlw	208
  7558  001B36  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7559  001B38  EC0D  F01F         	call	i2_I2C_Master_Write	;wreg free
  7560                           
  7561                           ;main.c: 629: I2C_Master_Write(0x00);
  7562  001B3C  0E00               	movlw	0
  7563  001B3E  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7564  001B40  0E00               	movlw	0
  7565  001B42  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7566  001B44  EC0D  F01F         	call	i2_I2C_Master_Write	;wreg free
  7567                           
  7568                           ;main.c: 630: I2C_Master_Stop();
  7569  001B48  EC1A  F01F         	call	i2_I2C_Master_Stop	;wreg free
  7570                           
  7571                           ;main.c: 633: I2C_Master_Start();
  7572  001B4C  EC1E  F01F         	call	i2_I2C_Master_Start	;wreg free
  7573                           
  7574                           ;main.c: 634: I2C_Master_Write(0b11010001);
  7575  001B50  0E00               	movlw	0
  7576  001B52  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7577  001B54  0ED1               	movlw	209
  7578  001B56  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7579  001B58  EC0D  F01F         	call	i2_I2C_Master_Write	;wreg free
  7580                           
  7581                           ;main.c: 635: for(j = 0; j < 6; j++){
  7582  001B5C  0E00               	movlw	0
  7583  001B5E  6E75               	movwf	_j,c
  7584  001B60                     i2l5324:
  7585  001B60  0E05               	movlw	5
  7586  001B62  6475               	cpfsgt	_j,c
  7587  001B64  D001               	goto	i2l405
  7588  001B66  D00E               	goto	i2u423_40
  7589  001B68                     i2l405:
  7590                           
  7591                           ;main.c: 636: time[j] = I2C_Master_Read(0);
  7592  001B68  5075               	movf	_j,w,c
  7593  001B6A  0D01               	mullw	1
  7594  001B6C  0E52               	movlw	low _time
  7595  001B6E  24F3               	addwf	prodl,w,c
  7596  001B70  6ED9               	movwf	fsr2l,c
  7597  001B72  0E00               	movlw	high _time
  7598  001B74  20F4               	addwfc	prodh,w,c
  7599  001B76  6EDA               	movwf	fsr2h,c
  7600  001B78  0E00               	movlw	0
  7601  001B7A  EC8A  F01E         	call	i2_I2C_Master_Read
  7602  001B7E  6EDF               	movwf	indf2,c
  7603  001B80  2A75               	incf	_j,f,c
  7604  001B82  D7EE               	goto	i2l5324
  7605  001B84                     i2u423_40:
  7606                           
  7607                           ;main.c: 637: }
  7608                           ;main.c: 638: time[6] = I2C_Master_Read(1);
  7609  001B84  0E01               	movlw	1
  7610  001B86  EC8A  F01E         	call	i2_I2C_Master_Read
  7611  001B8A  6E58               	movwf	_time+6,c
  7612                           
  7613                           ;main.c: 639: I2C_Master_Stop();
  7614  001B8C  EC1A  F01F         	call	i2_I2C_Master_Stop	;wreg free
  7615                           
  7616                           ;main.c: 641: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7617  001B90  0E80               	movlw	128
  7618  001B92  ECE8  F01E         	call	i2_lcdInst
  7619  001B96  0E41               	movlw	65
  7620  001B98  6E27               	movwf	??_interruptHandler& (0+255),c
  7621  001B9A  0EEE               	movlw	238
  7622  001B9C                     i2u528_47:
  7623  001B9C  2EE8               	decfsz	wreg,f,c
  7624  001B9E  D7FE               	bra	i2u528_47
  7625  001BA0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7626  001BA2  D7FC               	bra	i2u528_47
  7627  001BA4  D000               	nop2	
  7628                           
  7629                           ;main.c: 642: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  7630  001BA6  0EC2               	movlw	low STR_46
  7631  001BA8  6E0D               	movwf	i2printf@f,c
  7632  001BAA  0EFE               	movlw	high STR_46
  7633  001BAC  6E0E               	movwf	i2printf@f+1,c
  7634  001BAE  C058  F00F         	movff	_time+6,?i2_printf+2
  7635  001BB2  6A10               	clrf	?i2_printf+3,c
  7636  001BB4  C057  F011         	movff	_time+5,?i2_printf+4
  7637  001BB8  6A12               	clrf	?i2_printf+5,c
  7638  001BBA  C056  F013         	movff	_time+4,?i2_printf+6
  7639  001BBE  6A14               	clrf	?i2_printf+7,c
  7640  001BC0  EC53  F015         	call	i2_printf	;wreg free
  7641                           
  7642                           ;main.c: 643: lcdInst(0xC0);;
  7643  001BC4  0EC0               	movlw	192
  7644  001BC6  ECE8  F01E         	call	i2_lcdInst
  7645                           
  7646                           ;main.c: 644: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  7647  001BCA  0ED1               	movlw	low STR_47
  7648  001BCC  6E0D               	movwf	i2printf@f,c
  7649  001BCE  0EFE               	movlw	high STR_47
  7650  001BD0  6E0E               	movwf	i2printf@f+1,c
  7651  001BD2  C054  F00F         	movff	_time+2,?i2_printf+2
  7652  001BD6  6A10               	clrf	?i2_printf+3,c
  7653  001BD8  C053  F011         	movff	_time+1,?i2_printf+4
  7654  001BDC  6A12               	clrf	?i2_printf+5,c
  7655  001BDE  C052  F013         	movff	_time,?i2_printf+6
  7656  001BE2  6A14               	clrf	?i2_printf+7,c
  7657  001BE4  EC53  F015         	call	i2_printf	;wreg free
  7658                           
  7659                           ;main.c: 645: _delay((unsigned long)((600)*(40000000/4000.0)));
  7660  001BE8  0E1F               	movlw	31
  7661  001BEA  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7662  001BEC  0E71               	movlw	113
  7663  001BEE  6E27               	movwf	??_interruptHandler& (0+255),c
  7664  001BF0  0E1E               	movlw	30
  7665  001BF2                     i2u529_47:
  7666  001BF2  2EE8               	decfsz	wreg,f,c
  7667  001BF4  D7FE               	bra	i2u529_47
  7668  001BF6  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7669  001BF8  D7FC               	bra	i2u529_47
  7670  001BFA  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7671  001BFC  D7FA               	bra	i2u529_47
  7672  001BFE  D000               	nop2	
  7673  001C00  0100               	movlb	0	; () banked
  7674  001C02  4BBC               	infsnz	_i& (0+255),f,b
  7675  001C04  2BBD               	incf	(_i+1)& (0+255),f,b
  7676  001C06  51BD               	movf	(_i+1)& (0+255),w,b
  7677  001C08  E112               	bnz	i2l5350
  7678  001C0A                     L2:
  7679  001C0A  0E03               	movlw	3
  7680  001C0C  5DBC               	subwf	_i& (0+255),w,b
  7681  001C0E  A0D8               	btfss	status,0,c
  7682  001C10  D783               	goto	i2l403
  7683  001C12  EF08  F013         	goto	i2l5690
  7684  001C16                     i2l402:
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;main.c: 649: }
  7688                           ;main.c: 650: if (temp == '2'){
  7689                           
  7690                           ; BSR set to: 0
  7691  001C16  0E32               	movlw	50
  7692  001C18  1841               	xorwf	interruptHandler@temp,w,c
  7693  001C1A  A4D8               	btfss	status,2,c
  7694  001C1C  D00A               	goto	i2l407
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;main.c: 651: change_mode = 1;
  7698  001C1E  0E00               	movlw	0
  7699  001C20  6FB7               	movwf	(_change_mode+1)& (0+255),b
  7700  001C22  0E01               	movlw	1
  7701  001C24  6FB6               	movwf	_change_mode& (0+255),b
  7702                           
  7703                           ;main.c: 652: mode = 1;
  7704  001C26  0E00               	movlw	0
  7705  001C28  6FB9               	movwf	(_mode+1)& (0+255),b
  7706  001C2A  0E01               	movlw	1
  7707  001C2C  D142               	goto	L9
  7708  001C2E                     i2l5350:
  7709  001C2E  EF08  F013         	goto	i2l5690
  7710  001C32                     i2l407:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;main.c: 657: }
  7714                           ;main.c: 660: }
  7715                           ;main.c: 665: if(operation == 1){
  7716                           
  7717                           ; BSR set to: 0
  7718                           
  7719                           ; BSR set to: 0
  7720  001C32  0473               	decf	_operation,w,c
  7721  001C34  1074               	iorwf	_operation+1,w,c
  7722  001C36  A4D8               	btfss	status,2,c
  7723  001C38  D13E               	goto	i2l416
  7724                           
  7725                           ; BSR set to: 0
  7726                           ;main.c: 666: if (temp == '1'){
  7727  001C3A  0E31               	movlw	49
  7728  001C3C  1841               	xorwf	interruptHandler@temp,w,c
  7729  001C3E  A4D8               	btfss	status,2,c
  7730  001C40  D08B               	goto	i2l409
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;main.c: 667: initLCD();
  7734  001C42  EC4B  F01D         	call	i2_initLCD	;wreg free
  7735                           
  7736                           ;main.c: 668: for (i = 0; i <3; i++){
  7737  001C46  0E00               	movlw	0
  7738  001C48  0100               	movlb	0	; () banked
  7739  001C4A  6FBD               	movwf	(_i+1)& (0+255),b
  7740  001C4C  0E00               	movlw	0
  7741  001C4E  6FBC               	movwf	_i& (0+255),b
  7742                           
  7743                           ; BSR set to: 0
  7744  001C50  51BD               	movf	(_i+1)& (0+255),w,b
  7745  001C52  E101               	bnz	i2u428_40
  7746  001C54  D07B               	goto	L3
  7747  001C56                     i2u428_40:
  7748                           
  7749                           ; BSR set to: 0
  7750  001C56  EF08  F013         	goto	i2l5690
  7751  001C5A                     
  7752                           ; BSR set to: 0
  7753                           ;main.c: 669: I2C_Master_Init(100000);
  7754                           
  7755                           ; BSR set to: 0
  7756  001C5A  0EA0               	movlw	160
  7757  001C5C  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  7758  001C5E  0E86               	movlw	134
  7759  001C60  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  7760  001C62  0E01               	movlw	1
  7761  001C64  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  7762  001C66  0E00               	movlw	0
  7763  001C68  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  7764  001C6A  ECA4  F01C         	call	_I2C_Master_Init	;wreg free
  7765                           
  7766                           ;main.c: 670: I2C_Master_Start();
  7767  001C6E  EC1E  F01F         	call	i2_I2C_Master_Start	;wreg free
  7768                           
  7769                           ;main.c: 671: I2C_Master_Write(0b11010000);
  7770  001C72  0E00               	movlw	0
  7771  001C74  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7772  001C76  0ED0               	movlw	208
  7773  001C78  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7774  001C7A  EC0D  F01F         	call	i2_I2C_Master_Write	;wreg free
  7775                           
  7776                           ;main.c: 672: I2C_Master_Write(0x00);
  7777  001C7E  0E00               	movlw	0
  7778  001C80  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7779  001C82  0E00               	movlw	0
  7780  001C84  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7781  001C86  EC0D  F01F         	call	i2_I2C_Master_Write	;wreg free
  7782                           
  7783                           ;main.c: 673: I2C_Master_Stop();
  7784  001C8A  EC1A  F01F         	call	i2_I2C_Master_Stop	;wreg free
  7785                           
  7786                           ;main.c: 676: I2C_Master_Start();
  7787  001C8E  EC1E  F01F         	call	i2_I2C_Master_Start	;wreg free
  7788                           
  7789                           ;main.c: 677: I2C_Master_Write(0b11010001);
  7790  001C92  0E00               	movlw	0
  7791  001C94  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
  7792  001C96  0ED1               	movlw	209
  7793  001C98  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
  7794  001C9A  EC0D  F01F         	call	i2_I2C_Master_Write	;wreg free
  7795                           
  7796                           ;main.c: 678: for(j = 0; j < 6; j++){
  7797  001C9E  0E00               	movlw	0
  7798  001CA0  6E75               	movwf	_j,c
  7799  001CA2                     i2l5370:
  7800  001CA2  0E05               	movlw	5
  7801  001CA4  6475               	cpfsgt	_j,c
  7802  001CA6  D001               	goto	i2l412
  7803  001CA8  D00E               	goto	i2u430_40
  7804  001CAA                     i2l412:
  7805                           
  7806                           ;main.c: 679: time[j] = I2C_Master_Read(0);
  7807  001CAA  5075               	movf	_j,w,c
  7808  001CAC  0D01               	mullw	1
  7809  001CAE  0E52               	movlw	low _time
  7810  001CB0  24F3               	addwf	prodl,w,c
  7811  001CB2  6ED9               	movwf	fsr2l,c
  7812  001CB4  0E00               	movlw	high _time
  7813  001CB6  20F4               	addwfc	prodh,w,c
  7814  001CB8  6EDA               	movwf	fsr2h,c
  7815  001CBA  0E00               	movlw	0
  7816  001CBC  EC8A  F01E         	call	i2_I2C_Master_Read
  7817  001CC0  6EDF               	movwf	indf2,c
  7818  001CC2  2A75               	incf	_j,f,c
  7819  001CC4  D7EE               	goto	i2l5370
  7820  001CC6                     i2u430_40:
  7821                           
  7822                           ;main.c: 680: }
  7823                           ;main.c: 681: time[6] = I2C_Master_Read(1);
  7824  001CC6  0E01               	movlw	1
  7825  001CC8  EC8A  F01E         	call	i2_I2C_Master_Read
  7826  001CCC  6E58               	movwf	_time+6,c
  7827                           
  7828                           ;main.c: 682: I2C_Master_Stop();
  7829  001CCE  EC1A  F01F         	call	i2_I2C_Master_Stop	;wreg free
  7830                           
  7831                           ;main.c: 684: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7832  001CD2  0E80               	movlw	128
  7833  001CD4  ECE8  F01E         	call	i2_lcdInst
  7834  001CD8  0E41               	movlw	65
  7835  001CDA  6E27               	movwf	??_interruptHandler& (0+255),c
  7836  001CDC  0EEE               	movlw	238
  7837  001CDE                     i2u530_47:
  7838  001CDE  2EE8               	decfsz	wreg,f,c
  7839  001CE0  D7FE               	bra	i2u530_47
  7840  001CE2  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7841  001CE4  D7FC               	bra	i2u530_47
  7842  001CE6  D000               	nop2	
  7843                           
  7844                           ;main.c: 685: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  7845  001CE8  0EC2               	movlw	low STR_46
  7846  001CEA  6E0D               	movwf	i2printf@f,c
  7847  001CEC  0EFE               	movlw	high STR_46
  7848  001CEE  6E0E               	movwf	i2printf@f+1,c
  7849  001CF0  C058  F00F         	movff	_time+6,?i2_printf+2
  7850  001CF4  6A10               	clrf	?i2_printf+3,c
  7851  001CF6  C057  F011         	movff	_time+5,?i2_printf+4
  7852  001CFA  6A12               	clrf	?i2_printf+5,c
  7853  001CFC  C056  F013         	movff	_time+4,?i2_printf+6
  7854  001D00  6A14               	clrf	?i2_printf+7,c
  7855  001D02  EC53  F015         	call	i2_printf	;wreg free
  7856                           
  7857                           ;main.c: 686: lcdInst(0xC0);;
  7858  001D06  0EC0               	movlw	192
  7859  001D08  ECE8  F01E         	call	i2_lcdInst
  7860                           
  7861                           ;main.c: 687: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  7862  001D0C  0ED1               	movlw	low STR_47
  7863  001D0E  6E0D               	movwf	i2printf@f,c
  7864  001D10  0EFE               	movlw	high STR_47
  7865  001D12  6E0E               	movwf	i2printf@f+1,c
  7866  001D14  C054  F00F         	movff	_time+2,?i2_printf+2
  7867  001D18  6A10               	clrf	?i2_printf+3,c
  7868  001D1A  C053  F011         	movff	_time+1,?i2_printf+4
  7869  001D1E  6A12               	clrf	?i2_printf+5,c
  7870  001D20  C052  F013         	movff	_time,?i2_printf+6
  7871  001D24  6A14               	clrf	?i2_printf+7,c
  7872  001D26  EC53  F015         	call	i2_printf	;wreg free
  7873                           
  7874                           ;main.c: 688: _delay((unsigned long)((600)*(40000000/4000.0)));
  7875  001D2A  0E1F               	movlw	31
  7876  001D2C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  7877  001D2E  0E71               	movlw	113
  7878  001D30  6E27               	movwf	??_interruptHandler& (0+255),c
  7879  001D32  0E1E               	movlw	30
  7880  001D34                     i2u531_47:
  7881  001D34  2EE8               	decfsz	wreg,f,c
  7882  001D36  D7FE               	bra	i2u531_47
  7883  001D38  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  7884  001D3A  D7FC               	bra	i2u531_47
  7885  001D3C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7886  001D3E  D7FA               	bra	i2u531_47
  7887  001D40  D000               	nop2	
  7888  001D42  0100               	movlb	0	; () banked
  7889  001D44  4BBC               	infsnz	_i& (0+255),f,b
  7890  001D46  2BBD               	incf	(_i+1)& (0+255),f,b
  7891  001D48  51BD               	movf	(_i+1)& (0+255),w,b
  7892  001D4A  E104               	bnz	i2u431_40
  7893  001D4C                     L3:
  7894  001D4C  0E03               	movlw	3
  7895  001D4E  5DBC               	subwf	_i& (0+255),w,b
  7896  001D50  A0D8               	btfss	status,0,c
  7897  001D52  D783               	goto	i2l410
  7898  001D54                     i2u431_40:
  7899  001D54  EF08  F013         	goto	i2l5690
  7900  001D58                     i2l409:
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;main.c: 694: }
  7904                           ;main.c: 695: if (temp == '2'){
  7905                           
  7906                           ; BSR set to: 0
  7907  001D58  0E32               	movlw	50
  7908  001D5A  1841               	xorwf	interruptHandler@temp,w,c
  7909  001D5C  A4D8               	btfss	status,2,c
  7910  001D5E  D099               	goto	i2l414
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;main.c: 704: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
  7914  001D60  C05D  F001         	movff	_hr_initial,i2___wmul@multiplier
  7915  001D64  C05E  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
  7916  001D68  0E0E               	movlw	14
  7917  001D6A  6E04               	movwf	i2___wmul@multiplicand+1,c
  7918  001D6C  0E10               	movlw	16
  7919  001D6E  6E03               	movwf	i2___wmul@multiplicand,c
  7920  001D70  EC77  F01E         	call	i2___wmul	;wreg free
  7921  001D74  C001  F027         	movff	?i2___wmul,??_interruptHandler
  7922  001D78  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
  7923  001D7C  C05B  F001         	movff	_min_initial,i2___wmul@multiplier
  7924  001D80  C05C  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
  7925  001D84  0E00               	movlw	0
  7926  001D86  6E04               	movwf	i2___wmul@multiplicand+1,c
  7927  001D88  0E3C               	movlw	60
  7928  001D8A  6E03               	movwf	i2___wmul@multiplicand,c
  7929  001D8C  EC77  F01E         	call	i2___wmul	;wreg free
  7930  001D90  5001               	movf	?i2___wmul,w,c
  7931  001D92  2627               	addwf	??_interruptHandler,f,c
  7932  001D94  5002               	movf	?i2___wmul+1,w,c
  7933  001D96  2228               	addwfc	??_interruptHandler+1,f,c
  7934  001D98  5059               	movf	_sec_initial,w,c
  7935  001D9A  2427               	addwf	??_interruptHandler,w,c
  7936  001D9C  0100               	movlb	0	; () banked
  7937  001D9E  6F98               	movwf	_initial_time& (0+255),b
  7938  001DA0  505A               	movf	_sec_initial+1,w,c
  7939  001DA2  2028               	addwfc	??_interruptHandler+1,w,c
  7940  001DA4  6F99               	movwf	(_initial_time+1)& (0+255),b
  7941                           
  7942                           ;main.c: 705: final_time = hr_final*3600 + min_final*60 + sec_final;
  7943  001DA6  C096  F001         	movff	_hr_final,i2___wmul@multiplier
  7944  001DAA  C097  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
  7945  001DAE  0E0E               	movlw	14
  7946  001DB0  6E04               	movwf	i2___wmul@multiplicand+1,c
  7947  001DB2  0E10               	movlw	16
  7948  001DB4  6E03               	movwf	i2___wmul@multiplicand,c
  7949  001DB6  EC77  F01E         	call	i2___wmul	;wreg free
  7950  001DBA  C001  F027         	movff	?i2___wmul,??_interruptHandler
  7951  001DBE  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
  7952  001DC2  C094  F001         	movff	_min_final,i2___wmul@multiplier
  7953  001DC6  C095  F002         	movff	_min_final+1,i2___wmul@multiplier+1
  7954  001DCA  0E00               	movlw	0
  7955  001DCC  6E04               	movwf	i2___wmul@multiplicand+1,c
  7956  001DCE  0E3C               	movlw	60
  7957  001DD0  6E03               	movwf	i2___wmul@multiplicand,c
  7958  001DD2  EC77  F01E         	call	i2___wmul	;wreg free
  7959  001DD6  5001               	movf	?i2___wmul,w,c
  7960  001DD8  2627               	addwf	??_interruptHandler,f,c
  7961  001DDA  5002               	movf	?i2___wmul+1,w,c
  7962  001DDC  2228               	addwfc	??_interruptHandler+1,f,c
  7963  001DDE  0100               	movlb	0	; () banked
  7964  001DE0  5192               	movf	_sec_final& (0+255),w,b
  7965  001DE2  2427               	addwf	??_interruptHandler,w,c
  7966  001DE4  6F90               	movwf	_final_time& (0+255),b
  7967  001DE6  5193               	movf	(_sec_final+1)& (0+255),w,b
  7968  001DE8  2028               	addwfc	??_interruptHandler+1,w,c
  7969  001DEA  6F91               	movwf	(_final_time+1)& (0+255),b
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;main.c: 706: operationTime = final_time - initial_time;
  7973  001DEC  C098  F027         	movff	_initial_time,??_interruptHandler
  7974  001DF0  C099  F028         	movff	_initial_time+1,??_interruptHandler+1
  7975  001DF4  1E27               	comf	??_interruptHandler,f,c
  7976  001DF6  1E28               	comf	??_interruptHandler+1,f,c
  7977  001DF8  4A27               	infsnz	??_interruptHandler,f,c
  7978  001DFA  2A28               	incf	??_interruptHandler+1,f,c
  7979  001DFC  5190               	movf	_final_time& (0+255),w,b
  7980  001DFE  2427               	addwf	??_interruptHandler,w,c
  7981  001E00  6E71               	movwf	_operationTime,c
  7982  001E02  5191               	movf	(_final_time+1)& (0+255),w,b
  7983  001E04  2028               	addwfc	??_interruptHandler+1,w,c
  7984  001E06  6E72               	movwf	_operationTime+1,c
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;main.c: 707: initLCD();
  7988  001E08  EC4B  F01D         	call	i2_initLCD	;wreg free
  7989                           
  7990                           ;main.c: 710: printf("operation time:");
  7991  001E0C  0E65               	movlw	low STR_50
  7992  001E0E  6E0D               	movwf	i2printf@f,c
  7993  001E10  0EFE               	movlw	high STR_50
  7994  001E12  6E0E               	movwf	i2printf@f+1,c
  7995  001E14  EC53  F015         	call	i2_printf	;wreg free
  7996                           
  7997                           ;main.c: 711: lcdInst(0xC0);;
  7998  001E18  0EC0               	movlw	192
  7999  001E1A  ECE8  F01E         	call	i2_lcdInst
  8000                           
  8001                           ;main.c: 712: printf("%dmin %dsecs",operationTime/60,operationTime%60);
  8002  001E1E  0E31               	movlw	low STR_51
  8003  001E20  6E0D               	movwf	i2printf@f,c
  8004  001E22  0EFF               	movlw	high STR_51
  8005  001E24  6E0E               	movwf	i2printf@f+1,c
  8006  001E26  C071  F001         	movff	_operationTime,i2___awdiv@dividend
  8007  001E2A  C072  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
  8008  001E2E  0E00               	movlw	0
  8009  001E30  6E04               	movwf	i2___awdiv@divisor+1,c
  8010  001E32  0E3C               	movlw	60
  8011  001E34  6E03               	movwf	i2___awdiv@divisor,c
  8012  001E36  EC7A  F01B         	call	i2___awdiv	;wreg free
  8013  001E3A  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
  8014  001E3E  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
  8015  001E42  C071  F001         	movff	_operationTime,___awmod@dividend
  8016  001E46  C072  F002         	movff	_operationTime+1,___awmod@dividend+1
  8017  001E4A  0E00               	movlw	0
  8018  001E4C  6E04               	movwf	___awmod@divisor+1,c
  8019  001E4E  0E3C               	movlw	60
  8020  001E50  6E03               	movwf	___awmod@divisor,c
  8021  001E52  EC3A  F01C         	call	___awmod	;wreg free
  8022  001E56  C001  F011         	movff	?___awmod,?i2_printf+4
  8023  001E5A  C002  F012         	movff	?___awmod+1,?i2_printf+5
  8024  001E5E  EC53  F015         	call	i2_printf	;wreg free
  8025                           
  8026                           ;main.c: 713: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  8027  001E62  0E80               	movlw	128
  8028  001E64  ECE8  F01E         	call	i2_lcdInst
  8029  001E68  0E41               	movlw	65
  8030  001E6A  6E27               	movwf	??_interruptHandler& (0+255),c
  8031  001E6C  0EEE               	movlw	238
  8032  001E6E                     i2u532_47:
  8033  001E6E  2EE8               	decfsz	wreg,f,c
  8034  001E70  D7FE               	bra	i2u532_47
  8035  001E72  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8036  001E74  D7FC               	bra	i2u532_47
  8037  001E76  D000               	nop2	
  8038                           
  8039                           ;main.c: 714: _delay((unsigned long)((2000)*(40000000/4000.0)));
  8040  001E78  0E66               	movlw	102
  8041  001E7A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8042  001E7C  0E76               	movlw	118
  8043  001E7E  6E27               	movwf	??_interruptHandler& (0+255),c
  8044  001E80  0EC1               	movlw	193
  8045  001E82                     i2u533_47:
  8046  001E82  2EE8               	decfsz	wreg,f,c
  8047  001E84  D7FE               	bra	i2u533_47
  8048  001E86  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8049  001E88  D7FC               	bra	i2u533_47
  8050  001E8A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8051  001E8C  D7FA               	bra	i2u533_47
  8052  001E8E  F000               	nop	
  8053  001E90  D3BF               	goto	i2l5690
  8054  001E92                     i2l414:
  8055                           
  8056                           ;main.c: 720: }
  8057                           ;main.c: 722: if (temp == '3'){
  8058  001E92  0E33               	movlw	51
  8059  001E94  1841               	xorwf	interruptHandler@temp,w,c
  8060  001E96  B4D8               	btfsc	status,2,c
  8061  001E98  D3BB               	goto	i2l5690
  8062                           
  8063                           ;main.c: 729: }
  8064                           ;main.c: 731: if (temp == '4'){
  8065                           
  8066                           ;main.c: 728: return;
  8067                           
  8068                           ;main.c: 727: INT1IF = 0;
  8069  001E9A  0E34               	movlw	52
  8070  001E9C  1841               	xorwf	interruptHandler@temp,w,c
  8071  001E9E  A4D8               	btfss	status,2,c
  8072  001EA0  D00A               	goto	i2l416
  8073                           
  8074                           ;main.c: 732: operation_done = 1;
  8075  001EA2  0E00               	movlw	0
  8076  001EA4  0100               	movlb	0	; () banked
  8077  001EA6  6FB5               	movwf	(_operation_done+1)& (0+255),b
  8078  001EA8  0E01               	movlw	1
  8079  001EAA  6FB4               	movwf	_operation_done& (0+255),b
  8080                           
  8081                           ;main.c: 733: mode = 0;
  8082  001EAC  0E00               	movlw	0
  8083  001EAE  6FB9               	movwf	(_mode+1)& (0+255),b
  8084  001EB0  0E00               	movlw	0
  8085  001EB2                     L9:
  8086  001EB2  6FB8               	movwf	_mode& (0+255),b
  8087  001EB4  D3AD               	goto	i2l5690
  8088  001EB6                     i2l416:
  8089                           
  8090                           ;main.c: 736: }
  8091                           ;main.c: 738: }
  8092                           ;main.c: 763: if (state == 0){
  8093                           
  8094                           ; BSR set to: 0
  8095                           
  8096                           ; BSR set to: 0
  8097  001EB6  0100               	movlb	0	; () banked
  8098  001EB8  51AC               	movf	_state& (0+255),w,b
  8099  001EBA  11AD               	iorwf	(_state+1)& (0+255),w,b
  8100  001EBC  A4D8               	btfss	status,2,c
  8101  001EBE  D0CD               	goto	i2l417
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;main.c: 765: if(temp == '4'){
  8105  001EC0  0E34               	movlw	52
  8106  001EC2  1841               	xorwf	interruptHandler@temp,w,c
  8107  001EC4  A4D8               	btfss	status,2,c
  8108  001EC6  D01F               	goto	i2l418
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;main.c: 766: assembly_step = 4;
  8112  001EC8  0E00               	movlw	0
  8113  001ECA  6FAB               	movwf	(_assembly_step+1)& (0+255),b
  8114  001ECC  0E04               	movlw	4
  8115  001ECE  6FAA               	movwf	_assembly_step& (0+255),b
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;main.c: 767: prev_state = state;
  8119  001ED0  C0AC  F067         	movff	_state,_prev_state
  8120  001ED4  C0AD  F068         	movff	_state+1,_prev_state+1
  8121                           
  8122                           ;main.c: 768: state = 1;
  8123  001ED8  0E00               	movlw	0
  8124  001EDA  6FAD               	movwf	(_state+1)& (0+255),b
  8125  001EDC  0E01               	movlw	1
  8126  001EDE  6FAC               	movwf	_state& (0+255),b
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;main.c: 769: lcdInst(0xC0);;
  8130  001EE0  0EC0               	movlw	192
  8131  001EE2  ECE8  F01E         	call	i2_lcdInst
  8132                           
  8133                           ;main.c: 770: putch(keys[keypress]);
  8134  001EE6  5040               	movf	interruptHandler@keypress,w,c
  8135  001EE8  0D01               	mullw	1
  8136  001EEA  0E19               	movlw	low _keys
  8137  001EEC  24F3               	addwf	prodl,w,c
  8138  001EEE  6EF6               	movwf	tblptrl,c
  8139  001EF0  0EFD               	movlw	high _keys
  8140  001EF2  20F4               	addwfc	prodh,w,c
  8141  001EF4  6EF7               	movwf	tblptrh,c
  8142  001EF6                     	if	1	;There are 3 active tblptr bytes
  8143  001EF6  6AF8               	clrf	tblptru,c
  8144  001EF8  0E00               	movlw	low (__mediumconst shr (0+16))
  8145  001EFA  22F8               	addwfc	tblptru,f,c
  8146  001EFC                     	endif
  8147  001EFC  0008               	tblrd		*
  8148  001EFE  50F5               	movf	tablat,w,c
  8149  001F00  ECDE  F01E         	call	i2_putch
  8150                           
  8151                           ;main.c: 772: }
  8152  001F04  D0A3               	goto	i2l427
  8153  001F06                     i2l418:
  8154                           
  8155                           ;main.c: 773: else if(temp == '5'){
  8156  001F06  0E35               	movlw	53
  8157  001F08  1841               	xorwf	interruptHandler@temp,w,c
  8158  001F0A  A4D8               	btfss	status,2,c
  8159  001F0C  D020               	goto	i2l420
  8160                           
  8161                           ;main.c: 774: assembly_step = 5;
  8162  001F0E  0E00               	movlw	0
  8163  001F10  0100               	movlb	0	; () banked
  8164  001F12  6FAB               	movwf	(_assembly_step+1)& (0+255),b
  8165  001F14  0E05               	movlw	5
  8166  001F16  6FAA               	movwf	_assembly_step& (0+255),b
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;main.c: 775: prev_state = state;
  8170  001F18  C0AC  F067         	movff	_state,_prev_state
  8171  001F1C  C0AD  F068         	movff	_state+1,_prev_state+1
  8172                           
  8173                           ;main.c: 776: state = 1;
  8174  001F20  0E00               	movlw	0
  8175  001F22  6FAD               	movwf	(_state+1)& (0+255),b
  8176  001F24  0E01               	movlw	1
  8177  001F26  6FAC               	movwf	_state& (0+255),b
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;main.c: 777: lcdInst(0xC0);;
  8181  001F28  0EC0               	movlw	192
  8182  001F2A  ECE8  F01E         	call	i2_lcdInst
  8183                           
  8184                           ;main.c: 778: putch(keys[keypress]);
  8185  001F2E  5040               	movf	interruptHandler@keypress,w,c
  8186  001F30  0D01               	mullw	1
  8187  001F32  0E19               	movlw	low _keys
  8188  001F34  24F3               	addwf	prodl,w,c
  8189  001F36  6EF6               	movwf	tblptrl,c
  8190  001F38  0EFD               	movlw	high _keys
  8191  001F3A  20F4               	addwfc	prodh,w,c
  8192  001F3C  6EF7               	movwf	tblptrh,c
  8193  001F3E                     	if	1	;There are 3 active tblptr bytes
  8194  001F3E  6AF8               	clrf	tblptru,c
  8195  001F40  0E00               	movlw	low (__mediumconst shr (0+16))
  8196  001F42  22F8               	addwfc	tblptru,f,c
  8197  001F44                     	endif
  8198  001F44  0008               	tblrd		*
  8199  001F46  50F5               	movf	tablat,w,c
  8200  001F48  ECDE  F01E         	call	i2_putch
  8201                           
  8202                           ;main.c: 780: }
  8203  001F4C  D07F               	goto	i2l427
  8204  001F4E                     i2l420:
  8205                           
  8206                           ;main.c: 781: else if (temp == '6') {
  8207  001F4E  0E36               	movlw	54
  8208  001F50  1841               	xorwf	interruptHandler@temp,w,c
  8209  001F52  A4D8               	btfss	status,2,c
  8210  001F54  D020               	goto	i2l422
  8211                           
  8212                           ;main.c: 782: assembly_step = 6;
  8213  001F56  0E00               	movlw	0
  8214  001F58  0100               	movlb	0	; () banked
  8215  001F5A  6FAB               	movwf	(_assembly_step+1)& (0+255),b
  8216  001F5C  0E06               	movlw	6
  8217  001F5E  6FAA               	movwf	_assembly_step& (0+255),b
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;main.c: 783: prev_state = state;
  8221  001F60  C0AC  F067         	movff	_state,_prev_state
  8222  001F64  C0AD  F068         	movff	_state+1,_prev_state+1
  8223                           
  8224                           ;main.c: 784: state = 1;
  8225  001F68  0E00               	movlw	0
  8226  001F6A  6FAD               	movwf	(_state+1)& (0+255),b
  8227  001F6C  0E01               	movlw	1
  8228  001F6E  6FAC               	movwf	_state& (0+255),b
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;main.c: 785: lcdInst(0xC0);;
  8232  001F70  0EC0               	movlw	192
  8233  001F72  ECE8  F01E         	call	i2_lcdInst
  8234                           
  8235                           ;main.c: 786: putch(keys[keypress]);
  8236  001F76  5040               	movf	interruptHandler@keypress,w,c
  8237  001F78  0D01               	mullw	1
  8238  001F7A  0E19               	movlw	low _keys
  8239  001F7C  24F3               	addwf	prodl,w,c
  8240  001F7E  6EF6               	movwf	tblptrl,c
  8241  001F80  0EFD               	movlw	high _keys
  8242  001F82  20F4               	addwfc	prodh,w,c
  8243  001F84  6EF7               	movwf	tblptrh,c
  8244  001F86                     	if	1	;There are 3 active tblptr bytes
  8245  001F86  6AF8               	clrf	tblptru,c
  8246  001F88  0E00               	movlw	low (__mediumconst shr (0+16))
  8247  001F8A  22F8               	addwfc	tblptru,f,c
  8248  001F8C                     	endif
  8249  001F8C  0008               	tblrd		*
  8250  001F8E  50F5               	movf	tablat,w,c
  8251  001F90  ECDE  F01E         	call	i2_putch
  8252                           
  8253                           ;main.c: 787: }
  8254  001F94  D05B               	goto	i2l427
  8255  001F96                     i2l422:
  8256                           
  8257                           ;main.c: 788: else if (temp == '7'){
  8258  001F96  0E37               	movlw	55
  8259  001F98  1841               	xorwf	interruptHandler@temp,w,c
  8260  001F9A  A4D8               	btfss	status,2,c
  8261  001F9C  D020               	goto	i2l424
  8262                           
  8263                           ;main.c: 789: assembly_step = 7;
  8264  001F9E  0E00               	movlw	0
  8265  001FA0  0100               	movlb	0	; () banked
  8266  001FA2  6FAB               	movwf	(_assembly_step+1)& (0+255),b
  8267  001FA4  0E07               	movlw	7
  8268  001FA6  6FAA               	movwf	_assembly_step& (0+255),b
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;main.c: 790: prev_state = state;
  8272  001FA8  C0AC  F067         	movff	_state,_prev_state
  8273  001FAC  C0AD  F068         	movff	_state+1,_prev_state+1
  8274                           
  8275                           ;main.c: 791: state = 1;
  8276  001FB0  0E00               	movlw	0
  8277  001FB2  6FAD               	movwf	(_state+1)& (0+255),b
  8278  001FB4  0E01               	movlw	1
  8279  001FB6  6FAC               	movwf	_state& (0+255),b
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;main.c: 792: lcdInst(0xC0);;
  8283  001FB8  0EC0               	movlw	192
  8284  001FBA  ECE8  F01E         	call	i2_lcdInst
  8285                           
  8286                           ;main.c: 793: putch(keys[keypress]);
  8287  001FBE  5040               	movf	interruptHandler@keypress,w,c
  8288  001FC0  0D01               	mullw	1
  8289  001FC2  0E19               	movlw	low _keys
  8290  001FC4  24F3               	addwf	prodl,w,c
  8291  001FC6  6EF6               	movwf	tblptrl,c
  8292  001FC8  0EFD               	movlw	high _keys
  8293  001FCA  20F4               	addwfc	prodh,w,c
  8294  001FCC  6EF7               	movwf	tblptrh,c
  8295  001FCE                     	if	1	;There are 3 active tblptr bytes
  8296  001FCE  6AF8               	clrf	tblptru,c
  8297  001FD0  0E00               	movlw	low (__mediumconst shr (0+16))
  8298  001FD2  22F8               	addwfc	tblptru,f,c
  8299  001FD4                     	endif
  8300  001FD4  0008               	tblrd		*
  8301  001FD6  50F5               	movf	tablat,w,c
  8302  001FD8  ECDE  F01E         	call	i2_putch
  8303                           
  8304                           ;main.c: 795: }
  8305  001FDC  D037               	goto	i2l427
  8306  001FDE                     i2l424:
  8307                           
  8308                           ;main.c: 796: else if (temp == '8'){
  8309  001FDE  0E38               	movlw	56
  8310  001FE0  1841               	xorwf	interruptHandler@temp,w,c
  8311  001FE2  A4D8               	btfss	status,2,c
  8312  001FE4  D020               	goto	i2l426
  8313                           
  8314                           ;main.c: 797: assembly_step = 8;
  8315  001FE6  0E00               	movlw	0
  8316  001FE8  0100               	movlb	0	; () banked
  8317  001FEA  6FAB               	movwf	(_assembly_step+1)& (0+255),b
  8318  001FEC  0E08               	movlw	8
  8319  001FEE  6FAA               	movwf	_assembly_step& (0+255),b
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;main.c: 798: prev_state = state;
  8323  001FF0  C0AC  F067         	movff	_state,_prev_state
  8324  001FF4  C0AD  F068         	movff	_state+1,_prev_state+1
  8325                           
  8326                           ;main.c: 799: state = 1;
  8327  001FF8  0E00               	movlw	0
  8328  001FFA  6FAD               	movwf	(_state+1)& (0+255),b
  8329  001FFC  0E01               	movlw	1
  8330  001FFE  6FAC               	movwf	_state& (0+255),b
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;main.c: 800: lcdInst(0xC0);;
  8334  002000  0EC0               	movlw	192
  8335  002002  ECE8  F01E         	call	i2_lcdInst
  8336                           
  8337                           ;main.c: 801: putch(keys[keypress]);
  8338  002006  5040               	movf	interruptHandler@keypress,w,c
  8339  002008  0D01               	mullw	1
  8340  00200A  0E19               	movlw	low _keys
  8341  00200C  24F3               	addwf	prodl,w,c
  8342  00200E  6EF6               	movwf	tblptrl,c
  8343  002010  0EFD               	movlw	high _keys
  8344  002012  20F4               	addwfc	prodh,w,c
  8345  002014  6EF7               	movwf	tblptrh,c
  8346  002016                     	if	1	;There are 3 active tblptr bytes
  8347  002016  6AF8               	clrf	tblptru,c
  8348  002018  0E00               	movlw	low (__mediumconst shr (0+16))
  8349  00201A  22F8               	addwfc	tblptru,f,c
  8350  00201C                     	endif
  8351  00201C  0008               	tblrd		*
  8352  00201E  50F5               	movf	tablat,w,c
  8353  002020  ECDE  F01E         	call	i2_putch
  8354                           
  8355                           ;main.c: 803: }
  8356  002024  D013               	goto	i2l427
  8357  002026                     i2l426:
  8358                           
  8359                           ;main.c: 804: else{
  8360                           ;main.c: 810: initLCD();
  8361  002026  EC4B  F01D         	call	i2_initLCD	;wreg free
  8362                           
  8363                           ;main.c: 811: printf("Wrong number! ");
  8364  00202A  0E95               	movlw	low STR_52
  8365  00202C  6E0D               	movwf	i2printf@f,c
  8366  00202E  0EFE               	movlw	high STR_52
  8367  002030  6E0E               	movwf	i2printf@f+1,c
  8368  002032  EC53  F015         	call	i2_printf	;wreg free
  8369                           
  8370                           ;main.c: 812: _delay((unsigned long)((1000)*(40000000/4000.0)));
  8371  002036  0E33               	movlw	51
  8372  002038  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8373  00203A  0EBB               	movlw	187
  8374  00203C  6E27               	movwf	??_interruptHandler& (0+255),c
  8375  00203E  0EE0               	movlw	224
  8376  002040                     i2u534_47:
  8377  002040  2EE8               	decfsz	wreg,f,c
  8378  002042  D7FE               	bra	i2u534_47
  8379  002044  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8380  002046  D7FC               	bra	i2u534_47
  8381  002048  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8382  00204A  D7FA               	bra	i2u534_47
  8383  00204C                     i2l427:
  8384                           
  8385                           ;main.c: 814: }
  8386                           ;main.c: 820: generate_compartment_array(assembly_step);
  8387  00204C  C0AA  F001         	movff	_assembly_step,generate_compartment_array@step
  8388  002050  C0AB  F002         	movff	_assembly_step+1,generate_compartment_array@step+1
  8389  002054  EC60  F017         	call	_generate_compartment_array	;wreg free
  8390  002058  D2DB               	goto	i2l5690
  8391  00205A                     i2l417:
  8392                           
  8393                           ;main.c: 827: }
  8394                           ;main.c: 835: if(state == 1){
  8395  00205A  0100               	movlb	0	; () banked
  8396  00205C  05AC               	decf	_state& (0+255),w,b
  8397  00205E  11AD               	iorwf	(_state+1)& (0+255),w,b
  8398  002060  A4D8               	btfss	status,2,c
  8399  002062  D19D               	goto	i2l428
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;main.c: 836: if (temp == 'A'){
  8403  002064  0E41               	movlw	65
  8404  002066  1841               	xorwf	interruptHandler@temp,w,c
  8405  002068  A4D8               	btfss	status,2,c
  8406  00206A  D004               	goto	i2l429
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;main.c: 837: state = prev_state;
  8410  00206C  C067  F0AC         	movff	_prev_state,_state
  8411  002070  C068  F0AD         	movff	_prev_state+1,_state+1
  8412  002074                     i2l429:
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;main.c: 838: }
  8416                           ;main.c: 840: if (temp == '1'){
  8417                           
  8418                           ; BSR set to: 0
  8419  002074  0E31               	movlw	49
  8420  002076  1841               	xorwf	interruptHandler@temp,w,c
  8421  002078  A4D8               	btfss	status,2,c
  8422  00207A  D01C               	goto	i2l430
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;main.c: 841: lcdInst(0xC0);;
  8426  00207C  0EC0               	movlw	192
  8427  00207E  ECE8  F01E         	call	i2_lcdInst
  8428                           
  8429                           ;main.c: 842: putch('B');
  8430  002082  0E42               	movlw	66
  8431  002084  ECDE  F01E         	call	i2_putch
  8432                           
  8433                           ;main.c: 843: strcpy(temp_set,"B");
  8434  002088  0EC2               	movlw	low _temp_set
  8435  00208A  6E07               	movwf	strcpy@to,c
  8436  00208C  0E01               	movlw	high _temp_set
  8437  00208E  6E08               	movwf	strcpy@to+1,c
  8438  002090  0EFD               	movlw	low STR_53
  8439  002092  6E09               	movwf	strcpy@from,c
  8440  002094  0EFF               	movlw	high STR_53
  8441  002096  6E0A               	movwf	strcpy@from+1,c
  8442  002098  EC96  F01D         	call	_strcpy	;wreg free
  8443                           
  8444                           ;main.c: 844: strcat(current_set,temp_set);
  8445  00209C  0EC3               	movlw	low _current_set
  8446  00209E  6E01               	movwf	strcat@to,c
  8447  0020A0  0E00               	movlw	high _current_set
  8448  0020A2  6E02               	movwf	strcat@to+1,c
  8449  0020A4  0EC2               	movlw	low _temp_set
  8450  0020A6  6E03               	movwf	strcat@from,c
  8451  0020A8  0E01               	movlw	high _temp_set
  8452  0020AA  6E04               	movwf	strcat@from+1,c
  8453  0020AC  ECFC  F01D         	call	_strcat	;wreg free
  8454                           
  8455                           ;main.c: 845: counter++;
  8456  0020B0  4A6F               	infsnz	_counter,f,c
  8457  0020B2  2A70               	incf	_counter+1,f,c
  8458  0020B4                     i2l430:
  8459                           
  8460                           ;main.c: 846: }
  8461                           ;main.c: 848: if(temp == '2'){
  8462  0020B4  0E32               	movlw	50
  8463  0020B6  1841               	xorwf	interruptHandler@temp,w,c
  8464  0020B8  A4D8               	btfss	status,2,c
  8465  0020BA  D01C               	goto	i2l431
  8466                           
  8467                           ;main.c: 849: lcdInst(0xC0);;
  8468  0020BC  0EC0               	movlw	192
  8469  0020BE  ECE8  F01E         	call	i2_lcdInst
  8470                           
  8471                           ;main.c: 850: putch('N');
  8472  0020C2  0E4E               	movlw	78
  8473  0020C4  ECDE  F01E         	call	i2_putch
  8474                           
  8475                           ;main.c: 851: strcpy(temp_set,"N");
  8476  0020C8  0EC2               	movlw	low _temp_set
  8477  0020CA  6E07               	movwf	strcpy@to,c
  8478  0020CC  0E01               	movlw	high _temp_set
  8479  0020CE  6E08               	movwf	strcpy@to+1,c
  8480  0020D0  0EDA               	movlw	low (STR_75+2)
  8481  0020D2  6E09               	movwf	strcpy@from,c
  8482  0020D4  0EFF               	movlw	high (STR_75+2)
  8483  0020D6  6E0A               	movwf	strcpy@from+1,c
  8484  0020D8  EC96  F01D         	call	_strcpy	;wreg free
  8485                           
  8486                           ;main.c: 852: strcat(current_set,temp_set);
  8487  0020DC  0EC3               	movlw	low _current_set
  8488  0020DE  6E01               	movwf	strcat@to,c
  8489  0020E0  0E00               	movlw	high _current_set
  8490  0020E2  6E02               	movwf	strcat@to+1,c
  8491  0020E4  0EC2               	movlw	low _temp_set
  8492  0020E6  6E03               	movwf	strcat@from,c
  8493  0020E8  0E01               	movlw	high _temp_set
  8494  0020EA  6E04               	movwf	strcat@from+1,c
  8495  0020EC  ECFC  F01D         	call	_strcat	;wreg free
  8496                           
  8497                           ;main.c: 853: counter++;
  8498  0020F0  4A6F               	infsnz	_counter,f,c
  8499  0020F2  2A70               	incf	_counter+1,f,c
  8500  0020F4                     i2l431:
  8501                           
  8502                           ;main.c: 854: }
  8503                           ;main.c: 856: if(temp == '3'){
  8504  0020F4  0E33               	movlw	51
  8505  0020F6  1841               	xorwf	interruptHandler@temp,w,c
  8506  0020F8  A4D8               	btfss	status,2,c
  8507  0020FA  D01C               	goto	i2l432
  8508                           
  8509                           ;main.c: 857: lcdInst(0xC0);;
  8510  0020FC  0EC0               	movlw	192
  8511  0020FE  ECE8  F01E         	call	i2_lcdInst
  8512                           
  8513                           ;main.c: 858: putch('S');
  8514  002102  0E53               	movlw	83
  8515  002104  ECDE  F01E         	call	i2_putch
  8516                           
  8517                           ;main.c: 860: strcpy(temp_set,"S");
  8518  002108  0EC2               	movlw	low _temp_set
  8519  00210A  6E07               	movwf	strcpy@to,c
  8520  00210C  0E01               	movlw	high _temp_set
  8521  00210E  6E08               	movwf	strcpy@to+1,c
  8522  002110  0EDE               	movlw	low (STR_76+2)
  8523  002112  6E09               	movwf	strcpy@from,c
  8524  002114  0EFF               	movlw	high (STR_76+2)
  8525  002116  6E0A               	movwf	strcpy@from+1,c
  8526  002118  EC96  F01D         	call	_strcpy	;wreg free
  8527                           
  8528                           ;main.c: 861: strcat(current_set,temp_set);
  8529  00211C  0EC3               	movlw	low _current_set
  8530  00211E  6E01               	movwf	strcat@to,c
  8531  002120  0E00               	movlw	high _current_set
  8532  002122  6E02               	movwf	strcat@to+1,c
  8533  002124  0EC2               	movlw	low _temp_set
  8534  002126  6E03               	movwf	strcat@from,c
  8535  002128  0E01               	movlw	high _temp_set
  8536  00212A  6E04               	movwf	strcat@from+1,c
  8537  00212C  ECFC  F01D         	call	_strcat	;wreg free
  8538                           
  8539                           ;main.c: 862: counter++;
  8540  002130  4A6F               	infsnz	_counter,f,c
  8541  002132  2A70               	incf	_counter+1,f,c
  8542  002134                     i2l432:
  8543                           
  8544                           ;main.c: 863: }
  8545                           ;main.c: 864: if (temp == '4'){
  8546  002134  0E34               	movlw	52
  8547  002136  1841               	xorwf	interruptHandler@temp,w,c
  8548  002138  A4D8               	btfss	status,2,c
  8549  00213A  D01C               	goto	i2l433
  8550                           
  8551                           ;main.c: 865: lcdInst(0xC0);;
  8552  00213C  0EC0               	movlw	192
  8553  00213E  ECE8  F01E         	call	i2_lcdInst
  8554                           
  8555                           ;main.c: 866: putch('W');
  8556  002142  0E57               	movlw	87
  8557  002144  ECDE  F01E         	call	i2_putch
  8558                           
  8559                           ;main.c: 868: strcpy(temp_set,"W");
  8560  002148  0EC2               	movlw	low _temp_set
  8561  00214A  6E07               	movwf	strcpy@to,c
  8562  00214C  0E01               	movlw	high _temp_set
  8563  00214E  6E08               	movwf	strcpy@to+1,c
  8564  002150  0EE2               	movlw	low (STR_77+2)
  8565  002152  6E09               	movwf	strcpy@from,c
  8566  002154  0EFF               	movlw	high (STR_77+2)
  8567  002156  6E0A               	movwf	strcpy@from+1,c
  8568  002158  EC96  F01D         	call	_strcpy	;wreg free
  8569                           
  8570                           ;main.c: 869: strcat(current_set,temp_set);
  8571  00215C  0EC3               	movlw	low _current_set
  8572  00215E  6E01               	movwf	strcat@to,c
  8573  002160  0E00               	movlw	high _current_set
  8574  002162  6E02               	movwf	strcat@to+1,c
  8575  002164  0EC2               	movlw	low _temp_set
  8576  002166  6E03               	movwf	strcat@from,c
  8577  002168  0E01               	movlw	high _temp_set
  8578  00216A  6E04               	movwf	strcat@from+1,c
  8579  00216C  ECFC  F01D         	call	_strcat	;wreg free
  8580                           
  8581                           ;main.c: 871: counter++;
  8582  002170  4A6F               	infsnz	_counter,f,c
  8583  002172  2A70               	incf	_counter+1,f,c
  8584  002174                     i2l433:
  8585                           
  8586                           ;main.c: 872: }
  8587                           ;main.c: 874: if (keys[keypress] == '*'){
  8588  002174  5040               	movf	interruptHandler@keypress,w,c
  8589  002176  0D01               	mullw	1
  8590  002178  0E19               	movlw	low _keys
  8591  00217A  24F3               	addwf	prodl,w,c
  8592  00217C  6EF6               	movwf	tblptrl,c
  8593  00217E  0EFD               	movlw	high _keys
  8594  002180  20F4               	addwfc	prodh,w,c
  8595  002182  6EF7               	movwf	tblptrh,c
  8596  002184                     	if	1	;There are 3 active tblptr bytes
  8597  002184  6AF8               	clrf	tblptru,c
  8598  002186  0E00               	movlw	low (__mediumconst shr (0+16))
  8599  002188  22F8               	addwfc	tblptru,f,c
  8600  00218A                     	endif
  8601  00218A  0008               	tblrd		*
  8602  00218C  50F5               	movf	tablat,w,c
  8603  00218E  0A2A               	xorlw	42
  8604  002190  A4D8               	btfss	status,2,c
  8605  002192  D0DA               	goto	i2l434
  8606                           
  8607                           ;main.c: 877: _delay((unsigned long)((500)*(40000000/4000.0)));
  8608  002194  0E1A               	movlw	26
  8609  002196  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8610  002198  0E5E               	movlw	94
  8611  00219A  6E27               	movwf	??_interruptHandler& (0+255),c
  8612  00219C  0E6E               	movlw	110
  8613  00219E                     i2u535_47:
  8614  00219E  2EE8               	decfsz	wreg,f,c
  8615  0021A0  D7FE               	bra	i2u535_47
  8616  0021A2  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8617  0021A4  D7FC               	bra	i2u535_47
  8618  0021A6  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8619  0021A8  D7FA               	bra	i2u535_47
  8620  0021AA  D000               	nop2	
  8621                           
  8622                           ;main.c: 878: counter ++;
  8623  0021AC  4A6F               	infsnz	_counter,f,c
  8624  0021AE  2A70               	incf	_counter+1,f,c
  8625                           
  8626                           ;main.c: 879: for (int i=0;i<20;i++){
  8627  0021B0  0E00               	movlw	0
  8628  0021B2  6E3F               	movwf	interruptHandler@i+1,c
  8629  0021B4  0E00               	movlw	0
  8630  0021B6  6E3E               	movwf	interruptHandler@i,c
  8631  0021B8  BE3F               	btfsc	interruptHandler@i+1,7,c
  8632  0021BA  D008               	goto	i2l435
  8633  0021BC  503F               	movf	interruptHandler@i+1,w,c
  8634  0021BE  E105               	bnz	i2u448_40
  8635  0021C0  0E14               	movlw	20
  8636  0021C2  5C3E               	subwf	interruptHandler@i,w,c
  8637  0021C4  B0D8               	btfsc	status,0,c
  8638  0021C6  D089               	goto	i2u450_40
  8639  0021C8  D001               	goto	i2l435
  8640  0021CA                     i2u448_40:
  8641  0021CA  D087               	goto	i2u450_40
  8642  0021CC                     i2l435:
  8643                           
  8644                           ;main.c: 880: if (strncmp(current_set,strs[i],4) == 0){
  8645  0021CC  0EC3               	movlw	low _current_set
  8646  0021CE  6E07               	movwf	strncmp@s1,c
  8647  0021D0  0E00               	movlw	high _current_set
  8648  0021D2  6E08               	movwf	strncmp@s1+1,c
  8649  0021D4  C03E  F001         	movff	interruptHandler@i,i2___wmul@multiplier
  8650  0021D8  C03F  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
  8651  0021DC  0E00               	movlw	0
  8652  0021DE  6E04               	movwf	i2___wmul@multiplicand+1,c
  8653  0021E0  0E05               	movlw	5
  8654  0021E2  6E03               	movwf	i2___wmul@multiplicand,c
  8655  0021E4  EC77  F01E         	call	i2___wmul	;wreg free
  8656  0021E8  0E4C               	movlw	low _strs
  8657  0021EA  2401               	addwf	?i2___wmul,w,c
  8658  0021EC  6E09               	movwf	strncmp@s2,c
  8659  0021EE  0EFD               	movlw	high _strs
  8660  0021F0  2002               	addwfc	?i2___wmul+1,w,c
  8661  0021F2  6E0A               	movwf	strncmp@s2+1,c
  8662  0021F4  0E00               	movlw	0
  8663  0021F6  6E0C               	movwf	strncmp@len+1,c
  8664  0021F8  0E04               	movlw	4
  8665  0021FA  6E0B               	movwf	strncmp@len,c
  8666  0021FC  EC37  F01B         	call	_strncmp	;wreg free
  8667  002200  5007               	movf	?_strncmp,w,c
  8668  002202  1008               	iorwf	?_strncmp+1,w,c
  8669  002204  A4D8               	btfss	status,2,c
  8670  002206  D062               	goto	i2l437
  8671                           
  8672                           ;main.c: 881: strcpy(final_set[counter_step],current_set);
  8673  002208  C06D  F001         	movff	_counter_step,i2___wmul@multiplier
  8674  00220C  C06E  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
  8675  002210  0E00               	movlw	0
  8676  002212  6E04               	movwf	i2___wmul@multiplicand+1,c
  8677  002214  0E05               	movlw	5
  8678  002216  6E03               	movwf	i2___wmul@multiplicand,c
  8679  002218  EC77  F01E         	call	i2___wmul	;wreg free
  8680  00221C  0E9A               	movlw	low _final_set
  8681  00221E  2401               	addwf	?i2___wmul,w,c
  8682  002220  6E07               	movwf	strcpy@to,c
  8683  002222  0E01               	movlw	high _final_set
  8684  002224  2002               	addwfc	?i2___wmul+1,w,c
  8685  002226  6E08               	movwf	strcpy@to+1,c
  8686  002228  0EC3               	movlw	low _current_set
  8687  00222A  6E09               	movwf	strcpy@from,c
  8688  00222C  0E00               	movlw	high _current_set
  8689  00222E  6E0A               	movwf	strcpy@from+1,c
  8690  002230  EC96  F01D         	call	_strcpy	;wreg free
  8691                           
  8692                           ;main.c: 882: strcpy(current_set2,current_set);
  8693  002234  0E78               	movlw	low _current_set2
  8694  002236  6E07               	movwf	strcpy@to,c
  8695  002238  0E00               	movlw	high _current_set2
  8696  00223A  6E08               	movwf	strcpy@to+1,c
  8697  00223C  0EC3               	movlw	low _current_set
  8698  00223E  6E09               	movwf	strcpy@from,c
  8699  002240  0E00               	movlw	high _current_set
  8700  002242  6E0A               	movwf	strcpy@from+1,c
  8701  002244  EC96  F01D         	call	_strcpy	;wreg free
  8702                           
  8703                           ;main.c: 885: valid = 1;
  8704  002248  0E00               	movlw	0
  8705  00224A  6E6C               	movwf	_valid+1,c
  8706  00224C  0E01               	movlw	1
  8707  00224E  6E6B               	movwf	_valid,c
  8708                           
  8709                           ;main.c: 886: state = 2;
  8710  002250  0E00               	movlw	0
  8711  002252  0100               	movlb	0	; () banked
  8712  002254  6FAD               	movwf	(_state+1)& (0+255),b
  8713  002256  0E02               	movlw	2
  8714  002258  6FAC               	movwf	_state& (0+255),b
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;main.c: 888: initLCD();
  8718  00225A  EC4B  F01D         	call	i2_initLCD	;wreg free
  8719                           
  8720                           ;main.c: 889: printf("correct!");
  8721  00225E  0E82               	movlw	low STR_57
  8722  002260  6E0D               	movwf	i2printf@f,c
  8723  002262  0EFF               	movlw	high STR_57
  8724  002264  6E0E               	movwf	i2printf@f+1,c
  8725  002266  EC53  F015         	call	i2_printf	;wreg free
  8726                           
  8727                           ;main.c: 890: _delay((unsigned long)((500)*(40000000/4000.0)));
  8728  00226A  0E1A               	movlw	26
  8729  00226C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8730  00226E  0E5E               	movlw	94
  8731  002270  6E27               	movwf	??_interruptHandler& (0+255),c
  8732  002272  0E6E               	movlw	110
  8733  002274                     i2u536_47:
  8734  002274  2EE8               	decfsz	wreg,f,c
  8735  002276  D7FE               	bra	i2u536_47
  8736  002278  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8737  00227A  D7FC               	bra	i2u536_47
  8738  00227C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8739  00227E  D7FA               	bra	i2u536_47
  8740  002280  D000               	nop2	
  8741                           
  8742                           ;main.c: 892: printf("%s",current_set);
  8743  002282  0EF8               	movlw	low STR_5
  8744  002284  6E0D               	movwf	i2printf@f,c
  8745  002286  0EFF               	movlw	high STR_5
  8746  002288  6E0E               	movwf	i2printf@f+1,c
  8747  00228A  0EC3               	movlw	low _current_set
  8748  00228C  6E0F               	movwf	?i2_printf+2,c
  8749  00228E  0E00               	movlw	high _current_set
  8750  002290  6E10               	movwf	?i2_printf+3,c
  8751  002292  EC53  F015         	call	i2_printf	;wreg free
  8752                           
  8753                           ;main.c: 894: strcpy(current_set,"");
  8754  002296  0EC3               	movlw	low _current_set
  8755  002298  6E07               	movwf	strcpy@to,c
  8756  00229A  0E00               	movlw	high _current_set
  8757  00229C  6E08               	movwf	strcpy@to+1,c
  8758  00229E  0EA3               	movlw	low (STR_52+14)
  8759  0022A0  6E09               	movwf	strcpy@from,c
  8760  0022A2  0EFE               	movlw	high (STR_52+14)
  8761  0022A4  6E0A               	movwf	strcpy@from+1,c
  8762  0022A6  EC96  F01D         	call	_strcpy	;wreg free
  8763                           
  8764                           ;main.c: 895: _delay((unsigned long)((500)*(40000000/4000.0)));
  8765  0022AA  0E1A               	movlw	26
  8766  0022AC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8767  0022AE  0E5E               	movlw	94
  8768  0022B0  6E27               	movwf	??_interruptHandler& (0+255),c
  8769  0022B2  0E6E               	movlw	110
  8770  0022B4                     i2u537_47:
  8771  0022B4  2EE8               	decfsz	wreg,f,c
  8772  0022B6  D7FE               	bra	i2u537_47
  8773  0022B8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8774  0022BA  D7FC               	bra	i2u537_47
  8775  0022BC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8776  0022BE  D7FA               	bra	i2u537_47
  8777  0022C0  D000               	nop2	
  8778                           
  8779                           ;main.c: 896: counter = 0;
  8780  0022C2  0E00               	movlw	0
  8781  0022C4  6E70               	movwf	_counter+1,c
  8782  0022C6  0E00               	movlw	0
  8783  0022C8  6E6F               	movwf	_counter,c
  8784                           
  8785                           ;main.c: 897: break;
  8786  0022CA  D007               	goto	i2u450_40
  8787  0022CC                     i2l437:
  8788  0022CC  4A3E               	infsnz	interruptHandler@i,f,c
  8789  0022CE  2A3F               	incf	interruptHandler@i+1,f,c
  8790  0022D0  BE3F               	btfsc	interruptHandler@i+1,7,c
  8791  0022D2  D77C               	goto	i2l435
  8792  0022D4  503F               	movf	interruptHandler@i+1,w,c
  8793  0022D6  E101               	bnz	i2l5578
  8794  0022D8  D773               	goto	L4
  8795  0022DA                     i2u450_40:
  8796  0022DA                     i2l5578:
  8797                           
  8798                           ;main.c: 899: }
  8799                           ;main.c: 900: }
  8800                           ;main.c: 901: if (valid != 1){
  8801  0022DA  046B               	decf	_valid,w,c
  8802  0022DC  106C               	iorwf	_valid+1,w,c
  8803  0022DE  B4D8               	btfsc	status,2,c
  8804  0022E0  D02F               	goto	i2l438
  8805                           
  8806                           ;main.c: 903: initLCD();
  8807  0022E2  EC4B  F01D         	call	i2_initLCD	;wreg free
  8808                           
  8809                           ;main.c: 904: printf("wrong set!");
  8810  0022E6  0E62               	movlw	low STR_60
  8811  0022E8  6E0D               	movwf	i2printf@f,c
  8812  0022EA  0EFF               	movlw	high STR_60
  8813  0022EC  6E0E               	movwf	i2printf@f+1,c
  8814  0022EE  EC53  F015         	call	i2_printf	;wreg free
  8815                           
  8816                           ;main.c: 905: printf("%s",current_set);
  8817  0022F2  0EF8               	movlw	low STR_5
  8818  0022F4  6E0D               	movwf	i2printf@f,c
  8819  0022F6  0EFF               	movlw	high STR_5
  8820  0022F8  6E0E               	movwf	i2printf@f+1,c
  8821  0022FA  0EC3               	movlw	low _current_set
  8822  0022FC  6E0F               	movwf	?i2_printf+2,c
  8823  0022FE  0E00               	movlw	high _current_set
  8824  002300  6E10               	movwf	?i2_printf+3,c
  8825  002302  EC53  F015         	call	i2_printf	;wreg free
  8826                           
  8827                           ;main.c: 906: strcpy(current_set,"");
  8828  002306  0EC3               	movlw	low _current_set
  8829  002308  6E07               	movwf	strcpy@to,c
  8830  00230A  0E00               	movlw	high _current_set
  8831  00230C  6E08               	movwf	strcpy@to+1,c
  8832  00230E  0EA3               	movlw	low (STR_52+14)
  8833  002310  6E09               	movwf	strcpy@from,c
  8834  002312  0EFE               	movlw	high (STR_52+14)
  8835  002314  6E0A               	movwf	strcpy@from+1,c
  8836  002316  EC96  F01D         	call	_strcpy	;wreg free
  8837                           
  8838                           ;main.c: 907: _delay((unsigned long)((300)*(40000000/4000.0)));
  8839  00231A  0E10               	movlw	16
  8840  00231C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8841  00231E  0E39               	movlw	57
  8842  002320  6E27               	movwf	??_interruptHandler& (0+255),c
  8843  002322  0E0E               	movlw	14
  8844  002324                     i2u538_47:
  8845  002324  2EE8               	decfsz	wreg,f,c
  8846  002326  D7FE               	bra	i2u538_47
  8847  002328  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8848  00232A  D7FC               	bra	i2u538_47
  8849  00232C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8850  00232E  D7FA               	bra	i2u538_47
  8851                           
  8852                           ;main.c: 908: counter = 0;
  8853  002330  0E00               	movlw	0
  8854  002332  6E70               	movwf	_counter+1,c
  8855  002334  0E00               	movlw	0
  8856  002336  6E6F               	movwf	_counter,c
  8857                           
  8858                           ;main.c: 909: valid = 0;
  8859  002338  0E00               	movlw	0
  8860  00233A  6E6C               	movwf	_valid+1,c
  8861  00233C  0E00               	movlw	0
  8862  00233E  6E6B               	movwf	_valid,c
  8863  002340                     i2l438:
  8864                           
  8865                           ;main.c: 910: }
  8866                           ;main.c: 911: valid = 0;
  8867  002340  0E00               	movlw	0
  8868  002342  6E6C               	movwf	_valid+1,c
  8869  002344  0E00               	movlw	0
  8870  002346  6E6B               	movwf	_valid,c
  8871  002348                     i2l434:
  8872                           
  8873                           ;main.c: 913: }
  8874                           ;main.c: 916: if (counter >= 5){
  8875  002348  BE70               	btfsc	_counter+1,7,c
  8876  00234A  D162               	goto	i2l5690
  8877  00234C  5070               	movf	_counter+1,w,c
  8878  00234E  E104               	bnz	i2u452_40
  8879  002350  0E05               	movlw	5
  8880  002352  5C6F               	subwf	_counter,w,c
  8881  002354  A0D8               	btfss	status,0,c
  8882  002356  D15C               	goto	i2l5690
  8883  002358                     i2u452_40:
  8884                           
  8885                           ;main.c: 918: initLCD();
  8886  002358  EC4B  F01D         	call	i2_initLCD	;wreg free
  8887                           
  8888                           ;main.c: 919: printf("wrong!");
  8889  00235C  0EA3               	movlw	low STR_63
  8890  00235E  6E0D               	movwf	i2printf@f,c
  8891  002360  0EFF               	movlw	high STR_63
  8892  002362  6E0E               	movwf	i2printf@f+1,c
  8893  002364  EC53  F015         	call	i2_printf	;wreg free
  8894                           
  8895                           ;main.c: 921: _delay((unsigned long)((500)*(40000000/4000.0)));
  8896  002368  0E1A               	movlw	26
  8897  00236A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8898  00236C  0E5E               	movlw	94
  8899  00236E  6E27               	movwf	??_interruptHandler& (0+255),c
  8900  002370  0E6E               	movlw	110
  8901  002372                     i2u539_47:
  8902  002372  2EE8               	decfsz	wreg,f,c
  8903  002374  D7FE               	bra	i2u539_47
  8904  002376  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8905  002378  D7FC               	bra	i2u539_47
  8906  00237A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8907  00237C  D7FA               	bra	i2u539_47
  8908  00237E  D000               	nop2	
  8909                           
  8910                           ;main.c: 923: strcpy(current_set,"");
  8911  002380  0EC3               	movlw	low _current_set
  8912  002382  6E07               	movwf	strcpy@to,c
  8913  002384  0E00               	movlw	high _current_set
  8914  002386  6E08               	movwf	strcpy@to+1,c
  8915  002388  0EA3               	movlw	low (STR_52+14)
  8916  00238A  6E09               	movwf	strcpy@from,c
  8917  00238C  0EFE               	movlw	high (STR_52+14)
  8918  00238E  6E0A               	movwf	strcpy@from+1,c
  8919  002390  EC96  F01D         	call	_strcpy	;wreg free
  8920                           
  8921                           ;main.c: 926: counter = 0;
  8922  002394  0E00               	movlw	0
  8923  002396  6E70               	movwf	_counter+1,c
  8924  002398  0E00               	movlw	0
  8925  00239A  6E6F               	movwf	_counter,c
  8926  00239C  D139               	goto	i2l5690
  8927  00239E                     i2l428:
  8928                           
  8929                           ;main.c: 931: }
  8930                           ;main.c: 936: if (state ==2){
  8931  00239E  0E02               	movlw	2
  8932  0023A0  0100               	movlb	0	; () banked
  8933  0023A2  19AC               	xorwf	_state& (0+255),w,b
  8934  0023A4  11AD               	iorwf	(_state+1)& (0+255),w,b
  8935  0023A6  A4D8               	btfss	status,2,c
  8936  0023A8  D11F               	goto	i2l456
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;main.c: 937: counter = 0;
  8940  0023AA  0E00               	movlw	0
  8941  0023AC  6E70               	movwf	_counter+1,c
  8942  0023AE  0E00               	movlw	0
  8943  0023B0  6E6F               	movwf	_counter,c
  8944                           
  8945                           ; BSR set to: 0
  8946                           ;main.c: 939: lcdInst(0xC0);;
  8947  0023B2  0EC0               	movlw	192
  8948  0023B4  ECE8  F01E         	call	i2_lcdInst
  8949                           
  8950                           ;main.c: 940: putch(keys[keypress]);
  8951  0023B8  5040               	movf	interruptHandler@keypress,w,c
  8952  0023BA  0D01               	mullw	1
  8953  0023BC  0E19               	movlw	low _keys
  8954  0023BE  24F3               	addwf	prodl,w,c
  8955  0023C0  6EF6               	movwf	tblptrl,c
  8956  0023C2  0EFD               	movlw	high _keys
  8957  0023C4  20F4               	addwfc	prodh,w,c
  8958  0023C6  6EF7               	movwf	tblptrh,c
  8959  0023C8                     	if	1	;There are 3 active tblptr bytes
  8960  0023C8  6AF8               	clrf	tblptru,c
  8961  0023CA  0E00               	movlw	low (__mediumconst shr (0+16))
  8962  0023CC  22F8               	addwfc	tblptru,f,c
  8963  0023CE                     	endif
  8964  0023CE  0008               	tblrd		*
  8965  0023D0  50F5               	movf	tablat,w,c
  8966  0023D2  ECDE  F01E         	call	i2_putch
  8967                           
  8968                           ;main.c: 942: _delay((unsigned long)((500)*(40000000/4000.0)));
  8969  0023D6  0E1A               	movlw	26
  8970  0023D8  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  8971  0023DA  0E5E               	movlw	94
  8972  0023DC  6E27               	movwf	??_interruptHandler& (0+255),c
  8973  0023DE  0E6E               	movlw	110
  8974  0023E0                     i2u540_47:
  8975  0023E0  2EE8               	decfsz	wreg,f,c
  8976  0023E2  D7FE               	bra	i2u540_47
  8977  0023E4  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  8978  0023E6  D7FC               	bra	i2u540_47
  8979  0023E8  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  8980  0023EA  D7FA               	bra	i2u540_47
  8981  0023EC  D000               	nop2	
  8982                           
  8983                           ;main.c: 944: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
  8984  0023EE  5040               	movf	interruptHandler@keypress,w,c
  8985  0023F0  0D01               	mullw	1
  8986  0023F2  0E19               	movlw	low _keys
  8987  0023F4  24F3               	addwf	prodl,w,c
  8988  0023F6  6EF6               	movwf	tblptrl,c
  8989  0023F8  0EFD               	movlw	high _keys
  8990  0023FA  20F4               	addwfc	prodh,w,c
  8991  0023FC  6EF7               	movwf	tblptrh,c
  8992  0023FE                     	if	1	;There are 3 active tblptr bytes
  8993  0023FE  6AF8               	clrf	tblptru,c
  8994  002400  0E00               	movlw	low (__mediumconst shr (0+16))
  8995  002402  22F8               	addwfc	tblptru,f,c
  8996  002404                     	endif
  8997  002404  0008               	tblrd		*
  8998  002406  50F5               	movf	tablat,w,c
  8999  002408  0A31               	xorlw	49
  9000  00240A  B4D8               	btfsc	status,2,c
  9001  00240C  D05A               	goto	i2l444
  9002  00240E  5040               	movf	interruptHandler@keypress,w,c
  9003  002410  0D01               	mullw	1
  9004  002412  0E19               	movlw	low _keys
  9005  002414  24F3               	addwf	prodl,w,c
  9006  002416  6EF6               	movwf	tblptrl,c
  9007  002418  0EFD               	movlw	high _keys
  9008  00241A  20F4               	addwfc	prodh,w,c
  9009  00241C  6EF7               	movwf	tblptrh,c
  9010  00241E                     	if	1	;There are 3 active tblptr bytes
  9011  00241E  6AF8               	clrf	tblptru,c
  9012  002420  0E00               	movlw	low (__mediumconst shr (0+16))
  9013  002422  22F8               	addwfc	tblptru,f,c
  9014  002424                     	endif
  9015  002424  0008               	tblrd		*
  9016  002426  50F5               	movf	tablat,w,c
  9017  002428  0A32               	xorlw	50
  9018  00242A  B4D8               	btfsc	status,2,c
  9019  00242C  D04A               	goto	i2l444
  9020  00242E  5040               	movf	interruptHandler@keypress,w,c
  9021  002430  0D01               	mullw	1
  9022  002432  0E19               	movlw	low _keys
  9023  002434  24F3               	addwf	prodl,w,c
  9024  002436  6EF6               	movwf	tblptrl,c
  9025  002438  0EFD               	movlw	high _keys
  9026  00243A  20F4               	addwfc	prodh,w,c
  9027  00243C  6EF7               	movwf	tblptrh,c
  9028  00243E                     	if	1	;There are 3 active tblptr bytes
  9029  00243E  6AF8               	clrf	tblptru,c
  9030  002440  0E00               	movlw	low (__mediumconst shr (0+16))
  9031  002442  22F8               	addwfc	tblptru,f,c
  9032  002444                     	endif
  9033  002444  0008               	tblrd		*
  9034  002446  50F5               	movf	tablat,w,c
  9035  002448  0A33               	xorlw	51
  9036  00244A  B4D8               	btfsc	status,2,c
  9037  00244C  D03A               	goto	i2l444
  9038  00244E  5040               	movf	interruptHandler@keypress,w,c
  9039  002450  0D01               	mullw	1
  9040  002452  0E19               	movlw	low _keys
  9041  002454  24F3               	addwf	prodl,w,c
  9042  002456  6EF6               	movwf	tblptrl,c
  9043  002458  0EFD               	movlw	high _keys
  9044  00245A  20F4               	addwfc	prodh,w,c
  9045  00245C  6EF7               	movwf	tblptrh,c
  9046  00245E                     	if	1	;There are 3 active tblptr bytes
  9047  00245E  6AF8               	clrf	tblptru,c
  9048  002460  0E00               	movlw	low (__mediumconst shr (0+16))
  9049  002462  22F8               	addwfc	tblptru,f,c
  9050  002464                     	endif
  9051  002464  0008               	tblrd		*
  9052  002466  50F5               	movf	tablat,w,c
  9053  002468  0A34               	xorlw	52
  9054  00246A  B4D8               	btfsc	status,2,c
  9055  00246C  D02A               	goto	i2l444
  9056  00246E  D0BC               	goto	i2l456
  9057  002470                     
  9058                           ;main.c: 948: number = 1;
  9059  002470  0E00               	movlw	0
  9060  002472  6E7E               	movwf	_number+1,c
  9061  002474  0E01               	movlw	1
  9062  002476  D00F               	goto	L8
  9063  002478                     
  9064                           ;main.c: 951: number = 2;
  9065  002478  0E00               	movlw	0
  9066  00247A  6E7E               	movwf	_number+1,c
  9067  00247C  0E02               	movlw	2
  9068  00247E  D00B               	goto	L8
  9069  002480                     
  9070                           ;main.c: 954: number = 3;
  9071  002480  0E00               	movlw	0
  9072  002482  6E7E               	movwf	_number+1,c
  9073  002484  0E03               	movlw	3
  9074  002486  D007               	goto	L8
  9075  002488                     
  9076                           ;main.c: 957: number = 4;
  9077  002488  0E00               	movlw	0
  9078  00248A  6E7E               	movwf	_number+1,c
  9079  00248C  0E04               	movlw	4
  9080  00248E  D003               	goto	L8
  9081  002490                     
  9082                           ;main.c: 960: number = 5;
  9083  002490  0E00               	movlw	0
  9084  002492  6E7E               	movwf	_number+1,c
  9085  002494  0E05               	movlw	5
  9086  002496                     L8:
  9087  002496  6E7D               	movwf	_number,c
  9088                           
  9089                           ;main.c: 961: break;
  9090  002498  D031               	goto	i2l446
  9091  00249A                     
  9092                           ;main.c: 963: initLCD();
  9093  00249A  EC4B  F01D         	call	i2_initLCD	;wreg free
  9094                           
  9095                           ;main.c: 964: printf("Wrong input");
  9096  00249E  0E56               	movlw	low STR_65
  9097  0024A0  6E0D               	movwf	i2printf@f,c
  9098  0024A2  0EFF               	movlw	high STR_65
  9099  0024A4  6E0E               	movwf	i2printf@f+1,c
  9100  0024A6  EC53  F015         	call	i2_printf	;wreg free
  9101                           
  9102                           ;main.c: 965: _delay((unsigned long)((1000)*(40000000/4000.0)));
  9103  0024AA  0E33               	movlw	51
  9104  0024AC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  9105  0024AE  0EBB               	movlw	187
  9106  0024B0  6E27               	movwf	??_interruptHandler& (0+255),c
  9107  0024B2  0EE0               	movlw	224
  9108  0024B4                     i2u541_47:
  9109  0024B4  2EE8               	decfsz	wreg,f,c
  9110  0024B6  D7FE               	bra	i2u541_47
  9111  0024B8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9112  0024BA  D7FC               	bra	i2u541_47
  9113  0024BC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9114  0024BE  D7FA               	bra	i2u541_47
  9115                           
  9116                           ;main.c: 966: }
  9117  0024C0  D01D               	goto	i2l446
  9118  0024C2                     i2l444:
  9119  0024C2  5040               	movf	interruptHandler@keypress,w,c
  9120  0024C4  0D01               	mullw	1
  9121  0024C6  0E19               	movlw	low _keys
  9122  0024C8  24F3               	addwf	prodl,w,c
  9123  0024CA  6EF6               	movwf	tblptrl,c
  9124  0024CC  0EFD               	movlw	high _keys
  9125  0024CE  20F4               	addwfc	prodh,w,c
  9126  0024D0  6EF7               	movwf	tblptrh,c
  9127  0024D2                     	if	1	;There are 3 active tblptr bytes
  9128  0024D2  6AF8               	clrf	tblptru,c
  9129  0024D4  0E00               	movlw	low (__mediumconst shr (0+16))
  9130  0024D6  22F8               	addwfc	tblptru,f,c
  9131  0024D8                     	endif
  9132  0024D8  0008               	tblrd		*
  9133  0024DA  50F5               	movf	tablat,w,c
  9134                           
  9135                           ; Switch size 1, requested type "space"
  9136                           ; Number of cases is 5, Range of values is 49 to 53
  9137                           ; switch strategies available:
  9138                           ; Name         Instructions Cycles
  9139                           ; simple_byte           16     9 (average)
  9140                           ;	Chosen strategy is simple_byte
  9141  0024DC  0A31               	xorlw	49	; case 49
  9142  0024DE  B4D8               	btfsc	status,2,c
  9143  0024E0  D7C7               	goto	i2l445
  9144  0024E2  0A03               	xorlw	3	; case 50
  9145  0024E4  B4D8               	btfsc	status,2,c
  9146  0024E6  D7C8               	goto	i2l447
  9147  0024E8  0A01               	xorlw	1	; case 51
  9148  0024EA  B4D8               	btfsc	status,2,c
  9149  0024EC  D7C9               	goto	i2l448
  9150  0024EE  0A07               	xorlw	7	; case 52
  9151  0024F0  B4D8               	btfsc	status,2,c
  9152  0024F2  D7CA               	goto	i2l449
  9153  0024F4  0A01               	xorlw	1	; case 53
  9154  0024F6  B4D8               	btfsc	status,2,c
  9155  0024F8  D7CB               	goto	i2l450
  9156  0024FA  D7CF               	goto	i2l451
  9157  0024FC                     i2l446:
  9158                           
  9159                           ;main.c: 969: is_valid();
  9160  0024FC  EC09  F000         	call	_is_valid	;wreg free
  9161                           
  9162                           ;main.c: 971: if ( check() == 0){
  9163  002500  EC72  F01C         	call	_check	;wreg free
  9164  002504  5001               	movf	?_check,w,c
  9165  002506  1002               	iorwf	?_check+1,w,c
  9166  002508  A4D8               	btfss	status,2,c
  9167  00250A  D029               	goto	i2l452
  9168                           
  9169                           ;main.c: 972: initLCD();
  9170  00250C  EC4B  F01D         	call	i2_initLCD	;wreg free
  9171                           
  9172                           ;main.c: 973: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9173  002510  0E80               	movlw	128
  9174  002512  ECE8  F01E         	call	i2_lcdInst
  9175  002516  0E41               	movlw	65
  9176  002518  6E27               	movwf	??_interruptHandler& (0+255),c
  9177  00251A  0EEE               	movlw	238
  9178  00251C                     i2u542_47:
  9179  00251C  2EE8               	decfsz	wreg,f,c
  9180  00251E  D7FE               	bra	i2u542_47
  9181  002520  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9182  002522  D7FC               	bra	i2u542_47
  9183  002524  D000               	nop2	
  9184                           
  9185                           ;main.c: 974: printf("TOO MANY");
  9186  002526  0E8B               	movlw	low STR_66
  9187  002528  6E0D               	movwf	i2printf@f,c
  9188  00252A  0EFF               	movlw	high STR_66
  9189  00252C  6E0E               	movwf	i2printf@f+1,c
  9190  00252E  EC53  F015         	call	i2_printf	;wreg free
  9191                           
  9192                           ;main.c: 976: _delay((unsigned long)((500)*(40000000/4000.0)));
  9193  002532  0E1A               	movlw	26
  9194  002534  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  9195  002536  0E5E               	movlw	94
  9196  002538  6E27               	movwf	??_interruptHandler& (0+255),c
  9197  00253A  0E6E               	movlw	110
  9198  00253C                     i2u543_47:
  9199  00253C  2EE8               	decfsz	wreg,f,c
  9200  00253E  D7FE               	bra	i2u543_47
  9201  002540  2E27               	decfsz	??_interruptHandler& (0+255),f,c
  9202  002542  D7FC               	bra	i2u543_47
  9203  002544  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  9204  002546  D7FA               	bra	i2u543_47
  9205  002548  D000               	nop2	
  9206                           
  9207                           ;main.c: 977: state = 2;
  9208  00254A  0E00               	movlw	0
  9209  00254C  0100               	movlb	0	; () banked
  9210  00254E  6FAD               	movwf	(_state+1)& (0+255),b
  9211  002550  0E02               	movlw	2
  9212  002552  6FAC               	movwf	_state& (0+255),b
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;main.c: 978: number = 0;
  9216  002554  0E00               	movlw	0
  9217  002556  6E7E               	movwf	_number+1,c
  9218  002558  0E00               	movlw	0
  9219  00255A  6E7D               	movwf	_number,c
  9220                           
  9221                           ;main.c: 979: }
  9222  00255C  D045               	goto	i2l456
  9223  00255E                     i2l452:
  9224                           
  9225                           ;main.c: 982: else if (counter_step >= assembly_step-1){
  9226                           
  9227                           ; BSR set to: 0
  9228  00255E  0EFF               	movlw	255
  9229  002560  6E27               	movwf	??_interruptHandler& (0+255),c
  9230  002562  0EFF               	movlw	255
  9231  002564  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
  9232  002566  C0AA  F029         	movff	_assembly_step,??_interruptHandler+2
  9233  00256A  C0AB  F02A         	movff	_assembly_step+1,??_interruptHandler+3
  9234  00256E  5027               	movf	??_interruptHandler,w,c
  9235  002570  2629               	addwf	??_interruptHandler+2,f,c
  9236  002572  5028               	movf	??_interruptHandler+1,w,c
  9237  002574  222A               	addwfc	??_interruptHandler+3,f,c
  9238  002576  5029               	movf	??_interruptHandler+2,w,c
  9239  002578  5C6D               	subwf	_counter_step,w,c
  9240  00257A  506E               	movf	_counter_step+1,w,c
  9241  00257C  0A80               	xorlw	128
  9242  00257E  6E2B               	movwf	(??_interruptHandler+4)& (0+255),c
  9243  002580  502A               	movf	??_interruptHandler+3,w,c
  9244  002582  0A80               	xorlw	128
  9245  002584  582B               	subwfb	(??_interruptHandler+4)& (0+255),w,c
  9246  002586  A0D8               	btfss	status,0,c
  9247  002588  D013               	goto	i2l454
  9248                           
  9249                           ;main.c: 983: final_number[counter_step] = number;
  9250  00258A  90D8               	bcf	status,0,c
  9251  00258C  346D               	rlcf	_counter_step,w,c
  9252  00258E  6ED9               	movwf	fsr2l,c
  9253  002590  346E               	rlcf	_counter_step+1,w,c
  9254  002592  6EDA               	movwf	fsr2h,c
  9255  002594  0E50               	movlw	low _final_number
  9256  002596  26D9               	addwf	fsr2l,f,c
  9257  002598  0E01               	movlw	high _final_number
  9258  00259A  22DA               	addwfc	fsr2h,f,c
  9259  00259C  C07D  FFDE         	movff	_number,postinc2
  9260  0025A0  C07E  FFDD         	movff	_number+1,postdec2
  9261                           
  9262                           ;main.c: 984: state = 3;
  9263  0025A4  0E00               	movlw	0
  9264  0025A6  0100               	movlb	0	; () banked
  9265  0025A8  6FAD               	movwf	(_state+1)& (0+255),b
  9266  0025AA  0E03               	movlw	3
  9267  0025AC  6FAC               	movwf	_state& (0+255),b
  9268                           
  9269                           ;main.c: 985: }
  9270  0025AE  D01C               	goto	i2l456
  9271  0025B0                     i2l454:
  9272                           
  9273                           ;main.c: 986: else if ( check() == 1){
  9274                           
  9275                           ; BSR set to: 0
  9276  0025B0  EC72  F01C         	call	_check	;wreg free
  9277  0025B4  0401               	decf	?_check,w,c
  9278  0025B6  1002               	iorwf	?_check+1,w,c
  9279  0025B8  A4D8               	btfss	status,2,c
  9280  0025BA  D016               	goto	i2l456
  9281                           
  9282                           ;main.c: 987: state = 1;
  9283  0025BC  0E00               	movlw	0
  9284  0025BE  0100               	movlb	0	; () banked
  9285  0025C0  6FAD               	movwf	(_state+1)& (0+255),b
  9286  0025C2  0E01               	movlw	1
  9287  0025C4  6FAC               	movwf	_state& (0+255),b
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;main.c: 988: initLCD();
  9291  0025C6  EC4B  F01D         	call	i2_initLCD	;wreg free
  9292                           
  9293                           ;main.c: 991: final_number[counter_step] = number;
  9294  0025CA  90D8               	bcf	status,0,c
  9295  0025CC  346D               	rlcf	_counter_step,w,c
  9296  0025CE  6ED9               	movwf	fsr2l,c
  9297  0025D0  346E               	rlcf	_counter_step+1,w,c
  9298  0025D2  6EDA               	movwf	fsr2h,c
  9299  0025D4  0E50               	movlw	low _final_number
  9300  0025D6  26D9               	addwf	fsr2l,f,c
  9301  0025D8  0E01               	movlw	high _final_number
  9302  0025DA  22DA               	addwfc	fsr2h,f,c
  9303  0025DC  C07D  FFDE         	movff	_number,postinc2
  9304  0025E0  C07E  FFDD         	movff	_number+1,postdec2
  9305                           
  9306                           ;main.c: 992: counter_step++;
  9307  0025E4  4A6D               	infsnz	_counter_step,f,c
  9308  0025E6  2A6E               	incf	_counter_step+1,f,c
  9309  0025E8                     i2l456:
  9310                           
  9311                           ;main.c: 993: }
  9312                           ;main.c: 996: }
  9313                           ;main.c: 998: }
  9314                           ;main.c: 1005: B=0;N=0;S=0;W=0;
  9315  0025E8  0E00               	movlw	0
  9316  0025EA  6E66               	movwf	_B+1,c
  9317  0025EC  0E00               	movlw	0
  9318  0025EE  6E65               	movwf	_B,c
  9319  0025F0  0E00               	movlw	0
  9320  0025F2  6E64               	movwf	_N+1,c
  9321  0025F4  0E00               	movlw	0
  9322  0025F6  6E63               	movwf	_N,c
  9323  0025F8  0E00               	movlw	0
  9324  0025FA  6E62               	movwf	_S+1,c
  9325  0025FC  0E00               	movlw	0
  9326  0025FE  6E61               	movwf	_S,c
  9327  002600  0E00               	movlw	0
  9328  002602  6E60               	movwf	_W+1,c
  9329  002604  0E00               	movlw	0
  9330  002606  6E5F               	movwf	_W,c
  9331                           
  9332                           ;main.c: 1006: total_number = 0;
  9333  002608  0E00               	movlw	0
  9334  00260A  6E6A               	movwf	_total_number+1,c
  9335  00260C  0E00               	movlw	0
  9336  00260E  6E69               	movwf	_total_number,c
  9337  002610                     i2l5690:
  9338                           
  9339                           ;main.c: 1008: INT1IF = 0;
  9340  002610  90F0               	bcf	intcon3,0,c	;volatile
  9341  002612                     i2l5692:
  9342                           
  9343                           ;main.c: 1009: return;
  9344  002612  C03D  F082         	movff	??_interruptHandler+22,btemp+3
  9345  002616  C03C  F081         	movff	??_interruptHandler+21,btemp+2
  9346  00261A  C03B  F080         	movff	??_interruptHandler+20,btemp+1
  9347  00261E  C03A  F07F         	movff	??_interruptHandler+19,btemp
  9348  002622  C039  FFF5         	movff	??_interruptHandler+18,tablat
  9349  002626  C038  FFF8         	movff	??_interruptHandler+17,tblptru
  9350  00262A  C037  FFF7         	movff	??_interruptHandler+16,tblptrh
  9351  00262E  C036  FFF6         	movff	??_interruptHandler+15,tblptrl
  9352  002632  C035  FFF4         	movff	??_interruptHandler+14,prodh
  9353  002636  C034  FFF3         	movff	??_interruptHandler+13,prodl
  9354  00263A  C033  FFDA         	movff	??_interruptHandler+12,fsr2h
  9355  00263E  C032  FFD9         	movff	??_interruptHandler+11,fsr2l
  9356  002642  C031  FFE2         	movff	??_interruptHandler+10,fsr1h
  9357  002646  C030  FFE1         	movff	??_interruptHandler+9,fsr1l
  9358  00264A  C02F  FFEA         	movff	??_interruptHandler+8,fsr0h
  9359  00264E  C02E  FFE9         	movff	??_interruptHandler+7,fsr0l
  9360  002652  C02D  FFFB         	movff	??_interruptHandler+6,pclatu
  9361  002656  C02C  FFFA         	movff	??_interruptHandler+5,pclath
  9362  00265A  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9363  00265C  0011               	retfie		f
  9364  00265E                     __end_of_interruptHandler:
  9365                           	opt stack 0
  9366                           pclatu	equ	0xFFB
  9367                           pclath	equ	0xFFA
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           intcon	equ	0xFF2
  9375                           intcon3	equ	0xFF0
  9376                           indf0	equ	0xFEF
  9377                           postinc0	equ	0xFEE
  9378                           fsr0h	equ	0xFEA
  9379                           fsr0l	equ	0xFE9
  9380                           wreg	equ	0xFE8
  9381                           postdec1	equ	0xFE5
  9382                           fsr1h	equ	0xFE2
  9383                           fsr1l	equ	0xFE1
  9384                           indf2	equ	0xFDF
  9385                           postinc2	equ	0xFDE
  9386                           postdec2	equ	0xFDD
  9387                           fsr2h	equ	0xFDA
  9388                           fsr2l	equ	0xFD9
  9389                           status	equ	0xFD8
  9390                           
  9391 ;; *************** function i2_printf *****************
  9392 ;; Defined at:
  9393 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9396 ;;		 -> STR_67(3), STR_66(9), STR_65(12), STR_63(7), 
  9397 ;;		 -> STR_61(3), STR_60(11), STR_58(3), STR_57(9), 
  9398 ;;		 -> STR_52(15), STR_51(13), STR_50(16), STR_49(15), 
  9399 ;;		 -> STR_48(15), STR_47(15), STR_46(15), STR_45(10), 
  9400 ;;		 -> STR_44(19), STR_43(17), STR_42(12), STR_41(17), 
  9401 ;;		 -> STR_40(17), STR_39(14), STR_38(15), STR_37(20), 
  9402 ;;		 -> STR_36(3), STR_35(3), STR_34(20), STR_33(3), 
  9403 ;;		 -> STR_32(13), STR_31(18), STR_30(3), STR_29(13), 
  9404 ;;		 -> STR_28(19), STR_27(11), STR_26(13), STR_25(12), 
  9405 ;;		 -> STR_24(16), STR_23(3), STR_22(4), STR_21(3), 
  9406 ;;		 -> STR_20(4), STR_19(3), STR_18(4), STR_17(3), 
  9407 ;;		 -> STR_16(4), STR_15(3), STR_14(3), STR_13(2), 
  9408 ;;		 -> STR_12(3), STR_11(2), STR_10(3), STR_9(5), 
  9409 ;;		 -> STR_8(17), STR_7(6), STR_6(8), STR_5(3), 
  9410 ;;		 -> STR_4(14), STR_3(15), STR_2(14), STR_1(16), 
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;  printf          4    0        struct .
  9413 ;;  printf          2   35[COMRAM] int 
  9414 ;;  printf          2   32[COMRAM] unsigned int 
  9415 ;;  printf          2   30[COMRAM] unsigned int 
  9416 ;;  printf          2   28[COMRAM] PTR void [1]
  9417 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9418 ;;  printf          2   26[COMRAM] PTR const unsigned char 
  9419 ;;		 -> STR_88(7), number(2), final_set(40), current_set(5), 
  9420 ;;  printf          1   37[COMRAM] char 
  9421 ;;  printf          1   34[COMRAM] unsigned char 
  9422 ;;  printf          1   25[COMRAM] char 
  9423 ;;  printf          1   24[COMRAM] unsigned char 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  2   12[COMRAM] int 
  9426 ;; Registers used:
  9427 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9433 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9435 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9436 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9437 ;;Total ram usage:       26 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    2
  9440 ;; This function calls:
  9441 ;;		i2___lwdiv
  9442 ;;		i2___lwmod
  9443 ;;		i2___wmul
  9444 ;;		i2_isdigit
  9445 ;;		i2_putch
  9446 ;; This function is called by:
  9447 ;;		_interruptHandler
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           	psect	text22
  9452  002AA6                     __ptext22:
  9453                           	opt stack 0
  9454  002AA6                     i2_printf:
  9455                           	opt stack 24
  9456                           
  9457                           ;doprnt.c: 466: va_list ap;
  9458                           ;doprnt.c: 499: signed char c;
  9459                           ;doprnt.c: 501: int width;
  9460                           ;doprnt.c: 506: signed char prec;
  9461                           ;doprnt.c: 508: unsigned char flag;
  9462                           ;doprnt.c: 523: union {
  9463                           ;doprnt.c: 524: unsigned long vd;
  9464                           ;doprnt.c: 525: double integ;
  9465                           ;doprnt.c: 526: } tmpval;
  9466                           ;doprnt.c: 528: unsigned int val;
  9467                           ;doprnt.c: 529: unsigned len;
  9468                           ;doprnt.c: 530: const char * cp;
  9469                           ;doprnt.c: 533: *ap = __va_start();
  9470                           
  9471                           ;incstack = 0
  9472  002AA6  0E0F               	movlw	low (?i2_printf+2)
  9473  002AA8  6E1D               	movwf	i2printf@ap,c
  9474  002AAA  0E00               	movlw	high (?i2_printf+2)
  9475  002AAC  6E1E               	movwf	i2printf@ap+1,c
  9476                           
  9477                           ;doprnt.c: 536: while(c = *f++) {
  9478  002AAE  D1FA               	goto	i2u379_40
  9479  002AB0                     
  9480                           ;doprnt.c: 538: if(c != '%')
  9481  002AB0  0E25               	movlw	37
  9482  002AB2  1826               	xorwf	i2printf@c,w,c
  9483  002AB4  B4D8               	btfsc	status,2,c
  9484  002AB6  D004               	goto	i2l816
  9485                           
  9486                           ;doprnt.c: 540: {
  9487                           ;doprnt.c: 541: (putch(c) );
  9488  002AB8  5026               	movf	i2printf@c,w,c
  9489  002ABA  ECDE  F01E         	call	i2_putch
  9490                           
  9491                           ;doprnt.c: 542: continue;
  9492  002ABE  D1F2               	goto	i2u379_40
  9493  002AC0                     i2l816:
  9494                           
  9495                           ;doprnt.c: 543: }
  9496                           ;doprnt.c: 546: width = 0;
  9497  002AC0  0E00               	movlw	0
  9498  002AC2  6E25               	movwf	i2printf@width+1,c
  9499  002AC4  0E00               	movlw	0
  9500  002AC6  6E24               	movwf	i2printf@width,c
  9501                           
  9502                           ;doprnt.c: 548: flag = 0;
  9503  002AC8  0E00               	movlw	0
  9504  002ACA  6E23               	movwf	i2printf@flag,c
  9505                           
  9506                           ;doprnt.c: 551: switch(*f) {
  9507                           
  9508                           ;doprnt.c: 550: for(;;) {
  9509  002ACC  D003               	goto	i2l818
  9510  002ACE                     
  9511                           ;doprnt.c: 580: flag |= 0x04;
  9512  002ACE  8423               	bsf	i2printf@flag,2,c
  9513                           
  9514                           ;doprnt.c: 581: f++;
  9515  002AD0  4A0D               	infsnz	i2printf@f,f,c
  9516  002AD2  2A0E               	incf	i2printf@f+1,f,c
  9517  002AD4                     i2l818:
  9518  002AD4  C00D  FFF6         	movff	i2printf@f,tblptrl
  9519  002AD8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9520  002ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9521  002ADC  6AF8               	clrf	tblptru,c
  9522  002ADE                     	endif
  9523  002ADE                     	if	0	;tblptru may be non-zero
  9524  002ADE                     	endif
  9525  002ADE  0008               	tblrd		*
  9526  002AE0  50F5               	movf	tablat,w,c
  9527                           
  9528                           ; Switch size 1, requested type "space"
  9529                           ; Number of cases is 1, Range of values is 48 to 48
  9530                           ; switch strategies available:
  9531                           ; Name         Instructions Cycles
  9532                           ; simple_byte            4     3 (average)
  9533                           ;	Chosen strategy is simple_byte
  9534  002AE2  0A30               	xorlw	48	; case 48
  9535  002AE4  B4D8               	btfsc	status,2,c
  9536  002AE6  D7F3               	goto	i2l819
  9537                           
  9538                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9539                           
  9540                           ;doprnt.c: 586: }
  9541                           
  9542                           ;doprnt.c: 585: break;
  9543  002AE8  C00D  FFF6         	movff	i2printf@f,tblptrl
  9544  002AEC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9545  002AF0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9546  002AF0  6AF8               	clrf	tblptru,c
  9547  002AF2                     	endif
  9548  002AF2                     	if	0	;tblptru may be non-zero
  9549  002AF2                     	endif
  9550  002AF2  0008               	tblrd		*
  9551  002AF4  50F5               	movf	tablat,w,c
  9552  002AF6  ECAD  F01E         	call	i2_isdigit
  9553  002AFA  A0D8               	btfss	status,0,c
  9554  002AFC  D0A6               	goto	i2l826
  9555                           
  9556                           ;doprnt.c: 598: width = 0;
  9557  002AFE  0E00               	movlw	0
  9558  002B00  6E25               	movwf	i2printf@width+1,c
  9559  002B02  0E00               	movlw	0
  9560  002B04  6E24               	movwf	i2printf@width,c
  9561  002B06                     
  9562                           ;doprnt.c: 600: width *= 10;
  9563  002B06  C024  F001         	movff	i2printf@width,i2___wmul@multiplier
  9564  002B0A  C025  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9565  002B0E  0E00               	movlw	0
  9566  002B10  6E04               	movwf	i2___wmul@multiplicand+1,c
  9567  002B12  0E0A               	movlw	10
  9568  002B14  6E03               	movwf	i2___wmul@multiplicand,c
  9569  002B16  EC77  F01E         	call	i2___wmul	;wreg free
  9570  002B1A  C001  F024         	movff	?i2___wmul,i2printf@width
  9571  002B1E  C002  F025         	movff	?i2___wmul+1,i2printf@width+1
  9572                           
  9573                           ;doprnt.c: 601: width += *f++ - '0';
  9574  002B22  0ED0               	movlw	208
  9575  002B24  6E15               	movwf	??i2_printf& (0+255),c
  9576  002B26  0EFF               	movlw	255
  9577  002B28  6E16               	movwf	(??i2_printf+1)& (0+255),c
  9578  002B2A  C00D  FFF6         	movff	i2printf@f,tblptrl
  9579  002B2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9580  002B32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9581  002B32  6AF8               	clrf	tblptru,c
  9582  002B34                     	endif
  9583  002B34                     	if	0	;tblptru may be non-zero
  9584  002B34                     	endif
  9585  002B34  0008               	tblrd		*
  9586  002B36  50F5               	movf	tablat,w,c
  9587  002B38  6E17               	movwf	(??i2_printf+2)& (0+255),c
  9588  002B3A  6A18               	clrf	(??i2_printf+3)& (0+255),c
  9589  002B3C  5015               	movf	??i2_printf,w,c
  9590  002B3E  2617               	addwf	??i2_printf+2,f,c
  9591  002B40  5016               	movf	??i2_printf+1,w,c
  9592  002B42  2218               	addwfc	??i2_printf+3,f,c
  9593  002B44  5017               	movf	??i2_printf+2,w,c
  9594  002B46  2624               	addwf	i2printf@width,f,c
  9595  002B48  5018               	movf	??i2_printf+3,w,c
  9596  002B4A  2225               	addwfc	i2printf@width+1,f,c
  9597  002B4C  4A0D               	infsnz	i2printf@f,f,c
  9598  002B4E  2A0E               	incf	i2printf@f+1,f,c
  9599                           
  9600                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9601  002B50  C00D  FFF6         	movff	i2printf@f,tblptrl
  9602  002B54  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9603  002B58                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9604  002B58  6AF8               	clrf	tblptru,c
  9605  002B5A                     	endif
  9606  002B5A                     	if	0	;tblptru may be non-zero
  9607  002B5A                     	endif
  9608  002B5A  0008               	tblrd		*
  9609  002B5C  50F5               	movf	tablat,w,c
  9610  002B5E  ECAD  F01E         	call	i2_isdigit
  9611  002B62  A0D8               	btfss	status,0,c
  9612  002B64  D072               	goto	i2l826
  9613  002B66  D7CF               	goto	i2l824
  9614  002B68                     
  9615                           ;doprnt.c: 721: flag |= 0x80;
  9616  002B68  8E23               	bsf	i2printf@flag,7,c
  9617                           
  9618                           ;doprnt.c: 723: break;
  9619  002B6A  D08A               	goto	i2l831
  9620  002B6C                     
  9621                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9622  002B6C  C01D  FFD9         	movff	i2printf@ap,fsr2l
  9623  002B70  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  9624  002B74  CFDE F01B          	movff	postinc2,i2printf@cp
  9625  002B78  CFDD F01C          	movff	postdec2,i2printf@cp+1
  9626  002B7C  0E02               	movlw	2
  9627  002B7E  261D               	addwf	i2printf@ap,f,c
  9628  002B80  0E00               	movlw	0
  9629  002B82  221E               	addwfc	i2printf@ap+1,f,c
  9630                           
  9631                           ;doprnt.c: 740: if(!cp)
  9632  002B84  501B               	movf	i2printf@cp,w,c
  9633  002B86  101C               	iorwf	i2printf@cp+1,w,c
  9634  002B88  A4D8               	btfss	status,2,c
  9635  002B8A  D004               	goto	i2l834
  9636                           
  9637                           ;doprnt.c: 741: cp = "(null)";
  9638  002B8C  0E9C               	movlw	low STR_88
  9639  002B8E  6E1B               	movwf	i2printf@cp,c
  9640  002B90  0EFF               	movlw	high STR_88
  9641  002B92  6E1C               	movwf	i2printf@cp+1,c
  9642  002B94                     i2l834:
  9643                           
  9644                           ;doprnt.c: 745: len = 0;
  9645  002B94  0E00               	movlw	0
  9646  002B96  6E20               	movwf	i2printf@len+1,c
  9647  002B98  0E00               	movlw	0
  9648  002B9A  6E1F               	movwf	i2printf@len,c
  9649                           
  9650                           ;doprnt.c: 746: while(cp[len])
  9651  002B9C  D002               	goto	i2l835
  9652  002B9E                     
  9653                           ;doprnt.c: 747: len++;
  9654  002B9E  4A1F               	infsnz	i2printf@len,f,c
  9655  002BA0  2A20               	incf	i2printf@len+1,f,c
  9656  002BA2                     i2l835:
  9657  002BA2  501F               	movf	i2printf@len,w,c
  9658  002BA4  241B               	addwf	i2printf@cp,w,c
  9659  002BA6  6E15               	movwf	??i2_printf& (0+255),c
  9660  002BA8  5020               	movf	i2printf@len+1,w,c
  9661  002BAA  201C               	addwfc	i2printf@cp+1,w,c
  9662  002BAC  6E16               	movwf	(??i2_printf+1)& (0+255),c
  9663  002BAE  C015  FFF6         	movff	??i2_printf,tblptrl
  9664  002BB2  C016  FFF7         	movff	??i2_printf+1,tblptrh
  9665  002BB6  0E00               	movlw	low (__mediumconst shr (0+16))
  9666  002BB8  6EF8               	movwf	tblptru,c
  9667  002BBA  0E0F               	movlw	(high __ramtop+-1)
  9668  002BBC  64F7               	cpfsgt	tblptrh,c
  9669  002BBE  D003               	bra	i2u355_47
  9670  002BC0  0008               	tblrd		*
  9671  002BC2  50F5               	movf	tablat,w,c
  9672  002BC4  D005               	bra	i2u355_40
  9673  002BC6                     i2u355_47:
  9674  002BC6  CFF6 FFE9          	movff	tblptrl,fsr0l
  9675  002BCA  CFF7 FFEA          	movff	tblptrh,fsr0h
  9676  002BCE  50EF               	movf	indf0,w,c
  9677  002BD0                     i2u355_40:
  9678  002BD0  0900               	iorlw	0
  9679  002BD2  A4D8               	btfss	status,2,c
  9680  002BD4  D7E4               	goto	i2l836
  9681                           
  9682                           ;doprnt.c: 757: if(width > len)
  9683  002BD6  5024               	movf	i2printf@width,w,c
  9684  002BD8  5C1F               	subwf	i2printf@len,w,c
  9685  002BDA  5025               	movf	i2printf@width+1,w,c
  9686  002BDC  5820               	subwfb	i2printf@len+1,w,c
  9687  002BDE  B0D8               	btfsc	status,0,c
  9688  002BE0  D005               	goto	i2l838
  9689                           
  9690                           ;doprnt.c: 758: width -= len;
  9691  002BE2  501F               	movf	i2printf@len,w,c
  9692  002BE4  5E24               	subwf	i2printf@width,f,c
  9693  002BE6  5020               	movf	i2printf@len+1,w,c
  9694  002BE8  5A25               	subwfb	i2printf@width+1,f,c
  9695  002BEA  D008               	goto	i2l840
  9696  002BEC                     i2l838:
  9697                           
  9698                           ;doprnt.c: 759: else
  9699                           ;doprnt.c: 760: width = 0;
  9700  002BEC  0E00               	movlw	0
  9701  002BEE  6E25               	movwf	i2printf@width+1,c
  9702  002BF0  0E00               	movlw	0
  9703  002BF2  6E24               	movwf	i2printf@width,c
  9704                           
  9705                           ;doprnt.c: 764: while(width--)
  9706  002BF4  D003               	goto	i2l840
  9707  002BF6                     i2l4680:
  9708                           
  9709                           ;doprnt.c: 765: (putch(' ') );
  9710  002BF6  0E20               	movlw	32
  9711  002BF8  ECDE  F01E         	call	i2_putch
  9712  002BFC                     i2l840:
  9713  002BFC  0624               	decf	i2printf@width,f,c
  9714  002BFE  A0D8               	btfss	status,0,c
  9715  002C00  0625               	decf	i2printf@width+1,f,c
  9716  002C02  2824               	incf	i2printf@width,w,c
  9717  002C04  E1F8               	bnz	i2l4680
  9718  002C06  2825               	incf	i2printf@width+1,w,c
  9719  002C08  B4D8               	btfsc	status,2,c
  9720  002C0A  D016               	goto	i2l843
  9721  002C0C  D7F4               	goto	i2l841
  9722  002C0E                     i2l4684:
  9723                           
  9724                           ;doprnt.c: 768: (putch(*cp++) );
  9725  002C0E  C01B  FFF6         	movff	i2printf@cp,tblptrl
  9726  002C12  C01C  FFF7         	movff	i2printf@cp+1,tblptrh
  9727  002C16  0E00               	movlw	low (__mediumconst shr (0+16))
  9728  002C18  6EF8               	movwf	tblptru,c
  9729  002C1A  0E0F               	movlw	(high __ramtop+-1)
  9730  002C1C  64F7               	cpfsgt	tblptrh,c
  9731  002C1E  D003               	bra	i2u359_47
  9732  002C20  0008               	tblrd		*
  9733  002C22  50F5               	movf	tablat,w,c
  9734  002C24  D005               	bra	i2u359_40
  9735  002C26                     i2u359_47:
  9736  002C26  CFF6 FFE9          	movff	tblptrl,fsr0l
  9737  002C2A  CFF7 FFEA          	movff	tblptrh,fsr0h
  9738  002C2E  50EF               	movf	indf0,w,c
  9739  002C30                     i2u359_40:
  9740  002C30  ECDE  F01E         	call	i2_putch
  9741  002C34  4A1B               	infsnz	i2printf@cp,f,c
  9742  002C36  2A1C               	incf	i2printf@cp+1,f,c
  9743  002C38                     i2l843:
  9744  002C38  061F               	decf	i2printf@len,f,c
  9745  002C3A  A0D8               	btfss	status,0,c
  9746  002C3C  0620               	decf	i2printf@len+1,f,c
  9747  002C3E  281F               	incf	i2printf@len,w,c
  9748  002C40  E1E6               	bnz	i2l4684
  9749  002C42  2820               	incf	i2printf@len+1,w,c
  9750  002C44  B4D8               	btfsc	status,2,c
  9751  002C46  D12E               	goto	i2u379_40
  9752  002C48  D7E2               	goto	i2l844
  9753  002C4A                     i2l826:
  9754  002C4A  C00D  FFF6         	movff	i2printf@f,tblptrl
  9755  002C4E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9756  002C52  4A0D               	infsnz	i2printf@f,f,c
  9757  002C54  2A0E               	incf	i2printf@f+1,f,c
  9758  002C56                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9759  002C56  6AF8               	clrf	tblptru,c
  9760  002C58                     	endif
  9761  002C58                     	if	0	;tblptru may be non-zero
  9762  002C58                     	endif
  9763  002C58  0008               	tblrd		*
  9764  002C5A  CFF5 F026          	movff	tablat,i2printf@c
  9765  002C5E  5026               	movf	i2printf@c,w,c
  9766                           
  9767                           ; Switch size 1, requested type "space"
  9768                           ; Number of cases is 5, Range of values is 0 to 120
  9769                           ; switch strategies available:
  9770                           ; Name         Instructions Cycles
  9771                           ; simple_byte           16     9 (average)
  9772                           ;	Chosen strategy is simple_byte
  9773  002C60  0A00               	xorlw	0	; case 0
  9774  002C62  B4D8               	btfsc	status,2,c
  9775  002C64  0012               	return	
  9776  002C66  0A64               	xorlw	100	; case 100
  9777  002C68  B4D8               	btfsc	status,2,c
  9778  002C6A  D00A               	goto	i2l831
  9779  002C6C  0A0D               	xorlw	13	; case 105
  9780  002C6E  B4D8               	btfsc	status,2,c
  9781  002C70  D007               	goto	i2l831
  9782  002C72  0A1A               	xorlw	26	; case 115
  9783  002C74  B4D8               	btfsc	status,2,c
  9784  002C76  D77A               	goto	i2l833
  9785  002C78  0A0B               	xorlw	11	; case 120
  9786  002C7A  B4D8               	btfsc	status,2,c
  9787  002C7C  D775               	goto	i2l832
  9788  002C7E  D112               	goto	i2u379_40
  9789  002C80                     i2l831:
  9790                           
  9791                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9792  002C80  BE23               	btfsc	i2printf@flag,7,c
  9793  002C82  D015               	goto	i2l847
  9794                           
  9795                           ;doprnt.c: 1253: {
  9796                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9797  002C84  C01D  FFD9         	movff	i2printf@ap,fsr2l
  9798  002C88  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  9799  002C8C  CFDE F021          	movff	postinc2,i2printf@val
  9800  002C90  CFDD F022          	movff	postdec2,i2printf@val+1
  9801  002C94  0E02               	movlw	2
  9802  002C96  261D               	addwf	i2printf@ap,f,c
  9803  002C98  0E00               	movlw	0
  9804  002C9A  221E               	addwfc	i2printf@ap+1,f,c
  9805                           
  9806                           ;doprnt.c: 1261: if((int)val < 0) {
  9807  002C9C  AE22               	btfss	i2printf@val+1,7,c
  9808  002C9E  D04A               	goto	i2l850
  9809                           
  9810                           ;doprnt.c: 1262: flag |= 0x03;
  9811  002CA0  0E03               	movlw	3
  9812  002CA2  1223               	iorwf	i2printf@flag,f,c
  9813                           
  9814                           ;doprnt.c: 1263: val = -val;
  9815  002CA4  6C21               	negf	i2printf@val,c
  9816  002CA6  1E22               	comf	i2printf@val+1,f,c
  9817  002CA8  B0D8               	btfsc	status,0,c
  9818  002CAA  2A22               	incf	i2printf@val+1,f,c
  9819                           
  9820                           ;doprnt.c: 1264: }
  9821                           ;doprnt.c: 1266: }
  9822  002CAC  D043               	goto	i2l850
  9823  002CAE                     i2l847:
  9824                           
  9825                           ;doprnt.c: 1268: else
  9826                           ;doprnt.c: 1273: {
  9827                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9828  002CAE  C01D  FFD9         	movff	i2printf@ap,fsr2l
  9829  002CB2  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  9830  002CB6  CFDE F021          	movff	postinc2,i2printf@val
  9831  002CBA  CFDD F022          	movff	postdec2,i2printf@val+1
  9832  002CBE  0E02               	movlw	2
  9833  002CC0  261D               	addwf	i2printf@ap,f,c
  9834  002CC2  0E00               	movlw	0
  9835  002CC4  221E               	addwfc	i2printf@ap+1,f,c
  9836                           
  9837                           ;doprnt.c: 1287: }
  9838                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  9839  002CC6  D036               	goto	i2l850
  9840  002CC8                     
  9841                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9842  002CC8  0E01               	movlw	1
  9843  002CCA  6E26               	movwf	i2printf@c,c
  9844  002CCC                     i2l4710:
  9845  002CCC  0E05               	movlw	5
  9846  002CCE  1826               	xorwf	i2printf@c,w,c
  9847  002CD0  B4D8               	btfsc	status,2,c
  9848  002CD2  D038               	goto	i2l855
  9849                           
  9850                           ;doprnt.c: 1306: if(val < dpowers[c])
  9851  002CD4  5026               	movf	i2printf@c,w,c
  9852  002CD6  0D02               	mullw	2
  9853  002CD8  0E2A               	movlw	low _dpowers
  9854  002CDA  24F3               	addwf	prodl,w,c
  9855  002CDC  6EF6               	movwf	tblptrl,c
  9856  002CDE  0EFD               	movlw	high _dpowers
  9857  002CE0  20F4               	addwfc	prodh,w,c
  9858  002CE2  6EF7               	movwf	tblptrh,c
  9859  002CE4                     	if	1	;There are 3 active tblptr bytes
  9860  002CE4  6AF8               	clrf	tblptru,c
  9861  002CE6  0E00               	movlw	low (__mediumconst shr (0+16))
  9862  002CE8  22F8               	addwfc	tblptru,f,c
  9863  002CEA                     	endif
  9864  002CEA  0009               	tblrd		*+
  9865  002CEC  50F5               	movf	tablat,w,c
  9866  002CEE  5C21               	subwf	i2printf@val,w,c
  9867  002CF0  0009               	tblrd		*+
  9868  002CF2  50F5               	movf	tablat,w,c
  9869  002CF4  5822               	subwfb	i2printf@val+1,w,c
  9870  002CF6  A0D8               	btfss	status,0,c
  9871  002CF8  D025               	goto	i2l855
  9872                           
  9873                           ;doprnt.c: 1307: break;
  9874  002CFA  2A26               	incf	i2printf@c,f,c
  9875  002CFC  D7E7               	goto	i2l4710
  9876  002CFE                     
  9877                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9878  002CFE  0E01               	movlw	1
  9879  002D00  6E26               	movwf	i2printf@c,c
  9880  002D02                     i2l4724:
  9881  002D02  0E04               	movlw	4
  9882  002D04  1826               	xorwf	i2printf@c,w,c
  9883  002D06  B4D8               	btfsc	status,2,c
  9884  002D08  D01D               	goto	i2l855
  9885                           
  9886                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9887  002D0A  5026               	movf	i2printf@c,w,c
  9888  002D0C  0D02               	mullw	2
  9889  002D0E  0E34               	movlw	low _hexpowers
  9890  002D10  24F3               	addwf	prodl,w,c
  9891  002D12  6EF6               	movwf	tblptrl,c
  9892  002D14  0EFD               	movlw	high _hexpowers
  9893  002D16  20F4               	addwfc	prodh,w,c
  9894  002D18  6EF7               	movwf	tblptrh,c
  9895  002D1A                     	if	1	;There are 3 active tblptr bytes
  9896  002D1A  6AF8               	clrf	tblptru,c
  9897  002D1C  0E00               	movlw	low (__mediumconst shr (0+16))
  9898  002D1E  22F8               	addwfc	tblptru,f,c
  9899  002D20                     	endif
  9900  002D20  0009               	tblrd		*+
  9901  002D22  50F5               	movf	tablat,w,c
  9902  002D24  5C21               	subwf	i2printf@val,w,c
  9903  002D26  0009               	tblrd		*+
  9904  002D28  50F5               	movf	tablat,w,c
  9905  002D2A  5822               	subwfb	i2printf@val+1,w,c
  9906  002D2C  A0D8               	btfss	status,0,c
  9907  002D2E  D00A               	goto	i2l855
  9908                           
  9909                           ;doprnt.c: 1318: break;
  9910  002D30  2A26               	incf	i2printf@c,f,c
  9911  002D32  D7E7               	goto	i2l4724
  9912  002D34                     i2l850:
  9913  002D34  5023               	movf	i2printf@flag,w,c
  9914  002D36  0B80               	andlw	128
  9915                           
  9916                           ; Switch size 1, requested type "space"
  9917                           ; Number of cases is 2, Range of values is 0 to 128
  9918                           ; switch strategies available:
  9919                           ; Name         Instructions Cycles
  9920                           ; simple_byte            7     4 (average)
  9921                           ;	Chosen strategy is simple_byte
  9922  002D38  0A00               	xorlw	0	; case 0
  9923  002D3A  B4D8               	btfsc	status,2,c
  9924  002D3C  D7C5               	goto	i2l851
  9925  002D3E  0A80               	xorlw	128	; case 128
  9926  002D40  B4D8               	btfsc	status,2,c
  9927  002D42  D7DD               	goto	i2l856
  9928  002D44                     i2l855:
  9929                           
  9930                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9931  002D44  5024               	movf	i2printf@width,w,c
  9932  002D46  1025               	iorwf	i2printf@width+1,w,c
  9933  002D48  B4D8               	btfsc	status,2,c
  9934  002D4A  D009               	goto	i2l860
  9935  002D4C  C023  F015         	movff	i2printf@flag,??i2_printf
  9936  002D50  0E03               	movlw	3
  9937  002D52  1615               	andwf	??i2_printf,f,c
  9938  002D54  B4D8               	btfsc	status,2,c
  9939  002D56  D003               	goto	i2l860
  9940                           
  9941                           ;doprnt.c: 1346: width--;
  9942  002D58  0624               	decf	i2printf@width,f,c
  9943  002D5A  A0D8               	btfss	status,0,c
  9944  002D5C  0625               	decf	i2printf@width+1,f,c
  9945  002D5E                     i2l860:
  9946                           
  9947                           ;doprnt.c: 1381: if(width > c)
  9948  002D5E  0E80               	movlw	128
  9949  002D60  BE26               	btfsc	i2printf@c,7,c
  9950  002D62  0E7F               	movlw	127
  9951  002D64  6E15               	movwf	??i2_printf& (0+255),c
  9952  002D66  5024               	movf	i2printf@width,w,c
  9953  002D68  5C26               	subwf	i2printf@c,w,c
  9954  002D6A  5025               	movf	i2printf@width+1,w,c
  9955  002D6C  0A80               	xorlw	128
  9956  002D6E  5815               	subwfb	??i2_printf& (0+255),w,c
  9957  002D70  B0D8               	btfsc	status,0,c
  9958  002D72  D007               	goto	i2l861
  9959                           
  9960                           ;doprnt.c: 1382: width -= c;
  9961  002D74  5026               	movf	i2printf@c,w,c
  9962  002D76  5E24               	subwf	i2printf@width,f,c
  9963  002D78  0E00               	movlw	0
  9964  002D7A  BE26               	btfsc	i2printf@c,7,c
  9965  002D7C  0EFF               	movlw	255
  9966  002D7E  5A25               	subwfb	i2printf@width+1,f,c
  9967  002D80  D004               	goto	i2l862
  9968  002D82                     i2l861:
  9969                           
  9970                           ;doprnt.c: 1383: else
  9971                           ;doprnt.c: 1384: width = 0;
  9972  002D82  0E00               	movlw	0
  9973  002D84  6E25               	movwf	i2printf@width+1,c
  9974  002D86  0E00               	movlw	0
  9975  002D88  6E24               	movwf	i2printf@width,c
  9976  002D8A                     i2l862:
  9977                           
  9978                           ;doprnt.c: 1387: if(flag & 0x04) {
  9979  002D8A  A423               	btfss	i2printf@flag,2,c
  9980  002D8C  D014               	goto	i2l863
  9981                           
  9982                           ;doprnt.c: 1392: if(flag & 0x03)
  9983  002D8E  C023  F015         	movff	i2printf@flag,??i2_printf
  9984  002D92  0E03               	movlw	3
  9985  002D94  1615               	andwf	??i2_printf,f,c
  9986  002D96  B4D8               	btfsc	status,2,c
  9987  002D98  D003               	goto	i2l864
  9988                           
  9989                           ;doprnt.c: 1393: (putch('-') );
  9990  002D9A  0E2D               	movlw	45
  9991  002D9C  ECDE  F01E         	call	i2_putch
  9992  002DA0                     i2l864:
  9993                           
  9994                           ;doprnt.c: 1415: if(width)
  9995  002DA0  5024               	movf	i2printf@width,w,c
  9996  002DA2  1025               	iorwf	i2printf@width+1,w,c
  9997  002DA4  B4D8               	btfsc	status,2,c
  9998  002DA6  D01E               	goto	i2l872
  9999                           
 10000                           ;doprnt.c: 1417: (putch('0') );
 10001                           
 10002                           ;doprnt.c: 1416: do
 10003  002DA8  0E30               	movlw	48
 10004  002DAA  ECDE  F01E         	call	i2_putch
 10005                           
 10006                           ;doprnt.c: 1418: while(--width);
 10007  002DAE  0624               	decf	i2printf@width,f,c
 10008  002DB0  A0D8               	btfss	status,0,c
 10009  002DB2  0625               	decf	i2printf@width+1,f,c
 10010  002DB4  D7F5               	goto	i2l864
 10011  002DB6                     i2l863:
 10012                           
 10013                           ;doprnt.c: 1422: {
 10014                           ;doprnt.c: 1424: if(width
 10015                           ;doprnt.c: 1428: )
 10016  002DB6  5024               	movf	i2printf@width,w,c
 10017  002DB8  1025               	iorwf	i2printf@width+1,w,c
 10018  002DBA  B4D8               	btfsc	status,2,c
 10019  002DBC  D00A               	goto	i2u377_40
 10020  002DBE                     i2u376_40:
 10021                           
 10022                           ;doprnt.c: 1430: (putch(' ') );
 10023                           
 10024                           ;doprnt.c: 1429: do
 10025  002DBE  0E20               	movlw	32
 10026  002DC0  ECDE  F01E         	call	i2_putch
 10027                           
 10028                           ;doprnt.c: 1431: while(--width);
 10029  002DC4  0624               	decf	i2printf@width,f,c
 10030  002DC6  A0D8               	btfss	status,0,c
 10031  002DC8  0625               	decf	i2printf@width+1,f,c
 10032  002DCA  5024               	movf	i2printf@width,w,c
 10033  002DCC  1025               	iorwf	i2printf@width+1,w,c
 10034  002DCE  A4D8               	btfss	status,2,c
 10035  002DD0  D7F6               	goto	i2u376_40
 10036  002DD2                     i2u377_40:
 10037                           
 10038                           ;doprnt.c: 1438: if(flag & 0x03)
 10039  002DD2  C023  F015         	movff	i2printf@flag,??i2_printf
 10040  002DD6  0E03               	movlw	3
 10041  002DD8  1615               	andwf	??i2_printf,f,c
 10042  002DDA  B4D8               	btfsc	status,2,c
 10043  002DDC  D003               	goto	i2l872
 10044                           
 10045                           ;doprnt.c: 1439: (putch('-') );
 10046  002DDE  0E2D               	movlw	45
 10047  002DE0  ECDE  F01E         	call	i2_putch
 10048  002DE4                     i2l872:
 10049                           
 10050                           ;doprnt.c: 1469: }
 10051                           ;doprnt.c: 1472: prec = c;
 10052  002DE4  C026  F01A         	movff	i2printf@c,i2printf@prec
 10053                           
 10054                           ;doprnt.c: 1474: while(prec--) {
 10055  002DE8  D059               	goto	i2l873
 10056  002DEA                     
 10057                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10058  002DEA  501A               	movf	i2printf@prec,w,c
 10059  002DEC  0D02               	mullw	2
 10060  002DEE  0E2A               	movlw	low _dpowers
 10061  002DF0  24F3               	addwf	prodl,w,c
 10062  002DF2  6EF6               	movwf	tblptrl,c
 10063  002DF4  0EFD               	movlw	high _dpowers
 10064  002DF6  20F4               	addwfc	prodh,w,c
 10065  002DF8  6EF7               	movwf	tblptrh,c
 10066  002DFA                     	if	1	;There are 3 active tblptr bytes
 10067  002DFA  6AF8               	clrf	tblptru,c
 10068  002DFC  0E00               	movlw	low (__mediumconst shr (0+16))
 10069  002DFE  22F8               	addwfc	tblptru,f,c
 10070  002E00                     	endif
 10071  002E00  0009               	tblrd		*+
 10072  002E02  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10073  002E06  000A               	tblrd		*-
 10074  002E08  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10075  002E0C  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10076  002E10  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10077  002E14  ECFC  F01C         	call	i2___lwdiv	;wreg free
 10078  002E18  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10079  002E1C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10080  002E20  0E00               	movlw	0
 10081  002E22  6E0B               	movwf	i2___lwmod@divisor+1,c
 10082  002E24  0E0A               	movlw	10
 10083  002E26  6E0A               	movwf	i2___lwmod@divisor,c
 10084  002E28  ECDB  F01D         	call	i2___lwmod	;wreg free
 10085  002E2C  5008               	movf	?i2___lwmod,w,c
 10086  002E2E  0F30               	addlw	48
 10087  002E30  6E26               	movwf	i2printf@c,c
 10088                           
 10089                           ;doprnt.c: 1491: break;
 10090  002E32  D031               	goto	i2l877
 10091  002E34                     
 10092                           ;doprnt.c: 1499: {
 10093                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10094  002E34  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10095  002E38  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10096  002E3C  501A               	movf	i2printf@prec,w,c
 10097  002E3E  0D02               	mullw	2
 10098  002E40  0E34               	movlw	low _hexpowers
 10099  002E42  24F3               	addwf	prodl,w,c
 10100  002E44  6EF6               	movwf	tblptrl,c
 10101  002E46  0EFD               	movlw	high _hexpowers
 10102  002E48  20F4               	addwfc	prodh,w,c
 10103  002E4A  6EF7               	movwf	tblptrh,c
 10104  002E4C                     	if	1	;There are 3 active tblptr bytes
 10105  002E4C  6AF8               	clrf	tblptru,c
 10106  002E4E  0E00               	movlw	low (__mediumconst shr (0+16))
 10107  002E50  22F8               	addwfc	tblptru,f,c
 10108  002E52                     	endif
 10109  002E52  0009               	tblrd		*+
 10110  002E54  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10111  002E58  000A               	tblrd		*-
 10112  002E5A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10113  002E5E  ECFC  F01C         	call	i2___lwdiv	;wreg free
 10114  002E62  5001               	movf	?i2___lwdiv,w,c
 10115  002E64  0B0F               	andlw	15
 10116  002E66  6E19               	movwf	i2printf@idx,c
 10117                           
 10118                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10119  002E68  5019               	movf	i2printf@idx,w,c
 10120  002E6A  0D01               	mullw	1
 10121  002E6C  0E10               	movlw	low STR_89
 10122  002E6E  24F3               	addwf	prodl,w,c
 10123  002E70  6EF6               	movwf	tblptrl,c
 10124  002E72  0EFE               	movlw	high STR_89
 10125  002E74  20F4               	addwfc	prodh,w,c
 10126  002E76  6EF7               	movwf	tblptrh,c
 10127  002E78                     	if	1	;There are 3 active tblptr bytes
 10128  002E78  6AF8               	clrf	tblptru,c
 10129  002E7A  0E00               	movlw	low (__mediumconst shr (0+16))
 10130  002E7C  22F8               	addwfc	tblptru,f,c
 10131  002E7E                     	endif
 10132  002E7E  0008               	tblrd		*
 10133  002E80  CFF5 F026          	movff	tablat,i2printf@c
 10134                           
 10135                           ;doprnt.c: 1523: }
 10136                           
 10137                           ;doprnt.c: 1508: }
 10138                           ;doprnt.c: 1510: break;
 10139  002E84  D008               	goto	i2l877
 10140  002E86  5023               	movf	i2printf@flag,w,c
 10141  002E88  0B80               	andlw	128
 10142                           
 10143                           ; Switch size 1, requested type "space"
 10144                           ; Number of cases is 2, Range of values is 0 to 128
 10145                           ; switch strategies available:
 10146                           ; Name         Instructions Cycles
 10147                           ; simple_byte            7     4 (average)
 10148                           ;	Chosen strategy is simple_byte
 10149  002E8A  0A00               	xorlw	0	; case 0
 10150  002E8C  B4D8               	btfsc	status,2,c
 10151  002E8E  D7AD               	goto	i2l876
 10152  002E90  0A80               	xorlw	128	; case 128
 10153  002E92  B4D8               	btfsc	status,2,c
 10154  002E94  D7CF               	goto	i2l878
 10155  002E96                     i2l877:
 10156                           
 10157                           ;doprnt.c: 1524: (putch(c) );
 10158  002E96  5026               	movf	i2printf@c,w,c
 10159  002E98  ECDE  F01E         	call	i2_putch
 10160  002E9C                     i2l873:
 10161  002E9C  061A               	decf	i2printf@prec,f,c
 10162  002E9E  281A               	incf	i2printf@prec,w,c
 10163  002EA0  A4D8               	btfss	status,2,c
 10164  002EA2  D7F1               	goto	i2l875
 10165  002EA4                     i2u379_40:
 10166  002EA4  C00D  FFF6         	movff	i2printf@f,tblptrl
 10167  002EA8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10168  002EAC  4A0D               	infsnz	i2printf@f,f,c
 10169  002EAE  2A0E               	incf	i2printf@f+1,f,c
 10170  002EB0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10171  002EB0  6AF8               	clrf	tblptru,c
 10172  002EB2                     	endif
 10173  002EB2                     	if	0	;tblptru may be non-zero
 10174  002EB2                     	endif
 10175  002EB2  0008               	tblrd		*
 10176  002EB4  CFF5 F026          	movff	tablat,i2printf@c
 10177  002EB8  5026               	movf	i2printf@c,w,c
 10178  002EBA  B4D8               	btfsc	status,2,c
 10179  002EBC  0012               	return	
 10180  002EBE  D5F8               	goto	i2l815
 10181  002EC0                     __end_ofi2_printf:
 10182                           	opt stack 0
 10183                           pclatu	equ	0xFFB
 10184                           pclath	equ	0xFFA
 10185                           tblptru	equ	0xFF8
 10186                           tblptrh	equ	0xFF7
 10187                           tblptrl	equ	0xFF6
 10188                           tablat	equ	0xFF5
 10189                           prodh	equ	0xFF4
 10190                           prodl	equ	0xFF3
 10191                           intcon	equ	0xFF2
 10192                           intcon3	equ	0xFF0
 10193                           indf0	equ	0xFEF
 10194                           postinc0	equ	0xFEE
 10195                           fsr0h	equ	0xFEA
 10196                           fsr0l	equ	0xFE9
 10197                           wreg	equ	0xFE8
 10198                           postdec1	equ	0xFE5
 10199                           fsr1h	equ	0xFE2
 10200                           fsr1l	equ	0xFE1
 10201                           indf2	equ	0xFDF
 10202                           postinc2	equ	0xFDE
 10203                           postdec2	equ	0xFDD
 10204                           fsr2h	equ	0xFDA
 10205                           fsr2l	equ	0xFD9
 10206                           status	equ	0xFD8
 10207                           
 10208 ;; *************** function i2_putch *****************
 10209 ;; Defined at:
 10210 ;;		line 24 in file "lcd.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;  data            1    wreg     unsigned char 
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;  data            1    2[COMRAM] unsigned char 
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		wreg, status,2, status,0, cstack
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;Total ram usage:        1 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; Hardware stack levels required when called:    1
 10231 ;; This function calls:
 10232 ;;		i2_lcdNibble
 10233 ;; This function is called by:
 10234 ;;		_interruptHandler
 10235 ;;		i2_printf
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           	psect	text23
 10240  003DBC                     __ptext23:
 10241                           	opt stack 0
 10242  003DBC                     i2_putch:
 10243                           	opt stack 25
 10244                           
 10245                           ;incstack = 0
 10246                           ;i2putch@data stored from wreg
 10247  003DBC  6E03               	movwf	i2putch@data,c
 10248                           
 10249                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 10250  003DBE  848C               	bsf	3980,2,c	;volatile
 10251                           
 10252                           ;lcd.c: 33: lcdNibble(data);
 10253  003DC0  5003               	movf	i2putch@data,w,c
 10254  003DC2  ECF4  F01A         	call	i2_lcdNibble
 10255                           
 10256                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10257  003DC6  0EC8               	movlw	200
 10258  003DC8                     i2u544_47:
 10259  003DC8  D000               	nop2	
 10260  003DCA  2EE8               	decfsz	wreg,f,c
 10261  003DCC  D7FD               	bra	i2u544_47
 10262  003DCE  0012               	return		;funcret
 10263  003DD0                     __end_ofi2_putch:
 10264                           	opt stack 0
 10265                           pclatu	equ	0xFFB
 10266                           pclath	equ	0xFFA
 10267                           tblptru	equ	0xFF8
 10268                           tblptrh	equ	0xFF7
 10269                           tblptrl	equ	0xFF6
 10270                           tablat	equ	0xFF5
 10271                           prodh	equ	0xFF4
 10272                           prodl	equ	0xFF3
 10273                           intcon	equ	0xFF2
 10274                           intcon3	equ	0xFF0
 10275                           indf0	equ	0xFEF
 10276                           postinc0	equ	0xFEE
 10277                           fsr0h	equ	0xFEA
 10278                           fsr0l	equ	0xFE9
 10279                           wreg	equ	0xFE8
 10280                           postdec1	equ	0xFE5
 10281                           fsr1h	equ	0xFE2
 10282                           fsr1l	equ	0xFE1
 10283                           indf2	equ	0xFDF
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           fsr2h	equ	0xFDA
 10287                           fsr2l	equ	0xFD9
 10288                           status	equ	0xFD8
 10289                           
 10290 ;; *************** function i2_isdigit *****************
 10291 ;; Defined at:
 10292 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;  c               1    wreg     unsigned char 
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;  c               1    2[COMRAM] unsigned char 
 10297 ;; Return value:  Size  Location     Type
 10298 ;;		None               void
 10299 ;; Registers used:
 10300 ;;		wreg, status,2, status,0
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;Total ram usage:        3 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		i2_printf
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text24
 10320  003D5A                     __ptext24:
 10321                           	opt stack 0
 10322  003D5A                     i2_isdigit:
 10323                           	opt stack 25
 10324                           
 10325                           ;incstack = 0
 10326                           ;i2isdigit@c stored from wreg
 10327  003D5A  6E03               	movwf	i2isdigit@c,c
 10328  003D5C  0E00               	movlw	0
 10329  003D5E  6E02               	movwf	i2_isdigit$1280,c
 10330  003D60  0E3A               	movlw	58
 10331  003D62  6003               	cpfslt	i2isdigit@c,c
 10332  003D64  D005               	goto	i2l1211
 10333  003D66  0E2F               	movlw	47
 10334  003D68  6403               	cpfsgt	i2isdigit@c,c
 10335  003D6A  D002               	goto	i2l1211
 10336  003D6C  0E01               	movlw	1
 10337  003D6E  6E02               	movwf	i2_isdigit$1280,c
 10338  003D70                     i2l1211:
 10339  003D70  C002  F001         	movff	i2_isdigit$1280,??i2_isdigit
 10340  003D74  3001               	rrcf	??i2_isdigit,w,c
 10341  003D76  0012               	return	
 10342  003D78                     __end_ofi2_isdigit:
 10343                           	opt stack 0
 10344                           pclatu	equ	0xFFB
 10345                           pclath	equ	0xFFA
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           intcon	equ	0xFF2
 10353                           intcon3	equ	0xFF0
 10354                           indf0	equ	0xFEF
 10355                           postinc0	equ	0xFEE
 10356                           fsr0h	equ	0xFEA
 10357                           fsr0l	equ	0xFE9
 10358                           wreg	equ	0xFE8
 10359                           postdec1	equ	0xFE5
 10360                           fsr1h	equ	0xFE2
 10361                           fsr1l	equ	0xFE1
 10362                           indf2	equ	0xFDF
 10363                           postinc2	equ	0xFDE
 10364                           postdec2	equ	0xFDD
 10365                           fsr2h	equ	0xFDA
 10366                           fsr2l	equ	0xFD9
 10367                           status	equ	0xFD8
 10368                           
 10369 ;; *************** function i2___lwmod *****************
 10370 ;; Defined at:
 10371 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;  dividend        2    7[COMRAM] unsigned int 
 10374 ;;  divisor         2    9[COMRAM] unsigned int 
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  2    7[COMRAM] unsigned int 
 10379 ;; Registers used:
 10380 ;;		wreg, status,2, status,0
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10386 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10390 ;;Total ram usage:        5 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; This function calls:
 10393 ;;		Nothing
 10394 ;; This function is called by:
 10395 ;;		i2_printf
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           	psect	text25
 10400  003BB6                     __ptext25:
 10401                           	opt stack 0
 10402  003BB6                     i2___lwmod:
 10403                           	opt stack 25
 10404                           
 10405                           ;incstack = 0
 10406  003BB6  500A               	movf	i2___lwmod@divisor,w,c
 10407  003BB8  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10408  003BBA  B4D8               	btfsc	status,2,c
 10409  003BBC  D018               	goto	i2l1305
 10410  003BBE  0E01               	movlw	1
 10411  003BC0  6E0C               	movwf	i2___lwmod@counter,c
 10412  003BC2  D004               	goto	i2l1300
 10413  003BC4  90D8               	bcf	status,0,c
 10414  003BC6  360A               	rlcf	i2___lwmod@divisor,f,c
 10415  003BC8  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10416  003BCA  2A0C               	incf	i2___lwmod@counter,f,c
 10417  003BCC                     i2l1300:
 10418  003BCC  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10419  003BCE  D7FA               	goto	i2l1301
 10420  003BD0                     i2u272_40:
 10421  003BD0  500A               	movf	i2___lwmod@divisor,w,c
 10422  003BD2  5C08               	subwf	i2___lwmod@dividend,w,c
 10423  003BD4  500B               	movf	i2___lwmod@divisor+1,w,c
 10424  003BD6  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10425  003BD8  A0D8               	btfss	status,0,c
 10426  003BDA  D004               	goto	i2l1304
 10427  003BDC  500A               	movf	i2___lwmod@divisor,w,c
 10428  003BDE  5E08               	subwf	i2___lwmod@dividend,f,c
 10429  003BE0  500B               	movf	i2___lwmod@divisor+1,w,c
 10430  003BE2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10431  003BE4                     i2l1304:
 10432  003BE4  90D8               	bcf	status,0,c
 10433  003BE6  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10434  003BE8  320A               	rrcf	i2___lwmod@divisor,f,c
 10435  003BEA  2E0C               	decfsz	i2___lwmod@counter,f,c
 10436  003BEC  D7F1               	goto	i2u272_40
 10437  003BEE                     i2l1305:
 10438  003BEE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10439  003BF2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10440  003BF6  0012               	return		;funcret
 10441  003BF8                     __end_ofi2___lwmod:
 10442                           	opt stack 0
 10443                           pclatu	equ	0xFFB
 10444                           pclath	equ	0xFFA
 10445                           tblptru	equ	0xFF8
 10446                           tblptrh	equ	0xFF7
 10447                           tblptrl	equ	0xFF6
 10448                           tablat	equ	0xFF5
 10449                           prodh	equ	0xFF4
 10450                           prodl	equ	0xFF3
 10451                           intcon	equ	0xFF2
 10452                           intcon3	equ	0xFF0
 10453                           indf0	equ	0xFEF
 10454                           postinc0	equ	0xFEE
 10455                           fsr0h	equ	0xFEA
 10456                           fsr0l	equ	0xFE9
 10457                           wreg	equ	0xFE8
 10458                           postdec1	equ	0xFE5
 10459                           fsr1h	equ	0xFE2
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           fsr2h	equ	0xFDA
 10465                           fsr2l	equ	0xFD9
 10466                           status	equ	0xFD8
 10467                           
 10468 ;; *************** function i2___lwdiv *****************
 10469 ;; Defined at:
 10470 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;  dividend        2    0[COMRAM] unsigned int 
 10473 ;;  divisor         2    2[COMRAM] unsigned int 
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10476 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10477 ;; Return value:  Size  Location     Type
 10478 ;;                  2    0[COMRAM] unsigned int 
 10479 ;; Registers used:
 10480 ;;		wreg, status,2, status,0
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;Total ram usage:        7 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; This function calls:
 10493 ;;		Nothing
 10494 ;; This function is called by:
 10495 ;;		i2_printf
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           	psect	text26
 10500  0039F8                     __ptext26:
 10501                           	opt stack 0
 10502  0039F8                     i2___lwdiv:
 10503                           	opt stack 25
 10504                           
 10505                           ;incstack = 0
 10506  0039F8  0E00               	movlw	0
 10507  0039FA  6E06               	movwf	i2___lwdiv@quotient+1,c
 10508  0039FC  0E00               	movlw	0
 10509  0039FE  6E05               	movwf	i2___lwdiv@quotient,c
 10510  003A00  5003               	movf	i2___lwdiv@divisor,w,c
 10511  003A02  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10512  003A04  B4D8               	btfsc	status,2,c
 10513  003A06  D01C               	goto	i2l1295
 10514  003A08  0E01               	movlw	1
 10515  003A0A  6E07               	movwf	i2___lwdiv@counter,c
 10516  003A0C  D004               	goto	i2l1290
 10517  003A0E  90D8               	bcf	status,0,c
 10518  003A10  3603               	rlcf	i2___lwdiv@divisor,f,c
 10519  003A12  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10520  003A14  2A07               	incf	i2___lwdiv@counter,f,c
 10521  003A16                     i2l1290:
 10522  003A16  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10523  003A18  D7FA               	goto	i2l1291
 10524  003A1A                     i2u269_40:
 10525  003A1A  90D8               	bcf	status,0,c
 10526  003A1C  3605               	rlcf	i2___lwdiv@quotient,f,c
 10527  003A1E  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10528  003A20  5003               	movf	i2___lwdiv@divisor,w,c
 10529  003A22  5C01               	subwf	i2___lwdiv@dividend,w,c
 10530  003A24  5004               	movf	i2___lwdiv@divisor+1,w,c
 10531  003A26  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10532  003A28  A0D8               	btfss	status,0,c
 10533  003A2A  D005               	goto	i2l1294
 10534  003A2C  5003               	movf	i2___lwdiv@divisor,w,c
 10535  003A2E  5E01               	subwf	i2___lwdiv@dividend,f,c
 10536  003A30  5004               	movf	i2___lwdiv@divisor+1,w,c
 10537  003A32  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10538  003A34  8005               	bsf	i2___lwdiv@quotient,0,c
 10539  003A36                     i2l1294:
 10540  003A36  90D8               	bcf	status,0,c
 10541  003A38  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10542  003A3A  3203               	rrcf	i2___lwdiv@divisor,f,c
 10543  003A3C  2E07               	decfsz	i2___lwdiv@counter,f,c
 10544  003A3E  D7ED               	goto	i2u269_40
 10545  003A40                     i2l1295:
 10546  003A40  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10547  003A44  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10548  003A48  0012               	return		;funcret
 10549  003A4A                     __end_ofi2___lwdiv:
 10550                           	opt stack 0
 10551                           pclatu	equ	0xFFB
 10552                           pclath	equ	0xFFA
 10553                           tblptru	equ	0xFF8
 10554                           tblptrh	equ	0xFF7
 10555                           tblptrl	equ	0xFF6
 10556                           tablat	equ	0xFF5
 10557                           prodh	equ	0xFF4
 10558                           prodl	equ	0xFF3
 10559                           intcon	equ	0xFF2
 10560                           intcon3	equ	0xFF0
 10561                           indf0	equ	0xFEF
 10562                           postinc0	equ	0xFEE
 10563                           fsr0h	equ	0xFEA
 10564                           fsr0l	equ	0xFE9
 10565                           wreg	equ	0xFE8
 10566                           postdec1	equ	0xFE5
 10567                           fsr1h	equ	0xFE2
 10568                           fsr1l	equ	0xFE1
 10569                           indf2	equ	0xFDF
 10570                           postinc2	equ	0xFDE
 10571                           postdec2	equ	0xFDD
 10572                           fsr2h	equ	0xFDA
 10573                           fsr2l	equ	0xFD9
 10574                           status	equ	0xFD8
 10575                           
 10576 ;; *************** function i2_initLCD *****************
 10577 ;; Defined at:
 10578 ;;		line 60 in file "lcd.c"
 10579 ;; Parameters:    Size  Location     Type
 10580 ;;		None
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;		None
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  1    wreg      void 
 10585 ;; Registers used:
 10586 ;;		wreg, status,2, status,0, cstack
 10587 ;; Tracked objects:
 10588 ;;		On entry : 0/0
 10589 ;;		On exit  : 0/0
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;Total ram usage:        1 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:    2
 10599 ;; This function calls:
 10600 ;;		i2_lcdInst
 10601 ;; This function is called by:
 10602 ;;		_interruptHandler
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           	psect	text27
 10607  003A96                     __ptext27:
 10608                           	opt stack 0
 10609  003A96                     i2_initLCD:
 10610                           	opt stack 24
 10611                           
 10612                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
 10613                           
 10614                           ;incstack = 0
 10615  003A96  0EC3               	movlw	195
 10616  003A98  6E04               	movwf	??i2_initLCD& (0+255),c
 10617  003A9A  0ECD               	movlw	205
 10618  003A9C                     i2u545_47:
 10619  003A9C  2EE8               	decfsz	wreg,f,c
 10620  003A9E  D7FE               	bra	i2u545_47
 10621  003AA0  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 10622  003AA2  D7FC               	bra	i2u545_47
 10623  003AA4  F000               	nop	
 10624                           
 10625                           ;lcd.c: 69: lcdInst(0b00110011);
 10626  003AA6  0E33               	movlw	51
 10627  003AA8  ECE8  F01E         	call	i2_lcdInst
 10628                           
 10629                           ;lcd.c: 70: lcdInst(0b00110010);
 10630  003AAC  0E32               	movlw	50
 10631  003AAE  ECE8  F01E         	call	i2_lcdInst
 10632                           
 10633                           ;lcd.c: 71: lcdInst(0b00101000);
 10634  003AB2  0E28               	movlw	40
 10635  003AB4  ECE8  F01E         	call	i2_lcdInst
 10636                           
 10637                           ;lcd.c: 72: lcdInst(0b00001111);
 10638  003AB8  0E0F               	movlw	15
 10639  003ABA  ECE8  F01E         	call	i2_lcdInst
 10640                           
 10641                           ;lcd.c: 73: lcdInst(0b00000110);
 10642  003ABE  0E06               	movlw	6
 10643  003AC0  ECE8  F01E         	call	i2_lcdInst
 10644                           
 10645                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10646  003AC4  0E01               	movlw	1
 10647  003AC6  ECE8  F01E         	call	i2_lcdInst
 10648  003ACA  0EC3               	movlw	195
 10649  003ACC  6E04               	movwf	??i2_initLCD& (0+255),c
 10650  003ACE  0ECD               	movlw	205
 10651  003AD0                     i2u546_47:
 10652  003AD0  2EE8               	decfsz	wreg,f,c
 10653  003AD2  D7FE               	bra	i2u546_47
 10654  003AD4  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 10655  003AD6  D7FC               	bra	i2u546_47
 10656  003AD8  F000               	nop	
 10657                           
 10658                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 10659  003ADA  0E0F               	movlw	15
 10660  003ADC  ECE8  F01E         	call	i2_lcdInst
 10661  003AE0  0012               	return		;funcret
 10662  003AE2                     __end_ofi2_initLCD:
 10663                           	opt stack 0
 10664                           pclatu	equ	0xFFB
 10665                           pclath	equ	0xFFA
 10666                           tblptru	equ	0xFF8
 10667                           tblptrh	equ	0xFF7
 10668                           tblptrl	equ	0xFF6
 10669                           tablat	equ	0xFF5
 10670                           prodh	equ	0xFF4
 10671                           prodl	equ	0xFF3
 10672                           intcon	equ	0xFF2
 10673                           intcon3	equ	0xFF0
 10674                           indf0	equ	0xFEF
 10675                           postinc0	equ	0xFEE
 10676                           fsr0h	equ	0xFEA
 10677                           fsr0l	equ	0xFE9
 10678                           wreg	equ	0xFE8
 10679                           postdec1	equ	0xFE5
 10680                           fsr1h	equ	0xFE2
 10681                           fsr1l	equ	0xFE1
 10682                           indf2	equ	0xFDF
 10683                           postinc2	equ	0xFDE
 10684                           postdec2	equ	0xFDD
 10685                           fsr2h	equ	0xFDA
 10686                           fsr2l	equ	0xFD9
 10687                           status	equ	0xFD8
 10688                           
 10689 ;; *************** function i2_lcdInst *****************
 10690 ;; Defined at:
 10691 ;;		line 11 in file "lcd.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;  data            1    wreg     unsigned char 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;  data            1    2[COMRAM] unsigned char 
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  1    wreg      void 
 10698 ;; Registers used:
 10699 ;;		wreg, status,2, status,0, cstack
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10709 ;;Total ram usage:        1 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    1
 10712 ;; This function calls:
 10713 ;;		i2_lcdNibble
 10714 ;; This function is called by:
 10715 ;;		_interruptHandler
 10716 ;;		i2_initLCD
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           	psect	text28
 10721  003DD0                     __ptext28:
 10722                           	opt stack 0
 10723  003DD0                     i2_lcdInst:
 10724                           	opt stack 25
 10725                           
 10726                           ;incstack = 0
 10727                           ;i2lcdInst@data stored from wreg
 10728  003DD0  6E03               	movwf	i2lcdInst@data,c
 10729                           
 10730                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 10731  003DD2  948C               	bcf	3980,2,c	;volatile
 10732                           
 10733                           ;lcd.c: 20: lcdNibble(data);
 10734  003DD4  5003               	movf	i2lcdInst@data,w,c
 10735  003DD6  ECF4  F01A         	call	i2_lcdNibble
 10736                           
 10737                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10738  003DDA  0EC8               	movlw	200
 10739  003DDC                     i2u547_47:
 10740  003DDC  D000               	nop2	
 10741  003DDE  2EE8               	decfsz	wreg,f,c
 10742  003DE0  D7FD               	bra	i2u547_47
 10743  003DE2  0012               	return		;funcret
 10744  003DE4                     __end_ofi2_lcdInst:
 10745                           	opt stack 0
 10746                           pclatu	equ	0xFFB
 10747                           pclath	equ	0xFFA
 10748                           tblptru	equ	0xFF8
 10749                           tblptrh	equ	0xFF7
 10750                           tblptrl	equ	0xFF6
 10751                           tablat	equ	0xFF5
 10752                           prodh	equ	0xFF4
 10753                           prodl	equ	0xFF3
 10754                           intcon	equ	0xFF2
 10755                           intcon3	equ	0xFF0
 10756                           indf0	equ	0xFEF
 10757                           postinc0	equ	0xFEE
 10758                           fsr0h	equ	0xFEA
 10759                           fsr0l	equ	0xFE9
 10760                           wreg	equ	0xFE8
 10761                           postdec1	equ	0xFE5
 10762                           fsr1h	equ	0xFE2
 10763                           fsr1l	equ	0xFE1
 10764                           indf2	equ	0xFDF
 10765                           postinc2	equ	0xFDE
 10766                           postdec2	equ	0xFDD
 10767                           fsr2h	equ	0xFDA
 10768                           fsr2l	equ	0xFD9
 10769                           status	equ	0xFD8
 10770                           
 10771 ;; *************** function i2_lcdNibble *****************
 10772 ;; Defined at:
 10773 ;;		line 37 in file "lcd.c"
 10774 ;; Parameters:    Size  Location     Type
 10775 ;;  data            1    wreg     unsigned char 
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;  data            1    1[COMRAM] unsigned char 
 10778 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  1    wreg      void 
 10781 ;; Registers used:
 10782 ;;		wreg, status,2, status,0
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;Total ram usage:        2 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; This function calls:
 10795 ;;		Nothing
 10796 ;; This function is called by:
 10797 ;;		i2_lcdInst
 10798 ;;		i2_putch
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           	psect	text29
 10803  0035E8                     __ptext29:
 10804                           	opt stack 0
 10805  0035E8                     i2_lcdNibble:
 10806                           	opt stack 25
 10807                           
 10808                           ;incstack = 0
 10809                           ;i2lcdNibble@data stored from wreg
 10810  0035E8  6E02               	movwf	i2lcdNibble@data,c
 10811                           
 10812                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 10813  0035EA  5002               	movf	i2lcdNibble@data,w,c
 10814  0035EC  0BF0               	andlw	240
 10815  0035EE  6E01               	movwf	i2lcdNibble@temp,c
 10816                           
 10817                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 10818  0035F0  508C               	movf	3980,w,c	;volatile
 10819  0035F2  0B0F               	andlw	15
 10820  0035F4  6E8C               	movwf	3980,c	;volatile
 10821                           
 10822                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 10823  0035F6  5001               	movf	i2lcdNibble@temp,w,c
 10824  0035F8  108C               	iorwf	3980,w,c	;volatile
 10825  0035FA  6E8C               	movwf	3980,c	;volatile
 10826                           
 10827                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10828  0035FC  0E00               	movlw	0
 10829  0035FE  BEF2               	btfsc	intcon,7,c	;volatile
 10830  003600  0E01               	movlw	1
 10831  003602  0100               	movlb	0	; () banked
 10832  003604  6FC2               	movwf	_LCDinterruptState& (0+255),b
 10833                           
 10834                           ; BSR set to: 0
 10835  003606  9EF2               	bcf	intcon,7,c	;volatile
 10836                           
 10837                           ; BSR set to: 0
 10838  003608  868C               	bsf	3980,3,c	;volatile
 10839                           
 10840                           ; BSR set to: 0
 10841  00360A  0E53               	movlw	83
 10842  00360C                     i2u548_47:
 10843  00360C  2EE8               	decfsz	wreg,f,c
 10844  00360E  D7FE               	bra	i2u548_47
 10845  003610  F000               	nop	
 10846  003612  968C               	bcf	3980,3,c	;volatile
 10847  003614  0EC8               	movlw	200
 10848  003616                     i2u549_47:
 10849  003616  D000               	nop2	
 10850  003618  2EE8               	decfsz	wreg,f,c
 10851  00361A  D7FD               	bra	i2u549_47
 10852  00361C  0100               	movlb	0	; () banked
 10853  00361E  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
 10854  003620  D002               	bra	i2u242_45
 10855  003622  9EF2               	bcf	intcon,7,c	;volatile
 10856  003624  D001               	bra	i2u242_46
 10857  003626                     i2u242_45:
 10858  003626  8EF2               	bsf	intcon,7,c	;volatile
 10859  003628                     i2u242_46:
 10860                           
 10861                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 10862  003628  3802               	swapf	i2lcdNibble@data,w,c
 10863  00362A  0BF0               	andlw	240
 10864  00362C  6E02               	movwf	i2lcdNibble@data,c
 10865                           
 10866                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 10867  00362E  5002               	movf	i2lcdNibble@data,w,c
 10868  003630  0BF0               	andlw	240
 10869  003632  6E01               	movwf	i2lcdNibble@temp,c
 10870                           
 10871                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 10872  003634  508C               	movf	3980,w,c	;volatile
 10873  003636  0B0F               	andlw	15
 10874  003638  6E8C               	movwf	3980,c	;volatile
 10875                           
 10876                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 10877  00363A  5001               	movf	i2lcdNibble@temp,w,c
 10878  00363C  108C               	iorwf	3980,w,c	;volatile
 10879  00363E  6E8C               	movwf	3980,c	;volatile
 10880                           
 10881                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10882  003640  0E00               	movlw	0
 10883  003642  BEF2               	btfsc	intcon,7,c	;volatile
 10884  003644  0E01               	movlw	1
 10885  003646  0100               	movlb	0	; () banked
 10886  003648  6FC2               	movwf	_LCDinterruptState& (0+255),b
 10887                           
 10888                           ; BSR set to: 0
 10889  00364A  9EF2               	bcf	intcon,7,c	;volatile
 10890                           
 10891                           ; BSR set to: 0
 10892  00364C  868C               	bsf	3980,3,c	;volatile
 10893                           
 10894                           ; BSR set to: 0
 10895  00364E  0E53               	movlw	83
 10896  003650                     i2u550_47:
 10897  003650  2EE8               	decfsz	wreg,f,c
 10898  003652  D7FE               	bra	i2u550_47
 10899  003654  F000               	nop	
 10900  003656  968C               	bcf	3980,3,c	;volatile
 10901  003658  0EC8               	movlw	200
 10902  00365A                     i2u551_47:
 10903  00365A  D000               	nop2	
 10904  00365C  2EE8               	decfsz	wreg,f,c
 10905  00365E  D7FD               	bra	i2u551_47
 10906  003660  0100               	movlb	0	; () banked
 10907  003662  B1C2               	btfsc	_LCDinterruptState& (0+255),0,b
 10908  003664  D002               	bra	i2u243_45
 10909  003666  9EF2               	bcf	intcon,7,c	;volatile
 10910  003668  D001               	bra	i2u243_46
 10911  00366A                     i2u243_45:
 10912  00366A  8EF2               	bsf	intcon,7,c	;volatile
 10913  00366C                     i2u243_46:
 10914  00366C  0012               	return		;funcret
 10915  00366E                     __end_ofi2_lcdNibble:
 10916                           	opt stack 0
 10917                           pclatu	equ	0xFFB
 10918                           pclath	equ	0xFFA
 10919                           tblptru	equ	0xFF8
 10920                           tblptrh	equ	0xFF7
 10921                           tblptrl	equ	0xFF6
 10922                           tablat	equ	0xFF5
 10923                           prodh	equ	0xFF4
 10924                           prodl	equ	0xFF3
 10925                           intcon	equ	0xFF2
 10926                           intcon3	equ	0xFF0
 10927                           indf0	equ	0xFEF
 10928                           postinc0	equ	0xFEE
 10929                           fsr0h	equ	0xFEA
 10930                           fsr0l	equ	0xFE9
 10931                           wreg	equ	0xFE8
 10932                           postdec1	equ	0xFE5
 10933                           fsr1h	equ	0xFE2
 10934                           fsr1l	equ	0xFE1
 10935                           indf2	equ	0xFDF
 10936                           postinc2	equ	0xFDE
 10937                           postdec2	equ	0xFDD
 10938                           fsr2h	equ	0xFDA
 10939                           fsr2l	equ	0xFD9
 10940                           status	equ	0xFD8
 10941                           
 10942 ;; *************** function i2___awdiv *****************
 10943 ;; Defined at:
 10944 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  dividend        2    0[COMRAM] int 
 10947 ;;  divisor         2    2[COMRAM] int 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  __awdiv         2    6[COMRAM] int 
 10950 ;;  __awdiv         1    5[COMRAM] unsigned char 
 10951 ;;  __awdiv         1    4[COMRAM] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  2    0[COMRAM] int 
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10961 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10962 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10964 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10965 ;;Total ram usage:        8 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; This function calls:
 10968 ;;		Nothing
 10969 ;; This function is called by:
 10970 ;;		_interruptHandler
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           	psect	text30
 10975  0036F4                     __ptext30:
 10976                           	opt stack 0
 10977  0036F4                     i2___awdiv:
 10978                           	opt stack 26
 10979                           
 10980                           ;incstack = 0
 10981  0036F4  0E00               	movlw	0
 10982  0036F6  6E06               	movwf	i2___awdiv@sign,c
 10983  0036F8  AE04               	btfss	i2___awdiv@divisor+1,7,c
 10984  0036FA  D006               	goto	i2l1049
 10985  0036FC  6C03               	negf	i2___awdiv@divisor,c
 10986  0036FE  1E04               	comf	i2___awdiv@divisor+1,f,c
 10987  003700  B0D8               	btfsc	status,0,c
 10988  003702  2A04               	incf	i2___awdiv@divisor+1,f,c
 10989  003704  0E01               	movlw	1
 10990  003706  6E06               	movwf	i2___awdiv@sign,c
 10991  003708                     i2l1049:
 10992  003708  AE02               	btfss	i2___awdiv@dividend+1,7,c
 10993  00370A  D006               	goto	i2l1050
 10994  00370C  6C01               	negf	i2___awdiv@dividend,c
 10995  00370E  1E02               	comf	i2___awdiv@dividend+1,f,c
 10996  003710  B0D8               	btfsc	status,0,c
 10997  003712  2A02               	incf	i2___awdiv@dividend+1,f,c
 10998  003714  0E01               	movlw	1
 10999  003716  1A06               	xorwf	i2___awdiv@sign,f,c
 11000  003718                     i2l1050:
 11001  003718  0E00               	movlw	0
 11002  00371A  6E08               	movwf	i2___awdiv@quotient+1,c
 11003  00371C  0E00               	movlw	0
 11004  00371E  6E07               	movwf	i2___awdiv@quotient,c
 11005  003720  5003               	movf	i2___awdiv@divisor,w,c
 11006  003722  1004               	iorwf	i2___awdiv@divisor+1,w,c
 11007  003724  B4D8               	btfsc	status,2,c
 11008  003726  D01C               	goto	i2l1057
 11009  003728  0E01               	movlw	1
 11010  00372A  6E05               	movwf	i2___awdiv@counter,c
 11011  00372C  D004               	goto	i2l1052
 11012  00372E  90D8               	bcf	status,0,c
 11013  003730  3603               	rlcf	i2___awdiv@divisor,f,c
 11014  003732  3604               	rlcf	i2___awdiv@divisor+1,f,c
 11015  003734  2A05               	incf	i2___awdiv@counter,f,c
 11016  003736                     i2l1052:
 11017  003736  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11018  003738  D7FA               	goto	i2l1053
 11019  00373A                     i2u384_40:
 11020  00373A  90D8               	bcf	status,0,c
 11021  00373C  3607               	rlcf	i2___awdiv@quotient,f,c
 11022  00373E  3608               	rlcf	i2___awdiv@quotient+1,f,c
 11023  003740  5003               	movf	i2___awdiv@divisor,w,c
 11024  003742  5C01               	subwf	i2___awdiv@dividend,w,c
 11025  003744  5004               	movf	i2___awdiv@divisor+1,w,c
 11026  003746  5802               	subwfb	i2___awdiv@dividend+1,w,c
 11027  003748  A0D8               	btfss	status,0,c
 11028  00374A  D005               	goto	i2l1056
 11029  00374C  5003               	movf	i2___awdiv@divisor,w,c
 11030  00374E  5E01               	subwf	i2___awdiv@dividend,f,c
 11031  003750  5004               	movf	i2___awdiv@divisor+1,w,c
 11032  003752  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 11033  003754  8007               	bsf	i2___awdiv@quotient,0,c
 11034  003756                     i2l1056:
 11035  003756  90D8               	bcf	status,0,c
 11036  003758  3204               	rrcf	i2___awdiv@divisor+1,f,c
 11037  00375A  3203               	rrcf	i2___awdiv@divisor,f,c
 11038  00375C  2E05               	decfsz	i2___awdiv@counter,f,c
 11039  00375E  D7ED               	goto	i2u384_40
 11040  003760                     i2l1057:
 11041  003760  5006               	movf	i2___awdiv@sign,w,c
 11042  003762  B4D8               	btfsc	status,2,c
 11043  003764  D004               	goto	i2l1058
 11044  003766  6C07               	negf	i2___awdiv@quotient,c
 11045  003768  1E08               	comf	i2___awdiv@quotient+1,f,c
 11046  00376A  B0D8               	btfsc	status,0,c
 11047  00376C  2A08               	incf	i2___awdiv@quotient+1,f,c
 11048  00376E                     i2l1058:
 11049  00376E  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 11050  003772  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 11051  003776  0012               	return	
 11052  003778                     __end_ofi2___awdiv:
 11053                           	opt stack 0
 11054                           pclatu	equ	0xFFB
 11055                           pclath	equ	0xFFA
 11056                           tblptru	equ	0xFF8
 11057                           tblptrh	equ	0xFF7
 11058                           tblptrl	equ	0xFF6
 11059                           tablat	equ	0xFF5
 11060                           prodh	equ	0xFF4
 11061                           prodl	equ	0xFF3
 11062                           intcon	equ	0xFF2
 11063                           intcon3	equ	0xFF0
 11064                           indf0	equ	0xFEF
 11065                           postinc0	equ	0xFEE
 11066                           fsr0h	equ	0xFEA
 11067                           fsr0l	equ	0xFE9
 11068                           wreg	equ	0xFE8
 11069                           postdec1	equ	0xFE5
 11070                           fsr1h	equ	0xFE2
 11071                           fsr1l	equ	0xFE1
 11072                           indf2	equ	0xFDF
 11073                           postinc2	equ	0xFDE
 11074                           postdec2	equ	0xFDD
 11075                           fsr2h	equ	0xFDA
 11076                           fsr2l	equ	0xFD9
 11077                           status	equ	0xFD8
 11078                           
 11079 ;; *************** function i2_I2C_Master_Write *****************
 11080 ;; Defined at:
 11081 ;;		line 108 in file "I2C.c"
 11082 ;; Parameters:    Size  Location     Type
 11083 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;		None
 11086 ;; Return value:  Size  Location     Type
 11087 ;;                  1    wreg      void 
 11088 ;; Registers used:
 11089 ;;		wreg, status,2, status,0, cstack
 11090 ;; Tracked objects:
 11091 ;;		On entry : 0/0
 11092 ;;		On exit  : 0/0
 11093 ;;		Unchanged: 0/0
 11094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11099 ;;Total ram usage:        2 bytes
 11100 ;; Hardware stack levels used:    1
 11101 ;; Hardware stack levels required when called:    1
 11102 ;; This function calls:
 11103 ;;		i2_I2C_Master_Wait
 11104 ;; This function is called by:
 11105 ;;		_interruptHandler
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           	psect	text31
 11110  003E1A                     __ptext31:
 11111                           	opt stack 0
 11112  003E1A                     i2_I2C_Master_Write:
 11113                           	opt stack 25
 11114                           
 11115                           ;I2C.c: 116: I2C_Master_Wait();
 11116                           
 11117                           ;incstack = 0
 11118  003E1A  ECF2  F01E         	call	i2_I2C_Master_Wait	;wreg free
 11119                           
 11120                           ;I2C.c: 117: SSPBUF = byteToWrite;
 11121  003E1E  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 11122  003E22  0012               	return		;funcret
 11123  003E24                     __end_ofi2_I2C_Master_Write:
 11124                           	opt stack 0
 11125                           pclatu	equ	0xFFB
 11126                           pclath	equ	0xFFA
 11127                           tblptru	equ	0xFF8
 11128                           tblptrh	equ	0xFF7
 11129                           tblptrl	equ	0xFF6
 11130                           tablat	equ	0xFF5
 11131                           prodh	equ	0xFF4
 11132                           prodl	equ	0xFF3
 11133                           intcon	equ	0xFF2
 11134                           intcon3	equ	0xFF0
 11135                           indf0	equ	0xFEF
 11136                           postinc0	equ	0xFEE
 11137                           fsr0h	equ	0xFEA
 11138                           fsr0l	equ	0xFE9
 11139                           wreg	equ	0xFE8
 11140                           postdec1	equ	0xFE5
 11141                           fsr1h	equ	0xFE2
 11142                           fsr1l	equ	0xFE1
 11143                           indf2	equ	0xFDF
 11144                           postinc2	equ	0xFDE
 11145                           postdec2	equ	0xFDD
 11146                           fsr2h	equ	0xFDA
 11147                           fsr2l	equ	0xFD9
 11148                           status	equ	0xFD8
 11149                           
 11150 ;; *************** function i2_I2C_Master_Stop *****************
 11151 ;; Defined at:
 11152 ;;		line 95 in file "I2C.c"
 11153 ;; Parameters:    Size  Location     Type
 11154 ;;		None
 11155 ;; Auto vars:     Size  Location     Type
 11156 ;;		None
 11157 ;; Return value:  Size  Location     Type
 11158 ;;                  1    wreg      void 
 11159 ;; Registers used:
 11160 ;;		wreg, status,2, status,0, cstack
 11161 ;; Tracked objects:
 11162 ;;		On entry : 0/0
 11163 ;;		On exit  : 0/0
 11164 ;;		Unchanged: 0/0
 11165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;Total ram usage:        0 bytes
 11171 ;; Hardware stack levels used:    1
 11172 ;; Hardware stack levels required when called:    1
 11173 ;; This function calls:
 11174 ;;		i2_I2C_Master_Wait
 11175 ;; This function is called by:
 11176 ;;		_interruptHandler
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           	psect	text32
 11181  003E34                     __ptext32:
 11182                           	opt stack 0
 11183  003E34                     i2_I2C_Master_Stop:
 11184                           	opt stack 25
 11185                           
 11186                           ;I2C.c: 104: I2C_Master_Wait();
 11187                           
 11188                           ;incstack = 0
 11189  003E34  ECF2  F01E         	call	i2_I2C_Master_Wait	;wreg free
 11190                           
 11191                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 11192  003E38  84C5               	bsf	4037,2,c	;volatile
 11193  003E3A  0012               	return		;funcret
 11194  003E3C                     __end_ofi2_I2C_Master_Stop:
 11195                           	opt stack 0
 11196                           pclatu	equ	0xFFB
 11197                           pclath	equ	0xFFA
 11198                           tblptru	equ	0xFF8
 11199                           tblptrh	equ	0xFF7
 11200                           tblptrl	equ	0xFF6
 11201                           tablat	equ	0xFF5
 11202                           prodh	equ	0xFF4
 11203                           prodl	equ	0xFF3
 11204                           intcon	equ	0xFF2
 11205                           intcon3	equ	0xFF0
 11206                           indf0	equ	0xFEF
 11207                           postinc0	equ	0xFEE
 11208                           fsr0h	equ	0xFEA
 11209                           fsr0l	equ	0xFE9
 11210                           wreg	equ	0xFE8
 11211                           postdec1	equ	0xFE5
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221 ;; *************** function i2_I2C_Master_Start *****************
 11222 ;; Defined at:
 11223 ;;		line 69 in file "I2C.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;		None
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;		None
 11228 ;; Return value:  Size  Location     Type
 11229 ;;                  1    wreg      void 
 11230 ;; Registers used:
 11231 ;;		wreg, status,2, status,0, cstack
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;Total ram usage:        0 bytes
 11242 ;; Hardware stack levels used:    1
 11243 ;; Hardware stack levels required when called:    1
 11244 ;; This function calls:
 11245 ;;		i2_I2C_Master_Wait
 11246 ;; This function is called by:
 11247 ;;		_interruptHandler
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           	psect	text33
 11252  003E3C                     __ptext33:
 11253                           	opt stack 0
 11254  003E3C                     i2_I2C_Master_Start:
 11255                           	opt stack 25
 11256                           
 11257                           ;I2C.c: 78: I2C_Master_Wait();
 11258                           
 11259                           ;incstack = 0
 11260  003E3C  ECF2  F01E         	call	i2_I2C_Master_Wait	;wreg free
 11261                           
 11262                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 11263  003E40  80C5               	bsf	4037,0,c	;volatile
 11264  003E42  0012               	return		;funcret
 11265  003E44                     __end_ofi2_I2C_Master_Start:
 11266                           	opt stack 0
 11267                           pclatu	equ	0xFFB
 11268                           pclath	equ	0xFFA
 11269                           tblptru	equ	0xFF8
 11270                           tblptrh	equ	0xFF7
 11271                           tblptrl	equ	0xFF6
 11272                           tablat	equ	0xFF5
 11273                           prodh	equ	0xFF4
 11274                           prodl	equ	0xFF3
 11275                           intcon	equ	0xFF2
 11276                           intcon3	equ	0xFF0
 11277                           indf0	equ	0xFEF
 11278                           postinc0	equ	0xFEE
 11279                           fsr0h	equ	0xFEA
 11280                           fsr0l	equ	0xFE9
 11281                           wreg	equ	0xFE8
 11282                           postdec1	equ	0xFE5
 11283                           fsr1h	equ	0xFE2
 11284                           fsr1l	equ	0xFE1
 11285                           indf2	equ	0xFDF
 11286                           postinc2	equ	0xFDE
 11287                           postdec2	equ	0xFDD
 11288                           fsr2h	equ	0xFDA
 11289                           fsr2l	equ	0xFD9
 11290                           status	equ	0xFD8
 11291                           
 11292 ;; *************** function i2_I2C_Master_Read *****************
 11293 ;; Defined at:
 11294 ;;		line 120 in file "I2C.c"
 11295 ;; Parameters:    Size  Location     Type
 11296 ;;  ackBit          1    wreg     unsigned char 
 11297 ;; Auto vars:     Size  Location     Type
 11298 ;;  ackBit          1    1[COMRAM] unsigned char 
 11299 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      unsigned char 
 11302 ;; Registers used:
 11303 ;;		wreg, status,2, status,0, cstack
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;Total ram usage:        2 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; Hardware stack levels required when called:    1
 11316 ;; This function calls:
 11317 ;;		i2_I2C_Master_Wait
 11318 ;; This function is called by:
 11319 ;;		_interruptHandler
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           	psect	text34
 11324  003D14                     __ptext34:
 11325                           	opt stack 0
 11326  003D14                     i2_I2C_Master_Read:
 11327                           	opt stack 25
 11328                           
 11329                           ;incstack = 0
 11330                           ;i2I2C_Master_Read@ackBit stored from wreg
 11331  003D14  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 11332                           
 11333                           ;I2C.c: 130: unsigned char receivedByte;
 11334                           ;I2C.c: 132: I2C_Master_Wait();
 11335  003D16  ECF2  F01E         	call	i2_I2C_Master_Wait	;wreg free
 11336                           
 11337                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 11338  003D1A  86C5               	bsf	4037,3,c	;volatile
 11339                           
 11340                           ;I2C.c: 135: I2C_Master_Wait();
 11341  003D1C  ECF2  F01E         	call	i2_I2C_Master_Wait	;wreg free
 11342                           
 11343                           ;I2C.c: 136: receivedByte = SSPBUF;
 11344  003D20  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 11345                           
 11346                           ;I2C.c: 138: I2C_Master_Wait();
 11347  003D24  ECF2  F01E         	call	i2_I2C_Master_Wait	;wreg free
 11348                           
 11349                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 11350  003D28  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 11351  003D2A  D002               	bra	i2u350_45
 11352  003D2C  9AC5               	bcf	4037,5,c	;volatile
 11353  003D2E  D001               	bra	i2u350_46
 11354  003D30                     i2u350_45:
 11355  003D30  8AC5               	bsf	4037,5,c	;volatile
 11356  003D32                     i2u350_46:
 11357                           
 11358                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 11359  003D32  88C5               	bsf	4037,4,c	;volatile
 11360                           
 11361                           ;I2C.c: 142: return receivedByte;
 11362  003D34  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 11363  003D36  0012               	return	
 11364  003D38                     __end_ofi2_I2C_Master_Read:
 11365                           	opt stack 0
 11366                           pclatu	equ	0xFFB
 11367                           pclath	equ	0xFFA
 11368                           tblptru	equ	0xFF8
 11369                           tblptrh	equ	0xFF7
 11370                           tblptrl	equ	0xFF6
 11371                           tablat	equ	0xFF5
 11372                           prodh	equ	0xFF4
 11373                           prodl	equ	0xFF3
 11374                           intcon	equ	0xFF2
 11375                           intcon3	equ	0xFF0
 11376                           indf0	equ	0xFEF
 11377                           postinc0	equ	0xFEE
 11378                           fsr0h	equ	0xFEA
 11379                           fsr0l	equ	0xFE9
 11380                           wreg	equ	0xFE8
 11381                           postdec1	equ	0xFE5
 11382                           fsr1h	equ	0xFE2
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           postdec2	equ	0xFDD
 11387                           fsr2h	equ	0xFDA
 11388                           fsr2l	equ	0xFD9
 11389                           status	equ	0xFD8
 11390                           
 11391 ;; *************** function i2_I2C_Master_Wait *****************
 11392 ;; Defined at:
 11393 ;;		line 51 in file "I2C.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;		None
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;		None
 11398 ;; Return value:  Size  Location     Type
 11399 ;;                  1    wreg      void 
 11400 ;; Registers used:
 11401 ;;		wreg, status,2, status,0
 11402 ;; Tracked objects:
 11403 ;;		On entry : 0/0
 11404 ;;		On exit  : 0/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;Total ram usage:        1 bytes
 11412 ;; Hardware stack levels used:    1
 11413 ;; This function calls:
 11414 ;;		Nothing
 11415 ;; This function is called by:
 11416 ;;		i2_I2C_Master_Start
 11417 ;;		i2_I2C_Master_Stop
 11418 ;;		i2_I2C_Master_Write
 11419 ;;		i2_I2C_Master_Read
 11420 ;; This function uses a non-reentrant model
 11421 ;;
 11422                           
 11423                           	psect	text35
 11424  003DE4                     __ptext35:
 11425                           	opt stack 0
 11426  003DE4                     i2_I2C_Master_Wait:
 11427                           	opt stack 25
 11428                           
 11429                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 11430                           
 11431                           ;incstack = 0
 11432  003DE4  B4C7               	btfsc	4039,2,c	;volatile
 11433  003DE6  D7FE               	goto	i2_I2C_Master_Wait
 11434  003DE8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 11435  003DEC  0E1F               	movlw	31
 11436  003DEE  1601               	andwf	??i2_I2C_Master_Wait,f,c
 11437  003DF0  B4D8               	btfsc	status,2,c
 11438  003DF2  0012               	return	
 11439  003DF4  D7F7               	goto	i2_I2C_Master_Wait
 11440  003DF6                     __end_ofi2_I2C_Master_Wait:
 11441                           	opt stack 0
 11442                           pclatu	equ	0xFFB
 11443                           pclath	equ	0xFFA
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           intcon3	equ	0xFF0
 11452                           indf0	equ	0xFEF
 11453                           postinc0	equ	0xFEE
 11454                           fsr0h	equ	0xFEA
 11455                           fsr0l	equ	0xFE9
 11456                           wreg	equ	0xFE8
 11457                           postdec1	equ	0xFE5
 11458                           fsr1h	equ	0xFE2
 11459                           fsr1l	equ	0xFE1
 11460                           indf2	equ	0xFDF
 11461                           postinc2	equ	0xFDE
 11462                           postdec2	equ	0xFDD
 11463                           fsr2h	equ	0xFDA
 11464                           fsr2l	equ	0xFD9
 11465                           status	equ	0xFD8
 11466                           
 11467 ;; *************** function _strncmp *****************
 11468 ;; Defined at:
 11469 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 11472 ;;		 -> current_set(5), 
 11473 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 11474 ;;		 -> strs(100), 
 11475 ;;  len             2   10[COMRAM] unsigned int 
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;		None
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  2    6[COMRAM] int 
 11480 ;; Registers used:
 11481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11487 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;Total ram usage:        9 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		_interruptHandler
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           	psect	text36
 11501  00366E                     __ptext36:
 11502                           	opt stack 0
 11503  00366E                     _strncmp:
 11504                           	opt stack 26
 11505                           
 11506                           ;incstack = 0
 11507  00366E  D035               	goto	i2l1457
 11508  003670                     i2l4292:
 11509  003670  C007  FFD9         	movff	strncmp@s1,fsr2l
 11510  003674  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 11511  003678  50DF               	movf	indf2,w,c
 11512  00367A  B4D8               	btfsc	status,2,c
 11513  00367C  D010               	goto	i2u317_40
 11514  00367E  C007  FFD9         	movff	strncmp@s1,fsr2l
 11515  003682  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 11516  003686  50DF               	movf	indf2,w,c
 11517  003688  6E0D               	movwf	??_strncmp& (0+255),c
 11518  00368A  C009  FFF6         	movff	strncmp@s2,tblptrl
 11519  00368E  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 11520  003692                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11521  003692  6AF8               	clrf	tblptru,c
 11522  003694                     	endif
 11523  003694                     	if	0	;tblptru may be non-zero
 11524  003694                     	endif
 11525  003694  0008               	tblrd		*
 11526  003696  50F5               	movf	tablat,w,c
 11527  003698  180D               	xorwf	??_strncmp,w,c
 11528  00369A  B4D8               	btfsc	status,2,c
 11529  00369C  D01A               	goto	i2l1459
 11530  00369E                     i2u317_40:
 11531  00369E  C009  FFF6         	movff	strncmp@s2,tblptrl
 11532  0036A2  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 11533  0036A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11534  0036A6  6AF8               	clrf	tblptru,c
 11535  0036A8                     	endif
 11536  0036A8                     	if	0	;tblptru may be non-zero
 11537  0036A8                     	endif
 11538  0036A8  0008               	tblrd		*
 11539  0036AA  50F5               	movf	tablat,w,c
 11540  0036AC  6E0D               	movwf	??_strncmp& (0+255),c
 11541  0036AE  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 11542  0036B0  1E0D               	comf	??_strncmp,f,c
 11543  0036B2  1E0E               	comf	??_strncmp+1,f,c
 11544  0036B4  4A0D               	infsnz	??_strncmp,f,c
 11545  0036B6  2A0E               	incf	??_strncmp+1,f,c
 11546  0036B8  C007  FFD9         	movff	strncmp@s1,fsr2l
 11547  0036BC  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 11548  0036C0  50DF               	movf	indf2,w,c
 11549  0036C2  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 11550  0036C4  500F               	movf	??_strncmp+2,w,c
 11551  0036C6  240D               	addwf	??_strncmp,w,c
 11552  0036C8  6E07               	movwf	?_strncmp,c
 11553  0036CA  0E00               	movlw	0
 11554  0036CC  200E               	addwfc	??_strncmp+1,w,c
 11555  0036CE  6E08               	movwf	?_strncmp+1,c
 11556  0036D0  0012               	return	
 11557  0036D2                     i2l1459:
 11558  0036D2  4A07               	infsnz	strncmp@s1,f,c
 11559  0036D4  2A08               	incf	strncmp@s1+1,f,c
 11560  0036D6  4A09               	infsnz	strncmp@s2,f,c
 11561  0036D8  2A0A               	incf	strncmp@s2+1,f,c
 11562  0036DA                     i2l1457:
 11563  0036DA  060B               	decf	strncmp@len,f,c
 11564  0036DC  A0D8               	btfss	status,0,c
 11565  0036DE  060C               	decf	strncmp@len+1,f,c
 11566  0036E0  280B               	incf	strncmp@len,w,c
 11567  0036E2  E1C6               	bnz	i2l4292
 11568  0036E4  280C               	incf	strncmp@len+1,w,c
 11569  0036E6  A4D8               	btfss	status,2,c
 11570  0036E8  D7C3               	goto	i2l1458
 11571  0036EA  0E00               	movlw	0
 11572  0036EC  6E08               	movwf	?_strncmp+1,c
 11573  0036EE  0E00               	movlw	0
 11574  0036F0  6E07               	movwf	?_strncmp,c
 11575  0036F2  0012               	return	
 11576  0036F4                     __end_of_strncmp:
 11577                           	opt stack 0
 11578                           pclatu	equ	0xFFB
 11579                           pclath	equ	0xFFA
 11580                           tblptru	equ	0xFF8
 11581                           tblptrh	equ	0xFF7
 11582                           tblptrl	equ	0xFF6
 11583                           tablat	equ	0xFF5
 11584                           prodh	equ	0xFF4
 11585                           prodl	equ	0xFF3
 11586                           intcon	equ	0xFF2
 11587                           intcon3	equ	0xFF0
 11588                           indf0	equ	0xFEF
 11589                           postinc0	equ	0xFEE
 11590                           fsr0h	equ	0xFEA
 11591                           fsr0l	equ	0xFE9
 11592                           wreg	equ	0xFE8
 11593                           postdec1	equ	0xFE5
 11594                           fsr1h	equ	0xFE2
 11595                           fsr1l	equ	0xFE1
 11596                           indf2	equ	0xFDF
 11597                           postinc2	equ	0xFDE
 11598                           postdec2	equ	0xFDD
 11599                           fsr2h	equ	0xFDA
 11600                           fsr2l	equ	0xFD9
 11601                           status	equ	0xFD8
 11602                           
 11603 ;; *************** function _strcpy *****************
 11604 ;; Defined at:
 11605 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;  to              2    6[COMRAM] PTR unsigned char 
 11608 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 11609 ;;  from            2    8[COMRAM] PTR const unsigned char 
 11610 ;;		 -> STR_64(1), STR_62(1), STR_59(1), STR_56(2), 
 11611 ;;		 -> STR_55(2), STR_54(2), STR_53(2), current_set(5), 
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  cp              2   10[COMRAM] PTR unsigned char 
 11614 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 11615 ;; Return value:  Size  Location     Type
 11616 ;;                  2    6[COMRAM] PTR unsigned char 
 11617 ;; Registers used:
 11618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11619 ;; Tracked objects:
 11620 ;;		On entry : 0/0
 11621 ;;		On exit  : 0/0
 11622 ;;		Unchanged: 0/0
 11623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11627 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11628 ;;Total ram usage:        6 bytes
 11629 ;; Hardware stack levels used:    1
 11630 ;; This function calls:
 11631 ;;		Nothing
 11632 ;; This function is called by:
 11633 ;;		_interruptHandler
 11634 ;; This function uses a non-reentrant model
 11635 ;;
 11636                           
 11637                           	psect	text37
 11638  003B2C                     __ptext37:
 11639                           	opt stack 0
 11640  003B2C                     _strcpy:
 11641                           	opt stack 26
 11642                           
 11643                           ;incstack = 0
 11644  003B2C  C007  F00B         	movff	strcpy@to,strcpy@cp
 11645  003B30  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 11646  003B34  D004               	goto	i2l1451
 11647  003B36  4A0B               	infsnz	strcpy@cp,f,c
 11648  003B38  2A0C               	incf	strcpy@cp+1,f,c
 11649  003B3A  4A09               	infsnz	strcpy@from,f,c
 11650  003B3C  2A0A               	incf	strcpy@from+1,f,c
 11651  003B3E                     i2l1451:
 11652  003B3E  C009  FFF6         	movff	strcpy@from,tblptrl
 11653  003B42  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 11654  003B46  0E00               	movlw	low (__mediumconst shr (0+16))
 11655  003B48  6EF8               	movwf	tblptru,c
 11656  003B4A  C00B  FFD9         	movff	strcpy@cp,fsr2l
 11657  003B4E  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 11658  003B52  0E0F               	movlw	(high __ramtop+-1)
 11659  003B54  64F7               	cpfsgt	tblptrh,c
 11660  003B56  D003               	bra	i2u312_47
 11661  003B58  0008               	tblrd		*
 11662  003B5A  50F5               	movf	tablat,w,c
 11663  003B5C  D005               	bra	i2u312_40
 11664  003B5E                     i2u312_47:
 11665  003B5E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11666  003B62  CFF7 FFEA          	movff	tblptrh,fsr0h
 11667  003B66  50EF               	movf	indf0,w,c
 11668  003B68                     i2u312_40:
 11669  003B68  6EDF               	movwf	indf2,c
 11670  003B6A  50DF               	movf	indf2,w,c
 11671  003B6C  B4D8               	btfsc	status,2,c
 11672  003B6E  0012               	return	
 11673  003B70  D7E2               	goto	i2l1452
 11674  003B72                     __end_of_strcpy:
 11675                           	opt stack 0
 11676                           pclatu	equ	0xFFB
 11677                           pclath	equ	0xFFA
 11678                           tblptru	equ	0xFF8
 11679                           tblptrh	equ	0xFF7
 11680                           tblptrl	equ	0xFF6
 11681                           tablat	equ	0xFF5
 11682                           prodh	equ	0xFF4
 11683                           prodl	equ	0xFF3
 11684                           intcon	equ	0xFF2
 11685                           intcon3	equ	0xFF0
 11686                           indf0	equ	0xFEF
 11687                           postinc0	equ	0xFEE
 11688                           fsr0h	equ	0xFEA
 11689                           fsr0l	equ	0xFE9
 11690                           wreg	equ	0xFE8
 11691                           postdec1	equ	0xFE5
 11692                           fsr1h	equ	0xFE2
 11693                           fsr1l	equ	0xFE1
 11694                           indf2	equ	0xFDF
 11695                           postinc2	equ	0xFDE
 11696                           postdec2	equ	0xFDD
 11697                           fsr2h	equ	0xFDA
 11698                           fsr2l	equ	0xFD9
 11699                           status	equ	0xFD8
 11700                           
 11701 ;; *************** function _strcat *****************
 11702 ;; Defined at:
 11703 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 11704 ;; Parameters:    Size  Location     Type
 11705 ;;  to              2    0[COMRAM] PTR unsigned char 
 11706 ;;		 -> current_set(5), 
 11707 ;;  from            2    2[COMRAM] PTR const unsigned char 
 11708 ;;		 -> temp_set(5), 
 11709 ;; Auto vars:     Size  Location     Type
 11710 ;;  cp              2    4[COMRAM] PTR unsigned char 
 11711 ;;		 -> current_set(5), 
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  2    0[COMRAM] PTR unsigned char 
 11714 ;; Registers used:
 11715 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11721 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11722 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11724 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11725 ;;Total ram usage:        6 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; This function calls:
 11728 ;;		Nothing
 11729 ;; This function is called by:
 11730 ;;		_interruptHandler
 11731 ;; This function uses a non-reentrant model
 11732 ;;
 11733                           
 11734                           	psect	text38
 11735  003BF8                     __ptext38:
 11736                           	opt stack 0
 11737  003BF8                     _strcat:
 11738                           	opt stack 26
 11739                           
 11740                           ;incstack = 0
 11741  003BF8  C001  F005         	movff	strcat@to,strcat@cp
 11742  003BFC  C002  F006         	movff	strcat@to+1,strcat@cp+1
 11743  003C00  D002               	goto	i2l1434
 11744  003C02  4A05               	infsnz	strcat@cp,f,c
 11745  003C04  2A06               	incf	strcat@cp+1,f,c
 11746  003C06                     i2l1434:
 11747  003C06  C005  FFD9         	movff	strcat@cp,fsr2l
 11748  003C0A  C006  FFDA         	movff	strcat@cp+1,fsr2h
 11749  003C0E  50DF               	movf	indf2,w,c
 11750  003C10  B4D8               	btfsc	status,2,c
 11751  003C12  D005               	goto	i2l1437
 11752  003C14  D7F6               	goto	i2l1435
 11753  003C16  4A05               	infsnz	strcat@cp,f,c
 11754  003C18  2A06               	incf	strcat@cp+1,f,c
 11755  003C1A  4A03               	infsnz	strcat@from,f,c
 11756  003C1C  2A04               	incf	strcat@from+1,f,c
 11757  003C1E                     i2l1437:
 11758  003C1E  C003  FFD9         	movff	strcat@from,fsr2l
 11759  003C22  C004  FFDA         	movff	strcat@from+1,fsr2h
 11760  003C26  C005  FFE1         	movff	strcat@cp,fsr1l
 11761  003C2A  C006  FFE2         	movff	strcat@cp+1,fsr1h
 11762  003C2E  CFDF FFE7          	movff	indf2,indf1
 11763  003C32  50E7               	movf	indf1,w,c
 11764  003C34  B4D8               	btfsc	status,2,c
 11765  003C36  0012               	return	
 11766  003C38  D7EE               	goto	i2l1438
 11767  003C3A                     __end_of_strcat:
 11768                           	opt stack 0
 11769                           pclatu	equ	0xFFB
 11770                           pclath	equ	0xFFA
 11771                           tblptru	equ	0xFF8
 11772                           tblptrh	equ	0xFF7
 11773                           tblptrl	equ	0xFF6
 11774                           tablat	equ	0xFF5
 11775                           prodh	equ	0xFF4
 11776                           prodl	equ	0xFF3
 11777                           intcon	equ	0xFF2
 11778                           intcon3	equ	0xFF0
 11779                           indf0	equ	0xFEF
 11780                           postinc0	equ	0xFEE
 11781                           fsr0h	equ	0xFEA
 11782                           fsr0l	equ	0xFE9
 11783                           wreg	equ	0xFE8
 11784                           indf1	equ	0xFE7
 11785                           postdec1	equ	0xFE5
 11786                           fsr1h	equ	0xFE2
 11787                           fsr1l	equ	0xFE1
 11788                           indf2	equ	0xFDF
 11789                           postinc2	equ	0xFDE
 11790                           postdec2	equ	0xFDD
 11791                           fsr2h	equ	0xFDA
 11792                           fsr2l	equ	0xFD9
 11793                           status	equ	0xFD8
 11794                           
 11795 ;; *************** function _is_valid *****************
 11796 ;; Defined at:
 11797 ;;		line 12 in file "keypad.c"
 11798 ;; Parameters:    Size  Location     Type
 11799 ;;		None
 11800 ;; Auto vars:     Size  Location     Type
 11801 ;;		None
 11802 ;; Return value:  Size  Location     Type
 11803 ;;                  2  127[None  ] int 
 11804 ;; Registers used:
 11805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11806 ;; Tracked objects:
 11807 ;;		On entry : 0/0
 11808 ;;		On exit  : 0/0
 11809 ;;		Unchanged: 0/0
 11810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11814 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11815 ;;Total ram usage:        2 bytes
 11816 ;; Hardware stack levels used:    1
 11817 ;; Hardware stack levels required when called:    1
 11818 ;; This function calls:
 11819 ;;		_strcmp
 11820 ;;		i2___wmul
 11821 ;; This function is called by:
 11822 ;;		_interruptHandler
 11823 ;; This function uses a non-reentrant model
 11824 ;;
 11825                           
 11826                           	psect	text39
 11827  000012                     __ptext39:
 11828                           	opt stack 0
 11829  000012                     _is_valid:
 11830                           	opt stack 25
 11831                           
 11832                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 11833                           
 11834                           ;incstack = 0
 11835  000012  0E78               	movlw	low _current_set2
 11836  000014  6E01               	movwf	strcmp@s1,c
 11837  000016  0E00               	movlw	high _current_set2
 11838  000018  6E02               	movwf	strcmp@s1+1,c
 11839  00001A  0EFD               	movlw	low STR_53
 11840  00001C  6E03               	movwf	strcmp@s2,c
 11841  00001E  0EFF               	movlw	high STR_53
 11842  000020  6E04               	movwf	strcmp@s2+1,c
 11843  000022  EC71  F01D         	call	_strcmp	;wreg free
 11844  000026  5001               	movf	?_strcmp,w,c
 11845  000028  1002               	iorwf	?_strcmp+1,w,c
 11846  00002A  A4D8               	btfss	status,2,c
 11847  00002C  D023               	goto	i2l698
 11848                           
 11849                           ;keypad.c: 17: B=1*number;
 11850  00002E  C07D  F065         	movff	_number,_B
 11851  000032  C07E  F066         	movff	_number+1,_B+1
 11852                           
 11853                           ;keypad.c: 18: total_number = 1*number;
 11854  000036  C07D  F069         	movff	_number,_total_number
 11855  00003A  C07E  F06A         	movff	_number+1,_total_number+1
 11856                           
 11857                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 11858  00003E  90D8               	bcf	status,0,c
 11859  000040  346D               	rlcf	_counter_step,w,c
 11860  000042  6ED9               	movwf	fsr2l,c
 11861  000044  346E               	rlcf	_counter_step+1,w,c
 11862  000046  6EDA               	movwf	fsr2h,c
 11863  000048  0E42               	movlw	low _compartment_number
 11864  00004A  26D9               	addwf	fsr2l,f,c
 11865  00004C  0E00               	movlw	high _compartment_number
 11866  00004E  22DA               	addwfc	fsr2h,f,c
 11867  000050  CFDE F007          	movff	postinc2,??_is_valid
 11868  000054  CFDD F008          	movff	postdec2,??_is_valid+1
 11869  000058  90D8               	bcf	status,0,c
 11870  00005A  3607               	rlcf	??_is_valid,f,c
 11871  00005C  3608               	rlcf	??_is_valid+1,f,c
 11872  00005E  0E30               	movlw	low _B_array
 11873  000060  2407               	addwf	??_is_valid,w,c
 11874  000062  6ED9               	movwf	fsr2l,c
 11875  000064  0E01               	movlw	high _B_array
 11876  000066  2008               	addwfc	??_is_valid+1,w,c
 11877  000068  6EDA               	movwf	fsr2h,c
 11878  00006A  C065  FFDE         	movff	_B,postinc2
 11879  00006E  C066  FFDD         	movff	_B+1,postdec2
 11880                           
 11881                           ;keypad.c: 22: }
 11882  000072  0012               	return	
 11883  000074                     i2l698:
 11884                           
 11885                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 11886  000074  0E78               	movlw	low _current_set2
 11887  000076  6E01               	movwf	strcmp@s1,c
 11888  000078  0E00               	movlw	high _current_set2
 11889  00007A  6E02               	movwf	strcmp@s1+1,c
 11890  00007C  0EDA               	movlw	low (STR_75+2)
 11891  00007E  6E03               	movwf	strcmp@s2,c
 11892  000080  0EFF               	movlw	high (STR_75+2)
 11893  000082  6E04               	movwf	strcmp@s2+1,c
 11894  000084  EC71  F01D         	call	_strcmp	;wreg free
 11895  000088  5001               	movf	?_strcmp,w,c
 11896  00008A  1002               	iorwf	?_strcmp+1,w,c
 11897  00008C  A4D8               	btfss	status,2,c
 11898  00008E  D023               	goto	i2l700
 11899                           
 11900                           ;keypad.c: 25: N=1*number;
 11901  000090  C07D  F063         	movff	_number,_N
 11902  000094  C07E  F064         	movff	_number+1,_N+1
 11903                           
 11904                           ;keypad.c: 26: total_number = 1*number;
 11905  000098  C07D  F069         	movff	_number,_total_number
 11906  00009C  C07E  F06A         	movff	_number+1,_total_number+1
 11907                           
 11908                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 11909  0000A0  90D8               	bcf	status,0,c
 11910  0000A2  346D               	rlcf	_counter_step,w,c
 11911  0000A4  6ED9               	movwf	fsr2l,c
 11912  0000A6  346E               	rlcf	_counter_step+1,w,c
 11913  0000A8  6EDA               	movwf	fsr2h,c
 11914  0000AA  0E42               	movlw	low _compartment_number
 11915  0000AC  26D9               	addwf	fsr2l,f,c
 11916  0000AE  0E00               	movlw	high _compartment_number
 11917  0000B0  22DA               	addwfc	fsr2h,f,c
 11918  0000B2  CFDE F007          	movff	postinc2,??_is_valid
 11919  0000B6  CFDD F008          	movff	postdec2,??_is_valid+1
 11920  0000BA  90D8               	bcf	status,0,c
 11921  0000BC  3607               	rlcf	??_is_valid,f,c
 11922  0000BE  3608               	rlcf	??_is_valid+1,f,c
 11923  0000C0  0E10               	movlw	low _N_array
 11924  0000C2  2407               	addwf	??_is_valid,w,c
 11925  0000C4  6ED9               	movwf	fsr2l,c
 11926  0000C6  0E01               	movlw	high _N_array
 11927  0000C8  2008               	addwfc	??_is_valid+1,w,c
 11928  0000CA  6EDA               	movwf	fsr2h,c
 11929  0000CC  C063  FFDE         	movff	_N,postinc2
 11930  0000D0  C064  FFDD         	movff	_N+1,postdec2
 11931                           
 11932                           ;keypad.c: 28: }
 11933  0000D4  0012               	return	
 11934  0000D6                     i2l700:
 11935                           
 11936                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 11937  0000D6  0E78               	movlw	low _current_set2
 11938  0000D8  6E01               	movwf	strcmp@s1,c
 11939  0000DA  0E00               	movlw	high _current_set2
 11940  0000DC  6E02               	movwf	strcmp@s1+1,c
 11941  0000DE  0EDE               	movlw	low (STR_76+2)
 11942  0000E0  6E03               	movwf	strcmp@s2,c
 11943  0000E2  0EFF               	movlw	high (STR_76+2)
 11944  0000E4  6E04               	movwf	strcmp@s2+1,c
 11945  0000E6  EC71  F01D         	call	_strcmp	;wreg free
 11946  0000EA  5001               	movf	?_strcmp,w,c
 11947  0000EC  1002               	iorwf	?_strcmp+1,w,c
 11948  0000EE  A4D8               	btfss	status,2,c
 11949  0000F0  D023               	goto	i2l702
 11950                           
 11951                           ;keypad.c: 30: S=1*number;
 11952  0000F2  C07D  F061         	movff	_number,_S
 11953  0000F6  C07E  F062         	movff	_number+1,_S+1
 11954                           
 11955                           ;keypad.c: 31: total_number = 1*number;
 11956  0000FA  C07D  F069         	movff	_number,_total_number
 11957  0000FE  C07E  F06A         	movff	_number+1,_total_number+1
 11958                           
 11959                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 11960  000102  90D8               	bcf	status,0,c
 11961  000104  346D               	rlcf	_counter_step,w,c
 11962  000106  6ED9               	movwf	fsr2l,c
 11963  000108  346E               	rlcf	_counter_step+1,w,c
 11964  00010A  6EDA               	movwf	fsr2h,c
 11965  00010C  0E42               	movlw	low _compartment_number
 11966  00010E  26D9               	addwf	fsr2l,f,c
 11967  000110  0E00               	movlw	high _compartment_number
 11968  000112  22DA               	addwfc	fsr2h,f,c
 11969  000114  CFDE F007          	movff	postinc2,??_is_valid
 11970  000118  CFDD F008          	movff	postdec2,??_is_valid+1
 11971  00011C  90D8               	bcf	status,0,c
 11972  00011E  3607               	rlcf	??_is_valid,f,c
 11973  000120  3608               	rlcf	??_is_valid+1,f,c
 11974  000122  0E20               	movlw	low _S_array
 11975  000124  2407               	addwf	??_is_valid,w,c
 11976  000126  6ED9               	movwf	fsr2l,c
 11977  000128  0E01               	movlw	high _S_array
 11978  00012A  2008               	addwfc	??_is_valid+1,w,c
 11979  00012C  6EDA               	movwf	fsr2h,c
 11980  00012E  C061  FFDE         	movff	_S,postinc2
 11981  000132  C062  FFDD         	movff	_S+1,postdec2
 11982                           
 11983                           ;keypad.c: 33: }
 11984  000136  0012               	return	
 11985  000138                     i2l702:
 11986                           
 11987                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 11988  000138  0E78               	movlw	low _current_set2
 11989  00013A  6E01               	movwf	strcmp@s1,c
 11990  00013C  0E00               	movlw	high _current_set2
 11991  00013E  6E02               	movwf	strcmp@s1+1,c
 11992  000140  0EE2               	movlw	low (STR_77+2)
 11993  000142  6E03               	movwf	strcmp@s2,c
 11994  000144  0EFF               	movlw	high (STR_77+2)
 11995  000146  6E04               	movwf	strcmp@s2+1,c
 11996  000148  EC71  F01D         	call	_strcmp	;wreg free
 11997  00014C  5001               	movf	?_strcmp,w,c
 11998  00014E  1002               	iorwf	?_strcmp+1,w,c
 11999  000150  A4D8               	btfss	status,2,c
 12000  000152  D023               	goto	i2l704
 12001                           
 12002                           ;keypad.c: 35: W=1*number;
 12003  000154  C07D  F05F         	movff	_number,_W
 12004  000158  C07E  F060         	movff	_number+1,_W+1
 12005                           
 12006                           ;keypad.c: 36: total_number = 1*number;
 12007  00015C  C07D  F069         	movff	_number,_total_number
 12008  000160  C07E  F06A         	movff	_number+1,_total_number+1
 12009                           
 12010                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 12011  000164  90D8               	bcf	status,0,c
 12012  000166  346D               	rlcf	_counter_step,w,c
 12013  000168  6ED9               	movwf	fsr2l,c
 12014  00016A  346E               	rlcf	_counter_step+1,w,c
 12015  00016C  6EDA               	movwf	fsr2h,c
 12016  00016E  0E42               	movlw	low _compartment_number
 12017  000170  26D9               	addwf	fsr2l,f,c
 12018  000172  0E00               	movlw	high _compartment_number
 12019  000174  22DA               	addwfc	fsr2h,f,c
 12020  000176  CFDE F007          	movff	postinc2,??_is_valid
 12021  00017A  CFDD F008          	movff	postdec2,??_is_valid+1
 12022  00017E  90D8               	bcf	status,0,c
 12023  000180  3607               	rlcf	??_is_valid,f,c
 12024  000182  3608               	rlcf	??_is_valid+1,f,c
 12025  000184  0E00               	movlw	low _W_array
 12026  000186  2407               	addwf	??_is_valid,w,c
 12027  000188  6ED9               	movwf	fsr2l,c
 12028  00018A  0E01               	movlw	high _W_array
 12029  00018C  2008               	addwfc	??_is_valid+1,w,c
 12030  00018E  6EDA               	movwf	fsr2h,c
 12031  000190  C05F  FFDE         	movff	_W,postinc2
 12032  000194  C060  FFDD         	movff	_W+1,postdec2
 12033                           
 12034                           ;keypad.c: 38: }
 12035  000198  0012               	return	
 12036  00019A                     i2l704:
 12037                           
 12038                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 12039  00019A  0E78               	movlw	low _current_set2
 12040  00019C  6E01               	movwf	strcmp@s1,c
 12041  00019E  0E00               	movlw	high _current_set2
 12042  0001A0  6E02               	movwf	strcmp@s1+1,c
 12043  0001A2  0ED9               	movlw	low (STR_75+1)
 12044  0001A4  6E03               	movwf	strcmp@s2,c
 12045  0001A6  0EFF               	movlw	high (STR_75+1)
 12046  0001A8  6E04               	movwf	strcmp@s2+1,c
 12047  0001AA  EC71  F01D         	call	_strcmp	;wreg free
 12048  0001AE  5001               	movf	?_strcmp,w,c
 12049  0001B0  1002               	iorwf	?_strcmp+1,w,c
 12050  0001B2  A4D8               	btfss	status,2,c
 12051  0001B4  D042               	goto	i2l706
 12052                           
 12053                           ;keypad.c: 40: B = 1*number;
 12054  0001B6  C07D  F065         	movff	_number,_B
 12055  0001BA  C07E  F066         	movff	_number+1,_B+1
 12056                           
 12057                           ;keypad.c: 42: N = 1*number;
 12058  0001BE  C07D  F063         	movff	_number,_N
 12059  0001C2  C07E  F064         	movff	_number+1,_N+1
 12060                           
 12061                           ;keypad.c: 43: total_number = 2*number;
 12062  0001C6  90D8               	bcf	status,0,c
 12063  0001C8  347D               	rlcf	_number,w,c
 12064  0001CA  6E69               	movwf	_total_number,c
 12065  0001CC  347E               	rlcf	_number+1,w,c
 12066  0001CE  6E6A               	movwf	_total_number+1,c
 12067                           
 12068                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 12069  0001D0  90D8               	bcf	status,0,c
 12070  0001D2  346D               	rlcf	_counter_step,w,c
 12071  0001D4  6ED9               	movwf	fsr2l,c
 12072  0001D6  346E               	rlcf	_counter_step+1,w,c
 12073  0001D8  6EDA               	movwf	fsr2h,c
 12074  0001DA  0E42               	movlw	low _compartment_number
 12075  0001DC  26D9               	addwf	fsr2l,f,c
 12076  0001DE  0E00               	movlw	high _compartment_number
 12077  0001E0  22DA               	addwfc	fsr2h,f,c
 12078  0001E2  CFDE F007          	movff	postinc2,??_is_valid
 12079  0001E6  CFDD F008          	movff	postdec2,??_is_valid+1
 12080  0001EA  90D8               	bcf	status,0,c
 12081  0001EC  3607               	rlcf	??_is_valid,f,c
 12082  0001EE  3608               	rlcf	??_is_valid+1,f,c
 12083  0001F0  0E30               	movlw	low _B_array
 12084  0001F2  2407               	addwf	??_is_valid,w,c
 12085  0001F4  6ED9               	movwf	fsr2l,c
 12086  0001F6  0E01               	movlw	high _B_array
 12087  0001F8  2008               	addwfc	??_is_valid+1,w,c
 12088  0001FA  6EDA               	movwf	fsr2h,c
 12089  0001FC  C065  FFDE         	movff	_B,postinc2
 12090  000200  C066  FFDD         	movff	_B+1,postdec2
 12091                           
 12092                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 12093  000204  90D8               	bcf	status,0,c
 12094  000206  346D               	rlcf	_counter_step,w,c
 12095  000208  6ED9               	movwf	fsr2l,c
 12096  00020A  346E               	rlcf	_counter_step+1,w,c
 12097  00020C  6EDA               	movwf	fsr2h,c
 12098  00020E  0E42               	movlw	low _compartment_number
 12099  000210  26D9               	addwf	fsr2l,f,c
 12100  000212  0E00               	movlw	high _compartment_number
 12101  000214  22DA               	addwfc	fsr2h,f,c
 12102  000216  CFDE F007          	movff	postinc2,??_is_valid
 12103  00021A  CFDD F008          	movff	postdec2,??_is_valid+1
 12104  00021E  90D8               	bcf	status,0,c
 12105  000220  3607               	rlcf	??_is_valid,f,c
 12106  000222  3608               	rlcf	??_is_valid+1,f,c
 12107  000224  0E10               	movlw	low _N_array
 12108  000226  2407               	addwf	??_is_valid,w,c
 12109  000228  6ED9               	movwf	fsr2l,c
 12110  00022A  0E01               	movlw	high _N_array
 12111  00022C  2008               	addwfc	??_is_valid+1,w,c
 12112  00022E  6EDA               	movwf	fsr2h,c
 12113  000230  C063  FFDE         	movff	_N,postinc2
 12114  000234  C064  FFDD         	movff	_N+1,postdec2
 12115                           
 12116                           ;keypad.c: 47: }
 12117  000238  0012               	return	
 12118  00023A                     i2l706:
 12119                           
 12120                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 12121  00023A  0E78               	movlw	low _current_set2
 12122  00023C  6E01               	movwf	strcmp@s1,c
 12123  00023E  0E00               	movlw	high _current_set2
 12124  000240  6E02               	movwf	strcmp@s1+1,c
 12125  000242  0EDD               	movlw	low (STR_76+1)
 12126  000244  6E03               	movwf	strcmp@s2,c
 12127  000246  0EFF               	movlw	high (STR_76+1)
 12128  000248  6E04               	movwf	strcmp@s2+1,c
 12129  00024A  EC71  F01D         	call	_strcmp	;wreg free
 12130  00024E  5001               	movf	?_strcmp,w,c
 12131  000250  1002               	iorwf	?_strcmp+1,w,c
 12132  000252  A4D8               	btfss	status,2,c
 12133  000254  D042               	goto	i2l708
 12134                           
 12135                           ;keypad.c: 49: B = 1*number;
 12136  000256  C07D  F065         	movff	_number,_B
 12137  00025A  C07E  F066         	movff	_number+1,_B+1
 12138                           
 12139                           ;keypad.c: 51: S = 1*number;
 12140  00025E  C07D  F061         	movff	_number,_S
 12141  000262  C07E  F062         	movff	_number+1,_S+1
 12142                           
 12143                           ;keypad.c: 52: total_number = 2*number;
 12144  000266  90D8               	bcf	status,0,c
 12145  000268  347D               	rlcf	_number,w,c
 12146  00026A  6E69               	movwf	_total_number,c
 12147  00026C  347E               	rlcf	_number+1,w,c
 12148  00026E  6E6A               	movwf	_total_number+1,c
 12149                           
 12150                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 12151  000270  90D8               	bcf	status,0,c
 12152  000272  346D               	rlcf	_counter_step,w,c
 12153  000274  6ED9               	movwf	fsr2l,c
 12154  000276  346E               	rlcf	_counter_step+1,w,c
 12155  000278  6EDA               	movwf	fsr2h,c
 12156  00027A  0E42               	movlw	low _compartment_number
 12157  00027C  26D9               	addwf	fsr2l,f,c
 12158  00027E  0E00               	movlw	high _compartment_number
 12159  000280  22DA               	addwfc	fsr2h,f,c
 12160  000282  CFDE F007          	movff	postinc2,??_is_valid
 12161  000286  CFDD F008          	movff	postdec2,??_is_valid+1
 12162  00028A  90D8               	bcf	status,0,c
 12163  00028C  3607               	rlcf	??_is_valid,f,c
 12164  00028E  3608               	rlcf	??_is_valid+1,f,c
 12165  000290  0E30               	movlw	low _B_array
 12166  000292  2407               	addwf	??_is_valid,w,c
 12167  000294  6ED9               	movwf	fsr2l,c
 12168  000296  0E01               	movlw	high _B_array
 12169  000298  2008               	addwfc	??_is_valid+1,w,c
 12170  00029A  6EDA               	movwf	fsr2h,c
 12171  00029C  C065  FFDE         	movff	_B,postinc2
 12172  0002A0  C066  FFDD         	movff	_B+1,postdec2
 12173                           
 12174                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 12175  0002A4  90D8               	bcf	status,0,c
 12176  0002A6  346D               	rlcf	_counter_step,w,c
 12177  0002A8  6ED9               	movwf	fsr2l,c
 12178  0002AA  346E               	rlcf	_counter_step+1,w,c
 12179  0002AC  6EDA               	movwf	fsr2h,c
 12180  0002AE  0E42               	movlw	low _compartment_number
 12181  0002B0  26D9               	addwf	fsr2l,f,c
 12182  0002B2  0E00               	movlw	high _compartment_number
 12183  0002B4  22DA               	addwfc	fsr2h,f,c
 12184  0002B6  CFDE F007          	movff	postinc2,??_is_valid
 12185  0002BA  CFDD F008          	movff	postdec2,??_is_valid+1
 12186  0002BE  90D8               	bcf	status,0,c
 12187  0002C0  3607               	rlcf	??_is_valid,f,c
 12188  0002C2  3608               	rlcf	??_is_valid+1,f,c
 12189  0002C4  0E20               	movlw	low _S_array
 12190  0002C6  2407               	addwf	??_is_valid,w,c
 12191  0002C8  6ED9               	movwf	fsr2l,c
 12192  0002CA  0E01               	movlw	high _S_array
 12193  0002CC  2008               	addwfc	??_is_valid+1,w,c
 12194  0002CE  6EDA               	movwf	fsr2h,c
 12195  0002D0  C061  FFDE         	movff	_S,postinc2
 12196  0002D4  C062  FFDD         	movff	_S+1,postdec2
 12197                           
 12198                           ;keypad.c: 57: }
 12199  0002D8  0012               	return	
 12200  0002DA                     i2l708:
 12201                           
 12202                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 12203  0002DA  0E78               	movlw	low _current_set2
 12204  0002DC  6E01               	movwf	strcmp@s1,c
 12205  0002DE  0E00               	movlw	high _current_set2
 12206  0002E0  6E02               	movwf	strcmp@s1+1,c
 12207  0002E2  0EE1               	movlw	low (STR_77+1)
 12208  0002E4  6E03               	movwf	strcmp@s2,c
 12209  0002E6  0EFF               	movlw	high (STR_77+1)
 12210  0002E8  6E04               	movwf	strcmp@s2+1,c
 12211  0002EA  EC71  F01D         	call	_strcmp	;wreg free
 12212  0002EE  5001               	movf	?_strcmp,w,c
 12213  0002F0  1002               	iorwf	?_strcmp+1,w,c
 12214  0002F2  A4D8               	btfss	status,2,c
 12215  0002F4  D042               	goto	i2l710
 12216                           
 12217                           ;keypad.c: 60: B = 1*number;
 12218  0002F6  C07D  F065         	movff	_number,_B
 12219  0002FA  C07E  F066         	movff	_number+1,_B+1
 12220                           
 12221                           ;keypad.c: 62: W = 1*number;
 12222  0002FE  C07D  F05F         	movff	_number,_W
 12223  000302  C07E  F060         	movff	_number+1,_W+1
 12224                           
 12225                           ;keypad.c: 63: total_number = 2*number;
 12226  000306  90D8               	bcf	status,0,c
 12227  000308  347D               	rlcf	_number,w,c
 12228  00030A  6E69               	movwf	_total_number,c
 12229  00030C  347E               	rlcf	_number+1,w,c
 12230  00030E  6E6A               	movwf	_total_number+1,c
 12231                           
 12232                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 12233  000310  90D8               	bcf	status,0,c
 12234  000312  346D               	rlcf	_counter_step,w,c
 12235  000314  6ED9               	movwf	fsr2l,c
 12236  000316  346E               	rlcf	_counter_step+1,w,c
 12237  000318  6EDA               	movwf	fsr2h,c
 12238  00031A  0E42               	movlw	low _compartment_number
 12239  00031C  26D9               	addwf	fsr2l,f,c
 12240  00031E  0E00               	movlw	high _compartment_number
 12241  000320  22DA               	addwfc	fsr2h,f,c
 12242  000322  CFDE F007          	movff	postinc2,??_is_valid
 12243  000326  CFDD F008          	movff	postdec2,??_is_valid+1
 12244  00032A  90D8               	bcf	status,0,c
 12245  00032C  3607               	rlcf	??_is_valid,f,c
 12246  00032E  3608               	rlcf	??_is_valid+1,f,c
 12247  000330  0E30               	movlw	low _B_array
 12248  000332  2407               	addwf	??_is_valid,w,c
 12249  000334  6ED9               	movwf	fsr2l,c
 12250  000336  0E01               	movlw	high _B_array
 12251  000338  2008               	addwfc	??_is_valid+1,w,c
 12252  00033A  6EDA               	movwf	fsr2h,c
 12253  00033C  C065  FFDE         	movff	_B,postinc2
 12254  000340  C066  FFDD         	movff	_B+1,postdec2
 12255                           
 12256                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 12257  000344  90D8               	bcf	status,0,c
 12258  000346  346D               	rlcf	_counter_step,w,c
 12259  000348  6ED9               	movwf	fsr2l,c
 12260  00034A  346E               	rlcf	_counter_step+1,w,c
 12261  00034C  6EDA               	movwf	fsr2h,c
 12262  00034E  0E42               	movlw	low _compartment_number
 12263  000350  26D9               	addwf	fsr2l,f,c
 12264  000352  0E00               	movlw	high _compartment_number
 12265  000354  22DA               	addwfc	fsr2h,f,c
 12266  000356  CFDE F007          	movff	postinc2,??_is_valid
 12267  00035A  CFDD F008          	movff	postdec2,??_is_valid+1
 12268  00035E  90D8               	bcf	status,0,c
 12269  000360  3607               	rlcf	??_is_valid,f,c
 12270  000362  3608               	rlcf	??_is_valid+1,f,c
 12271  000364  0E00               	movlw	low _W_array
 12272  000366  2407               	addwf	??_is_valid,w,c
 12273  000368  6ED9               	movwf	fsr2l,c
 12274  00036A  0E01               	movlw	high _W_array
 12275  00036C  2008               	addwfc	??_is_valid+1,w,c
 12276  00036E  6EDA               	movwf	fsr2h,c
 12277  000370  C05F  FFDE         	movff	_W,postinc2
 12278  000374  C060  FFDD         	movff	_W+1,postdec2
 12279                           
 12280                           ;keypad.c: 67: }
 12281  000378  0012               	return	
 12282  00037A                     i2l710:
 12283                           
 12284                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 12285  00037A  0E78               	movlw	low _current_set2
 12286  00037C  6E01               	movwf	strcmp@s1,c
 12287  00037E  0E00               	movlw	high _current_set2
 12288  000380  6E02               	movwf	strcmp@s1+1,c
 12289  000382  0ED8               	movlw	low STR_75
 12290  000384  6E03               	movwf	strcmp@s2,c
 12291  000386  0EFF               	movlw	high STR_75
 12292  000388  6E04               	movwf	strcmp@s2+1,c
 12293  00038A  EC71  F01D         	call	_strcmp	;wreg free
 12294  00038E  5001               	movf	?_strcmp,w,c
 12295  000390  1002               	iorwf	?_strcmp+1,w,c
 12296  000392  A4D8               	btfss	status,2,c
 12297  000394  D04C               	goto	i2l712
 12298                           
 12299                           ;keypad.c: 69: B = 2*number;
 12300  000396  90D8               	bcf	status,0,c
 12301  000398  347D               	rlcf	_number,w,c
 12302  00039A  6E65               	movwf	_B,c
 12303  00039C  347E               	rlcf	_number+1,w,c
 12304  00039E  6E66               	movwf	_B+1,c
 12305                           
 12306                           ;keypad.c: 71: N = 1*number;
 12307  0003A0  C07D  F063         	movff	_number,_N
 12308  0003A4  C07E  F064         	movff	_number+1,_N+1
 12309                           
 12310                           ;keypad.c: 72: total_number = 3*number;
 12311  0003A8  C07D  F001         	movff	_number,i2___wmul@multiplier
 12312  0003AC  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12313  0003B0  0E00               	movlw	0
 12314  0003B2  6E04               	movwf	i2___wmul@multiplicand+1,c
 12315  0003B4  0E03               	movlw	3
 12316  0003B6  6E03               	movwf	i2___wmul@multiplicand,c
 12317  0003B8  EC77  F01E         	call	i2___wmul	;wreg free
 12318  0003BC  C001  F069         	movff	?i2___wmul,_total_number
 12319  0003C0  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 12320                           
 12321                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 12322  0003C4  90D8               	bcf	status,0,c
 12323  0003C6  346D               	rlcf	_counter_step,w,c
 12324  0003C8  6ED9               	movwf	fsr2l,c
 12325  0003CA  346E               	rlcf	_counter_step+1,w,c
 12326  0003CC  6EDA               	movwf	fsr2h,c
 12327  0003CE  0E42               	movlw	low _compartment_number
 12328  0003D0  26D9               	addwf	fsr2l,f,c
 12329  0003D2  0E00               	movlw	high _compartment_number
 12330  0003D4  22DA               	addwfc	fsr2h,f,c
 12331  0003D6  CFDE F007          	movff	postinc2,??_is_valid
 12332  0003DA  CFDD F008          	movff	postdec2,??_is_valid+1
 12333  0003DE  90D8               	bcf	status,0,c
 12334  0003E0  3607               	rlcf	??_is_valid,f,c
 12335  0003E2  3608               	rlcf	??_is_valid+1,f,c
 12336  0003E4  0E30               	movlw	low _B_array
 12337  0003E6  2407               	addwf	??_is_valid,w,c
 12338  0003E8  6ED9               	movwf	fsr2l,c
 12339  0003EA  0E01               	movlw	high _B_array
 12340  0003EC  2008               	addwfc	??_is_valid+1,w,c
 12341  0003EE  6EDA               	movwf	fsr2h,c
 12342  0003F0  C065  FFDE         	movff	_B,postinc2
 12343  0003F4  C066  FFDD         	movff	_B+1,postdec2
 12344                           
 12345                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 12346  0003F8  90D8               	bcf	status,0,c
 12347  0003FA  346D               	rlcf	_counter_step,w,c
 12348  0003FC  6ED9               	movwf	fsr2l,c
 12349  0003FE  346E               	rlcf	_counter_step+1,w,c
 12350  000400  6EDA               	movwf	fsr2h,c
 12351  000402  0E42               	movlw	low _compartment_number
 12352  000404  26D9               	addwf	fsr2l,f,c
 12353  000406  0E00               	movlw	high _compartment_number
 12354  000408  22DA               	addwfc	fsr2h,f,c
 12355  00040A  CFDE F007          	movff	postinc2,??_is_valid
 12356  00040E  CFDD F008          	movff	postdec2,??_is_valid+1
 12357  000412  90D8               	bcf	status,0,c
 12358  000414  3607               	rlcf	??_is_valid,f,c
 12359  000416  3608               	rlcf	??_is_valid+1,f,c
 12360  000418  0E10               	movlw	low _N_array
 12361  00041A  2407               	addwf	??_is_valid,w,c
 12362  00041C  6ED9               	movwf	fsr2l,c
 12363  00041E  0E01               	movlw	high _N_array
 12364  000420  2008               	addwfc	??_is_valid+1,w,c
 12365  000422  6EDA               	movwf	fsr2h,c
 12366  000424  C063  FFDE         	movff	_N,postinc2
 12367  000428  C064  FFDD         	movff	_N+1,postdec2
 12368                           
 12369                           ;keypad.c: 76: }
 12370  00042C  0012               	return	
 12371  00042E                     i2l712:
 12372                           
 12373                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 12374  00042E  0E78               	movlw	low _current_set2
 12375  000430  6E01               	movwf	strcmp@s1,c
 12376  000432  0E00               	movlw	high _current_set2
 12377  000434  6E02               	movwf	strcmp@s1+1,c
 12378  000436  0EDC               	movlw	low STR_76
 12379  000438  6E03               	movwf	strcmp@s2,c
 12380  00043A  0EFF               	movlw	high STR_76
 12381  00043C  6E04               	movwf	strcmp@s2+1,c
 12382  00043E  EC71  F01D         	call	_strcmp	;wreg free
 12383  000442  5001               	movf	?_strcmp,w,c
 12384  000444  1002               	iorwf	?_strcmp+1,w,c
 12385  000446  A4D8               	btfss	status,2,c
 12386  000448  D04C               	goto	i2l714
 12387                           
 12388                           ;keypad.c: 78: B = 2*number;
 12389  00044A  90D8               	bcf	status,0,c
 12390  00044C  347D               	rlcf	_number,w,c
 12391  00044E  6E65               	movwf	_B,c
 12392  000450  347E               	rlcf	_number+1,w,c
 12393  000452  6E66               	movwf	_B+1,c
 12394                           
 12395                           ;keypad.c: 80: S = 1*number;
 12396  000454  C07D  F061         	movff	_number,_S
 12397  000458  C07E  F062         	movff	_number+1,_S+1
 12398                           
 12399                           ;keypad.c: 81: total_number = 3*number;
 12400  00045C  C07D  F001         	movff	_number,i2___wmul@multiplier
 12401  000460  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12402  000464  0E00               	movlw	0
 12403  000466  6E04               	movwf	i2___wmul@multiplicand+1,c
 12404  000468  0E03               	movlw	3
 12405  00046A  6E03               	movwf	i2___wmul@multiplicand,c
 12406  00046C  EC77  F01E         	call	i2___wmul	;wreg free
 12407  000470  C001  F069         	movff	?i2___wmul,_total_number
 12408  000474  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 12409                           
 12410                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 12411  000478  90D8               	bcf	status,0,c
 12412  00047A  346D               	rlcf	_counter_step,w,c
 12413  00047C  6ED9               	movwf	fsr2l,c
 12414  00047E  346E               	rlcf	_counter_step+1,w,c
 12415  000480  6EDA               	movwf	fsr2h,c
 12416  000482  0E42               	movlw	low _compartment_number
 12417  000484  26D9               	addwf	fsr2l,f,c
 12418  000486  0E00               	movlw	high _compartment_number
 12419  000488  22DA               	addwfc	fsr2h,f,c
 12420  00048A  CFDE F007          	movff	postinc2,??_is_valid
 12421  00048E  CFDD F008          	movff	postdec2,??_is_valid+1
 12422  000492  90D8               	bcf	status,0,c
 12423  000494  3607               	rlcf	??_is_valid,f,c
 12424  000496  3608               	rlcf	??_is_valid+1,f,c
 12425  000498  0E30               	movlw	low _B_array
 12426  00049A  2407               	addwf	??_is_valid,w,c
 12427  00049C  6ED9               	movwf	fsr2l,c
 12428  00049E  0E01               	movlw	high _B_array
 12429  0004A0  2008               	addwfc	??_is_valid+1,w,c
 12430  0004A2  6EDA               	movwf	fsr2h,c
 12431  0004A4  C065  FFDE         	movff	_B,postinc2
 12432  0004A8  C066  FFDD         	movff	_B+1,postdec2
 12433                           
 12434                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 12435  0004AC  90D8               	bcf	status,0,c
 12436  0004AE  346D               	rlcf	_counter_step,w,c
 12437  0004B0  6ED9               	movwf	fsr2l,c
 12438  0004B2  346E               	rlcf	_counter_step+1,w,c
 12439  0004B4  6EDA               	movwf	fsr2h,c
 12440  0004B6  0E42               	movlw	low _compartment_number
 12441  0004B8  26D9               	addwf	fsr2l,f,c
 12442  0004BA  0E00               	movlw	high _compartment_number
 12443  0004BC  22DA               	addwfc	fsr2h,f,c
 12444  0004BE  CFDE F007          	movff	postinc2,??_is_valid
 12445  0004C2  CFDD F008          	movff	postdec2,??_is_valid+1
 12446  0004C6  90D8               	bcf	status,0,c
 12447  0004C8  3607               	rlcf	??_is_valid,f,c
 12448  0004CA  3608               	rlcf	??_is_valid+1,f,c
 12449  0004CC  0E20               	movlw	low _S_array
 12450  0004CE  2407               	addwf	??_is_valid,w,c
 12451  0004D0  6ED9               	movwf	fsr2l,c
 12452  0004D2  0E01               	movlw	high _S_array
 12453  0004D4  2008               	addwfc	??_is_valid+1,w,c
 12454  0004D6  6EDA               	movwf	fsr2h,c
 12455  0004D8  C061  FFDE         	movff	_S,postinc2
 12456  0004DC  C062  FFDD         	movff	_S+1,postdec2
 12457                           
 12458                           ;keypad.c: 85: }
 12459  0004E0  0012               	return	
 12460  0004E2                     i2l714:
 12461                           
 12462                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 12463  0004E2  0E78               	movlw	low _current_set2
 12464  0004E4  6E01               	movwf	strcmp@s1,c
 12465  0004E6  0E00               	movlw	high _current_set2
 12466  0004E8  6E02               	movwf	strcmp@s1+1,c
 12467  0004EA  0EE0               	movlw	low STR_77
 12468  0004EC  6E03               	movwf	strcmp@s2,c
 12469  0004EE  0EFF               	movlw	high STR_77
 12470  0004F0  6E04               	movwf	strcmp@s2+1,c
 12471  0004F2  EC71  F01D         	call	_strcmp	;wreg free
 12472  0004F6  5001               	movf	?_strcmp,w,c
 12473  0004F8  1002               	iorwf	?_strcmp+1,w,c
 12474  0004FA  A4D8               	btfss	status,2,c
 12475  0004FC  D04C               	goto	i2l716
 12476                           
 12477                           ;keypad.c: 87: B = 2*number;
 12478  0004FE  90D8               	bcf	status,0,c
 12479  000500  347D               	rlcf	_number,w,c
 12480  000502  6E65               	movwf	_B,c
 12481  000504  347E               	rlcf	_number+1,w,c
 12482  000506  6E66               	movwf	_B+1,c
 12483                           
 12484                           ;keypad.c: 89: W = 1*number;
 12485  000508  C07D  F05F         	movff	_number,_W
 12486  00050C  C07E  F060         	movff	_number+1,_W+1
 12487                           
 12488                           ;keypad.c: 90: total_number = 3*number;
 12489  000510  C07D  F001         	movff	_number,i2___wmul@multiplier
 12490  000514  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12491  000518  0E00               	movlw	0
 12492  00051A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12493  00051C  0E03               	movlw	3
 12494  00051E  6E03               	movwf	i2___wmul@multiplicand,c
 12495  000520  EC77  F01E         	call	i2___wmul	;wreg free
 12496  000524  C001  F069         	movff	?i2___wmul,_total_number
 12497  000528  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 12498                           
 12499                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 12500  00052C  90D8               	bcf	status,0,c
 12501  00052E  346D               	rlcf	_counter_step,w,c
 12502  000530  6ED9               	movwf	fsr2l,c
 12503  000532  346E               	rlcf	_counter_step+1,w,c
 12504  000534  6EDA               	movwf	fsr2h,c
 12505  000536  0E42               	movlw	low _compartment_number
 12506  000538  26D9               	addwf	fsr2l,f,c
 12507  00053A  0E00               	movlw	high _compartment_number
 12508  00053C  22DA               	addwfc	fsr2h,f,c
 12509  00053E  CFDE F007          	movff	postinc2,??_is_valid
 12510  000542  CFDD F008          	movff	postdec2,??_is_valid+1
 12511  000546  90D8               	bcf	status,0,c
 12512  000548  3607               	rlcf	??_is_valid,f,c
 12513  00054A  3608               	rlcf	??_is_valid+1,f,c
 12514  00054C  0E30               	movlw	low _B_array
 12515  00054E  2407               	addwf	??_is_valid,w,c
 12516  000550  6ED9               	movwf	fsr2l,c
 12517  000552  0E01               	movlw	high _B_array
 12518  000554  2008               	addwfc	??_is_valid+1,w,c
 12519  000556  6EDA               	movwf	fsr2h,c
 12520  000558  C065  FFDE         	movff	_B,postinc2
 12521  00055C  C066  FFDD         	movff	_B+1,postdec2
 12522                           
 12523                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 12524  000560  90D8               	bcf	status,0,c
 12525  000562  346D               	rlcf	_counter_step,w,c
 12526  000564  6ED9               	movwf	fsr2l,c
 12527  000566  346E               	rlcf	_counter_step+1,w,c
 12528  000568  6EDA               	movwf	fsr2h,c
 12529  00056A  0E42               	movlw	low _compartment_number
 12530  00056C  26D9               	addwf	fsr2l,f,c
 12531  00056E  0E00               	movlw	high _compartment_number
 12532  000570  22DA               	addwfc	fsr2h,f,c
 12533  000572  CFDE F007          	movff	postinc2,??_is_valid
 12534  000576  CFDD F008          	movff	postdec2,??_is_valid+1
 12535  00057A  90D8               	bcf	status,0,c
 12536  00057C  3607               	rlcf	??_is_valid,f,c
 12537  00057E  3608               	rlcf	??_is_valid+1,f,c
 12538  000580  0E00               	movlw	low _W_array
 12539  000582  2407               	addwf	??_is_valid,w,c
 12540  000584  6ED9               	movwf	fsr2l,c
 12541  000586  0E01               	movlw	high _W_array
 12542  000588  2008               	addwfc	??_is_valid+1,w,c
 12543  00058A  6EDA               	movwf	fsr2h,c
 12544  00058C  C05F  FFDE         	movff	_W,postinc2
 12545  000590  C060  FFDD         	movff	_W+1,postdec2
 12546                           
 12547                           ;keypad.c: 94: }
 12548  000594  0012               	return	
 12549  000596                     i2l716:
 12550                           
 12551                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 12552  000596  0E78               	movlw	low _current_set2
 12553  000598  6E01               	movwf	strcmp@s1,c
 12554  00059A  0E00               	movlw	high _current_set2
 12555  00059C  6E02               	movwf	strcmp@s1+1,c
 12556  00059E  0EB6               	movlw	low (STR_84+1)
 12557  0005A0  6E03               	movwf	strcmp@s2,c
 12558  0005A2  0EFF               	movlw	high (STR_84+1)
 12559  0005A4  6E04               	movwf	strcmp@s2+1,c
 12560  0005A6  EC71  F01D         	call	_strcmp	;wreg free
 12561  0005AA  5001               	movf	?_strcmp,w,c
 12562  0005AC  1002               	iorwf	?_strcmp+1,w,c
 12563  0005AE  A4D8               	btfss	status,2,c
 12564  0005B0  D069               	goto	i2l718
 12565                           
 12566                           ;keypad.c: 96: B = 1*number;
 12567  0005B2  C07D  F065         	movff	_number,_B
 12568  0005B6  C07E  F066         	movff	_number+1,_B+1
 12569                           
 12570                           ;keypad.c: 97: W = 1*number;
 12571  0005BA  C07D  F05F         	movff	_number,_W
 12572  0005BE  C07E  F060         	movff	_number+1,_W+1
 12573                           
 12574                           ;keypad.c: 98: N = 1*number;
 12575  0005C2  C07D  F063         	movff	_number,_N
 12576  0005C6  C07E  F064         	movff	_number+1,_N+1
 12577                           
 12578                           ;keypad.c: 99: total_number = 3*number;
 12579  0005CA  C07D  F001         	movff	_number,i2___wmul@multiplier
 12580  0005CE  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12581  0005D2  0E00               	movlw	0
 12582  0005D4  6E04               	movwf	i2___wmul@multiplicand+1,c
 12583  0005D6  0E03               	movlw	3
 12584  0005D8  6E03               	movwf	i2___wmul@multiplicand,c
 12585  0005DA  EC77  F01E         	call	i2___wmul	;wreg free
 12586  0005DE  C001  F069         	movff	?i2___wmul,_total_number
 12587  0005E2  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 12588                           
 12589                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 12590  0005E6  90D8               	bcf	status,0,c
 12591  0005E8  346D               	rlcf	_counter_step,w,c
 12592  0005EA  6ED9               	movwf	fsr2l,c
 12593  0005EC  346E               	rlcf	_counter_step+1,w,c
 12594  0005EE  6EDA               	movwf	fsr2h,c
 12595  0005F0  0E42               	movlw	low _compartment_number
 12596  0005F2  26D9               	addwf	fsr2l,f,c
 12597  0005F4  0E00               	movlw	high _compartment_number
 12598  0005F6  22DA               	addwfc	fsr2h,f,c
 12599  0005F8  CFDE F007          	movff	postinc2,??_is_valid
 12600  0005FC  CFDD F008          	movff	postdec2,??_is_valid+1
 12601  000600  90D8               	bcf	status,0,c
 12602  000602  3607               	rlcf	??_is_valid,f,c
 12603  000604  3608               	rlcf	??_is_valid+1,f,c
 12604  000606  0E30               	movlw	low _B_array
 12605  000608  2407               	addwf	??_is_valid,w,c
 12606  00060A  6ED9               	movwf	fsr2l,c
 12607  00060C  0E01               	movlw	high _B_array
 12608  00060E  2008               	addwfc	??_is_valid+1,w,c
 12609  000610  6EDA               	movwf	fsr2h,c
 12610  000612  C065  FFDE         	movff	_B,postinc2
 12611  000616  C066  FFDD         	movff	_B+1,postdec2
 12612                           
 12613                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 12614  00061A  90D8               	bcf	status,0,c
 12615  00061C  346D               	rlcf	_counter_step,w,c
 12616  00061E  6ED9               	movwf	fsr2l,c
 12617  000620  346E               	rlcf	_counter_step+1,w,c
 12618  000622  6EDA               	movwf	fsr2h,c
 12619  000624  0E42               	movlw	low _compartment_number
 12620  000626  26D9               	addwf	fsr2l,f,c
 12621  000628  0E00               	movlw	high _compartment_number
 12622  00062A  22DA               	addwfc	fsr2h,f,c
 12623  00062C  CFDE F007          	movff	postinc2,??_is_valid
 12624  000630  CFDD F008          	movff	postdec2,??_is_valid+1
 12625  000634  90D8               	bcf	status,0,c
 12626  000636  3607               	rlcf	??_is_valid,f,c
 12627  000638  3608               	rlcf	??_is_valid+1,f,c
 12628  00063A  0E00               	movlw	low _W_array
 12629  00063C  2407               	addwf	??_is_valid,w,c
 12630  00063E  6ED9               	movwf	fsr2l,c
 12631  000640  0E01               	movlw	high _W_array
 12632  000642  2008               	addwfc	??_is_valid+1,w,c
 12633  000644  6EDA               	movwf	fsr2h,c
 12634  000646  C05F  FFDE         	movff	_W,postinc2
 12635  00064A  C060  FFDD         	movff	_W+1,postdec2
 12636                           
 12637                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 12638  00064E  90D8               	bcf	status,0,c
 12639  000650  346D               	rlcf	_counter_step,w,c
 12640  000652  6ED9               	movwf	fsr2l,c
 12641  000654  346E               	rlcf	_counter_step+1,w,c
 12642  000656  6EDA               	movwf	fsr2h,c
 12643  000658  0E42               	movlw	low _compartment_number
 12644  00065A  26D9               	addwf	fsr2l,f,c
 12645  00065C  0E00               	movlw	high _compartment_number
 12646  00065E  22DA               	addwfc	fsr2h,f,c
 12647  000660  CFDE F007          	movff	postinc2,??_is_valid
 12648  000664  CFDD F008          	movff	postdec2,??_is_valid+1
 12649  000668  90D8               	bcf	status,0,c
 12650  00066A  3607               	rlcf	??_is_valid,f,c
 12651  00066C  3608               	rlcf	??_is_valid+1,f,c
 12652  00066E  0E10               	movlw	low _N_array
 12653  000670  2407               	addwf	??_is_valid,w,c
 12654  000672  6ED9               	movwf	fsr2l,c
 12655  000674  0E01               	movlw	high _N_array
 12656  000676  2008               	addwfc	??_is_valid+1,w,c
 12657  000678  6EDA               	movwf	fsr2h,c
 12658  00067A  C063  FFDE         	movff	_N,postinc2
 12659  00067E  C064  FFDD         	movff	_N+1,postdec2
 12660                           
 12661                           ;keypad.c: 105: }
 12662  000682  0012               	return	
 12663  000684                     i2l718:
 12664                           
 12665                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 12666  000684  0E78               	movlw	low _current_set2
 12667  000686  6E01               	movwf	strcmp@s1,c
 12668  000688  0E00               	movlw	high _current_set2
 12669  00068A  6E02               	movwf	strcmp@s1+1,c
 12670  00068C  0EC0               	movlw	low (STR_83+1)
 12671  00068E  6E03               	movwf	strcmp@s2,c
 12672  000690  0EFF               	movlw	high (STR_83+1)
 12673  000692  6E04               	movwf	strcmp@s2+1,c
 12674  000694  EC71  F01D         	call	_strcmp	;wreg free
 12675  000698  5001               	movf	?_strcmp,w,c
 12676  00069A  1002               	iorwf	?_strcmp+1,w,c
 12677  00069C  A4D8               	btfss	status,2,c
 12678  00069E  D069               	goto	i2l720
 12679                           
 12680                           ;keypad.c: 107: B = 1*number;
 12681  0006A0  C07D  F065         	movff	_number,_B
 12682  0006A4  C07E  F066         	movff	_number+1,_B+1
 12683                           
 12684                           ;keypad.c: 108: S = 1*number;
 12685  0006A8  C07D  F061         	movff	_number,_S
 12686  0006AC  C07E  F062         	movff	_number+1,_S+1
 12687                           
 12688                           ;keypad.c: 109: N = 1*number;
 12689  0006B0  C07D  F063         	movff	_number,_N
 12690  0006B4  C07E  F064         	movff	_number+1,_N+1
 12691                           
 12692                           ;keypad.c: 110: total_number = 3*number;
 12693  0006B8  C07D  F001         	movff	_number,i2___wmul@multiplier
 12694  0006BC  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12695  0006C0  0E00               	movlw	0
 12696  0006C2  6E04               	movwf	i2___wmul@multiplicand+1,c
 12697  0006C4  0E03               	movlw	3
 12698  0006C6  6E03               	movwf	i2___wmul@multiplicand,c
 12699  0006C8  EC77  F01E         	call	i2___wmul	;wreg free
 12700  0006CC  C001  F069         	movff	?i2___wmul,_total_number
 12701  0006D0  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 12702                           
 12703                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 12704  0006D4  90D8               	bcf	status,0,c
 12705  0006D6  346D               	rlcf	_counter_step,w,c
 12706  0006D8  6ED9               	movwf	fsr2l,c
 12707  0006DA  346E               	rlcf	_counter_step+1,w,c
 12708  0006DC  6EDA               	movwf	fsr2h,c
 12709  0006DE  0E42               	movlw	low _compartment_number
 12710  0006E0  26D9               	addwf	fsr2l,f,c
 12711  0006E2  0E00               	movlw	high _compartment_number
 12712  0006E4  22DA               	addwfc	fsr2h,f,c
 12713  0006E6  CFDE F007          	movff	postinc2,??_is_valid
 12714  0006EA  CFDD F008          	movff	postdec2,??_is_valid+1
 12715  0006EE  90D8               	bcf	status,0,c
 12716  0006F0  3607               	rlcf	??_is_valid,f,c
 12717  0006F2  3608               	rlcf	??_is_valid+1,f,c
 12718  0006F4  0E30               	movlw	low _B_array
 12719  0006F6  2407               	addwf	??_is_valid,w,c
 12720  0006F8  6ED9               	movwf	fsr2l,c
 12721  0006FA  0E01               	movlw	high _B_array
 12722  0006FC  2008               	addwfc	??_is_valid+1,w,c
 12723  0006FE  6EDA               	movwf	fsr2h,c
 12724  000700  C065  FFDE         	movff	_B,postinc2
 12725  000704  C066  FFDD         	movff	_B+1,postdec2
 12726                           
 12727                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 12728  000708  90D8               	bcf	status,0,c
 12729  00070A  346D               	rlcf	_counter_step,w,c
 12730  00070C  6ED9               	movwf	fsr2l,c
 12731  00070E  346E               	rlcf	_counter_step+1,w,c
 12732  000710  6EDA               	movwf	fsr2h,c
 12733  000712  0E42               	movlw	low _compartment_number
 12734  000714  26D9               	addwf	fsr2l,f,c
 12735  000716  0E00               	movlw	high _compartment_number
 12736  000718  22DA               	addwfc	fsr2h,f,c
 12737  00071A  CFDE F007          	movff	postinc2,??_is_valid
 12738  00071E  CFDD F008          	movff	postdec2,??_is_valid+1
 12739  000722  90D8               	bcf	status,0,c
 12740  000724  3607               	rlcf	??_is_valid,f,c
 12741  000726  3608               	rlcf	??_is_valid+1,f,c
 12742  000728  0E20               	movlw	low _S_array
 12743  00072A  2407               	addwf	??_is_valid,w,c
 12744  00072C  6ED9               	movwf	fsr2l,c
 12745  00072E  0E01               	movlw	high _S_array
 12746  000730  2008               	addwfc	??_is_valid+1,w,c
 12747  000732  6EDA               	movwf	fsr2h,c
 12748  000734  C061  FFDE         	movff	_S,postinc2
 12749  000738  C062  FFDD         	movff	_S+1,postdec2
 12750                           
 12751                           ;keypad.c: 114: N_array[compartment_number[counter_step]] = N;
 12752  00073C  90D8               	bcf	status,0,c
 12753  00073E  346D               	rlcf	_counter_step,w,c
 12754  000740  6ED9               	movwf	fsr2l,c
 12755  000742  346E               	rlcf	_counter_step+1,w,c
 12756  000744  6EDA               	movwf	fsr2h,c
 12757  000746  0E42               	movlw	low _compartment_number
 12758  000748  26D9               	addwf	fsr2l,f,c
 12759  00074A  0E00               	movlw	high _compartment_number
 12760  00074C  22DA               	addwfc	fsr2h,f,c
 12761  00074E  CFDE F007          	movff	postinc2,??_is_valid
 12762  000752  CFDD F008          	movff	postdec2,??_is_valid+1
 12763  000756  90D8               	bcf	status,0,c
 12764  000758  3607               	rlcf	??_is_valid,f,c
 12765  00075A  3608               	rlcf	??_is_valid+1,f,c
 12766  00075C  0E10               	movlw	low _N_array
 12767  00075E  2407               	addwf	??_is_valid,w,c
 12768  000760  6ED9               	movwf	fsr2l,c
 12769  000762  0E01               	movlw	high _N_array
 12770  000764  2008               	addwfc	??_is_valid+1,w,c
 12771  000766  6EDA               	movwf	fsr2h,c
 12772  000768  C063  FFDE         	movff	_N,postinc2
 12773  00076C  C064  FFDD         	movff	_N+1,postdec2
 12774                           
 12775                           ;keypad.c: 116: }
 12776  000770  0012               	return	
 12777  000772                     i2l720:
 12778                           
 12779                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 12780  000772  0E78               	movlw	low _current_set2
 12781  000774  6E01               	movwf	strcmp@s1,c
 12782  000776  0E00               	movlw	high _current_set2
 12783  000778  6E02               	movwf	strcmp@s1+1,c
 12784  00077A  0EE4               	movlw	low STR_80
 12785  00077C  6E03               	movwf	strcmp@s2,c
 12786  00077E  0EFF               	movlw	high STR_80
 12787  000780  6E04               	movwf	strcmp@s2+1,c
 12788  000782  EC71  F01D         	call	_strcmp	;wreg free
 12789  000786  5001               	movf	?_strcmp,w,c
 12790  000788  1002               	iorwf	?_strcmp+1,w,c
 12791  00078A  A4D8               	btfss	status,2,c
 12792  00078C  D04C               	goto	i2l722
 12793                           
 12794                           ;keypad.c: 118: B = 1*number;
 12795  00078E  C07D  F065         	movff	_number,_B
 12796  000792  C07E  F066         	movff	_number+1,_B+1
 12797                           
 12798                           ;keypad.c: 119: W = 2*number;
 12799  000796  90D8               	bcf	status,0,c
 12800  000798  347D               	rlcf	_number,w,c
 12801  00079A  6E5F               	movwf	_W,c
 12802  00079C  347E               	rlcf	_number+1,w,c
 12803  00079E  6E60               	movwf	_W+1,c
 12804                           
 12805                           ;keypad.c: 120: total_number = 3*number;
 12806  0007A0  C07D  F001         	movff	_number,i2___wmul@multiplier
 12807  0007A4  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 12808  0007A8  0E00               	movlw	0
 12809  0007AA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12810  0007AC  0E03               	movlw	3
 12811  0007AE  6E03               	movwf	i2___wmul@multiplicand,c
 12812  0007B0  EC77  F01E         	call	i2___wmul	;wreg free
 12813  0007B4  C001  F069         	movff	?i2___wmul,_total_number
 12814  0007B8  C002  F06A         	movff	?i2___wmul+1,_total_number+1
 12815                           
 12816                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 12817  0007BC  90D8               	bcf	status,0,c
 12818  0007BE  346D               	rlcf	_counter_step,w,c
 12819  0007C0  6ED9               	movwf	fsr2l,c
 12820  0007C2  346E               	rlcf	_counter_step+1,w,c
 12821  0007C4  6EDA               	movwf	fsr2h,c
 12822  0007C6  0E42               	movlw	low _compartment_number
 12823  0007C8  26D9               	addwf	fsr2l,f,c
 12824  0007CA  0E00               	movlw	high _compartment_number
 12825  0007CC  22DA               	addwfc	fsr2h,f,c
 12826  0007CE  CFDE F007          	movff	postinc2,??_is_valid
 12827  0007D2  CFDD F008          	movff	postdec2,??_is_valid+1
 12828  0007D6  90D8               	bcf	status,0,c
 12829  0007D8  3607               	rlcf	??_is_valid,f,c
 12830  0007DA  3608               	rlcf	??_is_valid+1,f,c
 12831  0007DC  0E30               	movlw	low _B_array
 12832  0007DE  2407               	addwf	??_is_valid,w,c
 12833  0007E0  6ED9               	movwf	fsr2l,c
 12834  0007E2  0E01               	movlw	high _B_array
 12835  0007E4  2008               	addwfc	??_is_valid+1,w,c
 12836  0007E6  6EDA               	movwf	fsr2h,c
 12837  0007E8  C065  FFDE         	movff	_B,postinc2
 12838  0007EC  C066  FFDD         	movff	_B+1,postdec2
 12839                           
 12840                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 12841  0007F0  90D8               	bcf	status,0,c
 12842  0007F2  346D               	rlcf	_counter_step,w,c
 12843  0007F4  6ED9               	movwf	fsr2l,c
 12844  0007F6  346E               	rlcf	_counter_step+1,w,c
 12845  0007F8  6EDA               	movwf	fsr2h,c
 12846  0007FA  0E42               	movlw	low _compartment_number
 12847  0007FC  26D9               	addwf	fsr2l,f,c
 12848  0007FE  0E00               	movlw	high _compartment_number
 12849  000800  22DA               	addwfc	fsr2h,f,c
 12850  000802  CFDE F007          	movff	postinc2,??_is_valid
 12851  000806  CFDD F008          	movff	postdec2,??_is_valid+1
 12852  00080A  90D8               	bcf	status,0,c
 12853  00080C  3607               	rlcf	??_is_valid,f,c
 12854  00080E  3608               	rlcf	??_is_valid+1,f,c
 12855  000810  0E00               	movlw	low _W_array
 12856  000812  2407               	addwf	??_is_valid,w,c
 12857  000814  6ED9               	movwf	fsr2l,c
 12858  000816  0E01               	movlw	high _W_array
 12859  000818  2008               	addwfc	??_is_valid+1,w,c
 12860  00081A  6EDA               	movwf	fsr2h,c
 12861  00081C  C05F  FFDE         	movff	_W,postinc2
 12862  000820  C060  FFDD         	movff	_W+1,postdec2
 12863                           
 12864                           ;keypad.c: 124: }
 12865  000824  0012               	return	
 12866  000826                     i2l722:
 12867                           
 12868                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 12869  000826  0E78               	movlw	low _current_set2
 12870  000828  6E01               	movwf	strcmp@s1,c
 12871  00082A  0E00               	movlw	high _current_set2
 12872  00082C  6E02               	movwf	strcmp@s1+1,c
 12873  00082E  0EC4               	movlw	low STR_81
 12874  000830  6E03               	movwf	strcmp@s2,c
 12875  000832  0EFF               	movlw	high STR_81
 12876  000834  6E04               	movwf	strcmp@s2+1,c
 12877  000836  EC71  F01D         	call	_strcmp	;wreg free
 12878  00083A  5001               	movf	?_strcmp,w,c
 12879  00083C  1002               	iorwf	?_strcmp+1,w,c
 12880  00083E  A4D8               	btfss	status,2,c
 12881  000840  D06A               	goto	i2l724
 12882                           
 12883                           ;keypad.c: 126: B = 1*number;
 12884  000842  C07D  F065         	movff	_number,_B
 12885  000846  C07E  F066         	movff	_number+1,_B+1
 12886                           
 12887                           ;keypad.c: 127: N = 1*number;
 12888  00084A  C07D  F063         	movff	_number,_N
 12889  00084E  C07E  F064         	movff	_number+1,_N+1
 12890                           
 12891                           ;keypad.c: 128: W = 2*number;
 12892  000852  90D8               	bcf	status,0,c
 12893  000854  347D               	rlcf	_number,w,c
 12894  000856  6E5F               	movwf	_W,c
 12895  000858  347E               	rlcf	_number+1,w,c
 12896  00085A  6E60               	movwf	_W+1,c
 12897                           
 12898                           ;keypad.c: 129: total_number = 4*number;
 12899  00085C  C07D  F007         	movff	_number,??_is_valid
 12900  000860  C07E  F008         	movff	_number+1,??_is_valid+1
 12901  000864  90D8               	bcf	status,0,c
 12902  000866  3607               	rlcf	??_is_valid,f,c
 12903  000868  3608               	rlcf	??_is_valid+1,f,c
 12904  00086A  90D8               	bcf	status,0,c
 12905  00086C  3607               	rlcf	??_is_valid,f,c
 12906  00086E  3608               	rlcf	??_is_valid+1,f,c
 12907  000870  C007  F069         	movff	??_is_valid,_total_number
 12908  000874  C008  F06A         	movff	??_is_valid+1,_total_number+1
 12909                           
 12910                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 12911  000878  90D8               	bcf	status,0,c
 12912  00087A  346D               	rlcf	_counter_step,w,c
 12913  00087C  6ED9               	movwf	fsr2l,c
 12914  00087E  346E               	rlcf	_counter_step+1,w,c
 12915  000880  6EDA               	movwf	fsr2h,c
 12916  000882  0E42               	movlw	low _compartment_number
 12917  000884  26D9               	addwf	fsr2l,f,c
 12918  000886  0E00               	movlw	high _compartment_number
 12919  000888  22DA               	addwfc	fsr2h,f,c
 12920  00088A  CFDE F007          	movff	postinc2,??_is_valid
 12921  00088E  CFDD F008          	movff	postdec2,??_is_valid+1
 12922  000892  90D8               	bcf	status,0,c
 12923  000894  3607               	rlcf	??_is_valid,f,c
 12924  000896  3608               	rlcf	??_is_valid+1,f,c
 12925  000898  0E30               	movlw	low _B_array
 12926  00089A  2407               	addwf	??_is_valid,w,c
 12927  00089C  6ED9               	movwf	fsr2l,c
 12928  00089E  0E01               	movlw	high _B_array
 12929  0008A0  2008               	addwfc	??_is_valid+1,w,c
 12930  0008A2  6EDA               	movwf	fsr2h,c
 12931  0008A4  C065  FFDE         	movff	_B,postinc2
 12932  0008A8  C066  FFDD         	movff	_B+1,postdec2
 12933                           
 12934                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 12935  0008AC  90D8               	bcf	status,0,c
 12936  0008AE  346D               	rlcf	_counter_step,w,c
 12937  0008B0  6ED9               	movwf	fsr2l,c
 12938  0008B2  346E               	rlcf	_counter_step+1,w,c
 12939  0008B4  6EDA               	movwf	fsr2h,c
 12940  0008B6  0E42               	movlw	low _compartment_number
 12941  0008B8  26D9               	addwf	fsr2l,f,c
 12942  0008BA  0E00               	movlw	high _compartment_number
 12943  0008BC  22DA               	addwfc	fsr2h,f,c
 12944  0008BE  CFDE F007          	movff	postinc2,??_is_valid
 12945  0008C2  CFDD F008          	movff	postdec2,??_is_valid+1
 12946  0008C6  90D8               	bcf	status,0,c
 12947  0008C8  3607               	rlcf	??_is_valid,f,c
 12948  0008CA  3608               	rlcf	??_is_valid+1,f,c
 12949  0008CC  0E10               	movlw	low _N_array
 12950  0008CE  2407               	addwf	??_is_valid,w,c
 12951  0008D0  6ED9               	movwf	fsr2l,c
 12952  0008D2  0E01               	movlw	high _N_array
 12953  0008D4  2008               	addwfc	??_is_valid+1,w,c
 12954  0008D6  6EDA               	movwf	fsr2h,c
 12955  0008D8  C063  FFDE         	movff	_N,postinc2
 12956  0008DC  C064  FFDD         	movff	_N+1,postdec2
 12957                           
 12958                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 12959  0008E0  90D8               	bcf	status,0,c
 12960  0008E2  346D               	rlcf	_counter_step,w,c
 12961  0008E4  6ED9               	movwf	fsr2l,c
 12962  0008E6  346E               	rlcf	_counter_step+1,w,c
 12963  0008E8  6EDA               	movwf	fsr2h,c
 12964  0008EA  0E42               	movlw	low _compartment_number
 12965  0008EC  26D9               	addwf	fsr2l,f,c
 12966  0008EE  0E00               	movlw	high _compartment_number
 12967  0008F0  22DA               	addwfc	fsr2h,f,c
 12968  0008F2  CFDE F007          	movff	postinc2,??_is_valid
 12969  0008F6  CFDD F008          	movff	postdec2,??_is_valid+1
 12970  0008FA  90D8               	bcf	status,0,c
 12971  0008FC  3607               	rlcf	??_is_valid,f,c
 12972  0008FE  3608               	rlcf	??_is_valid+1,f,c
 12973  000900  0E00               	movlw	low _W_array
 12974  000902  2407               	addwf	??_is_valid,w,c
 12975  000904  6ED9               	movwf	fsr2l,c
 12976  000906  0E01               	movlw	high _W_array
 12977  000908  2008               	addwfc	??_is_valid+1,w,c
 12978  00090A  6EDA               	movwf	fsr2h,c
 12979  00090C  C05F  FFDE         	movff	_W,postinc2
 12980  000910  C060  FFDD         	movff	_W+1,postdec2
 12981                           
 12982                           ;keypad.c: 134: }
 12983  000914  0012               	return	
 12984  000916                     i2l724:
 12985                           
 12986                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 12987  000916  0E78               	movlw	low _current_set2
 12988  000918  6E01               	movwf	strcmp@s1,c
 12989  00091A  0E00               	movlw	high _current_set2
 12990  00091C  6E02               	movwf	strcmp@s1+1,c
 12991  00091E  0EC9               	movlw	low STR_82
 12992  000920  6E03               	movwf	strcmp@s2,c
 12993  000922  0EFF               	movlw	high STR_82
 12994  000924  6E04               	movwf	strcmp@s2+1,c
 12995  000926  EC71  F01D         	call	_strcmp	;wreg free
 12996  00092A  5001               	movf	?_strcmp,w,c
 12997  00092C  1002               	iorwf	?_strcmp+1,w,c
 12998  00092E  A4D8               	btfss	status,2,c
 12999  000930  D06A               	goto	i2l726
 13000                           
 13001                           ;keypad.c: 136: B = 1*number;
 13002  000932  C07D  F065         	movff	_number,_B
 13003  000936  C07E  F066         	movff	_number+1,_B+1
 13004                           
 13005                           ;keypad.c: 137: S = 1*number;
 13006  00093A  C07D  F061         	movff	_number,_S
 13007  00093E  C07E  F062         	movff	_number+1,_S+1
 13008                           
 13009                           ;keypad.c: 138: W = 2*number;
 13010  000942  90D8               	bcf	status,0,c
 13011  000944  347D               	rlcf	_number,w,c
 13012  000946  6E5F               	movwf	_W,c
 13013  000948  347E               	rlcf	_number+1,w,c
 13014  00094A  6E60               	movwf	_W+1,c
 13015                           
 13016                           ;keypad.c: 139: total_number = 4*number;
 13017  00094C  C07D  F007         	movff	_number,??_is_valid
 13018  000950  C07E  F008         	movff	_number+1,??_is_valid+1
 13019  000954  90D8               	bcf	status,0,c
 13020  000956  3607               	rlcf	??_is_valid,f,c
 13021  000958  3608               	rlcf	??_is_valid+1,f,c
 13022  00095A  90D8               	bcf	status,0,c
 13023  00095C  3607               	rlcf	??_is_valid,f,c
 13024  00095E  3608               	rlcf	??_is_valid+1,f,c
 13025  000960  C007  F069         	movff	??_is_valid,_total_number
 13026  000964  C008  F06A         	movff	??_is_valid+1,_total_number+1
 13027                           
 13028                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 13029  000968  90D8               	bcf	status,0,c
 13030  00096A  346D               	rlcf	_counter_step,w,c
 13031  00096C  6ED9               	movwf	fsr2l,c
 13032  00096E  346E               	rlcf	_counter_step+1,w,c
 13033  000970  6EDA               	movwf	fsr2h,c
 13034  000972  0E42               	movlw	low _compartment_number
 13035  000974  26D9               	addwf	fsr2l,f,c
 13036  000976  0E00               	movlw	high _compartment_number
 13037  000978  22DA               	addwfc	fsr2h,f,c
 13038  00097A  CFDE F007          	movff	postinc2,??_is_valid
 13039  00097E  CFDD F008          	movff	postdec2,??_is_valid+1
 13040  000982  90D8               	bcf	status,0,c
 13041  000984  3607               	rlcf	??_is_valid,f,c
 13042  000986  3608               	rlcf	??_is_valid+1,f,c
 13043  000988  0E30               	movlw	low _B_array
 13044  00098A  2407               	addwf	??_is_valid,w,c
 13045  00098C  6ED9               	movwf	fsr2l,c
 13046  00098E  0E01               	movlw	high _B_array
 13047  000990  2008               	addwfc	??_is_valid+1,w,c
 13048  000992  6EDA               	movwf	fsr2h,c
 13049  000994  C065  FFDE         	movff	_B,postinc2
 13050  000998  C066  FFDD         	movff	_B+1,postdec2
 13051                           
 13052                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 13053  00099C  90D8               	bcf	status,0,c
 13054  00099E  346D               	rlcf	_counter_step,w,c
 13055  0009A0  6ED9               	movwf	fsr2l,c
 13056  0009A2  346E               	rlcf	_counter_step+1,w,c
 13057  0009A4  6EDA               	movwf	fsr2h,c
 13058  0009A6  0E42               	movlw	low _compartment_number
 13059  0009A8  26D9               	addwf	fsr2l,f,c
 13060  0009AA  0E00               	movlw	high _compartment_number
 13061  0009AC  22DA               	addwfc	fsr2h,f,c
 13062  0009AE  CFDE F007          	movff	postinc2,??_is_valid
 13063  0009B2  CFDD F008          	movff	postdec2,??_is_valid+1
 13064  0009B6  90D8               	bcf	status,0,c
 13065  0009B8  3607               	rlcf	??_is_valid,f,c
 13066  0009BA  3608               	rlcf	??_is_valid+1,f,c
 13067  0009BC  0E20               	movlw	low _S_array
 13068  0009BE  2407               	addwf	??_is_valid,w,c
 13069  0009C0  6ED9               	movwf	fsr2l,c
 13070  0009C2  0E01               	movlw	high _S_array
 13071  0009C4  2008               	addwfc	??_is_valid+1,w,c
 13072  0009C6  6EDA               	movwf	fsr2h,c
 13073  0009C8  C061  FFDE         	movff	_S,postinc2
 13074  0009CC  C062  FFDD         	movff	_S+1,postdec2
 13075                           
 13076                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 13077  0009D0  90D8               	bcf	status,0,c
 13078  0009D2  346D               	rlcf	_counter_step,w,c
 13079  0009D4  6ED9               	movwf	fsr2l,c
 13080  0009D6  346E               	rlcf	_counter_step+1,w,c
 13081  0009D8  6EDA               	movwf	fsr2h,c
 13082  0009DA  0E42               	movlw	low _compartment_number
 13083  0009DC  26D9               	addwf	fsr2l,f,c
 13084  0009DE  0E00               	movlw	high _compartment_number
 13085  0009E0  22DA               	addwfc	fsr2h,f,c
 13086  0009E2  CFDE F007          	movff	postinc2,??_is_valid
 13087  0009E6  CFDD F008          	movff	postdec2,??_is_valid+1
 13088  0009EA  90D8               	bcf	status,0,c
 13089  0009EC  3607               	rlcf	??_is_valid,f,c
 13090  0009EE  3608               	rlcf	??_is_valid+1,f,c
 13091  0009F0  0E00               	movlw	low _W_array
 13092  0009F2  2407               	addwf	??_is_valid,w,c
 13093  0009F4  6ED9               	movwf	fsr2l,c
 13094  0009F6  0E01               	movlw	high _W_array
 13095  0009F8  2008               	addwfc	??_is_valid+1,w,c
 13096  0009FA  6EDA               	movwf	fsr2h,c
 13097  0009FC  C05F  FFDE         	movff	_W,postinc2
 13098  000A00  C060  FFDD         	movff	_W+1,postdec2
 13099                           
 13100                           ;keypad.c: 145: }
 13101  000A04  0012               	return	
 13102  000A06                     i2l726:
 13103                           
 13104                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 13105  000A06  0E78               	movlw	low _current_set2
 13106  000A08  6E01               	movwf	strcmp@s1,c
 13107  000A0A  0E00               	movlw	high _current_set2
 13108  000A0C  6E02               	movwf	strcmp@s1+1,c
 13109  000A0E  0EBF               	movlw	low STR_83
 13110  000A10  6E03               	movwf	strcmp@s2,c
 13111  000A12  0EFF               	movlw	high STR_83
 13112  000A14  6E04               	movwf	strcmp@s2+1,c
 13113  000A16  EC71  F01D         	call	_strcmp	;wreg free
 13114  000A1A  5001               	movf	?_strcmp,w,c
 13115  000A1C  1002               	iorwf	?_strcmp+1,w,c
 13116  000A1E  A4D8               	btfss	status,2,c
 13117  000A20  D06A               	goto	i2l728
 13118                           
 13119                           ;keypad.c: 147: B = 2*number;
 13120  000A22  90D8               	bcf	status,0,c
 13121  000A24  347D               	rlcf	_number,w,c
 13122  000A26  6E65               	movwf	_B,c
 13123  000A28  347E               	rlcf	_number+1,w,c
 13124  000A2A  6E66               	movwf	_B+1,c
 13125                           
 13126                           ;keypad.c: 148: S = 1*number;
 13127  000A2C  C07D  F061         	movff	_number,_S
 13128  000A30  C07E  F062         	movff	_number+1,_S+1
 13129                           
 13130                           ;keypad.c: 149: W = number;
 13131  000A34  C07D  F05F         	movff	_number,_W
 13132  000A38  C07E  F060         	movff	_number+1,_W+1
 13133                           
 13134                           ;keypad.c: 150: total_number = 4*number;
 13135  000A3C  C07D  F007         	movff	_number,??_is_valid
 13136  000A40  C07E  F008         	movff	_number+1,??_is_valid+1
 13137  000A44  90D8               	bcf	status,0,c
 13138  000A46  3607               	rlcf	??_is_valid,f,c
 13139  000A48  3608               	rlcf	??_is_valid+1,f,c
 13140  000A4A  90D8               	bcf	status,0,c
 13141  000A4C  3607               	rlcf	??_is_valid,f,c
 13142  000A4E  3608               	rlcf	??_is_valid+1,f,c
 13143  000A50  C007  F069         	movff	??_is_valid,_total_number
 13144  000A54  C008  F06A         	movff	??_is_valid+1,_total_number+1
 13145                           
 13146                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 13147  000A58  90D8               	bcf	status,0,c
 13148  000A5A  346D               	rlcf	_counter_step,w,c
 13149  000A5C  6ED9               	movwf	fsr2l,c
 13150  000A5E  346E               	rlcf	_counter_step+1,w,c
 13151  000A60  6EDA               	movwf	fsr2h,c
 13152  000A62  0E42               	movlw	low _compartment_number
 13153  000A64  26D9               	addwf	fsr2l,f,c
 13154  000A66  0E00               	movlw	high _compartment_number
 13155  000A68  22DA               	addwfc	fsr2h,f,c
 13156  000A6A  CFDE F007          	movff	postinc2,??_is_valid
 13157  000A6E  CFDD F008          	movff	postdec2,??_is_valid+1
 13158  000A72  90D8               	bcf	status,0,c
 13159  000A74  3607               	rlcf	??_is_valid,f,c
 13160  000A76  3608               	rlcf	??_is_valid+1,f,c
 13161  000A78  0E30               	movlw	low _B_array
 13162  000A7A  2407               	addwf	??_is_valid,w,c
 13163  000A7C  6ED9               	movwf	fsr2l,c
 13164  000A7E  0E01               	movlw	high _B_array
 13165  000A80  2008               	addwfc	??_is_valid+1,w,c
 13166  000A82  6EDA               	movwf	fsr2h,c
 13167  000A84  C065  FFDE         	movff	_B,postinc2
 13168  000A88  C066  FFDD         	movff	_B+1,postdec2
 13169                           
 13170                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 13171  000A8C  90D8               	bcf	status,0,c
 13172  000A8E  346D               	rlcf	_counter_step,w,c
 13173  000A90  6ED9               	movwf	fsr2l,c
 13174  000A92  346E               	rlcf	_counter_step+1,w,c
 13175  000A94  6EDA               	movwf	fsr2h,c
 13176  000A96  0E42               	movlw	low _compartment_number
 13177  000A98  26D9               	addwf	fsr2l,f,c
 13178  000A9A  0E00               	movlw	high _compartment_number
 13179  000A9C  22DA               	addwfc	fsr2h,f,c
 13180  000A9E  CFDE F007          	movff	postinc2,??_is_valid
 13181  000AA2  CFDD F008          	movff	postdec2,??_is_valid+1
 13182  000AA6  90D8               	bcf	status,0,c
 13183  000AA8  3607               	rlcf	??_is_valid,f,c
 13184  000AAA  3608               	rlcf	??_is_valid+1,f,c
 13185  000AAC  0E20               	movlw	low _S_array
 13186  000AAE  2407               	addwf	??_is_valid,w,c
 13187  000AB0  6ED9               	movwf	fsr2l,c
 13188  000AB2  0E01               	movlw	high _S_array
 13189  000AB4  2008               	addwfc	??_is_valid+1,w,c
 13190  000AB6  6EDA               	movwf	fsr2h,c
 13191  000AB8  C061  FFDE         	movff	_S,postinc2
 13192  000ABC  C062  FFDD         	movff	_S+1,postdec2
 13193                           
 13194                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 13195  000AC0  90D8               	bcf	status,0,c
 13196  000AC2  346D               	rlcf	_counter_step,w,c
 13197  000AC4  6ED9               	movwf	fsr2l,c
 13198  000AC6  346E               	rlcf	_counter_step+1,w,c
 13199  000AC8  6EDA               	movwf	fsr2h,c
 13200  000ACA  0E42               	movlw	low _compartment_number
 13201  000ACC  26D9               	addwf	fsr2l,f,c
 13202  000ACE  0E00               	movlw	high _compartment_number
 13203  000AD0  22DA               	addwfc	fsr2h,f,c
 13204  000AD2  CFDE F007          	movff	postinc2,??_is_valid
 13205  000AD6  CFDD F008          	movff	postdec2,??_is_valid+1
 13206  000ADA  90D8               	bcf	status,0,c
 13207  000ADC  3607               	rlcf	??_is_valid,f,c
 13208  000ADE  3608               	rlcf	??_is_valid+1,f,c
 13209  000AE0  0E00               	movlw	low _W_array
 13210  000AE2  2407               	addwf	??_is_valid,w,c
 13211  000AE4  6ED9               	movwf	fsr2l,c
 13212  000AE6  0E01               	movlw	high _W_array
 13213  000AE8  2008               	addwfc	??_is_valid+1,w,c
 13214  000AEA  6EDA               	movwf	fsr2h,c
 13215  000AEC  C05F  FFDE         	movff	_W,postinc2
 13216  000AF0  C060  FFDD         	movff	_W+1,postdec2
 13217                           
 13218                           ;keypad.c: 155: }
 13219  000AF4  0012               	return	
 13220  000AF6                     i2l728:
 13221                           
 13222                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 13223  000AF6  0E78               	movlw	low _current_set2
 13224  000AF8  6E01               	movwf	strcmp@s1,c
 13225  000AFA  0E00               	movlw	high _current_set2
 13226  000AFC  6E02               	movwf	strcmp@s1+1,c
 13227  000AFE  0EB5               	movlw	low STR_84
 13228  000B00  6E03               	movwf	strcmp@s2,c
 13229  000B02  0EFF               	movlw	high STR_84
 13230  000B04  6E04               	movwf	strcmp@s2+1,c
 13231  000B06  EC71  F01D         	call	_strcmp	;wreg free
 13232  000B0A  5001               	movf	?_strcmp,w,c
 13233  000B0C  1002               	iorwf	?_strcmp+1,w,c
 13234  000B0E  A4D8               	btfss	status,2,c
 13235  000B10  D06A               	goto	i2l730
 13236                           
 13237                           ;keypad.c: 157: B = 2*number;
 13238  000B12  90D8               	bcf	status,0,c
 13239  000B14  347D               	rlcf	_number,w,c
 13240  000B16  6E65               	movwf	_B,c
 13241  000B18  347E               	rlcf	_number+1,w,c
 13242  000B1A  6E66               	movwf	_B+1,c
 13243                           
 13244                           ;keypad.c: 158: N = 1*number;
 13245  000B1C  C07D  F063         	movff	_number,_N
 13246  000B20  C07E  F064         	movff	_number+1,_N+1
 13247                           
 13248                           ;keypad.c: 159: W = 1*number;
 13249  000B24  C07D  F05F         	movff	_number,_W
 13250  000B28  C07E  F060         	movff	_number+1,_W+1
 13251                           
 13252                           ;keypad.c: 160: total_number = 4*number;
 13253  000B2C  C07D  F007         	movff	_number,??_is_valid
 13254  000B30  C07E  F008         	movff	_number+1,??_is_valid+1
 13255  000B34  90D8               	bcf	status,0,c
 13256  000B36  3607               	rlcf	??_is_valid,f,c
 13257  000B38  3608               	rlcf	??_is_valid+1,f,c
 13258  000B3A  90D8               	bcf	status,0,c
 13259  000B3C  3607               	rlcf	??_is_valid,f,c
 13260  000B3E  3608               	rlcf	??_is_valid+1,f,c
 13261  000B40  C007  F069         	movff	??_is_valid,_total_number
 13262  000B44  C008  F06A         	movff	??_is_valid+1,_total_number+1
 13263                           
 13264                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 13265  000B48  90D8               	bcf	status,0,c
 13266  000B4A  346D               	rlcf	_counter_step,w,c
 13267  000B4C  6ED9               	movwf	fsr2l,c
 13268  000B4E  346E               	rlcf	_counter_step+1,w,c
 13269  000B50  6EDA               	movwf	fsr2h,c
 13270  000B52  0E42               	movlw	low _compartment_number
 13271  000B54  26D9               	addwf	fsr2l,f,c
 13272  000B56  0E00               	movlw	high _compartment_number
 13273  000B58  22DA               	addwfc	fsr2h,f,c
 13274  000B5A  CFDE F007          	movff	postinc2,??_is_valid
 13275  000B5E  CFDD F008          	movff	postdec2,??_is_valid+1
 13276  000B62  90D8               	bcf	status,0,c
 13277  000B64  3607               	rlcf	??_is_valid,f,c
 13278  000B66  3608               	rlcf	??_is_valid+1,f,c
 13279  000B68  0E30               	movlw	low _B_array
 13280  000B6A  2407               	addwf	??_is_valid,w,c
 13281  000B6C  6ED9               	movwf	fsr2l,c
 13282  000B6E  0E01               	movlw	high _B_array
 13283  000B70  2008               	addwfc	??_is_valid+1,w,c
 13284  000B72  6EDA               	movwf	fsr2h,c
 13285  000B74  C065  FFDE         	movff	_B,postinc2
 13286  000B78  C066  FFDD         	movff	_B+1,postdec2
 13287                           
 13288                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 13289  000B7C  90D8               	bcf	status,0,c
 13290  000B7E  346D               	rlcf	_counter_step,w,c
 13291  000B80  6ED9               	movwf	fsr2l,c
 13292  000B82  346E               	rlcf	_counter_step+1,w,c
 13293  000B84  6EDA               	movwf	fsr2h,c
 13294  000B86  0E42               	movlw	low _compartment_number
 13295  000B88  26D9               	addwf	fsr2l,f,c
 13296  000B8A  0E00               	movlw	high _compartment_number
 13297  000B8C  22DA               	addwfc	fsr2h,f,c
 13298  000B8E  CFDE F007          	movff	postinc2,??_is_valid
 13299  000B92  CFDD F008          	movff	postdec2,??_is_valid+1
 13300  000B96  90D8               	bcf	status,0,c
 13301  000B98  3607               	rlcf	??_is_valid,f,c
 13302  000B9A  3608               	rlcf	??_is_valid+1,f,c
 13303  000B9C  0E10               	movlw	low _N_array
 13304  000B9E  2407               	addwf	??_is_valid,w,c
 13305  000BA0  6ED9               	movwf	fsr2l,c
 13306  000BA2  0E01               	movlw	high _N_array
 13307  000BA4  2008               	addwfc	??_is_valid+1,w,c
 13308  000BA6  6EDA               	movwf	fsr2h,c
 13309  000BA8  C063  FFDE         	movff	_N,postinc2
 13310  000BAC  C064  FFDD         	movff	_N+1,postdec2
 13311                           
 13312                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 13313  000BB0  90D8               	bcf	status,0,c
 13314  000BB2  346D               	rlcf	_counter_step,w,c
 13315  000BB4  6ED9               	movwf	fsr2l,c
 13316  000BB6  346E               	rlcf	_counter_step+1,w,c
 13317  000BB8  6EDA               	movwf	fsr2h,c
 13318  000BBA  0E42               	movlw	low _compartment_number
 13319  000BBC  26D9               	addwf	fsr2l,f,c
 13320  000BBE  0E00               	movlw	high _compartment_number
 13321  000BC0  22DA               	addwfc	fsr2h,f,c
 13322  000BC2  CFDE F007          	movff	postinc2,??_is_valid
 13323  000BC6  CFDD F008          	movff	postdec2,??_is_valid+1
 13324  000BCA  90D8               	bcf	status,0,c
 13325  000BCC  3607               	rlcf	??_is_valid,f,c
 13326  000BCE  3608               	rlcf	??_is_valid+1,f,c
 13327  000BD0  0E00               	movlw	low _W_array
 13328  000BD2  2407               	addwf	??_is_valid,w,c
 13329  000BD4  6ED9               	movwf	fsr2l,c
 13330  000BD6  0E01               	movlw	high _W_array
 13331  000BD8  2008               	addwfc	??_is_valid+1,w,c
 13332  000BDA  6EDA               	movwf	fsr2h,c
 13333  000BDC  C05F  FFDE         	movff	_W,postinc2
 13334  000BE0  C060  FFDD         	movff	_W+1,postdec2
 13335                           
 13336                           ;keypad.c: 165: }
 13337  000BE4  0012               	return	
 13338  000BE6                     i2l730:
 13339                           
 13340                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 13341  000BE6  0E78               	movlw	low _current_set2
 13342  000BE8  6E01               	movwf	strcmp@s1,c
 13343  000BEA  0E00               	movlw	high _current_set2
 13344  000BEC  6E02               	movwf	strcmp@s1+1,c
 13345  000BEE  0EBA               	movlw	low STR_85
 13346  000BF0  6E03               	movwf	strcmp@s2,c
 13347  000BF2  0EFF               	movlw	high STR_85
 13348  000BF4  6E04               	movwf	strcmp@s2+1,c
 13349  000BF6  EC71  F01D         	call	_strcmp	;wreg free
 13350  000BFA  5001               	movf	?_strcmp,w,c
 13351  000BFC  1002               	iorwf	?_strcmp+1,w,c
 13352  000BFE  A4D8               	btfss	status,2,c
 13353  000C00  D06A               	goto	i2l732
 13354                           
 13355                           ;keypad.c: 167: B = 1*number;
 13356  000C02  C07D  F065         	movff	_number,_B
 13357  000C06  C07E  F066         	movff	_number+1,_B+1
 13358                           
 13359                           ;keypad.c: 168: N = 2*number;
 13360  000C0A  90D8               	bcf	status,0,c
 13361  000C0C  347D               	rlcf	_number,w,c
 13362  000C0E  6E63               	movwf	_N,c
 13363  000C10  347E               	rlcf	_number+1,w,c
 13364  000C12  6E64               	movwf	_N+1,c
 13365                           
 13366                           ;keypad.c: 169: W = 1*number;
 13367  000C14  C07D  F05F         	movff	_number,_W
 13368  000C18  C07E  F060         	movff	_number+1,_W+1
 13369                           
 13370                           ;keypad.c: 170: total_number = 4*number;
 13371  000C1C  C07D  F007         	movff	_number,??_is_valid
 13372  000C20  C07E  F008         	movff	_number+1,??_is_valid+1
 13373  000C24  90D8               	bcf	status,0,c
 13374  000C26  3607               	rlcf	??_is_valid,f,c
 13375  000C28  3608               	rlcf	??_is_valid+1,f,c
 13376  000C2A  90D8               	bcf	status,0,c
 13377  000C2C  3607               	rlcf	??_is_valid,f,c
 13378  000C2E  3608               	rlcf	??_is_valid+1,f,c
 13379  000C30  C007  F069         	movff	??_is_valid,_total_number
 13380  000C34  C008  F06A         	movff	??_is_valid+1,_total_number+1
 13381                           
 13382                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 13383  000C38  90D8               	bcf	status,0,c
 13384  000C3A  346D               	rlcf	_counter_step,w,c
 13385  000C3C  6ED9               	movwf	fsr2l,c
 13386  000C3E  346E               	rlcf	_counter_step+1,w,c
 13387  000C40  6EDA               	movwf	fsr2h,c
 13388  000C42  0E42               	movlw	low _compartment_number
 13389  000C44  26D9               	addwf	fsr2l,f,c
 13390  000C46  0E00               	movlw	high _compartment_number
 13391  000C48  22DA               	addwfc	fsr2h,f,c
 13392  000C4A  CFDE F007          	movff	postinc2,??_is_valid
 13393  000C4E  CFDD F008          	movff	postdec2,??_is_valid+1
 13394  000C52  90D8               	bcf	status,0,c
 13395  000C54  3607               	rlcf	??_is_valid,f,c
 13396  000C56  3608               	rlcf	??_is_valid+1,f,c
 13397  000C58  0E30               	movlw	low _B_array
 13398  000C5A  2407               	addwf	??_is_valid,w,c
 13399  000C5C  6ED9               	movwf	fsr2l,c
 13400  000C5E  0E01               	movlw	high _B_array
 13401  000C60  2008               	addwfc	??_is_valid+1,w,c
 13402  000C62  6EDA               	movwf	fsr2h,c
 13403  000C64  C065  FFDE         	movff	_B,postinc2
 13404  000C68  C066  FFDD         	movff	_B+1,postdec2
 13405                           
 13406                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 13407  000C6C  90D8               	bcf	status,0,c
 13408  000C6E  346D               	rlcf	_counter_step,w,c
 13409  000C70  6ED9               	movwf	fsr2l,c
 13410  000C72  346E               	rlcf	_counter_step+1,w,c
 13411  000C74  6EDA               	movwf	fsr2h,c
 13412  000C76  0E42               	movlw	low _compartment_number
 13413  000C78  26D9               	addwf	fsr2l,f,c
 13414  000C7A  0E00               	movlw	high _compartment_number
 13415  000C7C  22DA               	addwfc	fsr2h,f,c
 13416  000C7E  CFDE F007          	movff	postinc2,??_is_valid
 13417  000C82  CFDD F008          	movff	postdec2,??_is_valid+1
 13418  000C86  90D8               	bcf	status,0,c
 13419  000C88  3607               	rlcf	??_is_valid,f,c
 13420  000C8A  3608               	rlcf	??_is_valid+1,f,c
 13421  000C8C  0E10               	movlw	low _N_array
 13422  000C8E  2407               	addwf	??_is_valid,w,c
 13423  000C90  6ED9               	movwf	fsr2l,c
 13424  000C92  0E01               	movlw	high _N_array
 13425  000C94  2008               	addwfc	??_is_valid+1,w,c
 13426  000C96  6EDA               	movwf	fsr2h,c
 13427  000C98  C063  FFDE         	movff	_N,postinc2
 13428  000C9C  C064  FFDD         	movff	_N+1,postdec2
 13429                           
 13430                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 13431  000CA0  90D8               	bcf	status,0,c
 13432  000CA2  346D               	rlcf	_counter_step,w,c
 13433  000CA4  6ED9               	movwf	fsr2l,c
 13434  000CA6  346E               	rlcf	_counter_step+1,w,c
 13435  000CA8  6EDA               	movwf	fsr2h,c
 13436  000CAA  0E42               	movlw	low _compartment_number
 13437  000CAC  26D9               	addwf	fsr2l,f,c
 13438  000CAE  0E00               	movlw	high _compartment_number
 13439  000CB0  22DA               	addwfc	fsr2h,f,c
 13440  000CB2  CFDE F007          	movff	postinc2,??_is_valid
 13441  000CB6  CFDD F008          	movff	postdec2,??_is_valid+1
 13442  000CBA  90D8               	bcf	status,0,c
 13443  000CBC  3607               	rlcf	??_is_valid,f,c
 13444  000CBE  3608               	rlcf	??_is_valid+1,f,c
 13445  000CC0  0E00               	movlw	low _W_array
 13446  000CC2  2407               	addwf	??_is_valid,w,c
 13447  000CC4  6ED9               	movwf	fsr2l,c
 13448  000CC6  0E01               	movlw	high _W_array
 13449  000CC8  2008               	addwfc	??_is_valid+1,w,c
 13450  000CCA  6EDA               	movwf	fsr2h,c
 13451  000CCC  C05F  FFDE         	movff	_W,postinc2
 13452  000CD0  C060  FFDD         	movff	_W+1,postdec2
 13453                           
 13454                           ;keypad.c: 175: }
 13455  000CD4  0012               	return	
 13456  000CD6                     i2l732:
 13457                           
 13458                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 13459  000CD6  0E78               	movlw	low _current_set2
 13460  000CD8  6E01               	movwf	strcmp@s1,c
 13461  000CDA  0E00               	movlw	high _current_set2
 13462  000CDC  6E02               	movwf	strcmp@s1+1,c
 13463  000CDE  0EB0               	movlw	low STR_86
 13464  000CE0  6E03               	movwf	strcmp@s2,c
 13465  000CE2  0EFF               	movlw	high STR_86
 13466  000CE4  6E04               	movwf	strcmp@s2+1,c
 13467  000CE6  EC71  F01D         	call	_strcmp	;wreg free
 13468  000CEA  5001               	movf	?_strcmp,w,c
 13469  000CEC  1002               	iorwf	?_strcmp+1,w,c
 13470  000CEE  A4D8               	btfss	status,2,c
 13471  000CF0  D055               	goto	i2l734
 13472                           
 13473                           ;keypad.c: 177: B = 1*number;
 13474  000CF2  C07D  F065         	movff	_number,_B
 13475  000CF6  C07E  F066         	movff	_number+1,_B+1
 13476                           
 13477                           ;keypad.c: 178: N = 3*number;
 13478  000CFA  C07D  F001         	movff	_number,i2___wmul@multiplier
 13479  000CFE  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 13480  000D02  0E00               	movlw	0
 13481  000D04  6E04               	movwf	i2___wmul@multiplicand+1,c
 13482  000D06  0E03               	movlw	3
 13483  000D08  6E03               	movwf	i2___wmul@multiplicand,c
 13484  000D0A  EC77  F01E         	call	i2___wmul	;wreg free
 13485  000D0E  C001  F063         	movff	?i2___wmul,_N
 13486  000D12  C002  F064         	movff	?i2___wmul+1,_N+1
 13487                           
 13488                           ;keypad.c: 179: total_number = 4*number;
 13489  000D16  C07D  F007         	movff	_number,??_is_valid
 13490  000D1A  C07E  F008         	movff	_number+1,??_is_valid+1
 13491  000D1E  90D8               	bcf	status,0,c
 13492  000D20  3607               	rlcf	??_is_valid,f,c
 13493  000D22  3608               	rlcf	??_is_valid+1,f,c
 13494  000D24  90D8               	bcf	status,0,c
 13495  000D26  3607               	rlcf	??_is_valid,f,c
 13496  000D28  3608               	rlcf	??_is_valid+1,f,c
 13497  000D2A  C007  F069         	movff	??_is_valid,_total_number
 13498  000D2E  C008  F06A         	movff	??_is_valid+1,_total_number+1
 13499                           
 13500                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 13501  000D32  90D8               	bcf	status,0,c
 13502  000D34  346D               	rlcf	_counter_step,w,c
 13503  000D36  6ED9               	movwf	fsr2l,c
 13504  000D38  346E               	rlcf	_counter_step+1,w,c
 13505  000D3A  6EDA               	movwf	fsr2h,c
 13506  000D3C  0E42               	movlw	low _compartment_number
 13507  000D3E  26D9               	addwf	fsr2l,f,c
 13508  000D40  0E00               	movlw	high _compartment_number
 13509  000D42  22DA               	addwfc	fsr2h,f,c
 13510  000D44  CFDE F007          	movff	postinc2,??_is_valid
 13511  000D48  CFDD F008          	movff	postdec2,??_is_valid+1
 13512  000D4C  90D8               	bcf	status,0,c
 13513  000D4E  3607               	rlcf	??_is_valid,f,c
 13514  000D50  3608               	rlcf	??_is_valid+1,f,c
 13515  000D52  0E30               	movlw	low _B_array
 13516  000D54  2407               	addwf	??_is_valid,w,c
 13517  000D56  6ED9               	movwf	fsr2l,c
 13518  000D58  0E01               	movlw	high _B_array
 13519  000D5A  2008               	addwfc	??_is_valid+1,w,c
 13520  000D5C  6EDA               	movwf	fsr2h,c
 13521  000D5E  C065  FFDE         	movff	_B,postinc2
 13522  000D62  C066  FFDD         	movff	_B+1,postdec2
 13523                           
 13524                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 13525  000D66  90D8               	bcf	status,0,c
 13526  000D68  346D               	rlcf	_counter_step,w,c
 13527  000D6A  6ED9               	movwf	fsr2l,c
 13528  000D6C  346E               	rlcf	_counter_step+1,w,c
 13529  000D6E  6EDA               	movwf	fsr2h,c
 13530  000D70  0E42               	movlw	low _compartment_number
 13531  000D72  26D9               	addwf	fsr2l,f,c
 13532  000D74  0E00               	movlw	high _compartment_number
 13533  000D76  22DA               	addwfc	fsr2h,f,c
 13534  000D78  CFDE F007          	movff	postinc2,??_is_valid
 13535  000D7C  CFDD F008          	movff	postdec2,??_is_valid+1
 13536  000D80  90D8               	bcf	status,0,c
 13537  000D82  3607               	rlcf	??_is_valid,f,c
 13538  000D84  3608               	rlcf	??_is_valid+1,f,c
 13539  000D86  0E10               	movlw	low _N_array
 13540  000D88  2407               	addwf	??_is_valid,w,c
 13541  000D8A  6ED9               	movwf	fsr2l,c
 13542  000D8C  0E01               	movlw	high _N_array
 13543  000D8E  2008               	addwfc	??_is_valid+1,w,c
 13544  000D90  6EDA               	movwf	fsr2h,c
 13545  000D92  C063  FFDE         	movff	_N,postinc2
 13546  000D96  C064  FFDD         	movff	_N+1,postdec2
 13547                           
 13548                           ;keypad.c: 184: }
 13549  000D9A  0012               	return	
 13550  000D9C                     i2l734:
 13551                           
 13552                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 13553  000D9C  0E78               	movlw	low _current_set2
 13554  000D9E  6E01               	movwf	strcmp@s1,c
 13555  000DA0  0E00               	movlw	high _current_set2
 13556  000DA2  6E02               	movwf	strcmp@s1+1,c
 13557  000DA4  0ECE               	movlw	low STR_87
 13558  000DA6  6E03               	movwf	strcmp@s2,c
 13559  000DA8  0EFF               	movlw	high STR_87
 13560  000DAA  6E04               	movwf	strcmp@s2+1,c
 13561  000DAC  EC71  F01D         	call	_strcmp	;wreg free
 13562  000DB0  5001               	movf	?_strcmp,w,c
 13563  000DB2  1002               	iorwf	?_strcmp+1,w,c
 13564  000DB4  A4D8               	btfss	status,2,c
 13565  000DB6  0012               	return	
 13566                           
 13567                           ;keypad.c: 186: B = 1*number;
 13568  000DB8  C07D  F065         	movff	_number,_B
 13569  000DBC  C07E  F066         	movff	_number+1,_B+1
 13570                           
 13571                           ;keypad.c: 187: W = 3*number;
 13572  000DC0  C07D  F001         	movff	_number,i2___wmul@multiplier
 13573  000DC4  C07E  F002         	movff	_number+1,i2___wmul@multiplier+1
 13574  000DC8  0E00               	movlw	0
 13575  000DCA  6E04               	movwf	i2___wmul@multiplicand+1,c
 13576  000DCC  0E03               	movlw	3
 13577  000DCE  6E03               	movwf	i2___wmul@multiplicand,c
 13578  000DD0  EC77  F01E         	call	i2___wmul	;wreg free
 13579  000DD4  C001  F05F         	movff	?i2___wmul,_W
 13580  000DD8  C002  F060         	movff	?i2___wmul+1,_W+1
 13581                           
 13582                           ;keypad.c: 188: total_number = 4*number;
 13583  000DDC  C07D  F007         	movff	_number,??_is_valid
 13584  000DE0  C07E  F008         	movff	_number+1,??_is_valid+1
 13585  000DE4  90D8               	bcf	status,0,c
 13586  000DE6  3607               	rlcf	??_is_valid,f,c
 13587  000DE8  3608               	rlcf	??_is_valid+1,f,c
 13588  000DEA  90D8               	bcf	status,0,c
 13589  000DEC  3607               	rlcf	??_is_valid,f,c
 13590  000DEE  3608               	rlcf	??_is_valid+1,f,c
 13591  000DF0  C007  F069         	movff	??_is_valid,_total_number
 13592  000DF4  C008  F06A         	movff	??_is_valid+1,_total_number+1
 13593                           
 13594                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 13595  000DF8  90D8               	bcf	status,0,c
 13596  000DFA  346D               	rlcf	_counter_step,w,c
 13597  000DFC  6ED9               	movwf	fsr2l,c
 13598  000DFE  346E               	rlcf	_counter_step+1,w,c
 13599  000E00  6EDA               	movwf	fsr2h,c
 13600  000E02  0E42               	movlw	low _compartment_number
 13601  000E04  26D9               	addwf	fsr2l,f,c
 13602  000E06  0E00               	movlw	high _compartment_number
 13603  000E08  22DA               	addwfc	fsr2h,f,c
 13604  000E0A  CFDE F007          	movff	postinc2,??_is_valid
 13605  000E0E  CFDD F008          	movff	postdec2,??_is_valid+1
 13606  000E12  90D8               	bcf	status,0,c
 13607  000E14  3607               	rlcf	??_is_valid,f,c
 13608  000E16  3608               	rlcf	??_is_valid+1,f,c
 13609  000E18  0E30               	movlw	low _B_array
 13610  000E1A  2407               	addwf	??_is_valid,w,c
 13611  000E1C  6ED9               	movwf	fsr2l,c
 13612  000E1E  0E01               	movlw	high _B_array
 13613  000E20  2008               	addwfc	??_is_valid+1,w,c
 13614  000E22  6EDA               	movwf	fsr2h,c
 13615  000E24  C065  FFDE         	movff	_B,postinc2
 13616  000E28  C066  FFDD         	movff	_B+1,postdec2
 13617                           
 13618                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 13619  000E2C  90D8               	bcf	status,0,c
 13620  000E2E  346D               	rlcf	_counter_step,w,c
 13621  000E30  6ED9               	movwf	fsr2l,c
 13622  000E32  346E               	rlcf	_counter_step+1,w,c
 13623  000E34  6EDA               	movwf	fsr2h,c
 13624  000E36  0E42               	movlw	low _compartment_number
 13625  000E38  26D9               	addwf	fsr2l,f,c
 13626  000E3A  0E00               	movlw	high _compartment_number
 13627  000E3C  22DA               	addwfc	fsr2h,f,c
 13628  000E3E  CFDE F007          	movff	postinc2,??_is_valid
 13629  000E42  CFDD F008          	movff	postdec2,??_is_valid+1
 13630  000E46  90D8               	bcf	status,0,c
 13631  000E48  3607               	rlcf	??_is_valid,f,c
 13632  000E4A  3608               	rlcf	??_is_valid+1,f,c
 13633  000E4C  0E00               	movlw	low _W_array
 13634  000E4E  2407               	addwf	??_is_valid,w,c
 13635  000E50  6ED9               	movwf	fsr2l,c
 13636  000E52  0E01               	movlw	high _W_array
 13637  000E54  2008               	addwfc	??_is_valid+1,w,c
 13638  000E56  6EDA               	movwf	fsr2h,c
 13639  000E58  C05F  FFDE         	movff	_W,postinc2
 13640  000E5C  C060  FFDD         	movff	_W+1,postdec2
 13641  000E60  0012               	return	
 13642  000E62                     __end_of_is_valid:
 13643                           	opt stack 0
 13644                           pclatu	equ	0xFFB
 13645                           pclath	equ	0xFFA
 13646                           tblptru	equ	0xFF8
 13647                           tblptrh	equ	0xFF7
 13648                           tblptrl	equ	0xFF6
 13649                           tablat	equ	0xFF5
 13650                           prodh	equ	0xFF4
 13651                           prodl	equ	0xFF3
 13652                           intcon	equ	0xFF2
 13653                           intcon3	equ	0xFF0
 13654                           indf0	equ	0xFEF
 13655                           postinc0	equ	0xFEE
 13656                           fsr0h	equ	0xFEA
 13657                           fsr0l	equ	0xFE9
 13658                           wreg	equ	0xFE8
 13659                           indf1	equ	0xFE7
 13660                           postdec1	equ	0xFE5
 13661                           fsr1h	equ	0xFE2
 13662                           fsr1l	equ	0xFE1
 13663                           indf2	equ	0xFDF
 13664                           postinc2	equ	0xFDE
 13665                           postdec2	equ	0xFDD
 13666                           fsr2h	equ	0xFDA
 13667                           fsr2l	equ	0xFD9
 13668                           status	equ	0xFD8
 13669                           
 13670 ;; *************** function i2___wmul *****************
 13671 ;; Defined at:
 13672 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 13673 ;; Parameters:    Size  Location     Type
 13674 ;;  multiplier      2    0[COMRAM] unsigned int 
 13675 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13676 ;; Auto vars:     Size  Location     Type
 13677 ;;  __wmul          2    4[COMRAM] unsigned int 
 13678 ;; Return value:  Size  Location     Type
 13679 ;;                  2    0[COMRAM] unsigned int 
 13680 ;; Registers used:
 13681 ;;		wreg, status,2, status,0, prodl, prodh
 13682 ;; Tracked objects:
 13683 ;;		On entry : 0/0
 13684 ;;		On exit  : 0/0
 13685 ;;		Unchanged: 0/0
 13686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13687 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13688 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13691 ;;Total ram usage:        6 bytes
 13692 ;; Hardware stack levels used:    1
 13693 ;; This function calls:
 13694 ;;		Nothing
 13695 ;; This function is called by:
 13696 ;;		_interruptHandler
 13697 ;;		_is_valid
 13698 ;;		i2_printf
 13699 ;; This function uses a non-reentrant model
 13700 ;;
 13701                           
 13702                           	psect	text40
 13703  003CEE                     __ptext40:
 13704                           	opt stack 0
 13705  003CEE                     i2___wmul:
 13706                           	opt stack 25
 13707                           
 13708                           ;incstack = 0
 13709  003CEE  5001               	movf	i2___wmul@multiplier,w,c
 13710  003CF0  0203               	mulwf	i2___wmul@multiplicand,c
 13711  003CF2  CFF3 F005          	movff	prodl,i2___wmul@product
 13712  003CF6  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13713  003CFA  5001               	movf	i2___wmul@multiplier,w,c
 13714  003CFC  0204               	mulwf	i2___wmul@multiplicand+1,c
 13715  003CFE  50F3               	movf	prodl,w,c
 13716  003D00  2606               	addwf	i2___wmul@product+1,f,c
 13717  003D02  5002               	movf	i2___wmul@multiplier+1,w,c
 13718  003D04  0203               	mulwf	i2___wmul@multiplicand,c
 13719  003D06  50F3               	movf	prodl,w,c
 13720  003D08  2606               	addwf	i2___wmul@product+1,f,c
 13721  003D0A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13722  003D0E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13723  003D12  0012               	return	
 13724  003D14                     __end_ofi2___wmul:
 13725                           	opt stack 0
 13726                           pclatu	equ	0xFFB
 13727                           pclath	equ	0xFFA
 13728                           tblptru	equ	0xFF8
 13729                           tblptrh	equ	0xFF7
 13730                           tblptrl	equ	0xFF6
 13731                           tablat	equ	0xFF5
 13732                           prodh	equ	0xFF4
 13733                           prodl	equ	0xFF3
 13734                           intcon	equ	0xFF2
 13735                           intcon3	equ	0xFF0
 13736                           indf0	equ	0xFEF
 13737                           postinc0	equ	0xFEE
 13738                           fsr0h	equ	0xFEA
 13739                           fsr0l	equ	0xFE9
 13740                           wreg	equ	0xFE8
 13741                           indf1	equ	0xFE7
 13742                           postdec1	equ	0xFE5
 13743                           fsr1h	equ	0xFE2
 13744                           fsr1l	equ	0xFE1
 13745                           indf2	equ	0xFDF
 13746                           postinc2	equ	0xFDE
 13747                           postdec2	equ	0xFDD
 13748                           fsr2h	equ	0xFDA
 13749                           fsr2l	equ	0xFD9
 13750                           status	equ	0xFD8
 13751                           
 13752 ;; *************** function _strcmp *****************
 13753 ;; Defined at:
 13754 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 13755 ;; Parameters:    Size  Location     Type
 13756 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 13757 ;;		 -> current_set2(5), 
 13758 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 13759 ;;		 -> STR_87(5), STR_86(5), STR_85(5), STR_84(5), 
 13760 ;;		 -> STR_83(5), STR_82(5), STR_81(5), STR_80(4), 
 13761 ;;		 -> STR_79(4), STR_78(4), STR_77(4), STR_76(4), 
 13762 ;;		 -> STR_75(4), STR_74(3), STR_73(3), STR_72(3), 
 13763 ;;		 -> STR_71(2), STR_70(2), STR_69(2), STR_68(2), 
 13764 ;; Auto vars:     Size  Location     Type
 13765 ;;  r               1    5[COMRAM] char 
 13766 ;; Return value:  Size  Location     Type
 13767 ;;                  2    0[COMRAM] int 
 13768 ;; Registers used:
 13769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13770 ;; Tracked objects:
 13771 ;;		On entry : 0/0
 13772 ;;		On exit  : 0/0
 13773 ;;		Unchanged: 0/0
 13774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13778 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13779 ;;Total ram usage:        6 bytes
 13780 ;; Hardware stack levels used:    1
 13781 ;; This function calls:
 13782 ;;		Nothing
 13783 ;; This function is called by:
 13784 ;;		_is_valid
 13785 ;; This function uses a non-reentrant model
 13786 ;;
 13787                           
 13788                           	psect	text41
 13789  003AE2                     __ptext41:
 13790                           	opt stack 0
 13791  003AE2                     _strcmp:
 13792                           	opt stack 25
 13793                           
 13794                           ;incstack = 0
 13795  003AE2  D004               	goto	i2l1443
 13796  003AE4  4A01               	infsnz	strcmp@s1,f,c
 13797  003AE6  2A02               	incf	strcmp@s1+1,f,c
 13798  003AE8  4A03               	infsnz	strcmp@s2,f,c
 13799  003AEA  2A04               	incf	strcmp@s2+1,f,c
 13800  003AEC                     i2l1443:
 13801  003AEC  C001  FFD9         	movff	strcmp@s1,fsr2l
 13802  003AF0  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 13803  003AF4  50DF               	movf	indf2,w,c
 13804  003AF6  6E05               	movwf	??_strcmp& (0+255),c
 13805  003AF8  C003  FFF6         	movff	strcmp@s2,tblptrl
 13806  003AFC  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 13807  003B00                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13808  003B00  6AF8               	clrf	tblptru,c
 13809  003B02                     	endif
 13810  003B02                     	if	0	;tblptru may be non-zero
 13811  003B02                     	endif
 13812  003B02  0008               	tblrd		*
 13813  003B04  50F5               	movf	tablat,w,c
 13814  003B06  0800               	sublw	0
 13815  003B08  2405               	addwf	??_strcmp,w,c
 13816  003B0A  6E06               	movwf	strcmp@r,c
 13817  003B0C  5006               	movf	strcmp@r,w,c
 13818  003B0E  A4D8               	btfss	status,2,c
 13819  003B10  D007               	goto	i2u246_40
 13820  003B12  C001  FFD9         	movff	strcmp@s1,fsr2l
 13821  003B16  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 13822  003B1A  50DF               	movf	indf2,w,c
 13823  003B1C  A4D8               	btfss	status,2,c
 13824  003B1E  D7E2               	goto	i2l1444
 13825  003B20                     i2u246_40:
 13826  003B20  5006               	movf	strcmp@r,w,c
 13827  003B22  6E01               	movwf	?_strcmp,c
 13828  003B24  6A02               	clrf	?_strcmp+1,c
 13829  003B26  BE01               	btfsc	?_strcmp,7,c
 13830  003B28  0602               	decf	?_strcmp+1,f,c
 13831  003B2A  0012               	return	
 13832  003B2C                     __end_of_strcmp:
 13833                           	opt stack 0
 13834                           pclatu	equ	0xFFB
 13835                           pclath	equ	0xFFA
 13836                           tblptru	equ	0xFF8
 13837                           tblptrh	equ	0xFF7
 13838                           tblptrl	equ	0xFF6
 13839                           tablat	equ	0xFF5
 13840                           prodh	equ	0xFF4
 13841                           prodl	equ	0xFF3
 13842                           intcon	equ	0xFF2
 13843                           intcon3	equ	0xFF0
 13844                           indf0	equ	0xFEF
 13845                           postinc0	equ	0xFEE
 13846                           fsr0h	equ	0xFEA
 13847                           fsr0l	equ	0xFE9
 13848                           wreg	equ	0xFE8
 13849                           indf1	equ	0xFE7
 13850                           postdec1	equ	0xFE5
 13851                           fsr1h	equ	0xFE2
 13852                           fsr1l	equ	0xFE1
 13853                           indf2	equ	0xFDF
 13854                           postinc2	equ	0xFDE
 13855                           postdec2	equ	0xFDD
 13856                           fsr2h	equ	0xFDA
 13857                           fsr2l	equ	0xFD9
 13858                           status	equ	0xFD8
 13859                           
 13860 ;; *************** function _generate_compartment_array *****************
 13861 ;; Defined at:
 13862 ;;		line 220 in file "keypad.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;  step            2    0[COMRAM] int 
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;		None
 13867 ;; Return value:  Size  Location     Type
 13868 ;;                  1    wreg      void 
 13869 ;; Registers used:
 13870 ;;		wreg, status,2, status,0
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13879 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13880 ;;Total ram usage:        4 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; This function calls:
 13883 ;;		Nothing
 13884 ;; This function is called by:
 13885 ;;		_interruptHandler
 13886 ;; This function uses a non-reentrant model
 13887 ;;
 13888                           
 13889                           	psect	text42
 13890  002EC0                     __ptext42:
 13891                           	opt stack 0
 13892  002EC0                     _generate_compartment_array:
 13893                           	opt stack 26
 13894                           
 13895                           ;keypad.c: 222: switch(step){
 13896                           
 13897                           ;incstack = 0
 13898  002EC0  D11C               	goto	i2l746
 13899  002EC2                     
 13900                           ;keypad.c: 224: compartment_array[1] = 1;
 13901  002EC2  0E00               	movlw	0
 13902  002EC4  0100               	movlb	0	; () banked
 13903  002EC6  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13904  002EC8  0E01               	movlw	1
 13905  002ECA  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13906                           
 13907                           ;keypad.c: 225: compartment_array[3] = 1;
 13908  002ECC  0E00               	movlw	0
 13909  002ECE  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13910  002ED0  0E01               	movlw	1
 13911  002ED2  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13912                           
 13913                           ;keypad.c: 226: compartment_array[5] = 1;
 13914  002ED4  0E00               	movlw	0
 13915  002ED6  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 13916  002ED8  0E01               	movlw	1
 13917  002EDA  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 13918                           
 13919                           ;keypad.c: 227: compartment_array[7] = 1;
 13920  002EDC  0E00               	movlw	0
 13921  002EDE  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 13922  002EE0  0E01               	movlw	1
 13923  002EE2  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 13924                           
 13925                           ;keypad.c: 230: compartment_number[0] = 1;
 13926  002EE4  0E00               	movlw	0
 13927  002EE6  6E43               	movwf	_compartment_number+1,c
 13928  002EE8  0E01               	movlw	1
 13929  002EEA  6E42               	movwf	_compartment_number,c
 13930                           
 13931                           ;keypad.c: 231: compartment_number[1] = 3;
 13932  002EEC  0E00               	movlw	0
 13933  002EEE  6E45               	movwf	_compartment_number+3,c
 13934  002EF0  0E03               	movlw	3
 13935  002EF2  6E44               	movwf	_compartment_number+2,c
 13936                           
 13937                           ;keypad.c: 232: compartment_number[2] = 5;
 13938  002EF4  0E00               	movlw	0
 13939  002EF6  6E47               	movwf	_compartment_number+5,c
 13940  002EF8  0E05               	movlw	5
 13941  002EFA  6E46               	movwf	_compartment_number+4,c
 13942                           
 13943                           ;keypad.c: 233: compartment_number[3] = 7;
 13944  002EFC  0E00               	movlw	0
 13945  002EFE  6E49               	movwf	_compartment_number+7,c
 13946  002F00  0E07               	movlw	7
 13947  002F02  6E48               	movwf	_compartment_number+6,c
 13948                           
 13949                           ;keypad.c: 235: break;
 13950  002F04  0012               	return	
 13951  002F06                     
 13952                           ;keypad.c: 237: compartment_array[0] = 1;
 13953                           
 13954                           ; BSR set to: 0
 13955  002F06  0E00               	movlw	0
 13956  002F08  0100               	movlb	0	; () banked
 13957  002F0A  6F81               	movwf	(_compartment_array+1)& (0+255),b
 13958  002F0C  0E01               	movlw	1
 13959  002F0E  6F80               	movwf	_compartment_array& (0+255),b
 13960                           
 13961                           ;keypad.c: 238: compartment_array[1] = 1;
 13962  002F10  0E00               	movlw	0
 13963  002F12  6F83               	movwf	(_compartment_array+3)& (0+255),b
 13964  002F14  0E01               	movlw	1
 13965  002F16  6F82               	movwf	(_compartment_array+2)& (0+255),b
 13966                           
 13967                           ;keypad.c: 239: compartment_array[3] = 1;
 13968  002F18  0E00               	movlw	0
 13969  002F1A  6F87               	movwf	(_compartment_array+7)& (0+255),b
 13970  002F1C  0E01               	movlw	1
 13971  002F1E  6F86               	movwf	(_compartment_array+6)& (0+255),b
 13972                           
 13973                           ;keypad.c: 240: compartment_array[4] = 1;
 13974  002F20  0E00               	movlw	0
 13975  002F22  6F89               	movwf	(_compartment_array+9)& (0+255),b
 13976  002F24  0E01               	movlw	1
 13977  002F26  6F88               	movwf	(_compartment_array+8)& (0+255),b
 13978                           
 13979                           ;keypad.c: 241: compartment_array[6] = 1;
 13980  002F28  0E00               	movlw	0
 13981  002F2A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 13982  002F2C  0E01               	movlw	1
 13983  002F2E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 13984                           
 13985                           ;keypad.c: 245: compartment_number[0] = 0;
 13986  002F30  0E00               	movlw	0
 13987  002F32  6E43               	movwf	_compartment_number+1,c
 13988  002F34  0E00               	movlw	0
 13989  002F36  6E42               	movwf	_compartment_number,c
 13990                           
 13991                           ;keypad.c: 246: compartment_number[1] = 1;
 13992  002F38  0E00               	movlw	0
 13993  002F3A  6E45               	movwf	_compartment_number+3,c
 13994  002F3C  0E01               	movlw	1
 13995  002F3E  6E44               	movwf	_compartment_number+2,c
 13996                           
 13997                           ;keypad.c: 247: compartment_number[2] = 3;
 13998  002F40  0E00               	movlw	0
 13999  002F42  6E47               	movwf	_compartment_number+5,c
 14000  002F44  0E03               	movlw	3
 14001  002F46  6E46               	movwf	_compartment_number+4,c
 14002                           
 14003                           ;keypad.c: 248: compartment_number[3] = 4;
 14004  002F48  0E00               	movlw	0
 14005  002F4A  6E49               	movwf	_compartment_number+7,c
 14006  002F4C  0E04               	movlw	4
 14007  002F4E  6E48               	movwf	_compartment_number+6,c
 14008                           
 14009                           ;keypad.c: 249: compartment_number[4] = 6;
 14010  002F50  0E00               	movlw	0
 14011  002F52  6E4B               	movwf	_compartment_number+9,c
 14012  002F54  0E06               	movlw	6
 14013  002F56  6E4A               	movwf	_compartment_number+8,c
 14014                           
 14015                           ;keypad.c: 251: break;
 14016  002F58  0012               	return	
 14017  002F5A                     
 14018                           ;keypad.c: 254: compartment_array[0] = 1;
 14019                           
 14020                           ; BSR set to: 0
 14021  002F5A  0E00               	movlw	0
 14022  002F5C  0100               	movlb	0	; () banked
 14023  002F5E  6F81               	movwf	(_compartment_array+1)& (0+255),b
 14024  002F60  0E01               	movlw	1
 14025  002F62  6F80               	movwf	_compartment_array& (0+255),b
 14026                           
 14027                           ;keypad.c: 255: compartment_array[1] = 1;
 14028  002F64  0E00               	movlw	0
 14029  002F66  6F83               	movwf	(_compartment_array+3)& (0+255),b
 14030  002F68  0E01               	movlw	1
 14031  002F6A  6F82               	movwf	(_compartment_array+2)& (0+255),b
 14032                           
 14033                           ;keypad.c: 256: compartment_array[2] = 1;
 14034  002F6C  0E00               	movlw	0
 14035  002F6E  6F85               	movwf	(_compartment_array+5)& (0+255),b
 14036  002F70  0E01               	movlw	1
 14037  002F72  6F84               	movwf	(_compartment_array+4)& (0+255),b
 14038                           
 14039                           ;keypad.c: 257: compartment_array[4] = 1;
 14040  002F74  0E00               	movlw	0
 14041  002F76  6F89               	movwf	(_compartment_array+9)& (0+255),b
 14042  002F78  0E01               	movlw	1
 14043  002F7A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 14044                           
 14045                           ;keypad.c: 258: compartment_array[5] = 1;
 14046  002F7C  0E00               	movlw	0
 14047  002F7E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 14048  002F80  0E01               	movlw	1
 14049  002F82  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 14050                           
 14051                           ;keypad.c: 259: compartment_array[6] = 1;
 14052  002F84  0E00               	movlw	0
 14053  002F86  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 14054  002F88  0E01               	movlw	1
 14055  002F8A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 14056                           
 14057                           ;keypad.c: 262: compartment_number[0] = 0;
 14058  002F8C  0E00               	movlw	0
 14059  002F8E  6E43               	movwf	_compartment_number+1,c
 14060  002F90  0E00               	movlw	0
 14061  002F92  6E42               	movwf	_compartment_number,c
 14062                           
 14063                           ;keypad.c: 263: compartment_number[1] = 1;
 14064  002F94  0E00               	movlw	0
 14065  002F96  6E45               	movwf	_compartment_number+3,c
 14066  002F98  0E01               	movlw	1
 14067  002F9A  6E44               	movwf	_compartment_number+2,c
 14068                           
 14069                           ;keypad.c: 264: compartment_number[2] = 2;
 14070  002F9C  0E00               	movlw	0
 14071  002F9E  6E47               	movwf	_compartment_number+5,c
 14072  002FA0  0E02               	movlw	2
 14073  002FA2  6E46               	movwf	_compartment_number+4,c
 14074                           
 14075                           ;keypad.c: 265: compartment_number[3] = 4;
 14076  002FA4  0E00               	movlw	0
 14077  002FA6  6E49               	movwf	_compartment_number+7,c
 14078  002FA8  0E04               	movlw	4
 14079  002FAA  6E48               	movwf	_compartment_number+6,c
 14080                           
 14081                           ;keypad.c: 266: compartment_number[4] = 5;
 14082  002FAC  0E00               	movlw	0
 14083  002FAE  6E4B               	movwf	_compartment_number+9,c
 14084  002FB0  0E05               	movlw	5
 14085  002FB2  6E4A               	movwf	_compartment_number+8,c
 14086                           
 14087                           ;keypad.c: 267: compartment_number[5] = 6;
 14088  002FB4  0E00               	movlw	0
 14089  002FB6  6E4D               	movwf	_compartment_number+11,c
 14090  002FB8  0E06               	movlw	6
 14091  002FBA  6E4C               	movwf	_compartment_number+10,c
 14092                           
 14093                           ;keypad.c: 269: break;
 14094  002FBC  0012               	return	
 14095  002FBE                     
 14096                           ;keypad.c: 271: compartment_array[0] = 1;
 14097                           
 14098                           ; BSR set to: 0
 14099  002FBE  0E00               	movlw	0
 14100  002FC0  0100               	movlb	0	; () banked
 14101  002FC2  6F81               	movwf	(_compartment_array+1)& (0+255),b
 14102  002FC4  0E01               	movlw	1
 14103  002FC6  6F80               	movwf	_compartment_array& (0+255),b
 14104                           
 14105                           ;keypad.c: 272: compartment_array[1] = 1;
 14106  002FC8  0E00               	movlw	0
 14107  002FCA  6F83               	movwf	(_compartment_array+3)& (0+255),b
 14108  002FCC  0E01               	movlw	1
 14109  002FCE  6F82               	movwf	(_compartment_array+2)& (0+255),b
 14110                           
 14111                           ;keypad.c: 273: compartment_array[2] = 1;
 14112  002FD0  0E00               	movlw	0
 14113  002FD2  6F85               	movwf	(_compartment_array+5)& (0+255),b
 14114  002FD4  0E01               	movlw	1
 14115  002FD6  6F84               	movwf	(_compartment_array+4)& (0+255),b
 14116                           
 14117                           ;keypad.c: 274: compartment_array[3] = 1;
 14118  002FD8  0E00               	movlw	0
 14119  002FDA  6F87               	movwf	(_compartment_array+7)& (0+255),b
 14120  002FDC  0E01               	movlw	1
 14121  002FDE  6F86               	movwf	(_compartment_array+6)& (0+255),b
 14122                           
 14123                           ;keypad.c: 275: compartment_array[4] = 1;
 14124  002FE0  0E00               	movlw	0
 14125  002FE2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 14126  002FE4  0E01               	movlw	1
 14127  002FE6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 14128                           
 14129                           ;keypad.c: 276: compartment_array[5] = 1;
 14130  002FE8  0E00               	movlw	0
 14131  002FEA  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 14132  002FEC  0E01               	movlw	1
 14133  002FEE  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 14134                           
 14135                           ;keypad.c: 277: compartment_array[6] = 1;
 14136  002FF0  0E00               	movlw	0
 14137  002FF2  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 14138  002FF4  0E01               	movlw	1
 14139  002FF6  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 14140                           
 14141                           ;keypad.c: 280: compartment_number[0] = 0;
 14142  002FF8  0E00               	movlw	0
 14143  002FFA  6E43               	movwf	_compartment_number+1,c
 14144  002FFC  0E00               	movlw	0
 14145  002FFE  6E42               	movwf	_compartment_number,c
 14146                           
 14147                           ;keypad.c: 281: compartment_number[1] = 1;
 14148  003000  0E00               	movlw	0
 14149  003002  6E45               	movwf	_compartment_number+3,c
 14150  003004  0E01               	movlw	1
 14151  003006  6E44               	movwf	_compartment_number+2,c
 14152                           
 14153                           ;keypad.c: 282: compartment_number[2] = 2;
 14154  003008  0E00               	movlw	0
 14155  00300A  6E47               	movwf	_compartment_number+5,c
 14156  00300C  0E02               	movlw	2
 14157  00300E  6E46               	movwf	_compartment_number+4,c
 14158                           
 14159                           ;keypad.c: 283: compartment_number[3] = 3;
 14160  003010  0E00               	movlw	0
 14161  003012  6E49               	movwf	_compartment_number+7,c
 14162  003014  0E03               	movlw	3
 14163  003016  6E48               	movwf	_compartment_number+6,c
 14164                           
 14165                           ;keypad.c: 284: compartment_number[4] = 4;
 14166  003018  0E00               	movlw	0
 14167  00301A  6E4B               	movwf	_compartment_number+9,c
 14168  00301C  0E04               	movlw	4
 14169  00301E  6E4A               	movwf	_compartment_number+8,c
 14170                           
 14171                           ;keypad.c: 285: compartment_number[5] = 5;
 14172  003020  0E00               	movlw	0
 14173  003022  6E4D               	movwf	_compartment_number+11,c
 14174  003024  0E05               	movlw	5
 14175  003026  6E4C               	movwf	_compartment_number+10,c
 14176                           
 14177                           ;keypad.c: 286: compartment_number[6] = 6;
 14178  003028  0E00               	movlw	0
 14179  00302A  6E4F               	movwf	_compartment_number+13,c
 14180  00302C  0E06               	movlw	6
 14181  00302E  6E4E               	movwf	_compartment_number+12,c
 14182                           
 14183                           ;keypad.c: 288: break;
 14184  003030  0012               	return	
 14185  003032                     
 14186                           ;keypad.c: 290: compartment_array[0] = 1;
 14187                           
 14188                           ; BSR set to: 0
 14189  003032  0E00               	movlw	0
 14190  003034  0100               	movlb	0	; () banked
 14191  003036  6F81               	movwf	(_compartment_array+1)& (0+255),b
 14192  003038  0E01               	movlw	1
 14193  00303A  6F80               	movwf	_compartment_array& (0+255),b
 14194                           
 14195                           ;keypad.c: 291: compartment_array[1] = 1;
 14196  00303C  0E00               	movlw	0
 14197  00303E  6F83               	movwf	(_compartment_array+3)& (0+255),b
 14198  003040  0E01               	movlw	1
 14199  003042  6F82               	movwf	(_compartment_array+2)& (0+255),b
 14200                           
 14201                           ;keypad.c: 292: compartment_array[2] = 1;
 14202  003044  0E00               	movlw	0
 14203  003046  6F85               	movwf	(_compartment_array+5)& (0+255),b
 14204  003048  0E01               	movlw	1
 14205  00304A  6F84               	movwf	(_compartment_array+4)& (0+255),b
 14206                           
 14207                           ;keypad.c: 293: compartment_array[3] = 1;
 14208  00304C  0E00               	movlw	0
 14209  00304E  6F87               	movwf	(_compartment_array+7)& (0+255),b
 14210  003050  0E01               	movlw	1
 14211  003052  6F86               	movwf	(_compartment_array+6)& (0+255),b
 14212                           
 14213                           ;keypad.c: 294: compartment_array[4] = 1;
 14214  003054  0E00               	movlw	0
 14215  003056  6F89               	movwf	(_compartment_array+9)& (0+255),b
 14216  003058  0E01               	movlw	1
 14217  00305A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 14218                           
 14219                           ;keypad.c: 295: compartment_array[5] = 1;
 14220  00305C  0E00               	movlw	0
 14221  00305E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 14222  003060  0E01               	movlw	1
 14223  003062  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 14224                           
 14225                           ;keypad.c: 296: compartment_array[6] = 1;
 14226  003064  0E00               	movlw	0
 14227  003066  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 14228  003068  0E01               	movlw	1
 14229  00306A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 14230                           
 14231                           ;keypad.c: 297: compartment_array[7] = 1;
 14232  00306C  0E00               	movlw	0
 14233  00306E  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 14234  003070  0E01               	movlw	1
 14235  003072  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 14236                           
 14237                           ;keypad.c: 300: compartment_number[0] = 0;
 14238  003074  0E00               	movlw	0
 14239  003076  6E43               	movwf	_compartment_number+1,c
 14240  003078  0E00               	movlw	0
 14241  00307A  6E42               	movwf	_compartment_number,c
 14242                           
 14243                           ;keypad.c: 301: compartment_number[1] = 1;
 14244  00307C  0E00               	movlw	0
 14245  00307E  6E45               	movwf	_compartment_number+3,c
 14246  003080  0E01               	movlw	1
 14247  003082  6E44               	movwf	_compartment_number+2,c
 14248                           
 14249                           ;keypad.c: 302: compartment_number[2] = 2;
 14250  003084  0E00               	movlw	0
 14251  003086  6E47               	movwf	_compartment_number+5,c
 14252  003088  0E02               	movlw	2
 14253  00308A  6E46               	movwf	_compartment_number+4,c
 14254                           
 14255                           ;keypad.c: 303: compartment_number[3] = 3;
 14256  00308C  0E00               	movlw	0
 14257  00308E  6E49               	movwf	_compartment_number+7,c
 14258  003090  0E03               	movlw	3
 14259  003092  6E48               	movwf	_compartment_number+6,c
 14260                           
 14261                           ;keypad.c: 304: compartment_number[4] = 4;
 14262  003094  0E00               	movlw	0
 14263  003096  6E4B               	movwf	_compartment_number+9,c
 14264  003098  0E04               	movlw	4
 14265  00309A  6E4A               	movwf	_compartment_number+8,c
 14266                           
 14267                           ;keypad.c: 305: compartment_number[5] = 5;
 14268  00309C  0E00               	movlw	0
 14269  00309E  6E4D               	movwf	_compartment_number+11,c
 14270  0030A0  0E05               	movlw	5
 14271  0030A2  6E4C               	movwf	_compartment_number+10,c
 14272                           
 14273                           ;keypad.c: 306: compartment_number[6] = 6;
 14274  0030A4  0E00               	movlw	0
 14275  0030A6  6E4F               	movwf	_compartment_number+13,c
 14276  0030A8  0E06               	movlw	6
 14277  0030AA  6E4E               	movwf	_compartment_number+12,c
 14278                           
 14279                           ;keypad.c: 307: compartment_number[7] = 7;
 14280  0030AC  0E00               	movlw	0
 14281  0030AE  6E51               	movwf	_compartment_number+15,c
 14282  0030B0  0E07               	movlw	7
 14283  0030B2  6E50               	movwf	_compartment_number+14,c
 14284                           
 14285                           ;keypad.c: 309: break;
 14286  0030B4  0012               	return	
 14287  0030B6                     
 14288                           ;keypad.c: 311: compartment_array[0] = 0;
 14289                           
 14290                           ; BSR set to: 0
 14291  0030B6  0E00               	movlw	0
 14292  0030B8  0100               	movlb	0	; () banked
 14293  0030BA  6F81               	movwf	(_compartment_array+1)& (0+255),b
 14294  0030BC  0E00               	movlw	0
 14295  0030BE  6F80               	movwf	_compartment_array& (0+255),b
 14296                           
 14297                           ;keypad.c: 312: compartment_array[1] = 0;
 14298  0030C0  0E00               	movlw	0
 14299  0030C2  6F83               	movwf	(_compartment_array+3)& (0+255),b
 14300  0030C4  0E00               	movlw	0
 14301  0030C6  6F82               	movwf	(_compartment_array+2)& (0+255),b
 14302                           
 14303                           ;keypad.c: 313: compartment_array[2] = 0;
 14304  0030C8  0E00               	movlw	0
 14305  0030CA  6F85               	movwf	(_compartment_array+5)& (0+255),b
 14306  0030CC  0E00               	movlw	0
 14307  0030CE  6F84               	movwf	(_compartment_array+4)& (0+255),b
 14308                           
 14309                           ;keypad.c: 314: compartment_array[3] = 0;
 14310  0030D0  0E00               	movlw	0
 14311  0030D2  6F87               	movwf	(_compartment_array+7)& (0+255),b
 14312  0030D4  0E00               	movlw	0
 14313  0030D6  6F86               	movwf	(_compartment_array+6)& (0+255),b
 14314                           
 14315                           ;keypad.c: 315: compartment_array[4] = 0;
 14316  0030D8  0E00               	movlw	0
 14317  0030DA  6F89               	movwf	(_compartment_array+9)& (0+255),b
 14318  0030DC  0E00               	movlw	0
 14319  0030DE  6F88               	movwf	(_compartment_array+8)& (0+255),b
 14320                           
 14321                           ;keypad.c: 316: compartment_array[5] = 0;
 14322  0030E0  0E00               	movlw	0
 14323  0030E2  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 14324  0030E4  0E00               	movlw	0
 14325  0030E6  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 14326                           
 14327                           ;keypad.c: 317: compartment_array[6] = 0;
 14328  0030E8  0E00               	movlw	0
 14329  0030EA  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 14330  0030EC  0E00               	movlw	0
 14331  0030EE  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 14332                           
 14333                           ;keypad.c: 318: compartment_array[7] = 0;
 14334  0030F0  0E00               	movlw	0
 14335  0030F2  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 14336  0030F4  0E00               	movlw	0
 14337  0030F6  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 14338                           
 14339                           ;keypad.c: 320: }
 14340  0030F8  0012               	return	
 14341  0030FA                     i2l746:
 14342                           
 14343                           ; BSR set to: 0
 14344  0030FA  C001  F003         	movff	generate_compartment_array@step,??_generate_compartment_array
 14345  0030FE  C002  F004         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
 14346                           
 14347                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14348                           ; Switch size 1, requested type "space"
 14349                           ; Number of cases is 1, Range of values is 0 to 0
 14350                           ; switch strategies available:
 14351                           ; Name         Instructions Cycles
 14352                           ; simple_byte            4     3 (average)
 14353                           ;	Chosen strategy is simple_byte
 14354  003102  5004               	movf	??_generate_compartment_array+1,w,c
 14355  003104  0A00               	xorlw	0	; case 0
 14356  003106  A4D8               	btfss	status,2,c
 14357  003108  D7D6               	goto	i2l753
 14358                           
 14359                           ; Switch size 1, requested type "space"
 14360                           ; Number of cases is 5, Range of values is 4 to 8
 14361                           ; switch strategies available:
 14362                           ; Name         Instructions Cycles
 14363                           ; simple_byte           16     9 (average)
 14364                           ;	Chosen strategy is simple_byte
 14365  00310A  5003               	movf	??_generate_compartment_array,w,c
 14366  00310C  0A04               	xorlw	4	; case 4
 14367  00310E  B4D8               	btfsc	status,2,c
 14368  003110  D6D8               	goto	i2l747
 14369  003112  0A01               	xorlw	1	; case 5
 14370  003114  B4D8               	btfsc	status,2,c
 14371  003116  D6F7               	goto	i2l749
 14372  003118  0A03               	xorlw	3	; case 6
 14373  00311A  B4D8               	btfsc	status,2,c
 14374  00311C  D71E               	goto	i2l750
 14375  00311E  0A01               	xorlw	1	; case 7
 14376  003120  B4D8               	btfsc	status,2,c
 14377  003122  D74D               	goto	i2l751
 14378  003124  0A0F               	xorlw	15	; case 8
 14379  003126  B4D8               	btfsc	status,2,c
 14380  003128  D784               	goto	i2l752
 14381  00312A  D7C5               	goto	i2l753
 14382  00312C                     __end_of_generate_compartment_array:
 14383                           	opt stack 0
 14384                           pclatu	equ	0xFFB
 14385                           pclath	equ	0xFFA
 14386                           tblptru	equ	0xFF8
 14387                           tblptrh	equ	0xFF7
 14388                           tblptrl	equ	0xFF6
 14389                           tablat	equ	0xFF5
 14390                           prodh	equ	0xFF4
 14391                           prodl	equ	0xFF3
 14392                           intcon	equ	0xFF2
 14393                           intcon3	equ	0xFF0
 14394                           indf0	equ	0xFEF
 14395                           postinc0	equ	0xFEE
 14396                           fsr0h	equ	0xFEA
 14397                           fsr0l	equ	0xFE9
 14398                           wreg	equ	0xFE8
 14399                           indf1	equ	0xFE7
 14400                           postdec1	equ	0xFE5
 14401                           fsr1h	equ	0xFE2
 14402                           fsr1l	equ	0xFE1
 14403                           indf2	equ	0xFDF
 14404                           postinc2	equ	0xFDE
 14405                           postdec2	equ	0xFDD
 14406                           fsr2h	equ	0xFDA
 14407                           fsr2l	equ	0xFD9
 14408                           status	equ	0xFD8
 14409                           
 14410 ;; *************** function _check *****************
 14411 ;; Defined at:
 14412 ;;		line 208 in file "keypad.c"
 14413 ;; Parameters:    Size  Location     Type
 14414 ;;		None
 14415 ;; Auto vars:     Size  Location     Type
 14416 ;;		None
 14417 ;; Return value:  Size  Location     Type
 14418 ;;                  2    0[COMRAM] int 
 14419 ;; Registers used:
 14420 ;;		wreg, status,2, status,0
 14421 ;; Tracked objects:
 14422 ;;		On entry : 0/0
 14423 ;;		On exit  : 0/0
 14424 ;;		Unchanged: 0/0
 14425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14426 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14430 ;;Total ram usage:        2 bytes
 14431 ;; Hardware stack levels used:    1
 14432 ;; This function calls:
 14433 ;;		Nothing
 14434 ;; This function is called by:
 14435 ;;		_interruptHandler
 14436 ;; This function uses a non-reentrant model
 14437 ;;
 14438                           
 14439                           	psect	text43
 14440  0038E4                     __ptext43:
 14441                           	opt stack 0
 14442  0038E4                     _check:
 14443                           	opt stack 26
 14444                           
 14445                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 14446                           
 14447                           ;incstack = 0
 14448  0038E4  BE66               	btfsc	_B+1,7,c
 14449  0038E6  D006               	goto	i2u339_40
 14450  0038E8  5066               	movf	_B+1,w,c
 14451  0038EA  E124               	bnz	i2l4546
 14452  0038EC  0E03               	movlw	3
 14453  0038EE  5C65               	subwf	_B,w,c
 14454  0038F0  B0D8               	btfsc	status,0,c
 14455  0038F2  D020               	goto	i2u343_40
 14456  0038F4                     i2u339_40:
 14457  0038F4  BE64               	btfsc	_N+1,7,c
 14458  0038F6  D006               	goto	i2u340_40
 14459  0038F8  5064               	movf	_N+1,w,c
 14460  0038FA  E11C               	bnz	i2l4546
 14461  0038FC  0E04               	movlw	4
 14462  0038FE  5C63               	subwf	_N,w,c
 14463  003900  B0D8               	btfsc	status,0,c
 14464  003902  D018               	goto	i2u343_40
 14465  003904                     i2u340_40:
 14466  003904  BE62               	btfsc	_S+1,7,c
 14467  003906  D006               	goto	i2u341_40
 14468  003908  5062               	movf	_S+1,w,c
 14469  00390A  E114               	bnz	i2l4546
 14470  00390C  0E03               	movlw	3
 14471  00390E  5C61               	subwf	_S,w,c
 14472  003910  B0D8               	btfsc	status,0,c
 14473  003912  D010               	goto	i2u343_40
 14474  003914                     i2u341_40:
 14475  003914  BE60               	btfsc	_W+1,7,c
 14476  003916  D006               	goto	i2u342_40
 14477  003918  5060               	movf	_W+1,w,c
 14478  00391A  E10C               	bnz	i2l4546
 14479  00391C  0E05               	movlw	5
 14480  00391E  5C5F               	subwf	_W,w,c
 14481  003920  B0D8               	btfsc	status,0,c
 14482  003922  D008               	goto	i2u343_40
 14483  003924                     i2u342_40:
 14484  003924  BE6A               	btfsc	_total_number+1,7,c
 14485  003926  D00B               	goto	i2l740
 14486  003928  506A               	movf	_total_number+1,w,c
 14487  00392A  E104               	bnz	i2l4546
 14488  00392C  0E05               	movlw	5
 14489  00392E  5C69               	subwf	_total_number,w,c
 14490  003930  A0D8               	btfss	status,0,c
 14491  003932  D005               	goto	i2l740
 14492  003934                     i2u343_40:
 14493  003934                     i2l4546:
 14494                           
 14495                           ;keypad.c: 213: return 0;
 14496  003934  0E00               	movlw	0
 14497  003936  6E02               	movwf	?_check+1,c
 14498  003938  0E00               	movlw	0
 14499  00393A  6E01               	movwf	?_check,c
 14500  00393C  0012               	return	
 14501  00393E                     i2l740:
 14502                           
 14503                           ;keypad.c: 214: }
 14504                           ;keypad.c: 215: return 1;
 14505  00393E  0E00               	movlw	0
 14506  003940  6E02               	movwf	?_check+1,c
 14507  003942  0E01               	movlw	1
 14508  003944  6E01               	movwf	?_check,c
 14509  003946  0012               	return	
 14510  003948                     __end_of_check:
 14511                           	opt stack 0
 14512                           pclatu	equ	0xFFB
 14513                           pclath	equ	0xFFA
 14514                           tblptru	equ	0xFF8
 14515                           tblptrh	equ	0xFF7
 14516                           tblptrl	equ	0xFF6
 14517                           tablat	equ	0xFF5
 14518                           prodh	equ	0xFF4
 14519                           prodl	equ	0xFF3
 14520                           intcon	equ	0xFF2
 14521                           intcon3	equ	0xFF0
 14522                           indf0	equ	0xFEF
 14523                           postinc0	equ	0xFEE
 14524                           fsr0h	equ	0xFEA
 14525                           fsr0l	equ	0xFE9
 14526                           wreg	equ	0xFE8
 14527                           indf1	equ	0xFE7
 14528                           postdec1	equ	0xFE5
 14529                           fsr1h	equ	0xFE2
 14530                           fsr1l	equ	0xFE1
 14531                           indf2	equ	0xFDF
 14532                           postinc2	equ	0xFDE
 14533                           postdec2	equ	0xFDD
 14534                           fsr2h	equ	0xFDA
 14535                           fsr2l	equ	0xFD9
 14536                           status	equ	0xFD8
 14537                           
 14538 ;; *************** function ___awmod *****************
 14539 ;; Defined at:
 14540 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 14541 ;; Parameters:    Size  Location     Type
 14542 ;;  dividend        2    0[COMRAM] int 
 14543 ;;  divisor         2    2[COMRAM] int 
 14544 ;; Auto vars:     Size  Location     Type
 14545 ;;  sign            1    5[COMRAM] unsigned char 
 14546 ;;  counter         1    4[COMRAM] unsigned char 
 14547 ;; Return value:  Size  Location     Type
 14548 ;;                  2    0[COMRAM] int 
 14549 ;; Registers used:
 14550 ;;		wreg, status,2, status,0
 14551 ;; Tracked objects:
 14552 ;;		On entry : 0/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14556 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14557 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14559 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14560 ;;Total ram usage:        6 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; This function calls:
 14563 ;;		Nothing
 14564 ;; This function is called by:
 14565 ;;		_interruptHandler
 14566 ;; This function uses a non-reentrant model
 14567 ;;
 14568                           
 14569                           	psect	text44
 14570  003874                     __ptext44:
 14571                           	opt stack 0
 14572  003874                     ___awmod:
 14573                           	opt stack 26
 14574                           
 14575                           ;incstack = 0
 14576  003874  0E00               	movlw	0
 14577  003876  6E06               	movwf	___awmod@sign,c
 14578  003878  AE02               	btfss	___awmod@dividend+1,7,c
 14579  00387A  D006               	goto	i2l1062
 14580  00387C  6C01               	negf	___awmod@dividend,c
 14581  00387E  1E02               	comf	___awmod@dividend+1,f,c
 14582  003880  B0D8               	btfsc	status,0,c
 14583  003882  2A02               	incf	___awmod@dividend+1,f,c
 14584  003884  0E01               	movlw	1
 14585  003886  6E06               	movwf	___awmod@sign,c
 14586  003888                     i2l1062:
 14587  003888  AE04               	btfss	___awmod@divisor+1,7,c
 14588  00388A  D004               	goto	i2l1063
 14589  00388C  6C03               	negf	___awmod@divisor,c
 14590  00388E  1E04               	comf	___awmod@divisor+1,f,c
 14591  003890  B0D8               	btfsc	status,0,c
 14592  003892  2A04               	incf	___awmod@divisor+1,f,c
 14593  003894                     i2l1063:
 14594  003894  5003               	movf	___awmod@divisor,w,c
 14595  003896  1004               	iorwf	___awmod@divisor+1,w,c
 14596  003898  B4D8               	btfsc	status,2,c
 14597  00389A  D018               	goto	i2l1070
 14598  00389C  0E01               	movlw	1
 14599  00389E  6E05               	movwf	___awmod@counter,c
 14600  0038A0  D004               	goto	i2l1065
 14601  0038A2  90D8               	bcf	status,0,c
 14602  0038A4  3603               	rlcf	___awmod@divisor,f,c
 14603  0038A6  3604               	rlcf	___awmod@divisor+1,f,c
 14604  0038A8  2A05               	incf	___awmod@counter,f,c
 14605  0038AA                     i2l1065:
 14606  0038AA  AE04               	btfss	___awmod@divisor+1,7,c
 14607  0038AC  D7FA               	goto	i2l1066
 14608  0038AE                     i2u347_40:
 14609  0038AE  5003               	movf	___awmod@divisor,w,c
 14610  0038B0  5C01               	subwf	___awmod@dividend,w,c
 14611  0038B2  5004               	movf	___awmod@divisor+1,w,c
 14612  0038B4  5802               	subwfb	___awmod@dividend+1,w,c
 14613  0038B6  A0D8               	btfss	status,0,c
 14614  0038B8  D004               	goto	i2l1069
 14615  0038BA  5003               	movf	___awmod@divisor,w,c
 14616  0038BC  5E01               	subwf	___awmod@dividend,f,c
 14617  0038BE  5004               	movf	___awmod@divisor+1,w,c
 14618  0038C0  5A02               	subwfb	___awmod@dividend+1,f,c
 14619  0038C2                     i2l1069:
 14620  0038C2  90D8               	bcf	status,0,c
 14621  0038C4  3204               	rrcf	___awmod@divisor+1,f,c
 14622  0038C6  3203               	rrcf	___awmod@divisor,f,c
 14623  0038C8  2E05               	decfsz	___awmod@counter,f,c
 14624  0038CA  D7F1               	goto	i2u347_40
 14625  0038CC                     i2l1070:
 14626  0038CC  5006               	movf	___awmod@sign,w,c
 14627  0038CE  B4D8               	btfsc	status,2,c
 14628  0038D0  D004               	goto	i2l1071
 14629  0038D2  6C01               	negf	___awmod@dividend,c
 14630  0038D4  1E02               	comf	___awmod@dividend+1,f,c
 14631  0038D6  B0D8               	btfsc	status,0,c
 14632  0038D8  2A02               	incf	___awmod@dividend+1,f,c
 14633  0038DA                     i2l1071:
 14634  0038DA  C001  F001         	movff	___awmod@dividend,?___awmod
 14635  0038DE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 14636  0038E2  0012               	return	
 14637  0038E4                     __end_of___awmod:
 14638                           	opt stack 0
 14639                           pclatu	equ	0xFFB
 14640                           pclath	equ	0xFFA
 14641                           tblptru	equ	0xFF8
 14642                           tblptrh	equ	0xFF7
 14643                           tblptrl	equ	0xFF6
 14644                           tablat	equ	0xFF5
 14645                           prodh	equ	0xFF4
 14646                           prodl	equ	0xFF3
 14647                           intcon	equ	0xFF2
 14648                           intcon3	equ	0xFF0
 14649                           indf0	equ	0xFEF
 14650                           postinc0	equ	0xFEE
 14651                           fsr0h	equ	0xFEA
 14652                           fsr0l	equ	0xFE9
 14653                           wreg	equ	0xFE8
 14654                           indf1	equ	0xFE7
 14655                           postdec1	equ	0xFE5
 14656                           fsr1h	equ	0xFE2
 14657                           fsr1l	equ	0xFE1
 14658                           indf2	equ	0xFDF
 14659                           postinc2	equ	0xFDE
 14660                           postdec2	equ	0xFDD
 14661                           fsr2h	equ	0xFDA
 14662                           fsr2l	equ	0xFD9
 14663                           status	equ	0xFD8
 14664                           
 14665 ;; *************** function _I2C_Master_Init *****************
 14666 ;; Defined at:
 14667 ;;		line 14 in file "I2C.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 14670 ;; Auto vars:     Size  Location     Type
 14671 ;;		None
 14672 ;; Return value:  Size  Location     Type
 14673 ;;                  1    wreg      void 
 14674 ;; Registers used:
 14675 ;;		wreg, status,2, status,0, cstack
 14676 ;; Tracked objects:
 14677 ;;		On entry : 0/0
 14678 ;;		On exit  : 0/0
 14679 ;;		Unchanged: 0/0
 14680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14683 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14684 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14685 ;;Total ram usage:        8 bytes
 14686 ;; Hardware stack levels used:    1
 14687 ;; Hardware stack levels required when called:    1
 14688 ;; This function calls:
 14689 ;;		___lldiv
 14690 ;; This function is called by:
 14691 ;;		_interruptHandler
 14692 ;;		_initRamp
 14693 ;;		_ramp_Rotate
 14694 ;; This function uses a non-reentrant model
 14695 ;;
 14696                           
 14697                           	psect	text45
 14698  003948                     __ptext45:
 14699                           	opt stack 0
 14700  003948                     _I2C_Master_Init:
 14701                           	opt stack 25
 14702                           
 14703                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 14704                           
 14705                           ;incstack = 0
 14706  003948  9AC6               	bcf	4038,5,c	;volatile
 14707                           
 14708                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 14709  00394A  8694               	bsf	3988,3,c	;volatile
 14710                           
 14711                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 14712  00394C  8894               	bsf	3988,4,c	;volatile
 14713                           
 14714                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 14715  00394E  0E80               	movlw	128
 14716  003950  6EC7               	movwf	4039,c	;volatile
 14717                           
 14718                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 14719  003952  0E28               	movlw	40
 14720  003954  6EC6               	movwf	4038,c	;volatile
 14721                           
 14722                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 14723  003956  0E00               	movlw	0
 14724  003958  6EC5               	movwf	4037,c	;volatile
 14725                           
 14726                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 14727  00395A  0E00               	movlw	0
 14728  00395C  6E01               	movwf	___lldiv@dividend,c
 14729  00395E  0E5A               	movlw	90
 14730  003960  6E02               	movwf	___lldiv@dividend+1,c
 14731  003962  0E62               	movlw	98
 14732  003964  6E03               	movwf	___lldiv@dividend+2,c
 14733  003966  0E02               	movlw	2
 14734  003968  6E04               	movwf	___lldiv@dividend+3,c
 14735  00396A  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 14736  00396E  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 14737  003972  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 14738  003976  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 14739  00397A  0E02               	movlw	2
 14740  00397C                     i2u311_45:
 14741  00397C  90D8               	bcf	status,0,c
 14742  00397E  3612               	rlcf	??_I2C_Master_Init,f,c
 14743  003980  3613               	rlcf	??_I2C_Master_Init+1,f,c
 14744  003982  3614               	rlcf	??_I2C_Master_Init+2,f,c
 14745  003984  3615               	rlcf	??_I2C_Master_Init+3,f,c
 14746  003986  2EE8               	decfsz	wreg,f,c
 14747  003988  D7F9               	goto	i2u311_45
 14748  00398A  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 14749  00398E  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 14750  003992  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 14751  003996  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 14752  00399A  ECBC  F01B         	call	___lldiv	;wreg free
 14753  00399E  0401               	decf	?___lldiv,w,c
 14754  0039A0  6EC8               	movwf	4040,c	;volatile
 14755  0039A2  0012               	return		;funcret
 14756  0039A4                     __end_of_I2C_Master_Init:
 14757                           	opt stack 0
 14758                           pclatu	equ	0xFFB
 14759                           pclath	equ	0xFFA
 14760                           tblptru	equ	0xFF8
 14761                           tblptrh	equ	0xFF7
 14762                           tblptrl	equ	0xFF6
 14763                           tablat	equ	0xFF5
 14764                           prodh	equ	0xFF4
 14765                           prodl	equ	0xFF3
 14766                           intcon	equ	0xFF2
 14767                           intcon3	equ	0xFF0
 14768                           indf0	equ	0xFEF
 14769                           postinc0	equ	0xFEE
 14770                           fsr0h	equ	0xFEA
 14771                           fsr0l	equ	0xFE9
 14772                           wreg	equ	0xFE8
 14773                           indf1	equ	0xFE7
 14774                           postdec1	equ	0xFE5
 14775                           fsr1h	equ	0xFE2
 14776                           fsr1l	equ	0xFE1
 14777                           indf2	equ	0xFDF
 14778                           postinc2	equ	0xFDE
 14779                           postdec2	equ	0xFDD
 14780                           fsr2h	equ	0xFDA
 14781                           fsr2l	equ	0xFD9
 14782                           status	equ	0xFD8
 14783                           
 14784 ;; *************** function ___lldiv *****************
 14785 ;; Defined at:
 14786 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 14787 ;; Parameters:    Size  Location     Type
 14788 ;;  dividend        4    0[COMRAM] unsigned long 
 14789 ;;  divisor         4    4[COMRAM] unsigned long 
 14790 ;; Auto vars:     Size  Location     Type
 14791 ;;  quotient        4    8[COMRAM] unsigned long 
 14792 ;;  counter         1   12[COMRAM] unsigned char 
 14793 ;; Return value:  Size  Location     Type
 14794 ;;                  4    0[COMRAM] unsigned long 
 14795 ;; Registers used:
 14796 ;;		wreg, status,2, status,0
 14797 ;; Tracked objects:
 14798 ;;		On entry : 0/0
 14799 ;;		On exit  : 0/0
 14800 ;;		Unchanged: 0/0
 14801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14802 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14803 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14805 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14806 ;;Total ram usage:       13 bytes
 14807 ;; Hardware stack levels used:    1
 14808 ;; This function calls:
 14809 ;;		Nothing
 14810 ;; This function is called by:
 14811 ;;		_I2C_Master_Init
 14812 ;; This function uses a non-reentrant model
 14813 ;;
 14814                           
 14815                           	psect	text46
 14816  003778                     __ptext46:
 14817                           	opt stack 0
 14818  003778                     ___lldiv:
 14819                           	opt stack 25
 14820                           
 14821                           ;incstack = 0
 14822  003778  0E00               	movlw	0
 14823  00377A  6E09               	movwf	___lldiv@quotient,c
 14824  00377C  0E00               	movlw	0
 14825  00377E  6E0A               	movwf	___lldiv@quotient+1,c
 14826  003780  0E00               	movlw	0
 14827  003782  6E0B               	movwf	___lldiv@quotient+2,c
 14828  003784  0E00               	movlw	0
 14829  003786  6E0C               	movwf	___lldiv@quotient+3,c
 14830  003788  5005               	movf	___lldiv@divisor,w,c
 14831  00378A  1006               	iorwf	___lldiv@divisor+1,w,c
 14832  00378C  1007               	iorwf	___lldiv@divisor+2,w,c
 14833  00378E  1008               	iorwf	___lldiv@divisor+3,w,c
 14834  003790  B4D8               	btfsc	status,2,c
 14835  003792  D02A               	goto	i2l1242
 14836  003794  0E01               	movlw	1
 14837  003796  6E0D               	movwf	___lldiv@counter,c
 14838  003798  D006               	goto	i2l1237
 14839  00379A  90D8               	bcf	status,0,c
 14840  00379C  3605               	rlcf	___lldiv@divisor,f,c
 14841  00379E  3606               	rlcf	___lldiv@divisor+1,f,c
 14842  0037A0  3607               	rlcf	___lldiv@divisor+2,f,c
 14843  0037A2  3608               	rlcf	___lldiv@divisor+3,f,c
 14844  0037A4  2A0D               	incf	___lldiv@counter,f,c
 14845  0037A6                     i2l1237:
 14846  0037A6  AE08               	btfss	___lldiv@divisor+3,7,c
 14847  0037A8  D7F8               	goto	i2l1238
 14848  0037AA                     i2u256_40:
 14849  0037AA  90D8               	bcf	status,0,c
 14850  0037AC  3609               	rlcf	___lldiv@quotient,f,c
 14851  0037AE  360A               	rlcf	___lldiv@quotient+1,f,c
 14852  0037B0  360B               	rlcf	___lldiv@quotient+2,f,c
 14853  0037B2  360C               	rlcf	___lldiv@quotient+3,f,c
 14854  0037B4  5005               	movf	___lldiv@divisor,w,c
 14855  0037B6  5C01               	subwf	___lldiv@dividend,w,c
 14856  0037B8  5006               	movf	___lldiv@divisor+1,w,c
 14857  0037BA  5802               	subwfb	___lldiv@dividend+1,w,c
 14858  0037BC  5007               	movf	___lldiv@divisor+2,w,c
 14859  0037BE  5803               	subwfb	___lldiv@dividend+2,w,c
 14860  0037C0  5008               	movf	___lldiv@divisor+3,w,c
 14861  0037C2  5804               	subwfb	___lldiv@dividend+3,w,c
 14862  0037C4  A0D8               	btfss	status,0,c
 14863  0037C6  D009               	goto	i2l1241
 14864  0037C8  5005               	movf	___lldiv@divisor,w,c
 14865  0037CA  5E01               	subwf	___lldiv@dividend,f,c
 14866  0037CC  5006               	movf	___lldiv@divisor+1,w,c
 14867  0037CE  5A02               	subwfb	___lldiv@dividend+1,f,c
 14868  0037D0  5007               	movf	___lldiv@divisor+2,w,c
 14869  0037D2  5A03               	subwfb	___lldiv@dividend+2,f,c
 14870  0037D4  5008               	movf	___lldiv@divisor+3,w,c
 14871  0037D6  5A04               	subwfb	___lldiv@dividend+3,f,c
 14872  0037D8  8009               	bsf	___lldiv@quotient,0,c
 14873  0037DA                     i2l1241:
 14874  0037DA  90D8               	bcf	status,0,c
 14875  0037DC  3208               	rrcf	___lldiv@divisor+3,f,c
 14876  0037DE  3207               	rrcf	___lldiv@divisor+2,f,c
 14877  0037E0  3206               	rrcf	___lldiv@divisor+1,f,c
 14878  0037E2  3205               	rrcf	___lldiv@divisor,f,c
 14879  0037E4  2E0D               	decfsz	___lldiv@counter,f,c
 14880  0037E6  D7E1               	goto	i2u256_40
 14881  0037E8                     i2l1242:
 14882  0037E8  C009  F001         	movff	___lldiv@quotient,?___lldiv
 14883  0037EC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 14884  0037F0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 14885  0037F4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 14886  0037F8  0012               	return		;funcret
 14887  0037FA                     __end_of___lldiv:
 14888                           	opt stack 0
 14889                           pclatu	equ	0xFFB
 14890                           pclath	equ	0xFFA
 14891                           tblptru	equ	0xFF8
 14892                           tblptrh	equ	0xFF7
 14893                           tblptrl	equ	0xFF6
 14894                           tablat	equ	0xFF5
 14895                           prodh	equ	0xFF4
 14896                           prodl	equ	0xFF3
 14897                           intcon	equ	0xFF2
 14898                           intcon3	equ	0xFF0
 14899                           indf0	equ	0xFEF
 14900                           postinc0	equ	0xFEE
 14901                           fsr0h	equ	0xFEA
 14902                           fsr0l	equ	0xFE9
 14903                           wreg	equ	0xFE8
 14904                           indf1	equ	0xFE7
 14905                           postdec1	equ	0xFE5
 14906                           fsr1h	equ	0xFE2
 14907                           fsr1l	equ	0xFE1
 14908                           indf2	equ	0xFDF
 14909                           postinc2	equ	0xFDE
 14910                           postdec2	equ	0xFDD
 14911                           fsr2h	equ	0xFDA
 14912                           fsr2l	equ	0xFD9
 14913                           status	equ	0xFD8
 14914                           pclatu	equ	0xFFB
 14915                           pclath	equ	0xFFA
 14916                           tblptru	equ	0xFF8
 14917                           tblptrh	equ	0xFF7
 14918                           tblptrl	equ	0xFF6
 14919                           tablat	equ	0xFF5
 14920                           prodh	equ	0xFF4
 14921                           prodl	equ	0xFF3
 14922                           intcon	equ	0xFF2
 14923                           intcon3	equ	0xFF0
 14924                           indf0	equ	0xFEF
 14925                           postinc0	equ	0xFEE
 14926                           fsr0h	equ	0xFEA
 14927                           fsr0l	equ	0xFE9
 14928                           wreg	equ	0xFE8
 14929                           indf1	equ	0xFE7
 14930                           postdec1	equ	0xFE5
 14931                           fsr1h	equ	0xFE2
 14932                           fsr1l	equ	0xFE1
 14933                           indf2	equ	0xFDF
 14934                           postinc2	equ	0xFDE
 14935                           postdec2	equ	0xFDD
 14936                           fsr2h	equ	0xFDA
 14937                           fsr2l	equ	0xFD9
 14938                           status	equ	0xFD8
 14939                           
 14940                           	psect	rparam
 14941  0000                     pclatu	equ	0xFFB
 14942                           pclath	equ	0xFFA
 14943                           tblptru	equ	0xFF8
 14944                           tblptrh	equ	0xFF7
 14945                           tblptrl	equ	0xFF6
 14946                           tablat	equ	0xFF5
 14947                           prodh	equ	0xFF4
 14948                           prodl	equ	0xFF3
 14949                           intcon	equ	0xFF2
 14950                           intcon3	equ	0xFF0
 14951                           indf0	equ	0xFEF
 14952                           postinc0	equ	0xFEE
 14953                           fsr0h	equ	0xFEA
 14954                           fsr0l	equ	0xFE9
 14955                           wreg	equ	0xFE8
 14956                           indf1	equ	0xFE7
 14957                           postdec1	equ	0xFE5
 14958                           fsr1h	equ	0xFE2
 14959                           fsr1l	equ	0xFE1
 14960                           indf2	equ	0xFDF
 14961                           postinc2	equ	0xFDE
 14962                           postdec2	equ	0xFDD
 14963                           fsr2h	equ	0xFDA
 14964                           fsr2l	equ	0xFD9
 14965                           status	equ	0xFD8
 14966                           
 14967                           	psect	temp
 14968  00007F                     btemp:
 14969                           	opt stack 0
 14970  00007F                     	ds	1
 14971  0000                     int$flags	set	btemp
 14972  0000                     wtemp6	set	btemp+1
 14973                           pclatu	equ	0xFFB
 14974                           pclath	equ	0xFFA
 14975                           tblptru	equ	0xFF8
 14976                           tblptrh	equ	0xFF7
 14977                           tblptrl	equ	0xFF6
 14978                           tablat	equ	0xFF5
 14979                           prodh	equ	0xFF4
 14980                           prodl	equ	0xFF3
 14981                           intcon	equ	0xFF2
 14982                           intcon3	equ	0xFF0
 14983                           indf0	equ	0xFEF
 14984                           postinc0	equ	0xFEE
 14985                           fsr0h	equ	0xFEA
 14986                           fsr0l	equ	0xFE9
 14987                           wreg	equ	0xFE8
 14988                           indf1	equ	0xFE7
 14989                           postdec1	equ	0xFE5
 14990                           fsr1h	equ	0xFE2
 14991                           fsr1l	equ	0xFE1
 14992                           indf2	equ	0xFDF
 14993                           postinc2	equ	0xFDE
 14994                           postdec2	equ	0xFDD
 14995                           fsr2h	equ	0xFDA
 14996                           fsr2l	equ	0xFD9
 14997                           status	equ	0xFD8


Data Sizes:
    Strings     591
    Constant    151
    Data        25
    BSS         532
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65     126
    BANK0           128     41     128
    BANK1           256      0     209
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$1669	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_64(CODE[1]), STR_62(CODE[1]), STR_59(CODE[1]), STR_56(CODE[2]), 
		 -> STR_55(CODE[2]), STR_54(CODE[2]), STR_53(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_87(CODE[5]), STR_86(CODE[5]), STR_85(CODE[5]), STR_84(CODE[5]), 
		 -> STR_83(CODE[5]), STR_82(CODE[5]), STR_81(CODE[5]), STR_80(CODE[4]), 
		 -> STR_79(CODE[4]), STR_78(CODE[4]), STR_77(CODE[4]), STR_76(CODE[4]), 
		 -> STR_75(CODE[4]), STR_74(CODE[3]), STR_73(CODE[3]), STR_72(CODE[3]), 
		 -> STR_71(CODE[2]), STR_70(CODE[2]), STR_69(CODE[2]), STR_68(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_88(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_67(CODE[3]), STR_66(CODE[9]), STR_65(CODE[12]), STR_63(CODE[7]), 
		 -> STR_61(CODE[3]), STR_60(CODE[11]), STR_58(CODE[3]), STR_57(CODE[9]), 
		 -> STR_52(CODE[15]), STR_51(CODE[13]), STR_50(CODE[16]), STR_49(CODE[15]), 
		 -> STR_48(CODE[15]), STR_47(CODE[15]), STR_46(CODE[15]), STR_45(CODE[10]), 
		 -> STR_44(CODE[19]), STR_43(CODE[17]), STR_42(CODE[12]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[14]), STR_38(CODE[15]), STR_37(CODE[20]), 
		 -> STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[20]), STR_33(CODE[3]), 
		 -> STR_32(CODE[13]), STR_31(CODE[18]), STR_30(CODE[3]), STR_29(CODE[13]), 
		 -> STR_28(CODE[19]), STR_27(CODE[11]), STR_26(CODE[13]), STR_25(CODE[12]), 
		 -> STR_24(CODE[16]), STR_23(CODE[3]), STR_22(CODE[4]), STR_21(CODE[3]), 
		 -> STR_20(CODE[4]), STR_19(CODE[3]), STR_18(CODE[4]), STR_17(CODE[3]), 
		 -> STR_16(CODE[4]), STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[2]), 
		 -> STR_12(CODE[3]), STR_11(CODE[2]), STR_10(CODE[3]), STR_9(CODE[5]), 
		 -> STR_8(CODE[17]), STR_7(CODE[6]), STR_6(CODE[8]), STR_5(CODE[3]), 
		 -> STR_4(CODE[14]), STR_3(CODE[15]), STR_2(CODE[14]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _get_RTC_initial->___wmul
    _get_RTC_final->___wmul
    ___wmul->___awdiv
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   29493
                                             36 BANK0      5     5      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _I2C_sendData
                             ___wmul
                      _get_RTC_final
                    _get_RTC_initial
                            _initLCD
                         _initialize
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4    9482
                                             14 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_RTC_initial                                      1     1      0    6356
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_RTC_final                                        1     1      0    6356
                                             14 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3081
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1312
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_sendData                                         1     1      0    1940
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1918
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandler                                    27    27      0   13618
                                             38 COMRAM    27    27      0
                    _I2C_Master_Init
                            ___awmod
                              _check
         _generate_compartment_array
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            30    22      8    3206
                                             12 COMRAM    26    18      8
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (5) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _generate_compartment_array                           4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Init                                      8     4      4     640
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   ___wmul
     ___awdiv (ARG)
   _get_RTC_final
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _get_RTC_initial
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble
   _readADC

 _interruptHandler (ROOT)
   _I2C_Master_Init
     ___lldiv
   ___awmod
   _check
   _generate_compartment_array
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D1       7       81.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     29      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     297      34        0.0%
DATA                 0      0     297       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 26 23:57:53 2018

                                  _B 0065                                    _N 0063  
                                  _S 0061                                    _W 005F  
                                  _i 00BC                                    _j 0075  
                 i2_I2C_Master_Start 3E3C                           _B_dispense 00FD  
                 i2_I2C_Master_Write 3E1A                          _rotate_gear 00FF  
                        __CFG_CPD$ON 000000                         ___awdiv@sign 00CD  
                ___wmul@multiplicand 00D2                   i2___lwdiv@dividend 0001  
                        __CFG_BORV$3 000000                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l350 114A  
                                l342 0F04                                  l351 1062  
                                l353 116E                                  l345 0F10  
                                l346 0F60                                  l338 0E96  
                                l371 14B8                                  l363 1368  
                                l355 12D6                                  l347 0FB2  
                                l372 14F0                                  l364 137A  
                                l348 0FEA                                  l461 3274  
                                l365 17CC                                  l381 16D6  
                                l373 1542                                  l382 1700  
                                l366 13BE                                  l358 12EE  
                                l383 174E                                  l367 13EE  
                                l376 15C2                                  l368 1440  
                                l465 3C56                                  l377 15F2  
                                l378 1644                                  l387 19A2  
                                l831 2850                                  l815 266A  
                                l840 27C6                                  l832 272C  
                                l824 26C6                                  l816 267A  
                                l841 27C0                                  l833 2732  
                                l850 2906                                  l826 2818  
                                l834 275A                                  l818 2692  
                                l851 289A                                  l843 2806  
                                l835 276A                                  l819 268A  
                                l860 2930                                  l844 27DA  
                                l836 2764                                  l861 2954  
                                l862 295C                                  l838 27B6  
                                l863 298C                                  l855 2916  
                                l847 2880                                  l872 29BC  
                                l864 2972                                  l856 28D0  
                                l873 2A7E                                  l875 2A66  
                                l876 29C2                                  l877 2A78  
                                l878 2A12                         __CFG_CPB$OFF 000000  
                ?i2_I2C_Master_Start 0001                  ?i2_I2C_Master_Write 0002  
                    _compartment_pos 00AE                         ___awmod@sign 0006  
                                prod 000FF3                        _assembly_step 00AA  
                                wreg 000FE8              __end_of_get_RTC_initial 33A8  
                       __CFG_LVP$OFF 000000                         __CFG_WDT$OFF 000000  
                               l1050 3588                                 l1211 3D52  
                               l1052 35A6                                 l1300 3B8A  
                               l1053 359E                                 l1301 3B82  
                               l1056 35C6                                 l1304 3BA2  
                               l1057 35D0                                 l1049 3578  
                               l1305 3BAC                                 l1058 35DE  
                               l1290 39C4                                 l1291 39BC  
                               l1294 39E4                                 l1295 39EE  
                               l4112 28D4                                 l5012 129E  
                               l4072 27DA                                 l4218 33E8  
                               l5202 17D8                                 l4228 3410  
                               l4068 27C0                                 l4238 31C6  
                               l4184 32B6                                 l4194 32DE  
                               l4098 289E                                 l5164 16D6  
                               l5168 1700                                 _ADON 007E10  
                               STR_1 FE75                                 STR_2 FEFC  
                               STR_3 FEA4                                 STR_4 FEE0  
                               STR_5 FFF8                                 STR_6 FF94  
                               STR_7 FFAA                                 STR_8 FE43  
                               STR_9 FFD3                                 u3000 29AA  
                               u3020 2A88                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u3050 32DE                                 u4010 116C  
                               u4020 129E                                 u2520 35AA  
                               u3080 3410                                 u2620 3B8E  
                               u2445 3C94                                 u2446 3C96  
                               u5007 1774                                 u2385 351A  
                               u5017 1790                                 u2386 351C  
                               u2395 355E                                 u5107 18FA  
                               u5027 180C                                 u2396 3560  
                               u2820 27FC                                 u5117 1926  
                               u5037 1828                                 u2590 39C8  
                               u5207 3D88                                 u5127 1942  
                               u5047 183E                                 u5217 3A52  
                               u5137 1958                                 u5057 186A  
                               u5227 3A86                                 u2827 27F2  
                               u5147 197C                                 u5067 1886  
                               u2780 2798                                 u5237 3DA0  
                               u5157 1998                                 u5077 189C  
                               u5247 3500                                 u5167 19DA  
                               u5087 18C8                                 u5257 350A  
                               u5177 19FA                                 u5097 18E4  
                               u3930 0EA0                                 u5267 3544  
                               u2787 278E                                 u5187 1A24  
                               u5277 354E                                 u5197 1A40  
                               u2990 2994                                 u4807 0F28  
                               u4817 0F4C                                 u4907 1338  
                               u4827 0FA4                                 u4917 134E  
                               u4837 0FDC                                 u4927 1466  
                               u4847 1014                                 u4937 1482  
                               u4857 1048                                 u4947 1568  
                               u4867 1116                                 u4787 0ECC  
                               u4957 1584                                 u4877 1136  
                               u4797 0EE8                                 u4967 166A  
                               u4887 127E                                 u4977 1686  
                               u4897 12BC                                 u4987 16C0  
                               u4997 173E                                 _main 0E62  
           __end_of_interruptHandler 265E                                 _mode 00B8  
                               _keys FD19                                 _temp 0076  
                               _time 0052                                 _prev 00B0  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                 i2___lwdiv@quotient 0005                                 indf0 000FEF  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 007F                                 _strs FD4C  
               ??i2_I2C_Master_Start 0002                 ??i2_I2C_Master_Write 0004  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                    __end_ofi2_putch 3DD0                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000                          i2_lcdNibble 35E8  
                   __end_of_LCD_LEFT FD47                         _total_number 0069  
              I2C_Master_Read@ackBit 00C9                     ?_I2C_Master_Init 000E  
                   ?_I2C_Master_Read 0001       generate_compartment_array@step 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
                              ?_main 0001                      __end_of___awdiv 35E8  
                              STR_10 FDC1                                STR_11 FFEA  
                              STR_12 FFF8                                STR_20 FFF0  
                              STR_21 FDC1                                STR_13 FFFB  
                              STR_30 FDC1                                STR_14 FDC1  
                              STR_22 FFF4                                STR_23 FDC1  
                              STR_15 FDC1                                STR_31 FDFE  
                              STR_16 FFE8                                STR_32 FF24  
                              STR_24 FE85                                STR_40 FE21  
                              STR_33 FDC1                                STR_17 FDC1  
                              STR_25 FF3E                                STR_41 FE32  
                              STR_18 FFEC                                STR_42 FF4A  
                              STR_26 FF0A                                STR_50 FE65  
                              STR_34 FDB0                                STR_35 FDC1  
                              STR_19 FDC1                                STR_27 FF6D  
                              STR_51 FF31                                STR_43 FE54  
                              STR_36 FDC1                                STR_60 FF62  
                              STR_52 FE95                                STR_44 FDEB  
                              STR_28 FDD8                      __end_of___awmod 38E4  
                              STR_61 FFF8                                STR_53 FFFD  
                              STR_45 FF78                                STR_29 FF17  
                              STR_37 FDC4                                STR_62 FEA3  
                              STR_54 FFDA                                STR_70 FFDE  
                              STR_46 FEC2                                STR_38 FEB3  
                              STR_55 FFDE                                STR_71 FFE2  
                              STR_63 FFA3                                STR_39 FEEE  
                              STR_47 FED1                                STR_64 FEA3  
                              STR_72 FFD9                                STR_56 FFE2  
                              STR_48 FEC2                                STR_80 FFE4  
                              STR_73 FFDD                                STR_49 FED1  
                              STR_81 FFC4                                STR_57 FF82  
                              STR_65 FF56                                STR_74 FFE1  
                              STR_58 FFF8                                STR_82 FFC9  
                              STR_66 FF8B                                STR_59 FEA3  
                              STR_75 FFD8                                STR_83 FFBF  
                              STR_68 FFFD                                STR_76 FFDC  
                              STR_84 FFB5                                STR_69 FFDA  
                              STR_77 FFE0                                STR_85 FFBA  
                              STR_78 FFB6                                STR_86 FFB0  
                              STR_79 FFC0                                STR_87 FFCE  
                              STR_88 FF9C                                STR_89 FE10  
                    __end_of___lldiv 37FA                      ___awdiv@divisor 00CA  
                    __end_of___lwdiv 39F8                      __end_of___lwmod 3BB6  
                              i2l410 1C5A                                i2l402 1C16  
                              i2l403 1B18                                i2l420 1F4E  
                              i2l412 1CAA                                i2l405 1B68  
                              i2l430 20B4                                i2l422 1F96  
                              i2l414 1E92                                i2l431 20F4  
                              i2l407 1C32                                i2l432 2134  
                              i2l424 1FDE                                i2l416 1EB6  
                              i2l433 2174                                i2l417 205A  
                              i2l409 1D58                                i2l450 2490  
                              i2l434 2348                                i2l426 2026  
                              i2l418 1F06                                i2l451 249A  
                              i2l435 21CC                                i2l427 204C  
                              i2l700 00D6                                i2l452 255E  
                              i2l444 24C2                                i2l428 239E  
                              i2l445 2470                                i2l437 22CC  
                              i2l429 2074                                i2l710 037A  
                              i2l702 0138                                i2l454 25B0  
                              i2l446 24FC                                i2l438 2340  
                              i2l447 2478                                i2l720 0772  
                              i2l712 042E                                i2l704 019A  
                              i2l456 25E8                                i2l448 2480  
                              i2l449 2488                                i2l730 0BE6  
                              i2l722 0826                                i2l714 04E2  
                              i2l706 023A                                i2l740 393E  
                              i2l732 0CD6                                i2l724 0916  
                              i2l716 0596                                i2l708 02DA  
                              i2l750 2F5A                                i2l734 0D9C  
                              i2l726 0A06                                i2l718 0684  
                              i2l751 2FBE                                i2l831 2C80  
                              i2l815 2AB0                                i2l399 1AEE  
                              i2l752 3032                                i2l728 0AF6  
                              i2l840 2BFC                                i2l832 2B68  
                              i2l824 2B06                                i2l816 2AC0  
                              i2l753 30B6                                i2l841 2BF6  
                              i2l833 2B6C                                i2l746 30FA  
                              i2l850 2D34                                i2l826 2C4A  
                              i2l834 2B94                                i2l818 2AD4  
                              i2l747 2EC2                                i2l851 2CC8  
                              i2l843 2C38                                i2l835 2BA2  
                              i2l819 2ACE                                i2l860 2D5E  
                              i2l844 2C0E                                i2l836 2B9E  
                              i2l749 2F06                                i2l861 2D82  
                              i2l862 2D8A                                i2l838 2BEC  
                              i2l863 2DB6                                i2l855 2D44  
                              i2l847 2CAE                                i2l872 2DE4  
                              i2l864 2DA0                                i2l856 2CFE  
                              i2l873 2E9C                                i2l698 0074  
                              i2l875 2E86                                i2l876 2DEA  
                    ___awdiv@counter 00CC                                i2l877 2E96  
                              i2l878 2E34                                _PORTB 000F81  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _B_max 01CD  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                              _N_max 01CB                        __CFG_WRT3$OFF 000000  
                    __end_of_lcdInst 3DA8                        _N_spacingTime 016C  
                              _S_max 01C9                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                              _W_max 01C7                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_readADC 3C74                      __end_of_initLCD 3A96  
                              _check 38E4                       __CFG_EBTRB$OFF 000000  
                         i2isdigit@c 0003                                _angle 00BE  
                    __end_of_dpowers FD34                                _array FD43  
                              _error 0170                      __end_of_isdigit 3D5A  
                              _valid 006B                                _state 00AC  
                              _putch 3D78                    _compartment_array 0080  
                         _N_dispense 00FC                                pclath 000FFA  
                              tablat 000FF5                    _LCDinterruptState 00C2  
                   __end_ofi2___wmul 3D14                                status 000FD8  
        I2C_Master_Read@receivedByte 00CA                                wtemp6 0080  
                    __end_of_strncmp 36F4                   __size_ofi2___awdiv 0084  
                     __CFG_PBADEN$ON 000000                        i2printf@width 0024  
              __size_of_I2C_sendData 0028                     __end_ofi2_printf 2EC0  
                 __size_ofi2___lwdiv 0052                   __size_ofi2___lwmod 0042  
                    __initialization 37FA                   __size_ofi2_lcdInst 0014  
                       __end_of_main 1A66                         __end_of_keys FD2A  
                         i2printf@ap 001D                           i2printf@cp 001B  
                       __end_of_strs FDB0                   __size_ofi2_initLCD 004C  
                 __size_ofi2_isdigit 001E                       __CFG_OSC$HSPLL 000000  
                  __end_of_LCD_RIGHT FD48                               ??_main 00EC  
                         _S_dispense 00FB                        __activetblptr 000003  
                  ?_I2C_Master_Start 0001                    ?_I2C_Master_Write 00C9  
                   ?_get_RTC_initial 0001                               ?_check 0001  
                 ??_I2C_Master_Start 00C9                               _ADCON0 000FC2  
                             _ADCON1 000FC1                   ??_I2C_Master_Write 00CB  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   ___awdiv@dividend 00C8                      i2lcdNibble@data 0002  
                             ?_putch 0001                         _I2C_sendData 3CC6  
                    i2lcdNibble@temp 0001                               _INT1IE 007F83  
                             _INT1IF 007F80                               i2l1050 3718  
                             i2l1211 3D70                               i2l1052 3736  
                             i2l1300 3BCC                               i2l1053 372E  
                             i2l1301 3BC4                               i2l1070 38CC  
                             i2l1062 3888                               i2l1071 38DA  
                             i2l1063 3894                               i2l1056 3756  
                             i2l1304 3BE4                               i2l1241 37DA  
                             i2l1065 38AA                               i2l1057 3760  
                             i2l1049 3708                               i2l1305 3BEE  
                             i2l1242 37E8                               i2l1066 38A2  
                             i2l1058 376E                               i2l1237 37A6  
                             i2l1069 38C2                               i2l1238 379A  
                             i2l1434 3C06                               i2l1290 3A16  
                             i2l1443 3AEC                               i2l1435 3C02  
                             i2l1451 3B3E                               i2l1291 3A0E  
                             i2l1444 3AE4                               i2l1452 3B36  
                             i2l1437 3C1E                               i2l1438 3C16  
                             i2l1294 3A36                               i2l1295 3A40  
                             i2l1457 36DA                               i2l1458 3670  
                             i2l1459 36D2                               i2l4292 3670  
                             i2l5324 1B60                               i2l4710 2CCC  
                             i2l5350 1C2E                               i2l4546 3934  
                             i2l5370 1CA2                               i2l4724 2D02  
                             i2l4680 2BF6                               i2l4684 2C0E  
                             i2l5690 2610                               i2l5578 22DA  
                             i2l5692 2612                            ??i2_putch 0003  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                             _B_done 0166                      _openHandle_data 00C1  
                             _N_done 0164                               _S_done 0162  
                     __CFG_XINST$OFF 000000                               _W_done 0160  
                             ___wmul 3C9E                            ??___awdiv 00CC  
                     __CFG_STVREN$ON 000000                            ??___awmod 0005  
                          ??___lldiv 0009                            ??___lwdiv 00CC  
                          ??___lwmod 00D3                     __end_of_is_valid 0E62  
                             clear_0 3840                               clear_1 384C  
                             clear_2 3858                               clear_3 3864  
                   ___awdiv@quotient 00CE                      ___awmod@divisor 0003  
                             _number 007D                      ___awmod@counter 0005  
                          ??_lcdInst 00CA                               _printf 265E  
                             _strcat 3BF8                               _strcmp 3AE2  
                             _strcpy 3B2C                       i2___awdiv@sign 0006  
                          ??_readADC 00CA                            ??_initLCD 00CB  
                 _compartment_number 0042                            ??_isdigit 00C8  
                  __end_ofi2___awdiv 3778                    __end_ofi2___lwdiv 3A4A  
                       __mediumconst FD18                    __end_ofi2___lwmod 3BF8  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                    __end_ofi2_lcdInst 3DE4  
                          ??_strncmp 000D                    __end_ofi2_initLCD 3AE2  
                  __end_ofi2_isdigit 3D78                           __accesstop 0080  
            __end_of__initialization 386A                __end_of_get_RTC_final 34DA  
                      ___rparam_used 000001                   i2___lwmod@dividend 0008  
               __end_of_happynewyear FD43                       __pcstackCOMRAM 0001  
                       __pidataBANK0 3DF6                         __pidataBANK1 3E05  
            i2I2C_Master_Read@ackBit 0002                        __end_of_check 3948  
                      __end_of_array FD46                        __end_of_putch 3D90  
                        i2printf@idx 0019                          i2printf@len 001F  
                        i2printf@val 0021                        _B_spacingTime 016E  
                          ?i2___wmul 0001                   __size_of_lcdNibble 0088  
                        i2putch@data 0003                            ?i2_printf 000D  
                            ??_check 0003                              ??_putch 00CA  
                         __pbssBANK0 0080                           __pbssBANK1 0100  
                         __pbssBANK2 0200                    ?_interruptHandler 0001  
                 ??_interruptHandler 0027                        _init_position 01CF  
                       ?i2_lcdNibble 0001                              ?___wmul 00D0  
                            ?_printf 00D6                              ?_strcat 0001  
                            ?_strcmp 0001                              ?_strcpy 0007  
                         ??i2___wmul 0005                         _gear_counter 00B2  
                         _final_time 0090                           ??i2_printf 0015  
               lcd@LCDinterruptState 0077                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
                            _B_array 0130                              i2_putch 3DBC  
                          ?_is_valid 0001                              _N_array 0110  
        __size_ofi2_I2C_Master_Start 0008                    __end_of_lcdNibble 3562  
        __size_ofi2_I2C_Master_Write 000A                              _S_array 0120  
                            __Hparam 0000                           _hr_initial 005D  
                            __Lparam 0000                              _W_array 0100  
                            ___awdiv 3562                              ___awmod 3874  
                            ___lldiv 3778                      __size_of___wmul 0028  
                            ___lwdiv 39A4                              ___lwmod 3B72  
           interruptHandler@keypress 0040                              __pcinit 37FA  
                            __ramtop 1000                           _initialize 312C  
                            _lcdInst 3D90                              __ptext0 0E62  
                            __ptext1 3C3A                              __ptext2 265E  
                            __ptext3 3D78                              __ptext4 3D38  
                            __ptext5 3B72                              __ptext6 39A4  
                            __ptext7 312C                              __ptext8 3A4A  
                            __ptext9 3D90                      __size_of_printf 0448  
                    __size_of_strcat 0042                      __size_of_strcmp 004A  
                            _readADC 3C3A                      __size_of_strcpy 0046  
                            _initLCD 3A4A                    __end_of_hexpowers FD3C  
                            _counter 006F                              _dpowers FD2A  
                            _isdigit 3D38                     ___awmod@dividend 0001  
                          _LCD_RIGHT FD47             __size_of_I2C_Master_Init 005C  
           __size_of_I2C_Master_Read 002A             __size_of_I2C_Master_Wait 0014  
           __size_of_I2C_Master_Stop 0008                        _S_spacingTime 016A  
                            _strncmp 366E                       __pintcode_body 1A66  
               end_of_initialization 386A                __end_of_LCD_SIZE_HORZ FD4A  
              __end_of_LCD_SIZE_VERT FD49         ??_generate_compartment_array 0003  
                       _final_number 0150                              int_func 1A66  
                i2___wmul@multiplier 0001                           ??_is_valid 0007  
                     _operation_done 00B4            __size_of_I2C_Master_Start 0008  
          __size_of_I2C_Master_Write 000A                      ___lldiv@divisor 0005  
                       _close_handle 00F1                      ___lldiv@counter 000D  
                            printf@c 00EB                              printf@f 00D6  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                            strcmp@r 0006                            _PORTAbits 000F80  
                         _prev_state 0067                           _servo_ramp 00F2  
__size_of_generate_compartment_array 026C                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                  i2_I2C_Master_Read 3D14                    i2_I2C_Master_Wait 3DE4  
                       _happynewyear FD3C                    i2_I2C_Master_Stop 3E34  
                          i2___awdiv 36F4                           _white_tape 00BA  
                          _B_counter 00A8                    i2___lwdiv@divisor 0003  
                          i2___lwdiv 39F8                            i2___lwmod 3BB6  
                  i2___lwdiv@counter 0007                   ?i2_I2C_Master_Read 0001  
                 ?i2_I2C_Master_Wait 0001                   ?i2_I2C_Master_Stop 0001  
                          i2_lcdInst 3DD0             __size_of_get_RTC_initial 0132  
                        printf@width 00E9                            i2_initLCD 3A96  
                 i2___awdiv@dividend 0001                  ??i2_I2C_Master_Read 0002  
                          i2_isdigit 3D5A                  ??i2_I2C_Master_Wait 0001  
                ??i2_I2C_Master_Stop 0002                       __end_of___wmul 3CC6  
               __size_ofi2_lcdNibble 0086                          ?_initialize 0001  
                      i2lcdInst@data 0003                     i2___wmul@product 0005  
                     __end_of_printf 2AA6                            _N_counter 00A4  
                     __end_of_strcat 3C3A                       __end_of_strcmp 3B2C  
                       i2printf@flag 0023                       __end_of_strcpy 3B72  
          __end_ofi2_I2C_Master_Read 3D38            __end_ofi2_I2C_Master_Wait 3DF6  
                       i2printf@prec 001A                  start_initialization 37FA  
          __end_ofi2_I2C_Master_Stop 3E3C                   i2___awdiv@quotient 0007  
                  __size_ofi2___wmul 0026                            i2printf@c 0026  
                          i2printf@f 000D                           ?i2___awdiv 0001  
                         ?i2___lwdiv 0001                           ?i2___lwmod 0008  
                  __size_ofi2_printf 041A                            _S_counter 00A6  
                  ??_I2C_Master_Init 0012                    ??_I2C_Master_Read 00C9  
                  ??_I2C_Master_Wait 00C8                           ?i2_lcdInst 0001  
                  ??_I2C_Master_Stop 00C9                         _counter_step 006D  
                         ?i2_initLCD 0001                           ?i2_isdigit 0001  
                          _W_counter 00A2                    interruptHandler@i 003E  
                           ??___wmul 00D4             I2C_Master_Init@clockFreq 000E  
                        __pdataBANK0 00F1                          __pdataBANK1 01C7  
                   __CFG_LPT1OSC$OFF 000000                             ??_printf 00DA  
          __size_of_interruptHandler 2656                             ??_strcat 0005  
                           ??_strcmp 0005                             ??_strcpy 000B  
             __size_of_get_RTC_final 0132                          __pbssCOMRAM 0042  
                        _change_mode 00B6                        __pcstackBANK0 00C8  
                  i2___lwmod@divisor 000A                    i2___lwmod@counter 000C  
                       _isdigit$1280 00C9   __end_of_generate_compartment_array 312C  
         _generate_compartment_array 2EC0                             ?i2_putch 0001  
                __size_of_initialize 014A                         _current_set2 0078  
                   _I2C_Master_Start 3E2C                     _I2C_Master_Write 3E10  
                  __size_of_is_valid 0E50                            _main$1669 00EF  
                   ___lwdiv@dividend 00C8                         _initial_time 0098  
                  __CFG_CCP2MX$PORTC 000000                            __pintcode 0008  
                  ??_get_RTC_initial 00D6                        __pmediumconst FD18  
                          _lcdNibble 34DA                             ?___awdiv 00C8  
                           ?___awmod 0001                             ?___lldiv 0001  
                           ?___lwdiv 00C8                             ?___lwmod 00CF  
                          _final_set 019A                             ?_lcdInst 0001  
                           ?_readADC 00C8                             ?_initLCD 0001  
                           ?_isdigit 0001           __size_ofi2_I2C_Master_Read 0024  
         __size_ofi2_I2C_Master_Wait 0012           __size_ofi2_I2C_Master_Stop 0008  
                          _hexpowers FD34                       __size_of_check 0064  
                   ___lwdiv@quotient 00CC                          ??i2___awdiv 0005  
                      _W_spacingTime 0168                        ?_I2C_sendData 0001  
                          _min_final 0094                             ?_strncmp 0007  
                        ??i2___lwdiv 0005                          ??i2___lwmod 000C  
                     __size_of_putch 0018                            _sec_final 0092  
                           _LCD_LEFT FD46           __end_ofi2_I2C_Master_Start 3E44  
         __end_ofi2_I2C_Master_Write 3E24                          ??i2_lcdInst 0003  
                     ___wmul@product 00D4                             _LATDbits 000F8C  
                        ??i2_initLCD 0004                          ??i2_isdigit 0001  
                      _get_RTC_final 33A8                        _operationTime 0071  
                           i2u311_45 397C                             i2u312_40 3B68  
                           i2u312_47 3B5E                             i2u242_45 3626  
                           i2u242_46 3628                             i2u243_45 366A  
                           i2u243_46 366C                             i2u340_40 3904  
                           i2u341_40 3914                             i2u317_40 369E  
                           i2u421_40 1B14                             i2u342_40 3924  
                           i2u246_40 3B20                             i2u430_40 1CC6  
                           i2u350_45 3D30                             i2u350_46 3D32  
                           i2u343_40 3934                             i2u431_40 1D54  
                           i2u423_40 1B84                             i2u256_40 37AA  
                           i2u272_40 3BD0                             i2u450_40 22DA  
                           i2u530_47 1CDE                             i2u347_40 38AE  
                           i2u339_40 38F4                             i2u355_40 2BD0  
                           i2u355_47 2BC6                             i2u531_47 1D34  
                           i2u452_40 2358                             i2u428_40 1C56  
                           i2u540_47 23E0                             i2u532_47 1E6E  
                           i2u269_40 3A1A                             i2u541_47 24B4  
                           i2u533_47 1E82                             i2u550_47 3650  
                           i2u542_47 251C                             i2u534_47 2040  
                           i2u359_40 2C30                             i2u551_47 365A  
                           i2u359_47 2C26                             i2u543_47 253C  
                           i2u535_47 219E                            _operation 0073  
                           i2u384_40 373A                             i2u376_40 2DBE  
                           i2u448_40 21CA                             i2u544_47 3DC8  
                           i2u536_47 2274                             i2u528_47 1B9C  
                           i2u377_40 2DD2                             i2u545_47 3A9C  
                           i2u537_47 22B4                             i2u529_47 1BF2  
                           i2u546_47 3AD0                             i2u538_47 2324  
                           i2u379_40 2EA4                             i2u547_47 3DDC  
                           i2u539_47 2372                             i2u548_47 360C  
                           i2u549_47 3616                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001        i2I2C_Master_Write@byteToWrite 0002  
                          _nuts_data 00C0                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 00D0                             i2___wmul 3CEE  
                      lcdNibble@data 00C9                             _B_remain 00A0  
                         printf@flag 00E8                        lcdNibble@temp 00C8  
                         printf@prec 00DF                    i2___awdiv@divisor 0003  
                  i2___awdiv@counter 0005                             i2_printf 2AA6  
                     ??_I2C_sendData 00CB                       _LCD_HORZ_LIMIT FD4B  
                          copy_data0 380E                            copy_data1 382E  
               interruptHandler@temp 0041                             _N_remain 009E  
                   __size_ofi2_putch 0014                       ?_get_RTC_final 0001  
                           _S_remain 009C                             __Hrparam 0000  
              I2C_sendData@char_data 00CB                             __Lrparam 0000  
                           _W_remain 009A                   __CFG_BOREN$SBORDIS 000000  
                   __size_of___awdiv 0086                     __size_of___awmod 0070  
              i2___wmul@multiplicand 0003                     __size_of___lldiv 0082  
                _rotate_1compartment 00FE                     __size_of___lwdiv 0054  
                   __size_of___lwmod 0044                       readADC@channel 00CC  
                       ??_initialize 00C8                     _interruptHandler 0008  
                   __size_of_lcdInst 0018                      _I2C_Master_Init 3948  
                   __size_of_readADC 003A                      _I2C_Master_Read 3C74  
                   __size_of_initLCD 004C                          _current_set 00C3  
                    _I2C_Master_Wait 3DA8                           strcat@from 0003  
                    _I2C_Master_Stop 3E24               __end_of_LCD_HORZ_LIMIT FD4C  
                   __size_of_isdigit 0022                      ___lwdiv@divisor 00CA  
                    ___lwdiv@counter 00CE                             __ptext10 34DA  
                           __ptext11 3276                             __ptext20 3DA8  
                           __ptext12 33A8                             __ptext13 3C9E  
                           __ptext30 36F4                             __ptext22 2AA6  
                           __ptext14 3562                             __ptext31 3E1A  
                           __ptext23 3DBC                             __ptext15 3C74  
                           __ptext40 3CEE                             __ptext32 3E34  
                           __ptext24 3D5A                             __ptext16 3CC6  
                           __ptext41 3AE2                             __ptext33 3E3C  
                           __ptext25 3BB6                             __ptext17 3E10  
                           __ptext42 2EC0                             __ptext34 3D14  
                           __ptext26 39F8                             __ptext18 3E24  
                           __ptext43 38E4                             __ptext35 3DE4  
                           __ptext27 3A96                             __ptext19 3E2C  
                           __ptext44 3874                             __ptext36 366E  
                           __ptext28 3DD0                             __ptext45 3948  
                           __ptext37 3B2C                             __ptext29 35E8  
                           __ptext46 3778                             __ptext38 3BF8  
                           __ptext39 0012                             _fastener 0200  
                     _LCD_VERT_LIMIT FD4A                          _min_initial 005B  
                   __size_of_strncmp 0086                             _hr_final 0096  
                         strcpy@from 0009                       i2_isdigit$1280 0002  
                      __size_of_main 0C04                             _is_valid 0012  
                         strncmp@len 000B                   __end_of_initialize 3276  
                        _sec_initial 0059                             _temp_set 01C2  
                      ??i2_lcdNibble 0001                          ??_lcdNibble 00C8  
                           _prev_set 0172                             int$flags 007F  
                          printf@idx 00DE                            printf@len 00E4  
                          printf@val 00E6          I2C_Master_Write@byteToWrite 00C9  
                          putch@data 00CA             __end_of_I2C_Master_Start 3E34  
           __end_of_I2C_Master_Write 3E1A                           _INTCONbits 000FF2  
                       _motorStart_0 00FA                         _motorStart_1 00F8  
                       _motorStart_2 00F6                         _motorStart_3 00F4  
             __end_of_LCD_VERT_LIMIT FD4B                             isdigit@c 00CA  
                           intlevel2 0000          ?_generate_compartment_array 0001  
                    _get_RTC_initial 3276                      ??_get_RTC_final 00D6  
                      _LCD_SIZE_HORZ FD49                     ___lwmod@dividend 00CF  
                      _LCD_SIZE_VERT FD48                     ___lldiv@dividend 0001  
                          strncmp@s1 0007                            strncmp@s2 0009  
                           printf@ap 00E2                             printf@cp 00E0  
               __end_of_I2C_sendData 3CEE              __end_of_I2C_Master_Init 39A4  
            __end_of_I2C_Master_Read 3C9E              __end_of_I2C_Master_Wait 3DBC  
            __end_of_I2C_Master_Stop 3E2C                          lcdInst@data 00CA  
                        _motorStop_0 00F9                          _motorStop_1 00F7  
                        _motorStop_2 00F5                          _motorStop_3 00F3  
                __end_ofi2_lcdNibble 366E                             strcat@cp 0005  
                           strcat@to 0001                             strcmp@s1 0001  
                           strcmp@s2 0003                     ___lldiv@quotient 0009  
                    ___lwmod@divisor 00D1                             strcpy@cp 000B  
                           strcpy@to 0007                      ___lwmod@counter 00D3  
                        _SSPCON1bits 000FC6                          _SSPCON2bits 000FC5  
                        _prev_number 0140        i2I2C_Master_Read@receivedByte 0003  
