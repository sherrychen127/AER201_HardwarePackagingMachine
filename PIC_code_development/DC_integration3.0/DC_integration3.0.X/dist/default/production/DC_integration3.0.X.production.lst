

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 23 22:47:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	idataCOMRAM
    74  001D24                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _max
    78  001D24  0004               	dw	4
    79                           
    80                           	psect	smallconst
    81  001000                     __psmallconst:
    82                           	opt stack 0
    83  001000  00                 	db	0
    84  001001                     _keys:
    85                           	opt stack 0
    86  001001  31                 	db	49
    87  001002  32                 	db	50
    88  001003  33                 	db	51
    89  001004  41                 	db	65
    90  001005  34                 	db	52
    91  001006  35                 	db	53
    92  001007  36                 	db	54
    93  001008  42                 	db	66
    94  001009  37                 	db	55
    95  00100A  38                 	db	56
    96  00100B  39                 	db	57
    97  00100C  43                 	db	67
    98  00100D  2A                 	db	42
    99  00100E  30                 	db	48
   100  00100F  23                 	db	35
   101  001010  44                 	db	68
   102  001011  00                 	db	0
   103  001012                     __end_of_keys:
   104                           	opt stack 0
   105  001012                     _dpowers:
   106                           	opt stack 0
   107  001012  0001               	dw	1
   108  001014  000A               	dw	10
   109  001016  0064               	dw	100
   110  001018  03E8               	dw	1000
   111  00101A  2710               	dw	10000
   112  00101C                     __end_of_dpowers:
   113                           	opt stack 0
   114  00101C                     _array:
   115                           	opt stack 0
   116  00101C  31                 	db	49
   117  00101D  30                 	db	48
   118  00101E  00                 	db	0
   119  00101F                     __end_of_array:
   120                           	opt stack 0
   121  00101F                     _LCD_LEFT:
   122                           	opt stack 0
   123  00101F  00                 	db	0
   124  001020                     __end_of_LCD_LEFT:
   125                           	opt stack 0
   126  001020                     _LCD_RIGHT:
   127                           	opt stack 0
   128  001020  01                 	db	1
   129  001021                     __end_of_LCD_RIGHT:
   130                           	opt stack 0
   131  001021                     _LCD_SIZE_VERT:
   132                           	opt stack 0
   133  001021  02                 	db	2
   134  001022                     __end_of_LCD_SIZE_VERT:
   135                           	opt stack 0
   136  001022                     _LCD_SIZE_HORZ:
   137                           	opt stack 0
   138  001022  10                 	db	16
   139  001023                     __end_of_LCD_SIZE_HORZ:
   140                           	opt stack 0
   141  001023                     _LCD_VERT_LIMIT:
   142                           	opt stack 0
   143  001023  02                 	db	2
   144  001024                     __end_of_LCD_VERT_LIMIT:
   145                           	opt stack 0
   146  001024                     _LCD_HORZ_LIMIT:
   147                           	opt stack 0
   148  001024  28                 	db	40
   149  001025                     __end_of_LCD_HORZ_LIMIT:
   150                           	opt stack 0
   151  0000                     _SSPBUF	set	4041
   152  0000                     _SSPCON2bits	set	4037
   153  0000                     _SSPADD	set	4040
   154  0000                     _SSPCON2	set	4037
   155  0000                     _SSPCON1	set	4038
   156  0000                     _SSPSTAT	set	4039
   157  0000                     _TRISCbits	set	3988
   158  0000                     _SSPCON1bits	set	4038
   159  0000                     _TRISDbits	set	3989
   160  0000                     _LATDbits	set	3980
   161  0000                     _ADRESH	set	4036
   162  0000                     _ADRESL	set	4035
   163  0000                     _ADCON0bits	set	4034
   164  0000                     _INTCONbits	set	4082
   165  0000                     _ADCON2bits	set	4032
   166  0000                     _ADCON1	set	4033
   167  0000                     _ADCON0	set	4034
   168  0000                     _TRISE	set	3990
   169  0000                     _TRISD	set	3989
   170  0000                     _TRISC	set	3988
   171  0000                     _TRISB	set	3987
   172  0000                     _TRISA	set	3986
   173  0000                     _LATE	set	3981
   174  0000                     _LATD	set	3980
   175  0000                     _LATC	set	3979
   176  0000                     _LATB	set	3978
   177  0000                     _LATA	set	3977
   178  0000                     _OSCCON	set	4051
   179  0000                     _ADON	set	32272
   180  0000                     _INT1IE	set	32643
   181  001025                     STR_24:
   182  001025  72                 	db	114	;'r'
   183  001026  65                 	db	101	;'e'
   184  001027  6D                 	db	109	;'m'
   185  001028  61                 	db	97	;'a'
   186  001029  69                 	db	105	;'i'
   187  00102A  6E                 	db	110	;'n'
   188  00102B  20                 	db	32
   189  00102C  57                 	db	87	;'W'
   190  00102D  61                 	db	97	;'a'
   191  00102E  73                 	db	115	;'s'
   192  00102F  68                 	db	104	;'h'
   193  001030  65                 	db	101	;'e'
   194  001031  72                 	db	114	;'r'
   195  001032  73                 	db	115	;'s'
   196  001033  3A                 	db	58	;':'
   197  001034  25                 	db	37
   198  001035  64                 	db	100	;'d'
   199  001036  00                 	db	0
   200  001037                     STR_23:
   201  001037  72                 	db	114	;'r'
   202  001038  65                 	db	101	;'e'
   203  001039  6D                 	db	109	;'m'
   204  00103A  61                 	db	97	;'a'
   205  00103B  69                 	db	105	;'i'
   206  00103C  6E                 	db	110	;'n'
   207  00103D  20                 	db	32
   208  00103E  53                 	db	83	;'S'
   209  00103F  70                 	db	112	;'p'
   210  001040  61                 	db	97	;'a'
   211  001041  63                 	db	99	;'c'
   212  001042  65                 	db	101	;'e'
   213  001043  72                 	db	114	;'r'
   214  001044  3A                 	db	58	;':'
   215  001045  25                 	db	37
   216  001046  64                 	db	100	;'d'
   217  001047  00                 	db	0
   218  001048                     STR_21:
   219  001048  72                 	db	114	;'r'
   220  001049  65                 	db	101	;'e'
   221  00104A  6D                 	db	109	;'m'
   222  00104B  61                 	db	97	;'a'
   223  00104C  69                 	db	105	;'i'
   224  00104D  6E                 	db	110	;'n'
   225  00104E  20                 	db	32
   226  00104F  42                 	db	66	;'B'
   227  001050  6F                 	db	111	;'o'
   228  001051  6C                 	db	108	;'l'
   229  001052  74                 	db	116	;'t'
   230  001053  73                 	db	115	;'s'
   231  001054  3A                 	db	58	;':'
   232  001055  25                 	db	37
   233  001056  64                 	db	100	;'d'
   234  001057  00                 	db	0
   235  001058                     STR_22:
   236  001058  72                 	db	114	;'r'
   237  001059  65                 	db	101	;'e'
   238  00105A  6D                 	db	109	;'m'
   239  00105B  61                 	db	97	;'a'
   240  00105C  69                 	db	105	;'i'
   241  00105D  6E                 	db	110	;'n'
   242  00105E  20                 	db	32
   243  00105F  4E                 	db	78	;'N'
   244  001060  75                 	db	117	;'u'
   245  001061  74                 	db	116	;'t'
   246  001062  73                 	db	115	;'s'
   247  001063  3A                 	db	58	;':'
   248  001064  25                 	db	37
   249  001065  64                 	db	100	;'d'
   250  001066  00                 	db	0
   251  001067                     STR_3:
   252  001067  64                 	db	100	;'d'
   253  001068  6F                 	db	111	;'o'
   254  001069  6E                 	db	110	;'n'
   255  00106A  65                 	db	101	;'e'
   256  00106B  00                 	db	0
   257  0000                     
   258                           ; #config settings
   259  00106C  00                 	db	0	; dummy byte at the end
   260  0000                     
   261                           	psect	cinit
   262  001CA2                     __pcinit:
   263                           	opt stack 0
   264  001CA2                     start_initialization:
   265                           	opt stack 0
   266  001CA2                     __initialization:
   267                           	opt stack 0
   268                           
   269                           ; Initialize objects allocated to COMRAM (2 bytes)
   270                           ; load TBLPTR registers with __pidataCOMRAM
   271  001CA2  0E24               	movlw	low __pidataCOMRAM
   272  001CA4  6EF6               	movwf	tblptrl,c
   273  001CA6  0E1D               	movlw	high __pidataCOMRAM
   274  001CA8  6EF7               	movwf	tblptrh,c
   275  001CAA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   276  001CAC  6EF8               	movwf	tblptru,c
   277  001CAE  0009               	tblrd		*+	;fetch initializer
   278  001CB0  CFF5 F043          	movff	tablat,__pdataCOMRAM
   279  001CB4  0009               	tblrd		*+	;fetch initializer
   280  001CB6  CFF5 F044          	movff	tablat,__pdataCOMRAM+1
   281                           
   282                           ; Clear objects allocated to COMRAM (40 bytes)
   283  001CBA  EE00  F001         	lfsr	0,__pbssCOMRAM
   284  001CBE  0E28               	movlw	40
   285  001CC0                     clear_0:
   286  001CC0  6AEE               	clrf	postinc0,c
   287  001CC2  06E8               	decf	wreg,f,c
   288  001CC4  E1FD               	bnz	clear_0
   289  001CC6                     end_of_initialization:
   290                           	opt stack 0
   291  001CC6                     __end_of__initialization:
   292                           	opt stack 0
   293  001CC6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   294  001CC8  6EF8               	movwf	tblptru,c
   295  001CCA  0100               	movlb	0
   296  001CCC  EF37  F008         	goto	_main	;jump to C main() function
   297                           tblptru	equ	0xFF8
   298                           tblptrh	equ	0xFF7
   299                           tblptrl	equ	0xFF6
   300                           tablat	equ	0xFF5
   301                           postinc0	equ	0xFEE
   302                           wreg	equ	0xFE8
   303                           
   304                           	psect	bssCOMRAM
   305  000001                     __pbssCOMRAM:
   306                           	opt stack 0
   307  000001                     _i:
   308                           	opt stack 0
   309  000001                     	ds	2
   310  000003                     _analog_result:
   311                           	opt stack 0
   312  000003                     	ds	2
   313  000005                     _W_done:
   314                           	opt stack 0
   315  000005                     	ds	2
   316  000007                     _S_done:
   317                           	opt stack 0
   318  000007                     	ds	2
   319  000009                     _N_done:
   320                           	opt stack 0
   321  000009                     	ds	2
   322  00000B                     _B_done:
   323                           	opt stack 0
   324  00000B                     	ds	2
   325  00000D                     _W_spacingTime:
   326                           	opt stack 0
   327  00000D                     	ds	2
   328  00000F                     _S_spacingTime:
   329                           	opt stack 0
   330  00000F                     	ds	2
   331  000011                     _N_spacingTime:
   332                           	opt stack 0
   333  000011                     	ds	2
   334  000013                     _B_spacingTime:
   335                           	opt stack 0
   336  000013                     	ds	2
   337  000015                     _W_remain:
   338                           	opt stack 0
   339  000015                     	ds	2
   340  000017                     _S_remain:
   341                           	opt stack 0
   342  000017                     	ds	2
   343  000019                     _N_remain:
   344                           	opt stack 0
   345  000019                     	ds	2
   346  00001B                     _B_remain:
   347                           	opt stack 0
   348  00001B                     	ds	2
   349  00001D                     _W_counter:
   350                           	opt stack 0
   351  00001D                     	ds	2
   352  00001F                     _S_counter:
   353                           	opt stack 0
   354  00001F                     	ds	2
   355  000021                     _N_counter:
   356                           	opt stack 0
   357  000021                     	ds	2
   358  000023                     _B_counter:
   359                           	opt stack 0
   360  000023                     	ds	2
   361  000025                     _state:
   362                           	opt stack 0
   363  000025                     	ds	2
   364  000027                     lcd@LCDinterruptState:
   365                           	opt stack 0
   366  000027                     	ds	1
   367  000028                     	ds	1
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           
   375                           	psect	dataCOMRAM
   376  000043                     __pdataCOMRAM:
   377                           	opt stack 0
   378  000043                     _max:
   379                           	opt stack 0
   380  000043                     	ds	2
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	cstackCOMRAM
   389  000029                     __pcstackCOMRAM:
   390                           	opt stack 0
   391  000029                     ??_I2C_Master_Wait:
   392  000029                     ?_readADC:
   393                           	opt stack 0
   394  000029                     ?___lwdiv:
   395                           	opt stack 0
   396  000029                     ?___lldiv:
   397                           	opt stack 0
   398  000029                     lcdNibble@temp:
   399                           	opt stack 0
   400  000029                     ___lwdiv@dividend:
   401                           	opt stack 0
   402  000029                     ___lldiv@dividend:
   403                           	opt stack 0
   404                           
   405                           ; 4 bytes @ 0x0
   406  000029                     	ds	1
   407  00002A                     lcdNibble@data:
   408                           	opt stack 0
   409  00002A                     I2C_Master_Write@byteToWrite:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x1
   413  00002A                     	ds	1
   414  00002B                     ??_readADC:
   415  00002B                     lcdInst@data:
   416                           	opt stack 0
   417  00002B                     putch@data:
   418                           	opt stack 0
   419  00002B                     ___lwdiv@divisor:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x2
   423  00002B                     	ds	1
   424  00002C                     ??_initLCD:
   425  00002C                     
   426                           ; 1 bytes @ 0x3
   427  00002C                     	ds	1
   428  00002D                     readADC@channel:
   429                           	opt stack 0
   430  00002D                     ___lwdiv@quotient:
   431                           	opt stack 0
   432  00002D                     ___lldiv@divisor:
   433                           	opt stack 0
   434                           
   435                           ; 4 bytes @ 0x4
   436  00002D                     	ds	2
   437  00002F                     ___lwdiv@counter:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x6
   441  00002F                     	ds	1
   442  000030                     ?___lwmod:
   443                           	opt stack 0
   444  000030                     ___lwmod@dividend:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x7
   448  000030                     	ds	1
   449  000031                     ___lldiv@quotient:
   450                           	opt stack 0
   451                           
   452                           ; 4 bytes @ 0x8
   453  000031                     	ds	1
   454  000032                     ___lwmod@divisor:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x9
   458  000032                     	ds	2
   459  000034                     ___lwmod@counter:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xB
   463  000034                     	ds	1
   464  000035                     ?_printf:
   465                           	opt stack 0
   466  000035                     ___lldiv@counter:
   467                           	opt stack 0
   468  000035                     printf@f:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0xC
   472  000035                     	ds	1
   473  000036                     I2C_Master_Init@clockFreq:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0xD
   477  000036                     	ds	3
   478  000039                     ??_printf:
   479                           
   480                           ; 1 bytes @ 0x10
   481  000039                     	ds	1
   482  00003A                     ??_I2C_Master_Init:
   483  00003A                     printf@ap:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x11
   487  00003A                     	ds	2
   488  00003C                     printf@flag:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x13
   492  00003C                     	ds	1
   493  00003D                     printf@prec:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x14
   497  00003D                     	ds	1
   498  00003E                     i2cArduino@char_to_arduino:
   499                           	opt stack 0
   500  00003E                     printf@val:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x15
   504  00003E                     	ds	2
   505  000040                     printf@c:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x17
   509  000040                     	ds	1
   510  000041                     ??_main:
   511                           
   512                           ; 1 bytes @ 0x18
   513  000041                     	ds	2
   514                           tblptru	equ	0xFF8
   515                           tblptrh	equ	0xFF7
   516                           tblptrl	equ	0xFF6
   517                           tablat	equ	0xFF5
   518                           postinc0	equ	0xFEE
   519                           wreg	equ	0xFE8
   520                           
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 86 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;Total ram usage:        2 bytes
   545 ;; Hardware stack levels required when called:    3
   546 ;; This function calls:
   547 ;;		_i2cArduino
   548 ;;		_initLCD
   549 ;;		_lcdInst
   550 ;;		_motorStart_0
   551 ;;		_motorStart_1
   552 ;;		_motorStart_2
   553 ;;		_motorStart_3
   554 ;;		_motorStop_0
   555 ;;		_motorStop_1
   556 ;;		_motorStop_2
   557 ;;		_motorStop_3
   558 ;;		_printf
   559 ;;		_readADC
   560 ;; This function is called by:
   561 ;;		Startup code after reset
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text0
   566  00106E                     __ptext0:
   567                           	opt stack 0
   568  00106E                     _main:
   569                           	opt stack 28
   570                           
   571                           ;main.c: 89: OSCCON = 0xF2;
   572                           
   573                           ;incstack = 0
   574  00106E  0EF2               	movlw	242
   575  001070  6ED3               	movwf	4051,c	;volatile
   576                           
   577                           ;main.c: 94: LATA = 0x00;
   578  001072  0E00               	movlw	0
   579  001074  6E89               	movwf	3977,c	;volatile
   580                           
   581                           ;main.c: 95: LATB = 0x00;
   582  001076  0E00               	movlw	0
   583  001078  6E8A               	movwf	3978,c	;volatile
   584                           
   585                           ;main.c: 96: LATC = 0x00;
   586  00107A  0E00               	movlw	0
   587  00107C  6E8B               	movwf	3979,c	;volatile
   588                           
   589                           ;main.c: 97: LATD = 0x00;
   590  00107E  0E00               	movlw	0
   591  001080  6E8C               	movwf	3980,c	;volatile
   592                           
   593                           ;main.c: 98: LATE = 0x00;
   594  001082  0E00               	movlw	0
   595  001084  6E8D               	movwf	3981,c	;volatile
   596                           
   597                           ;main.c: 102: TRISA = 0xFF;
   598  001086  6892               	setf	3986,c	;volatile
   599                           
   600                           ;main.c: 103: TRISB = 0xFF;
   601  001088  6893               	setf	3987,c	;volatile
   602                           
   603                           ;main.c: 104: TRISC = 0b10000000;
   604  00108A  0E80               	movlw	128
   605  00108C  6E94               	movwf	3988,c	;volatile
   606                           
   607                           ;main.c: 108: TRISD = 0x00;
   608  00108E  0E00               	movlw	0
   609  001090  6E95               	movwf	3989,c	;volatile
   610                           
   611                           ;main.c: 109: TRISE = 0x00;
   612  001092  0E00               	movlw	0
   613  001094  6E96               	movwf	3990,c	;volatile
   614                           
   615                           ;main.c: 112: ADCON0 = 0x00;
   616  001096  0E00               	movlw	0
   617  001098  6EC2               	movwf	4034,c	;volatile
   618                           
   619                           ;main.c: 113: ADCON1 = 0x0B;
   620  00109A  0E0B               	movlw	11
   621  00109C  6EC1               	movwf	4033,c	;volatile
   622                           
   623                           ;main.c: 114: ADCON2bits.ADFM = 1;
   624  00109E  8EC0               	bsf	4032,7,c	;volatile
   625                           
   626                           ;main.c: 123: initLCD();
   627  0010A0  ECA1  F00C         	call	_initLCD	;wreg free
   628                           
   629                           ;main.c: 125: i2cArduino('2');
   630  0010A4  0E32               	movlw	50
   631  0010A6  ECEF  F00D         	call	_i2cArduino
   632  0010AA                     l143:
   633  0010AA  D7FF               	goto	l143
   634                           
   635                           ;main.c: 148: _delay((unsigned long)((50)*(40000000/4000.0)));
   636                           
   637                           ;main.c: 147: printf("%d",B_counter);
   638                           
   639                           ;main.c: 146: initLCD();
   640                           
   641                           ;main.c: 136: initLCD();
   642                           
   643                           ;main.c: 133: (INTCONbits.GIE = 1);
   644                           
   645                           ;main.c: 128: }
   646                           ;main.c: 132: INT1IE = 1;
   647  0010AC  0E03               	movlw	3
   648  0010AE  6E42               	movwf	(??_main+1)& (0+255),c
   649  0010B0  0E8A               	movlw	138
   650  0010B2  6E41               	movwf	??_main& (0+255),c
   651  0010B4  0E56               	movlw	86
   652  0010B6                     u967:
   653  0010B6  2EE8               	decfsz	wreg,f,c
   654  0010B8  D7FE               	bra	u967
   655  0010BA  2E41               	decfsz	??_main& (0+255),f,c
   656  0010BC  D7FC               	bra	u967
   657  0010BE  2E42               	decfsz	(??_main+1)& (0+255),f,c
   658  0010C0  D7FA               	bra	u967
   659                           
   660                           ;main.c: 149: motorStart_0();
   661  0010C2  ECCA  F00D         	call	_motorStart_0	;wreg free
   662  0010C6                     l1726:
   663                           
   664                           ;main.c: 154: if (B_counter == max){
   665  0010C6  5043               	movf	_max,w,c
   666  0010C8  1823               	xorwf	_B_counter,w,c
   667  0010CA  E107               	bnz	l1730
   668  0010CC  5044               	movf	_max+1,w,c
   669  0010CE  1824               	xorwf	_B_counter+1,w,c
   670  0010D0  A4D8               	btfss	status,2,c
   671  0010D2  D003               	goto	l147
   672                           
   673                           ;main.c: 155: motorStop_0();
   674  0010D4  EC36  F00D         	call	_motorStop_0	;wreg free
   675                           
   676                           ;main.c: 156: break;
   677  0010D8  D02A               	goto	l148
   678  0010DA                     l147:
   679  0010DA                     l1730:
   680                           
   681                           ;main.c: 157: }
   682                           ;main.c: 158: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   683  0010DA  0E80               	movlw	128
   684  0010DC  EC72  F00E         	call	_lcdInst
   685  0010E0  0E41               	movlw	65
   686  0010E2  6E41               	movwf	??_main& (0+255),c
   687  0010E4  0EEE               	movlw	238
   688  0010E6                     u977:
   689  0010E6  2EE8               	decfsz	wreg,f,c
   690  0010E8  D7FE               	bra	u977
   691  0010EA  2E41               	decfsz	??_main& (0+255),f,c
   692  0010EC  D7FC               	bra	u977
   693  0010EE  D000               	nop2	
   694                           
   695                           ;main.c: 161: if (readADC(0)<= 250 ){
   696  0010F0  0E00               	movlw	0
   697  0010F2  EC35  F00E         	call	_readADC
   698  0010F6  502A               	movf	?_readADC+1,w,c
   699  0010F8  E1E6               	bnz	l1726
   700  0010FA  0EFB               	movlw	251
   701  0010FC  5C29               	subwf	?_readADC,w,c
   702  0010FE  B0D8               	btfsc	status,0,c
   703  001100  D7E2               	goto	l146
   704                           
   705                           ;main.c: 163: B_counter ++;
   706  001102  4A23               	infsnz	_B_counter,f,c
   707  001104  2A24               	incf	_B_counter+1,f,c
   708                           
   709                           ;main.c: 164: initLCD();
   710  001106  ECA1  F00C         	call	_initLCD	;wreg free
   711                           
   712                           ;main.c: 165: printf("%d", B_counter);
   713  00110A  0E45               	movlw	low (STR_23+14)
   714  00110C  6E35               	movwf	printf@f,c
   715  00110E  0E10               	movlw	high (STR_23+14)
   716  001110  6E36               	movwf	printf@f+1,c
   717  001112  C023  F037         	movff	_B_counter,?_printf+2
   718  001116  C024  F038         	movff	_B_counter+1,?_printf+3
   719  00111A  EC3B  F00B         	call	_printf	;wreg free
   720                           
   721                           ;main.c: 166: _delay((unsigned long)((10)*(40000000/4000.0)));
   722  00111E  0E82               	movlw	130
   723  001120  6E41               	movwf	??_main& (0+255),c
   724  001122  0EDE               	movlw	222
   725  001124                     u987:
   726  001124  2EE8               	decfsz	wreg,f,c
   727  001126  D7FE               	bra	u987
   728  001128  2E41               	decfsz	??_main& (0+255),f,c
   729  00112A  D7FC               	bra	u987
   730  00112C  D7CC               	goto	l146
   731  00112E                     l148:
   732                           
   733                           ;main.c: 167: }
   734                           ;main.c: 172: }
   735                           ;main.c: 173: initLCD();
   736  00112E  ECA1  F00C         	call	_initLCD	;wreg free
   737                           
   738                           ;main.c: 174: printf("done");
   739  001132  0E67               	movlw	low STR_3
   740  001134  6E35               	movwf	printf@f,c
   741  001136  0E10               	movlw	high STR_3
   742  001138  6E36               	movwf	printf@f+1,c
   743  00113A  EC3B  F00B         	call	_printf	;wreg free
   744                           
   745                           ;main.c: 175: _delay((unsigned long)((1000)*(40000000/4000.0)));
   746  00113E  0E33               	movlw	51
   747  001140  6E42               	movwf	(??_main+1)& (0+255),c
   748  001142  0EBB               	movlw	187
   749  001144  6E41               	movwf	??_main& (0+255),c
   750  001146  0EE0               	movlw	224
   751  001148                     u997:
   752  001148  2EE8               	decfsz	wreg,f,c
   753  00114A  D7FE               	bra	u997
   754  00114C  2E41               	decfsz	??_main& (0+255),f,c
   755  00114E  D7FC               	bra	u997
   756  001150  2E42               	decfsz	(??_main+1)& (0+255),f,c
   757  001152  D7FA               	bra	u997
   758                           
   759                           ;main.c: 185: initLCD();
   760  001154  ECA1  F00C         	call	_initLCD	;wreg free
   761                           
   762                           ;main.c: 186: printf("%d",N_counter);
   763  001158  0E45               	movlw	low (STR_23+14)
   764  00115A  6E35               	movwf	printf@f,c
   765  00115C  0E10               	movlw	high (STR_23+14)
   766  00115E  6E36               	movwf	printf@f+1,c
   767  001160  C021  F037         	movff	_N_counter,?_printf+2
   768  001164  C022  F038         	movff	_N_counter+1,?_printf+3
   769  001168  EC3B  F00B         	call	_printf	;wreg free
   770                           
   771                           ;main.c: 187: _delay((unsigned long)((50)*(40000000/4000.0)));
   772  00116C  0E03               	movlw	3
   773  00116E  6E42               	movwf	(??_main+1)& (0+255),c
   774  001170  0E8A               	movlw	138
   775  001172  6E41               	movwf	??_main& (0+255),c
   776  001174  0E56               	movlw	86
   777  001176                     u1007:
   778  001176  2EE8               	decfsz	wreg,f,c
   779  001178  D7FE               	bra	u1007
   780  00117A  2E41               	decfsz	??_main& (0+255),f,c
   781  00117C  D7FC               	bra	u1007
   782  00117E  2E42               	decfsz	(??_main+1)& (0+255),f,c
   783  001180  D7FA               	bra	u1007
   784                           
   785                           ;main.c: 188: motorStart_1();
   786  001182  ECA5  F00D         	call	_motorStart_1	;wreg free
   787  001186                     l1756:
   788                           
   789                           ;main.c: 192: if (N_counter == max){
   790  001186  5043               	movf	_max,w,c
   791  001188  1821               	xorwf	_N_counter,w,c
   792  00118A  E107               	bnz	l1760
   793  00118C  5044               	movf	_max+1,w,c
   794  00118E  1822               	xorwf	_N_counter+1,w,c
   795  001190  A4D8               	btfss	status,2,c
   796  001192  D003               	goto	l152
   797                           
   798                           ;main.c: 193: motorStop_1();
   799  001194  EC11  F00D         	call	_motorStop_1	;wreg free
   800                           
   801                           ;main.c: 194: break;
   802  001198  D020               	goto	l153
   803  00119A                     l152:
   804  00119A                     l1760:
   805                           
   806                           ;main.c: 195: }
   807                           ;main.c: 196: if (readADC(1)<=250 ){
   808  00119A  0E01               	movlw	1
   809  00119C  EC35  F00E         	call	_readADC
   810  0011A0  502A               	movf	?_readADC+1,w,c
   811  0011A2  E1F1               	bnz	l1756
   812  0011A4  0EFB               	movlw	251
   813  0011A6  5C29               	subwf	?_readADC,w,c
   814  0011A8  B0D8               	btfsc	status,0,c
   815  0011AA  D7ED               	goto	l151
   816                           
   817                           ;main.c: 198: N_counter ++;
   818  0011AC  4A21               	infsnz	_N_counter,f,c
   819  0011AE  2A22               	incf	_N_counter+1,f,c
   820                           
   821                           ;main.c: 199: initLCD();
   822  0011B0  ECA1  F00C         	call	_initLCD	;wreg free
   823                           
   824                           ;main.c: 200: printf("%d", N_counter);
   825  0011B4  0E45               	movlw	low (STR_23+14)
   826  0011B6  6E35               	movwf	printf@f,c
   827  0011B8  0E10               	movlw	high (STR_23+14)
   828  0011BA  6E36               	movwf	printf@f+1,c
   829  0011BC  C021  F037         	movff	_N_counter,?_printf+2
   830  0011C0  C022  F038         	movff	_N_counter+1,?_printf+3
   831  0011C4  EC3B  F00B         	call	_printf	;wreg free
   832                           
   833                           ;main.c: 201: _delay((unsigned long)((3)*(40000000/4000.0)));
   834  0011C8  0E27               	movlw	39
   835  0011CA  6E41               	movwf	??_main& (0+255),c
   836  0011CC  0EF5               	movlw	245
   837  0011CE                     u1017:
   838  0011CE  2EE8               	decfsz	wreg,f,c
   839  0011D0  D7FE               	bra	u1017
   840  0011D2  2E41               	decfsz	??_main& (0+255),f,c
   841  0011D4  D7FC               	bra	u1017
   842  0011D6  F000               	nop	
   843  0011D8  D7D6               	goto	l151
   844  0011DA                     l153:
   845                           
   846                           ;main.c: 202: }
   847                           ;main.c: 204: }
   848                           ;main.c: 206: initLCD();
   849  0011DA  ECA1  F00C         	call	_initLCD	;wreg free
   850                           
   851                           ;main.c: 207: printf("done");
   852  0011DE  0E67               	movlw	low STR_3
   853  0011E0  6E35               	movwf	printf@f,c
   854  0011E2  0E10               	movlw	high STR_3
   855  0011E4  6E36               	movwf	printf@f+1,c
   856  0011E6  EC3B  F00B         	call	_printf	;wreg free
   857                           
   858                           ;main.c: 208: _delay((unsigned long)((1000)*(40000000/4000.0)));
   859  0011EA  0E33               	movlw	51
   860  0011EC  6E42               	movwf	(??_main+1)& (0+255),c
   861  0011EE  0EBB               	movlw	187
   862  0011F0  6E41               	movwf	??_main& (0+255),c
   863  0011F2  0EE0               	movlw	224
   864  0011F4                     u1027:
   865  0011F4  2EE8               	decfsz	wreg,f,c
   866  0011F6  D7FE               	bra	u1027
   867  0011F8  2E41               	decfsz	??_main& (0+255),f,c
   868  0011FA  D7FC               	bra	u1027
   869  0011FC  2E42               	decfsz	(??_main+1)& (0+255),f,c
   870  0011FE  D7FA               	bra	u1027
   871                           
   872                           ;main.c: 225: initLCD();
   873  001200  ECA1  F00C         	call	_initLCD	;wreg free
   874                           
   875                           ;main.c: 226: printf("%d",S_counter);
   876  001204  0E45               	movlw	low (STR_23+14)
   877  001206  6E35               	movwf	printf@f,c
   878  001208  0E10               	movlw	high (STR_23+14)
   879  00120A  6E36               	movwf	printf@f+1,c
   880  00120C  C01F  F037         	movff	_S_counter,?_printf+2
   881  001210  C020  F038         	movff	_S_counter+1,?_printf+3
   882  001214  EC3B  F00B         	call	_printf	;wreg free
   883                           
   884                           ;main.c: 227: _delay((unsigned long)((50)*(40000000/4000.0)));
   885  001218  0E03               	movlw	3
   886  00121A  6E42               	movwf	(??_main+1)& (0+255),c
   887  00121C  0E8A               	movlw	138
   888  00121E  6E41               	movwf	??_main& (0+255),c
   889  001220  0E56               	movlw	86
   890  001222                     u1037:
   891  001222  2EE8               	decfsz	wreg,f,c
   892  001224  D7FE               	bra	u1037
   893  001226  2E41               	decfsz	??_main& (0+255),f,c
   894  001228  D7FC               	bra	u1037
   895  00122A  2E42               	decfsz	(??_main+1)& (0+255),f,c
   896  00122C  D7FA               	bra	u1037
   897                           
   898                           ;main.c: 228: motorStart_2();
   899  00122E  EC80  F00D         	call	_motorStart_2	;wreg free
   900  001232                     l1782:
   901                           
   902                           ;main.c: 232: if (S_counter == max){
   903  001232  5043               	movf	_max,w,c
   904  001234  181F               	xorwf	_S_counter,w,c
   905  001236  E107               	bnz	l1786
   906  001238  5044               	movf	_max+1,w,c
   907  00123A  1820               	xorwf	_S_counter+1,w,c
   908  00123C  A4D8               	btfss	status,2,c
   909  00123E  D003               	goto	l157
   910                           
   911                           ;main.c: 233: motorStop_2();
   912  001240  ECEC  F00C         	call	_motorStop_2	;wreg free
   913                           
   914                           ;main.c: 234: break;
   915  001244  D023               	goto	l158
   916  001246                     l157:
   917  001246                     l1786:
   918                           
   919                           ;main.c: 235: }
   920                           ;main.c: 236: if (readADC(5)<=150 ){
   921  001246  0E05               	movlw	5
   922  001248  EC35  F00E         	call	_readADC
   923  00124C  502A               	movf	?_readADC+1,w,c
   924  00124E  E1F1               	bnz	l1782
   925  001250  0E97               	movlw	151
   926  001252  5C29               	subwf	?_readADC,w,c
   927  001254  B0D8               	btfsc	status,0,c
   928  001256  D7ED               	goto	l156
   929                           
   930                           ;main.c: 238: S_counter ++;
   931  001258  4A1F               	infsnz	_S_counter,f,c
   932  00125A  2A20               	incf	_S_counter+1,f,c
   933                           
   934                           ;main.c: 239: initLCD();
   935  00125C  ECA1  F00C         	call	_initLCD	;wreg free
   936                           
   937                           ;main.c: 240: printf("%d", S_counter);
   938  001260  0E45               	movlw	low (STR_23+14)
   939  001262  6E35               	movwf	printf@f,c
   940  001264  0E10               	movlw	high (STR_23+14)
   941  001266  6E36               	movwf	printf@f+1,c
   942  001268  C01F  F037         	movff	_S_counter,?_printf+2
   943  00126C  C020  F038         	movff	_S_counter+1,?_printf+3
   944  001270  EC3B  F00B         	call	_printf	;wreg free
   945                           
   946                           ;main.c: 241: _delay((unsigned long)((50)*(40000000/4000.0)));
   947  001274  0E03               	movlw	3
   948  001276  6E42               	movwf	(??_main+1)& (0+255),c
   949  001278  0E8A               	movlw	138
   950  00127A  6E41               	movwf	??_main& (0+255),c
   951  00127C  0E56               	movlw	86
   952  00127E                     u1047:
   953  00127E  2EE8               	decfsz	wreg,f,c
   954  001280  D7FE               	bra	u1047
   955  001282  2E41               	decfsz	??_main& (0+255),f,c
   956  001284  D7FC               	bra	u1047
   957  001286  2E42               	decfsz	(??_main+1)& (0+255),f,c
   958  001288  D7FA               	bra	u1047
   959  00128A  D7D3               	goto	l156
   960  00128C                     l158:
   961                           
   962                           ;main.c: 242: }
   963                           ;main.c: 244: }
   964                           ;main.c: 246: initLCD();
   965  00128C  ECA1  F00C         	call	_initLCD	;wreg free
   966                           
   967                           ;main.c: 247: printf("done");
   968  001290  0E67               	movlw	low STR_3
   969  001292  6E35               	movwf	printf@f,c
   970  001294  0E10               	movlw	high STR_3
   971  001296  6E36               	movwf	printf@f+1,c
   972  001298  EC3B  F00B         	call	_printf	;wreg free
   973                           
   974                           ;main.c: 248: _delay((unsigned long)((1000)*(40000000/4000.0)));
   975  00129C  0E33               	movlw	51
   976  00129E  6E42               	movwf	(??_main+1)& (0+255),c
   977  0012A0  0EBB               	movlw	187
   978  0012A2  6E41               	movwf	??_main& (0+255),c
   979  0012A4  0EE0               	movlw	224
   980  0012A6                     u1057:
   981  0012A6  2EE8               	decfsz	wreg,f,c
   982  0012A8  D7FE               	bra	u1057
   983  0012AA  2E41               	decfsz	??_main& (0+255),f,c
   984  0012AC  D7FC               	bra	u1057
   985  0012AE  2E42               	decfsz	(??_main+1)& (0+255),f,c
   986  0012B0  D7FA               	bra	u1057
   987                           
   988                           ;main.c: 263: initLCD();
   989  0012B2  ECA1  F00C         	call	_initLCD	;wreg free
   990                           
   991                           ;main.c: 264: printf("%d",W_counter);
   992  0012B6  0E45               	movlw	low (STR_23+14)
   993  0012B8  6E35               	movwf	printf@f,c
   994  0012BA  0E10               	movlw	high (STR_23+14)
   995  0012BC  6E36               	movwf	printf@f+1,c
   996  0012BE  C01D  F037         	movff	_W_counter,?_printf+2
   997  0012C2  C01E  F038         	movff	_W_counter+1,?_printf+3
   998  0012C6  EC3B  F00B         	call	_printf	;wreg free
   999                           
  1000                           ;main.c: 265: _delay((unsigned long)((50)*(40000000/4000.0)));
  1001  0012CA  0E03               	movlw	3
  1002  0012CC  6E42               	movwf	(??_main+1)& (0+255),c
  1003  0012CE  0E8A               	movlw	138
  1004  0012D0  6E41               	movwf	??_main& (0+255),c
  1005  0012D2  0E56               	movlw	86
  1006  0012D4                     u1067:
  1007  0012D4  2EE8               	decfsz	wreg,f,c
  1008  0012D6  D7FE               	bra	u1067
  1009  0012D8  2E41               	decfsz	??_main& (0+255),f,c
  1010  0012DA  D7FC               	bra	u1067
  1011  0012DC  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1012  0012DE  D7FA               	bra	u1067
  1013                           
  1014                           ;main.c: 266: motorStart_3();
  1015  0012E0  EC5B  F00D         	call	_motorStart_3	;wreg free
  1016  0012E4                     l1808:
  1017                           
  1018                           ;main.c: 270: if (W_counter == max){
  1019  0012E4  5043               	movf	_max,w,c
  1020  0012E6  181D               	xorwf	_W_counter,w,c
  1021  0012E8  E107               	bnz	l1812
  1022  0012EA  5044               	movf	_max+1,w,c
  1023  0012EC  181E               	xorwf	_W_counter+1,w,c
  1024  0012EE  A4D8               	btfss	status,2,c
  1025  0012F0  D003               	goto	l162
  1026                           
  1027                           ;main.c: 271: motorStop_3();
  1028  0012F2  ECC7  F00C         	call	_motorStop_3	;wreg free
  1029                           
  1030                           ;main.c: 272: break;
  1031  0012F6  D023               	goto	l163
  1032  0012F8                     l162:
  1033  0012F8                     l1812:
  1034                           
  1035                           ;main.c: 273: }
  1036                           ;main.c: 274: if (readADC(4)<=250 ){
  1037  0012F8  0E04               	movlw	4
  1038  0012FA  EC35  F00E         	call	_readADC
  1039  0012FE  502A               	movf	?_readADC+1,w,c
  1040  001300  E1F1               	bnz	l1808
  1041  001302  0EFB               	movlw	251
  1042  001304  5C29               	subwf	?_readADC,w,c
  1043  001306  B0D8               	btfsc	status,0,c
  1044  001308  D7ED               	goto	l161
  1045                           
  1046                           ;main.c: 276: W_counter ++;
  1047  00130A  4A1D               	infsnz	_W_counter,f,c
  1048  00130C  2A1E               	incf	_W_counter+1,f,c
  1049                           
  1050                           ;main.c: 277: initLCD();
  1051  00130E  ECA1  F00C         	call	_initLCD	;wreg free
  1052                           
  1053                           ;main.c: 278: printf("%d", W_counter);
  1054  001312  0E45               	movlw	low (STR_23+14)
  1055  001314  6E35               	movwf	printf@f,c
  1056  001316  0E10               	movlw	high (STR_23+14)
  1057  001318  6E36               	movwf	printf@f+1,c
  1058  00131A  C01D  F037         	movff	_W_counter,?_printf+2
  1059  00131E  C01E  F038         	movff	_W_counter+1,?_printf+3
  1060  001322  EC3B  F00B         	call	_printf	;wreg free
  1061                           
  1062                           ;main.c: 279: _delay((unsigned long)((50)*(40000000/4000.0)));
  1063  001326  0E03               	movlw	3
  1064  001328  6E42               	movwf	(??_main+1)& (0+255),c
  1065  00132A  0E8A               	movlw	138
  1066  00132C  6E41               	movwf	??_main& (0+255),c
  1067  00132E  0E56               	movlw	86
  1068  001330                     u1077:
  1069  001330  2EE8               	decfsz	wreg,f,c
  1070  001332  D7FE               	bra	u1077
  1071  001334  2E41               	decfsz	??_main& (0+255),f,c
  1072  001336  D7FC               	bra	u1077
  1073  001338  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1074  00133A  D7FA               	bra	u1077
  1075  00133C  D7D3               	goto	l161
  1076  00133E                     l163:
  1077                           
  1078                           ;main.c: 280: }
  1079                           ;main.c: 282: }
  1080                           ;main.c: 284: initLCD();
  1081  00133E  ECA1  F00C         	call	_initLCD	;wreg free
  1082                           
  1083                           ;main.c: 285: printf("done");
  1084  001342  0E67               	movlw	low STR_3
  1085  001344  6E35               	movwf	printf@f,c
  1086  001346  0E10               	movlw	high STR_3
  1087  001348  6E36               	movwf	printf@f+1,c
  1088  00134A  EC3B  F00B         	call	_printf	;wreg free
  1089                           
  1090                           ;main.c: 286: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1091  00134E  0E33               	movlw	51
  1092  001350  6E42               	movwf	(??_main+1)& (0+255),c
  1093  001352  0EBB               	movlw	187
  1094  001354  6E41               	movwf	??_main& (0+255),c
  1095  001356  0EE0               	movlw	224
  1096  001358                     u1087:
  1097  001358  2EE8               	decfsz	wreg,f,c
  1098  00135A  D7FE               	bra	u1087
  1099  00135C  2E41               	decfsz	??_main& (0+255),f,c
  1100  00135E  D7FC               	bra	u1087
  1101  001360  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1102  001362  D7FA               	bra	u1087
  1103                           
  1104                           ;main.c: 292: i2cArduino('2');
  1105  001364  0E32               	movlw	50
  1106  001366  ECEF  F00D         	call	_i2cArduino
  1107                           
  1108                           ;main.c: 297: initLCD();
  1109  00136A  ECA1  F00C         	call	_initLCD	;wreg free
  1110                           
  1111                           ;main.c: 298: printf("Bolts:%d",B_counter);
  1112  00136E  0E4F               	movlw	low (STR_21+7)
  1113  001370  6E35               	movwf	printf@f,c
  1114  001372  0E10               	movlw	high (STR_21+7)
  1115  001374  6E36               	movwf	printf@f+1,c
  1116  001376  C023  F037         	movff	_B_counter,?_printf+2
  1117  00137A  C024  F038         	movff	_B_counter+1,?_printf+3
  1118  00137E  EC3B  F00B         	call	_printf	;wreg free
  1119                           
  1120                           ;main.c: 299: _delay((unsigned long)((100)*(40000000/4000.0)));
  1121  001382  0E06               	movlw	6
  1122  001384  6E42               	movwf	(??_main+1)& (0+255),c
  1123  001386  0E13               	movlw	19
  1124  001388  6E41               	movwf	??_main& (0+255),c
  1125  00138A  0EAE               	movlw	174
  1126  00138C                     u1097:
  1127  00138C  2EE8               	decfsz	wreg,f,c
  1128  00138E  D7FE               	bra	u1097
  1129  001390  2E41               	decfsz	??_main& (0+255),f,c
  1130  001392  D7FC               	bra	u1097
  1131  001394  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1132  001396  D7FA               	bra	u1097
  1133                           
  1134                           ;main.c: 301: initLCD();
  1135  001398  ECA1  F00C         	call	_initLCD	;wreg free
  1136                           
  1137                           ;main.c: 302: printf("Nuts:%d",N_counter);
  1138  00139C  0E5F               	movlw	low (STR_22+7)
  1139  00139E  6E35               	movwf	printf@f,c
  1140  0013A0  0E10               	movlw	high (STR_22+7)
  1141  0013A2  6E36               	movwf	printf@f+1,c
  1142  0013A4  C021  F037         	movff	_N_counter,?_printf+2
  1143  0013A8  C022  F038         	movff	_N_counter+1,?_printf+3
  1144  0013AC  EC3B  F00B         	call	_printf	;wreg free
  1145                           
  1146                           ;main.c: 303: _delay((unsigned long)((100)*(40000000/4000.0)));
  1147  0013B0  0E06               	movlw	6
  1148  0013B2  6E42               	movwf	(??_main+1)& (0+255),c
  1149  0013B4  0E13               	movlw	19
  1150  0013B6  6E41               	movwf	??_main& (0+255),c
  1151  0013B8  0EAE               	movlw	174
  1152  0013BA                     u1107:
  1153  0013BA  2EE8               	decfsz	wreg,f,c
  1154  0013BC  D7FE               	bra	u1107
  1155  0013BE  2E41               	decfsz	??_main& (0+255),f,c
  1156  0013C0  D7FC               	bra	u1107
  1157  0013C2  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1158  0013C4  D7FA               	bra	u1107
  1159                           
  1160                           ;main.c: 305: initLCD();
  1161  0013C6  ECA1  F00C         	call	_initLCD	;wreg free
  1162                           
  1163                           ;main.c: 306: printf("Spacer:%d",S_counter);
  1164  0013CA  0E3E               	movlw	low (STR_23+7)
  1165  0013CC  6E35               	movwf	printf@f,c
  1166  0013CE  0E10               	movlw	high (STR_23+7)
  1167  0013D0  6E36               	movwf	printf@f+1,c
  1168  0013D2  C01F  F037         	movff	_S_counter,?_printf+2
  1169  0013D6  C020  F038         	movff	_S_counter+1,?_printf+3
  1170  0013DA  EC3B  F00B         	call	_printf	;wreg free
  1171                           
  1172                           ;main.c: 307: _delay((unsigned long)((100)*(40000000/4000.0)));
  1173  0013DE  0E06               	movlw	6
  1174  0013E0  6E42               	movwf	(??_main+1)& (0+255),c
  1175  0013E2  0E13               	movlw	19
  1176  0013E4  6E41               	movwf	??_main& (0+255),c
  1177  0013E6  0EAE               	movlw	174
  1178  0013E8                     u1117:
  1179  0013E8  2EE8               	decfsz	wreg,f,c
  1180  0013EA  D7FE               	bra	u1117
  1181  0013EC  2E41               	decfsz	??_main& (0+255),f,c
  1182  0013EE  D7FC               	bra	u1117
  1183  0013F0  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1184  0013F2  D7FA               	bra	u1117
  1185                           
  1186                           ;main.c: 309: initLCD();
  1187  0013F4  ECA1  F00C         	call	_initLCD	;wreg free
  1188                           
  1189                           ;main.c: 310: printf("Washers:%d",W_counter);
  1190  0013F8  0E2C               	movlw	low (STR_24+7)
  1191  0013FA  6E35               	movwf	printf@f,c
  1192  0013FC  0E10               	movlw	high (STR_24+7)
  1193  0013FE  6E36               	movwf	printf@f+1,c
  1194  001400  C01D  F037         	movff	_W_counter,?_printf+2
  1195  001404  C01E  F038         	movff	_W_counter+1,?_printf+3
  1196  001408  EC3B  F00B         	call	_printf	;wreg free
  1197                           
  1198                           ;main.c: 311: _delay((unsigned long)((100)*(40000000/4000.0)));
  1199  00140C  0E06               	movlw	6
  1200  00140E  6E42               	movwf	(??_main+1)& (0+255),c
  1201  001410  0E13               	movlw	19
  1202  001412  6E41               	movwf	??_main& (0+255),c
  1203  001414  0EAE               	movlw	174
  1204  001416                     u1127:
  1205  001416  2EE8               	decfsz	wreg,f,c
  1206  001418  D7FE               	bra	u1127
  1207  00141A  2E41               	decfsz	??_main& (0+255),f,c
  1208  00141C  D7FC               	bra	u1127
  1209  00141E  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1210  001420  D7FA               	bra	u1127
  1211                           
  1212                           ;main.c: 315: motorStart_0();
  1213  001422  ECCA  F00D         	call	_motorStart_0	;wreg free
  1214                           
  1215                           ;main.c: 316: motorStart_1();
  1216  001426  ECA5  F00D         	call	_motorStart_1	;wreg free
  1217                           
  1218                           ;main.c: 317: motorStart_2();
  1219  00142A  EC80  F00D         	call	_motorStart_2	;wreg free
  1220                           
  1221                           ;main.c: 318: motorStart_3();
  1222  00142E  EC5B  F00D         	call	_motorStart_3	;wreg free
  1223  001432                     
  1224                           ;main.c: 321: if (B_done == 1 && S_done == 1 && N_done == 1 && W_done ==1){
  1225  001432  040B               	decf	_B_done,w,c
  1226  001434  100C               	iorwf	_B_done+1,w,c
  1227  001436  A4D8               	btfss	status,2,c
  1228  001438  D00C               	goto	l167
  1229  00143A  0407               	decf	_S_done,w,c
  1230  00143C  1008               	iorwf	_S_done+1,w,c
  1231  00143E  A4D8               	btfss	status,2,c
  1232  001440  D008               	goto	l167
  1233  001442  0409               	decf	_N_done,w,c
  1234  001444  100A               	iorwf	_N_done+1,w,c
  1235  001446  A4D8               	btfss	status,2,c
  1236  001448  D004               	goto	l167
  1237  00144A  0405               	decf	_W_done,w,c
  1238  00144C  1006               	iorwf	_W_done+1,w,c
  1239  00144E  B4D8               	btfsc	status,2,c
  1240  001450  D0B5               	goto	l168
  1241  001452                     l167:
  1242                           
  1243                           ;main.c: 323: }
  1244                           ;main.c: 324: if (B_spacingTime>= 15000){
  1245  001452  BE14               	btfsc	_B_spacingTime+1,7,c
  1246  001454  D00C               	goto	l169
  1247  001456  0E98               	movlw	152
  1248  001458  5C13               	subwf	_B_spacingTime,w,c
  1249  00145A  0E3A               	movlw	58
  1250  00145C  5814               	subwfb	_B_spacingTime+1,w,c
  1251  00145E  A0D8               	btfss	status,0,c
  1252  001460  D006               	goto	l169
  1253                           
  1254                           ;main.c: 325: motorStop_0();
  1255  001462  EC36  F00D         	call	_motorStop_0	;wreg free
  1256                           
  1257                           ;main.c: 326: B_done = 1;
  1258  001466  0E00               	movlw	0
  1259  001468  6E0C               	movwf	_B_done+1,c
  1260  00146A  0E01               	movlw	1
  1261  00146C  6E0B               	movwf	_B_done,c
  1262  00146E                     l169:
  1263                           
  1264                           ;main.c: 327: }
  1265                           ;main.c: 329: if (N_spacingTime>= 15000){
  1266  00146E  BE12               	btfsc	_N_spacingTime+1,7,c
  1267  001470  D00C               	goto	l170
  1268  001472  0E98               	movlw	152
  1269  001474  5C11               	subwf	_N_spacingTime,w,c
  1270  001476  0E3A               	movlw	58
  1271  001478  5812               	subwfb	_N_spacingTime+1,w,c
  1272  00147A  A0D8               	btfss	status,0,c
  1273  00147C  D006               	goto	l170
  1274                           
  1275                           ;main.c: 330: motorStop_1();
  1276  00147E  EC11  F00D         	call	_motorStop_1	;wreg free
  1277                           
  1278                           ;main.c: 331: N_done = 1;
  1279  001482  0E00               	movlw	0
  1280  001484  6E0A               	movwf	_N_done+1,c
  1281  001486  0E01               	movlw	1
  1282  001488  6E09               	movwf	_N_done,c
  1283  00148A                     l170:
  1284                           
  1285                           ;main.c: 332: }
  1286                           ;main.c: 334: if (S_spacingTime>= 15000){
  1287  00148A  BE10               	btfsc	_S_spacingTime+1,7,c
  1288  00148C  D00C               	goto	l171
  1289  00148E  0E98               	movlw	152
  1290  001490  5C0F               	subwf	_S_spacingTime,w,c
  1291  001492  0E3A               	movlw	58
  1292  001494  5810               	subwfb	_S_spacingTime+1,w,c
  1293  001496  A0D8               	btfss	status,0,c
  1294  001498  D006               	goto	l171
  1295                           
  1296                           ;main.c: 335: motorStop_2();
  1297  00149A  ECEC  F00C         	call	_motorStop_2	;wreg free
  1298                           
  1299                           ;main.c: 336: S_done = 1;
  1300  00149E  0E00               	movlw	0
  1301  0014A0  6E08               	movwf	_S_done+1,c
  1302  0014A2  0E01               	movlw	1
  1303  0014A4  6E07               	movwf	_S_done,c
  1304  0014A6                     l171:
  1305                           
  1306                           ;main.c: 337: }
  1307                           ;main.c: 339: if (W_spacingTime>= 15000){
  1308  0014A6  BE0E               	btfsc	_W_spacingTime+1,7,c
  1309  0014A8  D00C               	goto	l172
  1310  0014AA  0E98               	movlw	152
  1311  0014AC  5C0D               	subwf	_W_spacingTime,w,c
  1312  0014AE  0E3A               	movlw	58
  1313  0014B0  580E               	subwfb	_W_spacingTime+1,w,c
  1314  0014B2  A0D8               	btfss	status,0,c
  1315  0014B4  D006               	goto	l172
  1316                           
  1317                           ;main.c: 340: motorStop_3();
  1318  0014B6  ECC7  F00C         	call	_motorStop_3	;wreg free
  1319                           
  1320                           ;main.c: 341: W_done = 1;
  1321  0014BA  0E00               	movlw	0
  1322  0014BC  6E06               	movwf	_W_done+1,c
  1323  0014BE  0E01               	movlw	1
  1324  0014C0  6E05               	movwf	_W_done,c
  1325  0014C2                     l172:
  1326                           
  1327                           ;main.c: 342: }
  1328                           ;main.c: 344: if (readADC(0)<=250 ){
  1329  0014C2  0E00               	movlw	0
  1330  0014C4  EC35  F00E         	call	_readADC
  1331  0014C8  502A               	movf	?_readADC+1,w,c
  1332  0014CA  E116               	bnz	l1902
  1333  0014CC  0EFB               	movlw	251
  1334  0014CE  5C29               	subwf	?_readADC,w,c
  1335  0014D0  B0D8               	btfsc	status,0,c
  1336  0014D2  D012               	goto	l173
  1337                           
  1338                           ;main.c: 346: B_spacingTime=0;
  1339  0014D4  0E00               	movlw	0
  1340  0014D6  6E14               	movwf	_B_spacingTime+1,c
  1341  0014D8  0E00               	movlw	0
  1342  0014DA  6E13               	movwf	_B_spacingTime,c
  1343                           
  1344                           ;main.c: 347: B_remain ++;
  1345  0014DC  4A1B               	infsnz	_B_remain,f,c
  1346  0014DE  2A1C               	incf	_B_remain+1,f,c
  1347                           
  1348                           ;main.c: 348: initLCD();
  1349  0014E0  ECA1  F00C         	call	_initLCD	;wreg free
  1350                           
  1351                           ;main.c: 349: printf("%d", B_remain);
  1352  0014E4  0E45               	movlw	low (STR_23+14)
  1353  0014E6  6E35               	movwf	printf@f,c
  1354  0014E8  0E10               	movlw	high (STR_23+14)
  1355  0014EA  6E36               	movwf	printf@f+1,c
  1356  0014EC  C01B  F037         	movff	_B_remain,?_printf+2
  1357  0014F0  C01C  F038         	movff	_B_remain+1,?_printf+3
  1358  0014F4  EC3B  F00B         	call	_printf	;wreg free
  1359  0014F8                     l173:
  1360  0014F8                     l1902:
  1361                           
  1362                           ;main.c: 351: }
  1363                           ;main.c: 352: if (readADC(1)<=250 ){
  1364  0014F8  0E01               	movlw	1
  1365  0014FA  EC35  F00E         	call	_readADC
  1366  0014FE  502A               	movf	?_readADC+1,w,c
  1367  001500  E116               	bnz	l1912
  1368  001502  0EFB               	movlw	251
  1369  001504  5C29               	subwf	?_readADC,w,c
  1370  001506  B0D8               	btfsc	status,0,c
  1371  001508  D012               	goto	l174
  1372                           
  1373                           ;main.c: 354: N_spacingTime=0;
  1374  00150A  0E00               	movlw	0
  1375  00150C  6E12               	movwf	_N_spacingTime+1,c
  1376  00150E  0E00               	movlw	0
  1377  001510  6E11               	movwf	_N_spacingTime,c
  1378                           
  1379                           ;main.c: 355: N_remain ++;
  1380  001512  4A19               	infsnz	_N_remain,f,c
  1381  001514  2A1A               	incf	_N_remain+1,f,c
  1382                           
  1383                           ;main.c: 356: initLCD();
  1384  001516  ECA1  F00C         	call	_initLCD	;wreg free
  1385                           
  1386                           ;main.c: 357: printf("%d", B_remain);
  1387  00151A  0E45               	movlw	low (STR_23+14)
  1388  00151C  6E35               	movwf	printf@f,c
  1389  00151E  0E10               	movlw	high (STR_23+14)
  1390  001520  6E36               	movwf	printf@f+1,c
  1391  001522  C01B  F037         	movff	_B_remain,?_printf+2
  1392  001526  C01C  F038         	movff	_B_remain+1,?_printf+3
  1393  00152A  EC3B  F00B         	call	_printf	;wreg free
  1394  00152E                     l174:
  1395  00152E                     l1912:
  1396                           
  1397                           ;main.c: 359: }
  1398                           ;main.c: 360: if (readADC(5)<=250 ){
  1399  00152E  0E05               	movlw	5
  1400  001530  EC35  F00E         	call	_readADC
  1401  001534  502A               	movf	?_readADC+1,w,c
  1402  001536  E116               	bnz	l1922
  1403  001538  0EFB               	movlw	251
  1404  00153A  5C29               	subwf	?_readADC,w,c
  1405  00153C  B0D8               	btfsc	status,0,c
  1406  00153E  D012               	goto	l175
  1407                           
  1408                           ;main.c: 362: S_spacingTime=0;
  1409  001540  0E00               	movlw	0
  1410  001542  6E10               	movwf	_S_spacingTime+1,c
  1411  001544  0E00               	movlw	0
  1412  001546  6E0F               	movwf	_S_spacingTime,c
  1413                           
  1414                           ;main.c: 363: S_remain ++;
  1415  001548  4A17               	infsnz	_S_remain,f,c
  1416  00154A  2A18               	incf	_S_remain+1,f,c
  1417                           
  1418                           ;main.c: 364: initLCD();
  1419  00154C  ECA1  F00C         	call	_initLCD	;wreg free
  1420                           
  1421                           ;main.c: 365: printf("%d", B_remain);
  1422  001550  0E45               	movlw	low (STR_23+14)
  1423  001552  6E35               	movwf	printf@f,c
  1424  001554  0E10               	movlw	high (STR_23+14)
  1425  001556  6E36               	movwf	printf@f+1,c
  1426  001558  C01B  F037         	movff	_B_remain,?_printf+2
  1427  00155C  C01C  F038         	movff	_B_remain+1,?_printf+3
  1428  001560  EC3B  F00B         	call	_printf	;wreg free
  1429  001564                     l175:
  1430  001564                     l1922:
  1431                           
  1432                           ;main.c: 367: }
  1433                           ;main.c: 368: if (readADC(4)<=250 ){
  1434  001564  0E04               	movlw	4
  1435  001566  EC35  F00E         	call	_readADC
  1436  00156A  502A               	movf	?_readADC+1,w,c
  1437  00156C  E116               	bnz	l1932
  1438  00156E  0EFB               	movlw	251
  1439  001570  5C29               	subwf	?_readADC,w,c
  1440  001572  B0D8               	btfsc	status,0,c
  1441  001574  D012               	goto	l176
  1442                           
  1443                           ;main.c: 370: W_spacingTime=0;
  1444  001576  0E00               	movlw	0
  1445  001578  6E0E               	movwf	_W_spacingTime+1,c
  1446  00157A  0E00               	movlw	0
  1447  00157C  6E0D               	movwf	_W_spacingTime,c
  1448                           
  1449                           ;main.c: 371: W_remain ++;
  1450  00157E  4A15               	infsnz	_W_remain,f,c
  1451  001580  2A16               	incf	_W_remain+1,f,c
  1452                           
  1453                           ;main.c: 372: initLCD();
  1454  001582  ECA1  F00C         	call	_initLCD	;wreg free
  1455                           
  1456                           ;main.c: 373: printf("%d", B_remain);
  1457  001586  0E45               	movlw	low (STR_23+14)
  1458  001588  6E35               	movwf	printf@f,c
  1459  00158A  0E10               	movlw	high (STR_23+14)
  1460  00158C  6E36               	movwf	printf@f+1,c
  1461  00158E  C01B  F037         	movff	_B_remain,?_printf+2
  1462  001592  C01C  F038         	movff	_B_remain+1,?_printf+3
  1463  001596  EC3B  F00B         	call	_printf	;wreg free
  1464  00159A                     l176:
  1465  00159A                     l1932:
  1466                           
  1467                           ;main.c: 375: }
  1468                           ;main.c: 377: B_spacingTime+=200;
  1469  00159A  0EC8               	movlw	200
  1470  00159C  2613               	addwf	_B_spacingTime,f,c
  1471  00159E  0E00               	movlw	0
  1472  0015A0  2214               	addwfc	_B_spacingTime+1,f,c
  1473                           
  1474                           ;main.c: 378: N_spacingTime+=200;
  1475  0015A2  0EC8               	movlw	200
  1476  0015A4  2611               	addwf	_N_spacingTime,f,c
  1477  0015A6  0E00               	movlw	0
  1478  0015A8  2212               	addwfc	_N_spacingTime+1,f,c
  1479                           
  1480                           ;main.c: 379: S_spacingTime+=200;
  1481  0015AA  0EC8               	movlw	200
  1482  0015AC  260F               	addwf	_S_spacingTime,f,c
  1483  0015AE  0E00               	movlw	0
  1484  0015B0  2210               	addwfc	_S_spacingTime+1,f,c
  1485                           
  1486                           ;main.c: 380: W_spacingTime+=200;
  1487  0015B2  0EC8               	movlw	200
  1488  0015B4  260D               	addwf	_W_spacingTime,f,c
  1489  0015B6  0E00               	movlw	0
  1490  0015B8  220E               	addwfc	_W_spacingTime+1,f,c
  1491  0015BA  D73B               	goto	l166
  1492  0015BC                     l168:
  1493                           
  1494                           ;main.c: 385: initLCD();
  1495                           
  1496                           ;main.c: 382: }
  1497                           ;main.c: 384: while(1){
  1498  0015BC  ECA1  F00C         	call	_initLCD	;wreg free
  1499                           
  1500                           ;main.c: 386: printf("remain Bolts:%d",B_remain);
  1501  0015C0  0E48               	movlw	low STR_21
  1502  0015C2  6E35               	movwf	printf@f,c
  1503  0015C4  0E10               	movlw	high STR_21
  1504  0015C6  6E36               	movwf	printf@f+1,c
  1505  0015C8  C01B  F037         	movff	_B_remain,?_printf+2
  1506  0015CC  C01C  F038         	movff	_B_remain+1,?_printf+3
  1507  0015D0  EC3B  F00B         	call	_printf	;wreg free
  1508                           
  1509                           ;main.c: 387: _delay((unsigned long)((100)*(40000000/4000.0)));
  1510  0015D4  0E06               	movlw	6
  1511  0015D6  6E42               	movwf	(??_main+1)& (0+255),c
  1512  0015D8  0E13               	movlw	19
  1513  0015DA  6E41               	movwf	??_main& (0+255),c
  1514  0015DC  0EAE               	movlw	174
  1515  0015DE                     u1137:
  1516  0015DE  2EE8               	decfsz	wreg,f,c
  1517  0015E0  D7FE               	bra	u1137
  1518  0015E2  2E41               	decfsz	??_main& (0+255),f,c
  1519  0015E4  D7FC               	bra	u1137
  1520  0015E6  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1521  0015E8  D7FA               	bra	u1137
  1522                           
  1523                           ;main.c: 389: initLCD();
  1524  0015EA  ECA1  F00C         	call	_initLCD	;wreg free
  1525                           
  1526                           ;main.c: 390: printf("remain Nuts:%d",N_remain);
  1527  0015EE  0E58               	movlw	low STR_22
  1528  0015F0  6E35               	movwf	printf@f,c
  1529  0015F2  0E10               	movlw	high STR_22
  1530  0015F4  6E36               	movwf	printf@f+1,c
  1531  0015F6  C019  F037         	movff	_N_remain,?_printf+2
  1532  0015FA  C01A  F038         	movff	_N_remain+1,?_printf+3
  1533  0015FE  EC3B  F00B         	call	_printf	;wreg free
  1534                           
  1535                           ;main.c: 391: _delay((unsigned long)((100)*(40000000/4000.0)));
  1536  001602  0E06               	movlw	6
  1537  001604  6E42               	movwf	(??_main+1)& (0+255),c
  1538  001606  0E13               	movlw	19
  1539  001608  6E41               	movwf	??_main& (0+255),c
  1540  00160A  0EAE               	movlw	174
  1541  00160C                     u1147:
  1542  00160C  2EE8               	decfsz	wreg,f,c
  1543  00160E  D7FE               	bra	u1147
  1544  001610  2E41               	decfsz	??_main& (0+255),f,c
  1545  001612  D7FC               	bra	u1147
  1546  001614  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1547  001616  D7FA               	bra	u1147
  1548                           
  1549                           ;main.c: 393: initLCD();
  1550  001618  ECA1  F00C         	call	_initLCD	;wreg free
  1551                           
  1552                           ;main.c: 394: printf("remain Spacer:%d",S_remain);
  1553  00161C  0E37               	movlw	low STR_23
  1554  00161E  6E35               	movwf	printf@f,c
  1555  001620  0E10               	movlw	high STR_23
  1556  001622  6E36               	movwf	printf@f+1,c
  1557  001624  C017  F037         	movff	_S_remain,?_printf+2
  1558  001628  C018  F038         	movff	_S_remain+1,?_printf+3
  1559  00162C  EC3B  F00B         	call	_printf	;wreg free
  1560                           
  1561                           ;main.c: 395: _delay((unsigned long)((100)*(40000000/4000.0)));
  1562  001630  0E06               	movlw	6
  1563  001632  6E42               	movwf	(??_main+1)& (0+255),c
  1564  001634  0E13               	movlw	19
  1565  001636  6E41               	movwf	??_main& (0+255),c
  1566  001638  0EAE               	movlw	174
  1567  00163A                     u1157:
  1568  00163A  2EE8               	decfsz	wreg,f,c
  1569  00163C  D7FE               	bra	u1157
  1570  00163E  2E41               	decfsz	??_main& (0+255),f,c
  1571  001640  D7FC               	bra	u1157
  1572  001642  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1573  001644  D7FA               	bra	u1157
  1574                           
  1575                           ;main.c: 397: initLCD();
  1576  001646  ECA1  F00C         	call	_initLCD	;wreg free
  1577                           
  1578                           ;main.c: 398: printf("remain Washers:%d",W_remain);
  1579  00164A  0E25               	movlw	low STR_24
  1580  00164C  6E35               	movwf	printf@f,c
  1581  00164E  0E10               	movlw	high STR_24
  1582  001650  6E36               	movwf	printf@f+1,c
  1583  001652  C015  F037         	movff	_W_remain,?_printf+2
  1584  001656  C016  F038         	movff	_W_remain+1,?_printf+3
  1585  00165A  EC3B  F00B         	call	_printf	;wreg free
  1586                           
  1587                           ;main.c: 399: _delay((unsigned long)((100)*(40000000/4000.0)));
  1588  00165E  0E06               	movlw	6
  1589  001660  6E42               	movwf	(??_main+1)& (0+255),c
  1590  001662  0E13               	movlw	19
  1591  001664  6E41               	movwf	??_main& (0+255),c
  1592  001666  0EAE               	movlw	174
  1593  001668                     u1167:
  1594  001668  2EE8               	decfsz	wreg,f,c
  1595  00166A  D7FE               	bra	u1167
  1596  00166C  2E41               	decfsz	??_main& (0+255),f,c
  1597  00166E  D7FC               	bra	u1167
  1598  001670  2E42               	decfsz	(??_main+1)& (0+255),f,c
  1599  001672  D7FA               	bra	u1167
  1600  001674  D7A3               	goto	l168
  1601  001676                     __end_of_main:
  1602                           	opt stack 0
  1603                           tblptru	equ	0xFF8
  1604                           tblptrh	equ	0xFF7
  1605                           tblptrl	equ	0xFF6
  1606                           tablat	equ	0xFF5
  1607                           postinc0	equ	0xFEE
  1608                           wreg	equ	0xFE8
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _readADC *****************
  1612 ;; Defined at:
  1613 ;;		line 412 in file "main.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  channel         1    wreg     unsigned char 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  channel         1    4[COMRAM] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  2    0[COMRAM] unsigned short 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;Total ram usage:        5 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; This function calls:
  1634 ;;		Nothing
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           	psect	text1
  1641  001C6A                     __ptext1:
  1642                           	opt stack 0
  1643  001C6A                     _readADC:
  1644                           	opt stack 30
  1645                           
  1646                           ;incstack = 0
  1647                           ;readADC@channel stored from wreg
  1648  001C6A  6E2D               	movwf	readADC@channel,c
  1649                           
  1650                           ;main.c: 421: ADCON0 = (channel & 0x0F) << 2;
  1651  001C6C  C02D  F02B         	movff	readADC@channel,??_readADC
  1652  001C70  0E0F               	movlw	15
  1653  001C72  162B               	andwf	??_readADC,f,c
  1654  001C74  90D8               	bcf	status,0,c
  1655  001C76  362B               	rlcf	??_readADC,f,c
  1656  001C78  90D8               	bcf	status,0,c
  1657  001C7A  342B               	rlcf	??_readADC,w,c
  1658  001C7C  6EC2               	movwf	4034,c	;volatile
  1659                           
  1660                           ;main.c: 422: ADON = 1;
  1661  001C7E  80C2               	bsf	4034,0,c	;volatile
  1662                           
  1663                           ;main.c: 423: ADCON0bits.GO = 1;
  1664  001C80  82C2               	bsf	4034,1,c	;volatile
  1665  001C82  B2C2               	btfsc	4034,1,c	;volatile
  1666  001C84  D7FE               	goto	l185
  1667                           
  1668                           ;main.c: 425: analog_result = ADRESL + (ADRESH*256);
  1669  001C86  50C4               	movf	4036,w,c	;volatile
  1670  001C88  6E2C               	movwf	(??_readADC+1)& (0+255),c
  1671  001C8A  6A2B               	clrf	??_readADC& (0+255),c
  1672  001C8C  50C3               	movf	4035,w,c	;volatile
  1673  001C8E  242B               	addwf	??_readADC,w,c
  1674  001C90  6E03               	movwf	_analog_result,c
  1675  001C92  0E00               	movlw	0
  1676  001C94  202C               	addwfc	??_readADC+1,w,c
  1677  001C96  6E04               	movwf	_analog_result+1,c
  1678                           
  1679                           ;main.c: 426: return analog_result;
  1680  001C98  C003  F029         	movff	_analog_result,?_readADC
  1681  001C9C  C004  F02A         	movff	_analog_result+1,?_readADC+1
  1682  001CA0  0012               	return	
  1683  001CA2                     __end_of_readADC:
  1684                           	opt stack 0
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           status	equ	0xFD8
  1692                           
  1693 ;; *************** function _printf *****************
  1694 ;; Defined at:
  1695 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1698 ;;		 -> STR_24(18), STR_23(17), STR_22(15), STR_21(16), 
  1699 ;;		 -> STR_20(3), STR_19(3), STR_18(3), STR_17(3), 
  1700 ;;		 -> STR_16(11), STR_15(10), STR_14(8), STR_13(9), 
  1701 ;;		 -> STR_12(5), STR_11(3), STR_10(3), STR_9(5), 
  1702 ;;		 -> STR_8(3), STR_7(3), STR_6(5), STR_5(3), 
  1703 ;;		 -> STR_4(3), STR_3(5), STR_2(3), STR_1(3), 
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  tmpval          4    0        struct .
  1706 ;;  cp              3    0        PTR const unsigned char 
  1707 ;;  val             2   21[COMRAM] unsigned int 
  1708 ;;  ap              2   17[COMRAM] PTR void [1]
  1709 ;;		 -> ?_printf(2), 
  1710 ;;  len             2    0        unsigned int 
  1711 ;;  c               1   23[COMRAM] char 
  1712 ;;  prec            1   20[COMRAM] char 
  1713 ;;  flag            1   19[COMRAM] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  2   12[COMRAM] int 
  1716 ;; Registers used:
  1717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1723 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;Total ram usage:       12 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    2
  1730 ;; This function calls:
  1731 ;;		___lwdiv
  1732 ;;		___lwmod
  1733 ;;		_putch
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text2
  1740  001676                     __ptext2:
  1741                           	opt stack 0
  1742  001676                     _printf:
  1743                           	opt stack 28
  1744                           
  1745                           ;doprnt.c: 466: va_list ap;
  1746                           ;doprnt.c: 499: signed char c;
  1747                           ;doprnt.c: 506: signed char prec;
  1748                           ;doprnt.c: 508: unsigned char flag;
  1749                           ;doprnt.c: 523: union {
  1750                           ;doprnt.c: 524: unsigned long vd;
  1751                           ;doprnt.c: 525: double integ;
  1752                           ;doprnt.c: 526: } tmpval;
  1753                           ;doprnt.c: 528: unsigned int val;
  1754                           ;doprnt.c: 529: unsigned len;
  1755                           ;doprnt.c: 530: const char * cp;
  1756                           ;doprnt.c: 533: *ap = __va_start();
  1757                           
  1758                           ;incstack = 0
  1759  001676  0E37               	movlw	low (?_printf+2)
  1760  001678  6E3A               	movwf	printf@ap,c
  1761  00167A  0E00               	movlw	high (?_printf+2)
  1762  00167C  6E3B               	movwf	printf@ap+1,c
  1763                           
  1764                           ;doprnt.c: 536: while(c = *f++) {
  1765  00167E  D07D               	goto	u730
  1766  001680                     
  1767                           ;doprnt.c: 538: if(c != '%')
  1768  001680  0E25               	movlw	37
  1769  001682  1840               	xorwf	printf@c,w,c
  1770  001684  B4D8               	btfsc	status,2,c
  1771  001686  D004               	goto	l337
  1772                           
  1773                           ;doprnt.c: 540: {
  1774                           ;doprnt.c: 541: (putch(c) );
  1775  001688  5040               	movf	printf@c,w,c
  1776  00168A  EC68  F00E         	call	_putch
  1777                           
  1778                           ;doprnt.c: 542: continue;
  1779  00168E  D075               	goto	u730
  1780  001690                     l337:
  1781                           
  1782                           ;doprnt.c: 543: }
  1783                           ;doprnt.c: 548: flag = 0;
  1784  001690  0E00               	movlw	0
  1785  001692  6E3C               	movwf	printf@flag,c
  1786                           
  1787                           ;doprnt.c: 822: }
  1788                           
  1789                           ;doprnt.c: 813: continue;
  1790                           
  1791                           ;doprnt.c: 802: default:
  1792                           
  1793                           ;doprnt.c: 698: case 'i':
  1794                           ;doprnt.c: 699: break;
  1795                           
  1796                           ;doprnt.c: 697: case 'd':
  1797                           
  1798                           ;doprnt.c: 638: goto alldone;
  1799                           
  1800                           ;doprnt.c: 637: case 0:
  1801                           
  1802                           ;doprnt.c: 635: switch(c = *f++) {
  1803  001694  C035  FFF6         	movff	printf@f,tblptrl
  1804  001698  C036  FFF7         	movff	printf@f+1,tblptrh
  1805  00169C  4A35               	infsnz	printf@f,f,c
  1806  00169E  2A36               	incf	printf@f+1,f,c
  1807  0016A0                     	if	0	;tblptru may be non-zero
  1808  0016A0                     	endif
  1809  0016A0                     	if	0	;tblptru may be non-zero
  1810  0016A0                     	endif
  1811  0016A0  0008               	tblrd		*
  1812  0016A2  CFF5 F040          	movff	tablat,printf@c
  1813  0016A6  5040               	movf	printf@c,w,c
  1814                           
  1815                           ; Switch size 1, requested type "space"
  1816                           ; Number of cases is 3, Range of values is 0 to 105
  1817                           ; switch strategies available:
  1818                           ; Name         Instructions Cycles
  1819                           ; simple_byte           10     6 (average)
  1820                           ;	Chosen strategy is simple_byte
  1821  0016A8  0A00               	xorlw	0	; case 0
  1822  0016AA  B4D8               	btfsc	status,2,c
  1823  0016AC  0012               	return	
  1824  0016AE  0A64               	xorlw	100	; case 100
  1825  0016B0  B4D8               	btfsc	status,2,c
  1826  0016B2  D003               	goto	l343
  1827  0016B4  0A0D               	xorlw	13	; case 105
  1828  0016B6  A4D8               	btfss	status,2,c
  1829  0016B8  D060               	goto	u730
  1830  0016BA                     l343:
  1831                           
  1832                           ;doprnt.c: 1253: {
  1833                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1834  0016BA  C03A  FFD9         	movff	printf@ap,fsr2l
  1835  0016BE  C03B  FFDA         	movff	printf@ap+1,fsr2h
  1836  0016C2  CFDE F03E          	movff	postinc2,printf@val
  1837  0016C6  CFDD F03F          	movff	postdec2,printf@val+1
  1838  0016CA  0E02               	movlw	2
  1839  0016CC  263A               	addwf	printf@ap,f,c
  1840  0016CE  0E00               	movlw	0
  1841  0016D0  223B               	addwfc	printf@ap+1,f,c
  1842                           
  1843                           ;doprnt.c: 1261: if((int)val < 0) {
  1844  0016D2  AE3F               	btfss	printf@val+1,7,c
  1845  0016D4  D006               	goto	l345
  1846                           
  1847                           ;doprnt.c: 1262: flag |= 0x03;
  1848  0016D6  0E03               	movlw	3
  1849  0016D8  123C               	iorwf	printf@flag,f,c
  1850                           
  1851                           ;doprnt.c: 1263: val = -val;
  1852  0016DA  6C3E               	negf	printf@val,c
  1853  0016DC  1E3F               	comf	printf@val+1,f,c
  1854  0016DE  B0D8               	btfsc	status,0,c
  1855  0016E0  2A3F               	incf	printf@val+1,f,c
  1856  0016E2                     l345:
  1857                           
  1858                           ;doprnt.c: 1264: }
  1859                           ;doprnt.c: 1266: }
  1860                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1861  0016E2  0E01               	movlw	1
  1862  0016E4  6E40               	movwf	printf@c,c
  1863  0016E6                     l1652:
  1864  0016E6  0E05               	movlw	5
  1865  0016E8  1840               	xorwf	printf@c,w,c
  1866  0016EA  B4D8               	btfsc	status,2,c
  1867  0016EC  D012               	goto	u710
  1868                           
  1869                           ;doprnt.c: 1306: if(val < dpowers[c])
  1870  0016EE  5040               	movf	printf@c,w,c
  1871  0016F0  0D02               	mullw	2
  1872  0016F2  0E12               	movlw	low _dpowers
  1873  0016F4  24F3               	addwf	prodl,w,c
  1874  0016F6  6EF6               	movwf	tblptrl,c
  1875  0016F8  0E10               	movlw	high _dpowers
  1876  0016FA  20F4               	addwfc	prodh,w,c
  1877  0016FC  6EF7               	movwf	tblptrh,c
  1878  0016FE                     	if	0	;There are less than 3 active tblptr bytes
  1879  0016FE                     	endif
  1880  0016FE  0009               	tblrd		*+
  1881  001700  50F5               	movf	tablat,w,c
  1882  001702  5C3E               	subwf	printf@val,w,c
  1883  001704  0009               	tblrd		*+
  1884  001706  50F5               	movf	tablat,w,c
  1885  001708  583F               	subwfb	printf@val+1,w,c
  1886  00170A  A0D8               	btfss	status,0,c
  1887  00170C  D002               	goto	u710
  1888                           
  1889                           ;doprnt.c: 1307: break;
  1890  00170E  2A40               	incf	printf@c,f,c
  1891  001710  D7EA               	goto	l1652
  1892  001712                     u710:
  1893                           
  1894                           ;doprnt.c: 1422: {
  1895                           ;doprnt.c: 1438: if(flag & 0x03)
  1896  001712  C03C  F039         	movff	printf@flag,??_printf
  1897  001716  0E03               	movlw	3
  1898  001718  1639               	andwf	??_printf,f,c
  1899  00171A  B4D8               	btfsc	status,2,c
  1900  00171C  D003               	goto	l349
  1901                           
  1902                           ;doprnt.c: 1439: (putch('-') );
  1903  00171E  0E2D               	movlw	45
  1904  001720  EC68  F00E         	call	_putch
  1905  001724                     l349:
  1906                           
  1907                           ;doprnt.c: 1469: }
  1908                           ;doprnt.c: 1472: prec = c;
  1909  001724  C040  F03D         	movff	printf@c,printf@prec
  1910                           
  1911                           ;doprnt.c: 1474: while(prec--) {
  1912  001728  D024               	goto	l350
  1913  00172A                     
  1914                           ;doprnt.c: 1478: {
  1915                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1916  00172A  503D               	movf	printf@prec,w,c
  1917  00172C  0D02               	mullw	2
  1918  00172E  0E12               	movlw	low _dpowers
  1919  001730  24F3               	addwf	prodl,w,c
  1920  001732  6EF6               	movwf	tblptrl,c
  1921  001734  0E10               	movlw	high _dpowers
  1922  001736  20F4               	addwfc	prodh,w,c
  1923  001738  6EF7               	movwf	tblptrh,c
  1924  00173A                     	if	0	;There are less than 3 active tblptr bytes
  1925  00173A                     	endif
  1926  00173A  0009               	tblrd		*+
  1927  00173C  CFF5 F02B          	movff	tablat,___lwdiv@divisor
  1928  001740  000A               	tblrd		*-
  1929  001742  CFF5 F02C          	movff	tablat,___lwdiv@divisor+1
  1930  001746  C03E  F029         	movff	printf@val,___lwdiv@dividend
  1931  00174A  C03F  F02A         	movff	printf@val+1,___lwdiv@dividend+1
  1932  00174E  EC78  F00C         	call	___lwdiv	;wreg free
  1933  001752  C029  F030         	movff	?___lwdiv,___lwmod@dividend
  1934  001756  C02A  F031         	movff	?___lwdiv+1,___lwmod@dividend+1
  1935  00175A  0E00               	movlw	0
  1936  00175C  6E33               	movwf	___lwmod@divisor+1,c
  1937  00175E  0E0A               	movlw	10
  1938  001760  6E32               	movwf	___lwmod@divisor,c
  1939  001762  EC14  F00E         	call	___lwmod	;wreg free
  1940  001766  5030               	movf	?___lwmod,w,c
  1941  001768  0F30               	addlw	48
  1942  00176A  6E40               	movwf	printf@c,c
  1943                           
  1944                           ;doprnt.c: 1523: }
  1945                           ;doprnt.c: 1524: (putch(c) );
  1946  00176C  5040               	movf	printf@c,w,c
  1947  00176E  EC68  F00E         	call	_putch
  1948  001772                     l350:
  1949  001772  063D               	decf	printf@prec,f,c
  1950  001774  283D               	incf	printf@prec,w,c
  1951  001776  A4D8               	btfss	status,2,c
  1952  001778  D7D8               	goto	l351
  1953  00177A                     u730:
  1954  00177A  C035  FFF6         	movff	printf@f,tblptrl
  1955  00177E  C036  FFF7         	movff	printf@f+1,tblptrh
  1956  001782  4A35               	infsnz	printf@f,f,c
  1957  001784  2A36               	incf	printf@f+1,f,c
  1958  001786                     	if	0	;tblptru may be non-zero
  1959  001786                     	endif
  1960  001786                     	if	0	;tblptru may be non-zero
  1961  001786                     	endif
  1962  001786  0008               	tblrd		*
  1963  001788  CFF5 F040          	movff	tablat,printf@c
  1964  00178C  5040               	movf	printf@c,w,c
  1965  00178E  B4D8               	btfsc	status,2,c
  1966  001790  0012               	return	
  1967  001792  D776               	goto	l336
  1968  001794                     __end_of_printf:
  1969                           	opt stack 0
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           prodh	equ	0xFF4
  1975                           prodl	equ	0xFF3
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postinc2	equ	0xFDE
  1979                           postdec2	equ	0xFDD
  1980                           fsr2h	equ	0xFDA
  1981                           fsr2l	equ	0xFD9
  1982                           status	equ	0xFD8
  1983                           
  1984 ;; *************** function _putch *****************
  1985 ;; Defined at:
  1986 ;;		line 24 in file "lcd.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  data            1    wreg     unsigned char 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  data            1    2[COMRAM] unsigned char 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      void 
  1993 ;; Registers used:
  1994 ;;		wreg, status,2, status,0, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;Total ram usage:        1 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    1
  2007 ;; This function calls:
  2008 ;;		_lcdNibble
  2009 ;; This function is called by:
  2010 ;;		_printf
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text3
  2015  001CD0                     __ptext3:
  2016                           	opt stack 0
  2017  001CD0                     _putch:
  2018                           	opt stack 28
  2019                           
  2020                           ;incstack = 0
  2021                           ;putch@data stored from wreg
  2022  001CD0  6E2B               	movwf	putch@data,c
  2023                           
  2024                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2025  001CD2  848C               	bsf	3980,2,c	;volatile
  2026                           
  2027                           ;lcd.c: 33: lcdNibble(data);
  2028  001CD4  502B               	movf	putch@data,w,c
  2029  001CD6  EC0B  F00C         	call	_lcdNibble
  2030                           
  2031                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2032  001CDA  0EC8               	movlw	200
  2033  001CDC                     u1177:
  2034  001CDC  D000               	nop2	
  2035  001CDE  2EE8               	decfsz	wreg,f,c
  2036  001CE0  D7FD               	bra	u1177
  2037  001CE2  0012               	return		;funcret
  2038  001CE4                     __end_of_putch:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           prodh	equ	0xFF4
  2045                           prodl	equ	0xFF3
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           postinc2	equ	0xFDE
  2049                           postdec2	equ	0xFDD
  2050                           fsr2h	equ	0xFDA
  2051                           fsr2l	equ	0xFD9
  2052                           status	equ	0xFD8
  2053                           
  2054 ;; *************** function ___lwmod *****************
  2055 ;; Defined at:
  2056 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  dividend        2    7[COMRAM] unsigned int 
  2059 ;;  divisor         2    9[COMRAM] unsigned int 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  counter         1   11[COMRAM] unsigned char 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  2    7[COMRAM] unsigned int 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;Total ram usage:        5 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_printf
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text4
  2085  001C28                     __ptext4:
  2086                           	opt stack 0
  2087  001C28                     ___lwmod:
  2088                           	opt stack 29
  2089                           
  2090                           ;incstack = 0
  2091  001C28  5032               	movf	___lwmod@divisor,w,c
  2092  001C2A  1033               	iorwf	___lwmod@divisor+1,w,c
  2093  001C2C  B4D8               	btfsc	status,2,c
  2094  001C2E  D018               	goto	l773
  2095  001C30  0E01               	movlw	1
  2096  001C32  6E34               	movwf	___lwmod@counter,c
  2097  001C34  D004               	goto	l768
  2098  001C36  90D8               	bcf	status,0,c
  2099  001C38  3632               	rlcf	___lwmod@divisor,f,c
  2100  001C3A  3633               	rlcf	___lwmod@divisor+1,f,c
  2101  001C3C  2A34               	incf	___lwmod@counter,f,c
  2102  001C3E                     l768:
  2103  001C3E  AE33               	btfss	___lwmod@divisor+1,7,c
  2104  001C40  D7FA               	goto	l769
  2105  001C42                     u650:
  2106  001C42  5032               	movf	___lwmod@divisor,w,c
  2107  001C44  5C30               	subwf	___lwmod@dividend,w,c
  2108  001C46  5033               	movf	___lwmod@divisor+1,w,c
  2109  001C48  5831               	subwfb	___lwmod@dividend+1,w,c
  2110  001C4A  A0D8               	btfss	status,0,c
  2111  001C4C  D004               	goto	l772
  2112  001C4E  5032               	movf	___lwmod@divisor,w,c
  2113  001C50  5E30               	subwf	___lwmod@dividend,f,c
  2114  001C52  5033               	movf	___lwmod@divisor+1,w,c
  2115  001C54  5A31               	subwfb	___lwmod@dividend+1,f,c
  2116  001C56                     l772:
  2117  001C56  90D8               	bcf	status,0,c
  2118  001C58  3233               	rrcf	___lwmod@divisor+1,f,c
  2119  001C5A  3232               	rrcf	___lwmod@divisor,f,c
  2120  001C5C  2E34               	decfsz	___lwmod@counter,f,c
  2121  001C5E  D7F1               	goto	u650
  2122  001C60                     l773:
  2123  001C60  C030  F030         	movff	___lwmod@dividend,?___lwmod
  2124  001C64  C031  F031         	movff	___lwmod@dividend+1,?___lwmod+1
  2125  001C68  0012               	return		;funcret
  2126  001C6A                     __end_of___lwmod:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           prodh	equ	0xFF4
  2133                           prodl	equ	0xFF3
  2134                           postinc0	equ	0xFEE
  2135                           wreg	equ	0xFE8
  2136                           postinc2	equ	0xFDE
  2137                           postdec2	equ	0xFDD
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function ___lwdiv *****************
  2143 ;; Defined at:
  2144 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  dividend        2    0[COMRAM] unsigned int 
  2147 ;;  divisor         2    2[COMRAM] unsigned int 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  quotient        2    4[COMRAM] unsigned int 
  2150 ;;  counter         1    6[COMRAM] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  2    0[COMRAM] unsigned int 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2160 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;Total ram usage:        7 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; This function calls:
  2167 ;;		Nothing
  2168 ;; This function is called by:
  2169 ;;		_printf
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           	psect	text5
  2174  0018F0                     __ptext5:
  2175                           	opt stack 0
  2176  0018F0                     ___lwdiv:
  2177                           	opt stack 29
  2178                           
  2179                           ;incstack = 0
  2180  0018F0  0E00               	movlw	0
  2181  0018F2  6E2E               	movwf	___lwdiv@quotient+1,c
  2182  0018F4  0E00               	movlw	0
  2183  0018F6  6E2D               	movwf	___lwdiv@quotient,c
  2184  0018F8  502B               	movf	___lwdiv@divisor,w,c
  2185  0018FA  102C               	iorwf	___lwdiv@divisor+1,w,c
  2186  0018FC  B4D8               	btfsc	status,2,c
  2187  0018FE  D01C               	goto	l763
  2188  001900  0E01               	movlw	1
  2189  001902  6E2F               	movwf	___lwdiv@counter,c
  2190  001904  D004               	goto	l758
  2191  001906  90D8               	bcf	status,0,c
  2192  001908  362B               	rlcf	___lwdiv@divisor,f,c
  2193  00190A  362C               	rlcf	___lwdiv@divisor+1,f,c
  2194  00190C  2A2F               	incf	___lwdiv@counter,f,c
  2195  00190E                     l758:
  2196  00190E  AE2C               	btfss	___lwdiv@divisor+1,7,c
  2197  001910  D7FA               	goto	l759
  2198  001912                     u620:
  2199  001912  90D8               	bcf	status,0,c
  2200  001914  362D               	rlcf	___lwdiv@quotient,f,c
  2201  001916  362E               	rlcf	___lwdiv@quotient+1,f,c
  2202  001918  502B               	movf	___lwdiv@divisor,w,c
  2203  00191A  5C29               	subwf	___lwdiv@dividend,w,c
  2204  00191C  502C               	movf	___lwdiv@divisor+1,w,c
  2205  00191E  582A               	subwfb	___lwdiv@dividend+1,w,c
  2206  001920  A0D8               	btfss	status,0,c
  2207  001922  D005               	goto	l762
  2208  001924  502B               	movf	___lwdiv@divisor,w,c
  2209  001926  5E29               	subwf	___lwdiv@dividend,f,c
  2210  001928  502C               	movf	___lwdiv@divisor+1,w,c
  2211  00192A  5A2A               	subwfb	___lwdiv@dividend+1,f,c
  2212  00192C  802D               	bsf	___lwdiv@quotient,0,c
  2213  00192E                     l762:
  2214  00192E  90D8               	bcf	status,0,c
  2215  001930  322C               	rrcf	___lwdiv@divisor+1,f,c
  2216  001932  322B               	rrcf	___lwdiv@divisor,f,c
  2217  001934  2E2F               	decfsz	___lwdiv@counter,f,c
  2218  001936  D7ED               	goto	u620
  2219  001938                     l763:
  2220  001938  C02D  F029         	movff	___lwdiv@quotient,?___lwdiv
  2221  00193C  C02E  F02A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2222  001940  0012               	return		;funcret
  2223  001942                     __end_of___lwdiv:
  2224                           	opt stack 0
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           prodh	equ	0xFF4
  2230                           prodl	equ	0xFF3
  2231                           postinc0	equ	0xFEE
  2232                           wreg	equ	0xFE8
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _motorStop_3 *****************
  2240 ;; Defined at:
  2241 ;;		line 539 in file "main.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;		None
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;		None
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;Total ram usage:        0 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    2
  2262 ;; This function calls:
  2263 ;;		_I2C_Master_Init
  2264 ;;		_I2C_Master_Start
  2265 ;;		_I2C_Master_Stop
  2266 ;;		_I2C_Master_Write
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text6
  2273  00198E                     __ptext6:
  2274                           	opt stack 0
  2275  00198E                     _motorStop_3:
  2276                           	opt stack 28
  2277                           
  2278                           ;main.c: 540: I2C_Master_Init(100000);
  2279                           
  2280                           ;incstack = 0
  2281  00198E  0EA0               	movlw	160
  2282  001990  6E36               	movwf	I2C_Master_Init@clockFreq,c
  2283  001992  0E86               	movlw	134
  2284  001994  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  2285  001996  0E01               	movlw	1
  2286  001998  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  2287  00199A  0E00               	movlw	0
  2288  00199C  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  2289  00199E  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  2290                           
  2291                           ;main.c: 541: I2C_Master_Start();
  2292  0019A2  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2293                           
  2294                           ;main.c: 543: I2C_Master_Write(0b00010000);
  2295  0019A6  0E00               	movlw	0
  2296  0019A8  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2297  0019AA  0E10               	movlw	16
  2298  0019AC  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2299  0019AE  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2300                           
  2301                           ;main.c: 544: I2C_Master_Stop();
  2302  0019B2  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2303                           
  2304                           ;main.c: 547: I2C_Master_Start();
  2305  0019B6  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2306                           
  2307                           ;main.c: 548: I2C_Master_Write(0b00010000);
  2308  0019BA  0E00               	movlw	0
  2309  0019BC  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2310  0019BE  0E10               	movlw	16
  2311  0019C0  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2312  0019C2  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2313                           
  2314                           ;main.c: 549: I2C_Master_Write('0');
  2315  0019C6  0E00               	movlw	0
  2316  0019C8  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2317  0019CA  0E30               	movlw	48
  2318  0019CC  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2319  0019CE  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2320                           
  2321                           ;main.c: 550: I2C_Master_Stop();
  2322  0019D2  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2323  0019D6  0012               	return		;funcret
  2324  0019D8                     __end_of_motorStop_3:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           prodh	equ	0xFF4
  2331                           prodl	equ	0xFF3
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           postinc2	equ	0xFDE
  2335                           postdec2	equ	0xFDD
  2336                           fsr2h	equ	0xFDA
  2337                           fsr2l	equ	0xFD9
  2338                           status	equ	0xFD8
  2339                           
  2340 ;; *************** function _motorStop_2 *****************
  2341 ;; Defined at:
  2342 ;;		line 511 in file "main.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;		None
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;		None
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1    wreg      void 
  2349 ;; Registers used:
  2350 ;;		wreg, status,2, status,0, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;Total ram usage:        0 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    2
  2363 ;; This function calls:
  2364 ;;		_I2C_Master_Init
  2365 ;;		_I2C_Master_Start
  2366 ;;		_I2C_Master_Stop
  2367 ;;		_I2C_Master_Write
  2368 ;; This function is called by:
  2369 ;;		_main
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           	psect	text7
  2374  0019D8                     __ptext7:
  2375                           	opt stack 0
  2376  0019D8                     _motorStop_2:
  2377                           	opt stack 28
  2378                           
  2379                           ;main.c: 512: I2C_Master_Init(100000);
  2380                           
  2381                           ;incstack = 0
  2382  0019D8  0EA0               	movlw	160
  2383  0019DA  6E36               	movwf	I2C_Master_Init@clockFreq,c
  2384  0019DC  0E86               	movlw	134
  2385  0019DE  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  2386  0019E0  0E01               	movlw	1
  2387  0019E2  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  2388  0019E4  0E00               	movlw	0
  2389  0019E6  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  2390  0019E8  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  2391                           
  2392                           ;main.c: 513: I2C_Master_Start();
  2393  0019EC  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2394                           
  2395                           ;main.c: 515: I2C_Master_Write(0b00010000);
  2396  0019F0  0E00               	movlw	0
  2397  0019F2  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2398  0019F4  0E10               	movlw	16
  2399  0019F6  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2400  0019F8  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2401                           
  2402                           ;main.c: 516: I2C_Master_Stop();
  2403  0019FC  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2404                           
  2405                           ;main.c: 519: I2C_Master_Start();
  2406  001A00  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2407                           
  2408                           ;main.c: 520: I2C_Master_Write(0b00010000);
  2409  001A04  0E00               	movlw	0
  2410  001A06  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2411  001A08  0E10               	movlw	16
  2412  001A0A  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2413  001A0C  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2414                           
  2415                           ;main.c: 521: I2C_Master_Write('8');
  2416  001A10  0E00               	movlw	0
  2417  001A12  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2418  001A14  0E38               	movlw	56
  2419  001A16  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2420  001A18  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2421                           
  2422                           ;main.c: 522: I2C_Master_Stop();
  2423  001A1C  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2424  001A20  0012               	return		;funcret
  2425  001A22                     __end_of_motorStop_2:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           tblptrh	equ	0xFF7
  2429                           tblptrl	equ	0xFF6
  2430                           tablat	equ	0xFF5
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           postinc2	equ	0xFDE
  2436                           postdec2	equ	0xFDD
  2437                           fsr2h	equ	0xFDA
  2438                           fsr2l	equ	0xFD9
  2439                           status	equ	0xFD8
  2440                           
  2441 ;; *************** function _motorStop_1 *****************
  2442 ;; Defined at:
  2443 ;;		line 480 in file "main.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, status,0, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;Total ram usage:        0 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    2
  2464 ;; This function calls:
  2465 ;;		_I2C_Master_Init
  2466 ;;		_I2C_Master_Start
  2467 ;;		_I2C_Master_Stop
  2468 ;;		_I2C_Master_Write
  2469 ;; This function is called by:
  2470 ;;		_main
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text8
  2475  001A22                     __ptext8:
  2476                           	opt stack 0
  2477  001A22                     _motorStop_1:
  2478                           	opt stack 28
  2479                           
  2480                           ;main.c: 481: I2C_Master_Init(100000);
  2481                           
  2482                           ;incstack = 0
  2483  001A22  0EA0               	movlw	160
  2484  001A24  6E36               	movwf	I2C_Master_Init@clockFreq,c
  2485  001A26  0E86               	movlw	134
  2486  001A28  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  2487  001A2A  0E01               	movlw	1
  2488  001A2C  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  2489  001A2E  0E00               	movlw	0
  2490  001A30  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  2491  001A32  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  2492                           
  2493                           ;main.c: 482: I2C_Master_Start();
  2494  001A36  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2495                           
  2496                           ;main.c: 484: I2C_Master_Write(0b00010000);
  2497  001A3A  0E00               	movlw	0
  2498  001A3C  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2499  001A3E  0E10               	movlw	16
  2500  001A40  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2501  001A42  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2502                           
  2503                           ;main.c: 485: I2C_Master_Stop();
  2504  001A46  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2505                           
  2506                           ;main.c: 488: I2C_Master_Start();
  2507  001A4A  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2508                           
  2509                           ;main.c: 489: I2C_Master_Write(0b00010000);
  2510  001A4E  0E00               	movlw	0
  2511  001A50  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2512  001A52  0E10               	movlw	16
  2513  001A54  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2514  001A56  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2515                           
  2516                           ;main.c: 490: I2C_Master_Write('6');
  2517  001A5A  0E00               	movlw	0
  2518  001A5C  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2519  001A5E  0E36               	movlw	54
  2520  001A60  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2521  001A62  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2522                           
  2523                           ;main.c: 491: I2C_Master_Stop();
  2524  001A66  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2525  001A6A  0012               	return		;funcret
  2526  001A6C                     __end_of_motorStop_1:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           postinc0	equ	0xFEE
  2535                           wreg	equ	0xFE8
  2536                           postinc2	equ	0xFDE
  2537                           postdec2	equ	0xFDD
  2538                           fsr2h	equ	0xFDA
  2539                           fsr2l	equ	0xFD9
  2540                           status	equ	0xFD8
  2541                           
  2542 ;; *************** function _motorStop_0 *****************
  2543 ;; Defined at:
  2544 ;;		line 449 in file "main.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, status,2, status,0, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    2
  2565 ;; This function calls:
  2566 ;;		_I2C_Master_Init
  2567 ;;		_I2C_Master_Start
  2568 ;;		_I2C_Master_Stop
  2569 ;;		_I2C_Master_Write
  2570 ;; This function is called by:
  2571 ;;		_main
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text9
  2576  001A6C                     __ptext9:
  2577                           	opt stack 0
  2578  001A6C                     _motorStop_0:
  2579                           	opt stack 28
  2580                           
  2581                           ;main.c: 451: I2C_Master_Init(100000);
  2582                           
  2583                           ;incstack = 0
  2584  001A6C  0EA0               	movlw	160
  2585  001A6E  6E36               	movwf	I2C_Master_Init@clockFreq,c
  2586  001A70  0E86               	movlw	134
  2587  001A72  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  2588  001A74  0E01               	movlw	1
  2589  001A76  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  2590  001A78  0E00               	movlw	0
  2591  001A7A  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  2592  001A7C  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  2593                           
  2594                           ;main.c: 452: I2C_Master_Start();
  2595  001A80  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2596                           
  2597                           ;main.c: 454: I2C_Master_Write(0b00010000);
  2598  001A84  0E00               	movlw	0
  2599  001A86  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2600  001A88  0E10               	movlw	16
  2601  001A8A  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2602  001A8C  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2603                           
  2604                           ;main.c: 455: I2C_Master_Stop();
  2605  001A90  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2606                           
  2607                           ;main.c: 458: I2C_Master_Start();
  2608  001A94  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2609                           
  2610                           ;main.c: 459: I2C_Master_Write(0b00010000);
  2611  001A98  0E00               	movlw	0
  2612  001A9A  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2613  001A9C  0E10               	movlw	16
  2614  001A9E  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2615  001AA0  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2616                           
  2617                           ;main.c: 460: I2C_Master_Write('4');
  2618  001AA4  0E00               	movlw	0
  2619  001AA6  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2620  001AA8  0E34               	movlw	52
  2621  001AAA  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2622  001AAC  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2623                           
  2624                           ;main.c: 461: I2C_Master_Stop();
  2625  001AB0  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2626  001AB4  0012               	return		;funcret
  2627  001AB6                     __end_of_motorStop_0:
  2628                           	opt stack 0
  2629                           tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           prodh	equ	0xFF4
  2634                           prodl	equ	0xFF3
  2635                           postinc0	equ	0xFEE
  2636                           wreg	equ	0xFE8
  2637                           postinc2	equ	0xFDE
  2638                           postdec2	equ	0xFDD
  2639                           fsr2h	equ	0xFDA
  2640                           fsr2l	equ	0xFD9
  2641                           status	equ	0xFD8
  2642                           
  2643 ;; *************** function _motorStart_3 *****************
  2644 ;; Defined at:
  2645 ;;		line 525 in file "main.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2, status,0, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;Total ram usage:        0 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; Hardware stack levels required when called:    2
  2666 ;; This function calls:
  2667 ;;		_I2C_Master_Init
  2668 ;;		_I2C_Master_Start
  2669 ;;		_I2C_Master_Stop
  2670 ;;		_I2C_Master_Write
  2671 ;; This function is called by:
  2672 ;;		_main
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           	psect	text10
  2677  001AB6                     __ptext10:
  2678                           	opt stack 0
  2679  001AB6                     _motorStart_3:
  2680                           	opt stack 28
  2681                           
  2682                           ;main.c: 526: I2C_Master_Init(100000);
  2683                           
  2684                           ;incstack = 0
  2685  001AB6  0EA0               	movlw	160
  2686  001AB8  6E36               	movwf	I2C_Master_Init@clockFreq,c
  2687  001ABA  0E86               	movlw	134
  2688  001ABC  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  2689  001ABE  0E01               	movlw	1
  2690  001AC0  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  2691  001AC2  0E00               	movlw	0
  2692  001AC4  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  2693  001AC6  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  2694                           
  2695                           ;main.c: 527: I2C_Master_Start();
  2696  001ACA  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2697                           
  2698                           ;main.c: 529: I2C_Master_Write(0b00010000);
  2699  001ACE  0E00               	movlw	0
  2700  001AD0  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2701  001AD2  0E10               	movlw	16
  2702  001AD4  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2703  001AD6  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2704                           
  2705                           ;main.c: 530: I2C_Master_Stop();
  2706  001ADA  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2707                           
  2708                           ;main.c: 533: I2C_Master_Start();
  2709  001ADE  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2710                           
  2711                           ;main.c: 534: I2C_Master_Write(0b00010000);
  2712  001AE2  0E00               	movlw	0
  2713  001AE4  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2714  001AE6  0E10               	movlw	16
  2715  001AE8  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2716  001AEA  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2717                           
  2718                           ;main.c: 535: I2C_Master_Write('9');
  2719  001AEE  0E00               	movlw	0
  2720  001AF0  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2721  001AF2  0E39               	movlw	57
  2722  001AF4  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2723  001AF6  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2724                           
  2725                           ;main.c: 536: I2C_Master_Stop();
  2726  001AFA  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2727  001AFE  0012               	return		;funcret
  2728  001B00                     __end_of_motorStart_3:
  2729                           	opt stack 0
  2730                           tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           prodh	equ	0xFF4
  2735                           prodl	equ	0xFF3
  2736                           postinc0	equ	0xFEE
  2737                           wreg	equ	0xFE8
  2738                           postinc2	equ	0xFDE
  2739                           postdec2	equ	0xFDD
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _motorStart_2 *****************
  2745 ;; Defined at:
  2746 ;;		line 496 in file "main.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    2
  2767 ;; This function calls:
  2768 ;;		_I2C_Master_Init
  2769 ;;		_I2C_Master_Start
  2770 ;;		_I2C_Master_Stop
  2771 ;;		_I2C_Master_Write
  2772 ;; This function is called by:
  2773 ;;		_main
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text11
  2778  001B00                     __ptext11:
  2779                           	opt stack 0
  2780  001B00                     _motorStart_2:
  2781                           	opt stack 28
  2782                           
  2783                           ;main.c: 497: I2C_Master_Init(100000);
  2784                           
  2785                           ;incstack = 0
  2786  001B00  0EA0               	movlw	160
  2787  001B02  6E36               	movwf	I2C_Master_Init@clockFreq,c
  2788  001B04  0E86               	movlw	134
  2789  001B06  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  2790  001B08  0E01               	movlw	1
  2791  001B0A  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  2792  001B0C  0E00               	movlw	0
  2793  001B0E  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  2794  001B10  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  2795                           
  2796                           ;main.c: 498: I2C_Master_Start();
  2797  001B14  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2798                           
  2799                           ;main.c: 500: I2C_Master_Write(0b00010000);
  2800  001B18  0E00               	movlw	0
  2801  001B1A  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2802  001B1C  0E10               	movlw	16
  2803  001B1E  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2804  001B20  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2805                           
  2806                           ;main.c: 501: I2C_Master_Stop();
  2807  001B24  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2808                           
  2809                           ;main.c: 504: I2C_Master_Start();
  2810  001B28  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2811                           
  2812                           ;main.c: 505: I2C_Master_Write(0b00010000);
  2813  001B2C  0E00               	movlw	0
  2814  001B2E  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2815  001B30  0E10               	movlw	16
  2816  001B32  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2817  001B34  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2818                           
  2819                           ;main.c: 506: I2C_Master_Write('7');
  2820  001B38  0E00               	movlw	0
  2821  001B3A  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2822  001B3C  0E37               	movlw	55
  2823  001B3E  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2824  001B40  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2825                           
  2826                           ;main.c: 507: I2C_Master_Stop();
  2827  001B44  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2828  001B48  0012               	return		;funcret
  2829  001B4A                     __end_of_motorStart_2:
  2830                           	opt stack 0
  2831                           tblptru	equ	0xFF8
  2832                           tblptrh	equ	0xFF7
  2833                           tblptrl	equ	0xFF6
  2834                           tablat	equ	0xFF5
  2835                           prodh	equ	0xFF4
  2836                           prodl	equ	0xFF3
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           postinc2	equ	0xFDE
  2840                           postdec2	equ	0xFDD
  2841                           fsr2h	equ	0xFDA
  2842                           fsr2l	equ	0xFD9
  2843                           status	equ	0xFD8
  2844                           
  2845 ;; *************** function _motorStart_1 *****************
  2846 ;; Defined at:
  2847 ;;		line 465 in file "main.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;		None
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;		None
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, status,2, status,0, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;Total ram usage:        0 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    2
  2868 ;; This function calls:
  2869 ;;		_I2C_Master_Init
  2870 ;;		_I2C_Master_Start
  2871 ;;		_I2C_Master_Stop
  2872 ;;		_I2C_Master_Write
  2873 ;; This function is called by:
  2874 ;;		_main
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text12
  2879  001B4A                     __ptext12:
  2880                           	opt stack 0
  2881  001B4A                     _motorStart_1:
  2882                           	opt stack 28
  2883                           
  2884                           ;main.c: 466: I2C_Master_Init(100000);
  2885                           
  2886                           ;incstack = 0
  2887  001B4A  0EA0               	movlw	160
  2888  001B4C  6E36               	movwf	I2C_Master_Init@clockFreq,c
  2889  001B4E  0E86               	movlw	134
  2890  001B50  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  2891  001B52  0E01               	movlw	1
  2892  001B54  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  2893  001B56  0E00               	movlw	0
  2894  001B58  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  2895  001B5A  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  2896                           
  2897                           ;main.c: 467: I2C_Master_Start();
  2898  001B5E  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2899                           
  2900                           ;main.c: 469: I2C_Master_Write(0b00010000);
  2901  001B62  0E00               	movlw	0
  2902  001B64  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2903  001B66  0E10               	movlw	16
  2904  001B68  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2905  001B6A  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2906                           
  2907                           ;main.c: 470: I2C_Master_Stop();
  2908  001B6E  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2909                           
  2910                           ;main.c: 473: I2C_Master_Start();
  2911  001B72  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  2912                           
  2913                           ;main.c: 474: I2C_Master_Write(0b00010000);
  2914  001B76  0E00               	movlw	0
  2915  001B78  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2916  001B7A  0E10               	movlw	16
  2917  001B7C  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2918  001B7E  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2919                           
  2920                           ;main.c: 475: I2C_Master_Write('5');
  2921  001B82  0E00               	movlw	0
  2922  001B84  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  2923  001B86  0E35               	movlw	53
  2924  001B88  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  2925  001B8A  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  2926                           
  2927                           ;main.c: 476: I2C_Master_Stop();
  2928  001B8E  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  2929  001B92  0012               	return		;funcret
  2930  001B94                     __end_of_motorStart_1:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           postinc2	equ	0xFDE
  2941                           postdec2	equ	0xFDD
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _motorStart_0 *****************
  2947 ;; Defined at:
  2948 ;;		line 433 in file "main.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;Total ram usage:        0 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    2
  2969 ;; This function calls:
  2970 ;;		_I2C_Master_Init
  2971 ;;		_I2C_Master_Start
  2972 ;;		_I2C_Master_Stop
  2973 ;;		_I2C_Master_Write
  2974 ;; This function is called by:
  2975 ;;		_main
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	text13
  2980  001B94                     __ptext13:
  2981                           	opt stack 0
  2982  001B94                     _motorStart_0:
  2983                           	opt stack 28
  2984                           
  2985                           ;main.c: 435: I2C_Master_Init(100000);
  2986                           
  2987                           ;incstack = 0
  2988  001B94  0EA0               	movlw	160
  2989  001B96  6E36               	movwf	I2C_Master_Init@clockFreq,c
  2990  001B98  0E86               	movlw	134
  2991  001B9A  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  2992  001B9C  0E01               	movlw	1
  2993  001B9E  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  2994  001BA0  0E00               	movlw	0
  2995  001BA2  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  2996  001BA4  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  2997                           
  2998                           ;main.c: 436: I2C_Master_Start();
  2999  001BA8  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  3000                           
  3001                           ;main.c: 438: I2C_Master_Write(0b00010000);
  3002  001BAC  0E00               	movlw	0
  3003  001BAE  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  3004  001BB0  0E10               	movlw	16
  3005  001BB2  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  3006  001BB4  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  3007                           
  3008                           ;main.c: 439: I2C_Master_Stop();
  3009  001BB8  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  3010                           
  3011                           ;main.c: 442: I2C_Master_Start();
  3012  001BBC  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  3013                           
  3014                           ;main.c: 443: I2C_Master_Write(0b00010000);
  3015  001BC0  0E00               	movlw	0
  3016  001BC2  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  3017  001BC4  0E10               	movlw	16
  3018  001BC6  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  3019  001BC8  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  3020                           
  3021                           ;main.c: 444: I2C_Master_Write('3');
  3022  001BCC  0E00               	movlw	0
  3023  001BCE  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  3024  001BD0  0E33               	movlw	51
  3025  001BD2  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  3026  001BD4  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  3027                           
  3028                           ;main.c: 445: I2C_Master_Stop();
  3029  001BD8  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  3030  001BDC  0012               	return		;funcret
  3031  001BDE                     __end_of_motorStart_0:
  3032                           	opt stack 0
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           prodh	equ	0xFF4
  3038                           prodl	equ	0xFF3
  3039                           postinc0	equ	0xFEE
  3040                           wreg	equ	0xFE8
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _initLCD *****************
  3048 ;; Defined at:
  3049 ;;		line 60 in file "lcd.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;Total ram usage:        1 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    2
  3070 ;; This function calls:
  3071 ;;		_lcdInst
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text14
  3078  001942                     __ptext14:
  3079                           	opt stack 0
  3080  001942                     _initLCD:
  3081                           	opt stack 28
  3082                           
  3083                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  3084                           
  3085                           ;incstack = 0
  3086  001942  0EC3               	movlw	195
  3087  001944  6E2C               	movwf	??_initLCD& (0+255),c
  3088  001946  0ECD               	movlw	205
  3089  001948                     u1187:
  3090  001948  2EE8               	decfsz	wreg,f,c
  3091  00194A  D7FE               	bra	u1187
  3092  00194C  2E2C               	decfsz	??_initLCD& (0+255),f,c
  3093  00194E  D7FC               	bra	u1187
  3094  001950  F000               	nop	
  3095                           
  3096                           ;lcd.c: 69: lcdInst(0b00110011);
  3097  001952  0E33               	movlw	51
  3098  001954  EC72  F00E         	call	_lcdInst
  3099                           
  3100                           ;lcd.c: 70: lcdInst(0b00110010);
  3101  001958  0E32               	movlw	50
  3102  00195A  EC72  F00E         	call	_lcdInst
  3103                           
  3104                           ;lcd.c: 71: lcdInst(0b00101000);
  3105  00195E  0E28               	movlw	40
  3106  001960  EC72  F00E         	call	_lcdInst
  3107                           
  3108                           ;lcd.c: 72: lcdInst(0b00001111);
  3109  001964  0E0F               	movlw	15
  3110  001966  EC72  F00E         	call	_lcdInst
  3111                           
  3112                           ;lcd.c: 73: lcdInst(0b00000110);
  3113  00196A  0E06               	movlw	6
  3114  00196C  EC72  F00E         	call	_lcdInst
  3115                           
  3116                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3117  001970  0E01               	movlw	1
  3118  001972  EC72  F00E         	call	_lcdInst
  3119  001976  0EC3               	movlw	195
  3120  001978  6E2C               	movwf	??_initLCD& (0+255),c
  3121  00197A  0ECD               	movlw	205
  3122  00197C                     u1197:
  3123  00197C  2EE8               	decfsz	wreg,f,c
  3124  00197E  D7FE               	bra	u1197
  3125  001980  2E2C               	decfsz	??_initLCD& (0+255),f,c
  3126  001982  D7FC               	bra	u1197
  3127  001984  F000               	nop	
  3128                           
  3129                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3130  001986  0E0F               	movlw	15
  3131  001988  EC72  F00E         	call	_lcdInst
  3132  00198C  0012               	return		;funcret
  3133  00198E                     __end_of_initLCD:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           prodh	equ	0xFF4
  3140                           prodl	equ	0xFF3
  3141                           postinc0	equ	0xFEE
  3142                           wreg	equ	0xFE8
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _lcdInst *****************
  3150 ;; Defined at:
  3151 ;;		line 11 in file "lcd.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  data            1    wreg     unsigned char 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  data            1    2[COMRAM] unsigned char 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		wreg, status,2, status,0, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;Total ram usage:        1 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    1
  3172 ;; This function calls:
  3173 ;;		_lcdNibble
  3174 ;; This function is called by:
  3175 ;;		_main
  3176 ;;		_initLCD
  3177 ;;		_lcd_set_cursor
  3178 ;;		_lcd_shift_cursor
  3179 ;;		_lcd_shift_display
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text15
  3184  001CE4                     __ptext15:
  3185                           	opt stack 0
  3186  001CE4                     _lcdInst:
  3187                           	opt stack 29
  3188                           
  3189                           ;incstack = 0
  3190                           ;lcdInst@data stored from wreg
  3191  001CE4  6E2B               	movwf	lcdInst@data,c
  3192                           
  3193                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  3194  001CE6  948C               	bcf	3980,2,c	;volatile
  3195                           
  3196                           ;lcd.c: 20: lcdNibble(data);
  3197  001CE8  502B               	movf	lcdInst@data,w,c
  3198  001CEA  EC0B  F00C         	call	_lcdNibble
  3199                           
  3200                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3201  001CEE  0EC8               	movlw	200
  3202  001CF0                     u1207:
  3203  001CF0  D000               	nop2	
  3204  001CF2  2EE8               	decfsz	wreg,f,c
  3205  001CF4  D7FD               	bra	u1207
  3206  001CF6  0012               	return		;funcret
  3207  001CF8                     __end_of_lcdInst:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           postinc0	equ	0xFEE
  3216                           wreg	equ	0xFE8
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           fsr2h	equ	0xFDA
  3220                           fsr2l	equ	0xFD9
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function _lcdNibble *****************
  3224 ;; Defined at:
  3225 ;;		line 37 in file "lcd.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  data            1    wreg     unsigned char 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  data            1    1[COMRAM] unsigned char 
  3230 ;;  temp            1    0[COMRAM] unsigned char 
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, status,2, status,0
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;Total ram usage:        2 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_lcdInst
  3250 ;;		_putch
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text16
  3255  001816                     __ptext16:
  3256                           	opt stack 0
  3257  001816                     _lcdNibble:
  3258                           	opt stack 28
  3259                           
  3260                           ;incstack = 0
  3261                           ;lcdNibble@data stored from wreg
  3262  001816  6E2A               	movwf	lcdNibble@data,c
  3263                           
  3264                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3265  001818  502A               	movf	lcdNibble@data,w,c
  3266  00181A  0BF0               	andlw	240
  3267  00181C  6E29               	movwf	lcdNibble@temp,c
  3268                           
  3269                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3270  00181E  508C               	movf	3980,w,c	;volatile
  3271  001820  0B0F               	andlw	15
  3272  001822  6E8C               	movwf	3980,c	;volatile
  3273                           
  3274                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3275  001824  5029               	movf	lcdNibble@temp,w,c
  3276  001826  108C               	iorwf	3980,w,c	;volatile
  3277  001828  6E8C               	movwf	3980,c	;volatile
  3278                           
  3279                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3280  00182A  0E00               	movlw	0
  3281  00182C  BEF2               	btfsc	intcon,7,c	;volatile
  3282  00182E  0E01               	movlw	1
  3283  001830  6E27               	movwf	lcd@LCDinterruptState,c
  3284  001832  9EF2               	bcf	intcon,7,c	;volatile
  3285  001834  868C               	bsf	3980,3,c	;volatile
  3286  001836  0E53               	movlw	83
  3287  001838                     u1217:
  3288  001838  2EE8               	decfsz	wreg,f,c
  3289  00183A  D7FE               	bra	u1217
  3290  00183C  F000               	nop	
  3291  00183E  968C               	bcf	3980,3,c	;volatile
  3292  001840  0EC8               	movlw	200
  3293  001842                     u1227:
  3294  001842  D000               	nop2	
  3295  001844  2EE8               	decfsz	wreg,f,c
  3296  001846  D7FD               	bra	u1227
  3297  001848  B027               	btfsc	lcd@LCDinterruptState,0,c
  3298  00184A  D002               	bra	u15
  3299  00184C  9EF2               	bcf	intcon,7,c	;volatile
  3300  00184E  D001               	bra	u16
  3301  001850                     u15:
  3302  001850  8EF2               	bsf	intcon,7,c	;volatile
  3303  001852                     u16:
  3304                           
  3305                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3306  001852  382A               	swapf	lcdNibble@data,w,c
  3307  001854  0BF0               	andlw	240
  3308  001856  6E2A               	movwf	lcdNibble@data,c
  3309                           
  3310                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3311  001858  502A               	movf	lcdNibble@data,w,c
  3312  00185A  0BF0               	andlw	240
  3313  00185C  6E29               	movwf	lcdNibble@temp,c
  3314                           
  3315                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3316  00185E  508C               	movf	3980,w,c	;volatile
  3317  001860  0B0F               	andlw	15
  3318  001862  6E8C               	movwf	3980,c	;volatile
  3319                           
  3320                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3321  001864  5029               	movf	lcdNibble@temp,w,c
  3322  001866  108C               	iorwf	3980,w,c	;volatile
  3323  001868  6E8C               	movwf	3980,c	;volatile
  3324                           
  3325                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3326  00186A  0E00               	movlw	0
  3327  00186C  BEF2               	btfsc	intcon,7,c	;volatile
  3328  00186E  0E01               	movlw	1
  3329  001870  6E27               	movwf	lcd@LCDinterruptState,c
  3330  001872  9EF2               	bcf	intcon,7,c	;volatile
  3331  001874  868C               	bsf	3980,3,c	;volatile
  3332  001876  0E53               	movlw	83
  3333  001878                     u1237:
  3334  001878  2EE8               	decfsz	wreg,f,c
  3335  00187A  D7FE               	bra	u1237
  3336  00187C  F000               	nop	
  3337  00187E  968C               	bcf	3980,3,c	;volatile
  3338  001880  0EC8               	movlw	200
  3339  001882                     u1247:
  3340  001882  D000               	nop2	
  3341  001884  2EE8               	decfsz	wreg,f,c
  3342  001886  D7FD               	bra	u1247
  3343  001888  B027               	btfsc	lcd@LCDinterruptState,0,c
  3344  00188A  D002               	bra	u25
  3345  00188C  9EF2               	bcf	intcon,7,c	;volatile
  3346  00188E  D001               	bra	u26
  3347  001890                     u25:
  3348  001890  8EF2               	bsf	intcon,7,c	;volatile
  3349  001892                     u26:
  3350  001892  0012               	return		;funcret
  3351  001894                     __end_of_lcdNibble:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           intcon	equ	0xFF2
  3360                           postinc0	equ	0xFEE
  3361                           wreg	equ	0xFE8
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _i2cArduino *****************
  3369 ;; Defined at:
  3370 ;;		line 667 in file "main.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  char_to_ardu    1    wreg     unsigned char 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  char_to_ardu    1   21[COMRAM] unsigned char 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  1    wreg      void 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;Total ram usage:        1 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    2
  3391 ;; This function calls:
  3392 ;;		_I2C_Master_Init
  3393 ;;		_I2C_Master_Start
  3394 ;;		_I2C_Master_Stop
  3395 ;;		_I2C_Master_Write
  3396 ;; This function is called by:
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text17
  3402  001BDE                     __ptext17:
  3403                           	opt stack 0
  3404  001BDE                     _i2cArduino:
  3405                           	opt stack 28
  3406                           
  3407                           ;incstack = 0
  3408                           ;i2cArduino@char_to_arduino stored from wreg
  3409  001BDE  6E3E               	movwf	i2cArduino@char_to_arduino,c
  3410                           
  3411                           ;main.c: 669: I2C_Master_Init(100000);
  3412  001BE0  0EA0               	movlw	160
  3413  001BE2  6E36               	movwf	I2C_Master_Init@clockFreq,c
  3414  001BE4  0E86               	movlw	134
  3415  001BE6  6E37               	movwf	I2C_Master_Init@clockFreq+1,c
  3416  001BE8  0E01               	movlw	1
  3417  001BEA  6E38               	movwf	I2C_Master_Init@clockFreq+2,c
  3418  001BEC  0E00               	movlw	0
  3419  001BEE  6E39               	movwf	I2C_Master_Init@clockFreq+3,c
  3420  001BF0  EC4A  F00C         	call	_I2C_Master_Init	;wreg free
  3421                           
  3422                           ;main.c: 670: I2C_Master_Start();
  3423  001BF4  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  3424                           
  3425                           ;main.c: 677: I2C_Master_Write(0b00010000);
  3426  001BF8  0E00               	movlw	0
  3427  001BFA  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  3428  001BFC  0E10               	movlw	16
  3429  001BFE  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  3430  001C00  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  3431                           
  3432                           ;main.c: 678: I2C_Master_Stop();
  3433  001C04  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  3434                           
  3435                           ;main.c: 681: I2C_Master_Start();
  3436  001C08  EC8E  F00E         	call	_I2C_Master_Start	;wreg free
  3437                           
  3438                           ;main.c: 682: I2C_Master_Write(0b00010000);
  3439  001C0C  0E00               	movlw	0
  3440  001C0E  6E2B               	movwf	I2C_Master_Write@byteToWrite+1,c
  3441  001C10  0E10               	movlw	16
  3442  001C12  6E2A               	movwf	I2C_Master_Write@byteToWrite,c
  3443  001C14  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  3444                           
  3445                           ;main.c: 683: I2C_Master_Write(char_to_arduino);
  3446  001C18  C03E  F02A         	movff	i2cArduino@char_to_arduino,I2C_Master_Write@byteToWrite
  3447  001C1C  6A2B               	clrf	I2C_Master_Write@byteToWrite+1,c
  3448  001C1E  EC85  F00E         	call	_I2C_Master_Write	;wreg free
  3449                           
  3450                           ;main.c: 684: I2C_Master_Stop();
  3451  001C22  EC8A  F00E         	call	_I2C_Master_Stop	;wreg free
  3452  001C26  0012               	return		;funcret
  3453  001C28                     __end_of_i2cArduino:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           prodh	equ	0xFF4
  3460                           prodl	equ	0xFF3
  3461                           intcon	equ	0xFF2
  3462                           postinc0	equ	0xFEE
  3463                           wreg	equ	0xFE8
  3464                           postinc2	equ	0xFDE
  3465                           postdec2	equ	0xFDD
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _I2C_Master_Write *****************
  3471 ;; Defined at:
  3472 ;;		line 108 in file "I2C.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;Total ram usage:        2 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    1
  3493 ;; This function calls:
  3494 ;;		_I2C_Master_Wait
  3495 ;; This function is called by:
  3496 ;;		_motorStart_0
  3497 ;;		_motorStop_0
  3498 ;;		_motorStart_1
  3499 ;;		_motorStop_1
  3500 ;;		_motorStart_2
  3501 ;;		_motorStop_2
  3502 ;;		_motorStart_3
  3503 ;;		_motorStop_3
  3504 ;;		_i2cArduino
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text18
  3509  001D0A                     __ptext18:
  3510                           	opt stack 0
  3511  001D0A                     _I2C_Master_Write:
  3512                           	opt stack 28
  3513                           
  3514                           ;I2C.c: 116: I2C_Master_Wait();
  3515                           
  3516                           ;incstack = 0
  3517  001D0A  EC7C  F00E         	call	_I2C_Master_Wait	;wreg free
  3518                           
  3519                           ;I2C.c: 117: SSPBUF = byteToWrite;
  3520  001D0E  C02A  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  3521  001D12  0012               	return		;funcret
  3522  001D14                     __end_of_I2C_Master_Write:
  3523                           	opt stack 0
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           postinc0	equ	0xFEE
  3532                           wreg	equ	0xFE8
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _I2C_Master_Stop *****************
  3540 ;; Defined at:
  3541 ;;		line 95 in file "I2C.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;Total ram usage:        0 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    1
  3562 ;; This function calls:
  3563 ;;		_I2C_Master_Wait
  3564 ;; This function is called by:
  3565 ;;		_motorStart_0
  3566 ;;		_motorStop_0
  3567 ;;		_motorStart_1
  3568 ;;		_motorStop_1
  3569 ;;		_motorStart_2
  3570 ;;		_motorStop_2
  3571 ;;		_motorStart_3
  3572 ;;		_motorStop_3
  3573 ;;		_i2cArduino
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text19
  3578  001D14                     __ptext19:
  3579                           	opt stack 0
  3580  001D14                     _I2C_Master_Stop:
  3581                           	opt stack 28
  3582                           
  3583                           ;I2C.c: 104: I2C_Master_Wait();
  3584                           
  3585                           ;incstack = 0
  3586  001D14  EC7C  F00E         	call	_I2C_Master_Wait	;wreg free
  3587                           
  3588                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  3589  001D18  84C5               	bsf	4037,2,c	;volatile
  3590  001D1A  0012               	return		;funcret
  3591  001D1C                     __end_of_I2C_Master_Stop:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           prodh	equ	0xFF4
  3598                           prodl	equ	0xFF3
  3599                           intcon	equ	0xFF2
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           postinc2	equ	0xFDE
  3603                           postdec2	equ	0xFDD
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _I2C_Master_Start *****************
  3609 ;; Defined at:
  3610 ;;		line 69 in file "I2C.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;		None
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      void 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;Total ram usage:        0 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    1
  3631 ;; This function calls:
  3632 ;;		_I2C_Master_Wait
  3633 ;; This function is called by:
  3634 ;;		_motorStart_0
  3635 ;;		_motorStop_0
  3636 ;;		_motorStart_1
  3637 ;;		_motorStop_1
  3638 ;;		_motorStart_2
  3639 ;;		_motorStop_2
  3640 ;;		_motorStart_3
  3641 ;;		_motorStop_3
  3642 ;;		_i2cArduino
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           	psect	text20
  3647  001D1C                     __ptext20:
  3648                           	opt stack 0
  3649  001D1C                     _I2C_Master_Start:
  3650                           	opt stack 28
  3651                           
  3652                           ;I2C.c: 78: I2C_Master_Wait();
  3653                           
  3654                           ;incstack = 0
  3655  001D1C  EC7C  F00E         	call	_I2C_Master_Wait	;wreg free
  3656                           
  3657                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  3658  001D20  80C5               	bsf	4037,0,c	;volatile
  3659  001D22  0012               	return		;funcret
  3660  001D24                     __end_of_I2C_Master_Start:
  3661                           	opt stack 0
  3662                           tblptru	equ	0xFF8
  3663                           tblptrh	equ	0xFF7
  3664                           tblptrl	equ	0xFF6
  3665                           tablat	equ	0xFF5
  3666                           prodh	equ	0xFF4
  3667                           prodl	equ	0xFF3
  3668                           intcon	equ	0xFF2
  3669                           postinc0	equ	0xFEE
  3670                           wreg	equ	0xFE8
  3671                           postinc2	equ	0xFDE
  3672                           postdec2	equ	0xFDD
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677 ;; *************** function _I2C_Master_Wait *****************
  3678 ;; Defined at:
  3679 ;;		line 51 in file "I2C.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;		None
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;Total ram usage:        1 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; This function calls:
  3700 ;;		Nothing
  3701 ;; This function is called by:
  3702 ;;		_I2C_Master_Start
  3703 ;;		_I2C_Master_Stop
  3704 ;;		_I2C_Master_Write
  3705 ;;		_I2C_Master_RepeatedStart
  3706 ;;		_I2C_Master_Read
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text21
  3711  001CF8                     __ptext21:
  3712                           	opt stack 0
  3713  001CF8                     _I2C_Master_Wait:
  3714                           	opt stack 28
  3715                           
  3716                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3717                           
  3718                           ;incstack = 0
  3719  001CF8  B4C7               	btfsc	4039,2,c	;volatile
  3720  001CFA  D7FE               	goto	_I2C_Master_Wait
  3721  001CFC  CFC5 F029          	movff	4037,??_I2C_Master_Wait	;volatile
  3722  001D00  0E1F               	movlw	31
  3723  001D02  1629               	andwf	??_I2C_Master_Wait,f,c
  3724  001D04  B4D8               	btfsc	status,2,c
  3725  001D06  0012               	return	
  3726  001D08  D7F7               	goto	_I2C_Master_Wait
  3727  001D0A                     __end_of_I2C_Master_Wait:
  3728                           	opt stack 0
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           intcon	equ	0xFF2
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           postinc2	equ	0xFDE
  3739                           postdec2	equ	0xFDD
  3740                           fsr2h	equ	0xFDA
  3741                           fsr2l	equ	0xFD9
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function _I2C_Master_Init *****************
  3745 ;; Defined at:
  3746 ;;		line 14 in file "I2C.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;		None
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, status,2, status,0, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3760 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;Total ram usage:        8 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    1
  3767 ;; This function calls:
  3768 ;;		___lldiv
  3769 ;; This function is called by:
  3770 ;;		_motorStart_0
  3771 ;;		_motorStop_0
  3772 ;;		_motorStart_1
  3773 ;;		_motorStop_1
  3774 ;;		_motorStart_2
  3775 ;;		_motorStop_2
  3776 ;;		_motorStart_3
  3777 ;;		_motorStop_3
  3778 ;;		_i2cArduino
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           	psect	text22
  3783  001894                     __ptext22:
  3784                           	opt stack 0
  3785  001894                     _I2C_Master_Init:
  3786                           	opt stack 28
  3787                           
  3788                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  3789                           
  3790                           ;incstack = 0
  3791  001894  9AC6               	bcf	4038,5,c	;volatile
  3792                           
  3793                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  3794  001896  8694               	bsf	3988,3,c	;volatile
  3795                           
  3796                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  3797  001898  8894               	bsf	3988,4,c	;volatile
  3798                           
  3799                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  3800  00189A  0E80               	movlw	128
  3801  00189C  6EC7               	movwf	4039,c	;volatile
  3802                           
  3803                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  3804  00189E  0E28               	movlw	40
  3805  0018A0  6EC6               	movwf	4038,c	;volatile
  3806                           
  3807                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  3808  0018A2  0E00               	movlw	0
  3809  0018A4  6EC5               	movwf	4037,c	;volatile
  3810                           
  3811                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  3812  0018A6  0E00               	movlw	0
  3813  0018A8  6E29               	movwf	___lldiv@dividend,c
  3814  0018AA  0E5A               	movlw	90
  3815  0018AC  6E2A               	movwf	___lldiv@dividend+1,c
  3816  0018AE  0E62               	movlw	98
  3817  0018B0  6E2B               	movwf	___lldiv@dividend+2,c
  3818  0018B2  0E02               	movlw	2
  3819  0018B4  6E2C               	movwf	___lldiv@dividend+3,c
  3820  0018B6  C036  F03A         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  3821  0018BA  C037  F03B         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  3822  0018BE  C038  F03C         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  3823  0018C2  C039  F03D         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  3824  0018C6  0E02               	movlw	2
  3825  0018C8                     u605:
  3826  0018C8  90D8               	bcf	status,0,c
  3827  0018CA  363A               	rlcf	??_I2C_Master_Init,f,c
  3828  0018CC  363B               	rlcf	??_I2C_Master_Init+1,f,c
  3829  0018CE  363C               	rlcf	??_I2C_Master_Init+2,f,c
  3830  0018D0  363D               	rlcf	??_I2C_Master_Init+3,f,c
  3831  0018D2  2EE8               	decfsz	wreg,f,c
  3832  0018D4  D7F9               	goto	u605
  3833  0018D6  C03A  F02D         	movff	??_I2C_Master_Init,___lldiv@divisor
  3834  0018DA  C03B  F02E         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3835  0018DE  C03C  F02F         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3836  0018E2  C03D  F030         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3837  0018E6  ECCA  F00B         	call	___lldiv	;wreg free
  3838  0018EA  0429               	decf	?___lldiv,w,c
  3839  0018EC  6EC8               	movwf	4040,c	;volatile
  3840  0018EE  0012               	return		;funcret
  3841  0018F0                     __end_of_I2C_Master_Init:
  3842                           	opt stack 0
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           intcon	equ	0xFF2
  3850                           postinc0	equ	0xFEE
  3851                           wreg	equ	0xFE8
  3852                           postinc2	equ	0xFDE
  3853                           postdec2	equ	0xFDD
  3854                           fsr2h	equ	0xFDA
  3855                           fsr2l	equ	0xFD9
  3856                           status	equ	0xFD8
  3857                           
  3858 ;; *************** function ___lldiv *****************
  3859 ;; Defined at:
  3860 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  dividend        4    0[COMRAM] unsigned long 
  3863 ;;  divisor         4    4[COMRAM] unsigned long 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  quotient        4    8[COMRAM] unsigned long 
  3866 ;;  counter         1   12[COMRAM] unsigned char 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  4    0[COMRAM] unsigned long 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3876 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;Total ram usage:       13 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; This function calls:
  3883 ;;		Nothing
  3884 ;; This function is called by:
  3885 ;;		_I2C_Master_Init
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	text23
  3890  001794                     __ptext23:
  3891                           	opt stack 0
  3892  001794                     ___lldiv:
  3893                           	opt stack 28
  3894                           
  3895                           ;incstack = 0
  3896  001794  0E00               	movlw	0
  3897  001796  6E31               	movwf	___lldiv@quotient,c
  3898  001798  0E00               	movlw	0
  3899  00179A  6E32               	movwf	___lldiv@quotient+1,c
  3900  00179C  0E00               	movlw	0
  3901  00179E  6E33               	movwf	___lldiv@quotient+2,c
  3902  0017A0  0E00               	movlw	0
  3903  0017A2  6E34               	movwf	___lldiv@quotient+3,c
  3904  0017A4  502D               	movf	___lldiv@divisor,w,c
  3905  0017A6  102E               	iorwf	___lldiv@divisor+1,w,c
  3906  0017A8  102F               	iorwf	___lldiv@divisor+2,w,c
  3907  0017AA  1030               	iorwf	___lldiv@divisor+3,w,c
  3908  0017AC  B4D8               	btfsc	status,2,c
  3909  0017AE  D02A               	goto	l710
  3910  0017B0  0E01               	movlw	1
  3911  0017B2  6E35               	movwf	___lldiv@counter,c
  3912  0017B4  D006               	goto	l705
  3913  0017B6  90D8               	bcf	status,0,c
  3914  0017B8  362D               	rlcf	___lldiv@divisor,f,c
  3915  0017BA  362E               	rlcf	___lldiv@divisor+1,f,c
  3916  0017BC  362F               	rlcf	___lldiv@divisor+2,f,c
  3917  0017BE  3630               	rlcf	___lldiv@divisor+3,f,c
  3918  0017C0  2A35               	incf	___lldiv@counter,f,c
  3919  0017C2                     l705:
  3920  0017C2  AE30               	btfss	___lldiv@divisor+3,7,c
  3921  0017C4  D7F8               	goto	l706
  3922  0017C6                     u580:
  3923  0017C6  90D8               	bcf	status,0,c
  3924  0017C8  3631               	rlcf	___lldiv@quotient,f,c
  3925  0017CA  3632               	rlcf	___lldiv@quotient+1,f,c
  3926  0017CC  3633               	rlcf	___lldiv@quotient+2,f,c
  3927  0017CE  3634               	rlcf	___lldiv@quotient+3,f,c
  3928  0017D0  502D               	movf	___lldiv@divisor,w,c
  3929  0017D2  5C29               	subwf	___lldiv@dividend,w,c
  3930  0017D4  502E               	movf	___lldiv@divisor+1,w,c
  3931  0017D6  582A               	subwfb	___lldiv@dividend+1,w,c
  3932  0017D8  502F               	movf	___lldiv@divisor+2,w,c
  3933  0017DA  582B               	subwfb	___lldiv@dividend+2,w,c
  3934  0017DC  5030               	movf	___lldiv@divisor+3,w,c
  3935  0017DE  582C               	subwfb	___lldiv@dividend+3,w,c
  3936  0017E0  A0D8               	btfss	status,0,c
  3937  0017E2  D009               	goto	l709
  3938  0017E4  502D               	movf	___lldiv@divisor,w,c
  3939  0017E6  5E29               	subwf	___lldiv@dividend,f,c
  3940  0017E8  502E               	movf	___lldiv@divisor+1,w,c
  3941  0017EA  5A2A               	subwfb	___lldiv@dividend+1,f,c
  3942  0017EC  502F               	movf	___lldiv@divisor+2,w,c
  3943  0017EE  5A2B               	subwfb	___lldiv@dividend+2,f,c
  3944  0017F0  5030               	movf	___lldiv@divisor+3,w,c
  3945  0017F2  5A2C               	subwfb	___lldiv@dividend+3,f,c
  3946  0017F4  8031               	bsf	___lldiv@quotient,0,c
  3947  0017F6                     l709:
  3948  0017F6  90D8               	bcf	status,0,c
  3949  0017F8  3230               	rrcf	___lldiv@divisor+3,f,c
  3950  0017FA  322F               	rrcf	___lldiv@divisor+2,f,c
  3951  0017FC  322E               	rrcf	___lldiv@divisor+1,f,c
  3952  0017FE  322D               	rrcf	___lldiv@divisor,f,c
  3953  001800  2E35               	decfsz	___lldiv@counter,f,c
  3954  001802  D7E1               	goto	u580
  3955  001804                     l710:
  3956  001804  C031  F029         	movff	___lldiv@quotient,?___lldiv
  3957  001808  C032  F02A         	movff	___lldiv@quotient+1,?___lldiv+1
  3958  00180C  C033  F02B         	movff	___lldiv@quotient+2,?___lldiv+2
  3959  001810  C034  F02C         	movff	___lldiv@quotient+3,?___lldiv+3
  3960  001814  0012               	return		;funcret
  3961  001816                     __end_of___lldiv:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           tblptrh	equ	0xFF7
  3965                           tblptrl	equ	0xFF6
  3966                           tablat	equ	0xFF5
  3967                           prodh	equ	0xFF4
  3968                           prodl	equ	0xFF3
  3969                           intcon	equ	0xFF2
  3970                           postinc0	equ	0xFEE
  3971                           wreg	equ	0xFE8
  3972                           postinc2	equ	0xFDE
  3973                           postdec2	equ	0xFDD
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           tblptru	equ	0xFF8
  3978                           tblptrh	equ	0xFF7
  3979                           tblptrl	equ	0xFF6
  3980                           tablat	equ	0xFF5
  3981                           prodh	equ	0xFF4
  3982                           prodl	equ	0xFF3
  3983                           intcon	equ	0xFF2
  3984                           postinc0	equ	0xFEE
  3985                           wreg	equ	0xFE8
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992                           	psect	rparam
  3993  0000                     tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           intcon	equ	0xFF2
  4000                           postinc0	equ	0xFEE
  4001                           wreg	equ	0xFE8
  4002                           postinc2	equ	0xFDE
  4003                           postdec2	equ	0xFDD
  4004                           fsr2h	equ	0xFDA
  4005                           fsr2l	equ	0xFD9
  4006                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    36
    Data        2
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      68
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_24(CODE[18]), STR_23(CODE[17]), STR_22(CODE[15]), STR_21(CODE[16]), 
		 -> STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), 
		 -> STR_16(CODE[11]), STR_15(CODE[10]), STR_14(CODE[8]), STR_13(CODE[9]), 
		 -> STR_12(CODE[5]), STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[5]), 
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[5]), STR_5(CODE[3]), 
		 -> STR_4(CODE[3]), STR_3(CODE[5]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _motorStop_3->_I2C_Master_Init
    _motorStop_2->_I2C_Master_Init
    _motorStop_1->_I2C_Master_Init
    _motorStop_0->_I2C_Master_Init
    _motorStart_3->_I2C_Master_Init
    _motorStart_2->_I2C_Master_Init
    _motorStart_1->_I2C_Master_Init
    _motorStart_0->_I2C_Master_Init
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _i2cArduino->_I2C_Master_Init
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30995
                                             24 COMRAM     2     2      0
                         _i2cArduino
                            _initLCD
                            _lcdInst
                       _motorStart_0
                       _motorStart_1
                       _motorStart_2
                       _motorStart_3
                        _motorStop_0
                        _motorStop_1
                        _motorStop_2
                        _motorStop_3
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    2925
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _motorStop_3                                          0     0      0    3094
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStop_2                                          0     0      0    3094
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStop_1                                          0     0      0    3094
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStop_0                                          0     0      0    3094
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_3                                         0     0      0    3094
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_2                                         0     0      0    3094
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_1                                         0     0      0    3094
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _motorStart_0                                         0     0      0    3094
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _i2cArduino                                           1     1      0    3116
                                             21 COMRAM     1     1      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2074
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1020
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _i2cArduino
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _motorStart_0
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStart_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStart_2
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStart_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_0
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_1
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_2
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _motorStop_3
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1A      44       1       53.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      44      34        0.0%
DATA                 0      0      44       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 23 22:47:22 2018

                          _i 0001                           u15 1850                           u16 1852  
                         u25 1890                           u26 1892                  __CFG_CPD$ON 000000  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l151 1186  
                        l143 10AA                          l152 119A                          l161 12E4  
                        l153 11DA                          l170 148A                          l162 12F8  
                        l146 10C6                          l171 14A6                          l163 133E  
                        l147 10DA                          l172 14C2                          l156 1232  
                        l148 112E                          l173 14F8                          l157 1246  
                        l350 1772                          l174 152E                          l166 1432  
                        l158 128C                          l351 172A                          l343 16BA  
                        l175 1564                          l167 1452                          l336 1680  
                        l168 15BC                          l176 159A                          l345 16E2  
                        l337 1690                          l185 1C82                          l169 146E  
                        l349 1724                          l710 1804                          l705 17C2  
                        l706 17B6                          l709 17F6                          l762 192E  
                        l763 1938                          l772 1C56                          l773 1C60  
                        l758 190E                          l759 1906                          l768 1C3E  
                        l769 1C36                 __CFG_CPB$OFF 000000                          u620 1912  
                        u605 18C8                          u710 1712                          u650 1C42  
                        u730 177A                          u580 17C6                          u967 10B6  
                        u977 10E6                          u987 1124                          u997 1148  
                        _max 0043                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1730 10DA                         l1652 16E6  
                       l1812 12F8                         l1902 14F8                         l1726 10C6  
                       l1912 152E                         l1808 12E4                         l1760 119A  
                       l1922 1564                         l1932 159A                         l1756 1186  
                       l1782 1232                         l1786 1246                         _ADON 007E10  
                       STR_1 1045                         STR_2 1045                         STR_3 1067  
                       STR_4 1045                         STR_5 1045                         STR_6 1067  
                       STR_7 1045                         STR_8 1045                         STR_9 1067  
                       u1007 1176                         u1017 11CE                         u1107 13BA  
                       u1027 11F4                         u1117 13E8                         u1037 1222  
                       u1207 1CF0                         u1127 1416                         u1047 127E  
                       u1217 1838                         u1137 15DE                         u1057 12A6  
                       u1227 1842                         u1147 160C                         u1067 12D4  
                       u1237 1878                         u1157 163A                         u1077 1330  
                       _LATA 000F89                         _LATB 000F8A                         u1247 1882  
                       u1167 1668                         u1087 1358                         _LATC 000F8B  
                       _LATD 000F8C                         u1177 1CDC                         u1097 138C  
                       _LATE 000F8D                         u1187 1948                         u1197 197C  
                       _main 106E                         _keys 1001                         fsr2h 000FDA  
                       fsr2l 000FD9                         prodh 000FF4                         prodl 000FF3  
                       start 0000                __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000  
               ___param_bank 000000             __end_of_LCD_LEFT 1020             ?_I2C_Master_Init 0036  
           ?_I2C_Master_Wait 0029             ?_I2C_Master_Stop 0029                        ?_main 0029  
                      STR_10 1045                        STR_11 1045                        STR_20 1045  
                      STR_12 1067                        STR_13 104F                        STR_21 1048  
                      STR_14 105F                        STR_22 1058                        STR_15 103E  
                      STR_23 1037                        STR_16 102C                        STR_24 1025  
                      STR_17 1045                        STR_18 1045                        STR_19 1045  
            __end_of___lldiv 1816              __end_of___lwdiv 1942              __end_of___lwmod 1C6A  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 1CF8                _N_spacingTime 0011  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000                   _i2cArduino 1BDE  
            __end_of_readADC 1CA2              __end_of_initLCD 198E               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 101C                        _array 101C                        _state 0025  
                      _putch 1CD0                        tablat 000FF5            _LCDinterruptState 0028  
                      status 000FD8               __CFG_PBADEN$ON 000000              __initialization 1CA2  
               __end_of_main 1676                 __end_of_keys 1012               __CFG_OSC$HSPLL 000000  
          __end_of_LCD_RIGHT 1021                       ??_main 0041                __activetblptr 000002  
          ?_I2C_Master_Start 0029            ?_I2C_Master_Write 002A           ??_I2C_Master_Start 002A  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 002C  
  i2cArduino@char_to_arduino 003E                       _ADRESH 000FC4                       _ADRESL 000FC3  
                     ?_putch 0029                       _INT1IE 007F83                       _OSCCON 000FD3  
                     _SSPADD 000FC8                       _SSPBUF 000FC9                       _B_done 000B  
                     _N_done 0009                       _S_done 0007               __CFG_XINST$OFF 000000  
                     _W_done 0005               __CFG_STVREN$ON 000000                    ??___lldiv 0031  
                  ??___lwdiv 002D                    ??___lwmod 0034                       clear_0 1CC0  
               ?_motorStop_0 0029                 ?_motorStop_1 0029                 ?_motorStop_2 0029  
               ?_motorStop_3 0029                    ??_lcdInst 002B                       _printf 1676  
                  ??_readADC 002B                    ??_initLCD 002C                 __pdataCOMRAM 0043  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                  ?_i2cArduino 0029                   __accesstop 0080  
    __end_of__initialization 1CC6                ___rparam_used 000001               __pcstackCOMRAM 0029  
              __end_of_array 101F                __end_of_putch 1CE4                _B_spacingTime 0013  
         __size_of_lcdNibble 007E                      ??_putch 002B          __size_of_i2cArduino 004A  
                    ?_printf 0035         lcd@LCDinterruptState 0027                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 1894  
                    __Hparam 0000                      __Lparam 0000                      ___lldiv 1794  
                    ___lwdiv 18F0                      ___lwmod 1C28                 __psmallconst 1000  
                    __pcinit 1CA2                      __ramtop 1000                      _lcdInst 1CE4  
                    __ptext0 106E                      __ptext1 1C6A                      __ptext2 1676  
                    __ptext3 1CD0                      __ptext4 1C28                      __ptext5 18F0  
                    __ptext6 198E                      __ptext7 19D8                      __ptext8 1A22  
                    __ptext9 1A6C              __size_of_printf 011E                      _readADC 1C6A  
                    _initLCD 1942         __size_of_motorStop_0 004A         __size_of_motorStop_1 004A  
       __size_of_motorStop_2 004A         __size_of_motorStop_3 004A                      _dpowers 1012  
              ?_motorStart_0 0029                ?_motorStart_1 0029                ?_motorStart_2 0029  
              ?_motorStart_3 0029                    _LCD_RIGHT 1020     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008                _S_spacingTime 000F  
       end_of_initialization 1CC6        __end_of_LCD_SIZE_HORZ 1023        __end_of_LCD_SIZE_VERT 1022  
              __Lmediumconst 0000    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 002D              ___lldiv@counter 0035                      printf@c 0040  
                    printf@f 0035                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               ??_motorStart_0 003E               ??_motorStart_1 003E  
             ??_motorStart_2 003E               ??_motorStart_3 003E                    _TRISCbits 000F94  
                  _TRISDbits 000F95                 ??_i2cArduino 003E                    _B_counter 0023  
         __end_of_i2cArduino 1C28                __pidataCOMRAM 1D24               __end_of_printf 1794  
                  _N_counter 0021          start_initialization 1CA2                    _S_counter 001F  
          ??_I2C_Master_Init 003A            ??_I2C_Master_Wait 0029            ??_I2C_Master_Stop 002A  
                  _W_counter 001D     I2C_Master_Init@clockFreq 0036             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 0039                _analog_result 0003                  __pbssCOMRAM 0001  
           _I2C_Master_Start 1D1C             _I2C_Master_Write 1D0A         __end_of_motorStart_0 1BDE  
       __end_of_motorStart_1 1B94         __end_of_motorStart_2 1B4A         __end_of_motorStart_3 1B00  
           ___lwdiv@dividend 0029            __CFG_CCP2MX$PORTC 000000                    _lcdNibble 1816  
                   ?___lldiv 0029                     ?___lwdiv 0029                     ?___lwmod 0030  
                   ?_lcdInst 0029                     ?_readADC 0029                     ?_initLCD 0029  
                __smallconst 1000             ___lwdiv@quotient 002D                _W_spacingTime 000D  
             __size_of_putch 0014                     _LCD_LEFT 101F                     _LATDbits 000F8C  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0029                ??_motorStop_0 003E  
              ??_motorStop_1 003E                ??_motorStop_2 003E                ??_motorStop_3 003E  
                 _ADCON0bits 000FC2                   _ADCON2bits 000FC0                lcdNibble@data 002A  
                   _B_remain 001B                   printf@flag 003C                lcdNibble@temp 0029  
                 printf@prec 003D               _LCD_HORZ_LIMIT 1024                     _N_remain 0019  
                   _S_remain 0017                     __Hrparam 0000                     __Lrparam 0000  
                   _W_remain 0015           __CFG_BOREN$SBORDIS 000000             __size_of___lldiv 0082  
           __size_of___lwdiv 0052             __size_of___lwmod 0042               readADC@channel 002D  
           __size_of_lcdInst 0014              _I2C_Master_Init 1894             __size_of_readADC 0038  
           __size_of_initLCD 004C              _I2C_Master_Wait 1CF8              _I2C_Master_Stop 1D14  
     __end_of_LCD_HORZ_LIMIT 1025          __end_of_motorStop_0 1AB6          __end_of_motorStop_1 1A6C  
        __end_of_motorStop_2 1A22          __end_of_motorStop_3 19D8              ___lwdiv@divisor 002B  
            ___lwdiv@counter 002F                     __ptext10 1AB6                     __ptext11 1B00  
                   __ptext20 1D1C                     __ptext12 1B4A                     __ptext21 1CF8  
                   __ptext13 1B94                     __ptext22 1894                     __ptext14 1942  
                   __ptext23 1794                     __ptext15 1CE4                     __ptext16 1816  
                   __ptext17 1BDE                     __ptext18 1D0A                     __ptext19 1D14  
             _LCD_VERT_LIMIT 1023        __size_of_motorStart_0 004A        __size_of_motorStart_1 004A  
      __size_of_motorStart_2 004A        __size_of_motorStart_3 004A                __size_of_main 0608  
                ??_lcdNibble 0029                    printf@val 003E  I2C_Master_Write@byteToWrite 002A  
                  putch@data 002B     __end_of_I2C_Master_Start 1D24     __end_of_I2C_Master_Write 1D14  
                 _INTCONbits 000FF2                 _motorStart_0 1B94                 _motorStart_1 1B4A  
               _motorStart_2 1B00                 _motorStart_3 1AB6       __end_of_LCD_VERT_LIMIT 1024  
              _LCD_SIZE_HORZ 1022             ___lwmod@dividend 0030                _LCD_SIZE_VERT 1021  
           ___lldiv@dividend 0029                     printf@ap 003A      __end_of_I2C_Master_Init 18F0  
    __end_of_I2C_Master_Wait 1D0A      __end_of_I2C_Master_Stop 1D1C                  lcdInst@data 002B  
                _motorStop_0 1A6C                  _motorStop_1 1A22                  _motorStop_2 19D8  
                _motorStop_3 198E             ___lldiv@quotient 0031              ___lwmod@divisor 0032  
            ___lwmod@counter 0034                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
