

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 10 13:15:10 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 1.45
    94                           ; Generated 16/11/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4620 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataCOMRAM
   129  00627C                     __pidataCOMRAM:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _motorStop_3
   133  00627C  0C                 	db	12
   134                           
   135                           ;initializer for _motorStart_3
   136  00627D  0B                 	db	11
   137                           
   138                           ;initializer for _motorStop_2
   139  00627E  0A                 	db	10
   140                           
   141                           ;initializer for _motorStart_2
   142  00627F  39                 	db	57
   143                           
   144                           ;initializer for _motorStop_1
   145  006280  38                 	db	56
   146                           
   147                           ;initializer for _motorStart_1
   148  006281  37                 	db	55
   149                           
   150                           ;initializer for _motorStop_0
   151  006282  36                 	db	54
   152                           
   153                           ;initializer for _motorStart_0
   154  006283  35                 	db	53
   155                           
   156                           	psect	idataBANK0
   157  0062A4                     __pidataBANK0:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _spacingTime
   161  0062A4  0BB8               	dw	3000
   162                           
   163                           ;initializer for _close_handle
   164  0062A6  0E                 	db	14
   165                           
   166                           ;initializer for _servo_ramp
   167  0062A7  0D                 	db	13
   168                           
   169                           ;initializer for _rotate_1compartment
   170  0062A8  31                 	db	49
   171                           
   172                           ;initializer for _rotate_gear
   173  0062A9  30                 	db	48
   174                           
   175                           	psect	idataBANK1
   176  00625E                     __pidataBANK1:
   177                           	opt stack 0
   178                           
   179                           ;initializer for _W_max
   180  00625E  0004               	dw	4
   181                           
   182                           ;initializer for _S_max
   183  006260  0004               	dw	4
   184                           
   185                           ;initializer for _N_max
   186  006262  0004               	dw	4
   187                           
   188                           ;initializer for _B_max
   189  006264  0004               	dw	4
   190                           
   191                           ;initializer for _init_position
   192  006266  0005               	dw	5
   193                           
   194                           	psect	mediumconst
   195  00FC52                     __pmediumconst:
   196                           	opt stack 0
   197  00FC52  00                 	db	0
   198  00FC53                     _keys:
   199                           	opt stack 0
   200  00FC53  31                 	db	49
   201  00FC54  32                 	db	50
   202  00FC55  33                 	db	51
   203  00FC56  41                 	db	65
   204  00FC57  34                 	db	52
   205  00FC58  35                 	db	53
   206  00FC59  36                 	db	54
   207  00FC5A  42                 	db	66
   208  00FC5B  37                 	db	55
   209  00FC5C  38                 	db	56
   210  00FC5D  39                 	db	57
   211  00FC5E  43                 	db	67
   212  00FC5F  2A                 	db	42
   213  00FC60  30                 	db	48
   214  00FC61  23                 	db	35
   215  00FC62  44                 	db	68
   216  00FC63  00                 	db	0
   217  00FC64                     __end_of_keys:
   218                           	opt stack 0
   219  00FC64                     _dpowers:
   220                           	opt stack 0
   221  00FC64  0001               	dw	1
   222  00FC66  000A               	dw	10
   223  00FC68  0064               	dw	100
   224  00FC6A  03E8               	dw	1000
   225  00FC6C  2710               	dw	10000
   226  00FC6E                     __end_of_dpowers:
   227                           	opt stack 0
   228  00FC6E                     _hexpowers:
   229                           	opt stack 0
   230  00FC6E  0001               	dw	1
   231  00FC70  0010               	dw	16
   232  00FC72  0100               	dw	256
   233  00FC74  1000               	dw	4096
   234  00FC76                     __end_of_hexpowers:
   235                           	opt stack 0
   236  00FC76                     _happynewyear:
   237                           	opt stack 0
   238  00FC76  45                 	db	69
   239  00FC77  14                 	db	20
   240  00FC78  14                 	db	20
   241  00FC79  00                 	db	0
   242  00FC7A  11                 	db	17
   243  00FC7B  03                 	db	3
   244  00FC7C  18                 	db	24
   245  00FC7D                     __end_of_happynewyear:
   246                           	opt stack 0
   247  00FC7D                     _VIOLET:
   248                           	opt stack 0
   249  00FC7D  00D3               	dw	211
   250  00FC7F  0094               	dw	148
   251  00FC81                     __end_of_VIOLET:
   252                           	opt stack 0
   253  00FC81                     _INDIGO:
   254                           	opt stack 0
   255  00FC81  0082               	dw	130
   256  00FC83  004B               	dw	75
   257  00FC85                     __end_of_INDIGO:
   258                           	opt stack 0
   259  00FC85                     _BLUE:
   260                           	opt stack 0
   261  00FC85  00FF               	dw	255
   262  00FC87  0000               	dw	0
   263  00FC89                     __end_of_BLUE:
   264                           	opt stack 0
   265  00FC89                     _GREEN:
   266                           	opt stack 0
   267  00FC89  FF00               	dw	65280
   268  00FC8B  0000               	dw	0
   269  00FC8D                     __end_of_GREEN:
   270                           	opt stack 0
   271  00FC8D                     _YELLOW:
   272                           	opt stack 0
   273  00FC8D  FF00               	dw	65280
   274  00FC8F  00FF               	dw	255
   275  00FC91                     __end_of_YELLOW:
   276                           	opt stack 0
   277  00FC91                     _ORANGE:
   278                           	opt stack 0
   279  00FC91  8C00               	dw	35840
   280  00FC93  00FF               	dw	255
   281  00FC95                     __end_of_ORANGE:
   282                           	opt stack 0
   283  00FC95                     _RED:
   284                           	opt stack 0
   285  00FC95  0000               	dw	0
   286  00FC97  00FF               	dw	255
   287  00FC99                     __end_of_RED:
   288                           	opt stack 0
   289  00FC99                     _WHITE:
   290                           	opt stack 0
   291  00FC99  FFFF               	dw	65535
   292  00FC9B  00FF               	dw	255
   293  00FC9D                     __end_of_WHITE:
   294                           	opt stack 0
   295  00FC9D                     _GREY:
   296                           	opt stack 0
   297  00FC9D  8080               	dw	32896
   298  00FC9F  0080               	dw	128
   299  00FCA1                     __end_of_GREY:
   300                           	opt stack 0
   301  00FCA1                     _BLACK:
   302                           	opt stack 0
   303  00FCA1  0000               	dw	0
   304  00FCA3  0000               	dw	0
   305  00FCA5                     __end_of_BLACK:
   306                           	opt stack 0
   307  00FCA5                     _array:
   308                           	opt stack 0
   309  00FCA5  30                 	db	48
   310  00FCA6  31                 	db	49
   311  00FCA7  00                 	db	0
   312  00FCA8                     __end_of_array:
   313                           	opt stack 0
   314  00FCA8  C7                 	db	199
   315  00FCA9                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   316                           	opt stack 0
   317  00FCA9                     GLCD_PIC@INST_VMCTR1:
   318                           	opt stack 0
   319  00FCA9  C5                 	db	197
   320  00FCAA                     __end_ofGLCD_PIC@INST_VMCTR1:
   321                           	opt stack 0
   322  00FCAA                     GLCD_PIC@INST_PWCTR5:
   323                           	opt stack 0
   324  00FCAA  C4                 	db	196
   325  00FCAB                     __end_ofGLCD_PIC@INST_PWCTR5:
   326                           	opt stack 0
   327  00FCAB                     GLCD_PIC@INST_PWCTR4:
   328                           	opt stack 0
   329  00FCAB  C3                 	db	195
   330  00FCAC                     __end_ofGLCD_PIC@INST_PWCTR4:
   331                           	opt stack 0
   332  00FCAC                     GLCD_PIC@INST_PWCTR3:
   333                           	opt stack 0
   334  00FCAC  C2                 	db	194
   335  00FCAD                     __end_ofGLCD_PIC@INST_PWCTR3:
   336                           	opt stack 0
   337  00FCAD                     GLCD_PIC@INST_PWCTR2:
   338                           	opt stack 0
   339  00FCAD  C1                 	db	193
   340  00FCAE                     __end_ofGLCD_PIC@INST_PWCTR2:
   341                           	opt stack 0
   342  00FCAE                     GLCD_PIC@INST_PWCTR1:
   343                           	opt stack 0
   344  00FCAE  C0                 	db	192
   345  00FCAF                     __end_ofGLCD_PIC@INST_PWCTR1:
   346                           	opt stack 0
   347  00FCAF                     GLCD_PIC@INST_INVCTR:
   348                           	opt stack 0
   349  00FCAF  B4                 	db	180
   350  00FCB0                     __end_ofGLCD_PIC@INST_INVCTR:
   351                           	opt stack 0
   352  00FCB0                     GLCD_PIC@INST_FRMCTR3:
   353                           	opt stack 0
   354  00FCB0  B3                 	db	179
   355  00FCB1                     __end_ofGLCD_PIC@INST_FRMCTR3:
   356                           	opt stack 0
   357  00FCB1                     GLCD_PIC@INST_FRMCTR2:
   358                           	opt stack 0
   359  00FCB1  B2                 	db	178
   360  00FCB2                     __end_ofGLCD_PIC@INST_FRMCTR2:
   361                           	opt stack 0
   362  00FCB2                     GLCD_PIC@INST_FRMCTR1:
   363                           	opt stack 0
   364  00FCB2  B1                 	db	177
   365  00FCB3                     __end_ofGLCD_PIC@INST_FRMCTR1:
   366                           	opt stack 0
   367  00FCB3                     GLCD_PIC@INST_COLMOD:
   368                           	opt stack 0
   369  00FCB3  3A                 	db	58
   370  00FCB4                     __end_ofGLCD_PIC@INST_COLMOD:
   371                           	opt stack 0
   372  00FCB4  39                 	db	57
   373  00FCB5                     __end_ofGLCD_PIC@INST_IDMON:
   374                           	opt stack 0
   375  00FCB5                     GLCD_PIC@INST_IDMOFF:
   376                           	opt stack 0
   377  00FCB5  38                 	db	56
   378  00FCB6                     __end_ofGLCD_PIC@INST_IDMOFF:
   379                           	opt stack 0
   380  00FCB6                     GLCD_PIC@INST_MADCTL:
   381                           	opt stack 0
   382  00FCB6  36                 	db	54
   383  00FCB7                     __end_ofGLCD_PIC@INST_MADCTL:
   384                           	opt stack 0
   385  00FCB7  35                 	db	53
   386  00FCB8                     __end_ofGLCD_PIC@INST_TEON:
   387                           	opt stack 0
   388  00FCB8  34                 	db	52
   389  00FCB9                     __end_ofGLCD_PIC@INST_TEOFF:
   390                           	opt stack 0
   391  00FCB9  30                 	db	48
   392  00FCBA                     __end_ofGLCD_PIC@INST_PTLAR:
   393                           	opt stack 0
   394  00FCBA                     GLCD_PIC@INST_RAMWR:
   395                           	opt stack 0
   396  00FCBA  2C                 	db	44
   397  00FCBB                     __end_ofGLCD_PIC@INST_RAMWR:
   398                           	opt stack 0
   399  00FCBB                     GLCD_PIC@INST_RASET:
   400                           	opt stack 0
   401  00FCBB  2B                 	db	43
   402  00FCBC                     __end_ofGLCD_PIC@INST_RASET:
   403                           	opt stack 0
   404  00FCBC                     GLCD_PIC@INST_CASET:
   405                           	opt stack 0
   406  00FCBC  2A                 	db	42
   407  00FCBD                     __end_ofGLCD_PIC@INST_CASET:
   408                           	opt stack 0
   409  00FCBD                     GLCD_PIC@INST_DISPON:
   410                           	opt stack 0
   411  00FCBD  29                 	db	41
   412  00FCBE                     __end_ofGLCD_PIC@INST_DISPON:
   413                           	opt stack 0
   414  00FCBE  28                 	db	40
   415  00FCBF                     __end_ofGLCD_PIC@INST_DISPOFF:
   416                           	opt stack 0
   417  00FCBF                     GLCD_PIC@INST_GAMSET:
   418                           	opt stack 0
   419  00FCBF  26                 	db	38
   420  00FCC0                     __end_ofGLCD_PIC@INST_GAMSET:
   421                           	opt stack 0
   422  00FCC0  21                 	db	33
   423  00FCC1                     __end_ofGLCD_PIC@INST_INVON:
   424                           	opt stack 0
   425  00FCC1                     GLCD_PIC@INST_INVOFF:
   426                           	opt stack 0
   427  00FCC1  20                 	db	32
   428  00FCC2                     __end_ofGLCD_PIC@INST_INVOFF:
   429                           	opt stack 0
   430  00FCC2                     GLCD_PIC@INST_NORON:
   431                           	opt stack 0
   432  00FCC2  13                 	db	19
   433  00FCC3                     __end_ofGLCD_PIC@INST_NORON:
   434                           	opt stack 0
   435  00FCC3  12                 	db	18
   436  00FCC4                     __end_ofGLCD_PIC@INST_PTLON:
   437                           	opt stack 0
   438  00FCC4                     GLCD_PIC@INST_SLPOUT:
   439                           	opt stack 0
   440  00FCC4  11                 	db	17
   441  00FCC5                     __end_ofGLCD_PIC@INST_SLPOUT:
   442                           	opt stack 0
   443  00FCC5  10                 	db	16
   444  00FCC6                     __end_ofGLCD_PIC@INST_SLPIN:
   445                           	opt stack 0
   446  00FCC6                     GLCD_PIC@INST_SWRESET:
   447                           	opt stack 0
   448  00FCC6  01                 	db	1
   449  00FCC7                     __end_ofGLCD_PIC@INST_SWRESET:
   450                           	opt stack 0
   451  00FCC7  00                 	db	0
   452  00FCC8                     __end_ofGLCD_PIC@INST_NOP:
   453                           	opt stack 0
   454  00FCC8  C7                 	db	199
   455  00FCC9                     __end_of_INST_VMOFCTR2:
   456                           	opt stack 0
   457  00FCC9  C5                 	db	197
   458  00FCCA                     __end_of_INST_VMCTR1:
   459                           	opt stack 0
   460  00FCCA  C4                 	db	196
   461  00FCCB                     __end_of_INST_PWCTR5:
   462                           	opt stack 0
   463  00FCCB  C3                 	db	195
   464  00FCCC                     __end_of_INST_PWCTR4:
   465                           	opt stack 0
   466  00FCCC  C2                 	db	194
   467  00FCCD                     __end_of_INST_PWCTR3:
   468                           	opt stack 0
   469  00FCCD  C1                 	db	193
   470  00FCCE                     __end_of_INST_PWCTR2:
   471                           	opt stack 0
   472  00FCCE  C0                 	db	192
   473  00FCCF                     __end_of_INST_PWCTR1:
   474                           	opt stack 0
   475  00FCCF  B4                 	db	180
   476  00FCD0                     __end_of_INST_INVCTR:
   477                           	opt stack 0
   478  00FCD0  B3                 	db	179
   479  00FCD1                     __end_of_INST_FRMCTR3:
   480                           	opt stack 0
   481  00FCD1  B2                 	db	178
   482  00FCD2                     __end_of_INST_FRMCTR2:
   483                           	opt stack 0
   484  00FCD2  B1                 	db	177
   485  00FCD3                     __end_of_INST_FRMCTR1:
   486                           	opt stack 0
   487  00FCD3  3A                 	db	58
   488  00FCD4                     __end_of_INST_COLMOD:
   489                           	opt stack 0
   490  00FCD4  39                 	db	57
   491  00FCD5                     __end_of_INST_IDMON:
   492                           	opt stack 0
   493  00FCD5  38                 	db	56
   494  00FCD6                     __end_of_INST_IDMOFF:
   495                           	opt stack 0
   496  00FCD6  36                 	db	54
   497  00FCD7                     __end_of_INST_MADCTL:
   498                           	opt stack 0
   499  00FCD7  35                 	db	53
   500  00FCD8                     __end_of_INST_TEON:
   501                           	opt stack 0
   502  00FCD8  34                 	db	52
   503  00FCD9                     __end_of_INST_TEOFF:
   504                           	opt stack 0
   505  00FCD9  30                 	db	48
   506  00FCDA                     __end_of_INST_PTLAR:
   507                           	opt stack 0
   508  00FCDA  2C                 	db	44
   509  00FCDB                     __end_of_INST_RAMWR:
   510                           	opt stack 0
   511  00FCDB  2B                 	db	43
   512  00FCDC                     __end_of_INST_RASET:
   513                           	opt stack 0
   514  00FCDC  2A                 	db	42
   515  00FCDD                     __end_of_INST_CASET:
   516                           	opt stack 0
   517  00FCDD  29                 	db	41
   518  00FCDE                     __end_of_INST_DISPON:
   519                           	opt stack 0
   520  00FCDE  28                 	db	40
   521  00FCDF                     __end_of_INST_DISPOFF:
   522                           	opt stack 0
   523  00FCDF  26                 	db	38
   524  00FCE0                     __end_of_INST_GAMSET:
   525                           	opt stack 0
   526  00FCE0  21                 	db	33
   527  00FCE1                     __end_of_INST_INVON:
   528                           	opt stack 0
   529  00FCE1  20                 	db	32
   530  00FCE2                     __end_of_INST_INVOFF:
   531                           	opt stack 0
   532  00FCE2  13                 	db	19
   533  00FCE3                     __end_of_INST_NORON:
   534                           	opt stack 0
   535  00FCE3  12                 	db	18
   536  00FCE4                     __end_of_INST_PTLON:
   537                           	opt stack 0
   538  00FCE4  11                 	db	17
   539  00FCE5                     __end_of_INST_SLPOUT:
   540                           	opt stack 0
   541  00FCE5  10                 	db	16
   542  00FCE6                     __end_of_INST_SLPIN:
   543                           	opt stack 0
   544  00FCE6  01                 	db	1
   545  00FCE7                     __end_of_INST_SWRESET:
   546                           	opt stack 0
   547  00FCE7  00                 	db	0
   548  00FCE8                     __end_of_INST_NOP:
   549                           	opt stack 0
   550  00FCE8                     _GLCD_SIZE_VERT:
   551                           	opt stack 0
   552  00FCE8  80                 	db	128
   553  00FCE9                     __end_of_GLCD_SIZE_VERT:
   554                           	opt stack 0
   555  00FCE9                     _GLCD_SIZE_HORZ:
   556                           	opt stack 0
   557  00FCE9  80                 	db	128
   558  00FCEA                     __end_of_GLCD_SIZE_HORZ:
   559                           	opt stack 0
   560  00FCEA                     _GLCD_ADDRESSABLE_SIZE_VERT:
   561                           	opt stack 0
   562  00FCEA  A0                 	db	160
   563  00FCEB                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   564                           	opt stack 0
   565  00FCEB                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   566                           	opt stack 0
   567  00FCEB  80                 	db	128
   568  00FCEC                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   569                           	opt stack 0
   570  00FCEC                     _LCD_LEFT:
   571                           	opt stack 0
   572  00FCEC  00                 	db	0
   573  00FCED                     __end_of_LCD_LEFT:
   574                           	opt stack 0
   575  00FCED                     _LCD_RIGHT:
   576                           	opt stack 0
   577  00FCED  01                 	db	1
   578  00FCEE                     __end_of_LCD_RIGHT:
   579                           	opt stack 0
   580  00FCEE                     _LCD_SIZE_VERT:
   581                           	opt stack 0
   582  00FCEE  02                 	db	2
   583  00FCEF                     __end_of_LCD_SIZE_VERT:
   584                           	opt stack 0
   585  00FCEF                     _LCD_SIZE_HORZ:
   586                           	opt stack 0
   587  00FCEF  10                 	db	16
   588  00FCF0                     __end_of_LCD_SIZE_HORZ:
   589                           	opt stack 0
   590  00FCF0                     _LCD_VERT_LIMIT:
   591                           	opt stack 0
   592  00FCF0  02                 	db	2
   593  00FCF1                     __end_of_LCD_VERT_LIMIT:
   594                           	opt stack 0
   595  00FCF1                     _LCD_HORZ_LIMIT:
   596                           	opt stack 0
   597  00FCF1  28                 	db	40
   598  00FCF2                     __end_of_LCD_HORZ_LIMIT:
   599                           	opt stack 0
   600  00FCF2                     _strs:
   601                           	opt stack 0
   602  00FCF2  42                 	db	66
   603  00FCF3  00                 	db	0
   604  00FCF4  00                 	db	0
   605  00FCF5  00                 	db	0
   606  00FCF6  00                 	db	0
   607  00FCF7  4E                 	db	78
   608  00FCF8  00                 	db	0
   609  00FCF9  00                 	db	0
   610  00FCFA  00                 	db	0
   611  00FCFB  00                 	db	0
   612  00FCFC  53                 	db	83
   613  00FCFD  00                 	db	0
   614  00FCFE  00                 	db	0
   615  00FCFF  00                 	db	0
   616  00FD00  00                 	db	0
   617  00FD01  57                 	db	87
   618  00FD02  00                 	db	0
   619  00FD03  00                 	db	0
   620  00FD04  00                 	db	0
   621  00FD05  00                 	db	0
   622  00FD06  42                 	db	66
   623  00FD07  4E                 	db	78
   624  00FD08  00                 	db	0
   625  00FD09  00                 	db	0
   626  00FD0A  00                 	db	0
   627  00FD0B  42                 	db	66
   628  00FD0C  53                 	db	83
   629  00FD0D  00                 	db	0
   630  00FD0E  00                 	db	0
   631  00FD0F  00                 	db	0
   632  00FD10  42                 	db	66
   633  00FD11  57                 	db	87
   634  00FD12  00                 	db	0
   635  00FD13  00                 	db	0
   636  00FD14  00                 	db	0
   637  00FD15  42                 	db	66
   638  00FD16  42                 	db	66
   639  00FD17  4E                 	db	78
   640  00FD18  00                 	db	0
   641  00FD19  00                 	db	0
   642  00FD1A  42                 	db	66
   643  00FD1B  42                 	db	66
   644  00FD1C  53                 	db	83
   645  00FD1D  00                 	db	0
   646  00FD1E  00                 	db	0
   647  00FD1F  42                 	db	66
   648  00FD20  42                 	db	66
   649  00FD21  57                 	db	87
   650  00FD22  00                 	db	0
   651  00FD23  00                 	db	0
   652  00FD24  42                 	db	66
   653  00FD25  4E                 	db	78
   654  00FD26  57                 	db	87
   655  00FD27  00                 	db	0
   656  00FD28  00                 	db	0
   657  00FD29  42                 	db	66
   658  00FD2A  53                 	db	83
   659  00FD2B  57                 	db	87
   660  00FD2C  00                 	db	0
   661  00FD2D  00                 	db	0
   662  00FD2E  42                 	db	66
   663  00FD2F  57                 	db	87
   664  00FD30  57                 	db	87
   665  00FD31  00                 	db	0
   666  00FD32  00                 	db	0
   667  00FD33  42                 	db	66
   668  00FD34  4E                 	db	78
   669  00FD35  57                 	db	87
   670  00FD36  57                 	db	87
   671  00FD37  00                 	db	0
   672  00FD38  42                 	db	66
   673  00FD39  53                 	db	83
   674  00FD3A  57                 	db	87
   675  00FD3B  57                 	db	87
   676  00FD3C  00                 	db	0
   677  00FD3D  42                 	db	66
   678  00FD3E  42                 	db	66
   679  00FD3F  53                 	db	83
   680  00FD40  57                 	db	87
   681  00FD41  00                 	db	0
   682  00FD42  42                 	db	66
   683  00FD43  42                 	db	66
   684  00FD44  4E                 	db	78
   685  00FD45  57                 	db	87
   686  00FD46  00                 	db	0
   687  00FD47  42                 	db	66
   688  00FD48  4E                 	db	78
   689  00FD49  4E                 	db	78
   690  00FD4A  57                 	db	87
   691  00FD4B  00                 	db	0
   692  00FD4C  42                 	db	66
   693  00FD4D  4E                 	db	78
   694  00FD4E  4E                 	db	78
   695  00FD4F  4E                 	db	78
   696  00FD50  00                 	db	0
   697  00FD51  42                 	db	66
   698  00FD52  57                 	db	87
   699  00FD53  57                 	db	87
   700  00FD54  57                 	db	87
   701  00FD55  00                 	db	0
   702  00FD56                     __end_of_strs:
   703                           	opt stack 0
   704  0000                     _SSPSTATbits	set	4039
   705  0000                     _EECON2	set	4007
   706  0000                     _EEDATA	set	4008
   707  0000                     _EEADR	set	4009
   708  0000                     _EECON1bits	set	4006
   709  0000                     _SSPBUF	set	4041
   710  0000                     _SSPCON2bits	set	4037
   711  0000                     _SSPADD	set	4040
   712  0000                     _SSPCON2	set	4037
   713  0000                     _SSPCON1	set	4038
   714  0000                     _SSPSTAT	set	4039
   715  0000                     _SSPCON1bits	set	4038
   716  0000                     _PORTAbits	set	3968
   717  0000                     _TRISAbits	set	3986
   718  0000                     _TRISDbits	set	3989
   719  0000                     _T0CONbits	set	4053
   720  0000                     _ADRESL	set	4035
   721  0000                     _ADRESH	set	4036
   722  0000                     _ADCON0bits	set	4034
   723  0000                     _PORTBbits	set	3969
   724  0000                     _PORTB	set	3969
   725  0000                     _TRISBbits	set	3987
   726  0000                     _TRISCbits	set	3988
   727  0000                     _LATCbits	set	3979
   728  0000                     _ADCON1	set	4033
   729  0000                     _ADCON0	set	4034
   730  0000                     _TRISE	set	3990
   731  0000                     _TRISD	set	3989
   732  0000                     _TRISC	set	3988
   733  0000                     _TRISB	set	3987
   734  0000                     _TRISA	set	3986
   735  0000                     _LATE	set	3981
   736  0000                     _LATC	set	3979
   737  0000                     _LATB	set	3978
   738  0000                     _LATA	set	3977
   739  0000                     _OSCTUNEbits	set	3995
   740  0000                     _OSCCONbits	set	4051
   741  0000                     _INTCONbits	set	4082
   742  0000                     _LATD	set	3980
   743  0000                     _LATDbits	set	3980
   744  0000                     _SSPIF	set	31987
   745  0000                     _ADON	set	32272
   746  0000                     _TMR0IF	set	32658
   747  0000                     _TMR0IE	set	32661
   748  0000                     _RBIF	set	32656
   749  0000                     _INT1IF	set	32640
   750  0000                     _RBIE	set	32659
   751  0000                     _INT1IE	set	32643
   752  00FD56                     STR_70:
   753  00FD56  42                 	db	66	;'B'
   754  00FD57  3A                 	db	58	;':'
   755  00FD58  25                 	db	37
   756  00FD59  64                 	db	100	;'d'
   757  00FD5A  2C                 	db	44
   758  00FD5B  4E                 	db	78	;'N'
   759  00FD5C  3A                 	db	58	;':'
   760  00FD5D  25                 	db	37
   761  00FD5E  64                 	db	100	;'d'
   762  00FD5F  2C                 	db	44
   763  00FD60  53                 	db	83	;'S'
   764  00FD61  3A                 	db	58	;':'
   765  00FD62  25                 	db	37
   766  00FD63  64                 	db	100	;'d'
   767  00FD64  2C                 	db	44
   768  00FD65  57                 	db	87	;'W'
   769  00FD66  3A                 	db	58	;':'
   770  00FD67  25                 	db	37
   771  00FD68  64                 	db	100	;'d'
   772  00FD69  00                 	db	0
   773  00FD6A                     STR_2:
   774  00FD6A  32                 	db	50	;'2'
   775  00FD6B  3A                 	db	58	;':'
   776  00FD6C  45                 	db	69	;'E'
   777  00FD6D  6E                 	db	110	;'n'
   778  00FD6E  74                 	db	116	;'t'
   779  00FD6F  65                 	db	101	;'e'
   780  00FD70  72                 	db	114	;'r'
   781  00FD71  20                 	db	32
   782  00FD72  49                 	db	73	;'I'
   783  00FD73  6E                 	db	110	;'n'
   784  00FD74  73                 	db	115	;'s'
   785  00FD75  74                 	db	116	;'t'
   786  00FD76  72                 	db	114	;'r'
   787  00FD77  75                 	db	117	;'u'
   788  00FD78  63                 	db	99	;'c'
   789  00FD79  74                 	db	116	;'t'
   790  00FD7A  69                 	db	105	;'i'
   791  00FD7B  6F                 	db	111	;'o'
   792  00FD7C  6E                 	db	110	;'n'
   793  00FD7D  00                 	db	0
   794  00FD7E                     STR_63:
   795  00FD7E  73                 	db	115	;'s'
   796  00FD7F  70                 	db	112	;'p'
   797  00FD80  61                 	db	97	;'a'
   798  00FD81  63                 	db	99	;'c'
   799  00FD82  65                 	db	101	;'e'
   800  00FD83  72                 	db	114	;'r'
   801  00FD84  5F                 	db	95	;'_'
   802  00FD85  69                 	db	105	;'i'
   803  00FD86  6E                 	db	110	;'n'
   804  00FD87  74                 	db	116	;'t'
   805  00FD88  65                 	db	101	;'e'
   806  00FD89  72                 	db	114	;'r'
   807  00FD8A  72                 	db	114	;'r'
   808  00FD8B  75                 	db	117	;'u'
   809  00FD8C  70                 	db	112	;'p'
   810  00FD8D  74                 	db	116	;'t'
   811  00FD8E  65                 	db	101	;'e'
   812  00FD8F  64                 	db	100	;'d'
   813  00FD90  00                 	db	0
   814  00FD91                     STR_64:
   815  00FD91  77                 	db	119	;'w'
   816  00FD92  61                 	db	97	;'a'
   817  00FD93  73                 	db	115	;'s'
   818  00FD94  68                 	db	104	;'h'
   819  00FD95  65                 	db	101	;'e'
   820  00FD96  72                 	db	114	;'r'
   821  00FD97  5F                 	db	95	;'_'
   822  00FD98  69                 	db	105	;'i'
   823  00FD99  6E                 	db	110	;'n'
   824  00FD9A  74                 	db	116	;'t'
   825  00FD9B  65                 	db	101	;'e'
   826  00FD9C  72                 	db	114	;'r'
   827  00FD9D  72                 	db	114	;'r'
   828  00FD9E  75                 	db	117	;'u'
   829  00FD9F  70                 	db	112	;'p'
   830  00FDA0  74                 	db	116	;'t'
   831  00FDA1  65                 	db	101	;'e'
   832  00FDA2  64                 	db	100	;'d'
   833  00FDA3  00                 	db	0
   834  00FDA4                     STR_28:
   835  00FDA4  20                 	db	32
   836  00FDA5  32                 	db	50	;'2'
   837  00FDA6  3A                 	db	58	;':'
   838  00FDA7  20                 	db	32
   839  00FDA8  4F                 	db	79	;'O'
   840  00FDA9  70                 	db	112	;'p'
   841  00FDAA  65                 	db	101	;'e'
   842  00FDAB  72                 	db	114	;'r'
   843  00FDAC  61                 	db	97	;'a'
   844  00FDAD  74                 	db	116	;'t'
   845  00FDAE  69                 	db	105	;'i'
   846  00FDAF  6F                 	db	111	;'o'
   847  00FDB0  6E                 	db	110	;'n'
   848  00FDB1  20                 	db	32
   849  00FDB2  54                 	db	84	;'T'
   850  00FDB3  69                 	db	105	;'i'
   851  00FDB4  6D                 	db	109	;'m'
   852  00FDB5  65                 	db	101	;'e'
   853  00FDB6  00                 	db	0
   854  00FDB7  50                 	db	80	;'P'
   855  00FDB8  72                 	db	114	;'r'
   856  00FDB9  6F                 	db	111	;'o'
   857  00FDBA  67                 	db	103	;'g'
   858  00FDBB  72                 	db	114	;'r'
   859  00FDBC  61                 	db	97	;'a'
   860  00FDBD  6D                 	db	109	;'m'
   861  00FDBE  20                 	db	32
   862  00FDBF  54                 	db	84	;'T'
   863  00FDC0  65                 	db	101	;'e'
   864  00FDC1  72                 	db	114	;'r'
   865  00FDC2  6D                 	db	109	;'m'
   866  00FDC3  69                 	db	105	;'i'
   867  00FDC4  6E                 	db	110	;'n'
   868  00FDC5  61                 	db	97	;'a'
   869  00FDC6  74                 	db	116	;'t'
   870  00FDC7  65                 	db	101	;'e'
   871  00FDC8  73                 	db	115	;'s'
   872  00FDC9  00                 	db	0
   873  00FDCA                     STR_14:
   874  00FDCA  50                 	db	80	;'P'
   875  00FDCB  72                 	db	114	;'r'
   876  00FDCC  65                 	db	101	;'e'
   877  00FDCD  73                 	db	115	;'s'
   878  00FDCE  73                 	db	115	;'s'
   879  00FDCF  20                 	db	32
   880  00FDD0  23                 	db	35
   881  00FDD1  20                 	db	32
   882  00FDD2  74                 	db	116	;'t'
   883  00FDD3  6F                 	db	111	;'o'
   884  00FDD4  20                 	db	32
   885  00FDD5  73                 	db	115	;'s'
   886  00FDD6  74                 	db	116	;'t'
   887  00FDD7  61                 	db	97	;'a'
   888  00FDD8  72                 	db	114	;'r'
   889  00FDD9  74                 	db	116	;'t'
   890  00FDDA  21                 	db	33
   891  00FDDB  00                 	db	0
   892  00FDDC                     STR_99:
   893  00FDDC  30                 	db	48	;'0'
   894  00FDDD  31                 	db	49	;'1'
   895  00FDDE  32                 	db	50	;'2'
   896  00FDDF  33                 	db	51	;'3'
   897  00FDE0  34                 	db	52	;'4'
   898  00FDE1  35                 	db	53	;'5'
   899  00FDE2  36                 	db	54	;'6'
   900  00FDE3  37                 	db	55	;'7'
   901  00FDE4  38                 	db	56	;'8'
   902  00FDE5  39                 	db	57	;'9'
   903  00FDE6  61                 	db	97	;'a'
   904  00FDE7  62                 	db	98	;'b'
   905  00FDE8  63                 	db	99	;'c'
   906  00FDE9  64                 	db	100	;'d'
   907  00FDEA  65                 	db	101	;'e'
   908  00FDEB  66                 	db	102	;'f'
   909  00FDEC  00                 	db	0
   910  00FDED                     STR_25:
   911  00FDED  53                 	db	83	;'S'
   912  00FDEE  70                 	db	112	;'p'
   913  00FDEF  61                 	db	97	;'a'
   914  00FDF0  63                 	db	99	;'c'
   915  00FDF1  65                 	db	101	;'e'
   916  00FDF2  72                 	db	114	;'r'
   917  00FDF3  5F                 	db	95	;'_'
   918  00FDF4  72                 	db	114	;'r'
   919  00FDF5  65                 	db	101	;'e'
   920  00FDF6  6D                 	db	109	;'m'
   921  00FDF7  61                 	db	97	;'a'
   922  00FDF8  69                 	db	105	;'i'
   923  00FDF9  6E                 	db	110	;'n'
   924  00FDFA  3A                 	db	58	;':'
   925  00FDFB  25                 	db	37
   926  00FDFC  64                 	db	100	;'d'
   927  00FDFD  00                 	db	0
   928  00FDFE                     STR_26:
   929  00FDFE  57                 	db	87	;'W'
   930  00FDFF  61                 	db	97	;'a'
   931  00FE00  73                 	db	115	;'s'
   932  00FE01  68                 	db	104	;'h'
   933  00FE02  65                 	db	101	;'e'
   934  00FE03  72                 	db	114	;'r'
   935  00FE04  5F                 	db	95	;'_'
   936  00FE05  72                 	db	114	;'r'
   937  00FE06  65                 	db	101	;'e'
   938  00FE07  6D                 	db	109	;'m'
   939  00FE08  61                 	db	97	;'a'
   940  00FE09  69                 	db	105	;'i'
   941  00FE0A  6E                 	db	110	;'n'
   942  00FE0B  3A                 	db	58	;':'
   943  00FE0C  25                 	db	37
   944  00FE0D  64                 	db	100	;'d'
   945  00FE0E  00                 	db	0
   946  00FE0F                     STR_7:
   947  00FE0F  61                 	db	97	;'a'
   948  00FE10  73                 	db	115	;'s'
   949  00FE11  73                 	db	115	;'s'
   950  00FE12  65                 	db	101	;'e'
   951  00FE13  6D                 	db	109	;'m'
   952  00FE14  62                 	db	98	;'b'
   953  00FE15  6C                 	db	108	;'l'
   954  00FE16  79                 	db	121	;'y'
   955  00FE17  20                 	db	32
   956  00FE18  73                 	db	115	;'s'
   957  00FE19  74                 	db	116	;'t'
   958  00FE1A  65                 	db	101	;'e'
   959  00FE1B  70                 	db	112	;'p'
   960  00FE1C  3A                 	db	58	;':'
   961  00FE1D  25                 	db	37
   962  00FE1E  64                 	db	100	;'d'
   963  00FE1F  00                 	db	0
   964  00FE20                     STR_27:
   965  00FE20  31                 	db	49	;'1'
   966  00FE21  3A                 	db	58	;':'
   967  00FE22  20                 	db	32
   968  00FE23  44                 	db	68	;'D'
   969  00FE24  61                 	db	97	;'a'
   970  00FE25  74                 	db	116	;'t'
   971  00FE26  65                 	db	101	;'e'
   972  00FE27  20                 	db	32
   973  00FE28  61                 	db	97	;'a'
   974  00FE29  6E                 	db	110	;'n'
   975  00FE2A  64                 	db	100	;'d'
   976  00FE2B  20                 	db	32
   977  00FE2C  54                 	db	84	;'T'
   978  00FE2D  69                 	db	105	;'i'
   979  00FE2E  6D                 	db	109	;'m'
   980  00FE2F  65                 	db	101	;'e'
   981  00FE30  00                 	db	0
   982  00FE31                     STR_35:
   983  00FE31  6F                 	db	111	;'o'
   984  00FE32  70                 	db	112	;'p'
   985  00FE33  65                 	db	101	;'e'
   986  00FE34  72                 	db	114	;'r'
   987  00FE35  61                 	db	97	;'a'
   988  00FE36  74                 	db	116	;'t'
   989  00FE37  69                 	db	105	;'i'
   990  00FE38  6F                 	db	111	;'o'
   991  00FE39  6E                 	db	110	;'n'
   992  00FE3A  20                 	db	32
   993  00FE3B  74                 	db	116	;'t'
   994  00FE3C  69                 	db	105	;'i'
   995  00FE3D  6D                 	db	109	;'m'
   996  00FE3E  65                 	db	101	;'e'
   997  00FE3F  3A                 	db	58	;':'
   998  00FE40  00                 	db	0
   999  00FE41                     STR_1:
  1000  00FE41  31                 	db	49	;'1'
  1001  00FE42  3A                 	db	58	;':'
  1002  00FE43  64                 	db	100	;'d'
  1003  00FE44  61                 	db	97	;'a'
  1004  00FE45  74                 	db	116	;'t'
  1005  00FE46  65                 	db	101	;'e'
  1006  00FE47  20                 	db	32
  1007  00FE48  61                 	db	97	;'a'
  1008  00FE49  6E                 	db	110	;'n'
  1009  00FE4A  64                 	db	100	;'d'
  1010  00FE4B  20                 	db	32
  1011  00FE4C  74                 	db	116	;'t'
  1012  00FE4D  69                 	db	105	;'i'
  1013  00FE4E  6D                 	db	109	;'m'
  1014  00FE4F  65                 	db	101	;'e'
  1015  00FE50  00                 	db	0
  1016  00FE51                     STR_15:
  1017  00FE51  73                 	db	115	;'s'
  1018  00FE52  74                 	db	116	;'t'
  1019  00FE53  61                 	db	97	;'a'
  1020  00FE54  72                 	db	114	;'r'
  1021  00FE55  74                 	db	116	;'t'
  1022  00FE56  20                 	db	32
  1023  00FE57  6F                 	db	111	;'o'
  1024  00FE58  70                 	db	112	;'p'
  1025  00FE59  65                 	db	101	;'e'
  1026  00FE5A  72                 	db	114	;'r'
  1027  00FE5B  61                 	db	97	;'a'
  1028  00FE5C  74                 	db	116	;'t'
  1029  00FE5D  69                 	db	105	;'i'
  1030  00FE5E  6F                 	db	111	;'o'
  1031  00FE5F  6E                 	db	110	;'n'
  1032  00FE60  00                 	db	0
  1033  00FE61                     STR_45:
  1034  00FE61  57                 	db	87	;'W'
  1035  00FE62  72                 	db	114	;'r'
  1036  00FE63  6F                 	db	111	;'o'
  1037  00FE64  6E                 	db	110	;'n'
  1038  00FE65  67                 	db	103	;'g'
  1039  00FE66  20                 	db	32
  1040  00FE67  6E                 	db	110	;'n'
  1041  00FE68  75                 	db	117	;'u'
  1042  00FE69  6D                 	db	109	;'m'
  1043  00FE6A  62                 	db	98	;'b'
  1044  00FE6B  65                 	db	101	;'e'
  1045  00FE6C  72                 	db	114	;'r'
  1046  00FE6D  21                 	db	33
  1047  00FE6E  20                 	db	32
  1048  00FE6F  00                 	db	0
  1049  00FE70                     STR_3:
  1050  00FE70  61                 	db	97	;'a'
  1051  00FE71  73                 	db	115	;'s'
  1052  00FE72  73                 	db	115	;'s'
  1053  00FE73  65                 	db	101	;'e'
  1054  00FE74  6D                 	db	109	;'m'
  1055  00FE75  62                 	db	98	;'b'
  1056  00FE76  6C                 	db	108	;'l'
  1057  00FE77  79                 	db	121	;'y'
  1058  00FE78  20                 	db	32
  1059  00FE79  73                 	db	115	;'s'
  1060  00FE7A  74                 	db	116	;'t'
  1061  00FE7B  65                 	db	101	;'e'
  1062  00FE7C  70                 	db	112	;'p'
  1063  00FE7D  3A                 	db	58	;':'
  1064  00FE7E  00                 	db	0
  1065  00FE7F                     STR_23:
  1066  00FE7F  42                 	db	66	;'B'
  1067  00FE80  6F                 	db	111	;'o'
  1068  00FE81  6C                 	db	108	;'l'
  1069  00FE82  74                 	db	116	;'t'
  1070  00FE83  5F                 	db	95	;'_'
  1071  00FE84  72                 	db	114	;'r'
  1072  00FE85  65                 	db	101	;'e'
  1073  00FE86  6D                 	db	109	;'m'
  1074  00FE87  61                 	db	97	;'a'
  1075  00FE88  69                 	db	105	;'i'
  1076  00FE89  6E                 	db	110	;'n'
  1077  00FE8A  3A                 	db	58	;':'
  1078  00FE8B  25                 	db	37
  1079  00FE8C  64                 	db	100	;'d'
  1080  00FE8D  00                 	db	0
  1081  00FE8E                     STR_19:
  1082  00FE8E  70                 	db	112	;'p'
  1083  00FE8F  72                 	db	114	;'r'
  1084  00FE90  6F                 	db	111	;'o'
  1085  00FE91  63                 	db	99	;'c'
  1086  00FE92  65                 	db	101	;'e'
  1087  00FE93  73                 	db	115	;'s'
  1088  00FE94  73                 	db	115	;'s'
  1089  00FE95  69                 	db	105	;'i'
  1090  00FE96  6E                 	db	110	;'n'
  1091  00FE97  67                 	db	103	;'g'
  1092  00FE98  20                 	db	32
  1093  00FE99  43                 	db	67	;'C'
  1094  00FE9A  25                 	db	37
  1095  00FE9B  64                 	db	100	;'d'
  1096  00FE9C  00                 	db	0
  1097  00FE9D                     STR_61:
  1098  00FE9D  62                 	db	98	;'b'
  1099  00FE9E  6F                 	db	111	;'o'
  1100  00FE9F  6C                 	db	108	;'l'
  1101  00FEA0  74                 	db	116	;'t'
  1102  00FEA1  5F                 	db	95	;'_'
  1103  00FEA2  69                 	db	105	;'i'
  1104  00FEA3  6E                 	db	110	;'n'
  1105  00FEA4  74                 	db	116	;'t'
  1106  00FEA5  65                 	db	101	;'e'
  1107  00FEA6  72                 	db	114	;'r'
  1108  00FEA7  72                 	db	114	;'r'
  1109  00FEA8  75                 	db	117	;'u'
  1110  00FEA9  70                 	db	112	;'p'
  1111  00FEAA  74                 	db	116	;'t'
  1112  00FEAB  00                 	db	0
  1113  00FEAC                     STR_31:
  1114  00FEAC  25                 	db	37
  1115  00FEAD  30                 	db	48	;'0'
  1116  00FEAE  32                 	db	50	;'2'
  1117  00FEAF  78                 	db	120	;'x'
  1118  00FEB0  2F                 	db	47
  1119  00FEB1  25                 	db	37
  1120  00FEB2  30                 	db	48	;'0'
  1121  00FEB3  32                 	db	50	;'2'
  1122  00FEB4  78                 	db	120	;'x'
  1123  00FEB5  2F                 	db	47
  1124  00FEB6  25                 	db	37
  1125  00FEB7  30                 	db	48	;'0'
  1126  00FEB8  32                 	db	50	;'2'
  1127  00FEB9  78                 	db	120	;'x'
  1128  00FEBA  00                 	db	0
  1129  00FEBB                     STR_32:
  1130  00FEBB  25                 	db	37
  1131  00FEBC  30                 	db	48	;'0'
  1132  00FEBD  32                 	db	50	;'2'
  1133  00FEBE  78                 	db	120	;'x'
  1134  00FEBF  3A                 	db	58	;':'
  1135  00FEC0  25                 	db	37
  1136  00FEC1  30                 	db	48	;'0'
  1137  00FEC2  32                 	db	50	;'2'
  1138  00FEC3  78                 	db	120	;'x'
  1139  00FEC4  3A                 	db	58	;':'
  1140  00FEC5  25                 	db	37
  1141  00FEC6  30                 	db	48	;'0'
  1142  00FEC7  32                 	db	50	;'2'
  1143  00FEC8  78                 	db	120	;'x'
  1144  00FEC9  00                 	db	0
  1145  00FECA                     STR_58:
  1146  00FECA  50                 	db	80	;'P'
  1147  00FECB  72                 	db	114	;'r'
  1148  00FECC  6F                 	db	111	;'o'
  1149  00FECD  63                 	db	99	;'c'
  1150  00FECE  65                 	db	101	;'e'
  1151  00FECF  73                 	db	115	;'s'
  1152  00FED0  73                 	db	115	;'s'
  1153  00FED1  69                 	db	105	;'i'
  1154  00FED2  6E                 	db	110	;'n'
  1155  00FED3  67                 	db	103	;'g'
  1156  00FED4  2E                 	db	46
  1157  00FED5  2E                 	db	46
  1158  00FED6  2E                 	db	46
  1159  00FED7  00                 	db	0
  1160  00FED8                     STR_4:
  1161  00FED8  66                 	db	102	;'f'
  1162  00FED9  61                 	db	97	;'a'
  1163  00FEDA  73                 	db	115	;'s'
  1164  00FEDB  74                 	db	116	;'t'
  1165  00FEDC  65                 	db	101	;'e'
  1166  00FEDD  6E                 	db	110	;'n'
  1167  00FEDE  65                 	db	101	;'e'
  1168  00FEDF  72                 	db	114	;'r'
  1169  00FEE0  20                 	db	32
  1170  00FEE1  73                 	db	115	;'s'
  1171  00FEE2  65                 	db	101	;'e'
  1172  00FEE3  74                 	db	116	;'t'
  1173  00FEE4  3A                 	db	58	;':'
  1174  00FEE5  00                 	db	0
  1175  00FEE6                     STR_24:
  1176  00FEE6  4E                 	db	78	;'N'
  1177  00FEE7  75                 	db	117	;'u'
  1178  00FEE8  74                 	db	116	;'t'
  1179  00FEE9  5F                 	db	95	;'_'
  1180  00FEEA  72                 	db	114	;'r'
  1181  00FEEB  65                 	db	101	;'e'
  1182  00FEEC  6D                 	db	109	;'m'
  1183  00FEED  61                 	db	97	;'a'
  1184  00FEEE  69                 	db	105	;'i'
  1185  00FEEF  6E                 	db	110	;'n'
  1186  00FEF0  3A                 	db	58	;':'
  1187  00FEF1  25                 	db	37
  1188  00FEF2  64                 	db	100	;'d'
  1189  00FEF3  00                 	db	0
  1190  00FEF4                     STR_62:
  1191  00FEF4  6E                 	db	110	;'n'
  1192  00FEF5  75                 	db	117	;'u'
  1193  00FEF6  74                 	db	116	;'t'
  1194  00FEF7  5F                 	db	95	;'_'
  1195  00FEF8  69                 	db	105	;'i'
  1196  00FEF9  6E                 	db	110	;'n'
  1197  00FEFA  74                 	db	116	;'t'
  1198  00FEFB  65                 	db	101	;'e'
  1199  00FEFC  72                 	db	114	;'r'
  1200  00FEFD  72                 	db	114	;'r'
  1201  00FEFE  75                 	db	117	;'u'
  1202  00FEFF  70                 	db	112	;'p'
  1203  00FF00  74                 	db	116	;'t'
  1204  00FF01  00                 	db	0
  1205  00FF02                     STR_36:
  1206  00FF02  25                 	db	37
  1207  00FF03  64                 	db	100	;'d'
  1208  00FF04  6D                 	db	109	;'m'
  1209  00FF05  69                 	db	105	;'i'
  1210  00FF06  6E                 	db	110	;'n'
  1211  00FF07  20                 	db	32
  1212  00FF08  25                 	db	37
  1213  00FF09  64                 	db	100	;'d'
  1214  00FF0A  73                 	db	115	;'s'
  1215  00FF0B  65                 	db	101	;'e'
  1216  00FF0C  63                 	db	99	;'c'
  1217  00FF0D  73                 	db	115	;'s'
  1218  00FF0E  00                 	db	0
  1219  00FF0F                     STR_17:
  1220  00FF0F  4C                 	db	76	;'L'
  1221  00FF10  6F                 	db	111	;'o'
  1222  00FF11  63                 	db	99	;'c'
  1223  00FF12  61                 	db	97	;'a'
  1224  00FF13  74                 	db	116	;'t'
  1225  00FF14  69                 	db	105	;'i'
  1226  00FF15  6E                 	db	110	;'n'
  1227  00FF16  67                 	db	103	;'g'
  1228  00FF17  20                 	db	32
  1229  00FF18  43                 	db	67	;'C'
  1230  00FF19  31                 	db	49	;'1'
  1231  00FF1A  00                 	db	0
  1232  00FF1B                     STR_38:
  1233  00FF1B  43                 	db	67	;'C'
  1234  00FF1C  25                 	db	37
  1235  00FF1D  64                 	db	100	;'d'
  1236  00FF1E  3A                 	db	58	;':'
  1237  00FF1F  42                 	db	66	;'B'
  1238  00FF20  25                 	db	37
  1239  00FF21  64                 	db	100	;'d'
  1240  00FF22  2C                 	db	44
  1241  00FF23  4E                 	db	78	;'N'
  1242  00FF24  25                 	db	37
  1243  00FF25  64                 	db	100	;'d'
  1244  00FF26  00                 	db	0
  1245  00FF27                     STR_39:
  1246  00FF27  20                 	db	32
  1247  00FF28  20                 	db	32
  1248  00FF29  20                 	db	32
  1249  00FF2A  20                 	db	32
  1250  00FF2B  53                 	db	83	;'S'
  1251  00FF2C  25                 	db	37
  1252  00FF2D  64                 	db	100	;'d'
  1253  00FF2E  2C                 	db	44
  1254  00FF2F  57                 	db	87	;'W'
  1255  00FF30  25                 	db	37
  1256  00FF31  64                 	db	100	;'d'
  1257  00FF32  00                 	db	0
  1258  00FF33                     STR_18:
  1259  00FF33  43                 	db	67	;'C'
  1260  00FF34  31                 	db	49	;'1'
  1261  00FF35  20                 	db	32
  1262  00FF36  69                 	db	105	;'i'
  1263  00FF37  73                 	db	115	;'s'
  1264  00FF38  20                 	db	32
  1265  00FF39  66                 	db	102	;'f'
  1266  00FF3A  6F                 	db	111	;'o'
  1267  00FF3B  75                 	db	117	;'u'
  1268  00FF3C  6E                 	db	110	;'n'
  1269  00FF3D  64                 	db	100	;'d'
  1270  00FF3E  00                 	db	0
  1271  00FF3F                     STR_59:
  1272  00FF3F  57                 	db	87	;'W'
  1273  00FF40  72                 	db	114	;'r'
  1274  00FF41  6F                 	db	111	;'o'
  1275  00FF42  6E                 	db	110	;'n'
  1276  00FF43  67                 	db	103	;'g'
  1277  00FF44  20                 	db	32
  1278  00FF45  69                 	db	105	;'i'
  1279  00FF46  6E                 	db	110	;'n'
  1280  00FF47  70                 	db	112	;'p'
  1281  00FF48  75                 	db	117	;'u'
  1282  00FF49  74                 	db	116	;'t'
  1283  00FF4A  00                 	db	0
  1284  00FF4B                     STR_21:
  1285  00FF4B  54                 	db	84	;'T'
  1286  00FF4C  65                 	db	101	;'e'
  1287  00FF4D  72                 	db	114	;'r'
  1288  00FF4E  6D                 	db	109	;'m'
  1289  00FF4F  69                 	db	105	;'i'
  1290  00FF50  6E                 	db	110	;'n'
  1291  00FF51  61                 	db	97	;'a'
  1292  00FF52  74                 	db	116	;'t'
  1293  00FF53  65                 	db	101	;'e'
  1294  00FF54  21                 	db	33
  1295  00FF55  00                 	db	0
  1296  00FF56                     STR_53:
  1297  00FF56  77                 	db	119	;'w'
  1298  00FF57  72                 	db	114	;'r'
  1299  00FF58  6F                 	db	111	;'o'
  1300  00FF59  6E                 	db	110	;'n'
  1301  00FF5A  67                 	db	103	;'g'
  1302  00FF5B  20                 	db	32
  1303  00FF5C  73                 	db	115	;'s'
  1304  00FF5D  65                 	db	101	;'e'
  1305  00FF5E  74                 	db	116	;'t'
  1306  00FF5F  21                 	db	33
  1307  00FF60  00                 	db	0
  1308  00FF61                     STR_29:
  1309  00FF61  33                 	db	51	;'3'
  1310  00FF62  3A                 	db	58	;':'
  1311  00FF63  73                 	db	115	;'s'
  1312  00FF64  75                 	db	117	;'u'
  1313  00FF65  6D                 	db	109	;'m'
  1314  00FF66  6D                 	db	109	;'m'
  1315  00FF67  61                 	db	97	;'a'
  1316  00FF68  72                 	db	114	;'r'
  1317  00FF69  79                 	db	121	;'y'
  1318  00FF6A  00                 	db	0
  1319  00FF6B                     STR_50:
  1320  00FF6B  63                 	db	99	;'c'
  1321  00FF6C  6F                 	db	111	;'o'
  1322  00FF6D  72                 	db	114	;'r'
  1323  00FF6E  72                 	db	114	;'r'
  1324  00FF6F  65                 	db	101	;'e'
  1325  00FF70  63                 	db	99	;'c'
  1326  00FF71  74                 	db	116	;'t'
  1327  00FF72  21                 	db	33
  1328  00FF73  00                 	db	0
  1329  00FF74                     STR_60:
  1330  00FF74  54                 	db	84	;'T'
  1331  00FF75  4F                 	db	79	;'O'
  1332  00FF76  4F                 	db	79	;'O'
  1333  00FF77  20                 	db	32
  1334  00FF78  4D                 	db	77	;'M'
  1335  00FF79  41                 	db	65	;'A'
  1336  00FF7A  4E                 	db	78	;'N'
  1337  00FF7B  59                 	db	89	;'Y'
  1338  00FF7C  00                 	db	0
  1339  00FF7D                     STR_20:
  1340  00FF7D  64                 	db	100	;'d'
  1341  00FF7E  6F                 	db	111	;'o'
  1342  00FF7F  6E                 	db	110	;'n'
  1343  00FF80  65                 	db	101	;'e'
  1344  00FF81  20                 	db	32
  1345  00FF82  43                 	db	67	;'C'
  1346  00FF83  25                 	db	37
  1347  00FF84  64                 	db	100	;'d'
  1348  00FF85  00                 	db	0
  1349  00FF86                     STR_30:
  1350  00FF86  34                 	db	52	;'4'
  1351  00FF87  3A                 	db	58	;':'
  1352  00FF88  72                 	db	114	;'r'
  1353  00FF89  65                 	db	101	;'e'
  1354  00FF8A  74                 	db	116	;'t'
  1355  00FF8B  75                 	db	117	;'u'
  1356  00FF8C  72                 	db	114	;'r'
  1357  00FF8D  6E                 	db	110	;'n'
  1358  00FF8E  00                 	db	0
  1359  00FF8F                     STR_6:
  1360  00FF8F  6E                 	db	110	;'n'
  1361  00FF90  75                 	db	117	;'u'
  1362  00FF91  6D                 	db	109	;'m'
  1363  00FF92  62                 	db	98	;'b'
  1364  00FF93  65                 	db	101	;'e'
  1365  00FF94  72                 	db	114	;'r'
  1366  00FF95  3A                 	db	58	;':'
  1367  00FF96  00                 	db	0
  1368  00FF97                     STR_98:
  1369  00FF97  28                 	db	40
  1370  00FF98  6E                 	db	110	;'n'
  1371  00FF99  75                 	db	117	;'u'
  1372  00FF9A  6C                 	db	108	;'l'
  1373  00FF9B  6C                 	db	108	;'l'
  1374  00FF9C  29                 	db	41
  1375  00FF9D  00                 	db	0
  1376  00FF9E                     STR_56:
  1377  00FF9E  77                 	db	119	;'w'
  1378  00FF9F  72                 	db	114	;'r'
  1379  00FFA0  6F                 	db	111	;'o'
  1380  00FFA1  6E                 	db	110	;'n'
  1381  00FFA2  67                 	db	103	;'g'
  1382  00FFA3  21                 	db	33
  1383  00FFA4  00                 	db	0
  1384  00FFA5                     STR_16:
  1385  00FFA5  6D                 	db	109	;'m'
  1386  00FFA6  6F                 	db	111	;'o'
  1387  00FFA7  64                 	db	100	;'d'
  1388  00FFA8  65                 	db	101	;'e'
  1389  00FFA9  20                 	db	32
  1390  00FFAA  32                 	db	50	;'2'
  1391  00FFAB  00                 	db	0
  1392  00FFAC                     STR_96:
  1393  00FFAC  42                 	db	66	;'B'
  1394  00FFAD  4E                 	db	78	;'N'
  1395  00FFAE  4E                 	db	78	;'N'
  1396  00FFAF  4E                 	db	78	;'N'
  1397  00FFB0  00                 	db	0
  1398  00FFB1                     STR_94:
  1399  00FFB1  42                 	db	66	;'B'
  1400  00FFB2  42                 	db	66	;'B'
  1401  00FFB3  4E                 	db	78	;'N'
  1402  00FFB4  57                 	db	87	;'W'
  1403  00FFB5  00                 	db	0
  1404  00FFB6                     STR_95:
  1405  00FFB6  42                 	db	66	;'B'
  1406  00FFB7  4E                 	db	78	;'N'
  1407  00FFB8  4E                 	db	78	;'N'
  1408  00FFB9  57                 	db	87	;'W'
  1409  00FFBA  00                 	db	0
  1410  00FFBB                     STR_93:
  1411  00FFBB  42                 	db	66	;'B'
  1412  00FFBC  42                 	db	66	;'B'
  1413  00FFBD  53                 	db	83	;'S'
  1414  00FFBE  57                 	db	87	;'W'
  1415  00FFBF  00                 	db	0
  1416  00FFC0                     STR_91:
  1417  00FFC0  42                 	db	66	;'B'
  1418  00FFC1  4E                 	db	78	;'N'
  1419  00FFC2  57                 	db	87	;'W'
  1420  00FFC3  57                 	db	87	;'W'
  1421  00FFC4  00                 	db	0
  1422  00FFC5                     STR_92:
  1423  00FFC5  42                 	db	66	;'B'
  1424  00FFC6  53                 	db	83	;'S'
  1425  00FFC7  57                 	db	87	;'W'
  1426  00FFC8  57                 	db	87	;'W'
  1427  00FFC9  00                 	db	0
  1428  00FFCA                     STR_97:
  1429  00FFCA  42                 	db	66	;'B'
  1430  00FFCB  57                 	db	87	;'W'
  1431  00FFCC  57                 	db	87	;'W'
  1432  00FFCD  57                 	db	87	;'W'
  1433  00FFCE  00                 	db	0
  1434  00FFCF                     STR_66:
  1435  00FFCF  42                 	db	66	;'B'
  1436  00FFD0  3A                 	db	58	;':'
  1437  00FFD1  25                 	db	37
  1438  00FFD2  64                 	db	100	;'d'
  1439  00FFD3  00                 	db	0
  1440  00FFD4                     STR_67:
  1441  00FFD4  4E                 	db	78	;'N'
  1442  00FFD5  3A                 	db	58	;':'
  1443  00FFD6  25                 	db	37
  1444  00FFD7  64                 	db	100	;'d'
  1445  00FFD8  00                 	db	0
  1446  00FFD9                     STR_68:
  1447  00FFD9  53                 	db	83	;'S'
  1448  00FFDA  3A                 	db	58	;':'
  1449  00FFDB  25                 	db	37
  1450  00FFDC  64                 	db	100	;'d'
  1451  00FFDD  00                 	db	0
  1452  00FFDE                     STR_44:
  1453  00FFDE  44                 	db	68	;'D'
  1454  00FFDF  6F                 	db	111	;'o'
  1455  00FFE0  6E                 	db	110	;'n'
  1456  00FFE1  65                 	db	101	;'e'
  1457  00FFE2  00                 	db	0
  1458  00FFE3                     STR_8:
  1459  00FFE3  73                 	db	115	;'s'
  1460  00FFE4  74                 	db	116	;'t'
  1461  00FFE5  65                 	db	101	;'e'
  1462  00FFE6  70                 	db	112	;'p'
  1463  00FFE7  00                 	db	0
  1464  00FFE8                     STR_85:
  1465  00FFE8  42                 	db	66	;'B'
  1466  00FFE9  42                 	db	66	;'B'
  1467  00FFEA  4E                 	db	78	;'N'
  1468  00FFEB  00                 	db	0
  1469  00FFEC                     STR_86:
  1470  00FFEC  42                 	db	66	;'B'
  1471  00FFED  42                 	db	66	;'B'
  1472  00FFEE  53                 	db	83	;'S'
  1473  00FFEF  00                 	db	0
  1474  00FFF0                     STR_87:
  1475  00FFF0  42                 	db	66	;'B'
  1476  00FFF1  42                 	db	66	;'B'
  1477  00FFF2  57                 	db	87	;'W'
  1478  00FFF3  00                 	db	0
  1479  00FFF4                     STR_90:
  1480  00FFF4  42                 	db	66	;'B'
  1481  00FFF5  57                 	db	87	;'W'
  1482  00FFF6  57                 	db	87	;'W'
  1483  00FFF7  00                 	db	0
  1484  00FFF8                     STR_5:
  1485  00FFF8  25                 	db	37
  1486  00FFF9  73                 	db	115	;'s'
  1487  00FFFA  00                 	db	0
  1488  00FFFB                     STR_12:
  1489  00FFFB  2C                 	db	44
  1490  00FFFC  00                 	db	0
  1491  00FFFD                     STR_46:
  1492  00FFFD  42                 	db	66	;'B'
  1493  00FFFE  00                 	db	0
  1494  0000                     
  1495                           ; #config settings
  1496  00FFFF  00                 	db	0	; dummy byte at the end
  1497  0000                     
  1498                           	psect	cinit
  1499  005738                     __pcinit:
  1500                           	opt stack 0
  1501  005738                     start_initialization:
  1502                           	opt stack 0
  1503  005738                     __initialization:
  1504                           	opt stack 0
  1505                           
  1506                           ; Initialize objects allocated to BANK1 (10 bytes)
  1507                           ; load TBLPTR registers with __pidataBANK1
  1508  005738  0E5E               	movlw	low __pidataBANK1
  1509  00573A  6EF6               	movwf	tblptrl,c
  1510  00573C  0E62               	movlw	high __pidataBANK1
  1511  00573E  6EF7               	movwf	tblptrh,c
  1512  005740  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1513  005742  6EF8               	movwf	tblptru,c
  1514  005744  EE01  F0E9         	lfsr	0,__pdataBANK1
  1515  005748  EE10 F00A          	lfsr	1,10
  1516  00574C                     copy_data0:
  1517  00574C  0009               	tblrd		*+
  1518  00574E  CFF5 FFEE          	movff	tablat,postinc0
  1519  005752  50E5               	movf	postdec1,w,c
  1520  005754  50E1               	movf	fsr1l,w,c
  1521  005756  E1FA               	bnz	copy_data0
  1522                           
  1523                           ; Initialize objects allocated to BANK0 (6 bytes)
  1524                           ; load TBLPTR registers with __pidataBANK0
  1525  005758  0EA4               	movlw	low __pidataBANK0
  1526  00575A  6EF6               	movwf	tblptrl,c
  1527  00575C  0E62               	movlw	high __pidataBANK0
  1528  00575E  6EF7               	movwf	tblptrh,c
  1529  005760  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1530  005762  6EF8               	movwf	tblptru,c
  1531  005764  EE00  F0FA         	lfsr	0,__pdataBANK0
  1532  005768  EE10 F006          	lfsr	1,6
  1533  00576C                     copy_data1:
  1534  00576C  0009               	tblrd		*+
  1535  00576E  CFF5 FFEE          	movff	tablat,postinc0
  1536  005772  50E5               	movf	postdec1,w,c
  1537  005774  50E1               	movf	fsr1l,w,c
  1538  005776  E1FA               	bnz	copy_data1
  1539                           
  1540                           ; Initialize objects allocated to COMRAM (8 bytes)
  1541                           ; load TBLPTR registers with __pidataCOMRAM
  1542  005778  0E7C               	movlw	low __pidataCOMRAM
  1543  00577A  6EF6               	movwf	tblptrl,c
  1544  00577C  0E62               	movlw	high __pidataCOMRAM
  1545  00577E  6EF7               	movwf	tblptrh,c
  1546  005780  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1547  005782  6EF8               	movwf	tblptru,c
  1548  005784  EE00  F077         	lfsr	0,__pdataCOMRAM
  1549  005788  EE10 F008          	lfsr	1,8
  1550  00578C                     copy_data2:
  1551  00578C  0009               	tblrd		*+
  1552  00578E  CFF5 FFEE          	movff	tablat,postinc0
  1553  005792  50E5               	movf	postdec1,w,c
  1554  005794  50E1               	movf	fsr1l,w,c
  1555  005796  E1FA               	bnz	copy_data2
  1556                           
  1557                           ; Clear objects allocated to BANK2 (200 bytes)
  1558  005798  EE02  F000         	lfsr	0,__pbssBANK2
  1559  00579C  0EC8               	movlw	200
  1560  00579E                     clear_0:
  1561  00579E  6AEE               	clrf	postinc0,c
  1562  0057A0  06E8               	decf	wreg,f,c
  1563  0057A2  E1FD               	bnz	clear_0
  1564                           
  1565                           ; Clear objects allocated to BANK1 (233 bytes)
  1566  0057A4  EE01  F000         	lfsr	0,__pbssBANK1
  1567  0057A8  0EE9               	movlw	233
  1568  0057AA                     clear_1:
  1569  0057AA  6AEE               	clrf	postinc0,c
  1570  0057AC  06E8               	decf	wreg,f,c
  1571  0057AE  E1FD               	bnz	clear_1
  1572                           
  1573                           ; Clear objects allocated to BANK0 (67 bytes)
  1574  0057B0  EE00  F080         	lfsr	0,__pbssBANK0
  1575  0057B4  0E43               	movlw	67
  1576  0057B6                     clear_2:
  1577  0057B6  6AEE               	clrf	postinc0,c
  1578  0057B8  06E8               	decf	wreg,f,c
  1579  0057BA  E1FD               	bnz	clear_2
  1580                           
  1581                           ; Clear objects allocated to COMRAM (53 bytes)
  1582  0057BC  EE00  F042         	lfsr	0,__pbssCOMRAM
  1583  0057C0  0E35               	movlw	53
  1584  0057C2                     clear_3:
  1585  0057C2  6AEE               	clrf	postinc0,c
  1586  0057C4  06E8               	decf	wreg,f,c
  1587  0057C6  E1FD               	bnz	clear_3
  1588  0057C8                     end_of_initialization:
  1589                           	opt stack 0
  1590  0057C8                     __end_of__initialization:
  1591                           	opt stack 0
  1592  0057C8  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1593  0057CA  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1594  0057CC  0100               	movlb	0
  1595  0057CE  EF20  F00F         	goto	_main	;jump to C main() function
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           postdec1	equ	0xFE5
  1603                           fsr1l	equ	0xFE1
  1604                           
  1605                           	psect	bssCOMRAM
  1606  000042                     __pbssCOMRAM:
  1607                           	opt stack 0
  1608  000042                     _compartment_number:
  1609                           	opt stack 0
  1610  000042                     	ds	16
  1611  000052                     _W:
  1612                           	opt stack 0
  1613  000052                     	ds	2
  1614  000054                     _S:
  1615                           	opt stack 0
  1616  000054                     	ds	2
  1617  000056                     _N:
  1618                           	opt stack 0
  1619  000056                     	ds	2
  1620  000058                     _B:
  1621                           	opt stack 0
  1622  000058                     	ds	2
  1623  00005A                     _counter_step:
  1624                           	opt stack 0
  1625  00005A                     	ds	2
  1626  00005C                     _counter:
  1627                           	opt stack 0
  1628  00005C                     	ds	2
  1629  00005E                     _operationTime:
  1630                           	opt stack 0
  1631  00005E                     	ds	2
  1632  000060                     _prev:
  1633                           	opt stack 0
  1634  000060                     	ds	2
  1635  000062                     _gear_counter:
  1636                           	opt stack 0
  1637  000062                     	ds	2
  1638  000064                     _operation_done:
  1639                           	opt stack 0
  1640  000064                     	ds	2
  1641  000066                     _operation:
  1642                           	opt stack 0
  1643  000066                     	ds	2
  1644  000068                     _white_tape:
  1645                           	opt stack 0
  1646  000068                     	ds	2
  1647  00006A                     _timerCounter:
  1648                           	opt stack 0
  1649  00006A                     	ds	1
  1650  00006B                     _j:
  1651                           	opt stack 0
  1652  00006B                     	ds	1
  1653  00006C                     _input_ch:
  1654                           	opt stack 0
  1655  00006C                     	ds	1
  1656  00006D                     _nuts_data:
  1657                           	opt stack 0
  1658  00006D                     	ds	1
  1659  00006E                     _temp:
  1660                           	opt stack 0
  1661  00006E                     	ds	1
  1662  00006F                     	ds	1
  1663  000070                     _current_set2:
  1664                           	opt stack 0
  1665  000070                     	ds	5
  1666  000075                     _number:
  1667                           	opt stack 0
  1668  000075                     	ds	2
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           
  1678                           	psect	dataCOMRAM
  1679  000077                     __pdataCOMRAM:
  1680                           	opt stack 0
  1681  000077                     _motorStop_3:
  1682                           	opt stack 0
  1683  000077                     	ds	1
  1684  000078                     _motorStart_3:
  1685                           	opt stack 0
  1686  000078                     	ds	1
  1687  000079                     _motorStop_2:
  1688                           	opt stack 0
  1689  000079                     	ds	1
  1690  00007A                     _motorStart_2:
  1691                           	opt stack 0
  1692  00007A                     	ds	1
  1693  00007B                     _motorStop_1:
  1694                           	opt stack 0
  1695  00007B                     	ds	1
  1696  00007C                     _motorStart_1:
  1697                           	opt stack 0
  1698  00007C                     	ds	1
  1699  00007D                     _motorStop_0:
  1700                           	opt stack 0
  1701  00007D                     	ds	1
  1702  00007E                     _motorStart_0:
  1703                           	opt stack 0
  1704  00007E                     	ds	1
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           postdec1	equ	0xFE5
  1712                           fsr1l	equ	0xFE1
  1713                           
  1714                           	psect	bssBANK0
  1715  000080                     __pbssBANK0:
  1716                           	opt stack 0
  1717  000080                     _compartment_array:
  1718                           	opt stack 0
  1719  000080                     	ds	16
  1720  000090                     _time:
  1721                           	opt stack 0
  1722  000090                     	ds	7
  1723  000097                     _W_spacingTime:
  1724                           	opt stack 0
  1725  000097                     	ds	2
  1726  000099                     _S_spacingTime:
  1727                           	opt stack 0
  1728  000099                     	ds	2
  1729  00009B                     _N_spacingTime:
  1730                           	opt stack 0
  1731  00009B                     	ds	2
  1732  00009D                     _B_spacingTime:
  1733                           	opt stack 0
  1734  00009D                     	ds	2
  1735  00009F                     _W_remain:
  1736                           	opt stack 0
  1737  00009F                     	ds	2
  1738  0000A1                     _S_remain:
  1739                           	opt stack 0
  1740  0000A1                     	ds	2
  1741  0000A3                     _N_remain:
  1742                           	opt stack 0
  1743  0000A3                     	ds	2
  1744  0000A5                     _B_remain:
  1745                           	opt stack 0
  1746  0000A5                     	ds	2
  1747  0000A7                     _W_counter:
  1748                           	opt stack 0
  1749  0000A7                     	ds	2
  1750  0000A9                     _N_counter:
  1751                           	opt stack 0
  1752  0000A9                     	ds	2
  1753  0000AB                     _S_counter:
  1754                           	opt stack 0
  1755  0000AB                     	ds	2
  1756  0000AD                     _B_counter:
  1757                           	opt stack 0
  1758  0000AD                     	ds	2
  1759  0000AF                     _assembly_step:
  1760                           	opt stack 0
  1761  0000AF                     	ds	2
  1762  0000B1                     _state:
  1763                           	opt stack 0
  1764  0000B1                     	ds	2
  1765  0000B3                     _change_mode:
  1766                           	opt stack 0
  1767  0000B3                     	ds	2
  1768  0000B5                     _mode:
  1769                           	opt stack 0
  1770  0000B5                     	ds	2
  1771  0000B7                     _i:
  1772                           	opt stack 0
  1773  0000B7                     	ds	2
  1774  0000B9                     _MADCTLbits:
  1775                           	opt stack 0
  1776  0000B9                     	ds	1
  1777  0000BA                     _NeedToCloseLid:
  1778                           	opt stack 0
  1779  0000BA                     	ds	1
  1780  0000BB                     _EndOfProgram:
  1781                           	opt stack 0
  1782  0000BB                     	ds	1
  1783  0000BC                     _openHandle_data:
  1784                           	opt stack 0
  1785  0000BC                     	ds	1
  1786  0000BD                     _LCDinterruptState:
  1787                           	opt stack 0
  1788  0000BD                     	ds	1
  1789  0000BE                     _current_set:
  1790                           	opt stack 0
  1791  0000BE                     	ds	5
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postdec1	equ	0xFE5
  1799                           fsr1l	equ	0xFE1
  1800                           
  1801                           	psect	dataBANK0
  1802  0000FA                     __pdataBANK0:
  1803                           	opt stack 0
  1804  0000FA                     _spacingTime:
  1805                           	opt stack 0
  1806  0000FA                     	ds	2
  1807  0000FC                     _close_handle:
  1808                           	opt stack 0
  1809  0000FC                     	ds	1
  1810  0000FD                     _servo_ramp:
  1811                           	opt stack 0
  1812  0000FD                     	ds	1
  1813  0000FE                     _rotate_1compartment:
  1814                           	opt stack 0
  1815  0000FE                     	ds	1
  1816  0000FF                     _rotate_gear:
  1817                           	opt stack 0
  1818  0000FF                     	ds	1
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1l	equ	0xFE1
  1827                           
  1828                           	psect	bssBANK1
  1829  000100                     __pbssBANK1:
  1830                           	opt stack 0
  1831  000100                     _W_array:
  1832                           	opt stack 0
  1833  000100                     	ds	16
  1834  000110                     _N_array:
  1835                           	opt stack 0
  1836  000110                     	ds	16
  1837  000120                     _S_array:
  1838                           	opt stack 0
  1839  000120                     	ds	16
  1840  000130                     _B_array:
  1841                           	opt stack 0
  1842  000130                     	ds	16
  1843  000140                     _prev_number:
  1844                           	opt stack 0
  1845  000140                     	ds	16
  1846  000150                     _final_number:
  1847                           	opt stack 0
  1848  000150                     	ds	16
  1849  000160                     _final_time:
  1850                           	opt stack 0
  1851  000160                     	ds	2
  1852  000162                     _sec_final:
  1853                           	opt stack 0
  1854  000162                     	ds	2
  1855  000164                     _min_final:
  1856                           	opt stack 0
  1857  000164                     	ds	2
  1858  000166                     _hr_final:
  1859                           	opt stack 0
  1860  000166                     	ds	2
  1861  000168                     _initial_time:
  1862                           	opt stack 0
  1863  000168                     	ds	2
  1864  00016A                     _sec_initial:
  1865                           	opt stack 0
  1866  00016A                     	ds	2
  1867  00016C                     _min_initial:
  1868                           	opt stack 0
  1869  00016C                     	ds	2
  1870  00016E                     _hr_initial:
  1871                           	opt stack 0
  1872  00016E                     	ds	2
  1873  000170                     _W_total_dispensed:
  1874                           	opt stack 0
  1875  000170                     	ds	2
  1876  000172                     _S_total_dispensed:
  1877                           	opt stack 0
  1878  000172                     	ds	2
  1879  000174                     _N_total_dispensed:
  1880                           	opt stack 0
  1881  000174                     	ds	2
  1882  000176                     _B_total_dispensed:
  1883                           	opt stack 0
  1884  000176                     	ds	2
  1885  000178                     _W_done:
  1886                           	opt stack 0
  1887  000178                     	ds	2
  1888  00017A                     _S_done:
  1889                           	opt stack 0
  1890  00017A                     	ds	2
  1891  00017C                     _N_done:
  1892                           	opt stack 0
  1893  00017C                     	ds	2
  1894  00017E                     _B_done:
  1895                           	opt stack 0
  1896  00017E                     	ds	2
  1897  000180                     _W_input:
  1898                           	opt stack 0
  1899  000180                     	ds	2
  1900  000182                     _S_input:
  1901                           	opt stack 0
  1902  000182                     	ds	2
  1903  000184                     _N_input:
  1904                           	opt stack 0
  1905  000184                     	ds	2
  1906  000186                     _B_input:
  1907                           	opt stack 0
  1908  000186                     	ds	2
  1909  000188                     _prev_state:
  1910                           	opt stack 0
  1911  000188                     	ds	2
  1912  00018A                     _total_number:
  1913                           	opt stack 0
  1914  00018A                     	ds	2
  1915  00018C                     _valid:
  1916                           	opt stack 0
  1917  00018C                     	ds	2
  1918  00018E                     _error:
  1919                           	opt stack 0
  1920  00018E                     	ds	2
  1921  000190                     _compartment_pos:
  1922                           	opt stack 0
  1923  000190                     	ds	2
  1924  000192                     _angle:
  1925                           	opt stack 0
  1926  000192                     	ds	2
  1927  000194                     _prev_set:
  1928                           	opt stack 0
  1929  000194                     	ds	40
  1930  0001BC                     _final_set:
  1931                           	opt stack 0
  1932  0001BC                     	ds	40
  1933  0001E4                     _temp_set:
  1934                           	opt stack 0
  1935  0001E4                     	ds	5
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	dataBANK1
  1946  0001E9                     __pdataBANK1:
  1947                           	opt stack 0
  1948  0001E9                     _W_max:
  1949                           	opt stack 0
  1950  0001E9                     	ds	2
  1951  0001EB                     _S_max:
  1952                           	opt stack 0
  1953  0001EB                     	ds	2
  1954  0001ED                     _N_max:
  1955                           	opt stack 0
  1956  0001ED                     	ds	2
  1957  0001EF                     _B_max:
  1958                           	opt stack 0
  1959  0001EF                     	ds	2
  1960  0001F1                     _init_position:
  1961                           	opt stack 0
  1962  0001F1                     	ds	2
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           postdec1	equ	0xFE5
  1970                           fsr1l	equ	0xFE1
  1971                           
  1972                           	psect	bssBANK2
  1973  000200                     __pbssBANK2:
  1974                           	opt stack 0
  1975  000200                     _fastener:
  1976                           	opt stack 0
  1977  000200                     	ds	200
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           postinc0	equ	0xFEE
  1983                           wreg	equ	0xFE8
  1984                           postdec1	equ	0xFE5
  1985                           fsr1l	equ	0xFE1
  1986                           
  1987                           	psect	cstackBANK0
  1988  0000C3                     __pcstackBANK0:
  1989                           	opt stack 0
  1990  0000C3                     ??_isdigit:
  1991  0000C3                     ??_I2C_Master_Wait:
  1992  0000C3                     ??_spiTransfer:
  1993  0000C3                     ?___awdiv:
  1994                           	opt stack 0
  1995  0000C3                     ?___lwdiv:
  1996                           	opt stack 0
  1997  0000C3                     ?___lldiv:
  1998                           	opt stack 0
  1999  0000C3                     lcdNibble@temp:
  2000                           	opt stack 0
  2001  0000C3                     spiInit@divider:
  2002                           	opt stack 0
  2003  0000C3                     generate_compartment_array@step:
  2004                           	opt stack 0
  2005  0000C3                     ___awdiv@dividend:
  2006                           	opt stack 0
  2007  0000C3                     ___lwdiv@dividend:
  2008                           	opt stack 0
  2009  0000C3                     ___lldiv@dividend:
  2010                           	opt stack 0
  2011                           
  2012                           ; 4 bytes @ 0x0
  2013  0000C3                     	ds	1
  2014  0000C4                     lcdNibble@data:
  2015                           	opt stack 0
  2016  0000C4                     I2C_Master_Read@ackBit:
  2017                           	opt stack 0
  2018  0000C4                     spiTransfer@byteToTransfer:
  2019                           	opt stack 0
  2020  0000C4                     _isdigit$2258:
  2021                           	opt stack 0
  2022  0000C4                     I2C_Master_Write@byteToWrite:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x1
  2026  0000C4                     	ds	1
  2027  0000C5                     ??_generate_compartment_array:
  2028  0000C5                     lcdInst@data:
  2029                           	opt stack 0
  2030  0000C5                     putch@data:
  2031                           	opt stack 0
  2032  0000C5                     I2C_Master_Read@receivedByte:
  2033                           	opt stack 0
  2034  0000C5                     spiSend@val:
  2035                           	opt stack 0
  2036  0000C5                     isdigit@c:
  2037                           	opt stack 0
  2038  0000C5                     ___awdiv@divisor:
  2039                           	opt stack 0
  2040  0000C5                     ___lwdiv@divisor:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x2
  2044  0000C5                     	ds	1
  2045  0000C6                     ??_initLCD:
  2046  0000C6                     I2C_sendData@char_data:
  2047                           	opt stack 0
  2048  0000C6                     glcdTransfer@cmd:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x3
  2052  0000C6                     	ds	1
  2053  0000C7                     ??_glcdTransfer:
  2054  0000C7                     ___awdiv@counter:
  2055                           	opt stack 0
  2056  0000C7                     ___lwdiv@quotient:
  2057                           	opt stack 0
  2058  0000C7                     ___lldiv@divisor:
  2059                           	opt stack 0
  2060                           
  2061                           ; 4 bytes @ 0x4
  2062  0000C7                     	ds	1
  2063  0000C8                     glcdTransfer@byte:
  2064                           	opt stack 0
  2065  0000C8                     ___awdiv@sign:
  2066                           	opt stack 0
  2067                           
  2068                           ; 1 bytes @ 0x5
  2069  0000C8                     	ds	1
  2070  0000C9                     glcdSetCOLMOD@numBitsPerPixel:
  2071                           	opt stack 0
  2072  0000C9                     ___lwdiv@counter:
  2073                           	opt stack 0
  2074  0000C9                     ___awdiv@quotient:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x6
  2078  0000C9                     	ds	1
  2079  0000CA                     ?___lwmod:
  2080                           	opt stack 0
  2081  0000CA                     glcdSetCOLMOD@rawData:
  2082                           	opt stack 0
  2083  0000CA                     ___lwmod@dividend:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x7
  2087  0000CA                     	ds	1
  2088  0000CB                     ?___wmul:
  2089                           	opt stack 0
  2090  0000CB                     ___wmul@multiplier:
  2091                           	opt stack 0
  2092  0000CB                     ___lldiv@quotient:
  2093                           	opt stack 0
  2094                           
  2095                           ; 4 bytes @ 0x8
  2096  0000CB                     	ds	1
  2097  0000CC                     ___lwmod@divisor:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x9
  2101  0000CC                     	ds	1
  2102  0000CD                     ___wmul@multiplicand:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0xA
  2106  0000CD                     	ds	1
  2107  0000CE                     ___lwmod@counter:
  2108                           	opt stack 0
  2109                           
  2110                           ; 1 bytes @ 0xB
  2111  0000CE                     	ds	1
  2112  0000CF                     ___lldiv@counter:
  2113                           	opt stack 0
  2114  0000CF                     ___wmul@product:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0xC
  2118  0000CF                     	ds	1
  2119  0000D0                     I2C_Master_Init@clockFreq:
  2120                           	opt stack 0
  2121                           
  2122                           ; 4 bytes @ 0xD
  2123  0000D0                     	ds	1
  2124  0000D1                     ?_printf:
  2125                           	opt stack 0
  2126  0000D1                     glcdDrawRectangle@XE:
  2127                           	opt stack 0
  2128  0000D1                     printf@f:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0xE
  2132  0000D1                     	ds	1
  2133  0000D2                     glcdDrawRectangle@YS:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0xF
  2137  0000D2                     	ds	1
  2138  0000D3                     glcdDrawRectangle@YE:
  2139                           	opt stack 0
  2140                           
  2141                           ; 1 bytes @ 0x10
  2142  0000D3                     	ds	1
  2143  0000D4                     ??_I2C_Master_Init:
  2144  0000D4                     glcdDrawRectangle@color:
  2145                           	opt stack 0
  2146                           
  2147                           ; 4 bytes @ 0x11
  2148  0000D4                     	ds	4
  2149  0000D8                     ??_glcdDrawRectangle:
  2150                           
  2151                           ; 1 bytes @ 0x15
  2152  0000D8                     	ds	3
  2153  0000DB                     ??_printf:
  2154                           
  2155                           ; 1 bytes @ 0x18
  2156  0000DB                     	ds	1
  2157  0000DC                     glcdDrawRectangle@numLoops:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x19
  2161  0000DC                     	ds	2
  2162  0000DE                     glcdDrawRectangle@i:
  2163                           	opt stack 0
  2164                           
  2165                           ; 2 bytes @ 0x1B
  2166  0000DE                     	ds	1
  2167  0000DF                     printf@idx:
  2168                           	opt stack 0
  2169                           
  2170                           ; 1 bytes @ 0x1C
  2171  0000DF                     	ds	1
  2172  0000E0                     printf@prec:
  2173                           	opt stack 0
  2174  0000E0                     glcdDrawRectangle@colorData:
  2175                           	opt stack 0
  2176                           
  2177                           ; 3 bytes @ 0x1D
  2178  0000E0                     	ds	1
  2179  0000E1                     printf@cp:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x1E
  2183  0000E1                     	ds	2
  2184  0000E3                     glcdDrawRectangle@XS:
  2185                           	opt stack 0
  2186  0000E3                     printf@ap:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x20
  2190  0000E3                     	ds	1
  2191  0000E4                     ??_initGLCD:
  2192  0000E4                     ??_drawTeamName:
  2193  0000E4                     ??_drawBolt:
  2194  0000E4                     ??_drawNut:
  2195  0000E4                     ??_drawSpacer:
  2196  0000E4                     ??_drawWasher:
  2197                           
  2198                           ; 1 bytes @ 0x21
  2199  0000E4                     	ds	1
  2200  0000E5                     printf@len:
  2201                           	opt stack 0
  2202                           
  2203                           ; 2 bytes @ 0x22
  2204  0000E5                     	ds	2
  2205  0000E7                     printf@val:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x24
  2209  0000E7                     	ds	2
  2210  0000E9                     printf@flag:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x26
  2214  0000E9                     	ds	1
  2215  0000EA                     printf@width:
  2216                           	opt stack 0
  2217                           
  2218                           ; 2 bytes @ 0x27
  2219  0000EA                     	ds	2
  2220  0000EC                     printf@c:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x29
  2224  0000EC                     	ds	1
  2225  0000ED                     Bolt_dispense@B_max:
  2226                           	opt stack 0
  2227  0000ED                     Nut_dispense@N_max:
  2228                           	opt stack 0
  2229  0000ED                     Spacer_dispense@S_max:
  2230                           	opt stack 0
  2231  0000ED                     Washer_dispense@W_max:
  2232                           	opt stack 0
  2233  0000ED                     Bolt_remain@time:
  2234                           	opt stack 0
  2235  0000ED                     Nut_remain@time:
  2236                           	opt stack 0
  2237  0000ED                     Spacer_remain@time:
  2238                           	opt stack 0
  2239  0000ED                     Washer_remain@time:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x2A
  2243  0000ED                     	ds	2
  2244  0000EF                     ??_Bolt_dispense:
  2245  0000EF                     ??_Nut_dispense:
  2246  0000EF                     ??_Spacer_dispense:
  2247  0000EF                     ??_Washer_dispense:
  2248  0000EF                     ??_Nut_remain:
  2249  0000EF                     ??_Washer_remain:
  2250  0000EF                     ??_Spacer_remain:
  2251  0000EF                     ??_Bolt_remain:
  2252                           
  2253                           ; 1 bytes @ 0x2C
  2254  0000EF                     	ds	2
  2255  0000F1                     ??_main:
  2256                           
  2257                           ; 1 bytes @ 0x2E
  2258  0000F1                     	ds	2
  2259  0000F3                     main@rotation:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x30
  2263  0000F3                     	ds	1
  2264  0000F4                     main@x:
  2265                           	opt stack 0
  2266                           
  2267                           ; 1 bytes @ 0x31
  2268  0000F4                     	ds	1
  2269  0000F5                     main@y:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x32
  2273  0000F5                     	ds	1
  2274  0000F6                     _main$2694:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x33
  2278  0000F6                     	ds	2
  2279  0000F8                     main@compart_id:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x35
  2283  0000F8                     	ds	2
  2284                           tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           fsr1l	equ	0xFE1
  2292                           
  2293                           	psect	cstackCOMRAM
  2294  000001                     __pcstackCOMRAM:
  2295                           	opt stack 0
  2296  000001                     ??i2_I2C_Master_Wait:
  2297  000001                     ??i2_isdigit:
  2298  000001                     ?_check:
  2299                           	opt stack 0
  2300  000001                     ?_strcmp:
  2301                           	opt stack 0
  2302  000001                     ?___awmod:
  2303                           	opt stack 0
  2304  000001                     ?i2___wmul:
  2305                           	opt stack 0
  2306  000001                     ?i2___awdiv:
  2307                           	opt stack 0
  2308  000001                     ?i2___lwdiv:
  2309                           	opt stack 0
  2310  000001                     ?i2___lldiv:
  2311                           	opt stack 0
  2312  000001                     i2lcdNibble@temp:
  2313                           	opt stack 0
  2314  000001                     ___awmod@dividend:
  2315                           	opt stack 0
  2316  000001                     strcat@to:
  2317                           	opt stack 0
  2318  000001                     strcmp@s1:
  2319                           	opt stack 0
  2320  000001                     i2generate_compartment_array@step:
  2321                           	opt stack 0
  2322  000001                     i2___wmul@multiplier:
  2323                           	opt stack 0
  2324  000001                     i2___awdiv@dividend:
  2325                           	opt stack 0
  2326  000001                     i2___lwdiv@dividend:
  2327                           	opt stack 0
  2328  000001                     i2___lldiv@dividend:
  2329                           	opt stack 0
  2330                           
  2331                           ; 4 bytes @ 0x0
  2332  000001                     	ds	1
  2333  000002                     i2lcdNibble@data:
  2334                           	opt stack 0
  2335  000002                     i2I2C_Master_Read@ackBit:
  2336                           	opt stack 0
  2337  000002                     i2_isdigit$2258:
  2338                           	opt stack 0
  2339  000002                     i2I2C_Master_Write@byteToWrite:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x1
  2343  000002                     	ds	1
  2344  000003                     ??i2_generate_compartment_array:
  2345  000003                     i2lcdInst@data:
  2346                           	opt stack 0
  2347  000003                     i2putch@data:
  2348                           	opt stack 0
  2349  000003                     i2I2C_Master_Read@receivedByte:
  2350                           	opt stack 0
  2351  000003                     i2isdigit@c:
  2352                           	opt stack 0
  2353  000003                     ___awmod@divisor:
  2354                           	opt stack 0
  2355  000003                     strcat@from:
  2356                           	opt stack 0
  2357  000003                     strcmp@s2:
  2358                           	opt stack 0
  2359  000003                     i2___wmul@multiplicand:
  2360                           	opt stack 0
  2361  000003                     i2___awdiv@divisor:
  2362                           	opt stack 0
  2363  000003                     i2___lwdiv@divisor:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x2
  2367  000003                     	ds	1
  2368  000004                     ??i2_initLCD:
  2369  000004                     
  2370                           ; 1 bytes @ 0x3
  2371  000004                     	ds	1
  2372  000005                     ??_strcmp:
  2373  000005                     ___awmod@counter:
  2374                           	opt stack 0
  2375  000005                     i2___awdiv@counter:
  2376                           	opt stack 0
  2377  000005                     strcat@cp:
  2378                           	opt stack 0
  2379  000005                     i2___wmul@product:
  2380                           	opt stack 0
  2381  000005                     i2___lwdiv@quotient:
  2382                           	opt stack 0
  2383  000005                     i2___lldiv@divisor:
  2384                           	opt stack 0
  2385                           
  2386                           ; 4 bytes @ 0x4
  2387  000005                     	ds	1
  2388  000006                     ___awmod@sign:
  2389                           	opt stack 0
  2390  000006                     strcmp@r:
  2391                           	opt stack 0
  2392  000006                     i2___awdiv@sign:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x5
  2396  000006                     	ds	1
  2397  000007                     ??_is_valid:
  2398  000007                     ?_strncmp:
  2399                           	opt stack 0
  2400  000007                     i2___lwdiv@counter:
  2401                           	opt stack 0
  2402  000007                     strcpy@to:
  2403                           	opt stack 0
  2404  000007                     strncmp@s1:
  2405                           	opt stack 0
  2406  000007                     i2___awdiv@quotient:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x6
  2410  000007                     	ds	1
  2411  000008                     ?i2___lwmod:
  2412                           	opt stack 0
  2413  000008                     i2___lwmod@dividend:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x7
  2417  000008                     	ds	1
  2418  000009                     strcpy@from:
  2419                           	opt stack 0
  2420  000009                     strncmp@s2:
  2421                           	opt stack 0
  2422  000009                     i2___lldiv@quotient:
  2423                           	opt stack 0
  2424                           
  2425                           ; 4 bytes @ 0x8
  2426  000009                     	ds	1
  2427  00000A                     i2___lwmod@divisor:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x9
  2431  00000A                     	ds	1
  2432  00000B                     strcpy@cp:
  2433                           	opt stack 0
  2434  00000B                     strncmp@len:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0xA
  2438  00000B                     	ds	1
  2439  00000C                     i2___lwmod@counter:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0xB
  2443  00000C                     	ds	1
  2444  00000D                     ??_strncmp:
  2445  00000D                     ?i2_printf:
  2446                           	opt stack 0
  2447  00000D                     i2___lldiv@counter:
  2448                           	opt stack 0
  2449  00000D                     i2printf@f:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0xC
  2453  00000D                     	ds	1
  2454  00000E                     i2I2C_Master_Init@clockFreq:
  2455                           	opt stack 0
  2456                           
  2457                           ; 4 bytes @ 0xD
  2458  00000E                     	ds	4
  2459  000012                     ??i2_I2C_Master_Init:
  2460                           
  2461                           ; 1 bytes @ 0x11
  2462  000012                     	ds	3
  2463  000015                     ??i2_printf:
  2464                           
  2465                           ; 1 bytes @ 0x14
  2466  000015                     	ds	4
  2467  000019                     i2printf@idx:
  2468                           	opt stack 0
  2469                           
  2470                           ; 1 bytes @ 0x18
  2471  000019                     	ds	1
  2472  00001A                     i2printf@prec:
  2473                           	opt stack 0
  2474                           
  2475                           ; 1 bytes @ 0x19
  2476  00001A                     	ds	1
  2477  00001B                     i2printf@cp:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0x1A
  2481  00001B                     	ds	2
  2482  00001D                     i2printf@ap:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0x1C
  2486  00001D                     	ds	2
  2487  00001F                     i2printf@len:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x1E
  2491  00001F                     	ds	2
  2492  000021                     i2printf@val:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x20
  2496  000021                     	ds	2
  2497  000023                     i2printf@flag:
  2498                           	opt stack 0
  2499                           
  2500                           ; 1 bytes @ 0x22
  2501  000023                     	ds	1
  2502  000024                     i2printf@width:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0x23
  2506  000024                     	ds	2
  2507  000026                     i2printf@c:
  2508                           	opt stack 0
  2509                           
  2510                           ; 1 bytes @ 0x25
  2511  000026                     	ds	1
  2512  000027                     ??_interruptHandler:
  2513                           
  2514                           ; 1 bytes @ 0x26
  2515  000027                     	ds	23
  2516  00003E                     interruptHandler@i:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x3D
  2520  00003E                     	ds	2
  2521  000040                     interruptHandler@keypress:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0x3F
  2525  000040                     	ds	1
  2526  000041                     interruptHandler@temp:
  2527                           	opt stack 0
  2528                           
  2529                           ; 1 bytes @ 0x40
  2530  000041                     	ds	1
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           postinc0	equ	0xFEE
  2536                           wreg	equ	0xFE8
  2537                           postdec1	equ	0xFE5
  2538                           fsr1l	equ	0xFE1
  2539                           
  2540 ;;
  2541 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2542 ;;
  2543 ;; *************** function _main *****************
  2544 ;; Defined at:
  2545 ;;		line 105 in file "main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  compart_id      2   53[BANK0 ] int 
  2550 ;;  y               1   50[BANK0 ] unsigned char 
  2551 ;;  x               1   49[BANK0 ] unsigned char 
  2552 ;;  rotation        1   48[BANK0 ] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;Total ram usage:        9 bytes
  2567 ;; Hardware stack levels required when called:   10
  2568 ;; This function calls:
  2569 ;;		_Bolt_dispense
  2570 ;;		_Bolt_remain
  2571 ;;		_I2C_Master_Read
  2572 ;;		_I2C_Master_Start
  2573 ;;		_I2C_Master_Stop
  2574 ;;		_I2C_Master_Write
  2575 ;;		_I2C_init
  2576 ;;		_I2C_sendData
  2577 ;;		_Nut_dispense
  2578 ;;		_Nut_remain
  2579 ;;		_Spacer_dispense
  2580 ;;		_Spacer_remain
  2581 ;;		_Washer_dispense
  2582 ;;		_Washer_remain
  2583 ;;		___awdiv
  2584 ;;		___wmul
  2585 ;;		_drawTeamName
  2586 ;;		_generate_compartment_array
  2587 ;;		_initGLCD
  2588 ;;		_initLCD
  2589 ;;		_initVibTimer
  2590 ;;		_initialize
  2591 ;;		_lcdInst
  2592 ;;		_printf
  2593 ;; This function is called by:
  2594 ;;		Startup code after reset
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text0
  2599  001E40                     __ptext0:
  2600                           	opt stack 0
  2601  001E40                     _main:
  2602                           	opt stack 21
  2603                           
  2604                           ;main.c: 111: OSCCONbits.IRCF2 = 1;
  2605                           
  2606                           ;incstack = 0
  2607  001E40  8CD3               	bsf	4051,6,c	;volatile
  2608                           
  2609                           ;main.c: 112: OSCCONbits.IRCF1 = 1;
  2610  001E42  8AD3               	bsf	4051,5,c	;volatile
  2611                           
  2612                           ;main.c: 113: OSCCONbits.IRCF0 = 1;
  2613  001E44  88D3               	bsf	4051,4,c	;volatile
  2614                           
  2615                           ;main.c: 114: OSCCONbits.SCS1 = 1;
  2616  001E46  82D3               	bsf	4051,1,c	;volatile
  2617                           
  2618                           ;main.c: 115: OSCTUNEbits.PLLEN = 1;
  2619  001E48  8C9B               	bsf	3995,6,c	;volatile
  2620                           
  2621                           ;main.c: 118: LATA = 0x00;
  2622  001E4A  0E00               	movlw	0
  2623  001E4C  6E89               	movwf	3977,c	;volatile
  2624                           
  2625                           ;main.c: 119: LATB = 0x00;
  2626  001E4E  0E00               	movlw	0
  2627  001E50  6E8A               	movwf	3978,c	;volatile
  2628                           
  2629                           ;main.c: 120: LATC = 0x00;
  2630  001E52  0E00               	movlw	0
  2631  001E54  6E8B               	movwf	3979,c	;volatile
  2632                           
  2633                           ;main.c: 121: LATD = 0x00;
  2634  001E56  0E00               	movlw	0
  2635  001E58  6E8C               	movwf	3980,c	;volatile
  2636                           
  2637                           ;main.c: 122: LATE = 0x00;
  2638  001E5A  0E00               	movlw	0
  2639  001E5C  6E8D               	movwf	3981,c	;volatile
  2640                           
  2641                           ;main.c: 126: TRISA = 0xFF;
  2642  001E5E  6892               	setf	3986,c	;volatile
  2643                           
  2644                           ;main.c: 127: TRISB = 0xFF;
  2645  001E60  6893               	setf	3987,c	;volatile
  2646                           
  2647                           ;main.c: 128: TRISC = 0b10000000;
  2648  001E62  0E80               	movlw	128
  2649  001E64  6E94               	movwf	3988,c	;volatile
  2650                           
  2651                           ;main.c: 132: TRISD = 0b00000001;
  2652  001E66  0E01               	movlw	1
  2653  001E68  6E95               	movwf	3989,c	;volatile
  2654                           
  2655                           ;main.c: 138: TRISE = 0b00000100;
  2656  001E6A  0E04               	movlw	4
  2657  001E6C  6E96               	movwf	3990,c	;volatile
  2658                           
  2659                           ;main.c: 145: ADCON0 = 0x00;
  2660  001E6E  0E00               	movlw	0
  2661  001E70  6EC2               	movwf	4034,c	;volatile
  2662                           
  2663                           ;main.c: 146: ADCON1 = 0b00001111;
  2664  001E72  0E0F               	movlw	15
  2665  001E74  6EC1               	movwf	4033,c	;volatile
  2666                           
  2667                           ;main.c: 149: INT1IE = 1;
  2668  001E76  86F0               	bsf	intcon3,3,c	;volatile
  2669                           
  2670                           ;main.c: 150: (INTCONbits.GIE = 1);
  2671  001E78  8EF2               	bsf	intcon,7,c	;volatile
  2672                           
  2673                           ;main.c: 155: initLCD();
  2674  001E7A  EC05  F02F         	call	_initLCD	;wreg free
  2675                           
  2676                           ;main.c: 156: initGLCD();
  2677  001E7E  EC5B  F01D         	call	_initGLCD	;wreg free
  2678                           
  2679                           ;main.c: 159: unsigned char rotation = 0, x = 0, y = 0;
  2680  001E82  0E00               	movlw	0
  2681  001E84  0100               	movlb	0	; () banked
  2682  001E86  6FF3               	movwf	main@rotation& (0+255),b
  2683                           
  2684                           ; BSR set to: 0
  2685  001E88  0E00               	movlw	0
  2686  001E8A  6FF4               	movwf	main@x& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689  001E8C  0E00               	movlw	0
  2690  001E8E  6FF5               	movwf	main@y& (0+255),b
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;main.c: 161: drawTeamName();
  2694  001E90  EC36  F01F         	call	_drawTeamName	;wreg free
  2695  001E94                     
  2696                           ;main.c: 166: if (mode == 0){
  2697  001E94  0100               	movlb	0	; () banked
  2698  001E96  51B5               	movf	_mode& (0+255),w,b
  2699  001E98  11B6               	iorwf	(_mode+1)& (0+255),w,b
  2700  001E9A  A4D8               	btfss	status,2,c
  2701  001E9C  D031               	goto	l506
  2702  001E9E                     u5320:
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;main.c: 168: printf("1:date and time");
  2706                           
  2707                           ; BSR set to: 0
  2708                           
  2709                           ;main.c: 167: while(1){
  2710  001E9E  0E41               	movlw	low STR_1
  2711  001EA0  6FD1               	movwf	printf@f& (0+255),b
  2712  001EA2  0EFE               	movlw	high STR_1
  2713  001EA4  6FD2               	movwf	(printf@f+1)& (0+255),b
  2714  001EA6  EC2A  F019         	call	_printf	;wreg free
  2715                           
  2716                           ;main.c: 169: lcdInst(0xC0);;
  2717  001EAA  0EC0               	movlw	192
  2718  001EAC  ECEB  F030         	call	_lcdInst
  2719                           
  2720                           ;main.c: 170: printf("2:Enter Instruction");
  2721  001EB0  0E6A               	movlw	low STR_2
  2722  001EB2  0100               	movlb	0	; () banked
  2723  001EB4  6FD1               	movwf	printf@f& (0+255),b
  2724  001EB6  0EFD               	movlw	high STR_2
  2725  001EB8  6FD2               	movwf	(printf@f+1)& (0+255),b
  2726  001EBA  EC2A  F019         	call	_printf	;wreg free
  2727                           
  2728                           ;main.c: 171: _delay((unsigned long)((100)*(32000000/4000.0)));
  2729  001EBE  0E05               	movlw	5
  2730  001EC0  0100               	movlb	0	; () banked
  2731  001EC2  6FF2               	movwf	(??_main+1)& (0+255),b
  2732  001EC4  0E0F               	movlw	15
  2733  001EC6  6FF1               	movwf	??_main& (0+255),b
  2734  001EC8  0EF1               	movlw	241
  2735  001ECA                     u6597:
  2736  001ECA  2EE8               	decfsz	wreg,f,c
  2737  001ECC  D7FE               	bra	u6597
  2738  001ECE  2FF1               	decfsz	??_main& (0+255),f,b
  2739  001ED0  D7FC               	bra	u6597
  2740  001ED2  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2741  001ED4  D7FA               	bra	u6597
  2742                           
  2743                           ;main.c: 172: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2744  001ED6  0E80               	movlw	128
  2745  001ED8  ECEB  F030         	call	_lcdInst
  2746  001EDC  0E34               	movlw	52
  2747  001EDE  0100               	movlb	0	; () banked
  2748  001EE0  6FF1               	movwf	??_main& (0+255),b
  2749  001EE2  0EF1               	movlw	241
  2750  001EE4                     u6607:
  2751  001EE4  2EE8               	decfsz	wreg,f,c
  2752  001EE6  D7FE               	bra	u6607
  2753  001EE8  2FF1               	decfsz	??_main& (0+255),f,b
  2754  001EEA  D7FC               	bra	u6607
  2755  001EEC  D000               	nop2	
  2756                           
  2757                           ;main.c: 173: if (change_mode == 1){
  2758  001EEE  0100               	movlb	0	; () banked
  2759  001EF0  05B3               	decf	_change_mode& (0+255),w,b
  2760  001EF2  11B4               	iorwf	(_change_mode+1)& (0+255),w,b
  2761  001EF4  A4D8               	btfss	status,2,c
  2762  001EF6  D7D3               	goto	u5320
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;main.c: 174: mode = 1;
  2766  001EF8  0E00               	movlw	0
  2767  001EFA  6FB6               	movwf	(_mode+1)& (0+255),b
  2768  001EFC  0E01               	movlw	1
  2769  001EFE  6FB5               	movwf	_mode& (0+255),b
  2770  001F00                     l506:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;main.c: 176: }
  2774                           ;main.c: 177: }
  2775                           ;main.c: 179: }
  2776                           ;main.c: 182: if (mode == 1){
  2777                           
  2778                           ; BSR set to: 0
  2779                           
  2780                           ; BSR set to: 0
  2781  001F00  05B5               	decf	_mode& (0+255),w,b
  2782  001F02  11B6               	iorwf	(_mode+1)& (0+255),w,b
  2783  001F04  A4D8               	btfss	status,2,c
  2784  001F06  D1E5               	goto	l508
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 184: initLCD();
  2788  001F08  EC05  F02F         	call	_initLCD	;wreg free
  2789  001F0C                     
  2790                           ;main.c: 187: if (state == 0){
  2791  001F0C  0100               	movlb	0	; () banked
  2792  001F0E  51B1               	movf	_state& (0+255),w,b
  2793  001F10  11B2               	iorwf	(_state+1)& (0+255),w,b
  2794  001F12  A4D8               	btfss	status,2,c
  2795  001F14  D022               	goto	l510
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 189: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  2799  001F16  0E80               	movlw	128
  2800  001F18  ECEB  F030         	call	_lcdInst
  2801  001F1C  0E34               	movlw	52
  2802  001F1E  0100               	movlb	0	; () banked
  2803  001F20  6FF1               	movwf	??_main& (0+255),b
  2804  001F22  0EF1               	movlw	241
  2805  001F24                     u6617:
  2806  001F24  2EE8               	decfsz	wreg,f,c
  2807  001F26  D7FE               	bra	u6617
  2808  001F28  2FF1               	decfsz	??_main& (0+255),f,b
  2809  001F2A  D7FC               	bra	u6617
  2810  001F2C  D000               	nop2	
  2811                           
  2812                           ;main.c: 190: printf("assembly step:");
  2813  001F2E  0E70               	movlw	low STR_3
  2814  001F30  0100               	movlb	0	; () banked
  2815  001F32  6FD1               	movwf	printf@f& (0+255),b
  2816  001F34  0EFE               	movlw	high STR_3
  2817  001F36  6FD2               	movwf	(printf@f+1)& (0+255),b
  2818  001F38  EC2A  F019         	call	_printf	;wreg free
  2819                           
  2820                           ;main.c: 191: _delay((unsigned long)((100)*(32000000/4000.0)));
  2821  001F3C  0E05               	movlw	5
  2822  001F3E  0100               	movlb	0	; () banked
  2823  001F40  6FF2               	movwf	(??_main+1)& (0+255),b
  2824  001F42  0E0F               	movlw	15
  2825  001F44  6FF1               	movwf	??_main& (0+255),b
  2826  001F46  0EF1               	movlw	241
  2827  001F48                     u6627:
  2828  001F48  2EE8               	decfsz	wreg,f,c
  2829  001F4A  D7FE               	bra	u6627
  2830  001F4C  2FF1               	decfsz	??_main& (0+255),f,b
  2831  001F4E  D7FC               	bra	u6627
  2832  001F50  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2833  001F52  D7FA               	bra	u6627
  2834                           
  2835                           ;main.c: 192: lcdInst(0xC0);;
  2836  001F54  0EC0               	movlw	192
  2837  001F56  ECEB  F030         	call	_lcdInst
  2838  001F5A                     l510:
  2839                           
  2840                           ;main.c: 193: }
  2841                           ;main.c: 194: if (state ==1){
  2842  001F5A  0100               	movlb	0	; () banked
  2843  001F5C  05B1               	decf	_state& (0+255),w,b
  2844  001F5E  11B2               	iorwf	(_state+1)& (0+255),w,b
  2845  001F60  A4D8               	btfss	status,2,c
  2846  001F62  D023               	goto	l511
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;main.c: 195: initLCD();
  2850  001F64  EC05  F02F         	call	_initLCD	;wreg free
  2851                           
  2852                           ;main.c: 196: printf("fastener set:");
  2853  001F68  0ED8               	movlw	low STR_4
  2854  001F6A  0100               	movlb	0	; () banked
  2855  001F6C  6FD1               	movwf	printf@f& (0+255),b
  2856  001F6E  0EFE               	movlw	high STR_4
  2857  001F70  6FD2               	movwf	(printf@f+1)& (0+255),b
  2858  001F72  EC2A  F019         	call	_printf	;wreg free
  2859                           
  2860                           ;main.c: 197: lcdInst(0xC0);;
  2861  001F76  0EC0               	movlw	192
  2862  001F78  ECEB  F030         	call	_lcdInst
  2863                           
  2864                           ;main.c: 198: printf("%s",current_set);
  2865  001F7C  0EF8               	movlw	low STR_5
  2866  001F7E  0100               	movlb	0	; () banked
  2867  001F80  6FD1               	movwf	printf@f& (0+255),b
  2868  001F82  0EFF               	movlw	high STR_5
  2869  001F84  6FD2               	movwf	(printf@f+1)& (0+255),b
  2870  001F86  0EBE               	movlw	low _current_set
  2871  001F88  6FD3               	movwf	(?_printf+2)& (0+255),b
  2872  001F8A  0E00               	movlw	high _current_set
  2873  001F8C  6FD4               	movwf	(?_printf+3)& (0+255),b
  2874  001F8E  EC2A  F019         	call	_printf	;wreg free
  2875                           
  2876                           ;main.c: 199: _delay((unsigned long)((100)*(32000000/4000.0)));
  2877  001F92  0E05               	movlw	5
  2878  001F94  0100               	movlb	0	; () banked
  2879  001F96  6FF2               	movwf	(??_main+1)& (0+255),b
  2880  001F98  0E0F               	movlw	15
  2881  001F9A  6FF1               	movwf	??_main& (0+255),b
  2882  001F9C  0EF1               	movlw	241
  2883  001F9E                     u6637:
  2884  001F9E  2EE8               	decfsz	wreg,f,c
  2885  001FA0  D7FE               	bra	u6637
  2886  001FA2  2FF1               	decfsz	??_main& (0+255),f,b
  2887  001FA4  D7FC               	bra	u6637
  2888  001FA6  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2889  001FA8  D7FA               	bra	u6637
  2890  001FAA                     l511:
  2891                           
  2892                           ;main.c: 200: }
  2893                           ;main.c: 202: if (state == 2){
  2894  001FAA  0E02               	movlw	2
  2895  001FAC  0100               	movlb	0	; () banked
  2896  001FAE  19B1               	xorwf	_state& (0+255),w,b
  2897  001FB0  11B2               	iorwf	(_state+1)& (0+255),w,b
  2898  001FB2  A4D8               	btfss	status,2,c
  2899  001FB4  D015               	goto	l512
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 203: initLCD();
  2903  001FB6  EC05  F02F         	call	_initLCD	;wreg free
  2904                           
  2905                           ;main.c: 204: printf("number:");
  2906  001FBA  0E8F               	movlw	low STR_6
  2907  001FBC  0100               	movlb	0	; () banked
  2908  001FBE  6FD1               	movwf	printf@f& (0+255),b
  2909  001FC0  0EFF               	movlw	high STR_6
  2910  001FC2  6FD2               	movwf	(printf@f+1)& (0+255),b
  2911  001FC4  EC2A  F019         	call	_printf	;wreg free
  2912                           
  2913                           ;main.c: 205: _delay((unsigned long)((100)*(32000000/4000.0)));
  2914  001FC8  0E05               	movlw	5
  2915  001FCA  0100               	movlb	0	; () banked
  2916  001FCC  6FF2               	movwf	(??_main+1)& (0+255),b
  2917  001FCE  0E0F               	movlw	15
  2918  001FD0  6FF1               	movwf	??_main& (0+255),b
  2919  001FD2  0EF1               	movlw	241
  2920  001FD4                     u6647:
  2921  001FD4  2EE8               	decfsz	wreg,f,c
  2922  001FD6  D7FE               	bra	u6647
  2923  001FD8  2FF1               	decfsz	??_main& (0+255),f,b
  2924  001FDA  D7FC               	bra	u6647
  2925  001FDC  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2926  001FDE  D7FA               	bra	u6647
  2927  001FE0                     l512:
  2928                           
  2929                           ;main.c: 206: }
  2930                           ;main.c: 208: if (state == 3){
  2931  001FE0  0E03               	movlw	3
  2932  001FE2  0100               	movlb	0	; () banked
  2933  001FE4  19B1               	xorwf	_state& (0+255),w,b
  2934  001FE6  11B2               	iorwf	(_state+1)& (0+255),w,b
  2935  001FE8  A4D8               	btfss	status,2,c
  2936  001FEA  D090               	goto	l513
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;main.c: 209: initLCD();
  2940  001FEC  EC05  F02F         	call	_initLCD	;wreg free
  2941                           
  2942                           ;main.c: 210: printf("assembly step:%d",assembly_step);
  2943  001FF0  0E0F               	movlw	low STR_7
  2944  001FF2  0100               	movlb	0	; () banked
  2945  001FF4  6FD1               	movwf	printf@f& (0+255),b
  2946  001FF6  0EFE               	movlw	high STR_7
  2947  001FF8  6FD2               	movwf	(printf@f+1)& (0+255),b
  2948  001FFA  C0AF  F0D3         	movff	_assembly_step,?_printf+2
  2949  001FFE  C0B0  F0D4         	movff	_assembly_step+1,?_printf+3
  2950  002002  EC2A  F019         	call	_printf	;wreg free
  2951                           
  2952                           ;main.c: 211: _delay((unsigned long)((200)*(32000000/4000.0)));
  2953  002006  0E09               	movlw	9
  2954  002008  0100               	movlb	0	; () banked
  2955  00200A  6FF2               	movwf	(??_main+1)& (0+255),b
  2956  00200C  0E1E               	movlw	30
  2957  00200E  6FF1               	movwf	??_main& (0+255),b
  2958  002010  0EE4               	movlw	228
  2959  002012                     u6657:
  2960  002012  2EE8               	decfsz	wreg,f,c
  2961  002014  D7FE               	bra	u6657
  2962  002016  2FF1               	decfsz	??_main& (0+255),f,b
  2963  002018  D7FC               	bra	u6657
  2964  00201A  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  2965  00201C  D7FA               	bra	u6657
  2966  00201E  F000               	nop	
  2967                           
  2968                           ;main.c: 212: for ( i=0; i<assembly_step; i++){
  2969  002020  0E00               	movlw	0
  2970  002022  0100               	movlb	0	; () banked
  2971  002024  6FB8               	movwf	(_i+1)& (0+255),b
  2972  002026  0E00               	movlw	0
  2973  002028  6FB7               	movwf	_i& (0+255),b
  2974  00202A  D066               	goto	l514
  2975  00202C                     
  2976                           ; BSR set to: 0
  2977                           ;main.c: 214: initLCD();
  2978                           
  2979                           ; BSR set to: 0
  2980  00202C  EC05  F02F         	call	_initLCD	;wreg free
  2981                           
  2982                           ;main.c: 216: printf("step");
  2983  002030  0EE3               	movlw	low STR_8
  2984  002032  0100               	movlb	0	; () banked
  2985  002034  6FD1               	movwf	printf@f& (0+255),b
  2986  002036  0EFF               	movlw	high STR_8
  2987  002038  6FD2               	movwf	(printf@f+1)& (0+255),b
  2988  00203A  EC2A  F019         	call	_printf	;wreg free
  2989                           
  2990                           ;main.c: 217: printf("%d", i+1);
  2991  00203E  0ED1               	movlw	low (STR_66+2)
  2992  002040  0100               	movlb	0	; () banked
  2993  002042  6FD1               	movwf	printf@f& (0+255),b
  2994  002044  0EFF               	movlw	high (STR_66+2)
  2995  002046  6FD2               	movwf	(printf@f+1)& (0+255),b
  2996  002048  0E01               	movlw	1
  2997  00204A  25B7               	addwf	_i& (0+255),w,b
  2998  00204C  6FD3               	movwf	(?_printf+2)& (0+255),b
  2999  00204E  0E00               	movlw	0
  3000  002050  21B8               	addwfc	(_i+1)& (0+255),w,b
  3001  002052  6FD4               	movwf	(?_printf+3)& (0+255),b
  3002  002054  EC2A  F019         	call	_printf	;wreg free
  3003                           
  3004                           ;main.c: 218: printf(":");
  3005  002058  0E3F               	movlw	low (STR_35+14)
  3006  00205A  0100               	movlb	0	; () banked
  3007  00205C  6FD1               	movwf	printf@f& (0+255),b
  3008  00205E  0EFE               	movlw	high (STR_35+14)
  3009  002060  6FD2               	movwf	(printf@f+1)& (0+255),b
  3010  002062  EC2A  F019         	call	_printf	;wreg free
  3011                           
  3012                           ;main.c: 219: printf("%s", final_set[i]);
  3013  002066  C0B7  F0CB         	movff	_i,___wmul@multiplier
  3014  00206A  C0B8  F0CC         	movff	_i+1,___wmul@multiplier+1
  3015  00206E  0E00               	movlw	0
  3016  002070  0100               	movlb	0	; () banked
  3017  002072  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3018  002074  0E05               	movlw	5
  3019  002076  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  3020  002078  EC72  F030         	call	___wmul	;wreg free
  3021  00207C  0EBC               	movlw	low _final_set
  3022  00207E  0100               	movlb	0	; () banked
  3023  002080  25CB               	addwf	?___wmul& (0+255),w,b
  3024  002082  6FF6               	movwf	_main$2694& (0+255),b
  3025  002084  0E01               	movlw	high _final_set
  3026  002086  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  3027  002088  6FF7               	movwf	(_main$2694+1)& (0+255),b
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main.c: 219: printf("%s", final_set[i]);
  3031  00208A  0EF8               	movlw	low STR_5
  3032  00208C  6FD1               	movwf	printf@f& (0+255),b
  3033  00208E  0EFF               	movlw	high STR_5
  3034  002090  6FD2               	movwf	(printf@f+1)& (0+255),b
  3035  002092  C0F6  F0D3         	movff	_main$2694,?_printf+2
  3036  002096  C0F7  F0D4         	movff	_main$2694+1,?_printf+3
  3037  00209A  EC2A  F019         	call	_printf	;wreg free
  3038                           
  3039                           ;main.c: 220: printf(",");
  3040  00209E  0EFB               	movlw	low STR_12
  3041  0020A0  0100               	movlb	0	; () banked
  3042  0020A2  6FD1               	movwf	printf@f& (0+255),b
  3043  0020A4  0EFF               	movlw	high STR_12
  3044  0020A6  6FD2               	movwf	(printf@f+1)& (0+255),b
  3045  0020A8  EC2A  F019         	call	_printf	;wreg free
  3046                           
  3047                           ;main.c: 221: printf("%d",final_number[i]);
  3048  0020AC  0ED1               	movlw	low (STR_66+2)
  3049  0020AE  0100               	movlb	0	; () banked
  3050  0020B0  6FD1               	movwf	printf@f& (0+255),b
  3051  0020B2  0EFF               	movlw	high (STR_66+2)
  3052  0020B4  6FD2               	movwf	(printf@f+1)& (0+255),b
  3053  0020B6  90D8               	bcf	status,0,c
  3054  0020B8  35B7               	rlcf	_i& (0+255),w,b
  3055  0020BA  6ED9               	movwf	fsr2l,c
  3056  0020BC  35B8               	rlcf	(_i+1)& (0+255),w,b
  3057  0020BE  6EDA               	movwf	fsr2h,c
  3058  0020C0  0E50               	movlw	low _final_number
  3059  0020C2  26D9               	addwf	fsr2l,f,c
  3060  0020C4  0E01               	movlw	high _final_number
  3061  0020C6  22DA               	addwfc	fsr2h,f,c
  3062  0020C8  CFDE F0D3          	movff	postinc2,?_printf+2
  3063  0020CC  CFDD F0D4          	movff	postdec2,?_printf+3
  3064  0020D0  EC2A  F019         	call	_printf	;wreg free
  3065                           
  3066                           ;main.c: 222: _delay((unsigned long)((100)*(32000000/4000.0)));
  3067  0020D4  0E05               	movlw	5
  3068  0020D6  0100               	movlb	0	; () banked
  3069  0020D8  6FF2               	movwf	(??_main+1)& (0+255),b
  3070  0020DA  0E0F               	movlw	15
  3071  0020DC  6FF1               	movwf	??_main& (0+255),b
  3072  0020DE  0EF1               	movlw	241
  3073  0020E0                     u6667:
  3074  0020E0  2EE8               	decfsz	wreg,f,c
  3075  0020E2  D7FE               	bra	u6667
  3076  0020E4  2FF1               	decfsz	??_main& (0+255),f,b
  3077  0020E6  D7FC               	bra	u6667
  3078  0020E8  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3079  0020EA  D7FA               	bra	u6667
  3080                           
  3081                           ;main.c: 223: lcdInst(0xC0);;
  3082  0020EC  0EC0               	movlw	192
  3083  0020EE  ECEB  F030         	call	_lcdInst
  3084  0020F2  0100               	movlb	0	; () banked
  3085  0020F4  4BB7               	infsnz	_i& (0+255),f,b
  3086  0020F6  2BB8               	incf	(_i+1)& (0+255),f,b
  3087  0020F8                     l514:
  3088                           
  3089                           ; BSR set to: 0
  3090                           
  3091                           ; BSR set to: 0
  3092  0020F8  51AF               	movf	_assembly_step& (0+255),w,b
  3093  0020FA  5DB7               	subwf	_i& (0+255),w,b
  3094  0020FC  51B0               	movf	(_assembly_step+1)& (0+255),w,b
  3095  0020FE  59B8               	subwfb	(_i+1)& (0+255),w,b
  3096  002100  A0D8               	btfss	status,0,c
  3097  002102  D794               	goto	l515
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;main.c: 224: }
  3101                           ;main.c: 225: state = 4;
  3102                           
  3103                           ; BSR set to: 0
  3104  002104  0E00               	movlw	0
  3105  002106  6FB2               	movwf	(_state+1)& (0+255),b
  3106  002108  0E04               	movlw	4
  3107  00210A  6FB1               	movwf	_state& (0+255),b
  3108  00210C                     l513:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 226: }
  3112                           ;main.c: 227: if (state == 4){
  3113                           
  3114                           ; BSR set to: 0
  3115  00210C  0E04               	movlw	4
  3116  00210E  19B1               	xorwf	_state& (0+255),w,b
  3117  002110  11B2               	iorwf	(_state+1)& (0+255),w,b
  3118  002112  A4D8               	btfss	status,2,c
  3119  002114  D01F               	goto	l517
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;main.c: 228: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3123  002116  0E80               	movlw	128
  3124  002118  ECEB  F030         	call	_lcdInst
  3125  00211C  0E34               	movlw	52
  3126  00211E  0100               	movlb	0	; () banked
  3127  002120  6FF1               	movwf	??_main& (0+255),b
  3128  002122  0EF1               	movlw	241
  3129  002124                     u6677:
  3130  002124  2EE8               	decfsz	wreg,f,c
  3131  002126  D7FE               	bra	u6677
  3132  002128  2FF1               	decfsz	??_main& (0+255),f,b
  3133  00212A  D7FC               	bra	u6677
  3134  00212C  D000               	nop2	
  3135                           
  3136                           ;main.c: 229: printf("Press # to start!");
  3137  00212E  0ECA               	movlw	low STR_14
  3138  002130  0100               	movlb	0	; () banked
  3139  002132  6FD1               	movwf	printf@f& (0+255),b
  3140  002134  0EFD               	movlw	high STR_14
  3141  002136  6FD2               	movwf	(printf@f+1)& (0+255),b
  3142  002138  EC2A  F019         	call	_printf	;wreg free
  3143                           
  3144                           ;main.c: 230: _delay((unsigned long)((100)*(32000000/4000.0)));
  3145  00213C  0E05               	movlw	5
  3146  00213E  0100               	movlb	0	; () banked
  3147  002140  6FF2               	movwf	(??_main+1)& (0+255),b
  3148  002142  0E0F               	movlw	15
  3149  002144  6FF1               	movwf	??_main& (0+255),b
  3150  002146  0EF1               	movlw	241
  3151  002148                     u6687:
  3152  002148  2EE8               	decfsz	wreg,f,c
  3153  00214A  D7FE               	bra	u6687
  3154  00214C  2FF1               	decfsz	??_main& (0+255),f,b
  3155  00214E  D7FC               	bra	u6687
  3156  002150  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3157  002152  D7FA               	bra	u6687
  3158  002154                     l517:
  3159                           
  3160                           ;main.c: 231: }
  3161                           ;main.c: 232: if (state == 5){
  3162  002154  0E05               	movlw	5
  3163  002156  0100               	movlb	0	; () banked
  3164  002158  19B1               	xorwf	_state& (0+255),w,b
  3165  00215A  11B2               	iorwf	(_state+1)& (0+255),w,b
  3166  00215C  A4D8               	btfss	status,2,c
  3167  00215E  D6D6               	goto	l509
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;main.c: 238: I2C_init();
  3171  002160  EC1B  F030         	call	_I2C_init	;wreg free
  3172                           
  3173                           ;main.c: 240: I2C_Master_Start();
  3174  002164  EC46  F031         	call	_I2C_Master_Start	;wreg free
  3175                           
  3176                           ;main.c: 241: I2C_Master_Write(0b11010000);
  3177  002168  0E00               	movlw	0
  3178  00216A  0100               	movlb	0	; () banked
  3179  00216C  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3180  00216E  0ED0               	movlw	208
  3181  002170  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3182  002172  EC34  F031         	call	_I2C_Master_Write	;wreg free
  3183                           
  3184                           ;main.c: 242: I2C_Master_Write(0x00);
  3185  002176  0E00               	movlw	0
  3186  002178  0100               	movlb	0	; () banked
  3187  00217A  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3188  00217C  0E00               	movlw	0
  3189  00217E  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3190  002180  EC34  F031         	call	_I2C_Master_Write	;wreg free
  3191                           
  3192                           ;main.c: 243: I2C_Master_Stop();
  3193  002184  EC42  F031         	call	_I2C_Master_Stop	;wreg free
  3194                           
  3195                           ;main.c: 246: I2C_Master_Start();
  3196  002188  EC46  F031         	call	_I2C_Master_Start	;wreg free
  3197                           
  3198                           ;main.c: 247: I2C_Master_Write(0b11010001);
  3199  00218C  0E00               	movlw	0
  3200  00218E  0100               	movlb	0	; () banked
  3201  002190  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3202  002192  0ED1               	movlw	209
  3203  002194  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3204  002196  EC34  F031         	call	_I2C_Master_Write	;wreg free
  3205                           
  3206                           ;main.c: 248: for(i = 0; i < 6; i++){
  3207  00219A  0E00               	movlw	0
  3208  00219C  0100               	movlb	0	; () banked
  3209  00219E  6FB8               	movwf	(_i+1)& (0+255),b
  3210  0021A0  0E00               	movlw	0
  3211  0021A2  6FB7               	movwf	_i& (0+255),b
  3212  0021A4                     l7453:
  3213                           
  3214                           ; BSR set to: 0
  3215  0021A4  51B8               	movf	(_i+1)& (0+255),w,b
  3216  0021A6  E112               	bnz	l7463
  3217  0021A8  0E06               	movlw	6
  3218  0021AA  5DB7               	subwf	_i& (0+255),w,b
  3219  0021AC  B0D8               	btfsc	status,0,c
  3220  0021AE  D00E               	goto	u5430
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 249: time[i] = I2C_Master_Read(0);
  3224                           
  3225                           ; BSR set to: 0
  3226                           
  3227                           ; BSR set to: 0
  3228  0021B0  0E90               	movlw	low _time
  3229  0021B2  25B7               	addwf	_i& (0+255),w,b
  3230  0021B4  6ED9               	movwf	fsr2l,c
  3231  0021B6  0E00               	movlw	high _time
  3232  0021B8  21B8               	addwfc	(_i+1)& (0+255),w,b
  3233  0021BA  6EDA               	movwf	fsr2h,c
  3234  0021BC  0E00               	movlw	0
  3235  0021BE  EC49  F030         	call	_I2C_Master_Read
  3236  0021C2  6EDF               	movwf	indf2,c
  3237  0021C4  0100               	movlb	0	; () banked
  3238  0021C6  4BB7               	infsnz	_i& (0+255),f,b
  3239  0021C8  2BB8               	incf	(_i+1)& (0+255),f,b
  3240  0021CA  D7EC               	goto	l7453
  3241  0021CC                     u5430:
  3242  0021CC                     l7463:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 250: }
  3246                           ;main.c: 251: time[6] = I2C_Master_Read(1);
  3247  0021CC  0E01               	movlw	1
  3248  0021CE  EC49  F030         	call	_I2C_Master_Read
  3249  0021D2  0100               	movlb	0	; () banked
  3250  0021D4  6F96               	movwf	(_time+6)& (0+255),b
  3251                           
  3252                           ;main.c: 252: I2C_Master_Stop();
  3253  0021D6  EC42  F031         	call	_I2C_Master_Stop	;wreg free
  3254                           
  3255                           ;main.c: 254: hr_initial = time[2]/16*10+time[2]%16;
  3256  0021DA  C092  F0F1         	movff	_time+2,??_main
  3257  0021DE  0E0F               	movlw	15
  3258  0021E0  0100               	movlb	0	; () banked
  3259  0021E2  17F1               	andwf	??_main& (0+255),f,b
  3260  0021E4  0E00               	movlw	0
  3261  0021E6  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3262  0021E8  0E10               	movlw	16
  3263  0021EA  6FC5               	movwf	___awdiv@divisor& (0+255),b
  3264  0021EC  C092  F0C3         	movff	_time+2,___awdiv@dividend
  3265  0021F0  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  3266  0021F2  EC2D  F02C         	call	___awdiv	;wreg free
  3267  0021F6  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  3268  0021FA  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  3269  0021FE  0E00               	movlw	0
  3270  002200  0100               	movlb	0	; () banked
  3271  002202  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3272  002204  0E0A               	movlw	10
  3273  002206  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  3274  002208  EC72  F030         	call	___wmul	;wreg free
  3275  00220C  0100               	movlb	0	; () banked
  3276  00220E  51F1               	movf	??_main& (0+255),w,b
  3277  002210  25CB               	addwf	?___wmul& (0+255),w,b
  3278  002212  0101               	movlb	1	; () banked
  3279  002214  6F6E               	movwf	_hr_initial& (0+255),b
  3280  002216  0100               	movlb	0	; () banked
  3281  002218  0E00               	movlw	0
  3282  00221A  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  3283  00221C  0101               	movlb	1	; () banked
  3284  00221E  6F6F               	movwf	(_hr_initial+1)& (0+255),b
  3285                           
  3286                           ; BSR set to: 1
  3287                           ;main.c: 255: min_initial = time[1]/16*10 + time[1]%16;
  3288  002220  C091  F0F1         	movff	_time+1,??_main
  3289  002224  0E0F               	movlw	15
  3290  002226  0100               	movlb	0	; () banked
  3291  002228  17F1               	andwf	??_main& (0+255),f,b
  3292  00222A  0E00               	movlw	0
  3293  00222C  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3294  00222E  0E10               	movlw	16
  3295  002230  6FC5               	movwf	___awdiv@divisor& (0+255),b
  3296  002232  C091  F0C3         	movff	_time+1,___awdiv@dividend
  3297  002236  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  3298  002238  EC2D  F02C         	call	___awdiv	;wreg free
  3299  00223C  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  3300  002240  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  3301  002244  0E00               	movlw	0
  3302  002246  0100               	movlb	0	; () banked
  3303  002248  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3304  00224A  0E0A               	movlw	10
  3305  00224C  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  3306  00224E  EC72  F030         	call	___wmul	;wreg free
  3307  002252  0100               	movlb	0	; () banked
  3308  002254  51F1               	movf	??_main& (0+255),w,b
  3309  002256  25CB               	addwf	?___wmul& (0+255),w,b
  3310  002258  0101               	movlb	1	; () banked
  3311  00225A  6F6C               	movwf	_min_initial& (0+255),b
  3312  00225C  0100               	movlb	0	; () banked
  3313  00225E  0E00               	movlw	0
  3314  002260  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  3315  002262  0101               	movlb	1	; () banked
  3316  002264  6F6D               	movwf	(_min_initial+1)& (0+255),b
  3317                           
  3318                           ; BSR set to: 1
  3319                           ;main.c: 256: sec_initial = time[0]/16*10 +time[0]%16;
  3320  002266  C090  F0F1         	movff	_time,??_main
  3321  00226A  0E0F               	movlw	15
  3322  00226C  0100               	movlb	0	; () banked
  3323  00226E  17F1               	andwf	??_main& (0+255),f,b
  3324  002270  0E00               	movlw	0
  3325  002272  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3326  002274  0E10               	movlw	16
  3327  002276  6FC5               	movwf	___awdiv@divisor& (0+255),b
  3328  002278  C090  F0C3         	movff	_time,___awdiv@dividend
  3329  00227C  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  3330  00227E  EC2D  F02C         	call	___awdiv	;wreg free
  3331  002282  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  3332  002286  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  3333  00228A  0E00               	movlw	0
  3334  00228C  0100               	movlb	0	; () banked
  3335  00228E  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3336  002290  0E0A               	movlw	10
  3337  002292  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  3338  002294  EC72  F030         	call	___wmul	;wreg free
  3339  002298  0100               	movlb	0	; () banked
  3340  00229A  51F1               	movf	??_main& (0+255),w,b
  3341  00229C  25CB               	addwf	?___wmul& (0+255),w,b
  3342  00229E  0101               	movlb	1	; () banked
  3343  0022A0  6F6A               	movwf	_sec_initial& (0+255),b
  3344  0022A2  0100               	movlb	0	; () banked
  3345  0022A4  0E00               	movlw	0
  3346  0022A6  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  3347  0022A8  0101               	movlb	1	; () banked
  3348  0022AA  6F6B               	movwf	(_sec_initial+1)& (0+255),b
  3349                           
  3350                           ; BSR set to: 1
  3351                           ;main.c: 260: initVibTimer();
  3352  0022AC  ECF7  F030         	call	_initVibTimer	;wreg free
  3353                           
  3354                           ;main.c: 261: mode = 2;
  3355  0022B0  0E00               	movlw	0
  3356  0022B2  0100               	movlb	0	; () banked
  3357  0022B4  6FB6               	movwf	(_mode+1)& (0+255),b
  3358  0022B6  0E02               	movlw	2
  3359  0022B8  6FB5               	movwf	_mode& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 262: printf("start operation");
  3363  0022BA  0E51               	movlw	low STR_15
  3364  0022BC  6FD1               	movwf	printf@f& (0+255),b
  3365  0022BE  0EFE               	movlw	high STR_15
  3366  0022C0  6FD2               	movwf	(printf@f+1)& (0+255),b
  3367  0022C2  EC2A  F019         	call	_printf	;wreg free
  3368                           
  3369                           ;main.c: 266: }
  3370                           ;main.c: 268: }
  3371                           ;main.c: 269: generate_compartment_array(assembly_step);
  3372                           
  3373                           ;main.c: 264: break;
  3374  0022C6  C0AF  F0C3         	movff	_assembly_step,generate_compartment_array@step
  3375  0022CA  C0B0  F0C4         	movff	_assembly_step+1,generate_compartment_array@step+1
  3376  0022CE  EC76  F025         	call	_generate_compartment_array	;wreg free
  3377  0022D2                     l508:
  3378                           
  3379                           ;main.c: 270: }
  3380                           ;main.c: 283: if (mode == 2){
  3381  0022D2  0E02               	movlw	2
  3382  0022D4  0100               	movlb	0	; () banked
  3383  0022D6  19B5               	xorwf	_mode& (0+255),w,b
  3384  0022D8  11B6               	iorwf	(_mode+1)& (0+255),w,b
  3385  0022DA  A4D8               	btfss	status,2,c
  3386  0022DC  D5DB               	goto	l502
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;main.c: 285: (INTCONbits.GIE = 1);
  3390  0022DE  8EF2               	bsf	intcon,7,c	;volatile
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;main.c: 286: initLCD();
  3394  0022E0  EC05  F02F         	call	_initLCD	;wreg free
  3395                           
  3396                           ;main.c: 287: printf("mode 2");
  3397  0022E4  0EA5               	movlw	low STR_16
  3398  0022E6  0100               	movlb	0	; () banked
  3399  0022E8  6FD1               	movwf	printf@f& (0+255),b
  3400  0022EA  0EFF               	movlw	high STR_16
  3401  0022EC  6FD2               	movwf	(printf@f+1)& (0+255),b
  3402  0022EE  EC2A  F019         	call	_printf	;wreg free
  3403                           
  3404                           ;main.c: 288: _delay((unsigned long)((100)*(32000000/4000.0)));
  3405  0022F2  0E05               	movlw	5
  3406  0022F4  0100               	movlb	0	; () banked
  3407  0022F6  6FF2               	movwf	(??_main+1)& (0+255),b
  3408  0022F8  0E0F               	movlw	15
  3409  0022FA  6FF1               	movwf	??_main& (0+255),b
  3410  0022FC  0EF1               	movlw	241
  3411  0022FE                     u6697:
  3412  0022FE  2EE8               	decfsz	wreg,f,c
  3413  002300  D7FE               	bra	u6697
  3414  002302  2FF1               	decfsz	??_main& (0+255),f,b
  3415  002304  D7FC               	bra	u6697
  3416  002306  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3417  002308  D7FA               	bra	u6697
  3418                           
  3419                           ;main.c: 292: I2C_init();
  3420  00230A  EC1B  F030         	call	_I2C_init	;wreg free
  3421                           
  3422                           ;main.c: 294: LATCbits.LATC0 = 1;
  3423  00230E  808B               	bsf	3979,0,c	;volatile
  3424                           
  3425                           ;main.c: 295: TRISCbits.RC0 = 0;
  3426  002310  9094               	bcf	3988,0,c	;volatile
  3427                           
  3428                           ;main.c: 297: INT1IE = 0;
  3429  002312  96F0               	bcf	intcon3,3,c	;volatile
  3430                           
  3431                           ;main.c: 298: RBIE = 1;
  3432  002314  86F2               	bsf	intcon,3,c	;volatile
  3433                           
  3434                           ;main.c: 301: initLCD();
  3435  002316  EC05  F02F         	call	_initLCD	;wreg free
  3436                           
  3437                           ;main.c: 302: printf("Locating C1");
  3438  00231A  0E0F               	movlw	low STR_17
  3439  00231C  0100               	movlb	0	; () banked
  3440  00231E  6FD1               	movwf	printf@f& (0+255),b
  3441  002320  0EFF               	movlw	high STR_17
  3442  002322  6FD2               	movwf	(printf@f+1)& (0+255),b
  3443  002324  EC2A  F019         	call	_printf	;wreg free
  3444                           
  3445                           ;main.c: 306: TRISBbits.RB5 = 1;
  3446  002328  8A93               	bsf	3987,5,c	;volatile
  3447                           
  3448                           ;main.c: 307: TRISBbits.RB7 = 1;
  3449  00232A  8E93               	bsf	3987,7,c	;volatile
  3450                           
  3451                           ;main.c: 308: TRISBbits.RB6 = 1;
  3452  00232C  8C93               	bsf	3987,6,c	;volatile
  3453                           
  3454                           ;main.c: 309: TRISBbits.RB4 = 1;
  3455  00232E  8893               	bsf	3987,4,c	;volatile
  3456                           
  3457                           ;main.c: 312: I2C_sendData(rotate_gear);
  3458  002330  0100               	movlb	0	; () banked
  3459  002332  51FF               	movf	_rotate_gear& (0+255),w,b
  3460  002334  EC86  F030         	call	_I2C_sendData
  3461                           
  3462                           ;main.c: 317: openHandle_data = '1';
  3463  002338  0E31               	movlw	49
  3464  00233A  0100               	movlb	0	; () banked
  3465  00233C  6FBC               	movwf	_openHandle_data& (0+255),b
  3466                           
  3467                           ;main.c: 318: while(openHandle_data != '0'){
  3468  00233E  D010               	goto	l524
  3469  002340                     
  3470                           ; BSR set to: 0
  3471                           ;main.c: 319: I2C_Master_Start();
  3472                           
  3473                           ; BSR set to: 0
  3474  002340  EC46  F031         	call	_I2C_Master_Start	;wreg free
  3475                           
  3476                           ;main.c: 320: I2C_Master_Write(0b00010001);
  3477  002344  0E00               	movlw	0
  3478  002346  0100               	movlb	0	; () banked
  3479  002348  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3480  00234A  0E11               	movlw	17
  3481  00234C  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3482  00234E  EC34  F031         	call	_I2C_Master_Write	;wreg free
  3483                           
  3484                           ;main.c: 321: openHandle_data = I2C_Master_Read(1);
  3485  002352  0E01               	movlw	1
  3486  002354  EC49  F030         	call	_I2C_Master_Read
  3487  002358  0100               	movlb	0	; () banked
  3488  00235A  6FBC               	movwf	_openHandle_data& (0+255),b
  3489                           
  3490                           ;main.c: 322: I2C_Master_Stop();
  3491  00235C  EC42  F031         	call	_I2C_Master_Stop	;wreg free
  3492  002360                     l524:
  3493  002360  0E30               	movlw	48
  3494  002362  0100               	movlb	0	; () banked
  3495  002364  19BC               	xorwf	_openHandle_data& (0+255),w,b
  3496  002366  A4D8               	btfss	status,2,c
  3497  002368  D7EB               	goto	l525
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;main.c: 325: }
  3501                           ;main.c: 326: initLCD();
  3502                           
  3503                           ; BSR set to: 0
  3504  00236A  EC05  F02F         	call	_initLCD	;wreg free
  3505                           
  3506                           ;main.c: 327: printf("C1 is found");
  3507  00236E  0E33               	movlw	low STR_18
  3508  002370  0100               	movlb	0	; () banked
  3509  002372  6FD1               	movwf	printf@f& (0+255),b
  3510  002374  0EFF               	movlw	high STR_18
  3511  002376  6FD2               	movwf	(printf@f+1)& (0+255),b
  3512  002378  EC2A  F019         	call	_printf	;wreg free
  3513                           
  3514                           ;main.c: 328: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3515  00237C  0E80               	movlw	128
  3516  00237E  ECEB  F030         	call	_lcdInst
  3517  002382  0E34               	movlw	52
  3518  002384  0100               	movlb	0	; () banked
  3519  002386  6FF1               	movwf	??_main& (0+255),b
  3520  002388  0EF1               	movlw	241
  3521  00238A                     u6707:
  3522  00238A  2EE8               	decfsz	wreg,f,c
  3523  00238C  D7FE               	bra	u6707
  3524  00238E  2FF1               	decfsz	??_main& (0+255),f,b
  3525  002390  D7FC               	bra	u6707
  3526  002392  D000               	nop2	
  3527                           
  3528                           ;main.c: 334: I2C_init();
  3529  002394  EC1B  F030         	call	_I2C_init	;wreg free
  3530                           
  3531                           ;main.c: 335: generate_compartment_array(assembly_step);
  3532  002398  C0AF  F0C3         	movff	_assembly_step,generate_compartment_array@step
  3533  00239C  C0B0  F0C4         	movff	_assembly_step+1,generate_compartment_array@step+1
  3534  0023A0  EC76  F025         	call	_generate_compartment_array	;wreg free
  3535                           
  3536                           ;main.c: 336: int compart_id = 0;
  3537  0023A4  0E00               	movlw	0
  3538  0023A6  0100               	movlb	0	; () banked
  3539  0023A8  6FF9               	movwf	(main@compart_id+1)& (0+255),b
  3540  0023AA  0E00               	movlw	0
  3541  0023AC  6FF8               	movwf	main@compart_id& (0+255),b
  3542                           
  3543                           ;main.c: 337: while(NeedToCloseLid != 1 && compart_id < 8){
  3544  0023AE  D0BA               	goto	l527
  3545  0023B0                     
  3546                           ; BSR set to: 0
  3547                           ;main.c: 338: initLCD();
  3548                           
  3549                           ; BSR set to: 0
  3550  0023B0  EC05  F02F         	call	_initLCD	;wreg free
  3551                           
  3552                           ;main.c: 339: printf("processing C%d",(compart_id+1));
  3553  0023B4  0E8E               	movlw	low STR_19
  3554  0023B6  0100               	movlb	0	; () banked
  3555  0023B8  6FD1               	movwf	printf@f& (0+255),b
  3556  0023BA  0EFE               	movlw	high STR_19
  3557  0023BC  6FD2               	movwf	(printf@f+1)& (0+255),b
  3558  0023BE  0E01               	movlw	1
  3559  0023C0  25F8               	addwf	main@compart_id& (0+255),w,b
  3560  0023C2  6FD3               	movwf	(?_printf+2)& (0+255),b
  3561  0023C4  0E00               	movlw	0
  3562  0023C6  21F9               	addwfc	(main@compart_id+1)& (0+255),w,b
  3563  0023C8  6FD4               	movwf	(?_printf+3)& (0+255),b
  3564  0023CA  EC2A  F019         	call	_printf	;wreg free
  3565                           
  3566                           ;main.c: 340: _delay((unsigned long)((100)*(32000000/4000.0)));
  3567  0023CE  0E05               	movlw	5
  3568  0023D0  0100               	movlb	0	; () banked
  3569  0023D2  6FF2               	movwf	(??_main+1)& (0+255),b
  3570  0023D4  0E0F               	movlw	15
  3571  0023D6  6FF1               	movwf	??_main& (0+255),b
  3572  0023D8  0EF1               	movlw	241
  3573  0023DA                     u6717:
  3574  0023DA  2EE8               	decfsz	wreg,f,c
  3575  0023DC  D7FE               	bra	u6717
  3576  0023DE  2FF1               	decfsz	??_main& (0+255),f,b
  3577  0023E0  D7FC               	bra	u6717
  3578  0023E2  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3579  0023E4  D7FA               	bra	u6717
  3580                           
  3581                           ;main.c: 342: if (compartment_array[compart_id] == 1){
  3582  0023E6  90D8               	bcf	status,0,c
  3583  0023E8  0100               	movlb	0	; () banked
  3584  0023EA  35F8               	rlcf	main@compart_id& (0+255),w,b
  3585  0023EC  6ED9               	movwf	fsr2l,c
  3586  0023EE  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3587  0023F0  6EDA               	movwf	fsr2h,c
  3588  0023F2  0E80               	movlw	low _compartment_array
  3589  0023F4  26D9               	addwf	fsr2l,f,c
  3590  0023F6  0E00               	movlw	high _compartment_array
  3591  0023F8  22DA               	addwfc	fsr2h,f,c
  3592  0023FA  04DE               	decf	postinc2,w,c
  3593  0023FC  10DE               	iorwf	postinc2,w,c
  3594  0023FE  A4D8               	btfss	status,2,c
  3595  002400  D05B               	goto	l533
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 343: B_counter = 0;
  3599  002402  0E00               	movlw	0
  3600  002404  6FAE               	movwf	(_B_counter+1)& (0+255),b
  3601  002406  0E00               	movlw	0
  3602  002408  6FAD               	movwf	_B_counter& (0+255),b
  3603                           
  3604                           ;main.c: 344: N_counter = 0;
  3605  00240A  0E00               	movlw	0
  3606  00240C  6FAA               	movwf	(_N_counter+1)& (0+255),b
  3607  00240E  0E00               	movlw	0
  3608  002410  6FA9               	movwf	_N_counter& (0+255),b
  3609                           
  3610                           ;main.c: 345: S_counter = 0;
  3611  002412  0E00               	movlw	0
  3612  002414  6FAC               	movwf	(_S_counter+1)& (0+255),b
  3613  002416  0E00               	movlw	0
  3614  002418  6FAB               	movwf	_S_counter& (0+255),b
  3615                           
  3616                           ;main.c: 346: W_counter = 0;
  3617  00241A  0E00               	movlw	0
  3618  00241C  6FA8               	movwf	(_W_counter+1)& (0+255),b
  3619  00241E  0E00               	movlw	0
  3620  002420  6FA7               	movwf	_W_counter& (0+255),b
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;main.c: 348: if (NeedToCloseLid != 1)
  3624  002422  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3625  002424  B4D8               	btfsc	status,2,c
  3626  002426  D00F               	goto	l530
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;main.c: 349: Bolt_dispense(B_array[compart_id]);
  3630  002428  90D8               	bcf	status,0,c
  3631  00242A  35F8               	rlcf	main@compart_id& (0+255),w,b
  3632  00242C  6ED9               	movwf	fsr2l,c
  3633  00242E  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3634  002430  6EDA               	movwf	fsr2h,c
  3635  002432  0E30               	movlw	low _B_array
  3636  002434  26D9               	addwf	fsr2l,f,c
  3637  002436  0E01               	movlw	high _B_array
  3638  002438  22DA               	addwfc	fsr2h,f,c
  3639  00243A  CFDE F0ED          	movff	postinc2,Bolt_dispense@B_max
  3640  00243E  CFDD F0EE          	movff	postdec2,Bolt_dispense@B_max+1
  3641  002442  EC55  F02A         	call	_Bolt_dispense	;wreg free
  3642  002446                     l530:
  3643                           
  3644                           ;main.c: 352: if (NeedToCloseLid != 1)
  3645  002446  0100               	movlb	0	; () banked
  3646  002448  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3647  00244A  B4D8               	btfsc	status,2,c
  3648  00244C  D00F               	goto	l531
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;main.c: 353: Nut_dispense(N_array[compart_id]);
  3652  00244E  90D8               	bcf	status,0,c
  3653  002450  35F8               	rlcf	main@compart_id& (0+255),w,b
  3654  002452  6ED9               	movwf	fsr2l,c
  3655  002454  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3656  002456  6EDA               	movwf	fsr2h,c
  3657  002458  0E10               	movlw	low _N_array
  3658  00245A  26D9               	addwf	fsr2l,f,c
  3659  00245C  0E01               	movlw	high _N_array
  3660  00245E  22DA               	addwfc	fsr2h,f,c
  3661  002460  CFDE F0ED          	movff	postinc2,Nut_dispense@N_max
  3662  002464  CFDD F0EE          	movff	postdec2,Nut_dispense@N_max+1
  3663  002468  EC4C  F02B         	call	_Nut_dispense	;wreg free
  3664  00246C                     l531:
  3665                           
  3666                           ;main.c: 356: if (NeedToCloseLid != 1)
  3667  00246C  0100               	movlb	0	; () banked
  3668  00246E  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3669  002470  B4D8               	btfsc	status,2,c
  3670  002472  D00F               	goto	l532
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;main.c: 357: Spacer_dispense(S_array[compart_id]);
  3674  002474  90D8               	bcf	status,0,c
  3675  002476  35F8               	rlcf	main@compart_id& (0+255),w,b
  3676  002478  6ED9               	movwf	fsr2l,c
  3677  00247A  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3678  00247C  6EDA               	movwf	fsr2h,c
  3679  00247E  0E20               	movlw	low _S_array
  3680  002480  26D9               	addwf	fsr2l,f,c
  3681  002482  0E01               	movlw	high _S_array
  3682  002484  22DA               	addwfc	fsr2h,f,c
  3683  002486  CFDE F0ED          	movff	postinc2,Spacer_dispense@S_max
  3684  00248A  CFDD F0EE          	movff	postdec2,Spacer_dispense@S_max+1
  3685  00248E  ECFC  F02A         	call	_Spacer_dispense	;wreg free
  3686  002492                     l532:
  3687                           
  3688                           ;main.c: 359: if (NeedToCloseLid != 1)
  3689  002492  0100               	movlb	0	; () banked
  3690  002494  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3691  002496  B4D8               	btfsc	status,2,c
  3692  002498  D00F               	goto	l533
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;main.c: 360: Washer_dispense(W_array[compart_id]);
  3696  00249A  90D8               	bcf	status,0,c
  3697  00249C  35F8               	rlcf	main@compart_id& (0+255),w,b
  3698  00249E  6ED9               	movwf	fsr2l,c
  3699  0024A0  35F9               	rlcf	(main@compart_id+1)& (0+255),w,b
  3700  0024A2  6EDA               	movwf	fsr2h,c
  3701  0024A4  0E00               	movlw	low _W_array
  3702  0024A6  26D9               	addwf	fsr2l,f,c
  3703  0024A8  0E01               	movlw	high _W_array
  3704  0024AA  22DA               	addwfc	fsr2h,f,c
  3705  0024AC  CFDE F0ED          	movff	postinc2,Washer_dispense@W_max
  3706  0024B0  CFDD F0EE          	movff	postdec2,Washer_dispense@W_max+1
  3707  0024B4  ECAC  F02A         	call	_Washer_dispense	;wreg free
  3708  0024B8                     l533:
  3709                           
  3710                           ;main.c: 362: }
  3711                           ;main.c: 364: printf("done C%d",compart_id);
  3712  0024B8  0E7D               	movlw	low STR_20
  3713  0024BA  0100               	movlb	0	; () banked
  3714  0024BC  6FD1               	movwf	printf@f& (0+255),b
  3715  0024BE  0EFF               	movlw	high STR_20
  3716  0024C0  6FD2               	movwf	(printf@f+1)& (0+255),b
  3717  0024C2  C0F8  F0D3         	movff	main@compart_id,?_printf+2
  3718  0024C6  C0F9  F0D4         	movff	main@compart_id+1,?_printf+3
  3719  0024CA  EC2A  F019         	call	_printf	;wreg free
  3720                           
  3721                           ;main.c: 365: if (NeedToCloseLid != 1 && compart_id < 7){
  3722  0024CE  0100               	movlb	0	; () banked
  3723  0024D0  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3724  0024D2  B4D8               	btfsc	status,2,c
  3725  0024D4  D025               	goto	u5540
  3726                           
  3727                           ; BSR set to: 0
  3728  0024D6  BFF9               	btfsc	(main@compart_id+1)& (0+255),7,b
  3729  0024D8  D006               	goto	u5520
  3730  0024DA  51F9               	movf	(main@compart_id+1)& (0+255),w,b
  3731  0024DC  E121               	bnz	l7573
  3732  0024DE  0E07               	movlw	7
  3733  0024E0  5DF8               	subwf	main@compart_id& (0+255),w,b
  3734  0024E2  B0D8               	btfsc	status,0,c
  3735  0024E4  D01D               	goto	u5540
  3736  0024E6                     u5520:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;main.c: 366: I2C_sendData(rotate_1compartment);
  3740  0024E6  51FE               	movf	_rotate_1compartment& (0+255),w,b
  3741  0024E8  EC86  F030         	call	_I2C_sendData
  3742                           
  3743                           ;main.c: 367: while(NeedToCloseLid != 1){
  3744  0024EC  D015               	goto	l537
  3745  0024EE                     
  3746                           ;main.c: 368: I2C_Master_Start();
  3747  0024EE  EC46  F031         	call	_I2C_Master_Start	;wreg free
  3748                           
  3749                           ;main.c: 369: I2C_Master_Write(0b00010001);
  3750  0024F2  0E00               	movlw	0
  3751  0024F4  0100               	movlb	0	; () banked
  3752  0024F6  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3753  0024F8  0E11               	movlw	17
  3754  0024FA  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3755  0024FC  EC34  F031         	call	_I2C_Master_Write	;wreg free
  3756                           
  3757                           ;main.c: 370: openHandle_data = I2C_Master_Read(1);
  3758  002500  0E01               	movlw	1
  3759  002502  EC49  F030         	call	_I2C_Master_Read
  3760  002506  0100               	movlb	0	; () banked
  3761  002508  6FBC               	movwf	_openHandle_data& (0+255),b
  3762                           
  3763                           ;main.c: 371: I2C_Master_Stop();
  3764  00250A  EC42  F031         	call	_I2C_Master_Stop	;wreg free
  3765                           
  3766                           ;main.c: 372: if (openHandle_data == '1'){
  3767  00250E  0E31               	movlw	49
  3768  002510  0100               	movlb	0	; () banked
  3769  002512  19BC               	xorwf	_openHandle_data& (0+255),w,b
  3770  002514  B4D8               	btfsc	status,2,c
  3771  002516  D004               	goto	u5540
  3772  002518                     l537:
  3773                           
  3774                           ; BSR set to: 0
  3775                           
  3776                           ; BSR set to: 0
  3777  002518  0100               	movlb	0	; () banked
  3778  00251A  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3779  00251C  A4D8               	btfss	status,2,c
  3780  00251E  D7E7               	goto	l536
  3781  002520                     u5540:
  3782  002520                     l7573:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 375: }
  3786                           ;main.c: 376: }
  3787                           ;main.c: 377: }
  3788                           ;main.c: 378: compart_id ++;
  3789  002520  4BF8               	infsnz	main@compart_id& (0+255),f,b
  3790  002522  2BF9               	incf	(main@compart_id+1)& (0+255),f,b
  3791  002524                     l527:
  3792                           
  3793                           ; BSR set to: 0
  3794                           
  3795                           ; BSR set to: 0
  3796  002524  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  3797  002526  B4D8               	btfsc	status,2,c
  3798  002528  D008               	goto	u5560
  3799                           
  3800                           ; BSR set to: 0
  3801  00252A  BFF9               	btfsc	(main@compart_id+1)& (0+255),7,b
  3802  00252C  D741               	goto	l528
  3803  00252E  51F9               	movf	(main@compart_id+1)& (0+255),w,b
  3804  002530  E104               	bnz	l7579
  3805  002532  0E08               	movlw	8
  3806  002534  5DF8               	subwf	main@compart_id& (0+255),w,b
  3807  002536  A0D8               	btfss	status,0,c
  3808  002538  D73B               	goto	l528
  3809  00253A                     u5560:
  3810  00253A                     l7579:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;main.c: 379: }
  3814                           ;main.c: 385: I2C_sendData(close_handle);
  3815  00253A  51FC               	movf	_close_handle& (0+255),w,b
  3816  00253C  EC86  F030         	call	_I2C_sendData
  3817                           
  3818                           ;main.c: 388: _delay((unsigned long)((2500)*(32000000/4000.0)));
  3819  002540  0E66               	movlw	102
  3820  002542  0100               	movlb	0	; () banked
  3821  002544  6FF2               	movwf	(??_main+1)& (0+255),b
  3822  002546  0E76               	movlw	118
  3823  002548  6FF1               	movwf	??_main& (0+255),b
  3824  00254A  0EC1               	movlw	193
  3825  00254C                     u6727:
  3826  00254C  2EE8               	decfsz	wreg,f,c
  3827  00254E  D7FE               	bra	u6727
  3828  002550  2FF1               	decfsz	??_main& (0+255),f,b
  3829  002552  D7FC               	bra	u6727
  3830  002554  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3831  002556  D7FA               	bra	u6727
  3832                           
  3833                           ;main.c: 392: I2C_sendData(servo_ramp);
  3834  002558  0100               	movlb	0	; () banked
  3835  00255A  51FD               	movf	_servo_ramp& (0+255),w,b
  3836  00255C  EC86  F030         	call	_I2C_sendData
  3837                           
  3838                           ;main.c: 395: _delay((unsigned long)((100)*(32000000/4000.0)));
  3839  002560  0E05               	movlw	5
  3840  002562  0100               	movlb	0	; () banked
  3841  002564  6FF2               	movwf	(??_main+1)& (0+255),b
  3842  002566  0E0F               	movlw	15
  3843  002568  6FF1               	movwf	??_main& (0+255),b
  3844  00256A  0EF1               	movlw	241
  3845  00256C                     u6737:
  3846  00256C  2EE8               	decfsz	wreg,f,c
  3847  00256E  D7FE               	bra	u6737
  3848  002570  2FF1               	decfsz	??_main& (0+255),f,b
  3849  002572  D7FC               	bra	u6737
  3850  002574  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3851  002576  D7FA               	bra	u6737
  3852                           
  3853                           ;main.c: 409: if (EndOfProgram != 1){
  3854  002578  0100               	movlb	0	; () banked
  3855  00257A  05BB               	decf	_EndOfProgram& (0+255),w,b
  3856  00257C  B4D8               	btfsc	status,2,c
  3857  00257E  D006               	goto	l542
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;main.c: 410: Nut_remain(spacingTime);
  3861  002580  C0FA  F0ED         	movff	_spacingTime,Nut_remain@time
  3862  002584  C0FB  F0EE         	movff	_spacingTime+1,Nut_remain@time+1
  3863  002588  EC99  F029         	call	_Nut_remain	;wreg free
  3864  00258C                     l542:
  3865                           
  3866                           ;main.c: 412: }
  3867                           ;main.c: 413: if (EndOfProgram != 1){
  3868  00258C  0100               	movlb	0	; () banked
  3869  00258E  05BB               	decf	_EndOfProgram& (0+255),w,b
  3870  002590  B4D8               	btfsc	status,2,c
  3871  002592  D006               	goto	l543
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;main.c: 414: Washer_remain(spacingTime);
  3875  002594  C0FA  F0ED         	movff	_spacingTime,Washer_remain@time
  3876  002598  C0FB  F0EE         	movff	_spacingTime+1,Washer_remain@time+1
  3877  00259C  ECDD  F028         	call	_Washer_remain	;wreg free
  3878  0025A0                     l543:
  3879                           
  3880                           ;main.c: 415: }
  3881                           ;main.c: 416: if (EndOfProgram != 1){
  3882  0025A0  0100               	movlb	0	; () banked
  3883  0025A2  05BB               	decf	_EndOfProgram& (0+255),w,b
  3884  0025A4  B4D8               	btfsc	status,2,c
  3885  0025A6  D006               	goto	l544
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;main.c: 417: Spacer_remain(spacingTime);
  3889  0025A8  C0FA  F0ED         	movff	_spacingTime,Spacer_remain@time
  3890  0025AC  C0FB  F0EE         	movff	_spacingTime+1,Spacer_remain@time+1
  3891  0025B0  EC3B  F029         	call	_Spacer_remain	;wreg free
  3892  0025B4                     l544:
  3893                           
  3894                           ;main.c: 418: }
  3895                           ;main.c: 419: if (EndOfProgram != 1){
  3896  0025B4  0100               	movlb	0	; () banked
  3897  0025B6  05BB               	decf	_EndOfProgram& (0+255),w,b
  3898  0025B8  B4D8               	btfsc	status,2,c
  3899  0025BA  D006               	goto	l545
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;main.c: 420: Bolt_remain(spacingTime);
  3903  0025BC  C0FA  F0ED         	movff	_spacingTime,Bolt_remain@time
  3904  0025C0  C0FB  F0EE         	movff	_spacingTime+1,Bolt_remain@time+1
  3905  0025C4  ECF7  F029         	call	_Bolt_remain	;wreg free
  3906  0025C8                     l545:
  3907                           
  3908                           ;main.c: 421: }
  3909                           ;main.c: 434: initLCD();
  3910  0025C8  EC05  F02F         	call	_initLCD	;wreg free
  3911                           
  3912                           ;main.c: 435: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  3913  0025CC  0E80               	movlw	128
  3914  0025CE  ECEB  F030         	call	_lcdInst
  3915  0025D2  0E34               	movlw	52
  3916  0025D4  0100               	movlb	0	; () banked
  3917  0025D6  6FF1               	movwf	??_main& (0+255),b
  3918  0025D8  0EF1               	movlw	241
  3919  0025DA                     u6747:
  3920  0025DA  2EE8               	decfsz	wreg,f,c
  3921  0025DC  D7FE               	bra	u6747
  3922  0025DE  2FF1               	decfsz	??_main& (0+255),f,b
  3923  0025E0  D7FC               	bra	u6747
  3924  0025E2  D000               	nop2	
  3925                           
  3926                           ;main.c: 436: printf("Terminate!");
  3927  0025E4  0E4B               	movlw	low STR_21
  3928  0025E6  0100               	movlb	0	; () banked
  3929  0025E8  6FD1               	movwf	printf@f& (0+255),b
  3930  0025EA  0EFF               	movlw	high STR_21
  3931  0025EC  6FD2               	movwf	(printf@f+1)& (0+255),b
  3932  0025EE  EC2A  F019         	call	_printf	;wreg free
  3933                           
  3934                           ;main.c: 437: _delay((unsigned long)((500)*(32000000/4000.0)));
  3935  0025F2  0E15               	movlw	21
  3936  0025F4  0100               	movlb	0	; () banked
  3937  0025F6  6FF2               	movwf	(??_main+1)& (0+255),b
  3938  0025F8  0E4B               	movlw	75
  3939  0025FA  6FF1               	movwf	??_main& (0+255),b
  3940  0025FC  0EBE               	movlw	190
  3941  0025FE                     u6757:
  3942  0025FE  2EE8               	decfsz	wreg,f,c
  3943  002600  D7FE               	bra	u6757
  3944  002602  2FF1               	decfsz	??_main& (0+255),f,b
  3945  002604  D7FC               	bra	u6757
  3946  002606  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  3947  002608  D7FA               	bra	u6757
  3948  00260A  F000               	nop	
  3949                           
  3950                           ;main.c: 440: I2C_init();
  3951  00260C  EC1B  F030         	call	_I2C_init	;wreg free
  3952                           
  3953                           ;main.c: 442: I2C_Master_Start();
  3954  002610  EC46  F031         	call	_I2C_Master_Start	;wreg free
  3955                           
  3956                           ;main.c: 443: I2C_Master_Write(0b11010000);
  3957  002614  0E00               	movlw	0
  3958  002616  0100               	movlb	0	; () banked
  3959  002618  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3960  00261A  0ED0               	movlw	208
  3961  00261C  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3962  00261E  EC34  F031         	call	_I2C_Master_Write	;wreg free
  3963                           
  3964                           ;main.c: 444: I2C_Master_Write(0x00);
  3965  002622  0E00               	movlw	0
  3966  002624  0100               	movlb	0	; () banked
  3967  002626  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3968  002628  0E00               	movlw	0
  3969  00262A  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3970  00262C  EC34  F031         	call	_I2C_Master_Write	;wreg free
  3971                           
  3972                           ;main.c: 445: I2C_Master_Stop();
  3973  002630  EC42  F031         	call	_I2C_Master_Stop	;wreg free
  3974                           
  3975                           ;main.c: 448: I2C_Master_Start();
  3976  002634  EC46  F031         	call	_I2C_Master_Start	;wreg free
  3977                           
  3978                           ;main.c: 449: I2C_Master_Write(0b11010001);
  3979  002638  0E00               	movlw	0
  3980  00263A  0100               	movlb	0	; () banked
  3981  00263C  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
  3982  00263E  0ED1               	movlw	209
  3983  002640  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
  3984  002642  EC34  F031         	call	_I2C_Master_Write	;wreg free
  3985                           
  3986                           ;main.c: 450: for(i = 0; i < 6; i++){
  3987  002646  0E00               	movlw	0
  3988  002648  0100               	movlb	0	; () banked
  3989  00264A  6FB8               	movwf	(_i+1)& (0+255),b
  3990  00264C  0E00               	movlw	0
  3991  00264E  6FB7               	movwf	_i& (0+255),b
  3992  002650                     l7625:
  3993                           
  3994                           ; BSR set to: 0
  3995  002650  51B8               	movf	(_i+1)& (0+255),w,b
  3996  002652  E112               	bnz	l7635
  3997  002654  0E06               	movlw	6
  3998  002656  5DB7               	subwf	_i& (0+255),w,b
  3999  002658  B0D8               	btfsc	status,0,c
  4000  00265A  D00E               	goto	u5620
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;main.c: 451: time[i] = I2C_Master_Read(0);
  4004                           
  4005                           ; BSR set to: 0
  4006                           
  4007                           ; BSR set to: 0
  4008  00265C  0E90               	movlw	low _time
  4009  00265E  25B7               	addwf	_i& (0+255),w,b
  4010  002660  6ED9               	movwf	fsr2l,c
  4011  002662  0E00               	movlw	high _time
  4012  002664  21B8               	addwfc	(_i+1)& (0+255),w,b
  4013  002666  6EDA               	movwf	fsr2h,c
  4014  002668  0E00               	movlw	0
  4015  00266A  EC49  F030         	call	_I2C_Master_Read
  4016  00266E  6EDF               	movwf	indf2,c
  4017  002670  0100               	movlb	0	; () banked
  4018  002672  4BB7               	infsnz	_i& (0+255),f,b
  4019  002674  2BB8               	incf	(_i+1)& (0+255),f,b
  4020  002676  D7EC               	goto	l7625
  4021  002678                     u5620:
  4022  002678                     l7635:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;main.c: 452: }
  4026                           ;main.c: 453: time[6] = I2C_Master_Read(1);
  4027  002678  0E01               	movlw	1
  4028  00267A  EC49  F030         	call	_I2C_Master_Read
  4029  00267E  0100               	movlb	0	; () banked
  4030  002680  6F96               	movwf	(_time+6)& (0+255),b
  4031                           
  4032                           ;main.c: 454: I2C_Master_Stop();
  4033  002682  EC42  F031         	call	_I2C_Master_Stop	;wreg free
  4034                           
  4035                           ;main.c: 456: hr_final = time[2]/16*10+time[2]%16;
  4036  002686  C092  F0F1         	movff	_time+2,??_main
  4037  00268A  0E0F               	movlw	15
  4038  00268C  0100               	movlb	0	; () banked
  4039  00268E  17F1               	andwf	??_main& (0+255),f,b
  4040  002690  0E00               	movlw	0
  4041  002692  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  4042  002694  0E10               	movlw	16
  4043  002696  6FC5               	movwf	___awdiv@divisor& (0+255),b
  4044  002698  C092  F0C3         	movff	_time+2,___awdiv@dividend
  4045  00269C  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  4046  00269E  EC2D  F02C         	call	___awdiv	;wreg free
  4047  0026A2  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  4048  0026A6  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  4049  0026AA  0E00               	movlw	0
  4050  0026AC  0100               	movlb	0	; () banked
  4051  0026AE  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4052  0026B0  0E0A               	movlw	10
  4053  0026B2  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  4054  0026B4  EC72  F030         	call	___wmul	;wreg free
  4055  0026B8  0100               	movlb	0	; () banked
  4056  0026BA  51F1               	movf	??_main& (0+255),w,b
  4057  0026BC  25CB               	addwf	?___wmul& (0+255),w,b
  4058  0026BE  0101               	movlb	1	; () banked
  4059  0026C0  6F66               	movwf	_hr_final& (0+255),b
  4060  0026C2  0100               	movlb	0	; () banked
  4061  0026C4  0E00               	movlw	0
  4062  0026C6  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  4063  0026C8  0101               	movlb	1	; () banked
  4064  0026CA  6F67               	movwf	(_hr_final+1)& (0+255),b
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;main.c: 457: min_final = time[1]/16*10 + time[1]%16;
  4068  0026CC  C091  F0F1         	movff	_time+1,??_main
  4069  0026D0  0E0F               	movlw	15
  4070  0026D2  0100               	movlb	0	; () banked
  4071  0026D4  17F1               	andwf	??_main& (0+255),f,b
  4072  0026D6  0E00               	movlw	0
  4073  0026D8  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  4074  0026DA  0E10               	movlw	16
  4075  0026DC  6FC5               	movwf	___awdiv@divisor& (0+255),b
  4076  0026DE  C091  F0C3         	movff	_time+1,___awdiv@dividend
  4077  0026E2  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  4078  0026E4  EC2D  F02C         	call	___awdiv	;wreg free
  4079  0026E8  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  4080  0026EC  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  4081  0026F0  0E00               	movlw	0
  4082  0026F2  0100               	movlb	0	; () banked
  4083  0026F4  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4084  0026F6  0E0A               	movlw	10
  4085  0026F8  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  4086  0026FA  EC72  F030         	call	___wmul	;wreg free
  4087  0026FE  0100               	movlb	0	; () banked
  4088  002700  51F1               	movf	??_main& (0+255),w,b
  4089  002702  25CB               	addwf	?___wmul& (0+255),w,b
  4090  002704  0101               	movlb	1	; () banked
  4091  002706  6F64               	movwf	_min_final& (0+255),b
  4092  002708  0100               	movlb	0	; () banked
  4093  00270A  0E00               	movlw	0
  4094  00270C  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  4095  00270E  0101               	movlb	1	; () banked
  4096  002710  6F65               	movwf	(_min_final+1)& (0+255),b
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;main.c: 458: sec_final = time[0]/16*10 + time[0]%16;
  4100  002712  C090  F0F1         	movff	_time,??_main
  4101  002716  0E0F               	movlw	15
  4102  002718  0100               	movlb	0	; () banked
  4103  00271A  17F1               	andwf	??_main& (0+255),f,b
  4104  00271C  0E00               	movlw	0
  4105  00271E  6FC6               	movwf	(___awdiv@divisor+1)& (0+255),b
  4106  002720  0E10               	movlw	16
  4107  002722  6FC5               	movwf	___awdiv@divisor& (0+255),b
  4108  002724  C090  F0C3         	movff	_time,___awdiv@dividend
  4109  002728  6BC4               	clrf	(___awdiv@dividend+1)& (0+255),b
  4110  00272A  EC2D  F02C         	call	___awdiv	;wreg free
  4111  00272E  C0C3  F0CB         	movff	?___awdiv,___wmul@multiplier
  4112  002732  C0C4  F0CC         	movff	?___awdiv+1,___wmul@multiplier+1
  4113  002736  0E00               	movlw	0
  4114  002738  0100               	movlb	0	; () banked
  4115  00273A  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4116  00273C  0E0A               	movlw	10
  4117  00273E  6FCD               	movwf	___wmul@multiplicand& (0+255),b
  4118  002740  EC72  F030         	call	___wmul	;wreg free
  4119  002744  0100               	movlb	0	; () banked
  4120  002746  51F1               	movf	??_main& (0+255),w,b
  4121  002748  25CB               	addwf	?___wmul& (0+255),w,b
  4122  00274A  0101               	movlb	1	; () banked
  4123  00274C  6F62               	movwf	_sec_final& (0+255),b
  4124  00274E  0100               	movlb	0	; () banked
  4125  002750  0E00               	movlw	0
  4126  002752  21CC               	addwfc	(?___wmul+1)& (0+255),w,b
  4127  002754  0101               	movlb	1	; () banked
  4128  002756  6F63               	movwf	(_sec_final+1)& (0+255),b
  4129                           
  4130                           ; BSR set to: 1
  4131                           ;main.c: 463: initLCD();
  4132  002758  EC05  F02F         	call	_initLCD	;wreg free
  4133                           
  4134                           ;main.c: 464: printf("Terminate!");
  4135  00275C  0E4B               	movlw	low STR_21
  4136  00275E  0100               	movlb	0	; () banked
  4137  002760  6FD1               	movwf	printf@f& (0+255),b
  4138  002762  0EFF               	movlw	high STR_21
  4139  002764  6FD2               	movwf	(printf@f+1)& (0+255),b
  4140  002766  EC2A  F019         	call	_printf	;wreg free
  4141                           
  4142                           ;main.c: 465: _delay((unsigned long)((500)*(32000000/4000.0)));
  4143  00276A  0E15               	movlw	21
  4144  00276C  0100               	movlb	0	; () banked
  4145  00276E  6FF2               	movwf	(??_main+1)& (0+255),b
  4146  002770  0E4B               	movlw	75
  4147  002772  6FF1               	movwf	??_main& (0+255),b
  4148  002774  0EBE               	movlw	190
  4149  002776                     u6767:
  4150  002776  2EE8               	decfsz	wreg,f,c
  4151  002778  D7FE               	bra	u6767
  4152  00277A  2FF1               	decfsz	??_main& (0+255),f,b
  4153  00277C  D7FC               	bra	u6767
  4154  00277E  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4155  002780  D7FA               	bra	u6767
  4156  002782  F000               	nop	
  4157                           
  4158                           ;main.c: 466: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4159  002784  0E80               	movlw	128
  4160  002786  ECEB  F030         	call	_lcdInst
  4161  00278A  0E34               	movlw	52
  4162  00278C  0100               	movlb	0	; () banked
  4163  00278E  6FF1               	movwf	??_main& (0+255),b
  4164  002790  0EF1               	movlw	241
  4165  002792                     u6777:
  4166  002792  2EE8               	decfsz	wreg,f,c
  4167  002794  D7FE               	bra	u6777
  4168  002796  2FF1               	decfsz	??_main& (0+255),f,b
  4169  002798  D7FC               	bra	u6777
  4170  00279A  D000               	nop2	
  4171                           
  4172                           ;main.c: 471: drawTeamName();
  4173  00279C  EC36  F01F         	call	_drawTeamName	;wreg free
  4174                           
  4175                           ;main.c: 473: printf("Bolt_remain:%d",B_remain);
  4176  0027A0  0E7F               	movlw	low STR_23
  4177  0027A2  0100               	movlb	0	; () banked
  4178  0027A4  6FD1               	movwf	printf@f& (0+255),b
  4179  0027A6  0EFE               	movlw	high STR_23
  4180  0027A8  6FD2               	movwf	(printf@f+1)& (0+255),b
  4181  0027AA  C0A5  F0D3         	movff	_B_remain,?_printf+2
  4182  0027AE  C0A6  F0D4         	movff	_B_remain+1,?_printf+3
  4183  0027B2  EC2A  F019         	call	_printf	;wreg free
  4184                           
  4185                           ;main.c: 474: _delay((unsigned long)((300)*(32000000/4000.0)));
  4186  0027B6  0E0D               	movlw	13
  4187  0027B8  0100               	movlb	0	; () banked
  4188  0027BA  6FF2               	movwf	(??_main+1)& (0+255),b
  4189  0027BC  0E2D               	movlw	45
  4190  0027BE  6FF1               	movwf	??_main& (0+255),b
  4191  0027C0  0ED7               	movlw	215
  4192  0027C2                     u6787:
  4193  0027C2  2EE8               	decfsz	wreg,f,c
  4194  0027C4  D7FE               	bra	u6787
  4195  0027C6  2FF1               	decfsz	??_main& (0+255),f,b
  4196  0027C8  D7FC               	bra	u6787
  4197  0027CA  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4198  0027CC  D7FA               	bra	u6787
  4199  0027CE  D000               	nop2	
  4200                           
  4201                           ;main.c: 475: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4202  0027D0  0E01               	movlw	1
  4203  0027D2  ECEB  F030         	call	_lcdInst
  4204  0027D6  0E9C               	movlw	156
  4205  0027D8  0100               	movlb	0	; () banked
  4206  0027DA  6FF1               	movwf	??_main& (0+255),b
  4207  0027DC  0ED7               	movlw	215
  4208  0027DE                     u6797:
  4209  0027DE  2EE8               	decfsz	wreg,f,c
  4210  0027E0  D7FE               	bra	u6797
  4211  0027E2  2FF1               	decfsz	??_main& (0+255),f,b
  4212  0027E4  D7FC               	bra	u6797
  4213                           
  4214                           ;main.c: 476: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4215  0027E6  0E80               	movlw	128
  4216  0027E8  ECEB  F030         	call	_lcdInst
  4217  0027EC  0E34               	movlw	52
  4218  0027EE  0100               	movlb	0	; () banked
  4219  0027F0  6FF1               	movwf	??_main& (0+255),b
  4220  0027F2  0EF1               	movlw	241
  4221  0027F4                     u6807:
  4222  0027F4  2EE8               	decfsz	wreg,f,c
  4223  0027F6  D7FE               	bra	u6807
  4224  0027F8  2FF1               	decfsz	??_main& (0+255),f,b
  4225  0027FA  D7FC               	bra	u6807
  4226  0027FC  D000               	nop2	
  4227                           
  4228                           ;main.c: 477: printf("Nut_remain:%d",N_remain);
  4229  0027FE  0EE6               	movlw	low STR_24
  4230  002800  0100               	movlb	0	; () banked
  4231  002802  6FD1               	movwf	printf@f& (0+255),b
  4232  002804  0EFE               	movlw	high STR_24
  4233  002806  6FD2               	movwf	(printf@f+1)& (0+255),b
  4234  002808  C0A3  F0D3         	movff	_N_remain,?_printf+2
  4235  00280C  C0A4  F0D4         	movff	_N_remain+1,?_printf+3
  4236  002810  EC2A  F019         	call	_printf	;wreg free
  4237                           
  4238                           ;main.c: 478: _delay((unsigned long)((300)*(32000000/4000.0)));
  4239  002814  0E0D               	movlw	13
  4240  002816  0100               	movlb	0	; () banked
  4241  002818  6FF2               	movwf	(??_main+1)& (0+255),b
  4242  00281A  0E2D               	movlw	45
  4243  00281C  6FF1               	movwf	??_main& (0+255),b
  4244  00281E  0ED7               	movlw	215
  4245  002820                     u6817:
  4246  002820  2EE8               	decfsz	wreg,f,c
  4247  002822  D7FE               	bra	u6817
  4248  002824  2FF1               	decfsz	??_main& (0+255),f,b
  4249  002826  D7FC               	bra	u6817
  4250  002828  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4251  00282A  D7FA               	bra	u6817
  4252  00282C  D000               	nop2	
  4253                           
  4254                           ;main.c: 479: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4255  00282E  0E01               	movlw	1
  4256  002830  ECEB  F030         	call	_lcdInst
  4257  002834  0E9C               	movlw	156
  4258  002836  0100               	movlb	0	; () banked
  4259  002838  6FF1               	movwf	??_main& (0+255),b
  4260  00283A  0ED7               	movlw	215
  4261  00283C                     u6827:
  4262  00283C  2EE8               	decfsz	wreg,f,c
  4263  00283E  D7FE               	bra	u6827
  4264  002840  2FF1               	decfsz	??_main& (0+255),f,b
  4265  002842  D7FC               	bra	u6827
  4266                           
  4267                           ;main.c: 480: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4268  002844  0E80               	movlw	128
  4269  002846  ECEB  F030         	call	_lcdInst
  4270  00284A  0E34               	movlw	52
  4271  00284C  0100               	movlb	0	; () banked
  4272  00284E  6FF1               	movwf	??_main& (0+255),b
  4273  002850  0EF1               	movlw	241
  4274  002852                     u6837:
  4275  002852  2EE8               	decfsz	wreg,f,c
  4276  002854  D7FE               	bra	u6837
  4277  002856  2FF1               	decfsz	??_main& (0+255),f,b
  4278  002858  D7FC               	bra	u6837
  4279  00285A  D000               	nop2	
  4280                           
  4281                           ;main.c: 481: printf("Spacer_remain:%d",S_remain);
  4282  00285C  0EED               	movlw	low STR_25
  4283  00285E  0100               	movlb	0	; () banked
  4284  002860  6FD1               	movwf	printf@f& (0+255),b
  4285  002862  0EFD               	movlw	high STR_25
  4286  002864  6FD2               	movwf	(printf@f+1)& (0+255),b
  4287  002866  C0A1  F0D3         	movff	_S_remain,?_printf+2
  4288  00286A  C0A2  F0D4         	movff	_S_remain+1,?_printf+3
  4289  00286E  EC2A  F019         	call	_printf	;wreg free
  4290                           
  4291                           ;main.c: 482: _delay((unsigned long)((300)*(32000000/4000.0)));
  4292  002872  0E0D               	movlw	13
  4293  002874  0100               	movlb	0	; () banked
  4294  002876  6FF2               	movwf	(??_main+1)& (0+255),b
  4295  002878  0E2D               	movlw	45
  4296  00287A  6FF1               	movwf	??_main& (0+255),b
  4297  00287C  0ED7               	movlw	215
  4298  00287E                     u6847:
  4299  00287E  2EE8               	decfsz	wreg,f,c
  4300  002880  D7FE               	bra	u6847
  4301  002882  2FF1               	decfsz	??_main& (0+255),f,b
  4302  002884  D7FC               	bra	u6847
  4303  002886  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4304  002888  D7FA               	bra	u6847
  4305  00288A  D000               	nop2	
  4306                           
  4307                           ;main.c: 483: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4308  00288C  0E01               	movlw	1
  4309  00288E  ECEB  F030         	call	_lcdInst
  4310  002892  0E9C               	movlw	156
  4311  002894  0100               	movlb	0	; () banked
  4312  002896  6FF1               	movwf	??_main& (0+255),b
  4313  002898  0ED7               	movlw	215
  4314  00289A                     u6857:
  4315  00289A  2EE8               	decfsz	wreg,f,c
  4316  00289C  D7FE               	bra	u6857
  4317  00289E  2FF1               	decfsz	??_main& (0+255),f,b
  4318  0028A0  D7FC               	bra	u6857
  4319                           
  4320                           ;main.c: 484: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4321  0028A2  0E80               	movlw	128
  4322  0028A4  ECEB  F030         	call	_lcdInst
  4323  0028A8  0E34               	movlw	52
  4324  0028AA  0100               	movlb	0	; () banked
  4325  0028AC  6FF1               	movwf	??_main& (0+255),b
  4326  0028AE  0EF1               	movlw	241
  4327  0028B0                     u6867:
  4328  0028B0  2EE8               	decfsz	wreg,f,c
  4329  0028B2  D7FE               	bra	u6867
  4330  0028B4  2FF1               	decfsz	??_main& (0+255),f,b
  4331  0028B6  D7FC               	bra	u6867
  4332  0028B8  D000               	nop2	
  4333                           
  4334                           ;main.c: 485: printf("Washer_remain:%d",W_remain);
  4335  0028BA  0EFE               	movlw	low STR_26
  4336  0028BC  0100               	movlb	0	; () banked
  4337  0028BE  6FD1               	movwf	printf@f& (0+255),b
  4338  0028C0  0EFD               	movlw	high STR_26
  4339  0028C2  6FD2               	movwf	(printf@f+1)& (0+255),b
  4340  0028C4  C09F  F0D3         	movff	_W_remain,?_printf+2
  4341  0028C8  C0A0  F0D4         	movff	_W_remain+1,?_printf+3
  4342  0028CC  EC2A  F019         	call	_printf	;wreg free
  4343                           
  4344                           ;main.c: 486: _delay((unsigned long)((300)*(32000000/4000.0)));
  4345  0028D0  0E0D               	movlw	13
  4346  0028D2  0100               	movlb	0	; () banked
  4347  0028D4  6FF2               	movwf	(??_main+1)& (0+255),b
  4348  0028D6  0E2D               	movlw	45
  4349  0028D8  6FF1               	movwf	??_main& (0+255),b
  4350  0028DA  0ED7               	movlw	215
  4351  0028DC                     u6877:
  4352  0028DC  2EE8               	decfsz	wreg,f,c
  4353  0028DE  D7FE               	bra	u6877
  4354  0028E0  2FF1               	decfsz	??_main& (0+255),f,b
  4355  0028E2  D7FC               	bra	u6877
  4356  0028E4  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4357  0028E6  D7FA               	bra	u6877
  4358  0028E8  D000               	nop2	
  4359                           
  4360                           ;main.c: 487: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4361  0028EA  0E01               	movlw	1
  4362  0028EC  ECEB  F030         	call	_lcdInst
  4363  0028F0  0E9C               	movlw	156
  4364  0028F2  0100               	movlb	0	; () banked
  4365  0028F4  6FF1               	movwf	??_main& (0+255),b
  4366  0028F6  0ED7               	movlw	215
  4367  0028F8                     u6887:
  4368  0028F8  2EE8               	decfsz	wreg,f,c
  4369  0028FA  D7FE               	bra	u6887
  4370  0028FC  2FF1               	decfsz	??_main& (0+255),f,b
  4371  0028FE  D7FC               	bra	u6887
  4372                           
  4373                           ;main.c: 488: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4374  002900  0E80               	movlw	128
  4375  002902  ECEB  F030         	call	_lcdInst
  4376  002906  0E34               	movlw	52
  4377  002908  0100               	movlb	0	; () banked
  4378  00290A  6FF1               	movwf	??_main& (0+255),b
  4379  00290C  0EF1               	movlw	241
  4380  00290E                     u6897:
  4381  00290E  2EE8               	decfsz	wreg,f,c
  4382  002910  D7FE               	bra	u6897
  4383  002912  2FF1               	decfsz	??_main& (0+255),f,b
  4384  002914  D7FC               	bra	u6897
  4385  002916  D000               	nop2	
  4386                           
  4387                           ;main.c: 511: (INTCONbits.GIE = 1);
  4388  002918  8EF2               	bsf	intcon,7,c	;volatile
  4389                           
  4390                           ;main.c: 512: LATCbits.LATC0 = 0;
  4391  00291A  908B               	bcf	3979,0,c	;volatile
  4392                           
  4393                           ;main.c: 513: TRISCbits.RC0 = 0;
  4394  00291C  9094               	bcf	3988,0,c	;volatile
  4395                           
  4396                           ;main.c: 515: RBIE = 0;
  4397  00291E  96F2               	bcf	intcon,3,c	;volatile
  4398                           
  4399                           ;main.c: 516: INT1IE = 1;
  4400  002920  86F0               	bsf	intcon3,3,c	;volatile
  4401  002922                     
  4402                           ;main.c: 519: (INTCONbits.GIE = 1);
  4403  002922  8EF2               	bsf	intcon,7,c	;volatile
  4404                           
  4405                           ;main.c: 521: operation = 1;
  4406  002924  0E00               	movlw	0
  4407  002926  6E67               	movwf	_operation+1,c
  4408  002928  0E01               	movlw	1
  4409  00292A  6E66               	movwf	_operation,c
  4410                           
  4411                           ;main.c: 522: printf("1: Date and Time");
  4412  00292C  0E20               	movlw	low STR_27
  4413  00292E  0100               	movlb	0	; () banked
  4414  002930  6FD1               	movwf	printf@f& (0+255),b
  4415  002932  0EFE               	movlw	high STR_27
  4416  002934  6FD2               	movwf	(printf@f+1)& (0+255),b
  4417  002936  EC2A  F019         	call	_printf	;wreg free
  4418                           
  4419                           ;main.c: 523: lcdInst(0xC0);;
  4420  00293A  0EC0               	movlw	192
  4421  00293C  ECEB  F030         	call	_lcdInst
  4422                           
  4423                           ;main.c: 524: printf(" 2: Operation Time");
  4424  002940  0EA4               	movlw	low STR_28
  4425  002942  0100               	movlb	0	; () banked
  4426  002944  6FD1               	movwf	printf@f& (0+255),b
  4427  002946  0EFD               	movlw	high STR_28
  4428  002948  6FD2               	movwf	(printf@f+1)& (0+255),b
  4429  00294A  EC2A  F019         	call	_printf	;wreg free
  4430                           
  4431                           ;main.c: 525: _delay((unsigned long)((600)*(32000000/4000.0)));
  4432  00294E  0E19               	movlw	25
  4433  002950  0100               	movlb	0	; () banked
  4434  002952  6FF2               	movwf	(??_main+1)& (0+255),b
  4435  002954  0E5A               	movlw	90
  4436  002956  6FF1               	movwf	??_main& (0+255),b
  4437  002958  0EB1               	movlw	177
  4438  00295A                     u6907:
  4439  00295A  2EE8               	decfsz	wreg,f,c
  4440  00295C  D7FE               	bra	u6907
  4441  00295E  2FF1               	decfsz	??_main& (0+255),f,b
  4442  002960  D7FC               	bra	u6907
  4443  002962  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4444  002964  D7FA               	bra	u6907
  4445  002966  D000               	nop2	
  4446                           
  4447                           ;main.c: 526: initLCD();
  4448  002968  EC05  F02F         	call	_initLCD	;wreg free
  4449                           
  4450                           ;main.c: 527: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4451  00296C  0E80               	movlw	128
  4452  00296E  ECEB  F030         	call	_lcdInst
  4453  002972  0E34               	movlw	52
  4454  002974  0100               	movlb	0	; () banked
  4455  002976  6FF1               	movwf	??_main& (0+255),b
  4456  002978  0EF1               	movlw	241
  4457  00297A                     u6917:
  4458  00297A  2EE8               	decfsz	wreg,f,c
  4459  00297C  D7FE               	bra	u6917
  4460  00297E  2FF1               	decfsz	??_main& (0+255),f,b
  4461  002980  D7FC               	bra	u6917
  4462  002982  D000               	nop2	
  4463                           
  4464                           ;main.c: 528: printf("3:summary");
  4465  002984  0E61               	movlw	low STR_29
  4466  002986  0100               	movlb	0	; () banked
  4467  002988  6FD1               	movwf	printf@f& (0+255),b
  4468  00298A  0EFF               	movlw	high STR_29
  4469  00298C  6FD2               	movwf	(printf@f+1)& (0+255),b
  4470  00298E  EC2A  F019         	call	_printf	;wreg free
  4471                           
  4472                           ;main.c: 529: lcdInst(0xC0);;
  4473  002992  0EC0               	movlw	192
  4474  002994  ECEB  F030         	call	_lcdInst
  4475                           
  4476                           ;main.c: 530: printf("4:return");
  4477  002998  0E86               	movlw	low STR_30
  4478  00299A  0100               	movlb	0	; () banked
  4479  00299C  6FD1               	movwf	printf@f& (0+255),b
  4480  00299E  0EFF               	movlw	high STR_30
  4481  0029A0  6FD2               	movwf	(printf@f+1)& (0+255),b
  4482  0029A2  EC2A  F019         	call	_printf	;wreg free
  4483                           
  4484                           ;main.c: 532: _delay((unsigned long)((100)*(32000000/4000.0)));
  4485  0029A6  0E05               	movlw	5
  4486  0029A8  0100               	movlb	0	; () banked
  4487  0029AA  6FF2               	movwf	(??_main+1)& (0+255),b
  4488  0029AC  0E0F               	movlw	15
  4489  0029AE  6FF1               	movwf	??_main& (0+255),b
  4490  0029B0  0EF1               	movlw	241
  4491  0029B2                     u6927:
  4492  0029B2  2EE8               	decfsz	wreg,f,c
  4493  0029B4  D7FE               	bra	u6927
  4494  0029B6  2FF1               	decfsz	??_main& (0+255),f,b
  4495  0029B8  D7FC               	bra	u6927
  4496  0029BA  2FF2               	decfsz	(??_main+1)& (0+255),f,b
  4497  0029BC  D7FA               	bra	u6927
  4498                           
  4499                           ;main.c: 533: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  4500  0029BE  0E80               	movlw	128
  4501  0029C0  ECEB  F030         	call	_lcdInst
  4502  0029C4  0E34               	movlw	52
  4503  0029C6  0100               	movlb	0	; () banked
  4504  0029C8  6FF1               	movwf	??_main& (0+255),b
  4505  0029CA  0EF1               	movlw	241
  4506  0029CC                     u6937:
  4507  0029CC  2EE8               	decfsz	wreg,f,c
  4508  0029CE  D7FE               	bra	u6937
  4509  0029D0  2FF1               	decfsz	??_main& (0+255),f,b
  4510  0029D2  D7FC               	bra	u6937
  4511  0029D4  D000               	nop2	
  4512                           
  4513                           ;main.c: 535: if(operation_done == 1){
  4514  0029D6  0464               	decf	_operation_done,w,c
  4515  0029D8  1065               	iorwf	_operation_done+1,w,c
  4516  0029DA  A4D8               	btfss	status,2,c
  4517  0029DC  D7A2               	goto	l548
  4518                           
  4519                           ;main.c: 537: }
  4520                           ;main.c: 538: }
  4521                           ;main.c: 539: initialize();
  4522                           
  4523                           ;main.c: 536: break;
  4524  0029DE  EC34  F028         	call	_initialize	;wreg free
  4525                           
  4526                           ;main.c: 540: mode = 0;
  4527  0029E2  0E00               	movlw	0
  4528  0029E4  0100               	movlb	0	; () banked
  4529  0029E6  6FB6               	movwf	(_mode+1)& (0+255),b
  4530  0029E8  0E00               	movlw	0
  4531  0029EA  6FB5               	movwf	_mode& (0+255),b
  4532                           
  4533                           ; BSR set to: 0
  4534                           
  4535                           ; BSR set to: 0
  4536  0029EC  EF4A  F00F         	goto	l502
  4537  0029F0                     __end_of_main:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           intcon	equ	0xFF2
  4544                           intcon3	equ	0xFF0
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           postdec1	equ	0xFE5
  4548                           fsr1l	equ	0xFE1
  4549                           indf2	equ	0xFDF
  4550                           postinc2	equ	0xFDE
  4551                           postdec2	equ	0xFDD
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function _initialize *****************
  4557 ;; Defined at:
  4558 ;;		line 1100 in file "main.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;Total ram usage:        0 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    4
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_main
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text1
  4587  005068                     __ptext1:
  4588                           	opt stack 0
  4589  005068                     _initialize:
  4590                           	opt stack 26
  4591                           
  4592                           ;main.c: 1101: white_tape = 0;
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;incstack = 0
  4596  005068  0E00               	movlw	0
  4597  00506A  6E69               	movwf	_white_tape+1,c
  4598  00506C  0E00               	movlw	0
  4599  00506E  6E68               	movwf	_white_tape,c
  4600                           
  4601                           ;main.c: 1102: mode = 0;
  4602  005070  0E00               	movlw	0
  4603  005072  0100               	movlb	0	; () banked
  4604  005074  6FB6               	movwf	(_mode+1)& (0+255),b
  4605  005076  0E00               	movlw	0
  4606  005078  6FB5               	movwf	_mode& (0+255),b
  4607                           
  4608                           ;main.c: 1103: state = 0;
  4609  00507A  0E00               	movlw	0
  4610  00507C  6FB2               	movwf	(_state+1)& (0+255),b
  4611  00507E  0E00               	movlw	0
  4612  005080  6FB1               	movwf	_state& (0+255),b
  4613                           
  4614                           ;main.c: 1104: assembly_step = 0;
  4615  005082  0E00               	movlw	0
  4616  005084  6FB0               	movwf	(_assembly_step+1)& (0+255),b
  4617  005086  0E00               	movlw	0
  4618  005088  6FAF               	movwf	_assembly_step& (0+255),b
  4619                           
  4620                           ;main.c: 1105: counter_step = 0;
  4621  00508A  0E00               	movlw	0
  4622  00508C  6E5B               	movwf	_counter_step+1,c
  4623  00508E  0E00               	movlw	0
  4624  005090  6E5A               	movwf	_counter_step,c
  4625                           
  4626                           ;main.c: 1107: valid = 0;
  4627  005092  0E00               	movlw	0
  4628  005094  0101               	movlb	1	; () banked
  4629  005096  6F8D               	movwf	(_valid+1)& (0+255),b
  4630  005098  0E00               	movlw	0
  4631  00509A  6F8C               	movwf	_valid& (0+255),b
  4632                           
  4633                           ;main.c: 1108: number = 0;
  4634  00509C  0E00               	movlw	0
  4635  00509E  6E76               	movwf	_number+1,c
  4636  0050A0  0E00               	movlw	0
  4637  0050A2  6E75               	movwf	_number,c
  4638                           
  4639                           ;main.c: 1109: total_number=0;
  4640  0050A4  0E00               	movlw	0
  4641  0050A6  6F8B               	movwf	(_total_number+1)& (0+255),b
  4642  0050A8  0E00               	movlw	0
  4643  0050AA  6F8A               	movwf	_total_number& (0+255),b
  4644                           
  4645                           ;main.c: 1111: B=0,N=0,S=0,W=0;
  4646  0050AC  0E00               	movlw	0
  4647  0050AE  6E59               	movwf	_B+1,c
  4648  0050B0  0E00               	movlw	0
  4649  0050B2  6E58               	movwf	_B,c
  4650  0050B4  0E00               	movlw	0
  4651  0050B6  6E57               	movwf	_N+1,c
  4652  0050B8  0E00               	movlw	0
  4653  0050BA  6E56               	movwf	_N,c
  4654  0050BC  0E00               	movlw	0
  4655  0050BE  6E55               	movwf	_S+1,c
  4656  0050C0  0E00               	movlw	0
  4657  0050C2  6E54               	movwf	_S,c
  4658  0050C4  0E00               	movlw	0
  4659  0050C6  6E53               	movwf	_W+1,c
  4660  0050C8  0E00               	movlw	0
  4661  0050CA  6E52               	movwf	_W,c
  4662                           
  4663                           ;main.c: 1113: B_counter= 0;
  4664  0050CC  0E00               	movlw	0
  4665  0050CE  0100               	movlb	0	; () banked
  4666  0050D0  6FAE               	movwf	(_B_counter+1)& (0+255),b
  4667  0050D2  0E00               	movlw	0
  4668  0050D4  6FAD               	movwf	_B_counter& (0+255),b
  4669                           
  4670                           ;main.c: 1114: S_counter= 0;
  4671  0050D6  0E00               	movlw	0
  4672  0050D8  6FAC               	movwf	(_S_counter+1)& (0+255),b
  4673  0050DA  0E00               	movlw	0
  4674  0050DC  6FAB               	movwf	_S_counter& (0+255),b
  4675                           
  4676                           ;main.c: 1115: N_counter= 0;
  4677  0050DE  0E00               	movlw	0
  4678  0050E0  6FAA               	movwf	(_N_counter+1)& (0+255),b
  4679  0050E2  0E00               	movlw	0
  4680  0050E4  6FA9               	movwf	_N_counter& (0+255),b
  4681                           
  4682                           ;main.c: 1116: W_counter= 0;
  4683  0050E6  0E00               	movlw	0
  4684  0050E8  6FA8               	movwf	(_W_counter+1)& (0+255),b
  4685  0050EA  0E00               	movlw	0
  4686  0050EC  6FA7               	movwf	_W_counter& (0+255),b
  4687                           
  4688                           ;main.c: 1119: initial_time = 0;
  4689  0050EE  0E00               	movlw	0
  4690  0050F0  0101               	movlb	1	; () banked
  4691  0050F2  6F69               	movwf	(_initial_time+1)& (0+255),b
  4692  0050F4  0E00               	movlw	0
  4693  0050F6  6F68               	movwf	_initial_time& (0+255),b
  4694                           
  4695                           ;main.c: 1120: final_time = 0;
  4696  0050F8  0E00               	movlw	0
  4697  0050FA  6F61               	movwf	(_final_time+1)& (0+255),b
  4698  0050FC  0E00               	movlw	0
  4699  0050FE  6F60               	movwf	_final_time& (0+255),b
  4700                           
  4701                           ;main.c: 1122: for (i=0;i<8;i++){
  4702  005100  0E00               	movlw	0
  4703  005102  0100               	movlb	0	; () banked
  4704  005104  6FB8               	movwf	(_i+1)& (0+255),b
  4705  005106  0E00               	movlw	0
  4706  005108  6FB7               	movwf	_i& (0+255),b
  4707  00510A                     l6635:
  4708                           
  4709                           ; BSR set to: 0
  4710  00510A  51B8               	movf	(_i+1)& (0+255),w,b
  4711  00510C  E155               	bnz	l632
  4712  00510E  0E08               	movlw	8
  4713  005110  5DB7               	subwf	_i& (0+255),w,b
  4714  005112  B0D8               	btfsc	status,0,c
  4715  005114  0012               	return	
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;main.c: 1123: compartment_array[i] = 0;
  4719                           
  4720                           ; BSR set to: 0
  4721                           
  4722                           ; BSR set to: 0
  4723  005116  90D8               	bcf	status,0,c
  4724  005118  35B7               	rlcf	_i& (0+255),w,b
  4725  00511A  6ED9               	movwf	fsr2l,c
  4726  00511C  35B8               	rlcf	(_i+1)& (0+255),w,b
  4727  00511E  6EDA               	movwf	fsr2h,c
  4728  005120  0E80               	movlw	low _compartment_array
  4729  005122  26D9               	addwf	fsr2l,f,c
  4730  005124  0E00               	movlw	high _compartment_array
  4731  005126  22DA               	addwfc	fsr2h,f,c
  4732  005128  0E00               	movlw	0
  4733  00512A  6EDE               	movwf	postinc2,c
  4734  00512C  0E00               	movlw	0
  4735  00512E  6EDD               	movwf	postdec2,c
  4736                           
  4737                           ;main.c: 1124: compartment_number[i] = 0;
  4738  005130  90D8               	bcf	status,0,c
  4739  005132  35B7               	rlcf	_i& (0+255),w,b
  4740  005134  6ED9               	movwf	fsr2l,c
  4741  005136  35B8               	rlcf	(_i+1)& (0+255),w,b
  4742  005138  6EDA               	movwf	fsr2h,c
  4743  00513A  0E42               	movlw	low _compartment_number
  4744  00513C  26D9               	addwf	fsr2l,f,c
  4745  00513E  0E00               	movlw	high _compartment_number
  4746  005140  22DA               	addwfc	fsr2h,f,c
  4747  005142  0E00               	movlw	0
  4748  005144  6EDE               	movwf	postinc2,c
  4749  005146  0E00               	movlw	0
  4750  005148  6EDD               	movwf	postdec2,c
  4751                           
  4752                           ;main.c: 1125: B_array[i] = 0;
  4753  00514A  90D8               	bcf	status,0,c
  4754  00514C  35B7               	rlcf	_i& (0+255),w,b
  4755  00514E  6ED9               	movwf	fsr2l,c
  4756  005150  35B8               	rlcf	(_i+1)& (0+255),w,b
  4757  005152  6EDA               	movwf	fsr2h,c
  4758  005154  0E30               	movlw	low _B_array
  4759  005156  26D9               	addwf	fsr2l,f,c
  4760  005158  0E01               	movlw	high _B_array
  4761  00515A  22DA               	addwfc	fsr2h,f,c
  4762  00515C  0E00               	movlw	0
  4763  00515E  6EDE               	movwf	postinc2,c
  4764  005160  0E00               	movlw	0
  4765  005162  6EDD               	movwf	postdec2,c
  4766                           
  4767                           ;main.c: 1126: N_array[i] = 0;
  4768  005164  90D8               	bcf	status,0,c
  4769  005166  35B7               	rlcf	_i& (0+255),w,b
  4770  005168  6ED9               	movwf	fsr2l,c
  4771  00516A  35B8               	rlcf	(_i+1)& (0+255),w,b
  4772  00516C  6EDA               	movwf	fsr2h,c
  4773  00516E  0E10               	movlw	low _N_array
  4774  005170  26D9               	addwf	fsr2l,f,c
  4775  005172  0E01               	movlw	high _N_array
  4776  005174  22DA               	addwfc	fsr2h,f,c
  4777  005176  0E00               	movlw	0
  4778  005178  6EDE               	movwf	postinc2,c
  4779  00517A  0E00               	movlw	0
  4780  00517C  6EDD               	movwf	postdec2,c
  4781                           
  4782                           ;main.c: 1127: S_array[i] = 0;
  4783  00517E  90D8               	bcf	status,0,c
  4784  005180  35B7               	rlcf	_i& (0+255),w,b
  4785  005182  6ED9               	movwf	fsr2l,c
  4786  005184  35B8               	rlcf	(_i+1)& (0+255),w,b
  4787  005186  6EDA               	movwf	fsr2h,c
  4788  005188  0E20               	movlw	low _S_array
  4789  00518A  26D9               	addwf	fsr2l,f,c
  4790  00518C  0E01               	movlw	high _S_array
  4791  00518E  22DA               	addwfc	fsr2h,f,c
  4792  005190  0E00               	movlw	0
  4793  005192  6EDE               	movwf	postinc2,c
  4794  005194  0E00               	movlw	0
  4795  005196  6EDD               	movwf	postdec2,c
  4796                           
  4797                           ;main.c: 1128: W_array[i] = 0;
  4798  005198  90D8               	bcf	status,0,c
  4799  00519A  35B7               	rlcf	_i& (0+255),w,b
  4800  00519C  6ED9               	movwf	fsr2l,c
  4801  00519E  35B8               	rlcf	(_i+1)& (0+255),w,b
  4802  0051A0  6EDA               	movwf	fsr2h,c
  4803  0051A2  0E00               	movlw	low _W_array
  4804  0051A4  26D9               	addwf	fsr2l,f,c
  4805  0051A6  0E01               	movlw	high _W_array
  4806  0051A8  22DA               	addwfc	fsr2h,f,c
  4807  0051AA  0E00               	movlw	0
  4808  0051AC  6EDE               	movwf	postinc2,c
  4809  0051AE  0E00               	movlw	0
  4810  0051B0  6EDD               	movwf	postdec2,c
  4811                           
  4812                           ; BSR set to: 0
  4813  0051B2  4BB7               	infsnz	_i& (0+255),f,b
  4814  0051B4  2BB8               	incf	(_i+1)& (0+255),f,b
  4815  0051B6  D7A9               	goto	l6635
  4816  0051B8                     l632:
  4817                           
  4818                           ; BSR set to: 0
  4819  0051B8  0012               	return		;funcret
  4820  0051BA                     __end_of_initialize:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           intcon	equ	0xFF2
  4827                           intcon3	equ	0xFF0
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           postdec1	equ	0xFE5
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           fsr2h	equ	0xFDA
  4836                           fsr2l	equ	0xFD9
  4837                           status	equ	0xFD8
  4838                           
  4839 ;; *************** function _initVibTimer *****************
  4840 ;; Defined at:
  4841 ;;		line 1577 in file "main.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;		None
  4846 ;; Return value:  Size  Location     Type
  4847 ;;                  1    wreg      void 
  4848 ;; Registers used:
  4849 ;;		None
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;Total ram usage:        0 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    4
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_main
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text2
  4870  0061EE                     __ptext2:
  4871                           	opt stack 0
  4872  0061EE                     _initVibTimer:
  4873                           	opt stack 26
  4874                           
  4875                           ;main.c: 1579: INTCONbits.TMR0IE = 1;
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;incstack = 0
  4879  0061EE  8AF2               	bsf	intcon,5,c	;volatile
  4880                           
  4881                           ;main.c: 1580: (INTCONbits.GIE = 1);
  4882  0061F0  8EF2               	bsf	intcon,7,c	;volatile
  4883                           
  4884                           ;main.c: 1582: T0CONbits.T08BIT = 0;
  4885  0061F2  9CD5               	bcf	4053,6,c	;volatile
  4886                           
  4887                           ;main.c: 1583: T0CONbits.T0CS = 0;
  4888  0061F4  9AD5               	bcf	4053,5,c	;volatile
  4889                           
  4890                           ;main.c: 1584: T0CONbits.PSA = 0;
  4891  0061F6  96D5               	bcf	4053,3,c	;volatile
  4892                           
  4893                           ;main.c: 1585: T0CONbits.T0PS0 = 1;
  4894  0061F8  80D5               	bsf	4053,0,c	;volatile
  4895                           
  4896                           ;main.c: 1586: T0CONbits.T0PS1 = 1 ;
  4897  0061FA  82D5               	bsf	4053,1,c	;volatile
  4898                           
  4899                           ;main.c: 1587: T0CONbits.T0PS2 = 1;
  4900  0061FC  84D5               	bsf	4053,2,c	;volatile
  4901                           
  4902                           ;main.c: 1589: T0CONbits.TMR0ON = 1;
  4903  0061FE  8ED5               	bsf	4053,7,c	;volatile
  4904  006200  0012               	return		;funcret
  4905  006202                     __end_of_initVibTimer:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           intcon	equ	0xFF2
  4912                           intcon3	equ	0xFF0
  4913                           postinc0	equ	0xFEE
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _initLCD *****************
  4925 ;; Defined at:
  4926 ;;		line 60 in file "lcd.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, status,2, status,0, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;Total ram usage:        1 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    6
  4947 ;; This function calls:
  4948 ;;		_lcdInst
  4949 ;; This function is called by:
  4950 ;;		_main
  4951 ;;		_count_gear
  4952 ;;		_nut_washer_remain
  4953 ;;		_bolt_spacer_remain
  4954 ;;		_all_remain
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text3
  4959  005E0A                     __ptext3:
  4960                           	opt stack 0
  4961  005E0A                     _initLCD:
  4962                           	opt stack 24
  4963                           
  4964                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
  4965                           
  4966                           ;incstack = 0
  4967  005E0A  0E9C               	movlw	156
  4968  005E0C  0100               	movlb	0	; () banked
  4969  005E0E  6FC6               	movwf	??_initLCD& (0+255),b
  4970  005E10  0ED7               	movlw	215
  4971  005E12                     u6947:
  4972  005E12  2EE8               	decfsz	wreg,f,c
  4973  005E14  D7FE               	bra	u6947
  4974  005E16  2FC6               	decfsz	??_initLCD& (0+255),f,b
  4975  005E18  D7FC               	bra	u6947
  4976                           
  4977                           ;lcd.c: 69: lcdInst(0b00110011);
  4978  005E1A  0E33               	movlw	51
  4979  005E1C  ECEB  F030         	call	_lcdInst
  4980                           
  4981                           ;lcd.c: 70: lcdInst(0b00110010);
  4982  005E20  0E32               	movlw	50
  4983  005E22  ECEB  F030         	call	_lcdInst
  4984                           
  4985                           ;lcd.c: 71: lcdInst(0b00101000);
  4986  005E26  0E28               	movlw	40
  4987  005E28  ECEB  F030         	call	_lcdInst
  4988                           
  4989                           ;lcd.c: 72: lcdInst(0b00001111);
  4990  005E2C  0E0F               	movlw	15
  4991  005E2E  ECEB  F030         	call	_lcdInst
  4992                           
  4993                           ;lcd.c: 73: lcdInst(0b00000110);
  4994  005E32  0E06               	movlw	6
  4995  005E34  ECEB  F030         	call	_lcdInst
  4996                           
  4997                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  4998  005E38  0E01               	movlw	1
  4999  005E3A  ECEB  F030         	call	_lcdInst
  5000  005E3E  0E9C               	movlw	156
  5001  005E40  0100               	movlb	0	; () banked
  5002  005E42  6FC6               	movwf	??_initLCD& (0+255),b
  5003  005E44  0ED7               	movlw	215
  5004  005E46                     u6957:
  5005  005E46  2EE8               	decfsz	wreg,f,c
  5006  005E48  D7FE               	bra	u6957
  5007  005E4A  2FC6               	decfsz	??_initLCD& (0+255),f,b
  5008  005E4C  D7FC               	bra	u6957
  5009                           
  5010                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5011  005E4E  0E0F               	movlw	15
  5012  005E50  ECEB  F030         	call	_lcdInst
  5013  005E54  0012               	return		;funcret
  5014  005E56                     __end_of_initLCD:
  5015                           	opt stack 0
  5016                           tblptru	equ	0xFF8
  5017                           tblptrh	equ	0xFF7
  5018                           tblptrl	equ	0xFF6
  5019                           tablat	equ	0xFF5
  5020                           intcon	equ	0xFF2
  5021                           intcon3	equ	0xFF0
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _initGLCD *****************
  5034 ;; Defined at:
  5035 ;;		line 238 in file "GLCD_PIC.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;Total ram usage:        2 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    8
  5056 ;; This function calls:
  5057 ;;		_glcdDrawRectangle
  5058 ;;		_glcdSetCOLMOD
  5059 ;;		_glcdTransfer
  5060 ;;		_spiInit
  5061 ;; This function is called by:
  5062 ;;		_main
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text4
  5067  003AB6                     __ptext4:
  5068                           	opt stack 0
  5069  003AB6                     _initGLCD:
  5070                           	opt stack 22
  5071                           
  5072                           ;GLCD_PIC.c: 262: LATDbits.LATD0 = 1;
  5073                           
  5074                           ;incstack = 0
  5075  003AB6  808C               	bsf	3980,0,c	;volatile
  5076                           
  5077                           ;GLCD_PIC.c: 263: LATDbits.LATD1 = 1;
  5078  003AB8  828C               	bsf	3980,1,c	;volatile
  5079                           
  5080                           ;GLCD_PIC.c: 264: TRISDbits.TRISD0 = 0;
  5081  003ABA  9095               	bcf	3989,0,c	;volatile
  5082                           
  5083                           ;GLCD_PIC.c: 265: TRISDbits.TRISD1 = 0;
  5084  003ABC  9295               	bcf	3989,1,c	;volatile
  5085                           
  5086                           ;GLCD_PIC.c: 268: spiInit(4);
  5087  003ABE  0E04               	movlw	4
  5088  003AC0  ECFD  F02F         	call	_spiInit
  5089                           
  5090                           ;GLCD_PIC.c: 272: _delay((unsigned long)((20)*(32000000/4000.0)));
  5091  003AC4  0ED0               	movlw	208
  5092  003AC6  0100               	movlb	0	; () banked
  5093  003AC8  6FE4               	movwf	??_initGLCD& (0+255),b
  5094  003ACA  0EC9               	movlw	201
  5095  003ACC                     u6967:
  5096  003ACC  2EE8               	decfsz	wreg,f,c
  5097  003ACE  D7FE               	bra	u6967
  5098  003AD0  2FE4               	decfsz	??_initGLCD& (0+255),f,b
  5099  003AD2  D7FC               	bra	u6967
  5100  003AD4  D000               	nop2	
  5101                           
  5102                           ;GLCD_PIC.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(3200000
      +                          0/4000.0))); };
  5103  003AD6  0E01               	movlw	1
  5104  003AD8  0100               	movlb	0	; () banked
  5105  003ADA  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5106  003ADC  0EC6               	movlw	low GLCD_PIC@INST_SWRESET
  5107  003ADE  6EF6               	movwf	tblptrl,c
  5108  003AE0                     	if	1	;There is more than 1 active tblptr byte
  5109  003AE0  0EFC               	movlw	high GLCD_PIC@INST_SWRESET
  5110  003AE2  6EF7               	movwf	tblptrh,c
  5111  003AE4                     	endif
  5112  003AE4                     	if	1	;There are 3 active tblptr bytes
  5113  003AE4  0E00               	movlw	low (GLCD_PIC@INST_SWRESET shr (0+16))
  5114  003AE6  6EF8               	movwf	tblptru,c
  5115  003AE8                     	endif
  5116  003AE8  0008               	tblrd		*
  5117  003AEA  50F5               	movf	tablat,w,c
  5118  003AEC  EC32  F030         	call	_glcdTransfer
  5119  003AF0  0E06               	movlw	6
  5120  003AF2  0100               	movlb	0	; () banked
  5121  003AF4  6FE5               	movwf	(??_initGLCD+1)& (0+255),b
  5122  003AF6  0E47               	movlw	71
  5123  003AF8  6FE4               	movwf	??_initGLCD& (0+255),b
  5124  003AFA  0EA0               	movlw	160
  5125  003AFC                     u6977:
  5126  003AFC  2EE8               	decfsz	wreg,f,c
  5127  003AFE  D7FE               	bra	u6977
  5128  003B00  2FE4               	decfsz	??_initGLCD& (0+255),f,b
  5129  003B02  D7FC               	bra	u6977
  5130  003B04  2FE5               	decfsz	(??_initGLCD+1)& (0+255),f,b
  5131  003B06  D7FA               	bra	u6977
  5132  003B08  F000               	nop	
  5133                           
  5134                           ;GLCD_PIC.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(32000000
      +                          /4000.0))); };
  5135  003B0A  0E01               	movlw	1
  5136  003B0C  0100               	movlb	0	; () banked
  5137  003B0E  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5138  003B10  0EC4               	movlw	low GLCD_PIC@INST_SLPOUT
  5139  003B12  6EF6               	movwf	tblptrl,c
  5140  003B14                     	if	1	;There is more than 1 active tblptr byte
  5141  003B14  0EFC               	movlw	high GLCD_PIC@INST_SLPOUT
  5142  003B16  6EF7               	movwf	tblptrh,c
  5143  003B18                     	endif
  5144  003B18                     	if	1	;There are 3 active tblptr bytes
  5145  003B18  0E00               	movlw	low (GLCD_PIC@INST_SLPOUT shr (0+16))
  5146  003B1A  6EF8               	movwf	tblptru,c
  5147  003B1C                     	endif
  5148  003B1C  0008               	tblrd		*
  5149  003B1E  50F5               	movf	tablat,w,c
  5150  003B20  EC32  F030         	call	_glcdTransfer
  5151  003B24  0E06               	movlw	6
  5152  003B26  0100               	movlb	0	; () banked
  5153  003B28  6FE5               	movwf	(??_initGLCD+1)& (0+255),b
  5154  003B2A  0E47               	movlw	71
  5155  003B2C  6FE4               	movwf	??_initGLCD& (0+255),b
  5156  003B2E  0EA0               	movlw	160
  5157  003B30                     u6987:
  5158  003B30  2EE8               	decfsz	wreg,f,c
  5159  003B32  D7FE               	bra	u6987
  5160  003B34  2FE4               	decfsz	??_initGLCD& (0+255),f,b
  5161  003B36  D7FC               	bra	u6987
  5162  003B38  2FE5               	decfsz	(??_initGLCD+1)& (0+255),f,b
  5163  003B3A  D7FA               	bra	u6987
  5164  003B3C  F000               	nop	
  5165                           
  5166                           ;GLCD_PIC.c: 280: glcdTransfer(INST_FRMCTR1, 1);
  5167  003B3E  0E01               	movlw	1
  5168  003B40  0100               	movlb	0	; () banked
  5169  003B42  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5170  003B44  0EB2               	movlw	low GLCD_PIC@INST_FRMCTR1
  5171  003B46  6EF6               	movwf	tblptrl,c
  5172  003B48                     	if	1	;There is more than 1 active tblptr byte
  5173  003B48  0EFC               	movlw	high GLCD_PIC@INST_FRMCTR1
  5174  003B4A  6EF7               	movwf	tblptrh,c
  5175  003B4C                     	endif
  5176  003B4C                     	if	1	;There are 3 active tblptr bytes
  5177  003B4C  0E00               	movlw	low (GLCD_PIC@INST_FRMCTR1 shr (0+16))
  5178  003B4E  6EF8               	movwf	tblptru,c
  5179  003B50                     	endif
  5180  003B50  0008               	tblrd		*
  5181  003B52  50F5               	movf	tablat,w,c
  5182  003B54  EC32  F030         	call	_glcdTransfer
  5183                           
  5184                           ;GLCD_PIC.c: 281: glcdTransfer(0x00, 0);
  5185  003B58  0E00               	movlw	0
  5186  003B5A  0100               	movlb	0	; () banked
  5187  003B5C  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5188  003B5E  0E00               	movlw	0
  5189  003B60  EC32  F030         	call	_glcdTransfer
  5190                           
  5191                           ;GLCD_PIC.c: 282: glcdTransfer(0x06, 0);
  5192  003B64  0E00               	movlw	0
  5193  003B66  0100               	movlb	0	; () banked
  5194  003B68  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5195  003B6A  0E06               	movlw	6
  5196  003B6C  EC32  F030         	call	_glcdTransfer
  5197                           
  5198                           ;GLCD_PIC.c: 283: glcdTransfer(0x03, 0);
  5199  003B70  0E00               	movlw	0
  5200  003B72  0100               	movlb	0	; () banked
  5201  003B74  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5202  003B76  0E03               	movlw	3
  5203  003B78  EC32  F030         	call	_glcdTransfer
  5204                           
  5205                           ;GLCD_PIC.c: 285: glcdTransfer(INST_FRMCTR2, 1);
  5206  003B7C  0E01               	movlw	1
  5207  003B7E  0100               	movlb	0	; () banked
  5208  003B80  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5209  003B82  0EB1               	movlw	low GLCD_PIC@INST_FRMCTR2
  5210  003B84  6EF6               	movwf	tblptrl,c
  5211  003B86                     	if	1	;There is more than 1 active tblptr byte
  5212  003B86  0EFC               	movlw	high GLCD_PIC@INST_FRMCTR2
  5213  003B88  6EF7               	movwf	tblptrh,c
  5214  003B8A                     	endif
  5215  003B8A                     	if	1	;There are 3 active tblptr bytes
  5216  003B8A  0E00               	movlw	low (GLCD_PIC@INST_FRMCTR2 shr (0+16))
  5217  003B8C  6EF8               	movwf	tblptru,c
  5218  003B8E                     	endif
  5219  003B8E  0008               	tblrd		*
  5220  003B90  50F5               	movf	tablat,w,c
  5221  003B92  EC32  F030         	call	_glcdTransfer
  5222                           
  5223                           ;GLCD_PIC.c: 286: glcdTransfer(0x01, 0);
  5224  003B96  0E00               	movlw	0
  5225  003B98  0100               	movlb	0	; () banked
  5226  003B9A  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5227  003B9C  0E01               	movlw	1
  5228  003B9E  EC32  F030         	call	_glcdTransfer
  5229                           
  5230                           ;GLCD_PIC.c: 287: glcdTransfer(0x2C, 0);
  5231  003BA2  0E00               	movlw	0
  5232  003BA4  0100               	movlb	0	; () banked
  5233  003BA6  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5234  003BA8  0E2C               	movlw	44
  5235  003BAA  EC32  F030         	call	_glcdTransfer
  5236                           
  5237                           ;GLCD_PIC.c: 288: glcdTransfer(0x2D, 0);
  5238  003BAE  0E00               	movlw	0
  5239  003BB0  0100               	movlb	0	; () banked
  5240  003BB2  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5241  003BB4  0E2D               	movlw	45
  5242  003BB6  EC32  F030         	call	_glcdTransfer
  5243                           
  5244                           ;GLCD_PIC.c: 290: glcdTransfer(INST_FRMCTR3, 1);
  5245  003BBA  0E01               	movlw	1
  5246  003BBC  0100               	movlb	0	; () banked
  5247  003BBE  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5248  003BC0  0EB0               	movlw	low GLCD_PIC@INST_FRMCTR3
  5249  003BC2  6EF6               	movwf	tblptrl,c
  5250  003BC4                     	if	1	;There is more than 1 active tblptr byte
  5251  003BC4  0EFC               	movlw	high GLCD_PIC@INST_FRMCTR3
  5252  003BC6  6EF7               	movwf	tblptrh,c
  5253  003BC8                     	endif
  5254  003BC8                     	if	1	;There are 3 active tblptr bytes
  5255  003BC8  0E00               	movlw	low (GLCD_PIC@INST_FRMCTR3 shr (0+16))
  5256  003BCA  6EF8               	movwf	tblptru,c
  5257  003BCC                     	endif
  5258  003BCC  0008               	tblrd		*
  5259  003BCE  50F5               	movf	tablat,w,c
  5260  003BD0  EC32  F030         	call	_glcdTransfer
  5261                           
  5262                           ;GLCD_PIC.c: 291: glcdTransfer(0x01, 0);
  5263  003BD4  0E00               	movlw	0
  5264  003BD6  0100               	movlb	0	; () banked
  5265  003BD8  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5266  003BDA  0E01               	movlw	1
  5267  003BDC  EC32  F030         	call	_glcdTransfer
  5268                           
  5269                           ;GLCD_PIC.c: 292: glcdTransfer(0x2C, 0);
  5270  003BE0  0E00               	movlw	0
  5271  003BE2  0100               	movlb	0	; () banked
  5272  003BE4  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5273  003BE6  0E2C               	movlw	44
  5274  003BE8  EC32  F030         	call	_glcdTransfer
  5275                           
  5276                           ;GLCD_PIC.c: 293: glcdTransfer(0x2D, 0);
  5277  003BEC  0E00               	movlw	0
  5278  003BEE  0100               	movlb	0	; () banked
  5279  003BF0  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5280  003BF2  0E2D               	movlw	45
  5281  003BF4  EC32  F030         	call	_glcdTransfer
  5282                           
  5283                           ;GLCD_PIC.c: 295: glcdTransfer(INST_INVCTR, 1);
  5284  003BF8  0E01               	movlw	1
  5285  003BFA  0100               	movlb	0	; () banked
  5286  003BFC  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5287  003BFE  0EAF               	movlw	low GLCD_PIC@INST_INVCTR
  5288  003C00  6EF6               	movwf	tblptrl,c
  5289  003C02                     	if	1	;There is more than 1 active tblptr byte
  5290  003C02  0EFC               	movlw	high GLCD_PIC@INST_INVCTR
  5291  003C04  6EF7               	movwf	tblptrh,c
  5292  003C06                     	endif
  5293  003C06                     	if	1	;There are 3 active tblptr bytes
  5294  003C06  0E00               	movlw	low (GLCD_PIC@INST_INVCTR shr (0+16))
  5295  003C08  6EF8               	movwf	tblptru,c
  5296  003C0A                     	endif
  5297  003C0A  0008               	tblrd		*
  5298  003C0C  50F5               	movf	tablat,w,c
  5299  003C0E  EC32  F030         	call	_glcdTransfer
  5300                           
  5301                           ;GLCD_PIC.c: 296: glcdTransfer(0x00, 0);
  5302  003C12  0E00               	movlw	0
  5303  003C14  0100               	movlb	0	; () banked
  5304  003C16  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5305  003C18  0E00               	movlw	0
  5306  003C1A  EC32  F030         	call	_glcdTransfer
  5307                           
  5308                           ;GLCD_PIC.c: 299: glcdTransfer(INST_PWCTR1, 1);
  5309  003C1E  0E01               	movlw	1
  5310  003C20  0100               	movlb	0	; () banked
  5311  003C22  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5312  003C24  0EAE               	movlw	low GLCD_PIC@INST_PWCTR1
  5313  003C26  6EF6               	movwf	tblptrl,c
  5314  003C28                     	if	1	;There is more than 1 active tblptr byte
  5315  003C28  0EFC               	movlw	high GLCD_PIC@INST_PWCTR1
  5316  003C2A  6EF7               	movwf	tblptrh,c
  5317  003C2C                     	endif
  5318  003C2C                     	if	1	;There are 3 active tblptr bytes
  5319  003C2C  0E00               	movlw	low (GLCD_PIC@INST_PWCTR1 shr (0+16))
  5320  003C2E  6EF8               	movwf	tblptru,c
  5321  003C30                     	endif
  5322  003C30  0008               	tblrd		*
  5323  003C32  50F5               	movf	tablat,w,c
  5324  003C34  EC32  F030         	call	_glcdTransfer
  5325                           
  5326                           ;GLCD_PIC.c: 300: glcdTransfer(0xA2, 0);
  5327  003C38  0E00               	movlw	0
  5328  003C3A  0100               	movlb	0	; () banked
  5329  003C3C  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5330  003C3E  0EA2               	movlw	162
  5331  003C40  EC32  F030         	call	_glcdTransfer
  5332                           
  5333                           ;GLCD_PIC.c: 301: glcdTransfer(0x02, 0);
  5334  003C44  0E00               	movlw	0
  5335  003C46  0100               	movlb	0	; () banked
  5336  003C48  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5337  003C4A  0E02               	movlw	2
  5338  003C4C  EC32  F030         	call	_glcdTransfer
  5339                           
  5340                           ;GLCD_PIC.c: 302: glcdTransfer(0x84, 0);
  5341  003C50  0E00               	movlw	0
  5342  003C52  0100               	movlb	0	; () banked
  5343  003C54  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5344  003C56  0E84               	movlw	132
  5345  003C58  EC32  F030         	call	_glcdTransfer
  5346                           
  5347                           ;GLCD_PIC.c: 304: glcdTransfer(INST_PWCTR2, 1);
  5348  003C5C  0E01               	movlw	1
  5349  003C5E  0100               	movlb	0	; () banked
  5350  003C60  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5351  003C62  0EAD               	movlw	low GLCD_PIC@INST_PWCTR2
  5352  003C64  6EF6               	movwf	tblptrl,c
  5353  003C66                     	if	1	;There is more than 1 active tblptr byte
  5354  003C66  0EFC               	movlw	high GLCD_PIC@INST_PWCTR2
  5355  003C68  6EF7               	movwf	tblptrh,c
  5356  003C6A                     	endif
  5357  003C6A                     	if	1	;There are 3 active tblptr bytes
  5358  003C6A  0E00               	movlw	low (GLCD_PIC@INST_PWCTR2 shr (0+16))
  5359  003C6C  6EF8               	movwf	tblptru,c
  5360  003C6E                     	endif
  5361  003C6E  0008               	tblrd		*
  5362  003C70  50F5               	movf	tablat,w,c
  5363  003C72  EC32  F030         	call	_glcdTransfer
  5364                           
  5365                           ;GLCD_PIC.c: 305: glcdTransfer(0xC5, 0);
  5366  003C76  0E00               	movlw	0
  5367  003C78  0100               	movlb	0	; () banked
  5368  003C7A  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5369  003C7C  0EC5               	movlw	197
  5370  003C7E  EC32  F030         	call	_glcdTransfer
  5371                           
  5372                           ;GLCD_PIC.c: 307: glcdTransfer(INST_PWCTR3, 1);
  5373  003C82  0E01               	movlw	1
  5374  003C84  0100               	movlb	0	; () banked
  5375  003C86  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5376  003C88  0EAC               	movlw	low GLCD_PIC@INST_PWCTR3
  5377  003C8A  6EF6               	movwf	tblptrl,c
  5378  003C8C                     	if	1	;There is more than 1 active tblptr byte
  5379  003C8C  0EFC               	movlw	high GLCD_PIC@INST_PWCTR3
  5380  003C8E  6EF7               	movwf	tblptrh,c
  5381  003C90                     	endif
  5382  003C90                     	if	1	;There are 3 active tblptr bytes
  5383  003C90  0E00               	movlw	low (GLCD_PIC@INST_PWCTR3 shr (0+16))
  5384  003C92  6EF8               	movwf	tblptru,c
  5385  003C94                     	endif
  5386  003C94  0008               	tblrd		*
  5387  003C96  50F5               	movf	tablat,w,c
  5388  003C98  EC32  F030         	call	_glcdTransfer
  5389                           
  5390                           ;GLCD_PIC.c: 308: glcdTransfer(0x0A, 0);
  5391  003C9C  0E00               	movlw	0
  5392  003C9E  0100               	movlb	0	; () banked
  5393  003CA0  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5394  003CA2  0E0A               	movlw	10
  5395  003CA4  EC32  F030         	call	_glcdTransfer
  5396                           
  5397                           ;GLCD_PIC.c: 309: glcdTransfer(0x00, 0);
  5398  003CA8  0E00               	movlw	0
  5399  003CAA  0100               	movlb	0	; () banked
  5400  003CAC  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5401  003CAE  0E00               	movlw	0
  5402  003CB0  EC32  F030         	call	_glcdTransfer
  5403                           
  5404                           ;GLCD_PIC.c: 311: glcdTransfer(INST_PWCTR4, 1);
  5405  003CB4  0E01               	movlw	1
  5406  003CB6  0100               	movlb	0	; () banked
  5407  003CB8  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5408  003CBA  0EAB               	movlw	low GLCD_PIC@INST_PWCTR4
  5409  003CBC  6EF6               	movwf	tblptrl,c
  5410  003CBE                     	if	1	;There is more than 1 active tblptr byte
  5411  003CBE  0EFC               	movlw	high GLCD_PIC@INST_PWCTR4
  5412  003CC0  6EF7               	movwf	tblptrh,c
  5413  003CC2                     	endif
  5414  003CC2                     	if	1	;There are 3 active tblptr bytes
  5415  003CC2  0E00               	movlw	low (GLCD_PIC@INST_PWCTR4 shr (0+16))
  5416  003CC4  6EF8               	movwf	tblptru,c
  5417  003CC6                     	endif
  5418  003CC6  0008               	tblrd		*
  5419  003CC8  50F5               	movf	tablat,w,c
  5420  003CCA  EC32  F030         	call	_glcdTransfer
  5421                           
  5422                           ;GLCD_PIC.c: 312: glcdTransfer(0x8A, 0);
  5423  003CCE  0E00               	movlw	0
  5424  003CD0  0100               	movlb	0	; () banked
  5425  003CD2  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5426  003CD4  0E8A               	movlw	138
  5427  003CD6  EC32  F030         	call	_glcdTransfer
  5428                           
  5429                           ;GLCD_PIC.c: 313: glcdTransfer(0x2A, 0);
  5430  003CDA  0E00               	movlw	0
  5431  003CDC  0100               	movlb	0	; () banked
  5432  003CDE  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5433  003CE0  0E2A               	movlw	42
  5434  003CE2  EC32  F030         	call	_glcdTransfer
  5435                           
  5436                           ;GLCD_PIC.c: 315: glcdTransfer(INST_PWCTR5, 1);
  5437  003CE6  0E01               	movlw	1
  5438  003CE8  0100               	movlb	0	; () banked
  5439  003CEA  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5440  003CEC  0EAA               	movlw	low GLCD_PIC@INST_PWCTR5
  5441  003CEE  6EF6               	movwf	tblptrl,c
  5442  003CF0                     	if	1	;There is more than 1 active tblptr byte
  5443  003CF0  0EFC               	movlw	high GLCD_PIC@INST_PWCTR5
  5444  003CF2  6EF7               	movwf	tblptrh,c
  5445  003CF4                     	endif
  5446  003CF4                     	if	1	;There are 3 active tblptr bytes
  5447  003CF4  0E00               	movlw	low (GLCD_PIC@INST_PWCTR5 shr (0+16))
  5448  003CF6  6EF8               	movwf	tblptru,c
  5449  003CF8                     	endif
  5450  003CF8  0008               	tblrd		*
  5451  003CFA  50F5               	movf	tablat,w,c
  5452  003CFC  EC32  F030         	call	_glcdTransfer
  5453                           
  5454                           ;GLCD_PIC.c: 316: glcdTransfer(0x8A, 0);
  5455  003D00  0E00               	movlw	0
  5456  003D02  0100               	movlb	0	; () banked
  5457  003D04  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5458  003D06  0E8A               	movlw	138
  5459  003D08  EC32  F030         	call	_glcdTransfer
  5460                           
  5461                           ;GLCD_PIC.c: 317: glcdTransfer(0x2A, 0);
  5462  003D0C  0E00               	movlw	0
  5463  003D0E  0100               	movlb	0	; () banked
  5464  003D10  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5465  003D12  0E2A               	movlw	42
  5466  003D14  EC32  F030         	call	_glcdTransfer
  5467                           
  5468                           ;GLCD_PIC.c: 320: glcdTransfer(INST_VMCTR1, 1);
  5469  003D18  0E01               	movlw	1
  5470  003D1A  0100               	movlb	0	; () banked
  5471  003D1C  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5472  003D1E  0EA9               	movlw	low GLCD_PIC@INST_VMCTR1
  5473  003D20  6EF6               	movwf	tblptrl,c
  5474  003D22                     	if	1	;There is more than 1 active tblptr byte
  5475  003D22  0EFC               	movlw	high GLCD_PIC@INST_VMCTR1
  5476  003D24  6EF7               	movwf	tblptrh,c
  5477  003D26                     	endif
  5478  003D26                     	if	1	;There are 3 active tblptr bytes
  5479  003D26  0E00               	movlw	low (GLCD_PIC@INST_VMCTR1 shr (0+16))
  5480  003D28  6EF8               	movwf	tblptru,c
  5481  003D2A                     	endif
  5482  003D2A  0008               	tblrd		*
  5483  003D2C  50F5               	movf	tablat,w,c
  5484  003D2E  EC32  F030         	call	_glcdTransfer
  5485                           
  5486                           ;GLCD_PIC.c: 321: glcdTransfer(0x3C, 0);
  5487  003D32  0E00               	movlw	0
  5488  003D34  0100               	movlb	0	; () banked
  5489  003D36  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5490  003D38  0E3C               	movlw	60
  5491  003D3A  EC32  F030         	call	_glcdTransfer
  5492                           
  5493                           ;GLCD_PIC.c: 323: glcdTransfer(INST_INVOFF, 1);
  5494  003D3E  0E01               	movlw	1
  5495  003D40  0100               	movlb	0	; () banked
  5496  003D42  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5497  003D44  0EC1               	movlw	low GLCD_PIC@INST_INVOFF
  5498  003D46  6EF6               	movwf	tblptrl,c
  5499  003D48                     	if	1	;There is more than 1 active tblptr byte
  5500  003D48  0EFC               	movlw	high GLCD_PIC@INST_INVOFF
  5501  003D4A  6EF7               	movwf	tblptrh,c
  5502  003D4C                     	endif
  5503  003D4C                     	if	1	;There are 3 active tblptr bytes
  5504  003D4C  0E00               	movlw	low (GLCD_PIC@INST_INVOFF shr (0+16))
  5505  003D4E  6EF8               	movwf	tblptru,c
  5506  003D50                     	endif
  5507  003D50  0008               	tblrd		*
  5508  003D52  50F5               	movf	tablat,w,c
  5509  003D54  EC32  F030         	call	_glcdTransfer
  5510                           
  5511                           ;GLCD_PIC.c: 331: glcdSetCOLMOD(18);
  5512  003D58  0E12               	movlw	18
  5513  003D5A  EC56  F02E         	call	_glcdSetCOLMOD
  5514                           
  5515                           ;GLCD_PIC.c: 334: glcdTransfer(INST_GAMSET, 1);
  5516  003D5E  0E01               	movlw	1
  5517  003D60  0100               	movlb	0	; () banked
  5518  003D62  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5519  003D64  0EBF               	movlw	low GLCD_PIC@INST_GAMSET
  5520  003D66  6EF6               	movwf	tblptrl,c
  5521  003D68                     	if	1	;There is more than 1 active tblptr byte
  5522  003D68  0EFC               	movlw	high GLCD_PIC@INST_GAMSET
  5523  003D6A  6EF7               	movwf	tblptrh,c
  5524  003D6C                     	endif
  5525  003D6C                     	if	1	;There are 3 active tblptr bytes
  5526  003D6C  0E00               	movlw	low (GLCD_PIC@INST_GAMSET shr (0+16))
  5527  003D6E  6EF8               	movwf	tblptru,c
  5528  003D70                     	endif
  5529  003D70  0008               	tblrd		*
  5530  003D72  50F5               	movf	tablat,w,c
  5531  003D74  EC32  F030         	call	_glcdTransfer
  5532                           
  5533                           ;GLCD_PIC.c: 335: glcdTransfer(0x01, 0);
  5534  003D78  0E00               	movlw	0
  5535  003D7A  0100               	movlb	0	; () banked
  5536  003D7C  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5537  003D7E  0E01               	movlw	1
  5538  003D80  EC32  F030         	call	_glcdTransfer
  5539                           
  5540                           ;GLCD_PIC.c: 337: glcdTransfer(INST_IDMOFF, 1);
  5541  003D84  0E01               	movlw	1
  5542  003D86  0100               	movlb	0	; () banked
  5543  003D88  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5544  003D8A  0EB5               	movlw	low GLCD_PIC@INST_IDMOFF
  5545  003D8C  6EF6               	movwf	tblptrl,c
  5546  003D8E                     	if	1	;There is more than 1 active tblptr byte
  5547  003D8E  0EFC               	movlw	high GLCD_PIC@INST_IDMOFF
  5548  003D90  6EF7               	movwf	tblptrh,c
  5549  003D92                     	endif
  5550  003D92                     	if	1	;There are 3 active tblptr bytes
  5551  003D92  0E00               	movlw	low (GLCD_PIC@INST_IDMOFF shr (0+16))
  5552  003D94  6EF8               	movwf	tblptru,c
  5553  003D96                     	endif
  5554  003D96  0008               	tblrd		*
  5555  003D98  50F5               	movf	tablat,w,c
  5556  003D9A  EC32  F030         	call	_glcdTransfer
  5557                           
  5558                           ;GLCD_PIC.c: 339: glcdTransfer(INST_NORON, 1);
  5559  003D9E  0E01               	movlw	1
  5560  003DA0  0100               	movlb	0	; () banked
  5561  003DA2  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5562  003DA4  0EC2               	movlw	low GLCD_PIC@INST_NORON
  5563  003DA6  6EF6               	movwf	tblptrl,c
  5564  003DA8                     	if	1	;There is more than 1 active tblptr byte
  5565  003DA8  0EFC               	movlw	high GLCD_PIC@INST_NORON
  5566  003DAA  6EF7               	movwf	tblptrh,c
  5567  003DAC                     	endif
  5568  003DAC                     	if	1	;There are 3 active tblptr bytes
  5569  003DAC  0E00               	movlw	low (GLCD_PIC@INST_NORON shr (0+16))
  5570  003DAE  6EF8               	movwf	tblptru,c
  5571  003DB0                     	endif
  5572  003DB0  0008               	tblrd		*
  5573  003DB2  50F5               	movf	tablat,w,c
  5574  003DB4  EC32  F030         	call	_glcdTransfer
  5575                           
  5576                           ;GLCD_PIC.c: 342: MADCTLbits.MX = 1;
  5577  003DB8  0100               	movlb	0	; () banked
  5578  003DBA  8DB9               	bsf	_MADCTLbits& (0+255),6,b
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;GLCD_PIC.c: 343: MADCTLbits.MY = 1;
  5582  003DBC  8FB9               	bsf	_MADCTLbits& (0+255),7,b
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;GLCD_PIC.c: 344: MADCTLbits.MV = 1;
  5586  003DBE  8BB9               	bsf	_MADCTLbits& (0+255),5,b
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;GLCD_PIC.c: 345: MADCTLbits.ML = 0;
  5590  003DC0  99B9               	bcf	_MADCTLbits& (0+255),4,b
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;GLCD_PIC.c: 346: MADCTLbits.RGB = 0;
  5594  003DC2  97B9               	bcf	_MADCTLbits& (0+255),3,b
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;GLCD_PIC.c: 347: MADCTLbits.MH = 0;
  5598  003DC4  95B9               	bcf	_MADCTLbits& (0+255),2,b
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;GLCD_PIC.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);};
  5602  003DC6  0E01               	movlw	1
  5603  003DC8  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5604  003DCA  0EB6               	movlw	low GLCD_PIC@INST_MADCTL
  5605  003DCC  6EF6               	movwf	tblptrl,c
  5606  003DCE                     	if	1	;There is more than 1 active tblptr byte
  5607  003DCE  0EFC               	movlw	high GLCD_PIC@INST_MADCTL
  5608  003DD0  6EF7               	movwf	tblptrh,c
  5609  003DD2                     	endif
  5610  003DD2                     	if	1	;There are 3 active tblptr bytes
  5611  003DD2  0E00               	movlw	low (GLCD_PIC@INST_MADCTL shr (0+16))
  5612  003DD4  6EF8               	movwf	tblptru,c
  5613  003DD6                     	endif
  5614  003DD6  0008               	tblrd		*
  5615  003DD8  50F5               	movf	tablat,w,c
  5616  003DDA  EC32  F030         	call	_glcdTransfer
  5617  003DDE  0E00               	movlw	0
  5618  003DE0  0100               	movlb	0	; () banked
  5619  003DE2  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5620  003DE4  51B9               	movf	_MADCTLbits& (0+255),w,b
  5621  003DE6  EC32  F030         	call	_glcdTransfer
  5622                           
  5623                           ;GLCD_PIC.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  5624  003DEA  0EE9               	movlw	low _GLCD_SIZE_HORZ
  5625  003DEC  6EF6               	movwf	tblptrl,c
  5626  003DEE                     	if	1	;There is more than 1 active tblptr byte
  5627  003DEE  0EFC               	movlw	high _GLCD_SIZE_HORZ
  5628  003DF0  6EF7               	movwf	tblptrh,c
  5629  003DF2                     	endif
  5630  003DF2                     	if	1	;There are 3 active tblptr bytes
  5631  003DF2  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
  5632  003DF4  6EF8               	movwf	tblptru,c
  5633  003DF6                     	endif
  5634  003DF6  0008               	tblrd		*
  5635  003DF8  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
  5636  003DFC  0E00               	movlw	0
  5637  003DFE  0100               	movlb	0	; () banked
  5638  003E00  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  5639  003E02  0EE8               	movlw	low _GLCD_SIZE_VERT
  5640  003E04  6EF6               	movwf	tblptrl,c
  5641  003E06                     	if	1	;There is more than 1 active tblptr byte
  5642  003E06  0EFC               	movlw	high _GLCD_SIZE_VERT
  5643  003E08  6EF7               	movwf	tblptrh,c
  5644  003E0A                     	endif
  5645  003E0A                     	if	1	;There are 3 active tblptr bytes
  5646  003E0A  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
  5647  003E0C  6EF8               	movwf	tblptru,c
  5648  003E0E                     	endif
  5649  003E0E  0008               	tblrd		*
  5650  003E10  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
  5651  003E14  0EA1               	movlw	low _BLACK
  5652  003E16  6EF6               	movwf	tblptrl,c
  5653  003E18                     	if	1	;There is more than 1 active tblptr byte
  5654  003E18  0EFC               	movlw	high _BLACK
  5655  003E1A  6EF7               	movwf	tblptrh,c
  5656  003E1C                     	endif
  5657  003E1C                     	if	1	;There are 3 active tblptr bytes
  5658  003E1C  0E00               	movlw	low (_BLACK shr (0+16))
  5659  003E1E  6EF8               	movwf	tblptru,c
  5660  003E20                     	endif
  5661  003E20  0009               	tblrd		*+
  5662  003E22  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  5663  003E26  0009               	tblrd		*+
  5664  003E28  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  5665  003E2C  0009               	tblrd		*+
  5666  003E2E  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  5667  003E32  000A               	tblrd		*-
  5668  003E34  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  5669  003E38  0E00               	movlw	0
  5670  003E3A  ECA8  F026         	call	_glcdDrawRectangle
  5671                           
  5672                           ;GLCD_PIC.c: 354: glcdTransfer(INST_DISPON, 1);
  5673  003E3E  0E01               	movlw	1
  5674  003E40  0100               	movlb	0	; () banked
  5675  003E42  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5676  003E44  0EBD               	movlw	low GLCD_PIC@INST_DISPON
  5677  003E46  6EF6               	movwf	tblptrl,c
  5678  003E48                     	if	1	;There is more than 1 active tblptr byte
  5679  003E48  0EFC               	movlw	high GLCD_PIC@INST_DISPON
  5680  003E4A  6EF7               	movwf	tblptrh,c
  5681  003E4C                     	endif
  5682  003E4C                     	if	1	;There are 3 active tblptr bytes
  5683  003E4C  0E00               	movlw	low (GLCD_PIC@INST_DISPON shr (0+16))
  5684  003E4E  6EF8               	movwf	tblptru,c
  5685  003E50                     	endif
  5686  003E50  0008               	tblrd		*
  5687  003E52  50F5               	movf	tablat,w,c
  5688  003E54  EC32  F030         	call	_glcdTransfer
  5689                           
  5690                           ;GLCD_PIC.c: 355: _delay((unsigned long)((10)*(32000000/4000.0)));
  5691  003E58  0E68               	movlw	104
  5692  003E5A  0100               	movlb	0	; () banked
  5693  003E5C  6FE4               	movwf	??_initGLCD& (0+255),b
  5694  003E5E  0EE4               	movlw	228
  5695  003E60                     u6997:
  5696  003E60  2EE8               	decfsz	wreg,f,c
  5697  003E62  D7FE               	bra	u6997
  5698  003E64  2FE4               	decfsz	??_initGLCD& (0+255),f,b
  5699  003E66  D7FC               	bra	u6997
  5700  003E68  F000               	nop	
  5701  003E6A  0012               	return		;funcret
  5702  003E6C                     __end_of_initGLCD:
  5703                           	opt stack 0
  5704                           tblptru	equ	0xFF8
  5705                           tblptrh	equ	0xFF7
  5706                           tblptrl	equ	0xFF6
  5707                           tablat	equ	0xFF5
  5708                           intcon	equ	0xFF2
  5709                           intcon3	equ	0xFF0
  5710                           postinc0	equ	0xFEE
  5711                           wreg	equ	0xFE8
  5712                           postdec1	equ	0xFE5
  5713                           fsr1l	equ	0xFE1
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           fsr2h	equ	0xFDA
  5718                           fsr2l	equ	0xFD9
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function _glcdSetCOLMOD *****************
  5722 ;; Defined at:
  5723 ;;		line 167 in file "GLCD_PIC.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;  numBitsPerPi    1    wreg     unsigned char 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  numBitsPerPi    1    6[BANK0 ] unsigned char 
  5728 ;;  rawData         2    7[BANK0 ] unsigned short 
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  1    wreg      void 
  5731 ;; Registers used:
  5732 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;Total ram usage:        3 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    7
  5745 ;; This function calls:
  5746 ;;		_glcdTransfer
  5747 ;; This function is called by:
  5748 ;;		_initGLCD
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text5
  5753  005CAC                     __ptext5:
  5754                           	opt stack 0
  5755  005CAC                     _glcdSetCOLMOD:
  5756                           	opt stack 22
  5757                           
  5758                           ;incstack = 0
  5759                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  5760  005CAC  0100               	movlb	0	; () banked
  5761  005CAE  6FC9               	movwf	glcdSetCOLMOD@numBitsPerPixel& (0+255),b
  5762                           
  5763                           ;GLCD_PIC.c: 176: unsigned short rawData;
  5764                           ;GLCD_PIC.c: 177: switch(numBitsPerPixel){
  5765  005CB0  D00E               	goto	l1357
  5766  005CB2                     
  5767                           ;GLCD_PIC.c: 179: rawData = 0b00000011;
  5768  005CB2  0E00               	movlw	0
  5769  005CB4  0100               	movlb	0	; () banked
  5770  005CB6  6FCB               	movwf	(glcdSetCOLMOD@rawData+1)& (0+255),b
  5771  005CB8  0E03               	movlw	3
  5772  005CBA  D003               	goto	L2
  5773  005CBC                     
  5774                           ; BSR set to: 0
  5775                           ;GLCD_PIC.c: 182: rawData = 0b00000101;
  5776                           
  5777                           ; BSR set to: 0
  5778  005CBC  0E00               	movlw	0
  5779  005CBE  6FCB               	movwf	(glcdSetCOLMOD@rawData+1)& (0+255),b
  5780  005CC0  0E05               	movlw	5
  5781  005CC2                     L2:
  5782  005CC2  6FCA               	movwf	glcdSetCOLMOD@rawData& (0+255),b
  5783                           
  5784                           ;GLCD_PIC.c: 186: break;
  5785  005CC4  D00E               	goto	l1359
  5786  005CC6                     
  5787                           ; BSR set to: 0
  5788                           ;GLCD_PIC.c: 188: rawData = 0b00000110;
  5789                           
  5790                           ; BSR set to: 0
  5791  005CC6  0E00               	movlw	0
  5792  005CC8  6FCB               	movwf	(glcdSetCOLMOD@rawData+1)& (0+255),b
  5793  005CCA  0E06               	movlw	6
  5794  005CCC  D7FA               	goto	L2
  5795  005CCE                     l1357:
  5796                           
  5797                           ; BSR set to: 0
  5798  005CCE  0100               	movlb	0	; () banked
  5799  005CD0  51C9               	movf	glcdSetCOLMOD@numBitsPerPixel& (0+255),w,b
  5800                           
  5801                           ; Switch size 1, requested type "space"
  5802                           ; Number of cases is 3, Range of values is 12 to 18
  5803                           ; switch strategies available:
  5804                           ; Name         Instructions Cycles
  5805                           ; simple_byte           10     6 (average)
  5806                           ;	Chosen strategy is simple_byte
  5807  005CD2  0A0C               	xorlw	12	; case 12
  5808  005CD4  B4D8               	btfsc	status,2,c
  5809  005CD6  D7ED               	goto	l1358
  5810  005CD8  0A1C               	xorlw	28	; case 16
  5811  005CDA  B4D8               	btfsc	status,2,c
  5812  005CDC  D7EF               	goto	l1360
  5813  005CDE  0A02               	xorlw	2	; case 18
  5814  005CE0  D7F2               	goto	l1362
  5815  005CE2                     l1359:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;GLCD_PIC.c: 191: glcdTransfer(INST_COLMOD, 1);
  5819                           
  5820                           ; BSR set to: 0
  5821  005CE2  0E01               	movlw	1
  5822  005CE4  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5823  005CE6  0EB3               	movlw	low GLCD_PIC@INST_COLMOD
  5824  005CE8  6EF6               	movwf	tblptrl,c
  5825  005CEA                     	if	1	;There is more than 1 active tblptr byte
  5826  005CEA  0EFC               	movlw	high GLCD_PIC@INST_COLMOD
  5827  005CEC  6EF7               	movwf	tblptrh,c
  5828  005CEE                     	endif
  5829  005CEE                     	if	1	;There are 3 active tblptr bytes
  5830  005CEE  0E00               	movlw	low (GLCD_PIC@INST_COLMOD shr (0+16))
  5831  005CF0  6EF8               	movwf	tblptru,c
  5832  005CF2                     	endif
  5833  005CF2  0008               	tblrd		*
  5834  005CF4  50F5               	movf	tablat,w,c
  5835  005CF6  EC32  F030         	call	_glcdTransfer
  5836                           
  5837                           ;GLCD_PIC.c: 192: glcdTransfer(rawData, 0);
  5838  005CFA  0E00               	movlw	0
  5839  005CFC  0100               	movlb	0	; () banked
  5840  005CFE  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
  5841  005D00  51CA               	movf	glcdSetCOLMOD@rawData& (0+255),w,b
  5842  005D02  EC32  F030         	call	_glcdTransfer
  5843  005D06  0012               	return		;funcret
  5844  005D08                     __end_of_glcdSetCOLMOD:
  5845                           	opt stack 0
  5846                           tblptru	equ	0xFF8
  5847                           tblptrh	equ	0xFF7
  5848                           tblptrl	equ	0xFF6
  5849                           tablat	equ	0xFF5
  5850                           intcon	equ	0xFF2
  5851                           intcon3	equ	0xFF0
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           postdec1	equ	0xFE5
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           fsr2h	equ	0xFDA
  5860                           fsr2l	equ	0xFD9
  5861                           status	equ	0xFD8
  5862                           
  5863 ;; *************** function _generate_compartment_array *****************
  5864 ;; Defined at:
  5865 ;;		line 220 in file "keypad.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;  step            2    0[BANK0 ] int 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;		None
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      void 
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5879 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;Total ram usage:        4 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    4
  5886 ;; This function calls:
  5887 ;;		Nothing
  5888 ;; This function is called by:
  5889 ;;		_main
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           	psect	text6
  5894  004AEC                     __ptext6:
  5895                           	opt stack 0
  5896  004AEC                     _generate_compartment_array:
  5897                           	opt stack 26
  5898                           
  5899                           ;keypad.c: 222: switch(step){
  5900                           
  5901                           ;incstack = 0
  5902  004AEC  D117               	goto	l1064
  5903  004AEE                     
  5904                           ;keypad.c: 224: compartment_array[0] = 1;
  5905  004AEE  0E00               	movlw	0
  5906  004AF0  0100               	movlb	0	; () banked
  5907  004AF2  6F81               	movwf	(_compartment_array+1)& (0+255),b
  5908  004AF4  0E01               	movlw	1
  5909  004AF6  6F80               	movwf	_compartment_array& (0+255),b
  5910                           
  5911                           ;keypad.c: 225: compartment_array[2] = 1;
  5912  004AF8  0E00               	movlw	0
  5913  004AFA  6F85               	movwf	(_compartment_array+5)& (0+255),b
  5914  004AFC  0E01               	movlw	1
  5915  004AFE  6F84               	movwf	(_compartment_array+4)& (0+255),b
  5916                           
  5917                           ;keypad.c: 226: compartment_array[4] = 1;
  5918  004B00  0E00               	movlw	0
  5919  004B02  6F89               	movwf	(_compartment_array+9)& (0+255),b
  5920  004B04  0E01               	movlw	1
  5921  004B06  6F88               	movwf	(_compartment_array+8)& (0+255),b
  5922                           
  5923                           ;keypad.c: 227: compartment_array[6] = 1;
  5924  004B08  0E00               	movlw	0
  5925  004B0A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  5926  004B0C  0E01               	movlw	1
  5927  004B0E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  5928                           
  5929                           ;keypad.c: 230: compartment_number[0] = 0;
  5930  004B10  0E00               	movlw	0
  5931  004B12  6E43               	movwf	_compartment_number+1,c
  5932  004B14  0E00               	movlw	0
  5933  004B16  6E42               	movwf	_compartment_number,c
  5934                           
  5935                           ;keypad.c: 231: compartment_number[1] = 2;
  5936  004B18  0E00               	movlw	0
  5937  004B1A  6E45               	movwf	_compartment_number+3,c
  5938  004B1C  0E02               	movlw	2
  5939  004B1E  6E44               	movwf	_compartment_number+2,c
  5940                           
  5941                           ;keypad.c: 232: compartment_number[2] = 4;
  5942  004B20  0E00               	movlw	0
  5943  004B22  6E47               	movwf	_compartment_number+5,c
  5944  004B24  0E04               	movlw	4
  5945  004B26  6E46               	movwf	_compartment_number+4,c
  5946                           
  5947                           ;keypad.c: 233: compartment_number[3] = 6;
  5948  004B28  0E00               	movlw	0
  5949  004B2A  6E49               	movwf	_compartment_number+7,c
  5950  004B2C  0E06               	movlw	6
  5951  004B2E  6E48               	movwf	_compartment_number+6,c
  5952                           
  5953                           ;keypad.c: 235: break;
  5954  004B30  0012               	return	
  5955  004B32                     
  5956                           ; BSR set to: 0
  5957                           ;keypad.c: 237: compartment_array[0] = 1;
  5958                           
  5959                           ; BSR set to: 0
  5960  004B32  0E00               	movlw	0
  5961  004B34  6F81               	movwf	(_compartment_array+1)& (0+255),b
  5962  004B36  0E01               	movlw	1
  5963  004B38  6F80               	movwf	_compartment_array& (0+255),b
  5964                           
  5965                           ;keypad.c: 238: compartment_array[1] = 1;
  5966  004B3A  0E00               	movlw	0
  5967  004B3C  6F83               	movwf	(_compartment_array+3)& (0+255),b
  5968  004B3E  0E01               	movlw	1
  5969  004B40  6F82               	movwf	(_compartment_array+2)& (0+255),b
  5970                           
  5971                           ;keypad.c: 239: compartment_array[3] = 1;
  5972  004B42  0E00               	movlw	0
  5973  004B44  6F87               	movwf	(_compartment_array+7)& (0+255),b
  5974  004B46  0E01               	movlw	1
  5975  004B48  6F86               	movwf	(_compartment_array+6)& (0+255),b
  5976                           
  5977                           ;keypad.c: 240: compartment_array[4] = 1;
  5978  004B4A  0E00               	movlw	0
  5979  004B4C  6F89               	movwf	(_compartment_array+9)& (0+255),b
  5980  004B4E  0E01               	movlw	1
  5981  004B50  6F88               	movwf	(_compartment_array+8)& (0+255),b
  5982                           
  5983                           ;keypad.c: 241: compartment_array[6] = 1;
  5984  004B52  0E00               	movlw	0
  5985  004B54  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  5986  004B56  0E01               	movlw	1
  5987  004B58  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  5988                           
  5989                           ;keypad.c: 245: compartment_number[0] = 0;
  5990  004B5A  0E00               	movlw	0
  5991  004B5C  6E43               	movwf	_compartment_number+1,c
  5992  004B5E  0E00               	movlw	0
  5993  004B60  6E42               	movwf	_compartment_number,c
  5994                           
  5995                           ;keypad.c: 246: compartment_number[1] = 1;
  5996  004B62  0E00               	movlw	0
  5997  004B64  6E45               	movwf	_compartment_number+3,c
  5998  004B66  0E01               	movlw	1
  5999  004B68  6E44               	movwf	_compartment_number+2,c
  6000                           
  6001                           ;keypad.c: 247: compartment_number[2] = 3;
  6002  004B6A  0E00               	movlw	0
  6003  004B6C  6E47               	movwf	_compartment_number+5,c
  6004  004B6E  0E03               	movlw	3
  6005  004B70  6E46               	movwf	_compartment_number+4,c
  6006                           
  6007                           ;keypad.c: 248: compartment_number[3] = 4;
  6008  004B72  0E00               	movlw	0
  6009  004B74  6E49               	movwf	_compartment_number+7,c
  6010  004B76  0E04               	movlw	4
  6011  004B78  6E48               	movwf	_compartment_number+6,c
  6012                           
  6013                           ;keypad.c: 249: compartment_number[4] = 6;
  6014  004B7A  0E00               	movlw	0
  6015  004B7C  6E4B               	movwf	_compartment_number+9,c
  6016  004B7E  0E06               	movlw	6
  6017  004B80  6E4A               	movwf	_compartment_number+8,c
  6018                           
  6019                           ;keypad.c: 251: break;
  6020  004B82  0012               	return	
  6021  004B84                     
  6022                           ; BSR set to: 0
  6023                           ;keypad.c: 254: compartment_array[0] = 1;
  6024                           
  6025                           ; BSR set to: 0
  6026  004B84  0E00               	movlw	0
  6027  004B86  6F81               	movwf	(_compartment_array+1)& (0+255),b
  6028  004B88  0E01               	movlw	1
  6029  004B8A  6F80               	movwf	_compartment_array& (0+255),b
  6030                           
  6031                           ;keypad.c: 255: compartment_array[1] = 1;
  6032  004B8C  0E00               	movlw	0
  6033  004B8E  6F83               	movwf	(_compartment_array+3)& (0+255),b
  6034  004B90  0E01               	movlw	1
  6035  004B92  6F82               	movwf	(_compartment_array+2)& (0+255),b
  6036                           
  6037                           ;keypad.c: 256: compartment_array[2] = 1;
  6038  004B94  0E00               	movlw	0
  6039  004B96  6F85               	movwf	(_compartment_array+5)& (0+255),b
  6040  004B98  0E01               	movlw	1
  6041  004B9A  6F84               	movwf	(_compartment_array+4)& (0+255),b
  6042                           
  6043                           ;keypad.c: 257: compartment_array[4] = 1;
  6044  004B9C  0E00               	movlw	0
  6045  004B9E  6F89               	movwf	(_compartment_array+9)& (0+255),b
  6046  004BA0  0E01               	movlw	1
  6047  004BA2  6F88               	movwf	(_compartment_array+8)& (0+255),b
  6048                           
  6049                           ;keypad.c: 258: compartment_array[5] = 1;
  6050  004BA4  0E00               	movlw	0
  6051  004BA6  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  6052  004BA8  0E01               	movlw	1
  6053  004BAA  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  6054                           
  6055                           ;keypad.c: 259: compartment_array[6] = 1;
  6056  004BAC  0E00               	movlw	0
  6057  004BAE  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  6058  004BB0  0E01               	movlw	1
  6059  004BB2  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  6060                           
  6061                           ;keypad.c: 262: compartment_number[0] = 0;
  6062  004BB4  0E00               	movlw	0
  6063  004BB6  6E43               	movwf	_compartment_number+1,c
  6064  004BB8  0E00               	movlw	0
  6065  004BBA  6E42               	movwf	_compartment_number,c
  6066                           
  6067                           ;keypad.c: 263: compartment_number[1] = 1;
  6068  004BBC  0E00               	movlw	0
  6069  004BBE  6E45               	movwf	_compartment_number+3,c
  6070  004BC0  0E01               	movlw	1
  6071  004BC2  6E44               	movwf	_compartment_number+2,c
  6072                           
  6073                           ;keypad.c: 264: compartment_number[2] = 2;
  6074  004BC4  0E00               	movlw	0
  6075  004BC6  6E47               	movwf	_compartment_number+5,c
  6076  004BC8  0E02               	movlw	2
  6077  004BCA  6E46               	movwf	_compartment_number+4,c
  6078                           
  6079                           ;keypad.c: 265: compartment_number[3] = 4;
  6080  004BCC  0E00               	movlw	0
  6081  004BCE  6E49               	movwf	_compartment_number+7,c
  6082  004BD0  0E04               	movlw	4
  6083  004BD2  6E48               	movwf	_compartment_number+6,c
  6084                           
  6085                           ;keypad.c: 266: compartment_number[4] = 5;
  6086  004BD4  0E00               	movlw	0
  6087  004BD6  6E4B               	movwf	_compartment_number+9,c
  6088  004BD8  0E05               	movlw	5
  6089  004BDA  6E4A               	movwf	_compartment_number+8,c
  6090                           
  6091                           ;keypad.c: 267: compartment_number[5] = 6;
  6092  004BDC  0E00               	movlw	0
  6093  004BDE  6E4D               	movwf	_compartment_number+11,c
  6094  004BE0  0E06               	movlw	6
  6095  004BE2  6E4C               	movwf	_compartment_number+10,c
  6096                           
  6097                           ;keypad.c: 269: break;
  6098  004BE4  0012               	return	
  6099  004BE6                     
  6100                           ; BSR set to: 0
  6101                           ;keypad.c: 271: compartment_array[0] = 1;
  6102                           
  6103                           ; BSR set to: 0
  6104  004BE6  0E00               	movlw	0
  6105  004BE8  6F81               	movwf	(_compartment_array+1)& (0+255),b
  6106  004BEA  0E01               	movlw	1
  6107  004BEC  6F80               	movwf	_compartment_array& (0+255),b
  6108                           
  6109                           ;keypad.c: 272: compartment_array[1] = 1;
  6110  004BEE  0E00               	movlw	0
  6111  004BF0  6F83               	movwf	(_compartment_array+3)& (0+255),b
  6112  004BF2  0E01               	movlw	1
  6113  004BF4  6F82               	movwf	(_compartment_array+2)& (0+255),b
  6114                           
  6115                           ;keypad.c: 273: compartment_array[2] = 1;
  6116  004BF6  0E00               	movlw	0
  6117  004BF8  6F85               	movwf	(_compartment_array+5)& (0+255),b
  6118  004BFA  0E01               	movlw	1
  6119  004BFC  6F84               	movwf	(_compartment_array+4)& (0+255),b
  6120                           
  6121                           ;keypad.c: 274: compartment_array[3] = 1;
  6122  004BFE  0E00               	movlw	0
  6123  004C00  6F87               	movwf	(_compartment_array+7)& (0+255),b
  6124  004C02  0E01               	movlw	1
  6125  004C04  6F86               	movwf	(_compartment_array+6)& (0+255),b
  6126                           
  6127                           ;keypad.c: 275: compartment_array[4] = 1;
  6128  004C06  0E00               	movlw	0
  6129  004C08  6F89               	movwf	(_compartment_array+9)& (0+255),b
  6130  004C0A  0E01               	movlw	1
  6131  004C0C  6F88               	movwf	(_compartment_array+8)& (0+255),b
  6132                           
  6133                           ;keypad.c: 276: compartment_array[5] = 1;
  6134  004C0E  0E00               	movlw	0
  6135  004C10  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  6136  004C12  0E01               	movlw	1
  6137  004C14  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  6138                           
  6139                           ;keypad.c: 277: compartment_array[6] = 1;
  6140  004C16  0E00               	movlw	0
  6141  004C18  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  6142  004C1A  0E01               	movlw	1
  6143  004C1C  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  6144                           
  6145                           ;keypad.c: 280: compartment_number[0] = 0;
  6146  004C1E  0E00               	movlw	0
  6147  004C20  6E43               	movwf	_compartment_number+1,c
  6148  004C22  0E00               	movlw	0
  6149  004C24  6E42               	movwf	_compartment_number,c
  6150                           
  6151                           ;keypad.c: 281: compartment_number[1] = 1;
  6152  004C26  0E00               	movlw	0
  6153  004C28  6E45               	movwf	_compartment_number+3,c
  6154  004C2A  0E01               	movlw	1
  6155  004C2C  6E44               	movwf	_compartment_number+2,c
  6156                           
  6157                           ;keypad.c: 282: compartment_number[2] = 2;
  6158  004C2E  0E00               	movlw	0
  6159  004C30  6E47               	movwf	_compartment_number+5,c
  6160  004C32  0E02               	movlw	2
  6161  004C34  6E46               	movwf	_compartment_number+4,c
  6162                           
  6163                           ;keypad.c: 283: compartment_number[3] = 3;
  6164  004C36  0E00               	movlw	0
  6165  004C38  6E49               	movwf	_compartment_number+7,c
  6166  004C3A  0E03               	movlw	3
  6167  004C3C  6E48               	movwf	_compartment_number+6,c
  6168                           
  6169                           ;keypad.c: 284: compartment_number[4] = 4;
  6170  004C3E  0E00               	movlw	0
  6171  004C40  6E4B               	movwf	_compartment_number+9,c
  6172  004C42  0E04               	movlw	4
  6173  004C44  6E4A               	movwf	_compartment_number+8,c
  6174                           
  6175                           ;keypad.c: 285: compartment_number[5] = 5;
  6176  004C46  0E00               	movlw	0
  6177  004C48  6E4D               	movwf	_compartment_number+11,c
  6178  004C4A  0E05               	movlw	5
  6179  004C4C  6E4C               	movwf	_compartment_number+10,c
  6180                           
  6181                           ;keypad.c: 286: compartment_number[6] = 6;
  6182  004C4E  0E00               	movlw	0
  6183  004C50  6E4F               	movwf	_compartment_number+13,c
  6184  004C52  0E06               	movlw	6
  6185  004C54  6E4E               	movwf	_compartment_number+12,c
  6186                           
  6187                           ;keypad.c: 288: break;
  6188  004C56  0012               	return	
  6189  004C58                     
  6190                           ; BSR set to: 0
  6191                           ;keypad.c: 290: compartment_array[0] = 1;
  6192                           
  6193                           ; BSR set to: 0
  6194  004C58  0E00               	movlw	0
  6195  004C5A  6F81               	movwf	(_compartment_array+1)& (0+255),b
  6196  004C5C  0E01               	movlw	1
  6197  004C5E  6F80               	movwf	_compartment_array& (0+255),b
  6198                           
  6199                           ;keypad.c: 291: compartment_array[1] = 1;
  6200  004C60  0E00               	movlw	0
  6201  004C62  6F83               	movwf	(_compartment_array+3)& (0+255),b
  6202  004C64  0E01               	movlw	1
  6203  004C66  6F82               	movwf	(_compartment_array+2)& (0+255),b
  6204                           
  6205                           ;keypad.c: 292: compartment_array[2] = 1;
  6206  004C68  0E00               	movlw	0
  6207  004C6A  6F85               	movwf	(_compartment_array+5)& (0+255),b
  6208  004C6C  0E01               	movlw	1
  6209  004C6E  6F84               	movwf	(_compartment_array+4)& (0+255),b
  6210                           
  6211                           ;keypad.c: 293: compartment_array[3] = 1;
  6212  004C70  0E00               	movlw	0
  6213  004C72  6F87               	movwf	(_compartment_array+7)& (0+255),b
  6214  004C74  0E01               	movlw	1
  6215  004C76  6F86               	movwf	(_compartment_array+6)& (0+255),b
  6216                           
  6217                           ;keypad.c: 294: compartment_array[4] = 1;
  6218  004C78  0E00               	movlw	0
  6219  004C7A  6F89               	movwf	(_compartment_array+9)& (0+255),b
  6220  004C7C  0E01               	movlw	1
  6221  004C7E  6F88               	movwf	(_compartment_array+8)& (0+255),b
  6222                           
  6223                           ;keypad.c: 295: compartment_array[5] = 1;
  6224  004C80  0E00               	movlw	0
  6225  004C82  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  6226  004C84  0E01               	movlw	1
  6227  004C86  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  6228                           
  6229                           ;keypad.c: 296: compartment_array[6] = 1;
  6230  004C88  0E00               	movlw	0
  6231  004C8A  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  6232  004C8C  0E01               	movlw	1
  6233  004C8E  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  6234                           
  6235                           ;keypad.c: 297: compartment_array[7] = 1;
  6236  004C90  0E00               	movlw	0
  6237  004C92  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  6238  004C94  0E01               	movlw	1
  6239  004C96  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  6240                           
  6241                           ;keypad.c: 300: compartment_number[0] = 0;
  6242  004C98  0E00               	movlw	0
  6243  004C9A  6E43               	movwf	_compartment_number+1,c
  6244  004C9C  0E00               	movlw	0
  6245  004C9E  6E42               	movwf	_compartment_number,c
  6246                           
  6247                           ;keypad.c: 301: compartment_number[1] = 1;
  6248  004CA0  0E00               	movlw	0
  6249  004CA2  6E45               	movwf	_compartment_number+3,c
  6250  004CA4  0E01               	movlw	1
  6251  004CA6  6E44               	movwf	_compartment_number+2,c
  6252                           
  6253                           ;keypad.c: 302: compartment_number[2] = 2;
  6254  004CA8  0E00               	movlw	0
  6255  004CAA  6E47               	movwf	_compartment_number+5,c
  6256  004CAC  0E02               	movlw	2
  6257  004CAE  6E46               	movwf	_compartment_number+4,c
  6258                           
  6259                           ;keypad.c: 303: compartment_number[3] = 3;
  6260  004CB0  0E00               	movlw	0
  6261  004CB2  6E49               	movwf	_compartment_number+7,c
  6262  004CB4  0E03               	movlw	3
  6263  004CB6  6E48               	movwf	_compartment_number+6,c
  6264                           
  6265                           ;keypad.c: 304: compartment_number[4] = 4;
  6266  004CB8  0E00               	movlw	0
  6267  004CBA  6E4B               	movwf	_compartment_number+9,c
  6268  004CBC  0E04               	movlw	4
  6269  004CBE  6E4A               	movwf	_compartment_number+8,c
  6270                           
  6271                           ;keypad.c: 305: compartment_number[5] = 5;
  6272  004CC0  0E00               	movlw	0
  6273  004CC2  6E4D               	movwf	_compartment_number+11,c
  6274  004CC4  0E05               	movlw	5
  6275  004CC6  6E4C               	movwf	_compartment_number+10,c
  6276                           
  6277                           ;keypad.c: 306: compartment_number[6] = 6;
  6278  004CC8  0E00               	movlw	0
  6279  004CCA  6E4F               	movwf	_compartment_number+13,c
  6280  004CCC  0E06               	movlw	6
  6281  004CCE  6E4E               	movwf	_compartment_number+12,c
  6282                           
  6283                           ;keypad.c: 307: compartment_number[7] = 7;
  6284  004CD0  0E00               	movlw	0
  6285  004CD2  6E51               	movwf	_compartment_number+15,c
  6286  004CD4  0E07               	movlw	7
  6287  004CD6  6E50               	movwf	_compartment_number+14,c
  6288                           
  6289                           ;keypad.c: 309: break;
  6290  004CD8  0012               	return	
  6291  004CDA                     
  6292                           ; BSR set to: 0
  6293                           ;keypad.c: 311: compartment_array[0] = 0;
  6294                           
  6295                           ; BSR set to: 0
  6296  004CDA  0E00               	movlw	0
  6297  004CDC  6F81               	movwf	(_compartment_array+1)& (0+255),b
  6298  004CDE  0E00               	movlw	0
  6299  004CE0  6F80               	movwf	_compartment_array& (0+255),b
  6300                           
  6301                           ;keypad.c: 312: compartment_array[1] = 0;
  6302  004CE2  0E00               	movlw	0
  6303  004CE4  6F83               	movwf	(_compartment_array+3)& (0+255),b
  6304  004CE6  0E00               	movlw	0
  6305  004CE8  6F82               	movwf	(_compartment_array+2)& (0+255),b
  6306                           
  6307                           ;keypad.c: 313: compartment_array[2] = 0;
  6308  004CEA  0E00               	movlw	0
  6309  004CEC  6F85               	movwf	(_compartment_array+5)& (0+255),b
  6310  004CEE  0E00               	movlw	0
  6311  004CF0  6F84               	movwf	(_compartment_array+4)& (0+255),b
  6312                           
  6313                           ;keypad.c: 314: compartment_array[3] = 0;
  6314  004CF2  0E00               	movlw	0
  6315  004CF4  6F87               	movwf	(_compartment_array+7)& (0+255),b
  6316  004CF6  0E00               	movlw	0
  6317  004CF8  6F86               	movwf	(_compartment_array+6)& (0+255),b
  6318                           
  6319                           ;keypad.c: 315: compartment_array[4] = 0;
  6320  004CFA  0E00               	movlw	0
  6321  004CFC  6F89               	movwf	(_compartment_array+9)& (0+255),b
  6322  004CFE  0E00               	movlw	0
  6323  004D00  6F88               	movwf	(_compartment_array+8)& (0+255),b
  6324                           
  6325                           ;keypad.c: 316: compartment_array[5] = 0;
  6326  004D02  0E00               	movlw	0
  6327  004D04  6F8B               	movwf	(_compartment_array+11)& (0+255),b
  6328  004D06  0E00               	movlw	0
  6329  004D08  6F8A               	movwf	(_compartment_array+10)& (0+255),b
  6330                           
  6331                           ;keypad.c: 317: compartment_array[6] = 0;
  6332  004D0A  0E00               	movlw	0
  6333  004D0C  6F8D               	movwf	(_compartment_array+13)& (0+255),b
  6334  004D0E  0E00               	movlw	0
  6335  004D10  6F8C               	movwf	(_compartment_array+12)& (0+255),b
  6336                           
  6337                           ;keypad.c: 318: compartment_array[7] = 0;
  6338  004D12  0E00               	movlw	0
  6339  004D14  6F8F               	movwf	(_compartment_array+15)& (0+255),b
  6340  004D16  0E00               	movlw	0
  6341  004D18  6F8E               	movwf	(_compartment_array+14)& (0+255),b
  6342                           
  6343                           ;keypad.c: 320: }
  6344  004D1A  0012               	return	
  6345  004D1C                     l1064:
  6346                           
  6347                           ; BSR set to: 0
  6348  004D1C  C0C3  F0C5         	movff	generate_compartment_array@step,??_generate_compartment_array
  6349  004D20  C0C4  F0C6         	movff	generate_compartment_array@step+1,??_generate_compartment_array+1
  6350                           
  6351                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6352                           ; Switch size 1, requested type "space"
  6353                           ; Number of cases is 1, Range of values is 0 to 0
  6354                           ; switch strategies available:
  6355                           ; Name         Instructions Cycles
  6356                           ; simple_byte            4     3 (average)
  6357                           ;	Chosen strategy is simple_byte
  6358  004D24  0100               	movlb	0	; () banked
  6359  004D26  51C6               	movf	(??_generate_compartment_array+1)& (0+255),w,b
  6360  004D28  0A00               	xorlw	0	; case 0
  6361  004D2A  A4D8               	btfss	status,2,c
  6362  004D2C  D7D6               	goto	l1071
  6363                           
  6364                           ; BSR set to: 0
  6365                           ; Switch size 1, requested type "space"
  6366                           ; Number of cases is 5, Range of values is 4 to 8
  6367                           ; switch strategies available:
  6368                           ; Name         Instructions Cycles
  6369                           ; simple_byte           16     9 (average)
  6370                           ;	Chosen strategy is simple_byte
  6371  004D2E  51C5               	movf	??_generate_compartment_array& (0+255),w,b
  6372  004D30  0A04               	xorlw	4	; case 4
  6373  004D32  B4D8               	btfsc	status,2,c
  6374  004D34  D6DC               	goto	l1065
  6375  004D36  0A01               	xorlw	1	; case 5
  6376  004D38  B4D8               	btfsc	status,2,c
  6377  004D3A  D6FB               	goto	l1067
  6378  004D3C  0A03               	xorlw	3	; case 6
  6379  004D3E  B4D8               	btfsc	status,2,c
  6380  004D40  D721               	goto	l1068
  6381  004D42  0A01               	xorlw	1	; case 7
  6382  004D44  B4D8               	btfsc	status,2,c
  6383  004D46  D74F               	goto	l1069
  6384  004D48  0A0F               	xorlw	15	; case 8
  6385  004D4A  B4D8               	btfsc	status,2,c
  6386  004D4C  D785               	goto	l1070
  6387  004D4E  D7C5               	goto	l1071
  6388  004D50                     __end_of_generate_compartment_array:
  6389                           	opt stack 0
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           intcon	equ	0xFF2
  6395                           intcon3	equ	0xFF0
  6396                           postinc0	equ	0xFEE
  6397                           wreg	equ	0xFE8
  6398                           postdec1	equ	0xFE5
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function _drawTeamName *****************
  6408 ;; Defined at:
  6409 ;;		line 1595 in file "main.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  1    wreg      void 
  6416 ;; Registers used:
  6417 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;Total ram usage:        1 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    8
  6430 ;; This function calls:
  6431 ;;		_I2C_Master_Init
  6432 ;;		_glcdDrawRectangle
  6433 ;;		_spiInit
  6434 ;; This function is called by:
  6435 ;;		_main
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           	psect	text7
  6440  003E6C                     __ptext7:
  6441                           	opt stack 0
  6442  003E6C                     _drawTeamName:
  6443                           	opt stack 22
  6444                           
  6445                           ;main.c: 1596: spiInit(4);
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;incstack = 0
  6449  003E6C  0E04               	movlw	4
  6450  003E6E  ECFD  F02F         	call	_spiInit
  6451                           
  6452                           ;main.c: 1597: _delay((unsigned long)((20)*(32000000/4000.0)));
  6453  003E72  0ED0               	movlw	208
  6454  003E74  0100               	movlb	0	; () banked
  6455  003E76  6FE4               	movwf	??_drawTeamName& (0+255),b
  6456  003E78  0EC9               	movlw	201
  6457  003E7A                     u7007:
  6458  003E7A  2EE8               	decfsz	wreg,f,c
  6459  003E7C  D7FE               	bra	u7007
  6460  003E7E  2FE4               	decfsz	??_drawTeamName& (0+255),f,b
  6461  003E80  D7FC               	bra	u7007
  6462  003E82  D000               	nop2	
  6463                           
  6464                           ;main.c: 1598: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  6465  003E84  0EE9               	movlw	low _GLCD_SIZE_HORZ
  6466  003E86  6EF6               	movwf	tblptrl,c
  6467  003E88                     	if	1	;There is more than 1 active tblptr byte
  6468  003E88  0EFC               	movlw	high _GLCD_SIZE_HORZ
  6469  003E8A  6EF7               	movwf	tblptrh,c
  6470  003E8C                     	endif
  6471  003E8C                     	if	1	;There are 3 active tblptr bytes
  6472  003E8C  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
  6473  003E8E  6EF8               	movwf	tblptru,c
  6474  003E90                     	endif
  6475  003E90  0008               	tblrd		*
  6476  003E92  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
  6477  003E96  0E00               	movlw	0
  6478  003E98  0100               	movlb	0	; () banked
  6479  003E9A  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6480  003E9C  0EE8               	movlw	low _GLCD_SIZE_VERT
  6481  003E9E  6EF6               	movwf	tblptrl,c
  6482  003EA0                     	if	1	;There is more than 1 active tblptr byte
  6483  003EA0  0EFC               	movlw	high _GLCD_SIZE_VERT
  6484  003EA2  6EF7               	movwf	tblptrh,c
  6485  003EA4                     	endif
  6486  003EA4                     	if	1	;There are 3 active tblptr bytes
  6487  003EA4  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
  6488  003EA6  6EF8               	movwf	tblptru,c
  6489  003EA8                     	endif
  6490  003EA8  0008               	tblrd		*
  6491  003EAA  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
  6492  003EAE  0EA1               	movlw	low _BLACK
  6493  003EB0  6EF6               	movwf	tblptrl,c
  6494  003EB2                     	if	1	;There is more than 1 active tblptr byte
  6495  003EB2  0EFC               	movlw	high _BLACK
  6496  003EB4  6EF7               	movwf	tblptrh,c
  6497  003EB6                     	endif
  6498  003EB6                     	if	1	;There are 3 active tblptr bytes
  6499  003EB6  0E00               	movlw	low (_BLACK shr (0+16))
  6500  003EB8  6EF8               	movwf	tblptru,c
  6501  003EBA                     	endif
  6502  003EBA  0009               	tblrd		*+
  6503  003EBC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6504  003EC0  0009               	tblrd		*+
  6505  003EC2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6506  003EC6  0009               	tblrd		*+
  6507  003EC8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6508  003ECC  000A               	tblrd		*-
  6509  003ECE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6510  003ED2  0E00               	movlw	0
  6511  003ED4  ECA8  F026         	call	_glcdDrawRectangle
  6512                           
  6513                           ;main.c: 1600: glcdDrawRectangle(5*4, 11*4, 9*4, 11*4, WHITE);
  6514  003ED8  0E2C               	movlw	44
  6515  003EDA  0100               	movlb	0	; () banked
  6516  003EDC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6517  003EDE  0E24               	movlw	36
  6518  003EE0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6519  003EE2  0E2C               	movlw	44
  6520  003EE4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6521  003EE6  0E99               	movlw	low _WHITE
  6522  003EE8  6EF6               	movwf	tblptrl,c
  6523  003EEA                     	if	1	;There is more than 1 active tblptr byte
  6524  003EEA  0EFC               	movlw	high _WHITE
  6525  003EEC  6EF7               	movwf	tblptrh,c
  6526  003EEE                     	endif
  6527  003EEE                     	if	1	;There are 3 active tblptr bytes
  6528  003EEE  0E00               	movlw	low (_WHITE shr (0+16))
  6529  003EF0  6EF8               	movwf	tblptru,c
  6530  003EF2                     	endif
  6531  003EF2  0009               	tblrd		*+
  6532  003EF4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6533  003EF8  0009               	tblrd		*+
  6534  003EFA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6535  003EFE  0009               	tblrd		*+
  6536  003F00  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6537  003F04  000A               	tblrd		*-
  6538  003F06  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6539  003F0A  0E14               	movlw	20
  6540  003F0C  ECA8  F026         	call	_glcdDrawRectangle
  6541                           
  6542                           ;main.c: 1601: glcdDrawRectangle(8*4, 9*4, 11*4, 16*4, WHITE);
  6543  003F10  0E24               	movlw	36
  6544  003F12  0100               	movlb	0	; () banked
  6545  003F14  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6546  003F16  0E2C               	movlw	44
  6547  003F18  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6548  003F1A  0E40               	movlw	64
  6549  003F1C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6550  003F1E  0E99               	movlw	low _WHITE
  6551  003F20  6EF6               	movwf	tblptrl,c
  6552  003F22                     	if	1	;There is more than 1 active tblptr byte
  6553  003F22  0EFC               	movlw	high _WHITE
  6554  003F24  6EF7               	movwf	tblptrh,c
  6555  003F26                     	endif
  6556  003F26                     	if	1	;There are 3 active tblptr bytes
  6557  003F26  0E00               	movlw	low (_WHITE shr (0+16))
  6558  003F28  6EF8               	movwf	tblptru,c
  6559  003F2A                     	endif
  6560  003F2A  0009               	tblrd		*+
  6561  003F2C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6562  003F30  0009               	tblrd		*+
  6563  003F32  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6564  003F36  0009               	tblrd		*+
  6565  003F38  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6566  003F3C  000A               	tblrd		*-
  6567  003F3E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6568  003F42  0E20               	movlw	32
  6569  003F44  ECA8  F026         	call	_glcdDrawRectangle
  6570                           
  6571                           ;main.c: 1603: glcdDrawRectangle(12*4, 17*4, 9*4, 11*4, WHITE);
  6572  003F48  0E44               	movlw	68
  6573  003F4A  0100               	movlb	0	; () banked
  6574  003F4C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6575  003F4E  0E24               	movlw	36
  6576  003F50  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6577  003F52  0E2C               	movlw	44
  6578  003F54  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6579  003F56  0E99               	movlw	low _WHITE
  6580  003F58  6EF6               	movwf	tblptrl,c
  6581  003F5A                     	if	1	;There is more than 1 active tblptr byte
  6582  003F5A  0EFC               	movlw	high _WHITE
  6583  003F5C  6EF7               	movwf	tblptrh,c
  6584  003F5E                     	endif
  6585  003F5E                     	if	1	;There are 3 active tblptr bytes
  6586  003F5E  0E00               	movlw	low (_WHITE shr (0+16))
  6587  003F60  6EF8               	movwf	tblptru,c
  6588  003F62                     	endif
  6589  003F62  0009               	tblrd		*+
  6590  003F64  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6591  003F68  0009               	tblrd		*+
  6592  003F6A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6593  003F6E  0009               	tblrd		*+
  6594  003F70  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6595  003F74  000A               	tblrd		*-
  6596  003F76  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6597  003F7A  0E30               	movlw	48
  6598  003F7C  ECA8  F026         	call	_glcdDrawRectangle
  6599                           
  6600                           ;main.c: 1604: glcdDrawRectangle(16*4, 17*4, 11*4, 16*4, WHITE);
  6601  003F80  0E44               	movlw	68
  6602  003F82  0100               	movlb	0	; () banked
  6603  003F84  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6604  003F86  0E2C               	movlw	44
  6605  003F88  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6606  003F8A  0E40               	movlw	64
  6607  003F8C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6608  003F8E  0E99               	movlw	low _WHITE
  6609  003F90  6EF6               	movwf	tblptrl,c
  6610  003F92                     	if	1	;There is more than 1 active tblptr byte
  6611  003F92  0EFC               	movlw	high _WHITE
  6612  003F94  6EF7               	movwf	tblptrh,c
  6613  003F96                     	endif
  6614  003F96                     	if	1	;There are 3 active tblptr bytes
  6615  003F96  0E00               	movlw	low (_WHITE shr (0+16))
  6616  003F98  6EF8               	movwf	tblptru,c
  6617  003F9A                     	endif
  6618  003F9A  0009               	tblrd		*+
  6619  003F9C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6620  003FA0  0009               	tblrd		*+
  6621  003FA2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6622  003FA6  0009               	tblrd		*+
  6623  003FA8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6624  003FAC  000A               	tblrd		*-
  6625  003FAE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6626  003FB2  0E40               	movlw	64
  6627  003FB4  ECA8  F026         	call	_glcdDrawRectangle
  6628                           
  6629                           ;main.c: 1605: glcdDrawRectangle(12*4, 16*4, 12*4, 13*4, WHITE);
  6630  003FB8  0E40               	movlw	64
  6631  003FBA  0100               	movlb	0	; () banked
  6632  003FBC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6633  003FBE  0E30               	movlw	48
  6634  003FC0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6635  003FC2  0E34               	movlw	52
  6636  003FC4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6637  003FC6  0E99               	movlw	low _WHITE
  6638  003FC8  6EF6               	movwf	tblptrl,c
  6639  003FCA                     	if	1	;There is more than 1 active tblptr byte
  6640  003FCA  0EFC               	movlw	high _WHITE
  6641  003FCC  6EF7               	movwf	tblptrh,c
  6642  003FCE                     	endif
  6643  003FCE                     	if	1	;There are 3 active tblptr bytes
  6644  003FCE  0E00               	movlw	low (_WHITE shr (0+16))
  6645  003FD0  6EF8               	movwf	tblptru,c
  6646  003FD2                     	endif
  6647  003FD2  0009               	tblrd		*+
  6648  003FD4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6649  003FD8  0009               	tblrd		*+
  6650  003FDA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6651  003FDE  0009               	tblrd		*+
  6652  003FE0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6653  003FE4  000A               	tblrd		*-
  6654  003FE6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6655  003FEA  0E30               	movlw	48
  6656  003FEC  ECA8  F026         	call	_glcdDrawRectangle
  6657                           
  6658                           ;main.c: 1606: glcdDrawRectangle(12*4, 16*4, 14*4, 16*4, WHITE);
  6659  003FF0  0E40               	movlw	64
  6660  003FF2  0100               	movlb	0	; () banked
  6661  003FF4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6662  003FF6  0E38               	movlw	56
  6663  003FF8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6664  003FFA  0E40               	movlw	64
  6665  003FFC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6666  003FFE  0E99               	movlw	low _WHITE
  6667  004000  6EF6               	movwf	tblptrl,c
  6668  004002                     	if	1	;There is more than 1 active tblptr byte
  6669  004002  0EFC               	movlw	high _WHITE
  6670  004004  6EF7               	movwf	tblptrh,c
  6671  004006                     	endif
  6672  004006                     	if	1	;There are 3 active tblptr bytes
  6673  004006  0E00               	movlw	low (_WHITE shr (0+16))
  6674  004008  6EF8               	movwf	tblptru,c
  6675  00400A                     	endif
  6676  00400A  0009               	tblrd		*+
  6677  00400C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6678  004010  0009               	tblrd		*+
  6679  004012  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6680  004016  0009               	tblrd		*+
  6681  004018  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6682  00401C  000A               	tblrd		*-
  6683  00401E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6684  004022  0E30               	movlw	48
  6685  004024  ECA8  F026         	call	_glcdDrawRectangle
  6686                           
  6687                           ;main.c: 1608: glcdDrawRectangle(18*4, 19*4, 9*4, 14*4, WHITE);
  6688  004028  0E4C               	movlw	76
  6689  00402A  0100               	movlb	0	; () banked
  6690  00402C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6691  00402E  0E24               	movlw	36
  6692  004030  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6693  004032  0E38               	movlw	56
  6694  004034  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6695  004036  0E99               	movlw	low _WHITE
  6696  004038  6EF6               	movwf	tblptrl,c
  6697  00403A                     	if	1	;There is more than 1 active tblptr byte
  6698  00403A  0EFC               	movlw	high _WHITE
  6699  00403C  6EF7               	movwf	tblptrh,c
  6700  00403E                     	endif
  6701  00403E                     	if	1	;There are 3 active tblptr bytes
  6702  00403E  0E00               	movlw	low (_WHITE shr (0+16))
  6703  004040  6EF8               	movwf	tblptru,c
  6704  004042                     	endif
  6705  004042  0009               	tblrd		*+
  6706  004044  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6707  004048  0009               	tblrd		*+
  6708  00404A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6709  00404E  0009               	tblrd		*+
  6710  004050  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6711  004054  000A               	tblrd		*-
  6712  004056  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6713  00405A  0E48               	movlw	72
  6714  00405C  ECA8  F026         	call	_glcdDrawRectangle
  6715                           
  6716                           ;main.c: 1609: glcdDrawRectangle(19*4, 23*4, 12*4, 14*4, WHITE);
  6717  004060  0E5C               	movlw	92
  6718  004062  0100               	movlb	0	; () banked
  6719  004064  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6720  004066  0E30               	movlw	48
  6721  004068  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6722  00406A  0E38               	movlw	56
  6723  00406C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6724  00406E  0E99               	movlw	low _WHITE
  6725  004070  6EF6               	movwf	tblptrl,c
  6726  004072                     	if	1	;There is more than 1 active tblptr byte
  6727  004072  0EFC               	movlw	high _WHITE
  6728  004074  6EF7               	movwf	tblptrh,c
  6729  004076                     	endif
  6730  004076                     	if	1	;There are 3 active tblptr bytes
  6731  004076  0E00               	movlw	low (_WHITE shr (0+16))
  6732  004078  6EF8               	movwf	tblptru,c
  6733  00407A                     	endif
  6734  00407A  0009               	tblrd		*+
  6735  00407C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6736  004080  0009               	tblrd		*+
  6737  004082  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6738  004086  0009               	tblrd		*+
  6739  004088  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6740  00408C  000A               	tblrd		*-
  6741  00408E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6742  004092  0E4C               	movlw	76
  6743  004094  ECA8  F026         	call	_glcdDrawRectangle
  6744                           
  6745                           ;main.c: 1610: glcdDrawRectangle(21*4, 22*4, 9*4, 16*4, WHITE);
  6746  004098  0E58               	movlw	88
  6747  00409A  0100               	movlb	0	; () banked
  6748  00409C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6749  00409E  0E24               	movlw	36
  6750  0040A0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6751  0040A2  0E40               	movlw	64
  6752  0040A4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6753  0040A6  0E99               	movlw	low _WHITE
  6754  0040A8  6EF6               	movwf	tblptrl,c
  6755  0040AA                     	if	1	;There is more than 1 active tblptr byte
  6756  0040AA  0EFC               	movlw	high _WHITE
  6757  0040AC  6EF7               	movwf	tblptrh,c
  6758  0040AE                     	endif
  6759  0040AE                     	if	1	;There are 3 active tblptr bytes
  6760  0040AE  0E00               	movlw	low (_WHITE shr (0+16))
  6761  0040B0  6EF8               	movwf	tblptru,c
  6762  0040B2                     	endif
  6763  0040B2  0009               	tblrd		*+
  6764  0040B4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6765  0040B8  0009               	tblrd		*+
  6766  0040BA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6767  0040BE  0009               	tblrd		*+
  6768  0040C0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6769  0040C4  000A               	tblrd		*-
  6770  0040C6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6771  0040CA  0E54               	movlw	84
  6772  0040CC  ECA8  F026         	call	_glcdDrawRectangle
  6773                           
  6774                           ;main.c: 1613: glcdDrawRectangle(24*4, 25*4, 10*4, 13*4, RED);
  6775  0040D0  0E64               	movlw	100
  6776  0040D2  0100               	movlb	0	; () banked
  6777  0040D4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6778  0040D6  0E28               	movlw	40
  6779  0040D8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6780  0040DA  0E34               	movlw	52
  6781  0040DC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6782  0040DE  0E95               	movlw	low _RED
  6783  0040E0  6EF6               	movwf	tblptrl,c
  6784  0040E2                     	if	1	;There is more than 1 active tblptr byte
  6785  0040E2  0EFC               	movlw	high _RED
  6786  0040E4  6EF7               	movwf	tblptrh,c
  6787  0040E6                     	endif
  6788  0040E6                     	if	1	;There are 3 active tblptr bytes
  6789  0040E6  0E00               	movlw	low (_RED shr (0+16))
  6790  0040E8  6EF8               	movwf	tblptru,c
  6791  0040EA                     	endif
  6792  0040EA  0009               	tblrd		*+
  6793  0040EC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6794  0040F0  0009               	tblrd		*+
  6795  0040F2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6796  0040F6  0009               	tblrd		*+
  6797  0040F8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6798  0040FC  000A               	tblrd		*-
  6799  0040FE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6800  004102  0E60               	movlw	96
  6801  004104  ECA8  F026         	call	_glcdDrawRectangle
  6802                           
  6803                           ;main.c: 1614: glcdDrawRectangle(25*4, 27*4, 9*4, 14*4, RED);
  6804  004108  0E6C               	movlw	108
  6805  00410A  0100               	movlb	0	; () banked
  6806  00410C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6807  00410E  0E24               	movlw	36
  6808  004110  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6809  004112  0E38               	movlw	56
  6810  004114  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6811  004116  0E95               	movlw	low _RED
  6812  004118  6EF6               	movwf	tblptrl,c
  6813  00411A                     	if	1	;There is more than 1 active tblptr byte
  6814  00411A  0EFC               	movlw	high _RED
  6815  00411C  6EF7               	movwf	tblptrh,c
  6816  00411E                     	endif
  6817  00411E                     	if	1	;There are 3 active tblptr bytes
  6818  00411E  0E00               	movlw	low (_RED shr (0+16))
  6819  004120  6EF8               	movwf	tblptru,c
  6820  004122                     	endif
  6821  004122  0009               	tblrd		*+
  6822  004124  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6823  004128  0009               	tblrd		*+
  6824  00412A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6825  00412E  0009               	tblrd		*+
  6826  004130  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6827  004134  000A               	tblrd		*-
  6828  004136  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6829  00413A  0E64               	movlw	100
  6830  00413C  ECA8  F026         	call	_glcdDrawRectangle
  6831                           
  6832                           ;main.c: 1615: glcdDrawRectangle(27*4, 28*4, 10*4, 15*4, RED);
  6833  004140  0E70               	movlw	112
  6834  004142  0100               	movlb	0	; () banked
  6835  004144  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6836  004146  0E28               	movlw	40
  6837  004148  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6838  00414A  0E3C               	movlw	60
  6839  00414C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6840  00414E  0E95               	movlw	low _RED
  6841  004150  6EF6               	movwf	tblptrl,c
  6842  004152                     	if	1	;There is more than 1 active tblptr byte
  6843  004152  0EFC               	movlw	high _RED
  6844  004154  6EF7               	movwf	tblptrh,c
  6845  004156                     	endif
  6846  004156                     	if	1	;There are 3 active tblptr bytes
  6847  004156  0E00               	movlw	low (_RED shr (0+16))
  6848  004158  6EF8               	movwf	tblptru,c
  6849  00415A                     	endif
  6850  00415A  0009               	tblrd		*+
  6851  00415C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6852  004160  0009               	tblrd		*+
  6853  004162  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6854  004166  0009               	tblrd		*+
  6855  004168  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6856  00416C  000A               	tblrd		*-
  6857  00416E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6858  004172  0E6C               	movlw	108
  6859  004174  ECA8  F026         	call	_glcdDrawRectangle
  6860                           
  6861                           ;main.c: 1617: glcdDrawRectangle(28*4, 30*4, 9*4, 14*4, RED);
  6862  004178  0E78               	movlw	120
  6863  00417A  0100               	movlb	0	; () banked
  6864  00417C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6865  00417E  0E24               	movlw	36
  6866  004180  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6867  004182  0E38               	movlw	56
  6868  004184  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6869  004186  0E95               	movlw	low _RED
  6870  004188  6EF6               	movwf	tblptrl,c
  6871  00418A                     	if	1	;There is more than 1 active tblptr byte
  6872  00418A  0EFC               	movlw	high _RED
  6873  00418C  6EF7               	movwf	tblptrh,c
  6874  00418E                     	endif
  6875  00418E                     	if	1	;There are 3 active tblptr bytes
  6876  00418E  0E00               	movlw	low (_RED shr (0+16))
  6877  004190  6EF8               	movwf	tblptru,c
  6878  004192                     	endif
  6879  004192  0009               	tblrd		*+
  6880  004194  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6881  004198  0009               	tblrd		*+
  6882  00419A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6883  00419E  0009               	tblrd		*+
  6884  0041A0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6885  0041A4  000A               	tblrd		*-
  6886  0041A6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6887  0041AA  0E70               	movlw	112
  6888  0041AC  ECA8  F026         	call	_glcdDrawRectangle
  6889                           
  6890                           ;main.c: 1618: glcdDrawRectangle(30*4, 31*4, 10*4, 13*4, RED);
  6891  0041B0  0E7C               	movlw	124
  6892  0041B2  0100               	movlb	0	; () banked
  6893  0041B4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  6894  0041B6  0E28               	movlw	40
  6895  0041B8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  6896  0041BA  0E34               	movlw	52
  6897  0041BC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  6898  0041BE  0E95               	movlw	low _RED
  6899  0041C0  6EF6               	movwf	tblptrl,c
  6900  0041C2                     	if	1	;There is more than 1 active tblptr byte
  6901  0041C2  0EFC               	movlw	high _RED
  6902  0041C4  6EF7               	movwf	tblptrh,c
  6903  0041C6                     	endif
  6904  0041C6                     	if	1	;There are 3 active tblptr bytes
  6905  0041C6  0E00               	movlw	low (_RED shr (0+16))
  6906  0041C8  6EF8               	movwf	tblptru,c
  6907  0041CA                     	endif
  6908  0041CA  0009               	tblrd		*+
  6909  0041CC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  6910  0041D0  0009               	tblrd		*+
  6911  0041D2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  6912  0041D6  0009               	tblrd		*+
  6913  0041D8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  6914  0041DC  000A               	tblrd		*-
  6915  0041DE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  6916  0041E2  0E78               	movlw	120
  6917  0041E4  ECA8  F026         	call	_glcdDrawRectangle
  6918                           
  6919                           ;main.c: 1619: I2C_Master_Init(100000);
  6920  0041E8  0EA0               	movlw	160
  6921  0041EA  0100               	movlb	0	; () banked
  6922  0041EC  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  6923  0041EE  0E86               	movlw	134
  6924  0041F0  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  6925  0041F2  0E01               	movlw	1
  6926  0041F4  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  6927  0041F6  0E00               	movlw	0
  6928  0041F8  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  6929  0041FA  EC26  F02E         	call	_I2C_Master_Init	;wreg free
  6930  0041FE  0012               	return		;funcret
  6931  004200                     __end_of_drawTeamName:
  6932                           	opt stack 0
  6933                           tblptru	equ	0xFF8
  6934                           tblptrh	equ	0xFF7
  6935                           tblptrl	equ	0xFF6
  6936                           tablat	equ	0xFF5
  6937                           intcon	equ	0xFF2
  6938                           intcon3	equ	0xFF0
  6939                           postinc0	equ	0xFEE
  6940                           wreg	equ	0xFE8
  6941                           postdec1	equ	0xFE5
  6942                           fsr1l	equ	0xFE1
  6943                           indf2	equ	0xFDF
  6944                           postinc2	equ	0xFDE
  6945                           postdec2	equ	0xFDD
  6946                           fsr2h	equ	0xFDA
  6947                           fsr2l	equ	0xFD9
  6948                           status	equ	0xFD8
  6949                           
  6950 ;; *************** function ___awdiv *****************
  6951 ;; Defined at:
  6952 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  dividend        2    0[BANK0 ] int 
  6955 ;;  divisor         2    2[BANK0 ] int 
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;  quotient        2    6[BANK0 ] int 
  6958 ;;  sign            1    5[BANK0 ] unsigned char 
  6959 ;;  counter         1    4[BANK0 ] unsigned char 
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  2    0[BANK0 ] int 
  6962 ;; Registers used:
  6963 ;;		wreg, status,2, status,0
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6969 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;Total ram usage:        8 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    4
  6976 ;; This function calls:
  6977 ;;		Nothing
  6978 ;; This function is called by:
  6979 ;;		_main
  6980 ;;		_get_RTC_initial
  6981 ;;		_get_RTC_final
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	text8
  6986  00585A                     __ptext8:
  6987                           	opt stack 0
  6988  00585A                     ___awdiv:
  6989                           	opt stack 26
  6990                           
  6991                           ;incstack = 0
  6992  00585A  0E00               	movlw	0
  6993  00585C  0100               	movlb	0	; () banked
  6994  00585E  6FC8               	movwf	___awdiv@sign& (0+255),b
  6995                           
  6996                           ; BSR set to: 0
  6997  005860  AFC6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6998  005862  D006               	goto	l1626
  6999                           
  7000                           ; BSR set to: 0
  7001  005864  6DC5               	negf	___awdiv@divisor& (0+255),b
  7002  005866  1FC6               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7003  005868  B0D8               	btfsc	status,0,c
  7004  00586A  2BC6               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7005                           
  7006                           ; BSR set to: 0
  7007  00586C  0E01               	movlw	1
  7008  00586E  6FC8               	movwf	___awdiv@sign& (0+255),b
  7009  005870                     l1626:
  7010                           
  7011                           ; BSR set to: 0
  7012                           
  7013                           ; BSR set to: 0
  7014  005870  AFC4               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7015  005872  D006               	goto	l1627
  7016                           
  7017                           ; BSR set to: 0
  7018  005874  6DC3               	negf	___awdiv@dividend& (0+255),b
  7019  005876  1FC4               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7020  005878  B0D8               	btfsc	status,0,c
  7021  00587A  2BC4               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7022                           
  7023                           ; BSR set to: 0
  7024  00587C  0E01               	movlw	1
  7025  00587E  1BC8               	xorwf	___awdiv@sign& (0+255),f,b
  7026  005880                     l1627:
  7027                           
  7028                           ; BSR set to: 0
  7029                           
  7030                           ; BSR set to: 0
  7031  005880  0E00               	movlw	0
  7032  005882  6FCA               	movwf	(___awdiv@quotient+1)& (0+255),b
  7033  005884  0E00               	movlw	0
  7034  005886  6FC9               	movwf	___awdiv@quotient& (0+255),b
  7035                           
  7036                           ; BSR set to: 0
  7037  005888  51C5               	movf	___awdiv@divisor& (0+255),w,b
  7038  00588A  11C6               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7039  00588C  B4D8               	btfsc	status,2,c
  7040  00588E  D01C               	goto	l1634
  7041                           
  7042                           ; BSR set to: 0
  7043  005890  0E01               	movlw	1
  7044  005892  6FC7               	movwf	___awdiv@counter& (0+255),b
  7045  005894  D004               	goto	l1629
  7046  005896                     
  7047                           ; BSR set to: 0
  7048                           
  7049                           ; BSR set to: 0
  7050  005896  90D8               	bcf	status,0,c
  7051  005898  37C5               	rlcf	___awdiv@divisor& (0+255),f,b
  7052  00589A  37C6               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7053  00589C  2BC7               	incf	___awdiv@counter& (0+255),f,b
  7054  00589E                     l1629:
  7055                           
  7056                           ; BSR set to: 0
  7057                           
  7058                           ; BSR set to: 0
  7059  00589E  AFC6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7060  0058A0  D7FA               	goto	l1630
  7061  0058A2                     u4790:
  7062                           
  7063                           ; BSR set to: 0
  7064                           
  7065                           ; BSR set to: 0
  7066                           
  7067                           ; BSR set to: 0
  7068  0058A2  90D8               	bcf	status,0,c
  7069  0058A4  37C9               	rlcf	___awdiv@quotient& (0+255),f,b
  7070  0058A6  37CA               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7071                           
  7072                           ; BSR set to: 0
  7073  0058A8  51C5               	movf	___awdiv@divisor& (0+255),w,b
  7074  0058AA  5DC3               	subwf	___awdiv@dividend& (0+255),w,b
  7075  0058AC  51C6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7076  0058AE  59C4               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7077  0058B0  A0D8               	btfss	status,0,c
  7078  0058B2  D005               	goto	l1633
  7079                           
  7080                           ; BSR set to: 0
  7081  0058B4  51C5               	movf	___awdiv@divisor& (0+255),w,b
  7082  0058B6  5FC3               	subwf	___awdiv@dividend& (0+255),f,b
  7083  0058B8  51C6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7084  0058BA  5BC4               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7085                           
  7086                           ; BSR set to: 0
  7087  0058BC  81C9               	bsf	___awdiv@quotient& (0+255),0,b
  7088  0058BE                     l1633:
  7089                           
  7090                           ; BSR set to: 0
  7091                           
  7092                           ; BSR set to: 0
  7093  0058BE  90D8               	bcf	status,0,c
  7094  0058C0  33C6               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7095  0058C2  33C5               	rrcf	___awdiv@divisor& (0+255),f,b
  7096                           
  7097                           ; BSR set to: 0
  7098  0058C4  2FC7               	decfsz	___awdiv@counter& (0+255),f,b
  7099  0058C6  D7ED               	goto	u4790
  7100  0058C8                     l1634:
  7101                           
  7102                           ; BSR set to: 0
  7103                           
  7104                           ; BSR set to: 0
  7105                           
  7106                           ; BSR set to: 0
  7107  0058C8  51C8               	movf	___awdiv@sign& (0+255),w,b
  7108  0058CA  B4D8               	btfsc	status,2,c
  7109  0058CC  D004               	goto	l1635
  7110                           
  7111                           ; BSR set to: 0
  7112  0058CE  6DC9               	negf	___awdiv@quotient& (0+255),b
  7113  0058D0  1FCA               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7114  0058D2  B0D8               	btfsc	status,0,c
  7115  0058D4  2BCA               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7116  0058D6                     l1635:
  7117                           
  7118                           ; BSR set to: 0
  7119                           
  7120                           ; BSR set to: 0
  7121  0058D6  C0C9  F0C3         	movff	___awdiv@quotient,?___awdiv
  7122  0058DA  C0CA  F0C4         	movff	___awdiv@quotient+1,?___awdiv+1
  7123  0058DE  0012               	return	
  7124  0058E0                     __end_of___awdiv:
  7125                           	opt stack 0
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           intcon	equ	0xFF2
  7131                           intcon3	equ	0xFF0
  7132                           postinc0	equ	0xFEE
  7133                           wreg	equ	0xFE8
  7134                           postdec1	equ	0xFE5
  7135                           fsr1l	equ	0xFE1
  7136                           indf2	equ	0xFDF
  7137                           postinc2	equ	0xFDE
  7138                           postdec2	equ	0xFDD
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function _Washer_remain *****************
  7144 ;; Defined at:
  7145 ;;		line 1550 in file "main.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  time            2   42[BANK0 ] int 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  1    wreg      void 
  7152 ;; Registers used:
  7153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7159 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;Total ram usage:        4 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:    9
  7166 ;; This function calls:
  7167 ;;		_I2C_sendData
  7168 ;;		_drawWasher
  7169 ;;		_lcdInst
  7170 ;;		_printf
  7171 ;; This function is called by:
  7172 ;;		_main
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           	psect	text9
  7177  0051BA                     __ptext9:
  7178                           	opt stack 0
  7179  0051BA                     _Washer_remain:
  7180                           	opt stack 21
  7181                           
  7182                           ;main.c: 1551: drawWasher();
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;incstack = 0
  7186  0051BA  ECF8  F014         	call	_drawWasher	;wreg free
  7187                           
  7188                           ;main.c: 1552: _delay((unsigned long)((100)*(32000000/4000.0)));
  7189  0051BE  0E05               	movlw	5
  7190  0051C0  0100               	movlb	0	; () banked
  7191  0051C2  6FF0               	movwf	(??_Washer_remain+1)& (0+255),b
  7192  0051C4  0E0F               	movlw	15
  7193  0051C6  6FEF               	movwf	??_Washer_remain& (0+255),b
  7194  0051C8  0EF1               	movlw	241
  7195  0051CA                     u7017:
  7196  0051CA  2EE8               	decfsz	wreg,f,c
  7197  0051CC  D7FE               	bra	u7017
  7198  0051CE  2FEF               	decfsz	??_Washer_remain& (0+255),f,b
  7199  0051D0  D7FC               	bra	u7017
  7200  0051D2  2FF0               	decfsz	(??_Washer_remain+1)& (0+255),f,b
  7201  0051D4  D7FA               	bra	u7017
  7202                           
  7203                           ;main.c: 1553: I2C_sendData(11);
  7204  0051D6  0E0B               	movlw	11
  7205  0051D8  EC86  F030         	call	_I2C_sendData
  7206                           
  7207                           ;main.c: 1554: while(EndOfProgram != 1 && W_spacingTime < time){
  7208  0051DC  D026               	goto	l778
  7209  0051DE                     
  7210                           ;main.c: 1555: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  7211  0051DE  0E01               	movlw	1
  7212  0051E0  ECEB  F030         	call	_lcdInst
  7213  0051E4  0E9C               	movlw	156
  7214  0051E6  0100               	movlb	0	; () banked
  7215  0051E8  6FEF               	movwf	??_Washer_remain& (0+255),b
  7216  0051EA  0ED7               	movlw	215
  7217  0051EC                     u7027:
  7218  0051EC  2EE8               	decfsz	wreg,f,c
  7219  0051EE  D7FE               	bra	u7027
  7220  0051F0  2FEF               	decfsz	??_Washer_remain& (0+255),f,b
  7221  0051F2  D7FC               	bra	u7027
  7222                           
  7223                           ;main.c: 1556: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  7224  0051F4  0E80               	movlw	128
  7225  0051F6  ECEB  F030         	call	_lcdInst
  7226  0051FA  0E34               	movlw	52
  7227  0051FC  0100               	movlb	0	; () banked
  7228  0051FE  6FEF               	movwf	??_Washer_remain& (0+255),b
  7229  005200  0EF1               	movlw	241
  7230  005202                     u7037:
  7231  005202  2EE8               	decfsz	wreg,f,c
  7232  005204  D7FE               	bra	u7037
  7233  005206  2FEF               	decfsz	??_Washer_remain& (0+255),f,b
  7234  005208  D7FC               	bra	u7037
  7235  00520A  D000               	nop2	
  7236                           
  7237                           ;main.c: 1557: W_spacingTime +=30;
  7238  00520C  0E1E               	movlw	30
  7239  00520E  0100               	movlb	0	; () banked
  7240  005210  2797               	addwf	_W_spacingTime& (0+255),f,b
  7241  005212  0E00               	movlw	0
  7242  005214  2398               	addwfc	(_W_spacingTime+1)& (0+255),f,b
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;main.c: 1558: printf("W:%d",W_counter);
  7246  005216  0E65               	movlw	low (STR_70+15)
  7247  005218  6FD1               	movwf	printf@f& (0+255),b
  7248  00521A  0EFD               	movlw	high (STR_70+15)
  7249  00521C  6FD2               	movwf	(printf@f+1)& (0+255),b
  7250  00521E  C0A7  F0D3         	movff	_W_counter,?_printf+2
  7251  005222  C0A8  F0D4         	movff	_W_counter+1,?_printf+3
  7252  005226  EC2A  F019         	call	_printf	;wreg free
  7253  00522A                     l778:
  7254  00522A  0100               	movlb	0	; () banked
  7255  00522C  05BB               	decf	_EndOfProgram& (0+255),w,b
  7256  00522E  B4D8               	btfsc	status,2,c
  7257  005230  D00A               	goto	u4330
  7258                           
  7259                           ; BSR set to: 0
  7260  005232  51ED               	movf	Washer_remain@time& (0+255),w,b
  7261  005234  5D97               	subwf	_W_spacingTime& (0+255),w,b
  7262  005236  5198               	movf	(_W_spacingTime+1)& (0+255),w,b
  7263  005238  0A80               	xorlw	128
  7264  00523A  6FEF               	movwf	??_Washer_remain& (0+255),b
  7265  00523C  51EE               	movf	(Washer_remain@time+1)& (0+255),w,b
  7266  00523E  0A80               	xorlw	128
  7267  005240  59EF               	subwfb	??_Washer_remain& (0+255),w,b
  7268  005242  A0D8               	btfss	status,0,c
  7269  005244  D7CC               	goto	l779
  7270  005246                     u4330:
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;main.c: 1559: }
  7274                           ;main.c: 1560: W_remain = W_counter;
  7275                           
  7276                           ; BSR set to: 0
  7277  005246  C0A7  F09F         	movff	_W_counter,_W_remain
  7278  00524A  C0A8  F0A0         	movff	_W_counter+1,_W_remain+1
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;main.c: 1561: I2C_sendData(12);
  7282  00524E  0E0C               	movlw	12
  7283  005250  EC86  F030         	call	_I2C_sendData
  7284                           
  7285                           ;main.c: 1562: if(EndOfProgram != 1){
  7286  005254  0100               	movlb	0	; () banked
  7287  005256  05BB               	decf	_EndOfProgram& (0+255),w,b
  7288  005258  B4D8               	btfsc	status,2,c
  7289  00525A  0012               	return	
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;main.c: 1563: _delay((unsigned long)((100)*(32000000/4000.0)));
  7293  00525C  0E05               	movlw	5
  7294  00525E  0100               	movlb	0	; () banked
  7295  005260  6FF0               	movwf	(??_Washer_remain+1)& (0+255),b
  7296  005262  0E0F               	movlw	15
  7297  005264  6FEF               	movwf	??_Washer_remain& (0+255),b
  7298  005266  0EF1               	movlw	241
  7299  005268                     u7047:
  7300  005268  2EE8               	decfsz	wreg,f,c
  7301  00526A  D7FE               	bra	u7047
  7302  00526C  2FEF               	decfsz	??_Washer_remain& (0+255),f,b
  7303  00526E  D7FC               	bra	u7047
  7304  005270  2FF0               	decfsz	(??_Washer_remain+1)& (0+255),f,b
  7305  005272  D7FA               	bra	u7047
  7306  005274  0012               	return	
  7307  005276                     __end_of_Washer_remain:
  7308                           	opt stack 0
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           intcon	equ	0xFF2
  7314                           intcon3	equ	0xFF0
  7315                           postinc0	equ	0xFEE
  7316                           wreg	equ	0xFE8
  7317                           postdec1	equ	0xFE5
  7318                           fsr1l	equ	0xFE1
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function _Washer_dispense *****************
  7327 ;; Defined at:
  7328 ;;		line 1350 in file "main.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  W_max           2   42[BANK0 ] int 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;		None
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  1    wreg      void 
  7335 ;; Registers used:
  7336 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7342 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;Total ram usage:        4 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    9
  7349 ;; This function calls:
  7350 ;;		_I2C_sendData
  7351 ;;		_drawWasher
  7352 ;;		_lcdInst
  7353 ;;		_printf
  7354 ;; This function is called by:
  7355 ;;		_main
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text10
  7360  005558                     __ptext10:
  7361                           	opt stack 0
  7362  005558                     _Washer_dispense:
  7363                           	opt stack 21
  7364                           
  7365                           ;main.c: 1351: if (W_max == 0){
  7366                           
  7367                           ;incstack = 0
  7368  005558  0100               	movlb	0	; () banked
  7369  00555A  51ED               	movf	Washer_dispense@W_max& (0+255),w,b
  7370  00555C  11EE               	iorwf	(Washer_dispense@W_max+1)& (0+255),w,b
  7371  00555E  B4D8               	btfsc	status,2,c
  7372  005560  0012               	return	
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;main.c: 1353: }
  7376                           ;main.c: 1354: drawWasher();
  7377                           
  7378                           ; BSR set to: 0
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;main.c: 1352: return;
  7382  005562  ECF8  F014         	call	_drawWasher	;wreg free
  7383                           
  7384                           ;main.c: 1355: _delay((unsigned long)((100)*(32000000/4000.0)));
  7385  005566  0E05               	movlw	5
  7386  005568  0100               	movlb	0	; () banked
  7387  00556A  6FF0               	movwf	(??_Washer_dispense+1)& (0+255),b
  7388  00556C  0E0F               	movlw	15
  7389  00556E  6FEF               	movwf	??_Washer_dispense& (0+255),b
  7390  005570  0EF1               	movlw	241
  7391  005572                     u7057:
  7392  005572  2EE8               	decfsz	wreg,f,c
  7393  005574  D7FE               	bra	u7057
  7394  005576  2FEF               	decfsz	??_Washer_dispense& (0+255),f,b
  7395  005578  D7FC               	bra	u7057
  7396  00557A  2FF0               	decfsz	(??_Washer_dispense+1)& (0+255),f,b
  7397  00557C  D7FA               	bra	u7057
  7398                           
  7399                           ;main.c: 1356: I2C_sendData(11);
  7400  00557E  0E0B               	movlw	11
  7401  005580  EC86  F030         	call	_I2C_sendData
  7402                           
  7403                           ;main.c: 1357: W_counter = 0;
  7404  005584  0E00               	movlw	0
  7405  005586  0100               	movlb	0	; () banked
  7406  005588  6FA8               	movwf	(_W_counter+1)& (0+255),b
  7407  00558A  0E00               	movlw	0
  7408  00558C  6FA7               	movwf	_W_counter& (0+255),b
  7409                           
  7410                           ;main.c: 1358: while(NeedToCloseLid != 1 && W_counter < W_max){
  7411  00558E  D022               	goto	l704
  7412  005590                     
  7413                           ; BSR set to: 0
  7414                           ;main.c: 1359: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  7415                           
  7416                           ; BSR set to: 0
  7417  005590  0E01               	movlw	1
  7418  005592  ECEB  F030         	call	_lcdInst
  7419  005596  0E9C               	movlw	156
  7420  005598  0100               	movlb	0	; () banked
  7421  00559A  6FEF               	movwf	??_Washer_dispense& (0+255),b
  7422  00559C  0ED7               	movlw	215
  7423  00559E                     u7067:
  7424  00559E  2EE8               	decfsz	wreg,f,c
  7425  0055A0  D7FE               	bra	u7067
  7426  0055A2  2FEF               	decfsz	??_Washer_dispense& (0+255),f,b
  7427  0055A4  D7FC               	bra	u7067
  7428                           
  7429                           ;main.c: 1360: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  7430  0055A6  0E80               	movlw	128
  7431  0055A8  ECEB  F030         	call	_lcdInst
  7432  0055AC  0E34               	movlw	52
  7433  0055AE  0100               	movlb	0	; () banked
  7434  0055B0  6FEF               	movwf	??_Washer_dispense& (0+255),b
  7435  0055B2  0EF1               	movlw	241
  7436  0055B4                     u7077:
  7437  0055B4  2EE8               	decfsz	wreg,f,c
  7438  0055B6  D7FE               	bra	u7077
  7439  0055B8  2FEF               	decfsz	??_Washer_dispense& (0+255),f,b
  7440  0055BA  D7FC               	bra	u7077
  7441  0055BC  D000               	nop2	
  7442                           
  7443                           ;main.c: 1361: printf("W:%d",W_counter);
  7444  0055BE  0E65               	movlw	low (STR_70+15)
  7445  0055C0  0100               	movlb	0	; () banked
  7446  0055C2  6FD1               	movwf	printf@f& (0+255),b
  7447  0055C4  0EFD               	movlw	high (STR_70+15)
  7448  0055C6  6FD2               	movwf	(printf@f+1)& (0+255),b
  7449  0055C8  C0A7  F0D3         	movff	_W_counter,?_printf+2
  7450  0055CC  C0A8  F0D4         	movff	_W_counter+1,?_printf+3
  7451  0055D0  EC2A  F019         	call	_printf	;wreg free
  7452  0055D4                     l704:
  7453  0055D4  0100               	movlb	0	; () banked
  7454  0055D6  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  7455  0055D8  B4D8               	btfsc	status,2,c
  7456  0055DA  D00A               	goto	u4280
  7457                           
  7458                           ; BSR set to: 0
  7459  0055DC  51ED               	movf	Washer_dispense@W_max& (0+255),w,b
  7460  0055DE  5DA7               	subwf	_W_counter& (0+255),w,b
  7461  0055E0  51A8               	movf	(_W_counter+1)& (0+255),w,b
  7462  0055E2  0A80               	xorlw	128
  7463  0055E4  6FEF               	movwf	??_Washer_dispense& (0+255),b
  7464  0055E6  51EE               	movf	(Washer_dispense@W_max+1)& (0+255),w,b
  7465  0055E8  0A80               	xorlw	128
  7466  0055EA  59EF               	subwfb	??_Washer_dispense& (0+255),w,b
  7467  0055EC  A0D8               	btfss	status,0,c
  7468  0055EE  D7D0               	goto	l705
  7469  0055F0                     u4280:
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;main.c: 1362: }
  7473                           ;main.c: 1363: I2C_sendData(12);
  7474                           
  7475                           ; BSR set to: 0
  7476                           
  7477                           ; BSR set to: 0
  7478  0055F0  0E0C               	movlw	12
  7479  0055F2  EC86  F030         	call	_I2C_sendData
  7480  0055F6  0012               	return	
  7481  0055F8                     __end_of_Washer_dispense:
  7482                           	opt stack 0
  7483                           tblptru	equ	0xFF8
  7484                           tblptrh	equ	0xFF7
  7485                           tblptrl	equ	0xFF6
  7486                           tablat	equ	0xFF5
  7487                           intcon	equ	0xFF2
  7488                           intcon3	equ	0xFF0
  7489                           postinc0	equ	0xFEE
  7490                           wreg	equ	0xFE8
  7491                           postdec1	equ	0xFE5
  7492                           fsr1l	equ	0xFE1
  7493                           indf2	equ	0xFDF
  7494                           postinc2	equ	0xFDE
  7495                           postdec2	equ	0xFDD
  7496                           fsr2h	equ	0xFDA
  7497                           fsr2l	equ	0xFD9
  7498                           status	equ	0xFD8
  7499                           
  7500 ;; *************** function _drawWasher *****************
  7501 ;; Defined at:
  7502 ;;		line 1624 in file "main.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;		None
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;		None
  7507 ;; Return value:  Size  Location     Type
  7508 ;;                  1    wreg      void 
  7509 ;; Registers used:
  7510 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;Total ram usage:        1 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    8
  7523 ;; This function calls:
  7524 ;;		_I2C_Master_Init
  7525 ;;		_glcdDrawRectangle
  7526 ;;		_spiInit
  7527 ;; This function is called by:
  7528 ;;		_Washer_dispense
  7529 ;;		_Washer_remain
  7530 ;;		_nut_washer_remain
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           	psect	text11
  7535  0029F0                     __ptext11:
  7536                           	opt stack 0
  7537  0029F0                     _drawWasher:
  7538                           	opt stack 21
  7539                           
  7540                           ;main.c: 1625: spiInit(4);
  7541                           
  7542                           ;incstack = 0
  7543  0029F0  0E04               	movlw	4
  7544  0029F2  ECFD  F02F         	call	_spiInit
  7545                           
  7546                           ;main.c: 1626: _delay((unsigned long)((20)*(32000000/4000.0)));
  7547  0029F6  0ED0               	movlw	208
  7548  0029F8  0100               	movlb	0	; () banked
  7549  0029FA  6FE4               	movwf	??_drawWasher& (0+255),b
  7550  0029FC  0EC9               	movlw	201
  7551  0029FE                     u7087:
  7552  0029FE  2EE8               	decfsz	wreg,f,c
  7553  002A00  D7FE               	bra	u7087
  7554  002A02  2FE4               	decfsz	??_drawWasher& (0+255),f,b
  7555  002A04  D7FC               	bra	u7087
  7556  002A06  D000               	nop2	
  7557                           
  7558                           ;main.c: 1627: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  7559  002A08  0EE9               	movlw	low _GLCD_SIZE_HORZ
  7560  002A0A  6EF6               	movwf	tblptrl,c
  7561  002A0C                     	if	1	;There is more than 1 active tblptr byte
  7562  002A0C  0EFC               	movlw	high _GLCD_SIZE_HORZ
  7563  002A0E  6EF7               	movwf	tblptrh,c
  7564  002A10                     	endif
  7565  002A10                     	if	1	;There are 3 active tblptr bytes
  7566  002A10  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
  7567  002A12  6EF8               	movwf	tblptru,c
  7568  002A14                     	endif
  7569  002A14  0008               	tblrd		*
  7570  002A16  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
  7571  002A1A  0E00               	movlw	0
  7572  002A1C  0100               	movlb	0	; () banked
  7573  002A1E  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7574  002A20  0EE8               	movlw	low _GLCD_SIZE_VERT
  7575  002A22  6EF6               	movwf	tblptrl,c
  7576  002A24                     	if	1	;There is more than 1 active tblptr byte
  7577  002A24  0EFC               	movlw	high _GLCD_SIZE_VERT
  7578  002A26  6EF7               	movwf	tblptrh,c
  7579  002A28                     	endif
  7580  002A28                     	if	1	;There are 3 active tblptr bytes
  7581  002A28  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
  7582  002A2A  6EF8               	movwf	tblptru,c
  7583  002A2C                     	endif
  7584  002A2C  0008               	tblrd		*
  7585  002A2E  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
  7586  002A32  0EA1               	movlw	low _BLACK
  7587  002A34  6EF6               	movwf	tblptrl,c
  7588  002A36                     	if	1	;There is more than 1 active tblptr byte
  7589  002A36  0EFC               	movlw	high _BLACK
  7590  002A38  6EF7               	movwf	tblptrh,c
  7591  002A3A                     	endif
  7592  002A3A                     	if	1	;There are 3 active tblptr bytes
  7593  002A3A  0E00               	movlw	low (_BLACK shr (0+16))
  7594  002A3C  6EF8               	movwf	tblptru,c
  7595  002A3E                     	endif
  7596  002A3E  0009               	tblrd		*+
  7597  002A40  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7598  002A44  0009               	tblrd		*+
  7599  002A46  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7600  002A4A  0009               	tblrd		*+
  7601  002A4C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7602  002A50  000A               	tblrd		*-
  7603  002A52  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7604  002A56  0E00               	movlw	0
  7605  002A58  ECA8  F026         	call	_glcdDrawRectangle
  7606                           
  7607                           ;main.c: 1630: glcdDrawRectangle(5*4,6*4, 13*4, 20*4, WHITE);
  7608  002A5C  0E18               	movlw	24
  7609  002A5E  0100               	movlb	0	; () banked
  7610  002A60  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7611  002A62  0E34               	movlw	52
  7612  002A64  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7613  002A66  0E50               	movlw	80
  7614  002A68  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7615  002A6A  0E99               	movlw	low _WHITE
  7616  002A6C  6EF6               	movwf	tblptrl,c
  7617  002A6E                     	if	1	;There is more than 1 active tblptr byte
  7618  002A6E  0EFC               	movlw	high _WHITE
  7619  002A70  6EF7               	movwf	tblptrh,c
  7620  002A72                     	endif
  7621  002A72                     	if	1	;There are 3 active tblptr bytes
  7622  002A72  0E00               	movlw	low (_WHITE shr (0+16))
  7623  002A74  6EF8               	movwf	tblptru,c
  7624  002A76                     	endif
  7625  002A76  0009               	tblrd		*+
  7626  002A78  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7627  002A7C  0009               	tblrd		*+
  7628  002A7E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7629  002A82  0009               	tblrd		*+
  7630  002A84  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7631  002A88  000A               	tblrd		*-
  7632  002A8A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7633  002A8E  0E14               	movlw	20
  7634  002A90  ECA8  F026         	call	_glcdDrawRectangle
  7635                           
  7636                           ;main.c: 1631: glcdDrawRectangle(6*4,7*4, 11*4, 13*4, WHITE);
  7637  002A94  0E1C               	movlw	28
  7638  002A96  0100               	movlb	0	; () banked
  7639  002A98  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7640  002A9A  0E2C               	movlw	44
  7641  002A9C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7642  002A9E  0E34               	movlw	52
  7643  002AA0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7644  002AA2  0E99               	movlw	low _WHITE
  7645  002AA4  6EF6               	movwf	tblptrl,c
  7646  002AA6                     	if	1	;There is more than 1 active tblptr byte
  7647  002AA6  0EFC               	movlw	high _WHITE
  7648  002AA8  6EF7               	movwf	tblptrh,c
  7649  002AAA                     	endif
  7650  002AAA                     	if	1	;There are 3 active tblptr bytes
  7651  002AAA  0E00               	movlw	low (_WHITE shr (0+16))
  7652  002AAC  6EF8               	movwf	tblptru,c
  7653  002AAE                     	endif
  7654  002AAE  0009               	tblrd		*+
  7655  002AB0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7656  002AB4  0009               	tblrd		*+
  7657  002AB6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7658  002ABA  0009               	tblrd		*+
  7659  002ABC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7660  002AC0  000A               	tblrd		*-
  7661  002AC2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7662  002AC6  0E18               	movlw	24
  7663  002AC8  ECA8  F026         	call	_glcdDrawRectangle
  7664                           
  7665                           ;main.c: 1632: glcdDrawRectangle(7*4,8*4, 9*4, 11*4, WHITE);
  7666  002ACC  0E20               	movlw	32
  7667  002ACE  0100               	movlb	0	; () banked
  7668  002AD0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7669  002AD2  0E24               	movlw	36
  7670  002AD4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7671  002AD6  0E2C               	movlw	44
  7672  002AD8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7673  002ADA  0E99               	movlw	low _WHITE
  7674  002ADC  6EF6               	movwf	tblptrl,c
  7675  002ADE                     	if	1	;There is more than 1 active tblptr byte
  7676  002ADE  0EFC               	movlw	high _WHITE
  7677  002AE0  6EF7               	movwf	tblptrh,c
  7678  002AE2                     	endif
  7679  002AE2                     	if	1	;There are 3 active tblptr bytes
  7680  002AE2  0E00               	movlw	low (_WHITE shr (0+16))
  7681  002AE4  6EF8               	movwf	tblptru,c
  7682  002AE6                     	endif
  7683  002AE6  0009               	tblrd		*+
  7684  002AE8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7685  002AEC  0009               	tblrd		*+
  7686  002AEE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7687  002AF2  0009               	tblrd		*+
  7688  002AF4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7689  002AF8  000A               	tblrd		*-
  7690  002AFA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7691  002AFE  0E1C               	movlw	28
  7692  002B00  ECA8  F026         	call	_glcdDrawRectangle
  7693                           
  7694                           ;main.c: 1634: glcdDrawRectangle(8*4,9*4, 8*4, 9*4, WHITE);
  7695  002B04  0E24               	movlw	36
  7696  002B06  0100               	movlb	0	; () banked
  7697  002B08  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7698  002B0A  0E20               	movlw	32
  7699  002B0C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7700  002B0E  0E24               	movlw	36
  7701  002B10  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7702  002B12  0E99               	movlw	low _WHITE
  7703  002B14  6EF6               	movwf	tblptrl,c
  7704  002B16                     	if	1	;There is more than 1 active tblptr byte
  7705  002B16  0EFC               	movlw	high _WHITE
  7706  002B18  6EF7               	movwf	tblptrh,c
  7707  002B1A                     	endif
  7708  002B1A                     	if	1	;There are 3 active tblptr bytes
  7709  002B1A  0E00               	movlw	low (_WHITE shr (0+16))
  7710  002B1C  6EF8               	movwf	tblptru,c
  7711  002B1E                     	endif
  7712  002B1E  0009               	tblrd		*+
  7713  002B20  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7714  002B24  0009               	tblrd		*+
  7715  002B26  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7716  002B2A  0009               	tblrd		*+
  7717  002B2C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7718  002B30  000A               	tblrd		*-
  7719  002B32  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7720  002B36  0E20               	movlw	32
  7721  002B38  ECA8  F026         	call	_glcdDrawRectangle
  7722                           
  7723                           ;main.c: 1635: glcdDrawRectangle(9*4,11*4, 7*4, 8*4, WHITE);
  7724  002B3C  0E2C               	movlw	44
  7725  002B3E  0100               	movlb	0	; () banked
  7726  002B40  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7727  002B42  0E1C               	movlw	28
  7728  002B44  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7729  002B46  0E20               	movlw	32
  7730  002B48  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7731  002B4A  0E99               	movlw	low _WHITE
  7732  002B4C  6EF6               	movwf	tblptrl,c
  7733  002B4E                     	if	1	;There is more than 1 active tblptr byte
  7734  002B4E  0EFC               	movlw	high _WHITE
  7735  002B50  6EF7               	movwf	tblptrh,c
  7736  002B52                     	endif
  7737  002B52                     	if	1	;There are 3 active tblptr bytes
  7738  002B52  0E00               	movlw	low (_WHITE shr (0+16))
  7739  002B54  6EF8               	movwf	tblptru,c
  7740  002B56                     	endif
  7741  002B56  0009               	tblrd		*+
  7742  002B58  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7743  002B5C  0009               	tblrd		*+
  7744  002B5E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7745  002B62  0009               	tblrd		*+
  7746  002B64  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7747  002B68  000A               	tblrd		*-
  7748  002B6A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7749  002B6E  0E24               	movlw	36
  7750  002B70  ECA8  F026         	call	_glcdDrawRectangle
  7751                           
  7752                           ;main.c: 1636: glcdDrawRectangle(11*4,13*4, 6*4, 7*4, WHITE);
  7753  002B74  0E34               	movlw	52
  7754  002B76  0100               	movlb	0	; () banked
  7755  002B78  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7756  002B7A  0E18               	movlw	24
  7757  002B7C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7758  002B7E  0E1C               	movlw	28
  7759  002B80  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7760  002B82  0E99               	movlw	low _WHITE
  7761  002B84  6EF6               	movwf	tblptrl,c
  7762  002B86                     	if	1	;There is more than 1 active tblptr byte
  7763  002B86  0EFC               	movlw	high _WHITE
  7764  002B88  6EF7               	movwf	tblptrh,c
  7765  002B8A                     	endif
  7766  002B8A                     	if	1	;There are 3 active tblptr bytes
  7767  002B8A  0E00               	movlw	low (_WHITE shr (0+16))
  7768  002B8C  6EF8               	movwf	tblptru,c
  7769  002B8E                     	endif
  7770  002B8E  0009               	tblrd		*+
  7771  002B90  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7772  002B94  0009               	tblrd		*+
  7773  002B96  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7774  002B9A  0009               	tblrd		*+
  7775  002B9C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7776  002BA0  000A               	tblrd		*-
  7777  002BA2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7778  002BA6  0E2C               	movlw	44
  7779  002BA8  ECA8  F026         	call	_glcdDrawRectangle
  7780                           
  7781                           ;main.c: 1638: glcdDrawRectangle(13*4,20*4, 5*4, 6*4, WHITE);
  7782  002BAC  0E50               	movlw	80
  7783  002BAE  0100               	movlb	0	; () banked
  7784  002BB0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7785  002BB2  0E14               	movlw	20
  7786  002BB4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7787  002BB6  0E18               	movlw	24
  7788  002BB8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7789  002BBA  0E99               	movlw	low _WHITE
  7790  002BBC  6EF6               	movwf	tblptrl,c
  7791  002BBE                     	if	1	;There is more than 1 active tblptr byte
  7792  002BBE  0EFC               	movlw	high _WHITE
  7793  002BC0  6EF7               	movwf	tblptrh,c
  7794  002BC2                     	endif
  7795  002BC2                     	if	1	;There are 3 active tblptr bytes
  7796  002BC2  0E00               	movlw	low (_WHITE shr (0+16))
  7797  002BC4  6EF8               	movwf	tblptru,c
  7798  002BC6                     	endif
  7799  002BC6  0009               	tblrd		*+
  7800  002BC8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7801  002BCC  0009               	tblrd		*+
  7802  002BCE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7803  002BD2  0009               	tblrd		*+
  7804  002BD4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7805  002BD8  000A               	tblrd		*-
  7806  002BDA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7807  002BDE  0E34               	movlw	52
  7808  002BE0  ECA8  F026         	call	_glcdDrawRectangle
  7809                           
  7810                           ;main.c: 1639: glcdDrawRectangle(20*4,22*4, 6*4, 7*4, WHITE);
  7811  002BE4  0E58               	movlw	88
  7812  002BE6  0100               	movlb	0	; () banked
  7813  002BE8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7814  002BEA  0E18               	movlw	24
  7815  002BEC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7816  002BEE  0E1C               	movlw	28
  7817  002BF0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7818  002BF2  0E99               	movlw	low _WHITE
  7819  002BF4  6EF6               	movwf	tblptrl,c
  7820  002BF6                     	if	1	;There is more than 1 active tblptr byte
  7821  002BF6  0EFC               	movlw	high _WHITE
  7822  002BF8  6EF7               	movwf	tblptrh,c
  7823  002BFA                     	endif
  7824  002BFA                     	if	1	;There are 3 active tblptr bytes
  7825  002BFA  0E00               	movlw	low (_WHITE shr (0+16))
  7826  002BFC  6EF8               	movwf	tblptru,c
  7827  002BFE                     	endif
  7828  002BFE  0009               	tblrd		*+
  7829  002C00  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7830  002C04  0009               	tblrd		*+
  7831  002C06  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7832  002C0A  0009               	tblrd		*+
  7833  002C0C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7834  002C10  000A               	tblrd		*-
  7835  002C12  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7836  002C16  0E50               	movlw	80
  7837  002C18  ECA8  F026         	call	_glcdDrawRectangle
  7838                           
  7839                           ;main.c: 1640: glcdDrawRectangle(22*4,24*4, 7*4, 8*4, WHITE);
  7840  002C1C  0E60               	movlw	96
  7841  002C1E  0100               	movlb	0	; () banked
  7842  002C20  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7843  002C22  0E1C               	movlw	28
  7844  002C24  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7845  002C26  0E20               	movlw	32
  7846  002C28  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7847  002C2A  0E99               	movlw	low _WHITE
  7848  002C2C  6EF6               	movwf	tblptrl,c
  7849  002C2E                     	if	1	;There is more than 1 active tblptr byte
  7850  002C2E  0EFC               	movlw	high _WHITE
  7851  002C30  6EF7               	movwf	tblptrh,c
  7852  002C32                     	endif
  7853  002C32                     	if	1	;There are 3 active tblptr bytes
  7854  002C32  0E00               	movlw	low (_WHITE shr (0+16))
  7855  002C34  6EF8               	movwf	tblptru,c
  7856  002C36                     	endif
  7857  002C36  0009               	tblrd		*+
  7858  002C38  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7859  002C3C  0009               	tblrd		*+
  7860  002C3E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7861  002C42  0009               	tblrd		*+
  7862  002C44  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7863  002C48  000A               	tblrd		*-
  7864  002C4A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7865  002C4E  0E58               	movlw	88
  7866  002C50  ECA8  F026         	call	_glcdDrawRectangle
  7867                           
  7868                           ;main.c: 1642: glcdDrawRectangle(24*4,25*4, 8*4, 9*4, WHITE);
  7869  002C54  0E64               	movlw	100
  7870  002C56  0100               	movlb	0	; () banked
  7871  002C58  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7872  002C5A  0E20               	movlw	32
  7873  002C5C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7874  002C5E  0E24               	movlw	36
  7875  002C60  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7876  002C62  0E99               	movlw	low _WHITE
  7877  002C64  6EF6               	movwf	tblptrl,c
  7878  002C66                     	if	1	;There is more than 1 active tblptr byte
  7879  002C66  0EFC               	movlw	high _WHITE
  7880  002C68  6EF7               	movwf	tblptrh,c
  7881  002C6A                     	endif
  7882  002C6A                     	if	1	;There are 3 active tblptr bytes
  7883  002C6A  0E00               	movlw	low (_WHITE shr (0+16))
  7884  002C6C  6EF8               	movwf	tblptru,c
  7885  002C6E                     	endif
  7886  002C6E  0009               	tblrd		*+
  7887  002C70  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7888  002C74  0009               	tblrd		*+
  7889  002C76  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7890  002C7A  0009               	tblrd		*+
  7891  002C7C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7892  002C80  000A               	tblrd		*-
  7893  002C82  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7894  002C86  0E60               	movlw	96
  7895  002C88  ECA8  F026         	call	_glcdDrawRectangle
  7896                           
  7897                           ;main.c: 1644: glcdDrawRectangle(25*4,26*4, 9*4, 11*4, WHITE);
  7898  002C8C  0E68               	movlw	104
  7899  002C8E  0100               	movlb	0	; () banked
  7900  002C90  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7901  002C92  0E24               	movlw	36
  7902  002C94  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7903  002C96  0E2C               	movlw	44
  7904  002C98  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7905  002C9A  0E99               	movlw	low _WHITE
  7906  002C9C  6EF6               	movwf	tblptrl,c
  7907  002C9E                     	if	1	;There is more than 1 active tblptr byte
  7908  002C9E  0EFC               	movlw	high _WHITE
  7909  002CA0  6EF7               	movwf	tblptrh,c
  7910  002CA2                     	endif
  7911  002CA2                     	if	1	;There are 3 active tblptr bytes
  7912  002CA2  0E00               	movlw	low (_WHITE shr (0+16))
  7913  002CA4  6EF8               	movwf	tblptru,c
  7914  002CA6                     	endif
  7915  002CA6  0009               	tblrd		*+
  7916  002CA8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7917  002CAC  0009               	tblrd		*+
  7918  002CAE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7919  002CB2  0009               	tblrd		*+
  7920  002CB4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7921  002CB8  000A               	tblrd		*-
  7922  002CBA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7923  002CBE  0E64               	movlw	100
  7924  002CC0  ECA8  F026         	call	_glcdDrawRectangle
  7925                           
  7926                           ;main.c: 1645: glcdDrawRectangle(26*4,27*4, 11*4, 13*4, WHITE);
  7927  002CC4  0E6C               	movlw	108
  7928  002CC6  0100               	movlb	0	; () banked
  7929  002CC8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7930  002CCA  0E2C               	movlw	44
  7931  002CCC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7932  002CCE  0E34               	movlw	52
  7933  002CD0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7934  002CD2  0E99               	movlw	low _WHITE
  7935  002CD4  6EF6               	movwf	tblptrl,c
  7936  002CD6                     	if	1	;There is more than 1 active tblptr byte
  7937  002CD6  0EFC               	movlw	high _WHITE
  7938  002CD8  6EF7               	movwf	tblptrh,c
  7939  002CDA                     	endif
  7940  002CDA                     	if	1	;There are 3 active tblptr bytes
  7941  002CDA  0E00               	movlw	low (_WHITE shr (0+16))
  7942  002CDC  6EF8               	movwf	tblptru,c
  7943  002CDE                     	endif
  7944  002CDE  0009               	tblrd		*+
  7945  002CE0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7946  002CE4  0009               	tblrd		*+
  7947  002CE6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7948  002CEA  0009               	tblrd		*+
  7949  002CEC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7950  002CF0  000A               	tblrd		*-
  7951  002CF2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7952  002CF6  0E68               	movlw	104
  7953  002CF8  ECA8  F026         	call	_glcdDrawRectangle
  7954                           
  7955                           ;main.c: 1646: glcdDrawRectangle(27*4,28*4, 13*4, 20*4, WHITE);
  7956  002CFC  0E70               	movlw	112
  7957  002CFE  0100               	movlb	0	; () banked
  7958  002D00  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7959  002D02  0E34               	movlw	52
  7960  002D04  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7961  002D06  0E50               	movlw	80
  7962  002D08  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7963  002D0A  0E99               	movlw	low _WHITE
  7964  002D0C  6EF6               	movwf	tblptrl,c
  7965  002D0E                     	if	1	;There is more than 1 active tblptr byte
  7966  002D0E  0EFC               	movlw	high _WHITE
  7967  002D10  6EF7               	movwf	tblptrh,c
  7968  002D12                     	endif
  7969  002D12                     	if	1	;There are 3 active tblptr bytes
  7970  002D12  0E00               	movlw	low (_WHITE shr (0+16))
  7971  002D14  6EF8               	movwf	tblptru,c
  7972  002D16                     	endif
  7973  002D16  0009               	tblrd		*+
  7974  002D18  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  7975  002D1C  0009               	tblrd		*+
  7976  002D1E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  7977  002D22  0009               	tblrd		*+
  7978  002D24  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  7979  002D28  000A               	tblrd		*-
  7980  002D2A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  7981  002D2E  0E6C               	movlw	108
  7982  002D30  ECA8  F026         	call	_glcdDrawRectangle
  7983                           
  7984                           ;main.c: 1648: glcdDrawRectangle(26*4,27*4, 20*4, 22*4, WHITE);
  7985  002D34  0E6C               	movlw	108
  7986  002D36  0100               	movlb	0	; () banked
  7987  002D38  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  7988  002D3A  0E50               	movlw	80
  7989  002D3C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  7990  002D3E  0E58               	movlw	88
  7991  002D40  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  7992  002D42  0E99               	movlw	low _WHITE
  7993  002D44  6EF6               	movwf	tblptrl,c
  7994  002D46                     	if	1	;There is more than 1 active tblptr byte
  7995  002D46  0EFC               	movlw	high _WHITE
  7996  002D48  6EF7               	movwf	tblptrh,c
  7997  002D4A                     	endif
  7998  002D4A                     	if	1	;There are 3 active tblptr bytes
  7999  002D4A  0E00               	movlw	low (_WHITE shr (0+16))
  8000  002D4C  6EF8               	movwf	tblptru,c
  8001  002D4E                     	endif
  8002  002D4E  0009               	tblrd		*+
  8003  002D50  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8004  002D54  0009               	tblrd		*+
  8005  002D56  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8006  002D5A  0009               	tblrd		*+
  8007  002D5C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8008  002D60  000A               	tblrd		*-
  8009  002D62  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8010  002D66  0E68               	movlw	104
  8011  002D68  ECA8  F026         	call	_glcdDrawRectangle
  8012                           
  8013                           ;main.c: 1649: glcdDrawRectangle(27*4,28*4, 22*4, 24*4, WHITE);
  8014  002D6C  0E70               	movlw	112
  8015  002D6E  0100               	movlb	0	; () banked
  8016  002D70  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8017  002D72  0E58               	movlw	88
  8018  002D74  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8019  002D76  0E60               	movlw	96
  8020  002D78  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8021  002D7A  0E99               	movlw	low _WHITE
  8022  002D7C  6EF6               	movwf	tblptrl,c
  8023  002D7E                     	if	1	;There is more than 1 active tblptr byte
  8024  002D7E  0EFC               	movlw	high _WHITE
  8025  002D80  6EF7               	movwf	tblptrh,c
  8026  002D82                     	endif
  8027  002D82                     	if	1	;There are 3 active tblptr bytes
  8028  002D82  0E00               	movlw	low (_WHITE shr (0+16))
  8029  002D84  6EF8               	movwf	tblptru,c
  8030  002D86                     	endif
  8031  002D86  0009               	tblrd		*+
  8032  002D88  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8033  002D8C  0009               	tblrd		*+
  8034  002D8E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8035  002D92  0009               	tblrd		*+
  8036  002D94  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8037  002D98  000A               	tblrd		*-
  8038  002D9A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8039  002D9E  0E6C               	movlw	108
  8040  002DA0  ECA8  F026         	call	_glcdDrawRectangle
  8041                           
  8042                           ;main.c: 1650: glcdDrawRectangle(26*4,27*4, 20*4, 22*4, WHITE);
  8043  002DA4  0E6C               	movlw	108
  8044  002DA6  0100               	movlb	0	; () banked
  8045  002DA8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8046  002DAA  0E50               	movlw	80
  8047  002DAC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8048  002DAE  0E58               	movlw	88
  8049  002DB0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8050  002DB2  0E99               	movlw	low _WHITE
  8051  002DB4  6EF6               	movwf	tblptrl,c
  8052  002DB6                     	if	1	;There is more than 1 active tblptr byte
  8053  002DB6  0EFC               	movlw	high _WHITE
  8054  002DB8  6EF7               	movwf	tblptrh,c
  8055  002DBA                     	endif
  8056  002DBA                     	if	1	;There are 3 active tblptr bytes
  8057  002DBA  0E00               	movlw	low (_WHITE shr (0+16))
  8058  002DBC  6EF8               	movwf	tblptru,c
  8059  002DBE                     	endif
  8060  002DBE  0009               	tblrd		*+
  8061  002DC0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8062  002DC4  0009               	tblrd		*+
  8063  002DC6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8064  002DCA  0009               	tblrd		*+
  8065  002DCC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8066  002DD0  000A               	tblrd		*-
  8067  002DD2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8068  002DD6  0E68               	movlw	104
  8069  002DD8  ECA8  F026         	call	_glcdDrawRectangle
  8070                           
  8071                           ;main.c: 1652: glcdDrawRectangle(25*4,26*4, 22*4, 24*4, WHITE);
  8072  002DDC  0E68               	movlw	104
  8073  002DDE  0100               	movlb	0	; () banked
  8074  002DE0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8075  002DE2  0E58               	movlw	88
  8076  002DE4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8077  002DE6  0E60               	movlw	96
  8078  002DE8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8079  002DEA  0E99               	movlw	low _WHITE
  8080  002DEC  6EF6               	movwf	tblptrl,c
  8081  002DEE                     	if	1	;There is more than 1 active tblptr byte
  8082  002DEE  0EFC               	movlw	high _WHITE
  8083  002DF0  6EF7               	movwf	tblptrh,c
  8084  002DF2                     	endif
  8085  002DF2                     	if	1	;There are 3 active tblptr bytes
  8086  002DF2  0E00               	movlw	low (_WHITE shr (0+16))
  8087  002DF4  6EF8               	movwf	tblptru,c
  8088  002DF6                     	endif
  8089  002DF6  0009               	tblrd		*+
  8090  002DF8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8091  002DFC  0009               	tblrd		*+
  8092  002DFE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8093  002E02  0009               	tblrd		*+
  8094  002E04  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8095  002E08  000A               	tblrd		*-
  8096  002E0A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8097  002E0E  0E64               	movlw	100
  8098  002E10  ECA8  F026         	call	_glcdDrawRectangle
  8099                           
  8100                           ;main.c: 1653: glcdDrawRectangle(24*4,25*4, 24*4, 25*4, WHITE);
  8101  002E14  0E64               	movlw	100
  8102  002E16  0100               	movlb	0	; () banked
  8103  002E18  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8104  002E1A  0E60               	movlw	96
  8105  002E1C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8106  002E1E  0E64               	movlw	100
  8107  002E20  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8108  002E22  0E99               	movlw	low _WHITE
  8109  002E24  6EF6               	movwf	tblptrl,c
  8110  002E26                     	if	1	;There is more than 1 active tblptr byte
  8111  002E26  0EFC               	movlw	high _WHITE
  8112  002E28  6EF7               	movwf	tblptrh,c
  8113  002E2A                     	endif
  8114  002E2A                     	if	1	;There are 3 active tblptr bytes
  8115  002E2A  0E00               	movlw	low (_WHITE shr (0+16))
  8116  002E2C  6EF8               	movwf	tblptru,c
  8117  002E2E                     	endif
  8118  002E2E  0009               	tblrd		*+
  8119  002E30  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8120  002E34  0009               	tblrd		*+
  8121  002E36  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8122  002E3A  0009               	tblrd		*+
  8123  002E3C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8124  002E40  000A               	tblrd		*-
  8125  002E42  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8126  002E46  0E60               	movlw	96
  8127  002E48  ECA8  F026         	call	_glcdDrawRectangle
  8128                           
  8129                           ;main.c: 1654: glcdDrawRectangle(22*4,24*4, 25*4, 26*4, WHITE);
  8130  002E4C  0E60               	movlw	96
  8131  002E4E  0100               	movlb	0	; () banked
  8132  002E50  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8133  002E52  0E64               	movlw	100
  8134  002E54  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8135  002E56  0E68               	movlw	104
  8136  002E58  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8137  002E5A  0E99               	movlw	low _WHITE
  8138  002E5C  6EF6               	movwf	tblptrl,c
  8139  002E5E                     	if	1	;There is more than 1 active tblptr byte
  8140  002E5E  0EFC               	movlw	high _WHITE
  8141  002E60  6EF7               	movwf	tblptrh,c
  8142  002E62                     	endif
  8143  002E62                     	if	1	;There are 3 active tblptr bytes
  8144  002E62  0E00               	movlw	low (_WHITE shr (0+16))
  8145  002E64  6EF8               	movwf	tblptru,c
  8146  002E66                     	endif
  8147  002E66  0009               	tblrd		*+
  8148  002E68  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8149  002E6C  0009               	tblrd		*+
  8150  002E6E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8151  002E72  0009               	tblrd		*+
  8152  002E74  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8153  002E78  000A               	tblrd		*-
  8154  002E7A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8155  002E7E  0E58               	movlw	88
  8156  002E80  ECA8  F026         	call	_glcdDrawRectangle
  8157                           
  8158                           ;main.c: 1656: glcdDrawRectangle(20*4,22*4, 26*4, 27*4, WHITE);
  8159  002E84  0E58               	movlw	88
  8160  002E86  0100               	movlb	0	; () banked
  8161  002E88  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8162  002E8A  0E68               	movlw	104
  8163  002E8C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8164  002E8E  0E6C               	movlw	108
  8165  002E90  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8166  002E92  0E99               	movlw	low _WHITE
  8167  002E94  6EF6               	movwf	tblptrl,c
  8168  002E96                     	if	1	;There is more than 1 active tblptr byte
  8169  002E96  0EFC               	movlw	high _WHITE
  8170  002E98  6EF7               	movwf	tblptrh,c
  8171  002E9A                     	endif
  8172  002E9A                     	if	1	;There are 3 active tblptr bytes
  8173  002E9A  0E00               	movlw	low (_WHITE shr (0+16))
  8174  002E9C  6EF8               	movwf	tblptru,c
  8175  002E9E                     	endif
  8176  002E9E  0009               	tblrd		*+
  8177  002EA0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8178  002EA4  0009               	tblrd		*+
  8179  002EA6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8180  002EAA  0009               	tblrd		*+
  8181  002EAC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8182  002EB0  000A               	tblrd		*-
  8183  002EB2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8184  002EB6  0E50               	movlw	80
  8185  002EB8  ECA8  F026         	call	_glcdDrawRectangle
  8186                           
  8187                           ;main.c: 1657: glcdDrawRectangle(13*4,20*4, 27*4, 28*4, WHITE);
  8188  002EBC  0E50               	movlw	80
  8189  002EBE  0100               	movlb	0	; () banked
  8190  002EC0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8191  002EC2  0E6C               	movlw	108
  8192  002EC4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8193  002EC6  0E70               	movlw	112
  8194  002EC8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8195  002ECA  0E99               	movlw	low _WHITE
  8196  002ECC  6EF6               	movwf	tblptrl,c
  8197  002ECE                     	if	1	;There is more than 1 active tblptr byte
  8198  002ECE  0EFC               	movlw	high _WHITE
  8199  002ED0  6EF7               	movwf	tblptrh,c
  8200  002ED2                     	endif
  8201  002ED2                     	if	1	;There are 3 active tblptr bytes
  8202  002ED2  0E00               	movlw	low (_WHITE shr (0+16))
  8203  002ED4  6EF8               	movwf	tblptru,c
  8204  002ED6                     	endif
  8205  002ED6  0009               	tblrd		*+
  8206  002ED8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8207  002EDC  0009               	tblrd		*+
  8208  002EDE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8209  002EE2  0009               	tblrd		*+
  8210  002EE4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8211  002EE8  000A               	tblrd		*-
  8212  002EEA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8213  002EEE  0E34               	movlw	52
  8214  002EF0  ECA8  F026         	call	_glcdDrawRectangle
  8215                           
  8216                           ;main.c: 1658: glcdDrawRectangle(11*4,13*4, 26*4, 27*4, WHITE);
  8217  002EF4  0E34               	movlw	52
  8218  002EF6  0100               	movlb	0	; () banked
  8219  002EF8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8220  002EFA  0E68               	movlw	104
  8221  002EFC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8222  002EFE  0E6C               	movlw	108
  8223  002F00  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8224  002F02  0E99               	movlw	low _WHITE
  8225  002F04  6EF6               	movwf	tblptrl,c
  8226  002F06                     	if	1	;There is more than 1 active tblptr byte
  8227  002F06  0EFC               	movlw	high _WHITE
  8228  002F08  6EF7               	movwf	tblptrh,c
  8229  002F0A                     	endif
  8230  002F0A                     	if	1	;There are 3 active tblptr bytes
  8231  002F0A  0E00               	movlw	low (_WHITE shr (0+16))
  8232  002F0C  6EF8               	movwf	tblptru,c
  8233  002F0E                     	endif
  8234  002F0E  0009               	tblrd		*+
  8235  002F10  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8236  002F14  0009               	tblrd		*+
  8237  002F16  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8238  002F1A  0009               	tblrd		*+
  8239  002F1C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8240  002F20  000A               	tblrd		*-
  8241  002F22  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8242  002F26  0E2C               	movlw	44
  8243  002F28  ECA8  F026         	call	_glcdDrawRectangle
  8244                           
  8245                           ;main.c: 1660: glcdDrawRectangle(9*4,11*4, 25*4, 26*4, WHITE);
  8246  002F2C  0E2C               	movlw	44
  8247  002F2E  0100               	movlb	0	; () banked
  8248  002F30  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8249  002F32  0E64               	movlw	100
  8250  002F34  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8251  002F36  0E68               	movlw	104
  8252  002F38  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8253  002F3A  0E99               	movlw	low _WHITE
  8254  002F3C  6EF6               	movwf	tblptrl,c
  8255  002F3E                     	if	1	;There is more than 1 active tblptr byte
  8256  002F3E  0EFC               	movlw	high _WHITE
  8257  002F40  6EF7               	movwf	tblptrh,c
  8258  002F42                     	endif
  8259  002F42                     	if	1	;There are 3 active tblptr bytes
  8260  002F42  0E00               	movlw	low (_WHITE shr (0+16))
  8261  002F44  6EF8               	movwf	tblptru,c
  8262  002F46                     	endif
  8263  002F46  0009               	tblrd		*+
  8264  002F48  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8265  002F4C  0009               	tblrd		*+
  8266  002F4E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8267  002F52  0009               	tblrd		*+
  8268  002F54  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8269  002F58  000A               	tblrd		*-
  8270  002F5A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8271  002F5E  0E24               	movlw	36
  8272  002F60  ECA8  F026         	call	_glcdDrawRectangle
  8273                           
  8274                           ;main.c: 1661: glcdDrawRectangle(8*4,9*4, 24*4, 25*4, WHITE);
  8275  002F64  0E24               	movlw	36
  8276  002F66  0100               	movlb	0	; () banked
  8277  002F68  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8278  002F6A  0E60               	movlw	96
  8279  002F6C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8280  002F6E  0E64               	movlw	100
  8281  002F70  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8282  002F72  0E99               	movlw	low _WHITE
  8283  002F74  6EF6               	movwf	tblptrl,c
  8284  002F76                     	if	1	;There is more than 1 active tblptr byte
  8285  002F76  0EFC               	movlw	high _WHITE
  8286  002F78  6EF7               	movwf	tblptrh,c
  8287  002F7A                     	endif
  8288  002F7A                     	if	1	;There are 3 active tblptr bytes
  8289  002F7A  0E00               	movlw	low (_WHITE shr (0+16))
  8290  002F7C  6EF8               	movwf	tblptru,c
  8291  002F7E                     	endif
  8292  002F7E  0009               	tblrd		*+
  8293  002F80  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8294  002F84  0009               	tblrd		*+
  8295  002F86  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8296  002F8A  0009               	tblrd		*+
  8297  002F8C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8298  002F90  000A               	tblrd		*-
  8299  002F92  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8300  002F96  0E20               	movlw	32
  8301  002F98  ECA8  F026         	call	_glcdDrawRectangle
  8302                           
  8303                           ;main.c: 1662: glcdDrawRectangle(7*4,8*4, 22*4, 24*4, WHITE);
  8304  002F9C  0E20               	movlw	32
  8305  002F9E  0100               	movlb	0	; () banked
  8306  002FA0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8307  002FA2  0E58               	movlw	88
  8308  002FA4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8309  002FA6  0E60               	movlw	96
  8310  002FA8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8311  002FAA  0E99               	movlw	low _WHITE
  8312  002FAC  6EF6               	movwf	tblptrl,c
  8313  002FAE                     	if	1	;There is more than 1 active tblptr byte
  8314  002FAE  0EFC               	movlw	high _WHITE
  8315  002FB0  6EF7               	movwf	tblptrh,c
  8316  002FB2                     	endif
  8317  002FB2                     	if	1	;There are 3 active tblptr bytes
  8318  002FB2  0E00               	movlw	low (_WHITE shr (0+16))
  8319  002FB4  6EF8               	movwf	tblptru,c
  8320  002FB6                     	endif
  8321  002FB6  0009               	tblrd		*+
  8322  002FB8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8323  002FBC  0009               	tblrd		*+
  8324  002FBE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8325  002FC2  0009               	tblrd		*+
  8326  002FC4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8327  002FC8  000A               	tblrd		*-
  8328  002FCA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8329  002FCE  0E1C               	movlw	28
  8330  002FD0  ECA8  F026         	call	_glcdDrawRectangle
  8331                           
  8332                           ;main.c: 1664: glcdDrawRectangle(6*4,7*4, 20*4, 22*4, WHITE);
  8333  002FD4  0E1C               	movlw	28
  8334  002FD6  0100               	movlb	0	; () banked
  8335  002FD8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8336  002FDA  0E50               	movlw	80
  8337  002FDC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8338  002FDE  0E58               	movlw	88
  8339  002FE0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8340  002FE2  0E99               	movlw	low _WHITE
  8341  002FE4  6EF6               	movwf	tblptrl,c
  8342  002FE6                     	if	1	;There is more than 1 active tblptr byte
  8343  002FE6  0EFC               	movlw	high _WHITE
  8344  002FE8  6EF7               	movwf	tblptrh,c
  8345  002FEA                     	endif
  8346  002FEA                     	if	1	;There are 3 active tblptr bytes
  8347  002FEA  0E00               	movlw	low (_WHITE shr (0+16))
  8348  002FEC  6EF8               	movwf	tblptru,c
  8349  002FEE                     	endif
  8350  002FEE  0009               	tblrd		*+
  8351  002FF0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8352  002FF4  0009               	tblrd		*+
  8353  002FF6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8354  002FFA  0009               	tblrd		*+
  8355  002FFC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8356  003000  000A               	tblrd		*-
  8357  003002  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8358  003006  0E18               	movlw	24
  8359  003008  ECA8  F026         	call	_glcdDrawRectangle
  8360                           
  8361                           ;main.c: 1668: glcdDrawRectangle(13*4,14*4, 14*4, 17*4, WHITE);
  8362  00300C  0E38               	movlw	56
  8363  00300E  0100               	movlb	0	; () banked
  8364  003010  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8365  003012  0E38               	movlw	56
  8366  003014  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8367  003016  0E44               	movlw	68
  8368  003018  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8369  00301A  0E99               	movlw	low _WHITE
  8370  00301C  6EF6               	movwf	tblptrl,c
  8371  00301E                     	if	1	;There is more than 1 active tblptr byte
  8372  00301E  0EFC               	movlw	high _WHITE
  8373  003020  6EF7               	movwf	tblptrh,c
  8374  003022                     	endif
  8375  003022                     	if	1	;There are 3 active tblptr bytes
  8376  003022  0E00               	movlw	low (_WHITE shr (0+16))
  8377  003024  6EF8               	movwf	tblptru,c
  8378  003026                     	endif
  8379  003026  0009               	tblrd		*+
  8380  003028  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8381  00302C  0009               	tblrd		*+
  8382  00302E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8383  003032  0009               	tblrd		*+
  8384  003034  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8385  003038  000A               	tblrd		*-
  8386  00303A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8387  00303E  0E34               	movlw	52
  8388  003040  ECA8  F026         	call	_glcdDrawRectangle
  8389                           
  8390                           ;main.c: 1669: glcdDrawRectangle(14*4,15*4, 13*4, 14*4, WHITE);
  8391  003044  0E3C               	movlw	60
  8392  003046  0100               	movlb	0	; () banked
  8393  003048  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8394  00304A  0E34               	movlw	52
  8395  00304C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8396  00304E  0E38               	movlw	56
  8397  003050  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8398  003052  0E99               	movlw	low _WHITE
  8399  003054  6EF6               	movwf	tblptrl,c
  8400  003056                     	if	1	;There is more than 1 active tblptr byte
  8401  003056  0EFC               	movlw	high _WHITE
  8402  003058  6EF7               	movwf	tblptrh,c
  8403  00305A                     	endif
  8404  00305A                     	if	1	;There are 3 active tblptr bytes
  8405  00305A  0E00               	movlw	low (_WHITE shr (0+16))
  8406  00305C  6EF8               	movwf	tblptru,c
  8407  00305E                     	endif
  8408  00305E  0009               	tblrd		*+
  8409  003060  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8410  003064  0009               	tblrd		*+
  8411  003066  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8412  00306A  0009               	tblrd		*+
  8413  00306C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8414  003070  000A               	tblrd		*-
  8415  003072  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8416  003076  0E38               	movlw	56
  8417  003078  ECA8  F026         	call	_glcdDrawRectangle
  8418                           
  8419                           ;main.c: 1670: glcdDrawRectangle(6*4,7*4, 11*4, 13*4, WHITE);
  8420  00307C  0E1C               	movlw	28
  8421  00307E  0100               	movlb	0	; () banked
  8422  003080  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8423  003082  0E2C               	movlw	44
  8424  003084  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8425  003086  0E34               	movlw	52
  8426  003088  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8427  00308A  0E99               	movlw	low _WHITE
  8428  00308C  6EF6               	movwf	tblptrl,c
  8429  00308E                     	if	1	;There is more than 1 active tblptr byte
  8430  00308E  0EFC               	movlw	high _WHITE
  8431  003090  6EF7               	movwf	tblptrh,c
  8432  003092                     	endif
  8433  003092                     	if	1	;There are 3 active tblptr bytes
  8434  003092  0E00               	movlw	low (_WHITE shr (0+16))
  8435  003094  6EF8               	movwf	tblptru,c
  8436  003096                     	endif
  8437  003096  0009               	tblrd		*+
  8438  003098  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8439  00309C  0009               	tblrd		*+
  8440  00309E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8441  0030A2  0009               	tblrd		*+
  8442  0030A4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8443  0030A8  000A               	tblrd		*-
  8444  0030AA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8445  0030AE  0E18               	movlw	24
  8446  0030B0  ECA8  F026         	call	_glcdDrawRectangle
  8447                           
  8448                           ;main.c: 1672: glcdDrawRectangle(15*4,18*4, 12*4, 13*4, WHITE);
  8449  0030B4  0E48               	movlw	72
  8450  0030B6  0100               	movlb	0	; () banked
  8451  0030B8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8452  0030BA  0E30               	movlw	48
  8453  0030BC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8454  0030BE  0E34               	movlw	52
  8455  0030C0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8456  0030C2  0E99               	movlw	low _WHITE
  8457  0030C4  6EF6               	movwf	tblptrl,c
  8458  0030C6                     	if	1	;There is more than 1 active tblptr byte
  8459  0030C6  0EFC               	movlw	high _WHITE
  8460  0030C8  6EF7               	movwf	tblptrh,c
  8461  0030CA                     	endif
  8462  0030CA                     	if	1	;There are 3 active tblptr bytes
  8463  0030CA  0E00               	movlw	low (_WHITE shr (0+16))
  8464  0030CC  6EF8               	movwf	tblptru,c
  8465  0030CE                     	endif
  8466  0030CE  0009               	tblrd		*+
  8467  0030D0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8468  0030D4  0009               	tblrd		*+
  8469  0030D6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8470  0030DA  0009               	tblrd		*+
  8471  0030DC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8472  0030E0  000A               	tblrd		*-
  8473  0030E2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8474  0030E6  0E3C               	movlw	60
  8475  0030E8  ECA8  F026         	call	_glcdDrawRectangle
  8476                           
  8477                           ;main.c: 1673: glcdDrawRectangle(18*4,19*4, 13*4, 14*4, WHITE);
  8478  0030EC  0E4C               	movlw	76
  8479  0030EE  0100               	movlb	0	; () banked
  8480  0030F0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8481  0030F2  0E34               	movlw	52
  8482  0030F4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8483  0030F6  0E38               	movlw	56
  8484  0030F8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8485  0030FA  0E99               	movlw	low _WHITE
  8486  0030FC  6EF6               	movwf	tblptrl,c
  8487  0030FE                     	if	1	;There is more than 1 active tblptr byte
  8488  0030FE  0EFC               	movlw	high _WHITE
  8489  003100  6EF7               	movwf	tblptrh,c
  8490  003102                     	endif
  8491  003102                     	if	1	;There are 3 active tblptr bytes
  8492  003102  0E00               	movlw	low (_WHITE shr (0+16))
  8493  003104  6EF8               	movwf	tblptru,c
  8494  003106                     	endif
  8495  003106  0009               	tblrd		*+
  8496  003108  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8497  00310C  0009               	tblrd		*+
  8498  00310E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8499  003112  0009               	tblrd		*+
  8500  003114  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8501  003118  000A               	tblrd		*-
  8502  00311A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8503  00311E  0E48               	movlw	72
  8504  003120  ECA8  F026         	call	_glcdDrawRectangle
  8505                           
  8506                           ;main.c: 1674: glcdDrawRectangle(19*4,20*4, 14*4, 17*4, WHITE);
  8507  003124  0E50               	movlw	80
  8508  003126  0100               	movlb	0	; () banked
  8509  003128  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8510  00312A  0E38               	movlw	56
  8511  00312C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8512  00312E  0E44               	movlw	68
  8513  003130  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8514  003132  0E99               	movlw	low _WHITE
  8515  003134  6EF6               	movwf	tblptrl,c
  8516  003136                     	if	1	;There is more than 1 active tblptr byte
  8517  003136  0EFC               	movlw	high _WHITE
  8518  003138  6EF7               	movwf	tblptrh,c
  8519  00313A                     	endif
  8520  00313A                     	if	1	;There are 3 active tblptr bytes
  8521  00313A  0E00               	movlw	low (_WHITE shr (0+16))
  8522  00313C  6EF8               	movwf	tblptru,c
  8523  00313E                     	endif
  8524  00313E  0009               	tblrd		*+
  8525  003140  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8526  003144  0009               	tblrd		*+
  8527  003146  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8528  00314A  0009               	tblrd		*+
  8529  00314C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8530  003150  000A               	tblrd		*-
  8531  003152  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8532  003156  0E4C               	movlw	76
  8533  003158  ECA8  F026         	call	_glcdDrawRectangle
  8534                           
  8535                           ;main.c: 1675: glcdDrawRectangle(18*4,19*4, 17*4, 18*4, WHITE);
  8536  00315C  0E4C               	movlw	76
  8537  00315E  0100               	movlb	0	; () banked
  8538  003160  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8539  003162  0E44               	movlw	68
  8540  003164  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8541  003166  0E48               	movlw	72
  8542  003168  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8543  00316A  0E99               	movlw	low _WHITE
  8544  00316C  6EF6               	movwf	tblptrl,c
  8545  00316E                     	if	1	;There is more than 1 active tblptr byte
  8546  00316E  0EFC               	movlw	high _WHITE
  8547  003170  6EF7               	movwf	tblptrh,c
  8548  003172                     	endif
  8549  003172                     	if	1	;There are 3 active tblptr bytes
  8550  003172  0E00               	movlw	low (_WHITE shr (0+16))
  8551  003174  6EF8               	movwf	tblptru,c
  8552  003176                     	endif
  8553  003176  0009               	tblrd		*+
  8554  003178  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8555  00317C  0009               	tblrd		*+
  8556  00317E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8557  003182  0009               	tblrd		*+
  8558  003184  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8559  003188  000A               	tblrd		*-
  8560  00318A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8561  00318E  0E48               	movlw	72
  8562  003190  ECA8  F026         	call	_glcdDrawRectangle
  8563                           
  8564                           ;main.c: 1677: glcdDrawRectangle(15*4,18*4, 18*4, 19*4, WHITE);
  8565  003194  0E48               	movlw	72
  8566  003196  0100               	movlb	0	; () banked
  8567  003198  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8568  00319A  0E48               	movlw	72
  8569  00319C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8570  00319E  0E4C               	movlw	76
  8571  0031A0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8572  0031A2  0E99               	movlw	low _WHITE
  8573  0031A4  6EF6               	movwf	tblptrl,c
  8574  0031A6                     	if	1	;There is more than 1 active tblptr byte
  8575  0031A6  0EFC               	movlw	high _WHITE
  8576  0031A8  6EF7               	movwf	tblptrh,c
  8577  0031AA                     	endif
  8578  0031AA                     	if	1	;There are 3 active tblptr bytes
  8579  0031AA  0E00               	movlw	low (_WHITE shr (0+16))
  8580  0031AC  6EF8               	movwf	tblptru,c
  8581  0031AE                     	endif
  8582  0031AE  0009               	tblrd		*+
  8583  0031B0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8584  0031B4  0009               	tblrd		*+
  8585  0031B6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8586  0031BA  0009               	tblrd		*+
  8587  0031BC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8588  0031C0  000A               	tblrd		*-
  8589  0031C2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8590  0031C6  0E3C               	movlw	60
  8591  0031C8  ECA8  F026         	call	_glcdDrawRectangle
  8592                           
  8593                           ;main.c: 1678: glcdDrawRectangle(14*4,15*4, 16*4, 17*4, WHITE);
  8594  0031CC  0E3C               	movlw	60
  8595  0031CE  0100               	movlb	0	; () banked
  8596  0031D0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8597  0031D2  0E40               	movlw	64
  8598  0031D4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8599  0031D6  0E44               	movlw	68
  8600  0031D8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8601  0031DA  0E99               	movlw	low _WHITE
  8602  0031DC  6EF6               	movwf	tblptrl,c
  8603  0031DE                     	if	1	;There is more than 1 active tblptr byte
  8604  0031DE  0EFC               	movlw	high _WHITE
  8605  0031E0  6EF7               	movwf	tblptrh,c
  8606  0031E2                     	endif
  8607  0031E2                     	if	1	;There are 3 active tblptr bytes
  8608  0031E2  0E00               	movlw	low (_WHITE shr (0+16))
  8609  0031E4  6EF8               	movwf	tblptru,c
  8610  0031E6                     	endif
  8611  0031E6  0009               	tblrd		*+
  8612  0031E8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8613  0031EC  0009               	tblrd		*+
  8614  0031EE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8615  0031F2  0009               	tblrd		*+
  8616  0031F4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8617  0031F8  000A               	tblrd		*-
  8618  0031FA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8619  0031FE  0E38               	movlw	56
  8620  003200  ECA8  F026         	call	_glcdDrawRectangle
  8621                           
  8622                           ;main.c: 1679: glcdDrawRectangle(13*4,14*4, 14*4, 17*4, WHITE);
  8623  003204  0E38               	movlw	56
  8624  003206  0100               	movlb	0	; () banked
  8625  003208  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  8626  00320A  0E38               	movlw	56
  8627  00320C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  8628  00320E  0E44               	movlw	68
  8629  003210  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  8630  003212  0E99               	movlw	low _WHITE
  8631  003214  6EF6               	movwf	tblptrl,c
  8632  003216                     	if	1	;There is more than 1 active tblptr byte
  8633  003216  0EFC               	movlw	high _WHITE
  8634  003218  6EF7               	movwf	tblptrh,c
  8635  00321A                     	endif
  8636  00321A                     	if	1	;There are 3 active tblptr bytes
  8637  00321A  0E00               	movlw	low (_WHITE shr (0+16))
  8638  00321C  6EF8               	movwf	tblptru,c
  8639  00321E                     	endif
  8640  00321E  0009               	tblrd		*+
  8641  003220  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  8642  003224  0009               	tblrd		*+
  8643  003226  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  8644  00322A  0009               	tblrd		*+
  8645  00322C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  8646  003230  000A               	tblrd		*-
  8647  003232  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  8648  003236  0E34               	movlw	52
  8649  003238  ECA8  F026         	call	_glcdDrawRectangle
  8650                           
  8651                           ;main.c: 1680: I2C_Master_Init(100000);
  8652  00323C  0EA0               	movlw	160
  8653  00323E  0100               	movlb	0	; () banked
  8654  003240  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  8655  003242  0E86               	movlw	134
  8656  003244  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  8657  003246  0E01               	movlw	1
  8658  003248  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  8659  00324A  0E00               	movlw	0
  8660  00324C  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  8661  00324E  EC26  F02E         	call	_I2C_Master_Init	;wreg free
  8662  003252  0012               	return		;funcret
  8663  003254                     __end_of_drawWasher:
  8664                           	opt stack 0
  8665                           tblptru	equ	0xFF8
  8666                           tblptrh	equ	0xFF7
  8667                           tblptrl	equ	0xFF6
  8668                           tablat	equ	0xFF5
  8669                           intcon	equ	0xFF2
  8670                           intcon3	equ	0xFF0
  8671                           postinc0	equ	0xFEE
  8672                           wreg	equ	0xFE8
  8673                           postdec1	equ	0xFE5
  8674                           fsr1l	equ	0xFE1
  8675                           indf2	equ	0xFDF
  8676                           postinc2	equ	0xFDE
  8677                           postdec2	equ	0xFDD
  8678                           fsr2h	equ	0xFDA
  8679                           fsr2l	equ	0xFD9
  8680                           status	equ	0xFD8
  8681                           
  8682 ;; *************** function _Spacer_remain *****************
  8683 ;; Defined at:
  8684 ;;		line 1532 in file "main.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;  time            2   42[BANK0 ] int 
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;		None
  8689 ;; Return value:  Size  Location     Type
  8690 ;;                  1    wreg      void 
  8691 ;; Registers used:
  8692 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8698 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;Total ram usage:        4 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    9
  8705 ;; This function calls:
  8706 ;;		_I2C_sendData
  8707 ;;		_drawSpacer
  8708 ;;		_lcdInst
  8709 ;;		_printf
  8710 ;; This function is called by:
  8711 ;;		_main
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text12
  8716  005276                     __ptext12:
  8717                           	opt stack 0
  8718  005276                     _Spacer_remain:
  8719                           	opt stack 21
  8720                           
  8721                           ;main.c: 1533: drawSpacer();
  8722                           
  8723                           ;incstack = 0
  8724  005276  EC00  F021         	call	_drawSpacer	;wreg free
  8725                           
  8726                           ;main.c: 1534: _delay((unsigned long)((100)*(32000000/4000.0)));
  8727  00527A  0E05               	movlw	5
  8728  00527C  0100               	movlb	0	; () banked
  8729  00527E  6FF0               	movwf	(??_Spacer_remain+1)& (0+255),b
  8730  005280  0E0F               	movlw	15
  8731  005282  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8732  005284  0EF1               	movlw	241
  8733  005286                     u7097:
  8734  005286  2EE8               	decfsz	wreg,f,c
  8735  005288  D7FE               	bra	u7097
  8736  00528A  2FEF               	decfsz	??_Spacer_remain& (0+255),f,b
  8737  00528C  D7FC               	bra	u7097
  8738  00528E  2FF0               	decfsz	(??_Spacer_remain+1)& (0+255),f,b
  8739  005290  D7FA               	bra	u7097
  8740                           
  8741                           ;main.c: 1535: I2C_sendData('9');
  8742  005292  0E39               	movlw	57
  8743  005294  EC86  F030         	call	_I2C_sendData
  8744                           
  8745                           ;main.c: 1536: while(EndOfProgram != 1 && S_spacingTime < time){
  8746  005298  D026               	goto	l769
  8747  00529A                     
  8748                           ;main.c: 1537: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  8749  00529A  0E01               	movlw	1
  8750  00529C  ECEB  F030         	call	_lcdInst
  8751  0052A0  0E9C               	movlw	156
  8752  0052A2  0100               	movlb	0	; () banked
  8753  0052A4  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8754  0052A6  0ED7               	movlw	215
  8755  0052A8                     u7107:
  8756  0052A8  2EE8               	decfsz	wreg,f,c
  8757  0052AA  D7FE               	bra	u7107
  8758  0052AC  2FEF               	decfsz	??_Spacer_remain& (0+255),f,b
  8759  0052AE  D7FC               	bra	u7107
  8760                           
  8761                           ;main.c: 1538: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  8762  0052B0  0E80               	movlw	128
  8763  0052B2  ECEB  F030         	call	_lcdInst
  8764  0052B6  0E34               	movlw	52
  8765  0052B8  0100               	movlb	0	; () banked
  8766  0052BA  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8767  0052BC  0EF1               	movlw	241
  8768  0052BE                     u7117:
  8769  0052BE  2EE8               	decfsz	wreg,f,c
  8770  0052C0  D7FE               	bra	u7117
  8771  0052C2  2FEF               	decfsz	??_Spacer_remain& (0+255),f,b
  8772  0052C4  D7FC               	bra	u7117
  8773  0052C6  D000               	nop2	
  8774                           
  8775                           ;main.c: 1539: S_spacingTime +=30;
  8776  0052C8  0E1E               	movlw	30
  8777  0052CA  0100               	movlb	0	; () banked
  8778  0052CC  2799               	addwf	_S_spacingTime& (0+255),f,b
  8779  0052CE  0E00               	movlw	0
  8780  0052D0  239A               	addwfc	(_S_spacingTime+1)& (0+255),f,b
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;main.c: 1540: printf("S:%d",S_counter);
  8784  0052D2  0ED9               	movlw	low STR_68
  8785  0052D4  6FD1               	movwf	printf@f& (0+255),b
  8786  0052D6  0EFF               	movlw	high STR_68
  8787  0052D8  6FD2               	movwf	(printf@f+1)& (0+255),b
  8788  0052DA  C0AB  F0D3         	movff	_S_counter,?_printf+2
  8789  0052DE  C0AC  F0D4         	movff	_S_counter+1,?_printf+3
  8790  0052E2  EC2A  F019         	call	_printf	;wreg free
  8791  0052E6                     l769:
  8792  0052E6  0100               	movlb	0	; () banked
  8793  0052E8  05BB               	decf	_EndOfProgram& (0+255),w,b
  8794  0052EA  B4D8               	btfsc	status,2,c
  8795  0052EC  D00A               	goto	u4360
  8796                           
  8797                           ; BSR set to: 0
  8798  0052EE  51ED               	movf	Spacer_remain@time& (0+255),w,b
  8799  0052F0  5D99               	subwf	_S_spacingTime& (0+255),w,b
  8800  0052F2  519A               	movf	(_S_spacingTime+1)& (0+255),w,b
  8801  0052F4  0A80               	xorlw	128
  8802  0052F6  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8803  0052F8  51EE               	movf	(Spacer_remain@time+1)& (0+255),w,b
  8804  0052FA  0A80               	xorlw	128
  8805  0052FC  59EF               	subwfb	??_Spacer_remain& (0+255),w,b
  8806  0052FE  A0D8               	btfss	status,0,c
  8807  005300  D7CC               	goto	l770
  8808  005302                     u4360:
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;main.c: 1541: }
  8812                           ;main.c: 1542: S_remain = S_counter;
  8813                           
  8814                           ; BSR set to: 0
  8815  005302  C0AB  F0A1         	movff	_S_counter,_S_remain
  8816  005306  C0AC  F0A2         	movff	_S_counter+1,_S_remain+1
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;main.c: 1543: I2C_sendData(10);
  8820  00530A  0E0A               	movlw	10
  8821  00530C  EC86  F030         	call	_I2C_sendData
  8822                           
  8823                           ;main.c: 1544: if(EndOfProgram != 1){
  8824  005310  0100               	movlb	0	; () banked
  8825  005312  05BB               	decf	_EndOfProgram& (0+255),w,b
  8826  005314  B4D8               	btfsc	status,2,c
  8827  005316  0012               	return	
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;main.c: 1545: _delay((unsigned long)((100)*(32000000/4000.0)));
  8831  005318  0E05               	movlw	5
  8832  00531A  0100               	movlb	0	; () banked
  8833  00531C  6FF0               	movwf	(??_Spacer_remain+1)& (0+255),b
  8834  00531E  0E0F               	movlw	15
  8835  005320  6FEF               	movwf	??_Spacer_remain& (0+255),b
  8836  005322  0EF1               	movlw	241
  8837  005324                     u7127:
  8838  005324  2EE8               	decfsz	wreg,f,c
  8839  005326  D7FE               	bra	u7127
  8840  005328  2FEF               	decfsz	??_Spacer_remain& (0+255),f,b
  8841  00532A  D7FC               	bra	u7127
  8842  00532C  2FF0               	decfsz	(??_Spacer_remain+1)& (0+255),f,b
  8843  00532E  D7FA               	bra	u7127
  8844  005330  0012               	return	
  8845  005332                     __end_of_Spacer_remain:
  8846                           	opt stack 0
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           intcon	equ	0xFF2
  8852                           intcon3	equ	0xFF0
  8853                           postinc0	equ	0xFEE
  8854                           wreg	equ	0xFE8
  8855                           postdec1	equ	0xFE5
  8856                           fsr1l	equ	0xFE1
  8857                           indf2	equ	0xFDF
  8858                           postinc2	equ	0xFDE
  8859                           postdec2	equ	0xFDD
  8860                           fsr2h	equ	0xFDA
  8861                           fsr2l	equ	0xFD9
  8862                           status	equ	0xFD8
  8863                           
  8864 ;; *************** function _Spacer_dispense *****************
  8865 ;; Defined at:
  8866 ;;		line 1333 in file "main.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  S_max           2   42[BANK0 ] int 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;		None
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      void 
  8873 ;; Registers used:
  8874 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8880 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;Total ram usage:        4 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    9
  8887 ;; This function calls:
  8888 ;;		_I2C_sendData
  8889 ;;		_drawSpacer
  8890 ;;		_lcdInst
  8891 ;;		_printf
  8892 ;; This function is called by:
  8893 ;;		_main
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text13
  8898  0055F8                     __ptext13:
  8899                           	opt stack 0
  8900  0055F8                     _Spacer_dispense:
  8901                           	opt stack 21
  8902                           
  8903                           ;main.c: 1334: if (S_max == 0){
  8904                           
  8905                           ;incstack = 0
  8906  0055F8  0100               	movlb	0	; () banked
  8907  0055FA  51ED               	movf	Spacer_dispense@S_max& (0+255),w,b
  8908  0055FC  11EE               	iorwf	(Spacer_dispense@S_max+1)& (0+255),w,b
  8909  0055FE  B4D8               	btfsc	status,2,c
  8910  005600  0012               	return	
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;main.c: 1336: }
  8914                           ;main.c: 1337: drawSpacer();
  8915                           
  8916                           ; BSR set to: 0
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;main.c: 1335: return;
  8920  005602  EC00  F021         	call	_drawSpacer	;wreg free
  8921                           
  8922                           ;main.c: 1338: _delay((unsigned long)((100)*(32000000/4000.0)));
  8923  005606  0E05               	movlw	5
  8924  005608  0100               	movlb	0	; () banked
  8925  00560A  6FF0               	movwf	(??_Spacer_dispense+1)& (0+255),b
  8926  00560C  0E0F               	movlw	15
  8927  00560E  6FEF               	movwf	??_Spacer_dispense& (0+255),b
  8928  005610  0EF1               	movlw	241
  8929  005612                     u7137:
  8930  005612  2EE8               	decfsz	wreg,f,c
  8931  005614  D7FE               	bra	u7137
  8932  005616  2FEF               	decfsz	??_Spacer_dispense& (0+255),f,b
  8933  005618  D7FC               	bra	u7137
  8934  00561A  2FF0               	decfsz	(??_Spacer_dispense+1)& (0+255),f,b
  8935  00561C  D7FA               	bra	u7137
  8936                           
  8937                           ;main.c: 1339: I2C_sendData('9');
  8938  00561E  0E39               	movlw	57
  8939  005620  EC86  F030         	call	_I2C_sendData
  8940                           
  8941                           ;main.c: 1340: S_counter = 0;
  8942  005624  0E00               	movlw	0
  8943  005626  0100               	movlb	0	; () banked
  8944  005628  6FAC               	movwf	(_S_counter+1)& (0+255),b
  8945  00562A  0E00               	movlw	0
  8946  00562C  6FAB               	movwf	_S_counter& (0+255),b
  8947                           
  8948                           ;main.c: 1341: while(NeedToCloseLid != 1 && S_counter < S_max){
  8949  00562E  D022               	goto	l695
  8950  005630                     
  8951                           ; BSR set to: 0
  8952                           ;main.c: 1343: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  8953                           
  8954                           ; BSR set to: 0
  8955  005630  0E80               	movlw	128
  8956  005632  ECEB  F030         	call	_lcdInst
  8957  005636  0E34               	movlw	52
  8958  005638  0100               	movlb	0	; () banked
  8959  00563A  6FEF               	movwf	??_Spacer_dispense& (0+255),b
  8960  00563C  0EF1               	movlw	241
  8961  00563E                     u7147:
  8962  00563E  2EE8               	decfsz	wreg,f,c
  8963  005640  D7FE               	bra	u7147
  8964  005642  2FEF               	decfsz	??_Spacer_dispense& (0+255),f,b
  8965  005644  D7FC               	bra	u7147
  8966  005646  D000               	nop2	
  8967                           
  8968                           ;main.c: 1344: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  8969  005648  0E01               	movlw	1
  8970  00564A  ECEB  F030         	call	_lcdInst
  8971  00564E  0E9C               	movlw	156
  8972  005650  0100               	movlb	0	; () banked
  8973  005652  6FEF               	movwf	??_Spacer_dispense& (0+255),b
  8974  005654  0ED7               	movlw	215
  8975  005656                     u7157:
  8976  005656  2EE8               	decfsz	wreg,f,c
  8977  005658  D7FE               	bra	u7157
  8978  00565A  2FEF               	decfsz	??_Spacer_dispense& (0+255),f,b
  8979  00565C  D7FC               	bra	u7157
  8980                           
  8981                           ;main.c: 1345: printf("S:%d", S_counter);
  8982  00565E  0ED9               	movlw	low STR_68
  8983  005660  0100               	movlb	0	; () banked
  8984  005662  6FD1               	movwf	printf@f& (0+255),b
  8985  005664  0EFF               	movlw	high STR_68
  8986  005666  6FD2               	movwf	(printf@f+1)& (0+255),b
  8987  005668  C0AB  F0D3         	movff	_S_counter,?_printf+2
  8988  00566C  C0AC  F0D4         	movff	_S_counter+1,?_printf+3
  8989  005670  EC2A  F019         	call	_printf	;wreg free
  8990  005674                     l695:
  8991  005674  0100               	movlb	0	; () banked
  8992  005676  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  8993  005678  B4D8               	btfsc	status,2,c
  8994  00567A  D00A               	goto	u4250
  8995                           
  8996                           ; BSR set to: 0
  8997  00567C  51ED               	movf	Spacer_dispense@S_max& (0+255),w,b
  8998  00567E  5DAB               	subwf	_S_counter& (0+255),w,b
  8999  005680  51AC               	movf	(_S_counter+1)& (0+255),w,b
  9000  005682  0A80               	xorlw	128
  9001  005684  6FEF               	movwf	??_Spacer_dispense& (0+255),b
  9002  005686  51EE               	movf	(Spacer_dispense@S_max+1)& (0+255),w,b
  9003  005688  0A80               	xorlw	128
  9004  00568A  59EF               	subwfb	??_Spacer_dispense& (0+255),w,b
  9005  00568C  A0D8               	btfss	status,0,c
  9006  00568E  D7D0               	goto	l696
  9007  005690                     u4250:
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;main.c: 1346: }
  9011                           ;main.c: 1347: I2C_sendData(10);
  9012                           
  9013                           ; BSR set to: 0
  9014                           
  9015                           ; BSR set to: 0
  9016  005690  0E0A               	movlw	10
  9017  005692  EC86  F030         	call	_I2C_sendData
  9018  005696  0012               	return		;funcret
  9019  005698                     __end_of_Spacer_dispense:
  9020                           	opt stack 0
  9021                           tblptru	equ	0xFF8
  9022                           tblptrh	equ	0xFF7
  9023                           tblptrl	equ	0xFF6
  9024                           tablat	equ	0xFF5
  9025                           intcon	equ	0xFF2
  9026                           intcon3	equ	0xFF0
  9027                           postinc0	equ	0xFEE
  9028                           wreg	equ	0xFE8
  9029                           postdec1	equ	0xFE5
  9030                           fsr1l	equ	0xFE1
  9031                           indf2	equ	0xFDF
  9032                           postinc2	equ	0xFDE
  9033                           postdec2	equ	0xFDD
  9034                           fsr2h	equ	0xFDA
  9035                           fsr2l	equ	0xFD9
  9036                           status	equ	0xFD8
  9037                           
  9038 ;; *************** function _drawSpacer *****************
  9039 ;; Defined at:
  9040 ;;		line 1723 in file "main.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;		None
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;		None
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  1    wreg      void 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;Total ram usage:        1 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    8
  9061 ;; This function calls:
  9062 ;;		_I2C_Master_Init
  9063 ;;		_glcdDrawRectangle
  9064 ;;		_spiInit
  9065 ;; This function is called by:
  9066 ;;		_Spacer_dispense
  9067 ;;		_Spacer_remain
  9068 ;;		_bolt_spacer_remain
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text14
  9073  004200                     __ptext14:
  9074                           	opt stack 0
  9075  004200                     _drawSpacer:
  9076                           	opt stack 21
  9077                           
  9078                           ;main.c: 1724: spiInit(4);
  9079                           
  9080                           ;incstack = 0
  9081  004200  0E04               	movlw	4
  9082  004202  ECFD  F02F         	call	_spiInit
  9083                           
  9084                           ;main.c: 1725: _delay((unsigned long)((20)*(32000000/4000.0)));
  9085  004206  0ED0               	movlw	208
  9086  004208  0100               	movlb	0	; () banked
  9087  00420A  6FE4               	movwf	??_drawSpacer& (0+255),b
  9088  00420C  0EC9               	movlw	201
  9089  00420E                     u7167:
  9090  00420E  2EE8               	decfsz	wreg,f,c
  9091  004210  D7FE               	bra	u7167
  9092  004212  2FE4               	decfsz	??_drawSpacer& (0+255),f,b
  9093  004214  D7FC               	bra	u7167
  9094  004216  D000               	nop2	
  9095                           
  9096                           ;main.c: 1726: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  9097  004218  0EE9               	movlw	low _GLCD_SIZE_HORZ
  9098  00421A  6EF6               	movwf	tblptrl,c
  9099  00421C                     	if	1	;There is more than 1 active tblptr byte
  9100  00421C  0EFC               	movlw	high _GLCD_SIZE_HORZ
  9101  00421E  6EF7               	movwf	tblptrh,c
  9102  004220                     	endif
  9103  004220                     	if	1	;There are 3 active tblptr bytes
  9104  004220  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
  9105  004222  6EF8               	movwf	tblptru,c
  9106  004224                     	endif
  9107  004224  0008               	tblrd		*
  9108  004226  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
  9109  00422A  0E00               	movlw	0
  9110  00422C  0100               	movlb	0	; () banked
  9111  00422E  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9112  004230  0EE8               	movlw	low _GLCD_SIZE_VERT
  9113  004232  6EF6               	movwf	tblptrl,c
  9114  004234                     	if	1	;There is more than 1 active tblptr byte
  9115  004234  0EFC               	movlw	high _GLCD_SIZE_VERT
  9116  004236  6EF7               	movwf	tblptrh,c
  9117  004238                     	endif
  9118  004238                     	if	1	;There are 3 active tblptr bytes
  9119  004238  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
  9120  00423A  6EF8               	movwf	tblptru,c
  9121  00423C                     	endif
  9122  00423C  0008               	tblrd		*
  9123  00423E  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
  9124  004242  0EA1               	movlw	low _BLACK
  9125  004244  6EF6               	movwf	tblptrl,c
  9126  004246                     	if	1	;There is more than 1 active tblptr byte
  9127  004246  0EFC               	movlw	high _BLACK
  9128  004248  6EF7               	movwf	tblptrh,c
  9129  00424A                     	endif
  9130  00424A                     	if	1	;There are 3 active tblptr bytes
  9131  00424A  0E00               	movlw	low (_BLACK shr (0+16))
  9132  00424C  6EF8               	movwf	tblptru,c
  9133  00424E                     	endif
  9134  00424E  0009               	tblrd		*+
  9135  004250  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9136  004254  0009               	tblrd		*+
  9137  004256  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9138  00425A  0009               	tblrd		*+
  9139  00425C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9140  004260  000A               	tblrd		*-
  9141  004262  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9142  004266  0E00               	movlw	0
  9143  004268  ECA8  F026         	call	_glcdDrawRectangle
  9144                           
  9145                           ;main.c: 1727: glcdDrawRectangle(6*4,7*4, 12*4, 17*4, WHITE);
  9146  00426C  0E1C               	movlw	28
  9147  00426E  0100               	movlb	0	; () banked
  9148  004270  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9149  004272  0E30               	movlw	48
  9150  004274  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9151  004276  0E44               	movlw	68
  9152  004278  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9153  00427A  0E99               	movlw	low _WHITE
  9154  00427C  6EF6               	movwf	tblptrl,c
  9155  00427E                     	if	1	;There is more than 1 active tblptr byte
  9156  00427E  0EFC               	movlw	high _WHITE
  9157  004280  6EF7               	movwf	tblptrh,c
  9158  004282                     	endif
  9159  004282                     	if	1	;There are 3 active tblptr bytes
  9160  004282  0E00               	movlw	low (_WHITE shr (0+16))
  9161  004284  6EF8               	movwf	tblptru,c
  9162  004286                     	endif
  9163  004286  0009               	tblrd		*+
  9164  004288  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9165  00428C  0009               	tblrd		*+
  9166  00428E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9167  004292  0009               	tblrd		*+
  9168  004294  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9169  004298  000A               	tblrd		*-
  9170  00429A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9171  00429E  0E18               	movlw	24
  9172  0042A0  ECA8  F026         	call	_glcdDrawRectangle
  9173                           
  9174                           ;main.c: 1728: glcdDrawRectangle(16*4,17*4, 15*4, 16*4, WHITE);
  9175  0042A4  0E44               	movlw	68
  9176  0042A6  0100               	movlb	0	; () banked
  9177  0042A8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9178  0042AA  0E3C               	movlw	60
  9179  0042AC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9180  0042AE  0E40               	movlw	64
  9181  0042B0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9182  0042B2  0E99               	movlw	low _WHITE
  9183  0042B4  6EF6               	movwf	tblptrl,c
  9184  0042B6                     	if	1	;There is more than 1 active tblptr byte
  9185  0042B6  0EFC               	movlw	high _WHITE
  9186  0042B8  6EF7               	movwf	tblptrh,c
  9187  0042BA                     	endif
  9188  0042BA                     	if	1	;There are 3 active tblptr bytes
  9189  0042BA  0E00               	movlw	low (_WHITE shr (0+16))
  9190  0042BC  6EF8               	movwf	tblptru,c
  9191  0042BE                     	endif
  9192  0042BE  0009               	tblrd		*+
  9193  0042C0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9194  0042C4  0009               	tblrd		*+
  9195  0042C6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9196  0042CA  0009               	tblrd		*+
  9197  0042CC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9198  0042D0  000A               	tblrd		*-
  9199  0042D2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9200  0042D6  0E40               	movlw	64
  9201  0042D8  ECA8  F026         	call	_glcdDrawRectangle
  9202                           
  9203                           ;main.c: 1729: glcdDrawRectangle(7*4,8*4, 11*4, 12*4, WHITE);
  9204  0042DC  0E20               	movlw	32
  9205  0042DE  0100               	movlb	0	; () banked
  9206  0042E0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9207  0042E2  0E2C               	movlw	44
  9208  0042E4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9209  0042E6  0E30               	movlw	48
  9210  0042E8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9211  0042EA  0E99               	movlw	low _WHITE
  9212  0042EC  6EF6               	movwf	tblptrl,c
  9213  0042EE                     	if	1	;There is more than 1 active tblptr byte
  9214  0042EE  0EFC               	movlw	high _WHITE
  9215  0042F0  6EF7               	movwf	tblptrh,c
  9216  0042F2                     	endif
  9217  0042F2                     	if	1	;There are 3 active tblptr bytes
  9218  0042F2  0E00               	movlw	low (_WHITE shr (0+16))
  9219  0042F4  6EF8               	movwf	tblptru,c
  9220  0042F6                     	endif
  9221  0042F6  0009               	tblrd		*+
  9222  0042F8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9223  0042FC  0009               	tblrd		*+
  9224  0042FE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9225  004302  0009               	tblrd		*+
  9226  004304  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9227  004308  000A               	tblrd		*-
  9228  00430A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9229  00430E  0E1C               	movlw	28
  9230  004310  ECA8  F026         	call	_glcdDrawRectangle
  9231                           
  9232                           ;main.c: 1731: glcdDrawRectangle(8*4,23*4, 10*4, 11*4, WHITE);
  9233  004314  0E5C               	movlw	92
  9234  004316  0100               	movlb	0	; () banked
  9235  004318  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9236  00431A  0E28               	movlw	40
  9237  00431C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9238  00431E  0E2C               	movlw	44
  9239  004320  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9240  004322  0E99               	movlw	low _WHITE
  9241  004324  6EF6               	movwf	tblptrl,c
  9242  004326                     	if	1	;There is more than 1 active tblptr byte
  9243  004326  0EFC               	movlw	high _WHITE
  9244  004328  6EF7               	movwf	tblptrh,c
  9245  00432A                     	endif
  9246  00432A                     	if	1	;There are 3 active tblptr bytes
  9247  00432A  0E00               	movlw	low (_WHITE shr (0+16))
  9248  00432C  6EF8               	movwf	tblptru,c
  9249  00432E                     	endif
  9250  00432E  0009               	tblrd		*+
  9251  004330  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9252  004334  0009               	tblrd		*+
  9253  004336  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9254  00433A  0009               	tblrd		*+
  9255  00433C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9256  004340  000A               	tblrd		*-
  9257  004342  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9258  004346  0E20               	movlw	32
  9259  004348  ECA8  F026         	call	_glcdDrawRectangle
  9260                           
  9261                           ;main.c: 1734: glcdDrawRectangle(8*4,9*4, 13*4, 15*4, WHITE);
  9262  00434C  0E24               	movlw	36
  9263  00434E  0100               	movlb	0	; () banked
  9264  004350  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9265  004352  0E34               	movlw	52
  9266  004354  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9267  004356  0E3C               	movlw	60
  9268  004358  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9269  00435A  0E99               	movlw	low _WHITE
  9270  00435C  6EF6               	movwf	tblptrl,c
  9271  00435E                     	if	1	;There is more than 1 active tblptr byte
  9272  00435E  0EFC               	movlw	high _WHITE
  9273  004360  6EF7               	movwf	tblptrh,c
  9274  004362                     	endif
  9275  004362                     	if	1	;There are 3 active tblptr bytes
  9276  004362  0E00               	movlw	low (_WHITE shr (0+16))
  9277  004364  6EF8               	movwf	tblptru,c
  9278  004366                     	endif
  9279  004366  0009               	tblrd		*+
  9280  004368  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9281  00436C  0009               	tblrd		*+
  9282  00436E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9283  004372  0009               	tblrd		*+
  9284  004374  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9285  004378  000A               	tblrd		*-
  9286  00437A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9287  00437E  0E20               	movlw	32
  9288  004380  ECA8  F026         	call	_glcdDrawRectangle
  9289                           
  9290                           ;main.c: 1735: glcdDrawRectangle(9*4,10*4, 14*4, 16*4, WHITE);
  9291  004384  0E28               	movlw	40
  9292  004386  0100               	movlb	0	; () banked
  9293  004388  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9294  00438A  0E38               	movlw	56
  9295  00438C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9296  00438E  0E40               	movlw	64
  9297  004390  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9298  004392  0E99               	movlw	low _WHITE
  9299  004394  6EF6               	movwf	tblptrl,c
  9300  004396                     	if	1	;There is more than 1 active tblptr byte
  9301  004396  0EFC               	movlw	high _WHITE
  9302  004398  6EF7               	movwf	tblptrh,c
  9303  00439A                     	endif
  9304  00439A                     	if	1	;There are 3 active tblptr bytes
  9305  00439A  0E00               	movlw	low (_WHITE shr (0+16))
  9306  00439C  6EF8               	movwf	tblptru,c
  9307  00439E                     	endif
  9308  00439E  0009               	tblrd		*+
  9309  0043A0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9310  0043A4  0009               	tblrd		*+
  9311  0043A6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9312  0043AA  0009               	tblrd		*+
  9313  0043AC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9314  0043B0  000A               	tblrd		*-
  9315  0043B2  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9316  0043B6  0E24               	movlw	36
  9317  0043B8  ECA8  F026         	call	_glcdDrawRectangle
  9318                           
  9319                           ;main.c: 1736: glcdDrawRectangle(10*4,11*4, 11*4, 12*4, WHITE);
  9320  0043BC  0E2C               	movlw	44
  9321  0043BE  0100               	movlb	0	; () banked
  9322  0043C0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9323  0043C2  0E2C               	movlw	44
  9324  0043C4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9325  0043C6  0E30               	movlw	48
  9326  0043C8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9327  0043CA  0E99               	movlw	low _WHITE
  9328  0043CC  6EF6               	movwf	tblptrl,c
  9329  0043CE                     	if	1	;There is more than 1 active tblptr byte
  9330  0043CE  0EFC               	movlw	high _WHITE
  9331  0043D0  6EF7               	movwf	tblptrh,c
  9332  0043D2                     	endif
  9333  0043D2                     	if	1	;There are 3 active tblptr bytes
  9334  0043D2  0E00               	movlw	low (_WHITE shr (0+16))
  9335  0043D4  6EF8               	movwf	tblptru,c
  9336  0043D6                     	endif
  9337  0043D6  0009               	tblrd		*+
  9338  0043D8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9339  0043DC  0009               	tblrd		*+
  9340  0043DE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9341  0043E2  0009               	tblrd		*+
  9342  0043E4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9343  0043E8  000A               	tblrd		*-
  9344  0043EA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9345  0043EE  0E28               	movlw	40
  9346  0043F0  ECA8  F026         	call	_glcdDrawRectangle
  9347                           
  9348                           ;main.c: 1738: glcdDrawRectangle(11*4,12*4, 12*4, 17*4, WHITE);
  9349  0043F4  0E30               	movlw	48
  9350  0043F6  0100               	movlb	0	; () banked
  9351  0043F8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9352  0043FA  0E30               	movlw	48
  9353  0043FC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9354  0043FE  0E44               	movlw	68
  9355  004400  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9356  004402  0E99               	movlw	low _WHITE
  9357  004404  6EF6               	movwf	tblptrl,c
  9358  004406                     	if	1	;There is more than 1 active tblptr byte
  9359  004406  0EFC               	movlw	high _WHITE
  9360  004408  6EF7               	movwf	tblptrh,c
  9361  00440A                     	endif
  9362  00440A                     	if	1	;There are 3 active tblptr bytes
  9363  00440A  0E00               	movlw	low (_WHITE shr (0+16))
  9364  00440C  6EF8               	movwf	tblptru,c
  9365  00440E                     	endif
  9366  00440E  0009               	tblrd		*+
  9367  004410  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9368  004414  0009               	tblrd		*+
  9369  004416  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9370  00441A  0009               	tblrd		*+
  9371  00441C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9372  004420  000A               	tblrd		*-
  9373  004422  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9374  004426  0E2C               	movlw	44
  9375  004428  ECA8  F026         	call	_glcdDrawRectangle
  9376                           
  9377                           ;main.c: 1739: glcdDrawRectangle(7*4,8*4, 17*4, 18*4, WHITE);
  9378  00442C  0E20               	movlw	32
  9379  00442E  0100               	movlb	0	; () banked
  9380  004430  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9381  004432  0E44               	movlw	68
  9382  004434  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9383  004436  0E48               	movlw	72
  9384  004438  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9385  00443A  0E99               	movlw	low _WHITE
  9386  00443C  6EF6               	movwf	tblptrl,c
  9387  00443E                     	if	1	;There is more than 1 active tblptr byte
  9388  00443E  0EFC               	movlw	high _WHITE
  9389  004440  6EF7               	movwf	tblptrh,c
  9390  004442                     	endif
  9391  004442                     	if	1	;There are 3 active tblptr bytes
  9392  004442  0E00               	movlw	low (_WHITE shr (0+16))
  9393  004444  6EF8               	movwf	tblptru,c
  9394  004446                     	endif
  9395  004446  0009               	tblrd		*+
  9396  004448  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9397  00444C  0009               	tblrd		*+
  9398  00444E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9399  004452  0009               	tblrd		*+
  9400  004454  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9401  004458  000A               	tblrd		*-
  9402  00445A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9403  00445E  0E1C               	movlw	28
  9404  004460  ECA8  F026         	call	_glcdDrawRectangle
  9405                           
  9406                           ;main.c: 1740: glcdDrawRectangle(10*4,11*4, 17*4, 18*4, WHITE);
  9407  004464  0E2C               	movlw	44
  9408  004466  0100               	movlb	0	; () banked
  9409  004468  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9410  00446A  0E44               	movlw	68
  9411  00446C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9412  00446E  0E48               	movlw	72
  9413  004470  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9414  004472  0E99               	movlw	low _WHITE
  9415  004474  6EF6               	movwf	tblptrl,c
  9416  004476                     	if	1	;There is more than 1 active tblptr byte
  9417  004476  0EFC               	movlw	high _WHITE
  9418  004478  6EF7               	movwf	tblptrh,c
  9419  00447A                     	endif
  9420  00447A                     	if	1	;There are 3 active tblptr bytes
  9421  00447A  0E00               	movlw	low (_WHITE shr (0+16))
  9422  00447C  6EF8               	movwf	tblptru,c
  9423  00447E                     	endif
  9424  00447E  0009               	tblrd		*+
  9425  004480  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9426  004484  0009               	tblrd		*+
  9427  004486  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9428  00448A  0009               	tblrd		*+
  9429  00448C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9430  004490  000A               	tblrd		*-
  9431  004492  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9432  004496  0E28               	movlw	40
  9433  004498  ECA8  F026         	call	_glcdDrawRectangle
  9434                           
  9435                           ;main.c: 1742: glcdDrawRectangle(8*4,23*4, 18*4, 19*4, WHITE);
  9436  00449C  0E5C               	movlw	92
  9437  00449E  0100               	movlb	0	; () banked
  9438  0044A0  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9439  0044A2  0E48               	movlw	72
  9440  0044A4  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9441  0044A6  0E4C               	movlw	76
  9442  0044A8  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9443  0044AA  0E99               	movlw	low _WHITE
  9444  0044AC  6EF6               	movwf	tblptrl,c
  9445  0044AE                     	if	1	;There is more than 1 active tblptr byte
  9446  0044AE  0EFC               	movlw	high _WHITE
  9447  0044B0  6EF7               	movwf	tblptrh,c
  9448  0044B2                     	endif
  9449  0044B2                     	if	1	;There are 3 active tblptr bytes
  9450  0044B2  0E00               	movlw	low (_WHITE shr (0+16))
  9451  0044B4  6EF8               	movwf	tblptru,c
  9452  0044B6                     	endif
  9453  0044B6  0009               	tblrd		*+
  9454  0044B8  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9455  0044BC  0009               	tblrd		*+
  9456  0044BE  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9457  0044C2  0009               	tblrd		*+
  9458  0044C4  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9459  0044C8  000A               	tblrd		*-
  9460  0044CA  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9461  0044CE  0E20               	movlw	32
  9462  0044D0  ECA8  F026         	call	_glcdDrawRectangle
  9463                           
  9464                           ;main.c: 1743: glcdDrawRectangle(23*4,24*4, 17*4, 18*4, WHITE);
  9465  0044D4  0E60               	movlw	96
  9466  0044D6  0100               	movlb	0	; () banked
  9467  0044D8  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9468  0044DA  0E44               	movlw	68
  9469  0044DC  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9470  0044DE  0E48               	movlw	72
  9471  0044E0  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9472  0044E2  0E99               	movlw	low _WHITE
  9473  0044E4  6EF6               	movwf	tblptrl,c
  9474  0044E6                     	if	1	;There is more than 1 active tblptr byte
  9475  0044E6  0EFC               	movlw	high _WHITE
  9476  0044E8  6EF7               	movwf	tblptrh,c
  9477  0044EA                     	endif
  9478  0044EA                     	if	1	;There are 3 active tblptr bytes
  9479  0044EA  0E00               	movlw	low (_WHITE shr (0+16))
  9480  0044EC  6EF8               	movwf	tblptru,c
  9481  0044EE                     	endif
  9482  0044EE  0009               	tblrd		*+
  9483  0044F0  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9484  0044F4  0009               	tblrd		*+
  9485  0044F6  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9486  0044FA  0009               	tblrd		*+
  9487  0044FC  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9488  004500  000A               	tblrd		*-
  9489  004502  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9490  004506  0E5C               	movlw	92
  9491  004508  ECA8  F026         	call	_glcdDrawRectangle
  9492                           
  9493                           ;main.c: 1745: glcdDrawRectangle(23*4,24*4, 11*4, 12*4, WHITE);
  9494  00450C  0E60               	movlw	96
  9495  00450E  0100               	movlb	0	; () banked
  9496  004510  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9497  004512  0E2C               	movlw	44
  9498  004514  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9499  004516  0E30               	movlw	48
  9500  004518  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9501  00451A  0E99               	movlw	low _WHITE
  9502  00451C  6EF6               	movwf	tblptrl,c
  9503  00451E                     	if	1	;There is more than 1 active tblptr byte
  9504  00451E  0EFC               	movlw	high _WHITE
  9505  004520  6EF7               	movwf	tblptrh,c
  9506  004522                     	endif
  9507  004522                     	if	1	;There are 3 active tblptr bytes
  9508  004522  0E00               	movlw	low (_WHITE shr (0+16))
  9509  004524  6EF8               	movwf	tblptru,c
  9510  004526                     	endif
  9511  004526  0009               	tblrd		*+
  9512  004528  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9513  00452C  0009               	tblrd		*+
  9514  00452E  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9515  004532  0009               	tblrd		*+
  9516  004534  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9517  004538  000A               	tblrd		*-
  9518  00453A  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9519  00453E  0E5C               	movlw	92
  9520  004540  ECA8  F026         	call	_glcdDrawRectangle
  9521                           
  9522                           ;main.c: 1746: glcdDrawRectangle(24*4,25*4, 12*4, 17 *4, WHITE);
  9523  004544  0E64               	movlw	100
  9524  004546  0100               	movlb	0	; () banked
  9525  004548  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
  9526  00454A  0E30               	movlw	48
  9527  00454C  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
  9528  00454E  0E44               	movlw	68
  9529  004550  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
  9530  004552  0E99               	movlw	low _WHITE
  9531  004554  6EF6               	movwf	tblptrl,c
  9532  004556                     	if	1	;There is more than 1 active tblptr byte
  9533  004556  0EFC               	movlw	high _WHITE
  9534  004558  6EF7               	movwf	tblptrh,c
  9535  00455A                     	endif
  9536  00455A                     	if	1	;There are 3 active tblptr bytes
  9537  00455A  0E00               	movlw	low (_WHITE shr (0+16))
  9538  00455C  6EF8               	movwf	tblptru,c
  9539  00455E                     	endif
  9540  00455E  0009               	tblrd		*+
  9541  004560  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
  9542  004564  0009               	tblrd		*+
  9543  004566  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
  9544  00456A  0009               	tblrd		*+
  9545  00456C  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
  9546  004570  000A               	tblrd		*-
  9547  004572  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
  9548  004576  0E60               	movlw	96
  9549  004578  ECA8  F026         	call	_glcdDrawRectangle
  9550                           
  9551                           ;main.c: 1747: I2C_Master_Init(100000);
  9552  00457C  0EA0               	movlw	160
  9553  00457E  0100               	movlb	0	; () banked
  9554  004580  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  9555  004582  0E86               	movlw	134
  9556  004584  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  9557  004586  0E01               	movlw	1
  9558  004588  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  9559  00458A  0E00               	movlw	0
  9560  00458C  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  9561  00458E  EC26  F02E         	call	_I2C_Master_Init	;wreg free
  9562  004592  0012               	return		;funcret
  9563  004594                     __end_of_drawSpacer:
  9564                           	opt stack 0
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           intcon	equ	0xFF2
  9570                           intcon3	equ	0xFF0
  9571                           postinc0	equ	0xFEE
  9572                           wreg	equ	0xFE8
  9573                           postdec1	equ	0xFE5
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           fsr2h	equ	0xFDA
  9579                           fsr2l	equ	0xFD9
  9580                           status	equ	0xFD8
  9581                           
  9582 ;; *************** function _Nut_remain *****************
  9583 ;; Defined at:
  9584 ;;		line 1514 in file "main.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  time            2   42[BANK0 ] int 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;		None
  9589 ;; Return value:  Size  Location     Type
  9590 ;;                  1    wreg      void 
  9591 ;; Registers used:
  9592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9598 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9600 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9601 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;Total ram usage:        4 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    9
  9605 ;; This function calls:
  9606 ;;		_I2C_sendData
  9607 ;;		_drawNut
  9608 ;;		_lcdInst
  9609 ;;		_printf
  9610 ;; This function is called by:
  9611 ;;		_main
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           	psect	text15
  9616  005332                     __ptext15:
  9617                           	opt stack 0
  9618  005332                     _Nut_remain:
  9619                           	opt stack 21
  9620                           
  9621                           ;main.c: 1515: drawNut();
  9622                           
  9623                           ;incstack = 0
  9624  005332  ECCA  F022         	call	_drawNut	;wreg free
  9625                           
  9626                           ;main.c: 1516: _delay((unsigned long)((100)*(32000000/4000.0)));
  9627  005336  0E05               	movlw	5
  9628  005338  0100               	movlb	0	; () banked
  9629  00533A  6FF0               	movwf	(??_Nut_remain+1)& (0+255),b
  9630  00533C  0E0F               	movlw	15
  9631  00533E  6FEF               	movwf	??_Nut_remain& (0+255),b
  9632  005340  0EF1               	movlw	241
  9633  005342                     u7177:
  9634  005342  2EE8               	decfsz	wreg,f,c
  9635  005344  D7FE               	bra	u7177
  9636  005346  2FEF               	decfsz	??_Nut_remain& (0+255),f,b
  9637  005348  D7FC               	bra	u7177
  9638  00534A  2FF0               	decfsz	(??_Nut_remain+1)& (0+255),f,b
  9639  00534C  D7FA               	bra	u7177
  9640                           
  9641                           ;main.c: 1517: I2C_sendData('7');
  9642  00534E  0E37               	movlw	55
  9643  005350  EC86  F030         	call	_I2C_sendData
  9644                           
  9645                           ;main.c: 1518: while(EndOfProgram!= 1 && N_spacingTime < time){
  9646  005354  D026               	goto	l760
  9647  005356                     
  9648                           ;main.c: 1519: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9649  005356  0E01               	movlw	1
  9650  005358  ECEB  F030         	call	_lcdInst
  9651  00535C  0E9C               	movlw	156
  9652  00535E  0100               	movlb	0	; () banked
  9653  005360  6FEF               	movwf	??_Nut_remain& (0+255),b
  9654  005362  0ED7               	movlw	215
  9655  005364                     u7187:
  9656  005364  2EE8               	decfsz	wreg,f,c
  9657  005366  D7FE               	bra	u7187
  9658  005368  2FEF               	decfsz	??_Nut_remain& (0+255),f,b
  9659  00536A  D7FC               	bra	u7187
  9660                           
  9661                           ;main.c: 1520: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9662  00536C  0E80               	movlw	128
  9663  00536E  ECEB  F030         	call	_lcdInst
  9664  005372  0E34               	movlw	52
  9665  005374  0100               	movlb	0	; () banked
  9666  005376  6FEF               	movwf	??_Nut_remain& (0+255),b
  9667  005378  0EF1               	movlw	241
  9668  00537A                     u7197:
  9669  00537A  2EE8               	decfsz	wreg,f,c
  9670  00537C  D7FE               	bra	u7197
  9671  00537E  2FEF               	decfsz	??_Nut_remain& (0+255),f,b
  9672  005380  D7FC               	bra	u7197
  9673  005382  D000               	nop2	
  9674                           
  9675                           ;main.c: 1521: N_spacingTime +=30;
  9676  005384  0E1E               	movlw	30
  9677  005386  0100               	movlb	0	; () banked
  9678  005388  279B               	addwf	_N_spacingTime& (0+255),f,b
  9679  00538A  0E00               	movlw	0
  9680  00538C  239C               	addwfc	(_N_spacingTime+1)& (0+255),f,b
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;main.c: 1522: printf("N:%d",N_counter);
  9684  00538E  0ED4               	movlw	low STR_67
  9685  005390  6FD1               	movwf	printf@f& (0+255),b
  9686  005392  0EFF               	movlw	high STR_67
  9687  005394  6FD2               	movwf	(printf@f+1)& (0+255),b
  9688  005396  C0A9  F0D3         	movff	_N_counter,?_printf+2
  9689  00539A  C0AA  F0D4         	movff	_N_counter+1,?_printf+3
  9690  00539E  EC2A  F019         	call	_printf	;wreg free
  9691  0053A2                     l760:
  9692  0053A2  0100               	movlb	0	; () banked
  9693  0053A4  05BB               	decf	_EndOfProgram& (0+255),w,b
  9694  0053A6  B4D8               	btfsc	status,2,c
  9695  0053A8  D00A               	goto	u4300
  9696                           
  9697                           ; BSR set to: 0
  9698  0053AA  51ED               	movf	Nut_remain@time& (0+255),w,b
  9699  0053AC  5D9B               	subwf	_N_spacingTime& (0+255),w,b
  9700  0053AE  519C               	movf	(_N_spacingTime+1)& (0+255),w,b
  9701  0053B0  0A80               	xorlw	128
  9702  0053B2  6FEF               	movwf	??_Nut_remain& (0+255),b
  9703  0053B4  51EE               	movf	(Nut_remain@time+1)& (0+255),w,b
  9704  0053B6  0A80               	xorlw	128
  9705  0053B8  59EF               	subwfb	??_Nut_remain& (0+255),w,b
  9706  0053BA  A0D8               	btfss	status,0,c
  9707  0053BC  D7CC               	goto	l761
  9708  0053BE                     u4300:
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;main.c: 1523: }
  9712                           ;main.c: 1524: N_remain = N_counter;
  9713                           
  9714                           ; BSR set to: 0
  9715  0053BE  C0A9  F0A3         	movff	_N_counter,_N_remain
  9716  0053C2  C0AA  F0A4         	movff	_N_counter+1,_N_remain+1
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;main.c: 1525: I2C_sendData('8');
  9720  0053C6  0E38               	movlw	56
  9721  0053C8  EC86  F030         	call	_I2C_sendData
  9722                           
  9723                           ;main.c: 1526: if(EndOfProgram != 1){
  9724  0053CC  0100               	movlb	0	; () banked
  9725  0053CE  05BB               	decf	_EndOfProgram& (0+255),w,b
  9726  0053D0  B4D8               	btfsc	status,2,c
  9727  0053D2  0012               	return	
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;main.c: 1527: _delay((unsigned long)((100)*(32000000/4000.0)));
  9731  0053D4  0E05               	movlw	5
  9732  0053D6  0100               	movlb	0	; () banked
  9733  0053D8  6FF0               	movwf	(??_Nut_remain+1)& (0+255),b
  9734  0053DA  0E0F               	movlw	15
  9735  0053DC  6FEF               	movwf	??_Nut_remain& (0+255),b
  9736  0053DE  0EF1               	movlw	241
  9737  0053E0                     u7207:
  9738  0053E0  2EE8               	decfsz	wreg,f,c
  9739  0053E2  D7FE               	bra	u7207
  9740  0053E4  2FEF               	decfsz	??_Nut_remain& (0+255),f,b
  9741  0053E6  D7FC               	bra	u7207
  9742  0053E8  2FF0               	decfsz	(??_Nut_remain+1)& (0+255),f,b
  9743  0053EA  D7FA               	bra	u7207
  9744  0053EC  0012               	return	
  9745  0053EE                     __end_of_Nut_remain:
  9746                           	opt stack 0
  9747                           tblptru	equ	0xFF8
  9748                           tblptrh	equ	0xFF7
  9749                           tblptrl	equ	0xFF6
  9750                           tablat	equ	0xFF5
  9751                           intcon	equ	0xFF2
  9752                           intcon3	equ	0xFF0
  9753                           postinc0	equ	0xFEE
  9754                           wreg	equ	0xFE8
  9755                           postdec1	equ	0xFE5
  9756                           fsr1l	equ	0xFE1
  9757                           indf2	equ	0xFDF
  9758                           postinc2	equ	0xFDE
  9759                           postdec2	equ	0xFDD
  9760                           fsr2h	equ	0xFDA
  9761                           fsr2l	equ	0xFD9
  9762                           status	equ	0xFD8
  9763                           
  9764 ;; *************** function _Nut_dispense *****************
  9765 ;; Defined at:
  9766 ;;		line 1315 in file "main.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;  N_max           2   42[BANK0 ] int 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;		None
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      void 
  9773 ;; Registers used:
  9774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9780 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;Total ram usage:        4 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    9
  9787 ;; This function calls:
  9788 ;;		_I2C_sendData
  9789 ;;		_drawNut
  9790 ;;		_lcdInst
  9791 ;;		_printf
  9792 ;; This function is called by:
  9793 ;;		_main
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text16
  9798  005698                     __ptext16:
  9799                           	opt stack 0
  9800  005698                     _Nut_dispense:
  9801                           	opt stack 21
  9802                           
  9803                           ;main.c: 1316: if (N_max == 0){
  9804                           
  9805                           ;incstack = 0
  9806  005698  0100               	movlb	0	; () banked
  9807  00569A  51ED               	movf	Nut_dispense@N_max& (0+255),w,b
  9808  00569C  11EE               	iorwf	(Nut_dispense@N_max+1)& (0+255),w,b
  9809  00569E  B4D8               	btfsc	status,2,c
  9810  0056A0  0012               	return	
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;main.c: 1318: }
  9814                           ;main.c: 1319: drawNut();
  9815                           
  9816                           ; BSR set to: 0
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;main.c: 1317: return;
  9820  0056A2  ECCA  F022         	call	_drawNut	;wreg free
  9821                           
  9822                           ;main.c: 1320: _delay((unsigned long)((100)*(32000000/4000.0)));
  9823  0056A6  0E05               	movlw	5
  9824  0056A8  0100               	movlb	0	; () banked
  9825  0056AA  6FF0               	movwf	(??_Nut_dispense+1)& (0+255),b
  9826  0056AC  0E0F               	movlw	15
  9827  0056AE  6FEF               	movwf	??_Nut_dispense& (0+255),b
  9828  0056B0  0EF1               	movlw	241
  9829  0056B2                     u7217:
  9830  0056B2  2EE8               	decfsz	wreg,f,c
  9831  0056B4  D7FE               	bra	u7217
  9832  0056B6  2FEF               	decfsz	??_Nut_dispense& (0+255),f,b
  9833  0056B8  D7FC               	bra	u7217
  9834  0056BA  2FF0               	decfsz	(??_Nut_dispense+1)& (0+255),f,b
  9835  0056BC  D7FA               	bra	u7217
  9836                           
  9837                           ;main.c: 1321: I2C_sendData('7');
  9838  0056BE  0E37               	movlw	55
  9839  0056C0  EC86  F030         	call	_I2C_sendData
  9840                           
  9841                           ;main.c: 1322: N_counter = 0;
  9842  0056C4  0E00               	movlw	0
  9843  0056C6  0100               	movlb	0	; () banked
  9844  0056C8  6FAA               	movwf	(_N_counter+1)& (0+255),b
  9845  0056CA  0E00               	movlw	0
  9846  0056CC  6FA9               	movwf	_N_counter& (0+255),b
  9847                           
  9848                           ;main.c: 1323: while(NeedToCloseLid != 1 && N_counter < N_max){
  9849  0056CE  D022               	goto	l686
  9850  0056D0                     
  9851                           ; BSR set to: 0
  9852                           ;main.c: 1325: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
  9853                           
  9854                           ; BSR set to: 0
  9855  0056D0  0E80               	movlw	128
  9856  0056D2  ECEB  F030         	call	_lcdInst
  9857  0056D6  0E34               	movlw	52
  9858  0056D8  0100               	movlb	0	; () banked
  9859  0056DA  6FEF               	movwf	??_Nut_dispense& (0+255),b
  9860  0056DC  0EF1               	movlw	241
  9861  0056DE                     u7227:
  9862  0056DE  2EE8               	decfsz	wreg,f,c
  9863  0056E0  D7FE               	bra	u7227
  9864  0056E2  2FEF               	decfsz	??_Nut_dispense& (0+255),f,b
  9865  0056E4  D7FC               	bra	u7227
  9866  0056E6  D000               	nop2	
  9867                           
  9868                           ;main.c: 1326: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
  9869  0056E8  0E01               	movlw	1
  9870  0056EA  ECEB  F030         	call	_lcdInst
  9871  0056EE  0E9C               	movlw	156
  9872  0056F0  0100               	movlb	0	; () banked
  9873  0056F2  6FEF               	movwf	??_Nut_dispense& (0+255),b
  9874  0056F4  0ED7               	movlw	215
  9875  0056F6                     u7237:
  9876  0056F6  2EE8               	decfsz	wreg,f,c
  9877  0056F8  D7FE               	bra	u7237
  9878  0056FA  2FEF               	decfsz	??_Nut_dispense& (0+255),f,b
  9879  0056FC  D7FC               	bra	u7237
  9880                           
  9881                           ;main.c: 1327: printf("N:%d",N_counter);
  9882  0056FE  0ED4               	movlw	low STR_67
  9883  005700  0100               	movlb	0	; () banked
  9884  005702  6FD1               	movwf	printf@f& (0+255),b
  9885  005704  0EFF               	movlw	high STR_67
  9886  005706  6FD2               	movwf	(printf@f+1)& (0+255),b
  9887  005708  C0A9  F0D3         	movff	_N_counter,?_printf+2
  9888  00570C  C0AA  F0D4         	movff	_N_counter+1,?_printf+3
  9889  005710  EC2A  F019         	call	_printf	;wreg free
  9890  005714                     l686:
  9891  005714  0100               	movlb	0	; () banked
  9892  005716  05BA               	decf	_NeedToCloseLid& (0+255),w,b
  9893  005718  B4D8               	btfsc	status,2,c
  9894  00571A  D00A               	goto	u4220
  9895                           
  9896                           ; BSR set to: 0
  9897  00571C  51ED               	movf	Nut_dispense@N_max& (0+255),w,b
  9898  00571E  5DA9               	subwf	_N_counter& (0+255),w,b
  9899  005720  51AA               	movf	(_N_counter+1)& (0+255),w,b
  9900  005722  0A80               	xorlw	128
  9901  005724  6FEF               	movwf	??_Nut_dispense& (0+255),b
  9902  005726  51EE               	movf	(Nut_dispense@N_max+1)& (0+255),w,b
  9903  005728  0A80               	xorlw	128
  9904  00572A  59EF               	subwfb	??_Nut_dispense& (0+255),w,b
  9905  00572C  A0D8               	btfss	status,0,c
  9906  00572E  D7D0               	goto	l687
  9907  005730                     u4220:
  9908                           
  9909                           ; BSR set to: 0
  9910                           ;main.c: 1328: }
  9911                           ;main.c: 1329: I2C_sendData('8');
  9912                           
  9913                           ; BSR set to: 0
  9914                           
  9915                           ; BSR set to: 0
  9916  005730  0E38               	movlw	56
  9917  005732  EC86  F030         	call	_I2C_sendData
  9918  005736  0012               	return		;funcret
  9919  005738                     __end_of_Nut_dispense:
  9920                           	opt stack 0
  9921                           tblptru	equ	0xFF8
  9922                           tblptrh	equ	0xFF7
  9923                           tblptrl	equ	0xFF6
  9924                           tablat	equ	0xFF5
  9925                           intcon	equ	0xFF2
  9926                           intcon3	equ	0xFF0
  9927                           postinc0	equ	0xFEE
  9928                           wreg	equ	0xFE8
  9929                           postdec1	equ	0xFE5
  9930                           fsr1l	equ	0xFE1
  9931                           indf2	equ	0xFDF
  9932                           postinc2	equ	0xFDE
  9933                           postdec2	equ	0xFDD
  9934                           fsr2h	equ	0xFDA
  9935                           fsr2l	equ	0xFD9
  9936                           status	equ	0xFD8
  9937                           
  9938 ;; *************** function _drawNut *****************
  9939 ;; Defined at:
  9940 ;;		line 1700 in file "main.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;		None
  9943 ;; Auto vars:     Size  Location     Type
  9944 ;;		None
  9945 ;; Return value:  Size  Location     Type
  9946 ;;                  1    wreg      void 
  9947 ;; Registers used:
  9948 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9949 ;; Tracked objects:
  9950 ;;		On entry : 0/0
  9951 ;;		On exit  : 0/0
  9952 ;;		Unchanged: 0/0
  9953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9957 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9958 ;;Total ram usage:        1 bytes
  9959 ;; Hardware stack levels used:    1
  9960 ;; Hardware stack levels required when called:    8
  9961 ;; This function calls:
  9962 ;;		_I2C_Master_Init
  9963 ;;		_glcdDrawRectangle
  9964 ;;		_spiInit
  9965 ;; This function is called by:
  9966 ;;		_Nut_dispense
  9967 ;;		_Nut_remain
  9968 ;;		_nut_washer_remain
  9969 ;; This function uses a non-reentrant model
  9970 ;;
  9971                           
  9972                           	psect	text17
  9973  004594                     __ptext17:
  9974                           	opt stack 0
  9975  004594                     _drawNut:
  9976                           	opt stack 21
  9977                           
  9978                           ;main.c: 1701: spiInit(4);
  9979                           
  9980                           ;incstack = 0
  9981  004594  0E04               	movlw	4
  9982  004596  ECFD  F02F         	call	_spiInit
  9983                           
  9984                           ;main.c: 1702: _delay((unsigned long)((20)*(32000000/4000.0)));
  9985  00459A  0ED0               	movlw	208
  9986  00459C  0100               	movlb	0	; () banked
  9987  00459E  6FE4               	movwf	??_drawNut& (0+255),b
  9988  0045A0  0EC9               	movlw	201
  9989  0045A2                     u7247:
  9990  0045A2  2EE8               	decfsz	wreg,f,c
  9991  0045A4  D7FE               	bra	u7247
  9992  0045A6  2FE4               	decfsz	??_drawNut& (0+255),f,b
  9993  0045A8  D7FC               	bra	u7247
  9994  0045AA  D000               	nop2	
  9995                           
  9996                           ;main.c: 1703: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  9997  0045AC  0EE9               	movlw	low _GLCD_SIZE_HORZ
  9998  0045AE  6EF6               	movwf	tblptrl,c
  9999  0045B0                     	if	1	;There is more than 1 active tblptr byte
 10000  0045B0  0EFC               	movlw	high _GLCD_SIZE_HORZ
 10001  0045B2  6EF7               	movwf	tblptrh,c
 10002  0045B4                     	endif
 10003  0045B4                     	if	1	;There are 3 active tblptr bytes
 10004  0045B4  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
 10005  0045B6  6EF8               	movwf	tblptru,c
 10006  0045B8                     	endif
 10007  0045B8  0008               	tblrd		*
 10008  0045BA  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
 10009  0045BE  0E00               	movlw	0
 10010  0045C0  0100               	movlb	0	; () banked
 10011  0045C2  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10012  0045C4  0EE8               	movlw	low _GLCD_SIZE_VERT
 10013  0045C6  6EF6               	movwf	tblptrl,c
 10014  0045C8                     	if	1	;There is more than 1 active tblptr byte
 10015  0045C8  0EFC               	movlw	high _GLCD_SIZE_VERT
 10016  0045CA  6EF7               	movwf	tblptrh,c
 10017  0045CC                     	endif
 10018  0045CC                     	if	1	;There are 3 active tblptr bytes
 10019  0045CC  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
 10020  0045CE  6EF8               	movwf	tblptru,c
 10021  0045D0                     	endif
 10022  0045D0  0008               	tblrd		*
 10023  0045D2  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
 10024  0045D6  0EA1               	movlw	low _BLACK
 10025  0045D8  6EF6               	movwf	tblptrl,c
 10026  0045DA                     	if	1	;There is more than 1 active tblptr byte
 10027  0045DA  0EFC               	movlw	high _BLACK
 10028  0045DC  6EF7               	movwf	tblptrh,c
 10029  0045DE                     	endif
 10030  0045DE                     	if	1	;There are 3 active tblptr bytes
 10031  0045DE  0E00               	movlw	low (_BLACK shr (0+16))
 10032  0045E0  6EF8               	movwf	tblptru,c
 10033  0045E2                     	endif
 10034  0045E2  0009               	tblrd		*+
 10035  0045E4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10036  0045E8  0009               	tblrd		*+
 10037  0045EA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10038  0045EE  0009               	tblrd		*+
 10039  0045F0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10040  0045F4  000A               	tblrd		*-
 10041  0045F6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10042  0045FA  0E00               	movlw	0
 10043  0045FC  ECA8  F026         	call	_glcdDrawRectangle
 10044                           
 10045                           ;main.c: 1704: glcdDrawRectangle(13*4,14*4, 14*4, 17*4, WHITE);
 10046  004600  0E38               	movlw	56
 10047  004602  0100               	movlb	0	; () banked
 10048  004604  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10049  004606  0E38               	movlw	56
 10050  004608  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10051  00460A  0E44               	movlw	68
 10052  00460C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10053  00460E  0E99               	movlw	low _WHITE
 10054  004610  6EF6               	movwf	tblptrl,c
 10055  004612                     	if	1	;There is more than 1 active tblptr byte
 10056  004612  0EFC               	movlw	high _WHITE
 10057  004614  6EF7               	movwf	tblptrh,c
 10058  004616                     	endif
 10059  004616                     	if	1	;There are 3 active tblptr bytes
 10060  004616  0E00               	movlw	low (_WHITE shr (0+16))
 10061  004618  6EF8               	movwf	tblptru,c
 10062  00461A                     	endif
 10063  00461A  0009               	tblrd		*+
 10064  00461C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10065  004620  0009               	tblrd		*+
 10066  004622  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10067  004626  0009               	tblrd		*+
 10068  004628  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10069  00462C  000A               	tblrd		*-
 10070  00462E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10071  004632  0E34               	movlw	52
 10072  004634  ECA8  F026         	call	_glcdDrawRectangle
 10073                           
 10074                           ;main.c: 1705: glcdDrawRectangle(14*4,15*4, 13*4, 14*4, WHITE);
 10075  004638  0E3C               	movlw	60
 10076  00463A  0100               	movlb	0	; () banked
 10077  00463C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10078  00463E  0E34               	movlw	52
 10079  004640  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10080  004642  0E38               	movlw	56
 10081  004644  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10082  004646  0E99               	movlw	low _WHITE
 10083  004648  6EF6               	movwf	tblptrl,c
 10084  00464A                     	if	1	;There is more than 1 active tblptr byte
 10085  00464A  0EFC               	movlw	high _WHITE
 10086  00464C  6EF7               	movwf	tblptrh,c
 10087  00464E                     	endif
 10088  00464E                     	if	1	;There are 3 active tblptr bytes
 10089  00464E  0E00               	movlw	low (_WHITE shr (0+16))
 10090  004650  6EF8               	movwf	tblptru,c
 10091  004652                     	endif
 10092  004652  0009               	tblrd		*+
 10093  004654  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10094  004658  0009               	tblrd		*+
 10095  00465A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10096  00465E  0009               	tblrd		*+
 10097  004660  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10098  004664  000A               	tblrd		*-
 10099  004666  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10100  00466A  0E38               	movlw	56
 10101  00466C  ECA8  F026         	call	_glcdDrawRectangle
 10102                           
 10103                           ;main.c: 1706: glcdDrawRectangle(6*4,7*4, 11*4, 13*4, WHITE);
 10104  004670  0E1C               	movlw	28
 10105  004672  0100               	movlb	0	; () banked
 10106  004674  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10107  004676  0E2C               	movlw	44
 10108  004678  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10109  00467A  0E34               	movlw	52
 10110  00467C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10111  00467E  0E99               	movlw	low _WHITE
 10112  004680  6EF6               	movwf	tblptrl,c
 10113  004682                     	if	1	;There is more than 1 active tblptr byte
 10114  004682  0EFC               	movlw	high _WHITE
 10115  004684  6EF7               	movwf	tblptrh,c
 10116  004686                     	endif
 10117  004686                     	if	1	;There are 3 active tblptr bytes
 10118  004686  0E00               	movlw	low (_WHITE shr (0+16))
 10119  004688  6EF8               	movwf	tblptru,c
 10120  00468A                     	endif
 10121  00468A  0009               	tblrd		*+
 10122  00468C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10123  004690  0009               	tblrd		*+
 10124  004692  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10125  004696  0009               	tblrd		*+
 10126  004698  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10127  00469C  000A               	tblrd		*-
 10128  00469E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10129  0046A2  0E18               	movlw	24
 10130  0046A4  ECA8  F026         	call	_glcdDrawRectangle
 10131                           
 10132                           ;main.c: 1708: glcdDrawRectangle(15*4,18*4, 12*4, 13*4, WHITE);
 10133  0046A8  0E48               	movlw	72
 10134  0046AA  0100               	movlb	0	; () banked
 10135  0046AC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10136  0046AE  0E30               	movlw	48
 10137  0046B0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10138  0046B2  0E34               	movlw	52
 10139  0046B4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10140  0046B6  0E99               	movlw	low _WHITE
 10141  0046B8  6EF6               	movwf	tblptrl,c
 10142  0046BA                     	if	1	;There is more than 1 active tblptr byte
 10143  0046BA  0EFC               	movlw	high _WHITE
 10144  0046BC  6EF7               	movwf	tblptrh,c
 10145  0046BE                     	endif
 10146  0046BE                     	if	1	;There are 3 active tblptr bytes
 10147  0046BE  0E00               	movlw	low (_WHITE shr (0+16))
 10148  0046C0  6EF8               	movwf	tblptru,c
 10149  0046C2                     	endif
 10150  0046C2  0009               	tblrd		*+
 10151  0046C4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10152  0046C8  0009               	tblrd		*+
 10153  0046CA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10154  0046CE  0009               	tblrd		*+
 10155  0046D0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10156  0046D4  000A               	tblrd		*-
 10157  0046D6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10158  0046DA  0E3C               	movlw	60
 10159  0046DC  ECA8  F026         	call	_glcdDrawRectangle
 10160                           
 10161                           ;main.c: 1709: glcdDrawRectangle(18*4,19*4, 13*4, 14*4, WHITE);
 10162  0046E0  0E4C               	movlw	76
 10163  0046E2  0100               	movlb	0	; () banked
 10164  0046E4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10165  0046E6  0E34               	movlw	52
 10166  0046E8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10167  0046EA  0E38               	movlw	56
 10168  0046EC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10169  0046EE  0E99               	movlw	low _WHITE
 10170  0046F0  6EF6               	movwf	tblptrl,c
 10171  0046F2                     	if	1	;There is more than 1 active tblptr byte
 10172  0046F2  0EFC               	movlw	high _WHITE
 10173  0046F4  6EF7               	movwf	tblptrh,c
 10174  0046F6                     	endif
 10175  0046F6                     	if	1	;There are 3 active tblptr bytes
 10176  0046F6  0E00               	movlw	low (_WHITE shr (0+16))
 10177  0046F8  6EF8               	movwf	tblptru,c
 10178  0046FA                     	endif
 10179  0046FA  0009               	tblrd		*+
 10180  0046FC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10181  004700  0009               	tblrd		*+
 10182  004702  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10183  004706  0009               	tblrd		*+
 10184  004708  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10185  00470C  000A               	tblrd		*-
 10186  00470E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10187  004712  0E48               	movlw	72
 10188  004714  ECA8  F026         	call	_glcdDrawRectangle
 10189                           
 10190                           ;main.c: 1710: glcdDrawRectangle(19*4,20*4, 14*4, 17*4, WHITE);
 10191  004718  0E50               	movlw	80
 10192  00471A  0100               	movlb	0	; () banked
 10193  00471C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10194  00471E  0E38               	movlw	56
 10195  004720  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10196  004722  0E44               	movlw	68
 10197  004724  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10198  004726  0E99               	movlw	low _WHITE
 10199  004728  6EF6               	movwf	tblptrl,c
 10200  00472A                     	if	1	;There is more than 1 active tblptr byte
 10201  00472A  0EFC               	movlw	high _WHITE
 10202  00472C  6EF7               	movwf	tblptrh,c
 10203  00472E                     	endif
 10204  00472E                     	if	1	;There are 3 active tblptr bytes
 10205  00472E  0E00               	movlw	low (_WHITE shr (0+16))
 10206  004730  6EF8               	movwf	tblptru,c
 10207  004732                     	endif
 10208  004732  0009               	tblrd		*+
 10209  004734  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10210  004738  0009               	tblrd		*+
 10211  00473A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10212  00473E  0009               	tblrd		*+
 10213  004740  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10214  004744  000A               	tblrd		*-
 10215  004746  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10216  00474A  0E4C               	movlw	76
 10217  00474C  ECA8  F026         	call	_glcdDrawRectangle
 10218                           
 10219                           ;main.c: 1711: glcdDrawRectangle(18*4,19*4, 17*4, 18*4, WHITE);
 10220  004750  0E4C               	movlw	76
 10221  004752  0100               	movlb	0	; () banked
 10222  004754  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10223  004756  0E44               	movlw	68
 10224  004758  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10225  00475A  0E48               	movlw	72
 10226  00475C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10227  00475E  0E99               	movlw	low _WHITE
 10228  004760  6EF6               	movwf	tblptrl,c
 10229  004762                     	if	1	;There is more than 1 active tblptr byte
 10230  004762  0EFC               	movlw	high _WHITE
 10231  004764  6EF7               	movwf	tblptrh,c
 10232  004766                     	endif
 10233  004766                     	if	1	;There are 3 active tblptr bytes
 10234  004766  0E00               	movlw	low (_WHITE shr (0+16))
 10235  004768  6EF8               	movwf	tblptru,c
 10236  00476A                     	endif
 10237  00476A  0009               	tblrd		*+
 10238  00476C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10239  004770  0009               	tblrd		*+
 10240  004772  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10241  004776  0009               	tblrd		*+
 10242  004778  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10243  00477C  000A               	tblrd		*-
 10244  00477E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10245  004782  0E48               	movlw	72
 10246  004784  ECA8  F026         	call	_glcdDrawRectangle
 10247                           
 10248                           ;main.c: 1713: glcdDrawRectangle(15*4,18*4, 18*4, 19*4, WHITE);
 10249  004788  0E48               	movlw	72
 10250  00478A  0100               	movlb	0	; () banked
 10251  00478C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10252  00478E  0E48               	movlw	72
 10253  004790  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10254  004792  0E4C               	movlw	76
 10255  004794  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10256  004796  0E99               	movlw	low _WHITE
 10257  004798  6EF6               	movwf	tblptrl,c
 10258  00479A                     	if	1	;There is more than 1 active tblptr byte
 10259  00479A  0EFC               	movlw	high _WHITE
 10260  00479C  6EF7               	movwf	tblptrh,c
 10261  00479E                     	endif
 10262  00479E                     	if	1	;There are 3 active tblptr bytes
 10263  00479E  0E00               	movlw	low (_WHITE shr (0+16))
 10264  0047A0  6EF8               	movwf	tblptru,c
 10265  0047A2                     	endif
 10266  0047A2  0009               	tblrd		*+
 10267  0047A4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10268  0047A8  0009               	tblrd		*+
 10269  0047AA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10270  0047AE  0009               	tblrd		*+
 10271  0047B0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10272  0047B4  000A               	tblrd		*-
 10273  0047B6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10274  0047BA  0E3C               	movlw	60
 10275  0047BC  ECA8  F026         	call	_glcdDrawRectangle
 10276                           
 10277                           ;main.c: 1714: glcdDrawRectangle(14*4,15*4, 16*4, 17*4, WHITE);
 10278  0047C0  0E3C               	movlw	60
 10279  0047C2  0100               	movlb	0	; () banked
 10280  0047C4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10281  0047C6  0E40               	movlw	64
 10282  0047C8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10283  0047CA  0E44               	movlw	68
 10284  0047CC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10285  0047CE  0E99               	movlw	low _WHITE
 10286  0047D0  6EF6               	movwf	tblptrl,c
 10287  0047D2                     	if	1	;There is more than 1 active tblptr byte
 10288  0047D2  0EFC               	movlw	high _WHITE
 10289  0047D4  6EF7               	movwf	tblptrh,c
 10290  0047D6                     	endif
 10291  0047D6                     	if	1	;There are 3 active tblptr bytes
 10292  0047D6  0E00               	movlw	low (_WHITE shr (0+16))
 10293  0047D8  6EF8               	movwf	tblptru,c
 10294  0047DA                     	endif
 10295  0047DA  0009               	tblrd		*+
 10296  0047DC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10297  0047E0  0009               	tblrd		*+
 10298  0047E2  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10299  0047E6  0009               	tblrd		*+
 10300  0047E8  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10301  0047EC  000A               	tblrd		*-
 10302  0047EE  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10303  0047F2  0E38               	movlw	56
 10304  0047F4  ECA8  F026         	call	_glcdDrawRectangle
 10305                           
 10306                           ;main.c: 1715: glcdDrawRectangle(13*4,14*4, 14*4, 17*4, WHITE);
 10307  0047F8  0E38               	movlw	56
 10308  0047FA  0100               	movlb	0	; () banked
 10309  0047FC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10310  0047FE  0E38               	movlw	56
 10311  004800  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10312  004802  0E44               	movlw	68
 10313  004804  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10314  004806  0E99               	movlw	low _WHITE
 10315  004808  6EF6               	movwf	tblptrl,c
 10316  00480A                     	if	1	;There is more than 1 active tblptr byte
 10317  00480A  0EFC               	movlw	high _WHITE
 10318  00480C  6EF7               	movwf	tblptrh,c
 10319  00480E                     	endif
 10320  00480E                     	if	1	;There are 3 active tblptr bytes
 10321  00480E  0E00               	movlw	low (_WHITE shr (0+16))
 10322  004810  6EF8               	movwf	tblptru,c
 10323  004812                     	endif
 10324  004812  0009               	tblrd		*+
 10325  004814  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10326  004818  0009               	tblrd		*+
 10327  00481A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10328  00481E  0009               	tblrd		*+
 10329  004820  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10330  004824  000A               	tblrd		*-
 10331  004826  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10332  00482A  0E34               	movlw	52
 10333  00482C  ECA8  F026         	call	_glcdDrawRectangle
 10334                           
 10335                           ;main.c: 1718: glcdDrawRectangle(16*4,17*4, 15*4, 16*4, WHITE);
 10336  004830  0E44               	movlw	68
 10337  004832  0100               	movlb	0	; () banked
 10338  004834  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 10339  004836  0E3C               	movlw	60
 10340  004838  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 10341  00483A  0E40               	movlw	64
 10342  00483C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 10343  00483E  0E99               	movlw	low _WHITE
 10344  004840  6EF6               	movwf	tblptrl,c
 10345  004842                     	if	1	;There is more than 1 active tblptr byte
 10346  004842  0EFC               	movlw	high _WHITE
 10347  004844  6EF7               	movwf	tblptrh,c
 10348  004846                     	endif
 10349  004846                     	if	1	;There are 3 active tblptr bytes
 10350  004846  0E00               	movlw	low (_WHITE shr (0+16))
 10351  004848  6EF8               	movwf	tblptru,c
 10352  00484A                     	endif
 10353  00484A  0009               	tblrd		*+
 10354  00484C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 10355  004850  0009               	tblrd		*+
 10356  004852  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 10357  004856  0009               	tblrd		*+
 10358  004858  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 10359  00485C  000A               	tblrd		*-
 10360  00485E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 10361  004862  0E40               	movlw	64
 10362  004864  ECA8  F026         	call	_glcdDrawRectangle
 10363                           
 10364                           ;main.c: 1719: I2C_Master_Init(100000);
 10365  004868  0EA0               	movlw	160
 10366  00486A  0100               	movlb	0	; () banked
 10367  00486C  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
 10368  00486E  0E86               	movlw	134
 10369  004870  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
 10370  004872  0E01               	movlw	1
 10371  004874  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
 10372  004876  0E00               	movlw	0
 10373  004878  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
 10374  00487A  EC26  F02E         	call	_I2C_Master_Init	;wreg free
 10375  00487E  0012               	return		;funcret
 10376  004880                     __end_of_drawNut:
 10377                           	opt stack 0
 10378                           tblptru	equ	0xFF8
 10379                           tblptrh	equ	0xFF7
 10380                           tblptrl	equ	0xFF6
 10381                           tablat	equ	0xFF5
 10382                           intcon	equ	0xFF2
 10383                           intcon3	equ	0xFF0
 10384                           postinc0	equ	0xFEE
 10385                           wreg	equ	0xFE8
 10386                           postdec1	equ	0xFE5
 10387                           fsr1l	equ	0xFE1
 10388                           indf2	equ	0xFDF
 10389                           postinc2	equ	0xFDE
 10390                           postdec2	equ	0xFDD
 10391                           fsr2h	equ	0xFDA
 10392                           fsr2l	equ	0xFD9
 10393                           status	equ	0xFD8
 10394                           
 10395 ;; *************** function _I2C_init *****************
 10396 ;; Defined at:
 10397 ;;		line 1280 in file "main.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;		None
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  1    wreg      void 
 10404 ;; Registers used:
 10405 ;;		wreg, status,2, status,0, cstack
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;Total ram usage:        0 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    6
 10418 ;; This function calls:
 10419 ;;		_I2C_Master_Init
 10420 ;;		_I2C_Master_Start
 10421 ;;		_I2C_Master_Stop
 10422 ;;		_I2C_Master_Write
 10423 ;; This function is called by:
 10424 ;;		_main
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           	psect	text18
 10429  006036                     __ptext18:
 10430                           	opt stack 0
 10431  006036                     _I2C_init:
 10432                           	opt stack 24
 10433                           
 10434                           ;main.c: 1281: I2C_Master_Init(100000);
 10435                           
 10436                           ;incstack = 0
 10437  006036  0EA0               	movlw	160
 10438  006038  0100               	movlb	0	; () banked
 10439  00603A  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
 10440  00603C  0E86               	movlw	134
 10441  00603E  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
 10442  006040  0E01               	movlw	1
 10443  006042  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
 10444  006044  0E00               	movlw	0
 10445  006046  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
 10446  006048  EC26  F02E         	call	_I2C_Master_Init	;wreg free
 10447                           
 10448                           ;main.c: 1282: I2C_Master_Start();
 10449  00604C  EC46  F031         	call	_I2C_Master_Start	;wreg free
 10450                           
 10451                           ;main.c: 1283: I2C_Master_Write(0b00010000);
 10452  006050  0E00               	movlw	0
 10453  006052  0100               	movlb	0	; () banked
 10454  006054  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 10455  006056  0E10               	movlw	16
 10456  006058  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 10457  00605A  EC34  F031         	call	_I2C_Master_Write	;wreg free
 10458                           
 10459                           ;main.c: 1284: I2C_Master_Stop();
 10460  00605E  EC42  F031         	call	_I2C_Master_Stop	;wreg free
 10461  006062  0012               	return	
 10462  006064                     __end_of_I2C_init:
 10463                           	opt stack 0
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           intcon	equ	0xFF2
 10469                           intcon3	equ	0xFF0
 10470                           postinc0	equ	0xFEE
 10471                           wreg	equ	0xFE8
 10472                           postdec1	equ	0xFE5
 10473                           fsr1l	equ	0xFE1
 10474                           indf2	equ	0xFDF
 10475                           postinc2	equ	0xFDE
 10476                           postdec2	equ	0xFDD
 10477                           fsr2h	equ	0xFDA
 10478                           fsr2l	equ	0xFD9
 10479                           status	equ	0xFD8
 10480                           
 10481 ;; *************** function _I2C_Master_Read *****************
 10482 ;; Defined at:
 10483 ;;		line 120 in file "I2C.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;  ackBit          1    wreg     unsigned char 
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;  ackBit          1    1[BANK0 ] unsigned char 
 10488 ;;  receivedByte    1    2[BANK0 ] unsigned char 
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      unsigned char 
 10491 ;; Registers used:
 10492 ;;		wreg, status,2, status,0, cstack
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;Total ram usage:        2 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    5
 10505 ;; This function calls:
 10506 ;;		_I2C_Master_Wait
 10507 ;; This function is called by:
 10508 ;;		_main
 10509 ;;		_get_RTC_initial
 10510 ;;		_get_RTC_final
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           	psect	text19
 10515  006092                     __ptext19:
 10516                           	opt stack 0
 10517  006092                     _I2C_Master_Read:
 10518                           	opt stack 25
 10519                           
 10520                           ;incstack = 0
 10521                           ;I2C_Master_Read@ackBit stored from wreg
 10522  006092  0100               	movlb	0	; () banked
 10523  006094  6FC4               	movwf	I2C_Master_Read@ackBit& (0+255),b
 10524                           
 10525                           ;I2C.c: 130: unsigned char receivedByte;
 10526                           ;I2C.c: 132: I2C_Master_Wait();
 10527  006096  EC01  F031         	call	_I2C_Master_Wait	;wreg free
 10528                           
 10529                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 10530  00609A  86C5               	bsf	4037,3,c	;volatile
 10531                           
 10532                           ;I2C.c: 135: I2C_Master_Wait();
 10533  00609C  EC01  F031         	call	_I2C_Master_Wait	;wreg free
 10534                           
 10535                           ;I2C.c: 136: receivedByte = SSPBUF;
 10536  0060A0  CFC9 F0C5          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 10537                           
 10538                           ;I2C.c: 138: I2C_Master_Wait();
 10539  0060A4  EC01  F031         	call	_I2C_Master_Wait	;wreg free
 10540                           
 10541                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 10542  0060A8  0100               	movlb	0	; () banked
 10543  0060AA  B1C4               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
 10544  0060AC  D002               	bra	u4165
 10545  0060AE  9AC5               	bcf	4037,5,c	;volatile
 10546  0060B0  D001               	bra	u4166
 10547  0060B2                     u4165:
 10548  0060B2  8AC5               	bsf	4037,5,c	;volatile
 10549  0060B4                     u4166:
 10550                           
 10551                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 10552  0060B4  88C5               	bsf	4037,4,c	;volatile
 10553                           
 10554                           ;I2C.c: 142: return receivedByte;
 10555  0060B6  0100               	movlb	0	; () banked
 10556  0060B8  51C5               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
 10557  0060BA  0012               	return	
 10558  0060BC                     __end_of_I2C_Master_Read:
 10559                           	opt stack 0
 10560                           tblptru	equ	0xFF8
 10561                           tblptrh	equ	0xFF7
 10562                           tblptrl	equ	0xFF6
 10563                           tablat	equ	0xFF5
 10564                           intcon	equ	0xFF2
 10565                           intcon3	equ	0xFF0
 10566                           postinc0	equ	0xFEE
 10567                           wreg	equ	0xFE8
 10568                           postdec1	equ	0xFE5
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function _Bolt_remain *****************
 10578 ;; Defined at:
 10579 ;;		line 1496 in file "main.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;  time            2   42[BANK0 ] int 
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;		None
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  1    wreg      void 
 10586 ;; Registers used:
 10587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10593 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10597 ;;Total ram usage:        4 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    9
 10600 ;; This function calls:
 10601 ;;		_I2C_sendData
 10602 ;;		_drawBolt
 10603 ;;		_lcdInst
 10604 ;;		_printf
 10605 ;; This function is called by:
 10606 ;;		_main
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           	psect	text20
 10611  0053EE                     __ptext20:
 10612                           	opt stack 0
 10613  0053EE                     _Bolt_remain:
 10614                           	opt stack 21
 10615                           
 10616                           ;main.c: 1497: drawBolt();
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;incstack = 0
 10620  0053EE  EC82  F027         	call	_drawBolt	;wreg free
 10621                           
 10622                           ;main.c: 1498: _delay((unsigned long)((100)*(32000000/4000.0)));
 10623  0053F2  0E05               	movlw	5
 10624  0053F4  0100               	movlb	0	; () banked
 10625  0053F6  6FF0               	movwf	(??_Bolt_remain+1)& (0+255),b
 10626  0053F8  0E0F               	movlw	15
 10627  0053FA  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10628  0053FC  0EF1               	movlw	241
 10629  0053FE                     u7257:
 10630  0053FE  2EE8               	decfsz	wreg,f,c
 10631  005400  D7FE               	bra	u7257
 10632  005402  2FEF               	decfsz	??_Bolt_remain& (0+255),f,b
 10633  005404  D7FC               	bra	u7257
 10634  005406  2FF0               	decfsz	(??_Bolt_remain+1)& (0+255),f,b
 10635  005408  D7FA               	bra	u7257
 10636                           
 10637                           ;main.c: 1499: I2C_sendData('5');
 10638  00540A  0E35               	movlw	53
 10639  00540C  EC86  F030         	call	_I2C_sendData
 10640                           
 10641                           ;main.c: 1500: while(EndOfProgram!= 1 && B_spacingTime < time){
 10642  005410  D026               	goto	l751
 10643  005412                     
 10644                           ;main.c: 1501: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10645  005412  0E80               	movlw	128
 10646  005414  ECEB  F030         	call	_lcdInst
 10647  005418  0E34               	movlw	52
 10648  00541A  0100               	movlb	0	; () banked
 10649  00541C  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10650  00541E  0EF1               	movlw	241
 10651  005420                     u7267:
 10652  005420  2EE8               	decfsz	wreg,f,c
 10653  005422  D7FE               	bra	u7267
 10654  005424  2FEF               	decfsz	??_Bolt_remain& (0+255),f,b
 10655  005426  D7FC               	bra	u7267
 10656  005428  D000               	nop2	
 10657                           
 10658                           ;main.c: 1502: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 10659  00542A  0E01               	movlw	1
 10660  00542C  ECEB  F030         	call	_lcdInst
 10661  005430  0E9C               	movlw	156
 10662  005432  0100               	movlb	0	; () banked
 10663  005434  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10664  005436  0ED7               	movlw	215
 10665  005438                     u7277:
 10666  005438  2EE8               	decfsz	wreg,f,c
 10667  00543A  D7FE               	bra	u7277
 10668  00543C  2FEF               	decfsz	??_Bolt_remain& (0+255),f,b
 10669  00543E  D7FC               	bra	u7277
 10670                           
 10671                           ;main.c: 1503: B_spacingTime +=30;
 10672  005440  0E1E               	movlw	30
 10673  005442  0100               	movlb	0	; () banked
 10674  005444  279D               	addwf	_B_spacingTime& (0+255),f,b
 10675  005446  0E00               	movlw	0
 10676  005448  239E               	addwfc	(_B_spacingTime+1)& (0+255),f,b
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;main.c: 1504: printf("B:%d",B_counter);
 10680  00544A  0ECF               	movlw	low STR_66
 10681  00544C  6FD1               	movwf	printf@f& (0+255),b
 10682  00544E  0EFF               	movlw	high STR_66
 10683  005450  6FD2               	movwf	(printf@f+1)& (0+255),b
 10684  005452  C0AD  F0D3         	movff	_B_counter,?_printf+2
 10685  005456  C0AE  F0D4         	movff	_B_counter+1,?_printf+3
 10686  00545A  EC2A  F019         	call	_printf	;wreg free
 10687  00545E                     l751:
 10688  00545E  0100               	movlb	0	; () banked
 10689  005460  05BB               	decf	_EndOfProgram& (0+255),w,b
 10690  005462  B4D8               	btfsc	status,2,c
 10691  005464  D00A               	goto	u4390
 10692                           
 10693                           ; BSR set to: 0
 10694  005466  51ED               	movf	Bolt_remain@time& (0+255),w,b
 10695  005468  5D9D               	subwf	_B_spacingTime& (0+255),w,b
 10696  00546A  519E               	movf	(_B_spacingTime+1)& (0+255),w,b
 10697  00546C  0A80               	xorlw	128
 10698  00546E  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10699  005470  51EE               	movf	(Bolt_remain@time+1)& (0+255),w,b
 10700  005472  0A80               	xorlw	128
 10701  005474  59EF               	subwfb	??_Bolt_remain& (0+255),w,b
 10702  005476  A0D8               	btfss	status,0,c
 10703  005478  D7CC               	goto	l752
 10704  00547A                     u4390:
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;main.c: 1505: }
 10708                           ;main.c: 1506: B_remain = B_counter;
 10709                           
 10710                           ; BSR set to: 0
 10711  00547A  C0AD  F0A5         	movff	_B_counter,_B_remain
 10712  00547E  C0AE  F0A6         	movff	_B_counter+1,_B_remain+1
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;main.c: 1507: I2C_sendData('6');
 10716  005482  0E36               	movlw	54
 10717  005484  EC86  F030         	call	_I2C_sendData
 10718                           
 10719                           ;main.c: 1508: if(EndOfProgram != 1){
 10720  005488  0100               	movlb	0	; () banked
 10721  00548A  05BB               	decf	_EndOfProgram& (0+255),w,b
 10722  00548C  B4D8               	btfsc	status,2,c
 10723  00548E  0012               	return	
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;main.c: 1509: _delay((unsigned long)((100)*(32000000/4000.0)));
 10727  005490  0E05               	movlw	5
 10728  005492  0100               	movlb	0	; () banked
 10729  005494  6FF0               	movwf	(??_Bolt_remain+1)& (0+255),b
 10730  005496  0E0F               	movlw	15
 10731  005498  6FEF               	movwf	??_Bolt_remain& (0+255),b
 10732  00549A  0EF1               	movlw	241
 10733  00549C                     u7287:
 10734  00549C  2EE8               	decfsz	wreg,f,c
 10735  00549E  D7FE               	bra	u7287
 10736  0054A0  2FEF               	decfsz	??_Bolt_remain& (0+255),f,b
 10737  0054A2  D7FC               	bra	u7287
 10738  0054A4  2FF0               	decfsz	(??_Bolt_remain+1)& (0+255),f,b
 10739  0054A6  D7FA               	bra	u7287
 10740  0054A8  0012               	return	
 10741  0054AA                     __end_of_Bolt_remain:
 10742                           	opt stack 0
 10743                           tblptru	equ	0xFF8
 10744                           tblptrh	equ	0xFF7
 10745                           tblptrl	equ	0xFF6
 10746                           tablat	equ	0xFF5
 10747                           intcon	equ	0xFF2
 10748                           intcon3	equ	0xFF0
 10749                           postinc0	equ	0xFEE
 10750                           wreg	equ	0xFE8
 10751                           postdec1	equ	0xFE5
 10752                           fsr1l	equ	0xFE1
 10753                           indf2	equ	0xFDF
 10754                           postinc2	equ	0xFDE
 10755                           postdec2	equ	0xFDD
 10756                           fsr2h	equ	0xFDA
 10757                           fsr2l	equ	0xFD9
 10758                           status	equ	0xFD8
 10759                           
 10760 ;; *************** function _Bolt_dispense *****************
 10761 ;; Defined at:
 10762 ;;		line 1298 in file "main.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;  B_max           2   42[BANK0 ] int 
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;		None
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  1    wreg      void 
 10769 ;; Registers used:
 10770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;Total ram usage:        4 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    9
 10783 ;; This function calls:
 10784 ;;		_I2C_sendData
 10785 ;;		_drawBolt
 10786 ;;		_lcdInst
 10787 ;;		_printf
 10788 ;; This function is called by:
 10789 ;;		_main
 10790 ;; This function uses a non-reentrant model
 10791 ;;
 10792                           
 10793                           	psect	text21
 10794  0054AA                     __ptext21:
 10795                           	opt stack 0
 10796  0054AA                     _Bolt_dispense:
 10797                           	opt stack 21
 10798                           
 10799                           ;main.c: 1299: if (B_max == 0){
 10800                           
 10801                           ;incstack = 0
 10802  0054AA  0100               	movlb	0	; () banked
 10803  0054AC  51ED               	movf	Bolt_dispense@B_max& (0+255),w,b
 10804  0054AE  11EE               	iorwf	(Bolt_dispense@B_max+1)& (0+255),w,b
 10805  0054B0  B4D8               	btfsc	status,2,c
 10806  0054B2  0012               	return	
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;main.c: 1301: }
 10810                           ;main.c: 1303: drawBolt();
 10811                           
 10812                           ; BSR set to: 0
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;main.c: 1300: return;
 10816  0054B4  EC82  F027         	call	_drawBolt	;wreg free
 10817                           
 10818                           ;main.c: 1304: _delay((unsigned long)((100)*(32000000/4000.0)));
 10819  0054B8  0E05               	movlw	5
 10820  0054BA  0100               	movlb	0	; () banked
 10821  0054BC  6FF0               	movwf	(??_Bolt_dispense+1)& (0+255),b
 10822  0054BE  0E0F               	movlw	15
 10823  0054C0  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10824  0054C2  0EF1               	movlw	241
 10825  0054C4                     u7297:
 10826  0054C4  2EE8               	decfsz	wreg,f,c
 10827  0054C6  D7FE               	bra	u7297
 10828  0054C8  2FEF               	decfsz	??_Bolt_dispense& (0+255),f,b
 10829  0054CA  D7FC               	bra	u7297
 10830  0054CC  2FF0               	decfsz	(??_Bolt_dispense+1)& (0+255),f,b
 10831  0054CE  D7FA               	bra	u7297
 10832                           
 10833                           ;main.c: 1305: I2C_sendData('5');
 10834  0054D0  0E35               	movlw	53
 10835  0054D2  EC86  F030         	call	_I2C_sendData
 10836                           
 10837                           ;main.c: 1306: while(NeedToCloseLid != 1 && B_counter < B_max){
 10838  0054D6  D022               	goto	l677
 10839  0054D8                     
 10840                           ;main.c: 1307: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 10841  0054D8  0E01               	movlw	1
 10842  0054DA  ECEB  F030         	call	_lcdInst
 10843  0054DE  0E9C               	movlw	156
 10844  0054E0  0100               	movlb	0	; () banked
 10845  0054E2  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10846  0054E4  0ED7               	movlw	215
 10847  0054E6                     u7307:
 10848  0054E6  2EE8               	decfsz	wreg,f,c
 10849  0054E8  D7FE               	bra	u7307
 10850  0054EA  2FEF               	decfsz	??_Bolt_dispense& (0+255),f,b
 10851  0054EC  D7FC               	bra	u7307
 10852                           
 10853                           ;main.c: 1308: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 10854  0054EE  0E80               	movlw	128
 10855  0054F0  ECEB  F030         	call	_lcdInst
 10856  0054F4  0E34               	movlw	52
 10857  0054F6  0100               	movlb	0	; () banked
 10858  0054F8  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10859  0054FA  0EF1               	movlw	241
 10860  0054FC                     u7317:
 10861  0054FC  2EE8               	decfsz	wreg,f,c
 10862  0054FE  D7FE               	bra	u7317
 10863  005500  2FEF               	decfsz	??_Bolt_dispense& (0+255),f,b
 10864  005502  D7FC               	bra	u7317
 10865  005504  D000               	nop2	
 10866                           
 10867                           ;main.c: 1309: printf("B:%d",B_counter);
 10868  005506  0ECF               	movlw	low STR_66
 10869  005508  0100               	movlb	0	; () banked
 10870  00550A  6FD1               	movwf	printf@f& (0+255),b
 10871  00550C  0EFF               	movlw	high STR_66
 10872  00550E  6FD2               	movwf	(printf@f+1)& (0+255),b
 10873  005510  C0AD  F0D3         	movff	_B_counter,?_printf+2
 10874  005514  C0AE  F0D4         	movff	_B_counter+1,?_printf+3
 10875  005518  EC2A  F019         	call	_printf	;wreg free
 10876  00551C                     l677:
 10877  00551C  0100               	movlb	0	; () banked
 10878  00551E  05BA               	decf	_NeedToCloseLid& (0+255),w,b
 10879  005520  B4D8               	btfsc	status,2,c
 10880  005522  D00A               	goto	u4190
 10881                           
 10882                           ; BSR set to: 0
 10883  005524  51ED               	movf	Bolt_dispense@B_max& (0+255),w,b
 10884  005526  5DAD               	subwf	_B_counter& (0+255),w,b
 10885  005528  51AE               	movf	(_B_counter+1)& (0+255),w,b
 10886  00552A  0A80               	xorlw	128
 10887  00552C  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10888  00552E  51EE               	movf	(Bolt_dispense@B_max+1)& (0+255),w,b
 10889  005530  0A80               	xorlw	128
 10890  005532  59EF               	subwfb	??_Bolt_dispense& (0+255),w,b
 10891  005534  A0D8               	btfss	status,0,c
 10892  005536  D7D0               	goto	l678
 10893  005538                     u4190:
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;main.c: 1310: }
 10897                           ;main.c: 1311: I2C_sendData('6');
 10898                           
 10899                           ; BSR set to: 0
 10900                           
 10901                           ; BSR set to: 0
 10902  005538  0E36               	movlw	54
 10903  00553A  EC86  F030         	call	_I2C_sendData
 10904                           
 10905                           ;main.c: 1312: _delay((unsigned long)((100)*(32000000/4000.0)));
 10906  00553E  0E05               	movlw	5
 10907  005540  0100               	movlb	0	; () banked
 10908  005542  6FF0               	movwf	(??_Bolt_dispense+1)& (0+255),b
 10909  005544  0E0F               	movlw	15
 10910  005546  6FEF               	movwf	??_Bolt_dispense& (0+255),b
 10911  005548  0EF1               	movlw	241
 10912  00554A                     u7327:
 10913  00554A  2EE8               	decfsz	wreg,f,c
 10914  00554C  D7FE               	bra	u7327
 10915  00554E  2FEF               	decfsz	??_Bolt_dispense& (0+255),f,b
 10916  005550  D7FC               	bra	u7327
 10917  005552  2FF0               	decfsz	(??_Bolt_dispense+1)& (0+255),f,b
 10918  005554  D7FA               	bra	u7327
 10919  005556  0012               	return		;funcret
 10920  005558                     __end_of_Bolt_dispense:
 10921                           	opt stack 0
 10922                           tblptru	equ	0xFF8
 10923                           tblptrh	equ	0xFF7
 10924                           tblptrl	equ	0xFF6
 10925                           tablat	equ	0xFF5
 10926                           intcon	equ	0xFF2
 10927                           intcon3	equ	0xFF0
 10928                           postinc0	equ	0xFEE
 10929                           wreg	equ	0xFE8
 10930                           postdec1	equ	0xFE5
 10931                           fsr1l	equ	0xFE1
 10932                           indf2	equ	0xFDF
 10933                           postinc2	equ	0xFDE
 10934                           postdec2	equ	0xFDD
 10935                           fsr2h	equ	0xFDA
 10936                           fsr2l	equ	0xFD9
 10937                           status	equ	0xFD8
 10938                           
 10939 ;; *************** function _printf *****************
 10940 ;; Defined at:
 10941 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 10944 ;;		 -> STR_77(5), STR_76(5), STR_75(5), STR_74(5), 
 10945 ;;		 -> STR_73(19), STR_72(20), STR_71(20), STR_70(20), 
 10946 ;;		 -> STR_69(5), STR_68(5), STR_67(5), STR_66(5), 
 10947 ;;		 -> STR_65(3), STR_64(19), STR_63(19), STR_62(14), 
 10948 ;;		 -> STR_61(15), STR_60(9), STR_59(12), STR_58(14), 
 10949 ;;		 -> STR_56(7), STR_54(3), STR_53(11), STR_51(3), 
 10950 ;;		 -> STR_50(9), STR_45(15), STR_44(5), STR_43(17), 
 10951 ;;		 -> STR_42(17), STR_41(14), STR_40(15), STR_39(12), 
 10952 ;;		 -> STR_38(12), STR_37(17), STR_36(13), STR_35(16), 
 10953 ;;		 -> STR_34(15), STR_33(15), STR_32(15), STR_31(15), 
 10954 ;;		 -> STR_30(9), STR_29(10), STR_28(19), STR_27(17), 
 10955 ;;		 -> STR_26(17), STR_25(17), STR_24(14), STR_23(15), 
 10956 ;;		 -> STR_22(11), STR_21(11), STR_20(9), STR_19(15), 
 10957 ;;		 -> STR_18(12), STR_17(12), STR_16(7), STR_15(16), 
 10958 ;;		 -> STR_14(18), STR_13(3), STR_12(2), STR_11(3), 
 10959 ;;		 -> STR_10(2), STR_9(3), STR_8(5), STR_7(17), 
 10960 ;;		 -> STR_6(8), STR_5(3), STR_4(14), STR_3(15), 
 10961 ;;		 -> STR_2(20), STR_1(16), 
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  idx             1   28[BANK0 ] unsigned char 
 10964 ;;  tmpval          4    0        struct .
 10965 ;;  width           2   39[BANK0 ] int 
 10966 ;;  val             2   36[BANK0 ] unsigned int 
 10967 ;;  len             2   34[BANK0 ] unsigned int 
 10968 ;;  ap              2   32[BANK0 ] PTR void [1]
 10969 ;;		 -> ?i2_printf(2), ?_printf(2), 
 10970 ;;  cp              2   30[BANK0 ] PTR const unsigned char 
 10971 ;;		 -> STR_98(7), number(2), final_set(40), current_set(5), 
 10972 ;;  c               1   41[BANK0 ] char 
 10973 ;;  flag            1   38[BANK0 ] unsigned char 
 10974 ;;  prec            1   29[BANK0 ] char 
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  2   14[BANK0 ] int 
 10977 ;; Registers used:
 10978 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 0/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10984 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10987 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;Total ram usage:       28 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; Hardware stack levels required when called:    6
 10991 ;; This function calls:
 10992 ;;		___lwdiv
 10993 ;;		___lwmod
 10994 ;;		___wmul
 10995 ;;		_isdigit
 10996 ;;		_putch
 10997 ;; This function is called by:
 10998 ;;		_main
 10999 ;;		_Bolt_dispense
 11000 ;;		_Nut_dispense
 11001 ;;		_Spacer_dispense
 11002 ;;		_Washer_dispense
 11003 ;;		_Bolt_remain
 11004 ;;		_Nut_remain
 11005 ;;		_Spacer_remain
 11006 ;;		_Washer_remain
 11007 ;;		_count_gear
 11008 ;;		_nut_washer_remain
 11009 ;;		_bolt_spacer_remain
 11010 ;;		_all_remain
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           	psect	text22
 11015  003254                     __ptext22:
 11016                           	opt stack 0
 11017  003254                     _printf:
 11018                           	opt stack 24
 11019                           
 11020                           ;doprnt.c: 466: va_list ap;
 11021                           ;doprnt.c: 499: signed char c;
 11022                           ;doprnt.c: 501: int width;
 11023                           ;doprnt.c: 506: signed char prec;
 11024                           ;doprnt.c: 508: unsigned char flag;
 11025                           ;doprnt.c: 523: union {
 11026                           ;doprnt.c: 524: unsigned long vd;
 11027                           ;doprnt.c: 525: double integ;
 11028                           ;doprnt.c: 526: } tmpval;
 11029                           ;doprnt.c: 528: unsigned int val;
 11030                           ;doprnt.c: 529: unsigned len;
 11031                           ;doprnt.c: 530: const char * cp;
 11032                           ;doprnt.c: 533: *ap = __va_start();
 11033                           
 11034                           ;incstack = 0
 11035  003254  0ED3               	movlw	low (?_printf+2)
 11036  003256  0100               	movlb	0	; () banked
 11037  003258  6FE3               	movwf	printf@ap& (0+255),b
 11038  00325A  0E00               	movlw	high (?_printf+2)
 11039  00325C  6FE4               	movwf	(printf@ap+1)& (0+255),b
 11040                           
 11041                           ;doprnt.c: 536: while(c = *f++) {
 11042  00325E  D20F               	goto	u3990
 11043  003260                     
 11044                           ; BSR set to: 0
 11045                           ;doprnt.c: 538: if(c != '%')
 11046                           
 11047                           ; BSR set to: 0
 11048  003260  0E25               	movlw	37
 11049  003262  19EC               	xorwf	printf@c& (0+255),w,b
 11050  003264  B4D8               	btfsc	status,2,c
 11051  003266  D004               	goto	l1393
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;doprnt.c: 540: {
 11055                           ;doprnt.c: 541: (putch(c) );
 11056  003268  51EC               	movf	printf@c& (0+255),w,b
 11057  00326A  ECDF  F030         	call	_putch
 11058                           
 11059                           ;doprnt.c: 542: continue;
 11060  00326E  D207               	goto	u3990
 11061  003270                     l1393:
 11062                           
 11063                           ;doprnt.c: 543: }
 11064                           ;doprnt.c: 546: width = 0;
 11065  003270  0E00               	movlw	0
 11066  003272  0100               	movlb	0	; () banked
 11067  003274  6FEB               	movwf	(printf@width+1)& (0+255),b
 11068  003276  0E00               	movlw	0
 11069  003278  6FEA               	movwf	printf@width& (0+255),b
 11070                           
 11071                           ;doprnt.c: 548: flag = 0;
 11072  00327A  0E00               	movlw	0
 11073  00327C  6FE9               	movwf	printf@flag& (0+255),b
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;doprnt.c: 551: switch(*f) {
 11077                           
 11078                           ;doprnt.c: 550: for(;;) {
 11079  00327E  D004               	goto	l1395
 11080  003280                     
 11081                           ;doprnt.c: 580: flag |= 0x04;
 11082                           
 11083                           ; BSR set to: 0
 11084  003280  0100               	movlb	0	; () banked
 11085  003282  85E9               	bsf	printf@flag& (0+255),2,b
 11086                           
 11087                           ;doprnt.c: 581: f++;
 11088  003284  4BD1               	infsnz	printf@f& (0+255),f,b
 11089  003286  2BD2               	incf	(printf@f+1)& (0+255),f,b
 11090  003288                     l1395:
 11091                           
 11092                           ; BSR set to: 0
 11093  003288  C0D1  FFF6         	movff	printf@f,tblptrl
 11094  00328C  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11095  003290                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11096  003290  6AF8               	clrf	tblptru,c
 11097  003292                     	endif
 11098  003292                     	if	0	;tblptru may be non-zero
 11099  003292                     	endif
 11100  003292  0008               	tblrd		*
 11101  003294  50F5               	movf	tablat,w,c
 11102                           
 11103                           ; Switch size 1, requested type "space"
 11104                           ; Number of cases is 1, Range of values is 48 to 48
 11105                           ; switch strategies available:
 11106                           ; Name         Instructions Cycles
 11107                           ; simple_byte            4     3 (average)
 11108                           ;	Chosen strategy is simple_byte
 11109  003296  0A30               	xorlw	48	; case 48
 11110  003298  B4D8               	btfsc	status,2,c
 11111  00329A  D7F2               	goto	l1396
 11112                           
 11113                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11114                           
 11115                           ;doprnt.c: 586: }
 11116                           
 11117                           ;doprnt.c: 585: break;
 11118  00329C  C0D1  FFF6         	movff	printf@f,tblptrl
 11119  0032A0  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11120  0032A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11121  0032A4  6AF8               	clrf	tblptru,c
 11122  0032A6                     	endif
 11123  0032A6                     	if	0	;tblptru may be non-zero
 11124  0032A6                     	endif
 11125  0032A6  0008               	tblrd		*
 11126  0032A8  50F5               	movf	tablat,w,c
 11127  0032AA  ECBF  F030         	call	_isdigit
 11128  0032AE  A0D8               	btfss	status,0,c
 11129  0032B0  D0AE               	goto	l1403
 11130                           
 11131                           ;doprnt.c: 598: width = 0;
 11132  0032B2  0E00               	movlw	0
 11133  0032B4  0100               	movlb	0	; () banked
 11134  0032B6  6FEB               	movwf	(printf@width+1)& (0+255),b
 11135  0032B8  0E00               	movlw	0
 11136  0032BA  6FEA               	movwf	printf@width& (0+255),b
 11137  0032BC                     
 11138                           ;doprnt.c: 600: width *= 10;
 11139                           
 11140                           ; BSR set to: 0
 11141  0032BC  C0EA  F0CB         	movff	printf@width,___wmul@multiplier
 11142  0032C0  C0EB  F0CC         	movff	printf@width+1,___wmul@multiplier+1
 11143  0032C4  0E00               	movlw	0
 11144  0032C6  0100               	movlb	0	; () banked
 11145  0032C8  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11146  0032CA  0E0A               	movlw	10
 11147  0032CC  6FCD               	movwf	___wmul@multiplicand& (0+255),b
 11148  0032CE  EC72  F030         	call	___wmul	;wreg free
 11149  0032D2  C0CB  F0EA         	movff	?___wmul,printf@width
 11150  0032D6  C0CC  F0EB         	movff	?___wmul+1,printf@width+1
 11151                           
 11152                           ;doprnt.c: 601: width += *f++ - '0';
 11153  0032DA  0ED0               	movlw	208
 11154  0032DC  0100               	movlb	0	; () banked
 11155  0032DE  6FDB               	movwf	??_printf& (0+255),b
 11156  0032E0  0EFF               	movlw	255
 11157  0032E2  6FDC               	movwf	(??_printf+1)& (0+255),b
 11158  0032E4  C0D1  FFF6         	movff	printf@f,tblptrl
 11159  0032E8  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11160  0032EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11161  0032EC  6AF8               	clrf	tblptru,c
 11162  0032EE                     	endif
 11163  0032EE                     	if	0	;tblptru may be non-zero
 11164  0032EE                     	endif
 11165  0032EE  0008               	tblrd		*
 11166  0032F0  50F5               	movf	tablat,w,c
 11167  0032F2  6FDD               	movwf	(??_printf+2)& (0+255),b
 11168  0032F4  6BDE               	clrf	(??_printf+3)& (0+255),b
 11169  0032F6  51DB               	movf	??_printf& (0+255),w,b
 11170  0032F8  27DD               	addwf	(??_printf+2)& (0+255),f,b
 11171  0032FA  51DC               	movf	(??_printf+1)& (0+255),w,b
 11172  0032FC  23DE               	addwfc	(??_printf+3)& (0+255),f,b
 11173  0032FE  51DD               	movf	(??_printf+2)& (0+255),w,b
 11174  003300  27EA               	addwf	printf@width& (0+255),f,b
 11175  003302  51DE               	movf	(??_printf+3)& (0+255),w,b
 11176  003304  23EB               	addwfc	(printf@width+1)& (0+255),f,b
 11177                           
 11178                           ; BSR set to: 0
 11179  003306  4BD1               	infsnz	printf@f& (0+255),f,b
 11180  003308  2BD2               	incf	(printf@f+1)& (0+255),f,b
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11184  00330A  C0D1  FFF6         	movff	printf@f,tblptrl
 11185  00330E  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11186  003312                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11187  003312  6AF8               	clrf	tblptru,c
 11188  003314                     	endif
 11189  003314                     	if	0	;tblptru may be non-zero
 11190  003314                     	endif
 11191  003314  0008               	tblrd		*
 11192  003316  50F5               	movf	tablat,w,c
 11193  003318  ECBF  F030         	call	_isdigit
 11194  00331C  A0D8               	btfss	status,0,c
 11195  00331E  D077               	goto	l1403
 11196  003320  D7CD               	goto	l1401
 11197  003322                     
 11198                           ;doprnt.c: 721: flag |= 0x80;
 11199  003322  0100               	movlb	0	; () banked
 11200  003324  8FE9               	bsf	printf@flag& (0+255),7,b
 11201                           
 11202                           ;doprnt.c: 723: break;
 11203  003326  D08F               	goto	l1408
 11204  003328                     
 11205                           ; BSR set to: 0
 11206                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11207                           
 11208                           ; BSR set to: 0
 11209  003328  C0E3  FFD9         	movff	printf@ap,fsr2l
 11210  00332C  C0E4  FFDA         	movff	printf@ap+1,fsr2h
 11211  003330  CFDE F0E1          	movff	postinc2,printf@cp
 11212  003334  CFDD F0E2          	movff	postdec2,printf@cp+1
 11213                           
 11214                           ; BSR set to: 0
 11215  003338  0E02               	movlw	2
 11216  00333A  27E3               	addwf	printf@ap& (0+255),f,b
 11217  00333C  0E00               	movlw	0
 11218  00333E  23E4               	addwfc	(printf@ap+1)& (0+255),f,b
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;doprnt.c: 740: if(!cp)
 11222  003340  51E1               	movf	printf@cp& (0+255),w,b
 11223  003342  11E2               	iorwf	(printf@cp+1)& (0+255),w,b
 11224  003344  A4D8               	btfss	status,2,c
 11225  003346  D004               	goto	l1411
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;doprnt.c: 741: cp = "(null)";
 11229  003348  0E97               	movlw	low STR_98
 11230  00334A  6FE1               	movwf	printf@cp& (0+255),b
 11231  00334C  0EFF               	movlw	high STR_98
 11232  00334E  6FE2               	movwf	(printf@cp+1)& (0+255),b
 11233  003350                     l1411:
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;doprnt.c: 745: len = 0;
 11237                           
 11238                           ; BSR set to: 0
 11239  003350  0E00               	movlw	0
 11240  003352  6FE6               	movwf	(printf@len+1)& (0+255),b
 11241  003354  0E00               	movlw	0
 11242  003356  6FE5               	movwf	printf@len& (0+255),b
 11243                           
 11244                           ;doprnt.c: 746: while(cp[len])
 11245  003358  D003               	goto	l1412
 11246  00335A                     
 11247                           ;doprnt.c: 747: len++;
 11248                           
 11249                           ; BSR set to: 0
 11250  00335A  0100               	movlb	0	; () banked
 11251  00335C  4BE5               	infsnz	printf@len& (0+255),f,b
 11252  00335E  2BE6               	incf	(printf@len+1)& (0+255),f,b
 11253  003360                     l1412:
 11254                           
 11255                           ; BSR set to: 0
 11256                           
 11257                           ; BSR set to: 0
 11258  003360  51E5               	movf	printf@len& (0+255),w,b
 11259  003362  25E1               	addwf	printf@cp& (0+255),w,b
 11260  003364  6FDB               	movwf	??_printf& (0+255),b
 11261  003366  51E6               	movf	(printf@len+1)& (0+255),w,b
 11262  003368  21E2               	addwfc	(printf@cp+1)& (0+255),w,b
 11263  00336A  6FDC               	movwf	(??_printf+1)& (0+255),b
 11264  00336C  C0DB  FFF6         	movff	??_printf,tblptrl
 11265  003370  C0DC  FFF7         	movff	??_printf+1,tblptrh
 11266  003374  0E00               	movlw	low (__mediumconst shr (0+16))
 11267  003376  6EF8               	movwf	tblptru,c
 11268  003378  0E0F               	movlw	(high __ramtop+-1)
 11269  00337A  64F7               	cpfsgt	tblptrh,c
 11270  00337C  D003               	bra	u3757
 11271  00337E  0008               	tblrd		*
 11272  003380  50F5               	movf	tablat,w,c
 11273  003382  D005               	bra	u3750
 11274  003384                     u3757:
 11275  003384  CFF6 FFE9          	movff	tblptrl,fsr0l
 11276  003388  CFF7 FFEA          	movff	tblptrh,fsr0h
 11277  00338C  50EF               	movf	indf0,w,c
 11278  00338E                     u3750:
 11279  00338E  0900               	iorlw	0
 11280  003390  A4D8               	btfss	status,2,c
 11281  003392  D7E3               	goto	l1413
 11282                           
 11283                           ;doprnt.c: 757: if(width > len)
 11284  003394  0100               	movlb	0	; () banked
 11285  003396  51EA               	movf	printf@width& (0+255),w,b
 11286  003398  5DE5               	subwf	printf@len& (0+255),w,b
 11287  00339A  51EB               	movf	(printf@width+1)& (0+255),w,b
 11288  00339C  59E6               	subwfb	(printf@len+1)& (0+255),w,b
 11289  00339E  B0D8               	btfsc	status,0,c
 11290  0033A0  D005               	goto	l1415
 11291                           
 11292                           ; BSR set to: 0
 11293                           ;doprnt.c: 758: width -= len;
 11294  0033A2  51E5               	movf	printf@len& (0+255),w,b
 11295  0033A4  5FEA               	subwf	printf@width& (0+255),f,b
 11296  0033A6  51E6               	movf	(printf@len+1)& (0+255),w,b
 11297  0033A8  5BEB               	subwfb	(printf@width+1)& (0+255),f,b
 11298  0033AA  D008               	goto	l1417
 11299  0033AC                     l1415:
 11300                           
 11301                           ; BSR set to: 0
 11302                           ;doprnt.c: 759: else
 11303                           ;doprnt.c: 760: width = 0;
 11304                           
 11305                           ; BSR set to: 0
 11306  0033AC  0E00               	movlw	0
 11307  0033AE  6FEB               	movwf	(printf@width+1)& (0+255),b
 11308  0033B0  0E00               	movlw	0
 11309  0033B2  6FEA               	movwf	printf@width& (0+255),b
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;doprnt.c: 764: while(width--)
 11313  0033B4  D003               	goto	l1417
 11314  0033B6                     l5819:
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;doprnt.c: 765: (putch(' ') );
 11318  0033B6  0E20               	movlw	32
 11319  0033B8  ECDF  F030         	call	_putch
 11320  0033BC                     l1417:
 11321  0033BC  0100               	movlb	0	; () banked
 11322  0033BE  07EA               	decf	printf@width& (0+255),f,b
 11323  0033C0  A0D8               	btfss	status,0,c
 11324  0033C2  07EB               	decf	(printf@width+1)& (0+255),f,b
 11325  0033C4  29EA               	incf	printf@width& (0+255),w,b
 11326  0033C6  E1F7               	bnz	l5819
 11327  0033C8  29EB               	incf	(printf@width+1)& (0+255),w,b
 11328  0033CA  B4D8               	btfsc	status,2,c
 11329  0033CC  D017               	goto	l1420
 11330  0033CE  D7F3               	goto	l1418
 11331  0033D0                     l5823:
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;doprnt.c: 768: (putch(*cp++) );
 11335  0033D0  C0E1  FFF6         	movff	printf@cp,tblptrl
 11336  0033D4  C0E2  FFF7         	movff	printf@cp+1,tblptrh
 11337  0033D8  0E00               	movlw	low (__mediumconst shr (0+16))
 11338  0033DA  6EF8               	movwf	tblptru,c
 11339  0033DC  0E0F               	movlw	(high __ramtop+-1)
 11340  0033DE  64F7               	cpfsgt	tblptrh,c
 11341  0033E0  D003               	bra	u3797
 11342  0033E2  0008               	tblrd		*
 11343  0033E4  50F5               	movf	tablat,w,c
 11344  0033E6  D005               	bra	u3790
 11345  0033E8                     u3797:
 11346  0033E8  CFF6 FFE9          	movff	tblptrl,fsr0l
 11347  0033EC  CFF7 FFEA          	movff	tblptrh,fsr0h
 11348  0033F0  50EF               	movf	indf0,w,c
 11349  0033F2                     u3790:
 11350  0033F2  ECDF  F030         	call	_putch
 11351  0033F6  0100               	movlb	0	; () banked
 11352  0033F8  4BE1               	infsnz	printf@cp& (0+255),f,b
 11353  0033FA  2BE2               	incf	(printf@cp+1)& (0+255),f,b
 11354  0033FC                     l1420:
 11355                           
 11356                           ; BSR set to: 0
 11357                           
 11358                           ; BSR set to: 0
 11359  0033FC  07E5               	decf	printf@len& (0+255),f,b
 11360  0033FE  A0D8               	btfss	status,0,c
 11361  003400  07E6               	decf	(printf@len+1)& (0+255),f,b
 11362  003402  29E5               	incf	printf@len& (0+255),w,b
 11363  003404  E1E5               	bnz	l5823
 11364  003406  29E6               	incf	(printf@len+1)& (0+255),w,b
 11365  003408  B4D8               	btfsc	status,2,c
 11366  00340A  D139               	goto	u3990
 11367  00340C  D7E1               	goto	l1421
 11368  00340E                     l1403:
 11369                           
 11370                           ; BSR set to: 0
 11371  00340E  C0D1  FFF6         	movff	printf@f,tblptrl
 11372  003412  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11373  003416  0100               	movlb	0	; () banked
 11374  003418  4BD1               	infsnz	printf@f& (0+255),f,b
 11375  00341A  2BD2               	incf	(printf@f+1)& (0+255),f,b
 11376  00341C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11377  00341C  6AF8               	clrf	tblptru,c
 11378  00341E                     	endif
 11379  00341E                     	if	0	;tblptru may be non-zero
 11380  00341E                     	endif
 11381  00341E  0008               	tblrd		*
 11382  003420  CFF5 F0EC          	movff	tablat,printf@c
 11383  003424  51EC               	movf	printf@c& (0+255),w,b
 11384                           
 11385                           ; Switch size 1, requested type "space"
 11386                           ; Number of cases is 5, Range of values is 0 to 120
 11387                           ; switch strategies available:
 11388                           ; Name         Instructions Cycles
 11389                           ; simple_byte           16     9 (average)
 11390                           ;	Chosen strategy is simple_byte
 11391  003426  0A00               	xorlw	0	; case 0
 11392  003428  B4D8               	btfsc	status,2,c
 11393  00342A  0012               	return	
 11394  00342C  0A64               	xorlw	100	; case 100
 11395  00342E  B4D8               	btfsc	status,2,c
 11396  003430  D00A               	goto	l1408
 11397  003432  0A0D               	xorlw	13	; case 105
 11398  003434  B4D8               	btfsc	status,2,c
 11399  003436  D007               	goto	l1408
 11400  003438  0A1A               	xorlw	26	; case 115
 11401  00343A  B4D8               	btfsc	status,2,c
 11402  00343C  D775               	goto	l1410
 11403  00343E  0A0B               	xorlw	11	; case 120
 11404  003440  B4D8               	btfsc	status,2,c
 11405  003442  D76F               	goto	l1409
 11406  003444  D11C               	goto	u3990
 11407  003446                     l1408:
 11408                           
 11409                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11410  003446  0100               	movlb	0	; () banked
 11411  003448  BFE9               	btfsc	printf@flag& (0+255),7,b
 11412  00344A  D015               	goto	l1424
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;doprnt.c: 1253: {
 11416                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11417  00344C  C0E3  FFD9         	movff	printf@ap,fsr2l
 11418  003450  C0E4  FFDA         	movff	printf@ap+1,fsr2h
 11419  003454  CFDE F0E7          	movff	postinc2,printf@val
 11420  003458  CFDD F0E8          	movff	postdec2,printf@val+1
 11421                           
 11422                           ; BSR set to: 0
 11423  00345C  0E02               	movlw	2
 11424  00345E  27E3               	addwf	printf@ap& (0+255),f,b
 11425  003460  0E00               	movlw	0
 11426  003462  23E4               	addwfc	(printf@ap+1)& (0+255),f,b
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;doprnt.c: 1261: if((int)val < 0) {
 11430  003464  AFE8               	btfss	(printf@val+1)& (0+255),7,b
 11431  003466  D04A               	goto	l1427
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;doprnt.c: 1262: flag |= 0x03;
 11435  003468  0E03               	movlw	3
 11436  00346A  13E9               	iorwf	printf@flag& (0+255),f,b
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;doprnt.c: 1263: val = -val;
 11440  00346C  6DE7               	negf	printf@val& (0+255),b
 11441  00346E  1FE8               	comf	(printf@val+1)& (0+255),f,b
 11442  003470  B0D8               	btfsc	status,0,c
 11443  003472  2BE8               	incf	(printf@val+1)& (0+255),f,b
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;doprnt.c: 1264: }
 11447                           ;doprnt.c: 1266: }
 11448  003474  D043               	goto	l1427
 11449  003476                     l1424:
 11450                           
 11451                           ; BSR set to: 0
 11452                           ;doprnt.c: 1268: else
 11453                           ;doprnt.c: 1273: {
 11454                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11455                           
 11456                           ; BSR set to: 0
 11457  003476  C0E3  FFD9         	movff	printf@ap,fsr2l
 11458  00347A  C0E4  FFDA         	movff	printf@ap+1,fsr2h
 11459  00347E  CFDE F0E7          	movff	postinc2,printf@val
 11460  003482  CFDD F0E8          	movff	postdec2,printf@val+1
 11461                           
 11462                           ; BSR set to: 0
 11463  003486  0E02               	movlw	2
 11464  003488  27E3               	addwf	printf@ap& (0+255),f,b
 11465  00348A  0E00               	movlw	0
 11466  00348C  23E4               	addwfc	(printf@ap+1)& (0+255),f,b
 11467                           
 11468                           ; BSR set to: 0
 11469                           ;doprnt.c: 1287: }
 11470                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 11471  00348E  D036               	goto	l1427
 11472  003490                     
 11473                           ; BSR set to: 0
 11474                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11475                           
 11476                           ; BSR set to: 0
 11477  003490  0E01               	movlw	1
 11478  003492  6FEC               	movwf	printf@c& (0+255),b
 11479  003494                     l5849:
 11480                           
 11481                           ; BSR set to: 0
 11482  003494  0E05               	movlw	5
 11483  003496  19EC               	xorwf	printf@c& (0+255),w,b
 11484  003498  B4D8               	btfsc	status,2,c
 11485  00349A  D038               	goto	l1432
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;doprnt.c: 1306: if(val < dpowers[c])
 11489                           
 11490                           ; BSR set to: 0
 11491                           
 11492                           ; BSR set to: 0
 11493  00349C  51EC               	movf	printf@c& (0+255),w,b
 11494  00349E  0D02               	mullw	2
 11495  0034A0  0E64               	movlw	low _dpowers
 11496  0034A2  24F3               	addwf	prodl,w,c
 11497  0034A4  6EF6               	movwf	tblptrl,c
 11498  0034A6  0EFC               	movlw	high _dpowers
 11499  0034A8  20F4               	addwfc	prodh,w,c
 11500  0034AA  6EF7               	movwf	tblptrh,c
 11501  0034AC                     	if	1	;There are 3 active tblptr bytes
 11502  0034AC  6AF8               	clrf	tblptru,c
 11503  0034AE  0E00               	movlw	low (__mediumconst shr (0+16))
 11504  0034B0  22F8               	addwfc	tblptru,f,c
 11505  0034B2                     	endif
 11506  0034B2  0009               	tblrd		*+
 11507  0034B4  50F5               	movf	tablat,w,c
 11508  0034B6  5DE7               	subwf	printf@val& (0+255),w,b
 11509  0034B8  0009               	tblrd		*+
 11510  0034BA  50F5               	movf	tablat,w,c
 11511  0034BC  59E8               	subwfb	(printf@val+1)& (0+255),w,b
 11512  0034BE  A0D8               	btfss	status,0,c
 11513  0034C0  D025               	goto	l1432
 11514                           
 11515                           ; BSR set to: 0
 11516                           
 11517                           ; BSR set to: 0
 11518                           
 11519                           ; BSR set to: 0
 11520                           ;doprnt.c: 1307: break;
 11521  0034C2  2BEC               	incf	printf@c& (0+255),f,b
 11522  0034C4  D7E7               	goto	l5849
 11523  0034C6                     
 11524                           ; BSR set to: 0
 11525                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11526                           
 11527                           ; BSR set to: 0
 11528  0034C6  0E01               	movlw	1
 11529  0034C8  6FEC               	movwf	printf@c& (0+255),b
 11530  0034CA                     l5863:
 11531                           
 11532                           ; BSR set to: 0
 11533  0034CA  0E04               	movlw	4
 11534  0034CC  19EC               	xorwf	printf@c& (0+255),w,b
 11535  0034CE  B4D8               	btfsc	status,2,c
 11536  0034D0  D01D               	goto	l1432
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11540                           
 11541                           ; BSR set to: 0
 11542                           
 11543                           ; BSR set to: 0
 11544  0034D2  51EC               	movf	printf@c& (0+255),w,b
 11545  0034D4  0D02               	mullw	2
 11546  0034D6  0E6E               	movlw	low _hexpowers
 11547  0034D8  24F3               	addwf	prodl,w,c
 11548  0034DA  6EF6               	movwf	tblptrl,c
 11549  0034DC  0EFC               	movlw	high _hexpowers
 11550  0034DE  20F4               	addwfc	prodh,w,c
 11551  0034E0  6EF7               	movwf	tblptrh,c
 11552  0034E2                     	if	1	;There are 3 active tblptr bytes
 11553  0034E2  6AF8               	clrf	tblptru,c
 11554  0034E4  0E00               	movlw	low (__mediumconst shr (0+16))
 11555  0034E6  22F8               	addwfc	tblptru,f,c
 11556  0034E8                     	endif
 11557  0034E8  0009               	tblrd		*+
 11558  0034EA  50F5               	movf	tablat,w,c
 11559  0034EC  5DE7               	subwf	printf@val& (0+255),w,b
 11560  0034EE  0009               	tblrd		*+
 11561  0034F0  50F5               	movf	tablat,w,c
 11562  0034F2  59E8               	subwfb	(printf@val+1)& (0+255),w,b
 11563  0034F4  A0D8               	btfss	status,0,c
 11564  0034F6  D00A               	goto	l1432
 11565                           
 11566                           ; BSR set to: 0
 11567                           
 11568                           ; BSR set to: 0
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;doprnt.c: 1318: break;
 11572  0034F8  2BEC               	incf	printf@c& (0+255),f,b
 11573  0034FA  D7E7               	goto	l5863
 11574  0034FC                     l1427:
 11575                           
 11576                           ; BSR set to: 0
 11577                           
 11578                           ; BSR set to: 0
 11579  0034FC  51E9               	movf	printf@flag& (0+255),w,b
 11580  0034FE  0B80               	andlw	128
 11581                           
 11582                           ; Switch size 1, requested type "space"
 11583                           ; Number of cases is 2, Range of values is 0 to 128
 11584                           ; switch strategies available:
 11585                           ; Name         Instructions Cycles
 11586                           ; simple_byte            7     4 (average)
 11587                           ;	Chosen strategy is simple_byte
 11588  003500  0A00               	xorlw	0	; case 0
 11589  003502  B4D8               	btfsc	status,2,c
 11590  003504  D7C5               	goto	l1428
 11591  003506  0A80               	xorlw	128	; case 128
 11592  003508  B4D8               	btfsc	status,2,c
 11593  00350A  D7DD               	goto	l1433
 11594  00350C                     l1432:
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11598                           
 11599                           ; BSR set to: 0
 11600  00350C  51EA               	movf	printf@width& (0+255),w,b
 11601  00350E  11EB               	iorwf	(printf@width+1)& (0+255),w,b
 11602  003510  B4D8               	btfsc	status,2,c
 11603  003512  D009               	goto	l1437
 11604                           
 11605                           ; BSR set to: 0
 11606  003514  C0E9  F0DB         	movff	printf@flag,??_printf
 11607  003518  0E03               	movlw	3
 11608  00351A  17DB               	andwf	??_printf& (0+255),f,b
 11609  00351C  B4D8               	btfsc	status,2,c
 11610  00351E  D003               	goto	l1437
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;doprnt.c: 1346: width--;
 11614  003520  07EA               	decf	printf@width& (0+255),f,b
 11615  003522  A0D8               	btfss	status,0,c
 11616  003524  07EB               	decf	(printf@width+1)& (0+255),f,b
 11617  003526                     l1437:
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;doprnt.c: 1381: if(width > c)
 11621                           
 11622                           ; BSR set to: 0
 11623  003526  0E80               	movlw	128
 11624  003528  BFEC               	btfsc	printf@c& (0+255),7,b
 11625  00352A  0E7F               	movlw	127
 11626  00352C  6FDB               	movwf	??_printf& (0+255),b
 11627  00352E  51EA               	movf	printf@width& (0+255),w,b
 11628  003530  5DEC               	subwf	printf@c& (0+255),w,b
 11629  003532  51EB               	movf	(printf@width+1)& (0+255),w,b
 11630  003534  0A80               	xorlw	128
 11631  003536  59DB               	subwfb	??_printf& (0+255),w,b
 11632  003538  B0D8               	btfsc	status,0,c
 11633  00353A  D007               	goto	l1438
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;doprnt.c: 1382: width -= c;
 11637  00353C  51EC               	movf	printf@c& (0+255),w,b
 11638  00353E  5FEA               	subwf	printf@width& (0+255),f,b
 11639  003540  0E00               	movlw	0
 11640  003542  BFEC               	btfsc	printf@c& (0+255),7,b
 11641  003544  0EFF               	movlw	255
 11642  003546  5BEB               	subwfb	(printf@width+1)& (0+255),f,b
 11643  003548  D004               	goto	l1439
 11644  00354A                     l1438:
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;doprnt.c: 1383: else
 11648                           ;doprnt.c: 1384: width = 0;
 11649                           
 11650                           ; BSR set to: 0
 11651  00354A  0E00               	movlw	0
 11652  00354C  6FEB               	movwf	(printf@width+1)& (0+255),b
 11653  00354E  0E00               	movlw	0
 11654  003550  6FEA               	movwf	printf@width& (0+255),b
 11655  003552                     l1439:
 11656                           
 11657                           ; BSR set to: 0
 11658                           ;doprnt.c: 1387: if(flag & 0x04) {
 11659                           
 11660                           ; BSR set to: 0
 11661  003552  A5E9               	btfss	printf@flag& (0+255),2,b
 11662  003554  D016               	goto	l1440
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;doprnt.c: 1392: if(flag & 0x03)
 11666  003556  C0E9  F0DB         	movff	printf@flag,??_printf
 11667  00355A  0E03               	movlw	3
 11668  00355C  17DB               	andwf	??_printf& (0+255),f,b
 11669  00355E  B4D8               	btfsc	status,2,c
 11670  003560  D003               	goto	l1441
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;doprnt.c: 1393: (putch('-') );
 11674  003562  0E2D               	movlw	45
 11675  003564  ECDF  F030         	call	_putch
 11676  003568                     l1441:
 11677                           
 11678                           ;doprnt.c: 1415: if(width)
 11679  003568  0100               	movlb	0	; () banked
 11680  00356A  51EA               	movf	printf@width& (0+255),w,b
 11681  00356C  11EB               	iorwf	(printf@width+1)& (0+255),w,b
 11682  00356E  B4D8               	btfsc	status,2,c
 11683  003570  D020               	goto	l1449
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;doprnt.c: 1417: (putch('0') );
 11687                           
 11688                           ; BSR set to: 0
 11689                           
 11690                           ;doprnt.c: 1416: do
 11691  003572  0E30               	movlw	48
 11692  003574  ECDF  F030         	call	_putch
 11693                           
 11694                           ;doprnt.c: 1418: while(--width);
 11695  003578  0100               	movlb	0	; () banked
 11696  00357A  07EA               	decf	printf@width& (0+255),f,b
 11697  00357C  A0D8               	btfss	status,0,c
 11698  00357E  07EB               	decf	(printf@width+1)& (0+255),f,b
 11699  003580  D7F4               	goto	L16
 11700  003582                     l1440:
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;doprnt.c: 1422: {
 11704                           ;doprnt.c: 1424: if(width
 11705                           ;doprnt.c: 1428: )
 11706                           
 11707                           ; BSR set to: 0
 11708  003582  51EA               	movf	printf@width& (0+255),w,b
 11709  003584  11EB               	iorwf	(printf@width+1)& (0+255),w,b
 11710  003586  B4D8               	btfsc	status,2,c
 11711  003588  D00B               	goto	u3970
 11712  00358A                     u3960:
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;doprnt.c: 1430: (putch(' ') );
 11716                           
 11717                           ; BSR set to: 0
 11718                           
 11719                           ;doprnt.c: 1429: do
 11720  00358A  0E20               	movlw	32
 11721  00358C  ECDF  F030         	call	_putch
 11722                           
 11723                           ;doprnt.c: 1431: while(--width);
 11724  003590  0100               	movlb	0	; () banked
 11725  003592  07EA               	decf	printf@width& (0+255),f,b
 11726  003594  A0D8               	btfss	status,0,c
 11727  003596  07EB               	decf	(printf@width+1)& (0+255),f,b
 11728  003598  51EA               	movf	printf@width& (0+255),w,b
 11729  00359A  11EB               	iorwf	(printf@width+1)& (0+255),w,b
 11730  00359C  A4D8               	btfss	status,2,c
 11731  00359E  D7F5               	goto	u3960
 11732  0035A0                     u3970:
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;doprnt.c: 1438: if(flag & 0x03)
 11736                           
 11737                           ; BSR set to: 0
 11738                           
 11739                           ; BSR set to: 0
 11740  0035A0  C0E9  F0DB         	movff	printf@flag,??_printf
 11741  0035A4  0E03               	movlw	3
 11742  0035A6  17DB               	andwf	??_printf& (0+255),f,b
 11743  0035A8  B4D8               	btfsc	status,2,c
 11744  0035AA  D003               	goto	l1449
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;doprnt.c: 1439: (putch('-') );
 11748  0035AC  0E2D               	movlw	45
 11749  0035AE  ECDF  F030         	call	_putch
 11750  0035B2                     l1449:
 11751                           
 11752                           ;doprnt.c: 1469: }
 11753                           ;doprnt.c: 1472: prec = c;
 11754  0035B2  C0EC  F0E0         	movff	printf@c,printf@prec
 11755                           
 11756                           ;doprnt.c: 1474: while(prec--) {
 11757  0035B6  D05E               	goto	l1450
 11758  0035B8                     
 11759                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11760  0035B8  0100               	movlb	0	; () banked
 11761  0035BA  51E0               	movf	printf@prec& (0+255),w,b
 11762  0035BC  0D02               	mullw	2
 11763  0035BE  0E64               	movlw	low _dpowers
 11764  0035C0  24F3               	addwf	prodl,w,c
 11765  0035C2  6EF6               	movwf	tblptrl,c
 11766  0035C4  0EFC               	movlw	high _dpowers
 11767  0035C6  20F4               	addwfc	prodh,w,c
 11768  0035C8  6EF7               	movwf	tblptrh,c
 11769  0035CA                     	if	1	;There are 3 active tblptr bytes
 11770  0035CA  6AF8               	clrf	tblptru,c
 11771  0035CC  0E00               	movlw	low (__mediumconst shr (0+16))
 11772  0035CE  22F8               	addwfc	tblptru,f,c
 11773  0035D0                     	endif
 11774  0035D0  0009               	tblrd		*+
 11775  0035D2  CFF5 F0C5          	movff	tablat,___lwdiv@divisor
 11776  0035D6  000A               	tblrd		*-
 11777  0035D8  CFF5 F0C6          	movff	tablat,___lwdiv@divisor+1
 11778  0035DC  C0E7  F0C3         	movff	printf@val,___lwdiv@dividend
 11779  0035E0  C0E8  F0C4         	movff	printf@val+1,___lwdiv@dividend+1
 11780  0035E4  ECB2  F02E         	call	___lwdiv	;wreg free
 11781  0035E8  C0C3  F0CA         	movff	?___lwdiv,___lwmod@dividend
 11782  0035EC  C0C4  F0CB         	movff	?___lwdiv+1,___lwmod@dividend+1
 11783  0035F0  0E00               	movlw	0
 11784  0035F2  0100               	movlb	0	; () banked
 11785  0035F4  6FCD               	movwf	(___lwmod@divisor+1)& (0+255),b
 11786  0035F6  0E0A               	movlw	10
 11787  0035F8  6FCC               	movwf	___lwmod@divisor& (0+255),b
 11788  0035FA  EC99  F02F         	call	___lwmod	;wreg free
 11789  0035FE  0100               	movlb	0	; () banked
 11790  003600  51CA               	movf	?___lwmod& (0+255),w,b
 11791  003602  0F30               	addlw	48
 11792  003604  6FEC               	movwf	printf@c& (0+255),b
 11793                           
 11794                           ;doprnt.c: 1491: break;
 11795  003606  D033               	goto	l1454
 11796  003608                     
 11797                           ; BSR set to: 0
 11798                           ;doprnt.c: 1499: {
 11799                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11800                           
 11801                           ; BSR set to: 0
 11802  003608  C0E7  F0C3         	movff	printf@val,___lwdiv@dividend
 11803  00360C  C0E8  F0C4         	movff	printf@val+1,___lwdiv@dividend+1
 11804  003610  51E0               	movf	printf@prec& (0+255),w,b
 11805  003612  0D02               	mullw	2
 11806  003614  0E6E               	movlw	low _hexpowers
 11807  003616  24F3               	addwf	prodl,w,c
 11808  003618  6EF6               	movwf	tblptrl,c
 11809  00361A  0EFC               	movlw	high _hexpowers
 11810  00361C  20F4               	addwfc	prodh,w,c
 11811  00361E  6EF7               	movwf	tblptrh,c
 11812  003620                     	if	1	;There are 3 active tblptr bytes
 11813  003620  6AF8               	clrf	tblptru,c
 11814  003622  0E00               	movlw	low (__mediumconst shr (0+16))
 11815  003624  22F8               	addwfc	tblptru,f,c
 11816  003626                     	endif
 11817  003626  0009               	tblrd		*+
 11818  003628  CFF5 F0C5          	movff	tablat,___lwdiv@divisor
 11819  00362C  000A               	tblrd		*-
 11820  00362E  CFF5 F0C6          	movff	tablat,___lwdiv@divisor+1
 11821  003632  ECB2  F02E         	call	___lwdiv	;wreg free
 11822  003636  0100               	movlb	0	; () banked
 11823  003638  51C3               	movf	?___lwdiv& (0+255),w,b
 11824  00363A  0B0F               	andlw	15
 11825  00363C  6FDF               	movwf	printf@idx& (0+255),b
 11826                           
 11827                           ; BSR set to: 0
 11828                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11829  00363E  51DF               	movf	printf@idx& (0+255),w,b
 11830  003640  0D01               	mullw	1
 11831  003642  0EDC               	movlw	low STR_99
 11832  003644  24F3               	addwf	prodl,w,c
 11833  003646  6EF6               	movwf	tblptrl,c
 11834  003648  0EFD               	movlw	high STR_99
 11835  00364A  20F4               	addwfc	prodh,w,c
 11836  00364C  6EF7               	movwf	tblptrh,c
 11837  00364E                     	if	1	;There are 3 active tblptr bytes
 11838  00364E  6AF8               	clrf	tblptru,c
 11839  003650  0E00               	movlw	low (__mediumconst shr (0+16))
 11840  003652  22F8               	addwfc	tblptru,f,c
 11841  003654                     	endif
 11842  003654  0008               	tblrd		*
 11843  003656  CFF5 F0EC          	movff	tablat,printf@c
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;doprnt.c: 1523: }
 11847                           
 11848                           ;doprnt.c: 1508: }
 11849                           ;doprnt.c: 1510: break;
 11850  00365A  D009               	goto	l1454
 11851  00365C                     
 11852                           ; BSR set to: 0
 11853  00365C  0100               	movlb	0	; () banked
 11854  00365E  51E9               	movf	printf@flag& (0+255),w,b
 11855  003660  0B80               	andlw	128
 11856                           
 11857                           ; Switch size 1, requested type "space"
 11858                           ; Number of cases is 2, Range of values is 0 to 128
 11859                           ; switch strategies available:
 11860                           ; Name         Instructions Cycles
 11861                           ; simple_byte            7     4 (average)
 11862                           ;	Chosen strategy is simple_byte
 11863  003662  0A00               	xorlw	0	; case 0
 11864  003664  B4D8               	btfsc	status,2,c
 11865  003666  D7A8               	goto	l1453
 11866  003668  0A80               	xorlw	128	; case 128
 11867  00366A  B4D8               	btfsc	status,2,c
 11868  00366C  D7CD               	goto	l1455
 11869  00366E                     l1454:
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;doprnt.c: 1524: (putch(c) );
 11873                           
 11874                           ; BSR set to: 0
 11875  00366E  51EC               	movf	printf@c& (0+255),w,b
 11876  003670  ECDF  F030         	call	_putch
 11877  003674                     l1450:
 11878  003674  0100               	movlb	0	; () banked
 11879  003676  07E0               	decf	printf@prec& (0+255),f,b
 11880  003678  29E0               	incf	printf@prec& (0+255),w,b
 11881  00367A  A4D8               	btfss	status,2,c
 11882  00367C  D7EF               	goto	l1452
 11883  00367E                     u3990:
 11884                           
 11885                           ; BSR set to: 0
 11886                           
 11887                           ; BSR set to: 0
 11888  00367E  C0D1  FFF6         	movff	printf@f,tblptrl
 11889  003682  C0D2  FFF7         	movff	printf@f+1,tblptrh
 11890  003686  0100               	movlb	0	; () banked
 11891  003688  4BD1               	infsnz	printf@f& (0+255),f,b
 11892  00368A  2BD2               	incf	(printf@f+1)& (0+255),f,b
 11893  00368C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11894  00368C  6AF8               	clrf	tblptru,c
 11895  00368E                     	endif
 11896  00368E                     	if	0	;tblptru may be non-zero
 11897  00368E                     	endif
 11898  00368E  0008               	tblrd		*
 11899  003690  CFF5 F0EC          	movff	tablat,printf@c
 11900  003694  51EC               	movf	printf@c& (0+255),w,b
 11901  003696  B4D8               	btfsc	status,2,c
 11902  003698  0012               	return	
 11903  00369A  D5E2               	goto	l1392
 11904  00369C                     __end_of_printf:
 11905                           	opt stack 0
 11906                           tblptru	equ	0xFF8
 11907                           tblptrh	equ	0xFF7
 11908                           tblptrl	equ	0xFF6
 11909                           tablat	equ	0xFF5
 11910                           prodh	equ	0xFF4
 11911                           prodl	equ	0xFF3
 11912                           intcon	equ	0xFF2
 11913                           intcon3	equ	0xFF0
 11914                           indf0	equ	0xFEF
 11915                           postinc0	equ	0xFEE
 11916                           fsr0h	equ	0xFEA
 11917                           fsr0l	equ	0xFE9
 11918                           wreg	equ	0xFE8
 11919                           postdec1	equ	0xFE5
 11920                           fsr1l	equ	0xFE1
 11921                           indf2	equ	0xFDF
 11922                           postinc2	equ	0xFDE
 11923                           postdec2	equ	0xFDD
 11924                           fsr2h	equ	0xFDA
 11925                           fsr2l	equ	0xFD9
 11926                           status	equ	0xFD8
 11927                           
 11928 ;; *************** function _putch *****************
 11929 ;; Defined at:
 11930 ;;		line 24 in file "lcd.c"
 11931 ;; Parameters:    Size  Location     Type
 11932 ;;  data            1    wreg     unsigned char 
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;  data            1    2[BANK0 ] unsigned char 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  1    wreg      void 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2, status,0, cstack
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11947 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11948 ;;Total ram usage:        1 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    5
 11951 ;; This function calls:
 11952 ;;		_lcdNibble
 11953 ;; This function is called by:
 11954 ;;		_printf
 11955 ;; This function uses a non-reentrant model
 11956 ;;
 11957                           
 11958                           	psect	text23
 11959  0061BE                     __ptext23:
 11960                           	opt stack 0
 11961  0061BE                     _putch:
 11962                           	opt stack 24
 11963                           
 11964                           ;incstack = 0
 11965                           ;putch@data stored from wreg
 11966  0061BE  0100               	movlb	0	; () banked
 11967  0061C0  6FC5               	movwf	putch@data& (0+255),b
 11968                           
 11969                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 11970  0061C2  848C               	bsf	3980,2,c	;volatile
 11971                           
 11972                           ;lcd.c: 33: lcdNibble(data);
 11973  0061C4  0100               	movlb	0	; () banked
 11974  0061C6  51C5               	movf	putch@data& (0+255),w,b
 11975  0061C8  ECE9  F02B         	call	_lcdNibble
 11976                           
 11977                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
 11978  0061CC  0EA0               	movlw	160
 11979  0061CE                     u7337:
 11980  0061CE  D000               	nop2	
 11981  0061D0  2EE8               	decfsz	wreg,f,c
 11982  0061D2  D7FD               	bra	u7337
 11983  0061D4  0012               	return		;funcret
 11984  0061D6                     __end_of_putch:
 11985                           	opt stack 0
 11986                           tblptru	equ	0xFF8
 11987                           tblptrh	equ	0xFF7
 11988                           tblptrl	equ	0xFF6
 11989                           tablat	equ	0xFF5
 11990                           prodh	equ	0xFF4
 11991                           prodl	equ	0xFF3
 11992                           intcon	equ	0xFF2
 11993                           intcon3	equ	0xFF0
 11994                           indf0	equ	0xFEF
 11995                           postinc0	equ	0xFEE
 11996                           fsr0h	equ	0xFEA
 11997                           fsr0l	equ	0xFE9
 11998                           wreg	equ	0xFE8
 11999                           postdec1	equ	0xFE5
 12000                           fsr1l	equ	0xFE1
 12001                           indf2	equ	0xFDF
 12002                           postinc2	equ	0xFDE
 12003                           postdec2	equ	0xFDD
 12004                           fsr2h	equ	0xFDA
 12005                           fsr2l	equ	0xFD9
 12006                           status	equ	0xFD8
 12007                           
 12008 ;; *************** function _isdigit *****************
 12009 ;; Defined at:
 12010 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 12011 ;; Parameters:    Size  Location     Type
 12012 ;;  c               1    wreg     unsigned char 
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;  c               1    2[BANK0 ] unsigned char 
 12015 ;; Return value:  Size  Location     Type
 12016 ;;		None               void
 12017 ;; Registers used:
 12018 ;;		wreg, status,2, status,0
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12027 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12028 ;;Total ram usage:        3 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; Hardware stack levels required when called:    4
 12031 ;; This function calls:
 12032 ;;		Nothing
 12033 ;; This function is called by:
 12034 ;;		_printf
 12035 ;; This function uses a non-reentrant model
 12036 ;;
 12037                           
 12038                           	psect	text24
 12039  00617E                     __ptext24:
 12040                           	opt stack 0
 12041  00617E                     _isdigit:
 12042                           	opt stack 25
 12043                           
 12044                           ;incstack = 0
 12045                           ;isdigit@c stored from wreg
 12046  00617E  0100               	movlb	0	; () banked
 12047  006180  6FC5               	movwf	isdigit@c& (0+255),b
 12048  006182  0E00               	movlw	0
 12049  006184  0100               	movlb	0	; () banked
 12050  006186  6FC4               	movwf	_isdigit$2258& (0+255),b
 12051                           
 12052                           ; BSR set to: 0
 12053  006188  0E3A               	movlw	58
 12054  00618A  61C5               	cpfslt	isdigit@c& (0+255),b
 12055  00618C  D005               	goto	l1788
 12056                           
 12057                           ; BSR set to: 0
 12058  00618E  0E2F               	movlw	47
 12059  006190  65C5               	cpfsgt	isdigit@c& (0+255),b
 12060  006192  D002               	goto	l1788
 12061                           
 12062                           ; BSR set to: 0
 12063  006194  0E01               	movlw	1
 12064  006196  6FC4               	movwf	_isdigit$2258& (0+255),b
 12065  006198                     l1788:
 12066                           
 12067                           ; BSR set to: 0
 12068                           
 12069                           ; BSR set to: 0
 12070  006198  C0C4  F0C3         	movff	_isdigit$2258,??_isdigit
 12071  00619C  31C3               	rrcf	??_isdigit& (0+255),w,b
 12072  00619E  0012               	return	
 12073  0061A0                     __end_of_isdigit:
 12074                           	opt stack 0
 12075                           tblptru	equ	0xFF8
 12076                           tblptrh	equ	0xFF7
 12077                           tblptrl	equ	0xFF6
 12078                           tablat	equ	0xFF5
 12079                           prodh	equ	0xFF4
 12080                           prodl	equ	0xFF3
 12081                           intcon	equ	0xFF2
 12082                           intcon3	equ	0xFF0
 12083                           indf0	equ	0xFEF
 12084                           postinc0	equ	0xFEE
 12085                           fsr0h	equ	0xFEA
 12086                           fsr0l	equ	0xFE9
 12087                           wreg	equ	0xFE8
 12088                           postdec1	equ	0xFE5
 12089                           fsr1l	equ	0xFE1
 12090                           indf2	equ	0xFDF
 12091                           postinc2	equ	0xFDE
 12092                           postdec2	equ	0xFDD
 12093                           fsr2h	equ	0xFDA
 12094                           fsr2l	equ	0xFD9
 12095                           status	equ	0xFD8
 12096                           
 12097 ;; *************** function ___lwmod *****************
 12098 ;; Defined at:
 12099 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 12100 ;; Parameters:    Size  Location     Type
 12101 ;;  dividend        2    7[BANK0 ] unsigned int 
 12102 ;;  divisor         2    9[BANK0 ] unsigned int 
 12103 ;; Auto vars:     Size  Location     Type
 12104 ;;  counter         1   11[BANK0 ] unsigned char 
 12105 ;; Return value:  Size  Location     Type
 12106 ;;                  2    7[BANK0 ] unsigned int 
 12107 ;; Registers used:
 12108 ;;		wreg, status,2, status,0
 12109 ;; Tracked objects:
 12110 ;;		On entry : 0/0
 12111 ;;		On exit  : 0/0
 12112 ;;		Unchanged: 0/0
 12113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12114 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12117 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12118 ;;Total ram usage:        5 bytes
 12119 ;; Hardware stack levels used:    1
 12120 ;; Hardware stack levels required when called:    4
 12121 ;; This function calls:
 12122 ;;		Nothing
 12123 ;; This function is called by:
 12124 ;;		_printf
 12125 ;; This function uses a non-reentrant model
 12126 ;;
 12127                           
 12128                           	psect	text25
 12129  005F32                     __ptext25:
 12130                           	opt stack 0
 12131  005F32                     ___lwmod:
 12132                           	opt stack 25
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;incstack = 0
 12136  005F32  0100               	movlb	0	; () banked
 12137  005F34  51CC               	movf	___lwmod@divisor& (0+255),w,b
 12138  005F36  11CD               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 12139  005F38  B4D8               	btfsc	status,2,c
 12140  005F3A  D018               	goto	l1882
 12141                           
 12142                           ; BSR set to: 0
 12143  005F3C  0E01               	movlw	1
 12144  005F3E  6FCE               	movwf	___lwmod@counter& (0+255),b
 12145  005F40  D004               	goto	l1877
 12146  005F42                     
 12147                           ; BSR set to: 0
 12148                           
 12149                           ; BSR set to: 0
 12150  005F42  90D8               	bcf	status,0,c
 12151  005F44  37CC               	rlcf	___lwmod@divisor& (0+255),f,b
 12152  005F46  37CD               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 12153  005F48  2BCE               	incf	___lwmod@counter& (0+255),f,b
 12154  005F4A                     l1877:
 12155                           
 12156                           ; BSR set to: 0
 12157                           
 12158                           ; BSR set to: 0
 12159  005F4A  AFCD               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 12160  005F4C  D7FA               	goto	l1878
 12161  005F4E                     u3670:
 12162                           
 12163                           ; BSR set to: 0
 12164                           
 12165                           ; BSR set to: 0
 12166                           
 12167                           ; BSR set to: 0
 12168  005F4E  51CC               	movf	___lwmod@divisor& (0+255),w,b
 12169  005F50  5DCA               	subwf	___lwmod@dividend& (0+255),w,b
 12170  005F52  51CD               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12171  005F54  59CB               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 12172  005F56  A0D8               	btfss	status,0,c
 12173  005F58  D004               	goto	l1881
 12174                           
 12175                           ; BSR set to: 0
 12176  005F5A  51CC               	movf	___lwmod@divisor& (0+255),w,b
 12177  005F5C  5FCA               	subwf	___lwmod@dividend& (0+255),f,b
 12178  005F5E  51CD               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12179  005F60  5BCB               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 12180  005F62                     l1881:
 12181                           
 12182                           ; BSR set to: 0
 12183                           
 12184                           ; BSR set to: 0
 12185  005F62  90D8               	bcf	status,0,c
 12186  005F64  33CD               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 12187  005F66  33CC               	rrcf	___lwmod@divisor& (0+255),f,b
 12188                           
 12189                           ; BSR set to: 0
 12190  005F68  2FCE               	decfsz	___lwmod@counter& (0+255),f,b
 12191  005F6A  D7F1               	goto	u3670
 12192  005F6C                     l1882:
 12193                           
 12194                           ; BSR set to: 0
 12195                           
 12196                           ; BSR set to: 0
 12197  005F6C  C0CA  F0CA         	movff	___lwmod@dividend,?___lwmod
 12198  005F70  C0CB  F0CB         	movff	___lwmod@dividend+1,?___lwmod+1
 12199                           
 12200                           ; BSR set to: 0
 12201  005F74  0012               	return		;funcret
 12202  005F76                     __end_of___lwmod:
 12203                           	opt stack 0
 12204                           tblptru	equ	0xFF8
 12205                           tblptrh	equ	0xFF7
 12206                           tblptrl	equ	0xFF6
 12207                           tablat	equ	0xFF5
 12208                           prodh	equ	0xFF4
 12209                           prodl	equ	0xFF3
 12210                           intcon	equ	0xFF2
 12211                           intcon3	equ	0xFF0
 12212                           indf0	equ	0xFEF
 12213                           postinc0	equ	0xFEE
 12214                           fsr0h	equ	0xFEA
 12215                           fsr0l	equ	0xFE9
 12216                           wreg	equ	0xFE8
 12217                           postdec1	equ	0xFE5
 12218                           fsr1l	equ	0xFE1
 12219                           indf2	equ	0xFDF
 12220                           postinc2	equ	0xFDE
 12221                           postdec2	equ	0xFDD
 12222                           fsr2h	equ	0xFDA
 12223                           fsr2l	equ	0xFD9
 12224                           status	equ	0xFD8
 12225                           
 12226 ;; *************** function ___lwdiv *****************
 12227 ;; Defined at:
 12228 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 12229 ;; Parameters:    Size  Location     Type
 12230 ;;  dividend        2    0[BANK0 ] unsigned int 
 12231 ;;  divisor         2    2[BANK0 ] unsigned int 
 12232 ;; Auto vars:     Size  Location     Type
 12233 ;;  quotient        2    4[BANK0 ] unsigned int 
 12234 ;;  counter         1    6[BANK0 ] unsigned char 
 12235 ;; Return value:  Size  Location     Type
 12236 ;;                  2    0[BANK0 ] unsigned int 
 12237 ;; Registers used:
 12238 ;;		wreg, status,2, status,0
 12239 ;; Tracked objects:
 12240 ;;		On entry : 0/0
 12241 ;;		On exit  : 0/0
 12242 ;;		Unchanged: 0/0
 12243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12244 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12245 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12247 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12248 ;;Total ram usage:        7 bytes
 12249 ;; Hardware stack levels used:    1
 12250 ;; Hardware stack levels required when called:    4
 12251 ;; This function calls:
 12252 ;;		Nothing
 12253 ;; This function is called by:
 12254 ;;		_printf
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           	psect	text26
 12259  005D64                     __ptext26:
 12260                           	opt stack 0
 12261  005D64                     ___lwdiv:
 12262                           	opt stack 25
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;incstack = 0
 12266  005D64  0E00               	movlw	0
 12267  005D66  0100               	movlb	0	; () banked
 12268  005D68  6FC8               	movwf	(___lwdiv@quotient+1)& (0+255),b
 12269  005D6A  0E00               	movlw	0
 12270  005D6C  6FC7               	movwf	___lwdiv@quotient& (0+255),b
 12271                           
 12272                           ; BSR set to: 0
 12273  005D6E  51C5               	movf	___lwdiv@divisor& (0+255),w,b
 12274  005D70  11C6               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12275  005D72  B4D8               	btfsc	status,2,c
 12276  005D74  D01C               	goto	l1872
 12277                           
 12278                           ; BSR set to: 0
 12279  005D76  0E01               	movlw	1
 12280  005D78  6FC9               	movwf	___lwdiv@counter& (0+255),b
 12281  005D7A  D004               	goto	l1867
 12282  005D7C                     
 12283                           ; BSR set to: 0
 12284                           
 12285                           ; BSR set to: 0
 12286  005D7C  90D8               	bcf	status,0,c
 12287  005D7E  37C5               	rlcf	___lwdiv@divisor& (0+255),f,b
 12288  005D80  37C6               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 12289  005D82  2BC9               	incf	___lwdiv@counter& (0+255),f,b
 12290  005D84                     l1867:
 12291                           
 12292                           ; BSR set to: 0
 12293                           
 12294                           ; BSR set to: 0
 12295  005D84  AFC6               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 12296  005D86  D7FA               	goto	l1868
 12297  005D88                     u3640:
 12298                           
 12299                           ; BSR set to: 0
 12300                           
 12301                           ; BSR set to: 0
 12302                           
 12303                           ; BSR set to: 0
 12304  005D88  90D8               	bcf	status,0,c
 12305  005D8A  37C7               	rlcf	___lwdiv@quotient& (0+255),f,b
 12306  005D8C  37C8               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 12307                           
 12308                           ; BSR set to: 0
 12309  005D8E  51C5               	movf	___lwdiv@divisor& (0+255),w,b
 12310  005D90  5DC3               	subwf	___lwdiv@dividend& (0+255),w,b
 12311  005D92  51C6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12312  005D94  59C4               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12313  005D96  A0D8               	btfss	status,0,c
 12314  005D98  D005               	goto	l1871
 12315                           
 12316                           ; BSR set to: 0
 12317  005D9A  51C5               	movf	___lwdiv@divisor& (0+255),w,b
 12318  005D9C  5FC3               	subwf	___lwdiv@dividend& (0+255),f,b
 12319  005D9E  51C6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12320  005DA0  5BC4               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12321                           
 12322                           ; BSR set to: 0
 12323  005DA2  81C7               	bsf	___lwdiv@quotient& (0+255),0,b
 12324  005DA4                     l1871:
 12325                           
 12326                           ; BSR set to: 0
 12327                           
 12328                           ; BSR set to: 0
 12329  005DA4  90D8               	bcf	status,0,c
 12330  005DA6  33C6               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12331  005DA8  33C5               	rrcf	___lwdiv@divisor& (0+255),f,b
 12332                           
 12333                           ; BSR set to: 0
 12334  005DAA  2FC9               	decfsz	___lwdiv@counter& (0+255),f,b
 12335  005DAC  D7ED               	goto	u3640
 12336  005DAE                     l1872:
 12337                           
 12338                           ; BSR set to: 0
 12339                           
 12340                           ; BSR set to: 0
 12341  005DAE  C0C7  F0C3         	movff	___lwdiv@quotient,?___lwdiv
 12342  005DB2  C0C8  F0C4         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12343                           
 12344                           ; BSR set to: 0
 12345  005DB6  0012               	return		;funcret
 12346  005DB8                     __end_of___lwdiv:
 12347                           	opt stack 0
 12348                           tblptru	equ	0xFF8
 12349                           tblptrh	equ	0xFF7
 12350                           tblptrl	equ	0xFF6
 12351                           tablat	equ	0xFF5
 12352                           prodh	equ	0xFF4
 12353                           prodl	equ	0xFF3
 12354                           intcon	equ	0xFF2
 12355                           intcon3	equ	0xFF0
 12356                           indf0	equ	0xFEF
 12357                           postinc0	equ	0xFEE
 12358                           fsr0h	equ	0xFEA
 12359                           fsr0l	equ	0xFE9
 12360                           wreg	equ	0xFE8
 12361                           postdec1	equ	0xFE5
 12362                           fsr1l	equ	0xFE1
 12363                           indf2	equ	0xFDF
 12364                           postinc2	equ	0xFDE
 12365                           postdec2	equ	0xFDD
 12366                           fsr2h	equ	0xFDA
 12367                           fsr2l	equ	0xFD9
 12368                           status	equ	0xFD8
 12369                           
 12370 ;; *************** function _lcdInst *****************
 12371 ;; Defined at:
 12372 ;;		line 11 in file "lcd.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  data            1    wreg     unsigned char 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;  data            1    2[BANK0 ] unsigned char 
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, status,2, status,0, cstack
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12389 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12390 ;;Total ram usage:        1 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; Hardware stack levels required when called:    5
 12393 ;; This function calls:
 12394 ;;		_lcdNibble
 12395 ;; This function is called by:
 12396 ;;		_initLCD
 12397 ;;		_main
 12398 ;;		_Bolt_dispense
 12399 ;;		_Nut_dispense
 12400 ;;		_Spacer_dispense
 12401 ;;		_Washer_dispense
 12402 ;;		_Bolt_remain
 12403 ;;		_Nut_remain
 12404 ;;		_Spacer_remain
 12405 ;;		_Washer_remain
 12406 ;;		_lcd_set_cursor
 12407 ;;		_lcd_shift_cursor
 12408 ;;		_lcd_shift_display
 12409 ;;		_count_gear
 12410 ;;		_nut_washer_remain
 12411 ;;		_bolt_spacer_remain
 12412 ;;		_all_remain
 12413 ;; This function uses a non-reentrant model
 12414 ;;
 12415                           
 12416                           	psect	text27
 12417  0061D6                     __ptext27:
 12418                           	opt stack 0
 12419  0061D6                     _lcdInst:
 12420                           	opt stack 25
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;incstack = 0
 12424                           ;lcdInst@data stored from wreg
 12425  0061D6  0100               	movlb	0	; () banked
 12426  0061D8  6FC5               	movwf	lcdInst@data& (0+255),b
 12427                           
 12428                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 12429  0061DA  948C               	bcf	3980,2,c	;volatile
 12430                           
 12431                           ;lcd.c: 20: lcdNibble(data);
 12432  0061DC  0100               	movlb	0	; () banked
 12433  0061DE  51C5               	movf	lcdInst@data& (0+255),w,b
 12434  0061E0  ECE9  F02B         	call	_lcdNibble
 12435                           
 12436                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
 12437  0061E4  0EA0               	movlw	160
 12438  0061E6                     u7347:
 12439  0061E6  D000               	nop2	
 12440  0061E8  2EE8               	decfsz	wreg,f,c
 12441  0061EA  D7FD               	bra	u7347
 12442  0061EC  0012               	return		;funcret
 12443  0061EE                     __end_of_lcdInst:
 12444                           	opt stack 0
 12445                           tblptru	equ	0xFF8
 12446                           tblptrh	equ	0xFF7
 12447                           tblptrl	equ	0xFF6
 12448                           tablat	equ	0xFF5
 12449                           prodh	equ	0xFF4
 12450                           prodl	equ	0xFF3
 12451                           intcon	equ	0xFF2
 12452                           intcon3	equ	0xFF0
 12453                           indf0	equ	0xFEF
 12454                           postinc0	equ	0xFEE
 12455                           fsr0h	equ	0xFEA
 12456                           fsr0l	equ	0xFE9
 12457                           wreg	equ	0xFE8
 12458                           postdec1	equ	0xFE5
 12459                           fsr1l	equ	0xFE1
 12460                           indf2	equ	0xFDF
 12461                           postinc2	equ	0xFDE
 12462                           postdec2	equ	0xFDD
 12463                           fsr2h	equ	0xFDA
 12464                           fsr2l	equ	0xFD9
 12465                           status	equ	0xFD8
 12466                           
 12467 ;; *************** function _lcdNibble *****************
 12468 ;; Defined at:
 12469 ;;		line 37 in file "lcd.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;  data            1    wreg     unsigned char 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;  data            1    1[BANK0 ] unsigned char 
 12474 ;;  temp            1    0[BANK0 ] unsigned char 
 12475 ;; Return value:  Size  Location     Type
 12476 ;;                  1    wreg      void 
 12477 ;; Registers used:
 12478 ;;		wreg, status,2, status,0
 12479 ;; Tracked objects:
 12480 ;;		On entry : 0/0
 12481 ;;		On exit  : 0/0
 12482 ;;		Unchanged: 0/0
 12483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12485 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12487 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12488 ;;Total ram usage:        2 bytes
 12489 ;; Hardware stack levels used:    1
 12490 ;; Hardware stack levels required when called:    4
 12491 ;; This function calls:
 12492 ;;		Nothing
 12493 ;; This function is called by:
 12494 ;;		_lcdInst
 12495 ;;		_putch
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           	psect	text28
 12500  0057D2                     __ptext28:
 12501                           	opt stack 0
 12502  0057D2                     _lcdNibble:
 12503                           	opt stack 24
 12504                           
 12505                           ;incstack = 0
 12506                           ;lcdNibble@data stored from wreg
 12507  0057D2  0100               	movlb	0	; () banked
 12508  0057D4  6FC4               	movwf	lcdNibble@data& (0+255),b
 12509                           
 12510                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 12511  0057D6  0100               	movlb	0	; () banked
 12512  0057D8  51C4               	movf	lcdNibble@data& (0+255),w,b
 12513  0057DA  0BF0               	andlw	240
 12514  0057DC  6FC3               	movwf	lcdNibble@temp& (0+255),b
 12515                           
 12516                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 12517  0057DE  508C               	movf	3980,w,c	;volatile
 12518  0057E0  0B0F               	andlw	15
 12519  0057E2  6E8C               	movwf	3980,c	;volatile
 12520                           
 12521                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 12522  0057E4  51C3               	movf	lcdNibble@temp& (0+255),w,b
 12523  0057E6  108C               	iorwf	3980,w,c	;volatile
 12524  0057E8  6E8C               	movwf	3980,c	;volatile
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12528  0057EA  0E00               	movlw	0
 12529  0057EC  BEF2               	btfsc	intcon,7,c	;volatile
 12530  0057EE  0E01               	movlw	1
 12531  0057F0  6FBD               	movwf	_LCDinterruptState& (0+255),b
 12532                           
 12533                           ; BSR set to: 0
 12534  0057F2  9EF2               	bcf	intcon,7,c	;volatile
 12535                           
 12536                           ; BSR set to: 0
 12537  0057F4  868C               	bsf	3980,3,c	;volatile
 12538                           
 12539                           ; BSR set to: 0
 12540  0057F6  0E42               	movlw	66
 12541  0057F8                     u7357:
 12542  0057F8  2EE8               	decfsz	wreg,f,c
 12543  0057FA  D7FE               	bra	u7357
 12544  0057FC  D000               	nop2	
 12545  0057FE  968C               	bcf	3980,3,c	;volatile
 12546  005800  0EA0               	movlw	160
 12547  005802                     u7367:
 12548  005802  D000               	nop2	
 12549  005804  2EE8               	decfsz	wreg,f,c
 12550  005806  D7FD               	bra	u7367
 12551  005808  0100               	movlb	0	; () banked
 12552  00580A  B1BD               	btfsc	_LCDinterruptState& (0+255),0,b
 12553  00580C  D002               	bra	u3445
 12554  00580E  9EF2               	bcf	intcon,7,c	;volatile
 12555  005810  D001               	bra	u3446
 12556  005812                     u3445:
 12557  005812  8EF2               	bsf	intcon,7,c	;volatile
 12558  005814                     u3446:
 12559                           
 12560                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 12561  005814  0100               	movlb	0	; () banked
 12562  005816  39C4               	swapf	lcdNibble@data& (0+255),w,b
 12563  005818  0BF0               	andlw	240
 12564  00581A  6FC4               	movwf	lcdNibble@data& (0+255),b
 12565                           
 12566                           ; BSR set to: 0
 12567                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 12568  00581C  51C4               	movf	lcdNibble@data& (0+255),w,b
 12569  00581E  0BF0               	andlw	240
 12570  005820  6FC3               	movwf	lcdNibble@temp& (0+255),b
 12571                           
 12572                           ; BSR set to: 0
 12573                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 12574  005822  508C               	movf	3980,w,c	;volatile
 12575  005824  0B0F               	andlw	15
 12576  005826  6E8C               	movwf	3980,c	;volatile
 12577                           
 12578                           ; BSR set to: 0
 12579                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 12580  005828  51C3               	movf	lcdNibble@temp& (0+255),w,b
 12581  00582A  108C               	iorwf	3980,w,c	;volatile
 12582  00582C  6E8C               	movwf	3980,c	;volatile
 12583                           
 12584                           ; BSR set to: 0
 12585                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12586  00582E  0E00               	movlw	0
 12587  005830  BEF2               	btfsc	intcon,7,c	;volatile
 12588  005832  0E01               	movlw	1
 12589  005834  6FBD               	movwf	_LCDinterruptState& (0+255),b
 12590                           
 12591                           ; BSR set to: 0
 12592  005836  9EF2               	bcf	intcon,7,c	;volatile
 12593                           
 12594                           ; BSR set to: 0
 12595  005838  868C               	bsf	3980,3,c	;volatile
 12596                           
 12597                           ; BSR set to: 0
 12598  00583A  0E42               	movlw	66
 12599  00583C                     u7377:
 12600  00583C  2EE8               	decfsz	wreg,f,c
 12601  00583E  D7FE               	bra	u7377
 12602  005840  D000               	nop2	
 12603  005842  968C               	bcf	3980,3,c	;volatile
 12604  005844  0EA0               	movlw	160
 12605  005846                     u7387:
 12606  005846  D000               	nop2	
 12607  005848  2EE8               	decfsz	wreg,f,c
 12608  00584A  D7FD               	bra	u7387
 12609  00584C  0100               	movlb	0	; () banked
 12610  00584E  B1BD               	btfsc	_LCDinterruptState& (0+255),0,b
 12611  005850  D002               	bra	u3455
 12612  005852  9EF2               	bcf	intcon,7,c	;volatile
 12613  005854  D001               	bra	u3456
 12614  005856                     u3455:
 12615  005856  8EF2               	bsf	intcon,7,c	;volatile
 12616  005858                     u3456:
 12617  005858  0012               	return		;funcret
 12618  00585A                     __end_of_lcdNibble:
 12619                           	opt stack 0
 12620                           tblptru	equ	0xFF8
 12621                           tblptrh	equ	0xFF7
 12622                           tblptrl	equ	0xFF6
 12623                           tablat	equ	0xFF5
 12624                           prodh	equ	0xFF4
 12625                           prodl	equ	0xFF3
 12626                           intcon	equ	0xFF2
 12627                           intcon3	equ	0xFF0
 12628                           indf0	equ	0xFEF
 12629                           postinc0	equ	0xFEE
 12630                           fsr0h	equ	0xFEA
 12631                           fsr0l	equ	0xFE9
 12632                           wreg	equ	0xFE8
 12633                           postdec1	equ	0xFE5
 12634                           fsr1l	equ	0xFE1
 12635                           indf2	equ	0xFDF
 12636                           postinc2	equ	0xFDE
 12637                           postdec2	equ	0xFDD
 12638                           fsr2h	equ	0xFDA
 12639                           fsr2l	equ	0xFD9
 12640                           status	equ	0xFD8
 12641                           
 12642 ;; *************** function _drawBolt *****************
 12643 ;; Defined at:
 12644 ;;		line 1687 in file "main.c"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;		None
 12647 ;; Auto vars:     Size  Location     Type
 12648 ;;		None
 12649 ;; Return value:  Size  Location     Type
 12650 ;;                  1    wreg      void 
 12651 ;; Registers used:
 12652 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12653 ;; Tracked objects:
 12654 ;;		On entry : 0/0
 12655 ;;		On exit  : 0/0
 12656 ;;		Unchanged: 0/0
 12657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12662 ;;Total ram usage:        1 bytes
 12663 ;; Hardware stack levels used:    1
 12664 ;; Hardware stack levels required when called:    8
 12665 ;; This function calls:
 12666 ;;		_I2C_Master_Init
 12667 ;;		_glcdDrawRectangle
 12668 ;;		_spiInit
 12669 ;; This function is called by:
 12670 ;;		_Bolt_dispense
 12671 ;;		_Bolt_remain
 12672 ;;		_bolt_spacer_remain
 12673 ;; This function uses a non-reentrant model
 12674 ;;
 12675                           
 12676                           	psect	text29
 12677  004F04                     __ptext29:
 12678                           	opt stack 0
 12679  004F04                     _drawBolt:
 12680                           	opt stack 21
 12681                           
 12682                           ;main.c: 1688: spiInit(4);
 12683                           
 12684                           ;incstack = 0
 12685  004F04  0E04               	movlw	4
 12686  004F06  ECFD  F02F         	call	_spiInit
 12687                           
 12688                           ;main.c: 1689: _delay((unsigned long)((20)*(32000000/4000.0)));
 12689  004F0A  0ED0               	movlw	208
 12690  004F0C  0100               	movlb	0	; () banked
 12691  004F0E  6FE4               	movwf	??_drawBolt& (0+255),b
 12692  004F10  0EC9               	movlw	201
 12693  004F12                     u7397:
 12694  004F12  2EE8               	decfsz	wreg,f,c
 12695  004F14  D7FE               	bra	u7397
 12696  004F16  2FE4               	decfsz	??_drawBolt& (0+255),f,b
 12697  004F18  D7FC               	bra	u7397
 12698  004F1A  D000               	nop2	
 12699                           
 12700                           ;main.c: 1690: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
 12701  004F1C  0EE9               	movlw	low _GLCD_SIZE_HORZ
 12702  004F1E  6EF6               	movwf	tblptrl,c
 12703  004F20                     	if	1	;There is more than 1 active tblptr byte
 12704  004F20  0EFC               	movlw	high _GLCD_SIZE_HORZ
 12705  004F22  6EF7               	movwf	tblptrh,c
 12706  004F24                     	endif
 12707  004F24                     	if	1	;There are 3 active tblptr bytes
 12708  004F24  0E00               	movlw	low (_GLCD_SIZE_HORZ shr (0+16))
 12709  004F26  6EF8               	movwf	tblptru,c
 12710  004F28                     	endif
 12711  004F28  0008               	tblrd		*
 12712  004F2A  CFF5 F0D1          	movff	tablat,glcdDrawRectangle@XE
 12713  004F2E  0E00               	movlw	0
 12714  004F30  0100               	movlb	0	; () banked
 12715  004F32  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12716  004F34  0EE8               	movlw	low _GLCD_SIZE_VERT
 12717  004F36  6EF6               	movwf	tblptrl,c
 12718  004F38                     	if	1	;There is more than 1 active tblptr byte
 12719  004F38  0EFC               	movlw	high _GLCD_SIZE_VERT
 12720  004F3A  6EF7               	movwf	tblptrh,c
 12721  004F3C                     	endif
 12722  004F3C                     	if	1	;There are 3 active tblptr bytes
 12723  004F3C  0E00               	movlw	low (_GLCD_SIZE_VERT shr (0+16))
 12724  004F3E  6EF8               	movwf	tblptru,c
 12725  004F40                     	endif
 12726  004F40  0008               	tblrd		*
 12727  004F42  CFF5 F0D3          	movff	tablat,glcdDrawRectangle@YE
 12728  004F46  0EA1               	movlw	low _BLACK
 12729  004F48  6EF6               	movwf	tblptrl,c
 12730  004F4A                     	if	1	;There is more than 1 active tblptr byte
 12731  004F4A  0EFC               	movlw	high _BLACK
 12732  004F4C  6EF7               	movwf	tblptrh,c
 12733  004F4E                     	endif
 12734  004F4E                     	if	1	;There are 3 active tblptr bytes
 12735  004F4E  0E00               	movlw	low (_BLACK shr (0+16))
 12736  004F50  6EF8               	movwf	tblptru,c
 12737  004F52                     	endif
 12738  004F52  0009               	tblrd		*+
 12739  004F54  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12740  004F58  0009               	tblrd		*+
 12741  004F5A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12742  004F5E  0009               	tblrd		*+
 12743  004F60  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12744  004F64  000A               	tblrd		*-
 12745  004F66  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12746  004F6A  0E00               	movlw	0
 12747  004F6C  ECA8  F026         	call	_glcdDrawRectangle
 12748                           
 12749                           ;main.c: 1691: glcdDrawRectangle(5*4,9*4, 8*4, 20*4, WHITE);
 12750  004F70  0E24               	movlw	36
 12751  004F72  0100               	movlb	0	; () banked
 12752  004F74  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 12753  004F76  0E20               	movlw	32
 12754  004F78  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12755  004F7A  0E50               	movlw	80
 12756  004F7C  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 12757  004F7E  0E99               	movlw	low _WHITE
 12758  004F80  6EF6               	movwf	tblptrl,c
 12759  004F82                     	if	1	;There is more than 1 active tblptr byte
 12760  004F82  0EFC               	movlw	high _WHITE
 12761  004F84  6EF7               	movwf	tblptrh,c
 12762  004F86                     	endif
 12763  004F86                     	if	1	;There are 3 active tblptr bytes
 12764  004F86  0E00               	movlw	low (_WHITE shr (0+16))
 12765  004F88  6EF8               	movwf	tblptru,c
 12766  004F8A                     	endif
 12767  004F8A  0009               	tblrd		*+
 12768  004F8C  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12769  004F90  0009               	tblrd		*+
 12770  004F92  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12771  004F96  0009               	tblrd		*+
 12772  004F98  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12773  004F9C  000A               	tblrd		*-
 12774  004F9E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12775  004FA2  0E14               	movlw	20
 12776  004FA4  ECA8  F026         	call	_glcdDrawRectangle
 12777                           
 12778                           ;main.c: 1692: glcdDrawRectangle(6*4,8*4, 9*4, 19*4, WHITE);
 12779  004FA8  0E20               	movlw	32
 12780  004FAA  0100               	movlb	0	; () banked
 12781  004FAC  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 12782  004FAE  0E24               	movlw	36
 12783  004FB0  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12784  004FB2  0E4C               	movlw	76
 12785  004FB4  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 12786  004FB6  0E99               	movlw	low _WHITE
 12787  004FB8  6EF6               	movwf	tblptrl,c
 12788  004FBA                     	if	1	;There is more than 1 active tblptr byte
 12789  004FBA  0EFC               	movlw	high _WHITE
 12790  004FBC  6EF7               	movwf	tblptrh,c
 12791  004FBE                     	endif
 12792  004FBE                     	if	1	;There are 3 active tblptr bytes
 12793  004FBE  0E00               	movlw	low (_WHITE shr (0+16))
 12794  004FC0  6EF8               	movwf	tblptru,c
 12795  004FC2                     	endif
 12796  004FC2  0009               	tblrd		*+
 12797  004FC4  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12798  004FC8  0009               	tblrd		*+
 12799  004FCA  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12800  004FCE  0009               	tblrd		*+
 12801  004FD0  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12802  004FD4  000A               	tblrd		*-
 12803  004FD6  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12804  004FDA  0E18               	movlw	24
 12805  004FDC  ECA8  F026         	call	_glcdDrawRectangle
 12806                           
 12807                           ;main.c: 1694: glcdDrawRectangle(8*4,28*4, 11*4, 17*4, WHITE);
 12808  004FE0  0E70               	movlw	112
 12809  004FE2  0100               	movlb	0	; () banked
 12810  004FE4  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 12811  004FE6  0E2C               	movlw	44
 12812  004FE8  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12813  004FEA  0E44               	movlw	68
 12814  004FEC  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 12815  004FEE  0E99               	movlw	low _WHITE
 12816  004FF0  6EF6               	movwf	tblptrl,c
 12817  004FF2                     	if	1	;There is more than 1 active tblptr byte
 12818  004FF2  0EFC               	movlw	high _WHITE
 12819  004FF4  6EF7               	movwf	tblptrh,c
 12820  004FF6                     	endif
 12821  004FF6                     	if	1	;There are 3 active tblptr bytes
 12822  004FF6  0E00               	movlw	low (_WHITE shr (0+16))
 12823  004FF8  6EF8               	movwf	tblptru,c
 12824  004FFA                     	endif
 12825  004FFA  0009               	tblrd		*+
 12826  004FFC  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12827  005000  0009               	tblrd		*+
 12828  005002  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12829  005006  0009               	tblrd		*+
 12830  005008  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12831  00500C  000A               	tblrd		*-
 12832  00500E  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12833  005012  0E20               	movlw	32
 12834  005014  ECA8  F026         	call	_glcdDrawRectangle
 12835                           
 12836                           ;main.c: 1695: glcdDrawRectangle(9*4,27*4, 12*4, 16*4, WHITE);
 12837  005018  0E6C               	movlw	108
 12838  00501A  0100               	movlb	0	; () banked
 12839  00501C  6FD1               	movwf	glcdDrawRectangle@XE& (0+255),b
 12840  00501E  0E30               	movlw	48
 12841  005020  6FD2               	movwf	glcdDrawRectangle@YS& (0+255),b
 12842  005022  0E40               	movlw	64
 12843  005024  6FD3               	movwf	glcdDrawRectangle@YE& (0+255),b
 12844  005026  0E99               	movlw	low _WHITE
 12845  005028  6EF6               	movwf	tblptrl,c
 12846  00502A                     	if	1	;There is more than 1 active tblptr byte
 12847  00502A  0EFC               	movlw	high _WHITE
 12848  00502C  6EF7               	movwf	tblptrh,c
 12849  00502E                     	endif
 12850  00502E                     	if	1	;There are 3 active tblptr bytes
 12851  00502E  0E00               	movlw	low (_WHITE shr (0+16))
 12852  005030  6EF8               	movwf	tblptru,c
 12853  005032                     	endif
 12854  005032  0009               	tblrd		*+
 12855  005034  CFF5 F0D4          	movff	tablat,glcdDrawRectangle@color
 12856  005038  0009               	tblrd		*+
 12857  00503A  CFF5 F0D5          	movff	tablat,glcdDrawRectangle@color+1
 12858  00503E  0009               	tblrd		*+
 12859  005040  CFF5 F0D6          	movff	tablat,glcdDrawRectangle@color+2
 12860  005044  000A               	tblrd		*-
 12861  005046  CFF5 F0D7          	movff	tablat,glcdDrawRectangle@color+3
 12862  00504A  0E24               	movlw	36
 12863  00504C  ECA8  F026         	call	_glcdDrawRectangle
 12864                           
 12865                           ;main.c: 1696: I2C_Master_Init(100000);
 12866  005050  0EA0               	movlw	160
 12867  005052  0100               	movlb	0	; () banked
 12868  005054  6FD0               	movwf	I2C_Master_Init@clockFreq& (0+255),b
 12869  005056  0E86               	movlw	134
 12870  005058  6FD1               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
 12871  00505A  0E01               	movlw	1
 12872  00505C  6FD2               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
 12873  00505E  0E00               	movlw	0
 12874  005060  6FD3               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
 12875  005062  EC26  F02E         	call	_I2C_Master_Init	;wreg free
 12876  005066  0012               	return		;funcret
 12877  005068                     __end_of_drawBolt:
 12878                           	opt stack 0
 12879                           tblptru	equ	0xFF8
 12880                           tblptrh	equ	0xFF7
 12881                           tblptrl	equ	0xFF6
 12882                           tablat	equ	0xFF5
 12883                           prodh	equ	0xFF4
 12884                           prodl	equ	0xFF3
 12885                           intcon	equ	0xFF2
 12886                           intcon3	equ	0xFF0
 12887                           indf0	equ	0xFEF
 12888                           postinc0	equ	0xFEE
 12889                           fsr0h	equ	0xFEA
 12890                           fsr0l	equ	0xFE9
 12891                           wreg	equ	0xFE8
 12892                           postdec1	equ	0xFE5
 12893                           fsr1l	equ	0xFE1
 12894                           indf2	equ	0xFDF
 12895                           postinc2	equ	0xFDE
 12896                           postdec2	equ	0xFDD
 12897                           fsr2h	equ	0xFDA
 12898                           fsr2l	equ	0xFD9
 12899                           status	equ	0xFD8
 12900                           
 12901 ;; *************** function _spiInit *****************
 12902 ;; Defined at:
 12903 ;;		line 54 in file "SPI_PIC.c"
 12904 ;; Parameters:    Size  Location     Type
 12905 ;;  divider         1    wreg     unsigned char 
 12906 ;; Auto vars:     Size  Location     Type
 12907 ;;  divider         1    0[BANK0 ] unsigned char 
 12908 ;; Return value:  Size  Location     Type
 12909 ;;                  1    wreg      void 
 12910 ;; Registers used:
 12911 ;;		wreg, status,2, status,0
 12912 ;; Tracked objects:
 12913 ;;		On entry : 0/0
 12914 ;;		On exit  : 0/0
 12915 ;;		Unchanged: 0/0
 12916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12920 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12921 ;;Total ram usage:        1 bytes
 12922 ;; Hardware stack levels used:    1
 12923 ;; Hardware stack levels required when called:    4
 12924 ;; This function calls:
 12925 ;;		Nothing
 12926 ;; This function is called by:
 12927 ;;		_drawTeamName
 12928 ;;		_drawWasher
 12929 ;;		_drawBolt
 12930 ;;		_drawNut
 12931 ;;		_drawSpacer
 12932 ;;		_initGLCD
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           	psect	text30
 12937  005FFA                     __ptext30:
 12938                           	opt stack 0
 12939  005FFA                     _spiInit:
 12940                           	opt stack 25
 12941                           
 12942                           ;incstack = 0
 12943                           ;spiInit@divider stored from wreg
 12944  005FFA  0100               	movlb	0	; () banked
 12945  005FFC  6FC3               	movwf	spiInit@divider& (0+255),b
 12946                           
 12947                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
 12948  005FFE  9AC6               	bcf	4038,5,c	;volatile
 12949                           
 12950                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
 12951  006000  0E00               	movlw	0
 12952  006002  6EC7               	movwf	4039,c	;volatile
 12953                           
 12954                           ;SPI_PIC.c: 71: switch(divider){
 12955  006004  D007               	goto	l1222
 12956  006006                     
 12957                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
 12958  006006  0E11               	movlw	17
 12959  006008  D003               	goto	L5
 12960  00600A                     
 12961                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
 12962  00600A  0E12               	movlw	18
 12963  00600C  D001               	goto	L5
 12964  00600E                     
 12965                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
 12966  00600E  0E10               	movlw	16
 12967  006010                     L5:
 12968  006010  6EC6               	movwf	4038,c	;volatile
 12969                           
 12970                           ;SPI_PIC.c: 83: }
 12971  006012  D00C               	goto	l1224
 12972  006014                     l1222:
 12973  006014  0100               	movlb	0	; () banked
 12974  006016  51C3               	movf	spiInit@divider& (0+255),w,b
 12975                           
 12976                           ; Switch size 1, requested type "space"
 12977                           ; Number of cases is 3, Range of values is 4 to 64
 12978                           ; switch strategies available:
 12979                           ; Name         Instructions Cycles
 12980                           ; simple_byte           10     6 (average)
 12981                           ;	Chosen strategy is simple_byte
 12982  006018  0A04               	xorlw	4	; case 4
 12983  00601A  B4D8               	btfsc	status,2,c
 12984  00601C  D7F8               	goto	l1227
 12985  00601E  0A14               	xorlw	20	; case 16
 12986  006020  B4D8               	btfsc	status,2,c
 12987  006022  D7F1               	goto	l1225
 12988  006024  0A50               	xorlw	80	; case 64
 12989  006026  B4D8               	btfsc	status,2,c
 12990  006028  D7F0               	goto	l1226
 12991  00602A  D7F1               	goto	l1227
 12992  00602C                     l1224:
 12993                           
 12994                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
 12995  00602C  9A94               	bcf	3988,5,c	;volatile
 12996                           
 12997                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
 12998  00602E  8894               	bsf	3988,4,c	;volatile
 12999                           
 13000                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
 13001  006030  9694               	bcf	3988,3,c	;volatile
 13002                           
 13003                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
 13004  006032  8AC6               	bsf	4038,5,c	;volatile
 13005  006034  0012               	return		;funcret
 13006  006036                     __end_of_spiInit:
 13007                           	opt stack 0
 13008                           tblptru	equ	0xFF8
 13009                           tblptrh	equ	0xFF7
 13010                           tblptrl	equ	0xFF6
 13011                           tablat	equ	0xFF5
 13012                           prodh	equ	0xFF4
 13013                           prodl	equ	0xFF3
 13014                           intcon	equ	0xFF2
 13015                           intcon3	equ	0xFF0
 13016                           indf0	equ	0xFEF
 13017                           postinc0	equ	0xFEE
 13018                           fsr0h	equ	0xFEA
 13019                           fsr0l	equ	0xFE9
 13020                           wreg	equ	0xFE8
 13021                           postdec1	equ	0xFE5
 13022                           fsr1l	equ	0xFE1
 13023                           indf2	equ	0xFDF
 13024                           postinc2	equ	0xFDE
 13025                           postdec2	equ	0xFDD
 13026                           fsr2h	equ	0xFDA
 13027                           fsr2l	equ	0xFD9
 13028                           status	equ	0xFD8
 13029                           
 13030 ;; *************** function _glcdDrawRectangle *****************
 13031 ;; Defined at:
 13032 ;;		line 38 in file "GLCD_PIC.c"
 13033 ;; Parameters:    Size  Location     Type
 13034 ;;  XS              1    wreg     unsigned char 
 13035 ;;  XE              1   14[BANK0 ] unsigned char 
 13036 ;;  YS              1   15[BANK0 ] unsigned char 
 13037 ;;  YE              1   16[BANK0 ] unsigned char 
 13038 ;;  color           4   17[BANK0 ] unsigned long 
 13039 ;; Auto vars:     Size  Location     Type
 13040 ;;  XS              1   32[BANK0 ] unsigned char 
 13041 ;;  i               2   27[BANK0 ] unsigned short 
 13042 ;;  colorData       3   29[BANK0 ] unsigned char [3]
 13043 ;;  numLoops        2   25[BANK0 ] unsigned short 
 13044 ;; Return value:  Size  Location     Type
 13045 ;;                  1    wreg      void 
 13046 ;; Registers used:
 13047 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : 0/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13053 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13057 ;;Total ram usage:       19 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    7
 13060 ;; This function calls:
 13061 ;;		___wmul
 13062 ;;		_glcdTransfer
 13063 ;;		_spiSend
 13064 ;; This function is called by:
 13065 ;;		_drawTeamName
 13066 ;;		_drawWasher
 13067 ;;		_drawBolt
 13068 ;;		_drawNut
 13069 ;;		_drawSpacer
 13070 ;;		_initGLCD
 13071 ;;		_glcdDrawPixel
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075                           	psect	text31
 13076  004D50                     __ptext31:
 13077                           	opt stack 0
 13078  004D50                     _glcdDrawRectangle:
 13079                           	opt stack 22
 13080                           
 13081                           ;incstack = 0
 13082                           ;glcdDrawRectangle@XS stored from wreg
 13083  004D50  0100               	movlb	0	; () banked
 13084  004D52  6FE3               	movwf	glcdDrawRectangle@XS& (0+255),b
 13085                           
 13086                           ;GLCD_PIC.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
 13087  004D54  0100               	movlb	0	; () banked
 13088  004D56  BDB9               	btfsc	_MADCTLbits& (0+255),6,b
 13089                           
 13090                           ; BSR set to: 0
 13091  004D58  ABB9               	btfss	_MADCTLbits& (0+255),5,b
 13092  004D5A  D005               	goto	l1338
 13093                           
 13094                           ; BSR set to: 0
 13095                           ;GLCD_PIC.c: 60: YS += 3;
 13096  004D5C  0E03               	movlw	3
 13097  004D5E  27D2               	addwf	glcdDrawRectangle@YS& (0+255),f,b
 13098                           
 13099                           ;GLCD_PIC.c: 61: YE += 3;
 13100  004D60  0E03               	movlw	3
 13101  004D62  27D3               	addwf	glcdDrawRectangle@YE& (0+255),f,b
 13102  004D64  D015               	goto	l5625
 13103  004D66                     l1338:
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;GLCD_PIC.c: 65: else if(MADCTLbits.MY == 1){
 13107  004D66  AFB9               	btfss	_MADCTLbits& (0+255),7,b
 13108  004D68  D008               	goto	l1340
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;GLCD_PIC.c: 67: YS += 2;
 13112  004D6A  0E02               	movlw	2
 13113  004D6C  27D2               	addwf	glcdDrawRectangle@YS& (0+255),f,b
 13114                           
 13115                           ;GLCD_PIC.c: 68: YE += 2;
 13116  004D6E  0E02               	movlw	2
 13117  004D70  27D3               	addwf	glcdDrawRectangle@YE& (0+255),f,b
 13118                           
 13119                           ;GLCD_PIC.c: 69: XS += 3;
 13120  004D72  0E03               	movlw	3
 13121  004D74  27E3               	addwf	glcdDrawRectangle@XS& (0+255),f,b
 13122                           
 13123                           ;GLCD_PIC.c: 70: XE += 3;
 13124  004D76  0E03               	movlw	3
 13125  004D78  D00E               	goto	L7
 13126  004D7A                     l1340:
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;GLCD_PIC.c: 72: else if(MADCTLbits.MX == 1){
 13130  004D7A  ADB9               	btfss	_MADCTLbits& (0+255),6,b
 13131  004D7C  D007               	goto	l1342
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;GLCD_PIC.c: 74: YS += 2;
 13135  004D7E  0E02               	movlw	2
 13136  004D80  27D2               	addwf	glcdDrawRectangle@YS& (0+255),f,b
 13137                           
 13138                           ;GLCD_PIC.c: 75: YE += 2;
 13139  004D82  0E02               	movlw	2
 13140  004D84  27D3               	addwf	glcdDrawRectangle@YE& (0+255),f,b
 13141                           
 13142                           ; BSR set to: 0
 13143                           ;GLCD_PIC.c: 76: XS += 1;
 13144  004D86  2BE3               	incf	glcdDrawRectangle@XS& (0+255),f,b
 13145                           
 13146                           ; BSR set to: 0
 13147                           ;GLCD_PIC.c: 77: XE += 1;
 13148  004D88  2BD1               	incf	glcdDrawRectangle@XE& (0+255),f,b
 13149                           
 13150                           ;GLCD_PIC.c: 78: }
 13151  004D8A  D006               	goto	l1343
 13152  004D8C                     l1342:
 13153                           
 13154                           ; BSR set to: 0
 13155                           ;GLCD_PIC.c: 79: else{
 13156                           ;GLCD_PIC.c: 81: YS += 1;
 13157                           
 13158                           ; BSR set to: 0
 13159  004D8C  2BD2               	incf	glcdDrawRectangle@YS& (0+255),f,b
 13160                           
 13161                           ;GLCD_PIC.c: 82: YE += 1;
 13162  004D8E  2BD3               	incf	glcdDrawRectangle@YE& (0+255),f,b
 13163  004D90                     l5625:
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;GLCD_PIC.c: 83: XS += 2;
 13167  004D90  0E02               	movlw	2
 13168  004D92  27E3               	addwf	glcdDrawRectangle@XS& (0+255),f,b
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;GLCD_PIC.c: 84: XE += 2;
 13172  004D94  0E02               	movlw	2
 13173  004D96                     L7:
 13174  004D96  27D1               	addwf	glcdDrawRectangle@XE& (0+255),f,b
 13175  004D98                     l1343:
 13176                           
 13177                           ; BSR set to: 0
 13178                           ;GLCD_PIC.c: 85: }
 13179                           ;GLCD_PIC.c: 89: glcdTransfer(INST_RASET, 1);
 13180                           
 13181                           ; BSR set to: 0
 13182                           
 13183                           ; BSR set to: 0
 13184                           
 13185                           ; BSR set to: 0
 13186  004D98  0E01               	movlw	1
 13187  004D9A  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13188  004D9C  0EBB               	movlw	low GLCD_PIC@INST_RASET
 13189  004D9E  6EF6               	movwf	tblptrl,c
 13190  004DA0                     	if	1	;There is more than 1 active tblptr byte
 13191  004DA0  0EFC               	movlw	high GLCD_PIC@INST_RASET
 13192  004DA2  6EF7               	movwf	tblptrh,c
 13193  004DA4                     	endif
 13194  004DA4                     	if	1	;There are 3 active tblptr bytes
 13195  004DA4  0E00               	movlw	low (GLCD_PIC@INST_RASET shr (0+16))
 13196  004DA6  6EF8               	movwf	tblptru,c
 13197  004DA8                     	endif
 13198  004DA8  0008               	tblrd		*
 13199  004DAA  50F5               	movf	tablat,w,c
 13200  004DAC  EC32  F030         	call	_glcdTransfer
 13201                           
 13202                           ;GLCD_PIC.c: 90: glcdTransfer(0x00, 0);
 13203  004DB0  0E00               	movlw	0
 13204  004DB2  0100               	movlb	0	; () banked
 13205  004DB4  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13206  004DB6  0E00               	movlw	0
 13207  004DB8  EC32  F030         	call	_glcdTransfer
 13208                           
 13209                           ;GLCD_PIC.c: 91: glcdTransfer(XS, 0);
 13210  004DBC  0E00               	movlw	0
 13211  004DBE  0100               	movlb	0	; () banked
 13212  004DC0  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13213  004DC2  51E3               	movf	glcdDrawRectangle@XS& (0+255),w,b
 13214  004DC4  EC32  F030         	call	_glcdTransfer
 13215                           
 13216                           ;GLCD_PIC.c: 92: glcdTransfer(0x00, 0);
 13217  004DC8  0E00               	movlw	0
 13218  004DCA  0100               	movlb	0	; () banked
 13219  004DCC  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13220  004DCE  0E00               	movlw	0
 13221  004DD0  EC32  F030         	call	_glcdTransfer
 13222                           
 13223                           ;GLCD_PIC.c: 93: glcdTransfer(XE - 1, 0);
 13224  004DD4  0E00               	movlw	0
 13225  004DD6  0100               	movlb	0	; () banked
 13226  004DD8  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13227  004DDA  05D1               	decf	glcdDrawRectangle@XE& (0+255),w,b
 13228  004DDC  EC32  F030         	call	_glcdTransfer
 13229                           
 13230                           ;GLCD_PIC.c: 97: glcdTransfer(INST_CASET, 1);
 13231  004DE0  0E01               	movlw	1
 13232  004DE2  0100               	movlb	0	; () banked
 13233  004DE4  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13234  004DE6  0EBC               	movlw	low GLCD_PIC@INST_CASET
 13235  004DE8  6EF6               	movwf	tblptrl,c
 13236  004DEA                     	if	1	;There is more than 1 active tblptr byte
 13237  004DEA  0EFC               	movlw	high GLCD_PIC@INST_CASET
 13238  004DEC  6EF7               	movwf	tblptrh,c
 13239  004DEE                     	endif
 13240  004DEE                     	if	1	;There are 3 active tblptr bytes
 13241  004DEE  0E00               	movlw	low (GLCD_PIC@INST_CASET shr (0+16))
 13242  004DF0  6EF8               	movwf	tblptru,c
 13243  004DF2                     	endif
 13244  004DF2  0008               	tblrd		*
 13245  004DF4  50F5               	movf	tablat,w,c
 13246  004DF6  EC32  F030         	call	_glcdTransfer
 13247                           
 13248                           ;GLCD_PIC.c: 98: glcdTransfer(0x00, 0);
 13249  004DFA  0E00               	movlw	0
 13250  004DFC  0100               	movlb	0	; () banked
 13251  004DFE  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13252  004E00  0E00               	movlw	0
 13253  004E02  EC32  F030         	call	_glcdTransfer
 13254                           
 13255                           ;GLCD_PIC.c: 99: glcdTransfer(YS, 0);
 13256  004E06  0E00               	movlw	0
 13257  004E08  0100               	movlb	0	; () banked
 13258  004E0A  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13259  004E0C  51D2               	movf	glcdDrawRectangle@YS& (0+255),w,b
 13260  004E0E  EC32  F030         	call	_glcdTransfer
 13261                           
 13262                           ;GLCD_PIC.c: 100: glcdTransfer(0x00, 0);
 13263  004E12  0E00               	movlw	0
 13264  004E14  0100               	movlb	0	; () banked
 13265  004E16  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13266  004E18  0E00               	movlw	0
 13267  004E1A  EC32  F030         	call	_glcdTransfer
 13268                           
 13269                           ;GLCD_PIC.c: 101: glcdTransfer(YE - 1, 0);
 13270  004E1E  0E00               	movlw	0
 13271  004E20  0100               	movlb	0	; () banked
 13272  004E22  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13273  004E24  05D3               	decf	glcdDrawRectangle@YE& (0+255),w,b
 13274  004E26  EC32  F030         	call	_glcdTransfer
 13275                           
 13276                           ;GLCD_PIC.c: 103: glcdTransfer(INST_RAMWR, 1);
 13277  004E2A  0E01               	movlw	1
 13278  004E2C  0100               	movlb	0	; () banked
 13279  004E2E  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13280  004E30  0EBA               	movlw	low GLCD_PIC@INST_RAMWR
 13281  004E32  6EF6               	movwf	tblptrl,c
 13282  004E34                     	if	1	;There is more than 1 active tblptr byte
 13283  004E34  0EFC               	movlw	high GLCD_PIC@INST_RAMWR
 13284  004E36  6EF7               	movwf	tblptrh,c
 13285  004E38                     	endif
 13286  004E38                     	if	1	;There are 3 active tblptr bytes
 13287  004E38  0E00               	movlw	low (GLCD_PIC@INST_RAMWR shr (0+16))
 13288  004E3A  6EF8               	movwf	tblptru,c
 13289  004E3C                     	endif
 13290  004E3C  0008               	tblrd		*
 13291  004E3E  50F5               	movf	tablat,w,c
 13292  004E40  EC32  F030         	call	_glcdTransfer
 13293                           
 13294                           ;GLCD_PIC.c: 107: if((XE == XS) && (YE == YS)){
 13295  004E44  0100               	movlb	0	; () banked
 13296  004E46  51E3               	movf	glcdDrawRectangle@XS& (0+255),w,b
 13297  004E48  19D1               	xorwf	glcdDrawRectangle@XE& (0+255),w,b
 13298  004E4A  A4D8               	btfss	status,2,c
 13299  004E4C  D016               	goto	l1344
 13300                           
 13301                           ; BSR set to: 0
 13302  004E4E  51D2               	movf	glcdDrawRectangle@YS& (0+255),w,b
 13303  004E50  19D3               	xorwf	glcdDrawRectangle@YE& (0+255),w,b
 13304  004E52  A4D8               	btfss	status,2,c
 13305  004E54  D012               	goto	l1344
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;GLCD_PIC.c: 114: glcdTransfer(color & 0xFF, 0);
 13309  004E56  0E00               	movlw	0
 13310  004E58  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13311  004E5A  51D4               	movf	glcdDrawRectangle@color& (0+255),w,b
 13312  004E5C  EC32  F030         	call	_glcdTransfer
 13313                           
 13314                           ;GLCD_PIC.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
 13315  004E60  0E00               	movlw	0
 13316  004E62  0100               	movlb	0	; () banked
 13317  004E64  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13318  004E66  51D5               	movf	(glcdDrawRectangle@color+1)& (0+255),w,b
 13319  004E68  EC32  F030         	call	_glcdTransfer
 13320                           
 13321                           ;GLCD_PIC.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
 13322  004E6C  0E00               	movlw	0
 13323  004E6E  0100               	movlb	0	; () banked
 13324  004E70  6FC6               	movwf	glcdTransfer@cmd& (0+255),b
 13325  004E72  51D6               	movf	(glcdDrawRectangle@color+2)& (0+255),w,b
 13326  004E74  EC32  F030         	call	_glcdTransfer
 13327                           
 13328                           ;GLCD_PIC.c: 117: }
 13329  004E78  0012               	return	
 13330  004E7A                     l1344:
 13331                           
 13332                           ;GLCD_PIC.c: 118: else{
 13333                           ;GLCD_PIC.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
 13334  004E7A  0100               	movlb	0	; () banked
 13335  004E7C  51E3               	movf	glcdDrawRectangle@XS& (0+255),w,b
 13336  004E7E  6FD8               	movwf	??_glcdDrawRectangle& (0+255),b
 13337  004E80  6BD9               	clrf	(??_glcdDrawRectangle+1)& (0+255),b
 13338  004E82  1FD8               	comf	??_glcdDrawRectangle& (0+255),f,b
 13339  004E84  1FD9               	comf	(??_glcdDrawRectangle+1)& (0+255),f,b
 13340  004E86  4BD8               	infsnz	??_glcdDrawRectangle& (0+255),f,b
 13341  004E88  2BD9               	incf	(??_glcdDrawRectangle+1)& (0+255),f,b
 13342  004E8A  51D1               	movf	glcdDrawRectangle@XE& (0+255),w,b
 13343  004E8C  25D8               	addwf	??_glcdDrawRectangle& (0+255),w,b
 13344  004E8E  6FCB               	movwf	___wmul@multiplier& (0+255),b
 13345  004E90  0E00               	movlw	0
 13346  004E92  21D9               	addwfc	(??_glcdDrawRectangle+1)& (0+255),w,b
 13347  004E94  6FCC               	movwf	(___wmul@multiplier+1)& (0+255),b
 13348  004E96  51D2               	movf	glcdDrawRectangle@YS& (0+255),w,b
 13349  004E98  6FDA               	movwf	(??_glcdDrawRectangle+2)& (0+255),b
 13350  004E9A  6BDB               	clrf	(??_glcdDrawRectangle+3)& (0+255),b
 13351  004E9C  1FDA               	comf	(??_glcdDrawRectangle+2)& (0+255),f,b
 13352  004E9E  1FDB               	comf	(??_glcdDrawRectangle+3)& (0+255),f,b
 13353  004EA0  4BDA               	infsnz	(??_glcdDrawRectangle+2)& (0+255),f,b
 13354  004EA2  2BDB               	incf	(??_glcdDrawRectangle+3)& (0+255),f,b
 13355  004EA4  51D3               	movf	glcdDrawRectangle@YE& (0+255),w,b
 13356  004EA6  25DA               	addwf	(??_glcdDrawRectangle+2)& (0+255),w,b
 13357  004EA8  6FCD               	movwf	___wmul@multiplicand& (0+255),b
 13358  004EAA  0E00               	movlw	0
 13359  004EAC  21DB               	addwfc	(??_glcdDrawRectangle+3)& (0+255),w,b
 13360  004EAE  6FCE               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13361  004EB0  EC72  F030         	call	___wmul	;wreg free
 13362  004EB4  C0CB  F0DC         	movff	?___wmul,glcdDrawRectangle@numLoops
 13363  004EB8  C0CC  F0DD         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
 13364                           
 13365                           ;GLCD_PIC.c: 131: unsigned char colorData[3];
 13366                           ;GLCD_PIC.c: 132: colorData[0] = color & 0xFF;
 13367  004EBC  C0D4  F0E0         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
 13368                           
 13369                           ;GLCD_PIC.c: 133: colorData[1] = (color >> 8) & 0xFF;
 13370  004EC0  C0D5  F0E1         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
 13371                           
 13372                           ;GLCD_PIC.c: 134: colorData[2] = (color >> 16) & 0xFF;
 13373  004EC4  C0D6  F0E2         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
 13374                           
 13375                           ;GLCD_PIC.c: 136: LATDbits.LATD0 = 0;
 13376  004EC8  908C               	bcf	3980,0,c	;volatile
 13377                           
 13378                           ;GLCD_PIC.c: 137: LATDbits.LATD1 = 1;
 13379  004ECA  828C               	bsf	3980,1,c	;volatile
 13380                           
 13381                           ;GLCD_PIC.c: 138: for(unsigned short i = 0; i < numLoops; i++){
 13382  004ECC  0E00               	movlw	0
 13383  004ECE  0100               	movlb	0	; () banked
 13384  004ED0  6FDF               	movwf	(glcdDrawRectangle@i+1)& (0+255),b
 13385  004ED2  0E00               	movlw	0
 13386  004ED4  6FDE               	movwf	glcdDrawRectangle@i& (0+255),b
 13387  004ED6  D00E               	goto	l1346
 13388  004ED8                     
 13389                           ; BSR set to: 0
 13390                           ;GLCD_PIC.c: 139: spiSend(colorData[0]);
 13391                           
 13392                           ; BSR set to: 0
 13393  004ED8  51E0               	movf	glcdDrawRectangle@colorData& (0+255),w,b
 13394  004EDA  EC28  F031         	call	_spiSend
 13395                           
 13396                           ;GLCD_PIC.c: 140: spiSend(colorData[1]);
 13397  004EDE  0100               	movlb	0	; () banked
 13398  004EE0  51E1               	movf	(glcdDrawRectangle@colorData+1)& (0+255),w,b
 13399  004EE2  EC28  F031         	call	_spiSend
 13400                           
 13401                           ;GLCD_PIC.c: 141: spiSend(colorData[2]);
 13402  004EE6  0100               	movlb	0	; () banked
 13403  004EE8  51E2               	movf	(glcdDrawRectangle@colorData+2)& (0+255),w,b
 13404  004EEA  EC28  F031         	call	_spiSend
 13405  004EEE  0100               	movlb	0	; () banked
 13406  004EF0  4BDE               	infsnz	glcdDrawRectangle@i& (0+255),f,b
 13407  004EF2  2BDF               	incf	(glcdDrawRectangle@i+1)& (0+255),f,b
 13408  004EF4                     l1346:
 13409                           
 13410                           ; BSR set to: 0
 13411                           
 13412                           ; BSR set to: 0
 13413  004EF4  51DC               	movf	glcdDrawRectangle@numLoops& (0+255),w,b
 13414  004EF6  5DDE               	subwf	glcdDrawRectangle@i& (0+255),w,b
 13415  004EF8  51DD               	movf	(glcdDrawRectangle@numLoops+1)& (0+255),w,b
 13416  004EFA  59DF               	subwfb	(glcdDrawRectangle@i+1)& (0+255),w,b
 13417  004EFC  A0D8               	btfss	status,0,c
 13418  004EFE  D7EC               	goto	l1347
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;GLCD_PIC.c: 142: }
 13422                           ;GLCD_PIC.c: 143: LATDbits.LATD0 = 1;
 13423  004F00  808C               	bsf	3980,0,c	;volatile
 13424  004F02  0012               	return	
 13425  004F04                     __end_of_glcdDrawRectangle:
 13426                           	opt stack 0
 13427                           tblptru	equ	0xFF8
 13428                           tblptrh	equ	0xFF7
 13429                           tblptrl	equ	0xFF6
 13430                           tablat	equ	0xFF5
 13431                           prodh	equ	0xFF4
 13432                           prodl	equ	0xFF3
 13433                           intcon	equ	0xFF2
 13434                           intcon3	equ	0xFF0
 13435                           indf0	equ	0xFEF
 13436                           postinc0	equ	0xFEE
 13437                           fsr0h	equ	0xFEA
 13438                           fsr0l	equ	0xFE9
 13439                           wreg	equ	0xFE8
 13440                           postdec1	equ	0xFE5
 13441                           fsr1l	equ	0xFE1
 13442                           indf2	equ	0xFDF
 13443                           postinc2	equ	0xFDE
 13444                           postdec2	equ	0xFDD
 13445                           fsr2h	equ	0xFDA
 13446                           fsr2l	equ	0xFD9
 13447                           status	equ	0xFD8
 13448                           
 13449 ;; *************** function _glcdTransfer *****************
 13450 ;; Defined at:
 13451 ;;		line 18 in file "GLCD_PIC.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;  byte            1    wreg     unsigned char 
 13454 ;;  cmd             1    3[BANK0 ] unsigned char 
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;  byte            1    5[BANK0 ] unsigned char 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      void 
 13459 ;; Registers used:
 13460 ;;		wreg, status,2, status,0, cstack
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13466 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;Total ram usage:        3 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    6
 13473 ;; This function calls:
 13474 ;;		_spiSend
 13475 ;; This function is called by:
 13476 ;;		_glcdDrawRectangle
 13477 ;;		_glcdSetCOLMOD
 13478 ;;		_initGLCD
 13479 ;;		_glcdSetOrigin
 13480 ;; This function uses a non-reentrant model
 13481 ;;
 13482                           
 13483                           	psect	text32
 13484  006064                     __ptext32:
 13485                           	opt stack 0
 13486  006064                     _glcdTransfer:
 13487                           	opt stack 23
 13488                           
 13489                           ;incstack = 0
 13490                           ;glcdTransfer@byte stored from wreg
 13491  006064  0100               	movlb	0	; () banked
 13492  006066  6FC8               	movwf	glcdTransfer@byte& (0+255),b
 13493                           
 13494                           ;GLCD_PIC.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
 13495  006068  0100               	movlb	0	; () banked
 13496  00606A  05C6               	decf	glcdTransfer@cmd& (0+255),w,b
 13497  00606C  B4D8               	btfsc	status,2,c
 13498  00606E  D003               	goto	u3480
 13499  006070  6BC7               	clrf	??_glcdTransfer& (0+255),b
 13500  006072  2BC7               	incf	??_glcdTransfer& (0+255),f,b
 13501  006074  D002               	goto	u3498
 13502  006076                     u3480:
 13503  006076  0100               	movlb	0	; () banked
 13504  006078  6BC7               	clrf	??_glcdTransfer& (0+255),b
 13505  00607A                     u3498:
 13506  00607A  47C7               	rlncf	??_glcdTransfer& (0+255),f,b
 13507  00607C  508C               	movf	3980,w,c	;volatile
 13508  00607E  19C7               	xorwf	??_glcdTransfer& (0+255),w,b
 13509  006080  0BFD               	andlw	-3
 13510  006082  19C7               	xorwf	??_glcdTransfer& (0+255),w,b
 13511  006084  6E8C               	movwf	3980,c	;volatile
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;GLCD_PIC.c: 31: LATDbits.LATD0 = 0;
 13515  006086  908C               	bcf	3980,0,c	;volatile
 13516                           
 13517                           ; BSR set to: 0
 13518                           ;GLCD_PIC.c: 33: spiSend(byte);
 13519  006088  51C8               	movf	glcdTransfer@byte& (0+255),w,b
 13520  00608A  EC28  F031         	call	_spiSend
 13521                           
 13522                           ;GLCD_PIC.c: 35: LATDbits.LATD0 = 1;
 13523  00608E  808C               	bsf	3980,0,c	;volatile
 13524  006090  0012               	return		;funcret
 13525  006092                     __end_of_glcdTransfer:
 13526                           	opt stack 0
 13527                           tblptru	equ	0xFF8
 13528                           tblptrh	equ	0xFF7
 13529                           tblptrl	equ	0xFF6
 13530                           tablat	equ	0xFF5
 13531                           prodh	equ	0xFF4
 13532                           prodl	equ	0xFF3
 13533                           intcon	equ	0xFF2
 13534                           intcon3	equ	0xFF0
 13535                           indf0	equ	0xFEF
 13536                           postinc0	equ	0xFEE
 13537                           fsr0h	equ	0xFEA
 13538                           fsr0l	equ	0xFE9
 13539                           wreg	equ	0xFE8
 13540                           postdec1	equ	0xFE5
 13541                           fsr1l	equ	0xFE1
 13542                           indf2	equ	0xFDF
 13543                           postinc2	equ	0xFDE
 13544                           postdec2	equ	0xFDD
 13545                           fsr2h	equ	0xFDA
 13546                           fsr2l	equ	0xFD9
 13547                           status	equ	0xFD8
 13548                           
 13549 ;; *************** function _spiSend *****************
 13550 ;; Defined at:
 13551 ;;		line 33 in file "SPI_PIC.c"
 13552 ;; Parameters:    Size  Location     Type
 13553 ;;  val             1    wreg     unsigned char 
 13554 ;; Auto vars:     Size  Location     Type
 13555 ;;  val             1    2[BANK0 ] unsigned char 
 13556 ;; Return value:  Size  Location     Type
 13557 ;;                  1    wreg      void 
 13558 ;; Registers used:
 13559 ;;		wreg, status,2, cstack
 13560 ;; Tracked objects:
 13561 ;;		On entry : 0/0
 13562 ;;		On exit  : 0/0
 13563 ;;		Unchanged: 0/0
 13564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13568 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13569 ;;Total ram usage:        1 bytes
 13570 ;; Hardware stack levels used:    1
 13571 ;; Hardware stack levels required when called:    5
 13572 ;; This function calls:
 13573 ;;		_spiTransfer
 13574 ;; This function is called by:
 13575 ;;		_glcdTransfer
 13576 ;;		_glcdDrawRectangle
 13577 ;; This function uses a non-reentrant model
 13578 ;;
 13579                           
 13580                           	psect	text33
 13581  006250                     __ptext33:
 13582                           	opt stack 0
 13583  006250                     _spiSend:
 13584                           	opt stack 23
 13585                           
 13586                           ;incstack = 0
 13587                           ;spiSend@val stored from wreg
 13588  006250  0100               	movlb	0	; () banked
 13589  006252  6FC5               	movwf	spiSend@val& (0+255),b
 13590                           
 13591                           ;SPI_PIC.c: 41: spiTransfer(val);
 13592  006254  0100               	movlb	0	; () banked
 13593  006256  51C5               	movf	spiSend@val& (0+255),w,b
 13594  006258  EC5E  F030         	call	_spiTransfer
 13595  00625C  0012               	return		;funcret
 13596  00625E                     __end_of_spiSend:
 13597                           	opt stack 0
 13598                           tblptru	equ	0xFF8
 13599                           tblptrh	equ	0xFF7
 13600                           tblptrl	equ	0xFF6
 13601                           tablat	equ	0xFF5
 13602                           prodh	equ	0xFF4
 13603                           prodl	equ	0xFF3
 13604                           intcon	equ	0xFF2
 13605                           intcon3	equ	0xFF0
 13606                           indf0	equ	0xFEF
 13607                           postinc0	equ	0xFEE
 13608                           fsr0h	equ	0xFEA
 13609                           fsr0l	equ	0xFE9
 13610                           wreg	equ	0xFE8
 13611                           postdec1	equ	0xFE5
 13612                           fsr1l	equ	0xFE1
 13613                           indf2	equ	0xFDF
 13614                           postinc2	equ	0xFDE
 13615                           postdec2	equ	0xFDD
 13616                           fsr2h	equ	0xFDA
 13617                           fsr2l	equ	0xFD9
 13618                           status	equ	0xFD8
 13619                           
 13620 ;; *************** function _spiTransfer *****************
 13621 ;; Defined at:
 13622 ;;		line 12 in file "SPI_PIC.c"
 13623 ;; Parameters:    Size  Location     Type
 13624 ;;  byteToTransf    1    wreg     unsigned char 
 13625 ;; Auto vars:     Size  Location     Type
 13626 ;;  byteToTransf    1    1[BANK0 ] unsigned char 
 13627 ;; Return value:  Size  Location     Type
 13628 ;;                  1    wreg      unsigned char 
 13629 ;; Registers used:
 13630 ;;		wreg, status,2
 13631 ;; Tracked objects:
 13632 ;;		On entry : 0/0
 13633 ;;		On exit  : 0/0
 13634 ;;		Unchanged: 0/0
 13635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13639 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13640 ;;Total ram usage:        2 bytes
 13641 ;; Hardware stack levels used:    1
 13642 ;; Hardware stack levels required when called:    4
 13643 ;; This function calls:
 13644 ;;		Nothing
 13645 ;; This function is called by:
 13646 ;;		_spiSend
 13647 ;;		_spiReceive
 13648 ;; This function uses a non-reentrant model
 13649 ;;
 13650                           
 13651                           	psect	text34
 13652  0060BC                     __ptext34:
 13653                           	opt stack 0
 13654  0060BC                     _spiTransfer:
 13655                           	opt stack 23
 13656                           
 13657                           ;incstack = 0
 13658                           ;spiTransfer@byteToTransfer stored from wreg
 13659  0060BC  0100               	movlb	0	; () banked
 13660  0060BE  6FC4               	movwf	spiTransfer@byteToTransfer& (0+255),b
 13661                           
 13662                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
 13663  0060C0  C0C4  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
 13664  0060C4                     l5485:
 13665  0060C4  B69E               	btfsc	3998,3,c	;volatile
 13666  0060C6  D002               	goto	u3420
 13667  0060C8  0E01               	movlw	1
 13668  0060CA  D001               	goto	u3422
 13669  0060CC                     u3420:
 13670  0060CC  0E00               	movlw	0
 13671  0060CE                     u3422:
 13672  0060CE  0100               	movlb	0	; () banked
 13673  0060D0  6FC3               	movwf	??_spiTransfer& (0+255),b
 13674  0060D2  B0C7               	btfsc	4039,0,c	;volatile
 13675  0060D4  D002               	goto	u3430
 13676  0060D6  0E01               	movlw	1
 13677  0060D8  D001               	goto	u3432
 13678  0060DA                     u3430:
 13679  0060DA  0E00               	movlw	0
 13680  0060DC                     u3432:
 13681  0060DC  11C3               	iorwf	??_spiTransfer& (0+255),w,b
 13682  0060DE  E1F2               	bnz	l5485
 13683                           
 13684                           ; BSR set to: 0
 13685                           ;SPI_PIC.c: 30: return SSPBUF;
 13686                           
 13687                           ; BSR set to: 0
 13688  0060E0  50C9               	movf	4041,w,c	;volatile
 13689  0060E2  0012               	return	
 13690  0060E4                     __end_of_spiTransfer:
 13691                           	opt stack 0
 13692                           tblptru	equ	0xFF8
 13693                           tblptrh	equ	0xFF7
 13694                           tblptrl	equ	0xFF6
 13695                           tablat	equ	0xFF5
 13696                           prodh	equ	0xFF4
 13697                           prodl	equ	0xFF3
 13698                           intcon	equ	0xFF2
 13699                           intcon3	equ	0xFF0
 13700                           indf0	equ	0xFEF
 13701                           postinc0	equ	0xFEE
 13702                           fsr0h	equ	0xFEA
 13703                           fsr0l	equ	0xFE9
 13704                           wreg	equ	0xFE8
 13705                           postdec1	equ	0xFE5
 13706                           fsr1l	equ	0xFE1
 13707                           indf2	equ	0xFDF
 13708                           postinc2	equ	0xFDE
 13709                           postdec2	equ	0xFDD
 13710                           fsr2h	equ	0xFDA
 13711                           fsr2l	equ	0xFD9
 13712                           status	equ	0xFD8
 13713                           
 13714 ;; *************** function ___wmul *****************
 13715 ;; Defined at:
 13716 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;  multiplier      2    8[BANK0 ] unsigned int 
 13719 ;;  multiplicand    2   10[BANK0 ] unsigned int 
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;  product         2   12[BANK0 ] unsigned int 
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  2    8[BANK0 ] unsigned int 
 13724 ;; Registers used:
 13725 ;;		wreg, status,2, status,0, prodl, prodh
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13731 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13734 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13735 ;;Total ram usage:        6 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    4
 13738 ;; This function calls:
 13739 ;;		Nothing
 13740 ;; This function is called by:
 13741 ;;		_main
 13742 ;;		_glcdDrawRectangle
 13743 ;;		_printf
 13744 ;;		_get_RTC_initial
 13745 ;;		_get_RTC_final
 13746 ;;		_store_prev
 13747 ;; This function uses a non-reentrant model
 13748 ;;
 13749                           
 13750                           	psect	text35
 13751  0060E4                     __ptext35:
 13752                           	opt stack 0
 13753  0060E4                     ___wmul:
 13754                           	opt stack 25
 13755                           
 13756                           ; BSR set to: 0
 13757                           ;incstack = 0
 13758  0060E4  0100               	movlb	0	; () banked
 13759  0060E6  51CB               	movf	___wmul@multiplier& (0+255),w,b
 13760  0060E8  03CD               	mulwf	___wmul@multiplicand& (0+255),b
 13761  0060EA  CFF3 F0CF          	movff	prodl,___wmul@product
 13762  0060EE  CFF4 F0D0          	movff	prodh,___wmul@product+1
 13763  0060F2  51CB               	movf	___wmul@multiplier& (0+255),w,b
 13764  0060F4  03CE               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13765  0060F6  50F3               	movf	prodl,w,c
 13766  0060F8  27D0               	addwf	(___wmul@product+1)& (0+255),f,b
 13767  0060FA  51CC               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13768  0060FC  03CD               	mulwf	___wmul@multiplicand& (0+255),b
 13769  0060FE  50F3               	movf	prodl,w,c
 13770  006100  27D0               	addwf	(___wmul@product+1)& (0+255),f,b
 13771                           
 13772                           ; BSR set to: 0
 13773  006102  C0CF  F0CB         	movff	___wmul@product,?___wmul
 13774  006106  C0D0  F0CC         	movff	___wmul@product+1,?___wmul+1
 13775  00610A  0012               	return	
 13776  00610C                     __end_of___wmul:
 13777                           	opt stack 0
 13778                           tblptru	equ	0xFF8
 13779                           tblptrh	equ	0xFF7
 13780                           tblptrl	equ	0xFF6
 13781                           tablat	equ	0xFF5
 13782                           prodh	equ	0xFF4
 13783                           prodl	equ	0xFF3
 13784                           intcon	equ	0xFF2
 13785                           intcon3	equ	0xFF0
 13786                           indf0	equ	0xFEF
 13787                           postinc0	equ	0xFEE
 13788                           fsr0h	equ	0xFEA
 13789                           fsr0l	equ	0xFE9
 13790                           wreg	equ	0xFE8
 13791                           postdec1	equ	0xFE5
 13792                           fsr1l	equ	0xFE1
 13793                           indf2	equ	0xFDF
 13794                           postinc2	equ	0xFDE
 13795                           postdec2	equ	0xFDD
 13796                           fsr2h	equ	0xFDA
 13797                           fsr2l	equ	0xFD9
 13798                           status	equ	0xFD8
 13799                           
 13800 ;; *************** function _I2C_Master_Init *****************
 13801 ;; Defined at:
 13802 ;;		line 14 in file "I2C.c"
 13803 ;; Parameters:    Size  Location     Type
 13804 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
 13805 ;; Auto vars:     Size  Location     Type
 13806 ;;		None
 13807 ;; Return value:  Size  Location     Type
 13808 ;;                  1    wreg      void 
 13809 ;; Registers used:
 13810 ;;		wreg, status,2, status,0, cstack
 13811 ;; Tracked objects:
 13812 ;;		On entry : 0/0
 13813 ;;		On exit  : 0/0
 13814 ;;		Unchanged: 0/0
 13815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13816 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13818 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13819 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13820 ;;Total ram usage:        8 bytes
 13821 ;; Hardware stack levels used:    1
 13822 ;; Hardware stack levels required when called:    5
 13823 ;; This function calls:
 13824 ;;		___lldiv
 13825 ;; This function is called by:
 13826 ;;		_I2C_init
 13827 ;;		_drawTeamName
 13828 ;;		_drawWasher
 13829 ;;		_drawBolt
 13830 ;;		_drawNut
 13831 ;;		_drawSpacer
 13832 ;;		_initRamp
 13833 ;;		_ramp_Rotate
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           	psect	text36
 13838  005C4C                     __ptext36:
 13839                           	opt stack 0
 13840  005C4C                     _I2C_Master_Init:
 13841                           	opt stack 24
 13842                           
 13843                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 13844                           
 13845                           ; BSR set to: 0
 13846                           ;incstack = 0
 13847  005C4C  9AC6               	bcf	4038,5,c	;volatile
 13848                           
 13849                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 13850  005C4E  8694               	bsf	3988,3,c	;volatile
 13851                           
 13852                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 13853  005C50  8894               	bsf	3988,4,c	;volatile
 13854                           
 13855                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 13856  005C52  0E80               	movlw	128
 13857  005C54  6EC7               	movwf	4039,c	;volatile
 13858                           
 13859                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 13860  005C56  0E28               	movlw	40
 13861  005C58  6EC6               	movwf	4038,c	;volatile
 13862                           
 13863                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 13864  005C5A  0E00               	movlw	0
 13865  005C5C  6EC5               	movwf	4037,c	;volatile
 13866                           
 13867                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
 13868  005C5E  0E00               	movlw	0
 13869  005C60  0100               	movlb	0	; () banked
 13870  005C62  6FC3               	movwf	___lldiv@dividend& (0+255),b
 13871  005C64  0E48               	movlw	72
 13872  005C66  6FC4               	movwf	(___lldiv@dividend+1)& (0+255),b
 13873  005C68  0EE8               	movlw	232
 13874  005C6A  6FC5               	movwf	(___lldiv@dividend+2)& (0+255),b
 13875  005C6C  0E01               	movlw	1
 13876  005C6E  6FC6               	movwf	(___lldiv@dividend+3)& (0+255),b
 13877  005C70  C0D0  F0D4         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 13878  005C74  C0D1  F0D5         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 13879  005C78  C0D2  F0D6         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 13880  005C7C  C0D3  F0D7         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 13881  005C80  0E02               	movlw	2
 13882  005C82                     u3535:
 13883  005C82  90D8               	bcf	status,0,c
 13884  005C84  37D4               	rlcf	??_I2C_Master_Init& (0+255),f,b
 13885  005C86  37D5               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 13886  005C88  37D6               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 13887  005C8A  37D7               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 13888  005C8C  2EE8               	decfsz	wreg,f,c
 13889  005C8E  D7F9               	goto	u3535
 13890  005C90  C0D4  F0C7         	movff	??_I2C_Master_Init,___lldiv@divisor
 13891  005C94  C0D5  F0C8         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 13892  005C98  C0D6  F0C9         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 13893  005C9C  C0D7  F0CA         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 13894  005CA0  ECF6  F02C         	call	___lldiv	;wreg free
 13895  005CA4  0100               	movlb	0	; () banked
 13896  005CA6  05C3               	decf	?___lldiv& (0+255),w,b
 13897  005CA8  6EC8               	movwf	4040,c	;volatile
 13898                           
 13899                           ; BSR set to: 0
 13900  005CAA  0012               	return		;funcret
 13901  005CAC                     __end_of_I2C_Master_Init:
 13902                           	opt stack 0
 13903                           tblptru	equ	0xFF8
 13904                           tblptrh	equ	0xFF7
 13905                           tblptrl	equ	0xFF6
 13906                           tablat	equ	0xFF5
 13907                           prodh	equ	0xFF4
 13908                           prodl	equ	0xFF3
 13909                           intcon	equ	0xFF2
 13910                           intcon3	equ	0xFF0
 13911                           indf0	equ	0xFEF
 13912                           postinc0	equ	0xFEE
 13913                           fsr0h	equ	0xFEA
 13914                           fsr0l	equ	0xFE9
 13915                           wreg	equ	0xFE8
 13916                           postdec1	equ	0xFE5
 13917                           fsr1l	equ	0xFE1
 13918                           indf2	equ	0xFDF
 13919                           postinc2	equ	0xFDE
 13920                           postdec2	equ	0xFDD
 13921                           fsr2h	equ	0xFDA
 13922                           fsr2l	equ	0xFD9
 13923                           status	equ	0xFD8
 13924                           
 13925 ;; *************** function ___lldiv *****************
 13926 ;; Defined at:
 13927 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;  dividend        4    0[BANK0 ] unsigned long 
 13930 ;;  divisor         4    4[BANK0 ] unsigned long 
 13931 ;; Auto vars:     Size  Location     Type
 13932 ;;  quotient        4    8[BANK0 ] unsigned long 
 13933 ;;  counter         1   12[BANK0 ] unsigned char 
 13934 ;; Return value:  Size  Location     Type
 13935 ;;                  4    0[BANK0 ] unsigned long 
 13936 ;; Registers used:
 13937 ;;		wreg, status,2, status,0
 13938 ;; Tracked objects:
 13939 ;;		On entry : 0/0
 13940 ;;		On exit  : 0/0
 13941 ;;		Unchanged: 0/0
 13942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13943 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13947 ;;Total ram usage:       13 bytes
 13948 ;; Hardware stack levels used:    1
 13949 ;; Hardware stack levels required when called:    4
 13950 ;; This function calls:
 13951 ;;		Nothing
 13952 ;; This function is called by:
 13953 ;;		_I2C_Master_Init
 13954 ;; This function uses a non-reentrant model
 13955 ;;
 13956                           
 13957                           	psect	text37
 13958  0059EC                     __ptext37:
 13959                           	opt stack 0
 13960  0059EC                     ___lldiv:
 13961                           	opt stack 24
 13962                           
 13963                           ; BSR set to: 0
 13964                           ;incstack = 0
 13965  0059EC  0E00               	movlw	0
 13966  0059EE  0100               	movlb	0	; () banked
 13967  0059F0  6FCB               	movwf	___lldiv@quotient& (0+255),b
 13968  0059F2  0E00               	movlw	0
 13969  0059F4  6FCC               	movwf	(___lldiv@quotient+1)& (0+255),b
 13970  0059F6  0E00               	movlw	0
 13971  0059F8  6FCD               	movwf	(___lldiv@quotient+2)& (0+255),b
 13972  0059FA  0E00               	movlw	0
 13973  0059FC  6FCE               	movwf	(___lldiv@quotient+3)& (0+255),b
 13974                           
 13975                           ; BSR set to: 0
 13976  0059FE  51C7               	movf	___lldiv@divisor& (0+255),w,b
 13977  005A00  11C8               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 13978  005A02  11C9               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 13979  005A04  11CA               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 13980  005A06  B4D8               	btfsc	status,2,c
 13981  005A08  D02A               	goto	l1819
 13982                           
 13983                           ; BSR set to: 0
 13984  005A0A  0E01               	movlw	1
 13985  005A0C  6FCF               	movwf	___lldiv@counter& (0+255),b
 13986  005A0E  D006               	goto	l1814
 13987  005A10                     
 13988                           ; BSR set to: 0
 13989                           
 13990                           ; BSR set to: 0
 13991  005A10  90D8               	bcf	status,0,c
 13992  005A12  37C7               	rlcf	___lldiv@divisor& (0+255),f,b
 13993  005A14  37C8               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 13994  005A16  37C9               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 13995  005A18  37CA               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 13996  005A1A  2BCF               	incf	___lldiv@counter& (0+255),f,b
 13997  005A1C                     l1814:
 13998                           
 13999                           ; BSR set to: 0
 14000                           
 14001                           ; BSR set to: 0
 14002  005A1C  AFCA               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 14003  005A1E  D7F8               	goto	l1815
 14004  005A20                     u3510:
 14005                           
 14006                           ; BSR set to: 0
 14007                           
 14008                           ; BSR set to: 0
 14009                           
 14010                           ; BSR set to: 0
 14011  005A20  90D8               	bcf	status,0,c
 14012  005A22  37CB               	rlcf	___lldiv@quotient& (0+255),f,b
 14013  005A24  37CC               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 14014  005A26  37CD               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 14015  005A28  37CE               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 14016                           
 14017                           ; BSR set to: 0
 14018  005A2A  51C7               	movf	___lldiv@divisor& (0+255),w,b
 14019  005A2C  5DC3               	subwf	___lldiv@dividend& (0+255),w,b
 14020  005A2E  51C8               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14021  005A30  59C4               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 14022  005A32  51C9               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14023  005A34  59C5               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 14024  005A36  51CA               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14025  005A38  59C6               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 14026  005A3A  A0D8               	btfss	status,0,c
 14027  005A3C  D009               	goto	l1818
 14028                           
 14029                           ; BSR set to: 0
 14030  005A3E  51C7               	movf	___lldiv@divisor& (0+255),w,b
 14031  005A40  5FC3               	subwf	___lldiv@dividend& (0+255),f,b
 14032  005A42  51C8               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14033  005A44  5BC4               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 14034  005A46  51C9               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14035  005A48  5BC5               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 14036  005A4A  51CA               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14037  005A4C  5BC6               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 14038                           
 14039                           ; BSR set to: 0
 14040  005A4E  81CB               	bsf	___lldiv@quotient& (0+255),0,b
 14041  005A50                     l1818:
 14042                           
 14043                           ; BSR set to: 0
 14044                           
 14045                           ; BSR set to: 0
 14046  005A50  90D8               	bcf	status,0,c
 14047  005A52  33CA               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 14048  005A54  33C9               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 14049  005A56  33C8               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 14050  005A58  33C7               	rrcf	___lldiv@divisor& (0+255),f,b
 14051                           
 14052                           ; BSR set to: 0
 14053  005A5A  2FCF               	decfsz	___lldiv@counter& (0+255),f,b
 14054  005A5C  D7E1               	goto	u3510
 14055  005A5E                     l1819:
 14056                           
 14057                           ; BSR set to: 0
 14058                           
 14059                           ; BSR set to: 0
 14060  005A5E  C0CB  F0C3         	movff	___lldiv@quotient,?___lldiv
 14061  005A62  C0CC  F0C4         	movff	___lldiv@quotient+1,?___lldiv+1
 14062  005A66  C0CD  F0C5         	movff	___lldiv@quotient+2,?___lldiv+2
 14063  005A6A  C0CE  F0C6         	movff	___lldiv@quotient+3,?___lldiv+3
 14064                           
 14065                           ; BSR set to: 0
 14066  005A6E  0012               	return		;funcret
 14067  005A70                     __end_of___lldiv:
 14068                           	opt stack 0
 14069                           tblptru	equ	0xFF8
 14070                           tblptrh	equ	0xFF7
 14071                           tblptrl	equ	0xFF6
 14072                           tablat	equ	0xFF5
 14073                           prodh	equ	0xFF4
 14074                           prodl	equ	0xFF3
 14075                           intcon	equ	0xFF2
 14076                           intcon3	equ	0xFF0
 14077                           indf0	equ	0xFEF
 14078                           postinc0	equ	0xFEE
 14079                           fsr0h	equ	0xFEA
 14080                           fsr0l	equ	0xFE9
 14081                           wreg	equ	0xFE8
 14082                           postdec1	equ	0xFE5
 14083                           fsr1l	equ	0xFE1
 14084                           indf2	equ	0xFDF
 14085                           postinc2	equ	0xFDE
 14086                           postdec2	equ	0xFDD
 14087                           fsr2h	equ	0xFDA
 14088                           fsr2l	equ	0xFD9
 14089                           status	equ	0xFD8
 14090                           
 14091 ;; *************** function _I2C_sendData *****************
 14092 ;; Defined at:
 14093 ;;		line 1288 in file "main.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;  char_data       1    wreg     unsigned char 
 14096 ;; Auto vars:     Size  Location     Type
 14097 ;;  char_data       1    3[BANK0 ] unsigned char 
 14098 ;; Return value:  Size  Location     Type
 14099 ;;                  1    wreg      void 
 14100 ;; Registers used:
 14101 ;;		wreg, status,2, status,0, cstack
 14102 ;; Tracked objects:
 14103 ;;		On entry : 0/0
 14104 ;;		On exit  : 0/0
 14105 ;;		Unchanged: 0/0
 14106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14111 ;;Total ram usage:        1 bytes
 14112 ;; Hardware stack levels used:    1
 14113 ;; Hardware stack levels required when called:    6
 14114 ;; This function calls:
 14115 ;;		_I2C_Master_Start
 14116 ;;		_I2C_Master_Stop
 14117 ;;		_I2C_Master_Write
 14118 ;; This function is called by:
 14119 ;;		_main
 14120 ;;		_Bolt_dispense
 14121 ;;		_Nut_dispense
 14122 ;;		_Spacer_dispense
 14123 ;;		_Washer_dispense
 14124 ;;		_Bolt_remain
 14125 ;;		_Nut_remain
 14126 ;;		_Spacer_remain
 14127 ;;		_Washer_remain
 14128 ;;		_nut_washer_remain
 14129 ;;		_bolt_spacer_remain
 14130 ;;		_all_remain
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           	psect	text38
 14135  00610C                     __ptext38:
 14136                           	opt stack 0
 14137  00610C                     _I2C_sendData:
 14138                           	opt stack 23
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;incstack = 0
 14142                           ;I2C_sendData@char_data stored from wreg
 14143  00610C  0100               	movlb	0	; () banked
 14144  00610E  6FC6               	movwf	I2C_sendData@char_data& (0+255),b
 14145                           
 14146                           ;main.c: 1289: I2C_Master_Start();
 14147  006110  EC46  F031         	call	_I2C_Master_Start	;wreg free
 14148                           
 14149                           ;main.c: 1290: I2C_Master_Write(0b00010000);
 14150  006114  0E00               	movlw	0
 14151  006116  0100               	movlb	0	; () banked
 14152  006118  6FC5               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 14153  00611A  0E10               	movlw	16
 14154  00611C  6FC4               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 14155  00611E  EC34  F031         	call	_I2C_Master_Write	;wreg free
 14156                           
 14157                           ;main.c: 1291: I2C_Master_Write(char_data);
 14158  006122  C0C6  F0C4         	movff	I2C_sendData@char_data,I2C_Master_Write@byteToWrite
 14159  006126  0100               	movlb	0	; () banked
 14160  006128  6BC5               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 14161  00612A  EC34  F031         	call	_I2C_Master_Write	;wreg free
 14162                           
 14163                           ;main.c: 1292: I2C_Master_Stop();
 14164  00612E  EC42  F031         	call	_I2C_Master_Stop	;wreg free
 14165  006132  0012               	return	
 14166  006134                     __end_of_I2C_sendData:
 14167                           	opt stack 0
 14168                           tblptru	equ	0xFF8
 14169                           tblptrh	equ	0xFF7
 14170                           tblptrl	equ	0xFF6
 14171                           tablat	equ	0xFF5
 14172                           prodh	equ	0xFF4
 14173                           prodl	equ	0xFF3
 14174                           intcon	equ	0xFF2
 14175                           intcon3	equ	0xFF0
 14176                           indf0	equ	0xFEF
 14177                           postinc0	equ	0xFEE
 14178                           fsr0h	equ	0xFEA
 14179                           fsr0l	equ	0xFE9
 14180                           wreg	equ	0xFE8
 14181                           postdec1	equ	0xFE5
 14182                           fsr1l	equ	0xFE1
 14183                           indf2	equ	0xFDF
 14184                           postinc2	equ	0xFDE
 14185                           postdec2	equ	0xFDD
 14186                           fsr2h	equ	0xFDA
 14187                           fsr2l	equ	0xFD9
 14188                           status	equ	0xFD8
 14189                           
 14190 ;; *************** function _I2C_Master_Write *****************
 14191 ;; Defined at:
 14192 ;;		line 108 in file "I2C.c"
 14193 ;; Parameters:    Size  Location     Type
 14194 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
 14195 ;; Auto vars:     Size  Location     Type
 14196 ;;		None
 14197 ;; Return value:  Size  Location     Type
 14198 ;;                  1    wreg      void 
 14199 ;; Registers used:
 14200 ;;		wreg, status,2, status,0, cstack
 14201 ;; Tracked objects:
 14202 ;;		On entry : 0/0
 14203 ;;		On exit  : 0/0
 14204 ;;		Unchanged: 0/0
 14205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14210 ;;Total ram usage:        2 bytes
 14211 ;; Hardware stack levels used:    1
 14212 ;; Hardware stack levels required when called:    5
 14213 ;; This function calls:
 14214 ;;		_I2C_Master_Wait
 14215 ;; This function is called by:
 14216 ;;		_main
 14217 ;;		_I2C_init
 14218 ;;		_I2C_sendData
 14219 ;;		_initRamp
 14220 ;;		_ramp_Rotate
 14221 ;;		_RTC_setTime
 14222 ;;		_get_RTC_initial
 14223 ;;		_get_RTC_final
 14224 ;; This function uses a non-reentrant model
 14225 ;;
 14226                           
 14227                           	psect	text39
 14228  006268                     __ptext39:
 14229                           	opt stack 0
 14230  006268                     _I2C_Master_Write:
 14231                           	opt stack 23
 14232                           
 14233                           ;I2C.c: 116: I2C_Master_Wait();
 14234                           
 14235                           ;incstack = 0
 14236  006268  EC01  F031         	call	_I2C_Master_Wait	;wreg free
 14237                           
 14238                           ;I2C.c: 117: SSPBUF = byteToWrite;
 14239  00626C  C0C4  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 14240  006270  0012               	return		;funcret
 14241  006272                     __end_of_I2C_Master_Write:
 14242                           	opt stack 0
 14243                           tblptru	equ	0xFF8
 14244                           tblptrh	equ	0xFF7
 14245                           tblptrl	equ	0xFF6
 14246                           tablat	equ	0xFF5
 14247                           prodh	equ	0xFF4
 14248                           prodl	equ	0xFF3
 14249                           intcon	equ	0xFF2
 14250                           intcon3	equ	0xFF0
 14251                           indf0	equ	0xFEF
 14252                           postinc0	equ	0xFEE
 14253                           fsr0h	equ	0xFEA
 14254                           fsr0l	equ	0xFE9
 14255                           wreg	equ	0xFE8
 14256                           postdec1	equ	0xFE5
 14257                           fsr1l	equ	0xFE1
 14258                           indf2	equ	0xFDF
 14259                           postinc2	equ	0xFDE
 14260                           postdec2	equ	0xFDD
 14261                           fsr2h	equ	0xFDA
 14262                           fsr2l	equ	0xFD9
 14263                           status	equ	0xFD8
 14264                           
 14265 ;; *************** function _I2C_Master_Stop *****************
 14266 ;; Defined at:
 14267 ;;		line 95 in file "I2C.c"
 14268 ;; Parameters:    Size  Location     Type
 14269 ;;		None
 14270 ;; Auto vars:     Size  Location     Type
 14271 ;;		None
 14272 ;; Return value:  Size  Location     Type
 14273 ;;                  1    wreg      void 
 14274 ;; Registers used:
 14275 ;;		wreg, status,2, status,0, cstack
 14276 ;; Tracked objects:
 14277 ;;		On entry : 0/0
 14278 ;;		On exit  : 0/0
 14279 ;;		Unchanged: 0/0
 14280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14285 ;;Total ram usage:        0 bytes
 14286 ;; Hardware stack levels used:    1
 14287 ;; Hardware stack levels required when called:    5
 14288 ;; This function calls:
 14289 ;;		_I2C_Master_Wait
 14290 ;; This function is called by:
 14291 ;;		_main
 14292 ;;		_I2C_init
 14293 ;;		_I2C_sendData
 14294 ;;		_initRamp
 14295 ;;		_ramp_Rotate
 14296 ;;		_RTC_setTime
 14297 ;;		_get_RTC_initial
 14298 ;;		_get_RTC_final
 14299 ;; This function uses a non-reentrant model
 14300 ;;
 14301                           
 14302                           	psect	text40
 14303  006284                     __ptext40:
 14304                           	opt stack 0
 14305  006284                     _I2C_Master_Stop:
 14306                           	opt stack 23
 14307                           
 14308                           ;I2C.c: 104: I2C_Master_Wait();
 14309                           
 14310                           ;incstack = 0
 14311  006284  EC01  F031         	call	_I2C_Master_Wait	;wreg free
 14312                           
 14313                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 14314  006288  84C5               	bsf	4037,2,c	;volatile
 14315  00628A  0012               	return		;funcret
 14316  00628C                     __end_of_I2C_Master_Stop:
 14317                           	opt stack 0
 14318                           tblptru	equ	0xFF8
 14319                           tblptrh	equ	0xFF7
 14320                           tblptrl	equ	0xFF6
 14321                           tablat	equ	0xFF5
 14322                           prodh	equ	0xFF4
 14323                           prodl	equ	0xFF3
 14324                           intcon	equ	0xFF2
 14325                           intcon3	equ	0xFF0
 14326                           indf0	equ	0xFEF
 14327                           postinc0	equ	0xFEE
 14328                           fsr0h	equ	0xFEA
 14329                           fsr0l	equ	0xFE9
 14330                           wreg	equ	0xFE8
 14331                           postdec1	equ	0xFE5
 14332                           fsr1l	equ	0xFE1
 14333                           indf2	equ	0xFDF
 14334                           postinc2	equ	0xFDE
 14335                           postdec2	equ	0xFDD
 14336                           fsr2h	equ	0xFDA
 14337                           fsr2l	equ	0xFD9
 14338                           status	equ	0xFD8
 14339                           
 14340 ;; *************** function _I2C_Master_Start *****************
 14341 ;; Defined at:
 14342 ;;		line 69 in file "I2C.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;		None
 14345 ;; Auto vars:     Size  Location     Type
 14346 ;;		None
 14347 ;; Return value:  Size  Location     Type
 14348 ;;                  1    wreg      void 
 14349 ;; Registers used:
 14350 ;;		wreg, status,2, status,0, cstack
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14360 ;;Total ram usage:        0 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:    5
 14363 ;; This function calls:
 14364 ;;		_I2C_Master_Wait
 14365 ;; This function is called by:
 14366 ;;		_main
 14367 ;;		_I2C_init
 14368 ;;		_I2C_sendData
 14369 ;;		_initRamp
 14370 ;;		_ramp_Rotate
 14371 ;;		_RTC_setTime
 14372 ;;		_get_RTC_initial
 14373 ;;		_get_RTC_final
 14374 ;; This function uses a non-reentrant model
 14375 ;;
 14376                           
 14377                           	psect	text41
 14378  00628C                     __ptext41:
 14379                           	opt stack 0
 14380  00628C                     _I2C_Master_Start:
 14381                           	opt stack 23
 14382                           
 14383                           ;I2C.c: 78: I2C_Master_Wait();
 14384                           
 14385                           ;incstack = 0
 14386  00628C  EC01  F031         	call	_I2C_Master_Wait	;wreg free
 14387                           
 14388                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 14389  006290  80C5               	bsf	4037,0,c	;volatile
 14390  006292  0012               	return		;funcret
 14391  006294                     __end_of_I2C_Master_Start:
 14392                           	opt stack 0
 14393                           tblptru	equ	0xFF8
 14394                           tblptrh	equ	0xFF7
 14395                           tblptrl	equ	0xFF6
 14396                           tablat	equ	0xFF5
 14397                           prodh	equ	0xFF4
 14398                           prodl	equ	0xFF3
 14399                           intcon	equ	0xFF2
 14400                           intcon3	equ	0xFF0
 14401                           indf0	equ	0xFEF
 14402                           postinc0	equ	0xFEE
 14403                           fsr0h	equ	0xFEA
 14404                           fsr0l	equ	0xFE9
 14405                           wreg	equ	0xFE8
 14406                           postdec1	equ	0xFE5
 14407                           fsr1l	equ	0xFE1
 14408                           indf2	equ	0xFDF
 14409                           postinc2	equ	0xFDE
 14410                           postdec2	equ	0xFDD
 14411                           fsr2h	equ	0xFDA
 14412                           fsr2l	equ	0xFD9
 14413                           status	equ	0xFD8
 14414                           
 14415 ;; *************** function _I2C_Master_Wait *****************
 14416 ;; Defined at:
 14417 ;;		line 51 in file "I2C.c"
 14418 ;; Parameters:    Size  Location     Type
 14419 ;;		None
 14420 ;; Auto vars:     Size  Location     Type
 14421 ;;		None
 14422 ;; Return value:  Size  Location     Type
 14423 ;;                  1    wreg      void 
 14424 ;; Registers used:
 14425 ;;		wreg, status,2, status,0
 14426 ;; Tracked objects:
 14427 ;;		On entry : 0/0
 14428 ;;		On exit  : 0/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14434 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14435 ;;Total ram usage:        1 bytes
 14436 ;; Hardware stack levels used:    1
 14437 ;; Hardware stack levels required when called:    4
 14438 ;; This function calls:
 14439 ;;		Nothing
 14440 ;; This function is called by:
 14441 ;;		_I2C_Master_Start
 14442 ;;		_I2C_Master_Stop
 14443 ;;		_I2C_Master_Write
 14444 ;;		_I2C_Master_Read
 14445 ;;		_I2C_Master_RepeatedStart
 14446 ;; This function uses a non-reentrant model
 14447 ;;
 14448                           
 14449                           	psect	text42
 14450  006202                     __ptext42:
 14451                           	opt stack 0
 14452  006202                     _I2C_Master_Wait:
 14453                           	opt stack 23
 14454                           
 14455                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 14456                           
 14457                           ;incstack = 0
 14458  006202  B4C7               	btfsc	4039,2,c	;volatile
 14459  006204  D7FE               	goto	_I2C_Master_Wait
 14460  006206  CFC5 F0C3          	movff	4037,??_I2C_Master_Wait	;volatile
 14461  00620A  0E1F               	movlw	31
 14462  00620C  0100               	movlb	0	; () banked
 14463  00620E  17C3               	andwf	??_I2C_Master_Wait& (0+255),f,b
 14464  006210  B4D8               	btfsc	status,2,c
 14465  006212  0012               	return	
 14466  006214  D7F6               	goto	_I2C_Master_Wait
 14467  006216                     __end_of_I2C_Master_Wait:
 14468                           	opt stack 0
 14469                           tblptru	equ	0xFF8
 14470                           tblptrh	equ	0xFF7
 14471                           tblptrl	equ	0xFF6
 14472                           tablat	equ	0xFF5
 14473                           prodh	equ	0xFF4
 14474                           prodl	equ	0xFF3
 14475                           intcon	equ	0xFF2
 14476                           intcon3	equ	0xFF0
 14477                           indf0	equ	0xFEF
 14478                           postinc0	equ	0xFEE
 14479                           fsr0h	equ	0xFEA
 14480                           fsr0l	equ	0xFE9
 14481                           wreg	equ	0xFE8
 14482                           postdec1	equ	0xFE5
 14483                           fsr1l	equ	0xFE1
 14484                           indf2	equ	0xFDF
 14485                           postinc2	equ	0xFDE
 14486                           postdec2	equ	0xFDD
 14487                           fsr2h	equ	0xFDA
 14488                           fsr2l	equ	0xFD9
 14489                           status	equ	0xFD8
 14490                           
 14491 ;; *************** function _interruptHandler *****************
 14492 ;; Defined at:
 14493 ;;		line 550 in file "main.c"
 14494 ;; Parameters:    Size  Location     Type
 14495 ;;		None
 14496 ;; Auto vars:     Size  Location     Type
 14497 ;;  i               2   61[COMRAM] int 
 14498 ;;  temp            1   64[COMRAM] unsigned char 
 14499 ;;  keypress        1   63[COMRAM] unsigned char 
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  1    wreg      void 
 14502 ;; Registers used:
 14503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14504 ;; Tracked objects:
 14505 ;;		On entry : 0/0
 14506 ;;		On exit  : 0/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14510 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14511 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14512 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14513 ;;Total ram usage:       27 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    3
 14516 ;; This function calls:
 14517 ;;		___awmod
 14518 ;;		_check
 14519 ;;		_is_valid
 14520 ;;		_strcat
 14521 ;;		_strcpy
 14522 ;;		_strncmp
 14523 ;;		i2_I2C_Master_Init
 14524 ;;		i2_I2C_Master_Read
 14525 ;;		i2_I2C_Master_Start
 14526 ;;		i2_I2C_Master_Stop
 14527 ;;		i2_I2C_Master_Write
 14528 ;;		i2___awdiv
 14529 ;;		i2___wmul
 14530 ;;		i2_generate_compartment_array
 14531 ;;		i2_initLCD
 14532 ;;		i2_lcdInst
 14533 ;;		i2_printf
 14534 ;;		i2_putch
 14535 ;; This function is called by:
 14536 ;;		Interrupt level 2
 14537 ;; This function uses a non-reentrant model
 14538 ;;
 14539                           
 14540                           	psect	intcode
 14541  000008                     __pintcode:
 14542                           	opt stack 0
 14543  000008                     _interruptHandler:
 14544                           	opt stack 21
 14545                           
 14546                           ; BSR set to: 0
 14547                           ;incstack = 0
 14548  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14549  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
 14550                           tblptru	equ	0xFF8
 14551                           tblptrh	equ	0xFF7
 14552                           tblptrl	equ	0xFF6
 14553                           tablat	equ	0xFF5
 14554                           prodh	equ	0xFF4
 14555                           prodl	equ	0xFF3
 14556                           intcon	equ	0xFF2
 14557                           intcon3	equ	0xFF0
 14558                           indf0	equ	0xFEF
 14559                           postinc0	equ	0xFEE
 14560                           fsr0h	equ	0xFEA
 14561                           fsr0l	equ	0xFE9
 14562                           wreg	equ	0xFE8
 14563                           postdec1	equ	0xFE5
 14564                           fsr1l	equ	0xFE1
 14565                           indf2	equ	0xFDF
 14566                           postinc2	equ	0xFDE
 14567                           postdec2	equ	0xFDD
 14568                           fsr2h	equ	0xFDA
 14569                           fsr2l	equ	0xFD9
 14570                           status	equ	0xFD8
 14571                           
 14572                           	psect	intcode_body
 14573  000012                     __pintcode_body:
 14574                           	opt stack 21
 14575  000012                     int_func:
 14576                           	opt stack 21
 14577  000012  0006               	pop		; remove dummy address from shadow register refresh
 14578  000014  CFFA F02C          	movff	pclath,??_interruptHandler+5
 14579  000018  CFFB F02D          	movff	pclatu,??_interruptHandler+6
 14580  00001C  CFE9 F02E          	movff	fsr0l,??_interruptHandler+7
 14581  000020  CFEA F02F          	movff	fsr0h,??_interruptHandler+8
 14582  000024  CFE1 F030          	movff	fsr1l,??_interruptHandler+9
 14583  000028  CFE2 F031          	movff	fsr1h,??_interruptHandler+10
 14584  00002C  CFD9 F032          	movff	fsr2l,??_interruptHandler+11
 14585  000030  CFDA F033          	movff	fsr2h,??_interruptHandler+12
 14586  000034  CFF3 F034          	movff	prodl,??_interruptHandler+13
 14587  000038  CFF4 F035          	movff	prodh,??_interruptHandler+14
 14588  00003C  CFF6 F036          	movff	tblptrl,??_interruptHandler+15
 14589  000040  CFF7 F037          	movff	tblptrh,??_interruptHandler+16
 14590  000044  CFF8 F038          	movff	tblptru,??_interruptHandler+17
 14591  000048  CFF5 F039          	movff	tablat,??_interruptHandler+18
 14592  00004C  C07F  F03A         	movff	btemp,??_interruptHandler+19
 14593  000050  C080  F03B         	movff	btemp+1,??_interruptHandler+20
 14594  000054  C081  F03C         	movff	btemp+2,??_interruptHandler+21
 14595  000058  C082  F03D         	movff	btemp+3,??_interruptHandler+22
 14596                           
 14597                           ;main.c: 561: if(INT1IF){
 14598  00005C  A0F0               	btfss	intcon3,0,c	;volatile
 14599  00005E  EF0A  F007         	goto	i2l559
 14600                           
 14601                           ;main.c: 567: unsigned char keypress = (PORTB & 0xF0) >> 4;
 14602  000062  3881               	swapf	3969,w,c	;volatile
 14603  000064  0B0F               	andlw	15
 14604  000066  0B0F               	andlw	15
 14605  000068  6E40               	movwf	interruptHandler@keypress,c
 14606                           
 14607                           ;main.c: 569: char temp = keys[keypress];
 14608  00006A  5040               	movf	interruptHandler@keypress,w,c
 14609  00006C  0D01               	mullw	1
 14610  00006E  0E53               	movlw	low _keys
 14611  000070  24F3               	addwf	prodl,w,c
 14612  000072  6EF6               	movwf	tblptrl,c
 14613  000074  0EFC               	movlw	high _keys
 14614  000076  20F4               	addwfc	prodh,w,c
 14615  000078  6EF7               	movwf	tblptrh,c
 14616  00007A                     	if	1	;There are 3 active tblptr bytes
 14617  00007A  6AF8               	clrf	tblptru,c
 14618  00007C  0E00               	movlw	low (__mediumconst shr (0+16))
 14619  00007E  22F8               	addwfc	tblptru,f,c
 14620  000080                     	endif
 14621  000080  0008               	tblrd		*
 14622  000082  CFF5 F041          	movff	tablat,interruptHandler@temp
 14623                           
 14624                           ;main.c: 579: if (change_mode == 0){
 14625  000086  0100               	movlb	0	; () banked
 14626  000088  51B3               	movf	_change_mode& (0+255),w,b
 14627  00008A  11B4               	iorwf	(_change_mode+1)& (0+255),w,b
 14628  00008C  A4D8               	btfss	status,2,c
 14629  00008E  D09D               	goto	i2l567
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;main.c: 583: if (temp == '1'){
 14633  000090  0E31               	movlw	49
 14634  000092  1841               	xorwf	interruptHandler@temp,w,c
 14635  000094  A4D8               	btfss	status,2,c
 14636  000096  D08B               	goto	i2l561
 14637                           
 14638                           ; BSR set to: 0
 14639                           ;main.c: 585: initLCD();
 14640  000098  EC2B  F02F         	call	i2_initLCD	;wreg free
 14641                           
 14642                           ;main.c: 586: for (i = 0; i <3; i++){
 14643  00009C  0E00               	movlw	0
 14644  00009E  0100               	movlb	0	; () banked
 14645  0000A0  6FB8               	movwf	(_i+1)& (0+255),b
 14646  0000A2  0E00               	movlw	0
 14647  0000A4  6FB7               	movwf	_i& (0+255),b
 14648                           
 14649                           ; BSR set to: 0
 14650  0000A6  51B8               	movf	(_i+1)& (0+255),w,b
 14651  0000A8  E101               	bnz	i2u567_40
 14652  0000AA  D07B               	goto	L8
 14653  0000AC                     i2u567_40:
 14654                           
 14655                           ; BSR set to: 0
 14656  0000AC  EF08  F007         	goto	i2l8201
 14657  0000B0                     
 14658                           ; BSR set to: 0
 14659                           ;main.c: 587: I2C_Master_Init(100000);
 14660                           
 14661                           ; BSR set to: 0
 14662  0000B0  0EA0               	movlw	160
 14663  0000B2  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
 14664  0000B4  0E86               	movlw	134
 14665  0000B6  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
 14666  0000B8  0E01               	movlw	1
 14667  0000BA  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
 14668  0000BC  0E00               	movlw	0
 14669  0000BE  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
 14670  0000C0  EC84  F02E         	call	i2_I2C_Master_Init	;wreg free
 14671                           
 14672                           ;main.c: 588: I2C_Master_Start();
 14673  0000C4  EC4E  F031         	call	i2_I2C_Master_Start	;wreg free
 14674                           
 14675                           ;main.c: 589: I2C_Master_Write(0b11010000);
 14676  0000C8  0E00               	movlw	0
 14677  0000CA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14678  0000CC  0ED0               	movlw	208
 14679  0000CE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14680  0000D0  EC39  F031         	call	i2_I2C_Master_Write	;wreg free
 14681                           
 14682                           ;main.c: 590: I2C_Master_Write(0x00);
 14683  0000D4  0E00               	movlw	0
 14684  0000D6  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14685  0000D8  0E00               	movlw	0
 14686  0000DA  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14687  0000DC  EC39  F031         	call	i2_I2C_Master_Write	;wreg free
 14688                           
 14689                           ;main.c: 591: I2C_Master_Stop();
 14690  0000E0  EC4A  F031         	call	i2_I2C_Master_Stop	;wreg free
 14691                           
 14692                           ;main.c: 594: I2C_Master_Start();
 14693  0000E4  EC4E  F031         	call	i2_I2C_Master_Start	;wreg free
 14694                           
 14695                           ;main.c: 595: I2C_Master_Write(0b11010001);
 14696  0000E8  0E00               	movlw	0
 14697  0000EA  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14698  0000EC  0ED1               	movlw	209
 14699  0000EE  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14700  0000F0  EC39  F031         	call	i2_I2C_Master_Write	;wreg free
 14701                           
 14702                           ;main.c: 596: for(j = 0; j < 6; j++){
 14703  0000F4  0E00               	movlw	0
 14704  0000F6  6E6B               	movwf	_j,c
 14705  0000F8                     i2l7773:
 14706  0000F8  0E05               	movlw	5
 14707  0000FA  646B               	cpfsgt	_j,c
 14708  0000FC  D001               	goto	i2l564
 14709  0000FE  D00E               	goto	i2u569_40
 14710  000100                     i2l564:
 14711                           
 14712                           ;main.c: 597: time[j] = I2C_Master_Read(0);
 14713  000100  506B               	movf	_j,w,c
 14714  000102  0D01               	mullw	1
 14715  000104  0E90               	movlw	low _time
 14716  000106  24F3               	addwf	prodl,w,c
 14717  000108  6ED9               	movwf	fsr2l,c
 14718  00010A  0E00               	movlw	high _time
 14719  00010C  20F4               	addwfc	prodh,w,c
 14720  00010E  6EDA               	movwf	fsr2h,c
 14721  000110  0E00               	movlw	0
 14722  000112  ECAD  F030         	call	i2_I2C_Master_Read
 14723  000116  6EDF               	movwf	indf2,c
 14724  000118  2A6B               	incf	_j,f,c
 14725  00011A  D7EE               	goto	i2l7773
 14726  00011C                     i2u569_40:
 14727                           
 14728                           ;main.c: 598: }
 14729                           ;main.c: 599: time[6] = I2C_Master_Read(1);
 14730  00011C  0E01               	movlw	1
 14731  00011E  ECAD  F030         	call	i2_I2C_Master_Read
 14732  000122  0100               	movlb	0	; () banked
 14733  000124  6F96               	movwf	(_time+6)& (0+255),b
 14734                           
 14735                           ;main.c: 600: I2C_Master_Stop();
 14736  000126  EC4A  F031         	call	i2_I2C_Master_Stop	;wreg free
 14737                           
 14738                           ;main.c: 602: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 14739  00012A  0E80               	movlw	128
 14740  00012C  EC15  F031         	call	i2_lcdInst
 14741  000130  0E34               	movlw	52
 14742  000132  6E27               	movwf	??_interruptHandler& (0+255),c
 14743  000134  0EF2               	movlw	242
 14744  000136                     i2u740_47:
 14745  000136  2EE8               	decfsz	wreg,f,c
 14746  000138  D7FE               	bra	i2u740_47
 14747  00013A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 14748  00013C  D7FC               	bra	i2u740_47
 14749                           
 14750                           ;main.c: 603: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
 14751  00013E  0EAC               	movlw	low STR_31
 14752  000140  6E0D               	movwf	i2printf@f,c
 14753  000142  0EFE               	movlw	high STR_31
 14754  000144  6E0E               	movwf	i2printf@f+1,c
 14755  000146  C096  F00F         	movff	_time+6,?i2_printf+2
 14756  00014A  6A10               	clrf	?i2_printf+3,c
 14757  00014C  C095  F011         	movff	_time+5,?i2_printf+4
 14758  000150  6A12               	clrf	?i2_printf+5,c
 14759  000152  C094  F013         	movff	_time+4,?i2_printf+6
 14760  000156  6A14               	clrf	?i2_printf+7,c
 14761  000158  EC4E  F01B         	call	i2_printf	;wreg free
 14762                           
 14763                           ;main.c: 604: lcdInst(0xC0);;
 14764  00015C  0EC0               	movlw	192
 14765  00015E  EC15  F031         	call	i2_lcdInst
 14766                           
 14767                           ;main.c: 605: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
 14768  000162  0EBB               	movlw	low STR_32
 14769  000164  6E0D               	movwf	i2printf@f,c
 14770  000166  0EFE               	movlw	high STR_32
 14771  000168  6E0E               	movwf	i2printf@f+1,c
 14772  00016A  C092  F00F         	movff	_time+2,?i2_printf+2
 14773  00016E  6A10               	clrf	?i2_printf+3,c
 14774  000170  C091  F011         	movff	_time+1,?i2_printf+4
 14775  000174  6A12               	clrf	?i2_printf+5,c
 14776  000176  C090  F013         	movff	_time,?i2_printf+6
 14777  00017A  6A14               	clrf	?i2_printf+7,c
 14778  00017C  EC4E  F01B         	call	i2_printf	;wreg free
 14779                           
 14780                           ;main.c: 606: _delay((unsigned long)((200)*(32000000/4000.0)));
 14781  000180  0E09               	movlw	9
 14782  000182  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 14783  000184  0E1E               	movlw	30
 14784  000186  6E27               	movwf	??_interruptHandler& (0+255),c
 14785  000188  0EE4               	movlw	228
 14786  00018A                     i2u741_47:
 14787  00018A  2EE8               	decfsz	wreg,f,c
 14788  00018C  D7FE               	bra	i2u741_47
 14789  00018E  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 14790  000190  D7FC               	bra	i2u741_47
 14791  000192  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 14792  000194  D7FA               	bra	i2u741_47
 14793  000196  D000               	nop2	
 14794  000198  0100               	movlb	0	; () banked
 14795  00019A  4BB7               	infsnz	_i& (0+255),f,b
 14796  00019C  2BB8               	incf	(_i+1)& (0+255),f,b
 14797  00019E  51B8               	movf	(_i+1)& (0+255),w,b
 14798  0001A0  E112               	bnz	i2l7799
 14799  0001A2                     L8:
 14800  0001A2  0E03               	movlw	3
 14801  0001A4  5DB7               	subwf	_i& (0+255),w,b
 14802  0001A6  A0D8               	btfss	status,0,c
 14803  0001A8  D783               	goto	i2l562
 14804  0001AA  EF08  F007         	goto	i2l8201
 14805  0001AE                     i2l561:
 14806                           
 14807                           ; BSR set to: 0
 14808                           ;main.c: 610: }
 14809                           ;main.c: 611: if (temp == '2'){
 14810                           
 14811                           ; BSR set to: 0
 14812  0001AE  0E32               	movlw	50
 14813  0001B0  1841               	xorwf	interruptHandler@temp,w,c
 14814  0001B2  A4D8               	btfss	status,2,c
 14815  0001B4  D00A               	goto	i2l567
 14816                           
 14817                           ; BSR set to: 0
 14818                           ;main.c: 612: change_mode = 1;
 14819  0001B6  0E00               	movlw	0
 14820  0001B8  6FB4               	movwf	(_change_mode+1)& (0+255),b
 14821  0001BA  0E01               	movlw	1
 14822  0001BC  6FB3               	movwf	_change_mode& (0+255),b
 14823                           
 14824                           ;main.c: 613: mode = 1;
 14825  0001BE  0E00               	movlw	0
 14826  0001C0  6FB6               	movwf	(_mode+1)& (0+255),b
 14827  0001C2  0E01               	movlw	1
 14828  0001C4  D264               	goto	L15
 14829  0001C6                     i2l7799:
 14830  0001C6  EF08  F007         	goto	i2l8201
 14831  0001CA                     i2l567:
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;main.c: 618: }
 14835                           ;main.c: 621: }
 14836                           ;main.c: 626: if(operation == 1){
 14837                           
 14838                           ; BSR set to: 0
 14839                           
 14840                           ; BSR set to: 0
 14841  0001CA  0466               	decf	_operation,w,c
 14842  0001CC  1067               	iorwf	_operation+1,w,c
 14843  0001CE  A4D8               	btfss	status,2,c
 14844  0001D0  D260               	goto	i2l578
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;main.c: 627: if (temp == '1'){
 14848  0001D2  0E31               	movlw	49
 14849  0001D4  1841               	xorwf	interruptHandler@temp,w,c
 14850  0001D6  A4D8               	btfss	status,2,c
 14851  0001D8  D08A               	goto	i2l569
 14852                           
 14853                           ; BSR set to: 0
 14854                           ;main.c: 628: initLCD();
 14855  0001DA  EC2B  F02F         	call	i2_initLCD	;wreg free
 14856                           
 14857                           ;main.c: 629: for (i = 0; i <3; i++){
 14858  0001DE  0E00               	movlw	0
 14859  0001E0  0100               	movlb	0	; () banked
 14860  0001E2  6FB8               	movwf	(_i+1)& (0+255),b
 14861  0001E4  0E00               	movlw	0
 14862  0001E6  6FB7               	movwf	_i& (0+255),b
 14863                           
 14864                           ; BSR set to: 0
 14865  0001E8  51B8               	movf	(_i+1)& (0+255),w,b
 14866  0001EA  E101               	bnz	i2u574_40
 14867  0001EC  D07A               	goto	L9
 14868  0001EE                     i2u574_40:
 14869                           
 14870                           ; BSR set to: 0
 14871  0001EE  EF08  F007         	goto	i2l8201
 14872  0001F2                     
 14873                           ; BSR set to: 0
 14874                           ;main.c: 630: I2C_Master_Init(100000);
 14875                           
 14876                           ; BSR set to: 0
 14877  0001F2  0EA0               	movlw	160
 14878  0001F4  6E0E               	movwf	i2I2C_Master_Init@clockFreq,c
 14879  0001F6  0E86               	movlw	134
 14880  0001F8  6E0F               	movwf	i2I2C_Master_Init@clockFreq+1,c
 14881  0001FA  0E01               	movlw	1
 14882  0001FC  6E10               	movwf	i2I2C_Master_Init@clockFreq+2,c
 14883  0001FE  0E00               	movlw	0
 14884  000200  6E11               	movwf	i2I2C_Master_Init@clockFreq+3,c
 14885  000202  EC84  F02E         	call	i2_I2C_Master_Init	;wreg free
 14886                           
 14887                           ;main.c: 631: I2C_Master_Start();
 14888  000206  EC4E  F031         	call	i2_I2C_Master_Start	;wreg free
 14889                           
 14890                           ;main.c: 632: I2C_Master_Write(0b11010000);
 14891  00020A  0E00               	movlw	0
 14892  00020C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14893  00020E  0ED0               	movlw	208
 14894  000210  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14895  000212  EC39  F031         	call	i2_I2C_Master_Write	;wreg free
 14896                           
 14897                           ;main.c: 633: I2C_Master_Write(0x00);
 14898  000216  0E00               	movlw	0
 14899  000218  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14900  00021A  0E00               	movlw	0
 14901  00021C  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14902  00021E  EC39  F031         	call	i2_I2C_Master_Write	;wreg free
 14903                           
 14904                           ;main.c: 634: I2C_Master_Stop();
 14905  000222  EC4A  F031         	call	i2_I2C_Master_Stop	;wreg free
 14906                           
 14907                           ;main.c: 637: I2C_Master_Start();
 14908  000226  EC4E  F031         	call	i2_I2C_Master_Start	;wreg free
 14909                           
 14910                           ;main.c: 638: I2C_Master_Write(0b11010001);
 14911  00022A  0E00               	movlw	0
 14912  00022C  6E03               	movwf	i2I2C_Master_Write@byteToWrite+1,c
 14913  00022E  0ED1               	movlw	209
 14914  000230  6E02               	movwf	i2I2C_Master_Write@byteToWrite,c
 14915  000232  EC39  F031         	call	i2_I2C_Master_Write	;wreg free
 14916                           
 14917                           ;main.c: 639: for(j = 0; j < 6; j++){
 14918  000236  0E00               	movlw	0
 14919  000238  6E6B               	movwf	_j,c
 14920  00023A                     i2l7819:
 14921  00023A  0E05               	movlw	5
 14922  00023C  646B               	cpfsgt	_j,c
 14923  00023E  D001               	goto	i2l572
 14924  000240  D00E               	goto	i2u576_40
 14925  000242                     i2l572:
 14926                           
 14927                           ;main.c: 640: time[j] = I2C_Master_Read(0);
 14928  000242  506B               	movf	_j,w,c
 14929  000244  0D01               	mullw	1
 14930  000246  0E90               	movlw	low _time
 14931  000248  24F3               	addwf	prodl,w,c
 14932  00024A  6ED9               	movwf	fsr2l,c
 14933  00024C  0E00               	movlw	high _time
 14934  00024E  20F4               	addwfc	prodh,w,c
 14935  000250  6EDA               	movwf	fsr2h,c
 14936  000252  0E00               	movlw	0
 14937  000254  ECAD  F030         	call	i2_I2C_Master_Read
 14938  000258  6EDF               	movwf	indf2,c
 14939  00025A  2A6B               	incf	_j,f,c
 14940  00025C  D7EE               	goto	i2l7819
 14941  00025E                     i2u576_40:
 14942                           
 14943                           ;main.c: 641: }
 14944                           ;main.c: 642: time[6] = I2C_Master_Read(1);
 14945  00025E  0E01               	movlw	1
 14946  000260  ECAD  F030         	call	i2_I2C_Master_Read
 14947  000264  0100               	movlb	0	; () banked
 14948  000266  6F96               	movwf	(_time+6)& (0+255),b
 14949                           
 14950                           ;main.c: 643: I2C_Master_Stop();
 14951  000268  EC4A  F031         	call	i2_I2C_Master_Stop	;wreg free
 14952                           
 14953                           ;main.c: 645: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 14954  00026C  0E80               	movlw	128
 14955  00026E  EC15  F031         	call	i2_lcdInst
 14956  000272  0E34               	movlw	52
 14957  000274  6E27               	movwf	??_interruptHandler& (0+255),c
 14958  000276  0EF2               	movlw	242
 14959  000278                     i2u742_47:
 14960  000278  2EE8               	decfsz	wreg,f,c
 14961  00027A  D7FE               	bra	i2u742_47
 14962  00027C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 14963  00027E  D7FC               	bra	i2u742_47
 14964                           
 14965                           ;main.c: 646: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
 14966  000280  0EAC               	movlw	low STR_31
 14967  000282  6E0D               	movwf	i2printf@f,c
 14968  000284  0EFE               	movlw	high STR_31
 14969  000286  6E0E               	movwf	i2printf@f+1,c
 14970  000288  C096  F00F         	movff	_time+6,?i2_printf+2
 14971  00028C  6A10               	clrf	?i2_printf+3,c
 14972  00028E  C095  F011         	movff	_time+5,?i2_printf+4
 14973  000292  6A12               	clrf	?i2_printf+5,c
 14974  000294  C094  F013         	movff	_time+4,?i2_printf+6
 14975  000298  6A14               	clrf	?i2_printf+7,c
 14976  00029A  EC4E  F01B         	call	i2_printf	;wreg free
 14977                           
 14978                           ;main.c: 647: lcdInst(0xC0);;
 14979  00029E  0EC0               	movlw	192
 14980  0002A0  EC15  F031         	call	i2_lcdInst
 14981                           
 14982                           ;main.c: 648: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
 14983  0002A4  0EBB               	movlw	low STR_32
 14984  0002A6  6E0D               	movwf	i2printf@f,c
 14985  0002A8  0EFE               	movlw	high STR_32
 14986  0002AA  6E0E               	movwf	i2printf@f+1,c
 14987  0002AC  C092  F00F         	movff	_time+2,?i2_printf+2
 14988  0002B0  6A10               	clrf	?i2_printf+3,c
 14989  0002B2  C091  F011         	movff	_time+1,?i2_printf+4
 14990  0002B6  6A12               	clrf	?i2_printf+5,c
 14991  0002B8  C090  F013         	movff	_time,?i2_printf+6
 14992  0002BC  6A14               	clrf	?i2_printf+7,c
 14993  0002BE  EC4E  F01B         	call	i2_printf	;wreg free
 14994                           
 14995                           ;main.c: 649: _delay((unsigned long)((600)*(32000000/4000.0)));
 14996  0002C2  0E19               	movlw	25
 14997  0002C4  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 14998  0002C6  0E5A               	movlw	90
 14999  0002C8  6E27               	movwf	??_interruptHandler& (0+255),c
 15000  0002CA  0EB2               	movlw	178
 15001  0002CC                     i2u743_47:
 15002  0002CC  2EE8               	decfsz	wreg,f,c
 15003  0002CE  D7FE               	bra	i2u743_47
 15004  0002D0  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15005  0002D2  D7FC               	bra	i2u743_47
 15006  0002D4  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15007  0002D6  D7FA               	bra	i2u743_47
 15008  0002D8  0100               	movlb	0	; () banked
 15009  0002DA  4BB7               	infsnz	_i& (0+255),f,b
 15010  0002DC  2BB8               	incf	(_i+1)& (0+255),f,b
 15011  0002DE  51B8               	movf	(_i+1)& (0+255),w,b
 15012  0002E0  E104               	bnz	i2u577_40
 15013  0002E2                     L9:
 15014  0002E2  0E03               	movlw	3
 15015  0002E4  5DB7               	subwf	_i& (0+255),w,b
 15016  0002E6  A0D8               	btfss	status,0,c
 15017  0002E8  D784               	goto	i2l570
 15018  0002EA                     i2u577_40:
 15019  0002EA  EF08  F007         	goto	i2l8201
 15020  0002EE                     i2l569:
 15021                           
 15022                           ; BSR set to: 0
 15023                           ;main.c: 655: }
 15024                           ;main.c: 656: if (temp == '2'){
 15025                           
 15026                           ; BSR set to: 0
 15027  0002EE  0E32               	movlw	50
 15028  0002F0  1841               	xorwf	interruptHandler@temp,w,c
 15029  0002F2  A4D8               	btfss	status,2,c
 15030  0002F4  D099               	goto	i2l574
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;main.c: 665: initial_time = hr_initial*3600 + min_initial*60 + sec_initial;
 15034  0002F6  C16E  F001         	movff	_hr_initial,i2___wmul@multiplier
 15035  0002FA  C16F  F002         	movff	_hr_initial+1,i2___wmul@multiplier+1
 15036  0002FE  0E0E               	movlw	14
 15037  000300  6E04               	movwf	i2___wmul@multiplicand+1,c
 15038  000302  0E10               	movlw	16
 15039  000304  6E03               	movwf	i2___wmul@multiplicand,c
 15040  000306  EC9A  F030         	call	i2___wmul	;wreg free
 15041  00030A  C001  F027         	movff	?i2___wmul,??_interruptHandler
 15042  00030E  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
 15043  000312  C16C  F001         	movff	_min_initial,i2___wmul@multiplier
 15044  000316  C16D  F002         	movff	_min_initial+1,i2___wmul@multiplier+1
 15045  00031A  0E00               	movlw	0
 15046  00031C  6E04               	movwf	i2___wmul@multiplicand+1,c
 15047  00031E  0E3C               	movlw	60
 15048  000320  6E03               	movwf	i2___wmul@multiplicand,c
 15049  000322  EC9A  F030         	call	i2___wmul	;wreg free
 15050  000326  5001               	movf	?i2___wmul,w,c
 15051  000328  2627               	addwf	??_interruptHandler,f,c
 15052  00032A  5002               	movf	?i2___wmul+1,w,c
 15053  00032C  2228               	addwfc	??_interruptHandler+1,f,c
 15054  00032E  0101               	movlb	1	; () banked
 15055  000330  516A               	movf	_sec_initial& (0+255),w,b
 15056  000332  2427               	addwf	??_interruptHandler,w,c
 15057  000334  6F68               	movwf	_initial_time& (0+255),b
 15058  000336  516B               	movf	(_sec_initial+1)& (0+255),w,b
 15059  000338  2028               	addwfc	??_interruptHandler+1,w,c
 15060  00033A  6F69               	movwf	(_initial_time+1)& (0+255),b
 15061                           
 15062                           ;main.c: 666: final_time = hr_final*3600 + min_final*60 + sec_final;
 15063  00033C  C166  F001         	movff	_hr_final,i2___wmul@multiplier
 15064  000340  C167  F002         	movff	_hr_final+1,i2___wmul@multiplier+1
 15065  000344  0E0E               	movlw	14
 15066  000346  6E04               	movwf	i2___wmul@multiplicand+1,c
 15067  000348  0E10               	movlw	16
 15068  00034A  6E03               	movwf	i2___wmul@multiplicand,c
 15069  00034C  EC9A  F030         	call	i2___wmul	;wreg free
 15070  000350  C001  F027         	movff	?i2___wmul,??_interruptHandler
 15071  000354  C002  F028         	movff	?i2___wmul+1,??_interruptHandler+1
 15072  000358  C164  F001         	movff	_min_final,i2___wmul@multiplier
 15073  00035C  C165  F002         	movff	_min_final+1,i2___wmul@multiplier+1
 15074  000360  0E00               	movlw	0
 15075  000362  6E04               	movwf	i2___wmul@multiplicand+1,c
 15076  000364  0E3C               	movlw	60
 15077  000366  6E03               	movwf	i2___wmul@multiplicand,c
 15078  000368  EC9A  F030         	call	i2___wmul	;wreg free
 15079  00036C  5001               	movf	?i2___wmul,w,c
 15080  00036E  2627               	addwf	??_interruptHandler,f,c
 15081  000370  5002               	movf	?i2___wmul+1,w,c
 15082  000372  2228               	addwfc	??_interruptHandler+1,f,c
 15083  000374  0101               	movlb	1	; () banked
 15084  000376  5162               	movf	_sec_final& (0+255),w,b
 15085  000378  2427               	addwf	??_interruptHandler,w,c
 15086  00037A  6F60               	movwf	_final_time& (0+255),b
 15087  00037C  5163               	movf	(_sec_final+1)& (0+255),w,b
 15088  00037E  2028               	addwfc	??_interruptHandler+1,w,c
 15089  000380  6F61               	movwf	(_final_time+1)& (0+255),b
 15090                           
 15091                           ; BSR set to: 1
 15092                           ;main.c: 667: operationTime = final_time - initial_time;
 15093  000382  C168  F027         	movff	_initial_time,??_interruptHandler
 15094  000386  C169  F028         	movff	_initial_time+1,??_interruptHandler+1
 15095  00038A  1E27               	comf	??_interruptHandler,f,c
 15096  00038C  1E28               	comf	??_interruptHandler+1,f,c
 15097  00038E  4A27               	infsnz	??_interruptHandler,f,c
 15098  000390  2A28               	incf	??_interruptHandler+1,f,c
 15099  000392  5160               	movf	_final_time& (0+255),w,b
 15100  000394  2427               	addwf	??_interruptHandler,w,c
 15101  000396  6E5E               	movwf	_operationTime,c
 15102  000398  5161               	movf	(_final_time+1)& (0+255),w,b
 15103  00039A  2028               	addwfc	??_interruptHandler+1,w,c
 15104  00039C  6E5F               	movwf	_operationTime+1,c
 15105                           
 15106                           ; BSR set to: 1
 15107                           ;main.c: 668: initLCD();
 15108  00039E  EC2B  F02F         	call	i2_initLCD	;wreg free
 15109                           
 15110                           ;main.c: 671: printf("operation time:");
 15111  0003A2  0E31               	movlw	low STR_35
 15112  0003A4  6E0D               	movwf	i2printf@f,c
 15113  0003A6  0EFE               	movlw	high STR_35
 15114  0003A8  6E0E               	movwf	i2printf@f+1,c
 15115  0003AA  EC4E  F01B         	call	i2_printf	;wreg free
 15116                           
 15117                           ;main.c: 672: lcdInst(0xC0);;
 15118  0003AE  0EC0               	movlw	192
 15119  0003B0  EC15  F031         	call	i2_lcdInst
 15120                           
 15121                           ;main.c: 673: printf("%dmin %dsecs",operationTime/60,operationTime%60);
 15122  0003B4  0E02               	movlw	low STR_36
 15123  0003B6  6E0D               	movwf	i2printf@f,c
 15124  0003B8  0EFF               	movlw	high STR_36
 15125  0003BA  6E0E               	movwf	i2printf@f+1,c
 15126  0003BC  C05E  F001         	movff	_operationTime,i2___awdiv@dividend
 15127  0003C0  C05F  F002         	movff	_operationTime+1,i2___awdiv@dividend+1
 15128  0003C4  0E00               	movlw	0
 15129  0003C6  6E04               	movwf	i2___awdiv@divisor+1,c
 15130  0003C8  0E3C               	movlw	60
 15131  0003CA  6E03               	movwf	i2___awdiv@divisor,c
 15132  0003CC  EC38  F02D         	call	i2___awdiv	;wreg free
 15133  0003D0  C001  F00F         	movff	?i2___awdiv,?i2_printf+2
 15134  0003D4  C002  F010         	movff	?i2___awdiv+1,?i2_printf+3
 15135  0003D8  C05E  F001         	movff	_operationTime,___awmod@dividend
 15136  0003DC  C05F  F002         	movff	_operationTime+1,___awmod@dividend+1
 15137  0003E0  0E00               	movlw	0
 15138  0003E2  6E04               	movwf	___awmod@divisor+1,c
 15139  0003E4  0E3C               	movlw	60
 15140  0003E6  6E03               	movwf	___awmod@divisor,c
 15141  0003E8  ECBB  F02D         	call	___awmod	;wreg free
 15142  0003EC  C001  F011         	movff	?___awmod,?i2_printf+4
 15143  0003F0  C002  F012         	movff	?___awmod+1,?i2_printf+5
 15144  0003F4  EC4E  F01B         	call	i2_printf	;wreg free
 15145                           
 15146                           ;main.c: 674: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 15147  0003F8  0E80               	movlw	128
 15148  0003FA  EC15  F031         	call	i2_lcdInst
 15149  0003FE  0E34               	movlw	52
 15150  000400  6E27               	movwf	??_interruptHandler& (0+255),c
 15151  000402  0EF2               	movlw	242
 15152  000404                     i2u744_47:
 15153  000404  2EE8               	decfsz	wreg,f,c
 15154  000406  D7FE               	bra	i2u744_47
 15155  000408  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15156  00040A  D7FC               	bra	i2u744_47
 15157                           
 15158                           ;main.c: 675: _delay((unsigned long)((200)*(32000000/4000.0)));
 15159  00040C  0E09               	movlw	9
 15160  00040E  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15161  000410  0E1E               	movlw	30
 15162  000412  6E27               	movwf	??_interruptHandler& (0+255),c
 15163  000414  0EE4               	movlw	228
 15164  000416                     i2u745_47:
 15165  000416  2EE8               	decfsz	wreg,f,c
 15166  000418  D7FE               	bra	i2u745_47
 15167  00041A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15168  00041C  D7FC               	bra	i2u745_47
 15169  00041E  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15170  000420  D7FA               	bra	i2u745_47
 15171  000422  D000               	nop2	
 15172  000424  EF08  F007         	goto	i2l8201
 15173  000428                     i2l574:
 15174                           
 15175                           ;main.c: 681: }
 15176                           ;main.c: 683: if (temp == '3'){
 15177  000428  0E33               	movlw	51
 15178  00042A  1841               	xorwf	interruptHandler@temp,w,c
 15179  00042C  A4D8               	btfss	status,2,c
 15180  00042E  D123               	goto	i2l575
 15181                           
 15182                           ;main.c: 688: initLCD();
 15183  000430  EC2B  F02F         	call	i2_initLCD	;wreg free
 15184                           
 15185                           ;main.c: 689: printf("assembly step:%d",assembly_step);
 15186  000434  0E0F               	movlw	low STR_7
 15187  000436  6E0D               	movwf	i2printf@f,c
 15188  000438  0EFE               	movlw	high STR_7
 15189  00043A  6E0E               	movwf	i2printf@f+1,c
 15190  00043C  C0AF  F00F         	movff	_assembly_step,?i2_printf+2
 15191  000440  C0B0  F010         	movff	_assembly_step+1,?i2_printf+3
 15192  000444  EC4E  F01B         	call	i2_printf	;wreg free
 15193                           
 15194                           ;main.c: 690: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 15195  000448  0E80               	movlw	128
 15196  00044A  EC15  F031         	call	i2_lcdInst
 15197  00044E  0E34               	movlw	52
 15198  000450  6E27               	movwf	??_interruptHandler& (0+255),c
 15199  000452  0EF2               	movlw	242
 15200  000454                     i2u746_47:
 15201  000454  2EE8               	decfsz	wreg,f,c
 15202  000456  D7FE               	bra	i2u746_47
 15203  000458  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15204  00045A  D7FC               	bra	i2u746_47
 15205                           
 15206                           ;main.c: 691: initLCD();
 15207  00045C  EC2B  F02F         	call	i2_initLCD	;wreg free
 15208                           
 15209                           ;main.c: 692: for (i = 0; i<8; i++){
 15210  000460  0E00               	movlw	0
 15211  000462  0100               	movlb	0	; () banked
 15212  000464  6FB8               	movwf	(_i+1)& (0+255),b
 15213  000466  0E00               	movlw	0
 15214  000468  6FB7               	movwf	_i& (0+255),b
 15215  00046A                     i2l7879:
 15216                           
 15217                           ; BSR set to: 0
 15218  00046A  51B8               	movf	(_i+1)& (0+255),w,b
 15219  00046C  E16E               	bnz	i2l7901
 15220  00046E  0E08               	movlw	8
 15221  000470  5DB7               	subwf	_i& (0+255),w,b
 15222  000472  B0D8               	btfsc	status,0,c
 15223  000474  D06A               	goto	i2u581_40
 15224                           
 15225                           ; BSR set to: 0
 15226                           ;main.c: 693: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 15227                           
 15228                           ; BSR set to: 0
 15229                           
 15230                           ; BSR set to: 0
 15231  000476  0E01               	movlw	1
 15232  000478  EC15  F031         	call	i2_lcdInst
 15233  00047C  0E9C               	movlw	156
 15234  00047E  6E27               	movwf	??_interruptHandler& (0+255),c
 15235  000480  0ED7               	movlw	215
 15236  000482                     i2u747_47:
 15237  000482  2EE8               	decfsz	wreg,f,c
 15238  000484  D7FE               	bra	i2u747_47
 15239  000486  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15240  000488  D7FC               	bra	i2u747_47
 15241  00048A  F000               	nop	
 15242                           
 15243                           ;main.c: 694: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 15244  00048C  0E80               	movlw	128
 15245  00048E  EC15  F031         	call	i2_lcdInst
 15246  000492  0E34               	movlw	52
 15247  000494  6E27               	movwf	??_interruptHandler& (0+255),c
 15248  000496  0EF2               	movlw	242
 15249  000498                     i2u748_47:
 15250  000498  2EE8               	decfsz	wreg,f,c
 15251  00049A  D7FE               	bra	i2u748_47
 15252  00049C  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15253  00049E  D7FC               	bra	i2u748_47
 15254                           
 15255                           ;main.c: 695: printf("C%d:B%d,N%d", B_array[i],N_array[i]);
 15256  0004A0  0E1B               	movlw	low STR_38
 15257  0004A2  6E0D               	movwf	i2printf@f,c
 15258  0004A4  0EFF               	movlw	high STR_38
 15259  0004A6  6E0E               	movwf	i2printf@f+1,c
 15260  0004A8  90D8               	bcf	status,0,c
 15261  0004AA  0100               	movlb	0	; () banked
 15262  0004AC  35B7               	rlcf	_i& (0+255),w,b
 15263  0004AE  6ED9               	movwf	fsr2l,c
 15264  0004B0  35B8               	rlcf	(_i+1)& (0+255),w,b
 15265  0004B2  6EDA               	movwf	fsr2h,c
 15266  0004B4  0E30               	movlw	low _B_array
 15267  0004B6  26D9               	addwf	fsr2l,f,c
 15268  0004B8  0E01               	movlw	high _B_array
 15269  0004BA  22DA               	addwfc	fsr2h,f,c
 15270  0004BC  CFDE F00F          	movff	postinc2,?i2_printf+2
 15271  0004C0  CFDD F010          	movff	postdec2,?i2_printf+3
 15272  0004C4  90D8               	bcf	status,0,c
 15273  0004C6  35B7               	rlcf	_i& (0+255),w,b
 15274  0004C8  6ED9               	movwf	fsr2l,c
 15275  0004CA  35B8               	rlcf	(_i+1)& (0+255),w,b
 15276  0004CC  6EDA               	movwf	fsr2h,c
 15277  0004CE  0E10               	movlw	low _N_array
 15278  0004D0  26D9               	addwf	fsr2l,f,c
 15279  0004D2  0E01               	movlw	high _N_array
 15280  0004D4  22DA               	addwfc	fsr2h,f,c
 15281  0004D6  CFDE F011          	movff	postinc2,?i2_printf+4
 15282  0004DA  CFDD F012          	movff	postdec2,?i2_printf+5
 15283  0004DE  EC4E  F01B         	call	i2_printf	;wreg free
 15284                           
 15285                           ;main.c: 696: lcdInst(0xC0);;
 15286  0004E2  0EC0               	movlw	192
 15287  0004E4  EC15  F031         	call	i2_lcdInst
 15288                           
 15289                           ;main.c: 697: printf("    S%d,W%d", S_array[i], W_array[i]);
 15290  0004E8  0E27               	movlw	low STR_39
 15291  0004EA  6E0D               	movwf	i2printf@f,c
 15292  0004EC  0EFF               	movlw	high STR_39
 15293  0004EE  6E0E               	movwf	i2printf@f+1,c
 15294  0004F0  90D8               	bcf	status,0,c
 15295  0004F2  0100               	movlb	0	; () banked
 15296  0004F4  35B7               	rlcf	_i& (0+255),w,b
 15297  0004F6  6ED9               	movwf	fsr2l,c
 15298  0004F8  35B8               	rlcf	(_i+1)& (0+255),w,b
 15299  0004FA  6EDA               	movwf	fsr2h,c
 15300  0004FC  0E20               	movlw	low _S_array
 15301  0004FE  26D9               	addwf	fsr2l,f,c
 15302  000500  0E01               	movlw	high _S_array
 15303  000502  22DA               	addwfc	fsr2h,f,c
 15304  000504  CFDE F00F          	movff	postinc2,?i2_printf+2
 15305  000508  CFDD F010          	movff	postdec2,?i2_printf+3
 15306  00050C  90D8               	bcf	status,0,c
 15307  00050E  35B7               	rlcf	_i& (0+255),w,b
 15308  000510  6ED9               	movwf	fsr2l,c
 15309  000512  35B8               	rlcf	(_i+1)& (0+255),w,b
 15310  000514  6EDA               	movwf	fsr2h,c
 15311  000516  0E00               	movlw	low _W_array
 15312  000518  26D9               	addwf	fsr2l,f,c
 15313  00051A  0E01               	movlw	high _W_array
 15314  00051C  22DA               	addwfc	fsr2h,f,c
 15315  00051E  CFDE F011          	movff	postinc2,?i2_printf+4
 15316  000522  CFDD F012          	movff	postdec2,?i2_printf+5
 15317  000526  EC4E  F01B         	call	i2_printf	;wreg free
 15318                           
 15319                           ;main.c: 698: _delay((unsigned long)((500)*(32000000/4000.0)));
 15320  00052A  0E15               	movlw	21
 15321  00052C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15322  00052E  0E4B               	movlw	75
 15323  000530  6E27               	movwf	??_interruptHandler& (0+255),c
 15324  000532  0EBE               	movlw	190
 15325  000534                     i2u749_47:
 15326  000534  2EE8               	decfsz	wreg,f,c
 15327  000536  D7FE               	bra	i2u749_47
 15328  000538  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15329  00053A  D7FC               	bra	i2u749_47
 15330  00053C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15331  00053E  D7FA               	bra	i2u749_47
 15332  000540  D000               	nop2	
 15333  000542  0100               	movlb	0	; () banked
 15334  000544  4BB7               	infsnz	_i& (0+255),f,b
 15335  000546  2BB8               	incf	(_i+1)& (0+255),f,b
 15336  000548  D790               	goto	i2l7879
 15337  00054A                     i2u581_40:
 15338  00054A                     i2l7901:
 15339                           
 15340                           ; BSR set to: 0
 15341                           ;main.c: 704: }
 15342                           ;main.c: 707: _delay((unsigned long)((400)*(32000000/4000.0)));
 15343  00054A  0E11               	movlw	17
 15344  00054C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15345  00054E  0E3C               	movlw	60
 15346  000550  6E27               	movwf	??_interruptHandler& (0+255),c
 15347  000552  0ECB               	movlw	203
 15348  000554                     i2u750_47:
 15349  000554  2EE8               	decfsz	wreg,f,c
 15350  000556  D7FE               	bra	i2u750_47
 15351  000558  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15352  00055A  D7FC               	bra	i2u750_47
 15353  00055C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15354  00055E  D7FA               	bra	i2u750_47
 15355  000560  F000               	nop	
 15356                           
 15357                           ;main.c: 708: initLCD();
 15358  000562  EC2B  F02F         	call	i2_initLCD	;wreg free
 15359                           
 15360                           ;main.c: 710: printf("Bolt_remain:%d",B_remain);
 15361  000566  0E7F               	movlw	low STR_23
 15362  000568  6E0D               	movwf	i2printf@f,c
 15363  00056A  0EFE               	movlw	high STR_23
 15364  00056C  6E0E               	movwf	i2printf@f+1,c
 15365  00056E  C0A5  F00F         	movff	_B_remain,?i2_printf+2
 15366  000572  C0A6  F010         	movff	_B_remain+1,?i2_printf+3
 15367  000576  EC4E  F01B         	call	i2_printf	;wreg free
 15368                           
 15369                           ;main.c: 711: _delay((unsigned long)((500)*(32000000/4000.0)));
 15370  00057A  0E15               	movlw	21
 15371  00057C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15372  00057E  0E4B               	movlw	75
 15373  000580  6E27               	movwf	??_interruptHandler& (0+255),c
 15374  000582  0EBE               	movlw	190
 15375  000584                     i2u751_47:
 15376  000584  2EE8               	decfsz	wreg,f,c
 15377  000586  D7FE               	bra	i2u751_47
 15378  000588  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15379  00058A  D7FC               	bra	i2u751_47
 15380  00058C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15381  00058E  D7FA               	bra	i2u751_47
 15382  000590  D000               	nop2	
 15383                           
 15384                           ;main.c: 712: initLCD();
 15385  000592  EC2B  F02F         	call	i2_initLCD	;wreg free
 15386                           
 15387                           ;main.c: 714: printf("Nut_remain:%d",N_remain);
 15388  000596  0EE6               	movlw	low STR_24
 15389  000598  6E0D               	movwf	i2printf@f,c
 15390  00059A  0EFE               	movlw	high STR_24
 15391  00059C  6E0E               	movwf	i2printf@f+1,c
 15392  00059E  C0A3  F00F         	movff	_N_remain,?i2_printf+2
 15393  0005A2  C0A4  F010         	movff	_N_remain+1,?i2_printf+3
 15394  0005A6  EC4E  F01B         	call	i2_printf	;wreg free
 15395                           
 15396                           ;main.c: 715: _delay((unsigned long)((500)*(32000000/4000.0)));
 15397  0005AA  0E15               	movlw	21
 15398  0005AC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15399  0005AE  0E4B               	movlw	75
 15400  0005B0  6E27               	movwf	??_interruptHandler& (0+255),c
 15401  0005B2  0EBE               	movlw	190
 15402  0005B4                     i2u752_47:
 15403  0005B4  2EE8               	decfsz	wreg,f,c
 15404  0005B6  D7FE               	bra	i2u752_47
 15405  0005B8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15406  0005BA  D7FC               	bra	i2u752_47
 15407  0005BC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15408  0005BE  D7FA               	bra	i2u752_47
 15409  0005C0  D000               	nop2	
 15410                           
 15411                           ;main.c: 717: initLCD();
 15412  0005C2  EC2B  F02F         	call	i2_initLCD	;wreg free
 15413                           
 15414                           ;main.c: 718: printf("Spacer_remain:%d",S_remain);
 15415  0005C6  0EED               	movlw	low STR_25
 15416  0005C8  6E0D               	movwf	i2printf@f,c
 15417  0005CA  0EFD               	movlw	high STR_25
 15418  0005CC  6E0E               	movwf	i2printf@f+1,c
 15419  0005CE  C0A1  F00F         	movff	_S_remain,?i2_printf+2
 15420  0005D2  C0A2  F010         	movff	_S_remain+1,?i2_printf+3
 15421  0005D6  EC4E  F01B         	call	i2_printf	;wreg free
 15422                           
 15423                           ;main.c: 719: _delay((unsigned long)((500)*(32000000/4000.0)));
 15424  0005DA  0E15               	movlw	21
 15425  0005DC  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15426  0005DE  0E4B               	movlw	75
 15427  0005E0  6E27               	movwf	??_interruptHandler& (0+255),c
 15428  0005E2  0EBE               	movlw	190
 15429  0005E4                     i2u753_47:
 15430  0005E4  2EE8               	decfsz	wreg,f,c
 15431  0005E6  D7FE               	bra	i2u753_47
 15432  0005E8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15433  0005EA  D7FC               	bra	i2u753_47
 15434  0005EC  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15435  0005EE  D7FA               	bra	i2u753_47
 15436  0005F0  D000               	nop2	
 15437                           
 15438                           ;main.c: 721: initLCD();
 15439  0005F2  EC2B  F02F         	call	i2_initLCD	;wreg free
 15440                           
 15441                           ;main.c: 722: printf("Washer_remain:%d",W_remain);
 15442  0005F6  0EFE               	movlw	low STR_26
 15443  0005F8  6E0D               	movwf	i2printf@f,c
 15444  0005FA  0EFD               	movlw	high STR_26
 15445  0005FC  6E0E               	movwf	i2printf@f+1,c
 15446  0005FE  C09F  F00F         	movff	_W_remain,?i2_printf+2
 15447  000602  C0A0  F010         	movff	_W_remain+1,?i2_printf+3
 15448  000606  EC4E  F01B         	call	i2_printf	;wreg free
 15449                           
 15450                           ;main.c: 723: _delay((unsigned long)((500)*(32000000/4000.0)));
 15451  00060A  0E15               	movlw	21
 15452  00060C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15453  00060E  0E4B               	movlw	75
 15454  000610  6E27               	movwf	??_interruptHandler& (0+255),c
 15455  000612  0EBE               	movlw	190
 15456  000614                     i2u754_47:
 15457  000614  2EE8               	decfsz	wreg,f,c
 15458  000616  D7FE               	bra	i2u754_47
 15459  000618  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15460  00061A  D7FC               	bra	i2u754_47
 15461  00061C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15462  00061E  D7FA               	bra	i2u754_47
 15463  000620  D000               	nop2	
 15464                           
 15465                           ;main.c: 725: initLCD();
 15466  000622  EC2B  F02F         	call	i2_initLCD	;wreg free
 15467                           
 15468                           ;main.c: 727: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 15469  000626  0E01               	movlw	1
 15470  000628  EC15  F031         	call	i2_lcdInst
 15471  00062C  0E9C               	movlw	156
 15472  00062E  6E27               	movwf	??_interruptHandler& (0+255),c
 15473  000630  0ED7               	movlw	215
 15474  000632                     i2u755_47:
 15475  000632  2EE8               	decfsz	wreg,f,c
 15476  000634  D7FE               	bra	i2u755_47
 15477  000636  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15478  000638  D7FC               	bra	i2u755_47
 15479  00063A  F000               	nop	
 15480                           
 15481                           ;main.c: 728: printf("Done");
 15482  00063C  0EDE               	movlw	low STR_44
 15483  00063E  6E0D               	movwf	i2printf@f,c
 15484  000640  0EFF               	movlw	high STR_44
 15485  000642  6E0E               	movwf	i2printf@f+1,c
 15486  000644  EC4E  F01B         	call	i2_printf	;wreg free
 15487                           
 15488                           ;main.c: 729: _delay((unsigned long)((100)*(32000000/4000.0)));
 15489  000648  0E05               	movlw	5
 15490  00064A  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15491  00064C  0E0F               	movlw	15
 15492  00064E  6E27               	movwf	??_interruptHandler& (0+255),c
 15493  000650  0EF1               	movlw	241
 15494  000652                     i2u756_47:
 15495  000652  2EE8               	decfsz	wreg,f,c
 15496  000654  D7FE               	bra	i2u756_47
 15497  000656  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15498  000658  D7FC               	bra	i2u756_47
 15499  00065A  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15500  00065C  D7FA               	bra	i2u756_47
 15501  00065E  F000               	nop	
 15502                           
 15503                           ;main.c: 730: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 15504  000660  0E80               	movlw	128
 15505  000662  EC15  F031         	call	i2_lcdInst
 15506  000666  0E34               	movlw	52
 15507  000668  6E27               	movwf	??_interruptHandler& (0+255),c
 15508  00066A  0EF2               	movlw	242
 15509  00066C                     i2u757_47:
 15510  00066C  2EE8               	decfsz	wreg,f,c
 15511  00066E  D7FE               	bra	i2u757_47
 15512  000670  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15513  000672  D7FC               	bra	i2u757_47
 15514  000674  D3CD               	goto	i2l8201
 15515  000676                     i2l575:
 15516                           
 15517                           ;main.c: 735: }
 15518                           ;main.c: 737: if (temp == '4'){
 15519  000676  0E34               	movlw	52
 15520  000678  1841               	xorwf	interruptHandler@temp,w,c
 15521  00067A  A4D8               	btfss	status,2,c
 15522  00067C  D00A               	goto	i2l578
 15523                           
 15524                           ;main.c: 738: operation_done = 1;
 15525  00067E  0E00               	movlw	0
 15526  000680  6E65               	movwf	_operation_done+1,c
 15527  000682  0E01               	movlw	1
 15528  000684  6E64               	movwf	_operation_done,c
 15529                           
 15530                           ;main.c: 739: mode = 0;
 15531  000686  0E00               	movlw	0
 15532  000688  0100               	movlb	0	; () banked
 15533  00068A  6FB6               	movwf	(_mode+1)& (0+255),b
 15534  00068C  0E00               	movlw	0
 15535  00068E                     L15:
 15536  00068E  6FB5               	movwf	_mode& (0+255),b
 15537  000690  D3BF               	goto	i2l8201
 15538  000692                     i2l578:
 15539                           
 15540                           ;main.c: 742: }
 15541                           ;main.c: 744: }
 15542                           ;main.c: 769: if (state == 0){
 15543                           
 15544                           ; BSR set to: 0
 15545                           
 15546                           ; BSR set to: 0
 15547  000692  0100               	movlb	0	; () banked
 15548  000694  51B1               	movf	_state& (0+255),w,b
 15549  000696  11B2               	iorwf	(_state+1)& (0+255),w,b
 15550  000698  A4D8               	btfss	status,2,c
 15551  00069A  D0CE               	goto	i2l579
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;main.c: 771: if(temp == '4'){
 15555  00069C  0E34               	movlw	52
 15556  00069E  1841               	xorwf	interruptHandler@temp,w,c
 15557  0006A0  A4D8               	btfss	status,2,c
 15558  0006A2  D01F               	goto	i2l580
 15559                           
 15560                           ; BSR set to: 0
 15561                           ;main.c: 772: assembly_step = 4;
 15562  0006A4  0E00               	movlw	0
 15563  0006A6  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15564  0006A8  0E04               	movlw	4
 15565  0006AA  6FAF               	movwf	_assembly_step& (0+255),b
 15566                           
 15567                           ; BSR set to: 0
 15568                           ;main.c: 773: prev_state = state;
 15569  0006AC  C0B1  F188         	movff	_state,_prev_state
 15570  0006B0  C0B2  F189         	movff	_state+1,_prev_state+1
 15571                           
 15572                           ;main.c: 774: state = 1;
 15573  0006B4  0E00               	movlw	0
 15574  0006B6  6FB2               	movwf	(_state+1)& (0+255),b
 15575  0006B8  0E01               	movlw	1
 15576  0006BA  6FB1               	movwf	_state& (0+255),b
 15577                           
 15578                           ; BSR set to: 0
 15579                           ;main.c: 775: lcdInst(0xC0);;
 15580  0006BC  0EC0               	movlw	192
 15581  0006BE  EC15  F031         	call	i2_lcdInst
 15582                           
 15583                           ;main.c: 776: putch(keys[keypress]);
 15584  0006C2  5040               	movf	interruptHandler@keypress,w,c
 15585  0006C4  0D01               	mullw	1
 15586  0006C6  0E53               	movlw	low _keys
 15587  0006C8  24F3               	addwf	prodl,w,c
 15588  0006CA  6EF6               	movwf	tblptrl,c
 15589  0006CC  0EFC               	movlw	high _keys
 15590  0006CE  20F4               	addwfc	prodh,w,c
 15591  0006D0  6EF7               	movwf	tblptrh,c
 15592  0006D2                     	if	1	;There are 3 active tblptr bytes
 15593  0006D2  6AF8               	clrf	tblptru,c
 15594  0006D4  0E00               	movlw	low (__mediumconst shr (0+16))
 15595  0006D6  22F8               	addwfc	tblptru,f,c
 15596  0006D8                     	endif
 15597  0006D8  0008               	tblrd		*
 15598  0006DA  50F5               	movf	tablat,w,c
 15599  0006DC  EC0B  F031         	call	i2_putch
 15600                           
 15601                           ;main.c: 778: }
 15602  0006E0  D0A4               	goto	i2l589
 15603  0006E2                     i2l580:
 15604                           
 15605                           ;main.c: 779: else if(temp == '5'){
 15606  0006E2  0E35               	movlw	53
 15607  0006E4  1841               	xorwf	interruptHandler@temp,w,c
 15608  0006E6  A4D8               	btfss	status,2,c
 15609  0006E8  D020               	goto	i2l582
 15610                           
 15611                           ;main.c: 780: assembly_step = 5;
 15612  0006EA  0E00               	movlw	0
 15613  0006EC  0100               	movlb	0	; () banked
 15614  0006EE  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15615  0006F0  0E05               	movlw	5
 15616  0006F2  6FAF               	movwf	_assembly_step& (0+255),b
 15617                           
 15618                           ; BSR set to: 0
 15619                           ;main.c: 781: prev_state = state;
 15620  0006F4  C0B1  F188         	movff	_state,_prev_state
 15621  0006F8  C0B2  F189         	movff	_state+1,_prev_state+1
 15622                           
 15623                           ;main.c: 782: state = 1;
 15624  0006FC  0E00               	movlw	0
 15625  0006FE  6FB2               	movwf	(_state+1)& (0+255),b
 15626  000700  0E01               	movlw	1
 15627  000702  6FB1               	movwf	_state& (0+255),b
 15628                           
 15629                           ; BSR set to: 0
 15630                           ;main.c: 783: lcdInst(0xC0);;
 15631  000704  0EC0               	movlw	192
 15632  000706  EC15  F031         	call	i2_lcdInst
 15633                           
 15634                           ;main.c: 784: putch(keys[keypress]);
 15635  00070A  5040               	movf	interruptHandler@keypress,w,c
 15636  00070C  0D01               	mullw	1
 15637  00070E  0E53               	movlw	low _keys
 15638  000710  24F3               	addwf	prodl,w,c
 15639  000712  6EF6               	movwf	tblptrl,c
 15640  000714  0EFC               	movlw	high _keys
 15641  000716  20F4               	addwfc	prodh,w,c
 15642  000718  6EF7               	movwf	tblptrh,c
 15643  00071A                     	if	1	;There are 3 active tblptr bytes
 15644  00071A  6AF8               	clrf	tblptru,c
 15645  00071C  0E00               	movlw	low (__mediumconst shr (0+16))
 15646  00071E  22F8               	addwfc	tblptru,f,c
 15647  000720                     	endif
 15648  000720  0008               	tblrd		*
 15649  000722  50F5               	movf	tablat,w,c
 15650  000724  EC0B  F031         	call	i2_putch
 15651                           
 15652                           ;main.c: 786: }
 15653  000728  D080               	goto	i2l589
 15654  00072A                     i2l582:
 15655                           
 15656                           ;main.c: 787: else if (temp == '6') {
 15657  00072A  0E36               	movlw	54
 15658  00072C  1841               	xorwf	interruptHandler@temp,w,c
 15659  00072E  A4D8               	btfss	status,2,c
 15660  000730  D020               	goto	i2l584
 15661                           
 15662                           ;main.c: 788: assembly_step = 6;
 15663  000732  0E00               	movlw	0
 15664  000734  0100               	movlb	0	; () banked
 15665  000736  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15666  000738  0E06               	movlw	6
 15667  00073A  6FAF               	movwf	_assembly_step& (0+255),b
 15668                           
 15669                           ; BSR set to: 0
 15670                           ;main.c: 789: prev_state = state;
 15671  00073C  C0B1  F188         	movff	_state,_prev_state
 15672  000740  C0B2  F189         	movff	_state+1,_prev_state+1
 15673                           
 15674                           ;main.c: 790: state = 1;
 15675  000744  0E00               	movlw	0
 15676  000746  6FB2               	movwf	(_state+1)& (0+255),b
 15677  000748  0E01               	movlw	1
 15678  00074A  6FB1               	movwf	_state& (0+255),b
 15679                           
 15680                           ; BSR set to: 0
 15681                           ;main.c: 791: lcdInst(0xC0);;
 15682  00074C  0EC0               	movlw	192
 15683  00074E  EC15  F031         	call	i2_lcdInst
 15684                           
 15685                           ;main.c: 792: putch(keys[keypress]);
 15686  000752  5040               	movf	interruptHandler@keypress,w,c
 15687  000754  0D01               	mullw	1
 15688  000756  0E53               	movlw	low _keys
 15689  000758  24F3               	addwf	prodl,w,c
 15690  00075A  6EF6               	movwf	tblptrl,c
 15691  00075C  0EFC               	movlw	high _keys
 15692  00075E  20F4               	addwfc	prodh,w,c
 15693  000760  6EF7               	movwf	tblptrh,c
 15694  000762                     	if	1	;There are 3 active tblptr bytes
 15695  000762  6AF8               	clrf	tblptru,c
 15696  000764  0E00               	movlw	low (__mediumconst shr (0+16))
 15697  000766  22F8               	addwfc	tblptru,f,c
 15698  000768                     	endif
 15699  000768  0008               	tblrd		*
 15700  00076A  50F5               	movf	tablat,w,c
 15701  00076C  EC0B  F031         	call	i2_putch
 15702                           
 15703                           ;main.c: 793: }
 15704  000770  D05C               	goto	i2l589
 15705  000772                     i2l584:
 15706                           
 15707                           ;main.c: 794: else if (temp == '7'){
 15708  000772  0E37               	movlw	55
 15709  000774  1841               	xorwf	interruptHandler@temp,w,c
 15710  000776  A4D8               	btfss	status,2,c
 15711  000778  D020               	goto	i2l586
 15712                           
 15713                           ;main.c: 795: assembly_step = 7;
 15714  00077A  0E00               	movlw	0
 15715  00077C  0100               	movlb	0	; () banked
 15716  00077E  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15717  000780  0E07               	movlw	7
 15718  000782  6FAF               	movwf	_assembly_step& (0+255),b
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;main.c: 796: prev_state = state;
 15722  000784  C0B1  F188         	movff	_state,_prev_state
 15723  000788  C0B2  F189         	movff	_state+1,_prev_state+1
 15724                           
 15725                           ;main.c: 797: state = 1;
 15726  00078C  0E00               	movlw	0
 15727  00078E  6FB2               	movwf	(_state+1)& (0+255),b
 15728  000790  0E01               	movlw	1
 15729  000792  6FB1               	movwf	_state& (0+255),b
 15730                           
 15731                           ; BSR set to: 0
 15732                           ;main.c: 798: lcdInst(0xC0);;
 15733  000794  0EC0               	movlw	192
 15734  000796  EC15  F031         	call	i2_lcdInst
 15735                           
 15736                           ;main.c: 799: putch(keys[keypress]);
 15737  00079A  5040               	movf	interruptHandler@keypress,w,c
 15738  00079C  0D01               	mullw	1
 15739  00079E  0E53               	movlw	low _keys
 15740  0007A0  24F3               	addwf	prodl,w,c
 15741  0007A2  6EF6               	movwf	tblptrl,c
 15742  0007A4  0EFC               	movlw	high _keys
 15743  0007A6  20F4               	addwfc	prodh,w,c
 15744  0007A8  6EF7               	movwf	tblptrh,c
 15745  0007AA                     	if	1	;There are 3 active tblptr bytes
 15746  0007AA  6AF8               	clrf	tblptru,c
 15747  0007AC  0E00               	movlw	low (__mediumconst shr (0+16))
 15748  0007AE  22F8               	addwfc	tblptru,f,c
 15749  0007B0                     	endif
 15750  0007B0  0008               	tblrd		*
 15751  0007B2  50F5               	movf	tablat,w,c
 15752  0007B4  EC0B  F031         	call	i2_putch
 15753                           
 15754                           ;main.c: 801: }
 15755  0007B8  D038               	goto	i2l589
 15756  0007BA                     i2l586:
 15757                           
 15758                           ;main.c: 802: else if (temp == '8'){
 15759  0007BA  0E38               	movlw	56
 15760  0007BC  1841               	xorwf	interruptHandler@temp,w,c
 15761  0007BE  A4D8               	btfss	status,2,c
 15762  0007C0  D020               	goto	i2l588
 15763                           
 15764                           ;main.c: 803: assembly_step = 8;
 15765  0007C2  0E00               	movlw	0
 15766  0007C4  0100               	movlb	0	; () banked
 15767  0007C6  6FB0               	movwf	(_assembly_step+1)& (0+255),b
 15768  0007C8  0E08               	movlw	8
 15769  0007CA  6FAF               	movwf	_assembly_step& (0+255),b
 15770                           
 15771                           ; BSR set to: 0
 15772                           ;main.c: 804: prev_state = state;
 15773  0007CC  C0B1  F188         	movff	_state,_prev_state
 15774  0007D0  C0B2  F189         	movff	_state+1,_prev_state+1
 15775                           
 15776                           ;main.c: 805: state = 1;
 15777  0007D4  0E00               	movlw	0
 15778  0007D6  6FB2               	movwf	(_state+1)& (0+255),b
 15779  0007D8  0E01               	movlw	1
 15780  0007DA  6FB1               	movwf	_state& (0+255),b
 15781                           
 15782                           ; BSR set to: 0
 15783                           ;main.c: 806: lcdInst(0xC0);;
 15784  0007DC  0EC0               	movlw	192
 15785  0007DE  EC15  F031         	call	i2_lcdInst
 15786                           
 15787                           ;main.c: 807: putch(keys[keypress]);
 15788  0007E2  5040               	movf	interruptHandler@keypress,w,c
 15789  0007E4  0D01               	mullw	1
 15790  0007E6  0E53               	movlw	low _keys
 15791  0007E8  24F3               	addwf	prodl,w,c
 15792  0007EA  6EF6               	movwf	tblptrl,c
 15793  0007EC  0EFC               	movlw	high _keys
 15794  0007EE  20F4               	addwfc	prodh,w,c
 15795  0007F0  6EF7               	movwf	tblptrh,c
 15796  0007F2                     	if	1	;There are 3 active tblptr bytes
 15797  0007F2  6AF8               	clrf	tblptru,c
 15798  0007F4  0E00               	movlw	low (__mediumconst shr (0+16))
 15799  0007F6  22F8               	addwfc	tblptru,f,c
 15800  0007F8                     	endif
 15801  0007F8  0008               	tblrd		*
 15802  0007FA  50F5               	movf	tablat,w,c
 15803  0007FC  EC0B  F031         	call	i2_putch
 15804                           
 15805                           ;main.c: 809: }
 15806  000800  D014               	goto	i2l589
 15807  000802                     i2l588:
 15808                           
 15809                           ;main.c: 810: else{
 15810                           ;main.c: 816: initLCD();
 15811  000802  EC2B  F02F         	call	i2_initLCD	;wreg free
 15812                           
 15813                           ;main.c: 817: printf("Wrong number! ");
 15814  000806  0E61               	movlw	low STR_45
 15815  000808  6E0D               	movwf	i2printf@f,c
 15816  00080A  0EFE               	movlw	high STR_45
 15817  00080C  6E0E               	movwf	i2printf@f+1,c
 15818  00080E  EC4E  F01B         	call	i2_printf	;wreg free
 15819                           
 15820                           ;main.c: 818: _delay((unsigned long)((500)*(32000000/4000.0)));
 15821  000812  0E15               	movlw	21
 15822  000814  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 15823  000816  0E4B               	movlw	75
 15824  000818  6E27               	movwf	??_interruptHandler& (0+255),c
 15825  00081A  0EBE               	movlw	190
 15826  00081C                     i2u758_47:
 15827  00081C  2EE8               	decfsz	wreg,f,c
 15828  00081E  D7FE               	bra	i2u758_47
 15829  000820  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 15830  000822  D7FC               	bra	i2u758_47
 15831  000824  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 15832  000826  D7FA               	bra	i2u758_47
 15833  000828  D000               	nop2	
 15834  00082A                     i2l589:
 15835                           
 15836                           ;main.c: 820: }
 15837                           ;main.c: 826: generate_compartment_array(assembly_step);
 15838  00082A  C0AF  F001         	movff	_assembly_step,i2generate_compartment_array@step
 15839  00082E  C0B0  F002         	movff	_assembly_step+1,i2generate_compartment_array@step+1
 15840  000832  EC40  F024         	call	i2_generate_compartment_array	;wreg free
 15841  000836  D2EC               	goto	i2l8201
 15842  000838                     i2l579:
 15843                           
 15844                           ;main.c: 833: }
 15845                           ;main.c: 841: if(state == 1){
 15846  000838  0100               	movlb	0	; () banked
 15847  00083A  05B1               	decf	_state& (0+255),w,b
 15848  00083C  11B2               	iorwf	(_state+1)& (0+255),w,b
 15849  00083E  A4D8               	btfss	status,2,c
 15850  000840  D18D               	goto	i2l590
 15851                           
 15852                           ; BSR set to: 0
 15853                           ;main.c: 846: if (temp == 'A'){
 15854  000842  0E41               	movlw	65
 15855  000844  1841               	xorwf	interruptHandler@temp,w,c
 15856  000846  A4D8               	btfss	status,2,c
 15857  000848  D01C               	goto	i2l591
 15858                           
 15859                           ; BSR set to: 0
 15860                           ;main.c: 847: lcdInst(0xC0);;
 15861  00084A  0EC0               	movlw	192
 15862  00084C  EC15  F031         	call	i2_lcdInst
 15863                           
 15864                           ;main.c: 848: putch('B');
 15865  000850  0E42               	movlw	66
 15866  000852  EC0B  F031         	call	i2_putch
 15867                           
 15868                           ;main.c: 849: strcpy(temp_set,"B");
 15869  000856  0EE4               	movlw	low _temp_set
 15870  000858  6E07               	movwf	strcpy@to,c
 15871  00085A  0E01               	movlw	high _temp_set
 15872  00085C  6E08               	movwf	strcpy@to+1,c
 15873  00085E  0EFD               	movlw	low STR_46
 15874  000860  6E09               	movwf	strcpy@from,c
 15875  000862  0EFF               	movlw	high STR_46
 15876  000864  6E0A               	movwf	strcpy@from+1,c
 15877  000866  EC76  F02F         	call	_strcpy	;wreg free
 15878                           
 15879                           ;main.c: 850: strcat(current_set,temp_set);
 15880  00086A  0EBE               	movlw	low _current_set
 15881  00086C  6E01               	movwf	strcat@to,c
 15882  00086E  0E00               	movlw	high _current_set
 15883  000870  6E02               	movwf	strcat@to+1,c
 15884  000872  0EE4               	movlw	low _temp_set
 15885  000874  6E03               	movwf	strcat@from,c
 15886  000876  0E01               	movlw	high _temp_set
 15887  000878  6E04               	movwf	strcat@from+1,c
 15888  00087A  ECDC  F02F         	call	_strcat	;wreg free
 15889                           
 15890                           ;main.c: 851: counter++;
 15891  00087E  4A5C               	infsnz	_counter,f,c
 15892  000880  2A5D               	incf	_counter+1,f,c
 15893  000882                     i2l591:
 15894                           
 15895                           ;main.c: 852: }
 15896                           ;main.c: 854: if(temp == 'B'){
 15897  000882  0E42               	movlw	66
 15898  000884  1841               	xorwf	interruptHandler@temp,w,c
 15899  000886  A4D8               	btfss	status,2,c
 15900  000888  D01C               	goto	i2l592
 15901                           
 15902                           ;main.c: 855: lcdInst(0xC0);;
 15903  00088A  0EC0               	movlw	192
 15904  00088C  EC15  F031         	call	i2_lcdInst
 15905                           
 15906                           ;main.c: 856: putch('N');
 15907  000890  0E4E               	movlw	78
 15908  000892  EC0B  F031         	call	i2_putch
 15909                           
 15910                           ;main.c: 857: strcpy(temp_set,"N");
 15911  000896  0EE4               	movlw	low _temp_set
 15912  000898  6E07               	movwf	strcpy@to,c
 15913  00089A  0E01               	movlw	high _temp_set
 15914  00089C  6E08               	movwf	strcpy@to+1,c
 15915  00089E  0EEA               	movlw	low (STR_85+2)
 15916  0008A0  6E09               	movwf	strcpy@from,c
 15917  0008A2  0EFF               	movlw	high (STR_85+2)
 15918  0008A4  6E0A               	movwf	strcpy@from+1,c
 15919  0008A6  EC76  F02F         	call	_strcpy	;wreg free
 15920                           
 15921                           ;main.c: 858: strcat(current_set,temp_set);
 15922  0008AA  0EBE               	movlw	low _current_set
 15923  0008AC  6E01               	movwf	strcat@to,c
 15924  0008AE  0E00               	movlw	high _current_set
 15925  0008B0  6E02               	movwf	strcat@to+1,c
 15926  0008B2  0EE4               	movlw	low _temp_set
 15927  0008B4  6E03               	movwf	strcat@from,c
 15928  0008B6  0E01               	movlw	high _temp_set
 15929  0008B8  6E04               	movwf	strcat@from+1,c
 15930  0008BA  ECDC  F02F         	call	_strcat	;wreg free
 15931                           
 15932                           ;main.c: 859: counter++;
 15933  0008BE  4A5C               	infsnz	_counter,f,c
 15934  0008C0  2A5D               	incf	_counter+1,f,c
 15935  0008C2                     i2l592:
 15936                           
 15937                           ;main.c: 860: }
 15938                           ;main.c: 862: if(temp == 'C'){
 15939  0008C2  0E43               	movlw	67
 15940  0008C4  1841               	xorwf	interruptHandler@temp,w,c
 15941  0008C6  A4D8               	btfss	status,2,c
 15942  0008C8  D01C               	goto	i2l593
 15943                           
 15944                           ;main.c: 863: lcdInst(0xC0);;
 15945  0008CA  0EC0               	movlw	192
 15946  0008CC  EC15  F031         	call	i2_lcdInst
 15947                           
 15948                           ;main.c: 864: putch('S');
 15949  0008D0  0E53               	movlw	83
 15950  0008D2  EC0B  F031         	call	i2_putch
 15951                           
 15952                           ;main.c: 866: strcpy(temp_set,"S");
 15953  0008D6  0EE4               	movlw	low _temp_set
 15954  0008D8  6E07               	movwf	strcpy@to,c
 15955  0008DA  0E01               	movlw	high _temp_set
 15956  0008DC  6E08               	movwf	strcpy@to+1,c
 15957  0008DE  0EEE               	movlw	low (STR_86+2)
 15958  0008E0  6E09               	movwf	strcpy@from,c
 15959  0008E2  0EFF               	movlw	high (STR_86+2)
 15960  0008E4  6E0A               	movwf	strcpy@from+1,c
 15961  0008E6  EC76  F02F         	call	_strcpy	;wreg free
 15962                           
 15963                           ;main.c: 867: strcat(current_set,temp_set);
 15964  0008EA  0EBE               	movlw	low _current_set
 15965  0008EC  6E01               	movwf	strcat@to,c
 15966  0008EE  0E00               	movlw	high _current_set
 15967  0008F0  6E02               	movwf	strcat@to+1,c
 15968  0008F2  0EE4               	movlw	low _temp_set
 15969  0008F4  6E03               	movwf	strcat@from,c
 15970  0008F6  0E01               	movlw	high _temp_set
 15971  0008F8  6E04               	movwf	strcat@from+1,c
 15972  0008FA  ECDC  F02F         	call	_strcat	;wreg free
 15973                           
 15974                           ;main.c: 868: counter++;
 15975  0008FE  4A5C               	infsnz	_counter,f,c
 15976  000900  2A5D               	incf	_counter+1,f,c
 15977  000902                     i2l593:
 15978                           
 15979                           ;main.c: 869: }
 15980                           ;main.c: 870: if (temp == 'D'){
 15981  000902  0E44               	movlw	68
 15982  000904  1841               	xorwf	interruptHandler@temp,w,c
 15983  000906  A4D8               	btfss	status,2,c
 15984  000908  D01C               	goto	i2l594
 15985                           
 15986                           ;main.c: 871: lcdInst(0xC0);;
 15987  00090A  0EC0               	movlw	192
 15988  00090C  EC15  F031         	call	i2_lcdInst
 15989                           
 15990                           ;main.c: 872: putch('W');
 15991  000910  0E57               	movlw	87
 15992  000912  EC0B  F031         	call	i2_putch
 15993                           
 15994                           ;main.c: 874: strcpy(temp_set,"W");
 15995  000916  0EE4               	movlw	low _temp_set
 15996  000918  6E07               	movwf	strcpy@to,c
 15997  00091A  0E01               	movlw	high _temp_set
 15998  00091C  6E08               	movwf	strcpy@to+1,c
 15999  00091E  0EF2               	movlw	low (STR_87+2)
 16000  000920  6E09               	movwf	strcpy@from,c
 16001  000922  0EFF               	movlw	high (STR_87+2)
 16002  000924  6E0A               	movwf	strcpy@from+1,c
 16003  000926  EC76  F02F         	call	_strcpy	;wreg free
 16004                           
 16005                           ;main.c: 875: strcat(current_set,temp_set);
 16006  00092A  0EBE               	movlw	low _current_set
 16007  00092C  6E01               	movwf	strcat@to,c
 16008  00092E  0E00               	movlw	high _current_set
 16009  000930  6E02               	movwf	strcat@to+1,c
 16010  000932  0EE4               	movlw	low _temp_set
 16011  000934  6E03               	movwf	strcat@from,c
 16012  000936  0E01               	movlw	high _temp_set
 16013  000938  6E04               	movwf	strcat@from+1,c
 16014  00093A  ECDC  F02F         	call	_strcat	;wreg free
 16015                           
 16016                           ;main.c: 877: counter++;
 16017  00093E  4A5C               	infsnz	_counter,f,c
 16018  000940  2A5D               	incf	_counter+1,f,c
 16019  000942                     i2l594:
 16020                           
 16021                           ;main.c: 878: }
 16022                           ;main.c: 880: if (keys[keypress] == '*'){
 16023  000942  5040               	movf	interruptHandler@keypress,w,c
 16024  000944  0D01               	mullw	1
 16025  000946  0E53               	movlw	low _keys
 16026  000948  24F3               	addwf	prodl,w,c
 16027  00094A  6EF6               	movwf	tblptrl,c
 16028  00094C  0EFC               	movlw	high _keys
 16029  00094E  20F4               	addwfc	prodh,w,c
 16030  000950  6EF7               	movwf	tblptrh,c
 16031  000952                     	if	1	;There are 3 active tblptr bytes
 16032  000952  6AF8               	clrf	tblptru,c
 16033  000954  0E00               	movlw	low (__mediumconst shr (0+16))
 16034  000956  22F8               	addwfc	tblptru,f,c
 16035  000958                     	endif
 16036  000958  0008               	tblrd		*
 16037  00095A  50F5               	movf	tablat,w,c
 16038  00095C  0A2A               	xorlw	42
 16039  00095E  A4D8               	btfss	status,2,c
 16040  000960  D0D2               	goto	i2l595
 16041                           
 16042                           ;main.c: 883: _delay((unsigned long)((80)*(32000000/4000.0)));
 16043  000962  0E04               	movlw	4
 16044  000964  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16045  000966  0E40               	movlw	64
 16046  000968  6E27               	movwf	??_interruptHandler& (0+255),c
 16047  00096A  0E26               	movlw	38
 16048  00096C                     i2u759_47:
 16049  00096C  2EE8               	decfsz	wreg,f,c
 16050  00096E  D7FE               	bra	i2u759_47
 16051  000970  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16052  000972  D7FC               	bra	i2u759_47
 16053  000974  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16054  000976  D7FA               	bra	i2u759_47
 16055  000978  D000               	nop2	
 16056                           
 16057                           ;main.c: 884: counter ++;
 16058  00097A  4A5C               	infsnz	_counter,f,c
 16059  00097C  2A5D               	incf	_counter+1,f,c
 16060                           
 16061                           ;main.c: 885: for (int i=0;i<20;i++){
 16062  00097E  0E00               	movlw	0
 16063  000980  6E3F               	movwf	interruptHandler@i+1,c
 16064  000982  0E00               	movlw	0
 16065  000984  6E3E               	movwf	interruptHandler@i,c
 16066  000986  BE3F               	btfsc	interruptHandler@i+1,7,c
 16067  000988  D008               	goto	i2l596
 16068  00098A  503F               	movf	interruptHandler@i+1,w,c
 16069  00098C  E105               	bnz	i2u595_40
 16070  00098E  0E14               	movlw	20
 16071  000990  5C3E               	subwf	interruptHandler@i,w,c
 16072  000992  B0D8               	btfsc	status,0,c
 16073  000994  D07E               	goto	i2u597_40
 16074  000996  D001               	goto	i2l596
 16075  000998                     i2u595_40:
 16076  000998  D07C               	goto	i2u597_40
 16077  00099A                     i2l596:
 16078                           
 16079                           ;main.c: 886: if (strncmp(current_set,strs[i],4) == 0){
 16080  00099A  0EBE               	movlw	low _current_set
 16081  00099C  6E07               	movwf	strncmp@s1,c
 16082  00099E  0E00               	movlw	high _current_set
 16083  0009A0  6E08               	movwf	strncmp@s1+1,c
 16084  0009A2  C03E  F001         	movff	interruptHandler@i,i2___wmul@multiplier
 16085  0009A6  C03F  F002         	movff	interruptHandler@i+1,i2___wmul@multiplier+1
 16086  0009AA  0E00               	movlw	0
 16087  0009AC  6E04               	movwf	i2___wmul@multiplicand+1,c
 16088  0009AE  0E05               	movlw	5
 16089  0009B0  6E03               	movwf	i2___wmul@multiplicand,c
 16090  0009B2  EC9A  F030         	call	i2___wmul	;wreg free
 16091  0009B6  0EF2               	movlw	low _strs
 16092  0009B8  2401               	addwf	?i2___wmul,w,c
 16093  0009BA  6E09               	movwf	strncmp@s2,c
 16094  0009BC  0EFC               	movlw	high _strs
 16095  0009BE  2002               	addwfc	?i2___wmul+1,w,c
 16096  0009C0  6E0A               	movwf	strncmp@s2+1,c
 16097  0009C2  0E00               	movlw	0
 16098  0009C4  6E0C               	movwf	strncmp@len+1,c
 16099  0009C6  0E04               	movlw	4
 16100  0009C8  6E0B               	movwf	strncmp@len,c
 16101  0009CA  ECB3  F02C         	call	_strncmp	;wreg free
 16102  0009CE  5007               	movf	?_strncmp,w,c
 16103  0009D0  1008               	iorwf	?_strncmp+1,w,c
 16104  0009D2  A4D8               	btfss	status,2,c
 16105  0009D4  D057               	goto	i2l598
 16106                           
 16107                           ;main.c: 887: strcpy(final_set[counter_step],current_set);
 16108  0009D6  C05A  F001         	movff	_counter_step,i2___wmul@multiplier
 16109  0009DA  C05B  F002         	movff	_counter_step+1,i2___wmul@multiplier+1
 16110  0009DE  0E00               	movlw	0
 16111  0009E0  6E04               	movwf	i2___wmul@multiplicand+1,c
 16112  0009E2  0E05               	movlw	5
 16113  0009E4  6E03               	movwf	i2___wmul@multiplicand,c
 16114  0009E6  EC9A  F030         	call	i2___wmul	;wreg free
 16115  0009EA  0EBC               	movlw	low _final_set
 16116  0009EC  2401               	addwf	?i2___wmul,w,c
 16117  0009EE  6E07               	movwf	strcpy@to,c
 16118  0009F0  0E01               	movlw	high _final_set
 16119  0009F2  2002               	addwfc	?i2___wmul+1,w,c
 16120  0009F4  6E08               	movwf	strcpy@to+1,c
 16121  0009F6  0EBE               	movlw	low _current_set
 16122  0009F8  6E09               	movwf	strcpy@from,c
 16123  0009FA  0E00               	movlw	high _current_set
 16124  0009FC  6E0A               	movwf	strcpy@from+1,c
 16125  0009FE  EC76  F02F         	call	_strcpy	;wreg free
 16126                           
 16127                           ;main.c: 888: strcpy(current_set2,current_set);
 16128  000A02  0E70               	movlw	low _current_set2
 16129  000A04  6E07               	movwf	strcpy@to,c
 16130  000A06  0E00               	movlw	high _current_set2
 16131  000A08  6E08               	movwf	strcpy@to+1,c
 16132  000A0A  0EBE               	movlw	low _current_set
 16133  000A0C  6E09               	movwf	strcpy@from,c
 16134  000A0E  0E00               	movlw	high _current_set
 16135  000A10  6E0A               	movwf	strcpy@from+1,c
 16136  000A12  EC76  F02F         	call	_strcpy	;wreg free
 16137                           
 16138                           ;main.c: 891: valid = 1;
 16139  000A16  0E00               	movlw	0
 16140  000A18  0101               	movlb	1	; () banked
 16141  000A1A  6F8D               	movwf	(_valid+1)& (0+255),b
 16142  000A1C  0E01               	movlw	1
 16143  000A1E  6F8C               	movwf	_valid& (0+255),b
 16144                           
 16145                           ; BSR set to: 1
 16146                           ;main.c: 892: state = 2;
 16147  000A20  0E00               	movlw	0
 16148  000A22  0100               	movlb	0	; () banked
 16149  000A24  6FB2               	movwf	(_state+1)& (0+255),b
 16150  000A26  0E02               	movlw	2
 16151  000A28  6FB1               	movwf	_state& (0+255),b
 16152                           
 16153                           ; BSR set to: 0
 16154                           ;main.c: 894: initLCD();
 16155  000A2A  EC2B  F02F         	call	i2_initLCD	;wreg free
 16156                           
 16157                           ;main.c: 895: printf("correct!");
 16158  000A2E  0E6B               	movlw	low STR_50
 16159  000A30  6E0D               	movwf	i2printf@f,c
 16160  000A32  0EFF               	movlw	high STR_50
 16161  000A34  6E0E               	movwf	i2printf@f+1,c
 16162  000A36  EC4E  F01B         	call	i2_printf	;wreg free
 16163                           
 16164                           ;main.c: 896: _delay((unsigned long)((100)*(32000000/4000.0)));
 16165  000A3A  0E05               	movlw	5
 16166  000A3C  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16167  000A3E  0E0F               	movlw	15
 16168  000A40  6E27               	movwf	??_interruptHandler& (0+255),c
 16169  000A42  0EF1               	movlw	241
 16170  000A44                     i2u760_47:
 16171  000A44  2EE8               	decfsz	wreg,f,c
 16172  000A46  D7FE               	bra	i2u760_47
 16173  000A48  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16174  000A4A  D7FC               	bra	i2u760_47
 16175  000A4C  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16176  000A4E  D7FA               	bra	i2u760_47
 16177  000A50  F000               	nop	
 16178                           
 16179                           ;main.c: 898: printf("%s",current_set);
 16180  000A52  0EF8               	movlw	low STR_5
 16181  000A54  6E0D               	movwf	i2printf@f,c
 16182  000A56  0EFF               	movlw	high STR_5
 16183  000A58  6E0E               	movwf	i2printf@f+1,c
 16184  000A5A  0EBE               	movlw	low _current_set
 16185  000A5C  6E0F               	movwf	?i2_printf+2,c
 16186  000A5E  0E00               	movlw	high _current_set
 16187  000A60  6E10               	movwf	?i2_printf+3,c
 16188  000A62  EC4E  F01B         	call	i2_printf	;wreg free
 16189                           
 16190                           ;main.c: 900: strcpy(current_set,"");
 16191  000A66  0EBE               	movlw	low _current_set
 16192  000A68  6E07               	movwf	strcpy@to,c
 16193  000A6A  0E00               	movlw	high _current_set
 16194  000A6C  6E08               	movwf	strcpy@to+1,c
 16195  000A6E  0E6F               	movlw	low (STR_45+14)
 16196  000A70  6E09               	movwf	strcpy@from,c
 16197  000A72  0EFE               	movlw	high (STR_45+14)
 16198  000A74  6E0A               	movwf	strcpy@from+1,c
 16199  000A76  EC76  F02F         	call	_strcpy	;wreg free
 16200                           
 16201                           ;main.c: 901: counter = 0;
 16202  000A7A  0E00               	movlw	0
 16203  000A7C  6E5D               	movwf	_counter+1,c
 16204  000A7E  0E00               	movlw	0
 16205  000A80  6E5C               	movwf	_counter,c
 16206                           
 16207                           ;main.c: 902: break;
 16208  000A82  D007               	goto	i2u597_40
 16209  000A84                     i2l598:
 16210  000A84  4A3E               	infsnz	interruptHandler@i,f,c
 16211  000A86  2A3F               	incf	interruptHandler@i+1,f,c
 16212  000A88  BE3F               	btfsc	interruptHandler@i+1,7,c
 16213  000A8A  D787               	goto	i2l596
 16214  000A8C  503F               	movf	interruptHandler@i+1,w,c
 16215  000A8E  E101               	bnz	i2l8091
 16216  000A90  D77E               	goto	L10
 16217  000A92                     i2u597_40:
 16218  000A92                     i2l8091:
 16219                           
 16220                           ;main.c: 904: }
 16221                           ;main.c: 905: }
 16222                           ;main.c: 906: if (valid != 1){
 16223  000A92  0101               	movlb	1	; () banked
 16224  000A94  058C               	decf	_valid& (0+255),w,b
 16225  000A96  118D               	iorwf	(_valid+1)& (0+255),w,b
 16226  000A98  B4D8               	btfsc	status,2,c
 16227  000A9A  D031               	goto	i2l599
 16228                           
 16229                           ; BSR set to: 1
 16230                           ;main.c: 908: initLCD();
 16231  000A9C  EC2B  F02F         	call	i2_initLCD	;wreg free
 16232                           
 16233                           ;main.c: 909: printf("wrong set!");
 16234  000AA0  0E56               	movlw	low STR_53
 16235  000AA2  6E0D               	movwf	i2printf@f,c
 16236  000AA4  0EFF               	movlw	high STR_53
 16237  000AA6  6E0E               	movwf	i2printf@f+1,c
 16238  000AA8  EC4E  F01B         	call	i2_printf	;wreg free
 16239                           
 16240                           ;main.c: 910: printf("%s",current_set);
 16241  000AAC  0EF8               	movlw	low STR_5
 16242  000AAE  6E0D               	movwf	i2printf@f,c
 16243  000AB0  0EFF               	movlw	high STR_5
 16244  000AB2  6E0E               	movwf	i2printf@f+1,c
 16245  000AB4  0EBE               	movlw	low _current_set
 16246  000AB6  6E0F               	movwf	?i2_printf+2,c
 16247  000AB8  0E00               	movlw	high _current_set
 16248  000ABA  6E10               	movwf	?i2_printf+3,c
 16249  000ABC  EC4E  F01B         	call	i2_printf	;wreg free
 16250                           
 16251                           ;main.c: 911: strcpy(current_set,"");
 16252  000AC0  0EBE               	movlw	low _current_set
 16253  000AC2  6E07               	movwf	strcpy@to,c
 16254  000AC4  0E00               	movlw	high _current_set
 16255  000AC6  6E08               	movwf	strcpy@to+1,c
 16256  000AC8  0E6F               	movlw	low (STR_45+14)
 16257  000ACA  6E09               	movwf	strcpy@from,c
 16258  000ACC  0EFE               	movlw	high (STR_45+14)
 16259  000ACE  6E0A               	movwf	strcpy@from+1,c
 16260  000AD0  EC76  F02F         	call	_strcpy	;wreg free
 16261                           
 16262                           ;main.c: 912: _delay((unsigned long)((100)*(32000000/4000.0)));
 16263  000AD4  0E05               	movlw	5
 16264  000AD6  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16265  000AD8  0E0F               	movlw	15
 16266  000ADA  6E27               	movwf	??_interruptHandler& (0+255),c
 16267  000ADC  0EF1               	movlw	241
 16268  000ADE                     i2u761_47:
 16269  000ADE  2EE8               	decfsz	wreg,f,c
 16270  000AE0  D7FE               	bra	i2u761_47
 16271  000AE2  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16272  000AE4  D7FC               	bra	i2u761_47
 16273  000AE6  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16274  000AE8  D7FA               	bra	i2u761_47
 16275  000AEA  F000               	nop	
 16276                           
 16277                           ;main.c: 913: counter = 0;
 16278  000AEC  0E00               	movlw	0
 16279  000AEE  6E5D               	movwf	_counter+1,c
 16280  000AF0  0E00               	movlw	0
 16281  000AF2  6E5C               	movwf	_counter,c
 16282                           
 16283                           ;main.c: 914: valid = 0;
 16284  000AF4  0E00               	movlw	0
 16285  000AF6  0101               	movlb	1	; () banked
 16286  000AF8  6F8D               	movwf	(_valid+1)& (0+255),b
 16287  000AFA  0E00               	movlw	0
 16288  000AFC  6F8C               	movwf	_valid& (0+255),b
 16289  000AFE                     i2l599:
 16290                           
 16291                           ; BSR set to: 1
 16292                           ;main.c: 915: }
 16293                           ;main.c: 916: valid = 0;
 16294                           
 16295                           ; BSR set to: 1
 16296  000AFE  0E00               	movlw	0
 16297  000B00  6F8D               	movwf	(_valid+1)& (0+255),b
 16298  000B02  0E00               	movlw	0
 16299  000B04  6F8C               	movwf	_valid& (0+255),b
 16300  000B06                     i2l595:
 16301                           
 16302                           ;main.c: 918: }
 16303                           ;main.c: 921: if (counter >= 5){
 16304                           
 16305                           ; BSR set to: 1
 16306  000B06  BE5D               	btfsc	_counter+1,7,c
 16307  000B08  D183               	goto	i2l8201
 16308  000B0A  505D               	movf	_counter+1,w,c
 16309  000B0C  E104               	bnz	i2u599_40
 16310  000B0E  0E05               	movlw	5
 16311  000B10  5C5C               	subwf	_counter,w,c
 16312  000B12  A0D8               	btfss	status,0,c
 16313  000B14  D17D               	goto	i2l8201
 16314  000B16                     i2u599_40:
 16315                           
 16316                           ;main.c: 923: initLCD();
 16317  000B16  EC2B  F02F         	call	i2_initLCD	;wreg free
 16318                           
 16319                           ;main.c: 924: printf("wrong!");
 16320  000B1A  0E9E               	movlw	low STR_56
 16321  000B1C  6E0D               	movwf	i2printf@f,c
 16322  000B1E  0EFF               	movlw	high STR_56
 16323  000B20  6E0E               	movwf	i2printf@f+1,c
 16324  000B22  EC4E  F01B         	call	i2_printf	;wreg free
 16325                           
 16326                           ;main.c: 926: _delay((unsigned long)((100)*(32000000/4000.0)));
 16327  000B26  0E05               	movlw	5
 16328  000B28  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16329  000B2A  0E0F               	movlw	15
 16330  000B2C  6E27               	movwf	??_interruptHandler& (0+255),c
 16331  000B2E  0EF1               	movlw	241
 16332  000B30                     i2u762_47:
 16333  000B30  2EE8               	decfsz	wreg,f,c
 16334  000B32  D7FE               	bra	i2u762_47
 16335  000B34  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16336  000B36  D7FC               	bra	i2u762_47
 16337  000B38  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16338  000B3A  D7FA               	bra	i2u762_47
 16339  000B3C  F000               	nop	
 16340                           
 16341                           ;main.c: 928: strcpy(current_set,"");
 16342  000B3E  0EBE               	movlw	low _current_set
 16343  000B40  6E07               	movwf	strcpy@to,c
 16344  000B42  0E00               	movlw	high _current_set
 16345  000B44  6E08               	movwf	strcpy@to+1,c
 16346  000B46  0E6F               	movlw	low (STR_45+14)
 16347  000B48  6E09               	movwf	strcpy@from,c
 16348  000B4A  0EFE               	movlw	high (STR_45+14)
 16349  000B4C  6E0A               	movwf	strcpy@from+1,c
 16350  000B4E  EC76  F02F         	call	_strcpy	;wreg free
 16351                           
 16352                           ;main.c: 931: counter = 0;
 16353  000B52  0E00               	movlw	0
 16354  000B54  6E5D               	movwf	_counter+1,c
 16355  000B56  0E00               	movlw	0
 16356  000B58  6E5C               	movwf	_counter,c
 16357  000B5A  D15A               	goto	i2l8201
 16358  000B5C                     i2l590:
 16359                           
 16360                           ;main.c: 936: }
 16361                           ;main.c: 941: if (state ==2){
 16362  000B5C  0E02               	movlw	2
 16363  000B5E  0100               	movlb	0	; () banked
 16364  000B60  19B1               	xorwf	_state& (0+255),w,b
 16365  000B62  11B2               	iorwf	(_state+1)& (0+255),w,b
 16366  000B64  A4D8               	btfss	status,2,c
 16367  000B66  D125               	goto	i2l617
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;main.c: 942: counter = 0;
 16371  000B68  0E00               	movlw	0
 16372  000B6A  6E5D               	movwf	_counter+1,c
 16373  000B6C  0E00               	movlw	0
 16374  000B6E  6E5C               	movwf	_counter,c
 16375                           
 16376                           ; BSR set to: 0
 16377                           ;main.c: 944: lcdInst(0xC0);;
 16378  000B70  0EC0               	movlw	192
 16379  000B72  EC15  F031         	call	i2_lcdInst
 16380                           
 16381                           ;main.c: 945: putch(keys[keypress]);
 16382  000B76  5040               	movf	interruptHandler@keypress,w,c
 16383  000B78  0D01               	mullw	1
 16384  000B7A  0E53               	movlw	low _keys
 16385  000B7C  24F3               	addwf	prodl,w,c
 16386  000B7E  6EF6               	movwf	tblptrl,c
 16387  000B80  0EFC               	movlw	high _keys
 16388  000B82  20F4               	addwfc	prodh,w,c
 16389  000B84  6EF7               	movwf	tblptrh,c
 16390  000B86                     	if	1	;There are 3 active tblptr bytes
 16391  000B86  6AF8               	clrf	tblptru,c
 16392  000B88  0E00               	movlw	low (__mediumconst shr (0+16))
 16393  000B8A  22F8               	addwfc	tblptru,f,c
 16394  000B8C                     	endif
 16395  000B8C  0008               	tblrd		*
 16396  000B8E  50F5               	movf	tablat,w,c
 16397  000B90  EC0B  F031         	call	i2_putch
 16398                           
 16399                           ;main.c: 946: _delay((unsigned long)((100)*(32000000/4000.0)));
 16400  000B94  0E05               	movlw	5
 16401  000B96  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16402  000B98  0E0F               	movlw	15
 16403  000B9A  6E27               	movwf	??_interruptHandler& (0+255),c
 16404  000B9C  0EF1               	movlw	241
 16405  000B9E                     i2u763_47:
 16406  000B9E  2EE8               	decfsz	wreg,f,c
 16407  000BA0  D7FE               	bra	i2u763_47
 16408  000BA2  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16409  000BA4  D7FC               	bra	i2u763_47
 16410  000BA6  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16411  000BA8  D7FA               	bra	i2u763_47
 16412  000BAA  F000               	nop	
 16413                           
 16414                           ;main.c: 947: printf("Processing...");
 16415  000BAC  0ECA               	movlw	low STR_58
 16416  000BAE  6E0D               	movwf	i2printf@f,c
 16417  000BB0  0EFE               	movlw	high STR_58
 16418  000BB2  6E0E               	movwf	i2printf@f+1,c
 16419  000BB4  EC4E  F01B         	call	i2_printf	;wreg free
 16420                           
 16421                           ;main.c: 949: if (keys[keypress] == '1'||keys[keypress] == '2'|| keys[keypress] == '3' |
      +                          |keys[keypress] == '4'){
 16422  000BB8  5040               	movf	interruptHandler@keypress,w,c
 16423  000BBA  0D01               	mullw	1
 16424  000BBC  0E53               	movlw	low _keys
 16425  000BBE  24F3               	addwf	prodl,w,c
 16426  000BC0  6EF6               	movwf	tblptrl,c
 16427  000BC2  0EFC               	movlw	high _keys
 16428  000BC4  20F4               	addwfc	prodh,w,c
 16429  000BC6  6EF7               	movwf	tblptrh,c
 16430  000BC8                     	if	1	;There are 3 active tblptr bytes
 16431  000BC8  6AF8               	clrf	tblptru,c
 16432  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
 16433  000BCC  22F8               	addwfc	tblptru,f,c
 16434  000BCE                     	endif
 16435  000BCE  0008               	tblrd		*
 16436  000BD0  50F5               	movf	tablat,w,c
 16437  000BD2  0A31               	xorlw	49
 16438  000BD4  B4D8               	btfsc	status,2,c
 16439  000BD6  D05B               	goto	i2l605
 16440  000BD8  5040               	movf	interruptHandler@keypress,w,c
 16441  000BDA  0D01               	mullw	1
 16442  000BDC  0E53               	movlw	low _keys
 16443  000BDE  24F3               	addwf	prodl,w,c
 16444  000BE0  6EF6               	movwf	tblptrl,c
 16445  000BE2  0EFC               	movlw	high _keys
 16446  000BE4  20F4               	addwfc	prodh,w,c
 16447  000BE6  6EF7               	movwf	tblptrh,c
 16448  000BE8                     	if	1	;There are 3 active tblptr bytes
 16449  000BE8  6AF8               	clrf	tblptru,c
 16450  000BEA  0E00               	movlw	low (__mediumconst shr (0+16))
 16451  000BEC  22F8               	addwfc	tblptru,f,c
 16452  000BEE                     	endif
 16453  000BEE  0008               	tblrd		*
 16454  000BF0  50F5               	movf	tablat,w,c
 16455  000BF2  0A32               	xorlw	50
 16456  000BF4  B4D8               	btfsc	status,2,c
 16457  000BF6  D04B               	goto	i2l605
 16458  000BF8  5040               	movf	interruptHandler@keypress,w,c
 16459  000BFA  0D01               	mullw	1
 16460  000BFC  0E53               	movlw	low _keys
 16461  000BFE  24F3               	addwf	prodl,w,c
 16462  000C00  6EF6               	movwf	tblptrl,c
 16463  000C02  0EFC               	movlw	high _keys
 16464  000C04  20F4               	addwfc	prodh,w,c
 16465  000C06  6EF7               	movwf	tblptrh,c
 16466  000C08                     	if	1	;There are 3 active tblptr bytes
 16467  000C08  6AF8               	clrf	tblptru,c
 16468  000C0A  0E00               	movlw	low (__mediumconst shr (0+16))
 16469  000C0C  22F8               	addwfc	tblptru,f,c
 16470  000C0E                     	endif
 16471  000C0E  0008               	tblrd		*
 16472  000C10  50F5               	movf	tablat,w,c
 16473  000C12  0A33               	xorlw	51
 16474  000C14  B4D8               	btfsc	status,2,c
 16475  000C16  D03B               	goto	i2l605
 16476  000C18  5040               	movf	interruptHandler@keypress,w,c
 16477  000C1A  0D01               	mullw	1
 16478  000C1C  0E53               	movlw	low _keys
 16479  000C1E  24F3               	addwf	prodl,w,c
 16480  000C20  6EF6               	movwf	tblptrl,c
 16481  000C22  0EFC               	movlw	high _keys
 16482  000C24  20F4               	addwfc	prodh,w,c
 16483  000C26  6EF7               	movwf	tblptrh,c
 16484  000C28                     	if	1	;There are 3 active tblptr bytes
 16485  000C28  6AF8               	clrf	tblptru,c
 16486  000C2A  0E00               	movlw	low (__mediumconst shr (0+16))
 16487  000C2C  22F8               	addwfc	tblptru,f,c
 16488  000C2E                     	endif
 16489  000C2E  0008               	tblrd		*
 16490  000C30  50F5               	movf	tablat,w,c
 16491  000C32  0A34               	xorlw	52
 16492  000C34  B4D8               	btfsc	status,2,c
 16493  000C36  D02B               	goto	i2l605
 16494  000C38  D0BC               	goto	i2l617
 16495  000C3A                     
 16496                           ;main.c: 953: number = 1;
 16497  000C3A  0E00               	movlw	0
 16498  000C3C  6E76               	movwf	_number+1,c
 16499  000C3E  0E01               	movlw	1
 16500  000C40  D00F               	goto	L14
 16501  000C42                     
 16502                           ;main.c: 956: number = 2;
 16503  000C42  0E00               	movlw	0
 16504  000C44  6E76               	movwf	_number+1,c
 16505  000C46  0E02               	movlw	2
 16506  000C48  D00B               	goto	L14
 16507  000C4A                     
 16508                           ;main.c: 959: number = 3;
 16509  000C4A  0E00               	movlw	0
 16510  000C4C  6E76               	movwf	_number+1,c
 16511  000C4E  0E03               	movlw	3
 16512  000C50  D007               	goto	L14
 16513  000C52                     
 16514                           ;main.c: 962: number = 4;
 16515  000C52  0E00               	movlw	0
 16516  000C54  6E76               	movwf	_number+1,c
 16517  000C56  0E04               	movlw	4
 16518  000C58  D003               	goto	L14
 16519  000C5A                     
 16520                           ;main.c: 965: number = 5;
 16521  000C5A  0E00               	movlw	0
 16522  000C5C  6E76               	movwf	_number+1,c
 16523  000C5E  0E05               	movlw	5
 16524  000C60                     L14:
 16525  000C60  6E75               	movwf	_number,c
 16526                           
 16527                           ;main.c: 966: break;
 16528  000C62  D032               	goto	i2l607
 16529  000C64                     
 16530                           ;main.c: 968: initLCD();
 16531  000C64  EC2B  F02F         	call	i2_initLCD	;wreg free
 16532                           
 16533                           ;main.c: 969: printf("Wrong input");
 16534  000C68  0E3F               	movlw	low STR_59
 16535  000C6A  6E0D               	movwf	i2printf@f,c
 16536  000C6C  0EFF               	movlw	high STR_59
 16537  000C6E  6E0E               	movwf	i2printf@f+1,c
 16538  000C70  EC4E  F01B         	call	i2_printf	;wreg free
 16539                           
 16540                           ;main.c: 970: _delay((unsigned long)((100)*(32000000/4000.0)));
 16541  000C74  0E05               	movlw	5
 16542  000C76  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16543  000C78  0E0F               	movlw	15
 16544  000C7A  6E27               	movwf	??_interruptHandler& (0+255),c
 16545  000C7C  0EF1               	movlw	241
 16546  000C7E                     i2u764_47:
 16547  000C7E  2EE8               	decfsz	wreg,f,c
 16548  000C80  D7FE               	bra	i2u764_47
 16549  000C82  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16550  000C84  D7FC               	bra	i2u764_47
 16551  000C86  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16552  000C88  D7FA               	bra	i2u764_47
 16553  000C8A  F000               	nop	
 16554                           
 16555                           ;main.c: 971: }
 16556  000C8C  D01D               	goto	i2l607
 16557  000C8E                     i2l605:
 16558  000C8E  5040               	movf	interruptHandler@keypress,w,c
 16559  000C90  0D01               	mullw	1
 16560  000C92  0E53               	movlw	low _keys
 16561  000C94  24F3               	addwf	prodl,w,c
 16562  000C96  6EF6               	movwf	tblptrl,c
 16563  000C98  0EFC               	movlw	high _keys
 16564  000C9A  20F4               	addwfc	prodh,w,c
 16565  000C9C  6EF7               	movwf	tblptrh,c
 16566  000C9E                     	if	1	;There are 3 active tblptr bytes
 16567  000C9E  6AF8               	clrf	tblptru,c
 16568  000CA0  0E00               	movlw	low (__mediumconst shr (0+16))
 16569  000CA2  22F8               	addwfc	tblptru,f,c
 16570  000CA4                     	endif
 16571  000CA4  0008               	tblrd		*
 16572  000CA6  50F5               	movf	tablat,w,c
 16573                           
 16574                           ; Switch size 1, requested type "space"
 16575                           ; Number of cases is 5, Range of values is 49 to 53
 16576                           ; switch strategies available:
 16577                           ; Name         Instructions Cycles
 16578                           ; simple_byte           16     9 (average)
 16579                           ;	Chosen strategy is simple_byte
 16580  000CA8  0A31               	xorlw	49	; case 49
 16581  000CAA  B4D8               	btfsc	status,2,c
 16582  000CAC  D7C6               	goto	i2l606
 16583  000CAE  0A03               	xorlw	3	; case 50
 16584  000CB0  B4D8               	btfsc	status,2,c
 16585  000CB2  D7C7               	goto	i2l608
 16586  000CB4  0A01               	xorlw	1	; case 51
 16587  000CB6  B4D8               	btfsc	status,2,c
 16588  000CB8  D7C8               	goto	i2l609
 16589  000CBA  0A07               	xorlw	7	; case 52
 16590  000CBC  B4D8               	btfsc	status,2,c
 16591  000CBE  D7C9               	goto	i2l610
 16592  000CC0  0A01               	xorlw	1	; case 53
 16593  000CC2  B4D8               	btfsc	status,2,c
 16594  000CC4  D7CA               	goto	i2l611
 16595  000CC6  D7CE               	goto	i2l612
 16596  000CC8                     i2l607:
 16597                           
 16598                           ;main.c: 974: is_valid();
 16599  000CC8  ECF5  F007         	call	_is_valid	;wreg free
 16600                           
 16601                           ;main.c: 976: if ( check() == 0){
 16602  000CCC  ECF3  F02D         	call	_check	;wreg free
 16603  000CD0  5001               	movf	?_check,w,c
 16604  000CD2  1002               	iorwf	?_check+1,w,c
 16605  000CD4  A4D8               	btfss	status,2,c
 16606  000CD6  D028               	goto	i2l613
 16607                           
 16608                           ;main.c: 977: initLCD();
 16609  000CD8  EC2B  F02F         	call	i2_initLCD	;wreg free
 16610                           
 16611                           ;main.c: 978: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 16612  000CDC  0E80               	movlw	128
 16613  000CDE  EC15  F031         	call	i2_lcdInst
 16614  000CE2  0E34               	movlw	52
 16615  000CE4  6E27               	movwf	??_interruptHandler& (0+255),c
 16616  000CE6  0EF2               	movlw	242
 16617  000CE8                     i2u765_47:
 16618  000CE8  2EE8               	decfsz	wreg,f,c
 16619  000CEA  D7FE               	bra	i2u765_47
 16620  000CEC  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16621  000CEE  D7FC               	bra	i2u765_47
 16622                           
 16623                           ;main.c: 979: printf("TOO MANY");
 16624  000CF0  0E74               	movlw	low STR_60
 16625  000CF2  6E0D               	movwf	i2printf@f,c
 16626  000CF4  0EFF               	movlw	high STR_60
 16627  000CF6  6E0E               	movwf	i2printf@f+1,c
 16628  000CF8  EC4E  F01B         	call	i2_printf	;wreg free
 16629                           
 16630                           ;main.c: 981: _delay((unsigned long)((100)*(32000000/4000.0)));
 16631  000CFC  0E05               	movlw	5
 16632  000CFE  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16633  000D00  0E0F               	movlw	15
 16634  000D02  6E27               	movwf	??_interruptHandler& (0+255),c
 16635  000D04  0EF1               	movlw	241
 16636  000D06                     i2u766_47:
 16637  000D06  2EE8               	decfsz	wreg,f,c
 16638  000D08  D7FE               	bra	i2u766_47
 16639  000D0A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16640  000D0C  D7FC               	bra	i2u766_47
 16641  000D0E  2E28               	decfsz	(??_interruptHandler+1)& (0+255),f,c
 16642  000D10  D7FA               	bra	i2u766_47
 16643  000D12  F000               	nop	
 16644                           
 16645                           ;main.c: 982: state = 2;
 16646  000D14  0E00               	movlw	0
 16647  000D16  0100               	movlb	0	; () banked
 16648  000D18  6FB2               	movwf	(_state+1)& (0+255),b
 16649  000D1A  0E02               	movlw	2
 16650  000D1C  6FB1               	movwf	_state& (0+255),b
 16651                           
 16652                           ; BSR set to: 0
 16653                           ;main.c: 983: number = 0;
 16654  000D1E  0E00               	movlw	0
 16655  000D20  6E76               	movwf	_number+1,c
 16656  000D22  0E00               	movlw	0
 16657  000D24  6E75               	movwf	_number,c
 16658                           
 16659                           ;main.c: 984: }
 16660  000D26  D045               	goto	i2l617
 16661  000D28                     i2l613:
 16662                           
 16663                           ;main.c: 987: else if (counter_step >= assembly_step-1){
 16664                           
 16665                           ; BSR set to: 0
 16666  000D28  0EFF               	movlw	255
 16667  000D2A  6E27               	movwf	??_interruptHandler& (0+255),c
 16668  000D2C  0EFF               	movlw	255
 16669  000D2E  6E28               	movwf	(??_interruptHandler+1)& (0+255),c
 16670  000D30  C0AF  F029         	movff	_assembly_step,??_interruptHandler+2
 16671  000D34  C0B0  F02A         	movff	_assembly_step+1,??_interruptHandler+3
 16672  000D38  5027               	movf	??_interruptHandler,w,c
 16673  000D3A  2629               	addwf	??_interruptHandler+2,f,c
 16674  000D3C  5028               	movf	??_interruptHandler+1,w,c
 16675  000D3E  222A               	addwfc	??_interruptHandler+3,f,c
 16676  000D40  5029               	movf	??_interruptHandler+2,w,c
 16677  000D42  5C5A               	subwf	_counter_step,w,c
 16678  000D44  505B               	movf	_counter_step+1,w,c
 16679  000D46  0A80               	xorlw	128
 16680  000D48  6E2B               	movwf	(??_interruptHandler+4)& (0+255),c
 16681  000D4A  502A               	movf	??_interruptHandler+3,w,c
 16682  000D4C  0A80               	xorlw	128
 16683  000D4E  582B               	subwfb	(??_interruptHandler+4)& (0+255),w,c
 16684  000D50  A0D8               	btfss	status,0,c
 16685  000D52  D013               	goto	i2l615
 16686                           
 16687                           ;main.c: 988: final_number[counter_step] = number;
 16688  000D54  90D8               	bcf	status,0,c
 16689  000D56  345A               	rlcf	_counter_step,w,c
 16690  000D58  6ED9               	movwf	fsr2l,c
 16691  000D5A  345B               	rlcf	_counter_step+1,w,c
 16692  000D5C  6EDA               	movwf	fsr2h,c
 16693  000D5E  0E50               	movlw	low _final_number
 16694  000D60  26D9               	addwf	fsr2l,f,c
 16695  000D62  0E01               	movlw	high _final_number
 16696  000D64  22DA               	addwfc	fsr2h,f,c
 16697  000D66  C075  FFDE         	movff	_number,postinc2
 16698  000D6A  C076  FFDD         	movff	_number+1,postdec2
 16699                           
 16700                           ;main.c: 989: state = 3;
 16701  000D6E  0E00               	movlw	0
 16702  000D70  0100               	movlb	0	; () banked
 16703  000D72  6FB2               	movwf	(_state+1)& (0+255),b
 16704  000D74  0E03               	movlw	3
 16705  000D76  6FB1               	movwf	_state& (0+255),b
 16706                           
 16707                           ;main.c: 990: }
 16708  000D78  D01C               	goto	i2l617
 16709  000D7A                     i2l615:
 16710                           
 16711                           ;main.c: 991: else if ( check() == 1){
 16712                           
 16713                           ; BSR set to: 0
 16714  000D7A  ECF3  F02D         	call	_check	;wreg free
 16715  000D7E  0401               	decf	?_check,w,c
 16716  000D80  1002               	iorwf	?_check+1,w,c
 16717  000D82  A4D8               	btfss	status,2,c
 16718  000D84  D016               	goto	i2l617
 16719                           
 16720                           ;main.c: 992: state = 1;
 16721  000D86  0E00               	movlw	0
 16722  000D88  0100               	movlb	0	; () banked
 16723  000D8A  6FB2               	movwf	(_state+1)& (0+255),b
 16724  000D8C  0E01               	movlw	1
 16725  000D8E  6FB1               	movwf	_state& (0+255),b
 16726                           
 16727                           ; BSR set to: 0
 16728                           ;main.c: 993: initLCD();
 16729  000D90  EC2B  F02F         	call	i2_initLCD	;wreg free
 16730                           
 16731                           ;main.c: 996: final_number[counter_step] = number;
 16732  000D94  90D8               	bcf	status,0,c
 16733  000D96  345A               	rlcf	_counter_step,w,c
 16734  000D98  6ED9               	movwf	fsr2l,c
 16735  000D9A  345B               	rlcf	_counter_step+1,w,c
 16736  000D9C  6EDA               	movwf	fsr2h,c
 16737  000D9E  0E50               	movlw	low _final_number
 16738  000DA0  26D9               	addwf	fsr2l,f,c
 16739  000DA2  0E01               	movlw	high _final_number
 16740  000DA4  22DA               	addwfc	fsr2h,f,c
 16741  000DA6  C075  FFDE         	movff	_number,postinc2
 16742  000DAA  C076  FFDD         	movff	_number+1,postdec2
 16743                           
 16744                           ;main.c: 997: counter_step++;
 16745  000DAE  4A5A               	infsnz	_counter_step,f,c
 16746  000DB0  2A5B               	incf	_counter_step+1,f,c
 16747  000DB2                     i2l617:
 16748                           
 16749                           ;main.c: 998: }
 16750                           ;main.c: 1001: }
 16751                           ;main.c: 1003: }
 16752                           ;main.c: 1006: if(state == 4){
 16753  000DB2  0E04               	movlw	4
 16754  000DB4  0100               	movlb	0	; () banked
 16755  000DB6  19B1               	xorwf	_state& (0+255),w,b
 16756  000DB8  11B2               	iorwf	(_state+1)& (0+255),w,b
 16757  000DBA  A4D8               	btfss	status,2,c
 16758  000DBC  D014               	goto	i2l619
 16759                           
 16760                           ; BSR set to: 0
 16761                           ;main.c: 1007: if(keys[keypress] == '#')
 16762  000DBE  5040               	movf	interruptHandler@keypress,w,c
 16763  000DC0  0D01               	mullw	1
 16764  000DC2  0E53               	movlw	low _keys
 16765  000DC4  24F3               	addwf	prodl,w,c
 16766  000DC6  6EF6               	movwf	tblptrl,c
 16767  000DC8  0EFC               	movlw	high _keys
 16768  000DCA  20F4               	addwfc	prodh,w,c
 16769  000DCC  6EF7               	movwf	tblptrh,c
 16770  000DCE                     	if	1	;There are 3 active tblptr bytes
 16771  000DCE  6AF8               	clrf	tblptru,c
 16772  000DD0  0E00               	movlw	low (__mediumconst shr (0+16))
 16773  000DD2  22F8               	addwfc	tblptru,f,c
 16774  000DD4                     	endif
 16775  000DD4  0008               	tblrd		*
 16776  000DD6  50F5               	movf	tablat,w,c
 16777  000DD8  0A23               	xorlw	35
 16778  000DDA  A4D8               	btfss	status,2,c
 16779  000DDC  D004               	goto	i2l619
 16780                           
 16781                           ; BSR set to: 0
 16782                           ;main.c: 1008: state = 5;
 16783  000DDE  0E00               	movlw	0
 16784  000DE0  6FB2               	movwf	(_state+1)& (0+255),b
 16785  000DE2  0E05               	movlw	5
 16786  000DE4  6FB1               	movwf	_state& (0+255),b
 16787  000DE6                     i2l619:
 16788                           
 16789                           ; BSR set to: 0
 16790                           ;main.c: 1009: }
 16791                           ;main.c: 1011: B=0;N=0;S=0;W=0;
 16792                           
 16793                           ; BSR set to: 0
 16794  000DE6  0E00               	movlw	0
 16795  000DE8  6E59               	movwf	_B+1,c
 16796  000DEA  0E00               	movlw	0
 16797  000DEC  6E58               	movwf	_B,c
 16798  000DEE  0E00               	movlw	0
 16799  000DF0  6E57               	movwf	_N+1,c
 16800  000DF2  0E00               	movlw	0
 16801  000DF4  6E56               	movwf	_N,c
 16802  000DF6  0E00               	movlw	0
 16803  000DF8  6E55               	movwf	_S+1,c
 16804  000DFA  0E00               	movlw	0
 16805  000DFC  6E54               	movwf	_S,c
 16806  000DFE  0E00               	movlw	0
 16807  000E00  6E53               	movwf	_W+1,c
 16808  000E02  0E00               	movlw	0
 16809  000E04  6E52               	movwf	_W,c
 16810                           
 16811                           ;main.c: 1012: total_number = 0;
 16812  000E06  0E00               	movlw	0
 16813  000E08  0101               	movlb	1	; () banked
 16814  000E0A  6F8B               	movwf	(_total_number+1)& (0+255),b
 16815  000E0C  0E00               	movlw	0
 16816  000E0E  6F8A               	movwf	_total_number& (0+255),b
 16817  000E10                     i2l8201:
 16818                           
 16819                           ; BSR set to: 1
 16820                           ;main.c: 1014: INT1IF = 0;
 16821  000E10  90F0               	bcf	intcon3,0,c	;volatile
 16822                           
 16823                           ; BSR set to: 1
 16824                           ;main.c: 1015: return;
 16825  000E12  D0C5               	goto	i2l625
 16826  000E14                     i2l559:
 16827                           
 16828                           ;main.c: 1016: }
 16829                           ;main.c: 1026: if (RBIF){
 16830  000E14  A0F2               	btfss	intcon,0,c	;volatile
 16831  000E16  D0B0               	goto	i2l620
 16832                           
 16833                           ;main.c: 1028: B_input = PORTBbits.RB5;
 16834  000E18  AA81               	btfss	3969,5,c	;volatile
 16835  000E1A  D003               	goto	i2u611_40
 16836  000E1C  6A27               	clrf	??_interruptHandler& (0+255),c
 16837  000E1E  2A27               	incf	??_interruptHandler& (0+255),f,c
 16838  000E20  D001               	goto	i2u611_48
 16839  000E22                     i2u611_40:
 16840  000E22  6A27               	clrf	??_interruptHandler& (0+255),c
 16841  000E24                     i2u611_48:
 16842  000E24  5027               	movf	??_interruptHandler,w,c
 16843  000E26  0101               	movlb	1	; () banked
 16844  000E28  6F86               	movwf	_B_input& (0+255),b
 16845  000E2A  6B87               	clrf	(_B_input+1)& (0+255),b
 16846                           
 16847                           ;main.c: 1029: N_input = PORTBbits.RB6;
 16848  000E2C  AC81               	btfss	3969,6,c	;volatile
 16849  000E2E  D003               	goto	i2u612_40
 16850  000E30  6A27               	clrf	??_interruptHandler& (0+255),c
 16851  000E32  2A27               	incf	??_interruptHandler& (0+255),f,c
 16852  000E34  D001               	goto	i2u612_48
 16853  000E36                     i2u612_40:
 16854  000E36  6A27               	clrf	??_interruptHandler& (0+255),c
 16855  000E38                     i2u612_48:
 16856  000E38  5027               	movf	??_interruptHandler,w,c
 16857  000E3A  0101               	movlb	1	; () banked
 16858  000E3C  6F84               	movwf	_N_input& (0+255),b
 16859  000E3E  6B85               	clrf	(_N_input+1)& (0+255),b
 16860                           
 16861                           ;main.c: 1030: S_input = PORTBbits.RB4;
 16862  000E40  A881               	btfss	3969,4,c	;volatile
 16863  000E42  D003               	goto	i2u613_40
 16864  000E44  6A27               	clrf	??_interruptHandler& (0+255),c
 16865  000E46  2A27               	incf	??_interruptHandler& (0+255),f,c
 16866  000E48  D001               	goto	i2u613_48
 16867  000E4A                     i2u613_40:
 16868  000E4A  6A27               	clrf	??_interruptHandler& (0+255),c
 16869  000E4C                     i2u613_48:
 16870  000E4C  5027               	movf	??_interruptHandler,w,c
 16871  000E4E  0101               	movlb	1	; () banked
 16872  000E50  6F82               	movwf	_S_input& (0+255),b
 16873  000E52  6B83               	clrf	(_S_input+1)& (0+255),b
 16874                           
 16875                           ;main.c: 1031: W_input = PORTBbits.RB7;
 16876  000E54  AE81               	btfss	3969,7,c	;volatile
 16877  000E56  D003               	goto	i2u614_40
 16878  000E58  6A27               	clrf	??_interruptHandler& (0+255),c
 16879  000E5A  2A27               	incf	??_interruptHandler& (0+255),f,c
 16880  000E5C  D001               	goto	i2u614_48
 16881  000E5E                     i2u614_40:
 16882  000E5E  6A27               	clrf	??_interruptHandler& (0+255),c
 16883  000E60                     i2u614_48:
 16884  000E60  5027               	movf	??_interruptHandler,w,c
 16885  000E62  0101               	movlb	1	; () banked
 16886  000E64  6F80               	movwf	_W_input& (0+255),b
 16887  000E66  6B81               	clrf	(_W_input+1)& (0+255),b
 16888                           
 16889                           ; BSR set to: 1
 16890                           ;main.c: 1035: if (B_input == 1){
 16891  000E68  0586               	decf	_B_input& (0+255),w,b
 16892  000E6A  1187               	iorwf	(_B_input+1)& (0+255),w,b
 16893  000E6C  A4D8               	btfss	status,2,c
 16894  000E6E  D01A               	goto	i2l621
 16895                           
 16896                           ; BSR set to: 1
 16897                           ;main.c: 1036: B_spacingTime = 0;
 16898  000E70  0E00               	movlw	0
 16899  000E72  0100               	movlb	0	; () banked
 16900  000E74  6F9E               	movwf	(_B_spacingTime+1)& (0+255),b
 16901  000E76  0E00               	movlw	0
 16902  000E78  6F9D               	movwf	_B_spacingTime& (0+255),b
 16903                           
 16904                           ; BSR set to: 0
 16905                           ;main.c: 1037: initLCD();
 16906  000E7A  EC2B  F02F         	call	i2_initLCD	;wreg free
 16907                           
 16908                           ;main.c: 1038: printf("bolt_interrupt");
 16909  000E7E  0E9D               	movlw	low STR_61
 16910  000E80  6E0D               	movwf	i2printf@f,c
 16911  000E82  0EFE               	movlw	high STR_61
 16912  000E84  6E0E               	movwf	i2printf@f+1,c
 16913  000E86  EC4E  F01B         	call	i2_printf	;wreg free
 16914                           
 16915                           ;main.c: 1039: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 16916  000E8A  0E80               	movlw	128
 16917  000E8C  EC15  F031         	call	i2_lcdInst
 16918  000E90  0E34               	movlw	52
 16919  000E92  6E27               	movwf	??_interruptHandler& (0+255),c
 16920  000E94  0EF2               	movlw	242
 16921  000E96                     i2u767_47:
 16922  000E96  2EE8               	decfsz	wreg,f,c
 16923  000E98  D7FE               	bra	i2u767_47
 16924  000E9A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16925  000E9C  D7FC               	bra	i2u767_47
 16926                           
 16927                           ;main.c: 1040: B_counter++;
 16928  000E9E  0100               	movlb	0	; () banked
 16929  000EA0  4BAD               	infsnz	_B_counter& (0+255),f,b
 16930  000EA2  2BAE               	incf	(_B_counter+1)& (0+255),f,b
 16931  000EA4                     i2l621:
 16932                           
 16933                           ;main.c: 1042: }
 16934                           ;main.c: 1045: if (N_input == 1){
 16935                           
 16936                           ; BSR set to: 0
 16937  000EA4  0101               	movlb	1	; () banked
 16938  000EA6  0584               	decf	_N_input& (0+255),w,b
 16939  000EA8  1185               	iorwf	(_N_input+1)& (0+255),w,b
 16940  000EAA  A4D8               	btfss	status,2,c
 16941  000EAC  D01A               	goto	i2l622
 16942                           
 16943                           ; BSR set to: 1
 16944                           ;main.c: 1046: N_spacingTime = 0;
 16945  000EAE  0E00               	movlw	0
 16946  000EB0  0100               	movlb	0	; () banked
 16947  000EB2  6F9C               	movwf	(_N_spacingTime+1)& (0+255),b
 16948  000EB4  0E00               	movlw	0
 16949  000EB6  6F9B               	movwf	_N_spacingTime& (0+255),b
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;main.c: 1047: initLCD();
 16953  000EB8  EC2B  F02F         	call	i2_initLCD	;wreg free
 16954                           
 16955                           ;main.c: 1048: printf("nut_interrupt");
 16956  000EBC  0EF4               	movlw	low STR_62
 16957  000EBE  6E0D               	movwf	i2printf@f,c
 16958  000EC0  0EFE               	movlw	high STR_62
 16959  000EC2  6E0E               	movwf	i2printf@f+1,c
 16960  000EC4  EC4E  F01B         	call	i2_printf	;wreg free
 16961                           
 16962                           ;main.c: 1049: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 16963  000EC8  0E80               	movlw	128
 16964  000ECA  EC15  F031         	call	i2_lcdInst
 16965  000ECE  0E34               	movlw	52
 16966  000ED0  6E27               	movwf	??_interruptHandler& (0+255),c
 16967  000ED2  0EF2               	movlw	242
 16968  000ED4                     i2u768_47:
 16969  000ED4  2EE8               	decfsz	wreg,f,c
 16970  000ED6  D7FE               	bra	i2u768_47
 16971  000ED8  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 16972  000EDA  D7FC               	bra	i2u768_47
 16973                           
 16974                           ;main.c: 1050: N_counter++;
 16975  000EDC  0100               	movlb	0	; () banked
 16976  000EDE  4BA9               	infsnz	_N_counter& (0+255),f,b
 16977  000EE0  2BAA               	incf	(_N_counter+1)& (0+255),f,b
 16978  000EE2                     i2l622:
 16979                           
 16980                           ;main.c: 1051: }
 16981                           ;main.c: 1053: if (S_input == 1){
 16982                           
 16983                           ; BSR set to: 0
 16984  000EE2  0101               	movlb	1	; () banked
 16985  000EE4  0582               	decf	_S_input& (0+255),w,b
 16986  000EE6  1183               	iorwf	(_S_input+1)& (0+255),w,b
 16987  000EE8  A4D8               	btfss	status,2,c
 16988  000EEA  D019               	goto	i2l623
 16989                           
 16990                           ; BSR set to: 1
 16991                           ;main.c: 1054: S_spacingTime = 0;
 16992  000EEC  0E00               	movlw	0
 16993  000EEE  0100               	movlb	0	; () banked
 16994  000EF0  6F9A               	movwf	(_S_spacingTime+1)& (0+255),b
 16995  000EF2  0E00               	movlw	0
 16996  000EF4  6F99               	movwf	_S_spacingTime& (0+255),b
 16997                           
 16998                           ; BSR set to: 0
 16999                           ;main.c: 1055: S_counter++;
 17000  000EF6  4BAB               	infsnz	_S_counter& (0+255),f,b
 17001  000EF8  2BAC               	incf	(_S_counter+1)& (0+255),f,b
 17002                           
 17003                           ; BSR set to: 0
 17004                           ;main.c: 1056: initLCD();
 17005  000EFA  EC2B  F02F         	call	i2_initLCD	;wreg free
 17006                           
 17007                           ;main.c: 1058: printf("spacer_interrupted");
 17008  000EFE  0E7E               	movlw	low STR_63
 17009  000F00  6E0D               	movwf	i2printf@f,c
 17010  000F02  0EFD               	movlw	high STR_63
 17011  000F04  6E0E               	movwf	i2printf@f+1,c
 17012  000F06  EC4E  F01B         	call	i2_printf	;wreg free
 17013                           
 17014                           ;main.c: 1059: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 17015  000F0A  0E80               	movlw	128
 17016  000F0C  EC15  F031         	call	i2_lcdInst
 17017  000F10  0E34               	movlw	52
 17018  000F12  6E27               	movwf	??_interruptHandler& (0+255),c
 17019  000F14  0EF2               	movlw	242
 17020  000F16                     i2u769_47:
 17021  000F16  2EE8               	decfsz	wreg,f,c
 17022  000F18  D7FE               	bra	i2u769_47
 17023  000F1A  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 17024  000F1C  D7FC               	bra	i2u769_47
 17025  000F1E                     i2l623:
 17026                           
 17027                           ;main.c: 1060: }
 17028                           ;main.c: 1062: if (W_input == 1){
 17029  000F1E  0101               	movlb	1	; () banked
 17030  000F20  0580               	decf	_W_input& (0+255),w,b
 17031  000F22  1181               	iorwf	(_W_input+1)& (0+255),w,b
 17032  000F24  A4D8               	btfss	status,2,c
 17033  000F26  D01A               	goto	i2l624
 17034                           
 17035                           ; BSR set to: 1
 17036                           ;main.c: 1063: W_spacingTime = 0;
 17037  000F28  0E00               	movlw	0
 17038  000F2A  0100               	movlb	0	; () banked
 17039  000F2C  6F98               	movwf	(_W_spacingTime+1)& (0+255),b
 17040  000F2E  0E00               	movlw	0
 17041  000F30  6F97               	movwf	_W_spacingTime& (0+255),b
 17042                           
 17043                           ; BSR set to: 0
 17044                           ;main.c: 1064: initLCD();
 17045  000F32  EC2B  F02F         	call	i2_initLCD	;wreg free
 17046                           
 17047                           ;main.c: 1065: printf("washer_interrupted");
 17048  000F36  0E91               	movlw	low STR_64
 17049  000F38  6E0D               	movwf	i2printf@f,c
 17050  000F3A  0EFD               	movlw	high STR_64
 17051  000F3C  6E0E               	movwf	i2printf@f+1,c
 17052  000F3E  EC4E  F01B         	call	i2_printf	;wreg free
 17053                           
 17054                           ;main.c: 1066: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 17055  000F42  0E80               	movlw	128
 17056  000F44  EC15  F031         	call	i2_lcdInst
 17057  000F48  0E34               	movlw	52
 17058  000F4A  6E27               	movwf	??_interruptHandler& (0+255),c
 17059  000F4C  0EF2               	movlw	242
 17060  000F4E                     i2u770_47:
 17061  000F4E  2EE8               	decfsz	wreg,f,c
 17062  000F50  D7FE               	bra	i2u770_47
 17063  000F52  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 17064  000F54  D7FC               	bra	i2u770_47
 17065                           
 17066                           ;main.c: 1067: W_counter++;
 17067  000F56  0100               	movlb	0	; () banked
 17068  000F58  4BA7               	infsnz	_W_counter& (0+255),f,b
 17069  000F5A  2BA8               	incf	(_W_counter+1)& (0+255),f,b
 17070  000F5C                     i2l624:
 17071                           
 17072                           ;main.c: 1070: }
 17073                           ;main.c: 1071: initLCD();
 17074                           
 17075                           ; BSR set to: 0
 17076  000F5C  EC2B  F02F         	call	i2_initLCD	;wreg free
 17077                           
 17078                           ;main.c: 1073: lcdInst(0x80);_delay((unsigned long)((5)*(32000000/4000.0)));;
 17079  000F60  0E80               	movlw	128
 17080  000F62  EC15  F031         	call	i2_lcdInst
 17081  000F66  0E34               	movlw	52
 17082  000F68  6E27               	movwf	??_interruptHandler& (0+255),c
 17083  000F6A  0EF2               	movlw	242
 17084  000F6C                     i2u771_47:
 17085  000F6C  2EE8               	decfsz	wreg,f,c
 17086  000F6E  D7FE               	bra	i2u771_47
 17087  000F70  2E27               	decfsz	??_interruptHandler& (0+255),f,c
 17088  000F72  D7FC               	bra	i2u771_47
 17089                           
 17090                           ;main.c: 1079: RBIF = 0;
 17091  000F74  90F2               	bcf	intcon,0,c	;volatile
 17092                           
 17093                           ;main.c: 1080: return;
 17094  000F76  D013               	goto	i2l625
 17095  000F78                     i2l620:
 17096                           
 17097                           ;main.c: 1081: }
 17098                           ;main.c: 1082: if(TMR0IE && TMR0IF){
 17099  000F78  BAF2               	btfsc	intcon,5,c	;volatile
 17100  000F7A  A4F2               	btfss	intcon,2,c	;volatile
 17101  000F7C  D010               	goto	i2l625
 17102                           
 17103                           ;main.c: 1083: timerCounter ++;
 17104  000F7E  2A6A               	incf	_timerCounter,f,c	;volatile
 17105                           
 17106                           ;main.c: 1084: if (timerCounter >= 19){
 17107  000F80  0E12               	movlw	18
 17108  000F82  646A               	cpfsgt	_timerCounter,c	;volatile
 17109  000F84  D003               	goto	i2l626
 17110                           
 17111                           ;main.c: 1085: NeedToCloseLid = 1;
 17112  000F86  0E01               	movlw	1
 17113  000F88  0100               	movlb	0	; () banked
 17114  000F8A  6FBA               	movwf	_NeedToCloseLid& (0+255),b
 17115  000F8C                     i2l626:
 17116                           
 17117                           ;main.c: 1086: }
 17118                           ;main.c: 1087: if(timerCounter >= 21){
 17119                           
 17120                           ; BSR set to: 0
 17121  000F8C  0E14               	movlw	20
 17122  000F8E  646A               	cpfsgt	_timerCounter,c	;volatile
 17123  000F90  D005               	goto	i2l627
 17124                           
 17125                           ;main.c: 1088: timerCounter = 0;
 17126  000F92  0E00               	movlw	0
 17127  000F94  6E6A               	movwf	_timerCounter,c	;volatile
 17128                           
 17129                           ;main.c: 1089: EndOfProgram = 1;
 17130  000F96  0E01               	movlw	1
 17131  000F98  0100               	movlb	0	; () banked
 17132  000F9A  6FBB               	movwf	_EndOfProgram& (0+255),b
 17133  000F9C                     i2l627:
 17134                           
 17135                           ;main.c: 1090: }
 17136                           ;main.c: 1092: TMR0IF = 0;
 17137                           
 17138                           ; BSR set to: 0
 17139  000F9C  94F2               	bcf	intcon,2,c	;volatile
 17140  000F9E                     i2l625:
 17141  000F9E  C03D  F082         	movff	??_interruptHandler+22,btemp+3
 17142  000FA2  C03C  F081         	movff	??_interruptHandler+21,btemp+2
 17143  000FA6  C03B  F080         	movff	??_interruptHandler+20,btemp+1
 17144  000FAA  C03A  F07F         	movff	??_interruptHandler+19,btemp
 17145  000FAE  C039  FFF5         	movff	??_interruptHandler+18,tablat
 17146  000FB2  C038  FFF8         	movff	??_interruptHandler+17,tblptru
 17147  000FB6  C037  FFF7         	movff	??_interruptHandler+16,tblptrh
 17148  000FBA  C036  FFF6         	movff	??_interruptHandler+15,tblptrl
 17149  000FBE  C035  FFF4         	movff	??_interruptHandler+14,prodh
 17150  000FC2  C034  FFF3         	movff	??_interruptHandler+13,prodl
 17151  000FC6  C033  FFDA         	movff	??_interruptHandler+12,fsr2h
 17152  000FCA  C032  FFD9         	movff	??_interruptHandler+11,fsr2l
 17153  000FCE  C031  FFE2         	movff	??_interruptHandler+10,fsr1h
 17154  000FD2  C030  FFE1         	movff	??_interruptHandler+9,fsr1l
 17155  000FD6  C02F  FFEA         	movff	??_interruptHandler+8,fsr0h
 17156  000FDA  C02E  FFE9         	movff	??_interruptHandler+7,fsr0l
 17157  000FDE  C02D  FFFB         	movff	??_interruptHandler+6,pclatu
 17158  000FE2  C02C  FFFA         	movff	??_interruptHandler+5,pclath
 17159  000FE6  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17160  000FE8  0011               	retfie		f
 17161  000FEA                     __end_of_interruptHandler:
 17162                           	opt stack 0
 17163                           pclatu	equ	0xFFB
 17164                           pclath	equ	0xFFA
 17165                           tblptru	equ	0xFF8
 17166                           tblptrh	equ	0xFF7
 17167                           tblptrl	equ	0xFF6
 17168                           tablat	equ	0xFF5
 17169                           prodh	equ	0xFF4
 17170                           prodl	equ	0xFF3
 17171                           intcon	equ	0xFF2
 17172                           intcon3	equ	0xFF0
 17173                           indf0	equ	0xFEF
 17174                           postinc0	equ	0xFEE
 17175                           fsr0h	equ	0xFEA
 17176                           fsr0l	equ	0xFE9
 17177                           wreg	equ	0xFE8
 17178                           postdec1	equ	0xFE5
 17179                           fsr1h	equ	0xFE2
 17180                           fsr1l	equ	0xFE1
 17181                           indf2	equ	0xFDF
 17182                           postinc2	equ	0xFDE
 17183                           postdec2	equ	0xFDD
 17184                           fsr2h	equ	0xFDA
 17185                           fsr2l	equ	0xFD9
 17186                           status	equ	0xFD8
 17187                           
 17188 ;; *************** function i2_printf *****************
 17189 ;; Defined at:
 17190 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 17191 ;; Parameters:    Size  Location     Type
 17192 ;;  f               2   12[COMRAM] PTR const unsigned char 
 17193 ;;		 -> STR_77(5), STR_76(5), STR_75(5), STR_74(5), 
 17194 ;;		 -> STR_73(19), STR_72(20), STR_71(20), STR_70(20), 
 17195 ;;		 -> STR_69(5), STR_68(5), STR_67(5), STR_66(5), 
 17196 ;;		 -> STR_65(3), STR_64(19), STR_63(19), STR_62(14), 
 17197 ;;		 -> STR_61(15), STR_60(9), STR_59(12), STR_58(14), 
 17198 ;;		 -> STR_56(7), STR_54(3), STR_53(11), STR_51(3), 
 17199 ;;		 -> STR_50(9), STR_45(15), STR_44(5), STR_43(17), 
 17200 ;;		 -> STR_42(17), STR_41(14), STR_40(15), STR_39(12), 
 17201 ;;		 -> STR_38(12), STR_37(17), STR_36(13), STR_35(16), 
 17202 ;;		 -> STR_34(15), STR_33(15), STR_32(15), STR_31(15), 
 17203 ;;		 -> STR_30(9), STR_29(10), STR_28(19), STR_27(17), 
 17204 ;;		 -> STR_26(17), STR_25(17), STR_24(14), STR_23(15), 
 17205 ;;		 -> STR_22(11), STR_21(11), STR_20(9), STR_19(15), 
 17206 ;;		 -> STR_18(12), STR_17(12), STR_16(7), STR_15(16), 
 17207 ;;		 -> STR_14(18), STR_13(3), STR_12(2), STR_11(3), 
 17208 ;;		 -> STR_10(2), STR_9(3), STR_8(5), STR_7(17), 
 17209 ;;		 -> STR_6(8), STR_5(3), STR_4(14), STR_3(15), 
 17210 ;;		 -> STR_2(20), STR_1(16), 
 17211 ;; Auto vars:     Size  Location     Type
 17212 ;;  printf          4    0        struct .
 17213 ;;  printf          2   35[COMRAM] int 
 17214 ;;  printf          2   32[COMRAM] unsigned int 
 17215 ;;  printf          2   30[COMRAM] unsigned int 
 17216 ;;  printf          2   28[COMRAM] PTR void [1]
 17217 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17218 ;;  printf          2   26[COMRAM] PTR const unsigned char 
 17219 ;;		 -> STR_98(7), number(2), final_set(40), current_set(5), 
 17220 ;;  printf          1   37[COMRAM] char 
 17221 ;;  printf          1   34[COMRAM] unsigned char 
 17222 ;;  printf          1   25[COMRAM] char 
 17223 ;;  printf          1   24[COMRAM] unsigned char 
 17224 ;; Return value:  Size  Location     Type
 17225 ;;                  2   12[COMRAM] int 
 17226 ;; Registers used:
 17227 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17228 ;; Tracked objects:
 17229 ;;		On entry : 0/0
 17230 ;;		On exit  : 0/0
 17231 ;;		Unchanged: 0/0
 17232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17233 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17234 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17235 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17236 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17237 ;;Total ram usage:       26 bytes
 17238 ;; Hardware stack levels used:    1
 17239 ;; Hardware stack levels required when called:    2
 17240 ;; This function calls:
 17241 ;;		i2___lwdiv
 17242 ;;		i2___lwmod
 17243 ;;		i2___wmul
 17244 ;;		i2_isdigit
 17245 ;;		i2_putch
 17246 ;; This function is called by:
 17247 ;;		_interruptHandler
 17248 ;; This function uses a non-reentrant model
 17249 ;;
 17250                           
 17251                           	psect	text44
 17252  00369C                     __ptext44:
 17253                           	opt stack 0
 17254  00369C                     i2_printf:
 17255                           	opt stack 21
 17256                           
 17257                           ;doprnt.c: 466: va_list ap;
 17258                           ;doprnt.c: 499: signed char c;
 17259                           ;doprnt.c: 501: int width;
 17260                           ;doprnt.c: 506: signed char prec;
 17261                           ;doprnt.c: 508: unsigned char flag;
 17262                           ;doprnt.c: 523: union {
 17263                           ;doprnt.c: 524: unsigned long vd;
 17264                           ;doprnt.c: 525: double integ;
 17265                           ;doprnt.c: 526: } tmpval;
 17266                           ;doprnt.c: 528: unsigned int val;
 17267                           ;doprnt.c: 529: unsigned len;
 17268                           ;doprnt.c: 530: const char * cp;
 17269                           ;doprnt.c: 533: *ap = __va_start();
 17270                           
 17271                           ;incstack = 0
 17272  00369C  0E0F               	movlw	low (?i2_printf+2)
 17273  00369E  6E1D               	movwf	i2printf@ap,c
 17274  0036A0  0E00               	movlw	high (?i2_printf+2)
 17275  0036A2  6E1E               	movwf	i2printf@ap+1,c
 17276                           
 17277                           ;doprnt.c: 536: while(c = *f++) {
 17278  0036A4  D1FA               	goto	i2u518_40
 17279  0036A6                     
 17280                           ;doprnt.c: 538: if(c != '%')
 17281  0036A6  0E25               	movlw	37
 17282  0036A8  1826               	xorwf	i2printf@c,w,c
 17283  0036AA  B4D8               	btfsc	status,2,c
 17284  0036AC  D004               	goto	i2l1393
 17285                           
 17286                           ;doprnt.c: 540: {
 17287                           ;doprnt.c: 541: (putch(c) );
 17288  0036AE  5026               	movf	i2printf@c,w,c
 17289  0036B0  EC0B  F031         	call	i2_putch
 17290                           
 17291                           ;doprnt.c: 542: continue;
 17292  0036B4  D1F2               	goto	i2u518_40
 17293  0036B6                     i2l1393:
 17294                           
 17295                           ;doprnt.c: 543: }
 17296                           ;doprnt.c: 546: width = 0;
 17297  0036B6  0E00               	movlw	0
 17298  0036B8  6E25               	movwf	i2printf@width+1,c
 17299  0036BA  0E00               	movlw	0
 17300  0036BC  6E24               	movwf	i2printf@width,c
 17301                           
 17302                           ;doprnt.c: 548: flag = 0;
 17303  0036BE  0E00               	movlw	0
 17304  0036C0  6E23               	movwf	i2printf@flag,c
 17305                           
 17306                           ;doprnt.c: 551: switch(*f) {
 17307                           
 17308                           ;doprnt.c: 550: for(;;) {
 17309  0036C2  D003               	goto	i2l1395
 17310  0036C4                     
 17311                           ;doprnt.c: 580: flag |= 0x04;
 17312  0036C4  8423               	bsf	i2printf@flag,2,c
 17313                           
 17314                           ;doprnt.c: 581: f++;
 17315  0036C6  4A0D               	infsnz	i2printf@f,f,c
 17316  0036C8  2A0E               	incf	i2printf@f+1,f,c
 17317  0036CA                     i2l1395:
 17318  0036CA  C00D  FFF6         	movff	i2printf@f,tblptrl
 17319  0036CE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17320  0036D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17321  0036D2  6AF8               	clrf	tblptru,c
 17322  0036D4                     	endif
 17323  0036D4                     	if	0	;tblptru may be non-zero
 17324  0036D4                     	endif
 17325  0036D4  0008               	tblrd		*
 17326  0036D6  50F5               	movf	tablat,w,c
 17327                           
 17328                           ; Switch size 1, requested type "space"
 17329                           ; Number of cases is 1, Range of values is 48 to 48
 17330                           ; switch strategies available:
 17331                           ; Name         Instructions Cycles
 17332                           ; simple_byte            4     3 (average)
 17333                           ;	Chosen strategy is simple_byte
 17334  0036D8  0A30               	xorlw	48	; case 48
 17335  0036DA  B4D8               	btfsc	status,2,c
 17336  0036DC  D7F3               	goto	i2l1396
 17337                           
 17338                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17339                           
 17340                           ;doprnt.c: 586: }
 17341                           
 17342                           ;doprnt.c: 585: break;
 17343  0036DE  C00D  FFF6         	movff	i2printf@f,tblptrl
 17344  0036E2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17345  0036E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17346  0036E6  6AF8               	clrf	tblptru,c
 17347  0036E8                     	endif
 17348  0036E8                     	if	0	;tblptru may be non-zero
 17349  0036E8                     	endif
 17350  0036E8  0008               	tblrd		*
 17351  0036EA  50F5               	movf	tablat,w,c
 17352  0036EC  ECD0  F030         	call	i2_isdigit
 17353  0036F0  A0D8               	btfss	status,0,c
 17354  0036F2  D0A6               	goto	i2l1403
 17355                           
 17356                           ;doprnt.c: 598: width = 0;
 17357  0036F4  0E00               	movlw	0
 17358  0036F6  6E25               	movwf	i2printf@width+1,c
 17359  0036F8  0E00               	movlw	0
 17360  0036FA  6E24               	movwf	i2printf@width,c
 17361  0036FC                     
 17362                           ;doprnt.c: 600: width *= 10;
 17363  0036FC  C024  F001         	movff	i2printf@width,i2___wmul@multiplier
 17364  003700  C025  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 17365  003704  0E00               	movlw	0
 17366  003706  6E04               	movwf	i2___wmul@multiplicand+1,c
 17367  003708  0E0A               	movlw	10
 17368  00370A  6E03               	movwf	i2___wmul@multiplicand,c
 17369  00370C  EC9A  F030         	call	i2___wmul	;wreg free
 17370  003710  C001  F024         	movff	?i2___wmul,i2printf@width
 17371  003714  C002  F025         	movff	?i2___wmul+1,i2printf@width+1
 17372                           
 17373                           ;doprnt.c: 601: width += *f++ - '0';
 17374  003718  0ED0               	movlw	208
 17375  00371A  6E15               	movwf	??i2_printf& (0+255),c
 17376  00371C  0EFF               	movlw	255
 17377  00371E  6E16               	movwf	(??i2_printf+1)& (0+255),c
 17378  003720  C00D  FFF6         	movff	i2printf@f,tblptrl
 17379  003724  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17380  003728                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17381  003728  6AF8               	clrf	tblptru,c
 17382  00372A                     	endif
 17383  00372A                     	if	0	;tblptru may be non-zero
 17384  00372A                     	endif
 17385  00372A  0008               	tblrd		*
 17386  00372C  50F5               	movf	tablat,w,c
 17387  00372E  6E17               	movwf	(??i2_printf+2)& (0+255),c
 17388  003730  6A18               	clrf	(??i2_printf+3)& (0+255),c
 17389  003732  5015               	movf	??i2_printf,w,c
 17390  003734  2617               	addwf	??i2_printf+2,f,c
 17391  003736  5016               	movf	??i2_printf+1,w,c
 17392  003738  2218               	addwfc	??i2_printf+3,f,c
 17393  00373A  5017               	movf	??i2_printf+2,w,c
 17394  00373C  2624               	addwf	i2printf@width,f,c
 17395  00373E  5018               	movf	??i2_printf+3,w,c
 17396  003740  2225               	addwfc	i2printf@width+1,f,c
 17397  003742  4A0D               	infsnz	i2printf@f,f,c
 17398  003744  2A0E               	incf	i2printf@f+1,f,c
 17399                           
 17400                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17401  003746  C00D  FFF6         	movff	i2printf@f,tblptrl
 17402  00374A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17403  00374E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17404  00374E  6AF8               	clrf	tblptru,c
 17405  003750                     	endif
 17406  003750                     	if	0	;tblptru may be non-zero
 17407  003750                     	endif
 17408  003750  0008               	tblrd		*
 17409  003752  50F5               	movf	tablat,w,c
 17410  003754  ECD0  F030         	call	i2_isdigit
 17411  003758  A0D8               	btfss	status,0,c
 17412  00375A  D072               	goto	i2l1403
 17413  00375C  D7CF               	goto	i2l1401
 17414  00375E                     
 17415                           ;doprnt.c: 721: flag |= 0x80;
 17416  00375E  8E23               	bsf	i2printf@flag,7,c
 17417                           
 17418                           ;doprnt.c: 723: break;
 17419  003760  D08A               	goto	i2l1408
 17420  003762                     
 17421                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17422  003762  C01D  FFD9         	movff	i2printf@ap,fsr2l
 17423  003766  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 17424  00376A  CFDE F01B          	movff	postinc2,i2printf@cp
 17425  00376E  CFDD F01C          	movff	postdec2,i2printf@cp+1
 17426  003772  0E02               	movlw	2
 17427  003774  261D               	addwf	i2printf@ap,f,c
 17428  003776  0E00               	movlw	0
 17429  003778  221E               	addwfc	i2printf@ap+1,f,c
 17430                           
 17431                           ;doprnt.c: 740: if(!cp)
 17432  00377A  501B               	movf	i2printf@cp,w,c
 17433  00377C  101C               	iorwf	i2printf@cp+1,w,c
 17434  00377E  A4D8               	btfss	status,2,c
 17435  003780  D004               	goto	i2l1411
 17436                           
 17437                           ;doprnt.c: 741: cp = "(null)";
 17438  003782  0E97               	movlw	low STR_98
 17439  003784  6E1B               	movwf	i2printf@cp,c
 17440  003786  0EFF               	movlw	high STR_98
 17441  003788  6E1C               	movwf	i2printf@cp+1,c
 17442  00378A                     i2l1411:
 17443                           
 17444                           ;doprnt.c: 745: len = 0;
 17445  00378A  0E00               	movlw	0
 17446  00378C  6E20               	movwf	i2printf@len+1,c
 17447  00378E  0E00               	movlw	0
 17448  003790  6E1F               	movwf	i2printf@len,c
 17449                           
 17450                           ;doprnt.c: 746: while(cp[len])
 17451  003792  D002               	goto	i2l1412
 17452  003794                     
 17453                           ;doprnt.c: 747: len++;
 17454  003794  4A1F               	infsnz	i2printf@len,f,c
 17455  003796  2A20               	incf	i2printf@len+1,f,c
 17456  003798                     i2l1412:
 17457  003798  501F               	movf	i2printf@len,w,c
 17458  00379A  241B               	addwf	i2printf@cp,w,c
 17459  00379C  6E15               	movwf	??i2_printf& (0+255),c
 17460  00379E  5020               	movf	i2printf@len+1,w,c
 17461  0037A0  201C               	addwfc	i2printf@cp+1,w,c
 17462  0037A2  6E16               	movwf	(??i2_printf+1)& (0+255),c
 17463  0037A4  C015  FFF6         	movff	??i2_printf,tblptrl
 17464  0037A8  C016  FFF7         	movff	??i2_printf+1,tblptrh
 17465  0037AC  0E00               	movlw	low (__mediumconst shr (0+16))
 17466  0037AE  6EF8               	movwf	tblptru,c
 17467  0037B0  0E0F               	movlw	(high __ramtop+-1)
 17468  0037B2  64F7               	cpfsgt	tblptrh,c
 17469  0037B4  D003               	bra	i2u494_47
 17470  0037B6  0008               	tblrd		*
 17471  0037B8  50F5               	movf	tablat,w,c
 17472  0037BA  D005               	bra	i2u494_40
 17473  0037BC                     i2u494_47:
 17474  0037BC  CFF6 FFE9          	movff	tblptrl,fsr0l
 17475  0037C0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17476  0037C4  50EF               	movf	indf0,w,c
 17477  0037C6                     i2u494_40:
 17478  0037C6  0900               	iorlw	0
 17479  0037C8  A4D8               	btfss	status,2,c
 17480  0037CA  D7E4               	goto	i2l1413
 17481                           
 17482                           ;doprnt.c: 757: if(width > len)
 17483  0037CC  5024               	movf	i2printf@width,w,c
 17484  0037CE  5C1F               	subwf	i2printf@len,w,c
 17485  0037D0  5025               	movf	i2printf@width+1,w,c
 17486  0037D2  5820               	subwfb	i2printf@len+1,w,c
 17487  0037D4  B0D8               	btfsc	status,0,c
 17488  0037D6  D005               	goto	i2l1415
 17489                           
 17490                           ;doprnt.c: 758: width -= len;
 17491  0037D8  501F               	movf	i2printf@len,w,c
 17492  0037DA  5E24               	subwf	i2printf@width,f,c
 17493  0037DC  5020               	movf	i2printf@len+1,w,c
 17494  0037DE  5A25               	subwfb	i2printf@width+1,f,c
 17495  0037E0  D008               	goto	i2l1417
 17496  0037E2                     i2l1415:
 17497                           
 17498                           ;doprnt.c: 759: else
 17499                           ;doprnt.c: 760: width = 0;
 17500  0037E2  0E00               	movlw	0
 17501  0037E4  6E25               	movwf	i2printf@width+1,c
 17502  0037E6  0E00               	movlw	0
 17503  0037E8  6E24               	movwf	i2printf@width,c
 17504                           
 17505                           ;doprnt.c: 764: while(width--)
 17506  0037EA  D003               	goto	i2l1417
 17507  0037EC                     i2l7131:
 17508                           
 17509                           ;doprnt.c: 765: (putch(' ') );
 17510  0037EC  0E20               	movlw	32
 17511  0037EE  EC0B  F031         	call	i2_putch
 17512  0037F2                     i2l1417:
 17513  0037F2  0624               	decf	i2printf@width,f,c
 17514  0037F4  A0D8               	btfss	status,0,c
 17515  0037F6  0625               	decf	i2printf@width+1,f,c
 17516  0037F8  2824               	incf	i2printf@width,w,c
 17517  0037FA  E1F8               	bnz	i2l7131
 17518  0037FC  2825               	incf	i2printf@width+1,w,c
 17519  0037FE  B4D8               	btfsc	status,2,c
 17520  003800  D016               	goto	i2l1420
 17521  003802  D7F4               	goto	i2l1418
 17522  003804                     i2l7135:
 17523                           
 17524                           ;doprnt.c: 768: (putch(*cp++) );
 17525  003804  C01B  FFF6         	movff	i2printf@cp,tblptrl
 17526  003808  C01C  FFF7         	movff	i2printf@cp+1,tblptrh
 17527  00380C  0E00               	movlw	low (__mediumconst shr (0+16))
 17528  00380E  6EF8               	movwf	tblptru,c
 17529  003810  0E0F               	movlw	(high __ramtop+-1)
 17530  003812  64F7               	cpfsgt	tblptrh,c
 17531  003814  D003               	bra	i2u498_47
 17532  003816  0008               	tblrd		*
 17533  003818  50F5               	movf	tablat,w,c
 17534  00381A  D005               	bra	i2u498_40
 17535  00381C                     i2u498_47:
 17536  00381C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17537  003820  CFF7 FFEA          	movff	tblptrh,fsr0h
 17538  003824  50EF               	movf	indf0,w,c
 17539  003826                     i2u498_40:
 17540  003826  EC0B  F031         	call	i2_putch
 17541  00382A  4A1B               	infsnz	i2printf@cp,f,c
 17542  00382C  2A1C               	incf	i2printf@cp+1,f,c
 17543  00382E                     i2l1420:
 17544  00382E  061F               	decf	i2printf@len,f,c
 17545  003830  A0D8               	btfss	status,0,c
 17546  003832  0620               	decf	i2printf@len+1,f,c
 17547  003834  281F               	incf	i2printf@len,w,c
 17548  003836  E1E6               	bnz	i2l7135
 17549  003838  2820               	incf	i2printf@len+1,w,c
 17550  00383A  B4D8               	btfsc	status,2,c
 17551  00383C  D12E               	goto	i2u518_40
 17552  00383E  D7E2               	goto	i2l1421
 17553  003840                     i2l1403:
 17554  003840  C00D  FFF6         	movff	i2printf@f,tblptrl
 17555  003844  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17556  003848  4A0D               	infsnz	i2printf@f,f,c
 17557  00384A  2A0E               	incf	i2printf@f+1,f,c
 17558  00384C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17559  00384C  6AF8               	clrf	tblptru,c
 17560  00384E                     	endif
 17561  00384E                     	if	0	;tblptru may be non-zero
 17562  00384E                     	endif
 17563  00384E  0008               	tblrd		*
 17564  003850  CFF5 F026          	movff	tablat,i2printf@c
 17565  003854  5026               	movf	i2printf@c,w,c
 17566                           
 17567                           ; Switch size 1, requested type "space"
 17568                           ; Number of cases is 5, Range of values is 0 to 120
 17569                           ; switch strategies available:
 17570                           ; Name         Instructions Cycles
 17571                           ; simple_byte           16     9 (average)
 17572                           ;	Chosen strategy is simple_byte
 17573  003856  0A00               	xorlw	0	; case 0
 17574  003858  B4D8               	btfsc	status,2,c
 17575  00385A  0012               	return	
 17576  00385C  0A64               	xorlw	100	; case 100
 17577  00385E  B4D8               	btfsc	status,2,c
 17578  003860  D00A               	goto	i2l1408
 17579  003862  0A0D               	xorlw	13	; case 105
 17580  003864  B4D8               	btfsc	status,2,c
 17581  003866  D007               	goto	i2l1408
 17582  003868  0A1A               	xorlw	26	; case 115
 17583  00386A  B4D8               	btfsc	status,2,c
 17584  00386C  D77A               	goto	i2l1410
 17585  00386E  0A0B               	xorlw	11	; case 120
 17586  003870  B4D8               	btfsc	status,2,c
 17587  003872  D775               	goto	i2l1409
 17588  003874  D112               	goto	i2u518_40
 17589  003876                     i2l1408:
 17590                           
 17591                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 17592  003876  BE23               	btfsc	i2printf@flag,7,c
 17593  003878  D015               	goto	i2l1424
 17594                           
 17595                           ;doprnt.c: 1253: {
 17596                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17597  00387A  C01D  FFD9         	movff	i2printf@ap,fsr2l
 17598  00387E  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 17599  003882  CFDE F021          	movff	postinc2,i2printf@val
 17600  003886  CFDD F022          	movff	postdec2,i2printf@val+1
 17601  00388A  0E02               	movlw	2
 17602  00388C  261D               	addwf	i2printf@ap,f,c
 17603  00388E  0E00               	movlw	0
 17604  003890  221E               	addwfc	i2printf@ap+1,f,c
 17605                           
 17606                           ;doprnt.c: 1261: if((int)val < 0) {
 17607  003892  AE22               	btfss	i2printf@val+1,7,c
 17608  003894  D04A               	goto	i2l1427
 17609                           
 17610                           ;doprnt.c: 1262: flag |= 0x03;
 17611  003896  0E03               	movlw	3
 17612  003898  1223               	iorwf	i2printf@flag,f,c
 17613                           
 17614                           ;doprnt.c: 1263: val = -val;
 17615  00389A  6C21               	negf	i2printf@val,c
 17616  00389C  1E22               	comf	i2printf@val+1,f,c
 17617  00389E  B0D8               	btfsc	status,0,c
 17618  0038A0  2A22               	incf	i2printf@val+1,f,c
 17619                           
 17620                           ;doprnt.c: 1264: }
 17621                           ;doprnt.c: 1266: }
 17622  0038A2  D043               	goto	i2l1427
 17623  0038A4                     i2l1424:
 17624                           
 17625                           ;doprnt.c: 1268: else
 17626                           ;doprnt.c: 1273: {
 17627                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17628  0038A4  C01D  FFD9         	movff	i2printf@ap,fsr2l
 17629  0038A8  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
 17630  0038AC  CFDE F021          	movff	postinc2,i2printf@val
 17631  0038B0  CFDD F022          	movff	postdec2,i2printf@val+1
 17632  0038B4  0E02               	movlw	2
 17633  0038B6  261D               	addwf	i2printf@ap,f,c
 17634  0038B8  0E00               	movlw	0
 17635  0038BA  221E               	addwfc	i2printf@ap+1,f,c
 17636                           
 17637                           ;doprnt.c: 1287: }
 17638                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 17639  0038BC  D036               	goto	i2l1427
 17640  0038BE                     
 17641                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17642  0038BE  0E01               	movlw	1
 17643  0038C0  6E26               	movwf	i2printf@c,c
 17644  0038C2                     i2l7161:
 17645  0038C2  0E05               	movlw	5
 17646  0038C4  1826               	xorwf	i2printf@c,w,c
 17647  0038C6  B4D8               	btfsc	status,2,c
 17648  0038C8  D038               	goto	i2l1432
 17649                           
 17650                           ;doprnt.c: 1306: if(val < dpowers[c])
 17651  0038CA  5026               	movf	i2printf@c,w,c
 17652  0038CC  0D02               	mullw	2
 17653  0038CE  0E64               	movlw	low _dpowers
 17654  0038D0  24F3               	addwf	prodl,w,c
 17655  0038D2  6EF6               	movwf	tblptrl,c
 17656  0038D4  0EFC               	movlw	high _dpowers
 17657  0038D6  20F4               	addwfc	prodh,w,c
 17658  0038D8  6EF7               	movwf	tblptrh,c
 17659  0038DA                     	if	1	;There are 3 active tblptr bytes
 17660  0038DA  6AF8               	clrf	tblptru,c
 17661  0038DC  0E00               	movlw	low (__mediumconst shr (0+16))
 17662  0038DE  22F8               	addwfc	tblptru,f,c
 17663  0038E0                     	endif
 17664  0038E0  0009               	tblrd		*+
 17665  0038E2  50F5               	movf	tablat,w,c
 17666  0038E4  5C21               	subwf	i2printf@val,w,c
 17667  0038E6  0009               	tblrd		*+
 17668  0038E8  50F5               	movf	tablat,w,c
 17669  0038EA  5822               	subwfb	i2printf@val+1,w,c
 17670  0038EC  A0D8               	btfss	status,0,c
 17671  0038EE  D025               	goto	i2l1432
 17672                           
 17673                           ;doprnt.c: 1307: break;
 17674  0038F0  2A26               	incf	i2printf@c,f,c
 17675  0038F2  D7E7               	goto	i2l7161
 17676  0038F4                     
 17677                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 17678  0038F4  0E01               	movlw	1
 17679  0038F6  6E26               	movwf	i2printf@c,c
 17680  0038F8                     i2l7175:
 17681  0038F8  0E04               	movlw	4
 17682  0038FA  1826               	xorwf	i2printf@c,w,c
 17683  0038FC  B4D8               	btfsc	status,2,c
 17684  0038FE  D01D               	goto	i2l1432
 17685                           
 17686                           ;doprnt.c: 1317: if(val < hexpowers[c])
 17687  003900  5026               	movf	i2printf@c,w,c
 17688  003902  0D02               	mullw	2
 17689  003904  0E6E               	movlw	low _hexpowers
 17690  003906  24F3               	addwf	prodl,w,c
 17691  003908  6EF6               	movwf	tblptrl,c
 17692  00390A  0EFC               	movlw	high _hexpowers
 17693  00390C  20F4               	addwfc	prodh,w,c
 17694  00390E  6EF7               	movwf	tblptrh,c
 17695  003910                     	if	1	;There are 3 active tblptr bytes
 17696  003910  6AF8               	clrf	tblptru,c
 17697  003912  0E00               	movlw	low (__mediumconst shr (0+16))
 17698  003914  22F8               	addwfc	tblptru,f,c
 17699  003916                     	endif
 17700  003916  0009               	tblrd		*+
 17701  003918  50F5               	movf	tablat,w,c
 17702  00391A  5C21               	subwf	i2printf@val,w,c
 17703  00391C  0009               	tblrd		*+
 17704  00391E  50F5               	movf	tablat,w,c
 17705  003920  5822               	subwfb	i2printf@val+1,w,c
 17706  003922  A0D8               	btfss	status,0,c
 17707  003924  D00A               	goto	i2l1432
 17708                           
 17709                           ;doprnt.c: 1318: break;
 17710  003926  2A26               	incf	i2printf@c,f,c
 17711  003928  D7E7               	goto	i2l7175
 17712  00392A                     i2l1427:
 17713  00392A  5023               	movf	i2printf@flag,w,c
 17714  00392C  0B80               	andlw	128
 17715                           
 17716                           ; Switch size 1, requested type "space"
 17717                           ; Number of cases is 2, Range of values is 0 to 128
 17718                           ; switch strategies available:
 17719                           ; Name         Instructions Cycles
 17720                           ; simple_byte            7     4 (average)
 17721                           ;	Chosen strategy is simple_byte
 17722  00392E  0A00               	xorlw	0	; case 0
 17723  003930  B4D8               	btfsc	status,2,c
 17724  003932  D7C5               	goto	i2l1428
 17725  003934  0A80               	xorlw	128	; case 128
 17726  003936  B4D8               	btfsc	status,2,c
 17727  003938  D7DD               	goto	i2l1433
 17728  00393A                     i2l1432:
 17729                           
 17730                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17731  00393A  5024               	movf	i2printf@width,w,c
 17732  00393C  1025               	iorwf	i2printf@width+1,w,c
 17733  00393E  B4D8               	btfsc	status,2,c
 17734  003940  D009               	goto	i2l1437
 17735  003942  C023  F015         	movff	i2printf@flag,??i2_printf
 17736  003946  0E03               	movlw	3
 17737  003948  1615               	andwf	??i2_printf,f,c
 17738  00394A  B4D8               	btfsc	status,2,c
 17739  00394C  D003               	goto	i2l1437
 17740                           
 17741                           ;doprnt.c: 1346: width--;
 17742  00394E  0624               	decf	i2printf@width,f,c
 17743  003950  A0D8               	btfss	status,0,c
 17744  003952  0625               	decf	i2printf@width+1,f,c
 17745  003954                     i2l1437:
 17746                           
 17747                           ;doprnt.c: 1381: if(width > c)
 17748  003954  0E80               	movlw	128
 17749  003956  BE26               	btfsc	i2printf@c,7,c
 17750  003958  0E7F               	movlw	127
 17751  00395A  6E15               	movwf	??i2_printf& (0+255),c
 17752  00395C  5024               	movf	i2printf@width,w,c
 17753  00395E  5C26               	subwf	i2printf@c,w,c
 17754  003960  5025               	movf	i2printf@width+1,w,c
 17755  003962  0A80               	xorlw	128
 17756  003964  5815               	subwfb	??i2_printf& (0+255),w,c
 17757  003966  B0D8               	btfsc	status,0,c
 17758  003968  D007               	goto	i2l1438
 17759                           
 17760                           ;doprnt.c: 1382: width -= c;
 17761  00396A  5026               	movf	i2printf@c,w,c
 17762  00396C  5E24               	subwf	i2printf@width,f,c
 17763  00396E  0E00               	movlw	0
 17764  003970  BE26               	btfsc	i2printf@c,7,c
 17765  003972  0EFF               	movlw	255
 17766  003974  5A25               	subwfb	i2printf@width+1,f,c
 17767  003976  D004               	goto	i2l1439
 17768  003978                     i2l1438:
 17769                           
 17770                           ;doprnt.c: 1383: else
 17771                           ;doprnt.c: 1384: width = 0;
 17772  003978  0E00               	movlw	0
 17773  00397A  6E25               	movwf	i2printf@width+1,c
 17774  00397C  0E00               	movlw	0
 17775  00397E  6E24               	movwf	i2printf@width,c
 17776  003980                     i2l1439:
 17777                           
 17778                           ;doprnt.c: 1387: if(flag & 0x04) {
 17779  003980  A423               	btfss	i2printf@flag,2,c
 17780  003982  D014               	goto	i2l1440
 17781                           
 17782                           ;doprnt.c: 1392: if(flag & 0x03)
 17783  003984  C023  F015         	movff	i2printf@flag,??i2_printf
 17784  003988  0E03               	movlw	3
 17785  00398A  1615               	andwf	??i2_printf,f,c
 17786  00398C  B4D8               	btfsc	status,2,c
 17787  00398E  D003               	goto	i2l1441
 17788                           
 17789                           ;doprnt.c: 1393: (putch('-') );
 17790  003990  0E2D               	movlw	45
 17791  003992  EC0B  F031         	call	i2_putch
 17792  003996                     i2l1441:
 17793                           
 17794                           ;doprnt.c: 1415: if(width)
 17795  003996  5024               	movf	i2printf@width,w,c
 17796  003998  1025               	iorwf	i2printf@width+1,w,c
 17797  00399A  B4D8               	btfsc	status,2,c
 17798  00399C  D01E               	goto	i2l1449
 17799                           
 17800                           ;doprnt.c: 1417: (putch('0') );
 17801                           
 17802                           ;doprnt.c: 1416: do
 17803  00399E  0E30               	movlw	48
 17804  0039A0  EC0B  F031         	call	i2_putch
 17805                           
 17806                           ;doprnt.c: 1418: while(--width);
 17807  0039A4  0624               	decf	i2printf@width,f,c
 17808  0039A6  A0D8               	btfss	status,0,c
 17809  0039A8  0625               	decf	i2printf@width+1,f,c
 17810  0039AA  D7F5               	goto	i2l1441
 17811  0039AC                     i2l1440:
 17812                           
 17813                           ;doprnt.c: 1422: {
 17814                           ;doprnt.c: 1424: if(width
 17815                           ;doprnt.c: 1428: )
 17816  0039AC  5024               	movf	i2printf@width,w,c
 17817  0039AE  1025               	iorwf	i2printf@width+1,w,c
 17818  0039B0  B4D8               	btfsc	status,2,c
 17819  0039B2  D00A               	goto	i2u516_40
 17820  0039B4                     i2u515_40:
 17821                           
 17822                           ;doprnt.c: 1430: (putch(' ') );
 17823                           
 17824                           ;doprnt.c: 1429: do
 17825  0039B4  0E20               	movlw	32
 17826  0039B6  EC0B  F031         	call	i2_putch
 17827                           
 17828                           ;doprnt.c: 1431: while(--width);
 17829  0039BA  0624               	decf	i2printf@width,f,c
 17830  0039BC  A0D8               	btfss	status,0,c
 17831  0039BE  0625               	decf	i2printf@width+1,f,c
 17832  0039C0  5024               	movf	i2printf@width,w,c
 17833  0039C2  1025               	iorwf	i2printf@width+1,w,c
 17834  0039C4  A4D8               	btfss	status,2,c
 17835  0039C6  D7F6               	goto	i2u515_40
 17836  0039C8                     i2u516_40:
 17837                           
 17838                           ;doprnt.c: 1438: if(flag & 0x03)
 17839  0039C8  C023  F015         	movff	i2printf@flag,??i2_printf
 17840  0039CC  0E03               	movlw	3
 17841  0039CE  1615               	andwf	??i2_printf,f,c
 17842  0039D0  B4D8               	btfsc	status,2,c
 17843  0039D2  D003               	goto	i2l1449
 17844                           
 17845                           ;doprnt.c: 1439: (putch('-') );
 17846  0039D4  0E2D               	movlw	45
 17847  0039D6  EC0B  F031         	call	i2_putch
 17848  0039DA                     i2l1449:
 17849                           
 17850                           ;doprnt.c: 1469: }
 17851                           ;doprnt.c: 1472: prec = c;
 17852  0039DA  C026  F01A         	movff	i2printf@c,i2printf@prec
 17853                           
 17854                           ;doprnt.c: 1474: while(prec--) {
 17855  0039DE  D059               	goto	i2l1450
 17856  0039E0                     
 17857                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17858  0039E0  501A               	movf	i2printf@prec,w,c
 17859  0039E2  0D02               	mullw	2
 17860  0039E4  0E64               	movlw	low _dpowers
 17861  0039E6  24F3               	addwf	prodl,w,c
 17862  0039E8  6EF6               	movwf	tblptrl,c
 17863  0039EA  0EFC               	movlw	high _dpowers
 17864  0039EC  20F4               	addwfc	prodh,w,c
 17865  0039EE  6EF7               	movwf	tblptrh,c
 17866  0039F0                     	if	1	;There are 3 active tblptr bytes
 17867  0039F0  6AF8               	clrf	tblptru,c
 17868  0039F2  0E00               	movlw	low (__mediumconst shr (0+16))
 17869  0039F4  22F8               	addwfc	tblptru,f,c
 17870  0039F6                     	endif
 17871  0039F6  0009               	tblrd		*+
 17872  0039F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 17873  0039FC  000A               	tblrd		*-
 17874  0039FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 17875  003A02  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 17876  003A06  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 17877  003A0A  ECDC  F02E         	call	i2___lwdiv	;wreg free
 17878  003A0E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 17879  003A12  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 17880  003A16  0E00               	movlw	0
 17881  003A18  6E0B               	movwf	i2___lwmod@divisor+1,c
 17882  003A1A  0E0A               	movlw	10
 17883  003A1C  6E0A               	movwf	i2___lwmod@divisor,c
 17884  003A1E  ECBB  F02F         	call	i2___lwmod	;wreg free
 17885  003A22  5008               	movf	?i2___lwmod,w,c
 17886  003A24  0F30               	addlw	48
 17887  003A26  6E26               	movwf	i2printf@c,c
 17888                           
 17889                           ;doprnt.c: 1491: break;
 17890  003A28  D031               	goto	i2l1454
 17891  003A2A                     
 17892                           ;doprnt.c: 1499: {
 17893                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 17894  003A2A  C021  F001         	movff	i2printf@val,i2___lwdiv@dividend
 17895  003A2E  C022  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 17896  003A32  501A               	movf	i2printf@prec,w,c
 17897  003A34  0D02               	mullw	2
 17898  003A36  0E6E               	movlw	low _hexpowers
 17899  003A38  24F3               	addwf	prodl,w,c
 17900  003A3A  6EF6               	movwf	tblptrl,c
 17901  003A3C  0EFC               	movlw	high _hexpowers
 17902  003A3E  20F4               	addwfc	prodh,w,c
 17903  003A40  6EF7               	movwf	tblptrh,c
 17904  003A42                     	if	1	;There are 3 active tblptr bytes
 17905  003A42  6AF8               	clrf	tblptru,c
 17906  003A44  0E00               	movlw	low (__mediumconst shr (0+16))
 17907  003A46  22F8               	addwfc	tblptru,f,c
 17908  003A48                     	endif
 17909  003A48  0009               	tblrd		*+
 17910  003A4A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 17911  003A4E  000A               	tblrd		*-
 17912  003A50  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 17913  003A54  ECDC  F02E         	call	i2___lwdiv	;wreg free
 17914  003A58  5001               	movf	?i2___lwdiv,w,c
 17915  003A5A  0B0F               	andlw	15
 17916  003A5C  6E19               	movwf	i2printf@idx,c
 17917                           
 17918                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 17919  003A5E  5019               	movf	i2printf@idx,w,c
 17920  003A60  0D01               	mullw	1
 17921  003A62  0EDC               	movlw	low STR_99
 17922  003A64  24F3               	addwf	prodl,w,c
 17923  003A66  6EF6               	movwf	tblptrl,c
 17924  003A68  0EFD               	movlw	high STR_99
 17925  003A6A  20F4               	addwfc	prodh,w,c
 17926  003A6C  6EF7               	movwf	tblptrh,c
 17927  003A6E                     	if	1	;There are 3 active tblptr bytes
 17928  003A6E  6AF8               	clrf	tblptru,c
 17929  003A70  0E00               	movlw	low (__mediumconst shr (0+16))
 17930  003A72  22F8               	addwfc	tblptru,f,c
 17931  003A74                     	endif
 17932  003A74  0008               	tblrd		*
 17933  003A76  CFF5 F026          	movff	tablat,i2printf@c
 17934                           
 17935                           ;doprnt.c: 1523: }
 17936                           
 17937                           ;doprnt.c: 1508: }
 17938                           ;doprnt.c: 1510: break;
 17939  003A7A  D008               	goto	i2l1454
 17940  003A7C  5023               	movf	i2printf@flag,w,c
 17941  003A7E  0B80               	andlw	128
 17942                           
 17943                           ; Switch size 1, requested type "space"
 17944                           ; Number of cases is 2, Range of values is 0 to 128
 17945                           ; switch strategies available:
 17946                           ; Name         Instructions Cycles
 17947                           ; simple_byte            7     4 (average)
 17948                           ;	Chosen strategy is simple_byte
 17949  003A80  0A00               	xorlw	0	; case 0
 17950  003A82  B4D8               	btfsc	status,2,c
 17951  003A84  D7AD               	goto	i2l1453
 17952  003A86  0A80               	xorlw	128	; case 128
 17953  003A88  B4D8               	btfsc	status,2,c
 17954  003A8A  D7CF               	goto	i2l1455
 17955  003A8C                     i2l1454:
 17956                           
 17957                           ;doprnt.c: 1524: (putch(c) );
 17958  003A8C  5026               	movf	i2printf@c,w,c
 17959  003A8E  EC0B  F031         	call	i2_putch
 17960  003A92                     i2l1450:
 17961  003A92  061A               	decf	i2printf@prec,f,c
 17962  003A94  281A               	incf	i2printf@prec,w,c
 17963  003A96  A4D8               	btfss	status,2,c
 17964  003A98  D7F1               	goto	i2l1452
 17965  003A9A                     i2u518_40:
 17966  003A9A  C00D  FFF6         	movff	i2printf@f,tblptrl
 17967  003A9E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17968  003AA2  4A0D               	infsnz	i2printf@f,f,c
 17969  003AA4  2A0E               	incf	i2printf@f+1,f,c
 17970  003AA6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17971  003AA6  6AF8               	clrf	tblptru,c
 17972  003AA8                     	endif
 17973  003AA8                     	if	0	;tblptru may be non-zero
 17974  003AA8                     	endif
 17975  003AA8  0008               	tblrd		*
 17976  003AAA  CFF5 F026          	movff	tablat,i2printf@c
 17977  003AAE  5026               	movf	i2printf@c,w,c
 17978  003AB0  B4D8               	btfsc	status,2,c
 17979  003AB2  0012               	return	
 17980  003AB4  D5F8               	goto	i2l1392
 17981  003AB6                     __end_ofi2_printf:
 17982                           	opt stack 0
 17983                           pclatu	equ	0xFFB
 17984                           pclath	equ	0xFFA
 17985                           tblptru	equ	0xFF8
 17986                           tblptrh	equ	0xFF7
 17987                           tblptrl	equ	0xFF6
 17988                           tablat	equ	0xFF5
 17989                           prodh	equ	0xFF4
 17990                           prodl	equ	0xFF3
 17991                           intcon	equ	0xFF2
 17992                           intcon3	equ	0xFF0
 17993                           indf0	equ	0xFEF
 17994                           postinc0	equ	0xFEE
 17995                           fsr0h	equ	0xFEA
 17996                           fsr0l	equ	0xFE9
 17997                           wreg	equ	0xFE8
 17998                           postdec1	equ	0xFE5
 17999                           fsr1h	equ	0xFE2
 18000                           fsr1l	equ	0xFE1
 18001                           indf2	equ	0xFDF
 18002                           postinc2	equ	0xFDE
 18003                           postdec2	equ	0xFDD
 18004                           fsr2h	equ	0xFDA
 18005                           fsr2l	equ	0xFD9
 18006                           status	equ	0xFD8
 18007                           
 18008 ;; *************** function i2_putch *****************
 18009 ;; Defined at:
 18010 ;;		line 24 in file "lcd.c"
 18011 ;; Parameters:    Size  Location     Type
 18012 ;;  data            1    wreg     unsigned char 
 18013 ;; Auto vars:     Size  Location     Type
 18014 ;;  data            1    2[COMRAM] unsigned char 
 18015 ;; Return value:  Size  Location     Type
 18016 ;;                  1    wreg      void 
 18017 ;; Registers used:
 18018 ;;		wreg, status,2, status,0, cstack
 18019 ;; Tracked objects:
 18020 ;;		On entry : 0/0
 18021 ;;		On exit  : 0/0
 18022 ;;		Unchanged: 0/0
 18023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18025 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18027 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18028 ;;Total ram usage:        1 bytes
 18029 ;; Hardware stack levels used:    1
 18030 ;; Hardware stack levels required when called:    1
 18031 ;; This function calls:
 18032 ;;		i2_lcdNibble
 18033 ;; This function is called by:
 18034 ;;		_interruptHandler
 18035 ;;		i2_printf
 18036 ;; This function uses a non-reentrant model
 18037 ;;
 18038                           
 18039                           	psect	text45
 18040  006216                     __ptext45:
 18041                           	opt stack 0
 18042  006216                     i2_putch:
 18043                           	opt stack 22
 18044                           
 18045                           ;incstack = 0
 18046                           ;i2putch@data stored from wreg
 18047  006216  6E03               	movwf	i2putch@data,c
 18048                           
 18049                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 18050  006218  848C               	bsf	3980,2,c	;volatile
 18051                           
 18052                           ;lcd.c: 33: lcdNibble(data);
 18053  00621A  5003               	movf	i2putch@data,w,c
 18054  00621C  EC70  F02C         	call	i2_lcdNibble
 18055                           
 18056                           ;lcd.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
 18057  006220  0EA0               	movlw	160
 18058  006222                     i2u772_47:
 18059  006222  D000               	nop2	
 18060  006224  2EE8               	decfsz	wreg,f,c
 18061  006226  D7FD               	bra	i2u772_47
 18062  006228  0012               	return		;funcret
 18063  00622A                     __end_ofi2_putch:
 18064                           	opt stack 0
 18065                           pclatu	equ	0xFFB
 18066                           pclath	equ	0xFFA
 18067                           tblptru	equ	0xFF8
 18068                           tblptrh	equ	0xFF7
 18069                           tblptrl	equ	0xFF6
 18070                           tablat	equ	0xFF5
 18071                           prodh	equ	0xFF4
 18072                           prodl	equ	0xFF3
 18073                           intcon	equ	0xFF2
 18074                           intcon3	equ	0xFF0
 18075                           indf0	equ	0xFEF
 18076                           postinc0	equ	0xFEE
 18077                           fsr0h	equ	0xFEA
 18078                           fsr0l	equ	0xFE9
 18079                           wreg	equ	0xFE8
 18080                           postdec1	equ	0xFE5
 18081                           fsr1h	equ	0xFE2
 18082                           fsr1l	equ	0xFE1
 18083                           indf2	equ	0xFDF
 18084                           postinc2	equ	0xFDE
 18085                           postdec2	equ	0xFDD
 18086                           fsr2h	equ	0xFDA
 18087                           fsr2l	equ	0xFD9
 18088                           status	equ	0xFD8
 18089                           
 18090 ;; *************** function i2_isdigit *****************
 18091 ;; Defined at:
 18092 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 18093 ;; Parameters:    Size  Location     Type
 18094 ;;  c               1    wreg     unsigned char 
 18095 ;; Auto vars:     Size  Location     Type
 18096 ;;  c               1    2[COMRAM] unsigned char 
 18097 ;; Return value:  Size  Location     Type
 18098 ;;		None               void
 18099 ;; Registers used:
 18100 ;;		wreg, status,2, status,0
 18101 ;; Tracked objects:
 18102 ;;		On entry : 0/0
 18103 ;;		On exit  : 0/0
 18104 ;;		Unchanged: 0/0
 18105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18109 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18110 ;;Total ram usage:        3 bytes
 18111 ;; Hardware stack levels used:    1
 18112 ;; This function calls:
 18113 ;;		Nothing
 18114 ;; This function is called by:
 18115 ;;		i2_printf
 18116 ;; This function uses a non-reentrant model
 18117 ;;
 18118                           
 18119                           	psect	text46
 18120  0061A0                     __ptext46:
 18121                           	opt stack 0
 18122  0061A0                     i2_isdigit:
 18123                           	opt stack 22
 18124                           
 18125                           ;incstack = 0
 18126                           ;i2isdigit@c stored from wreg
 18127  0061A0  6E03               	movwf	i2isdigit@c,c
 18128  0061A2  0E00               	movlw	0
 18129  0061A4  6E02               	movwf	i2_isdigit$2258,c
 18130  0061A6  0E3A               	movlw	58
 18131  0061A8  6003               	cpfslt	i2isdigit@c,c
 18132  0061AA  D005               	goto	i2l1788
 18133  0061AC  0E2F               	movlw	47
 18134  0061AE  6403               	cpfsgt	i2isdigit@c,c
 18135  0061B0  D002               	goto	i2l1788
 18136  0061B2  0E01               	movlw	1
 18137  0061B4  6E02               	movwf	i2_isdigit$2258,c
 18138  0061B6                     i2l1788:
 18139  0061B6  C002  F001         	movff	i2_isdigit$2258,??i2_isdigit
 18140  0061BA  3001               	rrcf	??i2_isdigit,w,c
 18141  0061BC  0012               	return	
 18142  0061BE                     __end_ofi2_isdigit:
 18143                           	opt stack 0
 18144                           pclatu	equ	0xFFB
 18145                           pclath	equ	0xFFA
 18146                           tblptru	equ	0xFF8
 18147                           tblptrh	equ	0xFF7
 18148                           tblptrl	equ	0xFF6
 18149                           tablat	equ	0xFF5
 18150                           prodh	equ	0xFF4
 18151                           prodl	equ	0xFF3
 18152                           intcon	equ	0xFF2
 18153                           intcon3	equ	0xFF0
 18154                           indf0	equ	0xFEF
 18155                           postinc0	equ	0xFEE
 18156                           fsr0h	equ	0xFEA
 18157                           fsr0l	equ	0xFE9
 18158                           wreg	equ	0xFE8
 18159                           postdec1	equ	0xFE5
 18160                           fsr1h	equ	0xFE2
 18161                           fsr1l	equ	0xFE1
 18162                           indf2	equ	0xFDF
 18163                           postinc2	equ	0xFDE
 18164                           postdec2	equ	0xFDD
 18165                           fsr2h	equ	0xFDA
 18166                           fsr2l	equ	0xFD9
 18167                           status	equ	0xFD8
 18168                           
 18169 ;; *************** function i2___lwmod *****************
 18170 ;; Defined at:
 18171 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 18172 ;; Parameters:    Size  Location     Type
 18173 ;;  dividend        2    7[COMRAM] unsigned int 
 18174 ;;  divisor         2    9[COMRAM] unsigned int 
 18175 ;; Auto vars:     Size  Location     Type
 18176 ;;  __lwmod         1   11[COMRAM] unsigned char 
 18177 ;; Return value:  Size  Location     Type
 18178 ;;                  2    7[COMRAM] unsigned int 
 18179 ;; Registers used:
 18180 ;;		wreg, status,2, status,0
 18181 ;; Tracked objects:
 18182 ;;		On entry : 0/0
 18183 ;;		On exit  : 0/0
 18184 ;;		Unchanged: 0/0
 18185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18186 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18187 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18189 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18190 ;;Total ram usage:        5 bytes
 18191 ;; Hardware stack levels used:    1
 18192 ;; This function calls:
 18193 ;;		Nothing
 18194 ;; This function is called by:
 18195 ;;		i2_printf
 18196 ;; This function uses a non-reentrant model
 18197 ;;
 18198                           
 18199                           	psect	text47
 18200  005F76                     __ptext47:
 18201                           	opt stack 0
 18202  005F76                     i2___lwmod:
 18203                           	opt stack 22
 18204                           
 18205                           ;incstack = 0
 18206  005F76  500A               	movf	i2___lwmod@divisor,w,c
 18207  005F78  100B               	iorwf	i2___lwmod@divisor+1,w,c
 18208  005F7A  B4D8               	btfsc	status,2,c
 18209  005F7C  D018               	goto	i2l1882
 18210  005F7E  0E01               	movlw	1
 18211  005F80  6E0C               	movwf	i2___lwmod@counter,c
 18212  005F82  D004               	goto	i2l1877
 18213  005F84  90D8               	bcf	status,0,c
 18214  005F86  360A               	rlcf	i2___lwmod@divisor,f,c
 18215  005F88  360B               	rlcf	i2___lwmod@divisor+1,f,c
 18216  005F8A  2A0C               	incf	i2___lwmod@counter,f,c
 18217  005F8C                     i2l1877:
 18218  005F8C  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 18219  005F8E  D7FA               	goto	i2l1878
 18220  005F90                     i2u414_40:
 18221  005F90  500A               	movf	i2___lwmod@divisor,w,c
 18222  005F92  5C08               	subwf	i2___lwmod@dividend,w,c
 18223  005F94  500B               	movf	i2___lwmod@divisor+1,w,c
 18224  005F96  5809               	subwfb	i2___lwmod@dividend+1,w,c
 18225  005F98  A0D8               	btfss	status,0,c
 18226  005F9A  D004               	goto	i2l1881
 18227  005F9C  500A               	movf	i2___lwmod@divisor,w,c
 18228  005F9E  5E08               	subwf	i2___lwmod@dividend,f,c
 18229  005FA0  500B               	movf	i2___lwmod@divisor+1,w,c
 18230  005FA2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 18231  005FA4                     i2l1881:
 18232  005FA4  90D8               	bcf	status,0,c
 18233  005FA6  320B               	rrcf	i2___lwmod@divisor+1,f,c
 18234  005FA8  320A               	rrcf	i2___lwmod@divisor,f,c
 18235  005FAA  2E0C               	decfsz	i2___lwmod@counter,f,c
 18236  005FAC  D7F1               	goto	i2u414_40
 18237  005FAE                     i2l1882:
 18238  005FAE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 18239  005FB2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18240  005FB6  0012               	return		;funcret
 18241  005FB8                     __end_ofi2___lwmod:
 18242                           	opt stack 0
 18243                           pclatu	equ	0xFFB
 18244                           pclath	equ	0xFFA
 18245                           tblptru	equ	0xFF8
 18246                           tblptrh	equ	0xFF7
 18247                           tblptrl	equ	0xFF6
 18248                           tablat	equ	0xFF5
 18249                           prodh	equ	0xFF4
 18250                           prodl	equ	0xFF3
 18251                           intcon	equ	0xFF2
 18252                           intcon3	equ	0xFF0
 18253                           indf0	equ	0xFEF
 18254                           postinc0	equ	0xFEE
 18255                           fsr0h	equ	0xFEA
 18256                           fsr0l	equ	0xFE9
 18257                           wreg	equ	0xFE8
 18258                           postdec1	equ	0xFE5
 18259                           fsr1h	equ	0xFE2
 18260                           fsr1l	equ	0xFE1
 18261                           indf2	equ	0xFDF
 18262                           postinc2	equ	0xFDE
 18263                           postdec2	equ	0xFDD
 18264                           fsr2h	equ	0xFDA
 18265                           fsr2l	equ	0xFD9
 18266                           status	equ	0xFD8
 18267                           
 18268 ;; *************** function i2___lwdiv *****************
 18269 ;; Defined at:
 18270 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 18271 ;; Parameters:    Size  Location     Type
 18272 ;;  dividend        2    0[COMRAM] unsigned int 
 18273 ;;  divisor         2    2[COMRAM] unsigned int 
 18274 ;; Auto vars:     Size  Location     Type
 18275 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 18276 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 18277 ;; Return value:  Size  Location     Type
 18278 ;;                  2    0[COMRAM] unsigned int 
 18279 ;; Registers used:
 18280 ;;		wreg, status,2, status,0
 18281 ;; Tracked objects:
 18282 ;;		On entry : 0/0
 18283 ;;		On exit  : 0/0
 18284 ;;		Unchanged: 0/0
 18285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18287 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18289 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18290 ;;Total ram usage:        7 bytes
 18291 ;; Hardware stack levels used:    1
 18292 ;; This function calls:
 18293 ;;		Nothing
 18294 ;; This function is called by:
 18295 ;;		i2_printf
 18296 ;; This function uses a non-reentrant model
 18297 ;;
 18298                           
 18299                           	psect	text48
 18300  005DB8                     __ptext48:
 18301                           	opt stack 0
 18302  005DB8                     i2___lwdiv:
 18303                           	opt stack 22
 18304                           
 18305                           ;incstack = 0
 18306  005DB8  0E00               	movlw	0
 18307  005DBA  6E06               	movwf	i2___lwdiv@quotient+1,c
 18308  005DBC  0E00               	movlw	0
 18309  005DBE  6E05               	movwf	i2___lwdiv@quotient,c
 18310  005DC0  5003               	movf	i2___lwdiv@divisor,w,c
 18311  005DC2  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 18312  005DC4  B4D8               	btfsc	status,2,c
 18313  005DC6  D01C               	goto	i2l1872
 18314  005DC8  0E01               	movlw	1
 18315  005DCA  6E07               	movwf	i2___lwdiv@counter,c
 18316  005DCC  D004               	goto	i2l1867
 18317  005DCE  90D8               	bcf	status,0,c
 18318  005DD0  3603               	rlcf	i2___lwdiv@divisor,f,c
 18319  005DD2  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 18320  005DD4  2A07               	incf	i2___lwdiv@counter,f,c
 18321  005DD6                     i2l1867:
 18322  005DD6  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 18323  005DD8  D7FA               	goto	i2l1868
 18324  005DDA                     i2u411_40:
 18325  005DDA  90D8               	bcf	status,0,c
 18326  005DDC  3605               	rlcf	i2___lwdiv@quotient,f,c
 18327  005DDE  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 18328  005DE0  5003               	movf	i2___lwdiv@divisor,w,c
 18329  005DE2  5C01               	subwf	i2___lwdiv@dividend,w,c
 18330  005DE4  5004               	movf	i2___lwdiv@divisor+1,w,c
 18331  005DE6  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 18332  005DE8  A0D8               	btfss	status,0,c
 18333  005DEA  D005               	goto	i2l1871
 18334  005DEC  5003               	movf	i2___lwdiv@divisor,w,c
 18335  005DEE  5E01               	subwf	i2___lwdiv@dividend,f,c
 18336  005DF0  5004               	movf	i2___lwdiv@divisor+1,w,c
 18337  005DF2  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 18338  005DF4  8005               	bsf	i2___lwdiv@quotient,0,c
 18339  005DF6                     i2l1871:
 18340  005DF6  90D8               	bcf	status,0,c
 18341  005DF8  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 18342  005DFA  3203               	rrcf	i2___lwdiv@divisor,f,c
 18343  005DFC  2E07               	decfsz	i2___lwdiv@counter,f,c
 18344  005DFE  D7ED               	goto	i2u411_40
 18345  005E00                     i2l1872:
 18346  005E00  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18347  005E04  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18348  005E08  0012               	return		;funcret
 18349  005E0A                     __end_ofi2___lwdiv:
 18350                           	opt stack 0
 18351                           pclatu	equ	0xFFB
 18352                           pclath	equ	0xFFA
 18353                           tblptru	equ	0xFF8
 18354                           tblptrh	equ	0xFF7
 18355                           tblptrl	equ	0xFF6
 18356                           tablat	equ	0xFF5
 18357                           prodh	equ	0xFF4
 18358                           prodl	equ	0xFF3
 18359                           intcon	equ	0xFF2
 18360                           intcon3	equ	0xFF0
 18361                           indf0	equ	0xFEF
 18362                           postinc0	equ	0xFEE
 18363                           fsr0h	equ	0xFEA
 18364                           fsr0l	equ	0xFE9
 18365                           wreg	equ	0xFE8
 18366                           postdec1	equ	0xFE5
 18367                           fsr1h	equ	0xFE2
 18368                           fsr1l	equ	0xFE1
 18369                           indf2	equ	0xFDF
 18370                           postinc2	equ	0xFDE
 18371                           postdec2	equ	0xFDD
 18372                           fsr2h	equ	0xFDA
 18373                           fsr2l	equ	0xFD9
 18374                           status	equ	0xFD8
 18375                           
 18376 ;; *************** function i2_initLCD *****************
 18377 ;; Defined at:
 18378 ;;		line 60 in file "lcd.c"
 18379 ;; Parameters:    Size  Location     Type
 18380 ;;		None
 18381 ;; Auto vars:     Size  Location     Type
 18382 ;;		None
 18383 ;; Return value:  Size  Location     Type
 18384 ;;                  1    wreg      void 
 18385 ;; Registers used:
 18386 ;;		wreg, status,2, status,0, cstack
 18387 ;; Tracked objects:
 18388 ;;		On entry : 0/0
 18389 ;;		On exit  : 0/0
 18390 ;;		Unchanged: 0/0
 18391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18396 ;;Total ram usage:        1 bytes
 18397 ;; Hardware stack levels used:    1
 18398 ;; Hardware stack levels required when called:    2
 18399 ;; This function calls:
 18400 ;;		i2_lcdInst
 18401 ;; This function is called by:
 18402 ;;		_interruptHandler
 18403 ;; This function uses a non-reentrant model
 18404 ;;
 18405                           
 18406                           	psect	text49
 18407  005E56                     __ptext49:
 18408                           	opt stack 0
 18409  005E56                     i2_initLCD:
 18410                           	opt stack 21
 18411                           
 18412                           ;lcd.c: 68: _delay((unsigned long)((15)*(32000000/4000.0)));
 18413                           
 18414                           ;incstack = 0
 18415  005E56  0E9C               	movlw	156
 18416  005E58  6E04               	movwf	??i2_initLCD& (0+255),c
 18417  005E5A  0ED7               	movlw	215
 18418  005E5C                     i2u773_47:
 18419  005E5C  2EE8               	decfsz	wreg,f,c
 18420  005E5E  D7FE               	bra	i2u773_47
 18421  005E60  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 18422  005E62  D7FC               	bra	i2u773_47
 18423  005E64  F000               	nop	
 18424                           
 18425                           ;lcd.c: 69: lcdInst(0b00110011);
 18426  005E66  0E33               	movlw	51
 18427  005E68  EC15  F031         	call	i2_lcdInst
 18428                           
 18429                           ;lcd.c: 70: lcdInst(0b00110010);
 18430  005E6C  0E32               	movlw	50
 18431  005E6E  EC15  F031         	call	i2_lcdInst
 18432                           
 18433                           ;lcd.c: 71: lcdInst(0b00101000);
 18434  005E72  0E28               	movlw	40
 18435  005E74  EC15  F031         	call	i2_lcdInst
 18436                           
 18437                           ;lcd.c: 72: lcdInst(0b00001111);
 18438  005E78  0E0F               	movlw	15
 18439  005E7A  EC15  F031         	call	i2_lcdInst
 18440                           
 18441                           ;lcd.c: 73: lcdInst(0b00000110);
 18442  005E7E  0E06               	movlw	6
 18443  005E80  EC15  F031         	call	i2_lcdInst
 18444                           
 18445                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(32000000/4000.0)));;
 18446  005E84  0E01               	movlw	1
 18447  005E86  EC15  F031         	call	i2_lcdInst
 18448  005E8A  0E9C               	movlw	156
 18449  005E8C  6E04               	movwf	??i2_initLCD& (0+255),c
 18450  005E8E  0ED7               	movlw	215
 18451  005E90                     i2u774_47:
 18452  005E90  2EE8               	decfsz	wreg,f,c
 18453  005E92  D7FE               	bra	i2u774_47
 18454  005E94  2E04               	decfsz	??i2_initLCD& (0+255),f,c
 18455  005E96  D7FC               	bra	i2u774_47
 18456  005E98  F000               	nop	
 18457                           
 18458                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 18459  005E9A  0E0F               	movlw	15
 18460  005E9C  EC15  F031         	call	i2_lcdInst
 18461  005EA0  0012               	return		;funcret
 18462  005EA2                     __end_ofi2_initLCD:
 18463                           	opt stack 0
 18464                           pclatu	equ	0xFFB
 18465                           pclath	equ	0xFFA
 18466                           tblptru	equ	0xFF8
 18467                           tblptrh	equ	0xFF7
 18468                           tblptrl	equ	0xFF6
 18469                           tablat	equ	0xFF5
 18470                           prodh	equ	0xFF4
 18471                           prodl	equ	0xFF3
 18472                           intcon	equ	0xFF2
 18473                           intcon3	equ	0xFF0
 18474                           indf0	equ	0xFEF
 18475                           postinc0	equ	0xFEE
 18476                           fsr0h	equ	0xFEA
 18477                           fsr0l	equ	0xFE9
 18478                           wreg	equ	0xFE8
 18479                           postdec1	equ	0xFE5
 18480                           fsr1h	equ	0xFE2
 18481                           fsr1l	equ	0xFE1
 18482                           indf2	equ	0xFDF
 18483                           postinc2	equ	0xFDE
 18484                           postdec2	equ	0xFDD
 18485                           fsr2h	equ	0xFDA
 18486                           fsr2l	equ	0xFD9
 18487                           status	equ	0xFD8
 18488                           
 18489 ;; *************** function i2_lcdInst *****************
 18490 ;; Defined at:
 18491 ;;		line 11 in file "lcd.c"
 18492 ;; Parameters:    Size  Location     Type
 18493 ;;  data            1    wreg     unsigned char 
 18494 ;; Auto vars:     Size  Location     Type
 18495 ;;  data            1    2[COMRAM] unsigned char 
 18496 ;; Return value:  Size  Location     Type
 18497 ;;                  1    wreg      void 
 18498 ;; Registers used:
 18499 ;;		wreg, status,2, status,0, cstack
 18500 ;; Tracked objects:
 18501 ;;		On entry : 0/0
 18502 ;;		On exit  : 0/0
 18503 ;;		Unchanged: 0/0
 18504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18508 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18509 ;;Total ram usage:        1 bytes
 18510 ;; Hardware stack levels used:    1
 18511 ;; Hardware stack levels required when called:    1
 18512 ;; This function calls:
 18513 ;;		i2_lcdNibble
 18514 ;; This function is called by:
 18515 ;;		_interruptHandler
 18516 ;;		i2_initLCD
 18517 ;; This function uses a non-reentrant model
 18518 ;;
 18519                           
 18520                           	psect	text50
 18521  00622A                     __ptext50:
 18522                           	opt stack 0
 18523  00622A                     i2_lcdInst:
 18524                           	opt stack 22
 18525                           
 18526                           ;incstack = 0
 18527                           ;i2lcdInst@data stored from wreg
 18528  00622A  6E03               	movwf	i2lcdInst@data,c
 18529                           
 18530                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 18531  00622C  948C               	bcf	3980,2,c	;volatile
 18532                           
 18533                           ;lcd.c: 20: lcdNibble(data);
 18534  00622E  5003               	movf	i2lcdInst@data,w,c
 18535  006230  EC70  F02C         	call	i2_lcdNibble
 18536                           
 18537                           ;lcd.c: 21: _delay((unsigned long)((100)*(32000000/4000000.0)));
 18538  006234  0EA0               	movlw	160
 18539  006236                     i2u775_47:
 18540  006236  D000               	nop2	
 18541  006238  2EE8               	decfsz	wreg,f,c
 18542  00623A  D7FD               	bra	i2u775_47
 18543  00623C  0012               	return		;funcret
 18544  00623E                     __end_ofi2_lcdInst:
 18545                           	opt stack 0
 18546                           pclatu	equ	0xFFB
 18547                           pclath	equ	0xFFA
 18548                           tblptru	equ	0xFF8
 18549                           tblptrh	equ	0xFF7
 18550                           tblptrl	equ	0xFF6
 18551                           tablat	equ	0xFF5
 18552                           prodh	equ	0xFF4
 18553                           prodl	equ	0xFF3
 18554                           intcon	equ	0xFF2
 18555                           intcon3	equ	0xFF0
 18556                           indf0	equ	0xFEF
 18557                           postinc0	equ	0xFEE
 18558                           fsr0h	equ	0xFEA
 18559                           fsr0l	equ	0xFE9
 18560                           wreg	equ	0xFE8
 18561                           postdec1	equ	0xFE5
 18562                           fsr1h	equ	0xFE2
 18563                           fsr1l	equ	0xFE1
 18564                           indf2	equ	0xFDF
 18565                           postinc2	equ	0xFDE
 18566                           postdec2	equ	0xFDD
 18567                           fsr2h	equ	0xFDA
 18568                           fsr2l	equ	0xFD9
 18569                           status	equ	0xFD8
 18570                           
 18571 ;; *************** function i2_lcdNibble *****************
 18572 ;; Defined at:
 18573 ;;		line 37 in file "lcd.c"
 18574 ;; Parameters:    Size  Location     Type
 18575 ;;  data            1    wreg     unsigned char 
 18576 ;; Auto vars:     Size  Location     Type
 18577 ;;  data            1    1[COMRAM] unsigned char 
 18578 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 18579 ;; Return value:  Size  Location     Type
 18580 ;;                  1    wreg      void 
 18581 ;; Registers used:
 18582 ;;		wreg, status,2, status,0
 18583 ;; Tracked objects:
 18584 ;;		On entry : 0/0
 18585 ;;		On exit  : 0/0
 18586 ;;		Unchanged: 0/0
 18587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18591 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18592 ;;Total ram usage:        2 bytes
 18593 ;; Hardware stack levels used:    1
 18594 ;; This function calls:
 18595 ;;		Nothing
 18596 ;; This function is called by:
 18597 ;;		i2_lcdInst
 18598 ;;		i2_putch
 18599 ;; This function uses a non-reentrant model
 18600 ;;
 18601                           
 18602                           	psect	text51
 18603  0058E0                     __ptext51:
 18604                           	opt stack 0
 18605  0058E0                     i2_lcdNibble:
 18606                           	opt stack 22
 18607                           
 18608                           ;incstack = 0
 18609                           ;i2lcdNibble@data stored from wreg
 18610  0058E0  6E02               	movwf	i2lcdNibble@data,c
 18611                           
 18612                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
 18613  0058E2  5002               	movf	i2lcdNibble@data,w,c
 18614  0058E4  0BF0               	andlw	240
 18615  0058E6  6E01               	movwf	i2lcdNibble@temp,c
 18616                           
 18617                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
 18618  0058E8  508C               	movf	3980,w,c	;volatile
 18619  0058EA  0B0F               	andlw	15
 18620  0058EC  6E8C               	movwf	3980,c	;volatile
 18621                           
 18622                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
 18623  0058EE  5001               	movf	i2lcdNibble@temp,w,c
 18624  0058F0  108C               	iorwf	3980,w,c	;volatile
 18625  0058F2  6E8C               	movwf	3980,c	;volatile
 18626                           
 18627                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 18628  0058F4  0E00               	movlw	0
 18629  0058F6  BEF2               	btfsc	intcon,7,c	;volatile
 18630  0058F8  0E01               	movlw	1
 18631  0058FA  0100               	movlb	0	; () banked
 18632  0058FC  6FBD               	movwf	_LCDinterruptState& (0+255),b
 18633                           
 18634                           ; BSR set to: 0
 18635  0058FE  9EF2               	bcf	intcon,7,c	;volatile
 18636                           
 18637                           ; BSR set to: 0
 18638  005900  868C               	bsf	3980,3,c	;volatile
 18639                           
 18640                           ; BSR set to: 0
 18641  005902  0E42               	movlw	66
 18642  005904                     i2u776_47:
 18643  005904  2EE8               	decfsz	wreg,f,c
 18644  005906  D7FE               	bra	i2u776_47
 18645  005908  D000               	nop2	
 18646  00590A  968C               	bcf	3980,3,c	;volatile
 18647  00590C  0EA0               	movlw	160
 18648  00590E                     i2u777_47:
 18649  00590E  D000               	nop2	
 18650  005910  2EE8               	decfsz	wreg,f,c
 18651  005912  D7FD               	bra	i2u777_47
 18652  005914  0100               	movlb	0	; () banked
 18653  005916  B1BD               	btfsc	_LCDinterruptState& (0+255),0,b
 18654  005918  D002               	bra	i2u369_45
 18655  00591A  9EF2               	bcf	intcon,7,c	;volatile
 18656  00591C  D001               	bra	i2u369_46
 18657  00591E                     i2u369_45:
 18658  00591E  8EF2               	bsf	intcon,7,c	;volatile
 18659  005920                     i2u369_46:
 18660                           
 18661                           ;lcd.c: 52: data = (unsigned char) (data << 4);
 18662  005920  3802               	swapf	i2lcdNibble@data,w,c
 18663  005922  0BF0               	andlw	240
 18664  005924  6E02               	movwf	i2lcdNibble@data,c
 18665                           
 18666                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
 18667  005926  5002               	movf	i2lcdNibble@data,w,c
 18668  005928  0BF0               	andlw	240
 18669  00592A  6E01               	movwf	i2lcdNibble@temp,c
 18670                           
 18671                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
 18672  00592C  508C               	movf	3980,w,c	;volatile
 18673  00592E  0B0F               	andlw	15
 18674  005930  6E8C               	movwf	3980,c	;volatile
 18675                           
 18676                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
 18677  005932  5001               	movf	i2lcdNibble@temp,w,c
 18678  005934  108C               	iorwf	3980,w,c	;volatile
 18679  005936  6E8C               	movwf	3980,c	;volatile
 18680                           
 18681                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(32000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(32000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 18682  005938  0E00               	movlw	0
 18683  00593A  BEF2               	btfsc	intcon,7,c	;volatile
 18684  00593C  0E01               	movlw	1
 18685  00593E  0100               	movlb	0	; () banked
 18686  005940  6FBD               	movwf	_LCDinterruptState& (0+255),b
 18687                           
 18688                           ; BSR set to: 0
 18689  005942  9EF2               	bcf	intcon,7,c	;volatile
 18690                           
 18691                           ; BSR set to: 0
 18692  005944  868C               	bsf	3980,3,c	;volatile
 18693                           
 18694                           ; BSR set to: 0
 18695  005946  0E42               	movlw	66
 18696  005948                     i2u778_47:
 18697  005948  2EE8               	decfsz	wreg,f,c
 18698  00594A  D7FE               	bra	i2u778_47
 18699  00594C  D000               	nop2	
 18700  00594E  968C               	bcf	3980,3,c	;volatile
 18701  005950  0EA0               	movlw	160
 18702  005952                     i2u779_47:
 18703  005952  D000               	nop2	
 18704  005954  2EE8               	decfsz	wreg,f,c
 18705  005956  D7FD               	bra	i2u779_47
 18706  005958  0100               	movlb	0	; () banked
 18707  00595A  B1BD               	btfsc	_LCDinterruptState& (0+255),0,b
 18708  00595C  D002               	bra	i2u370_45
 18709  00595E  9EF2               	bcf	intcon,7,c	;volatile
 18710  005960  D001               	bra	i2u370_46
 18711  005962                     i2u370_45:
 18712  005962  8EF2               	bsf	intcon,7,c	;volatile
 18713  005964                     i2u370_46:
 18714  005964  0012               	return		;funcret
 18715  005966                     __end_ofi2_lcdNibble:
 18716                           	opt stack 0
 18717                           pclatu	equ	0xFFB
 18718                           pclath	equ	0xFFA
 18719                           tblptru	equ	0xFF8
 18720                           tblptrh	equ	0xFF7
 18721                           tblptrl	equ	0xFF6
 18722                           tablat	equ	0xFF5
 18723                           prodh	equ	0xFF4
 18724                           prodl	equ	0xFF3
 18725                           intcon	equ	0xFF2
 18726                           intcon3	equ	0xFF0
 18727                           indf0	equ	0xFEF
 18728                           postinc0	equ	0xFEE
 18729                           fsr0h	equ	0xFEA
 18730                           fsr0l	equ	0xFE9
 18731                           wreg	equ	0xFE8
 18732                           postdec1	equ	0xFE5
 18733                           fsr1h	equ	0xFE2
 18734                           fsr1l	equ	0xFE1
 18735                           indf2	equ	0xFDF
 18736                           postinc2	equ	0xFDE
 18737                           postdec2	equ	0xFDD
 18738                           fsr2h	equ	0xFDA
 18739                           fsr2l	equ	0xFD9
 18740                           status	equ	0xFD8
 18741                           
 18742 ;; *************** function i2_generate_compartment_array *****************
 18743 ;; Defined at:
 18744 ;;		line 220 in file "keypad.c"
 18745 ;; Parameters:    Size  Location     Type
 18746 ;;  step            2    0[COMRAM] int 
 18747 ;; Auto vars:     Size  Location     Type
 18748 ;;		None
 18749 ;; Return value:  Size  Location     Type
 18750 ;;                  1    wreg      void 
 18751 ;; Registers used:
 18752 ;;		wreg, status,2, status,0
 18753 ;; Tracked objects:
 18754 ;;		On entry : 0/0
 18755 ;;		On exit  : 0/0
 18756 ;;		Unchanged: 0/0
 18757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18758 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18760 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18761 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18762 ;;Total ram usage:        4 bytes
 18763 ;; Hardware stack levels used:    1
 18764 ;; This function calls:
 18765 ;;		Nothing
 18766 ;; This function is called by:
 18767 ;;		_interruptHandler
 18768 ;; This function uses a non-reentrant model
 18769 ;;
 18770                           
 18771                           	psect	text52
 18772  004880                     __ptext52:
 18773                           	opt stack 0
 18774  004880                     i2_generate_compartment_array:
 18775                           	opt stack 23
 18776                           
 18777                           ;keypad.c: 222: switch(step){
 18778                           
 18779                           ;incstack = 0
 18780  004880  D11C               	goto	i2l1064
 18781  004882                     
 18782                           ;keypad.c: 224: compartment_array[0] = 1;
 18783  004882  0E00               	movlw	0
 18784  004884  0100               	movlb	0	; () banked
 18785  004886  6F81               	movwf	(_compartment_array+1)& (0+255),b
 18786  004888  0E01               	movlw	1
 18787  00488A  6F80               	movwf	_compartment_array& (0+255),b
 18788                           
 18789                           ;keypad.c: 225: compartment_array[2] = 1;
 18790  00488C  0E00               	movlw	0
 18791  00488E  6F85               	movwf	(_compartment_array+5)& (0+255),b
 18792  004890  0E01               	movlw	1
 18793  004892  6F84               	movwf	(_compartment_array+4)& (0+255),b
 18794                           
 18795                           ;keypad.c: 226: compartment_array[4] = 1;
 18796  004894  0E00               	movlw	0
 18797  004896  6F89               	movwf	(_compartment_array+9)& (0+255),b
 18798  004898  0E01               	movlw	1
 18799  00489A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 18800                           
 18801                           ;keypad.c: 227: compartment_array[6] = 1;
 18802  00489C  0E00               	movlw	0
 18803  00489E  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 18804  0048A0  0E01               	movlw	1
 18805  0048A2  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 18806                           
 18807                           ;keypad.c: 230: compartment_number[0] = 0;
 18808  0048A4  0E00               	movlw	0
 18809  0048A6  6E43               	movwf	_compartment_number+1,c
 18810  0048A8  0E00               	movlw	0
 18811  0048AA  6E42               	movwf	_compartment_number,c
 18812                           
 18813                           ;keypad.c: 231: compartment_number[1] = 2;
 18814  0048AC  0E00               	movlw	0
 18815  0048AE  6E45               	movwf	_compartment_number+3,c
 18816  0048B0  0E02               	movlw	2
 18817  0048B2  6E44               	movwf	_compartment_number+2,c
 18818                           
 18819                           ;keypad.c: 232: compartment_number[2] = 4;
 18820  0048B4  0E00               	movlw	0
 18821  0048B6  6E47               	movwf	_compartment_number+5,c
 18822  0048B8  0E04               	movlw	4
 18823  0048BA  6E46               	movwf	_compartment_number+4,c
 18824                           
 18825                           ;keypad.c: 233: compartment_number[3] = 6;
 18826  0048BC  0E00               	movlw	0
 18827  0048BE  6E49               	movwf	_compartment_number+7,c
 18828  0048C0  0E06               	movlw	6
 18829  0048C2  6E48               	movwf	_compartment_number+6,c
 18830                           
 18831                           ;keypad.c: 235: break;
 18832  0048C4  0012               	return	
 18833  0048C6                     
 18834                           ;keypad.c: 237: compartment_array[0] = 1;
 18835                           
 18836                           ; BSR set to: 0
 18837  0048C6  0E00               	movlw	0
 18838  0048C8  0100               	movlb	0	; () banked
 18839  0048CA  6F81               	movwf	(_compartment_array+1)& (0+255),b
 18840  0048CC  0E01               	movlw	1
 18841  0048CE  6F80               	movwf	_compartment_array& (0+255),b
 18842                           
 18843                           ;keypad.c: 238: compartment_array[1] = 1;
 18844  0048D0  0E00               	movlw	0
 18845  0048D2  6F83               	movwf	(_compartment_array+3)& (0+255),b
 18846  0048D4  0E01               	movlw	1
 18847  0048D6  6F82               	movwf	(_compartment_array+2)& (0+255),b
 18848                           
 18849                           ;keypad.c: 239: compartment_array[3] = 1;
 18850  0048D8  0E00               	movlw	0
 18851  0048DA  6F87               	movwf	(_compartment_array+7)& (0+255),b
 18852  0048DC  0E01               	movlw	1
 18853  0048DE  6F86               	movwf	(_compartment_array+6)& (0+255),b
 18854                           
 18855                           ;keypad.c: 240: compartment_array[4] = 1;
 18856  0048E0  0E00               	movlw	0
 18857  0048E2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 18858  0048E4  0E01               	movlw	1
 18859  0048E6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 18860                           
 18861                           ;keypad.c: 241: compartment_array[6] = 1;
 18862  0048E8  0E00               	movlw	0
 18863  0048EA  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 18864  0048EC  0E01               	movlw	1
 18865  0048EE  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 18866                           
 18867                           ;keypad.c: 245: compartment_number[0] = 0;
 18868  0048F0  0E00               	movlw	0
 18869  0048F2  6E43               	movwf	_compartment_number+1,c
 18870  0048F4  0E00               	movlw	0
 18871  0048F6  6E42               	movwf	_compartment_number,c
 18872                           
 18873                           ;keypad.c: 246: compartment_number[1] = 1;
 18874  0048F8  0E00               	movlw	0
 18875  0048FA  6E45               	movwf	_compartment_number+3,c
 18876  0048FC  0E01               	movlw	1
 18877  0048FE  6E44               	movwf	_compartment_number+2,c
 18878                           
 18879                           ;keypad.c: 247: compartment_number[2] = 3;
 18880  004900  0E00               	movlw	0
 18881  004902  6E47               	movwf	_compartment_number+5,c
 18882  004904  0E03               	movlw	3
 18883  004906  6E46               	movwf	_compartment_number+4,c
 18884                           
 18885                           ;keypad.c: 248: compartment_number[3] = 4;
 18886  004908  0E00               	movlw	0
 18887  00490A  6E49               	movwf	_compartment_number+7,c
 18888  00490C  0E04               	movlw	4
 18889  00490E  6E48               	movwf	_compartment_number+6,c
 18890                           
 18891                           ;keypad.c: 249: compartment_number[4] = 6;
 18892  004910  0E00               	movlw	0
 18893  004912  6E4B               	movwf	_compartment_number+9,c
 18894  004914  0E06               	movlw	6
 18895  004916  6E4A               	movwf	_compartment_number+8,c
 18896                           
 18897                           ;keypad.c: 251: break;
 18898  004918  0012               	return	
 18899  00491A                     
 18900                           ;keypad.c: 254: compartment_array[0] = 1;
 18901                           
 18902                           ; BSR set to: 0
 18903  00491A  0E00               	movlw	0
 18904  00491C  0100               	movlb	0	; () banked
 18905  00491E  6F81               	movwf	(_compartment_array+1)& (0+255),b
 18906  004920  0E01               	movlw	1
 18907  004922  6F80               	movwf	_compartment_array& (0+255),b
 18908                           
 18909                           ;keypad.c: 255: compartment_array[1] = 1;
 18910  004924  0E00               	movlw	0
 18911  004926  6F83               	movwf	(_compartment_array+3)& (0+255),b
 18912  004928  0E01               	movlw	1
 18913  00492A  6F82               	movwf	(_compartment_array+2)& (0+255),b
 18914                           
 18915                           ;keypad.c: 256: compartment_array[2] = 1;
 18916  00492C  0E00               	movlw	0
 18917  00492E  6F85               	movwf	(_compartment_array+5)& (0+255),b
 18918  004930  0E01               	movlw	1
 18919  004932  6F84               	movwf	(_compartment_array+4)& (0+255),b
 18920                           
 18921                           ;keypad.c: 257: compartment_array[4] = 1;
 18922  004934  0E00               	movlw	0
 18923  004936  6F89               	movwf	(_compartment_array+9)& (0+255),b
 18924  004938  0E01               	movlw	1
 18925  00493A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 18926                           
 18927                           ;keypad.c: 258: compartment_array[5] = 1;
 18928  00493C  0E00               	movlw	0
 18929  00493E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 18930  004940  0E01               	movlw	1
 18931  004942  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 18932                           
 18933                           ;keypad.c: 259: compartment_array[6] = 1;
 18934  004944  0E00               	movlw	0
 18935  004946  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 18936  004948  0E01               	movlw	1
 18937  00494A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 18938                           
 18939                           ;keypad.c: 262: compartment_number[0] = 0;
 18940  00494C  0E00               	movlw	0
 18941  00494E  6E43               	movwf	_compartment_number+1,c
 18942  004950  0E00               	movlw	0
 18943  004952  6E42               	movwf	_compartment_number,c
 18944                           
 18945                           ;keypad.c: 263: compartment_number[1] = 1;
 18946  004954  0E00               	movlw	0
 18947  004956  6E45               	movwf	_compartment_number+3,c
 18948  004958  0E01               	movlw	1
 18949  00495A  6E44               	movwf	_compartment_number+2,c
 18950                           
 18951                           ;keypad.c: 264: compartment_number[2] = 2;
 18952  00495C  0E00               	movlw	0
 18953  00495E  6E47               	movwf	_compartment_number+5,c
 18954  004960  0E02               	movlw	2
 18955  004962  6E46               	movwf	_compartment_number+4,c
 18956                           
 18957                           ;keypad.c: 265: compartment_number[3] = 4;
 18958  004964  0E00               	movlw	0
 18959  004966  6E49               	movwf	_compartment_number+7,c
 18960  004968  0E04               	movlw	4
 18961  00496A  6E48               	movwf	_compartment_number+6,c
 18962                           
 18963                           ;keypad.c: 266: compartment_number[4] = 5;
 18964  00496C  0E00               	movlw	0
 18965  00496E  6E4B               	movwf	_compartment_number+9,c
 18966  004970  0E05               	movlw	5
 18967  004972  6E4A               	movwf	_compartment_number+8,c
 18968                           
 18969                           ;keypad.c: 267: compartment_number[5] = 6;
 18970  004974  0E00               	movlw	0
 18971  004976  6E4D               	movwf	_compartment_number+11,c
 18972  004978  0E06               	movlw	6
 18973  00497A  6E4C               	movwf	_compartment_number+10,c
 18974                           
 18975                           ;keypad.c: 269: break;
 18976  00497C  0012               	return	
 18977  00497E                     
 18978                           ;keypad.c: 271: compartment_array[0] = 1;
 18979                           
 18980                           ; BSR set to: 0
 18981  00497E  0E00               	movlw	0
 18982  004980  0100               	movlb	0	; () banked
 18983  004982  6F81               	movwf	(_compartment_array+1)& (0+255),b
 18984  004984  0E01               	movlw	1
 18985  004986  6F80               	movwf	_compartment_array& (0+255),b
 18986                           
 18987                           ;keypad.c: 272: compartment_array[1] = 1;
 18988  004988  0E00               	movlw	0
 18989  00498A  6F83               	movwf	(_compartment_array+3)& (0+255),b
 18990  00498C  0E01               	movlw	1
 18991  00498E  6F82               	movwf	(_compartment_array+2)& (0+255),b
 18992                           
 18993                           ;keypad.c: 273: compartment_array[2] = 1;
 18994  004990  0E00               	movlw	0
 18995  004992  6F85               	movwf	(_compartment_array+5)& (0+255),b
 18996  004994  0E01               	movlw	1
 18997  004996  6F84               	movwf	(_compartment_array+4)& (0+255),b
 18998                           
 18999                           ;keypad.c: 274: compartment_array[3] = 1;
 19000  004998  0E00               	movlw	0
 19001  00499A  6F87               	movwf	(_compartment_array+7)& (0+255),b
 19002  00499C  0E01               	movlw	1
 19003  00499E  6F86               	movwf	(_compartment_array+6)& (0+255),b
 19004                           
 19005                           ;keypad.c: 275: compartment_array[4] = 1;
 19006  0049A0  0E00               	movlw	0
 19007  0049A2  6F89               	movwf	(_compartment_array+9)& (0+255),b
 19008  0049A4  0E01               	movlw	1
 19009  0049A6  6F88               	movwf	(_compartment_array+8)& (0+255),b
 19010                           
 19011                           ;keypad.c: 276: compartment_array[5] = 1;
 19012  0049A8  0E00               	movlw	0
 19013  0049AA  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 19014  0049AC  0E01               	movlw	1
 19015  0049AE  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 19016                           
 19017                           ;keypad.c: 277: compartment_array[6] = 1;
 19018  0049B0  0E00               	movlw	0
 19019  0049B2  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 19020  0049B4  0E01               	movlw	1
 19021  0049B6  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 19022                           
 19023                           ;keypad.c: 280: compartment_number[0] = 0;
 19024  0049B8  0E00               	movlw	0
 19025  0049BA  6E43               	movwf	_compartment_number+1,c
 19026  0049BC  0E00               	movlw	0
 19027  0049BE  6E42               	movwf	_compartment_number,c
 19028                           
 19029                           ;keypad.c: 281: compartment_number[1] = 1;
 19030  0049C0  0E00               	movlw	0
 19031  0049C2  6E45               	movwf	_compartment_number+3,c
 19032  0049C4  0E01               	movlw	1
 19033  0049C6  6E44               	movwf	_compartment_number+2,c
 19034                           
 19035                           ;keypad.c: 282: compartment_number[2] = 2;
 19036  0049C8  0E00               	movlw	0
 19037  0049CA  6E47               	movwf	_compartment_number+5,c
 19038  0049CC  0E02               	movlw	2
 19039  0049CE  6E46               	movwf	_compartment_number+4,c
 19040                           
 19041                           ;keypad.c: 283: compartment_number[3] = 3;
 19042  0049D0  0E00               	movlw	0
 19043  0049D2  6E49               	movwf	_compartment_number+7,c
 19044  0049D4  0E03               	movlw	3
 19045  0049D6  6E48               	movwf	_compartment_number+6,c
 19046                           
 19047                           ;keypad.c: 284: compartment_number[4] = 4;
 19048  0049D8  0E00               	movlw	0
 19049  0049DA  6E4B               	movwf	_compartment_number+9,c
 19050  0049DC  0E04               	movlw	4
 19051  0049DE  6E4A               	movwf	_compartment_number+8,c
 19052                           
 19053                           ;keypad.c: 285: compartment_number[5] = 5;
 19054  0049E0  0E00               	movlw	0
 19055  0049E2  6E4D               	movwf	_compartment_number+11,c
 19056  0049E4  0E05               	movlw	5
 19057  0049E6  6E4C               	movwf	_compartment_number+10,c
 19058                           
 19059                           ;keypad.c: 286: compartment_number[6] = 6;
 19060  0049E8  0E00               	movlw	0
 19061  0049EA  6E4F               	movwf	_compartment_number+13,c
 19062  0049EC  0E06               	movlw	6
 19063  0049EE  6E4E               	movwf	_compartment_number+12,c
 19064                           
 19065                           ;keypad.c: 288: break;
 19066  0049F0  0012               	return	
 19067  0049F2                     
 19068                           ;keypad.c: 290: compartment_array[0] = 1;
 19069                           
 19070                           ; BSR set to: 0
 19071  0049F2  0E00               	movlw	0
 19072  0049F4  0100               	movlb	0	; () banked
 19073  0049F6  6F81               	movwf	(_compartment_array+1)& (0+255),b
 19074  0049F8  0E01               	movlw	1
 19075  0049FA  6F80               	movwf	_compartment_array& (0+255),b
 19076                           
 19077                           ;keypad.c: 291: compartment_array[1] = 1;
 19078  0049FC  0E00               	movlw	0
 19079  0049FE  6F83               	movwf	(_compartment_array+3)& (0+255),b
 19080  004A00  0E01               	movlw	1
 19081  004A02  6F82               	movwf	(_compartment_array+2)& (0+255),b
 19082                           
 19083                           ;keypad.c: 292: compartment_array[2] = 1;
 19084  004A04  0E00               	movlw	0
 19085  004A06  6F85               	movwf	(_compartment_array+5)& (0+255),b
 19086  004A08  0E01               	movlw	1
 19087  004A0A  6F84               	movwf	(_compartment_array+4)& (0+255),b
 19088                           
 19089                           ;keypad.c: 293: compartment_array[3] = 1;
 19090  004A0C  0E00               	movlw	0
 19091  004A0E  6F87               	movwf	(_compartment_array+7)& (0+255),b
 19092  004A10  0E01               	movlw	1
 19093  004A12  6F86               	movwf	(_compartment_array+6)& (0+255),b
 19094                           
 19095                           ;keypad.c: 294: compartment_array[4] = 1;
 19096  004A14  0E00               	movlw	0
 19097  004A16  6F89               	movwf	(_compartment_array+9)& (0+255),b
 19098  004A18  0E01               	movlw	1
 19099  004A1A  6F88               	movwf	(_compartment_array+8)& (0+255),b
 19100                           
 19101                           ;keypad.c: 295: compartment_array[5] = 1;
 19102  004A1C  0E00               	movlw	0
 19103  004A1E  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 19104  004A20  0E01               	movlw	1
 19105  004A22  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 19106                           
 19107                           ;keypad.c: 296: compartment_array[6] = 1;
 19108  004A24  0E00               	movlw	0
 19109  004A26  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 19110  004A28  0E01               	movlw	1
 19111  004A2A  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 19112                           
 19113                           ;keypad.c: 297: compartment_array[7] = 1;
 19114  004A2C  0E00               	movlw	0
 19115  004A2E  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 19116  004A30  0E01               	movlw	1
 19117  004A32  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 19118                           
 19119                           ;keypad.c: 300: compartment_number[0] = 0;
 19120  004A34  0E00               	movlw	0
 19121  004A36  6E43               	movwf	_compartment_number+1,c
 19122  004A38  0E00               	movlw	0
 19123  004A3A  6E42               	movwf	_compartment_number,c
 19124                           
 19125                           ;keypad.c: 301: compartment_number[1] = 1;
 19126  004A3C  0E00               	movlw	0
 19127  004A3E  6E45               	movwf	_compartment_number+3,c
 19128  004A40  0E01               	movlw	1
 19129  004A42  6E44               	movwf	_compartment_number+2,c
 19130                           
 19131                           ;keypad.c: 302: compartment_number[2] = 2;
 19132  004A44  0E00               	movlw	0
 19133  004A46  6E47               	movwf	_compartment_number+5,c
 19134  004A48  0E02               	movlw	2
 19135  004A4A  6E46               	movwf	_compartment_number+4,c
 19136                           
 19137                           ;keypad.c: 303: compartment_number[3] = 3;
 19138  004A4C  0E00               	movlw	0
 19139  004A4E  6E49               	movwf	_compartment_number+7,c
 19140  004A50  0E03               	movlw	3
 19141  004A52  6E48               	movwf	_compartment_number+6,c
 19142                           
 19143                           ;keypad.c: 304: compartment_number[4] = 4;
 19144  004A54  0E00               	movlw	0
 19145  004A56  6E4B               	movwf	_compartment_number+9,c
 19146  004A58  0E04               	movlw	4
 19147  004A5A  6E4A               	movwf	_compartment_number+8,c
 19148                           
 19149                           ;keypad.c: 305: compartment_number[5] = 5;
 19150  004A5C  0E00               	movlw	0
 19151  004A5E  6E4D               	movwf	_compartment_number+11,c
 19152  004A60  0E05               	movlw	5
 19153  004A62  6E4C               	movwf	_compartment_number+10,c
 19154                           
 19155                           ;keypad.c: 306: compartment_number[6] = 6;
 19156  004A64  0E00               	movlw	0
 19157  004A66  6E4F               	movwf	_compartment_number+13,c
 19158  004A68  0E06               	movlw	6
 19159  004A6A  6E4E               	movwf	_compartment_number+12,c
 19160                           
 19161                           ;keypad.c: 307: compartment_number[7] = 7;
 19162  004A6C  0E00               	movlw	0
 19163  004A6E  6E51               	movwf	_compartment_number+15,c
 19164  004A70  0E07               	movlw	7
 19165  004A72  6E50               	movwf	_compartment_number+14,c
 19166                           
 19167                           ;keypad.c: 309: break;
 19168  004A74  0012               	return	
 19169  004A76                     
 19170                           ;keypad.c: 311: compartment_array[0] = 0;
 19171                           
 19172                           ; BSR set to: 0
 19173  004A76  0E00               	movlw	0
 19174  004A78  0100               	movlb	0	; () banked
 19175  004A7A  6F81               	movwf	(_compartment_array+1)& (0+255),b
 19176  004A7C  0E00               	movlw	0
 19177  004A7E  6F80               	movwf	_compartment_array& (0+255),b
 19178                           
 19179                           ;keypad.c: 312: compartment_array[1] = 0;
 19180  004A80  0E00               	movlw	0
 19181  004A82  6F83               	movwf	(_compartment_array+3)& (0+255),b
 19182  004A84  0E00               	movlw	0
 19183  004A86  6F82               	movwf	(_compartment_array+2)& (0+255),b
 19184                           
 19185                           ;keypad.c: 313: compartment_array[2] = 0;
 19186  004A88  0E00               	movlw	0
 19187  004A8A  6F85               	movwf	(_compartment_array+5)& (0+255),b
 19188  004A8C  0E00               	movlw	0
 19189  004A8E  6F84               	movwf	(_compartment_array+4)& (0+255),b
 19190                           
 19191                           ;keypad.c: 314: compartment_array[3] = 0;
 19192  004A90  0E00               	movlw	0
 19193  004A92  6F87               	movwf	(_compartment_array+7)& (0+255),b
 19194  004A94  0E00               	movlw	0
 19195  004A96  6F86               	movwf	(_compartment_array+6)& (0+255),b
 19196                           
 19197                           ;keypad.c: 315: compartment_array[4] = 0;
 19198  004A98  0E00               	movlw	0
 19199  004A9A  6F89               	movwf	(_compartment_array+9)& (0+255),b
 19200  004A9C  0E00               	movlw	0
 19201  004A9E  6F88               	movwf	(_compartment_array+8)& (0+255),b
 19202                           
 19203                           ;keypad.c: 316: compartment_array[5] = 0;
 19204  004AA0  0E00               	movlw	0
 19205  004AA2  6F8B               	movwf	(_compartment_array+11)& (0+255),b
 19206  004AA4  0E00               	movlw	0
 19207  004AA6  6F8A               	movwf	(_compartment_array+10)& (0+255),b
 19208                           
 19209                           ;keypad.c: 317: compartment_array[6] = 0;
 19210  004AA8  0E00               	movlw	0
 19211  004AAA  6F8D               	movwf	(_compartment_array+13)& (0+255),b
 19212  004AAC  0E00               	movlw	0
 19213  004AAE  6F8C               	movwf	(_compartment_array+12)& (0+255),b
 19214                           
 19215                           ;keypad.c: 318: compartment_array[7] = 0;
 19216  004AB0  0E00               	movlw	0
 19217  004AB2  6F8F               	movwf	(_compartment_array+15)& (0+255),b
 19218  004AB4  0E00               	movlw	0
 19219  004AB6  6F8E               	movwf	(_compartment_array+14)& (0+255),b
 19220                           
 19221                           ;keypad.c: 320: }
 19222  004AB8  0012               	return	
 19223  004ABA                     i2l1064:
 19224                           
 19225                           ; BSR set to: 0
 19226  004ABA  C001  F003         	movff	i2generate_compartment_array@step,??i2_generate_compartment_array
 19227  004ABE  C002  F004         	movff	i2generate_compartment_array@step+1,??i2_generate_compartment_array+1
 19228                           
 19229                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19230                           ; Switch size 1, requested type "space"
 19231                           ; Number of cases is 1, Range of values is 0 to 0
 19232                           ; switch strategies available:
 19233                           ; Name         Instructions Cycles
 19234                           ; simple_byte            4     3 (average)
 19235                           ;	Chosen strategy is simple_byte
 19236  004AC2  5004               	movf	??i2_generate_compartment_array+1,w,c
 19237  004AC4  0A00               	xorlw	0	; case 0
 19238  004AC6  A4D8               	btfss	status,2,c
 19239  004AC8  D7D6               	goto	i2l1071
 19240                           
 19241                           ; Switch size 1, requested type "space"
 19242                           ; Number of cases is 5, Range of values is 4 to 8
 19243                           ; switch strategies available:
 19244                           ; Name         Instructions Cycles
 19245                           ; simple_byte           16     9 (average)
 19246                           ;	Chosen strategy is simple_byte
 19247  004ACA  5003               	movf	??i2_generate_compartment_array,w,c
 19248  004ACC  0A04               	xorlw	4	; case 4
 19249  004ACE  B4D8               	btfsc	status,2,c
 19250  004AD0  D6D8               	goto	i2l1065
 19251  004AD2  0A01               	xorlw	1	; case 5
 19252  004AD4  B4D8               	btfsc	status,2,c
 19253  004AD6  D6F7               	goto	i2l1067
 19254  004AD8  0A03               	xorlw	3	; case 6
 19255  004ADA  B4D8               	btfsc	status,2,c
 19256  004ADC  D71E               	goto	i2l1068
 19257  004ADE  0A01               	xorlw	1	; case 7
 19258  004AE0  B4D8               	btfsc	status,2,c
 19259  004AE2  D74D               	goto	i2l1069
 19260  004AE4  0A0F               	xorlw	15	; case 8
 19261  004AE6  B4D8               	btfsc	status,2,c
 19262  004AE8  D784               	goto	i2l1070
 19263  004AEA  D7C5               	goto	i2l1071
 19264  004AEC                     __end_ofi2_generate_compartment_array:
 19265                           	opt stack 0
 19266                           pclatu	equ	0xFFB
 19267                           pclath	equ	0xFFA
 19268                           tblptru	equ	0xFF8
 19269                           tblptrh	equ	0xFF7
 19270                           tblptrl	equ	0xFF6
 19271                           tablat	equ	0xFF5
 19272                           prodh	equ	0xFF4
 19273                           prodl	equ	0xFF3
 19274                           intcon	equ	0xFF2
 19275                           intcon3	equ	0xFF0
 19276                           indf0	equ	0xFEF
 19277                           postinc0	equ	0xFEE
 19278                           fsr0h	equ	0xFEA
 19279                           fsr0l	equ	0xFE9
 19280                           wreg	equ	0xFE8
 19281                           postdec1	equ	0xFE5
 19282                           fsr1h	equ	0xFE2
 19283                           fsr1l	equ	0xFE1
 19284                           indf2	equ	0xFDF
 19285                           postinc2	equ	0xFDE
 19286                           postdec2	equ	0xFDD
 19287                           fsr2h	equ	0xFDA
 19288                           fsr2l	equ	0xFD9
 19289                           status	equ	0xFD8
 19290                           
 19291 ;; *************** function i2___awdiv *****************
 19292 ;; Defined at:
 19293 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
 19294 ;; Parameters:    Size  Location     Type
 19295 ;;  dividend        2    0[COMRAM] int 
 19296 ;;  divisor         2    2[COMRAM] int 
 19297 ;; Auto vars:     Size  Location     Type
 19298 ;;  __awdiv         2    6[COMRAM] int 
 19299 ;;  __awdiv         1    5[COMRAM] unsigned char 
 19300 ;;  __awdiv         1    4[COMRAM] unsigned char 
 19301 ;; Return value:  Size  Location     Type
 19302 ;;                  2    0[COMRAM] int 
 19303 ;; Registers used:
 19304 ;;		wreg, status,2, status,0
 19305 ;; Tracked objects:
 19306 ;;		On entry : 0/0
 19307 ;;		On exit  : 0/0
 19308 ;;		Unchanged: 0/0
 19309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19310 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19311 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19313 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19314 ;;Total ram usage:        8 bytes
 19315 ;; Hardware stack levels used:    1
 19316 ;; This function calls:
 19317 ;;		Nothing
 19318 ;; This function is called by:
 19319 ;;		_interruptHandler
 19320 ;; This function uses a non-reentrant model
 19321 ;;
 19322                           
 19323                           	psect	text53
 19324  005A70                     __ptext53:
 19325                           	opt stack 0
 19326  005A70                     i2___awdiv:
 19327                           	opt stack 23
 19328                           
 19329                           ;incstack = 0
 19330  005A70  0E00               	movlw	0
 19331  005A72  6E06               	movwf	i2___awdiv@sign,c
 19332  005A74  AE04               	btfss	i2___awdiv@divisor+1,7,c
 19333  005A76  D006               	goto	i2l1626
 19334  005A78  6C03               	negf	i2___awdiv@divisor,c
 19335  005A7A  1E04               	comf	i2___awdiv@divisor+1,f,c
 19336  005A7C  B0D8               	btfsc	status,0,c
 19337  005A7E  2A04               	incf	i2___awdiv@divisor+1,f,c
 19338  005A80  0E01               	movlw	1
 19339  005A82  6E06               	movwf	i2___awdiv@sign,c
 19340  005A84                     i2l1626:
 19341  005A84  AE02               	btfss	i2___awdiv@dividend+1,7,c
 19342  005A86  D006               	goto	i2l1627
 19343  005A88  6C01               	negf	i2___awdiv@dividend,c
 19344  005A8A  1E02               	comf	i2___awdiv@dividend+1,f,c
 19345  005A8C  B0D8               	btfsc	status,0,c
 19346  005A8E  2A02               	incf	i2___awdiv@dividend+1,f,c
 19347  005A90  0E01               	movlw	1
 19348  005A92  1A06               	xorwf	i2___awdiv@sign,f,c
 19349  005A94                     i2l1627:
 19350  005A94  0E00               	movlw	0
 19351  005A96  6E08               	movwf	i2___awdiv@quotient+1,c
 19352  005A98  0E00               	movlw	0
 19353  005A9A  6E07               	movwf	i2___awdiv@quotient,c
 19354  005A9C  5003               	movf	i2___awdiv@divisor,w,c
 19355  005A9E  1004               	iorwf	i2___awdiv@divisor+1,w,c
 19356  005AA0  B4D8               	btfsc	status,2,c
 19357  005AA2  D01C               	goto	i2l1634
 19358  005AA4  0E01               	movlw	1
 19359  005AA6  6E05               	movwf	i2___awdiv@counter,c
 19360  005AA8  D004               	goto	i2l1629
 19361  005AAA  90D8               	bcf	status,0,c
 19362  005AAC  3603               	rlcf	i2___awdiv@divisor,f,c
 19363  005AAE  3604               	rlcf	i2___awdiv@divisor+1,f,c
 19364  005AB0  2A05               	incf	i2___awdiv@counter,f,c
 19365  005AB2                     i2l1629:
 19366  005AB2  AE04               	btfss	i2___awdiv@divisor+1,7,c
 19367  005AB4  D7FA               	goto	i2l1630
 19368  005AB6                     i2u523_40:
 19369  005AB6  90D8               	bcf	status,0,c
 19370  005AB8  3607               	rlcf	i2___awdiv@quotient,f,c
 19371  005ABA  3608               	rlcf	i2___awdiv@quotient+1,f,c
 19372  005ABC  5003               	movf	i2___awdiv@divisor,w,c
 19373  005ABE  5C01               	subwf	i2___awdiv@dividend,w,c
 19374  005AC0  5004               	movf	i2___awdiv@divisor+1,w,c
 19375  005AC2  5802               	subwfb	i2___awdiv@dividend+1,w,c
 19376  005AC4  A0D8               	btfss	status,0,c
 19377  005AC6  D005               	goto	i2l1633
 19378  005AC8  5003               	movf	i2___awdiv@divisor,w,c
 19379  005ACA  5E01               	subwf	i2___awdiv@dividend,f,c
 19380  005ACC  5004               	movf	i2___awdiv@divisor+1,w,c
 19381  005ACE  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 19382  005AD0  8007               	bsf	i2___awdiv@quotient,0,c
 19383  005AD2                     i2l1633:
 19384  005AD2  90D8               	bcf	status,0,c
 19385  005AD4  3204               	rrcf	i2___awdiv@divisor+1,f,c
 19386  005AD6  3203               	rrcf	i2___awdiv@divisor,f,c
 19387  005AD8  2E05               	decfsz	i2___awdiv@counter,f,c
 19388  005ADA  D7ED               	goto	i2u523_40
 19389  005ADC                     i2l1634:
 19390  005ADC  5006               	movf	i2___awdiv@sign,w,c
 19391  005ADE  B4D8               	btfsc	status,2,c
 19392  005AE0  D004               	goto	i2l1635
 19393  005AE2  6C07               	negf	i2___awdiv@quotient,c
 19394  005AE4  1E08               	comf	i2___awdiv@quotient+1,f,c
 19395  005AE6  B0D8               	btfsc	status,0,c
 19396  005AE8  2A08               	incf	i2___awdiv@quotient+1,f,c
 19397  005AEA                     i2l1635:
 19398  005AEA  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 19399  005AEE  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 19400  005AF2  0012               	return	
 19401  005AF4                     __end_ofi2___awdiv:
 19402                           	opt stack 0
 19403                           pclatu	equ	0xFFB
 19404                           pclath	equ	0xFFA
 19405                           tblptru	equ	0xFF8
 19406                           tblptrh	equ	0xFF7
 19407                           tblptrl	equ	0xFF6
 19408                           tablat	equ	0xFF5
 19409                           prodh	equ	0xFF4
 19410                           prodl	equ	0xFF3
 19411                           intcon	equ	0xFF2
 19412                           intcon3	equ	0xFF0
 19413                           indf0	equ	0xFEF
 19414                           postinc0	equ	0xFEE
 19415                           fsr0h	equ	0xFEA
 19416                           fsr0l	equ	0xFE9
 19417                           wreg	equ	0xFE8
 19418                           postdec1	equ	0xFE5
 19419                           fsr1h	equ	0xFE2
 19420                           fsr1l	equ	0xFE1
 19421                           indf2	equ	0xFDF
 19422                           postinc2	equ	0xFDE
 19423                           postdec2	equ	0xFDD
 19424                           fsr2h	equ	0xFDA
 19425                           fsr2l	equ	0xFD9
 19426                           status	equ	0xFD8
 19427                           
 19428 ;; *************** function i2_I2C_Master_Write *****************
 19429 ;; Defined at:
 19430 ;;		line 108 in file "I2C.c"
 19431 ;; Parameters:    Size  Location     Type
 19432 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 19433 ;; Auto vars:     Size  Location     Type
 19434 ;;		None
 19435 ;; Return value:  Size  Location     Type
 19436 ;;                  1    wreg      void 
 19437 ;; Registers used:
 19438 ;;		wreg, status,2, status,0, cstack
 19439 ;; Tracked objects:
 19440 ;;		On entry : 0/0
 19441 ;;		On exit  : 0/0
 19442 ;;		Unchanged: 0/0
 19443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19444 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19448 ;;Total ram usage:        2 bytes
 19449 ;; Hardware stack levels used:    1
 19450 ;; Hardware stack levels required when called:    1
 19451 ;; This function calls:
 19452 ;;		i2_I2C_Master_Wait
 19453 ;; This function is called by:
 19454 ;;		_interruptHandler
 19455 ;; This function uses a non-reentrant model
 19456 ;;
 19457                           
 19458                           	psect	text54
 19459  006272                     __ptext54:
 19460                           	opt stack 0
 19461  006272                     i2_I2C_Master_Write:
 19462                           	opt stack 22
 19463                           
 19464                           ;I2C.c: 116: I2C_Master_Wait();
 19465                           
 19466                           ;incstack = 0
 19467  006272  EC1F  F031         	call	i2_I2C_Master_Wait	;wreg free
 19468                           
 19469                           ;I2C.c: 117: SSPBUF = byteToWrite;
 19470  006276  C002  FFC9         	movff	i2I2C_Master_Write@byteToWrite,4041	;volatile
 19471  00627A  0012               	return		;funcret
 19472  00627C                     __end_ofi2_I2C_Master_Write:
 19473                           	opt stack 0
 19474                           pclatu	equ	0xFFB
 19475                           pclath	equ	0xFFA
 19476                           tblptru	equ	0xFF8
 19477                           tblptrh	equ	0xFF7
 19478                           tblptrl	equ	0xFF6
 19479                           tablat	equ	0xFF5
 19480                           prodh	equ	0xFF4
 19481                           prodl	equ	0xFF3
 19482                           intcon	equ	0xFF2
 19483                           intcon3	equ	0xFF0
 19484                           indf0	equ	0xFEF
 19485                           postinc0	equ	0xFEE
 19486                           fsr0h	equ	0xFEA
 19487                           fsr0l	equ	0xFE9
 19488                           wreg	equ	0xFE8
 19489                           postdec1	equ	0xFE5
 19490                           fsr1h	equ	0xFE2
 19491                           fsr1l	equ	0xFE1
 19492                           indf2	equ	0xFDF
 19493                           postinc2	equ	0xFDE
 19494                           postdec2	equ	0xFDD
 19495                           fsr2h	equ	0xFDA
 19496                           fsr2l	equ	0xFD9
 19497                           status	equ	0xFD8
 19498                           
 19499 ;; *************** function i2_I2C_Master_Stop *****************
 19500 ;; Defined at:
 19501 ;;		line 95 in file "I2C.c"
 19502 ;; Parameters:    Size  Location     Type
 19503 ;;		None
 19504 ;; Auto vars:     Size  Location     Type
 19505 ;;		None
 19506 ;; Return value:  Size  Location     Type
 19507 ;;                  1    wreg      void 
 19508 ;; Registers used:
 19509 ;;		wreg, status,2, status,0, cstack
 19510 ;; Tracked objects:
 19511 ;;		On entry : 0/0
 19512 ;;		On exit  : 0/0
 19513 ;;		Unchanged: 0/0
 19514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19519 ;;Total ram usage:        0 bytes
 19520 ;; Hardware stack levels used:    1
 19521 ;; Hardware stack levels required when called:    1
 19522 ;; This function calls:
 19523 ;;		i2_I2C_Master_Wait
 19524 ;; This function is called by:
 19525 ;;		_interruptHandler
 19526 ;; This function uses a non-reentrant model
 19527 ;;
 19528                           
 19529                           	psect	text55
 19530  006294                     __ptext55:
 19531                           	opt stack 0
 19532  006294                     i2_I2C_Master_Stop:
 19533                           	opt stack 22
 19534                           
 19535                           ;I2C.c: 104: I2C_Master_Wait();
 19536                           
 19537                           ;incstack = 0
 19538  006294  EC1F  F031         	call	i2_I2C_Master_Wait	;wreg free
 19539                           
 19540                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 19541  006298  84C5               	bsf	4037,2,c	;volatile
 19542  00629A  0012               	return		;funcret
 19543  00629C                     __end_ofi2_I2C_Master_Stop:
 19544                           	opt stack 0
 19545                           pclatu	equ	0xFFB
 19546                           pclath	equ	0xFFA
 19547                           tblptru	equ	0xFF8
 19548                           tblptrh	equ	0xFF7
 19549                           tblptrl	equ	0xFF6
 19550                           tablat	equ	0xFF5
 19551                           prodh	equ	0xFF4
 19552                           prodl	equ	0xFF3
 19553                           intcon	equ	0xFF2
 19554                           intcon3	equ	0xFF0
 19555                           indf0	equ	0xFEF
 19556                           postinc0	equ	0xFEE
 19557                           fsr0h	equ	0xFEA
 19558                           fsr0l	equ	0xFE9
 19559                           wreg	equ	0xFE8
 19560                           postdec1	equ	0xFE5
 19561                           fsr1h	equ	0xFE2
 19562                           fsr1l	equ	0xFE1
 19563                           indf2	equ	0xFDF
 19564                           postinc2	equ	0xFDE
 19565                           postdec2	equ	0xFDD
 19566                           fsr2h	equ	0xFDA
 19567                           fsr2l	equ	0xFD9
 19568                           status	equ	0xFD8
 19569                           
 19570 ;; *************** function i2_I2C_Master_Start *****************
 19571 ;; Defined at:
 19572 ;;		line 69 in file "I2C.c"
 19573 ;; Parameters:    Size  Location     Type
 19574 ;;		None
 19575 ;; Auto vars:     Size  Location     Type
 19576 ;;		None
 19577 ;; Return value:  Size  Location     Type
 19578 ;;                  1    wreg      void 
 19579 ;; Registers used:
 19580 ;;		wreg, status,2, status,0, cstack
 19581 ;; Tracked objects:
 19582 ;;		On entry : 0/0
 19583 ;;		On exit  : 0/0
 19584 ;;		Unchanged: 0/0
 19585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19590 ;;Total ram usage:        0 bytes
 19591 ;; Hardware stack levels used:    1
 19592 ;; Hardware stack levels required when called:    1
 19593 ;; This function calls:
 19594 ;;		i2_I2C_Master_Wait
 19595 ;; This function is called by:
 19596 ;;		_interruptHandler
 19597 ;; This function uses a non-reentrant model
 19598 ;;
 19599                           
 19600                           	psect	text56
 19601  00629C                     __ptext56:
 19602                           	opt stack 0
 19603  00629C                     i2_I2C_Master_Start:
 19604                           	opt stack 22
 19605                           
 19606                           ;I2C.c: 78: I2C_Master_Wait();
 19607                           
 19608                           ;incstack = 0
 19609  00629C  EC1F  F031         	call	i2_I2C_Master_Wait	;wreg free
 19610                           
 19611                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 19612  0062A0  80C5               	bsf	4037,0,c	;volatile
 19613  0062A2  0012               	return		;funcret
 19614  0062A4                     __end_ofi2_I2C_Master_Start:
 19615                           	opt stack 0
 19616                           pclatu	equ	0xFFB
 19617                           pclath	equ	0xFFA
 19618                           tblptru	equ	0xFF8
 19619                           tblptrh	equ	0xFF7
 19620                           tblptrl	equ	0xFF6
 19621                           tablat	equ	0xFF5
 19622                           prodh	equ	0xFF4
 19623                           prodl	equ	0xFF3
 19624                           intcon	equ	0xFF2
 19625                           intcon3	equ	0xFF0
 19626                           indf0	equ	0xFEF
 19627                           postinc0	equ	0xFEE
 19628                           fsr0h	equ	0xFEA
 19629                           fsr0l	equ	0xFE9
 19630                           wreg	equ	0xFE8
 19631                           postdec1	equ	0xFE5
 19632                           fsr1h	equ	0xFE2
 19633                           fsr1l	equ	0xFE1
 19634                           indf2	equ	0xFDF
 19635                           postinc2	equ	0xFDE
 19636                           postdec2	equ	0xFDD
 19637                           fsr2h	equ	0xFDA
 19638                           fsr2l	equ	0xFD9
 19639                           status	equ	0xFD8
 19640                           
 19641 ;; *************** function i2_I2C_Master_Read *****************
 19642 ;; Defined at:
 19643 ;;		line 120 in file "I2C.c"
 19644 ;; Parameters:    Size  Location     Type
 19645 ;;  ackBit          1    wreg     unsigned char 
 19646 ;; Auto vars:     Size  Location     Type
 19647 ;;  ackBit          1    1[COMRAM] unsigned char 
 19648 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 19649 ;; Return value:  Size  Location     Type
 19650 ;;                  1    wreg      unsigned char 
 19651 ;; Registers used:
 19652 ;;		wreg, status,2, status,0, cstack
 19653 ;; Tracked objects:
 19654 ;;		On entry : 0/0
 19655 ;;		On exit  : 0/0
 19656 ;;		Unchanged: 0/0
 19657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19659 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19661 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19662 ;;Total ram usage:        2 bytes
 19663 ;; Hardware stack levels used:    1
 19664 ;; Hardware stack levels required when called:    1
 19665 ;; This function calls:
 19666 ;;		i2_I2C_Master_Wait
 19667 ;; This function is called by:
 19668 ;;		_interruptHandler
 19669 ;; This function uses a non-reentrant model
 19670 ;;
 19671                           
 19672                           	psect	text57
 19673  00615A                     __ptext57:
 19674                           	opt stack 0
 19675  00615A                     i2_I2C_Master_Read:
 19676                           	opt stack 22
 19677                           
 19678                           ;incstack = 0
 19679                           ;i2I2C_Master_Read@ackBit stored from wreg
 19680  00615A  6E02               	movwf	i2I2C_Master_Read@ackBit,c
 19681                           
 19682                           ;I2C.c: 130: unsigned char receivedByte;
 19683                           ;I2C.c: 132: I2C_Master_Wait();
 19684  00615C  EC1F  F031         	call	i2_I2C_Master_Wait	;wreg free
 19685                           
 19686                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 19687  006160  86C5               	bsf	4037,3,c	;volatile
 19688                           
 19689                           ;I2C.c: 135: I2C_Master_Wait();
 19690  006162  EC1F  F031         	call	i2_I2C_Master_Wait	;wreg free
 19691                           
 19692                           ;I2C.c: 136: receivedByte = SSPBUF;
 19693  006166  CFC9 F003          	movff	4041,i2I2C_Master_Read@receivedByte	;volatile
 19694                           
 19695                           ;I2C.c: 138: I2C_Master_Wait();
 19696  00616A  EC1F  F031         	call	i2_I2C_Master_Wait	;wreg free
 19697                           
 19698                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 19699  00616E  B002               	btfsc	i2I2C_Master_Read@ackBit,0,c
 19700  006170  D002               	bra	i2u489_45
 19701  006172  9AC5               	bcf	4037,5,c	;volatile
 19702  006174  D001               	bra	i2u489_46
 19703  006176                     i2u489_45:
 19704  006176  8AC5               	bsf	4037,5,c	;volatile
 19705  006178                     i2u489_46:
 19706                           
 19707                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 19708  006178  88C5               	bsf	4037,4,c	;volatile
 19709                           
 19710                           ;I2C.c: 142: return receivedByte;
 19711  00617A  5003               	movf	i2I2C_Master_Read@receivedByte,w,c
 19712  00617C  0012               	return	
 19713  00617E                     __end_ofi2_I2C_Master_Read:
 19714                           	opt stack 0
 19715                           pclatu	equ	0xFFB
 19716                           pclath	equ	0xFFA
 19717                           tblptru	equ	0xFF8
 19718                           tblptrh	equ	0xFF7
 19719                           tblptrl	equ	0xFF6
 19720                           tablat	equ	0xFF5
 19721                           prodh	equ	0xFF4
 19722                           prodl	equ	0xFF3
 19723                           intcon	equ	0xFF2
 19724                           intcon3	equ	0xFF0
 19725                           indf0	equ	0xFEF
 19726                           postinc0	equ	0xFEE
 19727                           fsr0h	equ	0xFEA
 19728                           fsr0l	equ	0xFE9
 19729                           wreg	equ	0xFE8
 19730                           postdec1	equ	0xFE5
 19731                           fsr1h	equ	0xFE2
 19732                           fsr1l	equ	0xFE1
 19733                           indf2	equ	0xFDF
 19734                           postinc2	equ	0xFDE
 19735                           postdec2	equ	0xFDD
 19736                           fsr2h	equ	0xFDA
 19737                           fsr2l	equ	0xFD9
 19738                           status	equ	0xFD8
 19739                           
 19740 ;; *************** function i2_I2C_Master_Wait *****************
 19741 ;; Defined at:
 19742 ;;		line 51 in file "I2C.c"
 19743 ;; Parameters:    Size  Location     Type
 19744 ;;		None
 19745 ;; Auto vars:     Size  Location     Type
 19746 ;;		None
 19747 ;; Return value:  Size  Location     Type
 19748 ;;                  1    wreg      void 
 19749 ;; Registers used:
 19750 ;;		wreg, status,2, status,0
 19751 ;; Tracked objects:
 19752 ;;		On entry : 0/0
 19753 ;;		On exit  : 0/0
 19754 ;;		Unchanged: 0/0
 19755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19758 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19759 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19760 ;;Total ram usage:        1 bytes
 19761 ;; Hardware stack levels used:    1
 19762 ;; This function calls:
 19763 ;;		Nothing
 19764 ;; This function is called by:
 19765 ;;		i2_I2C_Master_Start
 19766 ;;		i2_I2C_Master_Stop
 19767 ;;		i2_I2C_Master_Write
 19768 ;;		i2_I2C_Master_Read
 19769 ;; This function uses a non-reentrant model
 19770 ;;
 19771                           
 19772                           	psect	text58
 19773  00623E                     __ptext58:
 19774                           	opt stack 0
 19775  00623E                     i2_I2C_Master_Wait:
 19776                           	opt stack 22
 19777                           
 19778                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 19779                           
 19780                           ;incstack = 0
 19781  00623E  B4C7               	btfsc	4039,2,c	;volatile
 19782  006240  D7FE               	goto	i2_I2C_Master_Wait
 19783  006242  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 19784  006246  0E1F               	movlw	31
 19785  006248  1601               	andwf	??i2_I2C_Master_Wait,f,c
 19786  00624A  B4D8               	btfsc	status,2,c
 19787  00624C  0012               	return	
 19788  00624E  D7F7               	goto	i2_I2C_Master_Wait
 19789  006250                     __end_ofi2_I2C_Master_Wait:
 19790                           	opt stack 0
 19791                           pclatu	equ	0xFFB
 19792                           pclath	equ	0xFFA
 19793                           tblptru	equ	0xFF8
 19794                           tblptrh	equ	0xFF7
 19795                           tblptrl	equ	0xFF6
 19796                           tablat	equ	0xFF5
 19797                           prodh	equ	0xFF4
 19798                           prodl	equ	0xFF3
 19799                           intcon	equ	0xFF2
 19800                           intcon3	equ	0xFF0
 19801                           indf0	equ	0xFEF
 19802                           postinc0	equ	0xFEE
 19803                           fsr0h	equ	0xFEA
 19804                           fsr0l	equ	0xFE9
 19805                           wreg	equ	0xFE8
 19806                           postdec1	equ	0xFE5
 19807                           fsr1h	equ	0xFE2
 19808                           fsr1l	equ	0xFE1
 19809                           indf2	equ	0xFDF
 19810                           postinc2	equ	0xFDE
 19811                           postdec2	equ	0xFDD
 19812                           fsr2h	equ	0xFDA
 19813                           fsr2l	equ	0xFD9
 19814                           status	equ	0xFD8
 19815                           
 19816 ;; *************** function i2_I2C_Master_Init *****************
 19817 ;; Defined at:
 19818 ;;		line 14 in file "I2C.c"
 19819 ;; Parameters:    Size  Location     Type
 19820 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 19821 ;; Auto vars:     Size  Location     Type
 19822 ;;		None
 19823 ;; Return value:  Size  Location     Type
 19824 ;;                  1    wreg      void 
 19825 ;; Registers used:
 19826 ;;		wreg, status,2, status,0, cstack
 19827 ;; Tracked objects:
 19828 ;;		On entry : 0/0
 19829 ;;		On exit  : 0/0
 19830 ;;		Unchanged: 0/0
 19831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19834 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19835 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19836 ;;Total ram usage:        8 bytes
 19837 ;; Hardware stack levels used:    1
 19838 ;; Hardware stack levels required when called:    1
 19839 ;; This function calls:
 19840 ;;		i2___lldiv
 19841 ;; This function is called by:
 19842 ;;		_interruptHandler
 19843 ;; This function uses a non-reentrant model
 19844 ;;
 19845                           
 19846                           	psect	text59
 19847  005D08                     __ptext59:
 19848                           	opt stack 0
 19849  005D08                     i2_I2C_Master_Init:
 19850                           	opt stack 22
 19851                           
 19852                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 19853                           
 19854                           ;incstack = 0
 19855  005D08  9AC6               	bcf	4038,5,c	;volatile
 19856                           
 19857                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 19858  005D0A  8694               	bsf	3988,3,c	;volatile
 19859                           
 19860                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 19861  005D0C  8894               	bsf	3988,4,c	;volatile
 19862                           
 19863                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 19864  005D0E  0E80               	movlw	128
 19865  005D10  6EC7               	movwf	4039,c	;volatile
 19866                           
 19867                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 19868  005D12  0E28               	movlw	40
 19869  005D14  6EC6               	movwf	4038,c	;volatile
 19870                           
 19871                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 19872  005D16  0E00               	movlw	0
 19873  005D18  6EC5               	movwf	4037,c	;volatile
 19874                           
 19875                           ;I2C.c: 48: SSPADD = (32000000 / (4 * clockFreq)) - 1;
 19876  005D1A  0E00               	movlw	0
 19877  005D1C  6E01               	movwf	i2___lldiv@dividend,c
 19878  005D1E  0E48               	movlw	72
 19879  005D20  6E02               	movwf	i2___lldiv@dividend+1,c
 19880  005D22  0EE8               	movlw	232
 19881  005D24  6E03               	movwf	i2___lldiv@dividend+2,c
 19882  005D26  0E01               	movlw	1
 19883  005D28  6E04               	movwf	i2___lldiv@dividend+3,c
 19884  005D2A  C00E  F012         	movff	i2I2C_Master_Init@clockFreq,??i2_I2C_Master_Init
 19885  005D2E  C00F  F013         	movff	i2I2C_Master_Init@clockFreq+1,??i2_I2C_Master_Init+1
 19886  005D32  C010  F014         	movff	i2I2C_Master_Init@clockFreq+2,??i2_I2C_Master_Init+2
 19887  005D36  C011  F015         	movff	i2I2C_Master_Init@clockFreq+3,??i2_I2C_Master_Init+3
 19888  005D3A  0E02               	movlw	2
 19889  005D3C                     i2u488_45:
 19890  005D3C  90D8               	bcf	status,0,c
 19891  005D3E  3612               	rlcf	??i2_I2C_Master_Init,f,c
 19892  005D40  3613               	rlcf	??i2_I2C_Master_Init+1,f,c
 19893  005D42  3614               	rlcf	??i2_I2C_Master_Init+2,f,c
 19894  005D44  3615               	rlcf	??i2_I2C_Master_Init+3,f,c
 19895  005D46  2EE8               	decfsz	wreg,f,c
 19896  005D48  D7F9               	goto	i2u488_45
 19897  005D4A  C012  F005         	movff	??i2_I2C_Master_Init,i2___lldiv@divisor
 19898  005D4E  C013  F006         	movff	??i2_I2C_Master_Init+1,i2___lldiv@divisor+1
 19899  005D52  C014  F007         	movff	??i2_I2C_Master_Init+2,i2___lldiv@divisor+2
 19900  005D56  C015  F008         	movff	??i2_I2C_Master_Init+3,i2___lldiv@divisor+3
 19901  005D5A  EC7A  F02D         	call	i2___lldiv	;wreg free
 19902  005D5E  0401               	decf	?i2___lldiv,w,c
 19903  005D60  6EC8               	movwf	4040,c	;volatile
 19904  005D62  0012               	return		;funcret
 19905  005D64                     __end_ofi2_I2C_Master_Init:
 19906                           	opt stack 0
 19907                           pclatu	equ	0xFFB
 19908                           pclath	equ	0xFFA
 19909                           tblptru	equ	0xFF8
 19910                           tblptrh	equ	0xFF7
 19911                           tblptrl	equ	0xFF6
 19912                           tablat	equ	0xFF5
 19913                           prodh	equ	0xFF4
 19914                           prodl	equ	0xFF3
 19915                           intcon	equ	0xFF2
 19916                           intcon3	equ	0xFF0
 19917                           indf0	equ	0xFEF
 19918                           postinc0	equ	0xFEE
 19919                           fsr0h	equ	0xFEA
 19920                           fsr0l	equ	0xFE9
 19921                           wreg	equ	0xFE8
 19922                           postdec1	equ	0xFE5
 19923                           fsr1h	equ	0xFE2
 19924                           fsr1l	equ	0xFE1
 19925                           indf2	equ	0xFDF
 19926                           postinc2	equ	0xFDE
 19927                           postdec2	equ	0xFDD
 19928                           fsr2h	equ	0xFDA
 19929                           fsr2l	equ	0xFD9
 19930                           status	equ	0xFD8
 19931                           
 19932 ;; *************** function i2___lldiv *****************
 19933 ;; Defined at:
 19934 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 19935 ;; Parameters:    Size  Location     Type
 19936 ;;  dividend        4    0[COMRAM] unsigned long 
 19937 ;;  divisor         4    4[COMRAM] unsigned long 
 19938 ;; Auto vars:     Size  Location     Type
 19939 ;;  __lldiv         4    8[COMRAM] unsigned long 
 19940 ;;  __lldiv         1   12[COMRAM] unsigned char 
 19941 ;; Return value:  Size  Location     Type
 19942 ;;                  4    0[COMRAM] unsigned long 
 19943 ;; Registers used:
 19944 ;;		wreg, status,2, status,0
 19945 ;; Tracked objects:
 19946 ;;		On entry : 0/0
 19947 ;;		On exit  : 0/0
 19948 ;;		Unchanged: 0/0
 19949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19950 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19951 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19953 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19954 ;;Total ram usage:       13 bytes
 19955 ;; Hardware stack levels used:    1
 19956 ;; This function calls:
 19957 ;;		Nothing
 19958 ;; This function is called by:
 19959 ;;		i2_I2C_Master_Init
 19960 ;; This function uses a non-reentrant model
 19961 ;;
 19962                           
 19963                           	psect	text60
 19964  005AF4                     __ptext60:
 19965                           	opt stack 0
 19966  005AF4                     i2___lldiv:
 19967                           	opt stack 22
 19968                           
 19969                           ;incstack = 0
 19970  005AF4  0E00               	movlw	0
 19971  005AF6  6E09               	movwf	i2___lldiv@quotient,c
 19972  005AF8  0E00               	movlw	0
 19973  005AFA  6E0A               	movwf	i2___lldiv@quotient+1,c
 19974  005AFC  0E00               	movlw	0
 19975  005AFE  6E0B               	movwf	i2___lldiv@quotient+2,c
 19976  005B00  0E00               	movlw	0
 19977  005B02  6E0C               	movwf	i2___lldiv@quotient+3,c
 19978  005B04  5005               	movf	i2___lldiv@divisor,w,c
 19979  005B06  1006               	iorwf	i2___lldiv@divisor+1,w,c
 19980  005B08  1007               	iorwf	i2___lldiv@divisor+2,w,c
 19981  005B0A  1008               	iorwf	i2___lldiv@divisor+3,w,c
 19982  005B0C  B4D8               	btfsc	status,2,c
 19983  005B0E  D02A               	goto	i2l1819
 19984  005B10  0E01               	movlw	1
 19985  005B12  6E0D               	movwf	i2___lldiv@counter,c
 19986  005B14  D006               	goto	i2l1814
 19987  005B16  90D8               	bcf	status,0,c
 19988  005B18  3605               	rlcf	i2___lldiv@divisor,f,c
 19989  005B1A  3606               	rlcf	i2___lldiv@divisor+1,f,c
 19990  005B1C  3607               	rlcf	i2___lldiv@divisor+2,f,c
 19991  005B1E  3608               	rlcf	i2___lldiv@divisor+3,f,c
 19992  005B20  2A0D               	incf	i2___lldiv@counter,f,c
 19993  005B22                     i2l1814:
 19994  005B22  AE08               	btfss	i2___lldiv@divisor+3,7,c
 19995  005B24  D7F8               	goto	i2l1815
 19996  005B26                     i2u408_40:
 19997  005B26  90D8               	bcf	status,0,c
 19998  005B28  3609               	rlcf	i2___lldiv@quotient,f,c
 19999  005B2A  360A               	rlcf	i2___lldiv@quotient+1,f,c
 20000  005B2C  360B               	rlcf	i2___lldiv@quotient+2,f,c
 20001  005B2E  360C               	rlcf	i2___lldiv@quotient+3,f,c
 20002  005B30  5005               	movf	i2___lldiv@divisor,w,c
 20003  005B32  5C01               	subwf	i2___lldiv@dividend,w,c
 20004  005B34  5006               	movf	i2___lldiv@divisor+1,w,c
 20005  005B36  5802               	subwfb	i2___lldiv@dividend+1,w,c
 20006  005B38  5007               	movf	i2___lldiv@divisor+2,w,c
 20007  005B3A  5803               	subwfb	i2___lldiv@dividend+2,w,c
 20008  005B3C  5008               	movf	i2___lldiv@divisor+3,w,c
 20009  005B3E  5804               	subwfb	i2___lldiv@dividend+3,w,c
 20010  005B40  A0D8               	btfss	status,0,c
 20011  005B42  D009               	goto	i2l1818
 20012  005B44  5005               	movf	i2___lldiv@divisor,w,c
 20013  005B46  5E01               	subwf	i2___lldiv@dividend,f,c
 20014  005B48  5006               	movf	i2___lldiv@divisor+1,w,c
 20015  005B4A  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 20016  005B4C  5007               	movf	i2___lldiv@divisor+2,w,c
 20017  005B4E  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 20018  005B50  5008               	movf	i2___lldiv@divisor+3,w,c
 20019  005B52  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 20020  005B54  8009               	bsf	i2___lldiv@quotient,0,c
 20021  005B56                     i2l1818:
 20022  005B56  90D8               	bcf	status,0,c
 20023  005B58  3208               	rrcf	i2___lldiv@divisor+3,f,c
 20024  005B5A  3207               	rrcf	i2___lldiv@divisor+2,f,c
 20025  005B5C  3206               	rrcf	i2___lldiv@divisor+1,f,c
 20026  005B5E  3205               	rrcf	i2___lldiv@divisor,f,c
 20027  005B60  2E0D               	decfsz	i2___lldiv@counter,f,c
 20028  005B62  D7E1               	goto	i2u408_40
 20029  005B64                     i2l1819:
 20030  005B64  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 20031  005B68  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 20032  005B6C  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 20033  005B70  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 20034  005B74  0012               	return		;funcret
 20035  005B76                     __end_ofi2___lldiv:
 20036                           	opt stack 0
 20037                           pclatu	equ	0xFFB
 20038                           pclath	equ	0xFFA
 20039                           tblptru	equ	0xFF8
 20040                           tblptrh	equ	0xFF7
 20041                           tblptrl	equ	0xFF6
 20042                           tablat	equ	0xFF5
 20043                           prodh	equ	0xFF4
 20044                           prodl	equ	0xFF3
 20045                           intcon	equ	0xFF2
 20046                           intcon3	equ	0xFF0
 20047                           indf0	equ	0xFEF
 20048                           postinc0	equ	0xFEE
 20049                           fsr0h	equ	0xFEA
 20050                           fsr0l	equ	0xFE9
 20051                           wreg	equ	0xFE8
 20052                           postdec1	equ	0xFE5
 20053                           fsr1h	equ	0xFE2
 20054                           fsr1l	equ	0xFE1
 20055                           indf2	equ	0xFDF
 20056                           postinc2	equ	0xFDE
 20057                           postdec2	equ	0xFDD
 20058                           fsr2h	equ	0xFDA
 20059                           fsr2l	equ	0xFD9
 20060                           status	equ	0xFD8
 20061                           
 20062 ;; *************** function _strncmp *****************
 20063 ;; Defined at:
 20064 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/strncmp.c"
 20065 ;; Parameters:    Size  Location     Type
 20066 ;;  s1              2    6[COMRAM] PTR const unsigned char 
 20067 ;;		 -> current_set(5), 
 20068 ;;  s2              2    8[COMRAM] PTR const unsigned char 
 20069 ;;		 -> strs(100), 
 20070 ;;  len             2   10[COMRAM] unsigned int 
 20071 ;; Auto vars:     Size  Location     Type
 20072 ;;		None
 20073 ;; Return value:  Size  Location     Type
 20074 ;;                  2    6[COMRAM] int 
 20075 ;; Registers used:
 20076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20077 ;; Tracked objects:
 20078 ;;		On entry : 0/0
 20079 ;;		On exit  : 0/0
 20080 ;;		Unchanged: 0/0
 20081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20082 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20084 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20085 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20086 ;;Total ram usage:        9 bytes
 20087 ;; Hardware stack levels used:    1
 20088 ;; This function calls:
 20089 ;;		Nothing
 20090 ;; This function is called by:
 20091 ;;		_interruptHandler
 20092 ;; This function uses a non-reentrant model
 20093 ;;
 20094                           
 20095                           	psect	text61
 20096  005966                     __ptext61:
 20097                           	opt stack 0
 20098  005966                     _strncmp:
 20099                           	opt stack 23
 20100                           
 20101                           ;incstack = 0
 20102  005966  D035               	goto	i2l2034
 20103  005968                     i2l6663:
 20104  005968  C007  FFD9         	movff	strncmp@s1,fsr2l
 20105  00596C  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 20106  005970  50DF               	movf	indf2,w,c
 20107  005972  B4D8               	btfsc	status,2,c
 20108  005974  D010               	goto	i2u448_40
 20109  005976  C007  FFD9         	movff	strncmp@s1,fsr2l
 20110  00597A  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 20111  00597E  50DF               	movf	indf2,w,c
 20112  005980  6E0D               	movwf	??_strncmp& (0+255),c
 20113  005982  C009  FFF6         	movff	strncmp@s2,tblptrl
 20114  005986  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 20115  00598A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20116  00598A  6AF8               	clrf	tblptru,c
 20117  00598C                     	endif
 20118  00598C                     	if	0	;tblptru may be non-zero
 20119  00598C                     	endif
 20120  00598C  0008               	tblrd		*
 20121  00598E  50F5               	movf	tablat,w,c
 20122  005990  180D               	xorwf	??_strncmp,w,c
 20123  005992  B4D8               	btfsc	status,2,c
 20124  005994  D01A               	goto	i2l2036
 20125  005996                     i2u448_40:
 20126  005996  C009  FFF6         	movff	strncmp@s2,tblptrl
 20127  00599A  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
 20128  00599E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20129  00599E  6AF8               	clrf	tblptru,c
 20130  0059A0                     	endif
 20131  0059A0                     	if	0	;tblptru may be non-zero
 20132  0059A0                     	endif
 20133  0059A0  0008               	tblrd		*
 20134  0059A2  50F5               	movf	tablat,w,c
 20135  0059A4  6E0D               	movwf	??_strncmp& (0+255),c
 20136  0059A6  6A0E               	clrf	(??_strncmp+1)& (0+255),c
 20137  0059A8  1E0D               	comf	??_strncmp,f,c
 20138  0059AA  1E0E               	comf	??_strncmp+1,f,c
 20139  0059AC  4A0D               	infsnz	??_strncmp,f,c
 20140  0059AE  2A0E               	incf	??_strncmp+1,f,c
 20141  0059B0  C007  FFD9         	movff	strncmp@s1,fsr2l
 20142  0059B4  C008  FFDA         	movff	strncmp@s1+1,fsr2h
 20143  0059B8  50DF               	movf	indf2,w,c
 20144  0059BA  6E0F               	movwf	(??_strncmp+2)& (0+255),c
 20145  0059BC  500F               	movf	??_strncmp+2,w,c
 20146  0059BE  240D               	addwf	??_strncmp,w,c
 20147  0059C0  6E07               	movwf	?_strncmp,c
 20148  0059C2  0E00               	movlw	0
 20149  0059C4  200E               	addwfc	??_strncmp+1,w,c
 20150  0059C6  6E08               	movwf	?_strncmp+1,c
 20151  0059C8  0012               	return	
 20152  0059CA                     i2l2036:
 20153  0059CA  4A07               	infsnz	strncmp@s1,f,c
 20154  0059CC  2A08               	incf	strncmp@s1+1,f,c
 20155  0059CE  4A09               	infsnz	strncmp@s2,f,c
 20156  0059D0  2A0A               	incf	strncmp@s2+1,f,c
 20157  0059D2                     i2l2034:
 20158  0059D2  060B               	decf	strncmp@len,f,c
 20159  0059D4  A0D8               	btfss	status,0,c
 20160  0059D6  060C               	decf	strncmp@len+1,f,c
 20161  0059D8  280B               	incf	strncmp@len,w,c
 20162  0059DA  E1C6               	bnz	i2l6663
 20163  0059DC  280C               	incf	strncmp@len+1,w,c
 20164  0059DE  A4D8               	btfss	status,2,c
 20165  0059E0  D7C3               	goto	i2l2035
 20166  0059E2  0E00               	movlw	0
 20167  0059E4  6E08               	movwf	?_strncmp+1,c
 20168  0059E6  0E00               	movlw	0
 20169  0059E8  6E07               	movwf	?_strncmp,c
 20170  0059EA  0012               	return	
 20171  0059EC                     __end_of_strncmp:
 20172                           	opt stack 0
 20173                           pclatu	equ	0xFFB
 20174                           pclath	equ	0xFFA
 20175                           tblptru	equ	0xFF8
 20176                           tblptrh	equ	0xFF7
 20177                           tblptrl	equ	0xFF6
 20178                           tablat	equ	0xFF5
 20179                           prodh	equ	0xFF4
 20180                           prodl	equ	0xFF3
 20181                           intcon	equ	0xFF2
 20182                           intcon3	equ	0xFF0
 20183                           indf0	equ	0xFEF
 20184                           postinc0	equ	0xFEE
 20185                           fsr0h	equ	0xFEA
 20186                           fsr0l	equ	0xFE9
 20187                           wreg	equ	0xFE8
 20188                           postdec1	equ	0xFE5
 20189                           fsr1h	equ	0xFE2
 20190                           fsr1l	equ	0xFE1
 20191                           indf2	equ	0xFDF
 20192                           postinc2	equ	0xFDE
 20193                           postdec2	equ	0xFDD
 20194                           fsr2h	equ	0xFDA
 20195                           fsr2l	equ	0xFD9
 20196                           status	equ	0xFD8
 20197                           
 20198 ;; *************** function _strcpy *****************
 20199 ;; Defined at:
 20200 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcpy.c"
 20201 ;; Parameters:    Size  Location     Type
 20202 ;;  to              2    6[COMRAM] PTR unsigned char 
 20203 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 20204 ;;  from            2    8[COMRAM] PTR const unsigned char 
 20205 ;;		 -> STR_57(1), STR_55(1), STR_52(1), STR_49(2), 
 20206 ;;		 -> STR_48(2), STR_47(2), STR_46(2), current_set(5), 
 20207 ;; Auto vars:     Size  Location     Type
 20208 ;;  cp              2   10[COMRAM] PTR unsigned char 
 20209 ;;		 -> current_set2(5), temp_set(5), final_set(40), current_set(5), 
 20210 ;; Return value:  Size  Location     Type
 20211 ;;                  2    6[COMRAM] PTR unsigned char 
 20212 ;; Registers used:
 20213 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20214 ;; Tracked objects:
 20215 ;;		On entry : 0/0
 20216 ;;		On exit  : 0/0
 20217 ;;		Unchanged: 0/0
 20218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20219 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20222 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20223 ;;Total ram usage:        6 bytes
 20224 ;; Hardware stack levels used:    1
 20225 ;; This function calls:
 20226 ;;		Nothing
 20227 ;; This function is called by:
 20228 ;;		_interruptHandler
 20229 ;; This function uses a non-reentrant model
 20230 ;;
 20231                           
 20232                           	psect	text62
 20233  005EEC                     __ptext62:
 20234                           	opt stack 0
 20235  005EEC                     _strcpy:
 20236                           	opt stack 23
 20237                           
 20238                           ;incstack = 0
 20239  005EEC  C007  F00B         	movff	strcpy@to,strcpy@cp
 20240  005EF0  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
 20241  005EF4  D004               	goto	i2l2028
 20242  005EF6  4A0B               	infsnz	strcpy@cp,f,c
 20243  005EF8  2A0C               	incf	strcpy@cp+1,f,c
 20244  005EFA  4A09               	infsnz	strcpy@from,f,c
 20245  005EFC  2A0A               	incf	strcpy@from+1,f,c
 20246  005EFE                     i2l2028:
 20247  005EFE  C009  FFF6         	movff	strcpy@from,tblptrl
 20248  005F02  C00A  FFF7         	movff	strcpy@from+1,tblptrh
 20249  005F06  0E00               	movlw	low (__mediumconst shr (0+16))
 20250  005F08  6EF8               	movwf	tblptru,c
 20251  005F0A  C00B  FFD9         	movff	strcpy@cp,fsr2l
 20252  005F0E  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
 20253  005F12  0E0F               	movlw	(high __ramtop+-1)
 20254  005F14  64F7               	cpfsgt	tblptrh,c
 20255  005F16  D003               	bra	i2u443_47
 20256  005F18  0008               	tblrd		*
 20257  005F1A  50F5               	movf	tablat,w,c
 20258  005F1C  D005               	bra	i2u443_40
 20259  005F1E                     i2u443_47:
 20260  005F1E  CFF6 FFE9          	movff	tblptrl,fsr0l
 20261  005F22  CFF7 FFEA          	movff	tblptrh,fsr0h
 20262  005F26  50EF               	movf	indf0,w,c
 20263  005F28                     i2u443_40:
 20264  005F28  6EDF               	movwf	indf2,c
 20265  005F2A  50DF               	movf	indf2,w,c
 20266  005F2C  B4D8               	btfsc	status,2,c
 20267  005F2E  0012               	return	
 20268  005F30  D7E2               	goto	i2l2029
 20269  005F32                     __end_of_strcpy:
 20270                           	opt stack 0
 20271                           pclatu	equ	0xFFB
 20272                           pclath	equ	0xFFA
 20273                           tblptru	equ	0xFF8
 20274                           tblptrh	equ	0xFF7
 20275                           tblptrl	equ	0xFF6
 20276                           tablat	equ	0xFF5
 20277                           prodh	equ	0xFF4
 20278                           prodl	equ	0xFF3
 20279                           intcon	equ	0xFF2
 20280                           intcon3	equ	0xFF0
 20281                           indf0	equ	0xFEF
 20282                           postinc0	equ	0xFEE
 20283                           fsr0h	equ	0xFEA
 20284                           fsr0l	equ	0xFE9
 20285                           wreg	equ	0xFE8
 20286                           postdec1	equ	0xFE5
 20287                           fsr1h	equ	0xFE2
 20288                           fsr1l	equ	0xFE1
 20289                           indf2	equ	0xFDF
 20290                           postinc2	equ	0xFDE
 20291                           postdec2	equ	0xFDD
 20292                           fsr2h	equ	0xFDA
 20293                           fsr2l	equ	0xFD9
 20294                           status	equ	0xFD8
 20295                           
 20296 ;; *************** function _strcat *****************
 20297 ;; Defined at:
 20298 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/strcat.c"
 20299 ;; Parameters:    Size  Location     Type
 20300 ;;  to              2    0[COMRAM] PTR unsigned char 
 20301 ;;		 -> current_set(5), 
 20302 ;;  from            2    2[COMRAM] PTR const unsigned char 
 20303 ;;		 -> temp_set(5), 
 20304 ;; Auto vars:     Size  Location     Type
 20305 ;;  cp              2    4[COMRAM] PTR unsigned char 
 20306 ;;		 -> current_set(5), 
 20307 ;; Return value:  Size  Location     Type
 20308 ;;                  2    0[COMRAM] PTR unsigned char 
 20309 ;; Registers used:
 20310 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20311 ;; Tracked objects:
 20312 ;;		On entry : 0/0
 20313 ;;		On exit  : 0/0
 20314 ;;		Unchanged: 0/0
 20315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20316 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20319 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20320 ;;Total ram usage:        6 bytes
 20321 ;; Hardware stack levels used:    1
 20322 ;; This function calls:
 20323 ;;		Nothing
 20324 ;; This function is called by:
 20325 ;;		_interruptHandler
 20326 ;; This function uses a non-reentrant model
 20327 ;;
 20328                           
 20329                           	psect	text63
 20330  005FB8                     __ptext63:
 20331                           	opt stack 0
 20332  005FB8                     _strcat:
 20333                           	opt stack 23
 20334                           
 20335                           ;incstack = 0
 20336  005FB8  C001  F005         	movff	strcat@to,strcat@cp
 20337  005FBC  C002  F006         	movff	strcat@to+1,strcat@cp+1
 20338  005FC0  D002               	goto	i2l2011
 20339  005FC2  4A05               	infsnz	strcat@cp,f,c
 20340  005FC4  2A06               	incf	strcat@cp+1,f,c
 20341  005FC6                     i2l2011:
 20342  005FC6  C005  FFD9         	movff	strcat@cp,fsr2l
 20343  005FCA  C006  FFDA         	movff	strcat@cp+1,fsr2h
 20344  005FCE  50DF               	movf	indf2,w,c
 20345  005FD0  B4D8               	btfsc	status,2,c
 20346  005FD2  D005               	goto	i2l2014
 20347  005FD4  D7F6               	goto	i2l2012
 20348  005FD6  4A05               	infsnz	strcat@cp,f,c
 20349  005FD8  2A06               	incf	strcat@cp+1,f,c
 20350  005FDA  4A03               	infsnz	strcat@from,f,c
 20351  005FDC  2A04               	incf	strcat@from+1,f,c
 20352  005FDE                     i2l2014:
 20353  005FDE  C003  FFD9         	movff	strcat@from,fsr2l
 20354  005FE2  C004  FFDA         	movff	strcat@from+1,fsr2h
 20355  005FE6  C005  FFE1         	movff	strcat@cp,fsr1l
 20356  005FEA  C006  FFE2         	movff	strcat@cp+1,fsr1h
 20357  005FEE  CFDF FFE7          	movff	indf2,indf1
 20358  005FF2  50E7               	movf	indf1,w,c
 20359  005FF4  B4D8               	btfsc	status,2,c
 20360  005FF6  0012               	return	
 20361  005FF8  D7EE               	goto	i2l2015
 20362  005FFA                     __end_of_strcat:
 20363                           	opt stack 0
 20364                           pclatu	equ	0xFFB
 20365                           pclath	equ	0xFFA
 20366                           tblptru	equ	0xFF8
 20367                           tblptrh	equ	0xFF7
 20368                           tblptrl	equ	0xFF6
 20369                           tablat	equ	0xFF5
 20370                           prodh	equ	0xFF4
 20371                           prodl	equ	0xFF3
 20372                           intcon	equ	0xFF2
 20373                           intcon3	equ	0xFF0
 20374                           indf0	equ	0xFEF
 20375                           postinc0	equ	0xFEE
 20376                           fsr0h	equ	0xFEA
 20377                           fsr0l	equ	0xFE9
 20378                           wreg	equ	0xFE8
 20379                           indf1	equ	0xFE7
 20380                           postdec1	equ	0xFE5
 20381                           fsr1h	equ	0xFE2
 20382                           fsr1l	equ	0xFE1
 20383                           indf2	equ	0xFDF
 20384                           postinc2	equ	0xFDE
 20385                           postdec2	equ	0xFDD
 20386                           fsr2h	equ	0xFDA
 20387                           fsr2l	equ	0xFD9
 20388                           status	equ	0xFD8
 20389                           
 20390 ;; *************** function _is_valid *****************
 20391 ;; Defined at:
 20392 ;;		line 12 in file "keypad.c"
 20393 ;; Parameters:    Size  Location     Type
 20394 ;;		None
 20395 ;; Auto vars:     Size  Location     Type
 20396 ;;		None
 20397 ;; Return value:  Size  Location     Type
 20398 ;;                  2  157[None  ] int 
 20399 ;; Registers used:
 20400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20401 ;; Tracked objects:
 20402 ;;		On entry : 0/0
 20403 ;;		On exit  : 0/0
 20404 ;;		Unchanged: 0/0
 20405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20408 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20409 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20410 ;;Total ram usage:        2 bytes
 20411 ;; Hardware stack levels used:    1
 20412 ;; Hardware stack levels required when called:    1
 20413 ;; This function calls:
 20414 ;;		_strcmp
 20415 ;;		i2___wmul
 20416 ;; This function is called by:
 20417 ;;		_interruptHandler
 20418 ;; This function uses a non-reentrant model
 20419 ;;
 20420                           
 20421                           	psect	text64
 20422  000FEA                     __ptext64:
 20423                           	opt stack 0
 20424  000FEA                     _is_valid:
 20425                           	opt stack 22
 20426                           
 20427                           ;keypad.c: 16: if (strcmp(current_set2,"B")==0){
 20428                           
 20429                           ;incstack = 0
 20430  000FEA  0E70               	movlw	low _current_set2
 20431  000FEC  6E01               	movwf	strcmp@s1,c
 20432  000FEE  0E00               	movlw	high _current_set2
 20433  000FF0  6E02               	movwf	strcmp@s1+1,c
 20434  000FF2  0EFD               	movlw	low STR_46
 20435  000FF4  6E03               	movwf	strcmp@s2,c
 20436  000FF6  0EFF               	movlw	high STR_46
 20437  000FF8  6E04               	movwf	strcmp@s2+1,c
 20438  000FFA  EC51  F02F         	call	_strcmp	;wreg free
 20439  000FFE  5001               	movf	?_strcmp,w,c
 20440  001000  1002               	iorwf	?_strcmp+1,w,c
 20441  001002  A4D8               	btfss	status,2,c
 20442  001004  D023               	goto	i2l1016
 20443                           
 20444                           ;keypad.c: 17: B=1*number;
 20445  001006  C075  F058         	movff	_number,_B
 20446  00100A  C076  F059         	movff	_number+1,_B+1
 20447                           
 20448                           ;keypad.c: 18: total_number = 1*number;
 20449  00100E  C075  F18A         	movff	_number,_total_number
 20450  001012  C076  F18B         	movff	_number+1,_total_number+1
 20451                           
 20452                           ;keypad.c: 20: B_array[compartment_number[counter_step]] = B;
 20453  001016  90D8               	bcf	status,0,c
 20454  001018  345A               	rlcf	_counter_step,w,c
 20455  00101A  6ED9               	movwf	fsr2l,c
 20456  00101C  345B               	rlcf	_counter_step+1,w,c
 20457  00101E  6EDA               	movwf	fsr2h,c
 20458  001020  0E42               	movlw	low _compartment_number
 20459  001022  26D9               	addwf	fsr2l,f,c
 20460  001024  0E00               	movlw	high _compartment_number
 20461  001026  22DA               	addwfc	fsr2h,f,c
 20462  001028  CFDE F007          	movff	postinc2,??_is_valid
 20463  00102C  CFDD F008          	movff	postdec2,??_is_valid+1
 20464  001030  90D8               	bcf	status,0,c
 20465  001032  3607               	rlcf	??_is_valid,f,c
 20466  001034  3608               	rlcf	??_is_valid+1,f,c
 20467  001036  0E30               	movlw	low _B_array
 20468  001038  2407               	addwf	??_is_valid,w,c
 20469  00103A  6ED9               	movwf	fsr2l,c
 20470  00103C  0E01               	movlw	high _B_array
 20471  00103E  2008               	addwfc	??_is_valid+1,w,c
 20472  001040  6EDA               	movwf	fsr2h,c
 20473  001042  C058  FFDE         	movff	_B,postinc2
 20474  001046  C059  FFDD         	movff	_B+1,postdec2
 20475                           
 20476                           ;keypad.c: 22: }
 20477  00104A  0012               	return	
 20478  00104C                     i2l1016:
 20479                           
 20480                           ;keypad.c: 24: else if (strcmp(current_set2,"N")==0){
 20481  00104C  0E70               	movlw	low _current_set2
 20482  00104E  6E01               	movwf	strcmp@s1,c
 20483  001050  0E00               	movlw	high _current_set2
 20484  001052  6E02               	movwf	strcmp@s1+1,c
 20485  001054  0EEA               	movlw	low (STR_85+2)
 20486  001056  6E03               	movwf	strcmp@s2,c
 20487  001058  0EFF               	movlw	high (STR_85+2)
 20488  00105A  6E04               	movwf	strcmp@s2+1,c
 20489  00105C  EC51  F02F         	call	_strcmp	;wreg free
 20490  001060  5001               	movf	?_strcmp,w,c
 20491  001062  1002               	iorwf	?_strcmp+1,w,c
 20492  001064  A4D8               	btfss	status,2,c
 20493  001066  D023               	goto	i2l1018
 20494                           
 20495                           ;keypad.c: 25: N=1*number;
 20496  001068  C075  F056         	movff	_number,_N
 20497  00106C  C076  F057         	movff	_number+1,_N+1
 20498                           
 20499                           ;keypad.c: 26: total_number = 1*number;
 20500  001070  C075  F18A         	movff	_number,_total_number
 20501  001074  C076  F18B         	movff	_number+1,_total_number+1
 20502                           
 20503                           ;keypad.c: 27: N_array[compartment_number[counter_step]] = N;
 20504  001078  90D8               	bcf	status,0,c
 20505  00107A  345A               	rlcf	_counter_step,w,c
 20506  00107C  6ED9               	movwf	fsr2l,c
 20507  00107E  345B               	rlcf	_counter_step+1,w,c
 20508  001080  6EDA               	movwf	fsr2h,c
 20509  001082  0E42               	movlw	low _compartment_number
 20510  001084  26D9               	addwf	fsr2l,f,c
 20511  001086  0E00               	movlw	high _compartment_number
 20512  001088  22DA               	addwfc	fsr2h,f,c
 20513  00108A  CFDE F007          	movff	postinc2,??_is_valid
 20514  00108E  CFDD F008          	movff	postdec2,??_is_valid+1
 20515  001092  90D8               	bcf	status,0,c
 20516  001094  3607               	rlcf	??_is_valid,f,c
 20517  001096  3608               	rlcf	??_is_valid+1,f,c
 20518  001098  0E10               	movlw	low _N_array
 20519  00109A  2407               	addwf	??_is_valid,w,c
 20520  00109C  6ED9               	movwf	fsr2l,c
 20521  00109E  0E01               	movlw	high _N_array
 20522  0010A0  2008               	addwfc	??_is_valid+1,w,c
 20523  0010A2  6EDA               	movwf	fsr2h,c
 20524  0010A4  C056  FFDE         	movff	_N,postinc2
 20525  0010A8  C057  FFDD         	movff	_N+1,postdec2
 20526                           
 20527                           ;keypad.c: 28: }
 20528  0010AC  0012               	return	
 20529  0010AE                     i2l1018:
 20530                           
 20531                           ;keypad.c: 29: else if (strcmp(current_set2,"S")==0){
 20532  0010AE  0E70               	movlw	low _current_set2
 20533  0010B0  6E01               	movwf	strcmp@s1,c
 20534  0010B2  0E00               	movlw	high _current_set2
 20535  0010B4  6E02               	movwf	strcmp@s1+1,c
 20536  0010B6  0EEE               	movlw	low (STR_86+2)
 20537  0010B8  6E03               	movwf	strcmp@s2,c
 20538  0010BA  0EFF               	movlw	high (STR_86+2)
 20539  0010BC  6E04               	movwf	strcmp@s2+1,c
 20540  0010BE  EC51  F02F         	call	_strcmp	;wreg free
 20541  0010C2  5001               	movf	?_strcmp,w,c
 20542  0010C4  1002               	iorwf	?_strcmp+1,w,c
 20543  0010C6  A4D8               	btfss	status,2,c
 20544  0010C8  D023               	goto	i2l1020
 20545                           
 20546                           ;keypad.c: 30: S=1*number;
 20547  0010CA  C075  F054         	movff	_number,_S
 20548  0010CE  C076  F055         	movff	_number+1,_S+1
 20549                           
 20550                           ;keypad.c: 31: total_number = 1*number;
 20551  0010D2  C075  F18A         	movff	_number,_total_number
 20552  0010D6  C076  F18B         	movff	_number+1,_total_number+1
 20553                           
 20554                           ;keypad.c: 32: S_array[compartment_number[counter_step]] = S;
 20555  0010DA  90D8               	bcf	status,0,c
 20556  0010DC  345A               	rlcf	_counter_step,w,c
 20557  0010DE  6ED9               	movwf	fsr2l,c
 20558  0010E0  345B               	rlcf	_counter_step+1,w,c
 20559  0010E2  6EDA               	movwf	fsr2h,c
 20560  0010E4  0E42               	movlw	low _compartment_number
 20561  0010E6  26D9               	addwf	fsr2l,f,c
 20562  0010E8  0E00               	movlw	high _compartment_number
 20563  0010EA  22DA               	addwfc	fsr2h,f,c
 20564  0010EC  CFDE F007          	movff	postinc2,??_is_valid
 20565  0010F0  CFDD F008          	movff	postdec2,??_is_valid+1
 20566  0010F4  90D8               	bcf	status,0,c
 20567  0010F6  3607               	rlcf	??_is_valid,f,c
 20568  0010F8  3608               	rlcf	??_is_valid+1,f,c
 20569  0010FA  0E20               	movlw	low _S_array
 20570  0010FC  2407               	addwf	??_is_valid,w,c
 20571  0010FE  6ED9               	movwf	fsr2l,c
 20572  001100  0E01               	movlw	high _S_array
 20573  001102  2008               	addwfc	??_is_valid+1,w,c
 20574  001104  6EDA               	movwf	fsr2h,c
 20575  001106  C054  FFDE         	movff	_S,postinc2
 20576  00110A  C055  FFDD         	movff	_S+1,postdec2
 20577                           
 20578                           ;keypad.c: 33: }
 20579  00110E  0012               	return	
 20580  001110                     i2l1020:
 20581                           
 20582                           ;keypad.c: 34: else if (strcmp(current_set2,"W")==0){
 20583  001110  0E70               	movlw	low _current_set2
 20584  001112  6E01               	movwf	strcmp@s1,c
 20585  001114  0E00               	movlw	high _current_set2
 20586  001116  6E02               	movwf	strcmp@s1+1,c
 20587  001118  0EF2               	movlw	low (STR_87+2)
 20588  00111A  6E03               	movwf	strcmp@s2,c
 20589  00111C  0EFF               	movlw	high (STR_87+2)
 20590  00111E  6E04               	movwf	strcmp@s2+1,c
 20591  001120  EC51  F02F         	call	_strcmp	;wreg free
 20592  001124  5001               	movf	?_strcmp,w,c
 20593  001126  1002               	iorwf	?_strcmp+1,w,c
 20594  001128  A4D8               	btfss	status,2,c
 20595  00112A  D023               	goto	i2l1022
 20596                           
 20597                           ;keypad.c: 35: W=1*number;
 20598  00112C  C075  F052         	movff	_number,_W
 20599  001130  C076  F053         	movff	_number+1,_W+1
 20600                           
 20601                           ;keypad.c: 36: total_number = 1*number;
 20602  001134  C075  F18A         	movff	_number,_total_number
 20603  001138  C076  F18B         	movff	_number+1,_total_number+1
 20604                           
 20605                           ;keypad.c: 37: W_array[compartment_number[counter_step]] = W;
 20606  00113C  90D8               	bcf	status,0,c
 20607  00113E  345A               	rlcf	_counter_step,w,c
 20608  001140  6ED9               	movwf	fsr2l,c
 20609  001142  345B               	rlcf	_counter_step+1,w,c
 20610  001144  6EDA               	movwf	fsr2h,c
 20611  001146  0E42               	movlw	low _compartment_number
 20612  001148  26D9               	addwf	fsr2l,f,c
 20613  00114A  0E00               	movlw	high _compartment_number
 20614  00114C  22DA               	addwfc	fsr2h,f,c
 20615  00114E  CFDE F007          	movff	postinc2,??_is_valid
 20616  001152  CFDD F008          	movff	postdec2,??_is_valid+1
 20617  001156  90D8               	bcf	status,0,c
 20618  001158  3607               	rlcf	??_is_valid,f,c
 20619  00115A  3608               	rlcf	??_is_valid+1,f,c
 20620  00115C  0E00               	movlw	low _W_array
 20621  00115E  2407               	addwf	??_is_valid,w,c
 20622  001160  6ED9               	movwf	fsr2l,c
 20623  001162  0E01               	movlw	high _W_array
 20624  001164  2008               	addwfc	??_is_valid+1,w,c
 20625  001166  6EDA               	movwf	fsr2h,c
 20626  001168  C052  FFDE         	movff	_W,postinc2
 20627  00116C  C053  FFDD         	movff	_W+1,postdec2
 20628                           
 20629                           ;keypad.c: 38: }
 20630  001170  0012               	return	
 20631  001172                     i2l1022:
 20632                           
 20633                           ;keypad.c: 39: else if (strcmp(current_set2,"BN")==0){
 20634  001172  0E70               	movlw	low _current_set2
 20635  001174  6E01               	movwf	strcmp@s1,c
 20636  001176  0E00               	movlw	high _current_set2
 20637  001178  6E02               	movwf	strcmp@s1+1,c
 20638  00117A  0EE9               	movlw	low (STR_85+1)
 20639  00117C  6E03               	movwf	strcmp@s2,c
 20640  00117E  0EFF               	movlw	high (STR_85+1)
 20641  001180  6E04               	movwf	strcmp@s2+1,c
 20642  001182  EC51  F02F         	call	_strcmp	;wreg free
 20643  001186  5001               	movf	?_strcmp,w,c
 20644  001188  1002               	iorwf	?_strcmp+1,w,c
 20645  00118A  A4D8               	btfss	status,2,c
 20646  00118C  D043               	goto	i2l1024
 20647                           
 20648                           ;keypad.c: 40: B = 1*number;
 20649  00118E  C075  F058         	movff	_number,_B
 20650  001192  C076  F059         	movff	_number+1,_B+1
 20651                           
 20652                           ;keypad.c: 42: N = 1*number;
 20653  001196  C075  F056         	movff	_number,_N
 20654  00119A  C076  F057         	movff	_number+1,_N+1
 20655                           
 20656                           ;keypad.c: 43: total_number = 2*number;
 20657  00119E  90D8               	bcf	status,0,c
 20658  0011A0  3475               	rlcf	_number,w,c
 20659  0011A2  0101               	movlb	1	; () banked
 20660  0011A4  6F8A               	movwf	_total_number& (0+255),b
 20661  0011A6  3476               	rlcf	_number+1,w,c
 20662  0011A8  6F8B               	movwf	(_total_number+1)& (0+255),b
 20663                           
 20664                           ; BSR set to: 1
 20665                           ;keypad.c: 45: B_array[compartment_number[counter_step]] = B;
 20666  0011AA  90D8               	bcf	status,0,c
 20667  0011AC  345A               	rlcf	_counter_step,w,c
 20668  0011AE  6ED9               	movwf	fsr2l,c
 20669  0011B0  345B               	rlcf	_counter_step+1,w,c
 20670  0011B2  6EDA               	movwf	fsr2h,c
 20671  0011B4  0E42               	movlw	low _compartment_number
 20672  0011B6  26D9               	addwf	fsr2l,f,c
 20673  0011B8  0E00               	movlw	high _compartment_number
 20674  0011BA  22DA               	addwfc	fsr2h,f,c
 20675  0011BC  CFDE F007          	movff	postinc2,??_is_valid
 20676  0011C0  CFDD F008          	movff	postdec2,??_is_valid+1
 20677  0011C4  90D8               	bcf	status,0,c
 20678  0011C6  3607               	rlcf	??_is_valid,f,c
 20679  0011C8  3608               	rlcf	??_is_valid+1,f,c
 20680  0011CA  0E30               	movlw	low _B_array
 20681  0011CC  2407               	addwf	??_is_valid,w,c
 20682  0011CE  6ED9               	movwf	fsr2l,c
 20683  0011D0  0E01               	movlw	high _B_array
 20684  0011D2  2008               	addwfc	??_is_valid+1,w,c
 20685  0011D4  6EDA               	movwf	fsr2h,c
 20686  0011D6  C058  FFDE         	movff	_B,postinc2
 20687  0011DA  C059  FFDD         	movff	_B+1,postdec2
 20688                           
 20689                           ; BSR set to: 1
 20690                           ;keypad.c: 46: N_array[compartment_number[counter_step]] = N;
 20691  0011DE  90D8               	bcf	status,0,c
 20692  0011E0  345A               	rlcf	_counter_step,w,c
 20693  0011E2  6ED9               	movwf	fsr2l,c
 20694  0011E4  345B               	rlcf	_counter_step+1,w,c
 20695  0011E6  6EDA               	movwf	fsr2h,c
 20696  0011E8  0E42               	movlw	low _compartment_number
 20697  0011EA  26D9               	addwf	fsr2l,f,c
 20698  0011EC  0E00               	movlw	high _compartment_number
 20699  0011EE  22DA               	addwfc	fsr2h,f,c
 20700  0011F0  CFDE F007          	movff	postinc2,??_is_valid
 20701  0011F4  CFDD F008          	movff	postdec2,??_is_valid+1
 20702  0011F8  90D8               	bcf	status,0,c
 20703  0011FA  3607               	rlcf	??_is_valid,f,c
 20704  0011FC  3608               	rlcf	??_is_valid+1,f,c
 20705  0011FE  0E10               	movlw	low _N_array
 20706  001200  2407               	addwf	??_is_valid,w,c
 20707  001202  6ED9               	movwf	fsr2l,c
 20708  001204  0E01               	movlw	high _N_array
 20709  001206  2008               	addwfc	??_is_valid+1,w,c
 20710  001208  6EDA               	movwf	fsr2h,c
 20711  00120A  C056  FFDE         	movff	_N,postinc2
 20712  00120E  C057  FFDD         	movff	_N+1,postdec2
 20713                           
 20714                           ;keypad.c: 47: }
 20715  001212  0012               	return	
 20716  001214                     i2l1024:
 20717                           
 20718                           ;keypad.c: 48: else if (strcmp(current_set2,"BS")==0){
 20719                           
 20720                           ; BSR set to: 1
 20721  001214  0E70               	movlw	low _current_set2
 20722  001216  6E01               	movwf	strcmp@s1,c
 20723  001218  0E00               	movlw	high _current_set2
 20724  00121A  6E02               	movwf	strcmp@s1+1,c
 20725  00121C  0EED               	movlw	low (STR_86+1)
 20726  00121E  6E03               	movwf	strcmp@s2,c
 20727  001220  0EFF               	movlw	high (STR_86+1)
 20728  001222  6E04               	movwf	strcmp@s2+1,c
 20729  001224  EC51  F02F         	call	_strcmp	;wreg free
 20730  001228  5001               	movf	?_strcmp,w,c
 20731  00122A  1002               	iorwf	?_strcmp+1,w,c
 20732  00122C  A4D8               	btfss	status,2,c
 20733  00122E  D043               	goto	i2l1026
 20734                           
 20735                           ;keypad.c: 49: B = 1*number;
 20736  001230  C075  F058         	movff	_number,_B
 20737  001234  C076  F059         	movff	_number+1,_B+1
 20738                           
 20739                           ;keypad.c: 51: S = 1*number;
 20740  001238  C075  F054         	movff	_number,_S
 20741  00123C  C076  F055         	movff	_number+1,_S+1
 20742                           
 20743                           ;keypad.c: 52: total_number = 2*number;
 20744  001240  90D8               	bcf	status,0,c
 20745  001242  3475               	rlcf	_number,w,c
 20746  001244  0101               	movlb	1	; () banked
 20747  001246  6F8A               	movwf	_total_number& (0+255),b
 20748  001248  3476               	rlcf	_number+1,w,c
 20749  00124A  6F8B               	movwf	(_total_number+1)& (0+255),b
 20750                           
 20751                           ; BSR set to: 1
 20752                           ;keypad.c: 54: B_array[compartment_number[counter_step]] = B;
 20753  00124C  90D8               	bcf	status,0,c
 20754  00124E  345A               	rlcf	_counter_step,w,c
 20755  001250  6ED9               	movwf	fsr2l,c
 20756  001252  345B               	rlcf	_counter_step+1,w,c
 20757  001254  6EDA               	movwf	fsr2h,c
 20758  001256  0E42               	movlw	low _compartment_number
 20759  001258  26D9               	addwf	fsr2l,f,c
 20760  00125A  0E00               	movlw	high _compartment_number
 20761  00125C  22DA               	addwfc	fsr2h,f,c
 20762  00125E  CFDE F007          	movff	postinc2,??_is_valid
 20763  001262  CFDD F008          	movff	postdec2,??_is_valid+1
 20764  001266  90D8               	bcf	status,0,c
 20765  001268  3607               	rlcf	??_is_valid,f,c
 20766  00126A  3608               	rlcf	??_is_valid+1,f,c
 20767  00126C  0E30               	movlw	low _B_array
 20768  00126E  2407               	addwf	??_is_valid,w,c
 20769  001270  6ED9               	movwf	fsr2l,c
 20770  001272  0E01               	movlw	high _B_array
 20771  001274  2008               	addwfc	??_is_valid+1,w,c
 20772  001276  6EDA               	movwf	fsr2h,c
 20773  001278  C058  FFDE         	movff	_B,postinc2
 20774  00127C  C059  FFDD         	movff	_B+1,postdec2
 20775                           
 20776                           ; BSR set to: 1
 20777                           ;keypad.c: 55: S_array[compartment_number[counter_step]] = S;
 20778  001280  90D8               	bcf	status,0,c
 20779  001282  345A               	rlcf	_counter_step,w,c
 20780  001284  6ED9               	movwf	fsr2l,c
 20781  001286  345B               	rlcf	_counter_step+1,w,c
 20782  001288  6EDA               	movwf	fsr2h,c
 20783  00128A  0E42               	movlw	low _compartment_number
 20784  00128C  26D9               	addwf	fsr2l,f,c
 20785  00128E  0E00               	movlw	high _compartment_number
 20786  001290  22DA               	addwfc	fsr2h,f,c
 20787  001292  CFDE F007          	movff	postinc2,??_is_valid
 20788  001296  CFDD F008          	movff	postdec2,??_is_valid+1
 20789  00129A  90D8               	bcf	status,0,c
 20790  00129C  3607               	rlcf	??_is_valid,f,c
 20791  00129E  3608               	rlcf	??_is_valid+1,f,c
 20792  0012A0  0E20               	movlw	low _S_array
 20793  0012A2  2407               	addwf	??_is_valid,w,c
 20794  0012A4  6ED9               	movwf	fsr2l,c
 20795  0012A6  0E01               	movlw	high _S_array
 20796  0012A8  2008               	addwfc	??_is_valid+1,w,c
 20797  0012AA  6EDA               	movwf	fsr2h,c
 20798  0012AC  C054  FFDE         	movff	_S,postinc2
 20799  0012B0  C055  FFDD         	movff	_S+1,postdec2
 20800                           
 20801                           ;keypad.c: 57: }
 20802  0012B4  0012               	return	
 20803  0012B6                     i2l1026:
 20804                           
 20805                           ;keypad.c: 59: else if (strcmp(current_set2,"BW")==0){
 20806                           
 20807                           ; BSR set to: 1
 20808  0012B6  0E70               	movlw	low _current_set2
 20809  0012B8  6E01               	movwf	strcmp@s1,c
 20810  0012BA  0E00               	movlw	high _current_set2
 20811  0012BC  6E02               	movwf	strcmp@s1+1,c
 20812  0012BE  0EF1               	movlw	low (STR_87+1)
 20813  0012C0  6E03               	movwf	strcmp@s2,c
 20814  0012C2  0EFF               	movlw	high (STR_87+1)
 20815  0012C4  6E04               	movwf	strcmp@s2+1,c
 20816  0012C6  EC51  F02F         	call	_strcmp	;wreg free
 20817  0012CA  5001               	movf	?_strcmp,w,c
 20818  0012CC  1002               	iorwf	?_strcmp+1,w,c
 20819  0012CE  A4D8               	btfss	status,2,c
 20820  0012D0  D043               	goto	i2l1028
 20821                           
 20822                           ;keypad.c: 60: B = 1*number;
 20823  0012D2  C075  F058         	movff	_number,_B
 20824  0012D6  C076  F059         	movff	_number+1,_B+1
 20825                           
 20826                           ;keypad.c: 62: W = 1*number;
 20827  0012DA  C075  F052         	movff	_number,_W
 20828  0012DE  C076  F053         	movff	_number+1,_W+1
 20829                           
 20830                           ;keypad.c: 63: total_number = 2*number;
 20831  0012E2  90D8               	bcf	status,0,c
 20832  0012E4  3475               	rlcf	_number,w,c
 20833  0012E6  0101               	movlb	1	; () banked
 20834  0012E8  6F8A               	movwf	_total_number& (0+255),b
 20835  0012EA  3476               	rlcf	_number+1,w,c
 20836  0012EC  6F8B               	movwf	(_total_number+1)& (0+255),b
 20837                           
 20838                           ; BSR set to: 1
 20839                           ;keypad.c: 65: B_array[compartment_number[counter_step]] = B;
 20840  0012EE  90D8               	bcf	status,0,c
 20841  0012F0  345A               	rlcf	_counter_step,w,c
 20842  0012F2  6ED9               	movwf	fsr2l,c
 20843  0012F4  345B               	rlcf	_counter_step+1,w,c
 20844  0012F6  6EDA               	movwf	fsr2h,c
 20845  0012F8  0E42               	movlw	low _compartment_number
 20846  0012FA  26D9               	addwf	fsr2l,f,c
 20847  0012FC  0E00               	movlw	high _compartment_number
 20848  0012FE  22DA               	addwfc	fsr2h,f,c
 20849  001300  CFDE F007          	movff	postinc2,??_is_valid
 20850  001304  CFDD F008          	movff	postdec2,??_is_valid+1
 20851  001308  90D8               	bcf	status,0,c
 20852  00130A  3607               	rlcf	??_is_valid,f,c
 20853  00130C  3608               	rlcf	??_is_valid+1,f,c
 20854  00130E  0E30               	movlw	low _B_array
 20855  001310  2407               	addwf	??_is_valid,w,c
 20856  001312  6ED9               	movwf	fsr2l,c
 20857  001314  0E01               	movlw	high _B_array
 20858  001316  2008               	addwfc	??_is_valid+1,w,c
 20859  001318  6EDA               	movwf	fsr2h,c
 20860  00131A  C058  FFDE         	movff	_B,postinc2
 20861  00131E  C059  FFDD         	movff	_B+1,postdec2
 20862                           
 20863                           ; BSR set to: 1
 20864                           ;keypad.c: 66: W_array[compartment_number[counter_step]] = W;
 20865  001322  90D8               	bcf	status,0,c
 20866  001324  345A               	rlcf	_counter_step,w,c
 20867  001326  6ED9               	movwf	fsr2l,c
 20868  001328  345B               	rlcf	_counter_step+1,w,c
 20869  00132A  6EDA               	movwf	fsr2h,c
 20870  00132C  0E42               	movlw	low _compartment_number
 20871  00132E  26D9               	addwf	fsr2l,f,c
 20872  001330  0E00               	movlw	high _compartment_number
 20873  001332  22DA               	addwfc	fsr2h,f,c
 20874  001334  CFDE F007          	movff	postinc2,??_is_valid
 20875  001338  CFDD F008          	movff	postdec2,??_is_valid+1
 20876  00133C  90D8               	bcf	status,0,c
 20877  00133E  3607               	rlcf	??_is_valid,f,c
 20878  001340  3608               	rlcf	??_is_valid+1,f,c
 20879  001342  0E00               	movlw	low _W_array
 20880  001344  2407               	addwf	??_is_valid,w,c
 20881  001346  6ED9               	movwf	fsr2l,c
 20882  001348  0E01               	movlw	high _W_array
 20883  00134A  2008               	addwfc	??_is_valid+1,w,c
 20884  00134C  6EDA               	movwf	fsr2h,c
 20885  00134E  C052  FFDE         	movff	_W,postinc2
 20886  001352  C053  FFDD         	movff	_W+1,postdec2
 20887                           
 20888                           ;keypad.c: 67: }
 20889  001356  0012               	return	
 20890  001358                     i2l1028:
 20891                           
 20892                           ;keypad.c: 68: else if (strcmp(current_set2,"BBN")==0){
 20893                           
 20894                           ; BSR set to: 1
 20895  001358  0E70               	movlw	low _current_set2
 20896  00135A  6E01               	movwf	strcmp@s1,c
 20897  00135C  0E00               	movlw	high _current_set2
 20898  00135E  6E02               	movwf	strcmp@s1+1,c
 20899  001360  0EE8               	movlw	low STR_85
 20900  001362  6E03               	movwf	strcmp@s2,c
 20901  001364  0EFF               	movlw	high STR_85
 20902  001366  6E04               	movwf	strcmp@s2+1,c
 20903  001368  EC51  F02F         	call	_strcmp	;wreg free
 20904  00136C  5001               	movf	?_strcmp,w,c
 20905  00136E  1002               	iorwf	?_strcmp+1,w,c
 20906  001370  A4D8               	btfss	status,2,c
 20907  001372  D04C               	goto	i2l1030
 20908                           
 20909                           ;keypad.c: 69: B = 2*number;
 20910  001374  90D8               	bcf	status,0,c
 20911  001376  3475               	rlcf	_number,w,c
 20912  001378  6E58               	movwf	_B,c
 20913  00137A  3476               	rlcf	_number+1,w,c
 20914  00137C  6E59               	movwf	_B+1,c
 20915                           
 20916                           ;keypad.c: 71: N = 1*number;
 20917  00137E  C075  F056         	movff	_number,_N
 20918  001382  C076  F057         	movff	_number+1,_N+1
 20919                           
 20920                           ;keypad.c: 72: total_number = 3*number;
 20921  001386  C075  F001         	movff	_number,i2___wmul@multiplier
 20922  00138A  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 20923  00138E  0E00               	movlw	0
 20924  001390  6E04               	movwf	i2___wmul@multiplicand+1,c
 20925  001392  0E03               	movlw	3
 20926  001394  6E03               	movwf	i2___wmul@multiplicand,c
 20927  001396  EC9A  F030         	call	i2___wmul	;wreg free
 20928  00139A  C001  F18A         	movff	?i2___wmul,_total_number
 20929  00139E  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 20930                           
 20931                           ;keypad.c: 74: B_array[compartment_number[counter_step]] = B;
 20932  0013A2  90D8               	bcf	status,0,c
 20933  0013A4  345A               	rlcf	_counter_step,w,c
 20934  0013A6  6ED9               	movwf	fsr2l,c
 20935  0013A8  345B               	rlcf	_counter_step+1,w,c
 20936  0013AA  6EDA               	movwf	fsr2h,c
 20937  0013AC  0E42               	movlw	low _compartment_number
 20938  0013AE  26D9               	addwf	fsr2l,f,c
 20939  0013B0  0E00               	movlw	high _compartment_number
 20940  0013B2  22DA               	addwfc	fsr2h,f,c
 20941  0013B4  CFDE F007          	movff	postinc2,??_is_valid
 20942  0013B8  CFDD F008          	movff	postdec2,??_is_valid+1
 20943  0013BC  90D8               	bcf	status,0,c
 20944  0013BE  3607               	rlcf	??_is_valid,f,c
 20945  0013C0  3608               	rlcf	??_is_valid+1,f,c
 20946  0013C2  0E30               	movlw	low _B_array
 20947  0013C4  2407               	addwf	??_is_valid,w,c
 20948  0013C6  6ED9               	movwf	fsr2l,c
 20949  0013C8  0E01               	movlw	high _B_array
 20950  0013CA  2008               	addwfc	??_is_valid+1,w,c
 20951  0013CC  6EDA               	movwf	fsr2h,c
 20952  0013CE  C058  FFDE         	movff	_B,postinc2
 20953  0013D2  C059  FFDD         	movff	_B+1,postdec2
 20954                           
 20955                           ;keypad.c: 75: N_array[compartment_number[counter_step]] = N;
 20956  0013D6  90D8               	bcf	status,0,c
 20957  0013D8  345A               	rlcf	_counter_step,w,c
 20958  0013DA  6ED9               	movwf	fsr2l,c
 20959  0013DC  345B               	rlcf	_counter_step+1,w,c
 20960  0013DE  6EDA               	movwf	fsr2h,c
 20961  0013E0  0E42               	movlw	low _compartment_number
 20962  0013E2  26D9               	addwf	fsr2l,f,c
 20963  0013E4  0E00               	movlw	high _compartment_number
 20964  0013E6  22DA               	addwfc	fsr2h,f,c
 20965  0013E8  CFDE F007          	movff	postinc2,??_is_valid
 20966  0013EC  CFDD F008          	movff	postdec2,??_is_valid+1
 20967  0013F0  90D8               	bcf	status,0,c
 20968  0013F2  3607               	rlcf	??_is_valid,f,c
 20969  0013F4  3608               	rlcf	??_is_valid+1,f,c
 20970  0013F6  0E10               	movlw	low _N_array
 20971  0013F8  2407               	addwf	??_is_valid,w,c
 20972  0013FA  6ED9               	movwf	fsr2l,c
 20973  0013FC  0E01               	movlw	high _N_array
 20974  0013FE  2008               	addwfc	??_is_valid+1,w,c
 20975  001400  6EDA               	movwf	fsr2h,c
 20976  001402  C056  FFDE         	movff	_N,postinc2
 20977  001406  C057  FFDD         	movff	_N+1,postdec2
 20978                           
 20979                           ;keypad.c: 76: }
 20980  00140A  0012               	return	
 20981  00140C                     i2l1030:
 20982                           
 20983                           ;keypad.c: 77: else if (strcmp(current_set2,"BBS")==0){
 20984  00140C  0E70               	movlw	low _current_set2
 20985  00140E  6E01               	movwf	strcmp@s1,c
 20986  001410  0E00               	movlw	high _current_set2
 20987  001412  6E02               	movwf	strcmp@s1+1,c
 20988  001414  0EEC               	movlw	low STR_86
 20989  001416  6E03               	movwf	strcmp@s2,c
 20990  001418  0EFF               	movlw	high STR_86
 20991  00141A  6E04               	movwf	strcmp@s2+1,c
 20992  00141C  EC51  F02F         	call	_strcmp	;wreg free
 20993  001420  5001               	movf	?_strcmp,w,c
 20994  001422  1002               	iorwf	?_strcmp+1,w,c
 20995  001424  A4D8               	btfss	status,2,c
 20996  001426  D04C               	goto	i2l1032
 20997                           
 20998                           ;keypad.c: 78: B = 2*number;
 20999  001428  90D8               	bcf	status,0,c
 21000  00142A  3475               	rlcf	_number,w,c
 21001  00142C  6E58               	movwf	_B,c
 21002  00142E  3476               	rlcf	_number+1,w,c
 21003  001430  6E59               	movwf	_B+1,c
 21004                           
 21005                           ;keypad.c: 80: S = 1*number;
 21006  001432  C075  F054         	movff	_number,_S
 21007  001436  C076  F055         	movff	_number+1,_S+1
 21008                           
 21009                           ;keypad.c: 81: total_number = 3*number;
 21010  00143A  C075  F001         	movff	_number,i2___wmul@multiplier
 21011  00143E  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21012  001442  0E00               	movlw	0
 21013  001444  6E04               	movwf	i2___wmul@multiplicand+1,c
 21014  001446  0E03               	movlw	3
 21015  001448  6E03               	movwf	i2___wmul@multiplicand,c
 21016  00144A  EC9A  F030         	call	i2___wmul	;wreg free
 21017  00144E  C001  F18A         	movff	?i2___wmul,_total_number
 21018  001452  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21019                           
 21020                           ;keypad.c: 83: B_array[compartment_number[counter_step]] = B;
 21021  001456  90D8               	bcf	status,0,c
 21022  001458  345A               	rlcf	_counter_step,w,c
 21023  00145A  6ED9               	movwf	fsr2l,c
 21024  00145C  345B               	rlcf	_counter_step+1,w,c
 21025  00145E  6EDA               	movwf	fsr2h,c
 21026  001460  0E42               	movlw	low _compartment_number
 21027  001462  26D9               	addwf	fsr2l,f,c
 21028  001464  0E00               	movlw	high _compartment_number
 21029  001466  22DA               	addwfc	fsr2h,f,c
 21030  001468  CFDE F007          	movff	postinc2,??_is_valid
 21031  00146C  CFDD F008          	movff	postdec2,??_is_valid+1
 21032  001470  90D8               	bcf	status,0,c
 21033  001472  3607               	rlcf	??_is_valid,f,c
 21034  001474  3608               	rlcf	??_is_valid+1,f,c
 21035  001476  0E30               	movlw	low _B_array
 21036  001478  2407               	addwf	??_is_valid,w,c
 21037  00147A  6ED9               	movwf	fsr2l,c
 21038  00147C  0E01               	movlw	high _B_array
 21039  00147E  2008               	addwfc	??_is_valid+1,w,c
 21040  001480  6EDA               	movwf	fsr2h,c
 21041  001482  C058  FFDE         	movff	_B,postinc2
 21042  001486  C059  FFDD         	movff	_B+1,postdec2
 21043                           
 21044                           ;keypad.c: 84: S_array[compartment_number[counter_step]] = S;
 21045  00148A  90D8               	bcf	status,0,c
 21046  00148C  345A               	rlcf	_counter_step,w,c
 21047  00148E  6ED9               	movwf	fsr2l,c
 21048  001490  345B               	rlcf	_counter_step+1,w,c
 21049  001492  6EDA               	movwf	fsr2h,c
 21050  001494  0E42               	movlw	low _compartment_number
 21051  001496  26D9               	addwf	fsr2l,f,c
 21052  001498  0E00               	movlw	high _compartment_number
 21053  00149A  22DA               	addwfc	fsr2h,f,c
 21054  00149C  CFDE F007          	movff	postinc2,??_is_valid
 21055  0014A0  CFDD F008          	movff	postdec2,??_is_valid+1
 21056  0014A4  90D8               	bcf	status,0,c
 21057  0014A6  3607               	rlcf	??_is_valid,f,c
 21058  0014A8  3608               	rlcf	??_is_valid+1,f,c
 21059  0014AA  0E20               	movlw	low _S_array
 21060  0014AC  2407               	addwf	??_is_valid,w,c
 21061  0014AE  6ED9               	movwf	fsr2l,c
 21062  0014B0  0E01               	movlw	high _S_array
 21063  0014B2  2008               	addwfc	??_is_valid+1,w,c
 21064  0014B4  6EDA               	movwf	fsr2h,c
 21065  0014B6  C054  FFDE         	movff	_S,postinc2
 21066  0014BA  C055  FFDD         	movff	_S+1,postdec2
 21067                           
 21068                           ;keypad.c: 85: }
 21069  0014BE  0012               	return	
 21070  0014C0                     i2l1032:
 21071                           
 21072                           ;keypad.c: 86: else if (strcmp(current_set2,"BBW")==0){
 21073  0014C0  0E70               	movlw	low _current_set2
 21074  0014C2  6E01               	movwf	strcmp@s1,c
 21075  0014C4  0E00               	movlw	high _current_set2
 21076  0014C6  6E02               	movwf	strcmp@s1+1,c
 21077  0014C8  0EF0               	movlw	low STR_87
 21078  0014CA  6E03               	movwf	strcmp@s2,c
 21079  0014CC  0EFF               	movlw	high STR_87
 21080  0014CE  6E04               	movwf	strcmp@s2+1,c
 21081  0014D0  EC51  F02F         	call	_strcmp	;wreg free
 21082  0014D4  5001               	movf	?_strcmp,w,c
 21083  0014D6  1002               	iorwf	?_strcmp+1,w,c
 21084  0014D8  A4D8               	btfss	status,2,c
 21085  0014DA  D04C               	goto	i2l1034
 21086                           
 21087                           ;keypad.c: 87: B = 2*number;
 21088  0014DC  90D8               	bcf	status,0,c
 21089  0014DE  3475               	rlcf	_number,w,c
 21090  0014E0  6E58               	movwf	_B,c
 21091  0014E2  3476               	rlcf	_number+1,w,c
 21092  0014E4  6E59               	movwf	_B+1,c
 21093                           
 21094                           ;keypad.c: 89: W = 1*number;
 21095  0014E6  C075  F052         	movff	_number,_W
 21096  0014EA  C076  F053         	movff	_number+1,_W+1
 21097                           
 21098                           ;keypad.c: 90: total_number = 3*number;
 21099  0014EE  C075  F001         	movff	_number,i2___wmul@multiplier
 21100  0014F2  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21101  0014F6  0E00               	movlw	0
 21102  0014F8  6E04               	movwf	i2___wmul@multiplicand+1,c
 21103  0014FA  0E03               	movlw	3
 21104  0014FC  6E03               	movwf	i2___wmul@multiplicand,c
 21105  0014FE  EC9A  F030         	call	i2___wmul	;wreg free
 21106  001502  C001  F18A         	movff	?i2___wmul,_total_number
 21107  001506  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21108                           
 21109                           ;keypad.c: 92: B_array[compartment_number[counter_step]] = B;
 21110  00150A  90D8               	bcf	status,0,c
 21111  00150C  345A               	rlcf	_counter_step,w,c
 21112  00150E  6ED9               	movwf	fsr2l,c
 21113  001510  345B               	rlcf	_counter_step+1,w,c
 21114  001512  6EDA               	movwf	fsr2h,c
 21115  001514  0E42               	movlw	low _compartment_number
 21116  001516  26D9               	addwf	fsr2l,f,c
 21117  001518  0E00               	movlw	high _compartment_number
 21118  00151A  22DA               	addwfc	fsr2h,f,c
 21119  00151C  CFDE F007          	movff	postinc2,??_is_valid
 21120  001520  CFDD F008          	movff	postdec2,??_is_valid+1
 21121  001524  90D8               	bcf	status,0,c
 21122  001526  3607               	rlcf	??_is_valid,f,c
 21123  001528  3608               	rlcf	??_is_valid+1,f,c
 21124  00152A  0E30               	movlw	low _B_array
 21125  00152C  2407               	addwf	??_is_valid,w,c
 21126  00152E  6ED9               	movwf	fsr2l,c
 21127  001530  0E01               	movlw	high _B_array
 21128  001532  2008               	addwfc	??_is_valid+1,w,c
 21129  001534  6EDA               	movwf	fsr2h,c
 21130  001536  C058  FFDE         	movff	_B,postinc2
 21131  00153A  C059  FFDD         	movff	_B+1,postdec2
 21132                           
 21133                           ;keypad.c: 93: W_array[compartment_number[counter_step]] = W;
 21134  00153E  90D8               	bcf	status,0,c
 21135  001540  345A               	rlcf	_counter_step,w,c
 21136  001542  6ED9               	movwf	fsr2l,c
 21137  001544  345B               	rlcf	_counter_step+1,w,c
 21138  001546  6EDA               	movwf	fsr2h,c
 21139  001548  0E42               	movlw	low _compartment_number
 21140  00154A  26D9               	addwf	fsr2l,f,c
 21141  00154C  0E00               	movlw	high _compartment_number
 21142  00154E  22DA               	addwfc	fsr2h,f,c
 21143  001550  CFDE F007          	movff	postinc2,??_is_valid
 21144  001554  CFDD F008          	movff	postdec2,??_is_valid+1
 21145  001558  90D8               	bcf	status,0,c
 21146  00155A  3607               	rlcf	??_is_valid,f,c
 21147  00155C  3608               	rlcf	??_is_valid+1,f,c
 21148  00155E  0E00               	movlw	low _W_array
 21149  001560  2407               	addwf	??_is_valid,w,c
 21150  001562  6ED9               	movwf	fsr2l,c
 21151  001564  0E01               	movlw	high _W_array
 21152  001566  2008               	addwfc	??_is_valid+1,w,c
 21153  001568  6EDA               	movwf	fsr2h,c
 21154  00156A  C052  FFDE         	movff	_W,postinc2
 21155  00156E  C053  FFDD         	movff	_W+1,postdec2
 21156                           
 21157                           ;keypad.c: 94: }
 21158  001572  0012               	return	
 21159  001574                     i2l1034:
 21160                           
 21161                           ;keypad.c: 95: else if (strcmp(current_set2,"BNW")==0){
 21162  001574  0E70               	movlw	low _current_set2
 21163  001576  6E01               	movwf	strcmp@s1,c
 21164  001578  0E00               	movlw	high _current_set2
 21165  00157A  6E02               	movwf	strcmp@s1+1,c
 21166  00157C  0EB2               	movlw	low (STR_94+1)
 21167  00157E  6E03               	movwf	strcmp@s2,c
 21168  001580  0EFF               	movlw	high (STR_94+1)
 21169  001582  6E04               	movwf	strcmp@s2+1,c
 21170  001584  EC51  F02F         	call	_strcmp	;wreg free
 21171  001588  5001               	movf	?_strcmp,w,c
 21172  00158A  1002               	iorwf	?_strcmp+1,w,c
 21173  00158C  A4D8               	btfss	status,2,c
 21174  00158E  D069               	goto	i2l1036
 21175                           
 21176                           ;keypad.c: 96: B = 1*number;
 21177  001590  C075  F058         	movff	_number,_B
 21178  001594  C076  F059         	movff	_number+1,_B+1
 21179                           
 21180                           ;keypad.c: 97: W = 1*number;
 21181  001598  C075  F052         	movff	_number,_W
 21182  00159C  C076  F053         	movff	_number+1,_W+1
 21183                           
 21184                           ;keypad.c: 98: N = 1*number;
 21185  0015A0  C075  F056         	movff	_number,_N
 21186  0015A4  C076  F057         	movff	_number+1,_N+1
 21187                           
 21188                           ;keypad.c: 99: total_number = 3*number;
 21189  0015A8  C075  F001         	movff	_number,i2___wmul@multiplier
 21190  0015AC  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21191  0015B0  0E00               	movlw	0
 21192  0015B2  6E04               	movwf	i2___wmul@multiplicand+1,c
 21193  0015B4  0E03               	movlw	3
 21194  0015B6  6E03               	movwf	i2___wmul@multiplicand,c
 21195  0015B8  EC9A  F030         	call	i2___wmul	;wreg free
 21196  0015BC  C001  F18A         	movff	?i2___wmul,_total_number
 21197  0015C0  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21198                           
 21199                           ;keypad.c: 101: B_array[compartment_number[counter_step]] = B;
 21200  0015C4  90D8               	bcf	status,0,c
 21201  0015C6  345A               	rlcf	_counter_step,w,c
 21202  0015C8  6ED9               	movwf	fsr2l,c
 21203  0015CA  345B               	rlcf	_counter_step+1,w,c
 21204  0015CC  6EDA               	movwf	fsr2h,c
 21205  0015CE  0E42               	movlw	low _compartment_number
 21206  0015D0  26D9               	addwf	fsr2l,f,c
 21207  0015D2  0E00               	movlw	high _compartment_number
 21208  0015D4  22DA               	addwfc	fsr2h,f,c
 21209  0015D6  CFDE F007          	movff	postinc2,??_is_valid
 21210  0015DA  CFDD F008          	movff	postdec2,??_is_valid+1
 21211  0015DE  90D8               	bcf	status,0,c
 21212  0015E0  3607               	rlcf	??_is_valid,f,c
 21213  0015E2  3608               	rlcf	??_is_valid+1,f,c
 21214  0015E4  0E30               	movlw	low _B_array
 21215  0015E6  2407               	addwf	??_is_valid,w,c
 21216  0015E8  6ED9               	movwf	fsr2l,c
 21217  0015EA  0E01               	movlw	high _B_array
 21218  0015EC  2008               	addwfc	??_is_valid+1,w,c
 21219  0015EE  6EDA               	movwf	fsr2h,c
 21220  0015F0  C058  FFDE         	movff	_B,postinc2
 21221  0015F4  C059  FFDD         	movff	_B+1,postdec2
 21222                           
 21223                           ;keypad.c: 102: W_array[compartment_number[counter_step]] = W;
 21224  0015F8  90D8               	bcf	status,0,c
 21225  0015FA  345A               	rlcf	_counter_step,w,c
 21226  0015FC  6ED9               	movwf	fsr2l,c
 21227  0015FE  345B               	rlcf	_counter_step+1,w,c
 21228  001600  6EDA               	movwf	fsr2h,c
 21229  001602  0E42               	movlw	low _compartment_number
 21230  001604  26D9               	addwf	fsr2l,f,c
 21231  001606  0E00               	movlw	high _compartment_number
 21232  001608  22DA               	addwfc	fsr2h,f,c
 21233  00160A  CFDE F007          	movff	postinc2,??_is_valid
 21234  00160E  CFDD F008          	movff	postdec2,??_is_valid+1
 21235  001612  90D8               	bcf	status,0,c
 21236  001614  3607               	rlcf	??_is_valid,f,c
 21237  001616  3608               	rlcf	??_is_valid+1,f,c
 21238  001618  0E00               	movlw	low _W_array
 21239  00161A  2407               	addwf	??_is_valid,w,c
 21240  00161C  6ED9               	movwf	fsr2l,c
 21241  00161E  0E01               	movlw	high _W_array
 21242  001620  2008               	addwfc	??_is_valid+1,w,c
 21243  001622  6EDA               	movwf	fsr2h,c
 21244  001624  C052  FFDE         	movff	_W,postinc2
 21245  001628  C053  FFDD         	movff	_W+1,postdec2
 21246                           
 21247                           ;keypad.c: 103: N_array[compartment_number[counter_step]] = N;
 21248  00162C  90D8               	bcf	status,0,c
 21249  00162E  345A               	rlcf	_counter_step,w,c
 21250  001630  6ED9               	movwf	fsr2l,c
 21251  001632  345B               	rlcf	_counter_step+1,w,c
 21252  001634  6EDA               	movwf	fsr2h,c
 21253  001636  0E42               	movlw	low _compartment_number
 21254  001638  26D9               	addwf	fsr2l,f,c
 21255  00163A  0E00               	movlw	high _compartment_number
 21256  00163C  22DA               	addwfc	fsr2h,f,c
 21257  00163E  CFDE F007          	movff	postinc2,??_is_valid
 21258  001642  CFDD F008          	movff	postdec2,??_is_valid+1
 21259  001646  90D8               	bcf	status,0,c
 21260  001648  3607               	rlcf	??_is_valid,f,c
 21261  00164A  3608               	rlcf	??_is_valid+1,f,c
 21262  00164C  0E10               	movlw	low _N_array
 21263  00164E  2407               	addwf	??_is_valid,w,c
 21264  001650  6ED9               	movwf	fsr2l,c
 21265  001652  0E01               	movlw	high _N_array
 21266  001654  2008               	addwfc	??_is_valid+1,w,c
 21267  001656  6EDA               	movwf	fsr2h,c
 21268  001658  C056  FFDE         	movff	_N,postinc2
 21269  00165C  C057  FFDD         	movff	_N+1,postdec2
 21270                           
 21271                           ;keypad.c: 105: }
 21272  001660  0012               	return	
 21273  001662                     i2l1036:
 21274                           
 21275                           ;keypad.c: 106: else if (strcmp(current_set2,"BSW")==0){
 21276  001662  0E70               	movlw	low _current_set2
 21277  001664  6E01               	movwf	strcmp@s1,c
 21278  001666  0E00               	movlw	high _current_set2
 21279  001668  6E02               	movwf	strcmp@s1+1,c
 21280  00166A  0EBC               	movlw	low (STR_93+1)
 21281  00166C  6E03               	movwf	strcmp@s2,c
 21282  00166E  0EFF               	movlw	high (STR_93+1)
 21283  001670  6E04               	movwf	strcmp@s2+1,c
 21284  001672  EC51  F02F         	call	_strcmp	;wreg free
 21285  001676  5001               	movf	?_strcmp,w,c
 21286  001678  1002               	iorwf	?_strcmp+1,w,c
 21287  00167A  A4D8               	btfss	status,2,c
 21288  00167C  D069               	goto	i2l1038
 21289                           
 21290                           ;keypad.c: 107: B = 1*number;
 21291  00167E  C075  F058         	movff	_number,_B
 21292  001682  C076  F059         	movff	_number+1,_B+1
 21293                           
 21294                           ;keypad.c: 108: S = 1*number;
 21295  001686  C075  F054         	movff	_number,_S
 21296  00168A  C076  F055         	movff	_number+1,_S+1
 21297                           
 21298                           ;keypad.c: 109: W = 1*number;
 21299  00168E  C075  F052         	movff	_number,_W
 21300  001692  C076  F053         	movff	_number+1,_W+1
 21301                           
 21302                           ;keypad.c: 110: total_number = 3*number;
 21303  001696  C075  F001         	movff	_number,i2___wmul@multiplier
 21304  00169A  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21305  00169E  0E00               	movlw	0
 21306  0016A0  6E04               	movwf	i2___wmul@multiplicand+1,c
 21307  0016A2  0E03               	movlw	3
 21308  0016A4  6E03               	movwf	i2___wmul@multiplicand,c
 21309  0016A6  EC9A  F030         	call	i2___wmul	;wreg free
 21310  0016AA  C001  F18A         	movff	?i2___wmul,_total_number
 21311  0016AE  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21312                           
 21313                           ;keypad.c: 112: B_array[compartment_number[counter_step]] = B;
 21314  0016B2  90D8               	bcf	status,0,c
 21315  0016B4  345A               	rlcf	_counter_step,w,c
 21316  0016B6  6ED9               	movwf	fsr2l,c
 21317  0016B8  345B               	rlcf	_counter_step+1,w,c
 21318  0016BA  6EDA               	movwf	fsr2h,c
 21319  0016BC  0E42               	movlw	low _compartment_number
 21320  0016BE  26D9               	addwf	fsr2l,f,c
 21321  0016C0  0E00               	movlw	high _compartment_number
 21322  0016C2  22DA               	addwfc	fsr2h,f,c
 21323  0016C4  CFDE F007          	movff	postinc2,??_is_valid
 21324  0016C8  CFDD F008          	movff	postdec2,??_is_valid+1
 21325  0016CC  90D8               	bcf	status,0,c
 21326  0016CE  3607               	rlcf	??_is_valid,f,c
 21327  0016D0  3608               	rlcf	??_is_valid+1,f,c
 21328  0016D2  0E30               	movlw	low _B_array
 21329  0016D4  2407               	addwf	??_is_valid,w,c
 21330  0016D6  6ED9               	movwf	fsr2l,c
 21331  0016D8  0E01               	movlw	high _B_array
 21332  0016DA  2008               	addwfc	??_is_valid+1,w,c
 21333  0016DC  6EDA               	movwf	fsr2h,c
 21334  0016DE  C058  FFDE         	movff	_B,postinc2
 21335  0016E2  C059  FFDD         	movff	_B+1,postdec2
 21336                           
 21337                           ;keypad.c: 113: S_array[compartment_number[counter_step]] = S;
 21338  0016E6  90D8               	bcf	status,0,c
 21339  0016E8  345A               	rlcf	_counter_step,w,c
 21340  0016EA  6ED9               	movwf	fsr2l,c
 21341  0016EC  345B               	rlcf	_counter_step+1,w,c
 21342  0016EE  6EDA               	movwf	fsr2h,c
 21343  0016F0  0E42               	movlw	low _compartment_number
 21344  0016F2  26D9               	addwf	fsr2l,f,c
 21345  0016F4  0E00               	movlw	high _compartment_number
 21346  0016F6  22DA               	addwfc	fsr2h,f,c
 21347  0016F8  CFDE F007          	movff	postinc2,??_is_valid
 21348  0016FC  CFDD F008          	movff	postdec2,??_is_valid+1
 21349  001700  90D8               	bcf	status,0,c
 21350  001702  3607               	rlcf	??_is_valid,f,c
 21351  001704  3608               	rlcf	??_is_valid+1,f,c
 21352  001706  0E20               	movlw	low _S_array
 21353  001708  2407               	addwf	??_is_valid,w,c
 21354  00170A  6ED9               	movwf	fsr2l,c
 21355  00170C  0E01               	movlw	high _S_array
 21356  00170E  2008               	addwfc	??_is_valid+1,w,c
 21357  001710  6EDA               	movwf	fsr2h,c
 21358  001712  C054  FFDE         	movff	_S,postinc2
 21359  001716  C055  FFDD         	movff	_S+1,postdec2
 21360                           
 21361                           ;keypad.c: 114: W_array[compartment_number[counter_step]] = W;
 21362  00171A  90D8               	bcf	status,0,c
 21363  00171C  345A               	rlcf	_counter_step,w,c
 21364  00171E  6ED9               	movwf	fsr2l,c
 21365  001720  345B               	rlcf	_counter_step+1,w,c
 21366  001722  6EDA               	movwf	fsr2h,c
 21367  001724  0E42               	movlw	low _compartment_number
 21368  001726  26D9               	addwf	fsr2l,f,c
 21369  001728  0E00               	movlw	high _compartment_number
 21370  00172A  22DA               	addwfc	fsr2h,f,c
 21371  00172C  CFDE F007          	movff	postinc2,??_is_valid
 21372  001730  CFDD F008          	movff	postdec2,??_is_valid+1
 21373  001734  90D8               	bcf	status,0,c
 21374  001736  3607               	rlcf	??_is_valid,f,c
 21375  001738  3608               	rlcf	??_is_valid+1,f,c
 21376  00173A  0E00               	movlw	low _W_array
 21377  00173C  2407               	addwf	??_is_valid,w,c
 21378  00173E  6ED9               	movwf	fsr2l,c
 21379  001740  0E01               	movlw	high _W_array
 21380  001742  2008               	addwfc	??_is_valid+1,w,c
 21381  001744  6EDA               	movwf	fsr2h,c
 21382  001746  C052  FFDE         	movff	_W,postinc2
 21383  00174A  C053  FFDD         	movff	_W+1,postdec2
 21384                           
 21385                           ;keypad.c: 116: }
 21386  00174E  0012               	return	
 21387  001750                     i2l1038:
 21388                           
 21389                           ;keypad.c: 117: else if (strcmp(current_set2,"BWW")==0){
 21390  001750  0E70               	movlw	low _current_set2
 21391  001752  6E01               	movwf	strcmp@s1,c
 21392  001754  0E00               	movlw	high _current_set2
 21393  001756  6E02               	movwf	strcmp@s1+1,c
 21394  001758  0EF4               	movlw	low STR_90
 21395  00175A  6E03               	movwf	strcmp@s2,c
 21396  00175C  0EFF               	movlw	high STR_90
 21397  00175E  6E04               	movwf	strcmp@s2+1,c
 21398  001760  EC51  F02F         	call	_strcmp	;wreg free
 21399  001764  5001               	movf	?_strcmp,w,c
 21400  001766  1002               	iorwf	?_strcmp+1,w,c
 21401  001768  A4D8               	btfss	status,2,c
 21402  00176A  D04C               	goto	i2l1040
 21403                           
 21404                           ;keypad.c: 118: B = 1*number;
 21405  00176C  C075  F058         	movff	_number,_B
 21406  001770  C076  F059         	movff	_number+1,_B+1
 21407                           
 21408                           ;keypad.c: 119: W = 2*number;
 21409  001774  90D8               	bcf	status,0,c
 21410  001776  3475               	rlcf	_number,w,c
 21411  001778  6E52               	movwf	_W,c
 21412  00177A  3476               	rlcf	_number+1,w,c
 21413  00177C  6E53               	movwf	_W+1,c
 21414                           
 21415                           ;keypad.c: 120: total_number = 3*number;
 21416  00177E  C075  F001         	movff	_number,i2___wmul@multiplier
 21417  001782  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 21418  001786  0E00               	movlw	0
 21419  001788  6E04               	movwf	i2___wmul@multiplicand+1,c
 21420  00178A  0E03               	movlw	3
 21421  00178C  6E03               	movwf	i2___wmul@multiplicand,c
 21422  00178E  EC9A  F030         	call	i2___wmul	;wreg free
 21423  001792  C001  F18A         	movff	?i2___wmul,_total_number
 21424  001796  C002  F18B         	movff	?i2___wmul+1,_total_number+1
 21425                           
 21426                           ;keypad.c: 122: B_array[compartment_number[counter_step]] = B;
 21427  00179A  90D8               	bcf	status,0,c
 21428  00179C  345A               	rlcf	_counter_step,w,c
 21429  00179E  6ED9               	movwf	fsr2l,c
 21430  0017A0  345B               	rlcf	_counter_step+1,w,c
 21431  0017A2  6EDA               	movwf	fsr2h,c
 21432  0017A4  0E42               	movlw	low _compartment_number
 21433  0017A6  26D9               	addwf	fsr2l,f,c
 21434  0017A8  0E00               	movlw	high _compartment_number
 21435  0017AA  22DA               	addwfc	fsr2h,f,c
 21436  0017AC  CFDE F007          	movff	postinc2,??_is_valid
 21437  0017B0  CFDD F008          	movff	postdec2,??_is_valid+1
 21438  0017B4  90D8               	bcf	status,0,c
 21439  0017B6  3607               	rlcf	??_is_valid,f,c
 21440  0017B8  3608               	rlcf	??_is_valid+1,f,c
 21441  0017BA  0E30               	movlw	low _B_array
 21442  0017BC  2407               	addwf	??_is_valid,w,c
 21443  0017BE  6ED9               	movwf	fsr2l,c
 21444  0017C0  0E01               	movlw	high _B_array
 21445  0017C2  2008               	addwfc	??_is_valid+1,w,c
 21446  0017C4  6EDA               	movwf	fsr2h,c
 21447  0017C6  C058  FFDE         	movff	_B,postinc2
 21448  0017CA  C059  FFDD         	movff	_B+1,postdec2
 21449                           
 21450                           ;keypad.c: 123: W_array[compartment_number[counter_step]] = W;
 21451  0017CE  90D8               	bcf	status,0,c
 21452  0017D0  345A               	rlcf	_counter_step,w,c
 21453  0017D2  6ED9               	movwf	fsr2l,c
 21454  0017D4  345B               	rlcf	_counter_step+1,w,c
 21455  0017D6  6EDA               	movwf	fsr2h,c
 21456  0017D8  0E42               	movlw	low _compartment_number
 21457  0017DA  26D9               	addwf	fsr2l,f,c
 21458  0017DC  0E00               	movlw	high _compartment_number
 21459  0017DE  22DA               	addwfc	fsr2h,f,c
 21460  0017E0  CFDE F007          	movff	postinc2,??_is_valid
 21461  0017E4  CFDD F008          	movff	postdec2,??_is_valid+1
 21462  0017E8  90D8               	bcf	status,0,c
 21463  0017EA  3607               	rlcf	??_is_valid,f,c
 21464  0017EC  3608               	rlcf	??_is_valid+1,f,c
 21465  0017EE  0E00               	movlw	low _W_array
 21466  0017F0  2407               	addwf	??_is_valid,w,c
 21467  0017F2  6ED9               	movwf	fsr2l,c
 21468  0017F4  0E01               	movlw	high _W_array
 21469  0017F6  2008               	addwfc	??_is_valid+1,w,c
 21470  0017F8  6EDA               	movwf	fsr2h,c
 21471  0017FA  C052  FFDE         	movff	_W,postinc2
 21472  0017FE  C053  FFDD         	movff	_W+1,postdec2
 21473                           
 21474                           ;keypad.c: 124: }
 21475  001802  0012               	return	
 21476  001804                     i2l1040:
 21477                           
 21478                           ;keypad.c: 125: else if (strcmp(current_set2,"BNWW")==0){
 21479  001804  0E70               	movlw	low _current_set2
 21480  001806  6E01               	movwf	strcmp@s1,c
 21481  001808  0E00               	movlw	high _current_set2
 21482  00180A  6E02               	movwf	strcmp@s1+1,c
 21483  00180C  0EC0               	movlw	low STR_91
 21484  00180E  6E03               	movwf	strcmp@s2,c
 21485  001810  0EFF               	movlw	high STR_91
 21486  001812  6E04               	movwf	strcmp@s2+1,c
 21487  001814  EC51  F02F         	call	_strcmp	;wreg free
 21488  001818  5001               	movf	?_strcmp,w,c
 21489  00181A  1002               	iorwf	?_strcmp+1,w,c
 21490  00181C  A4D8               	btfss	status,2,c
 21491  00181E  D06A               	goto	i2l1042
 21492                           
 21493                           ;keypad.c: 126: B = 1*number;
 21494  001820  C075  F058         	movff	_number,_B
 21495  001824  C076  F059         	movff	_number+1,_B+1
 21496                           
 21497                           ;keypad.c: 127: N = 1*number;
 21498  001828  C075  F056         	movff	_number,_N
 21499  00182C  C076  F057         	movff	_number+1,_N+1
 21500                           
 21501                           ;keypad.c: 128: W = 2*number;
 21502  001830  90D8               	bcf	status,0,c
 21503  001832  3475               	rlcf	_number,w,c
 21504  001834  6E52               	movwf	_W,c
 21505  001836  3476               	rlcf	_number+1,w,c
 21506  001838  6E53               	movwf	_W+1,c
 21507                           
 21508                           ;keypad.c: 129: total_number = 4*number;
 21509  00183A  C075  F007         	movff	_number,??_is_valid
 21510  00183E  C076  F008         	movff	_number+1,??_is_valid+1
 21511  001842  90D8               	bcf	status,0,c
 21512  001844  3607               	rlcf	??_is_valid,f,c
 21513  001846  3608               	rlcf	??_is_valid+1,f,c
 21514  001848  90D8               	bcf	status,0,c
 21515  00184A  3607               	rlcf	??_is_valid,f,c
 21516  00184C  3608               	rlcf	??_is_valid+1,f,c
 21517  00184E  C007  F18A         	movff	??_is_valid,_total_number
 21518  001852  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21519                           
 21520                           ;keypad.c: 131: B_array[compartment_number[counter_step]] = B;
 21521  001856  90D8               	bcf	status,0,c
 21522  001858  345A               	rlcf	_counter_step,w,c
 21523  00185A  6ED9               	movwf	fsr2l,c
 21524  00185C  345B               	rlcf	_counter_step+1,w,c
 21525  00185E  6EDA               	movwf	fsr2h,c
 21526  001860  0E42               	movlw	low _compartment_number
 21527  001862  26D9               	addwf	fsr2l,f,c
 21528  001864  0E00               	movlw	high _compartment_number
 21529  001866  22DA               	addwfc	fsr2h,f,c
 21530  001868  CFDE F007          	movff	postinc2,??_is_valid
 21531  00186C  CFDD F008          	movff	postdec2,??_is_valid+1
 21532  001870  90D8               	bcf	status,0,c
 21533  001872  3607               	rlcf	??_is_valid,f,c
 21534  001874  3608               	rlcf	??_is_valid+1,f,c
 21535  001876  0E30               	movlw	low _B_array
 21536  001878  2407               	addwf	??_is_valid,w,c
 21537  00187A  6ED9               	movwf	fsr2l,c
 21538  00187C  0E01               	movlw	high _B_array
 21539  00187E  2008               	addwfc	??_is_valid+1,w,c
 21540  001880  6EDA               	movwf	fsr2h,c
 21541  001882  C058  FFDE         	movff	_B,postinc2
 21542  001886  C059  FFDD         	movff	_B+1,postdec2
 21543                           
 21544                           ;keypad.c: 132: N_array[compartment_number[counter_step]] = N;
 21545  00188A  90D8               	bcf	status,0,c
 21546  00188C  345A               	rlcf	_counter_step,w,c
 21547  00188E  6ED9               	movwf	fsr2l,c
 21548  001890  345B               	rlcf	_counter_step+1,w,c
 21549  001892  6EDA               	movwf	fsr2h,c
 21550  001894  0E42               	movlw	low _compartment_number
 21551  001896  26D9               	addwf	fsr2l,f,c
 21552  001898  0E00               	movlw	high _compartment_number
 21553  00189A  22DA               	addwfc	fsr2h,f,c
 21554  00189C  CFDE F007          	movff	postinc2,??_is_valid
 21555  0018A0  CFDD F008          	movff	postdec2,??_is_valid+1
 21556  0018A4  90D8               	bcf	status,0,c
 21557  0018A6  3607               	rlcf	??_is_valid,f,c
 21558  0018A8  3608               	rlcf	??_is_valid+1,f,c
 21559  0018AA  0E10               	movlw	low _N_array
 21560  0018AC  2407               	addwf	??_is_valid,w,c
 21561  0018AE  6ED9               	movwf	fsr2l,c
 21562  0018B0  0E01               	movlw	high _N_array
 21563  0018B2  2008               	addwfc	??_is_valid+1,w,c
 21564  0018B4  6EDA               	movwf	fsr2h,c
 21565  0018B6  C056  FFDE         	movff	_N,postinc2
 21566  0018BA  C057  FFDD         	movff	_N+1,postdec2
 21567                           
 21568                           ;keypad.c: 133: W_array[compartment_number[counter_step]] = W;
 21569  0018BE  90D8               	bcf	status,0,c
 21570  0018C0  345A               	rlcf	_counter_step,w,c
 21571  0018C2  6ED9               	movwf	fsr2l,c
 21572  0018C4  345B               	rlcf	_counter_step+1,w,c
 21573  0018C6  6EDA               	movwf	fsr2h,c
 21574  0018C8  0E42               	movlw	low _compartment_number
 21575  0018CA  26D9               	addwf	fsr2l,f,c
 21576  0018CC  0E00               	movlw	high _compartment_number
 21577  0018CE  22DA               	addwfc	fsr2h,f,c
 21578  0018D0  CFDE F007          	movff	postinc2,??_is_valid
 21579  0018D4  CFDD F008          	movff	postdec2,??_is_valid+1
 21580  0018D8  90D8               	bcf	status,0,c
 21581  0018DA  3607               	rlcf	??_is_valid,f,c
 21582  0018DC  3608               	rlcf	??_is_valid+1,f,c
 21583  0018DE  0E00               	movlw	low _W_array
 21584  0018E0  2407               	addwf	??_is_valid,w,c
 21585  0018E2  6ED9               	movwf	fsr2l,c
 21586  0018E4  0E01               	movlw	high _W_array
 21587  0018E6  2008               	addwfc	??_is_valid+1,w,c
 21588  0018E8  6EDA               	movwf	fsr2h,c
 21589  0018EA  C052  FFDE         	movff	_W,postinc2
 21590  0018EE  C053  FFDD         	movff	_W+1,postdec2
 21591                           
 21592                           ;keypad.c: 134: }
 21593  0018F2  0012               	return	
 21594  0018F4                     i2l1042:
 21595                           
 21596                           ;keypad.c: 135: else if (strcmp(current_set2,"BSWW")==0){
 21597  0018F4  0E70               	movlw	low _current_set2
 21598  0018F6  6E01               	movwf	strcmp@s1,c
 21599  0018F8  0E00               	movlw	high _current_set2
 21600  0018FA  6E02               	movwf	strcmp@s1+1,c
 21601  0018FC  0EC5               	movlw	low STR_92
 21602  0018FE  6E03               	movwf	strcmp@s2,c
 21603  001900  0EFF               	movlw	high STR_92
 21604  001902  6E04               	movwf	strcmp@s2+1,c
 21605  001904  EC51  F02F         	call	_strcmp	;wreg free
 21606  001908  5001               	movf	?_strcmp,w,c
 21607  00190A  1002               	iorwf	?_strcmp+1,w,c
 21608  00190C  A4D8               	btfss	status,2,c
 21609  00190E  D06A               	goto	i2l1044
 21610                           
 21611                           ;keypad.c: 136: B = 1*number;
 21612  001910  C075  F058         	movff	_number,_B
 21613  001914  C076  F059         	movff	_number+1,_B+1
 21614                           
 21615                           ;keypad.c: 137: S = 1*number;
 21616  001918  C075  F054         	movff	_number,_S
 21617  00191C  C076  F055         	movff	_number+1,_S+1
 21618                           
 21619                           ;keypad.c: 138: W = 2*number;
 21620  001920  90D8               	bcf	status,0,c
 21621  001922  3475               	rlcf	_number,w,c
 21622  001924  6E52               	movwf	_W,c
 21623  001926  3476               	rlcf	_number+1,w,c
 21624  001928  6E53               	movwf	_W+1,c
 21625                           
 21626                           ;keypad.c: 139: total_number = 4*number;
 21627  00192A  C075  F007         	movff	_number,??_is_valid
 21628  00192E  C076  F008         	movff	_number+1,??_is_valid+1
 21629  001932  90D8               	bcf	status,0,c
 21630  001934  3607               	rlcf	??_is_valid,f,c
 21631  001936  3608               	rlcf	??_is_valid+1,f,c
 21632  001938  90D8               	bcf	status,0,c
 21633  00193A  3607               	rlcf	??_is_valid,f,c
 21634  00193C  3608               	rlcf	??_is_valid+1,f,c
 21635  00193E  C007  F18A         	movff	??_is_valid,_total_number
 21636  001942  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21637                           
 21638                           ;keypad.c: 141: B_array[compartment_number[counter_step]] = B;
 21639  001946  90D8               	bcf	status,0,c
 21640  001948  345A               	rlcf	_counter_step,w,c
 21641  00194A  6ED9               	movwf	fsr2l,c
 21642  00194C  345B               	rlcf	_counter_step+1,w,c
 21643  00194E  6EDA               	movwf	fsr2h,c
 21644  001950  0E42               	movlw	low _compartment_number
 21645  001952  26D9               	addwf	fsr2l,f,c
 21646  001954  0E00               	movlw	high _compartment_number
 21647  001956  22DA               	addwfc	fsr2h,f,c
 21648  001958  CFDE F007          	movff	postinc2,??_is_valid
 21649  00195C  CFDD F008          	movff	postdec2,??_is_valid+1
 21650  001960  90D8               	bcf	status,0,c
 21651  001962  3607               	rlcf	??_is_valid,f,c
 21652  001964  3608               	rlcf	??_is_valid+1,f,c
 21653  001966  0E30               	movlw	low _B_array
 21654  001968  2407               	addwf	??_is_valid,w,c
 21655  00196A  6ED9               	movwf	fsr2l,c
 21656  00196C  0E01               	movlw	high _B_array
 21657  00196E  2008               	addwfc	??_is_valid+1,w,c
 21658  001970  6EDA               	movwf	fsr2h,c
 21659  001972  C058  FFDE         	movff	_B,postinc2
 21660  001976  C059  FFDD         	movff	_B+1,postdec2
 21661                           
 21662                           ;keypad.c: 142: S_array[compartment_number[counter_step]] = S;
 21663  00197A  90D8               	bcf	status,0,c
 21664  00197C  345A               	rlcf	_counter_step,w,c
 21665  00197E  6ED9               	movwf	fsr2l,c
 21666  001980  345B               	rlcf	_counter_step+1,w,c
 21667  001982  6EDA               	movwf	fsr2h,c
 21668  001984  0E42               	movlw	low _compartment_number
 21669  001986  26D9               	addwf	fsr2l,f,c
 21670  001988  0E00               	movlw	high _compartment_number
 21671  00198A  22DA               	addwfc	fsr2h,f,c
 21672  00198C  CFDE F007          	movff	postinc2,??_is_valid
 21673  001990  CFDD F008          	movff	postdec2,??_is_valid+1
 21674  001994  90D8               	bcf	status,0,c
 21675  001996  3607               	rlcf	??_is_valid,f,c
 21676  001998  3608               	rlcf	??_is_valid+1,f,c
 21677  00199A  0E20               	movlw	low _S_array
 21678  00199C  2407               	addwf	??_is_valid,w,c
 21679  00199E  6ED9               	movwf	fsr2l,c
 21680  0019A0  0E01               	movlw	high _S_array
 21681  0019A2  2008               	addwfc	??_is_valid+1,w,c
 21682  0019A4  6EDA               	movwf	fsr2h,c
 21683  0019A6  C054  FFDE         	movff	_S,postinc2
 21684  0019AA  C055  FFDD         	movff	_S+1,postdec2
 21685                           
 21686                           ;keypad.c: 143: W_array[compartment_number[counter_step]] = W;
 21687  0019AE  90D8               	bcf	status,0,c
 21688  0019B0  345A               	rlcf	_counter_step,w,c
 21689  0019B2  6ED9               	movwf	fsr2l,c
 21690  0019B4  345B               	rlcf	_counter_step+1,w,c
 21691  0019B6  6EDA               	movwf	fsr2h,c
 21692  0019B8  0E42               	movlw	low _compartment_number
 21693  0019BA  26D9               	addwf	fsr2l,f,c
 21694  0019BC  0E00               	movlw	high _compartment_number
 21695  0019BE  22DA               	addwfc	fsr2h,f,c
 21696  0019C0  CFDE F007          	movff	postinc2,??_is_valid
 21697  0019C4  CFDD F008          	movff	postdec2,??_is_valid+1
 21698  0019C8  90D8               	bcf	status,0,c
 21699  0019CA  3607               	rlcf	??_is_valid,f,c
 21700  0019CC  3608               	rlcf	??_is_valid+1,f,c
 21701  0019CE  0E00               	movlw	low _W_array
 21702  0019D0  2407               	addwf	??_is_valid,w,c
 21703  0019D2  6ED9               	movwf	fsr2l,c
 21704  0019D4  0E01               	movlw	high _W_array
 21705  0019D6  2008               	addwfc	??_is_valid+1,w,c
 21706  0019D8  6EDA               	movwf	fsr2h,c
 21707  0019DA  C052  FFDE         	movff	_W,postinc2
 21708  0019DE  C053  FFDD         	movff	_W+1,postdec2
 21709                           
 21710                           ;keypad.c: 145: }
 21711  0019E2  0012               	return	
 21712  0019E4                     i2l1044:
 21713                           
 21714                           ;keypad.c: 146: else if (strcmp(current_set2,"BBSW")==0){
 21715  0019E4  0E70               	movlw	low _current_set2
 21716  0019E6  6E01               	movwf	strcmp@s1,c
 21717  0019E8  0E00               	movlw	high _current_set2
 21718  0019EA  6E02               	movwf	strcmp@s1+1,c
 21719  0019EC  0EBB               	movlw	low STR_93
 21720  0019EE  6E03               	movwf	strcmp@s2,c
 21721  0019F0  0EFF               	movlw	high STR_93
 21722  0019F2  6E04               	movwf	strcmp@s2+1,c
 21723  0019F4  EC51  F02F         	call	_strcmp	;wreg free
 21724  0019F8  5001               	movf	?_strcmp,w,c
 21725  0019FA  1002               	iorwf	?_strcmp+1,w,c
 21726  0019FC  A4D8               	btfss	status,2,c
 21727  0019FE  D06A               	goto	i2l1046
 21728                           
 21729                           ;keypad.c: 147: B = 2*number;
 21730  001A00  90D8               	bcf	status,0,c
 21731  001A02  3475               	rlcf	_number,w,c
 21732  001A04  6E58               	movwf	_B,c
 21733  001A06  3476               	rlcf	_number+1,w,c
 21734  001A08  6E59               	movwf	_B+1,c
 21735                           
 21736                           ;keypad.c: 148: S = 1*number;
 21737  001A0A  C075  F054         	movff	_number,_S
 21738  001A0E  C076  F055         	movff	_number+1,_S+1
 21739                           
 21740                           ;keypad.c: 149: W = number;
 21741  001A12  C075  F052         	movff	_number,_W
 21742  001A16  C076  F053         	movff	_number+1,_W+1
 21743                           
 21744                           ;keypad.c: 150: total_number = 4*number;
 21745  001A1A  C075  F007         	movff	_number,??_is_valid
 21746  001A1E  C076  F008         	movff	_number+1,??_is_valid+1
 21747  001A22  90D8               	bcf	status,0,c
 21748  001A24  3607               	rlcf	??_is_valid,f,c
 21749  001A26  3608               	rlcf	??_is_valid+1,f,c
 21750  001A28  90D8               	bcf	status,0,c
 21751  001A2A  3607               	rlcf	??_is_valid,f,c
 21752  001A2C  3608               	rlcf	??_is_valid+1,f,c
 21753  001A2E  C007  F18A         	movff	??_is_valid,_total_number
 21754  001A32  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21755                           
 21756                           ;keypad.c: 152: B_array[compartment_number[counter_step]] = B;
 21757  001A36  90D8               	bcf	status,0,c
 21758  001A38  345A               	rlcf	_counter_step,w,c
 21759  001A3A  6ED9               	movwf	fsr2l,c
 21760  001A3C  345B               	rlcf	_counter_step+1,w,c
 21761  001A3E  6EDA               	movwf	fsr2h,c
 21762  001A40  0E42               	movlw	low _compartment_number
 21763  001A42  26D9               	addwf	fsr2l,f,c
 21764  001A44  0E00               	movlw	high _compartment_number
 21765  001A46  22DA               	addwfc	fsr2h,f,c
 21766  001A48  CFDE F007          	movff	postinc2,??_is_valid
 21767  001A4C  CFDD F008          	movff	postdec2,??_is_valid+1
 21768  001A50  90D8               	bcf	status,0,c
 21769  001A52  3607               	rlcf	??_is_valid,f,c
 21770  001A54  3608               	rlcf	??_is_valid+1,f,c
 21771  001A56  0E30               	movlw	low _B_array
 21772  001A58  2407               	addwf	??_is_valid,w,c
 21773  001A5A  6ED9               	movwf	fsr2l,c
 21774  001A5C  0E01               	movlw	high _B_array
 21775  001A5E  2008               	addwfc	??_is_valid+1,w,c
 21776  001A60  6EDA               	movwf	fsr2h,c
 21777  001A62  C058  FFDE         	movff	_B,postinc2
 21778  001A66  C059  FFDD         	movff	_B+1,postdec2
 21779                           
 21780                           ;keypad.c: 153: S_array[compartment_number[counter_step]] = S;
 21781  001A6A  90D8               	bcf	status,0,c
 21782  001A6C  345A               	rlcf	_counter_step,w,c
 21783  001A6E  6ED9               	movwf	fsr2l,c
 21784  001A70  345B               	rlcf	_counter_step+1,w,c
 21785  001A72  6EDA               	movwf	fsr2h,c
 21786  001A74  0E42               	movlw	low _compartment_number
 21787  001A76  26D9               	addwf	fsr2l,f,c
 21788  001A78  0E00               	movlw	high _compartment_number
 21789  001A7A  22DA               	addwfc	fsr2h,f,c
 21790  001A7C  CFDE F007          	movff	postinc2,??_is_valid
 21791  001A80  CFDD F008          	movff	postdec2,??_is_valid+1
 21792  001A84  90D8               	bcf	status,0,c
 21793  001A86  3607               	rlcf	??_is_valid,f,c
 21794  001A88  3608               	rlcf	??_is_valid+1,f,c
 21795  001A8A  0E20               	movlw	low _S_array
 21796  001A8C  2407               	addwf	??_is_valid,w,c
 21797  001A8E  6ED9               	movwf	fsr2l,c
 21798  001A90  0E01               	movlw	high _S_array
 21799  001A92  2008               	addwfc	??_is_valid+1,w,c
 21800  001A94  6EDA               	movwf	fsr2h,c
 21801  001A96  C054  FFDE         	movff	_S,postinc2
 21802  001A9A  C055  FFDD         	movff	_S+1,postdec2
 21803                           
 21804                           ;keypad.c: 154: W_array[compartment_number[counter_step]] = W;
 21805  001A9E  90D8               	bcf	status,0,c
 21806  001AA0  345A               	rlcf	_counter_step,w,c
 21807  001AA2  6ED9               	movwf	fsr2l,c
 21808  001AA4  345B               	rlcf	_counter_step+1,w,c
 21809  001AA6  6EDA               	movwf	fsr2h,c
 21810  001AA8  0E42               	movlw	low _compartment_number
 21811  001AAA  26D9               	addwf	fsr2l,f,c
 21812  001AAC  0E00               	movlw	high _compartment_number
 21813  001AAE  22DA               	addwfc	fsr2h,f,c
 21814  001AB0  CFDE F007          	movff	postinc2,??_is_valid
 21815  001AB4  CFDD F008          	movff	postdec2,??_is_valid+1
 21816  001AB8  90D8               	bcf	status,0,c
 21817  001ABA  3607               	rlcf	??_is_valid,f,c
 21818  001ABC  3608               	rlcf	??_is_valid+1,f,c
 21819  001ABE  0E00               	movlw	low _W_array
 21820  001AC0  2407               	addwf	??_is_valid,w,c
 21821  001AC2  6ED9               	movwf	fsr2l,c
 21822  001AC4  0E01               	movlw	high _W_array
 21823  001AC6  2008               	addwfc	??_is_valid+1,w,c
 21824  001AC8  6EDA               	movwf	fsr2h,c
 21825  001ACA  C052  FFDE         	movff	_W,postinc2
 21826  001ACE  C053  FFDD         	movff	_W+1,postdec2
 21827                           
 21828                           ;keypad.c: 155: }
 21829  001AD2  0012               	return	
 21830  001AD4                     i2l1046:
 21831                           
 21832                           ;keypad.c: 156: else if (strcmp(current_set2,"BBNW")==0){
 21833  001AD4  0E70               	movlw	low _current_set2
 21834  001AD6  6E01               	movwf	strcmp@s1,c
 21835  001AD8  0E00               	movlw	high _current_set2
 21836  001ADA  6E02               	movwf	strcmp@s1+1,c
 21837  001ADC  0EB1               	movlw	low STR_94
 21838  001ADE  6E03               	movwf	strcmp@s2,c
 21839  001AE0  0EFF               	movlw	high STR_94
 21840  001AE2  6E04               	movwf	strcmp@s2+1,c
 21841  001AE4  EC51  F02F         	call	_strcmp	;wreg free
 21842  001AE8  5001               	movf	?_strcmp,w,c
 21843  001AEA  1002               	iorwf	?_strcmp+1,w,c
 21844  001AEC  A4D8               	btfss	status,2,c
 21845  001AEE  D06A               	goto	i2l1048
 21846                           
 21847                           ;keypad.c: 157: B = 2*number;
 21848  001AF0  90D8               	bcf	status,0,c
 21849  001AF2  3475               	rlcf	_number,w,c
 21850  001AF4  6E58               	movwf	_B,c
 21851  001AF6  3476               	rlcf	_number+1,w,c
 21852  001AF8  6E59               	movwf	_B+1,c
 21853                           
 21854                           ;keypad.c: 158: N = 1*number;
 21855  001AFA  C075  F056         	movff	_number,_N
 21856  001AFE  C076  F057         	movff	_number+1,_N+1
 21857                           
 21858                           ;keypad.c: 159: W = 1*number;
 21859  001B02  C075  F052         	movff	_number,_W
 21860  001B06  C076  F053         	movff	_number+1,_W+1
 21861                           
 21862                           ;keypad.c: 160: total_number = 4*number;
 21863  001B0A  C075  F007         	movff	_number,??_is_valid
 21864  001B0E  C076  F008         	movff	_number+1,??_is_valid+1
 21865  001B12  90D8               	bcf	status,0,c
 21866  001B14  3607               	rlcf	??_is_valid,f,c
 21867  001B16  3608               	rlcf	??_is_valid+1,f,c
 21868  001B18  90D8               	bcf	status,0,c
 21869  001B1A  3607               	rlcf	??_is_valid,f,c
 21870  001B1C  3608               	rlcf	??_is_valid+1,f,c
 21871  001B1E  C007  F18A         	movff	??_is_valid,_total_number
 21872  001B22  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21873                           
 21874                           ;keypad.c: 162: B_array[compartment_number[counter_step]] = B;
 21875  001B26  90D8               	bcf	status,0,c
 21876  001B28  345A               	rlcf	_counter_step,w,c
 21877  001B2A  6ED9               	movwf	fsr2l,c
 21878  001B2C  345B               	rlcf	_counter_step+1,w,c
 21879  001B2E  6EDA               	movwf	fsr2h,c
 21880  001B30  0E42               	movlw	low _compartment_number
 21881  001B32  26D9               	addwf	fsr2l,f,c
 21882  001B34  0E00               	movlw	high _compartment_number
 21883  001B36  22DA               	addwfc	fsr2h,f,c
 21884  001B38  CFDE F007          	movff	postinc2,??_is_valid
 21885  001B3C  CFDD F008          	movff	postdec2,??_is_valid+1
 21886  001B40  90D8               	bcf	status,0,c
 21887  001B42  3607               	rlcf	??_is_valid,f,c
 21888  001B44  3608               	rlcf	??_is_valid+1,f,c
 21889  001B46  0E30               	movlw	low _B_array
 21890  001B48  2407               	addwf	??_is_valid,w,c
 21891  001B4A  6ED9               	movwf	fsr2l,c
 21892  001B4C  0E01               	movlw	high _B_array
 21893  001B4E  2008               	addwfc	??_is_valid+1,w,c
 21894  001B50  6EDA               	movwf	fsr2h,c
 21895  001B52  C058  FFDE         	movff	_B,postinc2
 21896  001B56  C059  FFDD         	movff	_B+1,postdec2
 21897                           
 21898                           ;keypad.c: 163: N_array[compartment_number[counter_step]] = N;
 21899  001B5A  90D8               	bcf	status,0,c
 21900  001B5C  345A               	rlcf	_counter_step,w,c
 21901  001B5E  6ED9               	movwf	fsr2l,c
 21902  001B60  345B               	rlcf	_counter_step+1,w,c
 21903  001B62  6EDA               	movwf	fsr2h,c
 21904  001B64  0E42               	movlw	low _compartment_number
 21905  001B66  26D9               	addwf	fsr2l,f,c
 21906  001B68  0E00               	movlw	high _compartment_number
 21907  001B6A  22DA               	addwfc	fsr2h,f,c
 21908  001B6C  CFDE F007          	movff	postinc2,??_is_valid
 21909  001B70  CFDD F008          	movff	postdec2,??_is_valid+1
 21910  001B74  90D8               	bcf	status,0,c
 21911  001B76  3607               	rlcf	??_is_valid,f,c
 21912  001B78  3608               	rlcf	??_is_valid+1,f,c
 21913  001B7A  0E10               	movlw	low _N_array
 21914  001B7C  2407               	addwf	??_is_valid,w,c
 21915  001B7E  6ED9               	movwf	fsr2l,c
 21916  001B80  0E01               	movlw	high _N_array
 21917  001B82  2008               	addwfc	??_is_valid+1,w,c
 21918  001B84  6EDA               	movwf	fsr2h,c
 21919  001B86  C056  FFDE         	movff	_N,postinc2
 21920  001B8A  C057  FFDD         	movff	_N+1,postdec2
 21921                           
 21922                           ;keypad.c: 164: W_array[compartment_number[counter_step]] = W;
 21923  001B8E  90D8               	bcf	status,0,c
 21924  001B90  345A               	rlcf	_counter_step,w,c
 21925  001B92  6ED9               	movwf	fsr2l,c
 21926  001B94  345B               	rlcf	_counter_step+1,w,c
 21927  001B96  6EDA               	movwf	fsr2h,c
 21928  001B98  0E42               	movlw	low _compartment_number
 21929  001B9A  26D9               	addwf	fsr2l,f,c
 21930  001B9C  0E00               	movlw	high _compartment_number
 21931  001B9E  22DA               	addwfc	fsr2h,f,c
 21932  001BA0  CFDE F007          	movff	postinc2,??_is_valid
 21933  001BA4  CFDD F008          	movff	postdec2,??_is_valid+1
 21934  001BA8  90D8               	bcf	status,0,c
 21935  001BAA  3607               	rlcf	??_is_valid,f,c
 21936  001BAC  3608               	rlcf	??_is_valid+1,f,c
 21937  001BAE  0E00               	movlw	low _W_array
 21938  001BB0  2407               	addwf	??_is_valid,w,c
 21939  001BB2  6ED9               	movwf	fsr2l,c
 21940  001BB4  0E01               	movlw	high _W_array
 21941  001BB6  2008               	addwfc	??_is_valid+1,w,c
 21942  001BB8  6EDA               	movwf	fsr2h,c
 21943  001BBA  C052  FFDE         	movff	_W,postinc2
 21944  001BBE  C053  FFDD         	movff	_W+1,postdec2
 21945                           
 21946                           ;keypad.c: 165: }
 21947  001BC2  0012               	return	
 21948  001BC4                     i2l1048:
 21949                           
 21950                           ;keypad.c: 166: else if (strcmp(current_set2,"BNNW")==0){
 21951  001BC4  0E70               	movlw	low _current_set2
 21952  001BC6  6E01               	movwf	strcmp@s1,c
 21953  001BC8  0E00               	movlw	high _current_set2
 21954  001BCA  6E02               	movwf	strcmp@s1+1,c
 21955  001BCC  0EB6               	movlw	low STR_95
 21956  001BCE  6E03               	movwf	strcmp@s2,c
 21957  001BD0  0EFF               	movlw	high STR_95
 21958  001BD2  6E04               	movwf	strcmp@s2+1,c
 21959  001BD4  EC51  F02F         	call	_strcmp	;wreg free
 21960  001BD8  5001               	movf	?_strcmp,w,c
 21961  001BDA  1002               	iorwf	?_strcmp+1,w,c
 21962  001BDC  A4D8               	btfss	status,2,c
 21963  001BDE  D06A               	goto	i2l1050
 21964                           
 21965                           ;keypad.c: 167: B = 1*number;
 21966  001BE0  C075  F058         	movff	_number,_B
 21967  001BE4  C076  F059         	movff	_number+1,_B+1
 21968                           
 21969                           ;keypad.c: 168: N = 2*number;
 21970  001BE8  90D8               	bcf	status,0,c
 21971  001BEA  3475               	rlcf	_number,w,c
 21972  001BEC  6E56               	movwf	_N,c
 21973  001BEE  3476               	rlcf	_number+1,w,c
 21974  001BF0  6E57               	movwf	_N+1,c
 21975                           
 21976                           ;keypad.c: 169: W = 1*number;
 21977  001BF2  C075  F052         	movff	_number,_W
 21978  001BF6  C076  F053         	movff	_number+1,_W+1
 21979                           
 21980                           ;keypad.c: 170: total_number = 4*number;
 21981  001BFA  C075  F007         	movff	_number,??_is_valid
 21982  001BFE  C076  F008         	movff	_number+1,??_is_valid+1
 21983  001C02  90D8               	bcf	status,0,c
 21984  001C04  3607               	rlcf	??_is_valid,f,c
 21985  001C06  3608               	rlcf	??_is_valid+1,f,c
 21986  001C08  90D8               	bcf	status,0,c
 21987  001C0A  3607               	rlcf	??_is_valid,f,c
 21988  001C0C  3608               	rlcf	??_is_valid+1,f,c
 21989  001C0E  C007  F18A         	movff	??_is_valid,_total_number
 21990  001C12  C008  F18B         	movff	??_is_valid+1,_total_number+1
 21991                           
 21992                           ;keypad.c: 172: B_array[compartment_number[counter_step]] = B;
 21993  001C16  90D8               	bcf	status,0,c
 21994  001C18  345A               	rlcf	_counter_step,w,c
 21995  001C1A  6ED9               	movwf	fsr2l,c
 21996  001C1C  345B               	rlcf	_counter_step+1,w,c
 21997  001C1E  6EDA               	movwf	fsr2h,c
 21998  001C20  0E42               	movlw	low _compartment_number
 21999  001C22  26D9               	addwf	fsr2l,f,c
 22000  001C24  0E00               	movlw	high _compartment_number
 22001  001C26  22DA               	addwfc	fsr2h,f,c
 22002  001C28  CFDE F007          	movff	postinc2,??_is_valid
 22003  001C2C  CFDD F008          	movff	postdec2,??_is_valid+1
 22004  001C30  90D8               	bcf	status,0,c
 22005  001C32  3607               	rlcf	??_is_valid,f,c
 22006  001C34  3608               	rlcf	??_is_valid+1,f,c
 22007  001C36  0E30               	movlw	low _B_array
 22008  001C38  2407               	addwf	??_is_valid,w,c
 22009  001C3A  6ED9               	movwf	fsr2l,c
 22010  001C3C  0E01               	movlw	high _B_array
 22011  001C3E  2008               	addwfc	??_is_valid+1,w,c
 22012  001C40  6EDA               	movwf	fsr2h,c
 22013  001C42  C058  FFDE         	movff	_B,postinc2
 22014  001C46  C059  FFDD         	movff	_B+1,postdec2
 22015                           
 22016                           ;keypad.c: 173: N_array[compartment_number[counter_step]] = N;
 22017  001C4A  90D8               	bcf	status,0,c
 22018  001C4C  345A               	rlcf	_counter_step,w,c
 22019  001C4E  6ED9               	movwf	fsr2l,c
 22020  001C50  345B               	rlcf	_counter_step+1,w,c
 22021  001C52  6EDA               	movwf	fsr2h,c
 22022  001C54  0E42               	movlw	low _compartment_number
 22023  001C56  26D9               	addwf	fsr2l,f,c
 22024  001C58  0E00               	movlw	high _compartment_number
 22025  001C5A  22DA               	addwfc	fsr2h,f,c
 22026  001C5C  CFDE F007          	movff	postinc2,??_is_valid
 22027  001C60  CFDD F008          	movff	postdec2,??_is_valid+1
 22028  001C64  90D8               	bcf	status,0,c
 22029  001C66  3607               	rlcf	??_is_valid,f,c
 22030  001C68  3608               	rlcf	??_is_valid+1,f,c
 22031  001C6A  0E10               	movlw	low _N_array
 22032  001C6C  2407               	addwf	??_is_valid,w,c
 22033  001C6E  6ED9               	movwf	fsr2l,c
 22034  001C70  0E01               	movlw	high _N_array
 22035  001C72  2008               	addwfc	??_is_valid+1,w,c
 22036  001C74  6EDA               	movwf	fsr2h,c
 22037  001C76  C056  FFDE         	movff	_N,postinc2
 22038  001C7A  C057  FFDD         	movff	_N+1,postdec2
 22039                           
 22040                           ;keypad.c: 174: W_array[compartment_number[counter_step]] = W;
 22041  001C7E  90D8               	bcf	status,0,c
 22042  001C80  345A               	rlcf	_counter_step,w,c
 22043  001C82  6ED9               	movwf	fsr2l,c
 22044  001C84  345B               	rlcf	_counter_step+1,w,c
 22045  001C86  6EDA               	movwf	fsr2h,c
 22046  001C88  0E42               	movlw	low _compartment_number
 22047  001C8A  26D9               	addwf	fsr2l,f,c
 22048  001C8C  0E00               	movlw	high _compartment_number
 22049  001C8E  22DA               	addwfc	fsr2h,f,c
 22050  001C90  CFDE F007          	movff	postinc2,??_is_valid
 22051  001C94  CFDD F008          	movff	postdec2,??_is_valid+1
 22052  001C98  90D8               	bcf	status,0,c
 22053  001C9A  3607               	rlcf	??_is_valid,f,c
 22054  001C9C  3608               	rlcf	??_is_valid+1,f,c
 22055  001C9E  0E00               	movlw	low _W_array
 22056  001CA0  2407               	addwf	??_is_valid,w,c
 22057  001CA2  6ED9               	movwf	fsr2l,c
 22058  001CA4  0E01               	movlw	high _W_array
 22059  001CA6  2008               	addwfc	??_is_valid+1,w,c
 22060  001CA8  6EDA               	movwf	fsr2h,c
 22061  001CAA  C052  FFDE         	movff	_W,postinc2
 22062  001CAE  C053  FFDD         	movff	_W+1,postdec2
 22063                           
 22064                           ;keypad.c: 175: }
 22065  001CB2  0012               	return	
 22066  001CB4                     i2l1050:
 22067                           
 22068                           ;keypad.c: 176: else if (strcmp(current_set2,"BNNN")==0){
 22069  001CB4  0E70               	movlw	low _current_set2
 22070  001CB6  6E01               	movwf	strcmp@s1,c
 22071  001CB8  0E00               	movlw	high _current_set2
 22072  001CBA  6E02               	movwf	strcmp@s1+1,c
 22073  001CBC  0EAC               	movlw	low STR_96
 22074  001CBE  6E03               	movwf	strcmp@s2,c
 22075  001CC0  0EFF               	movlw	high STR_96
 22076  001CC2  6E04               	movwf	strcmp@s2+1,c
 22077  001CC4  EC51  F02F         	call	_strcmp	;wreg free
 22078  001CC8  5001               	movf	?_strcmp,w,c
 22079  001CCA  1002               	iorwf	?_strcmp+1,w,c
 22080  001CCC  A4D8               	btfss	status,2,c
 22081  001CCE  D055               	goto	i2l1052
 22082                           
 22083                           ;keypad.c: 177: B = 1*number;
 22084  001CD0  C075  F058         	movff	_number,_B
 22085  001CD4  C076  F059         	movff	_number+1,_B+1
 22086                           
 22087                           ;keypad.c: 178: N = 3*number;
 22088  001CD8  C075  F001         	movff	_number,i2___wmul@multiplier
 22089  001CDC  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 22090  001CE0  0E00               	movlw	0
 22091  001CE2  6E04               	movwf	i2___wmul@multiplicand+1,c
 22092  001CE4  0E03               	movlw	3
 22093  001CE6  6E03               	movwf	i2___wmul@multiplicand,c
 22094  001CE8  EC9A  F030         	call	i2___wmul	;wreg free
 22095  001CEC  C001  F056         	movff	?i2___wmul,_N
 22096  001CF0  C002  F057         	movff	?i2___wmul+1,_N+1
 22097                           
 22098                           ;keypad.c: 179: total_number = 4*number;
 22099  001CF4  C075  F007         	movff	_number,??_is_valid
 22100  001CF8  C076  F008         	movff	_number+1,??_is_valid+1
 22101  001CFC  90D8               	bcf	status,0,c
 22102  001CFE  3607               	rlcf	??_is_valid,f,c
 22103  001D00  3608               	rlcf	??_is_valid+1,f,c
 22104  001D02  90D8               	bcf	status,0,c
 22105  001D04  3607               	rlcf	??_is_valid,f,c
 22106  001D06  3608               	rlcf	??_is_valid+1,f,c
 22107  001D08  C007  F18A         	movff	??_is_valid,_total_number
 22108  001D0C  C008  F18B         	movff	??_is_valid+1,_total_number+1
 22109                           
 22110                           ;keypad.c: 181: B_array[compartment_number[counter_step]] = B;
 22111  001D10  90D8               	bcf	status,0,c
 22112  001D12  345A               	rlcf	_counter_step,w,c
 22113  001D14  6ED9               	movwf	fsr2l,c
 22114  001D16  345B               	rlcf	_counter_step+1,w,c
 22115  001D18  6EDA               	movwf	fsr2h,c
 22116  001D1A  0E42               	movlw	low _compartment_number
 22117  001D1C  26D9               	addwf	fsr2l,f,c
 22118  001D1E  0E00               	movlw	high _compartment_number
 22119  001D20  22DA               	addwfc	fsr2h,f,c
 22120  001D22  CFDE F007          	movff	postinc2,??_is_valid
 22121  001D26  CFDD F008          	movff	postdec2,??_is_valid+1
 22122  001D2A  90D8               	bcf	status,0,c
 22123  001D2C  3607               	rlcf	??_is_valid,f,c
 22124  001D2E  3608               	rlcf	??_is_valid+1,f,c
 22125  001D30  0E30               	movlw	low _B_array
 22126  001D32  2407               	addwf	??_is_valid,w,c
 22127  001D34  6ED9               	movwf	fsr2l,c
 22128  001D36  0E01               	movlw	high _B_array
 22129  001D38  2008               	addwfc	??_is_valid+1,w,c
 22130  001D3A  6EDA               	movwf	fsr2h,c
 22131  001D3C  C058  FFDE         	movff	_B,postinc2
 22132  001D40  C059  FFDD         	movff	_B+1,postdec2
 22133                           
 22134                           ;keypad.c: 182: N_array[compartment_number[counter_step]] = N;
 22135  001D44  90D8               	bcf	status,0,c
 22136  001D46  345A               	rlcf	_counter_step,w,c
 22137  001D48  6ED9               	movwf	fsr2l,c
 22138  001D4A  345B               	rlcf	_counter_step+1,w,c
 22139  001D4C  6EDA               	movwf	fsr2h,c
 22140  001D4E  0E42               	movlw	low _compartment_number
 22141  001D50  26D9               	addwf	fsr2l,f,c
 22142  001D52  0E00               	movlw	high _compartment_number
 22143  001D54  22DA               	addwfc	fsr2h,f,c
 22144  001D56  CFDE F007          	movff	postinc2,??_is_valid
 22145  001D5A  CFDD F008          	movff	postdec2,??_is_valid+1
 22146  001D5E  90D8               	bcf	status,0,c
 22147  001D60  3607               	rlcf	??_is_valid,f,c
 22148  001D62  3608               	rlcf	??_is_valid+1,f,c
 22149  001D64  0E10               	movlw	low _N_array
 22150  001D66  2407               	addwf	??_is_valid,w,c
 22151  001D68  6ED9               	movwf	fsr2l,c
 22152  001D6A  0E01               	movlw	high _N_array
 22153  001D6C  2008               	addwfc	??_is_valid+1,w,c
 22154  001D6E  6EDA               	movwf	fsr2h,c
 22155  001D70  C056  FFDE         	movff	_N,postinc2
 22156  001D74  C057  FFDD         	movff	_N+1,postdec2
 22157                           
 22158                           ;keypad.c: 184: }
 22159  001D78  0012               	return	
 22160  001D7A                     i2l1052:
 22161                           
 22162                           ;keypad.c: 185: else if (strcmp(current_set2,"BWWW")==0){
 22163  001D7A  0E70               	movlw	low _current_set2
 22164  001D7C  6E01               	movwf	strcmp@s1,c
 22165  001D7E  0E00               	movlw	high _current_set2
 22166  001D80  6E02               	movwf	strcmp@s1+1,c
 22167  001D82  0ECA               	movlw	low STR_97
 22168  001D84  6E03               	movwf	strcmp@s2,c
 22169  001D86  0EFF               	movlw	high STR_97
 22170  001D88  6E04               	movwf	strcmp@s2+1,c
 22171  001D8A  EC51  F02F         	call	_strcmp	;wreg free
 22172  001D8E  5001               	movf	?_strcmp,w,c
 22173  001D90  1002               	iorwf	?_strcmp+1,w,c
 22174  001D92  A4D8               	btfss	status,2,c
 22175  001D94  0012               	return	
 22176                           
 22177                           ;keypad.c: 186: B = 1*number;
 22178  001D96  C075  F058         	movff	_number,_B
 22179  001D9A  C076  F059         	movff	_number+1,_B+1
 22180                           
 22181                           ;keypad.c: 187: W = 3*number;
 22182  001D9E  C075  F001         	movff	_number,i2___wmul@multiplier
 22183  001DA2  C076  F002         	movff	_number+1,i2___wmul@multiplier+1
 22184  001DA6  0E00               	movlw	0
 22185  001DA8  6E04               	movwf	i2___wmul@multiplicand+1,c
 22186  001DAA  0E03               	movlw	3
 22187  001DAC  6E03               	movwf	i2___wmul@multiplicand,c
 22188  001DAE  EC9A  F030         	call	i2___wmul	;wreg free
 22189  001DB2  C001  F052         	movff	?i2___wmul,_W
 22190  001DB6  C002  F053         	movff	?i2___wmul+1,_W+1
 22191                           
 22192                           ;keypad.c: 188: total_number = 4*number;
 22193  001DBA  C075  F007         	movff	_number,??_is_valid
 22194  001DBE  C076  F008         	movff	_number+1,??_is_valid+1
 22195  001DC2  90D8               	bcf	status,0,c
 22196  001DC4  3607               	rlcf	??_is_valid,f,c
 22197  001DC6  3608               	rlcf	??_is_valid+1,f,c
 22198  001DC8  90D8               	bcf	status,0,c
 22199  001DCA  3607               	rlcf	??_is_valid,f,c
 22200  001DCC  3608               	rlcf	??_is_valid+1,f,c
 22201  001DCE  C007  F18A         	movff	??_is_valid,_total_number
 22202  001DD2  C008  F18B         	movff	??_is_valid+1,_total_number+1
 22203                           
 22204                           ;keypad.c: 190: B_array[compartment_number[counter_step]] = B;
 22205  001DD6  90D8               	bcf	status,0,c
 22206  001DD8  345A               	rlcf	_counter_step,w,c
 22207  001DDA  6ED9               	movwf	fsr2l,c
 22208  001DDC  345B               	rlcf	_counter_step+1,w,c
 22209  001DDE  6EDA               	movwf	fsr2h,c
 22210  001DE0  0E42               	movlw	low _compartment_number
 22211  001DE2  26D9               	addwf	fsr2l,f,c
 22212  001DE4  0E00               	movlw	high _compartment_number
 22213  001DE6  22DA               	addwfc	fsr2h,f,c
 22214  001DE8  CFDE F007          	movff	postinc2,??_is_valid
 22215  001DEC  CFDD F008          	movff	postdec2,??_is_valid+1
 22216  001DF0  90D8               	bcf	status,0,c
 22217  001DF2  3607               	rlcf	??_is_valid,f,c
 22218  001DF4  3608               	rlcf	??_is_valid+1,f,c
 22219  001DF6  0E30               	movlw	low _B_array
 22220  001DF8  2407               	addwf	??_is_valid,w,c
 22221  001DFA  6ED9               	movwf	fsr2l,c
 22222  001DFC  0E01               	movlw	high _B_array
 22223  001DFE  2008               	addwfc	??_is_valid+1,w,c
 22224  001E00  6EDA               	movwf	fsr2h,c
 22225  001E02  C058  FFDE         	movff	_B,postinc2
 22226  001E06  C059  FFDD         	movff	_B+1,postdec2
 22227                           
 22228                           ;keypad.c: 192: W_array[compartment_number[counter_step]] = W;
 22229  001E0A  90D8               	bcf	status,0,c
 22230  001E0C  345A               	rlcf	_counter_step,w,c
 22231  001E0E  6ED9               	movwf	fsr2l,c
 22232  001E10  345B               	rlcf	_counter_step+1,w,c
 22233  001E12  6EDA               	movwf	fsr2h,c
 22234  001E14  0E42               	movlw	low _compartment_number
 22235  001E16  26D9               	addwf	fsr2l,f,c
 22236  001E18  0E00               	movlw	high _compartment_number
 22237  001E1A  22DA               	addwfc	fsr2h,f,c
 22238  001E1C  CFDE F007          	movff	postinc2,??_is_valid
 22239  001E20  CFDD F008          	movff	postdec2,??_is_valid+1
 22240  001E24  90D8               	bcf	status,0,c
 22241  001E26  3607               	rlcf	??_is_valid,f,c
 22242  001E28  3608               	rlcf	??_is_valid+1,f,c
 22243  001E2A  0E00               	movlw	low _W_array
 22244  001E2C  2407               	addwf	??_is_valid,w,c
 22245  001E2E  6ED9               	movwf	fsr2l,c
 22246  001E30  0E01               	movlw	high _W_array
 22247  001E32  2008               	addwfc	??_is_valid+1,w,c
 22248  001E34  6EDA               	movwf	fsr2h,c
 22249  001E36  C052  FFDE         	movff	_W,postinc2
 22250  001E3A  C053  FFDD         	movff	_W+1,postdec2
 22251  001E3E  0012               	return	
 22252  001E40                     __end_of_is_valid:
 22253                           	opt stack 0
 22254                           pclatu	equ	0xFFB
 22255                           pclath	equ	0xFFA
 22256                           tblptru	equ	0xFF8
 22257                           tblptrh	equ	0xFF7
 22258                           tblptrl	equ	0xFF6
 22259                           tablat	equ	0xFF5
 22260                           prodh	equ	0xFF4
 22261                           prodl	equ	0xFF3
 22262                           intcon	equ	0xFF2
 22263                           intcon3	equ	0xFF0
 22264                           indf0	equ	0xFEF
 22265                           postinc0	equ	0xFEE
 22266                           fsr0h	equ	0xFEA
 22267                           fsr0l	equ	0xFE9
 22268                           wreg	equ	0xFE8
 22269                           indf1	equ	0xFE7
 22270                           postdec1	equ	0xFE5
 22271                           fsr1h	equ	0xFE2
 22272                           fsr1l	equ	0xFE1
 22273                           indf2	equ	0xFDF
 22274                           postinc2	equ	0xFDE
 22275                           postdec2	equ	0xFDD
 22276                           fsr2h	equ	0xFDA
 22277                           fsr2l	equ	0xFD9
 22278                           status	equ	0xFD8
 22279                           
 22280 ;; *************** function i2___wmul *****************
 22281 ;; Defined at:
 22282 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 22283 ;; Parameters:    Size  Location     Type
 22284 ;;  multiplier      2    0[COMRAM] unsigned int 
 22285 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22286 ;; Auto vars:     Size  Location     Type
 22287 ;;  __wmul          2    4[COMRAM] unsigned int 
 22288 ;; Return value:  Size  Location     Type
 22289 ;;                  2    0[COMRAM] unsigned int 
 22290 ;; Registers used:
 22291 ;;		wreg, status,2, status,0, prodl, prodh
 22292 ;; Tracked objects:
 22293 ;;		On entry : 0/0
 22294 ;;		On exit  : 0/0
 22295 ;;		Unchanged: 0/0
 22296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22300 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;Total ram usage:        6 bytes
 22302 ;; Hardware stack levels used:    1
 22303 ;; This function calls:
 22304 ;;		Nothing
 22305 ;; This function is called by:
 22306 ;;		_interruptHandler
 22307 ;;		_is_valid
 22308 ;;		i2_printf
 22309 ;; This function uses a non-reentrant model
 22310 ;;
 22311                           
 22312                           	psect	text65
 22313  006134                     __ptext65:
 22314                           	opt stack 0
 22315  006134                     i2___wmul:
 22316                           	opt stack 22
 22317                           
 22318                           ;incstack = 0
 22319  006134  5001               	movf	i2___wmul@multiplier,w,c
 22320  006136  0203               	mulwf	i2___wmul@multiplicand,c
 22321  006138  CFF3 F005          	movff	prodl,i2___wmul@product
 22322  00613C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22323  006140  5001               	movf	i2___wmul@multiplier,w,c
 22324  006142  0204               	mulwf	i2___wmul@multiplicand+1,c
 22325  006144  50F3               	movf	prodl,w,c
 22326  006146  2606               	addwf	i2___wmul@product+1,f,c
 22327  006148  5002               	movf	i2___wmul@multiplier+1,w,c
 22328  00614A  0203               	mulwf	i2___wmul@multiplicand,c
 22329  00614C  50F3               	movf	prodl,w,c
 22330  00614E  2606               	addwf	i2___wmul@product+1,f,c
 22331  006150  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22332  006154  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22333  006158  0012               	return	
 22334  00615A                     __end_ofi2___wmul:
 22335                           	opt stack 0
 22336                           pclatu	equ	0xFFB
 22337                           pclath	equ	0xFFA
 22338                           tblptru	equ	0xFF8
 22339                           tblptrh	equ	0xFF7
 22340                           tblptrl	equ	0xFF6
 22341                           tablat	equ	0xFF5
 22342                           prodh	equ	0xFF4
 22343                           prodl	equ	0xFF3
 22344                           intcon	equ	0xFF2
 22345                           intcon3	equ	0xFF0
 22346                           indf0	equ	0xFEF
 22347                           postinc0	equ	0xFEE
 22348                           fsr0h	equ	0xFEA
 22349                           fsr0l	equ	0xFE9
 22350                           wreg	equ	0xFE8
 22351                           indf1	equ	0xFE7
 22352                           postdec1	equ	0xFE5
 22353                           fsr1h	equ	0xFE2
 22354                           fsr1l	equ	0xFE1
 22355                           indf2	equ	0xFDF
 22356                           postinc2	equ	0xFDE
 22357                           postdec2	equ	0xFDD
 22358                           fsr2h	equ	0xFDA
 22359                           fsr2l	equ	0xFD9
 22360                           status	equ	0xFD8
 22361                           
 22362 ;; *************** function _strcmp *****************
 22363 ;; Defined at:
 22364 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/strcmp.c"
 22365 ;; Parameters:    Size  Location     Type
 22366 ;;  s1              2    0[COMRAM] PTR const unsigned char 
 22367 ;;		 -> current_set2(5), 
 22368 ;;  s2              2    2[COMRAM] PTR const unsigned char 
 22369 ;;		 -> STR_97(5), STR_96(5), STR_95(5), STR_94(5), 
 22370 ;;		 -> STR_93(5), STR_92(5), STR_91(5), STR_90(4), 
 22371 ;;		 -> STR_89(4), STR_88(4), STR_87(4), STR_86(4), 
 22372 ;;		 -> STR_85(4), STR_84(3), STR_83(3), STR_82(3), 
 22373 ;;		 -> STR_81(2), STR_80(2), STR_79(2), STR_78(2), 
 22374 ;; Auto vars:     Size  Location     Type
 22375 ;;  r               1    5[COMRAM] char 
 22376 ;; Return value:  Size  Location     Type
 22377 ;;                  2    0[COMRAM] int 
 22378 ;; Registers used:
 22379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22380 ;; Tracked objects:
 22381 ;;		On entry : 0/0
 22382 ;;		On exit  : 0/0
 22383 ;;		Unchanged: 0/0
 22384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22385 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22387 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22388 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22389 ;;Total ram usage:        6 bytes
 22390 ;; Hardware stack levels used:    1
 22391 ;; This function calls:
 22392 ;;		Nothing
 22393 ;; This function is called by:
 22394 ;;		_is_valid
 22395 ;; This function uses a non-reentrant model
 22396 ;;
 22397                           
 22398                           	psect	text66
 22399  005EA2                     __ptext66:
 22400                           	opt stack 0
 22401  005EA2                     _strcmp:
 22402                           	opt stack 22
 22403                           
 22404                           ;incstack = 0
 22405  005EA2  D004               	goto	i2l2020
 22406  005EA4  4A01               	infsnz	strcmp@s1,f,c
 22407  005EA6  2A02               	incf	strcmp@s1+1,f,c
 22408  005EA8  4A03               	infsnz	strcmp@s2,f,c
 22409  005EAA  2A04               	incf	strcmp@s2+1,f,c
 22410  005EAC                     i2l2020:
 22411  005EAC  C001  FFD9         	movff	strcmp@s1,fsr2l
 22412  005EB0  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22413  005EB4  50DF               	movf	indf2,w,c
 22414  005EB6  6E05               	movwf	??_strcmp& (0+255),c
 22415  005EB8  C003  FFF6         	movff	strcmp@s2,tblptrl
 22416  005EBC  C004  FFF7         	movff	strcmp@s2+1,tblptrh
 22417  005EC0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22418  005EC0  6AF8               	clrf	tblptru,c
 22419  005EC2                     	endif
 22420  005EC2                     	if	0	;tblptru may be non-zero
 22421  005EC2                     	endif
 22422  005EC2  0008               	tblrd		*
 22423  005EC4  50F5               	movf	tablat,w,c
 22424  005EC6  0800               	sublw	0
 22425  005EC8  2405               	addwf	??_strcmp,w,c
 22426  005ECA  6E06               	movwf	strcmp@r,c
 22427  005ECC  5006               	movf	strcmp@r,w,c
 22428  005ECE  A4D8               	btfss	status,2,c
 22429  005ED0  D007               	goto	i2u402_40
 22430  005ED2  C001  FFD9         	movff	strcmp@s1,fsr2l
 22431  005ED6  C002  FFDA         	movff	strcmp@s1+1,fsr2h
 22432  005EDA  50DF               	movf	indf2,w,c
 22433  005EDC  A4D8               	btfss	status,2,c
 22434  005EDE  D7E2               	goto	i2l2021
 22435  005EE0                     i2u402_40:
 22436  005EE0  5006               	movf	strcmp@r,w,c
 22437  005EE2  6E01               	movwf	?_strcmp,c
 22438  005EE4  6A02               	clrf	?_strcmp+1,c
 22439  005EE6  BE01               	btfsc	?_strcmp,7,c
 22440  005EE8  0602               	decf	?_strcmp+1,f,c
 22441  005EEA  0012               	return	
 22442  005EEC                     __end_of_strcmp:
 22443                           	opt stack 0
 22444                           pclatu	equ	0xFFB
 22445                           pclath	equ	0xFFA
 22446                           tblptru	equ	0xFF8
 22447                           tblptrh	equ	0xFF7
 22448                           tblptrl	equ	0xFF6
 22449                           tablat	equ	0xFF5
 22450                           prodh	equ	0xFF4
 22451                           prodl	equ	0xFF3
 22452                           intcon	equ	0xFF2
 22453                           intcon3	equ	0xFF0
 22454                           indf0	equ	0xFEF
 22455                           postinc0	equ	0xFEE
 22456                           fsr0h	equ	0xFEA
 22457                           fsr0l	equ	0xFE9
 22458                           wreg	equ	0xFE8
 22459                           indf1	equ	0xFE7
 22460                           postdec1	equ	0xFE5
 22461                           fsr1h	equ	0xFE2
 22462                           fsr1l	equ	0xFE1
 22463                           indf2	equ	0xFDF
 22464                           postinc2	equ	0xFDE
 22465                           postdec2	equ	0xFDD
 22466                           fsr2h	equ	0xFDA
 22467                           fsr2l	equ	0xFD9
 22468                           status	equ	0xFD8
 22469                           
 22470 ;; *************** function _check *****************
 22471 ;; Defined at:
 22472 ;;		line 208 in file "keypad.c"
 22473 ;; Parameters:    Size  Location     Type
 22474 ;;		None
 22475 ;; Auto vars:     Size  Location     Type
 22476 ;;		None
 22477 ;; Return value:  Size  Location     Type
 22478 ;;                  2    0[COMRAM] int 
 22479 ;; Registers used:
 22480 ;;		wreg, status,2, status,0
 22481 ;; Tracked objects:
 22482 ;;		On entry : 0/0
 22483 ;;		On exit  : 0/0
 22484 ;;		Unchanged: 0/0
 22485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22489 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22490 ;;Total ram usage:        2 bytes
 22491 ;; Hardware stack levels used:    1
 22492 ;; This function calls:
 22493 ;;		Nothing
 22494 ;; This function is called by:
 22495 ;;		_interruptHandler
 22496 ;; This function uses a non-reentrant model
 22497 ;;
 22498                           
 22499                           	psect	text67
 22500  005BE6                     __ptext67:
 22501                           	opt stack 0
 22502  005BE6                     _check:
 22503                           	opt stack 23
 22504                           
 22505                           ;keypad.c: 209: if (B>2||N>3||S>2||W>4||total_number >4){
 22506                           
 22507                           ;incstack = 0
 22508  005BE6  BE59               	btfsc	_B+1,7,c
 22509  005BE8  D006               	goto	i2u470_40
 22510  005BEA  5059               	movf	_B+1,w,c
 22511  005BEC  E125               	bnz	i2l6917
 22512  005BEE  0E03               	movlw	3
 22513  005BF0  5C58               	subwf	_B,w,c
 22514  005BF2  B0D8               	btfsc	status,0,c
 22515  005BF4  D021               	goto	i2u474_40
 22516  005BF6                     i2u470_40:
 22517  005BF6  BE57               	btfsc	_N+1,7,c
 22518  005BF8  D006               	goto	i2u471_40
 22519  005BFA  5057               	movf	_N+1,w,c
 22520  005BFC  E11D               	bnz	i2l6917
 22521  005BFE  0E04               	movlw	4
 22522  005C00  5C56               	subwf	_N,w,c
 22523  005C02  B0D8               	btfsc	status,0,c
 22524  005C04  D019               	goto	i2u474_40
 22525  005C06                     i2u471_40:
 22526  005C06  BE55               	btfsc	_S+1,7,c
 22527  005C08  D006               	goto	i2u472_40
 22528  005C0A  5055               	movf	_S+1,w,c
 22529  005C0C  E115               	bnz	i2l6917
 22530  005C0E  0E03               	movlw	3
 22531  005C10  5C54               	subwf	_S,w,c
 22532  005C12  B0D8               	btfsc	status,0,c
 22533  005C14  D011               	goto	i2u474_40
 22534  005C16                     i2u472_40:
 22535  005C16  BE53               	btfsc	_W+1,7,c
 22536  005C18  D006               	goto	i2u473_40
 22537  005C1A  5053               	movf	_W+1,w,c
 22538  005C1C  E10D               	bnz	i2l6917
 22539  005C1E  0E05               	movlw	5
 22540  005C20  5C52               	subwf	_W,w,c
 22541  005C22  B0D8               	btfsc	status,0,c
 22542  005C24  D009               	goto	i2u474_40
 22543  005C26                     i2u473_40:
 22544  005C26  0101               	movlb	1	; () banked
 22545  005C28  BF8B               	btfsc	(_total_number+1)& (0+255),7,b
 22546  005C2A  D00B               	goto	i2l1058
 22547  005C2C  518B               	movf	(_total_number+1)& (0+255),w,b
 22548  005C2E  E104               	bnz	i2l6917
 22549  005C30  0E05               	movlw	5
 22550  005C32  5D8A               	subwf	_total_number& (0+255),w,b
 22551  005C34  A0D8               	btfss	status,0,c
 22552  005C36  D005               	goto	i2l1058
 22553  005C38                     i2u474_40:
 22554  005C38                     i2l6917:
 22555                           
 22556                           ;keypad.c: 213: return 0;
 22557  005C38  0E00               	movlw	0
 22558  005C3A  6E02               	movwf	?_check+1,c
 22559  005C3C  0E00               	movlw	0
 22560  005C3E  6E01               	movwf	?_check,c
 22561  005C40  0012               	return	
 22562  005C42                     i2l1058:
 22563                           
 22564                           ;keypad.c: 214: }
 22565                           ;keypad.c: 215: return 1;
 22566  005C42  0E00               	movlw	0
 22567  005C44  6E02               	movwf	?_check+1,c
 22568  005C46  0E01               	movlw	1
 22569  005C48  6E01               	movwf	?_check,c
 22570  005C4A  0012               	return	
 22571  005C4C                     __end_of_check:
 22572                           	opt stack 0
 22573                           pclatu	equ	0xFFB
 22574                           pclath	equ	0xFFA
 22575                           tblptru	equ	0xFF8
 22576                           tblptrh	equ	0xFF7
 22577                           tblptrl	equ	0xFF6
 22578                           tablat	equ	0xFF5
 22579                           prodh	equ	0xFF4
 22580                           prodl	equ	0xFF3
 22581                           intcon	equ	0xFF2
 22582                           intcon3	equ	0xFF0
 22583                           indf0	equ	0xFEF
 22584                           postinc0	equ	0xFEE
 22585                           fsr0h	equ	0xFEA
 22586                           fsr0l	equ	0xFE9
 22587                           wreg	equ	0xFE8
 22588                           indf1	equ	0xFE7
 22589                           postdec1	equ	0xFE5
 22590                           fsr1h	equ	0xFE2
 22591                           fsr1l	equ	0xFE1
 22592                           indf2	equ	0xFDF
 22593                           postinc2	equ	0xFDE
 22594                           postdec2	equ	0xFDD
 22595                           fsr2h	equ	0xFDA
 22596                           fsr2l	equ	0xFD9
 22597                           status	equ	0xFD8
 22598                           
 22599 ;; *************** function ___awmod *****************
 22600 ;; Defined at:
 22601 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
 22602 ;; Parameters:    Size  Location     Type
 22603 ;;  dividend        2    0[COMRAM] int 
 22604 ;;  divisor         2    2[COMRAM] int 
 22605 ;; Auto vars:     Size  Location     Type
 22606 ;;  sign            1    5[COMRAM] unsigned char 
 22607 ;;  counter         1    4[COMRAM] unsigned char 
 22608 ;; Return value:  Size  Location     Type
 22609 ;;                  2    0[COMRAM] int 
 22610 ;; Registers used:
 22611 ;;		wreg, status,2, status,0
 22612 ;; Tracked objects:
 22613 ;;		On entry : 0/0
 22614 ;;		On exit  : 0/0
 22615 ;;		Unchanged: 0/0
 22616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22618 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22620 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22621 ;;Total ram usage:        6 bytes
 22622 ;; Hardware stack levels used:    1
 22623 ;; This function calls:
 22624 ;;		Nothing
 22625 ;; This function is called by:
 22626 ;;		_interruptHandler
 22627 ;; This function uses a non-reentrant model
 22628 ;;
 22629                           
 22630                           	psect	text68
 22631  005B76                     __ptext68:
 22632                           	opt stack 0
 22633  005B76                     ___awmod:
 22634                           	opt stack 23
 22635                           
 22636                           ;incstack = 0
 22637  005B76  0E00               	movlw	0
 22638  005B78  6E06               	movwf	___awmod@sign,c
 22639  005B7A  AE02               	btfss	___awmod@dividend+1,7,c
 22640  005B7C  D006               	goto	i2l1639
 22641  005B7E  6C01               	negf	___awmod@dividend,c
 22642  005B80  1E02               	comf	___awmod@dividend+1,f,c
 22643  005B82  B0D8               	btfsc	status,0,c
 22644  005B84  2A02               	incf	___awmod@dividend+1,f,c
 22645  005B86  0E01               	movlw	1
 22646  005B88  6E06               	movwf	___awmod@sign,c
 22647  005B8A                     i2l1639:
 22648  005B8A  AE04               	btfss	___awmod@divisor+1,7,c
 22649  005B8C  D004               	goto	i2l1640
 22650  005B8E  6C03               	negf	___awmod@divisor,c
 22651  005B90  1E04               	comf	___awmod@divisor+1,f,c
 22652  005B92  B0D8               	btfsc	status,0,c
 22653  005B94  2A04               	incf	___awmod@divisor+1,f,c
 22654  005B96                     i2l1640:
 22655  005B96  5003               	movf	___awmod@divisor,w,c
 22656  005B98  1004               	iorwf	___awmod@divisor+1,w,c
 22657  005B9A  B4D8               	btfsc	status,2,c
 22658  005B9C  D018               	goto	i2l1647
 22659  005B9E  0E01               	movlw	1
 22660  005BA0  6E05               	movwf	___awmod@counter,c
 22661  005BA2  D004               	goto	i2l1642
 22662  005BA4  90D8               	bcf	status,0,c
 22663  005BA6  3603               	rlcf	___awmod@divisor,f,c
 22664  005BA8  3604               	rlcf	___awmod@divisor+1,f,c
 22665  005BAA  2A05               	incf	___awmod@counter,f,c
 22666  005BAC                     i2l1642:
 22667  005BAC  AE04               	btfss	___awmod@divisor+1,7,c
 22668  005BAE  D7FA               	goto	i2l1643
 22669  005BB0                     i2u485_40:
 22670  005BB0  5003               	movf	___awmod@divisor,w,c
 22671  005BB2  5C01               	subwf	___awmod@dividend,w,c
 22672  005BB4  5004               	movf	___awmod@divisor+1,w,c
 22673  005BB6  5802               	subwfb	___awmod@dividend+1,w,c
 22674  005BB8  A0D8               	btfss	status,0,c
 22675  005BBA  D004               	goto	i2l1646
 22676  005BBC  5003               	movf	___awmod@divisor,w,c
 22677  005BBE  5E01               	subwf	___awmod@dividend,f,c
 22678  005BC0  5004               	movf	___awmod@divisor+1,w,c
 22679  005BC2  5A02               	subwfb	___awmod@dividend+1,f,c
 22680  005BC4                     i2l1646:
 22681  005BC4  90D8               	bcf	status,0,c
 22682  005BC6  3204               	rrcf	___awmod@divisor+1,f,c
 22683  005BC8  3203               	rrcf	___awmod@divisor,f,c
 22684  005BCA  2E05               	decfsz	___awmod@counter,f,c
 22685  005BCC  D7F1               	goto	i2u485_40
 22686  005BCE                     i2l1647:
 22687  005BCE  5006               	movf	___awmod@sign,w,c
 22688  005BD0  B4D8               	btfsc	status,2,c
 22689  005BD2  D004               	goto	i2l1648
 22690  005BD4  6C01               	negf	___awmod@dividend,c
 22691  005BD6  1E02               	comf	___awmod@dividend+1,f,c
 22692  005BD8  B0D8               	btfsc	status,0,c
 22693  005BDA  2A02               	incf	___awmod@dividend+1,f,c
 22694  005BDC                     i2l1648:
 22695  005BDC  C001  F001         	movff	___awmod@dividend,?___awmod
 22696  005BE0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 22697  005BE4  0012               	return	
 22698  005BE6                     __end_of___awmod:
 22699                           	opt stack 0
 22700                           pclatu	equ	0xFFB
 22701                           pclath	equ	0xFFA
 22702                           tblptru	equ	0xFF8
 22703                           tblptrh	equ	0xFF7
 22704                           tblptrl	equ	0xFF6
 22705                           tablat	equ	0xFF5
 22706                           prodh	equ	0xFF4
 22707                           prodl	equ	0xFF3
 22708                           intcon	equ	0xFF2
 22709                           intcon3	equ	0xFF0
 22710                           indf0	equ	0xFEF
 22711                           postinc0	equ	0xFEE
 22712                           fsr0h	equ	0xFEA
 22713                           fsr0l	equ	0xFE9
 22714                           wreg	equ	0xFE8
 22715                           indf1	equ	0xFE7
 22716                           postdec1	equ	0xFE5
 22717                           fsr1h	equ	0xFE2
 22718                           fsr1l	equ	0xFE1
 22719                           indf2	equ	0xFDF
 22720                           postinc2	equ	0xFDE
 22721                           postdec2	equ	0xFDD
 22722                           fsr2h	equ	0xFDA
 22723                           fsr2l	equ	0xFD9
 22724                           status	equ	0xFD8
 22725                           pclatu	equ	0xFFB
 22726                           pclath	equ	0xFFA
 22727                           tblptru	equ	0xFF8
 22728                           tblptrh	equ	0xFF7
 22729                           tblptrl	equ	0xFF6
 22730                           tablat	equ	0xFF5
 22731                           prodh	equ	0xFF4
 22732                           prodl	equ	0xFF3
 22733                           intcon	equ	0xFF2
 22734                           intcon3	equ	0xFF0
 22735                           indf0	equ	0xFEF
 22736                           postinc0	equ	0xFEE
 22737                           fsr0h	equ	0xFEA
 22738                           fsr0l	equ	0xFE9
 22739                           wreg	equ	0xFE8
 22740                           indf1	equ	0xFE7
 22741                           postdec1	equ	0xFE5
 22742                           fsr1h	equ	0xFE2
 22743                           fsr1l	equ	0xFE1
 22744                           indf2	equ	0xFDF
 22745                           postinc2	equ	0xFDE
 22746                           postdec2	equ	0xFDD
 22747                           fsr2h	equ	0xFDA
 22748                           fsr2l	equ	0xFD9
 22749                           status	equ	0xFD8
 22750                           
 22751                           	psect	rparam
 22752  0000                     pclatu	equ	0xFFB
 22753                           pclath	equ	0xFFA
 22754                           tblptru	equ	0xFF8
 22755                           tblptrh	equ	0xFF7
 22756                           tblptrl	equ	0xFF6
 22757                           tablat	equ	0xFF5
 22758                           prodh	equ	0xFF4
 22759                           prodl	equ	0xFF3
 22760                           intcon	equ	0xFF2
 22761                           intcon3	equ	0xFF0
 22762                           indf0	equ	0xFEF
 22763                           postinc0	equ	0xFEE
 22764                           fsr0h	equ	0xFEA
 22765                           fsr0l	equ	0xFE9
 22766                           wreg	equ	0xFE8
 22767                           indf1	equ	0xFE7
 22768                           postdec1	equ	0xFE5
 22769                           fsr1h	equ	0xFE2
 22770                           fsr1l	equ	0xFE1
 22771                           indf2	equ	0xFDF
 22772                           postinc2	equ	0xFDE
 22773                           postdec2	equ	0xFDD
 22774                           fsr2h	equ	0xFDA
 22775                           fsr2l	equ	0xFD9
 22776                           status	equ	0xFD8
 22777                           
 22778                           	psect	temp
 22779  00007F                     btemp:
 22780                           	opt stack 0
 22781  00007F                     	ds	1
 22782  0000                     int$flags	set	btemp
 22783  0000                     wtemp6	set	btemp+1
 22784                           pclatu	equ	0xFFB
 22785                           pclath	equ	0xFFA
 22786                           tblptru	equ	0xFF8
 22787                           tblptrh	equ	0xFF7
 22788                           tblptrl	equ	0xFF6
 22789                           tablat	equ	0xFF5
 22790                           prodh	equ	0xFF4
 22791                           prodl	equ	0xFF3
 22792                           intcon	equ	0xFF2
 22793                           intcon3	equ	0xFF0
 22794                           indf0	equ	0xFEF
 22795                           postinc0	equ	0xFEE
 22796                           fsr0h	equ	0xFEA
 22797                           fsr0l	equ	0xFE9
 22798                           wreg	equ	0xFE8
 22799                           indf1	equ	0xFE7
 22800                           postdec1	equ	0xFE5
 22801                           fsr1h	equ	0xFE2
 22802                           fsr1l	equ	0xFE1
 22803                           indf2	equ	0xFDF
 22804                           postinc2	equ	0xFDE
 22805                           postdec2	equ	0xFDD
 22806                           fsr2h	equ	0xFDA
 22807                           fsr2l	equ	0xFD9
 22808                           status	equ	0xFD8


Data Sizes:
    Strings     681
    Constant    259
    Data        24
    BSS         553
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65     126
    BANK0           128     55     128
    BANK1           256      0     243
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$2694	PTR const unsigned char  size(2) Largest target is 40
		 -> final_set(BANK1[40]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> strs(CODE[100]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_57(CODE[1]), STR_55(CODE[1]), STR_52(CODE[1]), STR_49(CODE[2]), 
		 -> STR_48(CODE[2]), STR_47(CODE[2]), STR_46(CODE[2]), current_set(BANK0[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_97(CODE[5]), STR_96(CODE[5]), STR_95(CODE[5]), STR_94(CODE[5]), 
		 -> STR_93(CODE[5]), STR_92(CODE[5]), STR_91(CODE[5]), STR_90(CODE[4]), 
		 -> STR_89(CODE[4]), STR_88(CODE[4]), STR_87(CODE[4]), STR_86(CODE[4]), 
		 -> STR_85(CODE[4]), STR_84(CODE[3]), STR_83(CODE[3]), STR_82(CODE[3]), 
		 -> STR_81(CODE[2]), STR_80(CODE[2]), STR_79(CODE[2]), STR_78(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> current_set2(COMRAM[5]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 5
		 -> temp_set(BANK1[5]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_98(CODE[7]), number(COMRAM[2]), final_set(BANK1[40]), current_set(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_77(CODE[5]), STR_76(CODE[5]), STR_75(CODE[5]), STR_74(CODE[5]), 
		 -> STR_73(CODE[19]), STR_72(CODE[20]), STR_71(CODE[20]), STR_70(CODE[20]), 
		 -> STR_69(CODE[5]), STR_68(CODE[5]), STR_67(CODE[5]), STR_66(CODE[5]), 
		 -> STR_65(CODE[3]), STR_64(CODE[19]), STR_63(CODE[19]), STR_62(CODE[14]), 
		 -> STR_61(CODE[15]), STR_60(CODE[9]), STR_59(CODE[12]), STR_58(CODE[14]), 
		 -> STR_56(CODE[7]), STR_54(CODE[3]), STR_53(CODE[11]), STR_51(CODE[3]), 
		 -> STR_50(CODE[9]), STR_45(CODE[15]), STR_44(CODE[5]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[14]), STR_40(CODE[15]), STR_39(CODE[12]), 
		 -> STR_38(CODE[12]), STR_37(CODE[17]), STR_36(CODE[13]), STR_35(CODE[16]), 
		 -> STR_34(CODE[15]), STR_33(CODE[15]), STR_32(CODE[15]), STR_31(CODE[15]), 
		 -> STR_30(CODE[9]), STR_29(CODE[10]), STR_28(CODE[19]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[14]), STR_23(CODE[15]), 
		 -> STR_22(CODE[11]), STR_21(CODE[11]), STR_20(CODE[9]), STR_19(CODE[15]), 
		 -> STR_18(CODE[12]), STR_17(CODE[12]), STR_16(CODE[7]), STR_15(CODE[16]), 
		 -> STR_14(CODE[18]), STR_13(CODE[3]), STR_12(CODE[2]), STR_11(CODE[3]), 
		 -> STR_10(CODE[2]), STR_9(CODE[3]), STR_8(CODE[5]), STR_7(CODE[17]), 
		 -> STR_6(CODE[8]), STR_5(CODE[3]), STR_4(CODE[14]), STR_3(CODE[15]), 
		 -> STR_2(CODE[20]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 40
		 -> prev_set(BANK1[40]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 5
		 -> current_set(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> current_set2(COMRAM[5]), temp_set(BANK1[5]), final_set(BANK1[40]), current_set(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_initLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_I2C_Master_Init->i2___lldiv
    _strncmp->i2___wmul
    _strcpy->i2___wmul
    _is_valid->_strcmp
    _is_valid->i2___wmul

Critical Paths under _main in BANK0

    _main->_Bolt_dispense
    _main->_Bolt_remain
    _main->_Nut_dispense
    _main->_Nut_remain
    _main->_Spacer_dispense
    _main->_Spacer_remain
    _main->_Washer_dispense
    _main->_Washer_remain
    _initLCD->_lcdInst
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _drawTeamName->_glcdDrawRectangle
    _Washer_remain->_printf
    _Washer_dispense->_printf
    _drawWasher->_glcdDrawRectangle
    _Spacer_remain->_printf
    _Spacer_dispense->_printf
    _drawSpacer->_glcdDrawRectangle
    _Nut_remain->_printf
    _Nut_dispense->_printf
    _drawNut->_glcdDrawRectangle
    _I2C_init->_I2C_Master_Init
    _I2C_Master_Read->_I2C_Master_Wait
    _Bolt_remain->_printf
    _Bolt_dispense->_printf
    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _drawBolt->_glcdDrawRectangle
    _glcdDrawRectangle->___wmul
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer
    ___wmul->___awdiv
    _I2C_Master_Init->___lldiv
    _I2C_sendData->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  507936
                                             46 BANK0      9     9      0
                      _Bolt_dispense
                        _Bolt_remain
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           _I2C_init
                       _I2C_sendData
                       _Nut_dispense
                         _Nut_remain
                    _Spacer_dispense
                      _Spacer_remain
                    _Washer_dispense
                      _Washer_remain
                            ___awdiv
                             ___wmul
                       _drawTeamName
         _generate_compartment_array
                           _initGLCD
                            _initLCD
                       _initVibTimer
                         _initialize
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initVibTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initGLCD                                             2     2      0   44695
                                             33 BANK0      2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _glcdSetCOLMOD                                        3     3      0    4620
                                              6 BANK0      3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (1) _generate_compartment_array                           4     2      2     224
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _drawTeamName                                         1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    2224
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Washer_remain                                        4     2      2   50068
                                             42 BANK0      4     2      2
                       _I2C_sendData
                         _drawWasher
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Washer_dispense                                      4     2      2   50090
                                             42 BANK0      4     2      2
                       _I2C_sendData
                         _drawWasher
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawWasher                                           1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _Spacer_remain                                        4     2      2   50068
                                             42 BANK0      4     2      2
                       _I2C_sendData
                         _drawSpacer
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Spacer_dispense                                      4     2      2   50090
                                             42 BANK0      4     2      2
                       _I2C_sendData
                         _drawSpacer
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawSpacer                                           1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _Nut_remain                                           4     2      2   50068
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _drawNut
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Nut_dispense                                         4     2      2   50090
                                             42 BANK0      4     2      2
                       _I2C_sendData
                            _drawNut
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawNut                                              1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0    3342
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _Bolt_remain                                          4     2      2   50068
                                             42 BANK0      4     2      2
                       _I2C_sendData
                           _drawBolt
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Bolt_dispense                                        4     2      2   50090
                                             42 BANK0      4     2      2
                       _I2C_sendData
                           _drawBolt
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              32    22     10   10968
                                             14 BANK0     28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _drawBolt                                             1     1      0   36547
                                             33 BANK0      1     1      0
                    _I2C_Master_Init
                  _glcdDrawRectangle
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _glcdDrawRectangle                                   19    12      7   35481
                                             14 BANK0     19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _glcdTransfer                                         3     2      1    4572
                                              3 BANK0      3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      44
                                              2 BANK0      1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4145
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1044
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _I2C_sendData                                         1     1      0    2320
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    2298
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interruptHandler                                    27    27      0   13532
                                             38 COMRAM    27    27      0
                            ___awmod
                              _check
                           _is_valid
                             _strcat
                             _strcpy
                            _strncmp
                  i2_I2C_Master_Init
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2___awdiv
                           i2___wmul
       i2_generate_compartment_array
                          i2_initLCD
                          i2_lcdInst
                           i2_printf
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            30    22      8    3544
                                             12 COMRAM    26    18      8
                            ___awmod (ARG)
                          i2___awdiv (ARG)
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) i2_initLCD                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2_generate_compartment_array                         4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Init                                    8     4      4     288
                                             13 COMRAM     8     4      4
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (8) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _strcpy                                               6     2      4    1443
                                              6 COMRAM     6     2      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _strcat                                               6     2      4     706
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _is_valid                                             2     2      0    4068
                                              6 COMRAM     2     2      0
                             _strcmp
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     937
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _strcmp                                               6     2      4    3131
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _check                                                2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Bolt_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawBolt
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Bolt_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawBolt
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _I2C_init
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_sendData
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _Nut_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawNut
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Nut_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawNut
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Spacer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawSpacer
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Spacer_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawSpacer
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Washer_dispense
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawWasher
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   _Washer_remain
     _I2C_sendData
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _drawWasher
       _I2C_Master_Init
         ___lldiv
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _spiInit
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___awdiv (ARG)
       _isdigit
       _putch
         _lcdNibble
   ___awdiv
   ___wmul
     ___awdiv (ARG)
   _drawTeamName
     _I2C_Master_Init
       ___lldiv
     _glcdDrawRectangle
       ___wmul
         ___awdiv (ARG)
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _spiInit
   _generate_compartment_array
   _initGLCD
     _glcdDrawRectangle
       ___wmul
         ___awdiv (ARG)
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiSend
         _spiTransfer
     _glcdSetCOLMOD
       _glcdTransfer
         _spiSend
           _spiTransfer
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiInit
   _initLCD
     _lcdInst
       _lcdNibble
   _initVibTimer
   _initialize
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
       ___awdiv (ARG)
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)
   ___awmod
   _check
   _is_valid
     _strcmp
     i2___wmul
   _strcat
   _strcpy
     i2___wmul (ARG)
   _strncmp
     i2___wmul (ARG)
   i2_I2C_Master_Init
     i2___lldiv
   i2_I2C_Master_Read
     i2_I2C_Master_Wait
   i2_I2C_Master_Start
     i2_I2C_Master_Wait
   i2_I2C_Master_Stop
     i2_I2C_Master_Wait
   i2_I2C_Master_Write
     i2_I2C_Master_Wait
   i2___awdiv
   i2___wmul
   i2_generate_compartment_array
   i2_initLCD
     i2_lcdInst
       i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     ___awmod (ARG)
     i2___awdiv (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
     i2___wmul (ARG)
     i2_isdigit (ARG)
     i2_putch (ARG)
       i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F3       7       94.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     37      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B9      34        0.0%
DATA                 0      0     2B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 10 13:15:10 2018

                                    _B 0058                                      _N 0056  
                                    _S 0054                                      _W 0052  
                                    _i 00B7                                      _j 006B  
                   i2_I2C_Master_Start 629C                     i2_I2C_Master_Write 6272  
                          _rotate_gear 00FF                            _SSPSTATbits 000FC7  
                       ??_glcdTransfer 00C7                            __CFG_CPD$ON 000000  
                         ___awdiv@sign 00C8                    ___wmul@multiplicand 00CD  
                   i2___lwdiv@dividend 0001                            __CFG_BORV$3 000000  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  l510 1F5A                                    l502 1E94  
                                  l511 1FAA                                    l512 1FE0  
                                  l513 210C                                    l530 2446  
                                  l514 20F8                                    l506 1F00  
                                  l531 246C                                    l515 202C  
                                  l532 2492                                    l524 2360  
                                  l508 22D2                                    l533 24B8  
                                  l525 2340                                    l517 2154  
                                  l509 1F0C                                    l542 258C  
                                  l543 25A0                                    l527 2524  
                                  l704 55D4                                    l632 51B8  
                                  l544 25B4                                    l536 24EE  
                                  l528 23B0                                    l705 5590  
                                  l545 25C8                                    l537 2518  
                                  l548 2922                                    l751 545E  
                                  l752 5412                                    l760 53A2  
                                  l761 5356                                    l770 529A  
                                  l677 551C                                    l678 54D8  
                                  l686 5714                                    l687 56D0  
                                  l695 5674                                    l696 5630  
                                  l769 52E6                                    l778 522A  
                                  l779 51DE                           __CFG_CPB$OFF 000000  
                                  _RED FC95              __end_ofGLCD_PIC@INST_TEON FCB8  
                  ?i2_I2C_Master_Start 0001                    ?i2_I2C_Master_Write 0002  
                      _compartment_pos 0190                           ___awmod@sign 0006  
                                  prod 000FF3                          _assembly_step 00AF  
                                  wreg 000FE8                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1222 6014  
                                 l1070 4C58                                   l1071 4CDA  
                                 l1224 602C                                   l1064 4D1C  
                                 l1225 6006                                   l1401 32BC  
                                 l1065 4AEE                                   l1226 600A  
                                 l1410 3328                                   l1227 600E  
                                 l1403 340E                                   l1411 3350  
                                 l1067 4B32                                   l1340 4D7A  
                                 l1420 33FC                                   l1412 3360  
                                 l1068 4B84                                   l1421 33D0  
                                 l1413 335A                                   l1069 4BE6  
                                 l1342 4D8C                                   l1343 4D98  
                                 l1415 33AC                                   l1344 4E7A  
                                 l1440 3582                                   l1432 350C  
                                 l1424 3476                                   l1408 3446  
                                 l1360 5CBC                                   l1441 3568  
                                 l1433 34C6                                   l1417 33BC  
                                 l1409 3322                                   l1346 4EF4  
                                 l1338 4D66                                   l1450 3674  
                                 l1418 33B6                                   l1362 5CC6  
                                 l1347 4ED8                                   l1427 34FC  
                                 l1452 365C                                   l1428 3490  
                                 l1453 35B8                                   l1437 3526  
                                 l1357 5CCE                                   l1454 366E  
                                 l1438 354A                                   l1630 5896  
                                 l1358 5CB2                                   l1455 3608  
                                 l1439 3552                                   l1359 5CE2  
                                 l1392 3260                                   l1449 35B2  
                                 l1393 3270                                   l1633 58BE  
                                 l1634 58C8                                   l1626 5870  
                                 l1395 3288                                   l1635 58D6  
                                 l1627 5880                                   l1396 3280  
                                 l1629 589E                                   l1814 5A1C  
                                 l1815 5A10                                   l1818 5A50  
                                 l1819 5A5E                                   l1871 5DA4  
                                 l1872 5DAE                                   l1881 5F62  
                                 l1882 5F6C                                   l1867 5D84  
                                 l1868 5D7C                                   l1788 6198  
                                 l1877 5F4A                                   l1878 5F42  
                                 l5625 4D90                                   l5485 60C4  
                                 l5823 33D0                                   l5819 33B6  
                                 l6635 510A                                   l7453 21A4  
                                 l5863 34CA                                   l7463 21CC  
                                 l5849 3494                                   l7625 2650  
                                 l7635 2678                                   l7573 2520  
                                 l7579 253A                                   _ADON 007E10  
                                 STR_1 FE41                                   STR_2 FD6A  
                                 STR_3 FE70                                   STR_4 FED8  
                                 STR_5 FFF8                                   STR_6 FF8F  
                                 STR_7 FE0F                                   STR_8 FFE3  
                                 STR_9 FFD1                                   _BLUE FC85  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3420 60CC  
                                 u4220 5730                                   u4300 53BE  
                                 u3510 5A20                                   u3430 60DA  
                                 u3422 60CE                                   u3432 60DC  
                                 u4250 5690                                   u4330 5246  
                                 _GREY FC9D                                   u3445 5812  
                                 u4165 60B2                                   u3446 5814  
                                 u4190 5538                                   u4166 60B4  
                                 u3535 5C82                                   u3455 5856  
                                 u3480 6076                                   u3456 5858  
                                 u3640 5D88                                   u4360 5302  
                                 u4280 55F0                                   u5320 1E9E  
                                 u3670 5F4E                                   u3750 338E  
                                 u4390 547A                                   u5430 21CC  
                                 u7007 3E7A                                   _RBIE 007F93  
                                 u5520 24E6                                   _RBIF 007F90  
                                 u7017 51CA                                   u3498 607A  
                                 u7107 52A8                                   u7027 51EC  
                                 u5620 2678                                   u5540 2520  
                                 u3757 3384                                   u7117 52BE  
                                 u7037 5202                                   u3790 33F2  
                                 u7207 53E0                                   u7127 5324  
                                 u7047 5268                                   u3960 358A  
                                 u5560 253A                                   u7217 56B2  
                                 u7137 5612                                   u7057 5572  
                                 u3970 35A0                                   u7307 54E6  
                                 u7227 56DE                                   u7147 563E  
                                 u7067 559E                                   u3797 33E8  
                                 u7317 54FC                                   u7237 56F6  
                                 u7157 5656                                   u7077 55B4  
                                 u3990 367E                                   u4790 58A2  
                                 u7327 554A                                   u7247 45A2  
                                 u7167 420E                                   u7087 29FE  
                                 u6607 1EE4                                   u7337 61CE  
                                 u7257 53FE                                   u7177 5342  
                                 u7097 5286                                   u6617 1F24  
                                 u7347 61E6                                   u7267 5420  
                                 u7187 5364                                   u6707 238A  
                                 u6627 1F48                                   u7357 57F8  
                                 u7277 5438                                   u7197 537A  
                                 u6717 23DA                                   u6637 1F9E  
                                 u7367 5802                                   u7287 549C  
                                 u6807 27F4                                   u6727 254C  
                                 u6647 1FD4                                   u7377 583C  
                                 u7297 54C4                                   u6817 2820  
                                 u6737 256C                                   u6657 2012  
                                 u7387 5846                                   u6907 295A  
                                 u6827 283C                                   u6747 25DA  
                                 u6667 20E0                                   u7397 4F12  
                                 u6917 297A                                   u6837 2852  
                                 u6757 25FE                                   u6677 2124  
                                 u6597 1ECA                                   u6927 29B2  
                                 u6847 287E                                   u6767 2776  
                                 u6687 2148                                   u6937 29CC  
                                 u6857 289A                                   u6777 2792  
                                 u6697 22FE                                   u6947 5E12  
                                 u6867 28B0                                   u6787 27C2  
                                 u6957 5E46                                   u6877 28DC  
                                 u6797 27DE                                   u6967 3ACC  
                                 u6887 28F8                                   u6977 3AFC  
                                 u6897 290E                                   u6987 3B30  
                                 u6997 3E60                                   _main 1E40  
             __end_of_interruptHandler 0FEA                                   _mode 00B5  
                                 _keys FC53                                   _temp 006E  
                                 _time 0090                                   _prev 0060  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 0005                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf1 000FE7                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 007F                         ??_drawTeamName 00E4  
                                 _strs FCF2                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                       __end_of_I2C_init 6064  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 622A                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                            i2_lcdNibble 58E0  
                  __end_of_Bolt_remain 54AA                       __end_of_LCD_LEFT FCED  
                         _total_number 018A                  I2C_Master_Read@ackBit 00C4  
                     ?_I2C_Master_Init 00D0                       ?_I2C_Master_Read 0001  
     i2generate_compartment_array@step 0001         generate_compartment_array@step 00C3  
                     ?_I2C_Master_Wait 0001                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                        __end_of___awdiv 58E0  
                                _BLACK FCA1                                  _EEADR 000FA9  
                                STR_10 FE3F                                  STR_11 FFF8  
                                STR_12 FFFB                                  STR_20 FF7D  
                                STR_13 FFD1                                  STR_21 FF4B  
                                STR_22 FF4B                                  STR_30 FF86  
                                STR_14 FDCA                                  STR_31 FEAC  
                                STR_23 FE7F                                  STR_15 FE51  
                                STR_40 FE7F                                  STR_16 FFA5  
                                STR_24 FEE6                                  STR_32 FEBB  
                                STR_41 FEE6                                  STR_33 FEAC  
                                STR_17 FF0F                                  STR_25 FDED  
                                STR_42 FDED                                  STR_34 FEBB  
                                STR_50 FF6B                                  STR_18 FF33  
                                STR_26 FDFE                                  STR_43 FDFE  
                                STR_51 FFF8                                  STR_19 FE8E  
                                STR_35 FE31                                  STR_27 FE20  
                                STR_52 FE6F                                  STR_44 FFDE  
                                STR_60 FF74                                  STR_36 FF02  
                                STR_28 FDA4                        __end_of___awmod 5BE6  
                                STR_37 FE0F                                  STR_29 FF61  
                                STR_53 FF56                                  STR_61 FE9D  
                                STR_45 FE61                                  STR_54 FFF8  
                                STR_46 FFFD                                  STR_38 FF1B  
                                STR_62 FEF4                                  STR_70 FD56  
                                STR_55 FE6F                                  STR_47 FFEA  
                                STR_39 FF27                                  STR_63 FD7E  
                                STR_80 FFEE                                  STR_48 FFEE  
                                STR_56 FF9E                                  STR_64 FD91  
                                STR_57 FE6F                                  STR_81 FFF2  
                                STR_49 FFF2                                  STR_73 FDB7  
                                STR_82 FFE9                                  STR_74 FFCF  
                                STR_90 FFF4                                  STR_66 FFCF  
                                STR_58 FECA                                  STR_83 FFED  
                                STR_75 FFD4                                  STR_67 FFD4  
                                STR_91 FFC0                                  STR_59 FF3F  
                                STR_84 FFF1                                  STR_76 FFD9  
                                STR_68 FFD9                                  STR_92 FFC5  
                                STR_77 FD65                                  STR_69 FD65  
                                STR_85 FFE8                                  STR_93 FFBB  
                                STR_78 FFFD                                  STR_86 FFEC  
                                STR_94 FFB1                                  STR_79 FFEA  
                                STR_87 FFF0                                  STR_95 FFB6  
                                STR_88 FFB2                                  STR_96 FFAC  
                                STR_89 FFBC                                  STR_97 FFCA  
                                STR_98 FF97                                  STR_99 FDDC  
                      __end_of___lldiv 5A70                       __end_of_INST_NOP FCE8  
                      ___awdiv@divisor 00C5                                  _GREEN FC89  
                      __end_of___lwdiv 5DB8                        __end_of___lwmod 5F76  
                                i2l610 0C52                                  i2l611 0C5A  
                                i2l620 0F78                                  i2l612 0C64  
                                i2l621 0EA4                                  i2l613 0D28  
                                i2l605 0C8E                                  i2l622 0EE2  
                                i2l606 0C3A                                  i2l623 0F1E  
                                i2l615 0D7A                                  i2l607 0CC8  
                                i2l624 0F5C                                  i2l608 0C42  
                                i2l625 0F9E                                  i2l617 0DB2  
                                i2l609 0C4A                                  i2l561 01AE  
                                i2l626 0F8C                                  i2l570 01F2  
                                i2l562 00B0                                  i2l627 0F9C  
                                i2l619 0DE6                                  i2l580 06E2  
                                i2l572 0242                                  i2l564 0100  
                                i2l590 0B5C                                  i2l582 072A  
                                i2l574 0428                                  i2l591 0882  
                                i2l575 0676                                  i2l567 01CA  
                                i2l559 0E14                                  i2l592 08C2  
                                i2l584 0772                                  i2l593 0902  
                                i2l569 02EE                                  i2l594 0942  
                                i2l586 07BA                                  i2l578 0692  
                                i2l595 0B06                                  i2l579 0838  
                                i2l596 099A                                  i2l588 0802  
                                i2l589 082A                                  i2l598 0A84  
                                i2l599 0AFE                        ___awdiv@counter 00C7  
                                _PORTB 000F81                                  _WHITE FC99  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                                  _SSPIF 007CF3  
                                _B_max 01EF                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                                  _N_max 01ED  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 61EE  
                        _N_spacingTime 009B                                  _S_max 01EB  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _W_max 01E9  
              __end_of_Washer_dispense 55F8                        __end_of_drawNut 4880  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000          __end_ofGLCD_PIC@INST_VMOFCTR2 FCA9  
                      __end_of_initLCD 5E56                                  _check 5BE6  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                                _angle 0192                        __end_of_dpowers FC6E  
                                _array FCA5                                  _error 018E  
                      __end_of_isdigit 61A0                                  _valid 018C  
                                _state 00B1                                  _putch 61BE  
                    _compartment_array 0080                                  main@x 00F4  
                                main@y 00F5                                  pclath 000FFA  
                      __end_of_spiInit 6036                                  tablat 000FF5  
                      __end_of_spiSend 625E                      _LCDinterruptState 00BD  
                     __end_ofi2___wmul 615A                           main@rotation 00F3  
                                status 000FD8            I2C_Master_Read@receivedByte 00C5  
                                wtemp6 0080                        __end_of_strncmp 59EC  
                   __size_ofi2___awdiv 0084                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0024                  __size_of_I2C_sendData 0028  
                   __size_ofi2___lldiv 0082                       __end_ofi2_printf 3AB6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                         __end_of_BLUE FC89                           __end_of_GREY FCA1  
                      __initialization 5738                      i2___lldiv@divisor 0005  
                   __size_ofi2_lcdInst 0014                           __end_of_main 29F0  
                    i2___lldiv@counter 000D                           __end_of_keys FC64  
         glcdSetCOLMOD@numBitsPerPixel 00C9                             i2printf@ap 001D  
                           i2printf@cp 001B                           __end_of_strs FD56  
                   __size_ofi2_initLCD 004C                     __size_ofi2_isdigit 001E  
             __size_of_Spacer_dispense 00A0                      __end_of_LCD_RIGHT FCEE  
                               ??_main 00F1                          ?_initVibTimer 0001  
                        __activetblptr 000003                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 00C4                  __end_of_Spacer_remain 5332  
                               ?_check 0001                     ??_I2C_Master_Start 00C4  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 00C6                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 00C3  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
                    _glcdDrawRectangle 4D50                           _I2C_sendData 610C  
                      Bolt_remain@time 00ED                      __end_of_INST_TEON FCD8  
                      i2lcdNibble@temp 0001                                 _INDIGO FC81  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               i2l1020 1110                                 i2l1030 140C  
                               i2l1022 1172                                 i2l1040 1804  
                               i2l1032 14C0                                 i2l1024 1214  
                               i2l1016 104C                                 i2l1050 1CB4  
                               i2l1042 18F4                                 i2l1034 1574  
                               i2l1026 12B6                                 i2l1018 10AE  
                               i2l2011 5FC6                                 i2l2020 5EAC  
                               i2l1052 1D7A                                 i2l1044 19E4  
                               i2l1036 1662                                 i2l1028 1358  
                               i2l2012 5FC2                                 i2l2021 5EA4  
                               i2l1046 1AD4                                 i2l1038 1750  
                               i2l2014 5FDE                                 i2l1070 49F2  
                               i2l2015 5FD6                                 i2l1071 4A76  
                               i2l1048 1BC4                                 i2l1064 4ABA  
                               i2l1065 4882                                 i2l1401 36FC  
                               i2l1058 5C42                                 i2l2034 59D2  
                               i2l1410 3762                                 i2l2035 5968  
                               i2l1067 48C6                                 i2l1403 3840  
                               i2l1411 378A                                 i2l2028 5EFE  
                               i2l2036 59CA                                 i2l1068 491A  
                               i2l1420 382E                                 i2l1412 3798  
                               i2l2029 5EF6                                 i2l1069 497E  
                               i2l1421 3804                                 i2l1413 3794  
                               i2l1415 37E2                                 i2l1440 39AC  
                               i2l1432 393A                                 i2l1424 38A4  
                               i2l1408 3876                                 i2l1441 3996  
                               i2l1433 38F4                                 i2l1417 37F2  
                               i2l1409 375E                                 i2l1450 3A92  
                               i2l1418 37EC                                 i2l1427 392A  
                               i2l1452 3A7C                                 i2l1428 38BE  
                               i2l1453 39E0                                 i2l1437 3954  
                               i2l1630 5AAA                                 i2l1454 3A8C  
                               i2l1438 3978                                 i2l1455 3A2A  
                               i2l1439 3980                                 i2l1640 5B96  
                               i2l1392 36A6                                 i2l1633 5AD2  
                               i2l1449 39DA                                 i2l1393 36B6  
                               i2l1642 5BAC                                 i2l1634 5ADC  
                               i2l1626 5A84                                 i2l1643 5BA4  
                               i2l1635 5AEA                                 i2l1627 5A94  
                               i2l1395 36CA                                 i2l1396 36C4  
                               i2l1629 5AB2                                 i2l1646 5BC4  
                               i2l1814 5B22                                 i2l1647 5BCE  
                               i2l1639 5B8A                                 i2l1815 5B16  
                               i2l1648 5BDC                                 i2l1818 5B56  
                               i2l1819 5B64                                 i2l1871 5DF6  
                               i2l1872 5E00                                 i2l1881 5FA4  
                               i2l1882 5FAE                                 i2l1867 5DD6  
                               i2l1868 5DCE                                 i2l1788 61B6  
                               i2l1877 5F8C                                 i2l1878 5F84  
                               i2l7131 37EC                                 i2l7135 3804  
                               i2l7161 38C2                                 i2l8201 0E10  
                               i2l7175 38F8                                 i2l8091 0A92  
                 __end_of_glcdTransfer 6092                                 i2l6663 5968  
                               i2l6917 5C38                                 i2l7901 054A  
                               i2l7819 023A                                 i2l7773 00F8  
                               i2l7879 046A                                 i2l7799 01C6  
                               _ORANGE FC91                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                   ?_glcdDrawRectangle 00D1                                 _VIOLET FC7D  
                               _SSPADD 000FC8                                 _YELLOW FC8D  
                               _SSPBUF 000FC9                                 _B_done 017E  
                      _openHandle_data 00BC                            _Bolt_remain 53EE  
                               _N_done 017C                                 _S_done 017A  
                       __CFG_XINST$OFF 000000              glcdDrawRectangle@numLoops 00DC  
                               _W_done 0178                       __end_of_drawBolt 5068  
                  ??_glcdDrawRectangle 00D8         ??i2_generate_compartment_array 0003  
                               ___wmul 60E4                       __end_of_initGLCD 3E6C  
                            ??___awdiv 00C7                         __CFG_STVREN$ON 000000  
                            ??___awmod 0005                              ??___lldiv 00CB  
                            ??___lwdiv 00C7                              ??___lwmod 00CE  
                     __end_of_is_valid 1E40                                 clear_0 579E  
                               clear_1 57AA                                 clear_2 57B6  
                               clear_3 57C2                       ___awdiv@quotient 00C9  
                      ___awmod@divisor 0003               __end_ofGLCD_PIC@INST_NOP FCC8  
                               _number 0075                        ___awmod@counter 0005  
                            ??_lcdInst 00C5                                 _printf 3254  
                       ??_initVibTimer 00C3                                 _strcat 5FB8  
                               _strcmp 5EA2                              ??_drawNut 00E4  
                               _strcpy 5EEC                         i2___awdiv@sign 0006  
                            ??_initLCD 00C6                             _Nut_remain 5332  
                 __end_of_drawTeamName 4200                     _compartment_number 0042  
                         __pdataCOMRAM 0077                              ??_isdigit 00C3  
                    __end_ofi2___awdiv 5AF4                           ?_spiTransfer 0001  
                         _EndOfProgram 00BB                      __end_ofi2___lldiv 5B76  
                    __end_ofi2___lwdiv 5E0A                           __mediumconst FC52  
                    __end_ofi2___lwmod 5FB8                              ?_I2C_init 0001  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                              ??_spiInit 00C3  
                            ??_spiSend 00C5              __end_of_glcdDrawRectangle 4F04  
                     ?_Washer_dispense 00ED                      __end_ofi2_lcdInst 623E  
                            ??_strncmp 000D                      __end_ofi2_initLCD 5EA2  
                    __end_ofi2_isdigit 61BE                             __accesstop 0080  
              __end_of__initialization 57C8                          __end_of_BLACK FCA5  
                        ___rparam_used 000001                          __end_of_GREEN FC8D  
                        __end_of_WHITE FC9D            __end_ofGLCD_PIC@INST_GAMSET FCC0  
          __end_ofGLCD_PIC@INST_COLMOD FCB4            __end_ofGLCD_PIC@INST_MADCTL FCB7  
          __end_ofGLCD_PIC@INST_DISPON FCBE            __end_ofGLCD_PIC@INST_IDMOFF FCB6  
                   i2___lwmod@dividend 0008                   __end_of_happynewyear FC7D  
                       __pcstackCOMRAM 0001                     i2___lldiv@dividend 0001  
          __end_ofGLCD_PIC@INST_INVCTR FCB0            __end_ofGLCD_PIC@INST_INVOFF FCC2  
                         __pidataBANK0 62A4                           __pidataBANK1 625E  
              i2I2C_Master_Read@ackBit 0002                     Bolt_dispense@B_max 00ED  
                        __end_of_check 5C4C                  __end_of_Bolt_dispense 5558  
          __end_ofGLCD_PIC@INST_PWCTR1 FCAF            __end_ofGLCD_PIC@INST_PWCTR2 FCAE  
          __end_ofGLCD_PIC@INST_PWCTR3 FCAD            __end_ofGLCD_PIC@INST_PWCTR4 FCAC  
          __end_ofGLCD_PIC@INST_PWCTR5 FCAB                          __end_of_array FCA8  
          __end_ofGLCD_PIC@INST_VMCTR1 FCAA            __end_ofGLCD_PIC@INST_SLPOUT FCC5  
                        __end_of_putch 61D6                  __end_of_Washer_remain 5276  
                          i2printf@idx 0019                            i2printf@len 001F  
                          i2printf@val 0021                          _B_spacingTime 009D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0088  
                          i2putch@data 0003                             ??_I2C_init 00D8  
                    ??_Spacer_dispense 00EF                              ?i2_printf 000D  
                              ??_check 0003                                ??_putch 00C5  
                        _INST_VMOFCTR2 FCC8                     i2___lldiv@quotient 0009  
                __end_of_glcdSetCOLMOD 5D08                             __pbssBANK0 0080  
                           __pbssBANK1 0100                             __pbssBANK2 0200  
                    _S_total_dispensed 0172                      ?_interruptHandler 0001  
                   ??_interruptHandler 0027                      Washer_remain@time 00ED  
                        _init_position 01F1                           ?i2_lcdNibble 0001  
                              ?___wmul 00CB                         main@compart_id 00F8  
           i2I2C_Master_Init@clockFreq 000E                     glcdDrawRectangle@i 00DE  
                   __end_of_INST_CASET FCDD                     __end_of_INST_IDMON FCD5  
                 Spacer_dispense@S_max 00ED                                ?_printf 00D1  
                   __end_of_INST_INVON FCE1                     __end_of_INST_RASET FCDC  
                   __end_of_INST_RAMWR FCDB                     __end_of_INST_TEOFF FCD9  
                              ?_strcat 0001                     __end_of_INST_NORON FCE3  
                              ?_strcmp 0001                                ?_strcpy 0007  
                   __end_of_INST_PTLAR FCDA                     __end_of_INST_SLPIN FCE6  
                   __end_of_INST_PTLON FCE4                             ??i2___wmul 0005  
                          ?_Nut_remain 00ED                           _gear_counter 0062  
                           _final_time 0160                  __size_of_glcdTransfer 002E  
                           _drawSpacer 4200                             ??i2_printf 0015  
           __size_of_glcdDrawRectangle 01B4                             _drawWasher 29F0  
            spiTransfer@byteToTransfer 00C4                   lcd@LCDinterruptState 006F  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                            ?_drawBolt 0001                                _SSPSTAT 000FC7  
                              _B_array 0130                                _B_input 0186  
                            ?_initGLCD 0001                                i2_putch 6216  
                            ?_is_valid 0001                   __end_of_initVibTimer 6202  
                              _N_array 0110                                _N_input 0184  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 585A  
          __size_ofi2_I2C_Master_Write 000A                                _S_array 0120  
                              _S_input 0182                                __Hparam 0000  
                       _GLCD_SIZE_HORZ FCE9                             _hr_initial 016E  
                              __Lparam 0000                                _W_array 0100  
                       _GLCD_SIZE_VERT FCE8                                _W_input 0180  
                 __end_of_INST_DISPOFF FCDF                   __end_of_INST_FRMCTR1 FCD3  
                 __end_of_INST_FRMCTR2 FCD2                   __end_of_INST_FRMCTR3 FCD1  
                              ___awdiv 585A                                ___awmod 5B76  
                              ___lldiv 59EC                        __size_of___wmul 0028  
                              ___lwdiv 5D64                          ?_Nut_dispense 00ED  
                              ___lwmod 5F32                  __size_of_drawTeamName 0394  
             interruptHandler@keypress 0040                                __pcinit 5738  
                         _glcdTransfer 6064                                __ramtop 1000  
                           _initialize 5068                                _lcdInst 61D6  
                              __ptext0 1E40                                __ptext1 5068  
                              __ptext2 61EE                                __ptext3 5E0A  
                              __ptext4 3AB6                                __ptext5 5CAC  
                              __ptext6 4AEC                                __ptext7 3E6C  
                              __ptext8 585A                                __ptext9 51BA  
                      __size_of_printf 0448                                _drawNut 4594  
                            _T0CONbits 000FD5                        __size_of_strcat 0042  
                      __size_of_strcmp 004A                   __end_of_INST_SWRESET FCE7  
                      __size_of_strcpy 0046                                _initLCD 5E0A  
                    __end_of_hexpowers FC76                                _counter 005C  
                              _dpowers FC64                                _isdigit 617E  
                     ___awmod@dividend 0001                              _LCD_RIGHT FCED  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002A  
                              _spiInit 5FFA               __size_of_I2C_Master_Wait 0014  
                              _spiSend 6250               __size_of_I2C_Master_Stop 0008  
                        _S_spacingTime 0099                   __size_of_spiTransfer 0028  
                           ??_drawBolt 00E4                                _strncmp 5966  
                       __pintcode_body 0012                   end_of_initialization 57C8  
                GLCD_PIC@INST_VMOFCTR2 FCA8                             ??_initGLCD 00E4  
                __end_of_LCD_SIZE_HORZ FCF0                  __end_of_LCD_SIZE_VERT FCEF  
         ??_generate_compartment_array 00C5                           _final_number 0150  
                              int_func 0012                    i2___wmul@multiplier 0001  
                           ??_is_valid 0007                 __end_of_GLCD_SIZE_HORZ FCEA  
                         ?_Bolt_remain 00ED                         _operation_done 0064  
                            _INST_TEON FCD7                 __end_of_GLCD_SIZE_VERT FCE9  
            __size_of_I2C_Master_Start 0008                           _drawTeamName 3E6C  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 00C7  
                         _close_handle 00FC                    __size_of_Nut_remain 00BC  
                      ___lldiv@counter 00CF                                printf@c 00EC  
                              printf@f 00D1                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                         ??_Nut_dispense 00EF  
                     glcdTransfer@byte 00C8                                strcmp@r 0006  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                           _prev_state 0188                             _servo_ramp 00FD  
                       spiInit@divider 00C3    __size_of_generate_compartment_array 0264  
                            _TRISAbits 000F92                              _TRISBbits 000F93  
                            _TRISCbits 000F94                              _TRISDbits 000F95  
                          ?_drawSpacer 0001                            ?_drawWasher 0001  
                    i2_I2C_Master_Init 5D08                      i2_I2C_Master_Read 615A  
                    i2_I2C_Master_Wait 623E                           _happynewyear FC76  
                    i2_I2C_Master_Stop 6294                              i2___awdiv 5A70  
                    __size_of_I2C_init 002E                             _white_tape 0068  
                            _B_counter 00AD                      i2___lwdiv@divisor 0003  
                            i2___lldiv 5AF4                              i2___lwdiv 5DB8  
                            i2___lwmod 5F76                     ?i2_I2C_Master_Init 000E  
                    i2___lwdiv@counter 0007                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     ?i2_I2C_Master_Stop 0001  
                    Nut_dispense@N_max 00ED                              i2_lcdInst 622A  
                       __end_of_INDIGO FC85                   Washer_dispense@W_max 00ED  
                          printf@width 00EA                         __end_of_ORANGE FC95  
                            i2_initLCD 5E56                     i2___awdiv@dividend 0001  
                       __end_of_VIOLET FC81                         __end_of_YELLOW FC91  
                  ??i2_I2C_Master_Init 0012                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 61A0                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002           __end_ofGLCD_PIC@INST_DISPOFF FCBF  
         __end_ofGLCD_PIC@INST_FRMCTR1 FCB3           __end_ofGLCD_PIC@INST_FRMCTR2 FCB2  
         __end_ofGLCD_PIC@INST_FRMCTR3 FCB1                 __size_of_Spacer_remain 00BC  
                      _Spacer_dispense 55F8                         __end_of___wmul 610C  
                 __size_ofi2_lcdNibble 0086                          __pidataCOMRAM 627C  
                          ?_initialize 0001                          i2lcdInst@data 0003  
         __end_ofGLCD_PIC@INST_SWRESET FCC7                       i2___wmul@product 0005  
                       __end_of_printf 369C                              _N_counter 00A9  
                       __end_of_strcat 5FFA                         __end_of_strcmp 5EEC  
                         i2printf@flag 0023                         __end_of_strcpy 5F32  
            __end_ofi2_I2C_Master_Init 5D64              __end_ofi2_I2C_Master_Read 617E  
            __end_ofi2_I2C_Master_Wait 6250                           i2printf@prec 001A  
                  start_initialization 5738              __end_ofi2_I2C_Master_Stop 629C  
                   i2___awdiv@quotient 0007                            __end_of_RED FC99  
                    __size_ofi2___wmul 0026                              i2printf@c 0026  
                            i2printf@f 000D   __end_ofi2_generate_compartment_array 4AEC  
__size_ofi2_generate_compartment_array 026C           i2_generate_compartment_array 4880  
               glcdDrawRectangle@color 00D4                             ?i2___awdiv 0001  
                __size_of_initVibTimer 0014                             ?i2___lldiv 0001  
                           ?i2___lwdiv 0001                             ?i2___lwmod 0008  
                    __size_ofi2_printf 041A                              _S_counter 00AB  
                    ??_I2C_Master_Init 00D4                      ??_I2C_Master_Read 00C4  
                    ??_I2C_Master_Wait 00C3                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 00C4                           _counter_step 005A  
                     __CFG_OSC$INTIO67 000000               __size_of_Washer_dispense 00A0  
                           ?i2_initLCD 0001                             ?i2_isdigit 0001  
                            _W_counter 00A7                      interruptHandler@i 003E  
                  __size_of_drawSpacer 0394                               ??___wmul 00CF  
                  __size_of_drawWasher 0864               I2C_Master_Init@clockFreq 00D0  
                          __pdataBANK0 00FA                            __pdataBANK1 01E9  
                     __CFG_LPT1OSC$OFF 000000                               ??_printf 00DB  
            __size_of_interruptHandler 0FE2                               ??_strcat 0005  
                             ??_strcmp 0005                               ??_strcpy 000B  
                         ??_Nut_remain 00EF                           _initVibTimer 61EE  
   __end_of_GLCD_ADDRESSABLE_SIZE_HORZ FCEC             _GLCD_ADDRESSABLE_SIZE_HORZ FCEB  
   __end_of_GLCD_ADDRESSABLE_SIZE_VERT FCEB             _GLCD_ADDRESSABLE_SIZE_VERT FCEA  
                          __pbssCOMRAM 0042                            _change_mode 00B3  
                        __pcstackBANK0 00C3             __end_ofGLCD_PIC@INST_CASET FCBD  
           __end_ofGLCD_PIC@INST_IDMON FCB5                      i2___lwmod@divisor 000A  
           __end_ofGLCD_PIC@INST_INVON FCC1             __end_ofGLCD_PIC@INST_RASET FCBC  
           __end_ofGLCD_PIC@INST_RAMWR FCBB                           _INST_DISPOFF FCDE  
           __end_ofGLCD_PIC@INST_TEOFF FCB9             __end_ofGLCD_PIC@INST_NORON FCC3  
           __end_ofGLCD_PIC@INST_PTLAR FCBA             __end_ofGLCD_PIC@INST_SLPIN FCC6  
                    i2___lwmod@counter 000C             __end_ofGLCD_PIC@INST_PTLON FCC4  
                         _isdigit$2258 00C4                          _Spacer_remain 5276  
                         _INST_FRMCTR1 FCD2                           _INST_FRMCTR2 FCD1  
                         _INST_FRMCTR3 FCD0                   __end_of_Nut_dispense 5738  
   __end_of_generate_compartment_array 4D50          ?i2_generate_compartment_array 0001  
           _generate_compartment_array 4AEC                 __size_of_Bolt_dispense 00AE  
                    __size_of_drawBolt 0164                               ?i2_putch 0001  
               __size_of_Washer_remain 00BC                      _W_total_dispensed 0170  
                  __size_of_initialize 0152                      __size_of_initGLCD 03B6  
                         _current_set2 0070                           _INST_SWRESET FCE6  
                     _I2C_Master_Start 628C                       _I2C_Master_Write 6268  
              __end_of_Spacer_dispense 5698                      __size_of_is_valid 0E56  
                            _main$2694 00F6                       ___lwdiv@dividend 00C3  
                         _initial_time 0168                     __end_of_Nut_remain 53EE  
                 __size_of_Bolt_remain 00BC                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FC52  
                            _lcdNibble 57D2                               ?___awdiv 00C3  
                             ?___awmod 0001                               ?___lldiv 00C3  
                             ?___lwdiv 00C3                               ?___lwmod 00CA  
                            _final_set 01BC                 __size_of_glcdSetCOLMOD 005C  
                             ?_lcdInst 0001                               ?_drawNut 0001  
                             ?_initLCD 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Init 005C             __size_ofi2_I2C_Master_Read 0024  
           __size_ofi2_I2C_Master_Wait 0012                    glcdDrawRectangle@XE 00D1  
                  glcdDrawRectangle@YE 00D3                    glcdDrawRectangle@XS 00E3  
                  glcdDrawRectangle@YS 00D2             __size_ofi2_I2C_Master_Stop 0008  
                             _I2C_init 6036                    __end_of_INST_GAMSET FCE0  
                             ?_spiInit 0001                    __end_of_INST_COLMOD FCD4  
                             ?_spiSend 0001                    __end_of_INST_MADCTL FCD7  
                  __end_of_INST_DISPON FCDE                    __end_of_INST_IDMOFF FCD6  
                            _hexpowers FC6E                         ?_Spacer_remain 00ED  
                 GLCD_PIC@INST_DISPOFF FCBE                         __size_of_check 0066  
                  __end_of_INST_INVCTR FCD0                    __end_of_INST_INVOFF FCE2  
                     ___lwdiv@quotient 00C7                            ??i2___awdiv 0005  
                       Nut_remain@time 00ED                            ??i2___lldiv 0009  
                        _W_spacingTime 0097                          ?_I2C_sendData 0001  
                 GLCD_PIC@INST_FRMCTR1 FCB2                   GLCD_PIC@INST_FRMCTR2 FCB1  
                 GLCD_PIC@INST_FRMCTR3 FCB0                    __end_of_INST_PWCTR1 FCCF  
                  __end_of_INST_PWCTR2 FCCE                    __end_of_INST_PWCTR3 FCCD  
                  __end_of_INST_PWCTR4 FCCC                              _min_final 0164  
                  __end_of_INST_PWCTR5 FCCB                               ?_strncmp 0007  
                          ??i2___lwdiv 0005                    __end_of_INST_VMCTR1 FCCA  
                  __end_of_INST_SLPOUT FCE5                            ??i2___lwmod 000C  
                       __size_of_putch 0018                              _sec_final 0162  
                             _LCD_LEFT FCEC             __end_ofi2_I2C_Master_Start 62A4  
           __end_ofi2_I2C_Master_Write 627C                            ??i2_lcdInst 0003  
                       ___wmul@product 00CF                               _LATCbits 000F8B  
                             _LATDbits 000F8C                            ??i2_initLCD 0004  
                 GLCD_PIC@INST_SWRESET FCC6                            ??i2_isdigit 0001  
                        _operationTime 005E                               _INST_NOP FCE7  
                           spiSend@val 00C5                               i2u402_40 5EE0  
                             i2u411_40 5DDA                               i2u414_40 5F90  
                             i2u408_40 5B26                               i2u370_45 5962  
                             i2u370_46 5964                               i2u443_40 5F28  
                             i2u523_40 5AB6                               i2u515_40 39B4  
                             i2u611_40 0E22                               i2u443_47 5F1E  
                             i2u516_40 39C8                               i2u612_40 0E36  
                             i2u611_48 0E24                               i2u613_40 0E4A  
                             i2u612_48 0E38                               i2u470_40 5BF6  
                             i2u518_40 3A9A                               i2u614_40 0E5E  
                             i2u613_48 0E4C                               i2u471_40 5C06  
                             i2u614_48 0E60                              _operation 0066  
                             i2u472_40 5C16                               i2u448_40 5996  
                             i2u473_40 5C26                               i2u369_45 591E  
                             i2u369_46 5920                               i2u474_40 5C38  
                             i2u740_47 0136                               i2u485_40 5BB0  
                             i2u581_40 054A                               i2u741_47 018A  
                             i2u494_40 37C6                               i2u574_40 01EE  
                             i2u494_47 37BC                               i2u750_47 0554  
                             i2u742_47 0278                               i2u567_40 00AC  
                             i2u751_47 0584                               i2u743_47 02CC  
                             i2u576_40 025E                               i2u488_45 5D3C  
                             i2u760_47 0A44                               i2u752_47 05B4  
                             i2u744_47 0404                               i2u577_40 02EA  
                             i2u569_40 011C                               i2u489_45 6176  
                             i2u489_46 6178                               i2u761_47 0ADE  
                             i2u753_47 05E4                               i2u745_47 0416  
                             i2u498_40 3826                               i2u498_47 381C  
                             i2u770_47 0F4E                               i2u762_47 0B30  
                             i2u754_47 0614                               i2u746_47 0454  
                             i2u595_40 0998                               i2u771_47 0F6C  
                             i2u763_47 0B9E                               i2u755_47 0632  
                             i2u747_47 0482                               i2u772_47 6222  
                             i2u764_47 0C7E                               i2u756_47 0652  
                             i2u748_47 0498                               i2u597_40 0A92  
                             i2u773_47 5E5C                               i2u765_47 0CE8  
                             i2u757_47 066C                               i2u749_47 0534  
                             i2u774_47 5E90                               i2u766_47 0D06  
                             i2u758_47 081C                               i2u599_40 0B16  
                             i2u775_47 6236                               i2u767_47 0E96  
                             i2u759_47 096C                               i2u776_47 5904  
                             i2u768_47 0ED4                               i2u777_47 590E  
                             i2u769_47 0F16                               i2u778_47 5948  
                             i2u779_47 5952                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001          i2I2C_Master_Write@byteToWrite 0002  
                      glcdTransfer@cmd 00C6                      ??_Washer_dispense 00EF  
                        _Bolt_dispense 54AA                          _Washer_remain 51BA  
                            _nuts_data 006D                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 00CB                               i2___wmul 6134  
                        lcdNibble@data 00C4                               _B_remain 00A5  
                           printf@flag 00E9                          lcdNibble@temp 00C3  
                        ??_spiTransfer 00C3                             printf@prec 00E0  
                 glcdSetCOLMOD@rawData 00CA                      i2___awdiv@divisor 0003  
                    i2___awdiv@counter 0005                           ??_drawSpacer 00E4  
                         ??_drawWasher 00E4                               i2_printf 369C  
                       ??_I2C_sendData 00C6                         _LCD_HORZ_LIMIT FCF1  
                            copy_data0 574C                              copy_data1 576C  
                            copy_data2 578C                   interruptHandler@temp 0041  
                        _glcdSetCOLMOD 5CAC                               _N_remain 00A3  
                     __size_ofi2_putch 0014                             _EECON1bits 000FA6  
                             _S_remain 00A1                         _NeedToCloseLid 00BA  
                     ?_Spacer_dispense 00ED                               __Hrparam 0000  
                I2C_sendData@char_data 00C6                               __Lrparam 0000  
                             _W_remain 009F                     __CFG_BOREN$SBORDIS 000000  
                       ?_Bolt_dispense 00ED                     __end_of_drawSpacer 4594  
                   __end_of_drawWasher 3254                      Spacer_remain@time 00ED  
                     __size_of___awdiv 0086                       __size_of___awmod 0070  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 0084  
                       ?_Washer_remain 00ED                    _rotate_1compartment 00FE  
                     __size_of___lwdiv 0054                       __size_of___lwmod 0044  
                         ??_initialize 00C3                            _INST_GAMSET FCDF  
                          _INST_COLMOD FCD3                            _INST_MADCTL FCD6  
                          _INST_DISPON FCDD                            _INST_IDMOFF FCD5  
                     _interruptHandler 0008                            _INST_INVCTR FCCF  
                          _INST_INVOFF FCE1                       __size_of_lcdInst 0018  
                     __size_of_drawNut 02EC                            _INST_PWCTR1 FCCE  
                          _INST_PWCTR2 FCCD                            _INST_PWCTR3 FCCC  
                          _INST_PWCTR4 FCCB                            _INST_PWCTR5 FCCA  
                          _INST_VMCTR1 FCC9                            _INST_SLPOUT FCE4  
                      _I2C_Master_Init 5C4C                        _I2C_Master_Read 6092  
                     __size_of_initLCD 004C                            _current_set 00BE  
                      _I2C_Master_Wait 6202                  __size_of_Nut_dispense 00A0  
                           strcat@from 0003                        ??_Spacer_remain 00EF  
                      _I2C_Master_Stop 6284                 __end_of_LCD_HORZ_LIMIT FCF2  
                     __size_of_isdigit 0022                        ___lwdiv@divisor 00C5  
                      ___lwdiv@counter 00C9                               __ptext10 5558  
                             __ptext11 29F0                               __ptext20 53EE  
                             __ptext12 5276                               __ptext21 54AA  
                             __ptext13 55F8                               __ptext30 5FFA  
                             __ptext22 3254                               __ptext14 4200  
                             __ptext31 4D50                               __ptext23 61BE  
                             __ptext15 5332                               __ptext40 6284  
                             __ptext32 6064                               __ptext24 617E  
                             __ptext16 5698                               __ptext41 628C  
                             __ptext33 6250                               __ptext25 5F32  
                             __ptext17 4594                               __ptext50 622A  
                             __ptext42 6202                               __ptext34 60BC  
                             __ptext26 5D64                               __ptext18 6036  
                             __ptext51 58E0                               __ptext35 60E4  
                             __ptext27 61D6                               __ptext19 6092  
                             __ptext60 5AF4                               __ptext52 4880  
                             __ptext44 369C                               __ptext36 5C4C  
                             __ptext28 57D2                               __ptext61 5966  
                             __ptext53 5A70                               __ptext45 6216  
                             __ptext37 59EC                               __ptext29 4F04  
                             __ptext62 5EEC                               __ptext54 6272  
                             __ptext46 61A0                               __ptext38 610C  
                             __ptext63 5FB8                               __ptext55 6294  
                             __ptext47 5F76                               __ptext39 6268  
                             __ptext64 0FEA                               __ptext56 629C  
                             __ptext48 5DB8                               __ptext65 6134  
                             __ptext57 615A                               __ptext49 5E56  
                             __ptext66 5EA2                               __ptext58 623E  
                             __ptext67 5BE6                               __ptext59 5D08  
                             __ptext68 5B76                       __size_of_spiInit 003C  
                     __size_of_spiSend 000E                  __end_of_INST_VMOFCTR2 FCC9  
                             _fastener 0200                               _drawBolt 4F04  
                           _MADCTLbits 00B9                         _LCD_VERT_LIMIT FCF0  
                          _min_initial 016C                    __end_of_spiTransfer 60E4  
                       ?_glcdSetCOLMOD 0001                               _initGLCD 3AB6  
                     __size_of_strncmp 0086                               _hr_final 0166  
                           strcpy@from 0009                         i2_isdigit$2258 0002  
                  GLCD_PIC@INST_GAMSET FCBF                    GLCD_PIC@INST_COLMOD FCB3  
                  GLCD_PIC@INST_MADCTL FCB6                    GLCD_PIC@INST_DISPON FCBD  
                  GLCD_PIC@INST_IDMOFF FCB5                          __size_of_main 0BB0  
                             _is_valid 0FEA                    GLCD_PIC@INST_INVCTR FCAF  
                  GLCD_PIC@INST_INVOFF FCC1                             strncmp@len 000B  
                   __end_of_initialize 51BA                               _input_ch 006C  
                  GLCD_PIC@INST_PWCTR1 FCAE                    GLCD_PIC@INST_PWCTR2 FCAD  
                  GLCD_PIC@INST_PWCTR3 FCAC                    GLCD_PIC@INST_PWCTR4 FCAB  
                  GLCD_PIC@INST_PWCTR5 FCAA                    GLCD_PIC@INST_VMCTR1 FCA9  
                  GLCD_PIC@INST_SLPOUT FCC4                            _sec_initial 016A  
                             _temp_set 01E4                          ??i2_lcdNibble 0001  
                          ??_lcdNibble 00C3                               _prev_set 0194  
                             int$flags 007F                           _Nut_dispense 5698  
                            printf@idx 00DF                              printf@len 00E5  
                            printf@val 00E7            I2C_Master_Write@byteToWrite 00C4  
                            putch@data 00C5               __end_of_I2C_Master_Start 6294  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 6272  
                           _INTCONbits 000FF2                           _motorStart_0 007E  
                         _motorStart_1 007C                           _motorStart_2 007A  
                         _motorStart_3 0078                 __end_of_LCD_VERT_LIMIT FCF1  
                    _B_total_dispensed 0176                               isdigit@c 00C5  
                    _N_total_dispensed 0174                             _INST_CASET FCDC  
                           _INST_IDMON FCD4                             _INST_INVON FCE0  
                           _INST_RASET FCDB                               intlevel2 0000  
                           _INST_RAMWR FCDA                             _INST_TEOFF FCD8  
          ?_generate_compartment_array 00C3                             _INST_NORON FCE2  
                           _INST_PTLAR FCD9                             _INST_SLPIN FCE5  
                           _INST_PTLON FCE3                          _LCD_SIZE_HORZ FCEF  
                         _timerCounter 006A                       ___lwmod@dividend 00CA  
                        _LCD_SIZE_VERT FCEE                       ___lldiv@dividend 00C3  
                   GLCD_PIC@INST_CASET FCBC                     GLCD_PIC@INST_IDMON FCB4  
                            strncmp@s1 0007                              strncmp@s2 0009  
                   GLCD_PIC@INST_INVON FCC0                     GLCD_PIC@INST_RASET FCBB  
                   GLCD_PIC@INST_RAMWR FCBA                     GLCD_PIC@INST_TEOFF FCB8  
                   GLCD_PIC@INST_NORON FCC2                     GLCD_PIC@INST_PTLAR FCB9  
                           _OSCCONbits 000FD3                     GLCD_PIC@INST_SLPIN FCC5  
                   GLCD_PIC@INST_PTLON FCC3                        ??_Bolt_dispense 00EF  
                      ??_Washer_remain 00EF                               printf@ap 00E3  
                             printf@cp 00E1             glcdDrawRectangle@colorData 00E0  
                 __end_of_I2C_sendData 6134                __end_of_I2C_Master_Init 5CAC  
              __end_of_I2C_Master_Read 60BC                __end_of_I2C_Master_Wait 6216  
              __end_of_I2C_Master_Stop 628C                            lcdInst@data 00C5  
                        ?_glcdTransfer 00C6                            _motorStop_0 007D  
                          _motorStop_1 007B                            _motorStop_2 0079  
                          _motorStop_3 0077                            _spacingTime 00FA  
                  __end_ofi2_lcdNibble 5966                               strcat@cp 0005  
                             strcat@to 0001                               strcmp@s1 0001  
                             strcmp@s2 0003                       ___lldiv@quotient 00CB  
                      ___lwmod@divisor 00CC                               strcpy@cp 000B  
                             strcpy@to 0007                            _spiTransfer 60BC  
                      ___lwmod@counter 00CE                      GLCD_PIC@INST_TEON FCB7  
                          _SSPCON1bits 000FC6                            _SSPCON2bits 000FC5  
                      ??_glcdSetCOLMOD 00C9                            _prev_number 0140  
        i2I2C_Master_Read@receivedByte 0003                       GLCD_PIC@INST_NOP FCC7  
                      _Washer_dispense 5558                          ??_Bolt_remain 00EF  
                        ?_drawTeamName 0001  
